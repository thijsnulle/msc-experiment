{"outputs": [{"text": "return pd.DataFrame(data[column]).apply(\n        lambda x: ' '.join([word for word in re.sub(\"[^A-Za-z0-9]\", \" \", x).split() if word not in STOPWORDS]),\n        axis=1)", "tokens": ["return", " pd", ".", "DataFrame", "(", "data", "[", "column", "])", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " re", ".", "sub", "(", "\"", "[", "^", "A", "-", "Z", "a", "-", "z", "0", "-", "9", "]\"", ",", " \"", " \"", ",", " x", ")", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", ",", "\n", "        ", "axis", "=", "1", ")", "\n", "\n", "if"], "logprobs": [-2.616770029067993, -1.6396937370300293, -0.0003939091111533344, -0.11375221610069275, -0.5364131927490234, -0.35509032011032104, -0.6344448924064636, -0.05642875283956528, -0.7834005355834961, -0.08770211786031723, -1.1465904712677002, -0.030684610828757286, -1.1281695365905762, -0.03748432919383049, -0.0397222600877285, -0.3165312707424164, -0.0010876698652282357, -1.1777839660644531, -0.003039861097931862, -0.000559173640795052, -6.496695277746767e-05, -1.0263340473175049, -0.9277452826499939, -0.045094624161720276, -0.0006355411605909467, -0.0008783058729022741, -0.4327007234096527, -6.41325386823155e-05, -0.9199991822242737, -0.17814703285694122, -2.027500629425049, -0.4029943346977234, -0.7726156711578369, -1.7206099033355713, -0.00011228884250158444, -0.0023676715791225433, -0.0022286358289420605, -9.894321920000948e-06, -2.9801878554280847e-05, -0.4971991181373596, -0.0003860443539451808, -0.0002205128694185987, -2.193760871887207, -0.000583597575314343, -0.08679655194282532, -0.02440621331334114, -0.00018809456378221512, -0.13234329223632812, -0.08406834304332733, -0.012971191667020321, -0.12839989364147186, -0.07228699326515198, -0.26137879490852356, -0.12051200866699219, -0.3715519905090332, -0.0006814065272919834, -0.0035618215333670378, -9.536738616588991e-07, -8.702239938429557e-06, -9.30981186684221e-05, -1.0847986231965479e-05, -0.20160287618637085, -0.9699748754501343, -0.1786232590675354, -0.03313547745347023, -0.03535081818699837, -0.10285115987062454, -0.03142514452338219, -0.9351076483726501, -0.6521068215370178, -0.04188843443989754, -0.8849307298660278], "finish_reason": "stop"}], "metrics": {"energy": 190.1883527450561, "energy_per_token": 2.6415048992368906, "time": 5.86171, "time_per_token": 0.08141263888888889}}
{"outputs": [{"text": "df = data[data[\"column\"] == column]\n    # Convert the text to a list of words and remove the stopwords\n    df[\"text\"] = df[\"text\"].apply(lambda x: [word for word in x.lower().split() if word not in STOPWORDS])\n    return df", "tokens": ["df", " =", " data", "[", "data", "[", "\"", "column", "\"", "]", " ==", " column", "]", "\n", "    ", "#", " Convert", " the", " text", " to", " a", " list", " of", " words", " and", " remove", " the", " stop", "words", "\n", "    ", "df", "[", "\"", "text", "\"", "]", " =", " df", "[", "\"", "text", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " [", "word", " for", " word", " in", " x", ".", "lower", "()", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.6035387516021729, -0.08289726823568344, -0.5102398991584778, -0.5428462624549866, -1.6108896732330322, -0.1279810518026352, -1.4317890405654907, -0.8872177004814148, -0.0634833499789238, -0.0028613361064344645, -0.13471442461013794, -0.009547997266054153, -0.04198777303099632, -0.1616942286491394, -0.18767967820167542, -2.974118709564209, -3.588326930999756, -0.7341221570968628, -0.7075662016868591, -2.325273275375366, -0.9453267455101013, -0.36644482612609863, -0.24315884709358215, -0.20710992813110352, -2.5936427116394043, -0.18935419619083405, -2.245485305786133, -0.20551510155200958, -0.04362868145108223, -0.17513974010944366, -0.0011120808776468039, -0.5785802602767944, -0.1654966175556183, -0.245292529463768, -0.9923607707023621, -0.39029011130332947, -0.000912369170691818, -0.001334610627964139, -0.06693482398986816, -0.048326004296541214, -0.00865340419113636, -0.050783805549144745, -0.0015079329023137689, -0.0014463926199823618, -0.006440123077481985, -0.1361180543899536, -0.001459129503928125, -0.07752716541290283, -0.13635888695716858, -0.00013052565918769687, -0.7291358709335327, -0.33675310015678406, -0.09333642572164536, -0.0005819296347908676, -0.00023231192608363926, -2.0740914344787598, -0.004863693844527006, -2.094348430633545, -0.0008434075862169266, -0.00456683523952961, -0.03870633989572525, -0.009275912307202816, -0.05842505022883415, -0.06430575251579285, -0.013443771749734879, -0.0002586507180240005, -0.0038720411248505116, -5.960462772236497e-07, -2.276871418871451e-05, -6.401333666872233e-05, -7.510157047363464e-06, -0.031653158366680145, -0.0018748340662568808, -0.13327668607234955, -0.9046338796615601, -0.021285781636834145, -0.7071304321289062, -0.0178427342325449, -1.295432686805725], "finish_reason": "stop"}], "metrics": {"energy": 82.55777715015411, "energy_per_token": 1.0450351537994191, "time": 3.591085, "time_per_token": 0.045456772151898736}}
{"outputs": [{"text": "# Filter out STOPWORDS from the text column\n    stop_words = STOPWORDS & set(data[column])\n    data[column] = data[column].apply(lambda x: ' '.join(re.sub(r\"\\b({})\\b\".format('|'.join(stop_words)), ' ', x).split()))\n\n    return data", "tokens": ["#", " Filter", " out", " ST", "OP", "W", "OR", "DS", " from", " the", " text", " column", "\n", "    ", "stop", "_", "words", " =", " ST", "OP", "W", "OR", "DS", " &", " set", "(", "data", "[", "column", "])", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "re", ".", "sub", "(", "r", "\"", "\\", "b", "({", "})\\", "b", "\"", ".", "format", "('", "|", "'", ".", "join", "(", "stop", "_", "words", "))", ",", " '", " '", ",", " x", ")", ".", "split", "()))", "\n", "\n", "    ", "return", " data"], "logprobs": [-0.97762131690979, -4.282708168029785, -0.9483882188796997, -3.4429514408111572, -0.00013433984713628888, -0.005825209431350231, -4.184158387943171e-05, -2.5033637939486653e-05, -0.5187805891036987, -0.7075703144073486, -1.3742562532424927, -0.277445524930954, -0.3064180016517639, -0.0033852909691631794, -3.9546377658843994, -1.6256415843963623, -0.47182193398475647, -0.14221255481243134, -0.4236964285373688, -4.410734163684538e-06, -4.8993817472364753e-05, -0.00019476900342851877, -8.4638240878121e-06, -3.059901714324951, -0.3934776186943054, -0.007736481260508299, -0.20649349689483643, -0.028300615027546883, -0.015989650040864944, -0.7152729630470276, -0.022548595443367958, -0.13037635385990143, -0.6583507061004639, -0.19780324399471283, -0.0012737740762531757, -0.003321014577522874, -0.03229129686951637, -0.36689814925193787, -0.0017481058603152633, -0.0005435658385977149, -0.0027309288270771503, -0.0010977915953844786, -0.5377656817436218, -0.002461025258526206, -0.09473837167024612, -0.12517417967319489, -0.0006576997111551464, -1.3686310052871704, -0.0018055817345157266, -0.0007681279676035047, -4.3987260141875595e-05, -0.6166050434112549, -0.33137163519859314, -3.158996332786046e-05, -0.14077147841453552, -0.24653273820877075, -0.5690003037452698, -1.7777653932571411, -0.832370936870575, -0.33821412920951843, -0.5639079809188843, -0.26630502939224243, -0.0011660212185233831, -0.10767113417387009, -0.0009515525307506323, -0.0007995745982043445, -0.5442472696304321, -0.0002650863316375762, -0.0001821352052502334, -1.2516897186287679e-05, -3.516612196108326e-05, -0.006382912863045931, -0.22341807186603546, -0.0009434539824724197, -0.000196556793525815, -0.005697084590792656, -0.0005663221818394959, -0.7567110657691956, -0.004786462057381868, -0.013337322510778904, -0.08638221770524979, -0.14038752019405365, -0.0012299600057303905, -0.03456908091902733, -0.019387979060411453, -0.0849793404340744, -0.8269185423851013, -0.01171930879354477, -0.17417742311954498, -0.01519861165434122], "finish_reason": "stop"}], "metrics": {"energy": 96.93656249046327, "energy_per_token": 1.0770729165607031, "time": 4.002594, "time_per_token": 0.04447326666666667}}
{"outputs": [{"text": "# Define a function that takes in data as an argument\n    # and returns the modified dataframe\n    def remove_stopwords(data):\n        # Get the column of the dataframe\n        # Convert it to a list\n        # Iterate over the list\n        # Remove words that are in the list\n        # Return modified dataframe\n        return data[column].map(lambda x: ' '.join([word for word in x.split(' ') if word not in STOPWORDS]))\n\n    return remove_stopwords(data)\n\ntask = task_func\n\n\"\"\"\nIn the above function definition:\n\n- The STOPWORDS set contains common English stopwords that should be removed from the text column of the DataFrame.\n- The task_func function is defined with the data parameter as a keyword argument and returns the modified dataframe.\n- The task parameter is set to the task_func function with the data and column arguments.\n\nThe task parameter is passed to the register_task function, which registers the task function as the task with a name of 'task_func'. The register_task function is imported from the utils.", "tokens": ["#", " Define", " a", " function", " that", " takes", " in", " data", " as", " an", " argument", "\n", "    ", "#", " and", " returns", " the", " modified", " data", "frame", "\n", "    ", "def", " remove", "_", "stop", "words", "(", "data", "):", "\n", "        ", "#", " Get", " the", " column", " of", " the", " data", "frame", "\n", "        ", "#", " Convert", " it", " to", " a", " list", "\n", "        ", "#", " Iter", "ate", " over", " the", " list", "\n", "        ", "#", " Remove", " words", " that", " are", " in", " the", " list", "\n", "        ", "#", " Return", " modified", " data", "frame", "\n", "        ", "return", " data", "[", "column", "]", ".", "map", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "('", " '", ")", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "\n", "    ", "return", " remove", "_", "stop", "words", "(", "data", ")", "\n", "\n", "task", " =", " task", "_", "func", "\n", "\n", "\"", "\"", "\"", "\n", "In", " the", " above", " function", " definition", ":", "\n", "\n", "-", " The", " ST", "OP", "W", "OR", "DS", " set", " contains", " common", " English", " stop", "words", " that", " should", " be", " removed", " from", " the", " text", " column", " of", " the", " Data", "Frame", ".", "\n", "-", " The", " task", "_", "func", " function", " is", " defined", " with", " the", " data", " parameter", " as", " a", " keyword", " argument", " and", " returns", " the", " modified", " data", "frame", ".", "\n", "-", " The", " task", " parameter", " is", " set", " to", " the", " task", "_", "func", " function", " with", " the", " data", " and", " column", " arguments", ".", "\n", "\n", "The", " task", " parameter", " is", " passed", " to", " the", " register", "_", "task", " function", ",", " which", " registers", " the", " task", " function", " as", " the", " task", " with", " a", " name", " of", " '", "task", "_", "func", "'", ".", " The", " register", "_", "task", " function", " is", " imported", " from", " the", " utils", "."], "logprobs": [-0.97762131690979, -3.7991228103637695, -0.9253591895103455, -1.4517841339111328, -1.4689042568206787, -2.971566677093506, -1.7403056621551514, -2.7349462509155273, -1.9897541999816895, -2.1398868560791016, -0.3856997489929199, -1.3389029502868652, -0.03840719908475876, -0.9639651775360107, -0.7022454142570496, -0.7198948264122009, -0.7834175229072571, -0.43304118514060974, -0.4427173435688019, -2.761723041534424, -0.38934287428855896, -0.39134255051612854, -0.8504297137260437, -0.4665461778640747, -0.012172461487352848, -0.07934045046567917, -0.008805257268249989, -0.04949275404214859, -0.681576669216156, -0.9661930203437805, -0.0034632247406989336, -0.05786638706922531, -0.39552563428878784, -2.9210541248321533, -0.24736060202121735, -1.9246726036071777, -2.1111955642700195, -1.7069761753082275, -0.34012627601623535, -0.2675996422767639, -0.6503361463546753, -0.002875956939533353, -1.74610435962677, -3.0600712299346924, -0.7457593083381653, -0.11939408630132675, -0.23218609392642975, -0.40511807799339294, -0.38827210664749146, -0.00193813256919384, -0.1511438935995102, -2.222487449645996, -0.001447225920855999, -0.5527050495147705, -0.37804388999938965, -0.13248029351234436, -0.8249197006225586, -0.029292427003383636, -0.02913311868906021, -1.873306155204773, -2.867764472961426, -0.612851083278656, -0.3060409724712372, -0.40880516171455383, -0.32253414392471313, -3.4782838821411133, -2.1778244972229004, -0.02753537893295288, -0.22223696112632751, -1.6547952890396118, -2.836454153060913, -0.47610223293304443, -0.1276821792125702, -0.02516024559736252, -0.13635055720806122, -1.0196596384048462, -0.23548460006713867, -0.217246413230896, -0.16431015729904175, -0.01363946869969368, -0.020578453317284584, -3.0202927589416504, -0.006470562424510717, -0.1516929715871811, -0.1530832201242447, -0.006905499845743179, -0.5394443273544312, -0.0009913297835737467, -0.0006307758158072829, -0.0001646144810365513, -0.6408838629722595, -0.6245118379592896, -0.018393661826848984, -0.0008317348547279835, -0.0023438858333975077, -0.4449460208415985, -0.0033635490108281374, -0.09293978661298752, -1.3031425476074219, -0.00023827097902540118, -0.001580062322318554, -0.07088228315114975, -0.03502419963479042, -0.2642197906970978, -0.00087878224439919, -0.013029555790126324, -1.5497195136049413e-06, -4.088794958079234e-05, -3.45700973412022e-05, -8.583032467868179e-06, -0.021487649530172348, -0.030407000333070755, -0.36149945855140686, -0.012376295402646065, -1.1234534978866577, -0.5192791223526001, -0.0008556757238693535, -0.0002366024418734014, -8.284702198579907e-05, -0.2219245880842209, -0.02981209196150303, -0.26457157731056213, -0.49156564474105835, -0.031864263117313385, -3.331214427947998, -2.0483286380767822, -0.4728715717792511, -0.002363271312788129, -0.0026529375463724136, -0.23643280565738678, -0.5224111080169678, -3.1774535179138184, -0.012920944020152092, -0.0001991788885788992, -0.12766540050506592, -4.330147743225098, -1.2958248853683472, -1.1982704401016235, -1.7108263969421387, -2.575361967086792, -2.8170766830444336, -0.002535939682275057, -0.20068307220935822, -0.8576531410217285, -1.1390953063964844, -2.590691328048706, -1.0132738680113107e-05, -0.0007858763565309346, -7.629365427419543e-06, -2.1457441107486375e-05, -2.2614948749542236, -0.8709349036216736, -0.9470720291137695, -0.014587417244911194, -0.0821705088019371, -0.0046726795844733715, -1.466444969177246, -0.9687648415565491, -0.28596991300582886, -0.09029944241046906, -0.1594543755054474, -0.4207259714603424, -0.29819774627685547, -0.5688873529434204, -2.3640713691711426, -0.30381616950035095, -0.6391690969467163, -0.003412734717130661, -0.13683223724365234, -0.1088976040482521, -0.27334314584732056, -0.15913498401641846, -1.5486695766448975, -0.28369224071502686, -0.004067363683134317, -0.25954028964042664, -1.2717101573944092, -0.5889318585395813, -2.0212483406066895, -0.848318874835968, -3.6100244522094727, -2.7892045974731445, -1.0339335203170776, -1.6704483032226562, -1.9564210176467896, -0.34499940276145935, -1.787096619606018, -2.118171215057373, -0.16826000809669495, -0.1353306919336319, -0.18195794522762299, -0.06773412227630615, -0.46149173378944397, -0.03224305063486099, -0.3281278610229492, -0.2028617411851883, -1.2547428607940674, -3.748814821243286, -0.10194715857505798, -0.8218346238136292, -0.05811859294772148, -0.4819018542766571, -0.12957577407360077, -0.0411369614303112, -0.0006775943911634386, -0.0146919721737504, -2.057098627090454, -0.25729379057884216, -0.8349404335021973, -1.9994597434997559, -0.018048109486699104, -1.1111836433410645, -0.9397444725036621, -0.032278139144182205, -0.4282071590423584, -1.7058498859405518, -0.4193415343761444, -0.8178924322128296, -0.4034673869609833, -2.4133806228637695, -0.26394379138946533, -0.08326894789934158, -4.263158798217773, -0.6006113290786743, -0.17770510911941528, -0.5912866592407227, -0.904069185256958, -0.07096356898546219, -0.7086451649665833, -0.20185795426368713, -0.02833978272974491, -2.5371029376983643, -0.9047632813453674, -2.8296103477478027, -0.6986898183822632, -2.811415195465088, -3.1503806114196777, -0.6191809177398682, -0.26962506771087646, -0.9725301861763, -1.8271886110305786, -0.4035849869251251, -0.11074009537696838, -0.07239355891942978, -0.152483731508255, -2.7503347396850586, -1.294287919998169, -0.012769479304552078, -0.016859538853168488, -0.04078441858291626, -1.8127001523971558, -2.188103437423706, -0.01316862739622593, -0.33741286396980286, -3.094186782836914, -0.7013508081436157], "finish_reason": "length"}], "metrics": {"energy": 347.4332186899185, "energy_per_token": 1.357161010507494, "time": 13.00776, "time_per_token": 0.0508115625}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n\n    # Create a list of words that should not be considered as stopwords\n    non_stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours',\n                     'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself',\n                     'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who',\n                     'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been',\n                     'being', 'have', 'has', 'had', 'having', 'do", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " words", " that", " should", " not", " be", " considered", " as", " stop", "words", "\n", "    ", "non", "_", "stop", "words", " =", " ['", "i", "'", ",", " '", "me", "'", ",", " '", "my", "'", ",", " '", "mys", "elf", "'", ",", " '", "we", "'", ",", " '", "our", "'", ",", " '", "ours", "'", ",", " '", "ours", "elves", "'", ",", " '", "you", "'", ",", " '", "your", "'", ",", " '", "y", "ours", "'", ",", "\n", "                ", "     ", "'", "your", "self", "'", ",", " '", "y", "ours", "elves", "'", ",", " '", "he", "'", ",", " '", "him", "'", ",", " '", "his", "'", ",", " '", "him", "self", "'", ",", " '", "she", "'", ",", " '", "her", "'", ",", " '", "hers", "'", ",", " '", "her", "self", "'", ",", "\n", "                ", "     ", "'", "it", "'", ",", " '", "its", "'", ",", " '", "its", "elf", "'", ",", " '", "they", "'", ",", " '", "the", "m", "'", ",", " '", "their", "'", ",", " '", "the", "irs", "'", ",", " '", "the", "ms", "elves", "'", ",", " '", "what", "'", ",", " '", "which", "'", ",", " '", "who", "'", ",", "\n", "                ", "     ", "'", "wh", "om", "'", ",", " '", "this", "'", ",", " '", "that", "'", ",", " '", "these", "'", ",", " '", "those", "'", ",", " '", "am", "'", ",", " '", "is", "'", ",", " '", "are", "'", ",", " '", "was", "'", ",", " '", "were", "'", ",", " '", "be", "'", ",", " '", "been", "'", ",", "\n", "                ", "     ", "'", "being", "'", ",", " '", "have", "'", ",", " '", "has", "'", ",", " '", "had", "'", ",", " '", "having", "'", ",", " '", "do"], "logprobs": [-1.6035387516021729, -0.08289726823568344, -0.9633172154426575, -0.016746066510677338, -0.09625162184238434, -0.048063699156045914, -0.011556349694728851, -0.13642793893814087, -0.03638463467359543, -1.2209887504577637, -0.0006467396160587668, -0.6131454706192017, -3.188039779663086, -0.19934186339378357, -2.158921718597412, -0.18919190764427185, -2.3583009243011475, -0.8760109543800354, -1.250328779220581, -1.527864694595337, -0.010135846212506294, -2.721134662628174, -0.49608179926872253, -0.18254081904888153, -0.0435759574174881, -0.20913580060005188, -0.0012966329231858253, -1.7449400424957275, -0.0704638659954071, -0.021718405187129974, -0.4797300696372986, -0.19198258221149445, -2.142319679260254, -2.2332682609558105, -0.004356417804956436, -0.00017617580306250602, -0.014272983185946941, -0.149326890707016, -0.0005667987279593945, -0.00020215852418914437, -0.0025997909251600504, -0.038362689316272736, -0.001023007556796074, -6.913899414939806e-05, -0.005033321678638458, -0.05808631330728531, -0.0005133026279509068, -0.00420365110039711, -4.1960789531003684e-05, -0.018243491649627686, -0.13986267149448395, -0.00013910756388213485, -0.0001357701694360003, -0.004776140209287405, -0.03761430084705353, -0.0002824861148837954, -3.5523738915799186e-05, -0.010005793534219265, -0.000912250077817589, -0.0012317459331825376, -3.7788631743751466e-05, -0.029695682227611542, -0.002026529749855399, -0.00021407696476671845, -0.002878334140405059, -0.00020323118951637298, -0.12629848718643188, -0.014212928712368011, -0.00023100091493688524, -9.560128091834486e-05, -0.08872708678245544, -0.008334852755069733, -0.0008895016508176923, -5.066266385256313e-05, -0.24239306151866913, -0.0180054921656847, -3.576214658096433e-05, -0.0016925308154895902, -0.00014625910262111574, -0.8693082928657532, -0.041932787746191025, -0.14419031143188477, -0.0005641775787808001, -0.000734178873244673, -0.00021479207498487085, -0.00032145579461939633, -1.3351351299206726e-05, -0.003149075899273157, -0.0042235939763486385, -9.179073458653875e-06, -5.864924969500862e-05, -0.0007918321643956006, -2.455681169521995e-05, -0.0025448575615882874, -0.01307026669383049, -2.992108420585282e-05, -5.483612312673358e-06, -0.00023457636416424066, -0.00029690624796785414, -4.5536911784438416e-05, -5.960446742392378e-06, -0.0004070168943144381, -0.0008348317351192236, -8.177422569133341e-05, -7.986990567587782e-06, -0.0009434539824724197, -0.017995774745941162, -4.756337511935271e-05, -0.00012683063687290996, -1.7881233361549675e-05, -0.00303082843311131, -0.00028153270250186324, -1.4424220353248529e-05, -6.6756979322235566e-06, -0.0009608419495634735, -7.712543447269127e-05, -5.6622808187967166e-05, -9.179073458653875e-06, -0.003298677271232009, -0.006693679373711348, -0.00014494798961095512, -1.490105023549404e-05, -0.27166548371315, -6.186770770000294e-05, -0.001329015358351171, -0.0006429274217225611, -9.655486064730212e-05, -0.05987868085503578, -5.185469490243122e-05, -0.0004960260121151805, -0.0008753282018005848, -0.00023362292267847806, -1.2516897186287679e-05, -4.410734163684538e-06, -0.0005553610390052199, -4.7801782784517854e-05, -0.00012754580529872328, -1.7881377516459906e-06, -0.00025555206229910254, -5.364403477869928e-06, -0.0044684563763439655, -0.0003147821989841759, -8.22540732769994e-06, -0.0008163695456460118, -0.00021145492792129517, -7.390948667307384e-06, -2.861018856492592e-06, -0.00015686711412854493, -0.0007943335804156959, -0.0003573255962692201, -2.95634672511369e-05, -3.576272320060525e-06, -0.0002015625941567123, -0.00021026308240834624, -3.707340147229843e-05, -1.311301275563892e-06, -0.00023922442051116377, -0.00012754580529872328, -0.0005255748401395977, -0.0002012050390476361, -6.318072337307967e-06, -0.0008948612376116216, -0.00048268112004734576, -0.0014184186002239585, -3.2066785934148356e-05, -0.0016486160457134247, -3.7788631743751466e-05, -0.009656031616032124, -0.0023437668569386005, -0.00011991735664196312, -1.4662635294371285e-05, -0.011352584697306156, -0.0007757514831610024, -0.00011157367407577112, -3.1709168979432434e-05, -0.9105886220932007, -0.0007645544828847051, -9.417090768693015e-05, -0.00014006110723130405, -0.011597239412367344, -3.0397906812140718e-05, -8.523101132595912e-05, -0.00046564225340262055, -0.057348381727933884, -0.0004396664153318852, -0.00015925093612167984, -1.6212332411669195e-05, -0.001855796086601913, -0.002017844934016466, -4.565611743601039e-05, -7.748573807475623e-06, -0.00029023250681348145, -6.365573790390044e-05, -1.883488948806189e-05, -2.7179348762729205e-05, -0.00037424711626954377, -5.280832192511298e-05, -0.00024732868769206107, -2.861018856492592e-06, -0.0002903516869992018, -6.532455881824717e-05, -0.0022251864429563284, -5.793403761344962e-05, -0.0016301688738167286, -0.016556138172745705, -5.435795901576057e-05, -6.6756979322235566e-06, -0.0004966217675246298, -0.00361016602255404, -3.075552376685664e-05, -8.702239938429557e-06, -0.00030894274823367596, -0.000356253091013059, -0.0001472126314183697, -1.0251946150674485e-05, -0.0004159538948442787, -0.0032844191882759333, -1.1324817933200393e-05, -2.50339189733495e-06, -0.00026079590315930545, -7.557583012385294e-05, -1.2278481335670222e-05, -3.099436753473128e-06, -0.0009011736838147044, -0.005067124962806702, -2.3364747903542593e-05, -6.079655122448457e-06, -0.012691443786025047, -0.0006597249885089695, -0.00011407678539399058, -2.002696055569686e-05, -0.2682488262653351, -1.764281842042692e-05, -0.00010597144137136638, -9.405170567333698e-05, -0.0009472650708630681, -3.540453326422721e-05, -7.033323527139146e-06, -0.0003407612966839224, -0.00019333878299221396, -7.390948667307384e-06, -2.3841830625315197e-06, -8.391981828026474e-05, -0.0028511134441941977, -2.586808113846928e-05, -2.622600959512056e-06, -6.139089964563027e-05, -0.0004953111056238413, -7.533743337262422e-05, -4.6491513785440475e-06, -0.00021705655672121793, -0.00015770144818816334, -0.0002087136817863211, -7.748573807475623e-06, -0.0001829695247579366, -0.000289159914245829], "finish_reason": "length"}], "metrics": {"energy": 325.4215263023376, "energy_per_token": 1.2711778371185063, "time": 12.61251, "time_per_token": 0.0492676171875}}
{"outputs": [{"text": "data = pd.DataFrame(data, copy=True)\n\n    if column not in data.columns:\n        raise ValueError(f\"Invalid column name: {column}. Please provide a valid column name.\")\n    if not isinstance(data[column], pd.Series):\n        raise ValueError(f\"Invalid data type: {type(data[column])}. Expected pandas.Series.\")\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"Invalid data type: {type(data)}. Expected a pandas.DataFrame.\")\n\n    data[column] = data[column].astype(str)\n\n    # Remove English stopwords\n    # https://github.com/NaturalTextProcessor/Stopwatch/blob/master/stopwatch/stopwatch.py#L189\n    pattern = re.compile(r'\\b(' + '|'.join(STOPWORDS) + r')\\b')\n    data[column] = pattern.sub('', data[column])\n\n    return data", "tokens": ["data", " =", " pd", ".", "DataFrame", "(", "data", ",", " copy", "=", "True", ")", "\n", "\n", "    ", "if", " column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " column", " name", ":", " {", "column", "}", ".", " Please", " provide", " a", " valid", " column", " name", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", "[", "column", "]", ",", " pd", ".", "Series", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " data", " type", ":", " {", "type", "(", "data", "[", "column", "]", ")}", ".", " Expected", " pandas", ".", "Series", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " data", " type", ":", " {", "type", "(", "data", ")}", ".", " Expected", " a", " pandas", ".", "DataFrame", ".", "\"", ")", "\n", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "\n", "    ", "#", " Remove", " English", " stop", "words", "\n", "    ", "#", " https", "://", "github", ".", "com", "/", "N", "atural", "Text", "Processor", "/", "Stop", "watch", "/", "blob", "/", "master", "/", "stop", "watch", "/", "stop", "watch", ".", "py", "#", "L", "1", "8", "9", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "r", "'\\", "b", "('", " +", " '", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " r", "')\\", "b", "')", "\n", "    ", "data", "[", "column", "]", " =", " pattern", ".", "sub", "('", "'", ",", " data", "[", "column", "])", "\n", "\n", "    ", "return", " data"], "logprobs": [-2.536949396133423, -2.6011404991149902, -1.535836100578308, -0.006410511676222086, -0.17275995016098022, -0.06092548742890358, -0.01064975280314684, -2.260313034057617, -0.9067341089248657, -0.03120667114853859, -0.4125957489013672, -0.011013668961822987, -0.0883713960647583, -0.9987200498580933, -0.0005886013968847692, -1.8795716762542725, -0.7837855219841003, -0.6503003239631653, -1.4066597032069694e-05, -0.005517966579645872, -1.0158346891403198, -0.020725470036268234, -0.011346455663442612, -0.006234482862055302, -0.0014000862138345838, -0.19183509051799774, -0.560194730758667, -3.1470757676288486e-05, -0.11316721141338348, -0.5249239802360535, -0.1431250125169754, -2.0255022048950195, -0.07504770904779434, -0.15775007009506226, -0.2662588953971863, -0.14170759916305542, -0.007579379249364138, -1.4362082481384277, -0.04184602200984955, -3.1336934566497803, -1.826167345046997, -0.05326158180832863, -0.025042597204446793, -0.07108327001333237, -0.04211670532822609, -0.13021321594715118, -0.003469164716079831, -0.0002308817347511649, -0.001167807262390852, -2.9328699111938477, -0.8894996643066406, -0.745196521282196, -0.1768333613872528, -0.0002588890492916107, -0.05580561235547066, -0.26956087350845337, -0.000974656839389354, -0.06737913191318512, -0.14564873278141022, -0.2939995527267456, -8.702239938429557e-06, -0.039124615490436554, -0.028483113273978233, -0.0054591624066233635, -0.0005806190893054008, -0.06660988926887512, -1.169805645942688, -0.0005893162451684475, -0.0011676882859319448, -0.08834214508533478, -0.0069365170784294605, -0.5250466465950012, -0.8183373212814331, -0.08726587891578674, -1.2629175186157227, -0.07383999973535538, -0.11414111405611038, -0.0004627825692296028, -0.007510165683925152, -0.00989461038261652, -0.0004209585895296186, -0.023649750277400017, -0.00956275686621666, -0.10722821205854416, -2.1991682052612305, -1.124812364578247, -0.12803559005260468, -0.006526228040456772, -0.15192699432373047, -0.03247006610035896, -0.0009213017183355987, -0.0009124883217737079, -1.1010955572128296, -0.14648990333080292, -0.478222131729126, -0.438080370426178, -9.60780744208023e-05, -0.22394822537899017, -1.087891697883606, -0.02501039206981659, -0.00041392818093299866, -0.0011975744273513556, -0.0035761946346610785, -0.001328420010395348, -0.0003678122302517295, -0.01479874737560749, -0.026849403977394104, -0.0002907091984525323, -0.0007176207727752626, -0.0205860435962677, -0.0011175584513694048, -0.020044036209583282, -0.016710428521037102, -0.00870292168110609, -0.0018507986096665263, -0.0007058274932205677, -0.0006833125371485949, -0.00014888131408952177, -0.0024801704566925764, -0.0029615373350679874, -0.0013181816320866346, -0.0123963113874197, -2.7088143825531006, -0.1293126791715622, -0.24717628955841064, -0.0030214395374059677, -0.03430509939789772, -0.0004861365014221519, -0.0002215855201939121, -0.0005298641044646502, -0.1663695126771927, -0.0008472190820612013, -1.3124942779541016, -0.14061954617500305, -0.006196809466928244, -0.002254327293485403, -0.00948092807084322, -0.048343949019908905, -0.001470794901251793, -0.0002450642641633749, -0.0016687290044501424, -0.007877000607550144, -3.1077208518981934, -0.0004397855664137751, -0.1393309086561203, -0.05491119250655174, -0.0038647972978651524, -0.46434909105300903, -1.0086477994918823, -0.0006152882124297321, -1.0643895864486694, -0.9794389605522156, -2.2509236335754395, -0.013302621431648731, -0.011272669769823551, -1.2354300022125244, -0.0007320346776396036, -3.539309501647949, -1.9296610355377197, -0.00044586253352463245, -1.7174010276794434, -1.2636104656849056e-05, -0.0013503251830115914, -5.280832192511298e-05, -4.124094486236572, -0.987510621547699, -2.154059648513794, -3.246661901473999, -0.010963794775307178, -1.9973266124725342, -2.851602554321289, -0.6424642205238342, -0.08896464854478836, -0.0006424508756026626, -0.2888370156288147, -0.003993988502770662, -1.0788376331329346, -0.20855990052223206, -0.22791966795921326, -0.9972124695777893, -0.36497846245765686, -0.14255663752555847, -0.03831221163272858, -0.8115384578704834, -0.0015444743912667036, -1.3054912090301514, -2.473503351211548, -2.419792890548706, -0.2218894511461258, -0.024869585409760475, -2.3979134559631348, -0.024251358583569527, -0.14751224219799042, -2.7656173188006505e-05, -0.00258635520003736, -0.09617496281862259, -0.1720452904701233, -0.9735413789749146, -0.010004967451095581, -1.138750672340393, -0.01563364267349243, -0.6397119164466858, -0.00044204952428117394, -0.00016080040950328112, -0.00025686301523819566, -9.524368942948058e-05, -0.04225041717290878, -0.1561444252729416, -9.536738616588991e-07, -1.2993727978027891e-05, 0.0, -1.156323378381785e-05, -0.021171292290091515, -0.010728065855801105, -0.008325513452291489, -0.04207155853509903, -0.001510551548562944, -0.22257442772388458, -0.010470458306372166, -0.11427776515483856, -0.08884838223457336, -0.0194181427359581, -0.0010221739066764712, -0.0013217531377449632, -0.004942580126225948, -0.6340932250022888, -0.00018761781393550336, -0.0016601602546870708, -0.6379311084747314, -0.19378015398979187, -0.000869253883138299, -0.004235820844769478, -0.002126814564689994, -5.07818695041351e-05, -0.04294361174106598, -0.040218669921159744, -0.11729103326797485, -0.0004744596080854535, -0.09833213686943054, -0.003108552424237132], "finish_reason": "stop"}], "metrics": {"energy": 290.22230260753645, "energy_per_token": 1.2092595941980686, "time": 11.337756, "time_per_token": 0.04724065}}
{"outputs": [{"text": "texts = data[column]\n    regex = re.compile(r'\\b({})\\b'.format('|'.join(STOPWORDS)))\n    data[column] = texts.str.replace(regex, ' ')\n    return data", "tokens": ["text", "s", " =", " data", "[", "column", "]", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "r", "'\\", "b", "({", "})\\", "b", "'", ".", "format", "('", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")))", "\n", "    ", "data", "[", "column", "]", " =", " texts", ".", "str", ".", "replace", "(", "regex", ",", " '", " '", ")", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-3.179750680923462, -0.7237710952758789, -0.013895203359425068, -0.2140388935804367, -0.06981272995471954, -0.01933968812227249, -0.0039505306631326675, -0.5287555456161499, -0.21908392012119293, -3.480938196182251, -0.13348887860774994, -0.14864696562290192, -5.531158240046352e-05, -0.003104987321421504, -0.6386600732803345, -0.24002280831336975, -0.4357503056526184, -0.004952663090080023, -0.8655692934989929, -0.40543195605278015, -0.00038723601028323174, -0.003261249279603362, -0.0005933669744990766, -0.0006692553870379925, -0.04296736791729927, -0.0004191712068859488, -0.0005216429708525538, -9.298280929215252e-06, -0.00012575789878610522, -0.016148487105965614, -0.14816127717494965, -1.0728830375228426e-06, -1.3828182090946939e-05, -7.509902934543788e-05, -9.179073458653875e-06, -0.09224323183298111, -0.009602783247828484, -0.07777203619480133, -2.010425567626953, -0.09515012055635452, -0.0058595784939825535, -0.0023557788226753473, -0.0018374717328697443, -0.9000120162963867, -0.0007512131123803556, -0.6206928491592407, -0.00015043080202303827, -0.0667359009385109, -0.035932205617427826, -0.007375038228929043, -0.003862422425299883, -0.2647029459476471, -1.2207691669464111, -0.22115899622440338, -0.4133826494216919, -0.10919541120529175, -0.03788188472390175, -0.02472294308245182, -0.5762752294540405, -0.017764858901500702, -1.2052857875823975], "finish_reason": "stop"}], "metrics": {"energy": 79.51529362678527, "energy_per_token": 1.3035294037177911, "time": 2.741534, "time_per_token": 0.044943180327868856}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].str.lower()\n    df[column] = df[column].str.replace('[^a-z ]+', '', regex=True)\n    df[column] = df[column].str.replace(r\"\\b(\" + \"|\".join(STOPWORDS) + r\")\\b\", '', regex=True)\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "lower", "()", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "replace", "('", "[", "^", "a", "-", "z", " ]", "+'", ",", " ''", ",", " regex", "=", "True", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "replace", "(", "r", "\"", "\\", "b", "(", "\"", " +", " \"", "|", "\"", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " r", "\"", ")\\", "b", "\"", ",", " ''", ",", " regex", "=", "True", ")", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.6035387516021729, -0.08289726823568344, -0.9633172154426575, -0.016746066510677338, -0.09625162184238434, -0.048063699156045914, -0.011556349694728851, -0.13642793893814087, -0.03638463467359543, -0.34965279698371887, -0.5000950694084167, -0.06299208849668503, -0.008488881401717663, -0.003267903346568346, -0.013743299059569836, -0.056898921728134155, -0.003149075899273157, -0.0008928364841267467, -0.0017953482456505299, -0.004929531831294298, -0.7343999147415161, -0.0012994902208447456, -0.45103010535240173, -0.009599123150110245, -0.46238651871681213, -0.08352591097354889, -0.29235324263572693, -0.017585664987564087, -0.0026419993955641985, -0.0006375664379447699, -0.012542534619569778, -0.01834040880203247, -0.0012224590172991157, -0.0003231241717003286, -0.0012459142599254847, -0.0008844992844387889, -0.14690281450748444, -0.0005757343024015427, -0.1488649547100067, -1.1251885890960693, -0.5151004791259766, -0.41681042313575745, -0.08221948146820068, -8.237022848334163e-05, -0.0002857038634829223, -1.6216847896575928, -1.9684449434280396, -0.00019977481861133128, -0.7008110284805298, -0.0001517419150331989, -0.025449426844716072, -0.008751136250793934, -0.0029295645654201508, -0.0015484021278098226, -0.06158120557665825, -0.04582297429442406, -0.12143866717815399, -0.021319271996617317, -0.0006957017467357218, -0.0006025406182743609, -0.011945380829274654, -0.06415002793073654, -0.0014388932613655925, -0.0001656871900195256, -0.0008135108510032296, -0.0003594706067815423, -0.09655863046646118, -0.0001161031104857102, -0.343613862991333, -1.3989001512527466, -0.4633551239967346, -1.9402265548706055, -0.1305200159549713, -0.5409799218177795, -1.4617332220077515, -0.49012306332588196, -0.07464441657066345, -1.057862639427185, -0.0008596062543801963, -6.437094270950183e-05, -0.0004844683862756938, -0.00017736769223120064, -0.013854054734110832, -0.11642026156187057, -7.152555099310121e-07, -1.2278481335670222e-05, -3.933898824470816e-06, -1.4185804502631072e-05, -0.026028120890259743, -0.014383798465132713, -0.009920105338096619, -0.02183528058230877, -0.04026997089385986, -0.024381665512919426, -0.012829267419874668, -0.0009446449112147093, -0.6363801956176758, -0.00010001159535022452, -0.05608663335442543, -0.000623032043222338, -0.0022479044273495674, -0.004971760790795088, -0.008020693436264992, -0.13759587705135345, -0.1430041342973709, -0.00768100144341588, -0.7210217118263245, -0.013254037126898766, -0.8231400847434998], "finish_reason": "stop"}], "metrics": {"energy": 115.81935232162475, "energy_per_token": 1.0625628653360069, "time": 4.831899, "time_per_token": 0.04432934862385321}}
{"outputs": [{"text": "df = data[data[column].isin(STOPWORDS)]\n    return df", "tokens": ["df", " =", " data", "[", "data", "[", "column", "]", ".", "isin", "(", "ST", "OP", "W", "OR", "DS", ")]", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.6035387516021729, -0.08289726823568344, -0.5102398991584778, -0.5428462624549866, -1.6108896732330322, -0.1279810518026352, -0.27893030643463135, -0.008316882885992527, -0.009919160977005959, -2.9150168895721436, -0.011720486916601658, -0.01717737875878811, -4.768370445162873e-07, -8.821448318485636e-06, -0.00010597144137136638, -8.702239938429557e-06, -0.03546714410185814, -0.06076182797551155, -0.11869359016418457, -0.3890987038612366, -0.017083749175071716, -0.760850191116333, -0.02212204411625862, -1.1530687808990479], "finish_reason": "stop"}], "metrics": {"energy": 13.362830743789674, "energy_per_token": 0.5567846143245697, "time": 1.0710924, "time_per_token": 0.04462885}}
{"outputs": [{"text": "# Create a new DataFrame with the text column from the original DataFrame\n    df = pd.DataFrame(data=data)\n\n    # Apply regex to find all stopword matches\n    # https://stackoverflow.com/questions/40963428/how-to-find-all-occurrences-of-words-in-a-string-python\n    # https://www.programiz.com/python-programming/regex\n    df[column] = df[column].str.replace('\\b(' + '|'.join(STOPWORDS) + ')\\b', '', regex=True)\n\n    return df", "tokens": ["#", " Create", " a", " new", " Data", "Frame", " with", " the", " text", " column", " from", " the", " original", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", "=", "data", ")", "\n", "\n", "    ", "#", " Apply", " regex", " to", " find", " all", " stop", "word", " matches", "\n", "    ", "#", " https", "://", "stack", "overflow", ".", "com", "/", "questions", "/", "4", "0", "9", "6", "3", "4", "2", "8", "/", "how", "-", "to", "-", "find", "-", "all", "-", "occ", "ur", "rences", "-", "of", "-", "words", "-", "in", "-", "a", "-", "string", "-", "python", "\n", "    ", "#", " https", "://", "www", ".", "program", "iz", ".", "com", "/", "python", "-", "program", "ming", "/", "regex", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "replace", "('", "\\", "b", "('", " +", " '", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " '", ")\\", "b", "'", ",", " ''", ",", " regex", "=", "True", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.97762131690979, -2.2657032012939453, -0.14284871518611908, -1.1746386289596558, -0.21272513270378113, -0.0012397230602800846, -0.5466127991676331, -0.30061018466949463, -2.3791844844818115, -0.0704987496137619, -1.718628168106079, -0.12894503772258759, -0.3210691809654236, -0.18205741047859192, -0.00036137725692242384, -0.19427068531513214, -0.0012877037515863776, -0.7254319190979004, -0.14934208989143372, -0.2408381849527359, -0.011185204610228539, -0.005173391196876764, -0.17616578936576843, -0.04357949644327164, -2.51318621635437, -0.01885666884481907, -0.7277346849441528, -0.04538242518901825, -0.20069564878940582, -0.0003543464408721775, -0.0179100651293993, -2.8530235290527344, -2.321495532989502, -0.9789659976959229, -2.786503553390503, -1.1136581897735596, -1.609740138053894, -2.340053081512451, -1.1499017477035522, -0.9848248362541199, -0.0005418977816589177, -2.530621290206909, -3.8419859409332275, -0.0006733057671226561, -1.186759352684021, -0.0023935975041240454, -2.2172682292875834e-05, -0.00016842853801790625, -0.0010178867960348725, -0.24641944468021393, -0.00011455356434453279, -2.189767360687256, -2.4319889545440674, -1.2955427169799805, -2.5371055603027344, -2.3624980449676514, -2.393326759338379, -2.4731216430664062, -2.7706501483917236, -0.00587107427418232, -2.3756308555603027, -0.0008517451351508498, -0.18777680397033691, -4.5298504119273275e-05, -2.086091995239258, -0.0005956306122243404, -0.559984564781189, -0.0004612335760612041, -2.2583281993865967, -0.060748141258955, -0.042935047298669815, -0.0014153235824778676, -0.050144780427217484, -0.0005776405450887978, -2.5340843200683594, -0.010320274159312248, -0.46984896063804626, -0.00018308870494365692, -0.44754621386528015, -0.00015484087634831667, -0.4408128559589386, -0.10502201318740845, -1.0176172256469727, -0.24909700453281403, -0.01188577525317669, -1.5931135416030884, -0.5820691585540771, -0.00021062063751742244, -1.9193077087402344, -0.00042632073746062815, -2.7779479026794434, -0.030599519610404968, -0.020742051303386688, -0.00020168177434243262, -0.0001752223033690825, -0.0009701313101686537, -0.0037009096704423428, -0.1152237057685852, -0.00010895135346800089, -0.0011180347064509988, -0.028034396469593048, -0.030497193336486816, -0.03405245766043663, -2.448975086212158, -0.12381786853075027, -0.05253523960709572, -0.008231996558606625, -0.005199481267482042, -0.07622314244508743, -0.0039505306631326675, -0.0010991015005856752, -0.00177345285192132, -0.004909009672701359, -0.6313992142677307, -0.0018818541429936886, -0.5204203724861145, -1.0544790029525757, -1.3299801349639893, -1.0188885927200317, -0.6755255460739136, -0.05388517677783966, -0.07694949209690094, -0.0016025570221245289, -0.00042846560245379806, -0.00038723601028323174, -0.00017772526189219207, -0.013890501111745834, -0.16647003591060638, -1.1920922133867862e-06, -1.966933996300213e-05, -8.940656698541716e-06, -1.2159273865108844e-05, -0.031899016350507736, -0.004015241749584675, -0.22408504784107208, -0.06977315247058868, -0.021033212542533875, -0.01239843014627695, -0.0007432320853695273, -1.1465898752212524, -0.0012730597518384457, -0.17740516364574432, -0.006994524039328098, -0.004226086661219597, -0.01745048724114895, -0.056187160313129425, -0.22139470279216766, -0.004191186279058456, -0.45556068420410156, -0.014643573202192783, -1.318779706954956, -2.0265558760002023e-06, -4.768370445162873e-07, -9.7508447652217e-05, -0.00018857131362892687, -0.0677492693066597], "finish_reason": "stop"}], "metrics": {"energy": 182.79275375366205, "energy_per_token": 1.1717484214978338, "time": 7.16076, "time_per_token": 0.045902307692307694}}
{"outputs": [{"text": "data[column] = [\n        re.sub(r\"\\b(?:{})\\b\".format(\"|\".join(STOPWORDS)), \"\", sentence)\n        for sentence in data[column]\n    ]\n    return data", "tokens": ["data", "[", "column", "]", " =", " [", "\n", "        ", "re", ".", "sub", "(", "r", "\"", "\\", "b", "(", "?", ":", "{", "})\\", "b", "\"", ".", "format", "(", "\"", "|", "\"", ".", "join", "(", "ST", "OP", "W", "OR", "DS", "))", ",", " \"", "\"", ",", " sentence", ")", "\n", "        ", "for", " sentence", " in", " data", "[", "column", "]", "\n", "    ", "]", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-2.536949396133423, -0.15951098501682281, -0.01966293714940548, -0.019628336653113365, -0.02111176773905754, -2.2340433597564697, -1.4361608028411865, -0.007830636575818062, -0.518767774105072, -0.0003583981015253812, -0.015472025610506535, -0.20294533669948578, -0.3513221740722656, -1.6330764293670654, -0.26991981267929077, -0.07635094225406647, -1.5982403755187988, -1.761292815208435, -2.1536202430725098, -0.09121663868427277, -0.24012848734855652, -0.0017960622208192945, -0.04142739623785019, -0.0012760362587869167, -0.0015538772568106651, -0.09780246764421463, -0.2818804085254669, -0.0019610952585935593, -2.95634672511369e-05, -2.2291887944447808e-05, -3.731181277544238e-05, -0.020879002287983894, -0.3333972692489624, -6.6756979322235566e-06, -3.9457496313843876e-05, -0.00012396997772157192, -1.1086402082582936e-05, -0.0326799601316452, -0.0010736184194684029, -0.12689591944217682, -0.0888119488954544, -0.0002543602604418993, -2.264242172241211, -0.298147588968277, -0.3141043782234192, -0.0034126159735023975, -0.007970551028847694, -0.0020028548315167427, -0.0011643542675301433, -0.010761795565485954, -0.007695670239627361, -0.004960254766047001, -0.031172700226306915, -0.013118271715939045, -0.006438227836042643, -0.006423895712941885, -0.008617948740720749, -0.16071178019046783, -0.020660197362303734, -0.027735410258173943, -0.553002655506134, -0.0142776845023036, -1.0676296949386597], "finish_reason": "stop"}], "metrics": {"energy": 60.931285028457644, "energy_per_token": 0.9671632544199626, "time": 2.7464006, "time_per_token": 0.043593660317460314}}
{"outputs": [{"text": "data[column] = data[column].str.replace(\n        \"|\".join(STOPWORDS), \"\")\n    data[column].str.strip()\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "str", ".", "replace", "(", "\n", "        ", "\"", "|", "\"", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", ",", " \"", "\"", ")", "\n", "    ", "data", "[", "column", "]", ".", "str", ".", "strip", "()", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-2.536949396133423, -0.15951098501682281, -0.01966293714940548, -0.019628336653113365, -0.02111176773905754, -0.22888769209384918, -0.0037074419669806957, -0.0013930626446381211, -0.0032269093208014965, -0.006948000285774469, -0.7192036509513855, -0.002222212729975581, -1.1013538837432861, -0.37041258811950684, -0.9221445918083191, -0.02632889524102211, -2.003251552581787, -0.3392707407474518, -0.0012775840004906058, -0.0003325386205688119, -0.00040880427695810795, -0.06320921331644058, -0.6544570922851562, -1.3589766240329482e-05, -0.00031883400515653193, -0.00013767725613433868, -8.4638240878121e-06, -0.06668059527873993, -0.01231589075177908, -0.4952070415019989, -0.2583109736442566, -0.7497993111610413, -0.3965824246406555, -0.10600665956735611, -2.3140554428100586, -0.015376591123640537, -0.00500865001231432, -0.0016083888476714492, -2.2592008113861084, -0.5387855768203735, -0.009370158426463604, -0.970460832118988, -0.16523714363574982, -0.22294621169567108, -0.18714013695716858, -0.2911998927593231, -0.018673105165362358, -0.45582112669944763, -0.012578204274177551, -1.2825218439102173], "finish_reason": "stop"}], "metrics": {"energy": 63.42312829589844, "energy_per_token": 1.2684625659179687, "time": 2.2999582, "time_per_token": 0.045999163999999995}}
{"outputs": [{"text": "# Filter out text column\n    data = data[column].apply(lambda x: ' '.join(re.sub(r'[^\\w]', ' ', x).split()))\n    # Remove stopwords\n    data = data.apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    # Return modified DataFrame\n    return data\n\ntask_func.__doc__ = task_func.__doc__.split('\\n')[-2] + '\\n    \"\"\"\\n    \"\"\"'", "tokens": ["#", " Filter", " out", " text", " column", "\n", "    ", "data", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "]", "'", ",", " '", " '", ",", " x", ")", ".", "split", "()))", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "data", " =", " data", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "#", " Return", " modified", " Data", "Frame", "\n", "    ", "return", " data", "\n", "\n", "task", "_", "func", ".", "__", "doc", "__", " =", " task", "_", "func", ".", "__", "doc", "__", ".", "split", "('", "\\", "n", "')", "[-", "2", "]", " +", " '\\", "n", "    ", "\"", "\"", "\"", "\\", "n", "    ", "\"", "\"", "\"", "'<", "|", "end", "of", "text", "|>"], "logprobs": [-0.97762131690979, -4.282708168029785, -0.9483882188796997, -4.016600608825684, -2.5871458053588867, -1.4503538608551025, -0.0034468306694179773, -1.5712984800338745, -0.8115969300270081, -0.047343119978904724, -0.5065263509750366, -0.1246718019247055, -0.005891813430935144, -0.7663444876670837, -1.8997584581375122, -0.006851394660770893, -0.2627095878124237, -0.16618981957435608, -0.0014753182185813785, -1.6258925199508667, -0.005252490285784006, -0.0006152882124297321, -0.00014184899919200689, -0.16426262259483337, -0.2954423129558563, -9.07141511561349e-05, -0.7151597142219543, -0.17251449823379517, -0.2147412896156311, -0.6569172143936157, -0.6150283217430115, -0.12845923006534576, -0.0072182342410087585, -1.3582748174667358, -0.12585659325122833, -0.0002540027489885688, -0.03307412192225456, -0.0011504229623824358, -0.0003693613689392805, -0.10893459618091583, -0.025057826191186905, -0.023755688220262527, -0.20011740922927856, -0.040328022092580795, -0.20562602579593658, -0.837432861328125, -0.6086354851722717, -0.8791967630386353, -0.7047519683837891, -0.07610572129487991, -0.34255626797676086, -0.0012643685331568122, -0.3074485957622528, -0.14640690386295319, -0.1728764921426773, -0.055201489478349686, -0.2461548000574112, -0.0011426832061260939, -0.025916846469044685, -0.012289867736399174, -0.0007404923089779913, -0.179595947265625, -0.00139639584813267, -0.0004987664869986475, -0.0009082006872631609, -0.442220002412796, -0.8931496143341064, -0.021293366327881813, -0.00031382881570607424, -0.0004687402688432485, -0.04844276234507561, -0.0006553170969709754, -0.023151567205786705, -0.1403181105852127, -0.013446006923913956, -0.03947385028004646, -0.2846328020095825, -5.924526340095326e-05, -0.0030971437226980925, -7.152555099310121e-07, -1.3589766240329482e-05, -4.1483970562694594e-05, -8.940656698541716e-06, -0.016902204602956772, -0.007406751159578562, -0.22484412789344788, -0.6729095578193665, -0.8722243905067444, -0.9081785678863525, -0.40799859166145325, -0.004677188582718372, -0.01601850986480713, -0.0015489972429350019, -0.03042873926460743, -0.3332386314868927, -0.7775931358337402, -0.011668055318295956, -2.878286361694336, -0.4395943880081177, -0.4188377559185028, -0.16312210261821747, -0.5253975987434387, -0.2177935540676117, -0.0005710878176614642, -0.39034855365753174, -0.6061018109321594, -0.00412779301404953, -0.01067829504609108, -0.008342182263731956, -0.004419440869241953, -0.008590766228735447, -0.001210790709592402, -0.059309929609298706, -3.336534023284912, -0.7657648324966431, -1.4878275394439697, -0.012554777786135674, -0.6770738959312439, -2.9652652740478516, -1.0973939895629883, -0.41179215908050537, -0.7354152202606201, -0.9971284866333008, -0.025163384154438972, -2.3669281005859375, -1.6517901420593262, -0.05453028529882431, -0.0035807082895189524, -1.0002750158309937, -0.03206481412053108, -0.6990678906440735, -0.7101470232009888, -0.005579493474215269, -0.0008355463505722582, -2.335087299346924, -5.960462772236497e-07, -1.0728830375228426e-06, -0.0004077318590134382, -0.00020752183627337217, -0.10623586922883987], "finish_reason": "stop"}], "metrics": {"energy": 180.45835689735407, "energy_per_token": 1.288988263552529, "time": 6.5166283, "time_per_token": 0.046547345}}
{"outputs": [{"text": "# Create a new DataFrame\n    data = data.copy()\n\n    # Use the Pandas \"replace\" method to remove stopwords\n    data[column] = data[column].replace('\\n', ' ')\n\n    # Use the regular expression module to match the stopword patterns\n    stopwords = re.compile(\"|\".join(r\"\\b({0})\\b\".format(p.replace(\" \", \"\")) for p in STOPWORDS))\n\n    # Use the Pandas \"replace\" method to replace the stopwords with empty strings\n    data[column] = stopwords.sub('', data[column])\n\n    # Remove any leading or trailing whitespace\n    data[column].str.strip()\n\n    return data", "tokens": ["#", " Create", " a", " new", " Data", "Frame", "\n", "    ", "data", " =", " data", ".", "copy", "()", "\n", "\n", "    ", "#", " Use", " the", " Pand", "as", " \"", "replace", "\"", " method", " to", " remove", " stop", "words", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "replace", "('", "\\", "n", "'", ",", " '", " '", ")", "\n", "\n", "    ", "#", " Use", " the", " regular", " expression", " module", " to", " match", " the", " stop", "word", " patterns", "\n", "    ", "stop", "words", " =", " re", ".", "compile", "(", "\"", "|", "\"", ".", "join", "(", "r", "\"", "\\", "b", "({", "0", "})\\", "b", "\"", ".", "format", "(", "p", ".", "replace", "(", "\"", " \"", ",", " \"", "\"", "))", " for", " p", " in", " ST", "OP", "W", "OR", "DS", "))", "\n", "\n", "    ", "#", " Use", " the", " Pand", "as", " \"", "replace", "\"", " method", " to", " replace", " the", " stop", "words", " with", " empty", " strings", "\n", "    ", "data", "[", "column", "]", " =", " stop", "words", ".", "sub", "('", "'", ",", " data", "[", "column", "])", "\n", "\n", "    ", "#", " Remove", " any", " leading", " or", " trailing", " whites", "pace", "\n", "    ", "data", "[", "column", "]", ".", "str", ".", "strip", "()", "\n", "\n", "    ", "return", " data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.97762131690979, -2.2657032012939453, -0.14284871518611908, -1.1746386289596558, -0.21272513270378113, -0.0012397230602800846, -2.938004493713379, -0.004004911985248327, -2.560352325439453, -0.5580820441246033, -1.6222971677780151, -0.5325611233711243, -0.08323461562395096, -0.01625709980726242, -0.014813428744673729, -1.1321847438812256, -0.0004651656490750611, -0.06362464278936386, -3.483173370361328, -1.1705255508422852, -2.824662208557129, -0.0004326361231505871, -3.89884877204895, -2.537827491760254, -0.02721327356994152, -0.19695943593978882, -0.07402466982603073, -0.30108994245529175, -1.3127933740615845, -0.015296293422579765, -1.0452301502227783, -0.001374610816128552, -0.27263328433036804, -0.05108334496617317, -0.011724021285772324, -0.0020166554022580385, -0.009897679090499878, -0.01705867052078247, -0.004493853077292442, -0.0005841932725161314, -0.0012679402716457844, -0.002631655428558588, -1.5213812589645386, -1.2278379201889038, -2.443082332611084, -1.856075406074524, -0.08330810815095901, -0.014697610400617123, -0.1415138989686966, -0.177530437707901, -0.09294500201940536, -0.45771297812461853, -2.2713372707366943, -0.0007135705673135817, -0.44617539644241333, -1.7620890140533447, -0.5967712998390198, -1.313509225845337, -0.03406374901533127, -1.550386667251587, -0.27313244342803955, -1.351284146308899, -2.102107048034668, -0.3034569025039673, -1.7257106304168701, -0.7936535477638245, -0.17020165920257568, -0.0034578789491206408, -1.7156705856323242, -1.2009069919586182, -0.38252905011177063, -0.709321141242981, -2.038458114839159e-05, -0.046277210116386414, -0.3869428336620331, -1.199845790863037, -0.233360156416893, -4.637133679352701e-05, -0.0002233732520835474, -0.00018702188390307128, -0.1013631746172905, -2.7981724739074707, -0.5170888304710388, -0.29043838381767273, -0.0017347777029499412, -1.3412859439849854, -0.07343444228172302, -0.0037918826565146446, -0.0005349873681552708, -0.0006171943969093263, -0.001587560516782105, -0.0004887578543275595, -0.0017623859457671642, -3.9441933631896973, -1.9079854488372803, -0.10683929920196533, -0.16991634666919708, -0.02820790372788906, -2.183837890625, -0.00025674383505247533, -0.2863271236419678, -2.1822502613067627, -0.03492462635040283, -0.32712265849113464, -0.0003921216703020036, -0.0009015309624373913, -0.01857353001832962, -4.172316494077677e-06, -5.2689116273541003e-05, -0.00020251607929822057, -8.106198947643861e-06, -0.11381158232688904, -0.007025775499641895, -0.17819669842720032, -0.0003846143954433501, -0.06596069782972336, -0.5668187141418457, -0.08873625099658966, -0.31507471203804016, -1.5139465176616795e-05, -0.10668480396270752, -1.2015867233276367, -0.020121034234762192, -0.011721665039658546, -0.17281872034072876, -2.4595518112182617, -0.6682692170143127, -0.5328943133354187, -0.2360484004020691, -0.14597061276435852, -1.4336495399475098, -0.03469747304916382, -0.021327907219529152, -0.0006717570940963924, -0.04385393112897873, -0.0063967714086174965, -0.0010790961096063256, -0.0004676678800024092, -0.016280440613627434, -2.621924877166748, -0.003987339325249195, -0.00018094333063345402, -0.00021896349790040404, -0.8889963626861572, -0.1752435863018036, -0.000192504478036426, -0.00417088670656085, -0.0016494491137564182, -0.00031728477915748954, -0.04941151663661003, -0.03733045607805252, -0.06600868701934814, -0.0007593132322654128, -0.44608399271965027, -1.3953087329864502, -0.841139554977417, -1.8050148487091064, -0.13830287754535675, -0.000302745756926015, -0.4754585027694702, -0.09681576490402222, -1.104981541633606, -0.0006411403883248568, -0.018520988523960114, -0.007456921506673098, -0.0002644904307089746, -0.00017951308109331876, -1.8964130878448486, -1.6155529022216797, -0.0020283141639083624, -0.009219336323440075, -0.0400354377925396, -0.043646711856126785, -0.04784223809838295, -0.000503770774230361, -1.0257792472839355, -0.01566016674041748, -1.3117324113845825, -2.264974000354414e-06, -7.152555099310121e-07, -0.00022373080719262362, -0.00019643761334009469, -0.08727090060710907], "finish_reason": "stop"}], "metrics": {"energy": 228.7291449584961, "energy_per_token": 1.2498860380245689, "time": 8.420316, "time_per_token": 0.04601265573770492}}
{"outputs": [{"text": "# Remove the specified column from the dataframe\n    text_column = data.pop(column)\n\n    # Create an empty set to store the words in\n    words = set()\n\n    # For each word in the stopwords list\n    for word in STOPWORDS:\n\n        # Remove any non-letter characters from the word\n        # and replace any hyphenated words with a single dash\n        # to avoid matching words that are hyphenated incorrectly\n        word = re.sub(r\"[^a-zA-Z]\", \"\", word).replace(\"-\", \"- \").lower()\n\n        # Add the modified word to the words set\n        words.add(word)\n\n    # Create a new dataframe with all text cells that aren't stopwords\n    words_removed = text_column[~text_column.apply(lambda x: any(y in x for y in words))]\n\n    # Re-insert the words that were removed as a new column\n    data[column] = words_removed\n\n    # Return the modified DataFrame\n    return data<|end", "tokens": ["#", " Remove", " the", " specified", " column", " from", " the", " data", "frame", "\n", "    ", "text", "_", "column", " =", " data", ".", "pop", "(", "column", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " set", " to", " store", " the", " words", " in", "\n", "    ", "words", " =", " set", "()", "\n", "\n", "    ", "#", " For", " each", " word", " in", " the", " stop", "words", " list", "\n", "    ", "for", " word", " in", " ST", "OP", "W", "OR", "DS", ":", "\n", "\n", "        ", "#", " Remove", " any", " non", "-", "letter", " characters", " from", " the", " word", "\n", "        ", "#", " and", " replace", " any", " hyp", "hen", "ated", " words", " with", " a", " single", " dash", "\n", "        ", "#", " to", " avoid", " matching", " words", " that", " are", " hyp", "hen", "ated", " incorrectly", "\n", "        ", "word", " =", " re", ".", "sub", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "]\"", ",", " \"", "\"", ",", " word", ")", ".", "replace", "(", "\"", "-", "\"", ",", " \"", "-", " \"", ")", ".", "lower", "()", "\n", "\n", "        ", "#", " Add", " the", " modified", " word", " to", " the", " words", " set", "\n", "        ", "words", ".", "add", "(", "word", ")", "\n", "\n", "    ", "#", " Create", " a", " new", " data", "frame", " with", " all", " text", " cells", " that", " aren", "'", "t", " stop", "words", "\n", "    ", "words", "_", "rem", "oved", " =", " text", "_", "column", "[", "~", "text", "_", "column", ".", "apply", "(", "lambda", " x", ":", " any", "(", "y", " in", " x", " for", " y", " in", " words", "))", "]", "\n", "\n", "    ", "#", " Re", "-", "insert", " the", " words", " that", " were", " removed", " as", " a", " new", " column", "\n", "    ", "data", "[", "column", "]", " =", " words", "_", "rem", "oved", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " data", "<", "|", "end"], "logprobs": [-0.97762131690979, -1.4818974733352661, -2.5261104106903076, -1.7675254344940186, -0.1404111385345459, -0.23015142977237701, -0.19833189249038696, -1.9902839660644531, -0.8446858525276184, -0.3323875367641449, -0.001615172834135592, -3.5009164810180664, -1.0108108520507812, -1.2178384065628052, -0.017794137820601463, -0.06637029349803925, -1.7713420391082764, -0.18014684319496155, -0.014371108263731003, -0.005592770874500275, -0.04550761729478836, -0.014312352053821087, -0.21289798617362976, -0.0006246999255381525, -0.03309004008769989, -1.75909423828125, -1.8365813493728638, -0.17410171031951904, -3.12821102142334, -0.3732134699821472, -0.13593877851963043, -0.4167501628398895, -2.5811314582824707, -2.7947375774383545, -1.9597947597503662, -0.0003297977091278881, -0.4458008408546448, -0.16263650357723236, -0.028032192960381508, -0.024777021259069443, -0.0004974558250978589, -0.03906982019543648, -0.0004260824352968484, -0.03757870942354202, -3.407578706741333, -0.07783721387386322, -0.5826169848442078, -0.04915290325880051, -0.06682845950126648, -2.967299699783325, -0.28384679555892944, -0.9874045252799988, -0.70319002866745, -0.0009597701136954129, -0.04409258812665939, -0.24345147609710693, -0.0013997290516272187, -0.007626346778124571, -1.0728830375228426e-06, -5.125986263010418e-06, -0.0002637753786984831, -6.079655122448457e-06, -0.006462982390075922, -0.000821014866232872, -2.1309711933135986, -0.00541944382712245, -0.016435595229268074, -1.9399080276489258, -1.533833622932434, -1.0022363662719727, -0.010469513945281506, -2.083237886428833, -0.1969648152589798, -0.48834332823753357, -0.027462778612971306, -0.052574485540390015, -0.21067070960998535, -0.0007381098694168031, -2.541701078414917, -1.324103832244873, -3.792184352874756, -2.1477630138397217, -0.5624895095825195, -0.7813358306884766, -0.8925641179084778, -0.165153369307518, -0.07419790327548981, -0.38514360785484314, -0.5044020414352417, -2.7482004165649414, -0.1717274785041809, -0.0034797375556081533, -1.427834153175354, -2.966200828552246, -2.2123446464538574, -2.4410088062286377, -1.291425108909607, -2.2566375732421875, -1.3990263938903809, -0.5020444989204407, -0.0009578645695000887, -0.004207330755889416, -3.307319402694702, -0.14024081826210022, -0.00836925394833088, -1.5071378946304321, -0.12829473614692688, -0.016927404329180717, -1.4424220353248529e-05, -0.007715070620179176, -0.36149248480796814, -0.06020435690879822, -1.0424411296844482, -0.33392956852912903, -0.6310670971870422, -0.055180054157972336, -8.34461570775602e-06, -7.259582343976945e-05, -0.12361035495996475, -2.825220326485578e-05, -0.00034624303225427866, -2.3395779132843018, -0.0001311216183239594, -0.03544563055038452, -0.03470703214406967, -0.00012289722508285195, -0.007254922762513161, -0.050172217190265656, -0.7536121010780334, -0.06279417872428894, -0.04948015883564949, -0.0161435604095459, -0.011664638295769691, -0.0008379285573028028, -8.95221673999913e-05, -0.0361156165599823, -2.0249884128570557, -0.8921664953231812, -0.001536023453809321, -2.3240628242492676, -1.264782190322876, -0.00011050090688513592, -0.009265990927815437, -0.08052591979503632, -0.0006119524477981031, -0.04219716414809227, -0.24880574643611908, -0.02863963134586811, -3.2721426486968994, -0.025406427681446075, -0.0234341099858284, -0.004779106471687555, -1.1275132894515991, -0.03334234654903412, -0.030283721163868904, -0.00039104922325350344, -0.038316912949085236, -0.0006145734223537147, -0.0028928357642143965, -0.0004076126788277179, -0.001419847016222775, -0.015777047723531723, -0.0006133820279501379, -0.006172403693199158, -0.006542334798723459, -0.01929221674799919, -0.8460948467254639, -0.47504881024360657, -1.0174978971481323, -1.6986148357391357, -0.02466537430882454, -0.5186752080917358, -3.2491471767425537, -3.230252742767334, -3.671074390411377, -1.1573917865753174, -3.870577335357666, -0.0018751909956336021, -3.814689989667386e-06, -1.118019938468933, -0.029572661966085434, -0.34558701515197754, -0.0013316344702616334, -4.430448532104492, -0.1958492398262024, -2.0921106338500977, -0.017069920897483826, -0.12495895475149155, -1.5618396997451782, -0.0005447572330012918, -6.282132380874828e-05, -1.358224868774414, -0.32203832268714905, -0.027416501194238663, -5.566918844124302e-05, -5.602820692729438e-06, -0.00020323118951637298, -1.3050265312194824, -0.001553520211018622, -0.23161680996418, -0.10415498912334442, -0.0016540905926376581, -0.531971275806427, -0.2310006320476532, -3.2995827198028564, -0.15774619579315186, -0.07946211844682693, -0.4648878872394562, -0.0004724340105894953, -0.0003914067056030035, -0.01849922351539135, -0.029084371402859688, -0.004211485851556063, -0.03439828380942345, -0.1001933217048645, -0.0003625689132604748, -0.02904754877090454, -2.5550894737243652, -0.4986896812915802, -1.668778419494629, -0.020858105272054672, -1.21905517578125, -1.887279987335205, -0.3190028965473175, -0.07010039687156677, -2.1008219718933105, -2.0530805587768555, -0.9026492238044739, -0.10097326338291168, -0.5501953959465027, -0.0006231511943042278, -0.32855871319770813, -0.16632308065891266, -0.052252765744924545, -0.009549650363624096, -0.00010907054820563644, -0.010453706607222557, -3.3378044463461265e-05, -1.7881377516459906e-06, -0.000442407006630674, -0.0294033270329237, -0.059968501329422, -0.003835703246295452, -0.43748095631599426, -0.0899762362241745, -0.044513408094644547, -0.4906080365180969, -1.4761388301849365, -0.011298837140202522, -0.07075445353984833, -0.0012201968347653747, -0.002778005786240101, -0.019043121486902237, -1.3831255435943604, -3.099436753473128e-06, -7.152555099310121e-07], "finish_reason": "length"}], "metrics": {"energy": 286.2243076906206, "energy_per_token": 1.1180637019164867, "time": 11.775963, "time_per_token": 0.04599985546875}}
{"outputs": [{"text": "texts = data.text.str.lower()\n    # remove all non-alphanumeric characters\n    texts = texts.apply(lambda x: re.sub(r'[^\\w]', ' ', x))\n    # remove all characters except alphabets, numbers and space\n    texts = texts.apply(lambda x: re.sub(r'[^a-zA-Z0-9\\s]', ' ', x))\n    # remove stopwords\n    texts = texts.apply(lambda x: [word for word in re.findall(r'\\w+', x) if word not in STOPWORDS] if x != '' else [])\n    data = pd.DataFrame({'text': texts})\n    return data", "tokens": ["text", "s", " =", " data", ".", "text", ".", "str", ".", "lower", "()", "\n", "    ", "#", " remove", " all", " non", "-", "al", "phan", "umeric", " characters", "\n", "    ", "text", "s", " =", " texts", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "]", "'", ",", " '", " '", ",", " x", "))", "\n", "    ", "#", " remove", " all", " characters", " except", " al", "ph", "ab", "ets", ",", " numbers", " and", " space", "\n", "    ", "text", "s", " =", " texts", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "(", "r", "'", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "'", ",", " '", " '", ",", " x", "))", "\n", "    ", "#", " remove", " stop", "words", "\n", "    ", "text", "s", " =", " texts", ".", "apply", "(", "lambda", " x", ":", " [", "word", " for", " word", " in", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " x", ")", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", " if", " x", " ", "!", "=", " ''", " else", " [", "])", "\n", "    ", "data", " =", " pd", ".", "DataFrame", "({", "'", "text", "':", " texts", "})", "\n", "    ", "return", " data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.179750680923462, -0.7237710952758789, -0.013895203359425068, -0.2140388935804367, -2.9597644805908203, -2.831360101699829, -1.2352333068847656, -1.285902500152588, -0.02823745645582676, -0.4985189437866211, -0.0049236007034778595, -0.5610036253929138, -0.09828945994377136, -2.814955711364746, -2.357163906097412, -2.618072986602783, -1.538488745689392, -0.0511089451611042, -1.5574885606765747, -0.034122854471206665, -0.016498448327183723, -0.1277121901512146, -1.0246976613998413, -0.001391872181557119, -0.2537904381752014, -0.006112690083682537, -0.04083980992436409, -0.11079782992601395, -0.0009370227344334126, -2.1372523307800293, -0.001962641952559352, -0.16743949055671692, -0.23924879729747772, -0.001601009746082127, -0.031220998615026474, -2.753696753643453e-05, -0.01074162870645523, -0.4227682054042816, -0.05968576669692993, -0.7815205454826355, -0.1280343383550644, -0.5356568098068237, -0.006753003224730492, -1.0047367811203003, -0.01630847156047821, -6.472854875028133e-05, -0.392066091299057, -0.0004478881892282516, -0.00016640232934150845, -0.005929617211222649, -0.0173284113407135, -0.035225268453359604, -0.12597431242465973, -0.10712797194719315, -0.18954052031040192, -1.0605792999267578, -3.8761401176452637, -1.372941017150879, -0.7651020884513855, -0.28017041087150574, -0.12902489304542542, -0.0005354639724828303, -2.3301846981048584, -0.6559172868728638, -1.0149098634719849, -3.789442300796509, -0.10820180922746658, -0.0024497280828654766, -0.06697952747344971, -0.000849601230584085, -0.005446357652544975, -0.0036860634572803974, -0.0002224197960458696, -0.023958805948495865, -0.0005240259342826903, -0.011947030201554298, -0.0017904693959280849, -0.0002636561985127628, -0.1163187101483345, -0.001023364719003439, -0.0025981261860579252, -0.0967688038945198, -0.004045280162245035, -0.17726638913154602, -0.10892155021429062, -0.2787492871284485, -0.11261754482984543, -0.0001928620331455022, -0.0006692553870379925, -1.2243019342422485, -4.95898348162882e-05, -0.0020202244631946087, -0.13335075974464417, -7.462222856702283e-05, -0.0001512651506345719, -0.7067452669143677, -0.022139299660921097, -0.07476013153791428, -0.0019229032332077622, -9.047575440490618e-05, -0.355600506067276, -0.0009702504030428827, -9.297892393078655e-05, -0.0012463905150070786, -0.01160690188407898, -0.02399325557053089, -0.08831027895212173, -0.15570929646492004, -0.17725150287151337, -1.3430900573730469, -0.06895356625318527, -0.25306811928749084, -0.0010239601833745837, -0.09591581672430038, -0.0015335239004343748, -0.021250421181321144, -0.012865751050412655, -0.000847814604640007, -0.01805419661104679, -0.0005816913326270878, -0.031057026237249374, -0.0032448519486933947, -0.00013493580627255142, -2.2940514087677, -0.5087943077087402, -0.016940180212259293, -0.000288087350782007, -0.00025948495022021234, -2.412743091583252, -0.0008345934911631048, -1.5507605075836182, -0.00024101213784888387, -0.05287382751703262, -0.01551557146012783, -0.04397440701723099, -0.11080241203308105, -0.005187859293073416, -4.386805812828243e-05, -0.010058076120913029, -0.027440277859568596, -0.037758491933345795, -0.045706022530794144, -0.01880577951669693, -9.178694017464295e-05, -0.002365649910643697, -7.152555099310121e-07, -2.5987286790041253e-05, -9.417489309271332e-06, -9.894321920000948e-06, -2.0779247283935547, -2.080779552459717, -1.2655575275421143, -0.9586218595504761, -9.536697689327411e-06, -0.00024625606602057815, -0.6612877249717712, -0.014027689583599567, -0.42338040471076965, -0.1076364517211914, -0.003885578364133835, -0.15310868620872498, -1.9140582084655762, -2.646760940551758, -0.3924606144428253, -0.00018189683032687753, -0.24250710010528564, -0.3408491015434265, -0.3709908127784729, -0.0068268864415585995, -0.00885358452796936, -0.008781859651207924, -0.06834609061479568, -0.023241138085722923, -0.12344062328338623, -0.09585646539926529, -0.02372646890580654, -1.2603214979171753, -1.7881377516459906e-06, -8.344646857949556e-07, -0.0002708068350329995, -0.00011121608258690685, -0.09854863584041595], "finish_reason": "stop"}], "metrics": {"energy": 230.7217797794342, "energy_per_token": 1.267702086700188, "time": 9.242113, "time_per_token": 0.05078084065934066}}
{"outputs": [{"text": "df[column] = df[column].str.lower()  # Convert the text to lowercase\n    df[column] = df[column].str.split()  # Split the text into individual words\n    df[column] = df[column].apply(\n        lambda words: [word for word in words if word not in STOPWORDS])  # Remove stopwords from each word\n    df[column] = df[column].apply(lambda x: ' '.join(x))  # Join the remaining words back into a string\n    return df", "tokens": ["df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "lower", "()", "  ", "#", " Convert", " the", " text", " to", " lower", "case", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "split", "()", "  ", "#", " Split", " the", " text", " into", " individual", " words", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " words", ":", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "  ", "#", " Remove", " stop", "words", " from", " each", " word", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "x", "))", "  ", "#", " Join", " the", " remaining", " words", " back", " into", " a", " string", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.6035387516021729, -2.891611099243164, -0.007021869067102671, -0.010898824781179428, -0.0281965471804142, -0.10963831841945648, -0.00410214951261878, -0.0012157914461567998, -0.001966211013495922, -0.009231030009686947, -0.7684245705604553, -0.0015069806249812245, -0.5633575320243835, -0.014464405365288258, -2.6566596031188965, -0.0008423355757258832, -0.23512808978557587, -1.825801134109497, -0.228575199842453, -0.6554810404777527, -0.05460444837808609, -0.04235531762242317, -0.07309111207723618, -0.19455835223197937, -0.3487682044506073, -0.014597638510167599, -0.000945121340919286, -0.00029774048016406596, -0.008524695411324501, -0.019676145166158676, -0.0005472592893056571, -0.00014923889830242842, -0.000824349990580231, -0.002934794407337904, -0.11416184902191162, -0.00019453064305707812, -2.7804205417633057, -0.07687994837760925, -0.025471972301602364, -0.001069331425242126, -0.029653096571564674, -0.12862560153007507, -0.03552340716123581, -0.029165074229240417, -1.8725833892822266, -0.008452474139630795, -0.014002298936247826, -0.12911154329776764, -0.12531858682632446, -0.009544218890368938, -0.0011794761521741748, -0.0004295380203984678, -0.009951619431376457, -0.3187325894832611, -0.0014361554058268666, -0.00015948931104503572, -0.00013505500101018697, -0.0015688742278143764, -0.30436795949935913, -0.006649510003626347, -1.9524155855178833, -0.018214227631688118, -0.004554968327283859, -2.64282488822937, -0.0016289787599816918, -0.39260199666023254, -0.22498854994773865, -0.020200828090310097, -0.0005159238935448229, -0.00017438798386137933, -0.0031307751778513193, -0.0068288990296423435, -0.17190225422382355, -0.030457763001322746, -1.5139465176616795e-05, -0.0035576641093939543, -4.768370445162873e-07, -1.2397689715726301e-05, -1.8596476365928538e-05, -1.2159273865108844e-05, -0.7518637776374817, -0.041532039642333984, -2.7894584491150454e-05, -0.07285306602716446, -0.2771865427494049, -0.020871413871645927, -1.8395427465438843, -1.1266261339187622, -0.32551100850105286, -0.1473480612039566, -0.025147924199700356, -0.16131183505058289, -0.004489224404096603, -0.0006063529872335494, -0.00024434918304905295, -0.0027708730194717646, -0.2068822681903839, -0.00032860602368600667, -0.00013767725613433868, -2.9205850296420977e-05, -0.00017081231635529548, -0.02591998316347599, -0.0746864527463913, -0.1477247178554535, -1.8908377885818481, -0.0005459486856125295, -0.6552218198776245, -0.00016532962035853416, -3.528532761265524e-05, -7.021180499577895e-05, -0.0011326810345053673, -0.006473286543041468, -0.008986740373075008, -0.02477690391242504, -9.679325739853084e-05, -0.19848938286304474, -0.2529282569885254, -1.0014556646347046, -0.0014893640764057636, -0.2702416479587555, -0.07176187634468079, -0.09003659337759018, -1.1238796710968018, -0.014844906516373158, -0.2602442800998688, -0.03678377717733383, -0.007293858099728823, -0.6090667247772217, -0.01284739188849926, -0.893777072429657], "finish_reason": "stop"}], "metrics": {"energy": 186.47078896331794, "energy_per_token": 1.434390684333215, "time": 6.5193486, "time_per_token": 0.050148835384615384}}
{"outputs": [{"text": "data[column] = data[column].apply(lambda text: ' '.join(re.findall(r'[A-Za-z]+', text)).replace(\n        ' ', '').lower())\n    data[column] = data[column].apply(\n        lambda text: ' '.join(word for word in text.split(' ') if word.lower() not in STOPWORDS)\n    )\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " text", ":", " '", " '", ".", "join", "(", "re", ".", "find", "all", "(", "r", "'", "[", "A", "-", "Z", "a", "-", "z", "]+", "'", ",", " text", "))", ".", "replace", "(", "\n", "        ", "'", " '", ",", " '", "')", ".", "lower", "())", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " text", ":", " '", " '", ".", "join", "(", "word", " for", " word", " in", " text", ".", "split", "('", " '", ")", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", ")", "\n", "    ", ")", "\n", "    ", "return", " data"], "logprobs": [-2.536949396133423, -0.15951098501682281, -0.01966293714940548, -0.019628336653113365, -0.02111176773905754, -0.22888769209384918, -0.0037074419669806957, -0.0013930626446381211, -0.0032269093208014965, -0.006948000285774469, -1.0455796718597412, -0.008816954679787159, -0.20771446824073792, -2.5268092155456543, -0.0021572669502347708, -0.9403854012489319, -0.0010889797704294324, -0.000612071540672332, -7.819823804311454e-05, -0.4511237144470215, -0.5196752548217773, -8.594620157964528e-05, -0.557334840297699, -8.4638240878121e-06, -0.16935564577579498, -0.0986565425992012, -2.369549036026001, -0.35344505310058594, -1.8413363695144653, -0.004175041802227497, -0.005962797906249762, -0.023973586037755013, -2.062299427052494e-05, -4.60137271147687e-05, -0.5266197323799133, -0.1207401379942894, -0.00019393471302464604, -0.07403971999883652, -1.148477554321289, -0.03895929828286171, -2.439297914505005, -1.5213298797607422, -0.9511592984199524, -0.06873100250959396, -0.17725659906864166, -0.6991280913352966, -0.021546684205532074, -0.4468848407268524, -0.3952522873878479, -0.02350199781358242, -0.5340389013290405, -0.11613436043262482, -0.3792071044445038, -0.1409333199262619, -0.5097604990005493, -0.04527248814702034, -0.005063566844910383, -0.004205906298011541, -0.08450794965028763, -0.3887166678905487, -0.00386265991255641, -0.0022969073615968227, -0.005181099753826857, -0.0032693292014300823, -0.11954313516616821, -0.005769267678260803, -1.654788613319397, -0.010794108733534813, -0.001617315225303173, -0.4173075258731842, -0.00372430682182312, -0.44531190395355225, -0.005052655003964901, -0.0017121669370681047, -0.0006992755807004869, -0.43380606174468994, -2.232555627822876, -0.01505183707922697, -0.0009757286752574146, -0.0017387047410011292, -0.2678515613079071, -0.00996625516563654, -0.022540437057614326, -1.6144272089004517, -0.0025191735476255417, -0.0031022538896650076, -0.062309522181749344, -0.04708647355437279, -2.6841750144958496, -0.12188748270273209, -0.0015833948273211718, -0.025014810264110565, -0.00015162272029556334, -0.004662713035941124, -4.768370445162873e-07, -1.0490362910786644e-05, -7.510157047363464e-06, -9.894321920000948e-06, -1.3066993951797485, -0.1722591519355774, -0.03639911860227585, -0.001637547742575407, -0.014489197172224522, -0.1442926824092865, -0.04544439539313316, -0.009729582816362381], "finish_reason": "stop"}], "metrics": {"energy": 160.0591031265259, "energy_per_token": 1.5099915389294898, "time": 5.261236, "time_per_token": 0.04963430188679246}}
{"outputs": [{"text": "# Validate inputs\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Invalid data input. Expected a Pandas DataFrame.\")\n    if not column in data:\n        raise KeyError(f\"Invalid column name. Data must contain a column named '{column}'.\")\n    if not isinstance(data[column][0], str):\n        raise TypeError(f\"Invalid data type for column '{column}'. Expected a string.\")\n\n    # Remove stopwords from the text column\n    data[column] = [re.sub(f\"\\\\b({'|'.join(STOPWORDS)}\\b)\", '', text) for text in data[column]]\n\n    return data", "tokens": ["#", " Valid", "ate", " inputs", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " data", " input", ".", " Expected", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " not", " column", " in", " data", ":", "\n", "        ", "raise", " Key", "Error", "(", "f", "\"", "Invalid", " column", " name", ".", " Data", " must", " contain", " a", " column", " named", " '", "{", "column", "}'", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", "[", "column", "][", "0", "]", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " data", " type", " for", " column", " '", "{", "column", "}'", ".", " Expected", " a", " string", ".", "\"", ")", "\n", "\n", "    ", "#", " Remove", " stop", "words", " from", " the", " text", " column", "\n", "    ", "data", "[", "column", "]", " =", " [", "re", ".", "sub", "(", "f", "\"", "\\\\", "b", "({", "'", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")}\\", "b", ")\"", ",", " ''", ",", " text", ")", " for", " text", " in", " data", "[", "column", "]]", "\n", "\n", "    ", "return", " data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.97762131690979, -4.418734550476074, -0.107604019343853, -3.800361156463623, -0.07409850507974625, -0.0033971713855862617, -0.16653423011302948, -0.11722561717033386, -0.08798075467348099, -0.00013183678674977273, -0.05678686127066612, -0.005231144838035107, -0.27157896757125854, -0.00010358751023886725, -0.020906321704387665, -0.10815773159265518, -0.0021604786161333323, -0.0013377059949561954, -0.0814032256603241, -0.18694466352462769, -5.8053239627042785e-05, -0.1802089661359787, -0.1655687391757965, -2.451047658920288, -0.93443763256073, -2.00118350982666, -0.38189929723739624, -0.9487804174423218, -0.45996496081352234, -1.6528011560440063, -6.067568756407127e-05, -0.11447808146476746, -0.00988198071718216, -0.0753060132265091, -0.0034172493033111095, -0.00014804698002990335, -0.0010629009921103716, -0.753302276134491, -0.058666326105594635, -0.2899938225746155, -2.7821409702301025, -0.023712731897830963, -0.016132181510329247, -0.39754536747932434, -0.0018412794452160597, -0.0005740663618780673, -0.004856457468122244, -0.8532124757766724, -1.1920858014491387e-05, -0.008769570849835873, -0.538809061050415, -0.031042812392115593, -1.0848217010498047, -0.10926958173513412, -0.31973353028297424, -0.8325427174568176, -2.308627128601074, -3.3213963508605957, -0.3506006896495819, -0.735531747341156, -0.15751923620700836, -0.1539435088634491, -0.36754557490348816, -0.0011965028243139386, -0.004085290711373091, -0.0018141493201255798, -0.07772858440876007, -0.0012859179405495524, -0.0003194298769813031, -0.0011192255187779665, -0.7388467192649841, -0.16023069620132446, -0.09424705058336258, -0.15958060324192047, -0.00033539868309162557, -0.1174592673778534, -0.02436828799545765, -0.0010543270036578178, -1.4687001705169678, -0.003130656434223056, -0.0010312244994565845, -0.000797192333266139, -0.012404082342982292, -0.05595385283231735, -0.00840708240866661, -0.0005802616360597312, -0.01587643101811409, -0.09269881993532181, -3.516612196108326e-05, -0.004476763773709536, -0.43573519587516785, -0.0021510813385248184, -0.2683352530002594, -0.5059714913368225, -0.1380540132522583, -1.9724748134613037, -0.5722609162330627, -0.07206196337938309, -0.0002982171718031168, -0.0016364767216145992, -0.007822592742741108, -0.005550567992031574, -0.3971463441848755, -0.3421957492828369, -0.17781607806682587, -0.12182479351758957, -0.0012496052077040076, -0.00022504181833937764, -0.0006878394051454961, -0.1917748749256134, -0.0010473009897395968, -0.10436808317899704, -0.57872074842453, -0.45182281732559204, -0.022134052589535713, -0.45052555203437805, -0.6721111536026001, -0.8119366765022278, -0.11017414927482605, -0.20880594849586487, -0.0005449955351650715, -0.6158326268196106, -0.07903867959976196, -0.004020822234451771, -0.0012504386249929667, -0.00397059740498662, -1.0520942211151123, -0.4101185202598572, -0.00013791563105769455, -0.003189360024407506, -0.16735519468784332, -2.968090295791626, -0.5821401476860046, -0.3774470388889313, -0.03400314599275589, -0.30982276797294617, -0.05176173150539398, -0.004869743715971708, -5.9960475482512265e-05, -7.271740287251305e-06, -0.00020394629973452538, -0.020479651167988777, -0.0584925152361393, -1.5497195136049413e-06, -2.0146166207268834e-05, -8.463501580990851e-05, -1.1086402082582936e-05, -1.6895949840545654, -0.1351873129606247, -0.059237804263830185, -0.00017152745567727834, -0.4245118796825409, -9.142934868577868e-05, -0.8019125461578369, -0.09956568479537964, -0.10200830549001694, -0.0008287570672109723, -0.0001419681793777272, -0.0019014865392819047, -0.002579696709290147, -0.0006870055221952498, -0.005350317806005478, -0.003168208058923483, -0.35696807503700256, -0.004289948847144842, -0.20867833495140076, -0.00883113406598568, -1.0172688961029053, -1.5497195136049413e-06, -5.960462772236497e-07, -0.0001248043408850208, -0.0003474347176961601, -0.07100509852170944], "finish_reason": "stop"}], "metrics": {"energy": 203.8106999702454, "energy_per_token": 1.1780965316199157, "time": 7.9960093, "time_per_token": 0.04621970693641619}}
{"outputs": [{"text": "stopwords = STOPWORDS\n    regex = re.compile(r'\\b({0})\\b'.format('|'.join(map(re.escape, stopwords))))\n\n    return data[column].apply(lambda x: regex.sub('', x))", "tokens": ["stop", "words", " =", " ST", "OP", "W", "OR", "DS", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "r", "'\\", "b", "({", "0", "})\\", "b", "'", ".", "format", "('", "|", "'", ".", "join", "(", "map", "(", "re", ".", "escape", ",", " stop", "words", "))", "))", "\n", "\n", "    ", "return", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " regex", ".", "sub", "('", "'", ",", " x", "))", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.8066294193267822, -0.5311673283576965, -0.3535290062427521, -0.19639156758785248, -4.410734163684538e-06, -3.2305197237292305e-05, -0.0004988856380805373, -5.364403477869928e-06, -0.3166503608226776, -0.24908855557441711, -2.1613597869873047, -0.13622303307056427, -0.11353504657745361, -6.329813186312094e-05, -0.0018264055252075195, -0.6491767168045044, -0.3486887812614441, -0.41473323106765747, -0.0011099375551566482, -0.48881569504737854, -0.4961325526237488, -0.0014778178883716464, -0.0003871168300975114, -0.0029950544703751802, -0.0009276139317080379, -0.000427274004323408, -0.13988766074180603, -0.0008811643347144127, -0.0005932478234171867, -8.583032467868179e-06, -6.115249561844394e-05, -0.016302723437547684, -1.156476378440857, -0.0013430631952360272, -0.0011712603736668825, -1.7762025890988298e-05, -9.77468371274881e-05, -2.6464111215318553e-05, -0.03344876319169998, -6.711257447022945e-05, -0.14517922699451447, -0.00185591506306082, -0.00736261298879981, -1.5711811780929565, -0.000715833914000541, -1.1363471746444702, -0.1671641767024994, -0.27646735310554504, -0.28759679198265076, -0.002835303544998169, -0.0018217648612335324, -1.268273115158081, -0.00246863579377532, -0.1458812952041626, -0.23672327399253845, -0.00045563330058939755, -0.28595271706581116, -6.925819616299123e-05, -4.1483970562694594e-05, -0.10261525958776474, -0.0422167032957077, -0.000713213172275573, -0.014990420080721378, -0.03770189732313156, -1.22825026512146, -5.8412379075889476e-06, -9.536738616588991e-07, -0.00024423000286333263, -0.0001419681793777272, -2.719130277633667, -0.007863398641347885], "finish_reason": "stop"}], "metrics": {"energy": 93.69771947479248, "energy_per_token": 1.3196861897858096, "time": 3.1667624, "time_per_token": 0.04460228732394366}}
{"outputs": [{"text": "if not isinstance(data[column], pd.Series):\n        raise TypeError(\"Expected column of type pandas.Series.\")\n\n    stopwords = STOPWORDS\n    return pd.DataFrame(data.loc[:, column]).apply(\n        lambda x: ' '.join([i for i in re.split('[^a-zA-Z]+', x) if i.lower() not in stopwords]),\n        axis=1)", "tokens": ["if", " not", " isinstance", "(", "data", "[", "column", "]", ",", " pd", ".", "Series", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Expected", " column", " of", " type", " pandas", ".", "Series", ".", "\"", ")", "\n", "\n", "    ", "stop", "words", " =", " ST", "OP", "W", "OR", "DS", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ".", "loc", "[:", ",", " column", "])", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "([", "i", " for", " i", " in", " re", ".", "split", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "]+", "'", ",", " x", ")", " if", " i", ".", "lower", "()", " not", " in", " stop", "words", "])", ",", "\n", "        ", "axis", "=", "1", ")", "\n", "\n", "if"], "logprobs": [-3.2020323276519775, -0.7377306222915649, -0.2688466012477875, -0.00022468426323030144, -0.07973656803369522, -2.5630455017089844, -0.043308183550834656, -0.04553893953561783, -0.00888324249535799, -0.4029389023780823, -4.279521817807108e-05, -0.061487942934036255, -0.05241963639855385, -0.022574469447135925, -0.002659238874912262, -0.3891218900680542, -0.23596470057964325, -0.0003906917118001729, -0.1671382635831833, -0.41548994183540344, -2.0679736137390137, -2.796823024749756, -1.6182572841644287, -0.26913562417030334, -0.46464821696281433, -0.009540677070617676, -0.012511925771832466, -1.5555169582366943, -0.17620117962360382, -0.0018298563081771135, -0.0032202552538365126, -0.522981584072113, -0.0004349001101218164, -2.66306209564209, -0.5345207452774048, -0.4981327950954437, -0.2563577890396118, -4.410734163684538e-06, -9.536697689327411e-06, -0.00011193125828867778, -7.986990567587782e-06, -0.6250385046005249, -0.5532580614089966, -2.5809733867645264, -2.6501855850219727, -0.0014023480471223593, -0.20712845027446747, -0.4181942939758301, -0.3584931194782257, -2.173774003982544, -1.302219033241272, -0.4386987090110779, -0.003666109871119261, -0.0516912080347538, -0.5999108552932739, -0.1324005126953125, -0.5222778916358948, -0.03430221974849701, -0.6251044273376465, -0.026871684938669205, -0.03304148465394974, -0.2971644699573517, -0.001019792165607214, -1.5917918682098389, -0.003843422280624509, -0.0003492222458589822, -5.829164365422912e-05, -0.4330931305885315, -2.5997629165649414, -0.08512627333402634, -0.001953480765223503, -0.0016185053391382098, -0.6976395845413208, -2.634490556374658e-05, -0.9432467818260193, -0.7999904751777649, -1.9422576427459717, -0.8194155097007751, -0.24825894832611084, -0.0005311747081577778, -0.0003831844369415194, -0.17857448756694794, -7.629103492945433e-05, -0.003151452634483576, -1.7295745611190796, -0.001942058908753097, -0.00046230596490204334, -0.15559697151184082, -0.3667069971561432, -0.06459522992372513, -0.29343292117118835, -1.2115169763565063, -0.14971338212490082, -0.0009616755996830761, -0.03889681026339531, -0.00013529339048545808, -0.00759913632646203, -2.038458114839159e-05, -0.14849437773227692, -0.9151259660720825, -0.3070480227470398, -0.03357395902276039, -0.10082422196865082, -0.1271858960390091, -0.06638513505458832, -0.9370303153991699, -0.4197709560394287, -0.02574189379811287, -0.908498227596283], "finish_reason": "stop"}], "metrics": {"energy": 116.12511459350584, "energy_per_token": 1.0653680237936316, "time": 4.8346257, "time_per_token": 0.04435436422018349}}
{"outputs": [{"text": "stopwords = STOPWORDS\n    df[column] = df[column].apply(lambda text: \" \".join([word for word in re.split(r'\\s+', text) if word not in stopwords]))\n    return df", "tokens": ["stop", "words", " =", " ST", "OP", "W", "OR", "DS", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " text", ":", " \"", " \"", ".", "join", "([", "word", " for", " word", " in", " re", ".", "split", "(", "r", "'\\", "s", "+'", ",", " text", ")", " if", " word", " not", " in", " stop", "words", "]))", "\n", "    ", "return", " df"], "logprobs": [-2.8066294193267822, -0.5311673283576965, -0.3535290062427521, -0.19639156758785248, -4.410734163684538e-06, -3.2305197237292305e-05, -0.0004988856380805373, -5.364403477869928e-06, -0.3166503608226776, -0.24908855557441711, -1.4595452547073364, -1.2559256553649902, -0.008664986118674278, -0.004866066388785839, -0.01861577294766903, -0.06741523742675781, -0.0018043918535113335, -0.0010245556477457285, -0.0016087458934634924, -0.0038778597954660654, -0.6120370626449585, -0.004085884429514408, -0.14260439574718475, -2.796445608139038, -0.001500910148024559, -1.634441614151001, -0.007450887002050877, -0.0003023882454726845, -8.570780482841656e-05, -0.5169537663459778, -0.4287307858467102, -0.01082359068095684, -0.00047958316281437874, -0.0005452338373288512, -0.7330746650695801, -3.4927710657939315e-05, -0.8581690788269043, -0.16556116938591003, -0.5776423215866089, -1.7041510343551636, -0.8754652142524719, -0.2908395230770111, -0.00017951308109331876, -0.08629802614450455, -0.0929488092660904, -0.03935718536376953, -0.11442768573760986, -0.4538465142250061, -0.0003688847064040601, -0.0197749100625515, -5.7338023907504976e-05, -0.03290710970759392, -0.01869603805243969, -0.08187498152256012, -0.014551467262208462, -0.036730460822582245], "finish_reason": "stop"}], "metrics": {"energy": 67.65465803909301, "energy_per_token": 1.2081188935552323, "time": 2.540204, "time_per_token": 0.045360785714285715}}
{"outputs": [{"text": "# Create a set of stopwords using the STOPWORDS set.\n    # Regex is used to remove punctuation and convert the string to lowercase.\n    stopword_regex = re.compile(r'\\b\\w+\\b', flags=re.IGNORECASE)\n    stopwords_list = {word for word in STOPWORDS if (word.lower() not in STOPWORDS)}\n\n    # Iterate over each row in the DataFrame and remove the stopwords.\n    for row in data.iterrows():\n        text = row[column]\n        word_list = [word for word in stopword_regex.findall(text) if word not in stopwords_list]\n\n        # Remove the stopwords from the text and replace them with an empty string.\n        for word in stopwords_list:\n            text = text.replace(word, '')\n\n        # Replace the modified text with the updated value at the corresponding index in the DataFrame.\n        data.at[row.index, column] = text\n\n    return data", "tokens": ["#", " Create", " a", " set", " of", " stop", "words", " using", " the", " ST", "OP", "W", "OR", "DS", " set", ".", "\n", "    ", "#", " Re", "gex", " is", " used", " to", " remove", " punct", "uation", " and", " convert", " the", " string", " to", " lower", "case", ".", "\n", "    ", "stop", "word", "_", "regex", " =", " re", ".", "compile", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", ")", "\n", "    ", "stop", "words", "_", "list", " =", " {", "word", " for", " word", " in", " ST", "OP", "W", "OR", "DS", " if", " (", "word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", ")}", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " row", " in", " the", " Data", "Frame", " and", " remove", " the", " stop", "words", ".", "\n", "    ", "for", " row", " in", " data", ".", "iter", "rows", "():", "\n", "        ", "text", " =", " row", "[", "column", "]", "\n", "        ", "word", "_", "list", " =", " [", "word", " for", " word", " in", " stop", "word", "_", "regex", ".", "find", "all", "(", "text", ")", " if", " word", " not", " in", " stop", "words", "_", "list", "]", "\n", "\n", "        ", "#", " Remove", " the", " stop", "words", " from", " the", " text", " and", " replace", " them", " with", " an", " empty", " string", ".", "\n", "        ", "for", " word", " in", " stop", "words", "_", "list", ":", "\n", "            ", "text", " =", " text", ".", "replace", "(", "word", ",", " '", "')", "\n", "\n", "        ", "#", " Replace", " the", " modified", " text", " with", " the", " updated", " value", " at", " the", " corresponding", " index", " in", " the", " Data", "Frame", ".", "\n", "        ", "data", ".", "at", "[", "row", ".", "index", ",", " column", "]", " =", " text", "\n", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-0.97762131690979, -2.2657032012939453, -0.14284871518611908, -3.176380157470703, -0.6951176524162292, -1.5728455781936646, -0.036632779985666275, -2.0869219303131104, -0.3603825271129608, -0.0833134800195694, -2.276871418871451e-05, -0.000841025379486382, -0.00012778419477399439, -1.4781842764932662e-05, -1.341098666191101, -2.1309430599212646, -0.03103610873222351, -0.006895554717630148, -1.8478959798812866, -4.501808166503906, -0.04279971122741699, -2.486903429031372, -0.21576932072639465, -0.056736964732408524, -0.9154810309410095, -2.2807207107543945, -0.32111838459968567, -0.8659875392913818, -2.461615562438965, -1.2940813302993774, -1.2993686199188232, -0.03817050904035568, -0.09075221419334412, -0.12159945070743561, -0.13708630204200745, -0.0063267657533288, -0.016637858003377914, -1.4601211547851562, -2.235494375228882, -0.0179170910269022, -0.5752074122428894, -0.006118969526141882, -0.177541121840477, -3.8742269680369645e-05, -0.012272793799638748, -0.5330728888511658, -0.16833969950675964, -0.8449009656906128, -0.0596909299492836, -2.608818531036377, -0.1446862816810608, -0.46900513768196106, -0.0016307639889419079, -0.9711683392524719, -0.003664446994662285, -2.499213695526123, -0.014346313662827015, -0.0015347142471000552, -0.00695462990552187, -0.8813058733940125, -5.3881147323409095e-05, -2.288792165927589e-05, -0.00038258862332440913, -0.01970863901078701, -0.012555483728647232, -0.09736336767673492, -0.2712421119213104, -0.2289179414510727, -2.2664692401885986, -2.2575931549072266, -0.003153829136863351, -2.1919424533843994, -0.7220474481582642, -0.9632924795150757, -0.018141532316803932, -0.018318520858883858, -0.24642717838287354, -1.1920922133867862e-06, -0.00013302871957421303, -8.940656698541716e-06, -6.6756979322235566e-06, -0.5442762970924377, -3.4517791271209717, -0.1859721690416336, -2.2876367568969727, -0.6898002028465271, -0.02466839738190174, -0.41545194387435913, -0.00017033556650858372, -0.13007915019989014, -8.22540732769994e-06, -0.00019643761334009469, -3.755022044060752e-05, -1.0013530300057027e-05, -0.8411065340042114, -0.03476310148835182, -0.893618643283844, -0.0010856455191969872, -0.20581381022930145, -4.182900905609131, -0.004736869130283594, -0.4263090491294861, -1.4608229398727417, -0.2679600119590759, -0.3138771653175354, -0.043008819222450256, -0.42638859152793884, -0.0006204110686667264, -0.7795191407203674, -0.44754400849342346, -0.7483540773391724, -0.12731868028640747, -0.010243108496069908, -1.5540143251419067, -0.004433801863342524, -0.0025856418069452047, -1.57932710647583, -1.636008620262146, -0.0913546085357666, -0.08832599967718124, -0.5711979866027832, -1.0456671714782715, -0.0014430596493184566, -0.0011231550015509129, -0.0028621682431548834, -0.009774561040103436, -1.142386794090271, -0.07303459942340851, -0.07780203223228455, -0.06121617183089256, -1.7255357503890991, -0.0021934278775006533, -0.1161908283829689, -0.12056315690279007, -4.205262184143066, -0.0274871326982975, -0.12323534488677979, -0.002476603025570512, -2.093432664871216, -0.12631970643997192, -0.13445383310317993, -0.0025032395496964455, -0.0009715604246594012, -0.19873802363872528, -0.009062467142939568, -4.7205765440594405e-05, -2.47952248173533e-05, -0.00038223114097490907, -0.09326671063899994, -0.00350254587829113, -0.00016282663273159415, -0.012019234709441662, -0.09180635958909988, -0.047388941049575806, -0.3025815486907959, -0.7564932703971863, -0.00019703354337252676, -0.04743873327970505, -0.00144710682798177, -0.0002960720448754728, -4.327203714638017e-05, -0.012787369079887867, -0.0013847296359017491, -2.3281519412994385, -0.028954559937119484, -0.055795129388570786, -4.1890363693237305, -0.7963578701019287, -0.9593424797058105, -0.0300204586237669, -0.19801098108291626, -0.020588146522641182, -0.5839059352874756, -0.6320515871047974, -0.8185552358627319, -0.18732795119285583, -0.003101303242146969, -1.8351233005523682, -0.07179072499275208, -0.09491738677024841, -0.050758879631757736, -0.0013180625392124057, -0.0006291079334914684, -1.5807535648345947, -0.43486136198043823, -0.009368741884827614, -0.19508077204227448, -0.08110988885164261, -0.0011880489764735103, -3.790783375734463e-05, -0.0016776548000052571, -0.0008052920456975698, -0.0011865011183544993, -0.17127999663352966, -0.006898514460772276, -0.11081906408071518, -0.00012492353562265635, -0.011983427219092846, -0.01912662759423256, -0.13185766339302063, -0.026935510337352753, -0.25057247281074524, -0.018020829185843468, -0.015626132488250732, -0.13980649411678314, -0.01609640382230282, -0.10670023411512375, -1.2703591585159302, -0.09662681072950363, -2.6992878913879395, -0.10405014455318451, -0.1867934614419937, -0.06449666619300842, -1.3553457260131836, -2.7094836235046387, -2.789957046508789, -0.08334802836179733, -0.7413151860237122, -2.3024322986602783, -1.4847595691680908, -0.02742067724466324, -0.247030571103096, -0.0008624648326076567, -0.02215888909995556, -0.00020597243565134704, -0.0002586507180240005, -0.1915288269519806, -0.04037278890609741, -0.5352751612663269, -0.0003854485403280705, -0.00788918323814869, -0.2048221081495285, -0.6219412088394165, -0.0008680627797730267, -0.014516455121338367, -0.00013267113536130637, -4.434487345861271e-05, -0.940233051776886, -0.1074591726064682, -0.03731989115476608, -0.012364991940557957, -0.1548229604959488, -0.0071803610771894455, -0.8400084972381592, -0.015563693828880787, -1.0978535413742065], "finish_reason": "stop"}], "metrics": {"energy": 287.5240050373077, "energy_per_token": 1.16879676844434, "time": 11.555073, "time_per_token": 0.04697184146341463}}
{"outputs": [{"text": "stop_words = STOPWORDS\n    pattern = re.compile(\"|\".join(map(re.escape, stop_words)))\n    return data[data[column].apply(lambda x: len(x) - len(pattern.sub(\"\", x))) > 1]", "tokens": ["stop", "_", "words", " =", " ST", "OP", "W", "OR", "DS", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "\"", "|", "\"", ".", "join", "(", "map", "(", "re", ".", "escape", ",", " stop", "_", "words", ")))", "\n", "    ", "return", " data", "[", "data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " len", "(", "x", ")", " -", " len", "(", "pattern", ".", "sub", "(", "\"", "\"", ",", " x", ")))", " >", " ", "1", "]", "\n", "\n", "def"], "logprobs": [-2.8066294193267822, -1.567103624343872, -0.1356666386127472, -0.0987154096364975, -0.20657068490982056, -3.576272320060525e-06, -2.634490556374658e-05, -0.00029202012228779495, -6.9141146923357155e-06, -0.4589379131793976, -0.28291061520576477, -2.249222993850708, -0.010651993565261364, -0.12068033218383789, -2.8490614567999728e-05, -0.0015520919114351273, -0.25531822443008423, -2.590108633041382, -0.28577834367752075, -2.6940935640595853e-05, -9.548207890475169e-05, -0.00017236177518498152, -0.22986851632595062, -0.6692482233047485, -0.001053374377079308, -0.002097075106576085, -0.00029762129997834563, -0.0002302858338225633, -3.755022044060752e-05, -0.04605740308761597, -0.0014646052150055766, -1.5735502529423684e-05, -0.024908771738409996, -0.013333087787032127, -0.27542296051979065, -1.0877574682235718, -0.10354864597320557, -0.31226101517677307, -1.8103148937225342, -0.009397675283253193, -0.051361504942178726, -0.002017725957557559, -0.0018192660063505173, -1.0790760517120361, -0.0005673944251611829, -0.2683042585849762, -0.17695252597332, -0.0018836389062926173, -2.0896809101104736, -0.004863930866122246, -2.6658830642700195, -0.4732905626296997, -2.0912909507751465, -0.09789802879095078, -0.0009514334378764033, -0.3722769320011139, -0.00013600854435935616, -0.13428165018558502, -0.2285488396883011, -0.03347804769873619, -0.042000576853752136, -0.00018249277491122484, -0.020390884950757027, -0.7105166912078857, -0.4476275146007538, -0.010953772813081741, -1.862740397453308, -0.37093430757522583, -0.32750385999679565, -0.039769116789102554, -1.316190481185913], "finish_reason": "stop"}], "metrics": {"energy": 92.53097129440307, "energy_per_token": 1.3032531168225785, "time": 3.173896, "time_per_token": 0.04470276056338028}}
{"outputs": [{"text": "stopwords_regex = re.compile(r'[' + re.escape(''.join(STOPWORDS)) + ']')\n    data[column] = data[column].apply(lambda x: re.sub(stopwords_regex, '', x))\n    return data", "tokens": ["stop", "words", "_", "regex", " =", " re", ".", "compile", "(", "r", "'", "['", " +", " re", ".", "escape", "('", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", "))", " +", " '", "]", "')", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "(", "stop", "words", "_", "regex", ",", " ''", ",", " x", "))", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-2.8066294193267822, -0.5311673283576965, -1.2251815795898438, -0.7225568890571594, -0.015445496886968613, -0.8817412257194519, -3.242440288886428e-05, -0.005065108649432659, -0.4926832914352417, -0.23609527945518494, -2.7573606967926025, -2.0363473892211914, -0.08101282268762589, -0.3959404528141022, -0.0010649253381416202, -0.33627378940582275, -0.14106719195842743, -0.06793496012687683, -0.0006138585740700364, -8.535020606359467e-05, -0.02493225783109665, -0.07520218938589096, -7.152555099310121e-07, -1.07287787614041e-05, -1.3112935448589269e-05, -9.417489309271332e-06, -0.04037885740399361, -0.0036841630935668945, -0.5836881995201111, -0.11733746528625488, -0.09359504282474518, -0.017519600689411163, -0.20522822439670563, -1.3643971681594849, -0.13708026707172394, -0.006972386967390776, -0.004576921928673983, -0.00752826826646924, -0.06618532538414001, -0.004794055130332708, -0.000990377040579915, -0.0009043894242495298, -0.0020354522857815027, -1.2202154397964478, -0.001476984703913331, -0.14868825674057007, -0.21153448522090912, -0.0007543102256022394, -0.49247780442237854, -0.00012432756193447858, -0.00225242436863482, -0.007540809456259012, -0.023320218548178673, -0.00014852374442853034, -0.00013100242358632386, -2.9682672902708873e-05, -0.000243634101934731, -0.2619108557701111, -0.0004993622424080968, -0.017623264342546463, -0.049108754843473434, -0.0159525778144598, -0.07712001353502274, -0.01089222077280283, -0.011184142902493477, -0.6088752150535583, -0.016493288800120354, -0.9677994251251221], "finish_reason": "stop"}], "metrics": {"energy": 79.0714211101532, "energy_per_token": 1.1628150163257822, "time": 3.170107, "time_per_token": 0.04661922058823529}}
{"outputs": [{"text": "# Check the requirements\n    try:\n        import re, pandas as pd\n    except:\n        print(\"\\n### Requires: pandas, re\\n\")\n        return None\n    df = data[column]\n    for column in df.columns:\n        try:\n            if isinstance(column, int):\n                raise TypeError\n            elif not isinstance(column, str):\n                raise TypeError\n        except TypeError:\n            print(f\"### Invalid column name: {column}\\n\")\n            return None\n    # Remove stopwords from each row\n    new_df = []\n    for text in df.loc[:, column].apply(str):\n        # Split text into individual words\n        words = text.split()\n        # Remove stopwords and convert to lowercase\n        filtered_words = [word.lower() for word in words if not (word in STOPWORDS)]\n        # Join filtered words back into a string\n        filtered_text = ' '.join(filtered_words)\n        # Append filtered text to list\n        new_df.append(filtered_text)\n    # Create a", "tokens": ["#", " Check", " the", " requirements", "\n", "    ", "try", ":", "\n", "        ", "import", " re", ",", " pandas", " as", " pd", "\n", "    ", "except", ":", "\n", "        ", "print", "(", "\"", "\\", "n", "###", " Requ", "ires", ":", " pandas", ",", " re", "\\", "n", "\"", ")", "\n", "        ", "return", " None", "\n", "    ", "df", " =", " data", "[", "column", "]", "\n", "    ", "for", " column", " in", " df", ".", "columns", ":", "\n", "        ", "try", ":", "\n", "            ", "if", " isinstance", "(", "column", ",", " int", "):", "\n", "                ", "raise", " Type", "Error", "\n", "            ", "elif", " not", " isinstance", "(", "column", ",", " str", "):", "\n", "                ", "raise", " Type", "Error", "\n", "        ", "except", " Type", "Error", ":", "\n", "            ", "print", "(", "f", "\"", "###", " Invalid", " column", " name", ":", " {", "column", "}\\", "n", "\"", ")", "\n", "            ", "return", " None", "\n", "    ", "#", " Remove", " stop", "words", " from", " each", " row", "\n", "    ", "new", "_", "df", " =", " []", "\n", "    ", "for", " text", " in", " df", ".", "loc", "[:", ",", " column", "]", ".", "apply", "(", "str", "):", "\n", "        ", "#", " Split", " text", " into", " individual", " words", "\n", "        ", "words", " =", " text", ".", "split", "()", "\n", "        ", "#", " Remove", " stop", "words", " and", " convert", " to", " lower", "case", "\n", "        ", "filtered", "_", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", " if", " not", " (", "word", " in", " ST", "OP", "W", "OR", "DS", ")]", "\n", "        ", "#", " Join", " filtered", " words", " back", " into", " a", " string", "\n", "        ", "filtered", "_", "text", " =", " '", " '", ".", "join", "(", "filtered", "_", "words", ")", "\n", "        ", "#", " App", "end", " filtered", " text", " to", " list", "\n", "        ", "new", "_", "df", ".", "append", "(", "filtered", "_", "text", ")", "\n", "    ", "#", " Create", " a"], "logprobs": [-0.97762131690979, -1.9165183305740356, -2.8789567947387695, -0.45627641677856445, -0.34332966804504395, -0.0028656155336648226, -2.4073421955108643, -0.0004807746736332774, -0.0027122637256979942, -0.0014804366510361433, -0.37534400820732117, -1.6219614744186401, -2.807600498199463, -0.06458540260791779, -0.8180197477340698, -0.0038077959325164557, -0.04142030328512192, -0.22396156191825867, -0.0014492495683953166, -2.1241776943206787, -0.009268589317798615, -0.0015926783671602607, -2.0330328941345215, -0.15583671629428864, -0.18765518069267273, -3.763249635696411, -1.1010586023330688, -4.2567596435546875, -3.515401840209961, -1.3231111764907837, -1.6018285751342773, -0.3685869872570038, -0.4710611402988434, -0.03398286551237106, -2.5328290462493896, -0.024249032139778137, -0.14216695725917816, -0.007409827783703804, -0.003186864545568824, -0.11860963702201843, -1.088481068611145, -1.1182129383087158, -0.0050110225565731525, -1.435633897781372, -2.364725112915039, -0.01795327290892601, -0.816819429397583, -0.3542047441005707, -0.313800185918808, -0.0065744295716285706, -0.4227817952632904, -0.3330093324184418, -3.8872411251068115, -3.1956443786621094, -0.2111314982175827, -0.3496551513671875, -0.5240942239761353, -0.07531718164682388, -0.02919471450150013, -0.009531112387776375, -0.014552759006619453, -3.7928967475891113, -0.0007917130133137107, -0.009426135569810867, -0.003745565889403224, -2.298508405685425, -1.9212573766708374, -0.0012523435289040208, -2.9220616817474365, -0.005122038535773754, -1.9603312015533447, -0.21651984751224518, -0.0860825702548027, -0.0009004590683616698, -2.436718463897705, -0.8002997636795044, -0.0013608013978227973, -0.6022769808769226, -0.4691620469093323, -2.533783435821533, -1.2618685960769653, -0.31043770909309387, -0.00039200251922011375, -0.44711995124816895, -0.0012496052077040076, -0.01761576719582081, -0.027283456176519394, -0.002993509406223893, -0.00033706706017255783, -0.20043423771858215, -0.15572714805603027, -0.00013457823661156, -0.008871663361787796, -0.36410191655158997, -0.0011469698511064053, -1.0749340057373047, -4.458328112377785e-05, -0.018497701734304428, -0.009820363484323025, -0.002628207439556718, -0.1261015683412552, -0.03756975755095482, -0.8942078948020935, -0.07667052000761032, -2.010991096496582, -2.5571441650390625, -0.7797444462776184, -0.6134831309318542, -0.5493085980415344, -0.19982850551605225, -0.02524149976670742, -0.9678311347961426, -0.015211175195872784, -0.04583083093166351, -0.002558888401836157, -0.00200654286891222, -0.09400563687086105, -0.45170992612838745, -0.07246285676956177, -0.0010452766437083483, -0.8728406429290771, -1.0746040344238281, -0.6423907279968262, -0.47872182726860046, -0.02853860892355442, -0.8342465758323669, -2.168954372406006, -1.123701810836792, -0.6084578633308411, -0.0021947361528873444, -3.5150020122528076, -0.07748083025217056, -0.32929858565330505, -0.0034898349549621344, -1.69179368019104, -0.004063208121806383, -0.004970218520611525, -0.11833219975233078, -2.644193172454834, -0.013931412249803543, -0.02600930444896221, -1.3044205904006958, -1.9070019721984863, -0.10950841009616852, -0.02832738310098648, -0.3353201746940613, -1.3032317161560059, -0.0009919252479448915, -3.259676218032837, -0.0033137667924165726, -0.4019585847854614, -0.1731189489364624, -0.01451351772993803, -0.001778569770976901, -1.9168576002120972, -2.1958060264587402, -1.5192618370056152, -0.15085114538669586, -2.8128821849823, -0.01656821370124817, -0.14922401309013367, -0.00020787939138244838, -0.11530507355928421, -0.007500818464905024, -1.6493440866470337, -0.0003146630187984556, -0.12022083252668381, -0.049170155078172684, -0.002928851405158639, -0.016315976157784462, -0.09616629779338837, -0.2557659149169922, -0.5131188035011292, -0.01835082471370697, -2.041308641433716, -1.2411220073699951, -0.32702088356018066, -0.03660232573747635, -0.07472384721040726, -0.014998523518443108, -0.00032240914879366755, -2.750709056854248, -0.16143915057182312, -0.019103236496448517, -0.000806602300144732, -0.052110087126493454, -0.0721994936466217, -0.5037093162536621, -0.05416538193821907, -0.0001778444420779124, -0.03929942101240158, -0.00035279724397696555, -0.00027497802511788905, -0.003638672875240445, -0.022716648876667023, -1.8033874034881592, -2.740846633911133, -0.16755947470664978, -0.11815150827169418, -0.001050516264513135, -5.960462772236497e-07, -6.556489552167477e-06, -6.937739817658439e-05, -9.417489309271332e-06, -0.5487772822380066, -0.0011433976469561458, -0.0031506207305938005, -0.17408056557178497, -0.2997007966041565, -1.219513177871704, -0.0035582580603659153, -0.1760263442993164, -0.0859241858124733, -0.15642379224300385, -0.7297950387001038, -0.21846218407154083, -0.0001255195093108341, -0.7526929974555969, -0.01691298931837082, -0.03328169882297516, -0.0005048430757597089, -0.8519376516342163, -0.0002711643755901605, -6.639736966462806e-05, -0.00015793983766343445, -0.005968841258436441, -0.002859553089365363, -5.364274329622276e-05, -5.483612312673358e-06, -0.00014423283573705703, -0.007188764400780201, -0.001280679483897984, -0.7524297833442688, -0.6413009166717529, -0.00019178935326635838, -2.261432409286499, -0.050864364951848984, -0.08248066157102585, -3.2489161491394043, -0.22328001260757446, -8.749579137656838e-05, -0.00343542592599988, -5.221230458118953e-05, -0.0039575365372002125, -0.0020041633397340775, -0.00045193947153165936, -0.04886527359485626, -0.01026717945933342, -8.320462075062096e-05, -2.825220326485578e-05, -0.005561474710702896, -0.00017093151109293103, -0.040592703968286514, -0.37772396206855774, -0.8969901204109192, -0.5302106738090515], "finish_reason": "length"}], "metrics": {"energy": 296.0342733106611, "energy_per_token": 1.15638388011977, "time": 11.960885, "time_per_token": 0.04672220703125}}
{"outputs": [{"text": "texts = data[column]\n    texts = texts.apply(lambda x: \" \".join(re.sub(r\"([^\\w])\", \" \", x).split()))\n\n    for stopword in STOPWORDS:\n        texts = texts.apply(lambda x: x.replace(stopword, ''))\n\n    df = pd.DataFrame({\n        column: texts\n    })\n\n    return df", "tokens": ["text", "s", " =", " data", "[", "column", "]", "\n", "    ", "text", "s", " =", " texts", ".", "apply", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "(", "re", ".", "sub", "(", "r", "\"", "([", "^\\", "w", "])", "\"", ",", " \"", " \"", ",", " x", ")", ".", "split", "()))", "\n", "\n", "    ", "for", " stop", "word", " in", " ST", "OP", "W", "OR", "DS", ":", "\n", "        ", "text", "s", " =", " texts", ".", "apply", "(", "lambda", " x", ":", " x", ".", "replace", "(", "stop", "word", ",", " ''", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "column", ":", " texts", "\n", "    ", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-3.179750680923462, -0.7237710952758789, -0.013895203359425068, -0.2140388935804367, -0.06981272995471954, -0.01933968812227249, -0.0039505306631326675, -0.5287555456161499, -0.21908392012119293, -0.8944151997566223, -0.010625926777720451, -0.3724948763847351, -0.34441855549812317, -0.029683299362659454, -1.1443673372268677, -0.005257589276880026, -0.157199427485466, -0.20342138409614563, -0.0017130000051110983, -1.7086982727050781, -0.023809002712368965, -0.0007018963224254549, -7.903263758635148e-05, -0.21889278292655945, -0.3188640773296356, -7.378782902378589e-05, -0.983607292175293, -0.05164875462651253, -0.2635749280452728, -0.7304713129997253, -2.5595083236694336, -1.0791658163070679, -0.018406067043542862, -1.6574463844299316, -0.22628487646579742, -0.0018794744974002242, -0.09150931239128113, -0.06389240175485611, -0.0006475735572166741, -0.12641100585460663, -0.052413638681173325, -0.027665259316563606, -0.22108636796474457, -0.052001677453517914, -0.1276688575744629, -2.595287799835205, -0.0011244647903367877, -1.4678407907485962, -1.1525578498840332, -0.0864015743136406, -0.0010875507723540068, -0.022247031331062317, -1.311301275563892e-06, -0.00019786784832831472, -0.0008356655016541481, -9.65590606938349e-06, -0.01254818495362997, -0.0034534833393990993, -0.0035345007199794054, -0.12423887103796005, -0.0010558750946074724, -0.028703343123197556, -0.0037062542978674173, -0.0007421599584631622, -0.6296414136886597, -0.0009887097403407097, -0.014099273830652237, -0.025242777541279793, -0.0007286992622539401, -0.8229368925094604, -0.019045693799853325, -0.0405232198536396, -0.014965406619012356, -0.17855176329612732, -0.0002474478678777814, -0.02314329706132412, -1.8389511108398438, -0.000454799213912338, -0.022268833592534065, -0.19040116667747498, -0.001931350794620812, -2.8219306468963623, -0.16433119773864746, -0.1837506890296936, -0.0010804060148075223, -0.018306581303477287, -0.4320192337036133, -2.0491042137145996, -0.005500775761902332, -0.09760332107543945, -0.006407787092030048, -0.011776097118854523, -0.06788216531276703, -0.004688816610723734, -0.03075501322746277, -0.006419276352971792, -0.33274853229522705, -0.0017193072708323598, -0.033536262810230255, -0.014032509177923203, -1.0164172649383545, -0.00869689416140318, -0.9768843650817871], "finish_reason": "stop"}], "metrics": {"energy": 109.0702685623169, "energy_per_token": 1.0589346462360865, "time": 4.6410065, "time_per_token": 0.04505831553398058}}
{"outputs": [{"text": "# Remove stopwords from the specified column using STOPWORDS\n    data[column] = data[column].apply(lambda x: \" \".join([w for w in x.split(\" \") if w.lower() not in STOPWORDS]))\n    return data", "tokens": ["#", " Remove", " stop", "words", " from", " the", " specified", " column", " using", " ST", "OP", "W", "OR", "DS", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "([", "w", " for", " w", " in", " x", ".", "split", "(", "\"", " \"", ")", " if", " w", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-0.97762131690979, -1.4818974733352661, -1.1083438396453857, -0.023480689153075218, -0.30158859491348267, -0.30420178174972534, -1.3600817918777466, -0.11963790655136108, -1.911590576171875, -4.023253917694092, -0.00029988560709170997, -0.0013685394078493118, -4.970903682988137e-05, -2.109982233378105e-05, -0.8030915260314941, -0.0032832310535013676, -1.4609754085540771, -0.17868028581142426, -0.00656388932839036, -0.008582020178437233, -0.016279971227049828, -0.2276565283536911, -0.0029198178090155125, -0.0009606037638150156, -0.0017533419886603951, -0.0018162912456318736, -0.600229024887085, -0.003222394036129117, -0.14635615050792694, -0.17060630023479462, -0.00011848701251437888, -1.2660012245178223, -0.007953284308314323, -0.00015090756642166525, -3.969590397900902e-05, -0.6250379085540771, -1.3229455947875977, -0.027268609032034874, -0.00043049128726124763, -0.00026770823751576245, -0.6013081669807434, -0.001129108713939786, -0.06482541561126709, -1.4195783138275146, -0.007888000458478928, -0.0002571013756096363, -0.0005259322933852673, -0.020359698683023453, -0.06209937110543251, -1.0857393741607666, -0.03196263685822487, -0.000691770575940609, -0.012337792664766312, -0.00016032364510465413, -0.004760360810905695, -5.960462772236497e-07, -4.95898348162882e-05, -0.00016282663273159415, -7.390948667307384e-06, -0.019517166540026665, -0.004224305972456932, -0.42795735597610474, -0.039562199264764786, -0.008961457759141922, -0.5555930733680725, -0.012655071914196014, -1.1241472959518433], "finish_reason": "stop"}], "metrics": {"energy": 81.35041500949859, "energy_per_token": 1.2141852986492327, "time": 2.9603727, "time_per_token": 0.044184667164179105}}
{"outputs": [{"text": "stopwords = STOPWORDS.union({\"I\", \"a\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\",\n                                 \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\",\n                                 \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n                                 \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\",\n                                 \"against\", \"between\", \"into\", \"through\", \"during\", \"before\",\n                                 \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n                                 \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"", "tokens": ["stop", "words", " =", " ST", "OP", "W", "OR", "DS", ".", "union", "(", "{\"", "I", "\"", ",", " \"", "a", "\"", ",", " \"", "am", "\"", ",", " \"", "is", "\"", ",", " \"", "are", "\"", ",", " \"", "was", "\"", ",", " \"", "were", "\"", ",", " \"", "be", "\"", ",", " \"", "been", "\"", ",", " \"", "being", "\"", ",", "\n", "                ", "                ", " \"", "have", "\"", ",", " \"", "has", "\"", ",", " \"", "had", "\"", ",", " \"", "having", "\"", ",", " \"", "do", "\"", ",", " \"", "does", "\"", ",", " \"", "did", "\"", ",", " \"", "doing", "\"", ",", "\n", "                ", "                ", " \"", "a", "\"", ",", " \"", "an", "\"", ",", " \"", "the", "\"", ",", " \"", "and", "\"", ",", " \"", "but", "\"", ",", " \"", "if", "\"", ",", " \"", "or", "\"", ",", " \"", "because", "\"", ",", "\n", "                ", "                ", " \"", "as", "\"", ",", " \"", "until", "\"", ",", " \"", "while", "\"", ",", " \"", "of", "\"", ",", " \"", "at", "\"", ",", " \"", "by", "\"", ",", " \"", "for", "\"", ",", " \"", "with", "\"", ",", " \"", "about", "\"", ",", "\n", "                ", "                ", " \"", "against", "\"", ",", " \"", "between", "\"", ",", " \"", "into", "\"", ",", " \"", "through", "\"", ",", " \"", "d", "uring", "\"", ",", " \"", "before", "\"", ",", "\n", "                ", "                ", " \"", "after", "\"", ",", " \"", "above", "\"", ",", " \"", "below", "\"", ",", " \"", "to", "\"", ",", " \"", "from", "\"", ",", " \"", "up", "\"", ",", " \"", "down", "\"", ",", " \"", "in", "\"", ",", " \"", "out", "\"", ",", "\n", "                ", "                ", " \"", "on", "\"", ",", " \"", "off", "\"", ",", " \"", "over", "\"", ",", " \"", "under", "\"", ",", " \"", "again", "\"", ",", " \"", "f", "urther", "\"", ",", " \""], "logprobs": [-2.8066294193267822, -0.5311673283576965, -0.3535290062427521, -0.19639156758785248, -4.410734163684538e-06, -3.2305197237292305e-05, -0.0004988856380805373, -5.364403477869928e-06, -1.5956802368164062, -0.19651223719120026, -0.2090337574481964, -1.884032130241394, -4.877531051635742, -0.08785782009363174, -0.00037317464011721313, -0.03850677236914635, -2.8265724182128906, -0.03470864146947861, -0.0005277194431982934, -0.004645033273845911, -3.4765982627868652, -0.06778881698846817, -0.008721238933503628, -0.005518084857612848, -2.4343724250793457, -0.01621757447719574, -0.00044169207103550434, -0.005179676692932844, -0.3849583566188812, -0.03827515244483948, -0.0007046362152323127, -0.009097079746425152, -1.8503848314285278, -0.00426241010427475, -0.0001616347290109843, -0.010570371523499489, -0.1109943613409996, -0.03000137209892273, -0.0009214208112098277, -0.04063047841191292, -0.5764400959014893, -0.015329399146139622, -0.0004291805380489677, -0.045620378106832504, -0.14361903071403503, -0.02556435577571392, -0.000619696278590709, -0.09019944816827774, -0.5814029574394226, -0.13432063162326813, -0.003626557532697916, -1.2253292798995972, -0.06230347231030464, -0.08508182317018509, -0.28287163376808167, -0.09544338285923004, -0.00022003613412380219, -5.829164365422912e-05, -0.0013394916895776987, -0.10927342623472214, -0.000785161682870239, -6.723177648382261e-05, -0.0008573431987315416, -0.04390983656048775, -0.0018818541429936886, -0.00020680672605521977, -0.0021714221220463514, -0.15974147617816925, -0.010616373270750046, -0.0011051744222640991, -0.004676002077758312, -0.006532860454171896, -0.0012950851814821362, -0.00013851160474587232, -0.002886654809117317, -0.023278873413801193, -0.001462581567466259, -8.046303264563903e-05, -0.0036215689033269882, -0.038828469812870026, -0.0032076595816761255, -0.00022539935889653862, -0.021283095702528954, -0.04226698726415634, -0.016579704359173775, -0.003893178189173341, -0.3939993977546692, -0.0004557524516712874, -0.00017438798386137933, -0.006385992281138897, -1.5395272970199585, -0.0004262015863787383, -9.500529267825186e-05, -0.0017440598458051682, -0.03857501968741417, -0.0017151420470327139, -0.0004117832868359983, -0.001369134639389813, -0.07642405480146408, -0.018266668543219566, -0.0004936429904773831, -0.002090651309117675, -0.016353974118828773, -0.0005044856225140393, -0.00032491172896698117, -0.0009022455778904259, -0.1447342485189438, -0.0003634030872490257, -8.225102646974847e-05, -0.0007259594276547432, -0.005749000236392021, -0.0012769886525347829, -6.294052582234144e-05, -0.0010113369207829237, -0.015992114320397377, -0.0005532164941541851, -0.0012166248634457588, -0.0024296308401972055, -0.04308737814426422, -0.0039434065110981464, -0.00014327930693980306, -1.8572112321853638, -0.00034421717282384634, -0.0008984343148767948, -0.001167926355265081, -0.02104651927947998, -0.00015090756642166525, -5.209310256759636e-05, -0.0005843124235980213, -0.004951832816004753, -9.07141511561349e-05, -2.396077979938127e-05, -0.00030393750057555735, -0.009723089635372162, -0.0010275328531861305, -7.617183291586116e-05, -0.0009226117981597781, -0.005901768337935209, -0.0007543102256022394, -5.495397272170521e-05, -0.0007122601964510977, -0.0013572300085797906, -0.0001308832288486883, -5.1616290875244886e-05, -0.0006050424999557436, -0.01158639881759882, -5.304672595229931e-05, -4.2914423829643056e-05, -0.0008607972995378077, -0.003084308933466673, -0.00029797881143167615, -9.238292841473594e-05, -0.006178801413625479, -0.003799007972702384, -0.06912289559841156, -0.0017284705536440015, -1.080840826034546, -0.007785807363688946, -0.00178927939850837, -0.0002456601650919765, -0.10860880464315414, -9.405170567333698e-05, -0.0008141063735820353, -0.0003567297535482794, -0.07673091441392899, -0.0005769256968051195, -3.421248038648628e-05, -0.0004383556661196053, -0.0009130837861448526, -2.539125671319198e-05, -2.3007127310847864e-05, -0.00041547726141288877, -0.0025381988380104303, -0.00025006983196362853, -2.884823152271565e-05, -0.0013080621138215065, -0.000977276940830052, -0.000573351513594389, -3.373566141817719e-05, -0.0014607959892600775, -0.016159864142537117, -0.00016926287207752466, -0.0016862234333530068, -5.6503606174374e-05, -0.03674516826868057, -0.004561851266771555, -0.0001530530134914443, -5.5549986427649856e-05, -0.03391142189502716, -8.618460560683161e-05, -0.00040880427695810795, -0.0001774868869688362, -0.0001967951684491709, -0.0015498304273933172, -2.109982233378105e-05, -0.00024172721896320581, -0.0023215266410261393, -2.777537883957848e-05, -1.3947389561508317e-05, -0.0002356490003876388, -0.00024089295766316354, -0.0027491177897900343, -0.0009301149984821677, -0.001141849672421813, -0.006210670340806246, -0.0019372997339814901, -6.961580220377073e-05, -0.00037126801908016205, -0.0005633435794152319, -0.003900302806869149, -0.00024875884992070496, -0.0015543533954769373, -0.00203557126224041, -7.354942499659956e-05, -1.07287787614041e-05, -0.0005747812101617455, -0.0009166568052023649, -0.000559292733669281, -3.969590397900902e-05, -0.020271971821784973, -0.0022520674392580986, -0.001400800421833992, -0.00010072677832795307, -0.5264198780059814, -0.00764421047642827, -0.0031526407692581415, -0.0005862186080776155, -0.006827715318650007, -0.00010013079008786008, -5.9602869441732764e-05, -0.0002548369811847806, -0.0004207202873658389, -0.002890696283429861, -3.707340147229843e-05, -0.00018368464952800423, -0.0034132099244743586, -0.00048196621355600655, -0.0006680640508420765, -0.00023135847004596144, -0.0007070187130011618, -2.5033637939486653e-05, -1.847726889536716e-05, -0.00010013079008786008, -0.0011441120877861977, -0.002879285253584385, -0.002573156962171197, -0.0002826052950695157, -0.0017357297474518418, -0.0001110968878492713, -2.8729025871143676e-05, -0.00032300499151460826, -0.0009825170272961259, -0.005959124304354191, -0.0007564543629996479, -0.00010823617776622996, -0.012165865860879421], "finish_reason": "length"}], "metrics": {"energy": 312.32247501277936, "energy_per_token": 1.2200096680186694, "time": 11.985477, "time_per_token": 0.04681826953125}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].apply(lambda x: ' '.join(re.sub('[' + re.sub(r\"\"\"[^\\w\\s']\"\"\", '', STOPWORDS) + r\"\"\"]+\"\"\", ' ', x).split()))\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "re", ".", "sub", "('", "['", " +", " re", ".", "sub", "(", "r", "\"", "\"", "\"", "[", "^\\", "w", "\\", "s", "']", "\"", "\"", "\"", ",", " ''", ",", " ST", "OP", "W", "OR", "DS", ")", " +", " r", "\"", "\"", "\"", "]+", "\"", "\"", "\"", ",", " '", " '", ",", " x", ")", ".", "split", "()))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.6035387516021729, -0.08289726823568344, -0.9633172154426575, -0.016746066510677338, -0.09625162184238434, -0.048063699156045914, -0.011556349694728851, -0.13642793893814087, -0.03638463467359543, -0.34965279698371887, -0.5000950694084167, -0.06299208849668503, -0.008488881401717663, -0.003267903346568346, -0.013743299059569836, -0.056898921728134155, -0.003149075899273157, -0.0008928364841267467, -0.0017953482456505299, -0.004929531831294298, -0.8938676118850708, -0.01962003856897354, -0.1131666824221611, -0.1783006340265274, -0.0005482124397531152, -1.1127804517745972, -0.0019701372366398573, -0.0006606780225411057, -7.521823135903105e-05, -0.3905635476112366, -0.28459081053733826, -3.58813522325363e-05, -0.7290492057800293, -1.5076220035552979, -1.9568411111831665, -0.6042425632476807, -0.47572094202041626, -0.00021920185827184469, -0.8419240713119507, -1.307414174079895, -0.4014008939266205, -1.3132331371307373, -3.5930566787719727, -0.14273616671562195, -0.9615055918693542, -1.164407730102539, -0.08143091946840286, -1.1415127515792847, -0.10604825615882874, -1.9439493417739868, -0.749386191368103, -0.003273487789556384, -0.0004614718782249838, -0.01560582872480154, -1.236156702041626, -0.0007309625507332385, -1.0887025594711304, -2.2291887944447808e-05, -0.00019596086349338293, -2.861018856492592e-06, -9.179073458653875e-06, -0.11843682825565338, -0.030467938631772995, -1.057159185409546, -0.7124332189559937, -0.17310601472854614, -0.013874512165784836, -2.1703600883483887, -0.16085600852966309, -0.004590805619955063, -0.00014888131408952177, -0.007648942526429892, -0.13995522260665894, -0.0017133570509031415, -0.000947622349485755, -0.08100424706935883, -0.10589493066072464, -0.0034054878633469343, -0.06659148633480072, -0.04911794885993004, -0.03889348357915878, -0.0649973526597023, -0.023218657821416855, -0.00631420873105526, -0.7411945462226868, -0.016285130754113197, -1.424035668373108], "finish_reason": "stop"}], "metrics": {"energy": 99.19085434722902, "energy_per_token": 1.1401247626118278, "time": 4.0072365, "time_per_token": 0.04606018965517242}}
