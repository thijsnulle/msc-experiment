{"outputs": [{"text": "if not re.search(pattern, directory):\n        raise AssertionError(\n            f\"Directory {directory} does not contain AcroTray.exe.\")\n    hashes = {}\n    for item in os.listdir(directory):\n        if not item.endswith(\".pdf\"):\n            continue\n        path = os.path.join(directory, item)\n        with open(path, \"rb\") as f:\n            hashes[path] = binascii.hexlify(hashlib.sha256(f.read()).digest()).decode(\"utf-8\")\n    return hashes", "tokens": ["if", " not", " re", ".", "search", "(", "pattern", ",", " directory", "):", "\n", "        ", "raise", " Ass", "ert", "ion", "Error", "(", "\n", "            ", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " contain", " Ac", "ro", "T", "ray", ".", "exe", ".", "\"", ")", "\n", "    ", "has", "hes", " =", " {}", "\n", "    ", "for", " item", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "if", " not", " item", ".", "end", "sw", "ith", "(", "\"", ".", "pdf", "\"", "):", "\n", "            ", "continue", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " item", ")", "\n", "        ", "with", " open", "(", "path", ",", " \"", "rb", "\"", ")", " as", " f", ":", "\n", "            ", "has", "hes", "[", "path", "]", " =", " bin", "ascii", ".", "hex", "l", "ify", "(", "hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "dig", "est", "())", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "    ", "return", " has", "hes", "\n", "\n", "#"], "logprobs": [-2.653984308242798, -0.14084914326667786, -2.040480375289917, -0.00048315772437490523, -1.0347826480865479, -0.012096733786165714, -0.24130459129810333, -0.003166069043800235, -0.37274283170700073, -0.10635238140821457, -0.0668473020195961, -0.004289711359888315, -1.6451120376586914, -3.5593972206115723, -0.0002762889489531517, -0.0006125480867922306, -0.002933605806902051, -0.4733807146549225, -2.269197940826416, -0.016365233808755875, -0.5617411732673645, -0.23297947645187378, -1.6581377983093262, -0.9850557446479797, -0.02346019446849823, -0.03648831322789192, -0.5035496950149536, -0.00910263229161501, -1.759826421737671, -1.6630078554153442, -0.00812002457678318, -0.06608010083436966, -0.003607671707868576, -0.164861261844635, -0.008056051097810268, -1.5112082958221436, -0.30579060316085815, -0.3809269666671753, -0.008487108163535595, -0.5882117748260498, -2.5482301712036133, -0.01784425787627697, -0.09997610002756119, -0.08741815388202667, -0.021329425275325775, -0.14224016666412354, -0.3155830502510071, -4.227034568786621, -0.016102738678455353, -0.25584641098976135, -0.00018940561858471483, -0.07256896048784256, -1.5258672647178173e-05, -0.0028338772244751453, -0.007042821496725082, -0.0032643387094140053, -0.007186396978795528, -0.00264592282474041, -1.1341254711151123, -1.434654712677002, -1.2569562196731567, -0.020806150510907173, -0.2994155287742615, -0.00020489977032411844, 0.0, -0.6115736961364746, -0.025668233633041382, -0.0858222246170044, -2.3155667781829834, -0.0020140379201620817, -0.3195365071296692, -0.031054021790623665, -0.0016137446509674191, -0.0949036180973053, -0.014813311398029327, -0.019194455817341805, -1.9973210096359253, -0.037387069314718246, -0.10353069752454758, -6.615896563744172e-05, -0.00022003613412380219, -0.01572600193321705, -0.004295171704143286, -0.0001805857609724626, -0.008723484352231026, -0.0003405229654163122, -0.006297505926340818, -0.0013103241799399257, -0.002174871740862727, -0.011594647541642189, -0.6171503663063049, -0.006152499467134476, -0.0007961202645674348, -0.003937113098800182, -0.0035864098463207483, -0.6375569701194763, -0.004694630391895771, -0.0006890306831337512, -0.0018473479431122541, -0.00026008085114881396, -0.5348959565162659, -0.06858509033918381, -0.004688342101871967, -0.0010422994382679462, -0.7715185880661011, -0.006568271201103926, -0.01650853268802166, -0.29190659523010254, -0.004739123396575451, -0.00022825974156148732, -1.7226805686950684, -0.00012861855793744326, -8.880697714630514e-05, -0.1434922218322754, -1.07287787614041e-05, -0.016346821561455727, -0.001807485707104206, -0.14061209559440613, -0.0005004345439374447, -0.00014768941036891192, -0.010717923752963543, -0.006077144294977188, -9.07141511561349e-05, -2.4199192921514623e-05, -0.0008317348547279835, -0.04022806137800217, -0.0007001094636507332, -0.00015937011630740017, -0.004422051832079887, -0.0013178244698792696, -0.0026453284081071615, -1.7881377516459906e-06, -0.0018198610050603747, -0.3135842978954315, -0.0029621317517012358, -1.5516819953918457, -0.04346581920981407, -0.19024910032749176, -0.04397406429052353, -0.0007825411157682538, -6.186770770000294e-05, -0.010856609791517258, -0.023333145305514336, -0.1410219520330429, -0.03741991147398949, -0.011613029055297375, -5.483612312673358e-06, -0.25207552313804626, -0.013569732196629047, -3.2114171981811523], "finish_reason": "stop"}], "metrics": {"energy": 175.86135402107237, "energy_per_token": 1.1724090268071492, "time": 7.3326635, "time_per_token": 0.04888442333333333}}
{"outputs": [{"text": "file_hashes = {}\n    pattern = re.compile(pattern)\n    regex_matches = []\n    for dirname, _, filenames in os.walk(directory):\n        for filename in filenames:\n            filepath = os.path.join(dirname, filename)\n            file_hashes[filepath] = hashlib.sha256(open(filepath, 'rb').read()).hexdigest()\n            regex_matches.append(filepath)\n    print(regex_matches)\n    return file_hashes", "tokens": ["file", "_", "has", "hes", " =", " {}", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "regex", "_", "matches", " =", " []", "\n", "    ", "for", " dir", "name", ",", " _", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "dirname", ",", " filename", ")", "\n", "            ", "file", "_", "has", "hes", "[", "file", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "open", "(", "file", "path", ",", " '", "rb", "')", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "regex", "_", "matches", ".", "append", "(", "file", "path", ")", "\n", "    ", "print", "(", "regex", "_", "matches", ")", "\n", "    ", "return", " file", "_", "has", "hes", "\n", "\n", "def"], "logprobs": [-2.9369277954101562, -0.04466629400849342, -0.6223409175872803, -0.0005352256703190506, -0.0437285341322422, -0.044846970587968826, -0.022440429776906967, -0.3759174942970276, -2.118812084197998, -0.09070920944213867, -0.10164298862218857, -0.0002557904226705432, -0.01085861399769783, -0.001733111683279276, -0.031169695779681206, -0.04319516196846962, -0.01713765412569046, -0.5285908579826355, -3.563229560852051, -0.9811643958091736, -1.9396920204162598, -0.04026344418525696, -1.0966111421585083, -0.011973061598837376, -0.4556979537010193, -0.7401518821716309, -2.638972282409668, -2.279888868331909, -0.009976287372410297, -0.9274843335151672, -0.03414002060890198, -0.5613737106323242, -0.00011193125828867778, -5.9602869441732764e-05, -0.0012653210433200002, -0.015368491411209106, -3.8742269680369645e-05, -8.737658936297521e-05, -0.0015532821416854858, -0.006438464857637882, -0.03414301574230194, -0.01671617291867733, -0.005428217351436615, -0.14121262729167938, -0.11859513074159622, -0.0004615910293068737, -0.02029218152165413, -9.059865078597795e-06, -2.50339189733495e-06, -0.00016866691294126213, -0.003510861424729228, -0.0025662605185061693, -1.5245800018310547, -0.5682864785194397, -0.0016520674107596278, -0.03285231813788414, -0.0002464944263920188, -9.369411418447271e-05, -0.008160345256328583, -0.004512484651058912, -0.0001062098381225951, -0.01620408520102501, -0.00034791138023138046, -0.0036275077145546675, -0.0003270567976869643, -0.0026444962713867426, -0.015437398105859756, -3.2695744037628174, -0.07041309028863907, -0.3664996027946472, -0.0006062338361516595, -0.04682088643312454, -0.08762326836585999, -0.0007338214782066643, -0.003577501280233264, -0.000940476544201374, -0.8806369304656982, -0.1782463788986206, -0.0011207734933122993, -0.00596374599263072, -0.004792275372892618, -8.237022848334163e-05, -9.179073458653875e-06, -0.06559234857559204, -1.1754895448684692, -0.00041869457345455885, -0.012774540111422539, -0.0002649671514518559, -0.014135357923805714, -0.35519134998321533, -0.002993152942508459, -0.0024305821862071753, -0.0007894498412497342, -0.0004349001101218164, -0.005587317515164614, -0.016482030972838402, -0.09233182668685913, -0.0003164505760651082, -0.002239816589280963, -0.0013177053770050406, -0.013064737431704998, -0.5371723771095276, -0.6619612574577332, -0.004532421473413706, -0.010712851770222187, -0.08324843645095825, -0.06705500185489655, -0.026990976184606552, -2.707871437072754, -0.18637126684188843, -0.020426977425813675, -0.021303867921233177, -0.6213626861572266, -3.3467812538146973, -0.09827184677124023, -1.3525500297546387, -0.0008861667010933161, -0.0004557524516712874, -0.05037140101194382, -0.014669886790215969, -0.07895661890506744, -0.41614866256713867, -0.15348033607006073, -0.00019536493346095085, -9.250213042832911e-05, -4.124556289752945e-05, -0.1405266374349594, -0.03466304391622543, -0.8453987836837769], "finish_reason": "stop"}], "metrics": {"energy": 124.19741149902342, "energy_per_token": 0.9627706317753754, "time": 5.476781, "time_per_token": 0.04245566666666667}}
{"outputs": [{"text": "try:\n        # Create the output directory if it does not already exist\n        if not os.path.exists(OUTPUT_DIR):\n            os.mkdir(OUTPUT_DIR)\n\n        # Find all files with matching extension\n        files = [\n            file\n            for file in glob.glob(f\"{directory}/*\")\n            if os.path.isfile(file)\n            and os.path.splitext(file)[1] in (\".pdf\", \".png\")\n        ]\n\n        # Compute SHA256 hash of each file's content\n        sha256_hashes = {\n            file: binascii.hexlify(hashlib.sha256(\n                file.encode()\n            ).digest()).decode()\n            for file in files\n        }\n\n        # Save the hashed files in a file\n        with open(f\"{OUTPUT_DIR}/sha256_hashes.txt\", \"w+\") as file:\n            file.write(json.dumps(sha256_hashes", "tokens": ["try", ":", "\n", "        ", "#", " Create", " the", " output", " directory", " if", " it", " does", " not", " already", " exist", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "OU", "TP", "UT", "_", "DIR", "):", "\n", "            ", "os", ".", "mk", "dir", "(", "OU", "TP", "UT", "_", "DIR", ")", "\n", "\n", "        ", "#", " Find", " all", " files", " with", " matching", " extension", "\n", "        ", "files", " =", " [", "\n", "            ", "file", "\n", "            ", "for", " file", " in", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", "\"", ")", "\n", "            ", "if", " os", ".", "path", ".", "is", "file", "(", "file", ")", "\n", "            ", "and", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", " in", " (", "\"", ".", "pdf", "\"", ",", " \"", ".", "png", "\"", ")", "\n", "        ", "]", "\n", "\n", "        ", "#", " Compute", " SH", "A", "2", "5", "6", " hash", " of", " each", " file", "'", "s", " content", "\n", "        ", "sha", "2", "5", "6", "_", "has", "hes", " =", " {", "\n", "            ", "file", ":", " bin", "ascii", ".", "hex", "l", "ify", "(", "hash", "lib", ".", "sha", "2", "5", "6", "(", "\n", "                ", "file", ".", "encode", "()", "\n", "            ", ")", ".", "dig", "est", "())", ".", "decode", "()", "\n", "            ", "for", " file", " in", " files", "\n", "        ", "}", "\n", "\n", "        ", "#", " Save", " the", " has", "hed", " files", " in", " a", " file", "\n", "        ", "with", " open", "(", "f", "\"", "{", "OU", "TP", "UT", "_", "DIR", "}/", "sha", "2", "5", "6", "_", "has", "hes", ".", "txt", "\"", ",", " \"", "w", "+", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "json", ".", "d", "umps", "(", "sha", "2", "5", "6", "_", "has", "hes"], "logprobs": [-3.180126190185547, -0.0021000492852181196, -0.010204287245869637, -0.015314489603042603, -2.801967144012451, -2.607473373413086, -0.9911202788352966, -0.17188870906829834, -0.04125868156552315, -0.06352854520082474, -0.013597016222774982, -1.8227202892303467, -0.0005127069307491183, -2.76073956489563, -0.005489276256412268, -0.12448877841234207, -0.000726197671610862, -0.440793514251709, -0.006765672471374273, -0.019208841025829315, -4.076874756719917e-05, -0.00015376816736534238, -0.0005687049706466496, -0.1708170473575592, -0.0012265071272850037, -0.07177352160215378, -0.00013517419574782252, -0.0001512651506345719, -3.0874729418428615e-05, -1.6212332411669195e-05, -0.0022625343408435583, -0.005687483120709658, -0.002156672067940235, -0.010521064512431622, -0.0003743662964552641, -1.721889615058899, -1.3232143828645349e-05, -0.00039426659350283444, -0.005007108207792044, -3.933898824470816e-06, -0.00015877417172305286, -3.576278118089249e-07, -1.3589766240329482e-05, -0.008255287073552608, -0.0009862087899819016, -0.3464219272136688, -0.0037095798179507256, -0.3410342335700989, -3.4159135818481445, -0.3151818811893463, -0.3500113785266876, -3.42056941986084, -1.5948419570922852, -3.1706159114837646, -1.6246111392974854, -0.0009915679693222046, -0.91822350025177, -0.0848742127418518, -0.757434070110321, -2.6963164806365967, -0.014672353863716125, -1.7768110036849976, -1.2345378398895264, -0.0033186383079737425, -0.001982510555535555, -0.23308910429477692, -0.04858528450131416, -0.8908820152282715, -0.009535599499940872, -0.1255466639995575, -0.006603443995118141, -0.6331954598426819, -0.07658130675554276, -0.008647849783301353, -0.24260520935058594, -0.22768662869930267, -0.06914303451776505, -0.7671362161636353, -0.07715168595314026, -0.02045500837266445, -0.020855186507105827, -0.011102093383669853, -0.8248968124389648, -0.0007002285565249622, -0.0018137923907488585, -0.0016911027487367392, -0.10743176192045212, -0.0005737089086323977, -0.00032610344351269305, -0.006287081632763147, -0.009177877567708492, -0.8736984133720398, -0.7913045883178711, -0.07398403435945511, -1.7085351943969727, -0.0008736607851460576, -0.11836884170770645, -0.008152540773153305, -0.07317299395799637, -6.09140915912576e-05, -3.576278118089249e-07, -7.772143726469949e-05, -0.008137760683894157, -0.12571877241134644, -0.005283677484840155, -0.027028454467654228, -1.5959630012512207, -2.3816981315612793, -0.06081791967153549, -0.03224189579486847, -1.8981612920761108, -0.0013446108205243945, -0.03017800860106945, -0.05166551098227501, -0.004491835366934538, -3.1465463638305664, -0.00037055302527733147, -1.3349311351776123, -0.03232315182685852, -0.047369953244924545, -0.0005041282274760306, -0.001479246304370463, -0.13476860523223877, -0.006173114292323589, -0.24222147464752197, -0.9203056693077087, -0.7500966787338257, -0.0012953233672305942, -0.027995796874165535, -0.0011250602547079325, -0.0001618731184862554, -0.9610568284988403, -0.4557323157787323, -0.10651282221078873, -0.017819197848439217, -0.5707734227180481, -0.00014530557382386178, -0.06596627831459045, -0.15865954756736755, -0.0008155357209034264, -3.3065640926361084, -0.049292147159576416, -0.0007036832394078374, -0.0005806190893054008, -0.1274450421333313, -0.23887214064598083, -0.000641974329482764, -0.015980616211891174, -0.8266433477401733, -0.389737993478775, -0.002904722234234214, -0.10276758670806885, -0.04312939569354057, -1.1334795951843262, -0.00014327930693980306, -0.00033408781746402383, -0.1719774454832077, -1.6212332411669195e-05, -0.0003488647344056517, -0.0014898402150720358, -0.16210171580314636, -0.0007113072206266224, -6.305972783593461e-05, -0.0033805386628955603, -0.002538080094382167, -1.9788545614574105e-05, -5.960462772236497e-07, -0.004054896999150515, -1.4689425230026245, -0.005522352643311024, -1.6881678104400635, -0.22994884848594666, -0.2836465537548065, -2.1077880859375, -0.05621882900595665, -0.03697875142097473, -0.0022997616324573755, -0.0008291144040413201, -0.0053787752985954285, -3.576272320060525e-06, -0.0043586730025708675, -0.06599082797765732, -0.003838790813460946, -0.07519345730543137, -0.1810367852449417, -0.014195652678608894, -0.0031747438479214907, -0.0001902399235405028, -0.004890029318630695, -0.005826631560921669, -0.005480265710502863, -0.017692599445581436, -0.00010430268594063818, -0.00033849707688204944, -0.09541455656290054, -0.027888217940926552, -0.44250816106796265, -1.781872034072876, -0.4191800653934479, -2.4611780643463135, -1.45188307762146, -0.46253201365470886, -2.404622793197632, -0.562562882900238, -2.5691802501678467, -0.8866361975669861, -0.0015773248160257936, -0.2561110854148865, -0.0028208012226969004, -0.02281814254820347, -0.35725918412208557, -0.07636761665344238, -0.011462192051112652, -0.05338183417916298, -0.00027307120035402477, -1.0490362910786644e-05, -7.390948667307384e-06, -3.266281055402942e-05, -0.09145230799913406, -1.6828126907348633, -0.016991984099149704, -0.0010592094622552395, -0.0015713736647740006, -0.5222721695899963, -0.25802966952323914, -0.007851571775972843, -0.0298156775534153, -0.6707152128219604, -0.0002494739310350269, -0.00022742546570952982, -0.09577956050634384, -0.03782793879508972, -2.301603317260742, -0.006404470652341843, -0.0789043977856636, -0.0004919749335385859, -1.209871530532837, -0.012888817116618156, -0.0008021951070986688, -0.001602914067916572, -0.9877656698226929, -0.0017314456636086106, -0.0941150113940239, -0.04210641607642174, -2.3903584480285645, -0.011854557320475578, -0.0006123098428361118, -7.223821739898995e-05, -0.01997264288365841, -0.04063723236322403, -6.556489552167477e-06, -5.006777428206988e-06, -7.915183232398704e-05, -7.271740287251305e-06, -0.00010907054820563644, -3.182837463100441e-05], "finish_reason": "length"}], "metrics": {"energy": 251.96570689201354, "energy_per_token": 0.9842410425469279, "time": 10.926403, "time_per_token": 0.04268126171875}}
{"outputs": [{"text": "file_hashes = {}\n\n    # search for matching filenames in the specified directory\n    matching_files = [f for f in os.listdir(directory) if re.search(pattern, f)]\n\n    # compute SHA256 hash for each matching file\n    for file in matching_files:\n        with open(os.path.join(directory, file), 'rb') as f:\n            data = f.read()\n            file_hashes[file] = hashlib.sha256(data).hexdigest()\n\n    return file_hashes", "tokens": ["file", "_", "has", "hes", " =", " {}", "\n", "\n", "    ", "#", " search", " for", " matching", " fil", "en", "ames", " in", " the", " specified", " directory", "\n", "    ", "matching", "_", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "directory", ")", " if", " re", ".", "search", "(", "pattern", ",", " f", ")]", "\n", "\n", "    ", "#", " compute", " SH", "A", "2", "5", "6", " hash", " for", " each", " matching", " file", "\n", "    ", "for", " file", " in", " matching", "_", "files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "            ", "file", "_", "has", "hes", "[", "file", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "data", ")", ".", "hex", "dig", "est", "()", "\n", "\n", "    ", "return", " file", "_", "has", "hes", "\n", "\n", "def"], "logprobs": [-2.9369277954101562, -0.04466629400849342, -0.6223409175872803, -0.0005352256703190506, -0.0437285341322422, -0.044846970587968826, -0.022440429776906967, -1.1612434387207031, -0.0004899493651464581, -1.6210274696350098, -4.335016250610352, -0.495818555355072, -2.4681270122528076, -2.208385944366455, -0.00036137725692242384, -6.3774932641536e-05, -1.272305965423584, -0.2894224226474762, -0.7664450407028198, -0.004156641196459532, -0.09105557948350906, -0.0018167671514675021, -3.056074380874634, -0.0015068616485223174, -0.4337320327758789, -0.01035566907376051, -0.9899986386299133, -0.5501831769943237, -0.07536748796701431, -0.001536023453809321, -0.0027331875171512365, -0.29183411598205566, -0.00014649749209638685, -0.009315595962107182, -5.722029527532868e-06, -0.0013930626446381211, -0.00357310613617301, -0.0017860665684565902, -0.03699379786849022, -0.04967879876494408, -4.768258077092469e-05, -0.5081335306167603, -0.00048303857329301536, -0.008630595169961452, -0.001213171985000372, -0.04891079664230347, -0.05871061980724335, -0.0027312852907925844, -0.2139822095632553, -0.00025078488397412, -0.5790879726409912, -0.5585924386978149, -0.39387962222099304, -0.00042083943844772875, -0.014311881735920906, -0.0003505330823827535, -0.00012790338951162994, -0.5889462828636169, -1.346280574798584, -0.009553074836730957, -0.42766889929771423, -0.030111845582723618, -0.39212843775749207, -0.0005613181856460869, -0.009794864803552628, -0.6975386142730713, -0.5430202484130859, -0.008686140179634094, -1.0132738680113107e-05, -9.417489309271332e-06, -0.00015805903240107, -0.0007594323833473027, -0.0053692893125116825, -0.490413635969162, -0.0007519278442487121, -0.0022507591638714075, -0.24117767810821533, -0.0013652060879394412, -0.00010597144137136638, -0.011592761613428593, -0.00020621081057470292, -9.381330892210826e-05, -0.001802487880922854, -0.00011514954530866817, -0.004481273237615824, -0.0027498311828821898, -0.00014661667228210717, -0.23125475645065308, -0.0031159203499555588, -0.0016732513904571533, -0.0001586549769854173, -0.04227247089147568, -0.018083466216921806, -0.0017158561386168003, -0.00187923654448241, -2.402738571166992, -0.004385378211736679, -0.02834824100136757, -2.074220174108632e-05, -2.5033637939486653e-05, -0.002496580593287945, -0.012411617673933506, -0.16263346374034882, -0.7254872918128967, -0.005469832569360733, -0.14481356739997864, -2.372236667724792e-05, -0.006731452886015177, -0.15456214547157288, -0.003901252755895257, -8.761498611420393e-05, -0.3812556266784668, -0.0014950776239857078, -5.066266385256313e-05, -0.004640880040824413, -0.0024284415412694216, -2.729855441430118e-05, -8.344646857949556e-07, -0.0006001578294672072, -0.05694317817687988, -0.0017575069796293974, -0.003462868509814143, -0.022348923608660698, -4.911301948595792e-05, -0.001459129503928125, -0.000589792791288346, -0.013699086382985115, -0.07492826133966446, -0.0047406661324203014, -0.03672138229012489, -0.01176455058157444, -2.0265558760002023e-06, -4.827859811484814e-05, -5.3165931603871286e-05, -0.3263718783855438, -0.012744174338877201, -0.7505895495414734], "finish_reason": "stop"}], "metrics": {"energy": 154.28076982498172, "energy_per_token": 1.1261370060217644, "time": 5.6919765, "time_per_token": 0.04154727372262774}}
{"outputs": [{"text": "regex = re.compile(pattern)\n    results = {}\n    for file_name in os.listdir(directory):\n        with open(os.path.join(directory, file_name), 'rb') as f:\n            file_data = f.read()\n            file_hash = hashlib.sha256(file_data).hexdigest()\n            match = regex.search(file_name)\n            if match:\n                results[file_name] = file_hash\n    return results", "tokens": ["regex", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "results", " =", " {}", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "            ", "file", "_", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "file", "_", "data", ")", ".", "hex", "dig", "est", "()", "\n", "            ", "match", " =", " regex", ".", "search", "(", "file", "_", "name", ")", "\n", "            ", "if", " match", ":", "\n", "                ", "results", "[", "file", "_", "name", "]", " =", " file", "_", "hash", "\n", "    ", "return", " results", "\n", "\n", "def"], "logprobs": [-2.937715530395508, -0.1422000378370285, -0.009936629794538021, -0.00024828212917782366, -0.0004128557338844985, -0.001617077155970037, -0.022384244948625565, -0.057311683893203735, -0.014042030088603497, -0.16019678115844727, -3.2413294315338135, -0.05941755324602127, -0.16652008891105652, -0.007612859830260277, -0.5078251957893372, -0.36926910281181335, -1.8462536334991455, -0.6259976625442505, -0.8409121036529541, -0.050188884139060974, -0.19726648926734924, -0.00019441144831944257, -0.004087665118277073, -1.9192511899746023e-05, -0.00150781380943954, -0.0036797686479985714, -0.0013587776338681579, -0.008932511322200298, -0.004718479234725237, -3.00085711479187, -0.005242173559963703, -0.003135290928184986, -0.20526649057865143, -0.0006478118011727929, -0.00012885693286079913, -0.004383954219520092, -0.00033480284037068486, -7.366862701019272e-05, -0.002163809258490801, -0.00023195437097456306, -0.008424104191362858, -3.909988299710676e-05, -8.940656698541716e-06, -0.009554019197821617, -0.0002547178009990603, -0.3122733235359192, -0.009650246240198612, -0.005582812707871199, -0.00034767304896377027, -0.723767101764679, -0.024554995819926262, -0.004065463785082102, -0.0029963618144392967, -1.8311177492141724, -0.0268519576638937, -2.2357358932495117, -0.0012567488010972738, -0.043083954602479935, -2.9444261599564925e-05, -3.9934315282152966e-05, -0.002228278899565339, -0.012005925178527832, -0.3225496709346771, -1.4219871759414673, -0.005002007819712162, -0.16740640997886658, -0.007949618622660637, -0.0680159255862236, -0.000559173640795052, -4.95898348162882e-05, -0.010127703659236431, -0.003725732211023569, -9.059495641849935e-05, -1.7881377516459906e-06, -0.007675559725612402, -0.14453309774398804, -0.00010549465514486656, -0.002711788285523653, -0.0018992258701473475, -0.008909117430448532, -0.05317443609237671, -4.124556289752945e-05, -0.0009888288332149386, -0.0003252692404203117, -0.012910234741866589, -0.0702224150300026, -3.1868696212768555, -0.07972985506057739, -0.06259084492921829, -0.00021050144277978688, -0.460791677236557, -0.00027509720530360937, -0.013805615715682507, -4.7801782784517854e-05, -0.006381017621606588, -0.010570725426077843, -0.012729932554066181, -0.01718546450138092, -0.04637156054377556, -0.061045046895742416, -0.19365443289279938, -0.011814621277153492, -0.0010095505276694894, -0.1268448829650879, -0.013860050588846207, -0.6943710446357727, -1.4424220353248529e-05, -0.004978521727025509, -0.00797823816537857, -0.00012790338951162994, -0.033435042947530746, -0.00011884459672728553, -0.0026894372422248125, -0.0060411239974200726, -0.1512555032968521, -0.013702967204153538, -0.0032169281039386988, -0.2977413833141327, -0.016706794500350952, -0.7981324791908264], "finish_reason": "stop"}], "metrics": {"energy": 132.4422847709656, "energy_per_token": 1.1036857064247134, "time": 5.063429, "time_per_token": 0.04219524166666667}}
{"outputs": [{"text": "matches = {}\n    regex_pattern = re.compile(pattern)\n    with os.scandir(directory) as files:\n        for file in files:\n            if file.is_file() and re.search(regex_pattern, file.name):\n                with open(file.path, \"rb\") as file_handle:\n                    matches[file.path] = hashlib.sha256(\n                        binascii.unhexlify(\n                            file_handle.read().decode(\"utf-8\")\n                        )\n                    ).hexdigest()\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "regex", "_", "pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "with", " os", ".", "sc", "and", "ir", "(", "directory", ")", " as", " files", ":", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " file", ".", "is", "_", "file", "()", " and", " re", ".", "search", "(", "regex", "_", "pattern", ",", " file", ".", "name", "):", "\n", "                ", "with", " open", "(", "file", ".", "path", ",", " \"", "rb", "\"", ")", " as", " file", "_", "handle", ":", "\n", "                ", "    ", "matches", "[", "file", ".", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "\n", "                ", "        ", "bin", "ascii", ".", "un", "hex", "l", "ify", "(", "\n", "                ", "            ", "file", "_", "handle", ".", "read", "()", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "                ", "        ", ")", "\n", "                ", "    ", ")", ".", "hex", "dig", "est", "()", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-3.7233009338378906, -0.10490427166223526, -0.44209060072898865, -0.020926984027028084, -0.18920424580574036, -2.036874771118164, -2.83941912651062, -0.15371987223625183, -0.007808281108736992, -0.08174953609704971, -0.0001787979417713359, -0.0038932969328016043, -0.0012997282901778817, -0.027523085474967957, -0.0489317961037159, -0.011392774991691113, -0.4469659626483917, -2.9182791709899902, -0.15736249089241028, -0.00015114595589693636, -0.00527549535036087, -6.365573790390044e-05, -4.732496745418757e-05, -0.0007297713309526443, -0.0032252457458525896, -0.0007244108128361404, -0.00019762947340495884, -1.684544324874878, -0.008686967194080353, -0.007751385681331158, -0.008630240336060524, -0.015646200627088547, -0.3252018988132477, -0.042484428733587265, -0.003367469646036625, -0.0005870526074431837, -0.005218100268393755, -0.002996837254613638, -0.1459740251302719, -0.2588997781276703, -0.0005298641044646502, -0.2230730652809143, -6.12716976320371e-05, -0.02602219767868519, -0.5667040348052979, -0.004697952885180712, -2.0944719314575195, -0.0009354744106531143, -0.6387268304824829, -0.0002548369811847806, -0.008601166307926178, -4.339123915997334e-05, -1.4662635294371285e-05, -0.00047219570842571557, -0.022935938090085983, -0.002079587895423174, -0.06739350408315659, -0.0613035187125206, -0.009768540039658546, -0.0033150739036500454, -0.4487270414829254, -0.1009678766131401, -0.0006086166249588132, -0.026451269164681435, -0.2630074620246887, -0.00282686366699636, -0.0063132611103355885, -1.299271583557129, -0.009164883755147457, -0.0003923600015696138, -0.0009613183210603893, -9.77468371274881e-05, -1.7189936637878418, -0.34101152420043945, -1.0677165985107422, -0.0002212279650848359, -0.0026519864331930876, -0.0007185738068073988, -0.0024380742106586695, -1.0284523963928223, -0.057815417647361755, -0.00932350941002369, -0.012291870079934597, -0.03167106211185455, -0.003573937574401498, -0.00036435641231946647, -0.27665722370147705, -0.0025059746112674475, -0.0002002515539061278, -0.004381224047392607, -0.004612283315509558, -0.00010775939153973013, -8.4638240878121e-06, -0.0023532812483608723, -2.5502281188964844, -0.0005237876321189106, -0.026719534769654274, -0.5474936366081238, -3.576214658096433e-05, -4.637133679352701e-05, -0.22904668748378754, -0.0031531162094324827, -0.00017855956684798002, -1.883488948806189e-05, -0.014076353050768375, -1.6605479717254639, -0.0003630455757956952, -0.019755156710743904, -0.4560621678829193, -0.01306826714426279, -0.000719645875506103, -0.0010115751065313816, -0.0018650771817192435, -0.061092935502529144, -0.49202483892440796, -3.2137532234191895, -0.5144311785697937, -0.14622308313846588, -0.22630760073661804, -0.07144960016012192, -0.013862872496247292, -0.0002791491860989481, -0.24077756702899933, -0.25660860538482666, -0.0008438840159215033, -0.06314922869205475, -0.12864352762699127, -0.022229310125112534, -0.0012300790986046195, -0.0019113620510324836, -0.00013767725613433868, -0.010270955041050911, -0.023370062932372093, -0.00016532962035853416, -0.001262463629245758, -0.0038187215104699135, -0.008093773387372494, -1.2980656623840332, -0.020451270043849945, -0.042130760848522186, -0.003541865386068821, -0.49078279733657837, -0.01229799259454012, -0.9168370962142944], "finish_reason": "stop"}], "metrics": {"energy": 148.31028632736206, "energy_per_token": 1.0299325439400144, "time": 6.113018, "time_per_token": 0.04245151388888889}}
{"outputs": [{"text": "result = {}\n    matches = re.findall(pattern, directory)\n    if len(matches) > 0:\n        for match in matches:\n            file_path = os.path.join(directory, match)\n            with open(file_path, 'rb') as file:\n                content = file.read()\n                hash = hashlib.sha256(content).hexdigest()\n                result[file_path] = hash\n    return result", "tokens": ["result", " =", " {}", "\n", "    ", "matches", " =", " re", ".", "find", "all", "(", "pattern", ",", " directory", ")", "\n", "    ", "if", " len", "(", "matches", ")", " >", " ", "0", ":", "\n", "        ", "for", " match", " in", " matches", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " match", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "content", " =", " file", ".", "read", "()", "\n", "                ", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "result", "[", "file", "_", "path", "]", " =", " hash", "\n", "    ", "return", " result", "\n", "\n", "#"], "logprobs": [-2.129301071166992, -0.1797187477350235, -0.15923075377941132, -0.010006855241954327, -0.31820791959762573, -3.8796908855438232, -0.03013312816619873, -0.579042911529541, -0.00010799778101500124, -0.06314004957675934, -0.13049449026584625, -0.007557728327810764, -0.027122551575303078, -0.008472214452922344, -0.9837316274642944, -0.09945884346961975, -0.016600457951426506, -0.21883779764175415, -1.2931151390075684, -1.028914451599121, -0.0003579214389901608, -0.001013361383229494, -0.053538911044597626, -1.1136023998260498, -0.0023308033123612404, -0.10076742619276047, -0.011974475346505642, -0.027868857607245445, -0.01246318593621254, -0.46445855498313904, -0.6803604960441589, -0.004545831121504307, -0.007246875204145908, -0.0013506823452189565, -0.004287099931389093, -0.0032728936057537794, -1.459288477897644, -0.3441427946090698, -0.2692743241786957, -0.01066072192043066, -0.4980210065841675, -0.00014876213390380144, -0.000982397934421897, -0.0027947674971073866, -0.017948003485798836, -0.0019229032332077622, -0.03153534606099129, -0.0017204972682520747, -0.022846922278404236, -0.0604887418448925, -0.009340515360236168, -0.012354748323559761, -0.591289222240448, -0.0039107524789869785, -0.001013599568977952, -0.0036655159201472998, -0.00038044367101974785, -1.7165990357170813e-05, -0.004061664454638958, -0.3413746654987335, -0.013692501932382584, -0.0035557635128498077, -0.0005136600811965764, -0.9847005605697632, -0.0239906944334507, -0.0034395840484648943, -0.0015713736647740006, -1.3016295433044434, -0.018862050026655197, -0.0613245964050293, -0.00015472168161068112, -8.523101132595912e-05, -0.0037560169585049152, -0.006050484720617533, -0.06826335936784744, -0.8750635981559753, -1.3016891479492188, -0.09873592853546143, -0.00034028460504487157, -6.031808152329177e-05, -0.0070274327881634235, -0.004860728047788143, -5.185469490243122e-05, -1.1444026313256472e-05, -0.036972660571336746, -0.08292162418365479, -0.002365649910643697, -0.025530774146318436, -0.0733807161450386, -6.55629628454335e-05, -0.005564675200730562, -0.0006835508393123746, -0.008330241777002811, -0.03020160272717476, -0.07531607896089554, -0.025792082771658897, -0.13865795731544495, -0.004321522079408169, -2.3245540432981215e-05, -0.003403111593797803, -0.000161038784426637, -0.06458540260791779, -0.005151213612407446, -0.21631141006946564, -0.15480069816112518, -0.0031346967443823814, -0.3384062945842743, -0.0187174491584301, -3.054351806640625], "finish_reason": "stop"}], "metrics": {"energy": 104.86666505813601, "energy_per_token": 0.9620794959462019, "time": 4.6349645, "time_per_token": 0.042522610091743115}}
{"outputs": [{"text": "pattern = re.compile(pattern)\n    matches = {}\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            with open(os.path.join(root, filename), \"rb\") as f:\n                matches[filename] = hashlib.sha256(binascii.unhexlify(\n                    f.read().hex()\n                )).hexdigest()\n    return matches", "tokens": ["pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " root", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "root", ",", " filename", ")", ",", " \"", "rb", "\"", ")", " as", " f", ":", "\n", "                ", "matches", "[", "filename", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "bin", "ascii", ".", "un", "hex", "l", "ify", "(", "\n", "                ", "    ", "f", ".", "read", "()", ".", "hex", "()", "\n", "                ", "))", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-3.0713272094726562, -0.07197277247905731, -0.1464175134897232, -0.0003759154351428151, -0.008269238285720348, -0.0022864409256726503, -0.0325649231672287, -0.04310907423496246, -0.017960883677005768, -0.18150706589221954, -3.469017267227173, -0.06530740112066269, -0.47046077251434326, -0.01231259386986494, -0.38739755749702454, -0.33840665221214294, -1.2587242126464844, -0.0011376821203157306, -1.1233022212982178, -0.029683763161301613, -0.23552434146404266, -0.0010711177019402385, -0.01330379769206047, -3.7431014789035544e-05, -8.40390202938579e-05, -0.0014663906767964363, -0.006875546649098396, -0.0661352202296257, -0.010817576199769974, -0.0030573313124477863, -0.03180236741900444, -1.283055067062378, -0.00040928093949332833, -0.04298894852399826, -0.00014482879487331957, -0.0024856405798345804, -0.002432603854686022, -3.411545515060425, -0.00867006741464138, -0.0029938658699393272, -0.10067462176084518, -0.0003522014303598553, -0.00012885693286079913, -0.0030611343681812286, -0.0004037995240651071, -7.915183232398704e-05, -0.006361235864460468, -0.00016246906307060272, -0.016552619636058807, -0.010072237811982632, -0.0002131234941771254, -1.3041818141937256, -0.008779378607869148, -0.0009565545478835702, -0.001262820791453123, -0.00019333878299221396, -0.6091629266738892, -0.04109131544828415, -0.002742817159742117, -0.0022436226718127728, -1.7162469625473022, -0.2981967628002167, -0.3751644492149353, -0.006472931243479252, -0.00045348849380388856, -0.3145202398300171, -0.006182355340570211, -0.00020001317898277193, -0.007552167400717735, -0.005233398173004389, -8.594620157964528e-05, -8.34461570775602e-06, -0.002166782971471548, -1.9198694229125977, -3.981510963058099e-05, -4.076874756719917e-05, -0.27895864844322205, -0.0040924143977463245, -0.00012838016846217215, -1.8000440832111053e-05, -0.014779718592762947, -2.4957568645477295, -0.0007901645149104297, -0.06385426223278046, -0.5352984666824341, -0.18252184987068176, -0.0023072545882314444, -0.18855583667755127, -0.08715345710515976, -0.3978307247161865, -1.5648493766784668, -0.30717840790748596, -0.0008733034483157098, -0.05123036354780197, -0.009759685955941677, -0.02996724285185337, -0.0001734344696160406, -0.0022327988408505917, -0.0011510183103382587, -0.01300472766160965, -0.1601146161556244, -0.01964014396071434, -0.004324489738792181, -0.24619197845458984, -0.01303885132074356, -0.7611895203590393], "finish_reason": "stop"}], "metrics": {"energy": 141.57556169605255, "energy_per_token": 1.3356185065665334, "time": 4.3935857, "time_per_token": 0.041448921698113206}}
{"outputs": [{"text": "output = {}\n    if not os.path.exists(directory):\n        return output\n    file_list = os.listdir(directory)\n    for filename in file_list:\n        file_path = os.path.join(directory, filename)\n        if not os.path.isfile(file_path):\n            continue\n        if re.search(pattern, filename):\n            with open(file_path, 'rb') as file:\n                file_hash = hashlib.sha256(binascii.a2b_qp(file.read())).hexdigest()\n                output[filename] = file_hash\n    return output", "tokens": ["output", " =", " {}", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "return", " output", "\n", "    ", "file", "_", "list", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "continue", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " filename", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "file", "_", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "bin", "ascii", ".", "a", "2", "b", "_", "qp", "(", "file", ".", "read", "()))", ".", "hex", "dig", "est", "()", "\n", "                ", "output", "[", "filename", "]", " =", " file", "_", "hash", "\n", "    ", "return", " output", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-3.002592086791992, -0.4362616539001465, -0.14071597158908844, -0.014109970070421696, -0.2799345552921295, -2.666008234024048, -0.2835523784160614, -0.32662034034729004, -0.00020728347590193152, -0.003158820327371359, -0.002141208155080676, -0.7972638607025146, -0.001122321467846632, -0.023772800341248512, -0.04440223425626755, -0.028935566544532776, -0.003978196531534195, -0.9379702210426331, -0.0983564481139183, -0.0070357187651097775, -0.5861896276473999, -3.205183506011963, -0.09548119455575943, -0.7790644764900208, -0.015320594422519207, -1.0798412561416626, -4.458328112377785e-05, -0.026579083874821663, -1.5735502529423684e-05, -0.001019553979858756, -0.0027799077797681093, -0.00035255891270935535, -0.0071830833330750465, -0.09887026995420456, -0.4750407040119171, -1.5207083225250244, -0.0012129339156672359, -0.011622337624430656, -6.174850568640977e-05, -1.883488948806189e-05, -0.0005962263094261289, -0.003153234953060746, -0.004274873994290829, -1.7464797496795654, -0.5400983095169067, -0.037227898836135864, -0.0023754017893224955, -0.036694031208753586, -0.0004332319076638669, -8.725739462533966e-05, -0.005494136828929186, -0.002351378323510289, -0.0001541257370263338, -0.0019163592951372266, -0.0005566716426983476, -0.01413982454687357, -0.00033623288618400693, -0.001994050806388259, -0.015758858993649483, -0.14433881640434265, -1.5783686637878418, -0.14671598374843597, -0.0010838593589141965, -3.862306402879767e-05, -0.004526488017290831, -0.006395942065864801, -0.010289006866514683, -6.496695277746767e-05, -0.003424733877182007, -0.00034171465085819364, -2.95634672511369e-05, -0.18670998513698578, -0.013714726082980633, -0.0010458719916641712, -0.03237820416688919, -0.013676627539098263, -0.036210816353559494, -0.5047862529754639, -0.7961099743843079, -7.390703103737906e-05, -0.7223633527755737, -0.00046492734691128135, -0.003732857992872596, -0.002144657773897052, -0.04710011929273605, -0.38746511936187744, -0.014908681623637676, -0.002968668704852462, -0.5066389441490173, -0.0013143719406798482, -0.0006267252028919756, -0.004845661576837301, -0.00019143179815728217, -1.6212332411669195e-05, -0.001311514643020928, -0.19620297849178314, -0.005129391793161631, -0.004192136228084564, -0.00033384948619641364, -0.8305997848510742, -0.031918760389089584, -0.002764929085969925, -0.0013263961300253868, -1.8284753561019897, -0.024794697761535645, -1.359868049621582, -0.013444007374346256, -0.06517907977104187, -0.0008120815036818385, -5.9602869441732764e-05, -0.0047040036879479885, -0.0034335250966250896, -2.13382354559144e-05, -1.311301275563892e-06, -0.11559004336595535, -2.131924629211426, -5.1020273531321436e-05, -2.455681169521995e-05, -1.5053274631500244, -4.124556289752945e-05, -0.0006849803612567484, -0.0001006075763143599, -2.092651844024658, -0.0006706849089823663, -0.06835076212882996, -0.0011066034203395247, -0.00033122775494121015, -0.049739595502614975, -0.05739397183060646, -0.051631659269332886, -0.0001867835089797154, -0.0008430502493865788, -0.0005340342177078128, -0.009151890873908997, -0.5478250980377197, -0.04092574864625931, -0.023722045123577118, -1.3015918731689453, -0.0034228330478072166, -7.176141662057489e-05, -0.006490104831755161, -0.00013731967192143202, -0.00781111977994442, -0.0047874110750854015, -0.12062602490186691, -0.016906775534152985, -0.002491943072527647, -1.6728498935699463, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9550132492440753e-05, -6.329813186312094e-05, -2.420943260192871, -0.004983740858733654], "finish_reason": "stop"}], "metrics": {"energy": 154.75686636924743, "energy_per_token": 1.004914716683425, "time": 6.510544, "time_per_token": 0.04227625974025974}}
{"outputs": [{"text": "files = {}\n    for root, dirs, filenames in os.walk(directory):\n        for filename in filenames:\n            filepath = os.path.join(root, filename)\n            if re.match(pattern, filename):\n                with open(filepath, 'rb') as f:\n                    content = f.read()\n                    files[filepath] = hashlib.sha256(content).hexdigest()\n    return files", "tokens": ["files", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " filename", ")", "\n", "            ", "if", " re", ".", "match", "(", "pattern", ",", " filename", "):", "\n", "                ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "content", " =", " f", ".", "read", "()", "\n", "                ", "    ", "files", "[", "file", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " files", "\n", "\n", "def"], "logprobs": [-2.7340774536132812, -0.28782808780670166, -0.49923384189605713, -0.030892912298440933, -0.2916271686553955, -0.9854231476783752, -1.0627038478851318, -0.0012897277483716607, -0.5801613330841064, -0.001303419005125761, -0.00012933371181134135, -0.7769365310668945, -0.0037051853723824024, -0.00012039413559250534, -0.0005146132898516953, -0.015250153839588165, -4.410646579344757e-05, -0.0001722425949992612, -0.0015051951631903648, -0.012926828116178513, -0.09451030939817429, -0.01762232556939125, -0.006584377493709326, -0.10882971435785294, -0.13611243665218353, -0.0005165196489542723, -0.07956396043300629, -5.960446742392378e-06, -2.861018856492592e-06, -0.00011646069469861686, -0.00634678453207016, -0.003769318340346217, -1.7048017978668213, -0.693928062915802, -0.0017287085065618157, -0.023409539833664894, -1.1444026313256472e-05, -0.00011359999916749075, -0.0019613332115113735, -0.007040808908641338, -0.00011729506513802335, -0.004529336001724005, -0.0007117837085388601, -0.006349390838295221, -0.00016890530241653323, -0.006459428928792477, -0.031148318201303482, -0.2761209309101105, -0.0784725695848465, -5.125868119648658e-05, -0.6559696197509766, -0.00015245705435518175, -0.0028909340035170317, -0.0016593271866440773, -0.08578108251094818, -0.19472968578338623, -0.014751175418496132, -0.0030714739114046097, -0.34821081161499023, -0.001123035908676684, -0.00039962888695299625, -0.0023317548912018538, -0.00011228884250158444, -0.0016144587425515056, -0.23376363515853882, -0.005654648877680302, -0.002064479747787118, -0.00019500737835187465, -0.37924593687057495, -0.03460109233856201, -0.002286678645759821, -0.000350175570929423, -0.0018261675722897053, -1.5723751783370972, -0.031458530575037, -0.09941589087247849, -3.325883881188929e-05, -3.0517112463712692e-05, -0.00287239090539515, -0.007257881574332714, -0.006277959793806076, -0.04457360878586769, -1.337921380996704, -0.011344688013195992, -0.12890669703483582, -1.9550132492440753e-05, -0.0016182672698050737, -0.00011598391574807465, -0.39046794176101685, -0.0027214179281145334, -9.321732068201527e-05, -0.004528267774730921, -0.004022127948701382, -3.266281055402942e-05, -3.099436753473128e-06, -0.0006312523037195206, -0.05267367139458656, -0.0011162485461682081, -0.00320504535920918, -0.02082681655883789, -6.8662193370983e-05, -0.0008746135863475502, -0.0007569308509118855, -0.011858915910124779, -0.19657324254512787, -0.015429415740072727, -0.006757502444088459, -0.2345895916223526, -0.011389946565032005, -0.709835946559906], "finish_reason": "stop"}], "metrics": {"energy": 114.03613768577573, "energy_per_token": 1.0366921607797794, "time": 4.6404805, "time_per_token": 0.042186186363636365}}
{"outputs": [{"text": "try:\n        hashes = {}\n        for file_path in glob.glob(os.path.join(directory, pattern)):\n            with open(file_path, 'rb') as f:\n                hashes[file_path] = hashlib.sha256(f.read()).hexdigest()\n        return hashes\n    except Exception as e:\n        raise ValueError(f\"Task failed: {str(e)}\")", "tokens": ["try", ":", "\n", "        ", "has", "hes", " =", " {}", "\n", "        ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " pattern", "))", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "has", "hes", "[", "file", "_", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "        ", "return", " has", "hes", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Task", " failed", ":", " {", "str", "(", "e", ")}", "\"", ")", "\n", "\n", "def"], "logprobs": [-3.180126190185547, -0.0021000492852181196, -0.010204287245869637, -0.015314489603042603, -2.969022274017334, -0.01445947028696537, -0.07319337874650955, -0.08741684257984161, -0.03918422386050224, -0.10594800859689713, -0.737395703792572, -1.483235478401184, -0.7204799652099609, -0.6274967193603516, -0.08371329307556152, -0.9735079407691956, -0.021045703440904617, -0.2193082571029663, -0.0034667886793613434, -1.2379709482192993, -7.462222856702283e-05, -0.00025686301523819566, -0.0017387047410011292, -0.0022743092849850655, -0.0019139796495437622, -0.011892961338162422, -0.0012812747154384851, -0.3319028913974762, -0.04403076320886612, -0.0010434903670102358, -0.015397368930280209, -0.00728604756295681, -0.39708831906318665, -0.0018882793374359608, -0.0005729940603487194, -0.003052221145480871, -2.455681169521995e-05, -1.4305012882687151e-05, -0.0024370038881897926, -0.20900996029376984, -0.005996451713144779, -0.00231581786647439, -0.00035696811391972005, -1.0433683395385742, -0.022077035158872604, -0.004594958852976561, -0.0021531034726649523, -0.7608229517936707, -0.0037203875835984945, -0.012702743522822857, -0.05278676003217697, -2.0265373677830212e-05, -1.3351351299206726e-05, -0.0033403809648007154, -0.00022575691400561482, -0.3921763598918915, -0.005093811079859734, -0.0002184867626056075, -0.003780125407502055, -0.004037918988615274, -0.00011562632425921038, -6.794906312279636e-06, -0.0021836739033460617, -0.0702051967382431, -0.0008642514003440738, -0.0001864259538706392, -0.004753716755658388, -0.005473863333463669, -0.03041752241551876, -0.00022110878489911556, -0.0013327058404684067, -0.0006316096987575293, -0.0184539332985878, -0.5805569887161255, -0.043899908661842346, -0.014623601920902729, -6.079655122448457e-06, -0.0037581545766443014, -0.08227657526731491, -0.004095263313502073, -0.4819229245185852, -0.1204591691493988, -0.12434804439544678, -0.00028689560713246465, -0.010040609166026115, -0.001327943871729076, -1.9129140377044678, -2.1304829120635986, -0.00024077377747744322, -0.030549457296729088, -0.3011426031589508, -0.2687423527240753, -3.4398531913757324, -0.8221803307533264, -0.9399982690811157, -0.03118252195417881, -2.1496973037719727, -0.000362807244528085, -0.0042457920499145985, -0.03417054936289787, -0.030023351311683655, -0.05565971881151199, -0.08100831508636475, -0.021560100838541985, -0.432729035615921], "finish_reason": "stop"}], "metrics": {"energy": 109.54515545749665, "energy_per_token": 1.0432871948333013, "time": 4.4197826, "time_per_token": 0.04209316761904761}}
{"outputs": [{"text": "hash_dict = {}\n    regex = re.compile(pattern)\n    for dirpath, dirs, files in os.walk(directory):\n        for filename in files:\n            filepath = os.path.join(dirpath, filename)\n            if regex.match(filename):\n                hash_dict[filepath] = hashlib.sha256(open(filepath, \"rb\").read()).hexdigest()\n    return hash_dict", "tokens": ["hash", "_", "dict", " =", " {}", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "for", " dir", "path", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "dir", "path", ",", " filename", ")", "\n", "            ", "if", " regex", ".", "match", "(", "filename", "):", "\n", "                ", "hash", "_", "dict", "[", "file", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "open", "(", "file", "path", ",", " \"", "rb", "\"", ")", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " hash", "_", "dict", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.4563522338867188, -0.18988457322120667, -0.570245087146759, -0.05888697877526283, -0.09907391667366028, -0.03170986473560333, -0.2546132504940033, -2.5436174869537354, -0.12636813521385193, -0.005515713710337877, -0.00013052565918769687, -0.0003736513026524335, -0.001989648910239339, -0.01876717247068882, -0.05071355402469635, -0.009245557710528374, -0.30581939220428467, -0.6139441132545471, -2.912397861480713, -0.42056941986083984, -0.0034383959136903286, -2.0120351314544678, -0.008825698867440224, -0.0007285801111720502, -0.045250385999679565, -0.0010026433737948537, -0.018369434401392937, -5.9126061387360096e-05, -0.00015853578224778175, -0.001259010867215693, -0.008747473359107971, -0.07970751076936722, -0.01575181819498539, -0.005750185344368219, -0.1341848224401474, -1.5515155792236328, -0.0006012300727888942, -0.024743644520640373, -0.0001380348257953301, -0.003640098264440894, -0.0032120561227202415, -1.20899498462677, -0.36308127641677856, -0.0022075825836509466, -0.03583997115492821, -0.0002656822034623474, -7.068861305015162e-05, -0.005906271748244762, -0.0043246084824204445, -8.654219709569588e-05, -0.002823059679940343, -7.903263758635148e-05, -0.0004686211177613586, -0.006417381577193737, -0.00017534149810671806, -0.0038486472330987453, -0.01327662356197834, -0.2637053430080414, -0.11116184294223785, -0.0008217295398935676, -0.5083428621292114, -0.00018726025882642716, -0.05947180837392807, -0.0724322572350502, -0.021303752437233925, -0.002233631443232298, -2.1108593940734863, -0.05990023910999298, -0.09290719777345657, -0.03215174376964569, -0.08372656255960464, -6.0794889577664435e-05, -0.0034786683972924948, -0.0005063920398242772, -0.6102035641670227, -0.0895179882645607, -0.0006484074983745813, -0.0068697454407811165, -0.00419071177020669, -7.509902934543788e-05, -1.0490362910786644e-05, -0.045516956597566605, -0.6883344650268555, -0.00029392691794782877, -0.007357524707913399, -2.7417760065873154e-05, -0.007927029393613338, -1.5749430656433105, -0.0017789267003536224, -0.002101000864058733, -0.0034073886927217245, -0.0005206898204050958, -0.00035422726068645716, -0.003541627898812294, -0.008722774684429169, -0.07102952897548676, -0.00047600860125385225, -0.002434744266793132, -0.0015037668636068702, -0.011052694171667099, -0.2602102756500244, -0.025071080774068832, -0.014148875139653683, -0.00013028726971242577, -3.862306402879767e-05, -1.535545825958252, -1.4305104514278355e-06, -1.0728830375228426e-06, -2.658331868587993e-05, -8.916457591112703e-05, -0.09020718187093735], "finish_reason": "stop"}], "metrics": {"energy": 126.31287578773502, "energy_per_token": 1.1379538359255408, "time": 4.6314077, "time_per_token": 0.04172439369369369}}
{"outputs": [{"text": "result = {}\n\n    for path, _, files in os.walk(directory):\n        for filename in files:\n            filepath = os.path.join(path, filename)\n            if re.match(pattern, filename):\n                with open(filepath, \"rb\") as file:\n                    data = file.read()\n                    hash = hashlib.sha256(data).hexdigest()\n                    result[filepath] = hash\n    return result", "tokens": ["result", " =", " {}", "\n", "\n", "    ", "for", " path", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", "\n", "            ", "if", " re", ".", "match", "(", "pattern", ",", " filename", "):", "\n", "                ", "with", " open", "(", "file", "path", ",", " \"", "rb", "\"", ")", " as", " file", ":", "\n", "                ", "    ", "data", " =", " file", ".", "read", "()", "\n", "                ", "    ", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "data", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "result", "[", "file", "path", "]", " =", " hash", "\n", "    ", "return", " result"], "logprobs": [-2.129301071166992, -0.1797187477350235, -0.15923075377941132, -0.010006855241954327, -1.3006927967071533, -0.00080195686314255, -1.0549755096435547, -2.206204891204834, -0.5083213448524475, -0.8561524152755737, -0.02189021371304989, -0.2269594520330429, -0.002206987701356411, -0.018628058955073357, -4.2676016164477915e-05, -0.00010525626566959545, -0.0016379047883674502, -0.00779207656159997, -0.040725819766521454, -0.009809857234358788, -0.011873641982674599, -0.10106798261404037, -1.1803958415985107, -0.0007441850611940026, -0.0391245037317276, -0.00016532962035853416, -0.00413562823086977, -0.007395627908408642, -1.9877912998199463, -1.1046212911605835, -0.0018466339679434896, -0.058849211782217026, -0.00022456508304458112, -7.259582343976945e-05, -0.0026063304394483566, -0.005861119367182255, -8.976056415122002e-05, -0.004777326714247465, -0.0002540027489885688, -0.0045025162398815155, -0.00015579440514557064, -0.004343599546700716, -0.26174718141555786, -0.399722158908844, -0.08915963023900986, -7.056941103655845e-05, -0.9134206175804138, -0.00017927470616996288, -0.0043716104701161385, -0.0018396135419607162, -0.07788011431694031, -0.18619287014007568, -0.014857356436550617, -0.007654739078134298, -0.39118343591690063, -0.0019227842567488551, -0.0003541081096045673, -0.0023479294031858444, -0.00012778419477399439, -0.0011954312212765217, -1.4646748304367065, -0.004957407712936401, -0.0004916174802929163, -0.0012959185987710953, -7.617183291586116e-05, -0.9543957114219666, -0.030526794493198395, -0.0028318562544882298, -0.0008966478053480387, -0.001943962532095611, -1.8421601057052612, -0.005788587033748627, -0.10157804936170578, -0.0001456631434848532, -6.997340824455023e-05, -0.0038228780031204224, -0.007911181077361107, -0.028820794075727463, -0.0456450916826725, -1.0084238052368164, -0.8176843523979187, -0.11342256516218185, -0.00031418632715940475, -3.135155202471651e-05, -0.007956004701554775, -0.004121382255107164, -6.675497570540756e-05, -6.9141146923357155e-06, -0.02219410054385662, -0.037895429879426956, -0.004428104963153601, -0.06358370184898376, -0.07987987250089645, -5.4238757002167404e-05, -0.0009313059854321182, -0.0006764031131751835, -0.006822031922638416, -0.011960811913013458, -0.08865759521722794, -0.06730590760707855, -0.01660796068608761, -0.23154474794864655, -0.0002094287920044735, -0.002688248408958316, -8.654219709569588e-05, -0.02884766459465027, -0.005442800931632519, -0.9456117153167725, -0.017695177346467972, -0.003691764548420906], "finish_reason": "stop"}], "metrics": {"energy": 107.84557746887205, "energy_per_token": 0.9804143406261095, "time": 4.639599, "time_per_token": 0.04217817272727272}}
{"outputs": [{"text": "hashes = {}\n\n    pattern = re.compile(pattern)\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if pattern.match(file):\n                full_path = os.path.join(root, file)\n                with open(full_path, 'rb') as f:\n                    data = f.read()\n                    hashes[full_path] = hashlib.sha256(data).hexdigest()\n\n    return hashes", "tokens": ["has", "hes", " =", " {}", "\n", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " pattern", ".", "match", "(", "file", "):", "\n", "                ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "                ", "with", " open", "(", "full", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "data", " =", " f", ".", "read", "()", "\n", "                ", "    ", "has", "hes", "[", "full", "_", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "data", ")", ".", "hex", "dig", "est", "()", "\n", "\n", "    ", "return", " has", "hes", "\n", "\n", "def"], "logprobs": [-2.956989288330078, -0.01241244189441204, -0.09488116949796677, -0.07210222631692886, -0.032449640333652496, -1.417435646057129, -0.0004940004437230527, -2.607128143310547, -0.09553450345993042, -0.09291817247867584, -0.0001892864383989945, -0.00561387138441205, -0.0018465149914845824, -0.025091541931033134, -0.05200178921222687, -0.01936272345483303, -1.1817381381988525, -0.5605550408363342, -1.741489052772522, -0.0008554374799132347, -0.4976294934749603, -0.0010786197381094098, -0.00024077377747744322, -0.036608994007110596, -0.0006503135664388537, -0.008362988941371441, -3.6000557884108275e-05, -7.033100700937212e-05, -0.001408419106155634, -0.008258834481239319, -0.10803169012069702, -0.013143097050487995, -0.007509810850024223, -0.05539177358150482, -0.601759672164917, -0.2510009706020355, -0.02114526554942131, -0.00012981049076188356, -0.002700256183743477, -0.004153198096901178, -0.5472383499145508, -0.2690562903881073, -0.0009182051289826632, -0.682915210723877, -0.0006208876147866249, -0.028709134086966515, -0.12326221913099289, -0.018846021965146065, -0.005376284942030907, -2.642822742462158, -0.073419488966465, -0.09757272154092789, -0.0026535321958363056, -0.022290633991360664, -8.105902816168964e-05, -2.5033637939486653e-05, -0.0031673761550337076, -0.0027448381297290325, -6.389413465512916e-05, -0.014837037771940231, -0.0004127365828026086, -0.0037038789596408606, -0.00018344627460464835, -0.002782404189929366, -0.047405991703271866, -0.45473822951316833, -0.0013785392511636019, -0.000336590368533507, -0.0008116050157696009, -1.9311717551317997e-05, -1.311301275563892e-06, -0.0015173362335190177, -0.23873797059059143, -0.005432248581200838, -0.0030969062354415655, -0.0001892864383989945, -0.2527540326118469, -0.03528913855552673, -0.002399662509560585, -0.0011050553293898702, -0.0011650687083601952, -2.2120440006256104, -0.0038091023452579975, -0.0559147372841835, -1.645074735279195e-05, -3.802703940891661e-05, -0.0038139712996780872, -0.006283645983785391, -0.026788823306560516, -0.22208526730537415, -0.5055568218231201, -0.003956111613661051, -0.01223110780119896, -0.024510327726602554, -5.471556869451888e-05, -2.0265558760002023e-06, -0.00125770119484514, -0.00015937011630740017, -0.24394366145133972, -0.002414408838376403, -6.353653589030728e-05, -0.005300278775393963, -0.0029519100207835436, -8.129743218887597e-05, -5.245195097813848e-06, -0.0007513322634622455, -0.0847596600651741, -0.0021519139409065247, -0.005156669300049543, -0.03309592232108116, -6.365573790390044e-05, -0.0001879753835964948, -0.0006039702566340566, -0.009855421259999275, -0.3970378339290619, -0.005279171280562878, -0.02165914699435234, -0.006815401837229729, -2.50339189733495e-06, -0.2437472939491272, -0.011073444969952106, -0.6188164949417114], "finish_reason": "stop"}], "metrics": {"energy": 119.91900147819517, "energy_per_token": 0.9829426350671735, "time": 5.0544653, "time_per_token": 0.04143004344262295}}
{"outputs": [{"text": "# Create the output directory if it doesn't exist\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    pattern = pattern.replace(r\"\\\\\", r\"\\\\\\\\\")  # escape backslashes for regex\n    regex = re.compile(pattern)\n    output = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if regex.match(filepath):\n                with open(filepath, 'rb') as f:\n                    content = f.read()\n                    content_sha256 = hashlib.sha256(content).hexdigest()\n                    output[filepath] = content_sha256\n\n    return output", "tokens": ["#", " Create", " the", " output", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "OU", "TP", "UT", "_", "DIR", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "pattern", " =", " pattern", ".", "replace", "(", "r", "\"", "\\\\", "\"", ",", " r", "\"", "\\\\\\\\", "\"", ")", "  ", "#", " escape", " back", "sl", "ashes", " for", " regex", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "output", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "if", " regex", ".", "match", "(", "file", "path", "):", "\n", "                ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "content", " =", " f", ".", "read", "()", "\n", "                ", "    ", "content", "_", "sha", "2", "5", "6", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "output", "[", "file", "path", "]", " =", " content", "_", "sha", "2", "5", "6", "\n", "\n", "    ", "return", " output", "\n", "\n", "def"], "logprobs": [-2.5301380157470703, -2.4462075233459473, -2.218949317932129, -0.6961613893508911, -0.48191601037979126, -0.09147102385759354, -0.013869691640138626, -0.19003047049045563, -0.0004078510100953281, -4.768360213347478e-06, -0.10051022469997406, -0.09078258275985718, -0.0011062461417168379, -1.9035001993179321, -0.00044228785554878414, -0.008509447798132896, -2.109982233378105e-05, -0.00017808281700126827, -0.000192504478036426, -0.09776106476783752, -0.0001212284987559542, -6.97350042173639e-05, -2.169585604860913e-05, -1.1920858014491387e-05, -0.003277052426710725, -0.005195805337280035, 0.0, -6.174850568640977e-05, -0.005518321879208088, -0.0008868813747540116, -0.0007585985003970563, -0.0021777264773845673, -1.7334601879119873, -3.6137852668762207, -0.11127384006977081, -2.785468339920044, -0.4757828712463379, -0.334369957447052, -0.424072265625, -1.0482025146484375, -0.3255215287208557, -0.30952969193458557, -0.03902591019868851, -0.0012045992771163583, -0.5145578384399414, -0.03226117044687271, -0.24389471113681793, -0.024680260568857193, -0.003907308913767338, -2.4170570373535156, -0.0010237219976261258, -2.4002528190612793, -0.8214594125747681, -0.04374975711107254, -0.0005254556890577078, -1.9147584438323975, -0.2902472913265228, -0.47852379083633423, -0.2840390205383301, -2.223999261856079, -0.04450656473636627, -0.005752911325544119, -5.721882189391181e-05, -0.0003773453936446458, -0.0016664678696542978, -0.07236672192811966, -0.04188431799411774, -0.057350631803274155, -0.3512324094772339, -2.396022319793701, -0.5412366986274719, -0.08710013329982758, -0.025108281522989273, -0.47745248675346375, -0.3684564530849457, -1.036128044128418, -0.0006850994541309774, -0.5518412590026855, -0.00037377048283815384, -0.0002157455455744639, -0.02795707806944847, -0.00036197309964336455, -0.0065771532244980335, -2.9682672902708873e-05, -9.345571743324399e-05, -0.0009332115878351033, -0.01015484519302845, -0.09013888239860535, -0.03815869241952896, -0.0031393314711749554, -0.14298397302627563, -0.6657891273498535, -0.15485288202762604, -0.023439817130565643, -0.0001113352773245424, -0.009885757230222225, -0.0017469158628955483, -1.5780925750732422, -0.8039062023162842, -0.002317601814866066, -0.026722783222794533, -0.00011884459672728553, -4.970903682988137e-05, -0.00436757504940033, -0.005742836743593216, -0.00010895135346800089, -0.003408457851037383, -0.00047851080307736993, -0.0015644703526049852, -0.0006081400788389146, -0.02178081125020981, -0.011046681553125381, -0.25054576992988586, -0.12119031697511673, -0.0010577804641798139, -0.7404080033302307, -0.00012361239350866526, -0.048421069979667664, -1.1931824684143066, -0.07996516674757004, -0.053032904863357544, -0.0019682336132973433, -0.45433175563812256, -0.001557924086228013, -0.00030393750057555735, -0.0030176362488418818, -0.00033480284037068486, -0.001994050806388259, -0.43836525082588196, -0.004274755250662565, -0.0036020891275256872, -0.00010156115604331717, -0.12020952254533768, -0.05399903282523155, -0.004034119658172131, -0.00033706706017255783, -0.0008585343020968139, -1.5264778137207031, -0.03297862410545349, -0.1389462947845459, -7.343022298300639e-05, -3.4927710657939315e-05, -0.0033080638386309147, -0.013955159112811089, -0.005366206634789705, -0.09846945106983185, -3.320312261581421, -0.09983909875154495, -2.34293270111084, -0.2736796736717224, -0.0011523280991241336, -0.0001481661747675389, -0.009756617248058319, -0.11148456484079361, -0.00021884430316276848, -2.706014311115723e-05, -0.0015053142560645938, -0.0008563903393223882, -2.145764938177308e-06, -4.768370445162873e-07, -0.0008141063735820353, -0.010960728861391544, -0.0005118728731758893, -0.00504648732021451, -0.08553335070610046, -1.585470999998506e-05, -0.0007326302584260702, -0.0001919085334520787, -0.00960290152579546, -0.005176356062293053, -0.06680291891098022, -0.07222666591405869, -0.014880494214594364, -0.009032106027007103, -0.003400141606107354, -0.0012219827622175217, -2.1219027985353023e-05, -0.009921167977154255, -0.0008334023877978325, -0.0002374367177253589, -7.033323527139146e-06, -3.790783375734463e-05, -4.23184028477408e-05, -0.006772540044039488, -2.0071258544921875, -0.0150483138859272, -0.1443919539451599, -0.006480511277914047, -0.2884965240955353, -0.011295654810965061, -0.7106091380119324], "finish_reason": "stop"}], "metrics": {"energy": 231.54701548004158, "energy_per_token": 1.2122880391625213, "time": 8.413044, "time_per_token": 0.04404735078534031}}
{"outputs": [{"text": "results = {}\n\n    # Check the directory and all its subdirectories for files matching the given pattern\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            if re.search(pattern, file_path):\n                try:\n                    with open(file_path, 'rb') as file:\n                        content = file.read()\n                        hash_value = hashlib.sha256(content).hexdigest()\n                        results[file_path] = hash_value\n                except (OSError, IOError, binascii.Error):\n                    pass\n    return results", "tokens": ["results", " =", " {}", "\n", "\n", "    ", "#", " Check", " the", " directory", " and", " all", " its", " sub", "direct", "ories", " for", " files", " matching", " the", " given", " pattern", "\n", "    ", "for", " root", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", "_", "name", ")", "\n", "            ", "if", " re", ".", "search", "(", "pattern", ",", " file", "_", "path", "):", "\n", "                ", "try", ":", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "        ", "content", " =", " file", ".", "read", "()", "\n", "                ", "        ", "hash", "_", "value", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "        ", "results", "[", "file", "_", "path", "]", " =", " hash", "_", "value", "\n", "                ", "except", " (", "OS", "Error", ",", " IO", "Error", ",", " bin", "ascii", ".", "Error", "):", "\n", "                ", "    ", "pass", "\n", "    ", "return", " results", "\n", "\n", "def"], "logprobs": [-3.4059677124023438, -0.07955437898635864, -0.12708784639835358, -0.01793266460299492, -1.2346677780151367, -0.0006995138246566057, -1.8805450201034546, -2.01650333404541, -2.660198450088501, -2.9587478637695312, -2.832186222076416, -1.8563910722732544, -0.9579281806945801, -0.1450832337141037, -0.03940337151288986, -0.0005467826849780977, -0.8440969586372375, -0.3776335120201111, -0.39339590072631836, -0.04389774054288864, -1.3521199226379395, -0.1572924256324768, -0.2064903974533081, -0.002229825360700488, -0.07736553996801376, -0.3812180757522583, -0.0021922383457422256, -1.11711585521698, -0.01235215738415718, -0.22145172953605652, -0.0008419782971031964, -0.01727721095085144, -2.729855441430118e-05, -0.00013052565918769687, -0.0007556205382570624, -0.00719598401337862, -0.05567922443151474, -0.008540061302483082, -0.0038406909443438053, -0.07307559996843338, -0.5709208250045776, -1.0258218050003052, -0.13065528869628906, -0.00025614796322770417, -0.030696634203195572, -6.151010165922344e-05, -0.003043545177206397, -0.004912449978291988, -1.0999629497528076, -0.020801013335585594, -0.003200886305421591, -0.0006275591440498829, -0.01195280160754919, -0.00010132275929208845, -1.1444026313256472e-05, -0.002556153805926442, -0.0013116337358951569, -3.731181277544238e-05, -0.001116367639042437, -0.0002466136065777391, -0.0007998128421604633, -2.634490556374658e-05, -7.652943895664066e-05, -0.0002184867626056075, -0.006041834596544504, -0.1837879866361618, -0.3025307059288025, -0.11265205591917038, -3.325883881188929e-05, -0.686874270439148, -0.00016807096835691482, -0.002239816589280963, -0.0010271755745634437, -0.012869752012193203, -8.427741704508662e-05, -2.238022565841675, -0.1585630178451538, -0.029632380232214928, -0.017498984932899475, -1.6250627040863037, -7.319182623177767e-05, -0.005603795405477285, -0.0008821171941235662, -0.0004024887748528272, -0.2774033546447754, -0.0018375907093286514, -0.0002580548170953989, -0.00102646101731807, -2.5033637939486653e-05, -0.0007126175914891064, -0.0009572691051289439, -0.15709581971168518, -0.0056793042458593845, -0.001518169417977333, -7.4741430580616e-05, -0.7420640587806702, -0.032218579202890396, -0.00657596904784441, -0.0010415849974378943, -0.0009167758980765939, -1.6249667406082153, -0.03453729674220085, -0.10580592602491379, -0.0002172949316445738, -5.328513361746445e-05, -0.002434268593788147, -0.016392908990383148, -0.04483591765165329, -0.23636683821678162, -1.1269928216934204, -0.18113316595554352, -0.41383275389671326, -0.0009127265075221658, -0.187311053276062, -0.0008803306263871491, -3.8742269680369645e-05, -0.005958176217973232, -0.0023988301400095224, -1.3708974620385561e-05, -1.1920922133867862e-06, -0.0018716213526204228, -0.03675045445561409, -0.00114125432446599, -0.007053593173623085, -0.09512323886156082, -3.373566141817719e-05, -0.0008716359734535217, -0.00027724236133508384, -0.009081250056624413, -0.0296647846698761, -0.048056427389383316, -0.06450359523296356, -0.006603562273085117, -0.005636986810714006, -0.0011182728921994567, -0.041681040078401566, -0.0008133916999213398, -3.9219088648678735e-05, -0.02619106136262417, -0.0007607426377944648, -2.3483953555114567e-05, -0.005464141722768545, -0.02665720507502556, -0.04839358478784561, -2.266678810119629, -1.0940018892288208, -0.00039283663500100374, -0.012890346348285675, -0.2668461501598358, -1.5735502529423684e-05, -2.674652576446533, -4.0157036781311035, -0.00025674383505247533, -0.0004533693427219987, -0.00229322025552392, -0.9462432861328125, -0.02574305608868599, -0.0009174905135296285, -0.0009108209051191807, -0.7919567823410034, -0.03268549591302872, -1.5391499996185303, -0.027484813705086708, -0.002455436158925295, -0.3619961142539978, -0.010118735022842884, -0.8742876052856445], "finish_reason": "stop"}], "metrics": {"energy": 183.8617675113678, "energy_per_token": 1.1009686677327413, "time": 7.160568, "time_per_token": 0.042877652694610774}}
{"outputs": [{"text": "files_sha256: dict = {}\n\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            try:\n                with open(os.path.join(directory, file_name), 'rb') as file:\n                    content = file.read()\n                    files_sha256[file_name] = hashlib.sha256(content).digest().hex()\n            except OSError as e:\n                print(f\"Failed to process {file_name}: {e}\")\n\n    return files_sha256", "tokens": ["files", "_", "sha", "2", "5", "6", ":", " dict", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "if", " re", ".", "match", "(", "pattern", ",", " file", "_", "name", "):", "\n", "            ", "try", ":", "\n", "                ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "    ", "content", " =", " file", ".", "read", "()", "\n", "                ", "    ", "files", "_", "sha", "2", "5", "6", "[", "file", "_", "name", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "dig", "est", "()", ".", "hex", "()", "\n", "            ", "except", " O", "SE", "rror", " as", " e", ":", "\n", "                ", "print", "(", "f", "\"", "Failed", " to", " process", " {", "file", "_", "name", "}:", " {", "e", "}\"", ")", "\n", "\n", "    ", "return", " files", "_", "sha", "2", "5", "6", "\n", "\n", "if"], "logprobs": [-2.7340774536132812, -1.6779457330703735, -2.7699460983276367, -0.20616686344146729, -0.0052413432858884335, -0.0009802542626857758, -2.842938184738159, -0.06482888013124466, -0.659285843372345, -0.13119010627269745, -0.02978570945560932, -1.1895742416381836, -0.0003703146940097213, -1.034067153930664, -1.5985395908355713, -0.6642334461212158, -1.0331523418426514, -0.1354367882013321, -0.24415715038776398, -0.00021896349790040404, -0.006201074458658695, -1.537788011773955e-05, -0.0021615491714328527, -0.0066389706917107105, -0.002970332745462656, -0.01429836731404066, -0.026745067909359932, -0.7411934733390808, -0.2555036246776581, -9.798523387871683e-05, -0.48227638006210327, -0.00035089056473225355, -0.005237074103206396, -0.00997369084507227, -0.011995559558272362, -0.00014447122521232814, -9.214453893946484e-05, -0.19177989661693573, -0.025662075728178024, -0.01259586215019226, -1.9162331819534302, -0.00017045476124621928, -0.003324578981846571, -0.0020249830558896065, -0.2666124403476715, -0.0023509026505053043, -0.003146817907691002, -0.3782248795032501, -0.0014359173364937305, -0.0003120412293355912, -0.00557285500690341, -0.0006033745594322681, -9.524368942948058e-05, -0.0022659834939986467, -0.0002300474588992074, -0.005348301958292723, -5.066266385256313e-05, -8.940656698541716e-06, -0.016566455364227295, -0.0003122795606032014, -0.47701355814933777, -0.015891801565885544, -0.005043996497988701, -0.000291662581730634, -0.402111291885376, -0.07331657409667969, -0.004890148062258959, -0.00265162973664701, -0.002663519000634551, -1.5678507089614868, -0.09549137949943542, -0.09723617881536484, -0.00034814971149899065, -8.940297266235575e-05, -0.00280344532802701, -0.010030577890574932, -0.08523344993591309, -0.021431760862469673, -1.092902421951294, -0.0001174142598756589, -0.0009199915803037584, -9.011816291604191e-05, -1.0013530300057027e-05, -3.361645576660521e-05, -0.014877323061227798, -0.11026852577924728, -0.024628853425383568, -5.8053239627042785e-05, -0.004416236653923988, -0.00037579628406092525, -0.407126784324646, -0.0021915247198194265, -0.00024136967840604484, -0.0034193878527730703, -0.0019357530400156975, -1.0609570381348021e-05, -3.576278118089249e-07, -0.0006348263123072684, -0.06857485324144363, -0.0011997176334261894, -0.005158566869795322, -2.807122230529785, -3.302042750874534e-05, -0.00045468006283044815, -2.115506649017334, -0.05530864745378494, -0.002663994673639536, -0.020100587978959084, -0.09170086681842804, -0.005530888680368662, -2.053147792816162, -4.768360213347478e-06, -1.156323378381785e-05, -0.7363235950469971, -0.47918614745140076, -0.00040070133400149643, -0.009259494952857494, -0.0009675112669356167, -0.25256097316741943, -0.03961032256484032, -0.15644796192646027, -0.32093602418899536, -2.9244332313537598, -0.00346857076510787, -2.0380687713623047, -1.255974292755127, -0.040960535407066345, -0.012032191269099712, -0.00037317464011721313, -0.2940993010997772, -0.02327502891421318, -0.09534823894500732, -0.09506579488515854, -0.0072269923985004425, -0.004024621564894915, -0.5836948752403259, -0.004914585035294294, -0.04591896012425423, -0.011287285946309566, -2.90866428258596e-05, -0.00048375347978435457, -8.4638240878121e-06, -5.125986263010418e-06, -0.00015209948469419032, -0.2800405025482178, -0.00792111549526453, -1.0495702028274536], "finish_reason": "stop"}], "metrics": {"energy": 168.57881702995303, "energy_per_token": 1.1467946736731498, "time": 6.3194222, "time_per_token": 0.042989266666666665}}
{"outputs": [{"text": "result = {}\n\n    with os.scandir(directory) as dir_list:\n        for entry in dir_list:\n            if entry.is_file() and re.match(pattern, entry.name):\n                file_path = os.path.join(directory, entry.name)\n                hash_ = hashlib.sha256()\n                with open(file_path, 'rb') as file:\n                    for chunk in iter(lambda: file.read(4096), b''):\n                        hash_.update(chunk)\n                result[entry.name] = binascii.b2a_hex(hash_.digest())\n    return result", "tokens": ["result", " =", " {}", "\n", "\n", "    ", "with", " os", ".", "sc", "and", "ir", "(", "directory", ")", " as", " dir", "_", "list", ":", "\n", "        ", "for", " entry", " in", " dir", "_", "list", ":", "\n", "            ", "if", " entry", ".", "is", "_", "file", "()", " and", " re", ".", "match", "(", "pattern", ",", " entry", ".", "name", "):", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " entry", ".", "name", ")", "\n", "                ", "hash", "_", " =", " hash", "lib", ".", "sha", "2", "5", "6", "()", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "    ", "for", " chunk", " in", " iter", "(", "lambda", ":", " file", ".", "read", "(", "4", "0", "9", "6", ")", ",", " b", "'')", ":", "\n", "                ", "        ", "hash", "_", ".", "update", "(", "chunk", ")", "\n", "                ", "result", "[", "entry", ".", "name", "]", " =", " bin", "ascii", ".", "b", "2", "a", "_", "hex", "(", "hash", "_", ".", "dig", "est", "())", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-2.129301071166992, -0.1797187477350235, -0.15923075377941132, -0.010006855241954327, -1.3006927967071533, -0.00080195686314255, -3.4716835021972656, -0.3267647922039032, -0.0002650863316375762, -0.006925744004547596, -5.519237674889155e-05, -3.862306402879767e-05, -0.0008727079257369041, -0.006427330896258354, -0.0007502601947635412, -0.0002954761730507016, -3.5501677989959717, -0.11717557162046432, -2.274719476699829, -0.005732287652790546, -0.017393434420228004, -0.0313001424074173, -0.05531225726008415, -0.5805031061172485, -0.0034097647294402122, -0.002451749751344323, -6.747018051100895e-05, -1.4305104514278355e-06, -0.0006102845072746277, -0.004437006078660488, -0.023339318111538887, -0.2872360348701477, -0.20252865552902222, -0.00037579628406092525, -0.27874550223350525, -8.284702198579907e-05, -0.05956784263253212, -0.5104143619537354, -0.012259251438081264, -0.08909159153699875, -0.00011908298620255664, -0.9872081279754639, -0.0005463061388581991, -0.00546248210594058, -0.005001414567232132, -0.01874728314578533, -0.000985375139862299, -0.03315681219100952, -0.14779752492904663, -0.014119255356490612, -0.013014611788094044, -2.7171225547790527, -0.16334587335586548, -0.8180234432220459, -0.009435700252652168, -0.9205350279808044, -8.21318244561553e-05, -0.0011550667695701122, -0.0028019000310450792, -0.03308046609163284, -0.000428108120104298, -0.05420851707458496, -0.0003844952443614602, -0.00463957479223609, -0.0036984155885875225, -0.012486967258155346, -0.0006739014061167836, -0.004251014906913042, -0.07091660052537918, -3.211996555328369, -0.12549178302288055, -3.5285298824310303, -0.18205174803733826, -0.005807194393128157, -0.00012289722508285195, -0.00674353027716279, -0.004378138110041618, -5.769562994828448e-05, -2.861018856492592e-06, -0.3980926275253296, -0.006272865924984217, -0.10823079943656921, -0.077315554022789, -0.002687059575691819, -0.0006312523037195206, -0.004347397480159998, -0.0003620922507252544, -1.0847986231965479e-05, -0.001391872181557119, -0.2795783281326294, -0.0028745303861796856, -0.004678138066083193, -0.00034028460504487157, -0.7656137943267822, -0.14767782390117645, -0.0034868652001023293, -0.0010998159414157271, -0.0020402108784765005, -0.9886314272880554, -0.31156226992607117, -0.0007802779437042773, -0.004558884538710117, -0.0002090712368953973, -0.02493865415453911, -0.002794054336845875, -0.00652551744133234, -2.682172998902388e-05, -0.004454808309674263, -0.0009521479951217771, -0.3728754222393036, -0.006206642370671034, -0.0010415849974378943, -0.0007572882459498942, -0.007931523025035858, -0.0002369599969824776, -0.008285554125905037, -0.23121444880962372, -0.0002029928145930171, -0.011913340538740158, -0.00014780859055463225, -0.001142206834629178, -0.004748022183775902, -0.00017355366435367614, -0.00023493390472140163, -0.00023195437097456306, -0.0001399419124936685, -0.012564430944621563, -0.000635183765552938, -0.0023847969714552164, -0.15641391277313232, -0.2830713987350464, -0.016233643516898155, -1.1742792129516602, -0.0012772268382832408, -0.2648526132106781, -0.00409455131739378, -0.00031406714697368443, -0.2227460741996765, -1.156323378381785e-05, -1.4543427823809907e-05, -1.7148535251617432, -2.884823152271565e-05, -2.145764938177308e-06, -4.768360213347478e-06, -0.4467019736766815, -0.0003129946126136929, -0.009769248776137829, -0.02928582951426506, -5.757642793469131e-05, -0.0005744237569160759, -1.1324817933200393e-05, -0.0007933806627988815, -0.4761711657047272, -1.0519979000091553, -0.029329704120755196, -0.005051113199442625, -0.3519437313079834, -0.015499960631132126, -0.6956142783164978], "finish_reason": "stop"}], "metrics": {"energy": 176.37734084892261, "energy_per_token": 1.1092914518800165, "time": 6.9492474, "time_per_token": 0.043705958490566035}}
{"outputs": [{"text": "result = {}\n\n    for filepath in glob.glob(f\"{directory}/*.*\"):\n        # Extract the filename without extension\n        file_name = os.path.splitext(os.path.basename(filepath))[0]\n\n        # Skip files that do not match the pattern\n        if not re.match(pattern, file_name):\n            continue\n\n        with open(filepath, \"rb\") as f:\n            hash = hashlib.sha256(f.read()).hexdigest()\n            result[filepath] = hash\n    return result", "tokens": ["result", " =", " {}", "\n", "\n", "    ", "for", " file", "path", " in", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "*", "\"", "):", "\n", "        ", "#", " Ext", "ract", " the", " filename", " without", " extension", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "path", "))", "[", "0", "]", "\n", "\n", "        ", "#", " Skip", " files", " that", " do", " not", " match", " the", " pattern", "\n", "        ", "if", " not", " re", ".", "match", "(", "pattern", ",", " file", "_", "name", "):", "\n", "            ", "continue", "\n", "\n", "        ", "with", " open", "(", "file", "path", ",", " \"", "rb", "\"", ")", " as", " f", ":", "\n", "            ", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "result", "[", "file", "path", "]", " =", " hash", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-2.129301071166992, -0.1797187477350235, -0.15923075377941132, -0.010006855241954327, -1.3006927967071533, -0.00080195686314255, -1.0549755096435547, -1.8806098699569702, -1.8542814254760742, -0.6606081128120422, -1.2049896717071533, -0.025876188650727272, -0.27815109491348267, -0.007582454942166805, -0.7696985602378845, -0.10666733980178833, -0.008392187766730785, -0.017982779070734978, -0.24114874005317688, -0.0658765435218811, -0.772010862827301, -1.6382614374160767, -0.00415462302044034, -0.09061361104249954, -0.014052491635084152, -0.04224253073334694, -2.72383975982666, -4.189664840698242, -0.03468170017004013, -1.0065231323242188, -1.1223280429840088, -1.3959522247314453, -1.2584781646728516, -0.3630809485912323, -0.0007917130133137107, -2.8209376335144043, -0.18257349729537964, -0.2030908167362213, -0.11959908902645111, -0.1866227388381958, -0.00022230061586014926, -0.00013863079948350787, -0.004051335621625185, -0.8936631083488464, -3.361645576660521e-05, -9.536738616588991e-07, -0.0001908358681248501, -0.527421772480011, -0.0004655231023207307, -3.58813522325363e-05, -0.000406301929615438, -0.02289084903895855, -3.576278118089249e-07, -6.067568756407127e-05, -0.0017144280718639493, -0.00011717586312443018, -0.0022024677600711584, -0.00048423008411191404, -0.0008289953111670911, -0.00016330339713022113, -0.004781835246831179, -0.46865299344062805, -0.0015326907159760594, -0.3855604827404022, -1.9796985387802124, -0.7166992425918579, -0.26223987340927124, -1.3553515672683716, -0.0043354094959795475, -0.019863847643136978, -0.022806840017437935, -0.45951542258262634, -0.07847268134355545, -0.0003413571394048631, -0.015815535560250282, -0.29543572664260864, -0.023265130817890167, -6.282132380874828e-05, -0.5764022469520569, -0.00011765264935093, -0.006804627366364002, -0.0011176775442436337, -0.0045639872550964355, -0.0168532095849514, -2.6225699912174605e-05, -0.035014186054468155, -0.002097907941788435, -0.0008803306263871491, -0.019918421283364296, -0.0009053422254510224, -0.024072857573628426, -0.0005516675882972777, -1.19333815574646, -0.002333776792511344, -0.0004920940846204758, -0.004766055848449469, -0.0003943857445847243, -0.002578745363280177, -1.1665929555892944, -0.0072060441598296165, -0.00042989550274796784, -0.0005970602505840361, -9.464769391342998e-05, -0.5489463806152344, -0.060819827020168304, -0.003610522486269474, -0.002684562699869275, -2.6719508171081543, -1.7501590251922607, -0.07303060591220856, -0.0005494038923643529, -3.218599158572033e-05, -0.007697089575231075, -0.003408101387321949, -2.3364747903542593e-05, -8.344646857949556e-07, -0.35066986083984375, -0.02380876988172531, -0.000519617460668087, -9.262132516596466e-05, -0.004683477338403463, -0.0621768943965435, -0.08310090005397797, -0.00013469743134919554, -0.0010132422903552651, -0.0005614373367279768, -0.019690288230776787, -0.258876770734787, -0.10985729843378067, -0.031377434730529785, -0.06130026653409004, -0.04615405201911926, -0.004618809558451176, -0.00012742661056108773, -0.04919954761862755, -0.006676035467535257, -1.945785403251648, -0.03517267480492592, -0.005138049367815256, -0.32516953349113464, -0.02387581765651703, -1.0131235122680664], "finish_reason": "stop"}], "metrics": {"energy": 144.0475838108063, "energy_per_token": 1.0144196043014528, "time": 6.1013966, "time_per_token": 0.042967581690140845}}
{"outputs": [{"text": "hashes = {}\n    pattern = re.compile(pattern)\n    for file_name in os.listdir(directory):\n        if pattern.match(file_name):\n            with open(os.path.join(directory, file_name), 'rb') as f:\n                hash_val = hashlib.sha256(f.read()).hexdigest()\n                hashes[file_name] = hash_val\n    return hashes", "tokens": ["has", "hes", " =", " {}", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "if", " pattern", ".", "match", "(", "file", "_", "name", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "hash", "_", "val", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "has", "hes", "[", "file", "_", "name", "]", " =", " hash", "_", "val", "\n", "    ", "return", " has", "hes", "\n", "\n", "if"], "logprobs": [-2.956989288330078, -0.01241244189441204, -0.09488116949796677, -0.07210222631692886, -0.032449640333652496, -0.2777910828590393, -1.9801459312438965, -0.047651078552007675, -0.06832816451787949, -0.00019965562387369573, -0.007519749458879232, -0.001911718980409205, -0.0333247072994709, -0.037977490574121475, -0.014455357566475868, -0.4177614450454712, -0.5050510764122009, -1.5298713445663452, -0.9361963272094727, -0.6764329075813293, -0.048838596791028976, -0.20081843435764313, -0.00014888131408952177, -0.0047613102942705154, -2.074220174108632e-05, -0.0018346159486100078, -0.003984726965427399, -0.0013335392577573657, -0.008685785345733166, -0.004604807589203119, -0.6105051636695862, -0.41358068585395813, -0.001369372708722949, -0.528886079788208, -0.00022837892174720764, -0.007856657728552818, -8.034383063204587e-05, -6.01988795096986e-05, -0.11456695199012756, -0.013727542944252491, -0.0022110319696366787, -0.661450207233429, -0.0010517071932554245, -0.002931109629571438, -0.2644198536872864, -0.0019946456886827946, -0.00013660451804753393, -0.004739242140203714, -0.00021681819634977728, -6.294052582234144e-05, -0.0019866747315973043, -0.0001740304142003879, -0.006889635231345892, -3.1709168979432434e-05, -1.1324817933200393e-05, -0.01054642628878355, -0.00018773700867313892, -0.37337616086006165, -0.006945514120161533, -0.002311417367309332, -0.00020859450160060078, -0.8221439719200134, -0.01624443382024765, -0.0025250001344829798, -0.001520311925560236, -2.740905284881592, -0.45140665769577026, -2.092100143432617, -0.005773179233074188, -0.1910630464553833, -0.0018949424847960472, -7.056941103655845e-05, -0.005603439640253782, -0.005715338047593832, -6.663577369181439e-05, -1.4305104514278355e-06, -0.08446895331144333, -0.13342837989330292, -0.0005656072753481567, -0.00010418349120300263, -0.0054209851659834385, -0.0523441806435585, -0.1462634652853012, -0.00017677174764685333, -0.002423090161755681, -0.0006095697171986103, -0.014231850393116474, -0.09262612462043762, -0.057089559733867645, -7.152531907195225e-06, -0.01974545605480671, -0.38563650846481323, -1.6927575416048057e-05, -8.296622399939224e-05, -0.003990307915955782, -0.00010609064338495955, -0.05661700293421745, -0.0013635394861921668, -3.480850500636734e-05, -0.005604506470263004, -0.21566325426101685, -0.025227783247828484, -0.007592156529426575, -9.65590606938349e-06, -0.2268187403678894, -0.015222915448248386, -0.8316313028335571], "finish_reason": "stop"}], "metrics": {"energy": 105.27579111862178, "energy_per_token": 0.9838858983048765, "time": 4.4252653, "time_per_token": 0.04135761962616823}}
{"outputs": [{"text": "file_hashes = {}\n    for file_path in get_files_matching_pattern(directory, pattern):\n        with open(file_path, 'rb') as file:\n            file_hashes[file_path] = hashlib.sha256(file.read()).hexdigest()\n\n    return file_hashes", "tokens": ["file", "_", "has", "hes", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " get", "_", "files", "_", "matching", "_", "pattern", "(", "directory", ",", " pattern", "):", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "            ", "file", "_", "has", "hes", "[", "file", "_", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "file", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "\n", "    ", "return", " file", "_", "has", "hes", "\n", "\n", "def"], "logprobs": [-2.9369277954101562, -0.04466629400849342, -0.6223409175872803, -0.0005352256703190506, -0.0437285341322422, -0.044846970587968826, -0.022440429776906967, -0.3759174942970276, -0.9780479073524475, -1.6193337440490723, -0.6189292669296265, -0.547224760055542, -0.09975872188806534, -2.70984148979187, -0.029127560555934906, -0.8188162446022034, -0.7425600290298462, -2.2020444869995117, -0.12617796659469604, -0.28325167298316956, -0.00995834730565548, -0.024081818759441376, -0.01472486276179552, -0.017576176673173904, -0.030999820679426193, -0.005621931981295347, -0.007507917936891317, -0.41756516695022583, -0.0030999958980828524, -0.0008152975351549685, -0.0036128980573266745, -2.622600959512056e-06, -2.8609820219571702e-05, -0.004741733893752098, -0.2502625286579132, -0.006739504635334015, -0.0017108578467741609, -0.00038938093348406255, -0.46972033381462097, -0.06610186398029327, -0.005697084590792656, -0.0020009512081742287, -0.5418522357940674, -0.0033921815920621157, -0.5776309967041016, -0.0003387354372534901, -0.014507642947137356, -0.008669122122228146, -0.029798900708556175, -0.000612071540672332, -0.0030622039921581745, -0.00032884435495361686, -0.5936948657035828, -0.035147011280059814, -0.00035851728171110153, -0.0025572238955646753, -0.002737467410042882, -2.8729025871143676e-05, -6.6756979322235566e-06, -0.0021532224491238594, -0.11992872506380081, -0.004001468885689974, -0.0003682888636831194, -0.0044582500122487545, -0.009172207675874233, -0.03851434215903282, -0.0001711698860162869, -0.00430668517947197, -0.0007693191873840988, -0.013523160479962826, -1.7252390384674072, -0.00608200253918767, -0.04113032668828964, -0.01808791421353817, -2.3841830625315197e-06, -6.675497570540756e-05, -5.817244164063595e-05, -0.03489250689744949, -0.007366281468421221, -0.10122743993997574], "finish_reason": "stop"}], "metrics": {"energy": 95.5367899608612, "energy_per_token": 1.194209874510765, "time": 3.3798594, "time_per_token": 0.0422482425}}
{"outputs": [{"text": "file_hashes = {}\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            if re.match(pattern, filename):\n                file_path = os.path.join(root, filename)\n                with open(file_path, 'rb') as f:\n                    file_hash = hashlib.sha256(binascii.unhexlify(f.read())).hexdigest()\n                    file_hashes[filename] = file_hash\n    return file_hashes", "tokens": ["file", "_", "has", "hes", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "if", " re", ".", "match", "(", "pattern", ",", " filename", "):", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " filename", ")", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "file", "_", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "bin", "ascii", ".", "un", "hex", "l", "ify", "(", "f", ".", "read", "()))", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "file", "_", "has", "hes", "[", "filename", "]", " =", " file", "_", "hash", "\n", "    ", "return", " file", "_", "has", "hes", "\n", "\n", "if"], "logprobs": [-2.9369277954101562, -0.04466629400849342, -0.6223409175872803, -0.0005352256703190506, -0.0437285341322422, -0.044846970587968826, -0.022440429776906967, -0.3759174942970276, -0.9780479073524475, -1.2733654975891113, -0.0009977606823667884, -0.5819731950759888, -0.0012559153838083148, -0.00018606838420964777, -0.04527624696493149, -0.0005583396414294839, -0.009875016286969185, -3.707340147229843e-05, -8.49926145747304e-05, -0.0013611585600301623, -0.007851453498005867, -0.11903749406337738, -0.020112037658691406, -0.006475892383605242, -0.10433844476938248, -1.158754587173462, -0.0005803807871416211, -0.04421383515000343, -0.00011073929636040702, -0.006336360704153776, -0.004437836818397045, -0.42997822165489197, -0.055723872035741806, -8.308542601298541e-05, -0.5778012275695801, -0.0002826052950695157, -0.0036286956164985895, -0.0016592082101851702, -0.019562290981411934, -0.09002460539340973, -0.02005782350897789, -0.003303905250504613, -0.8388173580169678, -0.3414404094219208, -0.35092049837112427, -0.0012038849527016282, -0.010887740179896355, -0.00015233787416946143, -2.169585604860913e-05, -0.005586962215602398, -0.0040582213550806046, -0.00010227633902104571, -0.008573155850172043, -0.000624104228336364, -0.0028477851301431656, -0.00016342257731594145, -0.004514739383012056, -0.008337217383086681, -0.302425354719162, -0.0012307934230193496, -0.00035375059815123677, -0.001258296542800963, -0.0003026265767402947, -9.894321920000948e-06, -0.0017670269589871168, -0.22699326276779175, -0.0035798768512904644, -0.0016659918474033475, -0.000196556793525815, -0.6604821681976318, -0.026009071618318558, -0.002014394849538803, -0.000674616196192801, -0.0011326810345053673, -0.47862815856933594, -0.0020283141639083624, -2.200190305709839, -0.009962478652596474, -0.08205191045999527, -0.0004374024283606559, -6.0437283536884934e-05, -0.00312530854716897, -0.0023480483796447515, -1.9192511899746023e-05, -7.033323527139146e-06, -0.03247895464301109, -2.609576463699341, -4.4225667807040736e-05, -1.7165990357170813e-05, -0.1652618944644928, -0.004353450611233711, -0.0002165798214264214, -1.680836794548668e-05, -0.03701792284846306, -0.13204853236675262, -0.010035298764705658, -0.0010659971740096807, -0.9951434135437012, -0.04864455759525299, -0.022926384583115578, -0.0001551984460093081, -0.000920825288631022, -0.0006096888100728393, -0.011019682511687279, -0.004514739383012056, -0.14807544648647308, -0.018972942605614662, -3.290122185717337e-05, -0.0011049362365156412, -3.3378546504536644e-06, -0.008377174846827984, -3.041858434677124, -0.002779313363134861, -8.093983342405409e-05, -0.0069090514443814754, -4.827859811484814e-05, -0.014291551895439625, -0.006104751490056515, -0.22057276964187622, -0.018871290609240532, -0.012543476186692715, -6.627816765103489e-05, -5.602679812000133e-05, -5.376194530981593e-05, -0.27590274810791016, -0.012915059924125671, -0.7942129969596863], "finish_reason": "stop"}], "metrics": {"energy": 140.23145913887018, "energy_per_token": 1.104184717628899, "time": 5.469146, "time_per_token": 0.04306414173228347}}
{"outputs": [{"text": "files_hash = {}\n    files_dirs = []\n\n    if directory == OUTPUT_DIR and len(os.listdir(directory)) == 0:\n        return files_hash\n\n    try:\n        for root, _, files in os.walk(directory):\n            for file in files:\n                if re.match(pattern, file):\n                    hash = hashlib.sha256(file.encode()).hexdigest()\n                    files_hash[root + \"\\\\\" + file] = hash\n                    files_dirs.append(root + \"\\\\\" + file)\n\n        return files_hash\n\n    except PermissionError as perm_err:\n        print(f\"[!] Permission Error: {perm_err}\")\n        return {}\n\n    except FileNotFoundError as file_err:\n        print(f\"[!] FileNotFoundError: {file_err}\")\n        return {}\n\n    except FileExistsError as file_exist_err:\n        print(f\"[!] FileExistsError: {file_exist_err}\")\n        return {}\n", "tokens": ["files", "_", "hash", " =", " {}", "\n", "    ", "files", "_", "dir", "s", " =", " []", "\n", "\n", "    ", "if", " directory", " ==", " OUT", "PUT", "_", "DIR", " and", " len", "(", "os", ".", "list", "dir", "(", "directory", "))", " ==", " ", "0", ":", "\n", "        ", "return", " files", "_", "hash", "\n", "\n", "    ", "try", ":", "\n", "        ", "for", " root", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "            ", "for", " file", " in", " files", ":", "\n", "                ", "if", " re", ".", "match", "(", "pattern", ",", " file", "):", "\n", "                ", "    ", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "file", ".", "encode", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "files", "_", "hash", "[", "root", " +", " \"", "\\\\", "\"", " +", " file", "]", " =", " hash", "\n", "                ", "    ", "files", "_", "dir", "s", ".", "append", "(", "root", " +", " \"", "\\\\", "\"", " +", " file", ")", "\n", "\n", "        ", "return", " files", "_", "hash", "\n", "\n", "    ", "except", " Perm", "ission", "Error", " as", " per", "m", "_", "err", ":", "\n", "        ", "print", "(", "f", "\"", "[", "!", "]", " Perm", "ission", " Error", ":", " {", "perm", "_", "err", "}\"", ")", "\n", "        ", "return", " {}", "\n", "\n", "    ", "except", " File", "NotFound", "Error", " as", " file", "_", "err", ":", "\n", "        ", "print", "(", "f", "\"", "[", "!", "]", " File", "NotFound", "Error", ":", " {", "file", "_", "err", "}\"", ")", "\n", "        ", "return", " {}", "\n", "\n", "    ", "except", " File", "Exists", "Error", " as", " file", "_", "exist", "_", "err", ":", "\n", "        ", "print", "(", "f", "\"", "[", "!", "]", " File", "Exists", "Error", ":", " {", "file", "_", "exist", "_", "err", "}\"", ")", "\n", "        ", "return", " {}", "\n"], "logprobs": [-2.7340774536132812, -1.6779457330703735, -1.645995020866394, -0.27814027667045593, -0.12259269505739212, -0.033040907233953476, -0.3077618479728699, -3.0498807430267334, -0.8417369723320007, -4.060171604156494, -2.497695207595825, -0.07621342688798904, -1.1597249507904053, -0.017182184383273125, -1.2660835981369019, -0.0008817598572932184, -1.7776457071304321, -2.3591458797454834, -1.8360419273376465, -1.1539205312728882, -1.8954096958623268e-05, -7.223821739898995e-05, -0.00019095504831057042, -2.940164566040039, -2.2016067504882812, -0.008826053701341152, -1.3282450437545776, -0.00030858523678034544, -0.021841928362846375, -4.124556289752945e-05, -0.07395901530981064, -0.16969604790210724, -0.003886409569531679, -0.45879092812538147, -0.004860253538936377, -0.06744354218244553, -0.01795104704797268, -0.06132381409406662, -0.007404621224850416, -0.7595126628875732, -0.37310588359832764, -0.00011324241495458409, -0.01550911646336317, -0.015526722185313702, -0.17373494803905487, -0.0006852186052128673, -3.126986026763916, -0.0012287693098187447, -0.003526422893628478, -0.018835727125406265, -0.5560227632522583, -0.8497557044029236, -0.007404976058751345, -2.641267776489258, -0.07601822167634964, -0.21700598299503326, -0.009072745218873024, -0.026301376521587372, -5.6265202147187665e-05, -0.0008968859910964966, -0.0018898261478170753, -0.015053363516926765, -0.09529773890972137, -0.009404642507433891, -0.017683465033769608, -0.5248599648475647, -0.47508201003074646, -0.47195401787757874, -0.059547848999500275, -0.000803505361545831, -0.004618928302079439, -0.008736837655305862, -0.32690295577049255, -0.16368700563907623, -0.00014101465058047324, -0.6201720833778381, -0.000763244170229882, -0.010721579194068909, -0.008266637101769447, -0.023643113672733307, -0.21064579486846924, -0.010979830287396908, -0.008449873887002468, -0.003066126024350524, -3.479867935180664, -1.3850507736206055, -0.20458421111106873, -0.006646549329161644, -0.00019476900342851877, -0.01006515696644783, -0.006677101366221905, -0.00012790338951162994, -4.410734163684538e-06, -0.9239092469215393, -2.55008602142334, -0.11520681530237198, -0.06604595482349396, -0.5255560278892517, -0.18997842073440552, -0.07178417593240738, -0.0008518642862327397, -0.0017823775997385383, -0.0015464978059753776, -0.01964423432946205, -0.03034559264779091, -0.0006435230607166886, -0.3020080327987671, -0.0016847953666001558, -0.15295268595218658, -0.1034095510840416, -1.5726020336151123, -0.2504057288169861, -1.969505786895752, -0.5382760167121887, -0.0017128810286521912, -0.005944785661995411, -0.008981778286397457, -0.0074382261373102665, -0.0005093707586638629, -0.043139442801475525, -0.010507852770388126, -0.7574043273925781, -0.09755639731884003, -0.17409490048885345, -0.002386699663475156, -0.001623861026018858, -0.0002944036095868796, -0.0118781179189682, -0.009027853608131409, -0.1161668449640274, -0.2529919445514679, -0.5918581485748291, -0.020214613527059555, -0.01096839364618063, -0.0002579356369096786, -0.007369239814579487, -0.0029025827534496784, -0.0044103022664785385, -0.007235039956867695, -1.3338208198547363, -0.6907500624656677, -0.6722743511199951, -0.0904269739985466, -3.528532761265524e-05, -0.006272628903388977, -0.0603877454996109, -0.45372071862220764, -0.002069357316941023, -0.027936676517128944, -2.6348962783813477, -0.00048339602653868496, -0.0002153879904653877, -1.317517638206482, -3.2013802528381348, -0.33700886368751526, -0.27701160311698914, -0.629657506942749, -0.003002304583787918, -0.010048163123428822, -0.004245673306286335, -0.29002413153648376, -0.10196837037801743, -1.2477638721466064, -0.2668718099594116, -2.5449771881103516, -1.1197971105575562, -0.06488005071878433, -1.9394923448562622, -0.012691443786025047, -1.056817889213562, -0.43704068660736084, -0.10235089063644409, -0.03840169310569763, -8.713819261174649e-05, -3.4689302992774174e-05, -0.2079804688692093, -0.0239428598433733, -0.013714137487113476, -0.7098674774169922, -0.6445461511611938, -2.113954544067383, -0.018860645592212677, -0.2848147451877594, -0.09752525389194489, -0.06016933545470238, -0.8191398978233337, -0.007477036211639643, -0.00015901254664640874, -0.026608219370245934, -0.40170782804489136, -0.01708761602640152, -0.5874940156936646, -0.0006148116663098335, -0.0006658005877397954, -0.0012772268382832408, -0.014666715636849403, -0.0014909114688634872, -0.010088169947266579, -0.005958769004791975, -0.012114282697439194, -0.016509821638464928, -0.002042114268988371, -0.10671405494213104, -1.6103864908218384, -0.7423653602600098, -0.12270774692296982, -0.020061679184436798, -0.007860442623496056, -0.00017295771976932883, -6.341733387671411e-05, -0.03572368621826172, -0.006733465939760208, -0.0070208036340773106, -0.013825015164911747, -0.030615128576755524, -0.028404440730810165, -0.06209971010684967, -0.03721354156732559, -0.19880114495754242, -0.18338130414485931, -3.5028440952301025, -0.13988371193408966, -6.508615479106084e-05, -0.02674274705350399, -0.24120016396045685, -0.005137930624186993, -1.101943850517273, -0.284978449344635, -0.028618546202778816, -0.0005683475756086409, -0.0007921895012259483, -0.0007215518853627145, -0.006882058456540108, -0.0009126074146479368, -0.0076957885175943375, -0.0016815820708870888, -0.003950055688619614, -0.009307565167546272, -0.0009583409409970045, -0.017651021480560303, -0.10866814851760864, -0.017124062404036522, -0.008082066662609577, -0.0031746248714625835, -0.0019702562130987644, -5.221230458118953e-05, -0.0003297977091278881, -2.3841830625315197e-06, -1.645074735279195e-05, -0.005464734509587288, -0.0022568251006305218, -0.00243105785921216, -0.008065984584391117, -0.009359530173242092, -0.014506115578114986, -0.07261818647384644], "finish_reason": "length"}], "metrics": {"energy": 285.4265946874619, "energy_per_token": 1.114947635497898, "time": 11.128624, "time_per_token": 0.0434711875}}
{"outputs": [{"text": "regex_pattern = re.compile(pattern)\n    result = {}\n\n    for filename in glob.glob(os.path.join(directory, \"**\", \"*\")):\n        if os.path.isdir(filename):\n            continue\n        match = regex_pattern.match(filename)\n        if match:\n            with open(filename, \"rb\") as f:\n                result[filename] = hashlib.sha256(f.read()).hexdigest()\n    return result", "tokens": ["regex", "_", "pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "result", " =", " {}", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "**", "\"", ",", " \"", "*", "\"", "))", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "dir", "(", "filename", "):", "\n", "            ", "continue", "\n", "        ", "match", " =", " regex", "_", "pattern", ".", "match", "(", "filename", ")", "\n", "        ", "if", " match", ":", "\n", "            ", "with", " open", "(", "filename", ",", " \"", "rb", "\"", ")", " as", " f", ":", "\n", "                ", "result", "[", "filename", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.937715530395508, -2.325934886932373, -0.19206994771957397, -0.019818386062979698, -0.15814603865146637, -0.0002983363519888371, -0.003708629636093974, -0.001871978398412466, -0.02420353703200817, -0.049791429191827774, -0.015382930636405945, -0.14272460341453552, -2.7385494709014893, -0.16415579617023468, -0.18198725581169128, -0.004188337363302708, -0.8737354278564453, -0.0003586364327929914, -0.326032817363739, -1.6815005540847778, -0.03024139069020748, -2.253770351409912, -0.016552384942770004, -0.15494181215763092, -0.00869311299175024, -1.2450517416000366, -5.6503606174374e-05, -0.00018368464952800423, -0.0016369527438655496, -0.002336274366825819, -0.001974539365619421, -0.01144887413829565, -0.0011801904765889049, -0.8237045407295227, -1.888421654701233, -0.2924284338951111, -0.17269755899906158, -0.04927977919578552, -0.009389881044626236, -0.9884361028671265, -1.0702528953552246, -0.0009913297835737467, -0.019712261855602264, -0.015207535587251186, -0.32120105624198914, -0.9043580889701843, -0.0001752223033690825, -0.0037435467820614576, -0.00025769727653823793, -0.012440345250070095, -1.913387656211853, -0.00012754580529872328, -0.0026780238840729, -0.06617695093154907, -0.03123786859214306, -0.002015227684751153, -0.16346138715744019, -0.0404750257730484, -0.3741714358329773, -2.701953172683716, -0.07333950698375702, -0.05048010125756264, -8.380061626667157e-05, -5.173549288883805e-05, -8.570780482841656e-05, -1.2106013298034668, -0.00011860620725201443, -0.10240727663040161, -0.028213467448949814, -0.007957542315125465, -0.10249379277229309, -0.014953897334635258, -0.49823519587516785, -0.20710818469524384, -0.0070438869297504425, -0.003501120489090681, -0.8062019944190979, -0.0042646657675504684, -0.0005768066039308906, -0.004446737933903933, -0.0036270327400416136, -0.33295387029647827, -0.005751844495534897, -0.0005937243695370853, -0.0013937769690528512, -5.519237674889155e-05, -0.5870035886764526, -0.04912691190838814, -0.001563994330354035, -0.0010565895354375243, -1.851158857345581, -0.02502666786313057, -0.09192511439323425, -0.004041718319058418, -0.00024125049822032452, -0.2914038896560669, -0.0030043248552829027, -0.00014757021563127637, -0.00415913388133049, -0.0027416283264756203, -5.817244164063595e-05, -2.264974000354414e-06, -0.0012153151910752058, -0.19108529388904572, -0.000582525331992656, -0.0002012050390476361, -0.004263241309672594, -0.0077395569533109665, -0.06592866778373718, -0.00047791501856409013, -0.0029252853710204363, -0.0011032691691070795, -0.014242428354918957, -0.655410647392273, -0.02116137184202671, -0.004550340585410595, -1.7899821996688843, -1.7881377516459906e-06, -1.4305104514278355e-06, -2.825220326485578e-05, -7.247662142617628e-05, -0.09326225519180298], "finish_reason": "stop"}], "metrics": {"energy": 139.32688021659854, "energy_per_token": 1.1420236083327748, "time": 5.238525, "time_per_token": 0.04293872950819672}}
{"outputs": [{"text": "# Write your code here\n    output = dict()\n    file_paths = list()\n\n    for path, _, files in os.walk(directory):\n        file_paths += [os.path.join(path, f) for f in files]\n\n    for file in file_paths:\n        with open(file, 'rb') as f:\n            content = f.read()\n            hash = hashlib.sha256(content).hexdigest()\n            output[file] = hash\n\n    return output", "tokens": ["#", " Write", " your", " code", " here", "\n", "    ", "output", " =", " dict", "()", "\n", "    ", "file", "_", "paths", " =", " list", "()", "\n", "\n", "    ", "for", " path", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "file", "_", "paths", " +=", " [", "os", ".", "path", ".", "join", "(", "path", ",", " f", ")", " for", " f", " in", " files", "]", "\n", "\n", "    ", "for", " file", " in", " file", "_", "paths", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "            ", "output", "[", "file", "]", " =", " hash", "\n", "\n", "    ", "return", " output", "\n", "\n", "def"], "logprobs": [-2.5301380157470703, -5.149485111236572, -0.2016448825597763, -0.12559303641319275, -0.05318935588002205, -0.17713966965675354, -0.11597280949354172, -3.3131418228149414, -0.45763421058654785, -2.2916829586029053, -0.00712828291580081, -0.014177083037793636, -0.22407999634742737, -3.456883668899536, -0.12216466665267944, -1.5898776054382324, -0.05299130082130432, -1.5878571271896362, -0.3523917496204376, -0.012491323053836823, -1.4826868772506714, -0.0010090741561725736, -1.1339014768600464, -2.487647294998169, -0.35096481442451477, -1.3106613159179688, -0.021336309611797333, -0.3270858824253082, -0.0027390127070248127, -0.030691200867295265, -7.068861305015162e-05, -6.0437283536884934e-05, -0.00283447140827775, -0.012941654771566391, -0.050386589020490646, -0.009362954646348953, -0.020953018218278885, -2.355306386947632, -0.0015109085943549871, -0.013624534010887146, -1.3096692562103271, -0.2591688930988312, -0.2927860915660858, -0.0003813969960901886, -0.000918681500479579, -0.003055429784581065, -0.032119303941726685, -0.0008909308817237616, -0.010806255042552948, -0.0006201728247106075, -0.7096052765846252, -0.02008119225502014, -0.00806078128516674, -0.0009458358981646597, -0.00054058717796579, -0.020606480538845062, -0.47084125876426697, -0.007386279758065939, -0.08890586346387863, -0.004868794698268175, -0.20865046977996826, -0.7747440338134766, -1.762010097503662, -0.022013481706380844, -1.585470999998506e-05, -3.671578815556131e-05, -0.0008158930577337742, -0.0015863704029470682, -0.011444749310612679, -0.7318796515464783, -0.0024568631779402494, -0.0016056514577940106, -0.0031575129833072424, -0.01125227753072977, -0.5212324261665344, -0.03570585697889328, -0.009004107676446438, -0.0009550062823109329, -0.1480226069688797, -0.0765862762928009, -0.006093021482229233, -0.006920298095792532, -1.4831833839416504, -0.01978963613510132, -0.10314314067363739, -8.666139910928905e-05, -0.00011002412065863609, -0.010862858965992928, -0.00904781837016344, -0.28713658452033997, -1.160126805305481, -0.7662299871444702, -0.1394592970609665, -0.0009390473715029657, -8.511180931236595e-05, -0.01271557342261076, -0.0055400170385837555, -8.022463589441031e-05, -1.0013530300057027e-05, -0.05067060887813568, -0.08958785235881805, -0.004785513039678335, -0.09098178893327713, -0.08566751331090927, -9.393251093570143e-05, -0.0016531385481357574, -0.0007582411635667086, -0.011782576330006123, -0.10582437366247177, -0.22751088440418243, -0.05479180067777634, -0.050950806587934494, -0.016610071063041687, -0.000364713923772797, -0.057172991335392, -0.006986001040786505, -0.40303918719291687, -0.012987665832042694, -0.05235888808965683, -0.010631588287651539, -0.15987995266914368, -0.011674536392092705, -0.6036646366119385], "finish_reason": "stop"}], "metrics": {"energy": 160.98594300842294, "energy_per_token": 1.308828804946528, "time": 5.2623158, "time_per_token": 0.04278305528455284}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Not a directory: %s\" % directory)\n    re_obj = re.compile(pattern)\n    filenames = [f for f in os.listdir(directory)\n               if re_obj.match(f)]\n    hashes = {}\n    for filepath in filenames:\n        with open(os.path.join(directory, filepath), 'rb') as f:\n            hashes[os.path.join(directory, filepath)] = hashlib.sha256(f.read()).hexdigest()\n    return hashes", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Not", " a", " directory", ":", " %", "s", "\"", " %", " directory", ")", "\n", "    ", "re", "_", "obj", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "fil", "en", "ames", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "directory", ")", "\n", "               ", "if", " re", "_", "obj", ".", "match", "(", "f", ")]", "\n", "    ", "has", "hes", " =", " {}", "\n", "    ", "for", " file", "path", " in", " fil", "en", "ames", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "path", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "has", "hes", "[", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "path", ")]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " has", "hes", "\n", "\n", "#"], "logprobs": [-2.5002059936523438, -0.156107097864151, -0.5492556691169739, -0.00018320789968129247, -0.0034121407661587, -0.0036044646985828876, -0.5806170105934143, -0.008447982370853424, -0.00030501006403937936, -0.006556191481649876, -0.01922486163675785, -0.04034050181508064, -0.003484370419755578, -0.9408605098724365, -1.1201032400131226, -0.00919016171246767, -0.0013684204313904047, -0.2481805384159088, -1.6805484294891357, -3.4196972846984863, -0.17319172620773315, -0.5629845261573792, -1.6866393089294434, -1.682504653930664, -0.035265661776065826, -0.03345683217048645, -0.04734698683023453, -0.10131405293941498, -0.002094933995977044, -0.0015311434399336576, -1.0448784828186035, -5.160890579223633, -0.28011050820350647, -2.819838285446167, -0.019329633563756943, -0.002235058695077896, -0.00032848684350028634, -0.0017732147825881839, -0.0020550815388560295, -0.015451718121767044, -0.10188816487789154, -0.019507696852087975, -0.15923817455768585, -4.55700159072876, -0.060546305030584335, -0.0009004590683616698, -0.08789046853780746, -1.0655473470687866, -0.7201743721961975, -0.1934451013803482, -0.0011955503141507506, -0.00309750041924417, -0.05316765233874321, -6.90197994117625e-05, -0.003935806918889284, -7.629365427419543e-06, -0.0009023646707646549, -0.0025301130954176188, -0.004691308364272118, -2.196063995361328, -2.4926486015319824, -0.006975346710532904, -0.7944220304489136, -0.1517324149608612, -2.1219027985353023e-05, -0.00027533553657121956, -0.5496119260787964, -0.0013386583887040615, -0.07720885425806046, -0.3109643757343292, -0.0162071343511343, -0.15287135541439056, -1.7828084230422974, -0.016095934435725212, -0.07759412378072739, -0.35618650913238525, -0.014075413346290588, -0.10115234553813934, -0.17181019484996796, -3.2222061157226562, -1.1262242794036865, -0.004056559409946203, -0.02764682099223137, -1.1920928244535389e-07, -1.5497195136049413e-06, -0.0009129646932706237, -0.002034024568274617, -0.004696410149335861, -0.7485170960426331, -0.0029301587492227554, -0.006578456144779921, -0.279112309217453, -0.0035556447692215443, -0.0004577780782710761, -0.005705381743609905, -0.0033124599140137434, -0.00021586472576018423, -0.0029114973731338978, -0.0005018643569201231, -0.03783620148897171, -4.7444173105759546e-05, -0.026511985808610916, -0.0008928364841267467, -0.3660465180873871, -0.017459740862250328, -0.009372993372380733, -0.001023007556796074, -0.2862154543399811, -0.1620623916387558, -0.0041859629563987255, -0.005023120902478695, -0.7237523794174194, -0.009568188339471817, -0.022424926981329918, -2.7856245040893555, -0.0020308124367147684, -0.0005099665140733123, -0.004611927084624767, -0.23759455978870392, -0.002294528530910611, -0.008568782359361649, -0.0007363230688497424, -0.014562628231942654, -7.152531907195225e-06, -0.004864405374974012, -0.02285100147128105, -0.34270408749580383, -0.006129514425992966, -0.0014553203945979476, -0.008195816539227962, -0.006596812047064304, -0.00015066919149830937, -5.8412379075889476e-06, -0.005227112676948309, -0.15678554773330688, -0.0017484629061073065, -0.0004140473320148885, -0.006644180975854397, -0.026378706097602844, -0.0813973993062973, -0.0002499506517779082, -0.0005086558521725237, -0.0013183006085455418, -0.012595273554325104, -0.13126517832279205, -0.023341530933976173, -0.01084870845079422, -4.0531076592742465e-06, -0.22647660970687866, -0.021254971623420715, -3.218958854675293], "finish_reason": "stop"}], "metrics": {"energy": 174.64802722740163, "energy_per_token": 1.1566094518370968, "time": 6.518422, "time_per_token": 0.04316835761589404}}
{"outputs": [{"text": "pattern = re.compile(pattern)\n    hash_dict = {}\n    for root, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(root, filename)\n            if pattern.match(filename):\n                with open(file_path, 'rb') as file:\n                    hash_dict[file_path] = hashlib.sha256(file.read()).hexdigest()\n    return hash_dict", "tokens": ["pattern", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "    ", "hash", "_", "dict", " =", " {}", "\n", "    ", "for", " root", ",", " dir", "names", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " filename", ")", "\n", "            ", "if", " pattern", ".", "match", "(", "filename", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "    ", "hash", "_", "dict", "[", "file", "_", "path", "]", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "file", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " hash", "_", "dict", "\n", "\n", "if"], "logprobs": [-3.0713272094726562, -0.07197277247905731, -0.1464175134897232, -0.0003759154351428151, -0.008269238285720348, -0.0022864409256726503, -0.0325649231672287, -0.04310907423496246, -0.017960883677005768, -0.18150706589221954, -2.333479166030884, -0.20837543904781342, -0.5960046648979187, -0.03565248101949692, -0.08911503106355667, -0.017003938555717468, -0.4232822060585022, -0.429548054933548, -1.615811824798584, -0.0011817384511232376, -3.093809127807617, -0.09697774052619934, -0.00014351768186315894, -0.009851054288446903, -3.242440288886428e-05, -3.9457496313843876e-05, -0.0005133026279509068, -0.013813727535307407, -5.876845170860179e-05, -5.578839045483619e-05, -0.0013983005192130804, -0.00675951549783349, -0.048103123903274536, -0.014101036824285984, -0.005423712078481913, -0.08020911365747452, -0.13370144367218018, -0.0004619484825525433, -0.0891365185379982, -1.1205610462639015e-05, -2.264974000354414e-06, -0.0001497156627010554, -0.003753879340365529, -0.0026770727708935738, -1.3356728553771973, -0.746141254901886, -0.012718279846012592, -0.001189477858133614, -0.014622191898524761, -0.0001357701694360003, -5.924526340095326e-05, -0.00435095839202404, -0.005832912866026163, -0.00011002412065863609, -0.004156166221946478, -0.00035684893373399973, -0.005320318508893251, -0.00011562632425921038, -0.005287472158670425, -0.013755997642874718, -0.32244762778282166, -0.19152912497520447, -0.0005589353386312723, -0.7683553695678711, -0.0001530530134914443, -0.07021008431911469, -0.10568977892398834, -0.020094161853194237, -0.001962522976100445, -0.36962154507637024, -0.001647544908337295, -0.0004761277523357421, -0.0026328444946557283, -0.00014900050882715732, -3.814689989667386e-06, -0.0017642899183556437, -0.2358928620815277, -0.004472491331398487, -0.002096956130117178, -0.0002416080387774855, -0.843431293964386, -0.032730378210544586, -0.002115513663738966, -0.0004253674705978483, -0.001630644896067679, -1.016157627105713, -0.06395949423313141, -0.08400170505046844, -0.019371140748262405, -0.07743018865585327, -0.005667806603014469, -1.0967194612021558e-05, -0.0020449694711714983, -0.0004010588163509965, -0.3677598237991333, -0.006982094142585993, -0.00016878610767889768, -0.005504925269633532, -0.0032266718335449696, -2.5510462364763953e-05, -6.079655122448457e-06, -0.0032520999666303396, -0.2240656167268753, -0.0011364913079887629, -0.00024244230007752776, -0.004742564167827368, -0.0124534135684371, -0.07203977555036545, -0.0003238391946069896, -0.001474008895456791, -0.0008585343020968139, -0.009314296767115593, -0.18395234644412994, -0.016433250159025192, -0.009611284360289574, -0.0001037067049765028, -2.9801878554280847e-05, -0.26512935757637024, -0.011325240135192871, -0.8579526543617249], "finish_reason": "stop"}], "metrics": {"energy": 136.92958972549437, "energy_per_token": 1.1410799143791197, "time": 5.060964, "time_per_token": 0.0421747}}
{"outputs": [{"text": "try:\n        regex = re.compile(pattern)\n        hash_map = {}\n        for file in glob.glob(directory + '/*'):\n            if os.path.isfile(file):\n                with open(file, 'rb') as f:\n                    content = f.read()\n                    hash_val = hashlib.sha256(content).hexdigest()\n                    hash_map[file] = hash_val\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\n    return hash_map", "tokens": ["try", ":", "\n", "        ", "regex", " =", " re", ".", "compile", "(", "pattern", ")", "\n", "        ", "hash", "_", "map", " =", " {}", "\n", "        ", "for", " file", " in", " glob", ".", "glob", "(", "directory", " +", " '", "/*", "')", ":", "\n", "            ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "                ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "content", " =", " f", ".", "read", "()", "\n", "                ", "    ", "hash", "_", "val", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "hash", "_", "map", "[", "file", "]", " =", " hash", "_", "val", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", ":", " {", "str", "(", "e", ")}", "\"", ")", "\n", "\n", "    ", "return", " hash", "_", "map", "\n", "\n", "def"], "logprobs": [-3.180126190185547, -0.0021000492852181196, -0.010204287245869637, -0.015314489603042603, -2.6999659538269043, -0.15123090147972107, -0.0030957176350057125, -0.0003411188081372529, -0.0004520586517173797, -0.001128632458858192, -0.01680409349501133, -0.06635680049657822, -0.01790807582437992, -0.7498445510864258, -2.648552417755127, -0.20979748666286469, -2.2225804328918457, -0.03529788553714752, -0.09607306867837906, -0.023314859718084335, -0.23944491147994995, -0.304810494184494, -1.3107116222381592, -1.0319430828094482, -1.770890712738037, -0.019825749099254608, -0.18622462451457977, -0.0113344332203269, -1.1386237144470215, -0.22878716886043549, -0.8692044019699097, -0.3052990436553955, -0.23435980081558228, -0.0009759668610058725, -0.018479445949196815, -0.006531202234327793, -0.3852866590023041, -1.493066668510437, -0.00030179237364791334, -0.02624320052564144, -0.0010274137603119016, -0.015340317040681839, -0.13221795856952667, -0.0005012686015106738, -0.002061981474980712, -0.37851011753082275, -0.028026746585965157, -0.00384187838062644, -0.4496591091156006, -0.0015584002248942852, -0.0011288706446066499, -0.002357443794608116, -0.0040551344864070415, -0.20109739899635315, -0.015257667750120163, -0.0031341025605797768, -0.00031883400515653193, -0.17675195634365082, -0.04328911751508713, -0.00428698118776083, -0.0007487116381525993, -0.002123840618878603, -1.4347842931747437, -0.017389334738254547, -0.08524549007415771, -5.113947918289341e-05, -4.8874615458771586e-05, -0.004154029302299023, -0.00806775875389576, -0.013478350825607777, -0.08224605023860931, -0.5412512421607971, -0.3280960023403168, -2.015259027481079, -0.003491854527965188, -0.1605266034603119, -0.0030326112173497677, -5.435795901576057e-05, -0.015542098321020603, -0.0065553621388971806, -0.00017689094238448888, -5.364403477869928e-06, -0.007134674116969109, -0.07405245304107666, -0.0028618115466088057, -0.02332557551562786, -0.09248800575733185, -3.9457496313843876e-05, -0.0016639686655253172, -0.0005714452126994729, -0.008513348177075386, -0.008771933615207672, -0.02456127665936947, -0.4659498333930969, -0.000920825288631022, -0.004377901088446379, -0.03275945037603378, -0.12387263774871826, -0.015177478082478046, -0.00018618757894728333, -0.0661097839474678, -0.0019921474158763885, -0.00019035911827813834, -0.004530878737568855, -1.6469565629959106, -0.014111262746155262, -0.3734560012817383, -0.10101809352636337, -0.14463315904140472, -0.000830901088193059, -0.010659424588084221, -0.0029211253859102726, -0.48310497403144836, -0.07156679779291153, -0.4193347990512848, -0.2151881903409958, -0.5862917900085449, -1.030380129814148, -0.03689086064696312, -2.6510226726531982, -0.00025138078490272164, -0.004817782435566187, -0.041539013385772705, -0.010579453781247139, -0.005839431192725897, -0.0014398456551134586, -2.302257776260376, -0.040135763585567474, -0.06307222694158554, -0.023715177550911903, -0.0001991788885788992, -6.151010165922344e-05, -0.25161534547805786, -0.01312533114105463, -0.8487733602523804], "finish_reason": "stop"}], "metrics": {"energy": 155.1287922649383, "energy_per_token": 1.149102164925469, "time": 5.9008427, "time_per_token": 0.043709945925925926}}
{"outputs": [{"text": "res = {}\n    with os.scandir(directory) as it:\n        for entry in it:\n            if entry.is_file() and re.match(pattern, entry.name):\n                try:\n                    with open(entry.path, 'rb') as f:\n                        data = hashlib.sha256(f.read()).hexdigest()\n                        res[entry.path] = data\n                except (FileNotFoundError, PermissionError):\n                    continue\n\n    return res", "tokens": ["res", " =", " {}", "\n", "    ", "with", " os", ".", "sc", "and", "ir", "(", "directory", ")", " as", " it", ":", "\n", "        ", "for", " entry", " in", " it", ":", "\n", "            ", "if", " entry", ".", "is", "_", "file", "()", " and", " re", ".", "match", "(", "pattern", ",", " entry", ".", "name", "):", "\n", "                ", "try", ":", "\n", "                ", "    ", "with", " open", "(", "entry", ".", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "        ", "data", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "        ", "res", "[", "entry", ".", "path", "]", " =", " data", "\n", "                ", "except", " (", "File", "NotFound", "Error", ",", " Perm", "ission", "Error", "):", "\n", "                ", "    ", "continue", "\n", "\n", "    ", "return", " res"], "logprobs": [-4.921657562255859, -0.11380977183580399, -0.17276306450366974, -0.016926467418670654, -0.23376117646694183, -3.3647561073303223, -0.34887760877609253, -0.00027569307712838054, -0.005712849088013172, -4.172238186583854e-05, -5.221230458118953e-05, -0.001046586548909545, -0.00645812600851059, -0.000746448349673301, -0.00039104922325350344, -1.135749340057373, -0.05644013360142708, -0.010862269438803196, -0.010884556919336319, -0.05864114686846733, -0.3723495602607727, -0.0016709902556613088, -0.004758581053465605, -0.0005595310358330607, -0.006161977536976337, -0.005620154086500406, -0.1758802831172943, -0.22194989025592804, -0.00023922442051116377, -0.1650250107049942, -0.00012206286191940308, -0.04613469913601875, -0.5029980540275574, -0.010220571421086788, -0.09995495527982712, -0.00013147920253686607, -0.789718508720398, -0.0007205988513305783, -0.0068692718632519245, -0.005507059395313263, -0.019672637805342674, -0.0006741396500729024, -0.02746080607175827, -0.104505755007267, -0.012171754613518715, -0.005704314913600683, -2.0180742740631104, -0.00020311199477873743, -0.005163903348147869, -0.0005626287311315536, -0.0008024332928471267, -0.37947899103164673, -0.10996484756469727, -0.000933926145080477, -0.015303924679756165, -0.19336974620819092, -0.00305174570530653, -0.006642286200076342, -0.38050341606140137, -0.022518174722790718, -0.004771275911480188, -0.00032729512895457447, -0.4022361636161804, -0.11712340265512466, -0.004318911116570234, -0.0007227431051433086, -0.004101555794477463, -2.1949028968811035, -0.00973749253898859, -2.670111656188965, -0.0004974558250978589, -4.51792984677013e-05, -0.006930834613740444, -0.006499461364001036, -0.00010227633902104571, -2.622600959512056e-06, -0.026129163801670074, -0.030640101060271263, -0.0017065736465156078, -0.00017188502533826977, -0.005055620335042477, -0.11417067795991898, -0.8441863059997559, -0.00011967896716669202, -0.019220534712076187, -0.0007516896002925932, -0.01627926714718342, -0.010462435893714428, -0.24867717921733856, -0.12363342195749283, -0.05439820513129234, -0.01637015864253044, -0.0007917130133137107, -0.06306272000074387, -0.007661127485334873, -0.00016604475968051702, -0.030521707609295845, -0.004399027209728956, -0.013311326503753662, -0.052293043583631516, -2.652648448944092, -1.5779412984848022, -0.0034008543007075787, -0.00049650261644274, -0.030210740864276886, -0.4817878007888794, -0.0001896439935080707, -0.0002805792901199311, -0.6472511887550354, -0.027709437534213066, -0.00039307496626861393, -0.0034246151335537434, -1.0581157207489014, -0.008772878907620907, -1.8258898258209229, -0.015704290941357613, -0.0362996831536293, -0.008893994614481926], "finish_reason": "stop"}], "metrics": {"energy": 143.20712814712527, "energy_per_token": 1.2136197300603837, "time": 5.4816594, "time_per_token": 0.0464547406779661}}
{"outputs": [{"text": "result = {}\n\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            file_path = os.path.join(directory, file_name)\n            with open(file_path, 'rb') as f:\n                content = f.read()\n                sha256_hash = hashlib.sha256(content).hexdigest()\n                result[file_path] = sha256_hash\n\n    return result", "tokens": ["result", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "if", " re", ".", "match", "(", "pattern", ",", " file", "_", "name", "):", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "sha", "2", "5", "6", "_", "hash", " =", " hash", "lib", ".", "sha", "2", "5", "6", "(", "content", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "result", "[", "file", "_", "path", "]", " =", " sh", "a", "2", "5", "6", "_", "hash", "\n", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-2.129301071166992, -0.1797187477350235, -0.15923075377941132, -0.010006855241954327, -1.3006927967071533, -0.00080195686314255, -1.0549755096435547, -1.8806098699569702, -0.6465902328491211, -0.6430995464324951, -0.07568980753421783, -0.27813178300857544, -0.00015245705435518175, -0.005009362008422613, -1.2755313036905136e-05, -0.0015731590101495385, -0.00423392141237855, -0.0018849477637559175, -0.018783902749419212, -0.017335793003439903, -0.8346953392028809, -0.24804586172103882, -8.380061626667157e-05, -0.6676104068756104, -0.000341476290486753, -0.004475220572203398, -0.0015831567579880357, -0.012315184809267521, -8.5588610090781e-05, -0.00010775939153973013, -0.13969402015209198, -0.019013529643416405, -0.0083191292360425, -1.1829288005828857, -0.029309792444109917, -0.012041496112942696, -0.0009298768127337098, -0.032577384263277054, -0.0004033228906337172, -2.2053474822314456e-05, -0.0038757221773266792, -0.0009995469590649009, -0.00010227633902104571, -0.0023180777207016945, -0.00017105070583056659, -0.0013847296359017491, -2.9802276912960224e-06, -0.00015066919149830937, -0.0003321811091154814, -0.0016930069541558623, -0.08570734411478043, -0.44004765152931213, -0.0008995062671601772, -0.000364713923772797, -0.0006082591717131436, -3.433168603805825e-05, -0.00023648326168768108, -0.0012942517641931772, -0.3027317225933075, -0.007229714188724756, -0.0018362818518653512, -0.00030763185350224376, -0.8563796877861023, -0.03171586990356445, -0.002148583298549056, -0.0024496091064065695, -1.212838053703308, -0.033522892743349075, -0.05577246844768524, -1.8000440832111053e-05, -2.884823152271565e-05, -0.001689555705524981, -0.006552519742399454, -0.19271402060985565, -1.7064645290374756, -0.05935239791870117, -0.0003511289251036942, -9.60780744208023e-05, -0.9638310074806213, -0.0621170736849308, -0.0013724679592996836, -0.03256676718592644, -0.00014423283573705703, -2.5987286790041253e-05, -0.0014829363208264112, -0.000993354362435639, -2.3841830625315197e-06, -3.576278118089249e-07, -0.0017766657983884215, -0.006440478377044201, -0.0005787128466181457, -0.0038523285184055567, -0.031426992267370224, -1.728519782773219e-05, -0.00028796817059628665, -0.00019822540343739092, -0.005822009406983852, -0.060966651886701584, -0.05567291006445885, -0.010960375890135765, -0.008874853141605854, -8.106198947643861e-06, -0.2705993056297302, -0.0012678211787715554, -4.9232225137529895e-05, -0.030368143692612648, -9.775113539944869e-06, -8.106198947643861e-06, -5.960446742392378e-06, -0.0005441615357995033, -6.41325386823155e-05, -1.883488948806189e-05, -0.00528569333255291, -0.39698487520217896, -0.005520930048078299, -0.02177894487977028, -0.0035683547612279654, -0.3060322701931, -0.009499703533947468, -0.8706334829330444], "finish_reason": "stop"}], "metrics": {"energy": 159.462715511322, "energy_per_token": 1.32885596259435, "time": 5.2686706, "time_per_token": 0.043905588333333335}}
