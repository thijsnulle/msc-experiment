{"outputs": [{"text": "matches = []\n    extensions = extensions if extensions else ['*']\n    for extension in extensions:\n        for f in glob.glob(os.path.join(directory, f\"**/*{extension}\"), recursive=True):\n            if re.search(pattern, Path(f).read_text().casefold()):\n                matches.append(Path(f))\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "extensions", " =", " extensions", " if", " extensions", " else", " ['", "*", "']", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "for", " f", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "\"", "**", "/*", "{", "extension", "}\"", ")", ",", " recursive", "=", "True", "):", "\n", "            ", "if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "f", ")", ".", "read", "_", "text", "()", ".", "case", "fold", "()", "):", "\n", "                ", "matches", ".", "append", "(", "Path", "(", "f", "))", "\n", "    ", "return", " matches", "\n", "\n", "#"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -3.2130062580108643, -0.1706428825855255, -1.046822190284729, -1.7437742948532104, -0.3836033046245575, -0.283194363117218, -0.4564909040927887, -0.059980180114507675, -0.2870212495326996, -0.010513750836253166, -0.24249006807804108, -0.46406289935112, -0.9340091943740845, -0.007874398492276669, -0.01018434576690197, -0.005412211176007986, -0.0022261380217969418, -0.003943050280213356, -0.8781009316444397, -2.6794118881225586, -0.26357465982437134, -0.16874368488788605, -0.00044705410255119205, -0.46736571192741394, -0.006857314147055149, -0.402739942073822, -2.4437606043647975e-05, -8.49926145747304e-05, -0.001416275859810412, -0.0009490515221841633, -0.0015567338559776545, -0.014423397369682789, -0.001640999224036932, -0.7539046406745911, -1.7104380130767822, -1.8123959302902222, -0.1673489362001419, -1.091054081916809, -0.035827893763780594, -0.0156425628811121, -0.05093449354171753, -0.0009112972766160965, -0.047570034861564636, -0.009951265528798103, -0.013604306615889072, -0.007034416776150465, -0.00800082553178072, -0.002937052631750703, -0.6469458341598511, -0.5739368200302124, -4.434487345861271e-05, -0.04491661116480827, -0.0023511406034231186, -0.0368158333003521, -0.02366383746266365, -0.38994544744491577, -0.000895933189895004, -0.002542598405852914, -0.002105521271005273, -0.0007285801111720502, -0.03222861886024475, -1.2278481335670222e-05, -0.0028152139857411385, -0.20261217653751373, -2.9358513355255127, -1.524430274963379, -4.303362584323622e-05, -0.039768658578395844, -0.19122403860092163, -0.020592467859387398, -0.0010411086259409785, -0.009403579868376255, -0.004717292729765177, -0.0006572232232429087, -0.0010593285551294684, -0.9489157199859619, -0.0024497280828654766, -0.004554375074803829, -0.5469313859939575, -0.0018441352294757962, -0.16633619368076324, -0.03493567928671837, -0.023122096434235573, -0.6110945343971252, -0.01357478927820921, -2.861128807067871], "finish_reason": "stop"}], "metrics": {"energy": 105.95567184829709, "energy_per_token": 1.164348042288979, "time": 3.8050787, "time_per_token": 0.04181405164835165}}
{"outputs": [{"text": "file_names = glob.glob(os.path.join(directory, extensions))\n    matches = []\n    for file_name in file_names:\n        with open(file_name) as f:\n            contents = f.read()\n        if re.search(pattern, contents, flags=re.IGNORECASE) is not None:\n            matches.append(Path(file_name))\n    return matches", "tokens": ["file", "_", "names", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " extensions", "))", "\n", "    ", "matches", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "        ", "with", " open", "(", "file", "_", "name", ")", " as", " f", ":", "\n", "            ", "contents", " =", " f", ".", "read", "()", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " contents", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", ")", " is", " not", " None", ":", "\n", "            ", "matches", ".", "append", "(", "Path", "(", "file", "_", "name", "))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-3.4612741470336914, -0.11643192917108536, -3.1411614418029785, -0.05685150995850563, -0.8906797170639038, -0.0008133916999213398, -0.04712206870317459, -0.010938090272247791, -0.4467203617095947, -5.209310256759636e-05, -0.0002012050390476361, -0.002485878299921751, -0.001046705641783774, -0.0021327624563127756, -0.030023004859685898, -0.001259249052964151, -1.9090700149536133, -0.2811964452266693, -0.00871024839580059, -0.0772794708609581, -0.7165961861610413, -0.020398711785674095, -0.26038533449172974, -0.001532214693725109, -0.1422496736049652, -0.1282982975244522, -0.4485463500022888, -0.1578846573829651, -0.05169234052300453, -0.0011620919685810804, -0.003309964668005705, -1.0728830375228426e-06, -4.005352093372494e-05, -0.000526289688423276, -0.0012957995058968663, -0.004016666207462549, -0.4782056510448456, -0.0074418941512703896, -0.0006165986997075379, -0.016941586509346962, -9.60780744208023e-05, -0.0006423317245207727, -1.5214970111846924, -0.0003108495147898793, -0.0970783531665802, -0.013312973082065582, -0.0006771179032512009, -0.001829380402341485, -1.40097975730896, -0.0020130861084908247, -0.015743955969810486, -2.825220326485578e-05, -8.225102646974847e-05, -0.008687912486493587, -0.14067071676254272, -0.9445318579673767, -0.10756473243236542, -0.08061918616294861, -4.351044481154531e-05, -0.03844895586371422, -0.002080777660012245, -0.011311331763863564, -0.016623906791210175, -0.00697653042152524, -0.033081620931625366, -2.5121002197265625, -0.008583437651395798, -0.006982094142585993, -3.9934315282152966e-05, -0.11803328990936279, -4.8397800128441304e-05, -6.329813186312094e-05, -0.00015722469834145159, -2.7629024982452393, -0.059632085263729095, -0.002785970689728856, -6.103329360485077e-05, -0.0013773487880825996, -0.0058422754518687725, -0.001570302527397871, -0.013794681057333946, -0.0013303249143064022, -0.0005042473785579205, -0.0007188120507635176, -0.5599231123924255, -0.004072943702340126, -0.029581343755126, -0.00021610308613162488, -0.00022837892174720764, -0.20462657511234283, -0.001527215470559895, -0.09226442873477936, -0.022827347740530968, -0.013001903891563416, -0.5912922620773315, -0.015105030499398708, -0.684927225112915], "finish_reason": "stop"}], "metrics": {"energy": 115.22500621509552, "energy_per_token": 1.187886662011294, "time": 3.9949012, "time_per_token": 0.04118454845360825}}
{"outputs": [{"text": "if not directory:\n        directory = os.getcwd()\n\n    matches = []\n    for ext in extensions:\n        matches += glob.glob(os.path.join(directory, ext))\n\n    return matches", "tokens": ["if", " not", " directory", ":", "\n", "        ", "directory", " =", " os", ".", "get", "c", "wd", "()", "\n", "\n", "    ", "matches", " =", " []", "\n", "    ", "for", " ext", " in", " extensions", ":", "\n", "        ", "matches", " +=", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " ext", "))", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-2.687485694885254, -0.6124439239501953, -1.5136536359786987, -0.5216429829597473, -0.022741936147212982, -0.0018992258701473475, -1.0244759321212769, -0.005711663514375687, -0.8355850577354431, -0.000262106885202229, -0.23368105292320251, -0.003734045661985874, -2.50339189733495e-06, -0.000916537712328136, -0.01040746085345745, -1.0483002662658691, -0.0010417040903121233, -1.5093039274215698, -0.019437668845057487, -0.3379557728767395, -0.0023506649304181337, -0.2812017798423767, -0.33711573481559753, -1.5984981060028076, -0.009604672901332378, -0.01090295147150755, -0.018546734005212784, -0.003769318340346217, -0.0035276107955724, -1.5885863304138184, -0.8639313578605652, -0.17810194194316864, -0.00041476229671388865, -0.05954930931329727, -0.0045393044129014015, -0.4625326097011566, -0.00018976318824570626, -0.0001461399078834802, -0.0017030035378411412, -0.0018886362668126822, -0.0008830699953250587, -0.009510330855846405, -0.001353777595795691, -0.8894477486610413, -0.1275755763053894, -0.002731047570705414, -0.3645245134830475, -0.001984533155336976, -1.5045881271362305, -1.3637139797210693, -0.3531627058982849, -0.011835472658276558, -0.7198778390884399], "finish_reason": "stop"}], "metrics": {"energy": 72.22512719726562, "energy_per_token": 1.3627382490050117, "time": 2.114707, "time_per_token": 0.0399001320754717}}
{"outputs": [{"text": "matches = []\n    for extension in extensions:\n        files = glob.glob(os.path.join(directory, extension))\n        for f in files:\n            with open(f, 'r') as g:\n                text = g.read()\n                if re.search(pattern, text, re.IGNORECASE):\n                    matches.append(Path(f))\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " extension", "))", "\n", "        ", "for", " f", " in", " files", ":", "\n", "            ", "with", " open", "(", "f", ",", " '", "r", "')", " as", " g", ":", "\n", "                ", "text", " =", " g", ".", "read", "()", "\n", "                ", "if", " re", ".", "search", "(", "pattern", ",", " text", ",", " re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "                ", "    ", "matches", ".", "append", "(", "Path", "(", "f", "))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3152105808258057, -0.005684282630681992, -0.005298262927681208, -0.006355550140142441, -0.003712667850777507, -0.003756254445761442, -2.241098403930664, -0.04812516272068024, -0.11422587186098099, -0.0007674132939428091, -0.07844016700983047, -0.004558765795081854, -0.3631262183189392, -2.7417760065873154e-05, -0.00013481661153491586, -0.0010035961167886853, -0.0008335214806720614, -0.0010904086520895362, -0.012292458675801754, -0.000814582861494273, -0.5506366491317749, -0.10003865510225296, -0.0033767367713153362, -0.01242974866181612, -0.2665052115917206, -2.1604270935058594, -0.03677596151828766, -0.005039370618760586, -0.00024089295766316354, -0.0017178792040795088, -0.0014098476385697722, -0.47320353984832764, -0.014323163777589798, -0.00032634177478030324, -0.009653198532760143, -0.27576014399528503, -0.17157797515392303, -0.15478885173797607, -0.36868131160736084, -0.0006706849089823663, -2.7303335666656494, -0.005635327193886042, -0.001833664020523429, -0.0011311330599710345, -2.216128349304199, -0.009931082837283611, -0.045048244297504425, -3.9219088648678735e-05, -0.00011574551899684593, -0.010650224052369595, -0.19599595665931702, -0.3765544593334198, -0.3897362947463989, -0.1153741255402565, -3.6477376852417365e-05, -0.04503798484802246, -0.0027197536546736956, -0.021383335813879967, -0.027450019493699074, -0.010207591578364372, -0.032700613141059875, -0.11123864352703094, -4.029192859889008e-05, -0.376411110162735, -3.361645576660521e-05, -7.962863310240209e-05, -9.905801562126726e-05, -0.06843682378530502, -0.01069999672472477, -0.0002836778585333377, -0.0016282646683976054, -0.015649251639842987, -0.0026502031832933426, -0.0010370597010478377, -0.0011360150529071689, -0.28006401658058167, -0.002178321359679103, -0.024724571034312248, -0.22021108865737915, -0.0017615529941394925, -0.172339528799057, -0.020780347287654877, -0.01412948127835989, -0.4798072576522827, -0.009722381830215454, -0.6866963505744934], "finish_reason": "stop"}], "metrics": {"energy": 96.16952995014192, "energy_per_token": 1.0453209777189338, "time": 3.8031192, "time_per_token": 0.04133825217391304}}
{"outputs": [{"text": "matches = glob.glob(directory + extensions, recursive=True)\n    matches = [match for match in matches if Path(match).is_file()]\n    matches = [match for match in matches if re.search(pattern, Path(match).read_text(encoding='utf-8').casefold())]\n    return matches", "tokens": ["matches", " =", " glob", ".", "glob", "(", "directory", " +", " extensions", ",", " recursive", "=", "True", ")", "\n", "    ", "matches", " =", " [", "match", " for", " match", " in", " matches", " if", " Path", "(", "match", ")", ".", "is", "_", "file", "()", "]", "\n", "    ", "matches", " =", " [", "match", " for", " match", " in", " matches", " if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "match", ")", ".", "read", "_", "text", "(", "encoding", "='", "utf", "-", "8", "')", ".", "case", "fold", "()", ")]", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -2.1299314498901367, -0.001302942750044167, -0.0936448723077774, -0.00454713637009263, -2.617525815963745, -0.08182621002197266, -2.6859631538391113, -0.150208979845047, -0.1044803038239479, -0.02778758481144905, -0.08573086559772491, -0.013426481746137142, -0.010072828270494938, -0.08293040841817856, -0.4744012653827667, -0.08254487812519073, -0.3225198984146118, -1.9342900514602661, -0.06577687710523605, -0.023142248392105103, -0.0005401106318458915, -0.008934875018894672, -0.03278909996151924, -2.761810779571533, -0.002268124371767044, -0.017932197079062462, -0.0011835244949907064, -0.0015424508601427078, -0.7086144089698792, -0.00037555795279331505, -0.001615291927009821, -0.0021076626144349575, -0.047815535217523575, -0.011198642663657665, -0.10126999020576477, -0.25954341888427734, -0.023311715573072433, -0.09519575536251068, -0.2799181640148163, -0.08184565603733063, -0.008806556463241577, -0.00028868322260677814, -0.0014991246862336993, -0.012088960967957973, -0.4664403200149536, -0.00010275312524754554, -0.05428338050842285, -0.004836052190512419, -0.04969535768032074, -0.041307754814624786, -0.22861304879188538, -0.0006470970110967755, -0.003539846045896411, -0.0015072186943143606, -0.0013625870924443007, -0.026089327409863472, -3.838465272565372e-05, -0.0031294680666178465, -2.149787664413452, -0.03466580808162689, -0.1035749763250351, -0.06796224415302277, -0.12665805220603943, -0.001496029901318252, -0.3420431613922119, -2.7777938842773438, -1.9316898584365845, -5.781483559985645e-05, -0.04214104637503624, -0.06764610856771469, -0.0033930132631212473, -0.1456465721130371, -0.1793576329946518, -0.06374096870422363, -1.1669877767562866, -1.1920922133867862e-06, -8.344646857949556e-07, -0.00018976318824570626, -9.560128091834486e-05, -0.08968637883663177], "finish_reason": "stop"}], "metrics": {"energy": 96.75221627235413, "energy_per_token": 1.1799050764921235, "time": 3.365573, "time_per_token": 0.041043573170731706}}
{"outputs": [{"text": "matches = []\n    for path in glob.glob(f'{directory}/**/*{extensions}', recursive=True):\n        if re.search(pattern, path, re.IGNORECASE):\n            matches.append(path)\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "for", " path", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "}/", "**", "/*", "{", "extensions", "}'", ",", " recursive", "=", "True", "):", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " path", ",", " re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "            ", "matches", ".", "append", "(", "path", ")", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -3.2119925022125244, -0.10944557934999466, -1.0624545812606812, -0.0006579380133189261, -0.6898736357688904, -0.004932141397148371, -1.981311321258545, -0.6660439968109131, -0.02274741232395172, -1.639927864074707, -0.009187091141939163, -0.5820541381835938, -3.1974899768829346, -0.13345007598400116, -0.1435832977294922, -0.0008685392094776034, -0.004183707758784294, -0.010843873955309391, -0.002907218411564827, -0.0022819212172180414, -0.008162591606378555, -0.004830476362258196, -0.8703747987747192, -0.33736851811408997, -5.364274329622276e-05, -0.03956747055053711, -0.0038421161007136106, -0.04316011071205139, -0.029068276286125183, -0.9865668416023254, -0.2565478980541229, -0.09960409998893738, -6.949660019017756e-05, -0.19893686473369598, -4.911301948595792e-05, -5.721882189391181e-05, -0.00010632903286023065, -0.0989447832107544, -0.00923658162355423, -0.0012850845232605934, -0.01814563013613224, -0.002164047211408615, -0.0004323977918829769, -0.0005253365379758179, -1.4842859506607056, -0.024692008271813393, -0.0014976962702348828, -0.11138059198856354, -0.01814843900501728, -0.020920097827911377, -0.2237999439239502, -0.00701890978962183, -1.2165573835372925], "finish_reason": "stop"}], "metrics": {"energy": 51.996764717102046, "energy_per_token": 0.8813010969000347, "time": 2.326923, "time_per_token": 0.03943937288135593}}
{"outputs": [{"text": "matches = []\n    for extension in extensions:\n        matches += glob.glob(\n            os.path.join(directory, '**', '*.{}'.format(extension)),\n            case_sensitive=False\n        )\n\n    return [Path(match) for match in matches if re.search(pattern, match, flags=re.IGNORECASE)]", "tokens": ["matches", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "matches", " +=", " glob", ".", "glob", "(", "\n", "            ", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "**", "'", ",", " '", "*", ".", "{}", "'", ".", "format", "(", "extension", "))", ",", "\n", "            ", "case", "_", "sensitive", "=", "False", "\n", "        ", ")", "\n", "\n", "    ", "return", " [", "Path", "(", "match", ")", " for", " match", " in", " matches", " if", " re", ".", "search", "(", "pattern", ",", " match", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", ")]", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3152105808258057, -0.005684282630681992, -0.005298262927681208, -0.006355550140142441, -0.003712667850777507, -0.003756254445761442, -1.9405213594436646, -0.7237205505371094, -0.18101708590984344, -0.0005595310358330607, -0.062138695269823074, -0.004350839648395777, -2.288177251815796, -0.010311070829629898, -0.48027467727661133, -6.472854875028133e-05, -0.0002942844294011593, -0.003111404599621892, -0.007259183097630739, -0.002157623879611492, -0.10227814316749573, -0.0026805205270648003, -1.71860933303833, -0.5407713055610657, -0.22308842837810516, -0.06717360764741898, -1.2607038021087646, -0.037569984793663025, -0.44472232460975647, -1.4368457794189453, -0.002818899229168892, -0.00045813556062057614, -0.0002456601650919765, -0.007860206067562103, -0.0313858687877655, -0.3174056112766266, -0.018295463174581528, -0.2922775149345398, -0.02095663547515869, -1.3332133293151855, -0.25996533036231995, -0.40455567836761475, -0.012834328226745129, -0.028938114643096924, -1.3831138610839844, -0.010706011205911636, -0.00047255316167138517, -0.0017124050064012408, -1.399369716644287, -0.00728995306417346, -0.9839797616004944, -0.5304178595542908, -1.0766972303390503, -0.010130771435797215, -0.9949368834495544, -0.011784108355641365, -0.19149240851402283, -0.002650440903380513, -0.0002967870968859643, -0.010011340491473675, -0.05929139256477356, -0.11544178426265717, -0.00016342257731594145, -0.04997378960251808, -0.0021472747903317213, -0.06279876828193665, -0.008929794654250145, -0.8079472184181213, -0.7709697484970093, -2.0049326419830322, -0.004910196177661419, -0.008538524620234966, -0.00015054999676067382, -0.2897510826587677, -2.5152843591058627e-05, -0.00010835537250386551, -0.00016866691294126213, -0.022043101489543915, -0.9503968358039856, -0.007300603669136763, -1.0375590324401855], "finish_reason": "stop"}], "metrics": {"energy": 84.50432005119322, "energy_per_token": 0.9713140235769335, "time": 3.5873997, "time_per_token": 0.04123447931034483}}
{"outputs": [{"text": "results = []\n    for entry in glob.glob(os.path.join(directory, '**', extensions), recursive=True):\n        if not Path(entry).is_file():\n            continue\n        with open(entry, 'r', encoding='utf-8') as f:\n            text = f.read()\n            matches = re.findall(pattern, text, flags=re.I)\n            if matches:\n                results.append(entry)\n    return results", "tokens": ["results", " =", " []", "\n", "    ", "for", " entry", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "**", "'", ",", " extensions", ")", ",", " recursive", "=", "True", "):", "\n", "        ", "if", " not", " Path", "(", "entry", ")", ".", "is", "_", "file", "():", "\n", "            ", "continue", "\n", "        ", "with", " open", "(", "entry", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "text", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "pattern", ",", " text", ",", " flags", "=", "re", ".", "I", ")", "\n", "            ", "if", " matches", ":", "\n", "                ", "results", ".", "append", "(", "entry", ")", "\n", "    ", "return", " results", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.745572090148926, -0.028334451839327812, -0.1108381599187851, -0.0021877181716263294, -0.1646658331155777, -0.41381603479385376, -3.625922203063965, -0.015489280223846436, -1.5970966815948486, -0.00045885046711191535, -0.9030815958976746, -0.004643609281629324, -0.31406474113464355, -2.90866428258596e-05, -0.00023123928986024112, -0.0014585343888029456, -0.001544950413517654, -0.0029507214203476906, -0.018946155905723572, -0.00101062236353755, -0.8318794369697571, -0.4287509024143219, -0.2359292060136795, -0.03103969246149063, -1.9266078472137451, -0.1285659521818161, -0.0008613928221166134, -0.009152835234999657, -0.013893909752368927, -0.005541202612221241, -0.004917787853628397, -0.007591919973492622, -0.004238076042383909, -0.6305187940597534, -2.048146963119507, -2.3515615463256836, -0.003808983601629734, -0.003049249993637204, -0.0007924277451820672, -0.0013661584816873074, -0.17269174754619598, -6.472854875028133e-05, -0.08594595640897751, -0.04862275719642639, -0.03652406111359596, -0.001279012649320066, -0.03386809304356575, -0.017460912466049194, -0.0886138454079628, -0.640851616859436, -0.004790733102709055, -0.00043084874050691724, -0.012139486148953438, -0.10601416230201721, -0.25591111183166504, -0.21226246654987335, -0.8528509140014648, -0.0003890234511345625, -0.05110316723585129, -0.07937050610780716, -0.06502393633127213, -0.16659174859523773, -0.0016301688738167286, -0.05631686747074127, -0.0003407612966839224, -0.17835231125354767, -0.024718524888157845, -0.0018265245016664267, -0.0007291757501661777, -1.9104633331298828, -0.005139591172337532, -0.017672337591648102, -3.480850500636734e-05, -5.7338023907504976e-05, -0.007400243077427149, -0.2465040385723114, -0.5931280851364136, -3.2293827533721924, -0.00224576354958117, -0.01919691264629364, -2.658331868587993e-05, -0.03547002002596855, -0.07191919535398483, -0.0048933508805930614, -0.04421337693929672, -0.013971617445349693, -0.004763208329677582, -0.05032333731651306, -2.0572431087493896, -0.0044931406155228615, -0.0037539980839937925, -0.00023183519078884274, -1.7526122331619263, -0.023498155176639557, -0.00997970998287201, -0.2568238377571106, -0.03083905018866062, -0.3965568542480469, -0.01116929017007351, -0.006423659157007933, -0.00038747431244701147, -0.021949458867311478, -0.005280713085085154, -0.009274376556277275, -0.0016928878612816334, -0.3789648413658142, -0.003744971938431263, -0.0010593285551294684, -0.12906543910503387, -0.014145583845674992, -0.01940259337425232, -1.118431806564331, -1.7881377516459906e-06, -1.0728830375228426e-06, -1.5139465176616795e-05, -8.868777513271198e-05, -0.10125286132097244], "finish_reason": "stop"}], "metrics": {"energy": 140.11311655616757, "energy_per_token": 1.197548004753569, "time": 5.0501904, "time_per_token": 0.04316402051282051}}
{"outputs": [{"text": "matches = []\n    for pattern in extensions:\n        matches.extend(\n            glob.glob(\n                os.path.join(\n                    directory,\n                    f\"*{pattern}\"),\n                recursive=True,\n            ),\n        )\n    matches = [x for x in matches if re.search(pattern, os.path.basename(x), re.IGNORECASE)]\n    return [Path(x).absolute() for x in matches]", "tokens": ["matches", " =", " []", "\n", "    ", "for", " pattern", " in", " extensions", ":", "\n", "        ", "matches", ".", "extend", "(", "\n", "            ", "glob", ".", "glob", "(", "\n", "                ", "os", ".", "path", ".", "join", "(", "\n", "                ", "    ", "directory", ",", "\n", "                ", "    ", "f", "\"", "*{", "pattern", "}\"", ")", ",", "\n", "                ", "recurs", "ive", "=", "True", ",", "\n", "            ", ")", ",", "\n", "        ", ")", "\n", "    ", "matches", " =", " [", "x", " for", " x", " in", " matches", " if", " re", ".", "search", "(", "pattern", ",", " os", ".", "path", ".", "bas", "ename", "(", "x", ")", ",", " re", ".", "IGN", "ORE", "C", "ASE", ")]", "\n", "    ", "return", " [", "Path", "(", "x", ")", ".", "absolute", "()", " for", " x", " in", " matches", "]", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -3.908449411392212, -0.519887387752533, -0.11325673758983612, -0.013451652601361275, -0.005152755416929722, -0.008927904069423676, -1.2668225765228271, -0.5064834356307983, -0.013573025353252888, -0.04261055588722229, -2.4161031246185303, -0.01855960488319397, -0.6666688919067383, -0.0031197231728583574, -0.0943775475025177, -0.005086694844067097, -1.2512729167938232, -0.0011850723531097174, -0.34958481788635254, -0.00013934595335740596, -0.00037293630884960294, -0.0028949754778295755, -0.01250933576375246, -0.0019606193527579308, -0.8436274528503418, -0.00011145447206217796, -0.00249610492028296, -0.06042971834540367, -0.007492773234844208, -0.3644077777862549, -0.00015984688070602715, -0.001374729792587459, -2.2862744331359863, -0.6091966032981873, -1.0072078704833984, -0.19260655343532562, -0.07195913046598434, -2.398693084716797, -0.24133586883544922, -0.04787042364478111, -0.06088421121239662, -0.5774662494659424, -0.004114852286875248, -0.015434111468493938, -0.19267213344573975, -1.1903150081634521, -0.06648797541856766, -0.24936988949775696, -0.025305312126874924, -1.8345781564712524, -0.0037683681584894657, -0.0062532005831599236, -0.0003003622987307608, -0.002236367203295231, -0.2865389287471771, -1.1946649551391602, -0.07873550057411194, -0.35589292645454407, -3.148493766784668, -0.04892907291650772, -0.01926157996058464, -0.0005296258023008704, -0.03351781889796257, -0.008484271354973316, -0.9948385953903198, -0.00012265883560758084, -0.07986193150281906, -0.0041178204119205475, -0.08520082384347916, -0.05460083484649658, -2.0045886039733887, -0.00035089056473225355, -0.01577669568359852, -0.0007522851810790598, -0.035819727927446365, -6.437280717364047e-06, -0.00021741411183029413, -0.03338846564292908, -0.4608634114265442, -0.168972447514534, -0.13305504620075226, -0.00012706902634818107, -0.26488131284713745, -0.00015364897262770683, -7.366862701019272e-05, -7.223821739898995e-05, -0.06021490693092346, -0.006356497760862112, -0.10735081881284714, -0.3021523058414459, -2.4650816917419434, -0.32509374618530273, -0.008244055323302746, -0.2844404876232147, -0.0033629550598561764, -0.7973609566688538, -0.8523863554000854, -0.001106127048842609, -0.10070404410362244, -0.0001248043408850208, -0.0001971527235582471, -0.0069641005247831345, -0.19670985639095306, -0.23246042430400848, -0.01278171967715025, -0.9111968874931335], "finish_reason": "stop"}], "metrics": {"energy": 159.24177591514584, "energy_per_token": 1.421801570670945, "time": 4.8504295, "time_per_token": 0.04330740625}}
{"outputs": [{"text": "paths = []\n    for ext in extensions:\n        for match in glob.iglob(f\"{directory}/*.{ext}\"):\n            with open(match, encoding='utf-8') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    paths.append(Path(match))\n    return paths", "tokens": ["paths", " =", " []", "\n", "    ", "for", " ext", " in", " extensions", ":", "\n", "        ", "for", " match", " in", " glob", ".", "ig", "lob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "{", "ext", "}\"", "):", "\n", "            ", "with", " open", "(", "match", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "if", " re", ".", "search", "(", "pattern", ",", " f", ".", "read", "()", ",", " re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "                ", "    ", "paths", ".", "append", "(", "Path", "(", "match", "))", "\n", "    ", "return", " paths", "\n", "\n", "if"], "logprobs": [-3.4924192428588867, -0.04510852321982384, -0.9760334491729736, -0.003641167189925909, -0.14243930578231812, -0.33891159296035767, -1.142180323600769, -0.007142249494791031, -0.006901592947542667, -0.007127809338271618, -0.002792033366858959, -0.003983896225690842, -1.6600061655044556, -2.9352102279663086, -0.04401307925581932, -0.09586317837238312, -0.00047434045700356364, -0.9267274737358093, -0.00024577934527769685, -0.011340444907546043, -1.701422929763794, -0.7005205750465393, -0.05607231706380844, -0.020821211859583855, -0.9684012532234192, -0.16531646251678467, -0.5060470700263977, -0.020680982619524002, -0.00283316383138299, -0.035777170211076736, -0.4088476300239563, -0.005863607861101627, -0.003367945086210966, -0.7540879249572754, -0.02326955646276474, -0.0004457433824427426, -0.029262211173772812, -0.39681005477905273, -1.9254001379013062, -0.28492751717567444, -0.0755118578672409, -0.20790475606918335, -0.0029309908859431744, -0.08654545992612839, -0.0005732323625124991, -0.20332011580467224, -0.04824819415807724, -0.0015712546883150935, -0.0017904693959280849, -1.008431077003479, -0.15845416486263275, -4.9232225137529895e-05, -0.04697990417480469, -0.0014271085383370519, -0.06016922369599342, -0.030721256509423256, -0.013268624432384968, -0.003424139926210046, -0.00027021096320822835, -0.007986280135810375, -0.025168614462018013, -0.14742738008499146, -1.7046782886609435e-05, -0.4985658824443817, -2.098061486321967e-05, -2.8729025871143676e-05, -8.594620157964528e-05, -0.07082975655794144, -0.01248131599277258, -0.000164018536452204, -0.001796657219529152, -0.014478974975645542, -0.006033777259290218, -0.00045158201828598976, -0.00047231485950760543, -0.40818992257118225, -0.0019664489664137363, -0.017159216105937958, -0.3354666829109192, -0.0021553635597229004, -0.21245670318603516, -0.016498683020472527, -0.048314418643713, -0.8151770234107971, -0.01064302958548069, -0.8214114904403687], "finish_reason": "stop"}], "metrics": {"energy": 120.42813401031496, "energy_per_token": 1.4003271396548251, "time": 3.5694928, "time_per_token": 0.04150573023255814}}
{"outputs": [{"text": "# Path class is available in Python 3.5+.\n    pathlib_class = Path\n    glob_class = glob\n    re_module = re\n    matches = []\n    for ext in extensions:\n        ext_pat = f'.{ext}'\n        for path in glob_class.glob(directory + f'/**/*{ext_pat}'):\n            with open(path, 'r') as f:\n                if re_module.search(pattern, f.read(), re.I):\n                    matches.append(pathlib_class(path).resolve())\n    return matches", "tokens": ["#", " Path", " class", " is", " available", " in", " Python", " ", "3", ".", "5", "+", ".", "\n", "    ", "path", "lib", "_", "class", " =", " Path", "\n", "    ", "glob", "_", "class", " =", " glob", "\n", "    ", "re", "_", "module", " =", " re", "\n", "    ", "matches", " =", " []", "\n", "    ", "for", " ext", " in", " extensions", ":", "\n", "        ", "ext", "_", "pat", " =", " f", "'", ".", "{", "ext", "}'", "\n", "        ", "for", " path", " in", " glob", "_", "class", ".", "glob", "(", "directory", " +", " f", "'", "/**", "/*", "{", "ext", "_", "pat", "}", "')", ":", "\n", "            ", "with", " open", "(", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "if", " re", "_", "module", ".", "search", "(", "pattern", ",", " f", ".", "read", "()", ",", " re", ".", "I", "):", "\n", "                ", "    ", "matches", ".", "append", "(", "path", "lib", "_", "class", "(", "path", ")", ".", "resolve", "())", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-2.8015050888061523, -4.964792251586914, -3.757178783416748, -1.8349106311798096, -4.232884407043457, -0.9544658660888672, -0.8352998495101929, -0.1830553561449051, -0.0067804730497300625, -0.00656791590154171, -2.3969385623931885, -0.6892909407615662, -1.7774299383163452, -0.4530321955680847, -0.010370534844696522, -2.432086944580078, -3.136669158935547, -0.4949817955493927, -3.531669855117798, -0.14537715911865234, -0.4043205976486206, -0.5788426995277405, -0.29125913977622986, -2.564316511154175, -0.03797496482729912, -1.7169171571731567, -0.007851808331906796, -0.021807869896292686, -0.2333238124847412, -0.38402682542800903, -0.6868064999580383, -0.008224783465266228, -1.7218683958053589, -0.004706020932644606, -0.001259368029423058, -0.005775905214250088, -1.0399842262268066, -1.4491956233978271, -0.02117806114256382, -0.24691984057426453, -0.0031568000558763742, -0.4649501442909241, -0.552513062953949, -1.8447802066802979, -0.013646288774907589, -0.009650836698710918, -0.007766881491988897, -0.004902129527181387, -0.0031863891053944826, -2.8427534103393555, -0.8299864530563354, -3.349599599838257, -0.014649094082415104, -1.7411315441131592, -0.4019181430339813, -2.1035778522491455, -1.0240139961242676, -0.036448776721954346, -0.25105199217796326, -0.14040637016296387, -0.02819863334298134, -1.2294178009033203, -2.0191426277160645, -0.05339867249131203, -0.44408267736434937, -0.045672766864299774, -0.00027497802511788905, -0.0003067976504098624, -0.18385712802410126, -0.008846377022564411, -2.9998154640197754, -0.08424587547779083, -2.1186742782592773, -0.08110098540782928, -0.5780931115150452, -0.07732956856489182, -0.22142393887043, -0.006262322422116995, -0.015511111356317997, -3.015949550899677e-05, -1.4209988117218018, -0.03573840856552124, -0.00025900822947733104, -0.011082522571086884, -0.0021013577934354544, -0.9944174885749817, -0.22424538433551788, -0.0005490464391186833, -0.012757710181176662, -0.28660961985588074, -0.19802966713905334, -0.17133012413978577, -0.4003090560436249, -0.000634111522231251, -0.10664387047290802, -0.032832130789756775, -0.001492934999987483, -0.0006791430641897023, -1.3033019304275513, -0.04853815957903862, -0.005598223768174648, -7.939023635117337e-05, -0.00011467275908216834, -0.07097090035676956, -0.0013804440386593342, -0.1698458343744278, -0.14318419992923737, -0.014384739100933075, -0.005701233167201281, -0.00044145373976789415, -0.02532472275197506, -0.09515857696533203, -0.09705054759979248, -0.2685512602329254, -1.0776690244674683, -0.352120041847229, -0.03256261348724365, -0.00015078838623594493, -0.0011806668480858207, -0.03585423156619072, -0.0054759974591434, -0.0005732323625124991, -0.0006636562757194042, -0.05722804367542267, -0.029511205852031708, -0.00027855331427417696, -1.0609570381348021e-05, -0.057366956025362015, -0.008506374433636665, -2.088055372238159, -0.001962522976100445, -0.35893914103507996, -0.044404856860637665, -0.007536550052464008, -0.15450464189052582, -0.05725596100091934, -0.030690737068653107, -0.45950397849082947, -0.0108446991071105, -0.6660877466201782], "finish_reason": "stop"}], "metrics": {"energy": 140.89037372684476, "energy_per_token": 1.0063598123346054, "time": 5.9048357, "time_per_token": 0.042177397857142855}}
{"outputs": [{"text": "matches = []\n    for ext in extensions:\n        matches += glob.glob(os.path.join(directory, f'**/*.{ext}'))\n\n    matches = [Path(path) for path in matches]\n\n    return [path for path in matches if re.search(pattern, path.read_text(), re.I) is not None]\n\n@dataclass\nclass File:\n    path: Path\n\n    def read_lines(self):\n        return self.path.read_text().splitlines()\n\n    def write_lines(self, lines):\n        return self.path.write_text('\\n'.join(lines))\n\n    def is_file(self):\n        return self.path.is_file()\n\n    def is_dir(self):\n        return self.path.is_dir()\n\n    def __str__(self):\n        return str(self.path)\n\n    def __repr__(self):\n        return repr(self.path)\n\n    def __eq__(self, other):\n        return str(self.path) == str(other", "tokens": ["matches", " =", " []", "\n", "    ", "for", " ext", " in", " extensions", ":", "\n", "        ", "matches", " +=", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'", "**", "/*", ".", "{", "ext", "}'", "))", "\n", "\n", "    ", "matches", " =", " [", "Path", "(", "path", ")", " for", " path", " in", " matches", "]", "\n", "\n", "    ", "return", " [", "path", " for", " path", " in", " matches", " if", " re", ".", "search", "(", "pattern", ",", " path", ".", "read", "_", "text", "()", ",", " re", ".", "I", ")", " is", " not", " None", "]", "\n", "\n", "@", "data", "class", "\n", "class", " File", ":", "\n", "    ", "path", ":", " Path", "\n", "\n", "    ", "def", " read", "_", "lines", "(", "self", "):", "\n", "        ", "return", " self", ".", "path", ".", "read", "_", "text", "()", ".", "split", "lines", "()", "\n", "\n", "    ", "def", " write", "_", "lines", "(", "self", ",", " lines", "):", "\n", "        ", "return", " self", ".", "path", ".", "write", "_", "text", "('", "\\", "n", "'", ".", "join", "(", "lines", "))", "\n", "\n", "    ", "def", " is", "_", "file", "(", "self", "):", "\n", "        ", "return", " self", ".", "path", ".", "is", "_", "file", "()", "\n", "\n", "    ", "def", " is", "_", "dir", "(", "self", "):", "\n", "        ", "return", " self", ".", "path", ".", "is", "_", "dir", "()", "\n", "\n", "    ", "def", " __", "str", "__(", "self", "):", "\n", "        ", "return", " str", "(", "self", ".", "path", ")", "\n", "\n", "    ", "def", " __", "re", "pr", "__(", "self", "):", "\n", "        ", "return", " re", "pr", "(", "self", ".", "path", ")", "\n", "\n", "    ", "def", " __", "eq", "__(", "self", ",", " other", "):", "\n", "        ", "return", " str", "(", "self", ".", "path", ")", " ==", " str", "(", "other"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3014109134674072, -0.008573155850172043, -0.007962627336382866, -0.00837918370962143, -0.003133508376777172, -0.003594605950638652, -1.8079322576522827, -0.8586215972900391, -0.19509509205818176, -0.0005341533687897027, -0.07239466905593872, -0.004590212367475033, -0.39121213555336, -2.8371408916427754e-05, -0.0001935771433636546, -0.0013565156841650605, -0.0018663860391825438, -0.000979420612566173, -0.013704260811209679, -0.001046348363161087, -0.7656877636909485, -0.2921789884567261, -0.7755682468414307, -0.12830699980258942, -0.24748821556568146, -0.005849860608577728, -0.003383271163329482, -0.033325742930173874, -0.026562483981251717, -0.00419166125357151, -1.4413632154464722, -0.0024966993369162083, -1.5619354248046875, -0.11400189250707626, -0.2546832263469696, -0.9317409992218018, -0.006518292706459761, -1.9852124452590942, -0.01255948655307293, -0.22213108837604523, -0.0015392372151836753, -0.0007684853626415133, -0.010924411937594414, -0.6355900764465332, -0.01154268067330122, -1.0643237829208374, -0.0003432638186495751, -1.3501896858215332, -0.6817547082901001, -0.9503894448280334, -0.05596613883972168, -0.0009217780898325145, -0.0008671099785715342, -0.0021614301949739456, -0.02911725454032421, -0.28871870040893555, -0.00013934595335740596, -0.07387576252222061, -0.0031878151930868626, -0.03522665053606033, -0.03801972419023514, -0.146133691072464, -0.0064519671723246574, -0.1255251169204712, -3.480850500636734e-05, -0.007200481370091438, -0.10630875825881958, -0.041710883378982544, -0.12966394424438477, -0.00023314618738368154, -1.2834110260009766, -2.4722506999969482, -0.10287084430456161, -0.0009195152088068426, -5.9960475482512265e-05, -0.24619784951210022, -0.19858917593955994, -0.007263088598847389, -3.6373982429504395, -3.1949663162231445, -0.37786048650741577, -0.16025497019290924, -0.003166069043800235, -2.5597612857818604, -1.7695173025131226, -0.0010319390567019582, -0.018203575164079666, -1.0800325870513916, -0.008744046092033386, -0.6798388361930847, -0.031103482469916344, -1.1543885469436646, -0.1285162717103958, -0.6869775652885437, -2.504837989807129, -0.9169595241546631, -1.8390915393829346, -0.011051162146031857, -0.0029693818651139736, -0.6509419679641724, -0.0017538178944960237, -0.0017840436194092035, -0.5352544784545898, -0.17966167628765106, -0.001524715917184949, -0.007178112398833036, -9.178694017464295e-05, -0.0031083147041499615, -0.0013368725776672363, -0.02418329007923603, -0.053211282938718796, -0.031747397035360336, -0.03718046098947525, -0.2094416469335556, -0.019528741016983986, -0.08601497858762741, -0.0024969372898340225, -0.3507978618144989, -0.10616243630647659, -1.101668119430542, -0.22185106575489044, -0.09737656265497208, -0.003041762625798583, -0.00039414744242094457, -0.004873421508818865, -0.060861218720674515, -0.31259089708328247, -0.0004078510100953281, -0.0013852057745680213, -2.0456063747406006, -0.03842383623123169, -0.0004814896092284471, -0.0021065918263047934, -7.10462118149735e-05, -0.0036247759126126766, -0.00027783826226368546, -0.001513170194812119, -0.25701209902763367, -0.003078129142522812, -0.00034588552080094814, -0.001167331007309258, -0.00014482879487331957, -0.0006379238329827785, -0.0051570250652730465, -0.008976344019174576, -0.056999143213033676, -0.12586741149425507, -0.003649243852123618, -0.5947600603103638, -0.17292502522468567, -3.6045312881469727, -0.01602988876402378, -3.471980094909668, -0.22267653048038483, -0.002256349427625537, -0.16091619431972504, -0.0012553200358524919, -0.00040642108069732785, -0.09056810289621353, -0.23610487580299377, -0.00032276666024699807, -0.0017473918851464987, -0.00023803261865396053, -0.029502177610993385, -5.602820692729438e-06, -0.00048530244384892285, -0.0027715861797332764, -0.043527111411094666, -0.0019487215904518962, -0.11087411642074585, -0.051485948264598846, -0.43695881962776184, -0.00022849810193292797, -0.45126691460609436, -0.00103265349753201, -4.95898348162882e-05, -0.0019350391812622547, -0.000947622349485755, -0.00015221867943182588, -0.0015826807357370853, -0.015605359338223934, -4.565611743601039e-05, -0.0006393534131348133, -7.009260298218578e-05, -0.000536655425094068, -0.0003303935518488288, -0.0009651293512433767, -0.000918681500479579, -0.038395386189222336, -0.0006319671520031989, -0.19652123749256134, -0.06925204396247864, -2.820425033569336, -0.568899929523468, -0.0006030171643942595, -9.023735765367746e-05, -0.02927483059465885, -0.0036551826633512974, -0.0005367745761759579, -0.0519578792154789, -0.5362977385520935, -0.00034409802174195647, -0.002481121802702546, -0.0003000047872774303, -0.0002097863471135497, -0.10583187639713287, -0.046684712171554565, -0.003437564242631197, -0.445065438747406, -0.06803753226995468, -0.07349491864442825, -0.32008326053619385, -6.401333666872233e-05, -0.0005087750032544136, -5.829164365422912e-05, -0.003693902399390936, -0.003870378714054823, -0.00026127262390218675, -0.010174669325351715, -3.245224714279175, -0.025175241753458977, -0.0008112476789392531, -0.05502820014953613, -0.011851494200527668, -0.0027204668149352074, -0.09560449421405792, -0.054674312472343445, -0.0007681279676035047, -0.5445286631584167, -0.09978774189949036, -0.0732884407043457, -0.9425212740898132, -0.00015317220822907984, -0.0003669780562631786, -0.00023648326168768108, -0.03481502830982208, -0.05840863287448883, -0.0017343016806989908, -0.00045753977610729635, -0.19655023515224457, -0.9045050144195557, -0.00024029705673456192, -0.02068611979484558, -0.5093866586685181, -0.0003159739135298878, -0.0037041164468973875, -0.007392788305878639, -0.034202691167593, -0.00014220656885299832, -0.003283706260845065], "finish_reason": "length"}], "metrics": {"energy": 304.14225708198546, "energy_per_token": 1.1880556917265057, "time": 11.338421, "time_per_token": 0.04429070703125}}
{"outputs": [{"text": "regex = re.compile(pattern, re.IGNORECASE)\n    matches = []\n\n    for extension in extensions:\n        paths = glob.glob(f\"{directory}/{extension}\")\n        matches.extend(regex.findall(os.path.join(path, os.listdir(path)) for path in paths))\n    return matches", "tokens": ["regex", " =", " re", ".", "compile", "(", "pattern", ",", " re", ".", "IGN", "ORE", "C", "ASE", ")", "\n", "    ", "matches", " =", " []", "\n", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "paths", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}/{", "extension", "}\"", ")", "\n", "        ", "matches", ".", "extend", "(", "regex", ".", "find", "all", "(", "os", ".", "path", ".", "join", "(", "path", ",", " os", ".", "list", "dir", "(", "path", "))", " for", " path", " in", " paths", "))", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-3.623690605163574, -0.15598012506961823, -0.08472779393196106, -0.00015066919149830937, -0.0027887048199772835, -0.009143504314124584, -0.08193604648113251, -0.05513244867324829, -0.14185191690921783, -2.455681169521995e-05, -0.18541812896728516, -0.0002795067266561091, -3.290122185717337e-05, -3.755022044060752e-05, -0.01199367456138134, -0.011881769634783268, -0.17103929817676544, -0.6779575943946838, -0.012759475037455559, -0.22904925048351288, -0.001019673072732985, -1.6337753534317017, -0.0002671123365871608, -0.14815162122249603, -1.179369568824768, -0.005078155547380447, -0.005773771554231644, -0.0034920922480523586, -0.0017322786152362823, -0.004951002076268196, -3.018505096435547, -0.02811344712972641, -0.0990564227104187, -0.0009238027851097286, -0.05693022906780243, -0.0036143234465271235, -2.195970296859741, -0.7402215003967285, -0.04465991258621216, -0.023516086861491203, -1.0075607299804688, -0.025688914582133293, -0.017552750185132027, -0.07304324209690094, -0.006454454734921455, -0.15090712904930115, -1.64919114112854, -0.3026835322380066, -0.004334103781729937, -0.3051031231880188, -1.6672172546386719, -0.02589372918009758, -0.03696151822805405, -0.007937555201351643, -0.04127034917473793, -3.3208165168762207, -0.0002019201492657885, -0.059403061866760254, -0.0017705968348309398, -2.6053712368011475, -0.13610932230949402, -0.7432504892349243, -0.5360079407691956, -2.131678342819214, -0.00032062159152701497, -0.03992903232574463, -9.667406266089529e-05, -0.0005579821881838143, -0.009990804828703403, -0.22988282144069672, -0.995607852935791, -0.0017046695575118065, -0.000865680689457804, -0.006860037334263325, -0.1859162449836731, -0.005944667384028435, -2.4401907920837402, -0.22770752012729645, -0.23077654838562012, -0.281560480594635, -0.010188829153776169, -0.8071810007095337], "finish_reason": "stop"}], "metrics": {"energy": 97.2024860305786, "energy_per_token": 1.185396171104617, "time": 3.3732498, "time_per_token": 0.04113719268292683}}
{"outputs": [{"text": "result = []\n\n    for filename in glob.iglob(f'{directory}/*'):\n        if filename.endswith(extensions):\n            with open(filename, 'r', encoding=\"utf-8\") as f:\n                content = f.read()\n\n                if re.search(pattern, content, flags=re.IGNORECASE):\n                    result.append(Path(filename))\n\n    return result", "tokens": ["result", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "ig", "lob", "(", "f", "'{", "directory", "}", "/*", "')", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "extensions", "):", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "\n", "                ", "if", " re", ".", "search", "(", "pattern", ",", " content", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "                ", "    ", "result", ".", "append", "(", "Path", "(", "filename", "))", "\n", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.628058433532715, -0.0888788104057312, -0.1506599336862564, -0.0024273712188005447, -1.8336390256881714, -0.00039450492477044463, -0.4618779718875885, -3.216817855834961, -0.023922840133309364, -0.1984926015138626, -0.00029690624796785414, -1.0805425643920898, -0.00041738382424227893, -0.010629111900925636, -1.5979773998260498, -0.8106244802474976, -0.01502658985555172, -0.6471093893051147, -0.4783313274383545, -2.160508155822754, -0.0004963834653608501, -0.028709018602967262, -0.03074946440756321, -0.5828524827957153, -2.0381360054016113, -0.018482254818081856, -0.2459614872932434, -0.0003736513026524335, -2.3841855067985307e-07, -0.06310099363327026, -0.47402703762054443, -0.15591096878051758, -0.017349617555737495, -0.013211686164140701, -0.37203866243362427, -0.009401453658938408, -0.0004522969538811594, -0.007693659048527479, -0.2165507674217224, -0.17603734135627747, -0.11183298379182816, -1.292162537574768, -0.00042572495294734836, -0.03951349854469299, -2.5255539417266846, -0.02583274245262146, -0.12420665472745895, -0.3370378911495209, -0.003212174866348505, -0.01227420661598444, -0.022919276729226112, -0.0003326578007545322, -0.41652578115463257, -0.03869819641113281, -0.0014618673594668508, -0.0035631281789392233, -1.583992600440979, -0.0036086218897253275, -0.016999252140522003, -6.3774932641536e-05, -7.557583012385294e-05, -0.014631355181336403, -0.15159821510314941, -1.9818930625915527, -0.9529126882553101, -0.18510086834430695, -0.11550784111022949, -5.209310256759636e-05, -0.04155536741018295, -0.0015142414486035705, -0.04674261808395386, -0.03555699810385704, -0.005052299238741398, -0.01821165345609188, -2.475034236907959, -0.0067976415157318115, -0.012526758946478367, -3.814624506048858e-05, -0.16905127465724945, -3.58813522325363e-05, -9.238292841473594e-05, -0.00010680581908673048, -0.044775959104299545, -0.005321741569787264, -0.0013302058214321733, -0.0011738798348233104, -0.021252287551760674, -0.0021782023832201958, -0.0005965837044641376, -0.0007109498255886137, -0.37668663263320923, -0.00334097514860332, -0.01957012340426445, -0.3530145585536957, -0.0031109291594475508, -0.1259753555059433, -0.004051691386848688, -0.01971459947526455, -0.03956930339336395, -1.0411378145217896, -9.536738616588991e-07, -1.1920922133867862e-06, -1.3470558769768104e-05, -0.00012659224739763886, -0.09437668323516846], "finish_reason": "stop"}], "metrics": {"energy": 125.62174296760556, "energy_per_token": 1.196397552072434, "time": 4.430509, "time_per_token": 0.04219532380952381}}
{"outputs": [{"text": "matches = []\n\n    for ext in extensions:\n        matches.extend([os.path.join(p, f) for p, _, fs in os.walk(directory) for f in fs if re.search(pattern, f, re.IGNORECASE) and ext in f])\n\n    return matches", "tokens": ["matches", " =", " []", "\n", "\n", "    ", "for", " ext", " in", " extensions", ":", "\n", "        ", "matches", ".", "extend", "([", "os", ".", "path", ".", "join", "(", "p", ",", " f", ")", " for", " p", ",", " _", ",", " fs", " in", " os", ".", "walk", "(", "directory", ")", " for", " f", " in", " fs", " if", " re", ".", "search", "(", "pattern", ",", " f", ",", " re", ".", "IGN", "ORE", "C", "ASE", ")", " and", " ext", " in", " f", "])", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -1.7767529487609863, -0.0003554189461283386, -0.43685901165008545, -1.5187898874282837, -0.007813012227416039, -0.007525310385972261, -0.007963455282151699, -0.003390399506315589, -0.011987314559519291, -2.391329288482666, -0.5543842315673828, -0.0026291587855666876, -2.3576555252075195, -2.6772079467773438, -0.00044645831803791225, -0.0004532501916401088, -0.000647692708298564, -0.2892627418041229, -0.00485657574608922, -3.0602657794952393, -0.07035498321056366, -0.319801926612854, -0.02204589918255806, -0.21291060745716095, -0.12731458246707916, -0.25687962770462036, -0.2253219485282898, -0.007029563654214144, -1.4136865139007568, -0.0032298800069838762, -0.06799175590276718, -0.0002933310461230576, -0.00020728347590193152, -0.0022348209749907255, -0.019357111304998398, -0.0373116210103035, -0.3411254286766052, -0.005438532680273056, -0.002628326416015625, -0.8084386587142944, -0.124580979347229, -0.4017023742198944, -0.00012015574611723423, -0.06852888315916061, -0.005587673280388117, -0.0857054814696312, -0.013198156841099262, -0.1327556073665619, -0.26911523938179016, -0.16044405102729797, -9.97731985989958e-05, -0.5538946986198425, -1.7404405298293568e-05, -7.235741941258311e-05, -8.67805938469246e-05, -0.7985845804214478, -0.10951289534568787, -2.883856773376465, -0.2578018605709076, -0.5425053834915161, -0.11323481053113937, -0.005753385368734598, -0.16563309729099274, -0.004474627319723368, -0.1005464419722557, -0.07245110720396042, -0.17108622193336487, -0.005412685684859753, -0.5566126704216003], "finish_reason": "stop"}], "metrics": {"energy": 108.0802358932495, "energy_per_token": 1.480551176619856, "time": 2.9566903, "time_per_token": 0.040502606849315066}}
{"outputs": [{"text": "result = []\n    if extensions is None:\n        extensions = []\n    if len(extensions) == 0:\n        extensions = ['*']\n    extensions = list(map(lambda x: x.replace('*', ''), extensions))\n    pattern = f'(.*[.{extensions}])'\n    pattern = re.compile(pattern, re.I)\n    files = glob.glob(os.path.join(directory, '**', '*'), recursive=True)\n    for file in files:\n        if pattern.search(os.path.basename(file)) and Path(file).is_file():\n            result.append(file)\n    return result", "tokens": ["result", " =", " []", "\n", "    ", "if", " extensions", " is", " None", ":", "\n", "        ", "extensions", " =", " []", "\n", "    ", "if", " len", "(", "extensions", ")", " ==", " ", "0", ":", "\n", "        ", "extensions", " =", " ['", "*", "']", "\n", "    ", "extensions", " =", " list", "(", "map", "(", "lambda", " x", ":", " x", ".", "replace", "('", "*", "'", ",", " '", "')", ",", " extensions", "))", "\n", "    ", "pattern", " =", " f", "'(", ".", "*[", ".", "{", "extensions", "}]", ")'", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "pattern", ",", " re", ".", "I", ")", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "**", "'", ",", " '", "*", "')", ",", " recursive", "=", "True", ")", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " pattern", ".", "search", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", " and", " Path", "(", "file", ")", ".", "is", "_", "file", "():", "\n", "            ", "result", ".", "append", "(", "file", ")", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.628058433532715, -0.0888788104057312, -0.1506599336862564, -0.0024273712188005447, -0.17424573004245758, -2.74495005607605, -2.299565315246582, -0.8404538631439209, -0.23271559178829193, -0.07635524868965149, -0.0166771337389946, -0.0026731493417173624, -0.16267642378807068, -0.006444505415856838, -1.3185924291610718, -0.005935779307037592, -0.2687532901763916, -1.4237769842147827, -3.2497920989990234, -0.0010193157941102982, -0.059792108833789825, -0.016204437240958214, -0.281624436378479, -0.0006008726777508855, -0.10629460960626602, -0.02814960852265358, -0.009015921503305435, -0.0016945539973676205, -0.4017117917537689, -0.10838345438241959, -0.4396379292011261, -0.06117546930909157, -0.27601853013038635, -0.009808558970689774, -0.3800445795059204, -2.3044016361236572, -0.18449421226978302, -3.2716825008392334, -0.02613392472267151, -0.157660573720932, -0.010204995982348919, -0.21762114763259888, -0.8189942240715027, -0.006413828115910292, -1.0571750402450562, -0.11209539324045181, -1.1306337118148804, -0.179634690284729, -0.9240302443504333, -0.007241194136440754, -0.00019059749320149422, -0.0678035244345665, -0.4097454845905304, -0.10534768551588058, -0.011257699690759182, -0.0021949741058051586, -0.03901777043938637, -0.16708257794380188, -3.193904399871826, -0.1752815991640091, -2.0808751583099365, -2.875810384750366, -2.621642589569092, -3.6254749298095703, -1.3920948505401611, -2.591655731201172, -0.36934077739715576, -0.857021689414978, -0.4009948670864105, -0.3720751404762268, -0.15449616312980652, -2.3913660049438477, -0.2576414942741394, -0.9617910981178284, -0.00012170527770649642, -0.20794668793678284, -0.023367267102003098, -0.08509638160467148, -0.12697939574718475, -0.18082718551158905, -8.320462075062096e-05, -1.7328460216522217, -0.12132231146097183, -0.00997557956725359, -0.2022200971841812, -2.694530487060547, -0.06946136802434921, -0.398245632648468, -0.0008604400209151208, -0.16508616507053375, -0.010352836921811104, -0.4418428838253021, -0.00011157367407577112, -0.0004198861715849489, -0.0009860896971076727, -0.0032825181260704994, -0.0011251792311668396, -0.022254960611462593, -0.002063527936115861, -0.9654665589332581, -0.27885138988494873, -0.378301739692688, -0.022024793550372124, -0.14762341976165771, -0.014790995046496391, -1.1424226760864258, -0.0018799504032358527, -0.011304023675620556, -0.009497695602476597, -0.009191107004880905, -0.009615181013941765, -0.004075436852872372, -0.06717672944068909, -0.2635364830493927, -0.5706942677497864, -0.10481303185224533, -0.01911083795130253, -0.0002079985715681687, -0.0010563514661043882, -0.001280679483897984, -0.3432246446609497, -1.1608221530914307, -0.007865645922720432, -0.5663575530052185, -0.0003979606262873858, -2.1229350566864014, -0.00042167355422861874, -0.002274071332067251, -0.0006073060794733465, -0.030579056590795517, -2.3841855067985307e-07, -4.637133679352701e-05, -0.009228785522282124, -0.02505875565111637, -2.1108527183532715, -1.7718499898910522, -0.0020528212189674377, -0.017640715464949608, -0.000613143783994019, -0.0005479741375893354, -0.5014992952346802, -0.00016091958968900144, -0.0006663962849415839, -0.05721374601125717, -0.00518774101510644, -0.001902795396745205, -0.05041243135929108, -0.010373838245868683, -0.0011010067537426949, -0.001259725191630423, -0.36308392882347107, -0.010180923156440258, -0.0017215682892128825, -0.1249261274933815, -0.03256930783390999, -0.022986965253949165, -1.287538766860962, -1.4305104514278355e-06, -9.536738616588991e-07, -2.8132995794294402e-05, -7.426462980220094e-05, -0.06981895118951797], "finish_reason": "stop"}], "metrics": {"energy": 204.61886471939084, "energy_per_token": 1.2630794118480917, "time": 7.767535, "time_per_token": 0.047947746913580246}}
{"outputs": [{"text": "# Make sure to import os, re, glob, and pathlib at the top of your function.\n\n    # Get all files in the directory that match the specified extension\n    file_list = glob.glob(f\"{directory}/{extensions}\")\n\n    # Initialize a list to store matched files\n    matches = []\n\n    for filename in file_list:\n        if re.search(pattern, Path(filename).read_text().lower()):\n            matches.append(filename)\n\n    return matches", "tokens": ["#", " Make", " sure", " to", " import", " os", ",", " re", ",", " glob", ",", " and", " path", "lib", " at", " the", " top", " of", " your", " function", ".", "\n", "\n", "    ", "#", " Get", " all", " files", " in", " the", " directory", " that", " match", " the", " specified", " extension", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}/{", "extensions", "}\"", ")", "\n", "\n", "    ", "#", " Initialize", " a", " list", " to", " store", " matched", " files", "\n", "    ", "matches", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "filename", ")", ".", "read", "_", "text", "()", ".", "lower", "()", "):", "\n", "            ", "matches", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-2.8015050888061523, -4.505220413208008, -0.4166238605976105, -3.4736177921295166, -3.3395705223083496, -1.0070182085037231, -0.8179861903190613, -2.7940144538879395, -0.34550735354423523, -0.9476824402809143, -0.48827922344207764, -0.5025652050971985, -0.08396761864423752, -0.0011361341457813978, -1.7462502717971802, -0.05146069824695587, -0.19366003572940826, -0.36692267656326294, -0.9934816360473633, -2.547624349594116, -1.0279078483581543, -0.05669889599084854, -2.407625436782837, -0.001327943871729076, -0.7719261050224304, -3.4266538619995117, -1.078486680984497, -0.6988469958305359, -0.24738918244838715, -0.08821173012256622, -0.3826149106025696, -0.7576376795768738, -0.1773066222667694, -0.050805334001779556, -1.3806296586990356, -1.9722858667373657, -1.358370304107666, -0.010787858627736568, -1.4153845310211182, -0.036615196615457535, -1.7924103736877441, -0.009171144105494022, -0.3512907028198242, -0.00037305548903532326, -0.019516348838806152, -0.004208636935800314, -1.8708375692367554, -0.4635278284549713, -0.01798067055642605, -0.02021297812461853, -1.2040551900863647, -0.1260143518447876, -0.14195513725280762, -0.06819143146276474, -0.008614994585514069, -0.29409611225128174, -0.001383896335028112, -0.19928619265556335, -1.8250242471694946, -1.4217088222503662, -0.23413798213005066, -0.06896869838237762, -0.06527680158615112, -2.245271682739258, -0.6601628065109253, -0.07036487013101578, -0.0015086471103131771, -0.440114825963974, -0.010180097073316574, -0.015842638909816742, -0.0002865380665753037, -0.02401757799088955, -0.00044467096449807286, -1.9615570306777954, -2.338796377182007, -0.001642665360122919, -0.003089062636718154, -0.00016437610611319542, -4.875540980719961e-05, -0.0004135706985834986, -0.012097323313355446, -0.06116078048944473, -3.375131368637085, -0.35331830382347107, -8.844937838148326e-05, -0.023642880842089653, -0.003065412864089012, -0.03879762440919876, -0.023737411946058273, -0.4559585154056549, -0.0013684204313904047, -0.004384547472000122, -0.003070879727602005, -0.0009563163621351123, -0.13330505788326263, -2.932505594799295e-05, -0.002080539707094431, -0.15390467643737793, -2.5831997394561768, -0.31002432107925415, -0.033006537705659866, -0.13571888208389282, -0.050537336617708206, -0.0027054871898144484, -0.030887827277183533, -0.0009062950266525149, -0.00048685140791349113, -0.0006183857913129032, -0.5900075435638428, -0.0016952680889517069, -0.008082539774477482, -0.07808101922273636, -0.003698771819472313, -0.07940750569105148, -0.008344783447682858, -0.419985830783844, -0.027492815628647804, -0.6576507687568665], "finish_reason": "stop"}], "metrics": {"energy": 161.97470035362244, "energy_per_token": 1.3726669521493426, "time": 5.058312, "time_per_token": 0.04286705084745763}}
{"outputs": [{"text": "# find files recursively within the specified directory, but exclude hidden files\n    files = [f for f in glob.glob(f\"{directory}/**\", recursive=True) if os.path.isfile(f)]\n\n    # check that file extension is present\n    for extension in extensions:\n        if extension not in files:\n            files.append(extension)\n\n    matches = []\n    for file in files:\n        # check that file matches pattern and that it's a text file\n        if re.search(pattern, Path(file).name) and Path(file).suffix in extensions:\n            matches.append(Path(file))\n    return matches", "tokens": ["#", " find", " files", " recurs", "ively", " within", " the", " specified", " directory", ",", " but", " exclude", " hidden", " files", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/**", "\"", ",", " recursive", "=", "True", ")", " if", " os", ".", "path", ".", "is", "file", "(", "f", ")]", "\n", "\n", "    ", "#", " check", " that", " file", " extension", " is", " present", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "if", " extension", " not", " in", " files", ":", "\n", "            ", "files", ".", "append", "(", "extension", ")", "\n", "\n", "    ", "matches", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " check", " that", " file", " matches", " pattern", " and", " that", " it", "'", "s", " a", " text", " file", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "file", ")", ".", "name", ")", " and", " Path", "(", "file", ")", ".", "suff", "ix", " in", " extensions", ":", "\n", "            ", "matches", ".", "append", "(", "Path", "(", "file", "))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-2.8015050888061523, -4.740084648132324, -2.0077643394470215, -3.2933568954467773, -0.00328132975846529, -3.5817553997039795, -0.8102021813392639, -1.4626065492630005, -0.025852492079138756, -3.150320291519165, -3.5896618366241455, -2.3269896507263184, -1.612491250038147, -0.09569376707077026, -0.690344512462616, -0.005167342722415924, -0.8387326598167419, -0.0559895858168602, -1.40873122215271, -1.0247451066970825, -0.0824737474322319, -0.00506344810128212, -0.003900302806869149, -1.0086424350738525, -0.00048101297579705715, -0.39854440093040466, -0.011904033832252026, -1.568131685256958, -0.8899492025375366, -0.04780121520161629, -0.0262436643242836, -0.5613055229187012, -1.531335711479187, -0.7360719442367554, -0.015791596844792366, -0.007496322505176067, -0.003985914401710033, -0.0026839682832360268, -0.16764506697654724, -0.2740943133831024, -1.5519139766693115, -1.5735502529423684e-05, -0.005438887979835272, -0.0025010991375893354, -0.12722662091255188, -0.0017288275994360447, -0.00033504117163829505, -0.0046680523082613945, -1.3027980327606201, -0.00742544699460268, -0.6581925749778748, -0.0004009396652691066, -0.4160315990447998, -3.005378246307373, -2.342700958251953, -3.405898094177246, -1.917302131652832, -0.7633427977561951, -3.3599557876586914, -1.8170979022979736, -0.004545474890619516, -2.046980857849121, -1.9899861812591553, -0.007707144599407911, -0.013949751853942871, -0.00815502367913723, -0.0009616755996830761, -0.005478606093674898, -0.5606339573860168, -0.8262568116188049, -0.9385479092597961, -5.125868119648658e-05, -0.8131463527679443, -0.3073311150074005, -0.005186317954212427, -0.0019413450499996543, -1.7457555532455444, -0.6712299585342407, -0.30129721760749817, -0.021757598966360092, -0.42620614171028137, -0.003907427657395601, -0.00893463846296072, -0.09388289600610733, -0.006071338430047035, -1.4179823398590088, -0.015049253590404987, -0.20378732681274414, -0.011018739081919193, -0.5404808521270752, -0.2970036268234253, -0.47277796268463135, -0.07819060981273651, -0.004123400431126356, -0.0003446938644628972, -0.00312530854716897, -0.015429415740072727, -1.4233609437942505, -1.1717438697814941, -1.521733045578003, -0.6427054405212402, -2.6999258995056152, -1.5532140731811523, -2.2310874462127686, -2.1457905769348145, -0.6525066494941711, -1.5196244716644287, -0.0005449955351650715, -1.9196093082427979, -1.6391141414642334, -0.05957514047622681, -0.18183858692646027, -0.0012655591126531363, -0.16771814227104187, -0.4601667821407318, -5.61460001335945e-05, -0.07916127145290375, -0.004597094841301441, -0.032622385770082474, -0.020931771025061607, -0.9513475298881531, -0.0005374894244596362, -0.004005861934274435, -0.0011963837314397097, -0.000604565953835845, -2.2983450889587402, -2.251936674118042, -0.08202368766069412, -0.4481604993343353, -0.0012387705501168966, -0.00768940057605505, -0.000179036331246607, -6.389413465512916e-05, -0.02930620312690735, -0.0005757343024015427, -0.5409632325172424, -0.24192538857460022, -0.10596763342618942, -0.005412211176007986, -0.004899994004517794, -0.06462205201387405, -0.0008612737292423844, -0.0011811431031674147, -0.0009459549910388887, -1.9832570552825928, -0.006765435915440321, -0.008107371628284454, -0.8409037590026855, -0.0073422593995928764, -1.5555596351623535, -0.03600499778985977, -0.01612784154713154, -0.5095783472061157, -0.014194594696164131, -0.9060702919960022], "finish_reason": "stop"}], "metrics": {"energy": 197.36930849838257, "energy_per_token": 1.2733503774089199, "time": 6.717824, "time_per_token": 0.0433408}}
{"outputs": [{"text": "results = []\n    for extension in extensions:\n        for filename in glob.iglob(os.path.join(directory, f\"*{extension}\")):\n            try:\n                with open(filename) as f:\n                    contents = f.read()\n            except (UnicodeDecodeError, UnicodeEncodeError) as e:\n                print('ERROR:', e)\n                continue\n            match = re.search(pattern, contents, re.IGNORECASE)\n            if match:\n                print('GLOBAL:', match.group())\n                results.append(Path(filename))\n    return results", "tokens": ["results", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "for", " filename", " in", " glob", ".", "ig", "lob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "\"", "*{", "extension", "}\"", "))", ":", "\n", "            ", "try", ":", "\n", "                ", "with", " open", "(", "filename", ")", " as", " f", ":", "\n", "                ", "    ", "contents", " =", " f", ".", "read", "()", "\n", "            ", "except", " (", "Un", "icode", "Dec", "ode", "Error", ",", " Un", "icode", "Enc", "ode", "Error", ")", " as", " e", ":", "\n", "                ", "print", "('", "ERROR", ":'", ",", " e", ")", "\n", "                ", "continue", "\n", "            ", "match", " =", " re", ".", "search", "(", "pattern", ",", " contents", ",", " re", ".", "IGN", "ORE", "C", "ASE", ")", "\n", "            ", "if", " match", ":", "\n", "                ", "print", "('", "G", "LOB", "AL", ":'", ",", " match", ".", "group", "())", "\n", "                ", "results", ".", "append", "(", "Path", "(", "filename", "))", "\n", "    ", "return", " results", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.745572090148926, -0.028334451839327812, -0.1108381599187851, -0.0021877181716263294, -0.1646658331155777, -0.41381603479385376, -1.4656200408935547, -0.006872942205518484, -0.00642200093716383, -0.006193965673446655, -0.0032745571807026863, -0.004354875069111586, -1.2276291847229004, -2.091540813446045, -0.0071260337717831135, -0.05867161229252815, -0.0002641328901518136, -1.0678966045379639, -0.0011148196645081043, -0.007128637749701738, -0.5440505743026733, -1.680836794548668e-05, -8.761498611420393e-05, -0.0012360322289168835, -0.0009517907164990902, -0.001919690752401948, -0.008542188443243504, -0.0010898133041337132, -1.3055448532104492, -1.3626673221588135, -0.7748712301254272, -0.018084870651364326, -0.004197477828711271, -0.2279902845621109, -0.00014685506175737828, -0.0070836590602993965, -0.004452909342944622, -1.886672019958496, -0.0001497156627010554, -0.001587679609656334, -0.0012836558744311333, -0.1345636546611786, -0.01725928485393524, -0.0002834395272657275, -0.005765237845480442, -2.326735496520996, -0.00011824862303910777, -0.24069689214229584, -0.030621487647294998, -0.0014582963194698095, -0.00040713604539632797, -0.0007439468172378838, -0.98389732837677, -0.0031323200091719627, -0.04399300366640091, -5.1616290875244886e-05, -0.00010644822759786621, -0.008520558476448059, -0.23365963995456696, -0.8122772574424744, -0.0020059479866176844, -2.9217543601989746, -1.2444124221801758, -0.0001591317413840443, -0.06549867987632751, -0.011902621015906334, -6.317892984952778e-05, -0.024081237614154816, -1.2435967922210693, -0.0012254356406629086, -0.7379723787307739, -2.610649426060263e-05, -2.5033637939486653e-05, -1.7116352319717407, -0.002183436183258891, -0.11313974857330322, -0.0005964645533822477, -0.0307133961468935, -0.000753357307985425, -0.5879349708557129, -2.876131296157837, -2.931424617767334, -1.7821463346481323, -0.013033438473939896, -1.1782150268554688, -0.27809667587280273, -0.008525877259671688, -0.5241288542747498, -0.2669845521450043, -0.015337147749960423, -0.11462254822254181, -3.057742118835449, -0.024730153381824493, -0.011968350037932396, -7.354942499659956e-05, -0.09830664098262787, -0.000979896984063089, -0.0271016675978899, -0.01946958526968956, -0.01659858226776123, -0.09401638060808182, -0.11958925426006317, -2.9205850296420977e-05, -0.3433614671230316, -1.4543427823809907e-05, -2.753696753643453e-05, -0.00017152745567727834, -0.025973763316869736, -0.004998923745006323, -0.010614603757858276, -0.009476086124777794, -0.007333739195019007, -0.14637808501720428, -0.004895486403256655, -0.000553335587028414, -2.887974739074707, -1.1386092901229858, -4.605351448059082, -2.0225415229797363, -0.460816353559494, -1.5176067352294922, -0.0020927926525473595, -1.2366745471954346, -0.2722172439098358, -0.19906680285930634, -0.744257390499115, -0.014261583797633648, -0.005377826746553183, -0.2669765055179596, -0.0033333711326122284, -0.0017133570509031415, -0.0022551598958671093, -0.32914087176322937, -0.004365794360637665, -0.023984061554074287, -0.20148320496082306, -0.0026410482823848724, -0.2253286987543106, -0.051953352987766266, -0.025543903931975365, -1.2216795682907104, -8.344646857949556e-07, -9.536738616588991e-07, -3.58813522325363e-05, -8.701899787411094e-05, -0.06480564177036285], "finish_reason": "stop"}], "metrics": {"energy": 156.87532138252254, "energy_per_token": 1.0744885026200175, "time": 6.301693, "time_per_token": 0.04316228082191781}}
{"outputs": [{"text": "matches = []\n\n    for extension in extensions:\n        matches += glob.glob(os.path.join(directory, f'*{extension}'))\n\n    return matches", "tokens": ["matches", " =", " []", "\n", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "matches", " +=", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'", "*{", "extension", "}'", "))", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -1.7767529487609863, -0.0003554189461283386, -0.43685901165008545, -1.071825623512268, -0.006707652006298304, -0.005282136145979166, -0.005936135072261095, -0.002891052979975939, -0.015202251262962818, -2.3500993251800537, -0.8341712355613708, -0.17779003083705902, -0.0005087750032544136, -0.08909224718809128, -0.0038273907266557217, -0.5803290009498596, -4.446407547220588e-05, -0.00015317220822907984, -0.0011886443244293332, -0.0013405631761997938, -0.0009454786195419729, -0.018866846337914467, -0.0010675451485440135, -0.7148808836936951, -0.45008206367492676, -1.5838370323181152, -0.03446497023105621, -0.02024265192449093, -0.0010629009921103716, -0.0033239847980439663, -0.12534119188785553, -0.0036783432587981224, -0.9170804619789124, -1.2960776090621948, -0.27010199427604675, -0.008791785687208176, -0.5937658548355103], "finish_reason": "stop"}], "metrics": {"energy": 55.274505157470706, "energy_per_token": 1.3481586623773343, "time": 1.6990075, "time_per_token": 0.04143920731707317}}
{"outputs": [{"text": "matches = []\n    for extension in extensions:\n        paths = glob.glob(os.path.join(directory, f'**/*.{extension}'))\n        paths = [Path(p) for p in paths if re.search(pattern, p, re.I)]\n        matches.extend(paths)\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "paths", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'", "**", "/*", ".", "{", "extension", "}'", "))", "\n", "        ", "paths", " =", " [", "Path", "(", "p", ")", " for", " p", " in", " paths", " if", " re", ".", "search", "(", "pattern", ",", " p", ",", " re", ".", "I", ")]", "\n", "        ", "matches", ".", "extend", "(", "paths", ")", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3152105808258057, -0.005684282630681992, -0.005298262927681208, -0.006355550140142441, -0.003712667850777507, -0.003756254445761442, -3.3048362731933594, -0.0210801362991333, -0.15559063851833344, -0.0012627016985788941, -0.056056201457977295, -0.0047442251816391945, -0.29551956057548523, -1.2278481335670222e-05, -8.976056415122002e-05, -0.0013594918418675661, -0.0008568667690269649, -0.0009198724874295294, -0.010459250770509243, -0.0008002892718650401, -1.254178524017334, -0.40915727615356445, -0.7475660443305969, -0.1570279598236084, -0.21271249651908875, -0.007529214955866337, -0.005088592879474163, -0.014639108441770077, -0.00733196409419179, -0.004211010877043009, -0.021334208548069, -2.7290139198303223, -0.12235592305660248, -0.18041591346263885, -1.4073601961135864, -0.009179058484733105, -1.0452876091003418, -0.0033450147602707148, -0.1923866719007492, -0.0002379134384682402, -0.00010442188795423135, -0.004974251613020897, -1.7964314222335815, -2.6188435554504395, -5.519237674889155e-05, -0.052921541035175323, -0.006201785057783127, -0.04358383268117905, -0.02931106649339199, -0.19193919003009796, -0.4422716498374939, -0.1416974514722824, -2.9801878554280847e-05, -0.9233664870262146, -0.13221608102321625, -0.009887764230370522, -0.023308223113417625, -0.08069341629743576, -0.2699238061904907, -0.0027873970102518797, -0.0377654954791069, -0.0256606824696064, -0.003181635867804289, -0.0022872735280543566, -0.19253310561180115, -0.041094060987234116, -0.04251093789935112, -0.5332807302474976, -0.007837023586034775, -0.9578741192817688], "finish_reason": "stop"}], "metrics": {"energy": 78.33901021575929, "energy_per_token": 1.030776450207359, "time": 3.170355, "time_per_token": 0.04171519736842105}}
{"outputs": [{"text": "if os.path.isdir(directory):\n        pattern = re.escape(pattern)\n        matches = [\n            str(Path(p).resolve()) for p in glob.iglob(f'**/*.{e}', recursive=True,\n                                                       follow_links=True) if pattern.lower() in str(\n                Path(p).resolve()).lower()]\n        return matches\n    else:\n        raise Exception(f'File \"{directory}\" does not exist')", "tokens": ["if", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "pattern", " =", " re", ".", "escape", "(", "pattern", ")", "\n", "        ", "matches", " =", " [", "\n", "            ", "str", "(", "Path", "(", "p", ")", ".", "resolve", "())", " for", " p", " in", " glob", ".", "ig", "lob", "(", "f", "'", "**", "/*", ".", "{", "e", "}'", ",", " recursive", "=", "True", ",", "\n", "                ", "                ", "                ", "       ", "follow", "_", "links", "=", "True", ")", " if", " pattern", ".", "lower", "()", " in", " str", "(", "\n", "                ", "Path", "(", "p", ")", ".", "resolve", "())", ".", "lower", "()", "]", "\n", "        ", "return", " matches", "\n", "    ", "else", ":", "\n", "        ", "raise", " Exception", "(", "f", "'", "File", " \"", "{", "directory", "}\"", " does", " not", " exist", "')", "\n", "\n", "if"], "logprobs": [-2.687485694885254, -2.485769271850586, -0.014890242367982864, -0.2855698764324188, -0.010147646069526672, -0.22536057233810425, -0.6387299299240112, -0.0009051040397025645, -0.012424921616911888, -0.08186059445142746, -0.014157102443277836, -0.012618816457688808, -2.646711587905884, -0.23136675357818604, -1.419702172279358, -0.0002338612830499187, -1.6539772748947144, -0.0037741875275969505, -0.13449770212173462, -0.06839273124933243, -0.1959819346666336, -0.06707651913166046, -1.6345607042312622, -0.01304332260042429, -1.767157793045044, -1.022803544998169, -0.014657200314104557, -1.0468215942382812, -0.012448704801499844, -1.5136305093765259, -0.014838446862995625, -2.787498950958252, -0.09697016328573227, -0.004473322071135044, -0.5190055966377258, -0.05390528589487076, -1.1702218055725098, -0.0046243867836892605, -0.01908101513981819, -0.27378955483436584, -0.0004180987598374486, -1.5679144859313965, -0.000834117061458528, -0.006514739710837603, -1.3621165752410889, -2.2004480361938477, -0.12200387567281723, -0.9752758741378784, -0.0894908457994461, -0.8299534320831299, -1.2116193771362305, -0.17216140031814575, -0.0014422263484448195, -0.1805616170167923, -0.0023309222888201475, -0.006499698385596275, -1.2605150938034058, -0.7830781936645508, -0.029164033010601997, -0.050094325095415115, -0.04882156848907471, -2.5667800903320312, -3.0999372005462646, -0.11351366341114044, -1.0770363807678223, -0.003939250484108925, -0.1977359503507614, -0.500184953212738, -0.7591767311096191, -1.7048300504684448, -0.7341828942298889, -0.20579712092876434, -0.0015980342868715525, -0.02234344370663166, -1.9042694568634033, -0.003899234114214778, -2.0527734756469727, -0.001302585587836802, -0.40539079904556274, -0.002015227684751153, -0.011806138791143894, -0.017223898321390152, -0.000979420612566173, -0.10308431833982468, -0.023155877366662025, -0.07033609598875046, -0.031125901266932487, -0.0003805628512054682, -1.1918118000030518, -0.008203974924981594, -0.4682404696941376, -0.3936596214771271, -0.12860380113124847, -0.0906062126159668, -0.2515706419944763, -0.3131534159183502, -0.0002603192115202546, -0.007619011681526899, -0.0008922410197556019, -0.7924069762229919, -1.6443427801132202, -0.3230288624763489, -0.584196150302887, -0.6987286806106567, -3.4383292198181152, -2.737475872039795, -0.0027757470961660147, -0.09604892134666443, -0.0079963319003582, -1.1957781314849854, -0.0033797069918364286, -0.07440496981143951, -1.0379645824432373, -0.42459025979042053, -0.03365326300263405, -0.5476053953170776], "finish_reason": "stop"}], "metrics": {"energy": 124.46364205837249, "energy_per_token": 1.0729624315376938, "time": 5.0567226, "time_per_token": 0.04359243620689655}}
{"outputs": [{"text": "return [match_file(pattern, directory, extension)\n            for extension in extensions]", "tokens": ["return", " [", "match", "_", "file", "(", "pattern", ",", " directory", ",", " extension", ")", "\n", "            ", "for", " extension", " in", " extensions", "]", "\n", "\n", "def"], "logprobs": [-2.9337339401245117, -0.830258309841156, -3.809778928756714, -2.969860315322876, -0.6612613797187805, -1.04592764377594, -0.49887993931770325, -0.03242194280028343, -1.656429409980774, -0.04451534524559975, -0.4739513695240021, -0.05485048517584801, -1.9847761392593384, -0.040792316198349, -0.0011881680693477392, -0.030221382156014442, -0.00416696909815073, -0.005668873433023691, -0.2968044877052307, -0.004782546777278185, -0.009663233533501625, -0.03542882949113846], "finish_reason": "stop"}], "metrics": {"energy": 29.767439517974854, "energy_per_token": 1.3530654326352207, "time": 0.86123925, "time_per_token": 0.039147238636363636}}
{"outputs": [{"text": "matches = []\n    for extension in extensions:\n        matches.extend(glob.glob(os.path.join(directory, f'*{extension}')))\n    for match in matches:\n        with open(match, encoding='utf-8') as f:\n            if pattern in f.read():\n                matches.append(Path(match))\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "matches", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'", "*{", "extension", "}'", ")))", "\n", "    ", "for", " match", " in", " matches", ":", "\n", "        ", "with", " open", "(", "match", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "if", " pattern", " in", " f", ".", "read", "():", "\n", "                ", "matches", ".", "append", "(", "Path", "(", "match", "))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3152105808258057, -0.005684282630681992, -0.005298262927681208, -0.006355550140142441, -0.003712667850777507, -0.003756254445761442, -1.9405213594436646, -0.7553768157958984, -0.0021962826140224934, -0.09149876236915588, -0.23595397174358368, -0.001834853901527822, -0.07056573778390884, -0.004100605845451355, -0.4934159517288208, -8.976056415122002e-05, -0.0001280225842492655, -0.0010099078062921762, -0.0012317459331825376, -0.0009646529797464609, -0.01717105135321617, -0.0007151191821321845, -0.945661187171936, -0.39351195096969604, -1.3064820766448975, -0.027627920731902122, -0.019077155739068985, -0.012047737836837769, -0.002032240154221654, -0.25070422887802124, -2.1219005584716797, -0.6546586751937866, -0.013644524849951267, -0.048889342695474625, -0.0035405587404966354, -0.0021751096937805414, -0.0013058000477030873, -0.5598192811012268, -0.012536530382931232, -0.0002431573811918497, -0.018535733222961426, -0.30025073885917664, -2.0806665420532227, -0.10306292027235031, -0.09066380560398102, -0.20076899230480194, -0.0014085381990298629, -0.03786925971508026, -0.0004612335760612041, -0.18431754410266876, -0.029566412791609764, -0.0009984752396121621, -0.0011151769431307912, -1.2233115434646606, -2.930830478668213, -0.898449182510376, -0.055240292102098465, -0.008816600777208805, -0.0006864098832011223, -0.3931782841682434, -0.008758816868066788, -0.0009210634743794799, -0.7580410838127136, -0.003578807692974806, -0.014423515647649765, -0.0011710221879184246, -0.5698509216308594, -0.0031554929446429014, -0.014856182038784027, -0.23768968880176544, -0.002879760693758726, -0.1402156502008438, -0.062034279108047485, -0.045008584856987, -0.3820933997631073, -0.008840114809572697, -0.7484380006790161], "finish_reason": "stop"}], "metrics": {"energy": 119.8750223236084, "energy_per_token": 1.4442773773928723, "time": 3.5729291, "time_per_token": 0.04304733855421687}}
{"outputs": [{"text": "# ------------------------------------------------------------------------------------------------------------------\n    # Example:\n    #\n    # ```python\n    # import tempfile\n    # temp_dir = tempfile.mkdtemp()\n    # with open(os.path.join(temp_dir, 'hello.txt'), 'w') as f:\n    #     _ = f.write('Hello, this is a test file.')\n    # with open(os.path.join(temp_dir, 'hello.md'), 'w') as f:\n    #     _ = f.write('# Notes')\n    # matches = task_func('Hello', temp_dir, ['*.txt', '*.md'])\n    # print(matches[0])  # 'hello.txt'\n    # ```\n    # ------------------------------------------------------------------------------------------------------------------\n    # ---", "tokens": ["#", " ", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "\n", "    ", "#", " Example", ":", "\n", "    ", "#", "\n", "    ", "#", " ", "```", "python", "\n", "    ", "#", " import", " temp", "file", "\n", "    ", "#", " temp", "_", "dir", " =", " temp", "file", ".", "mk", "d", "temp", "()", "\n", "    ", "#", " with", " open", "(", "os", ".", "path", ".", "join", "(", "temp", "_", "dir", ",", " '", "hello", ".", "txt", "')", ",", " '", "w", "')", " as", " f", ":", "\n", "    ", "#", "     ", "_", " =", " f", ".", "write", "('", "Hello", ",", " this", " is", " a", " test", " file", ".", "')", "\n", "    ", "#", " with", " open", "(", "os", ".", "path", ".", "join", "(", "temp", "_", "dir", ",", " '", "hello", ".", "md", "')", ",", " '", "w", "')", " as", " f", ":", "\n", "    ", "#", "     ", "_", " =", " f", ".", "write", "('#", " Notes", "')", "\n", "    ", "#", " matches", " =", " task", "_", "func", "('", "Hello", "'", ",", " temp", "_", "dir", ",", " ['", "*", ".", "txt", "'", ",", " '", "*", ".", "md", "'])", "\n", "    ", "#", " print", "(", "matches", "[", "0", "])", "  ", "#", " '", "hello", ".", "txt", "'", "\n", "    ", "#", " ", "```", "\n", "    ", "#", " ", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "\n", "    ", "#", " ", "---"], "logprobs": [-2.8015050888061523, -4.760345458984375, -1.6027815341949463, -0.5153291821479797, -0.0678119882941246, -0.07234954088926315, -0.0452939048409462, -0.04043472930788994, -0.04805551841855049, -0.028777938336133957, -0.033882152289152145, -0.029350195080041885, -0.04226938635110855, -0.029769740998744965, -0.03539557754993439, -0.0561668761074543, -0.03194739669561386, -0.027454311028122902, -0.0491941012442112, -0.029592221602797508, -0.057342078536748886, -0.04673738777637482, -0.056623198091983795, -0.07199884206056595, -0.07840114831924438, -0.14963342249393463, -0.20264926552772522, -0.12906700372695923, -0.11802905052900314, -0.05744630843400955, -0.08883529156446457, -0.0706317201256752, -0.08918122202157974, -0.06759341061115265, -0.04806847125291824, -0.023996397852897644, -0.03299765661358833, -0.035112712532281876, -0.24387836456298828, -1.12187922000885, -1.2104442119598389, -0.08821555227041245, -0.6462107300758362, -4.839764595031738, -1.8675357103347778, -0.6074891090393066, -0.047696199268102646, -0.12647287547588348, -2.5638670921325684, -0.005428691860288382, -0.014632412232458591, -3.1053929328918457, -1.6717324256896973, -0.6732271909713745, -0.030184023082256317, -0.002173206303268671, -0.0010268182959407568, -0.6185889840126038, -0.28091466426849365, -0.00021217002358753234, -0.033383164554834366, -0.004946731962263584, -3.0040289857424796e-05, -0.21851132810115814, -0.003964660689234734, -0.0008469808381050825, -0.0013272295473143458, -0.004769733641296625, -7.891343557275832e-05, -2.8490614567999728e-05, -0.00015639036428183317, -0.0003771070914808661, -0.00011824862303910777, -0.002004044596105814, -0.001335563138127327, -0.0017553649377077818, -3.504691630951129e-05, -0.07335036247968674, -0.0005871717585250735, -0.0006108802044764161, -0.003626557532697916, -4.660974445869215e-05, -5.590759246842936e-05, -0.0002628219372127205, -1.4305012882687151e-05, -5.447716102935374e-05, -0.0005715643637813628, -0.00013624693383462727, -7.402622577501461e-05, -0.00012599628826137632, -0.003536876291036606, -0.026617739349603653, -0.0011879300000146031, -0.0028219898231327534, -0.00015424491721205413, -0.00013982271775603294, -0.0010493254521861672, -0.0010453957365825772, -0.00024911639047786593, -0.00011932138295378536, -0.000263894529780373, -0.0002712835557758808, -0.0010378933511674404, -0.0007241725688800216, -0.0013850866816937923, -0.03600361943244934, -0.024989580735564232, -0.00036507140612229705, -0.00026294111739844084, -1.9073304429184645e-05, -0.00030489088385365903, -0.003260536352172494, -0.0039963629096746445, -0.002574108075350523, -0.0020021409727633, -0.0006576997111551464, -0.0008939084364101291, -0.00040463366894982755, -0.0004657614335883409, -0.0024138144217431545, -0.0013543728273361921, -0.0005017452058382332, -0.0022326798643916845, -9.715084888739511e-05, -0.11639808118343353, -0.00025567124248482287, -8.95221673999913e-05, -0.00011562632425921038, -0.0005477358354255557, -6.318072337307967e-06, -5.709961988031864e-05, -1.8358061424805783e-05, -2.109982233378105e-05, -9.548207890475169e-05, -1.6569954823353328e-05, -1.4543427823809907e-05, -3.838465272565372e-05, -0.0001726001501083374, -0.03055049665272236, -0.002290603704750538, -0.003073731902986765, -6.842378934379667e-05, -1.883488948806189e-05, -0.0001284993631998077, -9.667406266089529e-05, -2.407998726994265e-05, -2.169585604860913e-05, -6.532455881824717e-05, -9.285972191719338e-05, -0.00010179955279454589, -7.211902266135439e-05, -2.861018856492592e-06, -0.002086011925712228, -0.001090646837837994, -3.182837463100441e-05, -0.00013660451804753393, -3.576278118089249e-07, -0.0002588890492916107, -0.019544638693332672, -0.017838284373283386, -0.0005438040825538337, -0.00022015532886143774, -0.00661161495372653, -0.00011324241495458409, -0.04043770581483841, -0.0008111285860650241, -0.02397579699754715, -0.007404739502817392, -0.005961375776678324, -0.028140336275100708, -0.009030098095536232, -0.002125506056472659, -4.732496745418757e-05, -0.004356417804956436, -5.721882189391181e-05, -7.450303382938728e-05, -0.0008295908919535577, -0.016230005770921707, -0.0017396567855030298, -0.0005667987279593945, -0.0011620919685810804, -0.0032116996590048075, -0.00010990492592100054, -0.0010843356139957905, -0.000501983508002013, -0.00012683063687290996, -0.00012659224739763886, -0.012968955561518669, -0.0031478875316679478, -0.0008844992844387889, -0.00011920218821614981, -1.8468281030654907, -0.07231893390417099, -0.5848748683929443, -0.5693672299385071, -0.0005750194541178644, -0.3445122539997101, -2.5582351684570312, -0.002889864146709442, -4.143691539764404, -0.9572932720184326, -0.0034836577251553535, -0.009717540815472603, -0.007560449652373791, -0.03324883431196213, -0.0017269235104322433, -0.0008892634068615735, -0.1118399128317833, -0.0017498909728601575, -0.0008361419313587248, -0.19035829603672028, -0.013395900838077068, -0.6463309526443481, -0.0025584129616618156, -0.000545472139492631, -4.386805812828243e-05, -3.218599158572033e-05, -1.8000440832111053e-05, -6.9141146923357155e-06, -3.3854863431770355e-05, -4.124556289752945e-05, -4.410646579344757e-05, -7.271740287251305e-06, -3.4570634852570947e-06, -4.51792984677013e-05, -6.890059739816934e-05, -6.532455881824717e-05, -2.1815061700181104e-05, -3.4570634852570947e-06, -4.029192859889008e-05, -0.0001280225842492655, -3.635817120084539e-05, -0.0002553137019276619, -2.2649508537142538e-05, -0.00021324267436284572, -0.0004020121123176068, -0.006737255025655031, -0.00025960413040593266, -0.00032062159152701497, -0.0001652104256208986, -0.0001227780303452164, -0.00011824862303910777, -0.0006779517862014472, -0.001258891774341464, -0.0006936766440048814, -0.00022599527437705547, -0.00021765247220173478, -0.0003914067056030035, -0.00023100091493688524, -0.001549473381601274, -0.0048939441330730915, -0.03211157023906708, -0.741693913936615, -1.5294773578643799, -1.4410138130187988, -0.15934491157531738], "finish_reason": "length"}], "metrics": {"energy": 275.25253841876975, "energy_per_token": 1.0752052281983193, "time": 11.333875, "time_per_token": 0.04427294921875}}
{"outputs": [{"text": "matches = []\n\n    # Use Path.glob() to match all files in the given directory and extensions\n    for path in Path(directory).glob(f\"**/*.{','.join(extensions)}\"):\n        if re.search(pattern, path.read_text(encoding='utf-8'), re.IGNORECASE):\n            matches.append(path.resolve())\n\n    return matches", "tokens": ["matches", " =", " []", "\n", "\n", "    ", "#", " Use", " Path", ".", "glob", "()", " to", " match", " all", " files", " in", " the", " given", " directory", " and", " extensions", "\n", "    ", "for", " path", " in", " Path", "(", "directory", ")", ".", "glob", "(", "f", "\"", "**", "/*", ".", "{'", ",", "'", ".", "join", "(", "extensions", ")}", "\"", "):", "\n", "        ", "if", " re", ".", "search", "(", "pattern", ",", " path", ".", "read", "_", "text", "(", "encoding", "='", "utf", "-", "8", "')", ",", " re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "            ", "matches", ".", "append", "(", "path", ".", "resolve", "())", "\n", "\n", "    ", "return", " matches", "\n", "\n", "#"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -1.7767529487609863, -0.0003554189461283386, -2.2638492584228516, -4.138430118560791, -2.540226459503174, -1.5219463109970093, -0.1700623780488968, -0.5040506720542908, -0.4033811390399933, -2.1224727630615234, -1.2099955081939697, -0.2080472856760025, -0.2837670147418976, -0.12995374202728271, -2.8953254222869873, -0.013607834465801716, -2.9983036518096924, -1.8798837661743164, -0.31083396077156067, -0.0024758896324783564, -0.3797195851802826, -2.056988000869751, -0.015705933794379234, -0.03821927681565285, -0.001482460182160139, -0.0019330164650455117, -0.0002849888114724308, -0.00015138434537220746, -0.028286708518862724, -0.11565301567316055, -0.449577659368515, -0.7875447869300842, -0.6594296097755432, -0.014068360440433025, -0.16092553734779358, -0.20754225552082062, -1.0939706563949585, -0.03910260647535324, -9.405170567333698e-05, -0.00033778208307921886, -0.0027921521104872227, -0.00853592436760664, -0.006229270249605179, -0.0005119920242577791, -0.005480028688907623, -0.008195816539227962, -0.07893513888120651, -1.6090577840805054, -0.46116000413894653, -3.766942609217949e-05, -0.021351246163249016, -0.001964307390153408, -0.024197136983275414, -0.043368227779865265, -0.14489442110061646, -0.00339633971452713, -0.08626106381416321, -1.5497195136049413e-06, -0.005899990908801556, -1.8789443969726562, -0.016492819413542747, -0.19832280278205872, -0.05538094788789749, -0.06123478710651398, -0.0002698534226510674, -0.39216306805610657, -0.051203858107328415, -0.13727408647537231, -1.5616295058862306e-05, -0.2154262810945511, -2.3007127310847864e-05, -4.851700214203447e-05, -0.00012838016846217215, -0.05111857131123543, -0.035284191370010376, -0.0028109345585107803, -0.05018650367856026, -0.0016102931695058942, -0.00038223114097490907, -0.00031990656862035394, -0.1448180079460144, -0.9384123086929321, -1.1657896041870117, -0.04100538790225983, -0.023977892473340034, -0.18808531761169434, -0.001831641187891364, -0.04302686080336571, -0.013796797022223473, -0.33983999490737915, -0.00548334838822484, -2.4189136028289795], "finish_reason": "stop"}], "metrics": {"energy": 112.2686580944061, "energy_per_token": 1.1694651884833969, "time": 4.0044765, "time_per_token": 0.041713296875}}
{"outputs": [{"text": "matches = []\n    extensions_glob = '*.' + '|*.'.join(extensions)\n\n    for extension in extensions:\n        for pattern in glob.glob(os.path.join(directory, f'*{extension}')):\n            with open(pattern, 'rt') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    matches.append(Path(pattern))\n\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "extensions", "_", "glob", " =", " '", "*", ".", "'", " +", " '", "|", "*", ".", "'", ".", "join", "(", "extensions", ")", "\n", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "for", " pattern", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'", "*{", "extension", "}'", "))", ":", "\n", "            ", "with", " open", "(", "pattern", ",", " '", "rt", "')", " as", " f", ":", "\n", "                ", "if", " re", ".", "search", "(", "pattern", ",", " f", ".", "read", "()", ",", " re", ".", "IGN", "ORE", "C", "ASE", "):", "\n", "                ", "    ", "matches", ".", "append", "(", "Path", "(", "pattern", "))", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -3.2130062580108643, -1.9986915588378906, -3.5021607875823975, -0.08253664523363113, -0.7994375228881836, -0.9566649794578552, -0.15487053990364075, -0.35371291637420654, -0.03418403118848801, -0.2085014432668686, -1.0736899375915527, -0.5960203409194946, -0.0018137923907488585, -0.00048708971007727087, -0.00025507534155622125, -0.00036149643710814416, -0.01809084229171276, -0.02920745126903057, -0.011049747467041016, -0.054825883358716965, -1.9802755117416382, -0.00027652730932459235, -0.20364467799663544, -1.7259000539779663, -0.2618550658226013, -0.058582235127687454, -0.01422679703682661, -0.0024341498501598835, -0.006255569867789745, -1.0752679109573364, -3.5176966190338135, -0.6941273212432861, -0.23712360858917236, -0.0012319840025156736, -0.40677934885025024, -0.0108132129535079, -0.5555396676063538, -3.659658250398934e-05, -0.00022289653134066612, -0.002130026463419199, -0.002039853949099779, -0.006886438932269812, -0.017956316471099854, -0.0018898261478170753, -1.9827046394348145, -1.130303144454956, -0.7067674994468689, -0.5588745474815369, -0.105362169444561, -0.00829631183296442, -0.0020523453131318092, -0.006799535825848579, -0.0072391824796795845, -1.2460200786590576, -0.021557651460170746, -0.0004924515378661454, -0.011679013259708881, -0.21575433015823364, -0.20562273263931274, -2.902268886566162, -0.4168042838573456, -0.0004151197790633887, -0.14662550389766693, -0.022162387147545815, -0.0013615157222375274, -0.002300356514751911, -2.0156545639038086, -0.1468062698841095, -5.3881147323409095e-05, -0.045067958533763885, -0.0040996563620865345, -0.057712577283382416, -0.06372866779565811, -0.09192891418933868, -0.0062490543350577354, -0.0016448076348751783, -0.007966766133904457, -0.08983894437551498, -0.1411324143409729, -3.981510963058099e-05, -0.5824542045593262, -2.2411095415009186e-05, -3.790783375734463e-05, -0.00010239553375868127, -0.046822138130664825, -0.010736675001680851, -0.00042024365393444896, -0.0017579830018803477, -0.012537590228021145, -0.0045217410661280155, -0.0019480077316984534, -0.0012061471352353692, -0.1419721096754074, -0.00325863528996706, -0.05040132626891136, -0.20285531878471375, -0.002393716247752309, -0.3168950080871582, -0.007826496846973896, -0.04548027738928795, -0.03704273700714111, -0.7728530168533325, -0.010576151311397552, -1.0399131774902344], "finish_reason": "stop"}], "metrics": {"energy": 113.15956111717225, "energy_per_token": 1.038161111166718, "time": 4.6422668, "time_per_token": 0.042589603669724765}}
{"outputs": [{"text": "paths = glob.glob(os.path.join(directory, f'{pattern}.*'))\n    return [p for p in paths if p.endswith(tuple(extensions))]", "tokens": ["paths", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "'{", "pattern", "}", ".", "*", "'))", "\n", "    ", "return", " [", "p", " for", " p", " in", " paths", " if", " p", ".", "end", "sw", "ith", "(", "tuple", "(", "extensions", "))", "]", "\n", "\n", "if"], "logprobs": [-3.4924192428588867, -0.04510852321982384, -0.9015457630157471, -0.0009018882992677391, -0.11397774517536163, -0.005084916017949581, -0.3374280631542206, -4.3748852476710454e-05, -0.00021026308240834624, -0.0015773248160257936, -0.001647544908337295, -0.0022737146355211735, -0.03356393054127693, -0.001057661371305585, -1.035035252571106, -1.9191687107086182, -0.5692461729049683, -0.12850713729858398, -0.833005428314209, -0.6229435801506042, -0.275669127702713, -0.027343658730387688, -0.11144319176673889, -1.6703965663909912, -0.19705839455127716, -1.7750163078308105, -0.017939338460564613, -0.0724598690867424, -0.0028843963518738747, -0.033141128718853, -0.021249836310744286, -1.314257025718689, -0.05184764415025711, -1.056962013244629, -9.655486064730212e-05, -1.1920928244535389e-07, -0.0743904784321785, -0.7662773728370667, -0.04046884551644325, -0.04345143958926201, -0.007935662753880024, -0.0540877990424633, -0.05084533244371414, -0.00978341419249773, -1.5993928909301758], "finish_reason": "stop"}], "metrics": {"energy": 30.63109198284149, "energy_per_token": 0.6806909329520331, "time": 1.8965609, "time_per_token": 0.04214579777777778}}
{"outputs": [{"text": "matches = []\n    for extension in extensions:\n        for file in glob.glob(os.path.join(directory, extension)):\n            if re.search(pattern, Path(file).read_text().lower()):\n                matches.append(file)\n    return matches", "tokens": ["matches", " =", " []", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " extension", "))", ":", "\n", "            ", "if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "file", ")", ".", "read", "_", "text", "()", ".", "lower", "()", "):", "\n", "                ", "matches", ".", "append", "(", "file", ")", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.9827374815940857, -0.02512490563094616, -0.23647600412368774, -0.003444929840043187, -0.18543674051761627, -0.4026826322078705, -1.3152105808258057, -0.005684282630681992, -0.005298262927681208, -0.006355550140142441, -0.003712667850777507, -0.003756254445761442, -1.0799542665481567, -0.8990645408630371, -0.5719810724258423, -0.1282786875963211, -0.0002616301644593477, -0.2884967029094696, -0.003532837610691786, -0.4295755922794342, -5.6980417866725475e-05, -8.475421054754406e-05, -0.0027617192827165127, -0.0007347744540311396, -0.0008347125840373337, -0.007849679328501225, -0.0008425738196820021, -0.47544923424720764, -0.05762536823749542, -0.0002308817347511649, -0.004120076075196266, -0.002635579090565443, -1.8927192687988281, -0.2695426642894745, -8.034383063204587e-05, -0.03056645393371582, -0.002602525521069765, -0.024650022387504578, -0.02619500830769539, -0.45949870347976685, -0.0009991897968575358, -0.0034419598523527384, -0.003510861424729228, -0.0008250646642409265, -0.04535098373889923, -5.304672595229931e-05, -0.0022460015024989843, -0.2461482733488083, -2.8058629035949707, -0.3780876696109772, -0.027169885113835335, -0.14805087447166443, -0.011067314073443413, -0.0007637205999344587, -0.008279523812234402, -0.0029986200388520956, -0.0007952864980325103, -0.0010979106882587075, -0.434701144695282, -0.0016722993459552526, -0.0010988633148372173, -0.1556330919265747, -0.012312947772443295, -0.017050232738256454, -0.5129958391189575, -0.0109679214656353, -0.7589291930198669], "finish_reason": "stop"}], "metrics": {"energy": 62.206845459938044, "energy_per_token": 0.9284603799990753, "time": 2.7468262, "time_per_token": 0.04099740597014925}}
{"outputs": [{"text": "files_list = glob.glob(os.path.join(directory, f\"*{'|'.join(extensions)}\"))\n    pattern = pattern.lower()\n    matches = [f for f in files_list if re.search(pattern, Path(f).read_text().lower())]\n    return matches", "tokens": ["files", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "\"", "*{", "'", "|", "'", ".", "join", "(", "extensions", ")}", "\"", "))", "\n", "    ", "pattern", " =", " pattern", ".", "lower", "()", "\n", "    ", "matches", " =", " [", "f", " for", " f", " in", " files", "_", "list", " if", " re", ".", "search", "(", "pattern", ",", " Path", "(", "f", ")", ".", "read", "_", "text", "()", ".", "lower", "()", ")]", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-3.1905946731567383, -2.7047746181488037, -1.77304208278656, -0.027833612635731697, -1.2212533950805664, -0.0008002892718650401, -0.052846916019916534, -0.00990771222859621, -0.4835510849952698, -4.60137271147687e-05, -0.00029452278977259994, -0.001746439840644598, -0.0017114529618993402, -0.0025081150233745575, -0.03703193739056587, -0.0015814905054867268, -0.9908204078674316, -0.9032425880432129, -0.5733320116996765, -1.5204155445098877, -0.8099589943885803, -0.0037879636511206627, -9.965400386136025e-05, -0.00017796363681554794, -0.020807668566703796, -0.023295411840081215, -0.05818045511841774, -0.00289022084325552, -0.11405432224273682, -0.00786540936678648, -0.11584307998418808, -2.8539650440216064, -0.3808485269546509, -2.136462688446045, -0.04944748431444168, -0.19250202178955078, -0.000795882020611316, -0.039809443056583405, -0.128774955868721, -0.7245628237724304, -0.039569418877363205, -1.4129000902175903, -1.397531509399414, -0.07814419269561768, -0.0030901322606951, -0.0021029042545706034, -0.005411855410784483, -8.451581379631534e-05, -1.0251946150674485e-05, -0.0209959764033556, -1.0520498752593994, -7.331102824537084e-05, -0.04313282296061516, -0.007695906795561314, -0.22534744441509247, -0.009057151153683662, -0.47753071784973145, -0.0006392342620529234, -0.0068942527286708355, -0.0011410161387175322, -0.00017951308109331876, -0.22265209257602692, -5.2689116273541003e-05, -0.0021020714193582535, -0.11653898656368256, -0.16425290703773499, -0.0025121578946709633, -0.048574384301900864, -0.0373382642865181, -0.004361284431070089, -0.10668748617172241, -0.12093007564544678, -0.039232827723026276, -0.4856392741203308, -0.010450167581439018, -0.5846323370933533], "finish_reason": "stop"}], "metrics": {"energy": 79.96441604614259, "energy_per_token": 1.052163369028192, "time": 3.16073, "time_per_token": 0.04158855263157895}}
