{"outputs": [{"text": "# Input validation\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n\n    if data.empty:\n        raise ValueError(\"Data must not be empty.\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data.\")\n\n    if not data.dtypes[target_column].kind == 'i' and not data.dtypes[target_column].kind == 'f':\n        raise ValueError(\"target_column must contain only numeric values.\")\n\n    if data.isnull().values.any():\n        raise ValueError(\"target_column must not contain null values.\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1.\")\n\n    # Train model\n    x = data.drop(columns=[", "tokens": ["#", " Input", " validation", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Data", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Data", " must", " not", " be", " empty", ".", "\"", ")", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " column", " of", " data", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "kind", " ==", " '", "i", "'", " and", " not", " data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "kind", " ==", " '", "f", "':", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " must", " contain", " only", " numeric", " values", ".", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "is", "null", "()", ".", "values", ".", "any", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " must", " not", " contain", " null", " values", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " must", " be", " an", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n", "\n", "    ", "#", " Train", " model", "\n", "    ", "x", " =", " data", ".", "drop", "(", "columns", "=["], "logprobs": [-1.6118500232696533, -3.3660426139831543, -0.6744553446769714, -0.19130674004554749, -0.038530971854925156, -0.07788298279047012, -0.041494984179735184, -0.018424207344651222, -0.0002768848498817533, -0.011816859245300293, -0.0007428746903315187, -0.008156443014740944, -1.490105023549404e-05, -0.016962919384241104, -0.008208704181015491, -0.005252846051007509, -0.006823452655225992, -0.0076658595353364944, -0.00884968601167202, -2.7418097943154862e-06, -0.38599151372909546, -0.28337979316711426, -2.7469003200531006, -0.6083501577377319, -0.0052580637857317924, -0.2757159173488617, -1.2351131439208984, -0.15892155468463898, -0.02753700315952301, -1.0207083225250244, -0.013805262744426727, -0.0012865131720900536, -0.0063165780156850815, -0.8050339818000793, -0.00016604475968051702, -0.03186195343732834, -0.10213790833950043, -0.0017402517842128873, -0.03132140263915062, -0.010598327033221722, -0.0016318351263180375, -0.0026016931515187025, -0.00029094755882397294, -0.0003812778159044683, -7.152555099310121e-07, -0.021939080208539963, -0.0032587540335953236, -0.11337552219629288, -0.4721097946166992, -0.08170472085475922, -0.001968114636838436, -0.00574971130117774, -0.07639776915311813, -0.0011947167804464698, -0.00012516192509792745, -0.00158791767898947, -0.005765830632299185, -0.0001525762490928173, -0.0688239261507988, -0.3530752956867218, -0.00013374387344811112, -2.2291887944447808e-05, -0.004149161744862795, -1.1205610462639015e-05, -0.057241328060626984, -0.059367336332798004, -0.0009390473715029657, -0.01864350400865078, -0.002103974809870124, -0.0025638823863118887, -0.0009754904895089567, -0.0020157035905867815, -9.536738616588991e-07, -0.0052032764069736, -0.3124663531780243, -0.7443657517433167, -0.01675439067184925, -0.005050757434219122, -1.6450614929199219, -0.010676408186554909, -0.16508109867572784, -0.13098223507404327, -0.24304965138435364, -0.2783758342266083, -0.1969984918832779, -0.004170649219304323, -0.0009334497735835612, -0.001887565478682518, -0.0036501940339803696, -0.0002383901592111215, -0.11823423206806183, -0.4128962755203247, -0.2737504839897156, -1.0681452751159668, -0.29439276456832886, -3.6000557884108275e-05, -0.1302618831396103, -0.004215402994304895, -4.768370445162873e-07, -1.5497195136049413e-06, -0.000537727726623416, -0.10771084576845169, -0.060385726392269135, -2.0481956005096436, -0.17216260731220245, -0.10873359441757202, -0.9357811808586121, -0.13577903807163239, -0.1213424801826477, -0.011753476224839687, -0.0046002985909581184, -0.00034540885826572776, -3.40932747349143e-05, -0.0012723454274237156, -0.006806403398513794, -2.7418097943154862e-06, -2.0265558760002023e-06, -0.000550357042811811, -0.001972754718735814, -0.05478503182530403, -0.010311896912753582, -0.013063560239970684, -0.09260232746601105, -0.023219123482704163, -0.005213000811636448, -0.008040323853492737, -0.006279973778873682, -0.0021808191668242216, -4.291525328881107e-06, -0.015342430211603642, -0.14614912867546082, -1.0837386846542358, -0.017884070053696632, -0.00315644359216094, -0.4346095323562622, -0.8207682371139526, -1.631004810333252, -0.5648561120033264, -0.02283725142478943, -0.11934477835893631, -0.010294788517057896, -0.0010278901318088174, -0.00219247629866004, -0.01011602021753788, -0.0003670972364488989, -0.21545818448066711, -3.0722460746765137, -0.15718403458595276, -0.5206692218780518, -0.40971192717552185, -0.0003723404952324927, -2.9801878554280847e-05, -0.11922840029001236, -1.597391747054644e-05, -0.0016852713888511062, -0.03534253314137459, -0.018420813605189323, -0.004598281346261501, -0.00916618388146162, -0.001655637752264738, -4.768360213347478e-06, -0.024779578670859337, -0.005733947269618511, -2.611238479614258, -0.003309370717033744, -0.0010091932490468025, -0.20392480492591858, -0.22899189591407776, -0.016437705606222153, -1.7152740955352783, -0.1614963561296463, -0.06207158789038658, -0.017201635986566544, -0.0007649118197150528, -0.004385378211736679, -0.003401567228138447, -0.000553335587028414, -0.31822577118873596, -0.1737232208251953, -0.19446541368961334, -0.0002330270071979612, -0.07497427612543106, -2.622600959512056e-06, -4.649054244509898e-05, -0.001207337831147015, -0.039627280086278915, -0.032299723476171494, -0.0015019814018160105, -0.003707560710608959, -0.0014717471785843372, -0.0013772298116236925, -1.2278481335670222e-05, -0.02110978402197361, -0.006660049315541983, -0.0685754120349884, -0.005171730648726225, -0.003139450214803219, -0.05436015874147415, -0.0055983420461416245, -0.07542198896408081, -0.06573010236024857, -0.1414826512336731, -0.002519292524084449, -0.000163541772053577, -0.0015439982526004314, -0.021205371245741844, -9.810443589231e-05, -0.013054264709353447, -0.534363329410553, -1.0155256986618042, -0.006544111296534538, -0.3353441059589386, -0.011510156095027924, -3.4570634852570947e-06, -1.2159273865108844e-05, -0.04976386949419975, -0.01648402400314808, -0.000860201776959002, -0.01267990842461586, -0.000742398202419281, -0.0034361386206001043, -0.0005578630371019244, -0.00033563701435923576, -2.264974000354414e-06, -0.00722486199811101, -0.0023914568591862917, -0.023698529228568077, -0.006804508622735739, -0.00114994659088552, -0.04630179703235626, -0.013704143464565277, -0.26399120688438416, -0.010227179154753685, -0.0002307625545654446, -0.005033202935010195, -0.0008250646642409265, -0.00014661667228210717, -0.08691971749067307, -0.0021823656279593706, -0.00025602878304198384, -0.0021226510871201754, -0.019070254638791084, -0.0037488911766558886, -0.3961103558540344, -2.0915026664733887, -1.065894603729248, -0.2760568857192993, -0.047006748616695404, -1.8780114650726318, -0.19114655256271362, -0.0193469375371933, -0.30398479104042053, -0.0798460841178894, -0.039203137159347534, -0.36009275913238525, -1.145658254623413], "finish_reason": "length"}], "metrics": {"energy": 904.4616722259517, "energy_per_token": 3.533053407132624, "time": 22.279505, "time_per_token": 0.08702931640625}}
{"outputs": [{"text": "# Check requirements\n    if 'pandas' not in globals():\n        raise ModuleNotFoundError('The module \"pandas\" is required.')\n    if 'LinearRegression' not in globals():\n        raise ModuleNotFoundError('The module \"sklearn.linear_model.LinearRegression\" is required.')\n    if 'train_test_split' not in globals():\n        raise ModuleNotFoundError('The module \"sklearn.model_selection.train_test_split\" is required.')\n    if 'np' not in globals():\n        raise ModuleNotFoundError('The module \"numpy\" is required.')\n\n    # Check data\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame.')\n    if data.empty:\n        raise ValueError('data is empty')\n    if target_column not in data.columns:\n        raise ValueError('target_column is not a column of data')\n    if not data[target_column].notna().all():\n        raise ValueError('target_column contains missing values')\n    if not data[target_column]", "tokens": ["#", " Check", " requirements", "\n", "    ", "if", " '", "pand", "as", "'", " not", " in", " glob", "als", "():", "\n", "        ", "raise", " Module", "NotFound", "Error", "('", "The", " module", " \"", "pand", "as", "\"", " is", " required", ".", "')", "\n", "    ", "if", " '", "Linear", "Reg", "ression", "'", " not", " in", " glob", "als", "():", "\n", "        ", "raise", " Module", "NotFound", "Error", "('", "The", " module", " \"", "sk", "learn", ".", "linear", "_", "model", ".", "Linear", "Reg", "ression", "\"", " is", " required", ".", "')", "\n", "    ", "if", " '", "train", "_", "test", "_", "split", "'", " not", " in", " glob", "als", "():", "\n", "        ", "raise", " Module", "NotFound", "Error", "('", "The", " module", " \"", "sk", "learn", ".", "model", "_", "selection", ".", "train", "_", "test", "_", "split", "\"", " is", " required", ".", "')", "\n", "    ", "if", " '", "np", "'", " not", " in", " glob", "als", "():", "\n", "        ", "raise", " Module", "NotFound", "Error", "('", "The", " module", " \"", "numpy", "\"", " is", " required", ".", "')", "\n", "\n", "    ", "#", " Check", " data", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", ".", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " empty", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " is", " not", " a", " column", " of", " data", "')", "\n", "    ", "if", " not", " data", "[", "target", "_", "column", "]", ".", "not", "na", "()", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " contains", " missing", " values", "')", "\n", "    ", "if", " not", " data", "[", "target", "_", "column", "]"], "logprobs": [-1.6118500232696533, -1.9385334253311157, -3.594961166381836, -0.2621055245399475, -0.024026308208703995, -0.7900814414024353, -0.9667928814888, -0.04955696314573288, -1.07287787614041e-05, -0.038209062069654465, -0.003453958546742797, -8.821448318485636e-06, -0.7726715207099915, -2.9802276912960224e-06, -0.025381440296769142, -0.014044969342648983, -0.008539234288036823, -0.032546576112508774, -1.681682825088501, -0.0010374169796705246, -9.917721035890281e-05, -0.5253840684890747, -0.5343527793884277, -0.7411178350448608, -0.8433132767677307, -0.0023486430291086435, -3.790783375734463e-05, -0.0009192770230583847, -0.21440905332565308, -1.2965058088302612, -1.8793939352035522, -0.12198108434677124, -0.004532895982265472, -0.10560750961303711, -0.01718897931277752, -0.006382794119417667, -2.4895246028900146, -0.0005919373361393809, -2.3007127310847864e-05, -0.0001370812824461609, -0.0007151191821321845, -7.510157047363464e-06, -0.004324252251535654, -6.3774932641536e-05, -0.016643134877085686, -0.001973706530407071, -0.0025139416102319956, -0.0007460909546352923, -0.0025176277849823236, -0.00010227633902104571, -3.313963316031732e-05, -0.019598646089434624, -0.009579877369105816, -0.07572440057992935, -0.010043442249298096, -0.28667065501213074, -0.0004144048143643886, -0.014175672084093094, -0.004823002498596907, -0.0016687290044501424, -0.0013168720761314034, -0.04605979472398758, -0.0036954462993890047, -0.00022849810193292797, -0.0007082099909894168, -0.0024301065132021904, -0.002405370818451047, -0.0006859333370812237, -0.009605617262423038, -0.0019234981155022979, -0.002146204235032201, -0.023952404037117958, -0.0032661210279911757, -0.00612536771222949, -0.11178363114595413, -0.00019178935326635838, -4.994744449504651e-05, -6.687417771900073e-05, -5.018585216021165e-05, -0.00014911970356479287, -0.0004828002711292356, -2.062299427052494e-05, -0.00012694983161054552, -4.768370445162873e-07, -0.0023321115877479315, -0.0012842511059716344, -0.0018629353726282716, -0.0005391574813984334, -0.0007943335804156959, -2.9682672902708873e-05, -7.152555099310121e-07, -0.0032958255615085363, -0.0010998159414157271, -0.0376485139131546, -0.0014040146488696337, -0.005862896796315908, -0.0006531727267429233, -0.00014208737411536276, -0.010786561295390129, -0.0008180370787158608, -0.002260274486616254, -0.011561652645468712, -0.001604818389751017, -0.00021479207498487085, -0.00016080040950328112, -0.00014530557382386178, -0.0005758534534834325, -0.0018898261478170753, -0.00100740697234869, -0.0002706876548472792, -0.008007566444575787, -0.00029309268575161695, -0.0014336556196212769, -0.110080286860466, -0.03144131973385811, -0.018473593518137932, -0.4024321138858795, -0.015691382810473442, -0.003370321122929454, -3.814624506048858e-05, -0.0004667146422434598, -0.0033325394615530968, -0.0067289662547409534, -0.0018640062771737576, -0.0028191369492560625, -0.0016113643068820238, -0.0014315128792077303, -5.0424259825376794e-05, -5.8412379075889476e-06, -0.00499631417915225, -0.002338652964681387, -0.0072693610563874245, -0.003122813068330288, -0.017192963510751724, -0.008636031299829483, -0.0011302995262667537, -0.0007621721015311778, -0.012591506354510784, -0.0007831366965547204, -0.0023940731771290302, -0.20636209845542908, -0.0020801827777177095, -0.08247868716716766, -0.6029472351074219, -1.8924094438552856, -0.39060670137405396, -0.0022116266191005707, -0.013787273317575455, -0.06782045215368271, -0.023157740011811256, -0.0001971527235582471, -0.0018881603609770536, -0.0006245807744562626, -0.006982923019677401, -2.253030106658116e-05, -0.01558599341660738, -0.0032644574530422688, -0.0024580522440373898, -0.003438633633777499, -0.003780600382015109, -0.003440296743065119, -8.821448318485636e-06, -0.2649412453174591, -0.3408641815185547, -1.0082424879074097, -0.026642579585313797, -0.11191698163747787, -0.15134352445602417, -0.0053824507631361485, -0.6442044973373413, -0.012805258855223656, -0.0012672259472310543, -0.09980014711618423, -0.04352128878235817, -0.12895457446575165, -0.0012535341084003448, -0.058437418192625046, -0.0089132534340024, -0.0007247682078741491, -0.0021665452513843775, -0.0003667397249955684, -0.0005827635759487748, -5.245195097813848e-06, -0.02076563611626625, -0.025862598791718483, -0.026596495881676674, -0.01249874010682106, -2.771639108657837, -0.0007372760446742177, -0.06893342733383179, -0.05688292905688286, -0.5273518562316895, -0.00028606137493625283, -1.3708974620385561e-05, -0.0069165099412202835, -3.218599158572033e-05, -0.037618204951286316, -0.11417099833488464, -0.002916014287620783, -0.017990857362747192, -0.0015530440723523498, -0.0019738255068659782, -0.001427346607670188, -0.003297370159998536, -1.8000440832111053e-05, -0.1742580384016037, -0.09069330990314484, -0.019319459795951843, -0.0025770808570086956, -0.6845253109931946, -0.006709546782076359, -0.06950584799051285, -0.03170212730765343, -0.07313576340675354, -0.028542084619402885, -1.0109115839004517, -0.0012724645202979445, -0.07711019366979599, -0.09309250861406326, -0.43775972723960876, -0.28102627396583557, -0.3388208746910095, -0.06824900209903717, -4.768370445162873e-07, -2.622600959512056e-06, -0.0003082277253270149, -1.4424220353248529e-05, -2.379927635192871, -0.2668202221393585, -0.0003159739135298878, -4.887569048150908e-06, -0.012974132783710957, -0.004192136228084564, -0.0072942133992910385, -0.002892717020586133, -0.02094297856092453, -0.0006255338666960597, -4.291525328881107e-06, -0.05566242337226868, -0.1601342111825943, -0.012605867348611355, -0.001213529147207737, -0.09966614097356796, -1.61150324344635, -0.01497350912541151, -0.10819292813539505, -0.0012969900853931904, -0.0446576327085495, -0.05951853469014168, -0.10150265693664551, -0.05327751860022545, -0.31717994809150696, -0.24880750477313995, -5.960462772236497e-07, -5.006777428206988e-06, -0.0003412379592191428], "finish_reason": "length"}], "metrics": {"energy": 877.1052406196592, "energy_per_token": 3.4261923461705437, "time": 22.046232, "time_per_token": 0.08611809375}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be pandas.DataFrame')\n    if data.empty:\n        raise ValueError('data must not be empty')\n    if target_column not in data.columns:\n        raise ValueError('target_column must be a column of data')\n    if not data.dtypes.apply(np.issubdtype, args=(np.number,)).all():\n        raise ValueError('data must be numeric')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n    if test_size <= 0 or test_size >= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    x = data.drop(columns=target_column)\n    y = data[target_column]\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(x", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " pandas", ".", "DataFrame", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " not", " be", " empty", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " must", " be", " a", " column", " of", " data", "')", "\n", "    ", "if", " not", " data", ".", "d", "types", ".", "apply", "(", "np", ".", "iss", "ub", "d", "type", ",", " args", "=(", "np", ".", "number", ",", "))", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " numeric", "')", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " must", " be", " an", " integer", "')", "\n", "    ", "if", " test", "_", "size", " <=", " ", "0", " or", " test", "_", "size", " >=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "')", "\n", "\n", "    ", "x", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "x", "_", "train", ",", " x", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "x", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "x"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -0.8219397664070129, -0.00809897668659687, -3.2549338340759277, -0.8575032353401184, -0.07354044169187546, -0.13123495876789093, -0.002093268558382988, -0.5152152180671692, -0.07925587147474289, -0.16824479401111603, -0.0032597046811133623, -0.06398521363735199, -0.013952338136732578, -0.0006816447712481022, -0.0025332048535346985, -0.0011799524072557688, -0.0004111875023227185, -1.7881377516459906e-06, -0.03289061412215233, -0.026043683290481567, -0.2741572856903076, -0.12017643451690674, -0.006224412936717272, -0.009070027619600296, -0.024075301364064217, -0.0006037319544702768, -0.026693999767303467, -0.05056385323405266, -0.5515156388282776, -0.0001641377166379243, -1.4662635294371285e-05, -0.006816940847784281, -2.586808113846928e-05, -0.049770332872867584, -0.10235272347927094, -0.0034602549858391285, -0.018692176789045334, -0.0017263285117223859, -0.0018912539817392826, -0.0016625404823571444, -0.0026761216577142477, -1.5497195136049413e-06, -0.3006958067417145, -0.0940409004688263, -0.08694616705179214, -0.002723438898101449, -0.41469401121139526, -0.024958420544862747, -0.2978362739086151, -0.13742777705192566, -0.2793782949447632, -0.053774815052747726, -0.012050329707562923, -0.0011504229623824358, -0.05009046941995621, -0.06948449462652206, -0.699546217918396, -0.5603689551353455, -0.6249803900718689, -0.5223761200904846, -4.279521817807108e-05, -1.5852415561676025, -1.2251497507095337, -0.02451172284781933, -1.7955265045166016, -1.8954096958623268e-05, -0.020239731296896935, -0.000996331567876041, -7.188061863416806e-05, -7.497983460780233e-05, -0.030299680307507515, -2.5418620109558105, -0.18183490633964539, -0.04257148504257202, -4.768360213347478e-06, -0.0029488196596503258, -0.017580276355147362, -0.02569042518734932, -0.0006762839620932937, -0.03818301856517792, -0.0018831630004569888, -0.007354566361755133, -0.00485515221953392, -0.014048495329916477, -0.0010971962474286556, -3.099436753473128e-06, -0.018697325140237808, -0.1589556187391281, -0.09880375117063522, -2.579549551010132, -0.14828811585903168, -0.03073825128376484, -0.002190335188060999, -0.12787699699401855, -0.021507950499653816, -0.11277059465646744, -0.028331901878118515, -0.00013433984713628888, -0.02495632693171501, -4.529942543740617e-06, -1.3351351299206726e-05, -0.0010509926360100508, -0.039565980434417725, -0.03721021115779877, -0.0007895689341239631, -0.0022038952447474003, -0.0012642494402825832, -0.00134222989436239, -7.152555099310121e-07, -0.011417761445045471, -0.008241690695285797, -0.006794326473027468, -0.0022619394585490227, -0.01833186484873295, -0.002604546956717968, -0.5879653692245483, -0.1081571951508522, -0.010822528973221779, -0.0007728926721028984, -0.002902701497077942, -0.0042522018775343895, -1.5364938974380493, -1.168244216387393e-05, -3.099436753473128e-06, -1.380720853805542, -0.042294297367334366, -0.00014649749209638685, -0.04347769170999527, -0.0038276282139122486, -1.0847986231965479e-05, -3.099436753473128e-06, -0.0314435139298439, -0.021711522713303566, -0.0010805251076817513, -0.01648343913257122, -0.0010127659188583493, -0.0019497923785820603, -0.0007556205382570624, -0.00015662873920518905, -2.145764938177308e-06, -0.00443985452875495, -0.014929704368114471, -0.010319920256733894, -0.0007447806419804692, -0.01798710972070694, -0.02161271683871746, -0.37598860263824463, -0.009183074347674847, -0.0005355831235647202, -0.003037246409803629, -0.0005555993411689997, -0.0003793711948674172, -0.044720787554979324, -0.002206274075433612, -0.32844558358192444, -0.0010149095905944705, -2.0793662071228027, -0.18576686084270477, -0.02211702987551689, -0.13743577897548676, -0.07402034848928452, -0.01991807110607624, -0.4724419116973877, -0.3490441143512726, -0.0016386188799515367, -5.483612312673358e-06, -1.311301275563892e-06, -0.02126675844192505, -0.04196354001760483, -0.00370352272875607, -0.015928642824292183, -0.0009814451914280653, -0.001913741696625948, -0.03426536172628403, -0.00010847456724150106, -1.311301275563892e-06, -4.768370445162873e-07, -0.00014172980445437133, -0.008971854113042355, -0.6612018942832947, -0.0002022777043748647, -0.19118504226207733, -0.01643442176282406, -0.00841051060706377, -0.0008107712492346764, -0.039707254618406296, -8.725739462533966e-05, -0.003271230263635516, -0.0011947167804464698, -0.000566203030757606, -5.602679812000133e-05, -8.940656698541716e-06, -0.00036590558011084795, -0.0033225591760128736, -3.611976353568025e-05, -0.0002544794406276196, -0.0056360382586717606, -0.02610860764980316, -1.4424220353248529e-05, -1.311301275563892e-06, -3.2186455882765586e-06, -2.3841855067985307e-07, -0.000390215078368783, -0.35566073656082153, -0.010572848841547966, -0.02723195217549801, -0.0025955105666071177, -0.08033694326877594, -7.510157047363464e-06, -1.0728830375228426e-06, -0.04052196070551872, -0.010698935016989708, -3.814689989667386e-06, -4.410734163684538e-06, -0.0024529388174414635, -0.012944714166224003, -2.3841830625315197e-06, -5.722029527532868e-06, -0.025661379098892212, -0.0016984812682494521, -7.033323527139146e-06, -5.960446742392378e-06, -0.005153704434633255, -0.005407231394201517, -0.288896769285202, -0.0001811817055568099, -0.5188812613487244, -0.003326242323964834, -0.0007426364463753998, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.013063089922070503, -0.2582821547985077, -0.06983695924282074, -0.003992563579231501, -0.006561994552612305, -8.34430247778073e-05, -8.105902816168964e-05, -0.00728320749476552], "finish_reason": "length"}], "metrics": {"energy": 911.1569112329485, "energy_per_token": 3.559206684503705, "time": 22.227745, "time_per_token": 0.08682712890625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame')\n\n    if data.empty:\n        raise ValueError('data is empty')\n\n    if target_column not in data.columns:\n        raise ValueError(f'{target_column} ist not a column of data')\n\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError('data contains values that are not numeric')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state is not an integer')\n\n    if not (0 < test_size <= 1):\n        raise ValueError('test_size is not between 0 and 1')\n\n    train_set, test_set = train_test_split(\n        data, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(\n        X=train_set[data.columns.difference(target_column)],\n        y=train_set[target_column],\n    ", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", "')", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " empty", "')", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'{", "target", "_", "column", "}", " ist", " not", " a", " column", " of", " data", "')", "\n", "\n", "    ", "if", " not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "values", ".", "d", "type", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " contains", " values", " that", " are", " not", " numeric", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " is", " not", " an", " integer", "')", "\n", "\n", "    ", "if", " not", " (", "0", " <", " test", "_", "size", " <=", " ", "1", "):", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "')", "\n", "\n", "    ", "train", "_", "set", ",", " test", "_", "set", " =", " train", "_", "test", "_", "split", "(", "\n", "        ", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "\n", "        ", "X", "=", "train", "_", "set", "[", "data", ".", "columns", ".", "difference", "(", "target", "_", "column", ")]", ",", "\n", "        ", "y", "=", "train", "_", "set", "[", "target", "_", "column", "]", ",", "\n", "    "], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -1.0201570987701416, -0.03713199123740196, -0.14405634999275208, -0.29432570934295654, -0.015734216198325157, -0.11155739426612854, -0.003132438752800226, -1.037337064743042, -0.0001951265730895102, -0.032209690660238266, -0.15393726527690887, -0.0038435410242527723, -0.07355450838804245, -0.019427496939897537, -0.0006206493126228452, -0.003251624759286642, -0.0007071378640830517, -0.0004945961991325021, -1.4305104514278355e-06, -0.02809188701212406, -0.05158410966396332, -0.03172256797552109, -0.016531748697161674, -0.013166039250791073, -0.0003796095261350274, -0.00883361604064703, -0.00010764019680209458, -0.0406317375600338, -0.2691497504711151, -0.0001833270798670128, -2.729855441430118e-05, -0.006114467047154903, -3.111314072157256e-05, -0.043130651116371155, -0.10242320597171783, -0.0030820509418845177, -0.020182136446237564, -0.0012894895626232028, -0.003007058519870043, -0.0014021099777892232, -0.003129943273961544, -7.390948667307384e-06, -2.152330160140991, -0.19901922345161438, -2.0838565826416016, -0.0025253568310290575, -8.177422569133341e-05, -0.00019798702851403505, -0.13245324790477753, -0.9532544612884521, -0.0036576769780367613, -0.02867646887898445, -0.012344268150627613, -0.030684957280755043, -0.0255660992115736, -0.035988785326480865, -0.0007160721579566598, -0.004888724535703659, -0.0004292996891308576, -0.2691139578819275, -0.450446218252182, -2.0278823375701904, -2.777537883957848e-05, -0.13825055956840515, -0.003677987027913332, -4.172316494077677e-06, -8.546940807718784e-05, -0.00015877417172305286, -0.056806571781635284, -0.1752517968416214, -1.4214329719543457, -0.0769159346818924, -0.0012618682812899351, -0.0007946909172460437, -0.0009386900928802788, -0.0041320668533444405, -3.933898824470816e-06, -0.002644733991473913, -0.04331982508301735, -0.0044080475345253944, -0.005727902054786682, -0.012662369757890701, -0.0012872274965047836, -1.3828182090946939e-05, -0.1224675178527832, -0.04632433131337166, -0.014056840911507607, -0.05567888543009758, -0.005141963250935078, -0.001924568903632462, -0.0016198145458474755, -0.013042498379945755, -0.006529425736516714, -0.0014173472300171852, -0.003461918095126748, -0.0001971527235582471, -0.045086417347192764, -0.14360807836055756, -0.07230895012617111, -0.00021324267436284572, -0.02197045087814331, -2.622600959512056e-06, -4.529942543740617e-06, -0.0009541726321913302, -0.02652568370103836, -0.02120700664818287, -0.0010674261720851064, -0.002959516830742359, -0.0010318199638277292, -0.0017763087525963783, -2.3841855067985307e-07, -0.05518998205661774, -0.006992393173277378, -0.005447898991405964, -0.0025046665687114, -0.0459960401058197, -0.0014103237772360444, -0.014202469028532505, -0.007245809771120548, -0.0042532701045274734, -0.0005147324409335852, -0.021552052348852158, -5.340433563105762e-05, -0.010672162286937237, -0.5352526307106018, -1.1622241735458374, -0.12090642005205154, -1.3826502561569214, -0.01850132830440998, -2.145764938177308e-06, -2.3841855067985307e-07, -2.7485666275024414, -0.026668231934309006, -0.002658287761732936, -0.020178047940135002, -0.0025362963788211346, -0.0031459862366318703, -0.0009334497735835612, -0.00029845553217455745, -1.0251946150674485e-05, -0.01860816590487957, -0.01880367286503315, -0.009886347688734531, -0.0006407829932868481, -0.09784624725580215, -0.007470883894711733, -0.05281774327158928, -0.0017810686258599162, -0.0006316096987575293, -0.001553758280351758, -0.00018737945356406271, -5.566918844124302e-05, -0.006587574724107981, -0.0013328249333426356, -0.01461302861571312, -0.0017553649377077818, -2.6533942222595215, -0.81690514087677, -1.9357473850250244, -0.035522256046533585, -0.01927783340215683, -0.000785280775744468, -0.000550357042811811, -0.07587259262800217, -0.012776188552379608, -2.539125671319198e-05, -7.629365427419543e-06, -6.079655122448457e-06, -1.9907753085135482e-05, -0.0004807746736332774, -1.2593258619308472, -0.05370217189192772, -0.0033573710825294256, -0.03937196731567383, -0.7952805161476135, -2.777537883957848e-05, -2.50339189733495e-06, -0.040375422686338425, -0.0038587411399930716, -1.5497195136049413e-06, -6.794906312279636e-06, -0.000771939754486084, -0.008393251337110996, -2.861018856492592e-06, -6.437280717364047e-06, -0.022690661251544952, -0.001733111683279276, -6.318072337307967e-06, -2.622600959512056e-06, -1.0397682189941406, -0.00801347941160202, -0.08858460187911987, -0.0002978596603497863, -1.5405646562576294, -0.008638986386358738, -0.0020493713673204184, -1.311301275563892e-06, -1.1920928244535389e-07, -0.011411868035793304, -0.10043356567621231, -0.33962494134902954, -0.18613705039024353, -0.017315641045570374, -0.00012492353562265635, -0.0005576247931458056, -0.9790657758712769, -0.010641378350555897, -2.5150163173675537, -0.09872177988290787, -0.03028510883450508, -2.098061486321967e-05, -6.437280717364047e-06, -1.6281980276107788, -0.19661545753479004, -0.0008849757141433656, -0.007677216082811356, -0.1755702942609787, -1.120614767074585, -2.274819850921631, -0.02644093707203865, -8.320462075062096e-05, -2.098061486321967e-05, -0.0036693166475743055, -0.04866794869303703, -0.05962669476866722, -0.0009309487068094313, -0.00045908879837952554, -0.0019975011236965656, -0.004280690103769302, -4.291525328881107e-06, -2.622600959512056e-06, -0.009574446827173233, -0.0002746204845607281, -3.099436753473128e-06, -1.07287787614041e-05, -0.2878335416316986, -1.7042856216430664, -0.006091007497161627, -0.12487025558948517], "finish_reason": "length"}], "metrics": {"energy": 891.5345192642212, "energy_per_token": 3.482556715875864, "time": 22.061316, "time_per_token": 0.086177015625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n\n    if data.empty:\n        raise ValueError(\"data is empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} is not in columns\")\n\n    if not data.select_dtypes(exclude=np.number).empty:\n        raise ValueError(f\"data contains values that are not numeric\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    Y = data[target_column]\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=random_state)\n    ", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " {", "target", "_", "column", "}", " is", " not", " in", " columns", "\"", ")", "\n", "\n", "    ", "if", " not", " data", ".", "select", "_", "d", "types", "(", "exclude", "=", "np", ".", "number", ")", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "data", " contains", " values", " that", " are", " not", " numeric", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n", "    ", "Y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " Y", "_", "train", ",", " Y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " Y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "    "], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -0.12768051028251648, -0.0014013956533744931, -0.008443845435976982, -1.1097298860549927, -0.00024196557933464646, -0.037378229200839996, -0.1880699098110199, -0.004024977795779705, -0.08055407553911209, -0.016070010140538216, -0.0008442413527518511, -0.0032504366245120764, -0.0006126672378741205, -0.0004450284468475729, -1.1920922133867862e-06, -0.02123396471142769, -0.0033742417581379414, -0.038846585899591446, -0.04360300675034523, -0.017688501626253128, -0.013848529197275639, -0.00025733973598107696, -0.000912250077817589, -0.00955331139266491, -0.00012039413559250534, -0.052248239517211914, -0.26411616802215576, -0.00023135847004596144, -2.706014311115723e-05, -0.0068511576391756535, -2.002696055569686e-05, -0.0495038703083992, -0.11177051812410355, -0.0024758896324783564, -0.020662648603320122, -0.0017788077238947153, -0.0024779110681265593, -0.0016025570221245289, -0.002730215433984995, -2.7418097943154862e-06, -0.007560094352811575, -1.7249314785003662, -0.020052332431077957, -0.4161301255226135, -0.044082436710596085, -0.0064313579350709915, -0.9358715415000916, -0.0020712607074528933, -0.00021908267808612436, -0.00013696208770852536, -0.032071392983198166, -0.35319578647613525, -0.004435582086443901, -1.5911850929260254, -3.059478282928467, -1.9705814123153687, -0.010183991864323616, -0.0014431786257773638, -0.008332133293151855, -0.0003358753747306764, -0.15802247822284698, -0.4989622235298157, -0.35254284739494324, -0.6727093458175659, -2.2618134021759033, -1.966933996300213e-05, -0.00012265883560758084, -4.291525328881107e-06, -0.4104146361351013, -0.2751760184764862, -0.6067329049110413, -0.3465653955936432, -1.6689286894688848e-06, -0.01093349140137434, -0.0013627061853185296, -0.0007965967524796724, -0.0003275334893260151, -0.0016055324813351035, -0.006682074628770351, -0.005840379279106855, -0.029468495398759842, -0.0007500219508074224, -8.4638240878121e-06, -0.012954246252775192, -2.1852216720581055, -0.00905207172036171, -0.15584294497966766, -0.08763615787029266, -0.9414353370666504, -0.060947246849536896, -0.014682456851005554, -0.00528628658503294, -0.05646367743611336, -0.027111412957310677, -0.0006394725642167032, -0.002178916009142995, -0.004670069552958012, -0.00024089295766316354, -0.035627059638500214, -0.16168591380119324, -0.03251564875245094, -0.00016378014697693288, -0.01695834845304489, -2.7418097943154862e-06, -4.529942543740617e-06, -0.001069093239493668, -0.03213061764836311, -0.03781898692250252, -0.0009519098093733191, -0.0028965207748115063, -0.0009168949909508228, -0.0018479428254067898, 0.0, -0.00771164009347558, -0.31811901926994324, -0.012382653541862965, -0.006253319326788187, -0.0013933007139712572, -0.07354874908924103, -0.004398077726364136, -0.05305178463459015, -0.034478675574064255, -0.011050926521420479, -0.00016830935783218592, -0.0010451575508341193, -0.019609633833169937, -6.937739817658439e-05, -0.012183413840830326, -1.0620306730270386, -1.0371154530730564e-05, -4.410734163684538e-06, -0.6365276575088501, -0.006574192550033331, -0.0006504327175207436, -0.0463239885866642, -0.004805325530469418, -1.4781842764932662e-05, -1.311301275563892e-06, -0.3631059229373932, -0.0042646657675504684, -0.0033593906555324793, -0.023400573059916496, -0.0009403574513271451, -0.0028572946321219206, -0.0014027050929144025, -0.0003357561945449561, -2.861018856492592e-06, -0.0030443770810961723, -0.039227209985256195, -0.016251353546977043, -0.008641231805086136, -0.0007931424188427627, -0.17104382812976837, -0.021656930446624756, -0.09953849017620087, -0.002791438950225711, -0.000251142424531281, -0.003140282118692994, -0.00037472377880476415, -8.630380034446716e-05, -0.007551221176981926, -0.00021205084340181202, -0.0018497277051210403, -0.014711824245750904, -0.001341753639280796, -1.3012951612472534, -0.25272229313850403, -0.028304439038038254, -0.14639773964881897, -0.044206760823726654, -0.030192002654075623, -0.4636448919773102, -0.45192593336105347, -0.0032333259005099535, -5.960446742392378e-06, -4.768370445162873e-07, -0.02452661283314228, -0.050449270755052567, -0.016309408470988274, -2.7303271293640137, -0.0015902980230748653, -0.005939452908933163, -0.04728274419903755, -0.00023409964342135936, -5.960462772236497e-07, -4.768370445162873e-07, -0.0001408954558428377, -0.008440417237579823, -1.1780205965042114, -0.25668033957481384, -0.012015582993626595, -0.008916915394365788, -0.0010381315369158983, -0.01226831879466772, -7.438383181579411e-05, -0.0020157035905867815, -0.000809699238743633, -0.2674880027770996, -6.639736966462806e-05, -9.953480184776708e-05, -0.0003108495147898793, -0.0009385710000060499, -4.124556289752945e-05, -0.00020990552729927003, -0.007738374173641205, -0.024094969034194946, -1.9907753085135482e-05, -2.622600959512056e-06, -4.172316494077677e-06, -3.576278118089249e-07, -0.0004844683862756938, -0.4940122067928314, -0.009889062494039536, -0.04938269779086113, -0.0034938741009682417, -0.09189531952142715, -8.940656698541716e-06, -3.576278118089249e-07, -0.051212579011917114, -0.01675521209836006, -4.291525328881107e-06, -4.887569048150908e-06, -0.0027474535163491964, -0.012441286817193031, -2.7418097943154862e-06, -1.490105023549404e-05, -0.028400037437677383, -0.003099520690739155, -5.245195097813848e-06, -1.2755313036905136e-05, -0.006876967381685972, -0.006245855707675219, -0.621442973613739], "finish_reason": "length"}], "metrics": {"energy": 893.8704926643367, "energy_per_token": 3.491681611970065, "time": 21.85358, "time_per_token": 0.085365546875}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"data has to be a DataFrame but is a {type(data)}\")\n\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\n            f\"target_column has to be a column of data but is {target_column}\"\n        )\n\n    if not data[target_column].apply(lambda x: isinstance(x, (int, float))).all():\n        raise ValueError(\"data has to contain only numeric values\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state has to be an integer\")\n\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    features = data.drop(target_column, axis=1)\n    labels = data[target_column]\n    X_train, X_test, y_train, y_test = train", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "data", " has", " to", " be", " a", " Data", "Frame", " but", " is", " a", " {", "type", "(", "data", ")}", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " not", " be", " empty", "\"", ")", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "\"", "target", "_", "column", " has", " to", " be", " a", " column", " of", " data", " but", " is", " {", "target", "_", "column", "}\"", "\n", "        ", ")", "\n", "\n", "    ", "if", " not", " data", "[", "target", "_", "column", "]", ".", "apply", "(", "lambda", " x", ":", " isinstance", "(", "x", ",", " (", "int", ",", " float", ")))", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " has", " to", " contain", " only", " numeric", " values", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " has", " to", " be", " an", " integer", "\"", ")", "\n", "\n", "    ", "if", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "\n", "    ", "features", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "labels", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -1.438918113708496, -0.42986592650413513, -0.45726680755615234, -2.5788824558258057, -0.08558161556720734, -0.007491116411983967, -0.4299214482307434, -0.33916527032852173, -0.030998434871435165, -1.3836039304733276, -0.19118623435497284, -1.4964118003845215, -0.03197914734482765, -0.15708154439926147, -0.0015728019643574953, -0.0022697895765304565, -0.28635039925575256, -0.24075208604335785, -0.0016940779751166701, -0.005227942951023579, -0.8434646129608154, -0.00036507140612229705, -0.040027763694524765, -0.20678232610225677, -0.0035927053540945053, -0.07369449734687805, -0.012478373013436794, -0.0006069486844353378, -0.0028693003114312887, -0.0010850501712411642, -0.0008151783840730786, -3.3378546504536644e-06, -0.05700308457016945, -0.29435431957244873, -0.07708557695150375, -3.6316118240356445, -0.09777609258890152, -0.004379325080662966, -0.007034416776150465, -0.0938374251127243, -0.00029047083808109164, -0.001127441762946546, -0.014981964603066444, -0.00014172980445437133, -0.06610610336065292, -0.5925654172897339, -0.0002752163854893297, -2.1815061700181104e-05, -0.008594430051743984, -2.169585604860913e-05, -0.05706017464399338, -0.11028368771076202, -0.004324133507907391, -0.018014976754784584, -0.0018550821114331484, -0.0033182818442583084, -0.009617896750569344, -0.003395389299839735, -2.0265558760002023e-06, -0.004447449930012226, -2.1201300621032715, -0.023756736889481544, -0.15153460204601288, -0.019115282222628593, -0.22304598987102509, -0.07419845461845398, -0.011313688941299915, -0.968192458152771, -0.005015529692173004, -0.02987596020102501, -0.4960952401161194, -0.16065554320812225, -0.2345646172761917, -0.1919332891702652, -0.3133801519870758, -0.10238059610128403, -0.41845548152923584, -0.001383420079946518, -4.9828242481453344e-05, -6.031808152329177e-05, -0.02895328588783741, -0.40160682797431946, -0.052921880036592484, -1.9192511899746023e-05, -0.0011949549661949277, -0.018281416967511177, -0.0003233625029679388, -0.21178993582725525, -0.6967002153396606, -0.3310018479824066, -0.30137544870376587, -0.06948661059141159, -7.152555099310121e-07, -6.198863957251888e-06, -0.00020394629973452538, -1.585470999998506e-05, -0.5117074251174927, -0.0004935238393954933, -0.9640249609947205, -0.11280903965234756, -0.007388291414827108, -0.05113828182220459, -9.047575440490618e-05, -0.0006279165390878916, -0.0012001938885077834, -0.05113046616315842, -0.12924616038799286, -0.0005972985527478158, -0.008796866983175278, -0.2480686455965042, -0.0003721021639648825, -0.008870599791407585, -0.0016987192211672664, -0.0029082882683724165, -0.004982436075806618, -0.00481790117919445, -0.0007776573766022921, -8.702239938429557e-06, -0.0076371124014258385, -0.9448323249816895, -0.8879387974739075, -2.286470651626587, -0.053643424063920975, -0.28130966424942017, -0.27569499611854553, -0.3426963984966278, -0.028899550437927246, -0.03354479372501373, -0.0004440752090886235, -0.00174251280259341, -0.00790893379598856, -0.0001668790791882202, -0.03927282989025116, -0.07338858395814896, -0.022899238392710686, -9.703165414975956e-05, -0.05268826335668564, -2.264974000354414e-06, -7.390948667307384e-06, -0.00028320116689428687, -0.047360289841890335, -0.025250913575291634, -0.000742279109545052, -0.002702871570363641, -0.000947503256611526, -0.0018039158312603831, -3.576278118089249e-07, -0.006417736876755953, -1.130669355392456, -0.02239322103559971, -0.026839887723326683, -0.002272525103762746, -0.2217206060886383, -0.0035274920519441366, -0.006178801413625479, -0.11766784638166428, -0.11902426928281784, -0.09274955838918686, -0.0002803409588523209, -0.0011182728921994567, -0.016073646023869514, -5.4596363042946905e-05, -0.012136895209550858, -0.39649975299835205, -0.7929795980453491, -0.004837594460695982, -0.3425636291503906, -0.01798933558166027, -2.622600959512056e-06, -6.079655122448457e-06, -0.044148821383714676, -0.007463784422725439, -0.0011219641892239451, -0.01025526225566864, -0.0008811643347144127, -0.0013815154088661075, -0.0006337541271932423, -0.0002821285743266344, -1.0132738680113107e-05, -0.0030061076395213604, -0.053747475147247314, -0.021238166838884354, -0.014218922704458237, -0.0018835199298337102, -2.2584047317504883, -0.033428240567445755, -0.14075781404972076, -0.00857339147478342, -0.00015770144818816334, -0.0059018866159021854, -0.0005326044629327953, -0.00010322991875000298, -0.02704017423093319, -0.0003511289251036942, -0.0018603176577016711, -0.016519319266080856, -0.0014025861164554954, -3.155646800994873, -0.06522520631551743, -0.43139177560806274, -0.1193118765950203, -0.07788408547639847, -0.008697248995304108, -1.2349863052368164, -1.9073468138230965e-06, -2.3841830625315197e-06, -0.00039569655200466514, -0.004914466291666031, -0.024831095710396767, -0.007913310080766678, -0.011801897548139095, -0.03728199005126953, -0.11096971482038498, -2.228271961212158, -0.0067653171718120575, -0.003799245459958911, -0.015221154317259789, -0.0001003691868390888, -2.145764938177308e-06, -2.7418097943154862e-06, -9.583967766957358e-05, -0.00853344239294529, -0.9092504382133484, -0.905426025390625, -0.01681065931916237, -0.001767145935446024, -0.0004048719711136073, -0.003485914785414934, -2.396077979938127e-05, -0.0019991665612906218, -0.0003688847064040601, -0.02313607558608055, -0.00010513706365600228, -2.7894584491150454e-05, -0.0002961912250611931, -0.0008616310660727322, -1.3470558769768104e-05, -0.00014804698002990335, -0.007551457732915878, -0.006625944282859564], "finish_reason": "length"}], "metrics": {"energy": 903.1778280887607, "energy_per_token": 3.5280383909717217, "time": 22.494759, "time_per_token": 0.08787015234375}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data has to be of type pd.DataFrame.')\n    if data.empty:\n        raise ValueError('data has to be non-empty.')\n    if target_column not in data.columns:\n        raise ValueError(f'target_column {target_column} is not contained in data.')\n    if not data.all(numeric=True):\n        raise ValueError('data has to contain values that can be converted to numeric.')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state has to be of type int.')\n    if not isinstance(test_size, float):\n        raise ValueError('test_size has to be of type float.')\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size has to be greater than zero and less than one.')\n\n    train, test = train_test_split(data, test_size=test_size, random_state=random_state)\n    train_model = LinearRegression()\n    train_", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " has", " to", " be", " of", " type", " pd", ".", "DataFrame", ".", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " has", " to", " be", " non", "-", "empty", ".", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "target", "_", "column", " {", "target", "_", "column", "}", " is", " not", " contained", " in", " data", ".", "')", "\n", "    ", "if", " not", " data", ".", "all", "(", "numeric", "=", "True", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " has", " to", " contain", " values", " that", " can", " be", " converted", " to", " numeric", ".", "')", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " has", " to", " be", " of", " type", " int", ".", "')", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", "):", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " has", " to", " be", " of", " type", " float", ".", "')", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " has", " to", " be", " greater", " than", " zero", " and", " less", " than", " one", ".", "')", "\n", "\n", "    ", "train", ",", " test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "    ", "train", "_", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "train", "_"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -2.4971048831939697, -0.02270219847559929, -0.006106884218752384, -1.2440245151519775, -0.012374411337077618, -1.6976337432861328, -0.0002087136817863211, -0.00628873985260725, -2.1405880451202393, -0.06417272239923477, -0.002395738149061799, -0.5435540676116943, -0.09239823371171951, -0.14393052458763123, -0.003233088180422783, -0.0636918693780899, -0.011007538065314293, -0.000581572181545198, -0.002919223625212908, -0.0013772298116236925, -0.0004002247005701065, -1.6689286894688848e-06, -0.031541239470243454, -0.07085085660219193, -0.9811698794364929, -0.007136804983019829, -0.37173599004745483, -0.41098037362098694, -0.06717818230390549, -0.002586592920124531, -0.15329790115356445, -0.0013661584816873074, -0.002116346498951316, -0.018445976078510284, -0.032639577984809875, -0.38745638728141785, -0.00020823694649152458, -1.2636104656849056e-05, -0.0072705443017184734, -4.23184028477408e-05, -0.09086542576551437, -0.0780821219086647, -0.003951243124902248, -0.04127080738544464, -0.0016336203552782536, -0.001992742298170924, -0.002084465464577079, -0.0022897711023688316, -6.556489552167477e-06, -1.4785635471343994, -0.16529494524002075, -0.2573340833187103, -0.25946545600891113, -0.04484913870692253, -0.008176898583769798, -1.3930480480194092, -0.0027980960439890623, -0.00022837892174720764, -0.00012170527770649642, -0.046312153339385986, -1.0040392875671387, -0.022301126271486282, -3.611159324645996, -0.07159887254238129, -0.15160180628299713, -0.18871743977069855, -0.08954153209924698, -0.0016235039802268147, -0.09110041707754135, -0.2132299542427063, -0.7499494552612305, -0.4611593186855316, -0.31229567527770996, -3.1849822998046875, -0.07490149885416031, -1.9346232414245605, -0.23327764868736267, -0.0014987675240263343, -0.06884051114320755, -0.005960546433925629, -0.00365256960503757, -0.01079434435814619, -0.0005641775787808001, -3.814689989667386e-06, -0.09682030975818634, -0.18295559287071228, -0.4702383875846863, -0.046926334500312805, -0.19690735638141632, -2.81107759475708, -0.07626743614673615, -1.933911919593811, -0.00830222386866808, -0.3984878957271576, -0.04510260000824928, -0.3914102613925934, -1.4002671241760254, -0.0017786887474358082, -0.0032373659778386354, -0.12354261428117752, -0.030020343139767647, -0.07626434415578842, -0.03271018713712692, -0.00017712931730784476, -0.016534211114048958, -3.814689989667386e-06, -7.390948667307384e-06, -0.0010805251076817513, -0.035741742700338364, -0.019133878871798515, -0.0011031500762328506, -0.0024871863424777985, -0.0008490057080052793, -0.0012825843878090382, 0.0, -0.04030122980475426, -0.026021964848041534, -0.009565000422298908, -0.0026066871359944344, -0.05054345354437828, -0.0028786908369511366, -0.00949757732450962, -0.9944180250167847, -0.025662889704108238, -0.09697417169809341, -0.08962022513151169, -0.00067473528906703, -0.0010488491971045732, -0.0034947055391967297, -0.006965165957808495, -0.33167412877082825, -1.1078071594238281, -0.0002169373765354976, -0.004475458059459925, -2.861018856492592e-06, -1.0251946150674485e-05, -0.0005247407825663686, -0.31156855821609497, -0.2921196222305298, -0.0016701571876183152, -0.0015374518698081374, -0.013271448202431202, -0.0008925982983782887, -3.576272320060525e-06, -0.001573873101733625, -0.02369818091392517, -0.0024289172142744064, -0.0007540719816461205, -0.004798326175659895, -0.001861388562247157, -0.0028734607622027397, -0.046717818826436996, -0.0017340637277811766, -0.03293410316109657, -0.03129864111542702, -0.000547378440387547, -0.0009193961159326136, -0.045455217361450195, -0.046273570507764816, -0.3566426634788513, -6.55629628454335e-05, -4.362964682513848e-05, -0.7241879105567932, -0.009525208733975887, -0.0006102845072746277, -0.07325486838817596, -0.008439235389232635, -2.3603161025675945e-05, -5.602820692729438e-06, -1.3033729791641235, -0.02024989388883114, -0.0012531769461929798, -0.024135349318385124, -0.0022131730802357197, -0.0023563734721392393, -0.0016243371646851301, -0.000409161759307608, -8.583032467868179e-06, -0.019086161628365517, -0.011357417330145836, -0.005812765099108219, -0.0006032554083503783, -0.032534919679164886, -0.00716485595330596, -0.033416830003261566, -2.856856107711792, -1.0278239250183105, -2.4631636142730713, -0.03586078807711601, -0.7934234142303467, -0.02195085771381855, -0.3538321554660797, -0.06360048055648804, -0.0021192014683037996, -0.004615250043570995, -0.2546432912349701, -0.0010888606775552034, -2.395164966583252, -0.49136555194854736, -0.015005686320364475, -0.004539660178124905, -0.008442072197794914, -1.3112935448589269e-05, -6.556489552167477e-06, -4.0531076592742465e-06, -8.940656698541716e-06, -0.00025459862081333995, -0.039719052612781525, -0.009465104900300503, -0.03664703294634819, -3.9457496313843876e-05, -4.768360213347478e-06, -0.051634036004543304, -0.00735634146258235, -3.814689989667386e-06, -4.291525328881107e-06, -0.002044612541794777, -0.009795809164643288, -2.3841830625315197e-06, -5.602820692729438e-06, -0.03583502396941185, -0.0016057705506682396, -1.1324817933200393e-05, -1.311301275563892e-06, -0.01856592483818531, -0.00988198071718216, -0.3549216389656067, -1.851470708847046, -0.43676435947418213, -3.9222073554992676, -0.011678777635097504, -0.018810458481311798, -3.2186455882765586e-06, -1.1920928244535389e-07, -0.045621175318956375, -0.17667503654956818, -0.07230163365602493, -0.18636909127235413, -0.004079235717654228], "finish_reason": "length"}], "metrics": {"energy": 871.5288530883793, "energy_per_token": 3.4044095823764815, "time": 21.854948, "time_per_token": 0.085370890625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be of type pandas.DataFrame')\n\n    if data.empty:\n        raise ValueError('data cannot be empty')\n\n    if target_column not in data.columns:\n        raise ValueError('target_column is not a column of data')\n\n    try:\n        data.astype(float)\n    except ValueError:\n        raise ValueError('data contains values that are not numeric')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be of type int')\n\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size must be in range [0, 1)')\n\n    train, test = train_test_split(data, test_size=test_size, random_state=random_state)\n\n    train_X = train.drop(target_column, axis=1)\n    train_Y = train[target_column]\n\n    model = LinearRegression()\n    model.fit(train_X, train_", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " of", " type", " pandas", ".", "DataFrame", "')", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " cannot", " be", " empty", "')", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " is", " not", " a", " column", " of", " data", "')", "\n", "\n", "    ", "try", ":", "\n", "        ", "data", ".", "ast", "ype", "(", "float", ")", "\n", "    ", "except", " Value", "Error", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " contains", " values", " that", " are", " not", " numeric", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " must", " be", " of", " type", " int", "')", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " must", " be", " in", " range", " [", "0", ",", " ", "1", ")", "')", "\n", "\n", "    ", "train", ",", " test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "\n", "    ", "train", "_", "X", " =", " train", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "train", "_", "Y", " =", " train", "[", "target", "_", "column", "]", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "train", "_", "X", ",", " train", "_"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -0.8219397664070129, -0.00809897668659687, -1.3091349601745605, -0.0089979637414217, -0.9586597084999084, -0.18117205798625946, -0.015012732706964016, -0.09876962751150131, -0.0018575809663161635, -0.8266178965568542, -0.000179036331246607, -0.025274161249399185, -0.19016443192958832, -0.0037842821329832077, -0.09902781248092651, -0.01376916654407978, -0.0004942387458868325, -0.0030358200892806053, -0.0006326819420792162, -0.00045789722935296595, -1.6689286894688848e-06, -0.03138910233974457, -0.04251242056488991, -1.948022484779358, -0.0053124926052987576, -0.012768184766173363, -0.026542052626609802, -0.0005013877525925636, -0.009609867818653584, -0.00011002412065863609, -0.048183783888816833, -0.4079374670982361, -0.0002195594133809209, -1.4066597032069694e-05, -0.0060310522094368935, -1.4781842764932662e-05, -0.056273143738508224, -0.13262134790420532, -0.004893113858997822, -0.02878187596797943, -0.001639452064409852, -0.0026637569535523653, -0.0016639686655253172, -0.0033582027535885572, -2.622600959512056e-06, -0.41332578659057617, -0.09272565692663193, -0.0819358304142952, -0.002794054336845875, -1.7654608488082886, -0.018809406086802483, -0.2929363250732422, -0.1053706482052803, -0.19943922758102417, -0.09701474010944366, -0.020303046330809593, -0.0009133219718933105, -0.006233890540897846, -0.00032014489988796413, -2.4694607257843018, -0.0017548889154568315, -0.016433484852313995, -0.005051824729889631, -0.30021870136260986, -0.7461966872215271, -0.5083538293838501, 0.0, -0.0694119855761528, -0.37563684582710266, -0.04088146239519119, -0.06344933807849884, -0.005691157653927803, -0.00029094755882397294, -0.5358366370201111, -4.768370445162873e-07, -0.22176988422870636, -0.004541677888482809, -0.0034696399234235287, -0.0024647116661071777, -0.011350463144481182, -8.702239938429557e-06, -0.03689074516296387, -0.1283528208732605, -0.8005229234695435, -0.16690362989902496, -0.020974380895495415, -0.021349962800741196, -0.002266340423375368, -0.03976132720708847, -0.008950943127274513, -0.014868631958961487, -0.005200548563152552, -0.0002012050390476361, -0.06776397675275803, -0.06076452136039734, -0.013777396641671658, -0.0002805792901199311, -0.016159746795892715, -2.3841830625315197e-06, -3.933898824470816e-06, -0.0009505997295491397, -0.021549368277192116, -0.011958455666899681, -0.0005322470096871257, -0.002683255122974515, -0.001401276676915586, -0.0022143623791635036, -2.3841830625315197e-06, -0.019031306728720665, -0.010286529548466206, -0.009884931147098541, -0.0013360392767935991, -0.08052295446395874, -0.004130286164581776, -1.1887879371643066, -0.015151881612837315, -0.0931364968419075, -0.008154433220624924, -0.0008702066843397915, -0.02916310727596283, -3.886147169396281e-05, -0.01322097983211279, -0.8560939431190491, -1.0251946150674485e-05, -2.50339189733495e-06, -0.5742109417915344, -0.005773771554231644, -0.00041130665340460837, -0.03516289219260216, -0.0029553568456321955, -2.5510462364763953e-05, -8.22540732769994e-06, -1.1130390167236328, -0.015705464407801628, -0.0016853903653100133, -0.016371332108974457, -0.0029517910443246365, -0.0026298719458281994, -0.000916418619453907, -0.0002681849291548133, -5.8412379075889476e-06, -0.011734272353351116, -0.010119561105966568, -0.015978973358869553, -0.0007286992622539401, -0.0628034695982933, -0.02497434802353382, -2.7315495014190674, -1.1886860132217407, -0.17443658411502838, -0.00024923557066358626, -0.08484968543052673, -0.3419671952724457, -0.003442435059696436, -0.5152061581611633, -0.006168612278997898, -0.0015159078175202012, -0.0066504571586847305, -0.001858056872151792, -2.3428215980529785, -0.5679066181182861, -0.02234845794737339, -0.004720140248537064, -0.009990568272769451, -1.0132738680113107e-05, -5.364403477869928e-06, -2.7418097943154862e-06, -5.125986263010418e-06, -0.0002464944263920188, -0.19265680015087128, -0.010623686015605927, -0.03742393106222153, -4.482168878894299e-05, -8.702239938429557e-06, -0.06588324159383774, -0.006486551836133003, -1.6689286894688848e-06, -9.536738616588991e-07, -0.0025449765380471945, -0.011588755063712597, -1.7881377516459906e-06, -1.5497195136049413e-06, -0.03256295993924141, -0.002277996391057968, -8.821448318485636e-06, -1.07287787614041e-05, -0.01187034323811531, -0.007814549840986729, -0.6442720293998718, -0.00016759421851020306, -1.9677180051803589, -0.2775164544582367, -2.7599143981933594, -0.10166086256504059, -0.03550407662987709, -0.21814104914665222, -0.04033603519201279, -0.06451119482517242, -0.890748918056488, -1.2397689715726301e-05, -5.245195097813848e-06, -0.0007861146004870534, -0.003908021375536919, -0.05991696938872337, -0.001620528637431562, -0.0029074561316519976, -0.04910988733172417, -0.00260300119407475, -0.17067715525627136, -0.0002611534437164664, -0.8677887320518494, -0.0012228161795064807, -0.0012450808426365256, -0.0483548529446125, -0.0002818902430590242, -3.2186455882765586e-06, -1.7881377516459906e-06, -0.0001357701694360003, -0.01355526689440012, -0.3634280562400818, -4.7205765440594405e-05, -1.2554632425308228, -0.004838899709284306, -0.0007360848248936236, -4.768370445162873e-07, 0.0, -0.020172439515590668, -0.40745988488197327, -0.09377078711986542, -0.006394639145582914, -0.01569056138396263, -6.878139538457617e-05, -9.083335316972807e-05, -0.014551936648786068, -0.0002942844294011593, -2.7418097943154862e-06, -0.03677010163664818, -0.00837634690105915, -1.6569954823353328e-05], "finish_reason": "length"}], "metrics": {"energy": 885.0570077781682, "energy_per_token": 3.4572539366334696, "time": 21.863142, "time_per_token": 0.0854028984375}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f'data must be a DataFrame but is: {type(data)}')\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not (data.dtypes != 'float64').any():\n        raise ValueError(\"data contains non-numeric values\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column ({target_column}) is not a column of data\")\n    if not isinstance(random_state, int):\n        raise ValueError(f'random_state must be an integer but is: {type(random_state)}')\n    if not (0.0 < test_size < 1.0):\n        raise ValueError(f'test_size must be a value between 0 and 1, but is: {test_size}')\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test =", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "data", " must", " be", " a", " Data", "Frame", " but", " is", ":", " {", "type", "(", "data", ")}", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "    ", "if", " not", " (", "data", ".", "d", "types", " ", "!", "=", " '", "float", "6", "4", "')", ".", "any", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " non", "-", "numeric", " values", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " ({", "target", "_", "column", "})", " is", " not", " a", " column", " of", " data", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "random", "_", "state", " must", " be", " an", " integer", " but", " is", ":", " {", "type", "(", "random", "_", "state", ")}", "')", "\n", "    ", "if", " not", " (", "0", ".", "0", " <", " test", "_", "size", " <", " ", "1", ".", "0", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "test", "_", "size", " must", " be", " a", " value", " between", " ", "0", " and", " ", "1", ",", " but", " is", ":", " {", "test", "_", "size", "}", "')", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " ="], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -1.438918113708496, -1.0694876909255981, -0.46058720350265503, -0.8814444541931152, -0.011000463739037514, -0.42859870195388794, -0.34611576795578003, -0.019257018342614174, -1.6150883436203003, -0.20828697085380554, -3.7320058345794678, -0.03661002591252327, -0.1322927474975586, -0.0002964295563288033, -0.0009552444680593908, -0.14596113562583923, -0.04840664565563202, -0.0027096483390778303, -0.4835881292819977, -0.0892239660024643, -0.10731344670057297, -0.0031307751778513193, -0.059250835329294205, -0.010505965910851955, -0.0006980843027122319, -0.00221519498154521, -0.0009022455778904259, -0.0004258441040292382, -2.0265558760002023e-06, -1.0680197477340698, -2.1714718341827393, -0.07242538034915924, -2.135751724243164, -0.030292857438325882, -0.11996340751647949, -0.000593962671700865, -0.0023899106308817863, -0.048106417059898376, -0.04019943252205849, -1.1398255825042725, -3.217963218688965, -0.208413764834404, -0.3367661237716675, -1.5374914407730103, -4.23184028477408e-05, -1.3707201480865479, -2.9802276912960224e-06, -0.0005993238883093, -0.24255965650081635, -0.5741907954216003, -0.005535630509257317, -2.2053474822314456e-05, -0.04805869981646538, -0.0026295154821127653, -1.5420887470245361, -0.014542773365974426, -0.019803309813141823, -0.0055445218458771706, -0.012875165790319443, -0.0012509147636592388, -1.1205610462639015e-05, -0.0957736000418663, -0.24807022511959076, -0.12489866465330124, -0.7719849348068237, -1.565843105316162, -0.2251383662223816, -0.21995960175991058, -0.06243720278143883, -0.0643683522939682, -0.0016576610505580902, -0.003244970692321658, -0.07904639095067978, -0.029200157150626183, -0.48146870732307434, -0.0007574073388241231, -4.815939246327616e-05, -0.010871349833905697, -3.266281055402942e-05, -0.048500001430511475, -0.10631508380174637, -0.0013423488708212972, -0.03411778435111046, -0.0011928117601200938, -0.0037252570036798716, -0.002522978698834777, -0.004464302211999893, -3.576278118089249e-07, -0.043249502778053284, -0.5993022322654724, -0.25024980306625366, -0.2651619017124176, -0.09570059180259705, -0.005382687784731388, -3.234929323196411, -0.0011587579501792789, -7.235741941258311e-05, -3.290122185717337e-05, -0.03426489979028702, -0.3154948651790619, -0.017198823392391205, -0.29264774918556213, -0.14404861629009247, -0.4541875720024109, -0.0803048238158226, -0.17585128545761108, -0.0008856903295964003, -0.004650965798646212, -0.14260976016521454, -0.02904372662305832, -0.1059560477733612, -0.02366372011601925, -0.000300600629998371, -0.04964658245444298, -6.9141146923357155e-06, -5.602820692729438e-06, -0.0008906926377676427, -0.036683231592178345, -0.02831880748271942, -0.00125770119484514, -0.003334559267386794, -0.001867456827312708, -0.002072450239211321, -1.680836794548668e-05, -0.052501529455184937, -0.4567645490169525, -1.5913341045379639, -0.020619092509150505, -0.014808731153607368, -0.0018615075387060642, -0.15815052390098572, -0.004905213601887226, -0.08993025124073029, -0.07393211126327515, -0.15264952182769775, -0.014689270406961441, -0.14450514316558838, -0.013982079923152924, -0.03310168907046318, -0.00020704510097857565, -0.007273384835571051, -7.497983460780233e-05, -5.364274329622276e-05, -0.0026770727708935738, -0.003560752607882023, -0.0015115038258954883, -0.008435570634901524, -0.005351266358047724, -0.43301141262054443, -1.5894606113433838, -0.9587002396583557, -2.5059752464294434, -0.08063721656799316, -1.1134700775146484, -0.008701266720890999, -2.9802276912960224e-06, -3.933898824470816e-06, -0.1600632220506668, -0.0027608871459960938, -0.0007927850820124149, -0.05276583880186081, -0.0022553978487849236, -0.007133372128009796, -0.002629277529194951, -0.0033970526419579983, -0.0010251511121168733, -0.00034433635300956666, -2.3841574147809297e-05, -0.05348873883485794, -0.2811267077922821, -0.6299809217453003, -0.020021485164761543, -0.014786061830818653, -0.001176380319520831, -0.20683041214942932, -0.022884324193000793, -2.673044443130493, -2.3956801891326904, -0.09558477997779846, -0.010671808384358883, -0.0009734659106470644, -0.1137644499540329, -0.0008348317351192236, -0.0004040378553327173, -2.855069637298584, -0.041459646075963974, -0.0610082633793354, -0.12458371371030807, -0.012906704097986221, -0.035834793001413345, -2.5033637939486653e-05, -1.7046782886609435e-05, -0.005278341472148895, -0.0019237360684201121, -0.0058988058008253574, -0.32190993428230286, -0.0011442311806604266, -1.015487790107727, -0.22845473885536194, -0.04435821622610092, -0.1013476625084877, -0.07658406347036362, -0.042592164129018784, -1.121482014656067, -6.198863957251888e-06, -2.50339189733495e-06, -0.0016846762737259269, -0.014801918528974056, -0.056157633662223816, -0.002924453467130661, -0.0075173829682171345, -0.049497973173856735, -0.005333361681550741, -0.06041658669710159, -0.0014647241914644837, -0.0014463926199823618, -0.01948852464556694, -0.00016342257731594145, -2.0265558760002023e-06, -1.311301275563892e-06, -0.00017391123401466757, -0.011377571150660515, -0.7714832425117493, -0.0002426806604489684, -0.132461816072464, -0.002741033909842372, -0.0040584588423371315, -0.0005999195855110884, -0.018750792369246483, -4.172238186583854e-05, -0.0018549631349742413, -0.0008156548719853163, -0.0016183863626793027, -7.807903602952138e-05, -1.0013530300057027e-05, -0.0003564914222806692, -0.0025536566972732544, -3.0517112463712692e-05, -0.0006144542712718248, -0.004307278897613287], "finish_reason": "length"}], "metrics": {"energy": 877.465950860978, "energy_per_token": 3.427601370550695, "time": 21.84389, "time_per_token": 0.0853276953125}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a DataFrame')\n\n    if data.empty:\n        raise ValueError('data must not be empty')\n\n    if target_column not in data.columns:\n        raise ValueError('target_column must be in data')\n\n    if np.any(data.applymap(lambda x: not pd.api.types.is_numeric_dtype(x)).all()):\n        raise ValueError('data must only contain numeric values')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n\n    if not 0 <= test_size <= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    data = data.dropna()\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " a", " Data", "Frame", "')", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " not", " be", " empty", "')", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " must", " be", " in", " data", "')", "\n", "\n", "    ", "if", " np", ".", "any", "(", "data", ".", "apply", "map", "(", "lambda", " x", ":", " not", " pd", ".", "api", ".", "types", ".", "is", "_", "numeric", "_", "d", "type", "(", "x", "))", ".", "all", "()", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " only", " contain", " numeric", " values", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " must", " be", " an", " integer", "')", "\n", "\n", "    ", "if", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "')", "\n", "\n", "    ", "data", " =", " data", ".", "drop", "na", "()", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -0.8219397664070129, -0.00809897668659687, -0.47792384028434753, -0.48407047986984253, -0.021861523389816284, -0.16425664722919464, -0.0025567482225596905, -0.932074785232544, -0.0002493547508493066, -0.029273904860019684, -0.14795443415641785, -0.0032583975698798895, -0.05272241309285164, -0.0150483138859272, -0.0006114759016782045, -0.002796669490635395, -0.00040344204171560705, -0.00041762212640605867, -1.4305104514278355e-06, -0.026338648051023483, -0.02521069534122944, -0.22470255196094513, -0.08597472310066223, -0.004279621876776218, -0.005822364706546068, -0.008191442117094994, -0.0007266741595230997, -0.009698416106402874, -0.00014125302550382912, -0.0501205176115036, -0.3977969288825989, -0.00016544880054425448, -1.9788545614574105e-05, -0.0049413940869271755, -2.2172682292875834e-05, -0.0482100248336792, -0.09440412372350693, -0.0016095790779218078, -0.012862926349043846, -0.0014421073719859123, -0.002717970171943307, -0.001551615772768855, -0.002716186922043562, -6.556489552167477e-06, -0.2776869535446167, -0.07765015959739685, -0.09652626514434814, -0.003283349797129631, -0.2975477874279022, -0.011472680605947971, -2.0925445556640625, -0.24239614605903625, -0.23117633163928986, -0.0010542079107835889, -0.0043472787365317345, -0.00030620177858509123, -0.20801039040088654, -2.950120687484741, -8.11782301752828e-05, -0.43529027700424194, -0.013753293082118034, -0.3966894745826721, -0.2403266727924347, -0.9346032738685608, -0.1370151937007904, -0.004681341350078583, -0.7916265726089478, -0.10333032160997391, -0.01028735563158989, -1.265901803970337, -1.7843692302703857, -1.645074735279195e-05, -0.09091996401548386, -1.311301275563892e-06, -7.188061863416806e-05, -1.3470558769768104e-05, -0.0002022777043748647, -8.583032467868179e-06, -0.041409894824028015, -0.00016056202002801, -8.583032467868179e-06, -2.7418097943154862e-06, -0.0013778250431641936, -0.31724053621292114, -0.023551367223262787, -1.1232078075408936, -1.581273078918457, -0.211676687002182, -0.046897102147340775, -0.004853609949350357, -0.005968841258436441, -0.018332799896597862, -0.0008954567601904273, -3.4570634852570947e-06, -0.015902478247880936, -0.23467426002025604, -0.05237234756350517, -1.1465449333190918, -0.04056214168667793, -0.21543973684310913, -0.05603286996483803, -0.009116334840655327, -0.001807366730645299, -0.0025535377208143473, -0.0002686616498976946, -0.08761682361364365, -0.1253511905670166, -0.027996955439448357, -0.00010013079008786008, -0.032798442989587784, -2.145764938177308e-06, -5.125986263010418e-06, -0.0006812873762100935, -0.024139072746038437, -0.03169265761971474, -0.001142087858170271, -0.0028191369492560625, -0.0008634176338091493, -0.0010386077919974923, -3.576278118089249e-07, -0.009394722990691662, -0.006113519426435232, -0.004764276091009378, -0.0009152276325039566, -0.01136708166450262, -0.002603476867079735, -0.07907690107822418, -0.055548422038555145, -0.01006928738206625, -0.0004573014739435166, -0.018720608204603195, -6.258291978156194e-05, -0.008170868270099163, -0.5956323742866516, -0.6703776121139526, -0.0020549625623971224, -0.3199065029621124, -0.004967016167938709, -3.099436753473128e-06, -6.9141146923357155e-06, -0.028937535360455513, -0.010412298142910004, -0.0004700509598478675, -0.007964283227920532, -0.0008887869771569967, -0.001942058908753097, -0.0009654866298660636, -0.0002632986579556018, -1.1920928244535389e-07, -0.004160083830356598, -0.009042857214808464, -0.007250780705362558, -0.0011179156135767698, -0.012585149146616459, -0.01524475309997797, -0.12608465552330017, -0.0030088413041085005, -0.00014876213390380144, -0.0020872014574706554, -0.000296310376143083, -8.451581379631534e-05, -0.007732695899903774, -0.0011995985405519605, -0.011252631433308125, -0.0014950776239857078, -2.0826117992401123, -0.5655485391616821, -0.022544050589203835, -0.12805511057376862, -0.9240525960922241, -0.021368516609072685, -0.22946204245090485, -0.11150184273719788, -0.6136139035224915, -0.0002610342635307461, -0.769620954990387, -0.14483676850795746, -0.03640222176909447, -0.1344396471977234, -0.10446924716234207, -0.0337442010641098, -1.3660507202148438, -2.145764938177308e-06, -2.50339189733495e-06, -0.0011073178611695766, -0.008924122899770737, -0.04699014127254486, -0.0005082983989268541, -0.007588962092995644, -0.06492406874895096, -0.01886216551065445, -0.07490315288305283, -0.0007955246837809682, -0.0011474461061879992, -0.01808592490851879, -4.017272294731811e-05, -1.6689286894688848e-06, -1.5497195136049413e-06, -0.00019464982324279845, -0.008374218828976154, -0.18447834253311157, -0.00015209948469419032, -0.07749097794294357, -0.004284013994038105, -0.002886298345401883, -0.0005778788472525775, -0.008615231141448021, -2.4318398573086597e-05, -0.0015049570938572288, -0.0009632238652557135, -0.000990496133454144, -4.279521817807108e-05, -4.410734163684538e-06, -0.000163541772053577, -0.00292017450556159, -2.372236667724792e-05, -0.0004951919545419514, -0.003243901301175356, -0.01080283522605896, -1.168244216387393e-05, -8.344646857949556e-07, -2.0265558760002023e-06, -7.152555099310121e-07, -0.00017712931730784476, -0.4133540093898773, -0.017634859308600426, -0.01945684105157852, -0.0037653991021215916, -0.03187372907996178, -6.6756979322235566e-06, -2.3841855067985307e-07, -0.02469479851424694, -0.01075696013867855, -3.4570634852570947e-06, -4.172316494077677e-06, -0.001658732071518898, -0.007403911091387272, -8.344646857949556e-07, -3.2186455882765586e-06], "finish_reason": "length"}], "metrics": {"energy": 906.7075101099008, "energy_per_token": 3.5418262113668, "time": 22.063267, "time_per_token": 0.08618463671875}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame.\")\n\n    if data.empty:\n        raise ValueError(\"data is empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target_column not found in data.\")\n\n    if not data[target_column].dtype in (np.int64, np.float64):\n        raise ValueError(\"target_column contains non-numeric values.\")\n\n    for col in data.columns:\n        if col != target_column and not data[col].dtype in (np.int64, np.float64):\n            raise ValueError(f\"column {col} contains non-numeric values.\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer.\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1.\")\n\n", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " not", " found", " in", " data", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " data", "[", "target", "_", "column", "]", ".", "d", "type", " in", " (", "np", ".", "int", "6", "4", ",", " np", ".", "float", "6", "4", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " contains", " non", "-", "numeric", " values", ".", "\"", ")", "\n", "\n", "    ", "for", " col", " in", " data", ".", "columns", ":", "\n", "        ", "if", " col", " ", "!", "=", " target", "_", "column", " and", " not", " data", "[", "col", "]", ".", "d", "type", " in", " (", "np", ".", "int", "6", "4", ",", " np", ".", "float", "6", "4", "):", "\n", "            ", "raise", " Value", "Error", "(", "f", "\"", "column", " {", "col", "}", " contains", " non", "-", "numeric", " values", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n", "\n"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -2.4399592876434326, -0.018322734162211418, -0.0014177043922245502, -0.006871876772493124, -1.0965113639831543, -0.00023707917716819793, -0.03432364761829376, -0.1569206714630127, -0.003956111613661051, -0.05901622027158737, -0.012964954599738121, -0.0007543102256022394, -0.003410002216696739, -0.0006323245470412076, -0.000518664310220629, -2.0265558760002023e-06, -0.016558365896344185, -0.003152522025629878, -0.056728068739175797, -0.04020240902900696, -0.023655105382204056, -1.6072742938995361, -0.0005801424849778414, -0.0015010291244834661, -0.01866280846297741, -0.0001308832288486883, -0.06227390468120575, -0.3386298716068268, -0.00025507534155622125, -1.7404405298293568e-05, -0.0082594258710742, -2.3483953555114567e-05, -0.07241573929786682, -0.11209485679864883, -0.003918352071195841, -0.029613053426146507, -0.0015467357588931918, -0.0028681117109954357, -0.0017713108099997044, -0.0018949424847960472, -5.006777428206988e-06, -0.007413614075630903, -0.3225148022174835, -0.0900520607829094, -0.03842417895793915, -0.004923481959849596, -3.163057327270508, -3.0998129844665527, -0.158773273229599, -0.1088656410574913, -1.45746910572052, -0.12002018094062805, -0.0009403574513271451, -0.0011127954348921776, -0.006647141650319099, -0.00041940953815355897, -0.20764850080013275, -0.4692814350128174, -0.2974243760108948, -0.37261611223220825, -0.06059309467673302, -4.768370445162873e-07, -4.768360213347478e-06, -0.0002525725867599249, -1.537788011773955e-05, -1.5271474123001099, -0.008945389650762081, -0.907683253288269, -1.37002432346344, -0.37306901812553406, -2.0265373677830212e-05, -0.7060016393661499, -0.2010364681482315, -1.7881377516459906e-06, -0.003350479993969202, -0.02182011678814888, -1.9073304429184645e-05, -0.057601846754550934, -0.004156166221946478, -2.145764938177308e-06, -0.1649203896522522, -0.006578337401151657, -0.0053692893125116825, -0.008280943147838116, -0.0015231685247272253, -3.1470757676288486e-05, -0.011086059734225273, -0.1804673671722412, -0.5978309512138367, -0.15497346222400665, -0.004209467675536871, -0.6175812482833862, -0.5088222622871399, -0.3012268543243408, -0.03350432962179184, -0.09383796900510788, -0.46007150411605835, -0.004901773761957884, -0.0006756883230991662, -0.0011862630490213633, -0.011109873652458191, -0.00030787018476985395, -1.9882451295852661, -0.802202045917511, -0.045021917670965195, -0.023988250643014908, -0.3347509801387787, -0.020645134150981903, -0.04334961995482445, -0.002275260630995035, -0.006833753548562527, -0.01590423844754696, -0.08800248056650162, -0.4664492905139923, -4.768370445162873e-07, -3.2186455882765586e-06, -0.002098502591252327, -1.2755313036905136e-05, -3.933898824470816e-06, -0.6402849555015564, -0.09738964587450027, -0.006653062533587217, -0.0019393223337829113, -0.0021964015904814005, -0.00018523407925385982, -3.909988299710676e-05, -0.004186437930911779, -3.45700973412022e-05, -0.024205049499869347, -0.009217328391969204, -0.0025058556348085403, -8.106198947643861e-06, -0.0046233185566961765, -0.0013097288319841027, 0.0, -0.00030632095877081156, -0.0038340408354997635, -2.7418097943154862e-06, -0.0007828985108062625, -9.107174992095679e-05, 0.0, -0.00453408295288682, -0.002725816797465086, -0.0050216978415846825, -0.0009263038518838584, -0.0008092227508313954, -1.2755313036905136e-05, -0.0028123611118644476, -0.6099772453308105, -0.015789367258548737, -1.2294411659240723, -0.21961350739002228, -0.004902722779661417, -0.013733774423599243, -0.056332867592573166, -0.002037355676293373, -0.0027371107134968042, -0.00214406312443316, -0.0040368507616221905, -0.09111522138118744, -0.0009775151265785098, -0.0009640575153753161, -0.0011634016409516335, -0.007567429915070534, -0.001564113306812942, -0.04475179314613342, -0.10535477101802826, -0.033576495945453644, -0.00018308870494365692, -0.026419108733534813, -3.2186455882765586e-06, -1.2278481335670222e-05, -0.0007985025877133012, -0.02625376731157303, -0.03702102601528168, -0.001206861576065421, -0.004188574850559235, -0.0007952864980325103, -0.0011643542675301433, -2.622600959512056e-06, -0.00968117918819189, -0.03480742871761322, -0.019063003361225128, -0.009207525290548801, -0.0022818022407591343, -0.1493876725435257, -0.005507415160536766, -0.06249689310789108, -0.04834270104765892, -0.1281403750181198, -0.0012734169140458107, -0.00022194306075107306, -0.0007823029300197959, -0.020395440980792046, -6.210611172718927e-05, -0.010583464987576008, -0.9857900738716125, -9.65590606938349e-06, -4.410734163684538e-06, -0.6925804018974304, -0.012135952711105347, -0.0005218812730163336, -0.04529914632439613, -0.0023297329898923635, -2.825220326485578e-05, -7.510157047363464e-06, -0.4419611990451813, -0.0038311907555907965, -0.003768486902117729, -0.026175150647759438, -0.0006307758158072829, -0.003476292360574007, -0.0009153467253781855, -0.0003398079425096512, -7.033323527139146e-06, -0.004812444094568491, -0.006163162179291248, -0.014237609691917896, -0.009132045321166515, -0.0009453595266677439, -0.2672569751739502, -0.04928000643849373, -0.21583983302116394, -0.005794987082481384, -0.00014661667228210717, -0.004602909088134766, -0.00042691652197390795, -7.974783511599526e-05, -0.10985217243432999, -0.0013293724041432142, -0.00029023250681348145, -0.0019405120983719826, -0.012065287679433823], "finish_reason": "length"}], "metrics": {"energy": 887.8852704277035, "energy_per_token": 3.468301837608217, "time": 21.85699, "time_per_token": 0.0853788671875}}
{"outputs": [{"text": "# validate input\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be of type pd.DataFrame')\n    if data.empty:\n        raise ValueError('data must not be empty')\n    if target_column not in data.columns:\n        raise ValueError(f'target_column {target_column} must be a column of data')\n    if not data.dtypes[target_column].name in ['int64', 'float64']:\n        raise ValueError('target_column must be of numeric type')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n    if test_size > 1 or test_size <= 0:\n        raise ValueError('test_size must be between 0 and 1')\n    # split the data into a training and a test set\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size", "tokens": ["#", " validate", " input", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " of", " type", " pd", ".", "DataFrame", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " not", " be", " empty", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "target", "_", "column", " {", "target", "_", "column", "}", " must", " be", " a", " column", " of", " data", "')", "\n", "    ", "if", " not", " data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "name", " in", " ['", "int", "6", "4", "'", ",", " '", "float", "6", "4", "']", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " must", " be", " of", " numeric", " type", "')", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " must", " be", " an", " integer", "')", "\n", "    ", "if", " test", "_", "size", " >", " ", "1", " or", " test", "_", "size", " <=", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "')", "\n", "    ", "#", " split", " the", " data", " into", " a", " training", " and", " a", " test", " set", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size"], "logprobs": [-1.6118500232696533, -4.0048346519470215, -1.1865079402923584, -0.4721623659133911, -0.029462823644280434, -0.1152227446436882, -0.05413760244846344, -0.016827186569571495, -0.00036376056959852576, -0.009811155498027802, -0.0007546676206402481, -0.009362010285258293, -1.0132738680113107e-05, -0.011728499084711075, -0.00713538471609354, -0.006670469883829355, -0.0055900439620018005, -0.008394197560846806, -0.005794631317257881, -4.0531076592742465e-06, -1.30854332447052, -0.2808651626110077, -0.7001125812530518, -0.006952143739908934, -1.5095657110214233, -0.008050375618040562, -1.805482268333435, -0.00028379703871905804, -0.007134201005101204, -0.1202588826417923, -0.0023319926112890244, -0.49687284231185913, -0.09846880286931992, -0.21573127806186676, -0.0018106985371559858, -0.10272219032049179, -0.01183735765516758, -0.001313062384724617, -0.0022724061273038387, -0.0011639971053227782, -0.0004576589271891862, -1.311301275563892e-06, -0.024890979751944542, -0.02292032539844513, -0.29267773032188416, -0.14433881640434265, -0.0038631348870694637, -0.008657422848045826, -0.01496998593211174, -0.0010332489619031549, -0.016950026154518127, -0.03366398438811302, -0.4143989086151123, -0.00017975145601667464, -1.4305012882687151e-05, -0.00565109308809042, -3.4927710657939315e-05, -0.04541466385126114, -0.10211196541786194, -0.002477316651493311, -0.018374349921941757, -0.0013819915475323796, -0.0015938685974106193, -0.0025617422070354223, -0.003161672269925475, -2.622600959512056e-06, -1.3486415147781372, -0.18850046396255493, -0.19404852390289307, -0.22909410297870636, -0.1064060777425766, -0.004578108433634043, -1.0412851572036743, -0.001319729257375002, -0.0005258131423033774, -0.0002008474839385599, -0.04310130700469017, -1.700934886932373, -0.014954601414501667, -0.434510737657547, -0.07835198938846588, -0.24074721336364746, -0.0501524917781353, -0.02838972397148609, -0.001996787264943123, -0.0377652645111084, -0.05973854660987854, -0.5846074223518372, -0.3938243091106415, -0.9163083434104919, -0.8645732402801514, -1.9430925021879375e-05, -0.2773664891719818, -0.002491943072527647, -9.536738616588991e-07, -2.622600959512056e-06, -0.0018861376447603106, -0.09824569523334503, -2.7922027111053467, -0.25214287638664246, -0.6787962317466736, -0.9432581067085266, -0.26692822575569153, -1.5616295058862306e-05, -0.002344718435779214, -0.0017565549351274967, -0.05897463858127594, -0.028826700523495674, -0.0039411503821611404, -2.0861407392658293e-05, -0.0999949723482132, -0.006683022249490023, -0.007386871613562107, -0.003327192971482873, -0.014952017925679684, -0.0007597897201776505, -3.2186455882765586e-06, -0.8678560853004456, -0.6305714845657349, -0.08168812841176987, -0.0018504415638744831, -0.22124288976192474, -0.7076320052146912, -1.8784165382385254, -2.096933126449585, -0.11572946608066559, -0.04595823958516121, -0.0028334015514701605, -0.0633585974574089, -0.11234036087989807, -0.18542426824569702, -0.44940799474716187, -0.00018261195509694517, -0.06614013016223907, -3.3378546504536644e-06, -1.1086402082582936e-05, -0.0009654866298660636, -0.030906319618225098, -0.040613193064928055, -0.001446868758648634, -0.002728907624259591, -0.0006644901586696506, -0.0009834696538746357, -1.6689286894688848e-06, -0.03436603397130966, -0.013540918938815594, -0.00856653694063425, -0.0019602624233812094, -0.01552237942814827, -0.007744170259684324, -0.6459226012229919, -0.09014955908060074, -0.02696266397833824, -0.0008397151832468808, -0.002916489727795124, -0.009872891008853912, -1.4028663635253906, -9.417489309271332e-06, -3.099436753473128e-06, -2.3857522010803223, -0.005324942991137505, -0.007697444874793291, -0.14025646448135376, -0.004483290947973728, -3.4570634852570947e-06, -3.2186455882765586e-06, -2.160456418991089, -0.0132753299549222, -0.00023576818057335913, -0.016324421390891075, -0.001975491177290678, -0.0025399825535714626, -0.0017514378996565938, -0.0001760566228767857, -6.318072337307967e-06, -0.012157504446804523, -0.012782425619661808, -0.014819184318184853, -0.0010931475553661585, -0.017696816474199295, -0.02604844607412815, -0.5502457618713379, -0.02090468630194664, -0.006943383254110813, -0.00799574051052332, -0.001416751998476684, -0.0003962923656217754, -0.06412162631750107, -0.0018488947534933686, -1.0282173156738281, -1.6626495122909546, -1.4415544271469116, -2.078317403793335, -0.17215478420257568, -0.9855757355690002, -1.178708791732788, -0.5892601609230042, -0.08588392287492752, -0.5504134893417358, -0.03576831519603729, -0.09615828841924667, -0.07745225727558136, -0.003443147987127304, -1.2218279838562012, -0.7299068570137024, -0.03029586374759674, -0.16897808015346527, -0.12076591700315475, -0.048377908766269684, -0.3301513195037842, -0.7398810386657715, -0.0007382289622910321, -1.6927575416048057e-05, -6.794906312279636e-06, -0.07729855924844742, -0.04164890944957733, -0.001967995660379529, -0.08297758549451828, -0.001954194623976946, -0.0017663128674030304, -0.02878546714782715, -0.00011908298620255664, -8.344646857949556e-07, -5.960462772236497e-07, -0.00011848701251437888, -0.010669095441699028, -0.041763246059417725, -0.09854140132665634, -0.007206635549664497, -0.00437505217269063, -0.0006282739923335612, -0.004421339835971594, -1.9430925021879375e-05, -0.0014560346025973558, -0.0011014830088242888, -0.0014061573892831802, -7.068861305015162e-05, -2.52720492426306e-05, -0.0003400462737772614, -0.0013233008794486523, -4.053033626405522e-05, -0.0001408954558428377, -0.005963271949440241, -0.013673687353730202, -2.2172682292875834e-05, -2.264974000354414e-06, -1.1920922133867862e-06, -3.576278118089249e-07, -0.0002873722987715155, -0.20728668570518494, -0.007995858788490295, -0.027775179594755173, -0.0035091983154416084, -0.0419500507414341, -7.629365427419543e-06, -2.7418097943154862e-06], "finish_reason": "length"}], "metrics": {"energy": 871.9505294799799, "energy_per_token": 3.4060567557811714, "time": 22.065186, "time_per_token": 0.0861921328125}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f'Expected data to be a DataFrame, but got {type(data)}')\n    elif data.empty:\n        raise ValueError(f'data can not be empty')\n    elif target_column not in data.columns:\n        raise ValueError(f'target_column is not in data')\n    elif not np.issubdtype(data.dtypes[target_column], np.number):\n        raise ValueError(f'target_column {target_column} has to be a number, but got {data.dtypes[target_column]}')\n    elif not isinstance(random_state, int):\n        raise ValueError(f'random_state has to be an integer, but got {type(random_state)}')\n    elif not 0 <= test_size <= 1:\n        raise ValueError(f'test_size has to be between 0 and 1, but got {test_size}')\n\n    x = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    x", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Expected", " data", " to", " be", " a", " Data", "Frame", ",", " but", " got", " {", "type", "(", "data", ")}", "')", "\n", "    ", "elif", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "data", " can", " not", " be", " empty", "')", "\n", "    ", "elif", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "target", "_", "column", " is", " not", " in", " data", "')", "\n", "    ", "elif", " not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "d", "types", "[", "target", "_", "column", "]", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "target", "_", "column", " {", "target", "_", "column", "}", " has", " to", " be", " a", " number", ",", " but", " got", " {", "data", ".", "d", "types", "[", "target", "_", "column", "]}", "')", "\n", "    ", "elif", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "random", "_", "state", " has", " to", " be", " an", " integer", ",", " but", " got", " {", "type", "(", "random", "_", "state", ")}", "')", "\n", "    ", "elif", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "test", "_", "size", " has", " to", " be", " between", " ", "0", " and", " ", "1", ",", " but", " got", " {", "test", "_", "size", "}", "')", "\n", "\n", "    ", "x", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "x"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -1.438918113708496, -1.0694876909255981, -2.2592456340789795, -1.3259085416793823, -0.1764284372329712, -0.021534668281674385, -0.6925877928733826, -0.23826342821121216, -0.017242060974240303, -0.40327736735343933, -0.7735971808433533, -0.5111082792282104, -0.05411975830793381, -0.05778234079480171, -0.0003420721332076937, -0.0011275607394054532, -0.22335371375083923, -0.38564714789390564, -0.003467620350420475, -0.48007622361183167, -2.3879177570343018, -0.23359735310077667, -0.0035103862173855305, -0.03284066542983055, -0.012834328226745129, -0.0007915939204394817, -0.0036213314160704613, -0.0021992563270032406, -0.0004808938247151673, -2.264974000354414e-06, -0.6397023797035217, -0.09764797985553741, -0.05637241527438164, -1.3011620044708252, -3.4132370948791504, -0.09336096793413162, -0.0049071116372942924, -0.014838212169706821, -0.21805018186569214, -0.0009082006872631609, -0.011394660919904709, -0.015197202563285828, -0.3691260516643524, -0.0003401654539629817, -4.279521817807108e-05, -0.006913905031979084, -2.7656173188006505e-05, -0.05840357393026352, -0.12589538097381592, -0.005005328916013241, -0.04868362098932266, -0.002877739956602454, -0.003030947409570217, -0.006411340553313494, -0.0017084777355194092, -4.768370445162873e-07, -0.017703726887702942, -0.03521399199962616, -0.11767855286598206, -0.46305760741233826, -0.06881925463676453, -0.005000821780413389, -2.0095627307891846, -0.09428903460502625, -1.6220917701721191, -0.30477121472358704, -0.2953399121761322, -0.0009901388548314571, -0.028360871598124504, -0.06724126636981964, -0.5426861047744751, -1.599170207977295, -1.645074735279195e-05, -0.1035798192024231, -0.005202209111303091, -5.364403477869928e-06, -0.0001134808044298552, -0.00018654513405635953, -0.0711493268609047, -0.3746863603591919, -0.07764067500829697, -8.940656698541716e-06, -0.17850758135318756, -0.007063891272991896, -5.722029527532868e-06, -1.07287787614041e-05, -0.0001714082609396428, -0.09456909447908401, -0.00984798464924097, -1.2636104656849056e-05, -0.008160935714840889, -0.006401154212653637, -0.006757384166121483, -0.006168849300593138, -0.014307886362075806, -0.0015145984943956137, -3.576278118089249e-07, -0.029820190742611885, -0.02849365770816803, -0.1124153658747673, -0.7188844084739685, -0.07261907309293747, -0.001880307332612574, -2.473539352416992, -0.012216858565807343, -6.258291978156194e-05, -0.00016973962192423642, -0.00792726594954729, -2.0329771041870117, -0.9903879761695862, -0.17171061038970947, -2.180093288421631, -2.606607675552368, -2.443187713623047, -0.394658625125885, -0.5298138856887817, -0.06653661280870438, -0.03659244254231453, -0.16314265131950378, -0.002395143499597907, -0.0004076126788277179, -0.0025638823863118887, -0.001680630026385188, -6.0437283536884934e-05, -7.092700980138034e-05, -0.007305574137717485, -0.03035484440624714, -0.004308940377086401, -0.07679395377635956, -0.07061772793531418, -0.11134188622236252, -1.0648407936096191, -0.0002936885575763881, -0.04500163346529007, -4.291525328881107e-06, -1.8596476365928538e-05, -0.0008818790083751082, -0.039527248591184616, -0.04895336553454399, -0.0019345632754266262, -0.004289592616260052, -0.0008328068652190268, -0.0006914132391102612, -2.9802276912960224e-06, -0.04749421402812004, -0.002568757627159357, -0.01980775035917759, -0.23480500280857086, -0.01205350924283266, -0.002272168407216668, -0.38074758648872375, -0.0037335706874728203, -0.007527085021138191, -0.16418492794036865, -0.14719825983047485, -0.22705301642417908, -0.03351655229926109, -0.03416766971349716, -0.012859748676419258, -0.02808701992034912, -0.00023731753753963858, -0.004435937851667404, -2.706014311115723e-05, -5.1616290875244886e-05, -0.0017348966794088483, -0.014158748090267181, -0.0014829363208264112, -0.003443147987127304, -0.017355944961309433, -0.5362008810043335, -0.6288081407546997, -0.004768547136336565, -0.3935481607913971, -0.011262886226177216, -2.9802276912960224e-06, -5.960446742392378e-06, -0.0361836813390255, -0.02370050922036171, -0.0008873577462509274, -0.014347018674015999, -0.0012357940431684256, -0.002454365836456418, -0.0018839959520846605, -0.0002592465898487717, -3.576272320060525e-06, -0.023152966052293777, -0.0018615075387060642, -0.007573226932436228, -0.036458201706409454, -0.008821327239274979, -0.0019031523261219263, -0.07343466579914093, -0.0045935348607599735, -0.0163522157818079, -0.32340946793556213, -0.009286896325647831, -0.0006398299592547119, -0.006326291710138321, -0.0013158005895093083, -0.0005005536950193346, -0.038197360932826996, -0.004633998032659292, -0.03262942284345627, -0.014115612022578716, -0.011879178695380688, -4.6132929128361866e-05, -1.2040065485052764e-05, -0.012147023342549801, -0.00391182117164135, -0.00482312124222517, -0.6460468173027039, -0.0005273620481602848, -2.219336986541748, -0.19653044641017914, -0.03307193145155907, -0.2193031758069992, -0.11626289039850235, -0.037062838673591614, -1.1215648651123047, -4.291525328881107e-06, -1.7881377516459906e-06, -0.0012406755704432726, -0.025774076581001282, -0.08826477080583572, -0.002067691646516323, -0.00734699284657836, -0.08091376721858978, -0.02895444445312023, -0.05846609175205231, -0.0014149664202705026, -0.0028019000310450792, -0.027719177305698395, -0.00011038171214750037, -3.3378546504536644e-06, -8.344646857949556e-07, -0.00016807096835691482, -0.01122292596846819, -0.602131187915802, -0.00022539935889653862, -0.21400250494480133], "finish_reason": "length"}], "metrics": {"energy": 923.2242724971769, "energy_per_token": 3.6063448144420973, "time": 22.07146, "time_per_token": 0.086216640625}}
{"outputs": [{"text": "# Check that data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pandas DataFrame.\")\n\n    # Check that data is not empty\n    if data.empty:\n        raise ValueError(\"data must not be empty.\")\n\n    # Check if target_column is in data.columns\n    if not target_column in data.columns:\n        raise ValueError(f\"target_column must be a column of data.\")\n\n    # Check if data only contains numeric values\n    if data.dtypes.dtype != np.dtype('float64'):\n        raise ValueError(\"data must contain only numeric values.\")\n\n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n\n    # Check if test_size is between 0 and 1\n    if not (0 < test_size < 1):\n        raise ValueError(\"test_size must be between 0 and 1.", "tokens": ["#", " Check", " that", " data", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " be", " of", " type", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " that", " data", " is", " not", " empty", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " not", " be", " empty", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " target", "_", "column", " is", " in", " data", ".", "columns", "\n", "    ", "if", " not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " must", " be", " a", " column", " of", " data", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " data", " only", " contains", " numeric", " values", "\n", "    ", "if", " data", ".", "d", "types", ".", "d", "type", " ", "!", "=", " np", ".", "d", "type", "('", "float", "6", "4", "')", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " contain", " only", " numeric", " values", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " random", "_", "state", " is", " an", " integer", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " must", " be", " an", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " test", "_", "size", " is", " between", " ", "0", " and", " ", "1", "\n", "    ", "if", " not", " (", "0", " <", " test", "_", "size", " <", " ", "1", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "."], "logprobs": [-1.6118500232696533, -1.9385334253311157, -2.2924766540527344, -0.6401271820068359, -0.04603611305356026, -0.2984504699707031, -0.44180577993392944, -0.04919421300292015, -0.28665778040885925, -0.002584571484476328, -0.020635440945625305, -0.02161470055580139, -0.007227465510368347, -0.00033539868309162557, -0.0007619338575750589, -0.0004864939546678215, -0.008277632296085358, -1.3708974620385561e-05, -0.0337153896689415, -0.002039021346718073, -0.0025988395791500807, -0.005702892318367958, -0.009871003217995167, -0.00675359508022666, -3.3378546504536644e-06, -0.3014763295650482, -0.16303834319114685, -0.4781876802444458, -0.43777772784233093, -0.0024334362242370844, -1.9398810863494873, -0.009847630746662617, -0.9202887415885925, -1.9615384340286255, -0.036231279373168945, -1.857172966003418, -0.029258159920573235, -0.0018773326883092523, -0.005151332356035709, -0.31604811549186707, -0.0017370387213304639, -0.012262902222573757, -0.03794340416789055, -0.14433912932872772, -0.11777699738740921, -0.1347011923789978, -0.029344754293560982, -0.014818597584962845, -0.03566824272274971, -0.00014351768186315894, -0.015746185556054115, -0.1054992750287056, -0.0056464700028300285, -0.02275790087878704, -0.01159476488828659, -0.00025006983196362853, -0.0033092519734054804, -0.0005364171229302883, -0.0005297449533827603, -2.0265558760002023e-06, -0.02281814254820347, -0.002676716074347496, -0.03101946786046028, -0.3060152530670166, -0.11606845259666443, -0.0026637569535523653, -0.007516200188547373, -0.1615237444639206, -0.002187480451539159, -0.00027211778797209263, -0.001492934999987483, -0.007114079315215349, -0.001396633917465806, -0.006842514965683222, -0.029052063822746277, -2.996159315109253, -0.2603393793106079, -0.1450652927160263, -0.011211727745831013, -0.11474627256393433, -0.9896836876869202, -0.4641530513763428, -2.5743746757507324, -0.06597977876663208, -0.04917844012379646, -0.0004357342259027064, -0.015828793868422508, -2.4475083351135254, -0.07398038357496262, -5.960446742392378e-06, -1.6689286894688848e-06, -0.0030110995285212994, -0.0498800054192543, -0.012327902019023895, -0.0004101150552742183, -0.008580010384321213, -0.0007631250191479921, -0.0048315441235899925, -0.004060239996761084, -0.002341031562536955, -7.271740287251305e-06, -0.013381198048591614, -1.6821717023849487, -0.03087557479739189, -0.38361620903015137, -0.031113535165786743, -0.003944356460124254, -1.5731370449066162, -0.019972408190369606, -1.0664626359939575, -0.10117163509130478, -0.45463496446609497, -0.1393842101097107, -0.2449832707643509, -0.948937714099884, -0.03153984993696213, -0.0021752286702394485, -0.006658509839326143, -0.002428798470646143, -0.011608080007135868, -0.06753368675708771, -0.4953683018684387, -0.590988039970398, -3.01816463470459, -0.12565307319164276, -0.2838733494281769, -0.10580763965845108, -0.09872663766145706, -0.0010795724811032414, -0.0705457404255867, -2.098910331726074, -0.04328694939613342, -0.1640712171792984, -0.00020716428116429597, -0.10463599860668182, -2.1985034942626953, -0.00047839165199548006, -0.14200127124786377, -7.152555099310121e-07, -0.0008255410939455032, -0.25203651189804077, -4.0531076592742465e-06, -0.17268352210521698, -1.311301275563892e-06, -0.08136838674545288, -0.007536550052464008, -0.003666466102004051, -1.5735502529423684e-05, -0.0010289618512615561, -0.5265615582466125, -0.00490390881896019, -0.00748839508742094, -0.02058546058833599, -0.0014543681172654033, -5.006777428206988e-06, -0.027463242411613464, -0.23125919699668884, -0.1532641500234604, -0.06038280948996544, -1.0212900638580322, -0.13441558182239532, -0.22618134319782257, -0.014285675249993801, -0.07096068561077118, -0.006766027770936489, -0.0005694198189303279, -0.001817719079554081, -0.004828697070479393, -0.0020350953564047813, -0.024287428706884384, -0.06135699898004532, -0.17683915793895721, -0.25959473848342896, -0.021265242248773575, -0.0031922117341309786, -0.018570955842733383, -0.23590435087680817, -0.061890859156847, -0.07097934186458588, -0.00021765247220173478, -0.01241785753518343, -0.10090322047472, -0.056956805288791656, -0.00033539868309162557, -0.000871278636623174, -5.006777428206988e-06, -1.0847986231965479e-05, -0.0014152044896036386, -0.03397779539227486, -0.01254771463572979, -0.0009754904895089567, -0.0037681306712329388, -0.0006438804557546973, -0.0010413468116894364, -2.9802276912960224e-06, -0.008046827279031277, -0.026996081694960594, -0.013743886724114418, -0.002586236223578453, -0.004837238695472479, -0.009100032970309258, -0.002493250882253051, -0.18828323483467102, -0.01762584038078785, -0.08146102726459503, -0.0012985378270968795, -8.49926145747304e-05, -0.0008892634068615735, -0.006180696655064821, -0.0020772088319063187, -0.010578392073512077, -0.030333103612065315, -0.0437106192111969, -0.020600758492946625, -0.0152065958827734, -0.0009701313101686537, -0.027472171932458878, -0.32697808742523193, -0.00391799584031105, -0.0005640584276989102, -0.005461177788674831, -0.00044764988706447184, -0.0007257211836986244, -0.025995947420597076, -0.00022587609419133514, -0.0030204886570572853, -0.9482005834579468, -0.9760817289352417, -0.16557905077934265, -0.7453193664550781, -0.0024471119977533817, -1.5497195136049413e-06, -3.576278118089249e-07, -0.05022153630852699, -0.0046775443479418755, -0.000559173640795052, -0.011945145204663277, -0.0012518672738224268, -0.0025988395791500807, -0.0006423317245207727, -0.00022063204960431904, -3.3378546504536644e-06, -0.0069021848030388355, -0.008802893571555614, -0.01475223246961832, -0.003932957071810961, -0.00044216870446689427, -0.011247562244534492, -0.012214032001793385, -0.19499622285366058, -0.004491360858082771, -0.00024172721896320581, -0.002077446784824133, -0.00032610344351269305, -0.00018904806347563863, -0.0775734931230545], "finish_reason": "length"}], "metrics": {"energy": 876.3189113779072, "energy_per_token": 3.42312074756995, "time": 21.863667, "time_per_token": 0.08540494921875}}
{"outputs": [{"text": "# Check that data is a dataframe.\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\n            \"Parameter data must be of type pandas.DataFrame. Got \"\n            + str(type(data))\n            + \".\"\n        )\n    # Check that data is not empty.\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    # Check that target_column is a column of data.\n    if target_column not in data.columns:\n        raise ValueError(\n            \"target_column must be one of data's columns.\"\n            \" Got \" + target_column + \".\"\n        )\n    # Check that data contains values that are numeric.\n    # Use the numpy-based solution from\n    # https://stackoverflow.com/a/27697209\n    # to check if all values are numeric.\n    if not (data == data.astype(float)).all(1).all():\n        raise ValueError(\n            \"data must only contain values that are numeric.\"\n        )\n    # Check", "tokens": ["#", " Check", " that", " data", " is", " a", " data", "frame", ".", "\n", "    ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "\"", "Parameter", " data", " must", " be", " of", " type", " pandas", ".", "DataFrame", ".", " Got", " \"", "\n", "            ", "+", " str", "(", "type", "(", "data", "))", "\n", "            ", "+", " \"", ".", "\"", "\n", "        ", ")", "\n", "    ", "#", " Check", " that", " data", " is", " not", " empty", ".", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " not", " be", " empty", "\"", ")", "\n", "    ", "#", " Check", " that", " target", "_", "column", " is", " a", " column", " of", " data", ".", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "\"", "target", "_", "column", " must", " be", " one", " of", " data", "'", "s", " columns", ".", "\"", "\n", "            ", "\"", " Got", " \"", " +", " target", "_", "column", " +", " \"", ".", "\"", "\n", "        ", ")", "\n", "    ", "#", " Check", " that", " data", " contains", " values", " that", " are", " numeric", ".", "\n", "    ", "#", " Use", " the", " numpy", "-", "based", " solution", " from", "\n", "    ", "#", " https", "://", "stack", "overflow", ".", "com", "/", "a", "/", "2", "7", "6", "9", "7", "2", "0", "9", "\n", "    ", "#", " to", " check", " if", " all", " values", " are", " numeric", ".", "\n", "    ", "if", " not", " (", "data", " ==", " data", ".", "ast", "ype", "(", "float", "))", ".", "all", "(", "1", ")", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "\"", "data", " must", " only", " contain", " values", " that", " are", " numeric", ".", "\"", "\n", "        ", ")", "\n", "    ", "#", " Check"], "logprobs": [-1.6118500232696533, -1.9385334253311157, -2.2924766540527344, -0.6401271820068359, -0.04603611305356026, -0.2984504699707031, -3.2313718795776367, -0.13068217039108276, -2.0962274074554443, -0.033350419253110886, -0.003011218272149563, -0.035012226551771164, -0.06921656429767609, -0.03156895935535431, -0.00037555795279331505, -0.0013618728844448924, -0.0005610798834823072, -0.013267683796584606, -1.1920858014491387e-05, -0.03328192979097366, -0.0028676362708210945, -0.004142276477068663, -0.008602466434240341, -0.02161598391830921, -0.00627108896151185, -5.364403477869928e-06, -0.3727441430091858, -3.0050084590911865, -0.03105217218399048, -1.2936971187591553, -3.334470272064209, -0.36152344942092896, -1.0001845359802246, -0.02796345390379429, -0.5775838494300842, -0.025504278019070625, -0.42205044627189636, -0.1228523999452591, -0.02883503958582878, -1.1880258321762085, -2.3288207054138184, -2.4866042137145996, -0.38506224751472473, -0.005776616279035807, -1.5098832845687866, -0.6252667307853699, -0.00023719835735391825, -0.04805301874876022, -0.0007701530121266842, -0.0008899780223146081, -0.056518882513046265, -0.40567848086357117, -0.8972351551055908, -0.004553781822323799, -0.015880655497312546, -0.8769747018814087, -0.007571334019303322, -0.07663342356681824, -0.01809845119714737, -3.540453326422721e-05, -0.005494610872119665, -1.2570679187774658, -0.08553335070610046, -0.045725610107183456, -0.11493905633687973, -0.13202649354934692, -0.17895671725273132, -0.03113965131342411, -0.03365568444132805, -0.17937248945236206, -0.0086548225954175, -0.00020776021119672805, -0.03850000351667404, -0.369234174489975, -0.009841610677540302, -0.02863372303545475, -0.016170891001820564, -0.00045813556062057614, -0.0010587330907583237, -0.0009326160652562976, -0.0003297977091278881, -4.768360213347478e-06, -0.0030204886570572853, -0.10001718997955322, -2.8784923553466797, -0.4325025677680969, -0.12863576412200928, -0.004489580634981394, -0.00712094409391284, -1.6592220067977905, -0.0006311332108452916, -0.0007588367443531752, -0.24567826092243195, -0.0062543852254748344, -0.03718459606170654, -0.06485245376825333, -0.399524062871933, -0.0984674021601677, -0.009432394057512283, -0.07417809218168259, -0.43934786319732666, -0.09541065990924835, -0.1756902039051056, -0.06397548317909241, -0.10398987680673599, -0.006440951954573393, -0.00033778208307921886, -0.035182688385248184, -0.1692034751176834, -6.603976362384856e-05, -1.6689286894688848e-06, -0.005867755971848965, -5.8412379075889476e-06, -0.08451452106237411, -0.09538335353136063, -0.004096688237041235, -0.03938285633921623, -0.0007279845303855836, -0.0008630603551864624, -0.0037973453290760517, -0.003660408779978752, -1.6093124941107817e-05, -0.003242950653657317, -0.3909149467945099, -0.0034426727797836065, -0.1619124412536621, -0.4563067853450775, -0.012924120761454105, -0.0035280860029160976, -0.49565568566322327, -0.01374529767781496, -1.5315663814544678, -0.030716171488165855, -1.3861682415008545, -0.5902485847473145, -0.004866303876042366, -0.15128634870052338, -0.21742339432239532, -1.701517939567566, -0.029473010450601578, -1.1194509267807007, -1.557307243347168, -1.1024150848388672, -0.26096197962760925, -0.26765045523643494, -1.4933171272277832, -6.997340824455023e-05, -5.3165931603871286e-05, -0.14387105405330658, -0.008445973508059978, -0.060775626450777054, -0.03361130505800247, -0.011831349693238735, -0.04535508528351784, -6.01988795096986e-05, -0.0018250966677442193, -0.12818440794944763, -0.008801239542663097, -0.04685797169804573, -0.05816065892577171, -0.5320731997489929, -0.9191962480545044, -2.835287094116211, -0.03108152560889721, -0.060499515384435654, -0.3090481162071228, -0.07096801698207855, -0.031163109466433525, -0.001723591354675591, -3.1385252475738525, -3.664642095565796, -2.7236461639404297, -2.32468843460083, -1.9949954748153687, -1.9691948890686035, -1.5781327486038208, -0.3314380347728729, -1.3903110027313232, -0.00034981805947609246, -0.0005227153305895627, -0.01992741972208023, -0.00031454383861273527, -0.5515636801719666, -4.053033626405522e-05, -8.189342770492658e-05, -1.311301275563892e-06, -0.0005992047372274101, -1.072928786277771, -2.2053474822314456e-05, -1.8278626203536987, -3.160839557647705, -1.258959174156189, -0.05040517821907997, -1.434024453163147, -0.10837051272392273, -0.13214004039764404, -3.589585304260254, -0.7252478003501892, -0.00400099391117692, -2.340052843093872, -0.7395216822624207, -0.30476146936416626, -1.0441181659698486, -1.1188085079193115, -0.22663381695747375, -1.4216465950012207, -0.04756525903940201, -0.11067521572113037, -0.045149434357881546, -0.006460139527916908, -0.21930518746376038, -0.10974065959453583, -2.8737711906433105, -0.35539108514785767, -1.6806519031524658, -0.09361480176448822, -0.017519483342766762, -0.09752417355775833, -1.1920922133867862e-06, -0.0006759266252629459, -0.03552306070923805, -0.0005389191792346537, -0.0005354639724828303, -0.0012980615720152855, -0.310040682554245, -0.07681945711374283, -0.00018869050836656243, -1.4781842764932662e-05, -6.365573790390044e-05, -0.009375355206429958, -0.004209467675536871, -0.005556614138185978, -0.08512594550848007, -0.0012191252317279577, -1.6331539882230572e-05, -0.0050565688870847225, -0.5828043222427368, -0.0064731682650744915, -0.00522663863375783, -0.5892626643180847, -0.2293553352355957, -1.0671207904815674, -0.01580696925520897, -0.36999931931495667, -0.03725970908999443, -0.19742129743099213, -0.21751613914966583, -0.22143080830574036, -0.1842731386423111, -0.022054996341466904, -0.1734057515859604, -0.00028618055512197316, -0.0024027545005083084, -0.15234658122062683, -0.013733891770243645, -0.038835007697343826], "finish_reason": "length"}], "metrics": {"energy": 885.2616306476594, "energy_per_token": 3.4580532447174197, "time": 22.07409, "time_per_token": 0.0862269140625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"Data is empty\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column is not a string\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data\")\n    if data.drop(columns=target_column).apply(lambda col: pd.to_numeric(col, errors='raise')).size == 0:\n        raise ValueError(\"data contains non-numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, (float, int)) or test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    X = data.drop(columns=target_column)\n    y = data[target_column]", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Data", " is", " empty", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "target", "_", "column", ",", " str", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " string", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " column", " of", " data", "\"", ")", "\n", "    ", "if", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", ".", "apply", "(", "lambda", " col", ":", " pd", ".", "to", "_", "numeric", "(", "col", ",", " errors", "='", "raise", "'))", ".", "size", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " non", "-", "numeric", " values", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " (", "float", ",", " int", "))", " or", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -2.6879115104675293, -0.9378499984741211, -0.053034938871860504, -0.13841892778873444, -0.33948996663093567, -0.05953650549054146, -0.3465557098388672, -0.0018786415457725525, -0.00810938235372305, -0.45611149072647095, -0.10578329861164093, -0.11452039331197739, -0.003603158053010702, -0.07690136134624481, -0.01529476698487997, -0.0008275659638457, -0.003256615251302719, -0.0010760000441223383, -0.0004923323867842555, -2.0265558760002023e-06, -0.01655660569667816, -0.0027421037666499615, -0.16427557170391083, -0.05726328119635582, -0.031858257949352264, -0.028168847784399986, -0.00023827097902540118, -0.0012276978231966496, -0.03027007356286049, -0.03500048816204071, -1.3854026794433594, -2.771571636199951, -0.0002669931564014405, -0.8304895758628845, -1.8358061424805783e-05, -1.4305012882687151e-05, -0.0012804412981495261, -0.025565052404999733, -0.07591071724891663, -0.0014492495683953166, -0.0023460264783352613, -0.002794529777020216, -0.0309672299772501, -3.6954811548639555e-06, -0.01422033365815878, -0.016546640545129776, -0.5267109274864197, -0.03179948031902313, -0.005125952418893576, -0.18808510899543762, -0.006672482937574387, -0.0809880867600441, -0.16022227704524994, -0.02211306430399418, -0.0002441108226776123, -0.001065401709638536, -0.013635705225169659, -0.02730039320886135, -0.14319680631160736, -8.583032467868179e-06, -7.033323527139146e-06, -0.004040768835693598, -1.4185804502631072e-05, -0.04238719865679741, -0.052746616303920746, -0.0038791659753769636, -0.01639384776353836, -0.0010545651894062757, -0.001866623992100358, -0.0015662556979805231, -0.004070568829774857, -3.099436753473128e-06, -0.008368780836462975, -0.1403716653585434, -0.09093128144741058, -0.031146815046668053, -0.0026386703830212355, -0.17126895487308502, -0.006283764727413654, -0.1413632333278656, -0.034032873809337616, -0.18138734996318817, -0.20423391461372375, -0.009727929718792439, -0.00022682955022901297, -0.001759410952217877, -0.02611023187637329, -0.03614838421344757, -1.2776525020599365, -0.3628864288330078, -2.6656622886657715, -0.0774034932255745, -0.6804949641227722, -0.43513453006744385, -0.003258159849792719, -1.0728830375228426e-06, -1.597391747054644e-05, -0.014911147765815258, -0.0004435985756572336, -1.0129362344741821, -0.35628971457481384, -1.9865772724151611, -1.1113336086273193, -0.009234101511538029, -1.163745641708374, -1.5735502529423684e-05, -0.4961107075214386, -1.1920928244535389e-07, -3.3378546504536644e-06, -0.0005233110277913511, -0.011774800717830658, -0.7919110655784607, -0.02271886356174946, -0.2282344400882721, -0.011088299565017223, -0.2109212577342987, -0.008727620355784893, -3.0143582820892334, -1.8816800117492676, -0.06433459371328354, -0.00309750041924417, -0.0058921691961586475, -0.005954266060143709, -0.007211014628410339, -0.00832716841250658, -0.000916418619453907, -1.8954096958623268e-05, -0.021650398150086403, -0.011724492534995079, -0.4725061357021332, -0.09135667979717255, -2.0354061126708984, -0.07176276296377182, -0.055513352155685425, -0.032229773700237274, -0.047052014619112015, -0.0007853999268263578, -0.004609554074704647, -0.08567024767398834, -0.024368636310100555, -0.06639126688241959, -0.013045204803347588, -0.00015889335190877318, -0.061770059168338776, -4.0531076592742465e-06, -3.755022044060752e-05, -0.0005758534534834325, -0.028934987261891365, -0.03928222879767418, -0.0012702024541795254, -0.0018647201359272003, -0.00151305110193789, -0.00037901371251791716, 0.0, -0.012086370028555393, -0.003725138260051608, -0.024048419669270515, -0.008950943127274513, -0.0016751555958762765, -0.01950816437602043, -0.0021391860209405422, -0.02846306934952736, -0.032157398760318756, -0.010288299061357975, -0.0001248043408850208, -0.0012303171679377556, -0.004684070590883493, -0.0069320183247327805, -0.3420250415802002, -0.7371572852134705, -0.00016032364510465413, -0.002315698890015483, -1.7881377516459906e-06, -8.4638240878121e-06, -0.00045253525604493916, -1.4909917116165161, -1.0401419401168823, -0.01518851425498724, -0.039431218057870865, -0.027995100244879723, -0.5277207493782043, -0.17447152733802795, -0.0001012035645544529, -2.0265373677830212e-05, -0.6405835747718811, -0.005030237603932619, -0.000459565402707085, -0.056902188807725906, -0.0045493911020457745, -9.059865078597795e-06, -1.9073468138230965e-06, -0.2432100623846054, -0.0041474997997283936, -0.001601009746082127, -0.011773976497352123, -0.0011549476766958833, -0.0034395840484648943, -0.001042656716890633, -0.0004266782198101282, -4.410734163684538e-06, -0.007294331677258015, -0.0031923307105898857, -0.026210453361272812, -0.005003431346267462, -0.0009651293512433767, -0.07121971249580383, -0.020264847204089165, -0.6254602670669556, -0.007432073354721069, -0.0002649671514518559, -0.003931532148271799, -0.0004459816846065223, -8.391981828026474e-05, -0.012782779522240162, -0.0005274811992421746, -0.002977582858875394, -1.1013133525848389, -1.54795503616333, -0.1965899020433426, -0.03985469043254852, -0.0319494754076004, -0.008265100419521332, -0.004337783437222242, -0.028417648747563362, -0.058557502925395966, -0.0006112375995144248, -1.311301275563892e-06, -9.536738616588991e-07, -0.006317881401628256, -0.10472145676612854, -0.0012155532604083419, -0.04830339923501015, -0.001591369160450995, -0.006758331321179867, -0.037950750440359116, -0.0003077510336879641, -1.311301275563892e-06, -1.5497195136049413e-06, -0.0001677133986959234], "finish_reason": "length"}], "metrics": {"energy": 917.0958144836424, "energy_per_token": 3.582405525326728, "time": 22.070244, "time_per_token": 0.086211890625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column is not a string\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data\")\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, float):\n        raise ValueError(\"test_size is not a float\")\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    train, test = train_test_split(data, test_size=test_size, random", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "target", "_", "column", ",", " str", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " string", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " column", " of", " data", "\"", ")", "\n", "    ", "if", " not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "values", ".", "d", "type", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " values", " that", " are", " not", " numeric", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " a", " float", "\"", ")", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "    ", "train", ",", " test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -0.12768051028251648, -0.0014013956533744931, -0.008443845435976982, -0.40089812874794006, -0.0905793160200119, -0.12421581149101257, -0.003857078729197383, -0.06888413429260254, -0.011404325254261494, -0.000858415151014924, -0.0025883764028549194, -0.0013710394268855453, -0.0005980133428238332, -1.4305104514278355e-06, -0.011922056786715984, -0.0023186723701655865, -0.04436825215816498, -0.03277779370546341, -0.017391560599207878, -0.011066606268286705, -0.00023648326168768108, -0.0010369406081736088, -0.028133265674114227, -0.032825786620378494, -1.353543758392334, -2.759561061859131, -0.00019572250312194228, -0.5650880932807922, -2.3841574147809297e-05, -1.4781842764932662e-05, -0.0008744944934733212, -0.02380690909922123, -0.0821823701262474, -0.0014448452275246382, -0.0021627387031912804, -0.0024368849117308855, -0.021778477355837822, -3.814689989667386e-06, -0.012952834367752075, -0.01116268802434206, -0.014291081577539444, -0.051823195070028305, -0.004948511254042387, -0.07595093548297882, -0.0027536354027688503, -0.0625983476638794, -0.25739389657974243, -0.011272434145212173, -0.00013004888023715466, -0.0008827127167023718, -0.014005590230226517, -0.02355276420712471, -0.1389722377061844, -9.298280929215252e-06, -4.291525328881107e-06, -0.003497200319543481, -8.702239938429557e-06, -0.027010470628738403, -0.06607697904109955, -0.002606805879622698, -0.012917649000883102, -0.001370206126011908, -0.0012943708570674062, -0.0009220162755809724, -0.0029863782692700624, -2.861018856492592e-06, -0.005694950930774212, -0.1764524281024933, -0.04212561994791031, -0.02262190356850624, -0.0016658727545291185, -0.24264439940452576, -0.00432793190702796, -0.15924498438835144, -0.031209560111165047, -0.12814666330814362, -0.04764789715409279, -0.006741044111549854, -0.00022182388056535274, -0.0015368566382676363, -0.026710713282227516, -0.03736341372132301, -0.34126782417297363, -2.308375835418701, -2.1219027985353023e-05, -0.06682611256837845, -0.007919578813016415, -1.6689286894688848e-06, -3.85038583772257e-05, -0.00013290952483657748, -0.04040244221687317, -0.24342316389083862, -1.463303804397583, -0.12263087183237076, -0.0006949870148673654, -0.0006107610533945262, -0.0011258936719968915, -0.004405317362397909, -3.6954811548639555e-06, -0.002516557462513447, -0.052016161382198334, -0.005447661969810724, -0.0024125061463564634, -0.0073654530569911, -0.0013142528478056192, -8.34461570775602e-06, -0.0067762103863060474, -0.012076358310878277, -0.04241187870502472, -0.05057904124259949, -0.4085368514060974, -0.008395970799028873, -0.002827458083629608, -0.0016285026213154197, -0.015542450360953808, -0.009056205861270428, -0.0003090619284193963, -0.002301426837220788, -0.09296824783086777, -0.019403645768761635, -0.05526747927069664, -0.052518948912620544, -0.00011848701251437888, -0.06972778588533401, -2.0265558760002023e-06, -1.9073468138230965e-06, -0.000636255950666964, -0.025410611182451248, -0.028228186070919037, -0.0016615884378552437, -0.0014529397012665868, -0.000797311426140368, -0.0002826052950695157, -2.3841830625315197e-06, -0.005884584505110979, -0.003364499658346176, -0.008162473328411579, -0.004976979922503233, -0.003537470242008567, -0.009848339483141899, -0.0011326810345053673, -0.021729720756411552, -0.014630884863436222, -0.007712113205343485, -7.950943836476654e-05, -0.001068736077286303, -0.003248891793191433, -0.003524997504428029, -0.2107473760843277, -0.5480963587760925, -0.00010024998482549563, -0.0021005249582231045, -1.6689286894688848e-06, -4.291525328881107e-06, -0.0005012686015106738, -0.22651329636573792, -0.20872506499290466, -0.0014179424615576863, -0.0012217445764690638, -0.008004965260624886, -0.00047159992391243577, -8.106198947643861e-06, -0.002819731365889311, -0.000906175933778286, -0.011788231320679188, -0.0027505443431437016, -0.000649956171400845, -0.002554608043283224, -0.0004233417857903987, -0.038678813725709915, -0.02616853266954422, -0.004953018855303526, -9.107174992095679e-05, -0.0009956170106306672, -0.024874351918697357, -0.016393378376960754, -0.18738527595996857, -4.207999518257566e-05, -1.168244216387393e-05, -0.4452625513076782, -0.004528386518359184, -0.00020358874462544918, -0.036172300577163696, -0.00490331556648016, -1.728519782773219e-05, -3.6954811548639555e-06, -0.42816993594169617, -0.004031151533126831, -0.001416513929143548, -0.008068113587796688, -0.0006530536338686943, -0.0010253892978653312, -0.0005851463647559285, -0.00015162272029556334, -1.5497195136049413e-06, -0.001574349240399897, -0.0023347281385213137, -0.006559388712048531, -0.002996124094352126, -0.0008092227508313954, -0.054251763969659805, -0.0019140986260026693, -0.011435085907578468, -0.0016139827203005552, -8.535020606359467e-05, -0.0009829933987930417, -0.00012659224739763886, -6.663577369181439e-05, -0.0023736178409308195, -0.00043525759247131646, -0.0016978861531242728, -1.0248768329620361, -2.1825613975524902, -0.32484954595565796, -0.014740721322596073, -0.004313569515943527, -0.006367750931531191, -8.4638240878121e-06, -7.033323527139146e-06, -2.50339189733495e-06, -1.07287787614041e-05, -0.00022027450904715806, -0.04703802615404129, -0.011392303742468357, -0.031242258846759796, -2.5748875486897305e-05, -6.794906312279636e-06, -0.05480015277862549, -0.006553349085152149, -4.768360213347478e-06, -4.291525328881107e-06, -0.0019732306245714426, -0.009721791371703148], "finish_reason": "length"}], "metrics": {"energy": 871.0497616233822, "energy_per_token": 3.4025381313413368, "time": 21.8529, "time_per_token": 0.085362890625}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data should be a DataFrame')\n    if data.empty:\n        raise ValueError('data should not be empty')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state should be an integer')\n    if not 0 < test_size < 1:\n        raise ValueError('test_size should be a number between 0 and 1')\n    if target_column not in list(data):\n        raise ValueError('target_column should be a column of data')\n    if not data.dtypes.apply(np.issubdtype, np.number).all():\n        raise ValueError('data should have numeric values')\n    data.dropna(axis='rows', how='any', inplace=True)\n    X = data.drop(columns=target_column, axis='columns')\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X,\n        y,\n        test_size=test", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " should", " be", " a", " Data", "Frame", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " should", " not", " be", " empty", "')", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " should", " be", " an", " integer", "')", "\n", "    ", "if", " not", " ", "0", " <", " test", "_", "size", " <", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " should", " be", " a", " number", " between", " ", "0", " and", " ", "1", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " list", "(", "data", "):", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " should", " be", " a", " column", " of", " data", "')", "\n", "    ", "if", " not", " data", ".", "d", "types", ".", "apply", "(", "np", ".", "iss", "ub", "d", "type", ",", " np", ".", "number", ")", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "('", "data", " should", " have", " numeric", " values", "')", "\n", "    ", "data", ".", "drop", "na", "(", "axis", "='", "rows", "'", ",", " how", "='", "any", "'", ",", " in", "place", "=", "True", ")", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ",", " axis", "='", "columns", "')", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n", "        ", "X", ",", "\n", "        ", "y", ",", "\n", "        ", "test", "_", "size", "=", "test"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -3.436228036880493, -0.0067558446899056435, -0.39613884687423706, -0.7852473258972168, -0.028654690831899643, -0.23329322040081024, -0.0032607740722596645, -0.5262126326560974, -0.09429153054952621, -0.14046190679073334, -0.003983302507549524, -0.08556913584470749, -0.01957678608596325, -0.0007643162389285862, -0.0034920922480523586, -0.0016638495726510882, -0.00039664984797127545, -2.622600959512056e-06, -0.02609269507229328, -0.060264069586992264, -0.39619356393814087, -0.18236878514289856, -0.00547291524708271, -0.023345373570919037, -0.012542887590825558, -0.0010905277449637651, -0.02249719575047493, -0.03972306475043297, -1.1179691553115845, -1.5060570240020752, -0.00027771908207796514, -0.9690620303153992, -5.364403477869928e-06, 0.0, -0.0008057684754021466, -0.04174278303980827, -0.10138450562953949, -0.001116605824790895, -0.004103217739611864, -0.0019704941660165787, -0.002441998338326812, -2.264974000354414e-06, -0.019222404807806015, -0.022091610357165337, -0.015100333839654922, -0.002654602052643895, -0.06256094574928284, -0.004449942149221897, -0.13208363950252533, -0.16266436874866486, -0.03639566898345947, -0.0012998473830521107, -0.006228203885257244, -0.008944208733737469, -0.35011228919029236, -2.132803440093994, -0.007521169260144234, -1.323185682296753, -0.13121280074119568, -3.2186455882765586e-06, -4.0531076592742465e-06, -0.08668691664934158, -0.011242847889661789, -0.0003302744007669389, -0.0076752048917114735, -0.0010758809512481093, -0.0032202552538365126, -0.001061114715412259, -0.00038235029205679893, -9.65590606938349e-06, -0.007210541516542435, -0.02146863006055355, -0.014357594773173332, -0.002300237538293004, -0.04060884565114975, -0.018455103039741516, -1.4874231815338135, -2.49792742729187, -0.14081528782844543, -0.025566795840859413, -0.0008835464250296354, -0.0062552145682275295, -0.0021556015126407146, -0.00019429226813372225, -0.09058421850204468, -0.004207449499517679, -0.18195565044879913, -0.11882539093494415, -0.25720134377479553, -0.0001820160250645131, -4.207999518257566e-05, -0.008087033405900002, -3.433168603805825e-05, -2.646682024002075, -0.00016389934171456844, -0.0019802500028163195, -1.2876219749450684, -0.0025247621815651655, -0.004184063524007797, -0.002166782971471548, -0.004916720557957888, -2.0265558760002023e-06, -0.27354559302330017, -0.09263373166322708, -0.07891056686639786, -0.00320504535920918, -0.41319891810417175, -0.015237592160701752, -0.2962031960487366, -0.07915862649679184, -0.3391735851764679, -0.11419790238142014, -0.011743108741939068, -0.00275113875977695, -0.1535731703042984, -0.22583158314228058, -0.32680606842041016, -0.35789555311203003, -0.3234955668449402, -0.45357540249824524, -6.90197994117625e-05, -0.8232550024986267, -1.3549529314041138, -0.07030753791332245, -1.629879355430603, -1.8596476365928538e-05, -0.0329158753156662, -0.0009410720085725188, -7.879423355916515e-05, -0.00011216964776394889, -0.05686750262975693, -0.9261300563812256, -0.00019894051365554333, -0.010816043242812157, -0.002401922130957246, -7.009260298218578e-05, -0.02867588959634304, -0.0034732038620859385, -0.00617619464173913, -0.006949183996766806, -0.01399301178753376, -0.0009529816452413797, -1.0967194612021558e-05, -0.017694590613245964, -0.2881470024585724, -0.06925071030855179, -3.164949893951416, -0.9452170729637146, -0.04825796186923981, -0.1186772882938385, -0.0036339217331260443, -1.0832332372665405, -1.8068528175354004, -1.7362678050994873, -0.1752668023109436, -0.03969338908791542, -0.0033437078818678856, -1.0329573154449463, -2.495481014251709, -0.29015660285949707, -0.008453420363366604, -0.0009427393670193851, -2.294623613357544, -0.020458394661545753, -0.12087588757276535, -0.008871663361787796, -0.0015143604250624776, -0.08809199184179306, 0.0, -0.008246656507253647, -0.0004319211875554174, -0.03413437679409981, -0.03845847770571709, -0.11498284339904785, -1.5174005031585693, -0.2796381711959839, -0.07676558196544647, -0.1721457540988922, -0.12958163022994995, -0.0667615532875061, -0.2792902886867523, -0.39652663469314575, -0.003149670083075762, -6.794906312279636e-06, -4.768370445162873e-07, -2.3049819469451904, -0.05592420697212219, -0.7275534272193909, -0.0017835675971582532, -0.01953177899122238, -0.06377407163381577, -0.0020035686902701855, -0.09699992090463638, -0.001645878772251308, -0.0031619099900126457, -0.054645080119371414, -0.0005484507419168949, -1.9073468138230965e-06, -3.6954811548639555e-06, -0.0004459816846065223, -0.024866793304681778, -0.056228406727313995, -0.16717064380645752, -0.01415745448321104, -0.007309834472835064, -0.0011120808776468039, -0.006996536627411842, -5.578839045483619e-05, -0.0033756676129996777, -0.0013949673157185316, -0.002469349419698119, -0.00012027494085486978, -1.6689160474925302e-05, -0.0006064721383154392, -0.003907902631908655, -4.434487345861271e-05, -0.0007880204357206821, -0.005177660379558802, -0.022123325616121292, -2.372236667724792e-05, -2.622600959512056e-06, -4.768360213347478e-06, -1.4305104514278355e-06, -0.0006176709430292249, -1.1027239561080933, -0.06808363646268845, -0.0015938685974106193, -0.032454948872327805, -1.5376683473587036, -0.00021026308240834624, -0.0003415954706724733, -0.0026557911187410355, -0.0037025725468993187, -0.00014757021563127637, -0.05666330084204674, -5.8412379075889476e-06, -4.410734163684538e-06, -0.0528816282749176, -0.006783077958971262], "finish_reason": "length"}], "metrics": {"energy": 889.6803047523505, "energy_per_token": 3.475313690438869, "time": 21.864738, "time_per_token": 0.0854091328125}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pd.DataFrame.\")\n    elif data.empty:\n        raise ValueError(\"data must not be empty.\")\n    elif target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} does not exist.\")\n    elif not data.dtypes.apply(pd.api.types.is_numeric_dtype).all():\n        raise ValueError(\"data contains values that are not numeric.\")\n\n    X = data.drop(columns=[target_column], axis=1)\n    y = data[target_column]\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1.\")\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " be", " of", " type", " pd", ".", "DataFrame", ".", "\"", ")", "\n", "    ", "elif", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " not", " be", " empty", ".", "\"", ")", "\n", "    ", "elif", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " {", "target", "_", "column", "}", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "elif", " not", " data", ".", "d", "types", ".", "apply", "(", "pd", ".", "api", ".", "types", ".", "is", "_", "numeric", "_", "d", "type", ")", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " values", " that", " are", " not", " numeric", ".", "\"", ")", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "]", ",", " axis", "=", "1", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " must", " be", " an", " integer", ".", "\"", ")", "\n", "    ", "if", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "="], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -0.6706795692443848, -0.006588995922356844, -1.454603910446167, -0.012651893310248852, -1.4936866760253906, -0.00024232311989180744, -0.008214261382818222, -2.223625659942627, -0.053601279854774475, -0.002281088614836335, -0.007065430283546448, -0.49149179458618164, -2.469658374786377, -0.22240065038204193, -0.004790377337485552, -0.03753313049674034, -0.013408721424639225, -0.0009859706042334437, -0.0030670766718685627, -0.0019143365789204836, -0.00042548662167973816, -9.536738616588991e-07, -0.01729525439441204, -0.004738767631351948, -0.04203018173575401, -0.24646025896072388, -0.11415695399045944, -0.004019159823656082, -0.01243445836007595, -0.14250752329826355, -0.0013149671722203493, -0.0005298641044646502, -0.0017220443114638329, -0.012623759917914867, -0.021280178800225258, -0.4756820499897003, -0.0003137096355203539, -1.0490362910786644e-05, -0.008046355098485947, -2.5987286790041253e-05, -0.10832183808088303, -0.08199722319841385, -0.0049106706865131855, -0.04481425881385803, -0.0022499265614897013, -0.002460549585521221, -0.0027491177897900343, -0.003323628567159176, -4.768360213347478e-06, -0.006749095860868692, -1.5684293508529663, -0.01976894959807396, -0.29158130288124084, -0.059447430074214935, -0.006538900546729565, -1.1715964078903198, -0.00218129507265985, -0.00027378625236451626, -0.00021455370006151497, -0.04312357306480408, -3.2285337448120117, -0.005579967983067036, -0.1557682603597641, -2.102604389190674, -0.0269465334713459, -0.001871978398412466, -0.001954313600435853, -0.019203461706638336, -0.04542161524295807, -0.4122966527938843, -0.3924099802970886, -0.6116997599601746, -0.44605499505996704, -1.9907753085135482e-05, -1.1639925241470337, -0.7231196165084839, -0.06109214946627617, -1.4565775394439697, -2.4437606043647975e-05, -0.002923264866694808, -9.536738616588991e-07, -7.867782187531702e-06, -1.9192511899746023e-05, -5.066266385256313e-05, 0.0, -0.046332526952028275, -0.00010275312524754554, -7.510157047363464e-06, -8.344646857949556e-07, -0.05369042232632637, -9.369411418447271e-05, -0.048017118126153946, -0.004781835246831179, -0.002849568147212267, -0.004181333351880312, -0.02761296182870865, -0.0007687236065976322, -3.2186455882765586e-06, -0.01219660323113203, -0.09976519644260406, -0.2512742578983307, -2.1271770000457764, -0.7621006369590759, -0.06816448271274567, -0.009795455262064934, -0.011809554882347584, -0.03294333070516586, -0.0725541040301323, -0.003795088967308402, -0.0008800924406386912, -0.002862524939700961, -2.3275234699249268, -0.0006997520686127245, -2.4696435928344727, -0.1751568466424942, -0.03951120749115944, -0.1566249281167984, -0.052867043763399124, -0.039684683084487915, -0.37094950675964355, -1.0294407606124878, -0.0008666335488669574, -5.185469490243122e-05, -2.9802276912960224e-06, -2.582907199859619, -0.002033786615356803, -0.05509882792830467, -0.026454983279109, -0.017887935042381287, -0.006326054688543081, -0.06930554658174515, -0.006502540782094002, -0.08490411192178726, -0.0013802058529108763, -0.0019980960059911013, -0.038196440786123276, -0.0002324311062693596, -8.940656698541716e-06, -7.748573807475623e-06, -0.0002225389762315899, -0.015613926574587822, -0.3521765172481537, -0.00024387246230617166, -0.5157943964004517, -0.11753971129655838, -0.013400958850979805, -0.00023421882360707968, -0.048122208565473557, -2.3841830625315197e-06, -3.2186455882765586e-06, -0.0008021951070986688, -0.02651001326739788, -0.06178989261388779, -0.0014643670292571187, -0.004199258517473936, -0.002313914941623807, -0.002717138035222888, -4.6491513785440475e-06, -0.012969661504030228, -0.044135477393865585, -0.02474283054471016, -0.007666687481105328, -0.0020236745476722717, -0.0667925477027893, -0.004939021542668343, -0.5245019793510437, -0.07771479338407516, -0.18906137347221375, -0.0017886845162138343, -0.00048458753735758364, -0.001830451306886971, -0.17102643847465515, -0.8526370525360107, -0.37500593066215515, -1.1288180351257324, -0.004236651584506035, -0.28100961446762085, -0.13037091493606567, -2.7418097943154862e-06, -2.706014311115723e-05, -0.042102303355932236, -0.010739387944340706, -0.0006733057671226561, -0.017486684024333954, -0.0010343207977712154, -0.0030780103988945484, -0.0011634016409516335, -0.00032276666024699807, -4.768370445162873e-07, -0.003523453138768673, -0.007451951969414949, -0.022943394258618355, -0.007763806264847517, -0.0011642351746559143, -0.03478141129016876, -0.03194601088762283, -0.23620373010635376, -0.006798706948757172, -0.00024470672360621393, -0.006521490402519703, -0.0006507901125587523, -0.00013362467871047556, -0.0954536721110344, -0.0017550080083310604, -0.00020132421923335642, -0.0029444219544529915, -0.07210277765989304, -0.00026603974401950836, -0.16001394391059875, -0.010789509862661362, -0.00575468922033906, -0.0008516260422766209, -0.039315808564424515, -5.090107151772827e-05, -0.0028832077514380217, -0.000719645875506103, -0.0012760362587869167, -5.6265202147187665e-05, -1.645074735279195e-05, -0.000398198957554996, -0.0060346066020429134, -2.884823152271565e-05, -0.0005066303419880569, -0.0059029534459114075, -0.021468747407197952, -1.8596476365928538e-05, -1.311301275563892e-06, -3.4570634852570947e-06, -3.576278118089249e-07, -0.00036161558819003403, -0.7469682097434998, -0.0097501240670681, -0.03336967155337334, -0.0031641677487641573, -0.06329873949289322, -7.271740287251305e-06, -2.3841830625315197e-06, -0.03861802816390991], "finish_reason": "length"}], "metrics": {"energy": 908.3207539024341, "energy_per_token": 3.5481279449313834, "time": 22.0635, "time_per_token": 0.086185546875}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type DataFrame\")\n\n    if data.empty:\n        raise ValueError(\"data cannot be empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target column not in data\")\n\n    if not data.dtypes[target_column].kind in {'i','o','f'}:\n        raise ValueError(\"target column must be numeric\")\n\n    if data.dtypes.apply(lambda x: x.kind in {'i','o','f'}).any() == False:\n        raise ValueError(\"data must contain at least one numeric column\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be int\")\n\n    if not isinstance(test_size, float):\n        raise ValueError(\"test_size must be float\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size must be between", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " be", " of", " type", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " cannot", " be", " empty", "\"", ")", "\n", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", " column", " not", " in", " data", "\"", ")", "\n", "\n", "    ", "if", " not", " data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "kind", " in", " {'", "i", "'", ",", "'", "o", "'", ",", "'", "f", "'", "}:", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", " column", " must", " be", " numeric", "\"", ")", "\n", "\n", "    ", "if", " data", ".", "d", "types", ".", "apply", "(", "lambda", " x", ":", " x", ".", "kind", " in", " {'", "i", "'", ",", "'", "o", "'", ",", "'", "f", "'})", ".", "any", "()", " ==", " False", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " contain", " at", " least", " one", " numeric", " column", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " must", " be", " int", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " float", "\"", ")", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -0.6706795692443848, -0.006588995922356844, -1.454603910446167, -0.012651893310248852, -1.361581802368164, -0.01689259335398674, -0.17004317045211792, -0.0013160386588424444, -0.006282106041908264, -0.9859517812728882, -0.00021324267436284572, -0.0348835289478302, -0.2344481647014618, -0.004959542769938707, -0.08568195253610611, -0.021546684205532074, -0.0008420973899774253, -0.0032333259005099535, -0.0007483542431145906, -0.00045372682507149875, -2.0265558760002023e-06, -0.029205597937107086, -0.0031125929672271013, -0.05361167713999748, -2.1420037746429443, -0.004667102824896574, -0.014036741107702255, -0.040535468608140945, -0.00039569655200466514, -0.0011261318577453494, -0.009577162563800812, -0.00013541258522309363, -0.06823898106813431, -0.2935318350791931, -0.00023815179883968085, -1.168244216387393e-05, -0.007336697541177273, -1.9073304429184645e-05, -0.07720289379358292, -0.1116219013929367, -0.0026594768278300762, -0.03486050292849541, -0.001446987851522863, -0.0027183268684893847, -0.0014334175502881408, -0.0023407936096191406, -3.6954811548639555e-06, -0.010972166433930397, -0.3570067882537842, -0.09963862597942352, -2.4604978561401367, -1.4292230606079102, -0.32516083121299744, -0.1597912609577179, -0.15304476022720337, -0.00043299360550008714, -0.0009863278828561306, -0.004733310081064701, -0.0002696150622796267, -0.13767461478710175, -0.6145057082176208, -0.44963642954826355, -0.38546115159988403, -0.39851173758506775, -5.149708886165172e-05, -0.18107667565345764, -0.005927246995270252, -8.344646857949556e-07, -2.3841830625315197e-06, -0.0017041935352608562, -0.2798396646976471, -0.16988928616046906, -0.21088728308677673, -1.4263943433761597, -0.0030276195611804724, -1.6093124941107817e-05, -0.002797620603814721, -0.1594931036233902, -3.0607821941375732, -5.507317473529838e-05, -0.012464480474591255, -0.012535235844552517, -0.013926122337579727, -0.00035291642416268587, -1.0398831367492676, -0.030981561169028282, -0.006170270964503288, -0.008335561491549015, -0.0015885126776993275, -1.4305104514278355e-06, -0.01910347118973732, -0.09567773342132568, -0.35151955485343933, -0.20883730053901672, -0.7720118165016174, -0.38655999302864075, -0.2502058148384094, -0.0232702549546957, -0.0006007535266689956, -0.0018960132729262114, -0.010690325871109962, -0.0002479245886206627, -0.22896771132946014, -3.0156772136688232, -0.1699710637331009, -1.4743276834487915, -9.298280929215252e-06, -0.03839263319969177, -0.3983461558818817, -0.003898996626958251, -0.02863858826458454, -0.591346263885498, -0.12460855394601822, -0.010562114417552948, -0.0003231241717003286, -0.0013547299895435572, -1.0523345470428467, -0.005497574806213379, -0.00024399164249189198, -7.152531907195225e-06, -0.0001438752660760656, -0.022456632927060127, -0.0018661479698494077, -0.0003906917118001729, -1.2159273865108844e-05, -0.0010683787986636162, -3.8265450712060556e-05, -0.012804199010133743, -8.999896090244874e-05, -0.7725529074668884, -0.005514172837138176, -0.48931416869163513, -0.005744140595197678, -0.004669950809329748, -0.009966490790247917, -0.00820811279118061, -0.0037117176689207554, -0.0004880429187323898, -2.7418097943154862e-06, -0.009600776247680187, -0.0018240257631987333, -0.38769716024398804, -0.06018101051449776, -0.2538089454174042, -0.5691832304000854, -0.011080518364906311, -0.03627174720168114, -0.03120574541389942, -0.036599110811948776, -0.01462324894964695, -0.0003369478799868375, -0.004093601368367672, -0.004193085711449385, -0.00017271934484597296, -0.07364200055599213, -0.13913322985172272, -0.060833849012851715, -0.0002374367177253589, -0.022777244448661804, -3.099436753473128e-06, -2.2411095415009186e-05, -0.0012249593855813146, -0.06453153491020203, -0.019748728722333908, -0.001392824575304985, -0.004022009205073118, -0.000653411028906703, -0.0013380631571635604, -1.7881377516459906e-06, -0.015891918912529945, -0.0029032959137111902, -0.02365603670477867, -0.3762533664703369, -0.0021962826140224934, -0.05201955884695053, -0.0033820830285549164, -3.0618395805358887, -0.016406279057264328, -0.0005054388311691582, -0.0011614966206252575, -0.017630524933338165, -4.1960789531003684e-05, -0.01218718197196722, -0.3974498510360718, -0.8149057030677795, -0.00016330339713022113, -0.002856343751773238, -1.0728830375228426e-06, -5.602820692729438e-06, -0.0005174727994017303, -0.2968581020832062, -0.3087664544582367, -0.001441036001779139, -0.0026801638305187225, -0.013008610345423222, -0.0016637305961921811, -4.529942543740617e-06, -0.00415070541203022, -0.0003234816831536591, -0.01671558804810047, -0.016399946063756943, -0.0014611531514674425, -0.008673377335071564, -0.0035481611266732216, -0.15666936337947845, -0.012531821615993977, -0.00014876213390380144, -0.0008685392094776034, -0.03883443400263786, -0.00031263710116036236, -0.035096943378448486, -0.39493846893310547, -8.201262971851975e-05, -1.2993727978027891e-05, -0.7092962265014648, -0.015084012411534786, -0.0005055579822510481, -0.10547170788049698, -0.008115885779261589, -2.9801878554280847e-05, -5.090107151772827e-05, -0.43404728174209595, -0.010017124004662037, -0.0022975020110607147, -0.014085051603615284, -0.0004858981992583722, -0.0031865080818533897, -0.0010792152024805546, -0.00035506143467500806, -4.887569048150908e-06, -0.007640188094228506, -0.0016669438919052482, -0.0075515760108828545, -0.03274952992796898, -0.0010239601833745837, -0.030426310375332832, -0.03439471498131752, -0.2407197505235672], "finish_reason": "length"}], "metrics": {"energy": 884.1642993087771, "energy_per_token": 3.4537667941749106, "time": 22.075157, "time_per_token": 0.08623108203125}}
{"outputs": [{"text": "pass", "tokens": ["pass", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.1743547916412354, -1.3619379997253418, -5.364403477869928e-06, -7.152555099310121e-07, -2.0265558760002023e-06, -6.6756979322235566e-06, -0.2173147201538086], "finish_reason": "stop"}], "metrics": {"energy": 22.351924667358396, "energy_per_token": 3.193132095336914, "time": 0.44146165, "time_per_token": 0.06306595}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if not len(data):\n        raise ValueError(\"data is empty\")\n    if not target_column in data:\n        raise ValueError(\"target_column ist not a column of data\")\n    if not data[target_column].notna().all():\n        raise ValueError(\"target_column contains missing values\")\n    if not data.all(axis=\"columns\").all():\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if test_size <= 0 or test_size >= 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    features = [col for col in data if col != target_column]\n    x = data[features]\n    y = data[target_column]\n    x_train, x_test, y_train, y_", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "if", " not", " len", "(", "data", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "    ", "if", " not", " target", "_", "column", " in", " data", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " ist", " not", " a", " column", " of", " data", "\"", ")", "\n", "    ", "if", " not", " data", "[", "target", "_", "column", "]", ".", "not", "na", "()", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " contains", " missing", " values", "\"", ")", "\n", "    ", "if", " not", " data", ".", "all", "(", "axis", "=", "\"", "columns", "\"", ")", ".", "all", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " values", " that", " are", " not", " numeric", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "    ", "if", " test", "_", "size", " <=", " ", "0", " or", " test", "_", "size", " >=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "    ", "features", " =", " [", "col", " for", " col", " in", " data", " if", " col", " ", "!", "=", " target", "_", "column", "]", "\n", "    ", "x", " =", " data", "[", "features", "]", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "x", "_", "train", ",", " x", "_", "test", ",", " y", "_", "train", ",", " y", "_"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -0.12768051028251648, -0.0014013956533744931, -0.008443845435976982, -0.40089812874794006, -0.0905793160200119, -2.981992483139038, -2.085033416748047, -0.00026353701832704246, -0.0031333896331489086, -0.29167649149894714, -0.005783727392554283, -0.0023551841732114553, -0.0016094601014629006, -0.00040463366894982755, -3.3378546504536644e-06, -0.007758483290672302, -0.0050642783753573895, -0.05162600055336952, -0.053427714854478836, -0.02951919101178646, -0.009425899013876915, -0.00018654513405635953, -0.001312109874561429, -0.03282301500439644, -0.06721507012844086, -1.0063657760620117, -0.3145274817943573, -0.00013219437096267939, -2.932505594799295e-05, -0.012283273972570896, -0.0538460947573185, -1.3103464841842651, -0.0018512745155021548, -0.0017749997787177563, -0.0007780147134326398, -0.0019406310748308897, -2.145764938177308e-06, -0.005099504254758358, -0.03605065122246742, -0.06870262324810028, -0.04259353503584862, -0.0036139669828116894, -0.44421762228012085, -0.0007046362152323127, -0.01654546707868576, -0.00753796985372901, -0.013270271010696888, -0.00828981027007103, -0.012039493769407272, -0.0003873551613651216, -0.0009247555863112211, -0.0667489543557167, -0.08405277878046036, -0.2864718735218048, -0.3467474579811096, -1.3283660411834717, -0.7639997005462646, -1.1920922133867862e-06, -9.65590606938349e-06, -0.0005447572330012918, -4.088794958079234e-05, -1.8778166770935059, -0.5358185768127441, -0.0007826602668501437, -1.0490362910786644e-05, -0.03207612782716751, -0.008799112401902676, -0.005918122362345457, -0.004071281291544437, -0.013110741972923279, -0.0007555014453828335, -1.4662635294371285e-05, -0.004247691016644239, -0.0599592961370945, -0.374867707490921, -0.0664030909538269, -0.0018913729581981897, -0.15552003681659698, -1.5162224769592285, -0.03942686319351196, -0.026642346754670143, -0.0006877202540636063, -0.004747310187667608, -0.03584549203515053, -0.0795038491487503, -0.13553236424922943, -0.12468095868825912, -0.7733882069587708, -2.1662938594818115, -0.10385020077228546, -0.5071116089820862, -0.11197900772094727, -1.0614631175994873, -0.0039377068169415, -3.3378546504536644e-06, -0.005932342726737261, -1.3947389561508317e-05, -0.07364820688962936, -0.06283369660377502, -0.008009813725948334, -0.0019622850231826305, -0.011558235622942448, -0.0007407305529341102, -5.006777428206988e-06, -0.002589089795947075, -0.01181308925151825, -0.017262330278754234, -0.0029264739714562893, -0.27285346388816833, -0.006287910509854555, -0.002254327293485403, -0.0014790082350373268, -0.013459297828376293, -0.020059343427419662, -0.0005361788207665086, -0.003301291260868311, -0.11834332346916199, -0.04438010975718498, -0.05169256404042244, -0.042885713279247284, -8.308542601298541e-05, -0.029670801013708115, -1.5497195136049413e-06, -2.861018856492592e-06, -0.0005470209871418774, -0.055505793541669846, -0.04581614211201668, -0.0014297273010015488, -0.002034024568274617, -0.0005841932725161314, -0.0013897294411435723, -5.960462772236497e-07, -0.006435266695916653, -0.006746372207999229, -0.010802363976836205, -0.007410300895571709, -0.0013263961300253868, -0.023551134392619133, -0.00215512583963573, -0.016769161447882652, -0.011433671228587627, -0.012380651198327541, -0.0002146728802472353, -0.0010140759404748678, -0.003258516313508153, -0.007182728033512831, -2.1830320358276367, -1.3708974620385561e-05, -5.245195097813848e-06, -1.574221134185791, -0.037797290831804276, -0.00016258825780823827, -0.038703013211488724, -0.01059679314494133, -7.748573807475623e-06, -2.50339189733495e-06, -0.03127957880496979, -0.01906183362007141, -0.0008469808381050825, -0.011992968618869781, -0.0015378089156001806, -0.0022580146323889494, -0.0005671561229974031, -0.00029130507027730346, -1.7881377516459906e-06, -0.00271904026158154, -0.004781360737979412, -0.013406957499682903, -0.006862168200314045, -0.0009301149984821677, -0.08987141400575638, -0.01101673487573862, -0.03797163814306259, -0.0021294315811246634, -0.0003813969960901886, -0.0016315970569849014, -0.00013624693383462727, -8.380061626667157e-05, -0.005721738561987877, -0.00023934361524879932, -0.0020902943797409534, -1.246697187423706, -3.579543113708496, -0.07795774936676025, -1.3806860446929932, -0.6805853247642517, -0.07756544649600983, -0.0033745982218533754, -0.0007121411035768688, -0.011006477288901806, -0.4566752314567566, -0.010805548168718815, -0.03339584544301033, -8.344646857949556e-07, -7.271740287251305e-06, -0.007001863792538643, -4.1960789531003684e-05, -5.483612312673358e-06, -0.005077681038528681, -0.004114971030503511, -0.01666318252682686, -1.6925113201141357, -0.2426028698682785, -0.031800057739019394, -0.06833361834287643, -0.0010203876299783587, -0.00020776021119672805, -0.25402718782424927, -0.0006098079611547291, -0.03270211070775986, -0.0018723353277891874, -0.0022134108003228903, -0.01997135765850544, -7.724463648628443e-05, -1.1920922133867862e-06, -7.152555099310121e-07, -0.00015043080202303827, -0.010980302467942238, -0.054772503674030304, -0.28293901681900024, -0.020777663215994835, -0.00949368067085743, -0.0007838514284230769, -0.03553387522697449, -5.972207145532593e-05, -0.005562541540712118, -0.0011456600623205304, -0.0007496645557694137, -9.905801562126726e-05, -1.2874520507466514e-05, -0.0005951540661044419, -0.0034294859506189823, -4.124556289752945e-05], "finish_reason": "length"}], "metrics": {"energy": 894.7108424816128, "energy_per_token": 3.4949642284438, "time": 22.064898, "time_per_token": 0.0861910078125}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"data is not a DataFrame.\")\n    if data.empty:\n        raise ValueError(f\"data is empty.\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column ({target_column}) is not a column of data ({data.columns}).\")\n    if data.columns.str.contains('non-numeric').any():\n        raise ValueError(f\"data contains values that are not numeric.\")\n    if not isinstance(random_state, int):\n        raise ValueError(f\"random_state is not an integer.\")\n    if not isinstance(test_size, float):\n        raise ValueError(f\"test_size is not a float.\")\n    if not 0 < test_size < 1:\n        raise ValueError(f\"test_size ({test_size}) is not between 0 and 1.\")\n    X, X_test, y, y_test = train_test_split(data, data[target_column],", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "data", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "data", " is", " empty", ".", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " ({", "target", "_", "column", "})", " is", " not", " a", " column", " of", " data", " ({", "data", ".", "columns", "})", ".", "\"", ")", "\n", "    ", "if", " data", ".", "columns", ".", "str", ".", "contains", "('", "non", "-", "numeric", "')", ".", "any", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "data", " contains", " values", " that", " are", " not", " numeric", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "random", "_", "state", " is", " not", " an", " integer", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "test", "_", "size", " is", " not", " a", " float", ".", "\"", ")", "\n", "    ", "if", " not", " ", "0", " <", " test", "_", "size", " <", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "test", "_", "size", " ({", "test", "_", "size", "})", " is", " not", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n", "    ", "X", ",", " X", "_", "test", ",", " y", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " data", "[", "target", "_", "column", "]", ","], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -1.438918113708496, -0.42986592650413513, -0.45726680755615234, -1.2005693912506104, -0.14182935655117035, -0.3244507908821106, -0.34456461668014526, -0.0197046659886837, -2.395406723022461, -1.0860521793365479, -0.006818479858338833, -0.008608612231910229, -0.42943114042282104, -0.10926744341850281, -0.09423240274190903, -0.005105552729219198, -0.06623430550098419, -0.013553973287343979, -0.0007284610182978213, -0.004015004262328148, -0.0014141331193968654, -0.0005071069463156164, -2.264974000354414e-06, -0.020856237038969994, -0.3220517933368683, -0.004197240807116032, -0.03707444295287132, -0.05254044011235237, -0.02623739466071129, -0.22678585350513458, -0.0033292127773165703, -0.0002320735511602834, -0.0007485924870707095, -0.02772381529211998, -0.04613618180155754, -0.3384834825992584, -0.00022682955022901297, -2.2649508537142538e-05, -0.008611921221017838, -3.93382906622719e-05, -0.05824838578701019, -0.08479569107294083, -0.004425256513059139, -0.04083671793341637, -0.0016961010405793786, -0.002690031658858061, -0.0012931802775710821, -0.0016676579834893346, -7.033323527139146e-06, -0.0027790756430476904, -0.05531902611255646, -0.004427867475897074, -0.22575949132442474, -0.04124724119901657, -0.004931666888296604, -3.3088502883911133, -0.002797620603814721, -6.603976362384856e-05, -0.00012396997772157192, -0.03183608502149582, -0.2706516981124878, -0.008582492358982563, -0.15421971678733826, -0.07246740907430649, -0.1348106861114502, -0.07432319223880768, -1.7877106666564941, -0.12614046037197113, -0.06709089875221252, -0.03352369740605354, -0.2379019856452942, -0.3717213571071625, -0.002298215636983514, -0.0010124086402356625, -0.0046434905380010605, -0.08115198463201523, -0.19449269771575928, -0.9548969864845276, -0.0924859419465065, -2.666017532348633, -0.3512900471687317, -2.7683310508728027, -0.0058954874984920025, -0.08406538516283035, -2.0252723693847656, -1.8726584911346436, -1.1114802360534668, -0.09100595116615295, -0.23930753767490387, -0.01909329555928707, -0.01709054596722126, -0.06628160923719406, -0.010615783743560314, -0.00885311234742403, -0.0345301553606987, -0.0013066334649920464, -4.410734163684538e-06, -0.006220503710210323, -0.10228632390499115, -0.004187981132417917, -0.0460834726691246, -0.04421919584274292, -0.23457244038581848, -0.012474017217755318, -0.003487340407446027, -0.012627998366951942, -0.005825801752507687, -0.20088952779769897, -0.022144081071019173, -0.0006891497760079801, -0.0013099670177325606, -0.10943403840065002, -0.04646351560950279, -0.1062474474310875, -0.028122950345277786, -0.000226472009671852, -0.02244311198592186, -5.483612312673358e-06, -1.7165990357170813e-05, -0.0013579442165791988, -0.03958190605044365, -0.01836124248802662, -0.0011063652345910668, -0.003353925421833992, -0.001290918211452663, -0.0017450118903070688, 0.0, -0.00466223806142807, -0.04502682015299797, -0.0066284313797950745, -0.029370104894042015, -0.0075850579887628555, -0.0019708510953933, -0.7072948813438416, -0.004120076075196266, -0.02296832576394081, -0.015237121842801571, -0.2086566686630249, -0.02426939457654953, -0.00017307691450696439, -0.0007884969236329198, -0.005545588675886393, -0.006558678112924099, -0.4548320472240448, -1.5706803798675537, -0.0002653246629051864, -0.005379486363381147, -6.198863957251888e-06, -8.34461570775602e-06, -0.0006416169344447553, -0.28436577320098877, -0.2933453321456909, -0.001885542762465775, -0.0024635223671793938, -0.012219449505209923, -0.0006267252028919756, -8.4638240878121e-06, -0.0013473490253090858, -0.015615921467542648, -0.0007394201820716262, -0.015120061114430428, -0.0029233836103230715, -0.0007383481133729219, -0.019360501319169998, -0.0006411403883248568, -0.10098791867494583, -0.039773356169462204, -0.026658713817596436, -0.0038577911909669638, -0.00023731753753963858, -0.002568281954154372, -0.04945383593440056, -0.04831373691558838, -1.764766812324524, -0.3147661089897156, -0.002722131321206689, -0.8102790713310242, -0.005598223768174648, -5.8412379075889476e-06, -6.556489552167477e-06, -0.09315571933984756, -0.004820392467081547, -0.00135996809694916, -0.015026707202196121, -0.0013750869547948241, -0.0020842275116592646, -0.0008961713756434619, -0.00026306029758416116, -1.4305104514278355e-06, -0.0015732781030237675, -0.018013453111052513, -0.0011781663633883, -0.009859907440841198, -0.002030574483796954, -0.0007893307483755052, -1.7512202262878418, -0.0022067499812692404, -1.4662635294371285e-05, -5.769562994828448e-05, -0.006663246545940638, -0.10573149472475052, -0.011137224733829498, -0.0602620467543602, -0.0034571662545204163, -0.00022098960471339524, -0.007288177963346243, -0.00032228996860794723, -0.00012742661056108773, -0.05861315131187439, -0.0031747438479214907, -0.0007658647373318672, -0.0028326883912086487, -1.2819393873214722, -1.3569809198379517, -2.635226011276245, -2.1309566497802734, -0.045346084982156754, -0.03524448722600937, -0.011482697911560535, -0.05913533270359039, -0.027477160096168518, -0.0008852138998918235, -6.067568756407127e-05, -0.0013499680208042264, -0.005728494841605425, -0.012772656977176666, -8.583032467868179e-06, -5.483612312673358e-06, -5.125986263010418e-06, -7.152555099310121e-07, -0.0003594706067815423, -0.31199291348457336, -1.2145802974700928, -0.09920929372310638, -0.04231360927224159, -0.0014206803170964122, -5.328513361746445e-05, -1.5020257706055418e-05, -0.0009111781837418675, -0.012518754228949547], "finish_reason": "length"}], "metrics": {"energy": 892.3473420257568, "energy_per_token": 3.4857318047881125, "time": 21.850508, "time_per_token": 0.085353546875}}
{"outputs": [{"text": "pass", "tokens": ["pass", "\n", "\n", "if"], "logprobs": [-3.1743547916412354, -0.6926798224449158, -0.1495065540075302, -0.5936697125434875], "finish_reason": "stop"}], "metrics": {"energy": 4.339415073394775, "energy_per_token": 1.0848537683486938, "time": 0.23079613, "time_per_token": 0.0576990325}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data needs to be of type DataFrame')\n    if data.empty:\n        raise ValueError('data cannot be empty')\n    if target_column not in data:\n        raise ValueError('target_column needs to be a column of data')\n    if not data.dtypes[target_column].kind == 'i':\n        raise ValueError('target_column has to be of type integer')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state has to be of type integer')\n    if not isinstance(test_size, float):\n        raise ValueError('test_size has to be of type float')\n    if test_size < 0 or test_size > 1:\n        raise ValueError('test_size needs to be between 0 and 1')\n\n    X = data[data.columns.difference([target_column])]\n    y = data[target_column]\n\n    # split data\n    X_train, X_test, y_train, y_test = train_test_split(", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " needs", " to", " be", " of", " type", " Data", "Frame", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " cannot", " be", " empty", "')", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " needs", " to", " be", " a", " column", " of", " data", "')", "\n", "    ", "if", " not", " data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "kind", " ==", " '", "i", "':", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " has", " to", " be", " of", " type", " integer", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " has", " to", " be", " of", " type", " integer", "')", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", "):", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " has", " to", " be", " of", " type", " float", "')", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " needs", " to", " be", " between", " ", "0", " and", " ", "1", "')", "\n", "\n", "    ", "X", " =", " data", "[", "data", ".", "columns", ".", "difference", "([", "target", "_", "column", "]", ")]", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "#", " split", " data", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "("], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -3.1932928562164307, -0.0022499265614897013, -0.0048818439245224, -1.4835941791534424, -0.014288730919361115, -1.1622719764709473, -0.02274974249303341, -0.16156238317489624, -0.003440059022977948, -0.5220826268196106, -0.0963815376162529, -0.16805708408355713, -0.005815372336655855, -0.057160381227731705, -0.019422469660639763, -0.0008204193436540663, -0.003328499849885702, -0.0012747265864163637, -0.0005832401220686734, -2.0265558760002023e-06, -0.023428404703736305, -0.06254985928535461, -1.7098991870880127, -0.004326626192778349, -0.020520294085144997, -0.01672191731631756, -0.0004694551753345877, -0.02029031328856945, -0.03020785003900528, -0.46906569600105286, -0.00015722469834145159, -1.966933996300213e-05, -0.006932136602699757, -5.507317473529838e-05, -0.06901665031909943, -2.510894298553467, -0.0019338493002578616, -0.0020905323326587677, -0.0020486575085669756, -0.004264072049409151, -2.50339189733495e-06, -0.23696984350681305, -0.08498426526784897, -0.10211648792028427, -0.0035818961914628744, -1.198854684829712, -0.004566953983157873, -0.021106749773025513, -0.3731689155101776, -0.12438604235649109, -0.2740405797958374, -0.08425234258174896, -0.009170318022370338, -0.0025191735476255417, -0.08300336450338364, -0.10749749839305878, -0.5216264724731445, -0.5193829536437988, -0.244754359126091, -0.5331197381019592, -4.005352093372494e-05, -0.2705047130584717, -0.004912212491035461, -3.576278118089249e-07, -4.0531076592742465e-06, -0.0014704378554597497, -0.415505588054657, -0.22939817607402802, -1.5312309265136719, -0.026625167578458786, -0.1445276290178299, -0.703934371471405, -0.05130114406347275, -0.006554770283401012, -0.9585458040237427, -0.0018969652010127902, -1.2874520507466514e-05, -0.037294164299964905, -0.7931846380233765, -0.0812082588672638, -0.0016852713888511062, -2.6495606899261475, -0.02529066614806652, -0.2634028196334839, -0.8745638728141785, -0.6555987596511841, -0.8996372222900391, -0.06649099290370941, -0.0035815397277474403, -2.2803611755371094, -0.0005777596961706877, -0.4163338243961334, -0.11334837973117828, -0.1273089200258255, -0.0002960720448754728, -0.053229596465826035, -5.960446742392378e-06, -2.3364747903542593e-05, -0.0008453133050352335, -0.038710467517375946, -0.02150678262114525, -0.000916537712328136, -0.0043360027484595776, -0.0007524043321609497, -0.0012732979375869036, -6.437280717364047e-06, -0.02988533116877079, -0.017701970413327217, -0.011677246540784836, -0.003408457851037383, -0.743246853351593, -0.0021929519716650248, -0.007436806336045265, -0.9270817637443542, -0.01223287358880043, -0.45410794019699097, -0.011420589871704578, -0.0009534580749459565, -0.20332877337932587, -0.013368023559451103, -0.3381282091140747, -0.5648447275161743, -0.00015758226800244302, -0.004284369759261608, -2.7418097943154862e-06, -4.291525328881107e-06, -0.00042965717148035765, -0.26158979535102844, -0.11642418801784515, -0.0017294225981459022, -0.0021692810114473104, -0.01850753091275692, -0.00031406714697368443, -8.22540732769994e-06, -0.0018230738351121545, -0.030205652117729187, -0.006388124544173479, -0.0013709203340113163, -0.010348825715482235, -0.0008364992681890726, -0.003041762625798583, -0.06012645363807678, -0.0010767144849523902, -0.04907345771789551, -0.006865956820547581, -0.0009197533945553005, -0.3124365210533142, -0.019432757049798965, -0.7292261123657227, -5.054346183896996e-05, -0.0001382732152706012, -0.8610032200813293, -0.01308226864784956, -0.0005146132898516953, -0.10517869144678116, -0.009354451671242714, -4.827859811484814e-05, -2.6464111215318553e-05, -0.29915374517440796, -0.010265291668474674, -0.0021395429503172636, -0.017723167315125465, -0.0008251837571151555, -0.0032690914813429117, -0.002068405505269766, -0.0004881620698142797, -9.536697689327411e-06, -0.010900947265326977, -0.012129592709243298, -0.011290822178125381, -0.0015354283386841416, -2.4515557289123535, -0.003230830654501915, -0.026506761088967323, -0.20443643629550934, -0.011366020888090134, -0.0008310201810672879, -0.009883868508040905, -0.0007432320853695273, -0.00026913834153674543, -0.022313950583338737, -0.0026367679238319397, -0.09269426017999649, -0.0012022180017083883, -1.6684658527374268, -0.34107375144958496, -0.04349857568740845, -2.2032785415649414, -0.2537383735179901, -0.006207116413861513, -0.01054642628878355, -0.6612136363983154, -0.276754766702652, -0.030218489468097687, -0.001531857531517744, -3.194758028257638e-05, -5.602820692729438e-06, -0.00667390413582325, -0.0008764001540839672, -0.09940768778324127, -0.045758407562971115, -0.08134487271308899, -0.0025160820223391056, -0.0035197706893086433, -0.023105556145310402, -0.0013448490062728524, -3.4570634852570947e-06, -2.0265558760002023e-06, -0.00026425207033753395, -0.020851917564868927, -0.46024012565612793, -0.0003268184664193541, -2.9109582901000977, -1.3698066473007202, -1.064136266708374, -1.5661274194717407, -0.004879708867520094, -0.060807712376117706, -0.009221462532877922, -0.004748377948999405, -0.0015191215788945556, -0.008706466294825077, -4.8040190449682996e-05, -0.0033192322589457035, -0.001166973845101893, -0.0022143623791635036, -0.00011538793478393927, -3.3378044463461265e-05, -0.0006319671520031989, -0.0035969815216958523, -5.054346183896996e-05, -0.0007398966699838638, -0.005698506720364094, -0.021226612851023674, -4.339123915997334e-05, -5.364403477869928e-06, -8.940656698541716e-06, -9.536738616588991e-07, -0.0008747326792217791], "finish_reason": "length"}], "metrics": {"energy": 890.206920251847, "energy_per_token": 3.4773707822337774, "time": 22.074726, "time_per_token": 0.0862293984375}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame')\n    if data.empty:\n        raise ValueError('data is empty')\n    if not target_column in data.columns:\n        raise ValueError('target_column is not a column of data')\n    if data.dtypes.nunique() != 2 or not data.select_dtypes('number').empty:\n        raise ValueError('data contains values that are not numeric')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state is not an integer')\n    if not 0 <= test_size <= 1:\n        raise ValueError('test_size is not between 0 and 1')\n    x_train, x_test, y_train, y_test = train_test_split(\n        data.drop(columns=target_column), data[target_column], test_size=test_size, random_state=random_state)\n    model = LinearRegression()\n    model.fit(x_train, y_train)\n    return model", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", "')", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " is", " empty", "')", "\n", "    ", "if", " not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " is", " not", " a", " column", " of", " data", "')", "\n", "    ", "if", " data", ".", "d", "types", ".", "nun", "ique", "()", " ", "!", "=", " ", "2", " or", " not", " data", ".", "select", "_", "d", "types", "('", "number", "')", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " contains", " values", " that", " are", " not", " numeric", "')", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " is", " not", " an", " integer", "')", "\n", "    ", "if", " not", " ", "0", " <=", " test", "_", "size", " <=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "')", "\n", "    ", "x", "_", "train", ",", " x", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n", "        ", "data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", ",", " data", "[", "target", "_", "column", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "x", "_", "train", ",", " y", "_", "train", ")", "\n", "    ", "return", " model"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -1.0201570987701416, -0.03713199123740196, -0.14405634999275208, -0.29432570934295654, -0.015734216198325157, -0.11155739426612854, -0.003132438752800226, -0.4386928081512451, -0.08696845918893814, -0.10696463286876678, -0.003114613238722086, -0.08277414739131927, -0.010888565331697464, -0.0007020154735073447, -0.002873223042115569, -0.0007214327342808247, -0.0003413571394048631, -2.0265558760002023e-06, -0.02109741047024727, -0.04775302857160568, -0.028107650578022003, -0.01728939637541771, -0.008577055297791958, -0.0004172646440565586, -0.02351282723248005, -0.027306539937853813, -1.6324093341827393, -0.25930845737457275, -7.73638384998776e-05, -2.3007127310847864e-05, -0.002311536343768239, -0.05046389251947403, -0.18444018065929413, -0.0030414059292525053, -0.038204703480005264, -0.0010521834483370185, -0.0018423503497615457, -0.0016707521863281727, -0.0015563768101856112, -1.4305104514278355e-06, -0.054235730320215225, -0.05424002185463905, -0.04870928078889847, -0.002833282807841897, -0.8844588398933411, -0.011003529652953148, -0.14156688749790192, -0.04821400344371796, -0.07050763815641403, -0.030272848904132843, -0.008704221807420254, -0.001905769924633205, -0.08399830758571625, -0.07659433782100677, -1.2921984195709229, -0.11245542019605637, -0.7167754173278809, -0.0005628670332953334, -0.23366114497184753, -2.6026923656463623, -0.00012563870404846966, -0.013623710721731186, -0.6201400756835938, -3.576278118089249e-07, -1.2636104656849056e-05, -0.05345834046602249, -1.2732210159301758, -0.3080105781555176, -0.6306710243225098, -1.2696250677108765, -0.0034045374486595392, -1.6148545742034912, -2.0861407392658293e-05, -1.6689286894688848e-06, -6.437280717364047e-06, -1.601311206817627, -0.435695081949234, -0.0009270184673368931, -0.015975572168827057, -0.0695139691233635, -0.09059510380029678, -0.03474399074912071, -0.007265573833137751, -0.025739571079611778, -0.0006182666402310133, -3.576278118089249e-07, -0.040979184210300446, -0.0453304760158062, -0.039110973477363586, -0.08820168673992157, -0.009806551970541477, -0.0021234839223325253, -0.002049847040325403, -0.006816230248659849, -0.011438503861427307, -0.003696158993989229, -0.09764743596315384, -0.01855902001261711, -0.05796797573566437, -0.04324550926685333, -0.00024387246230617166, -0.016993625089526176, -3.576272320060525e-06, -1.0251946150674485e-05, -0.0009006972541101277, -0.05037514120340347, -0.053739454597234726, -0.0012085284106433392, -0.00256423931568861, -0.0012737740762531757, -0.0009239218779839575, 0.0, -0.012847980484366417, -0.005911367479711771, -0.003571918234229088, -0.001321276999078691, -0.024363983422517776, -0.0014544870937243104, -0.013034850358963013, -0.010702945291996002, -0.004124231170862913, -0.0006556744920089841, -0.002938360208645463, -0.004360690712928772, -0.42535117268562317, -0.8517597317695618, -0.0078066252171993256, -0.3737214207649231, -0.008760590106248856, -5.006777428206988e-06, -6.794906312279636e-06, -0.051745545119047165, -0.01927654631435871, -0.0006100462633185089, -0.01193901989609003, -0.0008624648326076567, -0.001720973290503025, -0.0006493605324067175, -0.0001517419150331989, -1.6093124941107817e-05, -0.005039963871240616, -0.010197561234235764, -0.005015529692173004, -0.0006779517862014472, -0.031345199793577194, -0.0019386084750294685, -0.03301611170172691, -0.0020598401315510273, -0.00013672371278516948, -0.0008761619683355093, -0.00022957073815632612, -6.472854875028133e-05, -0.002635579090565443, -0.002266816096380353, -1.4054481983184814, -1.9873549938201904, -1.9525128602981567, -0.16968899965286255, -0.0064988695085048676, -0.059717435389757156, -0.0005243833875283599, -0.006793142296373844, -0.003493636380881071, -0.0033010535407811403, -0.00019059749320149422, -7.390703103737906e-05, -0.0009633429581299424, -0.0019535997416824102, -4.255681051290594e-05, -0.0008394769974984229, -0.006154632195830345, -0.04436745122075081, -5.006664650863968e-05, -5.8412379075889476e-06, -1.0132738680113107e-05, -1.3351351299206726e-05, -0.0010163385886698961, -0.6755284667015076, -0.13038818538188934, -0.009153780527412891, -0.10515991598367691, -0.03289280831813812, -0.03089429996907711, -0.5496166348457336, -0.463375061750412, -0.0027092916425317526, -1.3708974620385561e-05, -1.6212332411669195e-05, -0.01926496997475624, -0.014398487284779549, -1.597954511642456, -0.012206848710775375, -0.000533795915544033, -6.6756979322235566e-06, -9.536738616588991e-07, -0.001829261309467256, -0.012380886822938919, -0.6463394165039062, -9.059865078597795e-06, -8.34461570775602e-06, -0.035312384366989136, -0.014248069375753403, -1.0251946150674485e-05, -7.390948667307384e-06, -0.002734257373958826, -0.026624586433172226, -3.814689989667386e-06, -1.9073468138230965e-06, -0.021335959434509277, -0.0015936305280774832, -7.271740287251305e-06, -6.6756979322235566e-06, -0.6178516745567322, -0.005405571311712265, -0.07791738957166672, -0.6949764490127563, -0.004088021349161863, -0.0012367465533316135, -2.50339189733495e-06, -1.1920928244535389e-07, -0.01661992073059082, -0.4452141523361206, -0.0010375360725447536, -0.011506031267344952, -0.011121898889541626, -0.0001267114421352744, -0.00011324241495458409, -0.007700283546000719, -0.0010782625759020448, -2.8729025871143676e-05, -0.016511932015419006, -0.01411913800984621, -0.00012158608296886086, -2.50339189733495e-06, -0.002011063741520047, -0.002283110748976469, -0.01686926744878292, -0.20608828961849213, -0.013117330148816109], "finish_reason": "length"}], "metrics": {"energy": 894.5180613975524, "energy_per_token": 3.494211177334189, "time": 21.858965, "time_per_token": 0.08538658203125}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pandas DataFrame.\")\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column must be one of {data.columns}\")\n    try:\n        data.astype(np.float64).astype(np.float32)\n    except ValueError:\n        raise ValueError(\"data must contain only numeric values\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " be", " of", " type", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " not", " be", " empty", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "target", "_", "column", " must", " be", " one", " of", " {", "data", ".", "columns", "}\"", ")", "\n", "    ", "try", ":", "\n", "        ", "data", ".", "ast", "ype", "(", "np", ".", "float", "6", "4", ")", ".", "ast", "ype", "(", "np", ".", "float", "3", "2", ")", "\n", "    ", "except", " Value", "Error", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " must", " contain", " only", " numeric", " values", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " must", " be", " an", " integer", "\"", ")", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n", "        ", "X", ",", " y", ",", " test", "_", "size", "="], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -0.6706795692443848, -0.006588995922356844, -1.454603910446167, -0.012651893310248852, -0.7945785522460938, -1.7614065408706665, -0.040847018361091614, -1.9914724826812744, -0.03437962383031845, -0.0022716925013810396, -0.00661694398149848, -0.5313481688499451, -0.11066059023141861, -0.155130073428154, -0.0034325746819376945, -0.05363449826836586, -0.012156680226325989, -0.0008205384365282953, -0.003173793200403452, -0.0009601273923180997, -0.0004602803383022547, -1.311301275563892e-06, -0.02350688725709915, -0.004742327146232128, -0.051965802907943726, -0.33603495359420776, -0.14052052795886993, -0.004869032185524702, -0.014285910874605179, -1.6194907426834106, -0.0006053998949937522, -0.0017600059509277344, -0.03855941817164421, -0.035453911870718, -0.4435798227787018, -0.0002057340752799064, -1.2636104656849056e-05, -0.00872383825480938, -2.9682672902708873e-05, -0.07235430926084518, -0.07993666082620621, -0.0032854885794222355, -0.03340864181518555, -0.001665158779360354, -0.0021968772634863853, -0.003963354509323835, -0.003066482488065958, -5.602820692729438e-06, -0.006828662473708391, -1.3035763502120972, -0.027856336906552315, -0.3705209195613861, -0.08130915462970734, -0.007668106816709042, -1.5591225624084473, -0.027191579341888428, -0.8969507217407227, -0.03769581392407417, -0.7149930596351624, -0.061723437160253525, -0.0007052318542264402, -0.0008491248008795083, -0.39908137917518616, -0.0014891260070726275, -0.0017227584030479193, -0.07758673280477524, -2.1843652725219727, -0.002244930947199464, -0.016773732379078865, -0.004052878823131323, -0.21484822034835815, -0.538627564907074, -0.286070853471756, 0.0, -0.05585555359721184, -0.8210688233375549, -2.4199192921514623e-05, -0.10985708981752396, -0.055349819362163544, -7.152555099310121e-07, -0.025996876880526543, -2.0121304988861084, -0.45884954929351807, -5.960462772236497e-07, -0.0031666632276028395, -0.012460595928132534, -8.77341881277971e-05, -0.026446277275681496, -0.22087018191814423, -1.1801649634435307e-05, -0.00803512055426836, -0.296106219291687, -0.00895649567246437, -0.000542612629942596, -0.5158284902572632, -4.768370445162873e-07, -0.559198796749115, -0.004470473621040583, -0.0037716934457421303, -0.008903210051357746, -0.009602547623217106, -3.576272320060525e-06, -0.01587631367146969, -0.2637350261211395, -0.17296844720840454, -0.16153530776500702, -0.5833978652954102, -0.2716165781021118, -0.5334264636039734, -0.04086475819349289, -0.37269386649131775, -0.0004820853646378964, -0.01870785467326641, -1.8164660930633545, -0.0003812778159044683, -0.20328228175640106, -0.1635095626115799, -0.01746056042611599, -0.00022933237778488547, -0.016320668160915375, -2.7418097943154862e-06, -1.0132738680113107e-05, -0.0009873997187241912, -0.03447936847805977, -0.01687278412282467, -0.000878544058650732, -0.0033233908470720053, -0.0020655503030866385, -0.001496029901318252, -1.5497195136049413e-06, -0.007461536210030317, -0.03631347790360451, -0.025114210322499275, -0.022592535242438316, -0.006154276430606842, -0.02129884995520115, -0.005501368548721075, -0.38369712233543396, -0.07191908359527588, -0.31662717461586, -0.00029094755882397294, -0.0021162275224924088, -1.6959800720214844, -0.00010239553375868127, -0.03174012154340744, -1.1450053453445435, -6.437280717364047e-06, -6.9141146923357155e-06, -0.8091076612472534, -0.015587637200951576, -0.0007438276661559939, -0.04395182058215141, -0.005550686735659838, -1.7046782886609435e-05, -5.006777428206988e-06, -0.42052754759788513, -0.006104633212089539, -0.0035470922011882067, -0.019724184647202492, -0.0007316772826015949, -0.002933605806902051, -0.0012667496921494603, -0.0004198861715849489, -6.437280717364047e-06, -0.006466417107731104, -0.012302350252866745, -0.01464991644024849, -0.014255590736865997, -0.0014521064003929496, -0.018437549471855164, -0.023073870688676834, -0.2351420372724533, -0.006683495827019215, -0.0004245333548169583, -0.006856011692434549, -0.0010546842822805047, -0.0001401803019689396, -0.05763549357652664, -0.00020883286197204143, -0.0030031364876776934, -0.047283656895160675, -0.0011027929140254855, -1.1538275480270386, -0.2770642042160034, -0.027024393901228905, -0.11193190515041351, -0.03978114575147629, -0.025543903931975365, -0.3280703127384186, -0.46310922503471375, -0.0029868537094444036, -3.933898824470816e-06, -5.960462772236497e-07, -0.05089790001511574, -0.03790220245718956, -0.009739617817103863, -0.06943222880363464, -0.0016437364974990487, -0.0017422748496755958, -0.01749863289296627, -0.0001438752660760656, -1.4305104514278355e-06, -5.006777428206988e-06, -0.0001463782973587513, -0.009779518470168114, -0.8700584173202515, -0.11456376314163208, -0.003720031352713704, -0.002577556297183037, -0.0005998004344291985, -0.00466022128239274, -2.610649426060263e-05, -0.0024044194724410772, -0.000539634027518332, -0.0014996008248999715, -6.568216485902667e-05, -4.529942543740617e-06, -0.00039939055568538606, -0.0021634523291140795, -3.2305197237292305e-05, -0.00045265440712682903, -0.005096895154565573, -0.020614538341760635, -1.2397689715726301e-05, -2.264974000354414e-06, -2.7418097943154862e-06, -1.1920928244535389e-07, -0.0003090619284193963, -0.7540833950042725, -0.07542530447244644, -0.0007995745982043445, -0.02493400312960148, -0.10187104344367981, -0.002075186464935541, -0.029809661209583282, -5.006777428206988e-06, -3.814689989667386e-06, -0.02043129876255989], "finish_reason": "length"}], "metrics": {"energy": 885.2083729343423, "energy_per_token": 3.4578452067747745, "time": 22.05982, "time_per_token": 0.086171171875}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not target_column in data.columns:\n        raise ValueError(\"target_column ist not a column of data\")\n\n    try:\n        data = data.astype(np.float64)\n    except ValueError:\n        raise ValueError(\"data contains values that are not numeric\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state)\n\n", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "    ", "if", " not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " ist", " not", " a", " column", " of", " data", "\"", ")", "\n", "\n", "    ", "try", ":", "\n", "        ", "data", " =", " data", ".", "ast", "ype", "(", "np", ".", "float", "6", "4", ")", "\n", "    ", "except", " Value", "Error", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " values", " that", " are", " not", " numeric", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "\n", "    ", "X", " =", " data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n", "        ", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n", "\n"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -0.12768051028251648, -0.0014013956533744931, -0.008443845435976982, -0.40089812874794006, -0.0905793160200119, -0.12421581149101257, -0.003857078729197383, -0.06888413429260254, -0.011404325254261494, -0.000858415151014924, -0.0025883764028549194, -0.0013710394268855453, -0.0005980133428238332, -1.4305104514278355e-06, -0.011922056786715984, -0.0023186723701655865, -0.04436825215816498, -0.03277779370546341, -0.017391560599207878, -0.011066606268286705, -0.00023648326168768108, -0.0010369406081736088, -0.028133265674114227, -0.032825786620378494, -1.353543758392334, -0.21088168025016785, -7.199982064776123e-05, -2.4437606043647975e-05, -0.002946204738691449, -0.04530894383788109, -0.15737329423427582, -0.002776222536340356, -0.04910534992814064, -0.0010275328531861305, -0.0017916593933477998, -0.0014557965332642198, -0.0026145342271775007, -1.2397689715726301e-05, -0.00485515221953392, -0.17820857465267181, -0.08375002443790436, -0.04106602817773819, -0.004194272682070732, -0.6459090113639832, -0.0008925982983782887, -0.015431176871061325, -0.00802305806428194, -0.011984015814960003, -0.012647302821278572, -0.012765595689415932, -0.0005146132898516953, -0.0014590105274692178, -2.7883243560791016, -0.0007740838918834925, -2.9275588989257812, -0.00415521627292037, -0.019913163036108017, -0.007076438516378403, -0.4021271765232086, -1.0863828659057617, -0.015161274932324886, -0.028536291792988777, -0.2172686755657196, 0.0, -0.06595823913812637, -0.9424497485160828, -2.992108420585282e-05, -0.07437044382095337, -0.4471105933189392, -4.136476854910143e-05, -0.025397013872861862, -0.05098796635866165, -0.034588772803545, -0.0003299168893136084, -1.2011785507202148, -2.861018856492592e-06, -0.1348511129617691, -0.010348236188292503, -0.003558139316737652, -0.004780885763466358, -0.011448402889072895, -3.6954811548639555e-06, -0.017990155145525932, -0.006048825569450855, -0.02043118141591549, -0.004251014906913042, -0.007586714345961809, -0.0020944580901414156, -0.0027806211728602648, -0.0003768687602132559, -0.005533852614462376, -0.01626226119697094, -0.0002571013756096363, -0.02623855508863926, -0.07511881738901138, -0.00028427375946193933, -0.12469853460788727, -0.0629393681883812, -0.04406566917896271, -0.00041214076918549836, -0.012698506005108356, -2.145764938177308e-06, -1.9788545614574105e-05, -0.0012649638811126351, -0.03795051947236061, -0.011768910102546215, -0.0013811582466587424, -0.004065463785082102, -0.0010671879863366485, -0.0015487592900171876, -1.0728830375228426e-06, -0.009206579998135567, -0.0050865765661001205, -0.007330543827265501, -0.004192729480564594, -0.0015538772568106651, -0.02211189828813076, -0.001016934053041041, -0.008599157445132732, -0.004309652838855982, -0.0073158699087798595, -0.0001720042055239901, -0.0017019324004650116, -0.21528999507427216, -0.009165947325527668, -1.8250019550323486, -1.1801649634435307e-05, -2.622600959512056e-06, -0.595877468585968, -0.01328650489449501, -0.00044276448898017406, -0.03822673484683037, -0.004809003323316574, -2.4914430468925275e-05, -4.291525328881107e-06, -0.541584312915802, -0.006281631998717785, -0.0035088418517261744, -0.013475880958139896, -0.0007401349139399827, -0.0026496085338294506, -0.0006554362480528653, -0.0002643712505232543, -4.768370445162873e-07, -0.002064360771328211, -0.0016049373662099242, -0.01025337353348732, -0.003132676472887397, -0.0003165697562508285, -0.029412008821964264, -0.0012821081327274442, -0.017713798210024834, -0.00038115866482257843, -8.40390202938579e-05, -0.0006438804557546973, -0.0001137191939051263, -4.9828242481453344e-05, -0.0033875482622534037, -0.00021801002731081098, -0.0022168601863086224, -0.032589614391326904, -0.0011866202112287283, -0.8823814988136292, -0.2810979187488556, -0.04373674839735031, -0.11194448173046112, -0.06125777214765549, -0.04698218032717705, -0.7833287119865417, -0.5013193488121033, -0.003288577776402235, -3.4570634852570947e-06, -7.152555099310121e-07, -0.034736160188913345, -0.06242947652935982, -0.007521524094045162, -0.07529760897159576, -0.0014074668288230896, -0.0029478687793016434, -0.025145016610622406, -0.00016723664884921163, -9.536738616588991e-07, -2.3841855067985307e-07, -0.00017212340026162565, -0.01270262524485588, -0.4701720178127289, -0.0002002515539061278, -0.1399783343076706, -0.004675408825278282, -0.0029709271620959044, -0.0006829552003182471, -0.015272695571184158, -5.3881147323409095e-05, -0.0020026168785989285, -0.0009548871894367039, -0.0011406589765101671, -6.758938252460212e-05, -6.437280717364047e-06, -0.0004228651523590088, -0.0019966682884842157, -2.3245540432981215e-05, -0.00030191155383363366, -0.004738411866128445, -0.018216803669929504, -1.3708974620385561e-05, -1.1920922133867862e-06, -2.9802276912960224e-06, -3.576278118089249e-07, -0.0004954302567057312, -0.9638650417327881, -0.07263248413801193, -0.0012407946633175015, -0.026131950318813324, -0.1014186441898346, -0.0019605003762990236, -0.03651946410536766, -4.410734163684538e-06, -7.152555099310121e-07, -0.02461140789091587, -0.008045290596783161, -1.5497195136049413e-06, -1.311301275563892e-06, -0.0008217295398935676, -0.003272061934694648, -2.0265558760002023e-06, -4.410734163684538e-06, -0.01727498508989811, -0.001538642100058496, -4.410734163684538e-06, -3.933898824470816e-06, -0.7903391122817993, -0.0034098834730684757, -0.14138734340667725], "finish_reason": "length"}], "metrics": {"energy": 875.3401310729992, "energy_per_token": 3.419297387003903, "time": 21.848675, "time_per_token": 0.08534638671875}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.shape[0] == 0:\n        raise ValueError(\"data is empty\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column ist not a column of data\")\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, float) or not (0 <= test_size <= 1):\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    features = data.drop(target_column, axis=1)\n    labels = data[target_column]\n    features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=test_size, random_state", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "if", " data", ".", "shape", "[", "0", "]", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " is", " empty", "\"", ")", "\n", "    ", "if", " target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "column", " ist", " not", " a", " column", " of", " data", "\"", ")", "\n", "    ", "if", " not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "values", ".", "d", "type", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "data", " contains", " values", " that", " are", " not", " numeric", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "random", "_", "state", " is", " not", " an", " integer", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "test", "_", "size", ",", " float", ")", " or", " not", " (", "0", " <=", " test", "_", "size", " <=", " ", "1", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "test", "_", "size", " is", " not", " between", " ", "0", " and", " ", "1", "\"", ")", "\n", "\n", "    ", "features", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "labels", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "features", "_", "train", ",", " features", "_", "test", ",", " labels", "_", "train", ",", " labels", "_", "test", " =", " train", "_", "test", "_", "split", "(", "features", ",", " labels", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -0.4322536885738373, -0.3332662284374237, -0.4025092124938965, -1.1792054176330566, -0.03875358775258064, -0.16923800110816956, -0.2738615572452545, -0.01567460037767887, -0.12768051028251648, -0.0014013956533744931, -0.008443845435976982, -0.40089812874794006, -0.0905793160200119, -0.12421581149101257, -0.003857078729197383, -2.881643533706665, -0.012265493161976337, -0.0039222706109285355, -0.001524953986518085, -0.13943150639533997, -0.0015691122971475124, -1.9788545614574105e-05, -0.0918407291173935, -0.008001771755516529, -0.0032333259005099535, -0.000797311426140368, -0.0006781900301575661, -2.145764938177308e-06, -0.012752766720950603, -0.0023884836118668318, -0.0420948751270771, -0.050064846873283386, -0.026446277275681496, -0.014373340643942356, -0.00025519452174194157, -0.0013318725395947695, -0.02338613197207451, -0.03271238133311272, -0.3505265414714813, -0.00018618757894728333, -1.9311717551317997e-05, -0.00569388410076499, -2.13382354559144e-05, -0.06119397282600403, -0.07814188301563263, -0.0022188823204487562, -0.033754922449588776, -0.0012426996836438775, -0.002220785478129983, -0.0010488491971045732, -0.003705541603267193, -1.1920922133867862e-06, -0.006563178729265928, -0.1895982176065445, -0.07984520494937897, -0.03621415048837662, -0.0027122637256979942, -0.426565021276474, -0.0005789510905742645, -0.011520526371896267, -0.005041505675762892, -0.008647141046822071, -0.010737854987382889, -0.016844769939780235, -0.0004632591735571623, -0.001587679609656334, -0.061708979308605194, -0.08676452189683914, -0.3738562762737274, -1.8022974729537964, -1.9550132492440753e-05, -0.1493079960346222, -0.0052629257552325726, -2.0265558760002023e-06, -5.209310256759636e-05, -9.07141511561349e-05, -0.04189174994826317, -0.2422483265399933, -2.2354698181152344, -0.03814033046364784, -0.0007475204183720052, -0.0008588915807195008, -0.0011732844868674874, -0.00447071110829711, -1.1920928244535389e-07, -0.001482222112827003, -0.23354922235012054, -0.006227256264537573, -0.004146075341850519, -0.008701384998857975, -0.0010087168775498867, -9.536738616588991e-07, -0.007588725537061691, -0.008014780469238758, -0.013503402471542358, -0.00660782540217042, -0.0286390520632267, -0.00323950476013124, -0.0012843701988458633, -0.0006308949086815119, -0.006285304669290781, -0.010703770443797112, -0.00023398046323563904, -0.0023983544670045376, -0.0895584225654602, -0.01489223912358284, -0.13123391568660736, -0.0599348209798336, -0.0002571013756096363, -0.014369932934641838, -3.576272320060525e-06, -4.6491513785440475e-06, -0.0009757286752574146, -0.03318218141794205, -0.01853667013347149, -0.0016531385481357574, -0.002352448645979166, -0.0006111184484325349, -0.0008135108510032296, -1.7881377516459906e-06, -0.009614353999495506, -0.0034181997179985046, -0.0077032409608364105, -0.004985401872545481, -0.0006625840906053782, -0.016951432451605797, -0.0010517071932554245, -0.008392896503210068, -0.006252134684473276, -0.008091290481388569, -0.0001431601122021675, -0.0011123190633952618, -0.0032329694367945194, -0.003265883307904005, -0.5004799365997314, -1.2887797355651855, -0.00025185750564560294, -0.005372016690671444, -2.50339189733495e-06, -6.437280717364047e-06, -0.0006792622152715921, -0.27143749594688416, -0.8585163950920105, -0.10465553402900696, -2.0389161109924316, -0.8785195350646973, -0.0811644047498703, -0.7209060192108154, -0.001864363206550479, -1.0013530300057027e-05, -7.390948667307384e-06, -0.11129645258188248, -0.013750000856816769, -0.0009197533945553005, -0.021511217579245567, -0.003349173115566373, -0.0022475477308034897, -0.0013434203574433923, -0.0002675890573300421, -4.6491513785440475e-06, -0.0076049333438277245, -0.005997755099087954, -0.01498983334749937, -0.0032756265718489885, -0.0002450642641633749, -0.030350450426340103, -0.0038430660497397184, -0.09795542061328888, -0.0005834784242324531, -2.2053474822314456e-05, -0.0006380429258570075, -0.0001530530134914443, -5.531158240046352e-05, -0.006727071478962898, -0.00036423723213374615, -0.002719396958127618, -0.32952892780303955, -0.0011554239317774773, -3.289623975753784, -0.12145894020795822, -0.3345816433429718, -0.12894997000694275, -0.08223067969083786, -0.02115355245769024, -1.1295177936553955, -8.34461570775602e-06, -3.099436753473128e-06, -0.0010339635191485286, -0.007516200188547373, -0.0511719211935997, -0.003123525995761156, -0.010547134093940258, -0.05498984083533287, -0.013825720176100731, -2.443014144897461, -0.006850447505712509, -0.0047102924436330795, -0.020932238548994064, -9.42901024245657e-05, -1.0728830375228426e-06, -8.83301836438477e-05, -0.0001147919538198039, -0.011583099141716957, -0.7564952969551086, -1.5259565114974976, -0.022755103185772896, -0.01012428104877472, -0.002062219427898526, -0.00511693861335516, -2.622600959512056e-06, -0.003242594189941883, -0.0007457336178049445, -0.021681660786271095, -4.768360213347478e-06, -0.00021741411183029413, -0.0002810560108628124, -0.05107541382312775, -9.417489309271332e-06, -0.0007022537174634635, -0.030557896941900253, -0.06397806107997894, -1.3589766240329482e-05, -2.9802276912960224e-06, -4.529942543740617e-06, -3.3378546504536644e-06, -0.0010268182959407568, -0.5266645550727844, -0.016669631004333496, -0.062272895127534866, -0.0021059971768409014, -0.11860645562410355, -9.059865078597795e-06, -1.4305104514278355e-06, -0.0471484512090683, -0.017600540071725845, -5.960446742392378e-06, -6.437280717364047e-06, -0.0019847711082547903, -0.012570081278681755, -1.1920922133867862e-06, -1.9073468138230965e-06], "finish_reason": "length"}], "metrics": {"energy": 913.3537952880865, "energy_per_token": 3.567788262844088, "time": 21.853056, "time_per_token": 0.0853635}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be pandas DataFrame')\n\n    if data.empty:\n        raise ValueError('data must not be empty')\n\n    if not target_column in data.columns:\n        raise ValueError('target_column must be a column of data')\n\n    if not data.drop(target_column, axis=1).apply(pd.to_numeric, errors='coerce').select_dtypes(include=np.number).empty:\n        raise ValueError('data must only contain numerical values')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be integer')\n\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    # Split data to train and test sets\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " be", " pandas", " Data", "Frame", "')", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " not", " be", " empty", "')", "\n", "\n", "    ", "if", " not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", "_", "column", " must", " be", " a", " column", " of", " data", "')", "\n", "\n", "    ", "if", " not", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", ".", "apply", "(", "pd", ".", "to", "_", "numeric", ",", " errors", "='", "co", "er", "ce", "')", ".", "select", "_", "d", "types", "(", "include", "=", "np", ".", "number", ")", ".", "empty", ":", "\n", "        ", "raise", " Value", "Error", "('", "data", " must", " only", " contain", " numerical", " values", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "('", "random", "_", "state", " must", " be", " integer", "')", "\n", "\n", "    ", "if", " test", "_", "size", " <", " ", "0", " or", " test", "_", "size", " >=", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "('", "test", "_", "size", " must", " be", " between", " ", "0", " and", " ", "1", "')", "\n", "\n", "    ", "#", " Split", " data", " to", " train", " and", " test", " sets", "\n", "    ", "X", " =", " data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n", "    ", "y", " =", " data", "[", "target", "_", "column", "]", "\n", "    ", "X", "_", "train", ",", " X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X"], "logprobs": [-0.5890400409698486, -0.10523470491170883, -0.03577383607625961, -0.00038961926475167274, -0.015875961631536484, -0.0008541273418813944, -0.012726872228085995, -8.583032467868179e-06, -0.0212088730186224, -0.011025341227650642, -0.006013988982886076, -0.006878032814711332, -0.009461680427193642, -0.007158464752137661, -5.960446742392378e-06, -1.1081570386886597, -0.3073061406612396, -0.8219397664070129, -0.00809897668659687, -3.2549338340759277, -0.615868866443634, -0.039061106741428375, -0.14043860137462616, -0.002196044661104679, -0.9161707758903503, -0.00018094333063345402, -0.032955095171928406, -0.20220714807510376, -0.002855392638593912, -0.05542989447712898, -0.016917090862989426, -0.0006096888100728393, -0.002858245512470603, -0.0006711614551022649, -0.0005526207387447357, -1.6689286894688848e-06, -0.034266166388988495, -0.029903264716267586, -0.3084152638912201, -0.16110403835773468, -0.006057475693523884, -0.007420714013278484, -0.024347346276044846, -0.0009243983076885343, -0.011193220503628254, -0.00013016807497479022, -0.08692769706249237, -1.1080682277679443, -0.9653900861740112, -8.642300235806033e-05, -2.098061486321967e-05, -0.006267772056162357, -0.05823410302400589, -0.13982069492340088, -0.0032088477164506912, -0.052270982414484024, -0.0013492538128048182, -0.002599909668788314, -0.0018123644404113293, -0.0019633558113127947, -1.0490362910786644e-05, -0.29990166425704956, -0.08231357485055923, -0.08544032275676727, -0.0036292895674705505, -0.44014936685562134, -0.025114675983786583, -0.2918430268764496, -0.18883036077022552, -0.21743135154247284, -0.07577390968799591, -0.016137225553393364, -0.0014897212386131287, -0.005816557444632053, -0.00035041390219703317, -0.2613203227519989, -0.3353390097618103, -0.6947104334831238, -0.41624167561531067, -3.2571778297424316, -0.013928591273725033, -0.2719793915748596, -7.152555099310121e-07, -5.006777428206988e-06, -0.010644445195794106, -0.07356392592191696, -0.029413629323244095, -0.0013056810712441802, -0.007995149120688438, -0.00036769305006600916, -0.14266444742679596, -1.6082667112350464, -0.08636242896318436, -1.0490362910786644e-05, -0.016483791172504425, -1.1920928244535389e-07, -4.768370445162873e-07, -0.7919945120811462, -1.2150675058364868, -0.03936726972460747, -0.11277303844690323, -0.00018869050836656243, -9.536738616588991e-07, -0.010891278274357319, -0.0017797596519812942, -2.556103467941284, -1.7881377516459906e-06, -4.529942543740617e-06, -1.2636104656849056e-05, -0.20286116003990173, -0.06256777793169022, -0.8899755477905273, -0.052876878529787064, -2.3245540432981215e-05, -0.05047987401485443, -0.0020641228184103966, -0.003076703054830432, -0.06096754968166351, -0.0030646997038275003, -0.010228359140455723, -0.009949731640517712, -0.010508324950933456, -0.0011213688412681222, -1.764281842042692e-05, -0.016671624034643173, -0.25818198919296265, -0.11422044783830643, -0.959932804107666, -0.03560037165880203, -3.0227599143981934, -0.07376149296760559, -0.12233872711658478, -0.002163928234949708, -0.0038412846624851227, -0.0002131234941771254, -0.0384959876537323, -0.05226011946797371, -0.04131827875971794, -0.0002236116270069033, -0.021084455773234367, -2.264974000354414e-06, -2.861018856492592e-06, -0.0007388246012851596, -0.030864940956234932, -0.033181723207235336, -0.001404847833327949, -0.003695802530273795, -0.0014042527182027698, -0.0012055517872795463, -2.3841855067985307e-07, -0.013101093471050262, -0.010349651798605919, -0.008666758425533772, -0.0010376551654189825, -0.018162136897444725, -0.004538829438388348, -1.3507909774780273, -0.03752382844686508, -0.0007334641413763165, -0.022485656663775444, -6.09140915912576e-05, -0.011438621208071709, -1.2785594463348389, -1.5735502529423684e-05, -1.7881377516459906e-06, -0.7037360668182373, -0.012145139276981354, -0.0009909725049510598, -0.04305095225572586, -0.009142795577645302, -2.52720492426306e-05, -3.6954811548639555e-06, -0.8236514925956726, -0.02288047969341278, -0.0022280411794781685, -0.024886678904294968, -0.0020988595206290483, -0.0035236908588558435, -0.001049682730808854, -0.00025090406415984035, -5.364403477869928e-06, -0.005497219506651163, -0.014331154525279999, -0.019241467118263245, -0.0017523899441584945, -0.04471975937485695, -0.043196529150009155, -0.41497430205345154, -0.019464440643787384, -0.0003251500893384218, -0.014199766330420971, -0.0013706822646781802, -0.0015350712928920984, -0.09268198162317276, -0.0017263285117223859, -0.010487562976777554, -0.0015430459752678871, -2.311192512512207, -1.8653485774993896, -0.8864980936050415, -3.199298620223999, -1.2370860576629639, -0.3793925344944, -0.012735347263514996, -1.4116322994232178, -0.21410058438777924, -0.006450190674513578, -0.8645228147506714, -0.9548279047012329, -0.01890076883137226, -0.06826169043779373, -0.009295518510043621, -0.02618943527340889, -0.10160389542579651, -4.172316494077677e-06, -4.529942543740617e-06, -0.0004349001101218164, -0.006280447356402874, -0.05036323890089989, -0.00022837892174720764, -0.0023265217896550894, -0.0770944133400917, -0.0024888513144105673, -0.09649628400802612, -0.0013106813421472907, -0.0035217900294810534, -0.04159493371844292, -0.00017248096992261708, -2.0265558760002023e-06, -3.0517112463712692e-05, -0.00029237763374112546, -0.014330096542835236, -0.17528070509433746, -0.054984308779239655, -0.004505601711571217, -0.00368760759010911, -0.0009033175301738083, -0.002908050548285246, -2.109982233378105e-05, -0.0013368725776672363, -0.0012511529494076967, -0.0023334198631346226, -9.250213042832911e-05, -1.6093124941107817e-05, -0.00037400881410576403, -0.0017440598458051682, -2.47952248173533e-05, -0.000601349223870784, -0.004752174485474825, -0.015232308767735958, -1.3589766240329482e-05, -1.9073468138230965e-06, -1.6689286894688848e-06, -2.3841855067985307e-07, -0.00036614391137845814, -0.1596086621284485], "finish_reason": "length"}], "metrics": {"energy": 877.2732227277744, "energy_per_token": 3.4268485262803687, "time": 21.859205, "time_per_token": 0.08538751953125}}
