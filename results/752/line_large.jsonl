{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.11540842801332474, -0.039061106741428375, -0.0003530356043484062, -0.03597038611769676, -0.0006140968762338161, -0.014332094229757786, -1.0251946150674485e-05, -0.01523395162075758, -0.010519059374928474, -0.007918632589280605], "finish_reason": "stop"}, {"text": " ValueError(\"data must be a DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "data", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -0.5457839965820312, -0.006200363393872976, -0.36275845766067505, -0.47865578532218933, -0.016976749524474144, -1.95171320438385, -0.019411595538258553, -0.001583989942446351, -0.00691532576456666], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not isinstance(target_column, str):", "tokens": [" not", " isinstance", "(", "target", "_", "column", ",", " str", "):", "\n"], "logprobs": [-1.1974523067474365, -1.537463665008545, -0.00021324267436284572, -0.4584483504295349, -3.2305197237292305e-05, -1.1801649634435307e-05, -0.0010619483655318618, -0.023303797468543053, -0.07626401633024216, -0.0011162485461682081], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column in data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -0.21941259503364563, -0.15496733784675598, -0.05659650266170502, -0.005887191742658615, -0.2402101457118988, -0.02765992470085621, -0.2976752817630768, -0.07857043296098709, -1.625972032546997, -0.15573491156101227, -0.1295381784439087, -0.0030626794323325157, -0.0004080893413629383, -0.0015401893761008978], "finish_reason": "stop"}, {"text": " data.select_dtypes(exclude=np.number).columns.any():", "tokens": [" data", ".", "select", "_", "d", "types", "(", "exclude", "=", "np", ".", "number", ")", ".", "columns", ".", "any", "():", "\n"], "logprobs": [-0.7429885268211365, -0.15592536330223083, -1.1272515058517456, -1.9311717551317997e-05, -5.8412379075889476e-06, -2.9802276912960224e-06, -0.10568784922361374, -0.1178039088845253, -0.9155354499816895, -0.43799230456352234, -1.7881377516459906e-06, -0.0030322547536343336, -0.001958120847120881, -0.002638908103108406, -0.8186789155006409, -0.013734127394855022, -0.6080136299133301, -0.015703469514846802, -0.01138204988092184], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.00112255965359509, -4.0531076592742465e-06, -0.012332611717283726, -0.02156558446586132, -0.6842400431632996, -0.16214105486869812, -0.479764461517334, -0.10393475741147995, -0.23010635375976562, -0.11308673024177551, -0.04151545837521553, -0.0015750633319839835, -0.00026008085114881396, -0.0009637002367526293], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10722703486680984, -0.03392006456851959, -0.00019035911827813834, -0.02440144307911396, -4.410734163684538e-06, -5.602820692729438e-06, -0.0011020784731954336, -0.03783493861556053, -0.03812415152788162, -0.0016193384071812034], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007427555974572897, -1.156323378381785e-05, -0.014517747797071934, -0.01033738162368536, -0.02567276544868946, -0.013460473157465458, -0.0009572691051289439, -0.07898349314928055, -0.021172810345888138, -1.473163366317749, -0.6535654067993164, -0.29068729281425476, -0.03294182941317558, -0.0002791491860989481, -0.013639703392982483, -0.0016536145703867078, -0.0005204515182413161, -0.1326962113380432, -0.0027500689029693604, -0.0002836778585333377, -0.0010832638945430517], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08951711654663086, -0.043948281556367874, -0.00040284625720232725, -0.021701375022530556, -1.4305104514278355e-06, -2.622600959512056e-06, -0.0010362261673435569, -0.036670129746198654, -0.06750449538230896, -0.001844849088229239], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002284181071445346, -6.794906312279636e-06, -0.013671571388840675, -0.012612930499017239, -0.0326041541993618, -0.006007471587508917, -0.005927128717303276, -0.06952264159917831, -0.005142437759786844, -0.0967351421713829, -0.06375696510076523, -0.2625402808189392, -0.0036942586302757263, -0.000392598332837224, -0.0025601964443922043], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.032273635268211365, -0.12251138687133789, -0.09753704071044922, -0.036421533674001694, -1.1353557109832764, -9.059865078597795e-06, -2.264974000354414e-06, -0.0016921738861128688, -0.030284183099865913, -0.0771663635969162, -0.008973154239356518, -0.009753784164786339, -0.06473692506551743], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0036737113259732723, -0.04569508880376816, -0.00031323294388130307, -1.9073468138230965e-06, -5.006777428206988e-06, -0.00011753345461329445, -0.017966385930776596], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.008074380457401276, -3.313963316031732e-05, -0.0018820922123268247, -0.000964533886872232, -0.0020325970835983753, -7.73638384998776e-05, -9.179073458653875e-06, -0.00037531962152570486, -0.0016267173923552036, -2.932505594799295e-05, -0.000520570669323206, -0.0055983420461416245, -0.02015000768005848, -1.9788545614574105e-05, -2.861018856492592e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0006205302197486162, -0.10487217456102371, -0.012766890227794647, -0.04006887972354889, -0.003949105739593506, -0.06613756716251373, -6.794906312279636e-06, -5.364403477869928e-06, -0.04669199138879776, -0.02019183337688446, -3.2186455882765586e-06, -5.960446742392378e-06, -0.0022448119707405567, -0.02161831595003605, -2.622600959512056e-06, -6.556489552167477e-06, -0.03534460440278053, -0.0035045654512941837, -3.2186455882765586e-06, -2.264974000354414e-06, -0.009552366100251675, -0.019912345334887505], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001963593764230609, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.02135217934846878, -0.8597558736801147, -0.00010084597306558862, -7.60526381782256e-05, -0.0006342306733131409, -0.027055837213993073, -9.250213042832911e-05, -0.004389413632452488, -0.014197415672242641, -7.593343616463244e-05, -1.1920922133867862e-06, -0.0007472821744158864, -0.00994902290403843], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.026315774768590927, -6.997340824455023e-05, -7.271740287251305e-06, -0.00011228884250158444, -0.0002150304353563115, -0.0029817428439855576, -0.0017558409599587321, -0.0005697772721759975, -0.01764446310698986, -5.435795901576057e-05, -2.622600959512056e-06, -0.29123061895370483], "finish_reason": "stop"}], "metrics": {"energy": 1371.9605881586076, "energy_per_token": 5.599839135341256, "time": 40.269062, "time_per_token": 0.16436351836734694}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not a DataFrame.')", "tokens": [" Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", ".", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -0.11166571825742722, -0.2369120866060257, -0.01571250520646572, -2.5542006492614746, -0.027859583497047424, -0.004154385533183813], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -1.5783469676971436, -0.05181844159960747, -0.2234431505203247, -0.013084975071251392, -0.0004297763225622475, -0.000979539705440402], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.46760323643684387, -0.00022230061586014926, -1.2755313036905136e-05, -0.009073572233319283, -3.361645576660521e-05, -0.10506204515695572, -0.08503419160842896, -0.003479024861007929, -0.03209240362048149, -0.0018951804377138615], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002273952355608344, -4.887569048150908e-06, -0.007405094336718321, -0.1954435110092163, -0.12541376054286957, -0.050225164741277695, -0.005381502211093903, -0.2190772145986557, -0.03376990556716919, -0.3470337986946106, -0.07788959890604019, -0.29953834414482117, -0.09777998179197311, -0.13611982762813568, -0.0022394596599042416, -0.000558220490347594, -0.0017776177264750004], "finish_reason": "stop"}, {"text": " data[target_column].dtype not in ['float32', 'float64', 'int32', 'int64']:", "tokens": [" data", "[", "target", "_", "column", "]", ".", "d", "type", " not", " in", " ['", "float", "3", "2", "'", ",", " '", "float", "6", "4", "'", ",", " '", "int", "3", "2", "'", ",", " '", "int", "6", "4", "']", ":", "\n"], "logprobs": [-0.776850163936615, -1.8866417407989502, -0.8234289884567261, -2.861018856492592e-06, -1.1801649634435307e-05, -0.0008070787298493087, -0.000942858459893614, -0.35891151428222656, -0.1241639107465744, -0.8896522521972656, -0.00012885693286079913, -2.1876914501190186, -0.815676212310791, -2.3277769088745117, -1.0728830375228426e-06, -0.001209719106554985, -0.00396762927994132, -0.06638234108686447, -0.03616977110505104, -0.005301227327436209, -3.2305197237292305e-05, -0.15484073758125305, -0.0013990148436278105, -0.02361121214926243, -0.019411830231547356, -0.07759026437997818, 0.0, -0.0019693044014275074, -0.0009110590908676386, -0.010815689340233803, -0.0016703951405361295, -0.0014310367405414581, -4.8040190449682996e-05, -0.04182567074894905, -0.019814880564808846, -0.008065038360655308], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012363893911242485, -3.099436753473128e-06, -0.011795064434409142, -0.025162454694509506, -0.5827763676643372, -0.16634094715118408, -0.4811371862888336, -0.10403596609830856, -0.2230725884437561, -0.09751217067241669, -0.04889252036809921, -0.001947531825862825, -0.00024005869636312127, -0.0007522851810790598], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09306687861680984, -0.04048910737037659, -0.00016318420239258558, -0.02818136475980282, -2.861018856492592e-06, -5.483612312673358e-06, -0.0012050755321979523, -0.038870323449373245, -0.03872549161314964, -0.0014643670292571187], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007490689749829471, -8.940656698541716e-06, -0.01427133847028017, -0.011327714659273624, -0.028325296938419342, -0.011394189670681953, -0.0008880723617039621, -0.07433503121137619, -0.028987448662519455, -0.6798018217086792, -0.03101334162056446, -0.00044276448898017406, -0.009271896444261074, -0.00255555915646255, -0.0005586970364674926, -0.1713227927684784, -0.0061827111057937145, -0.00031931069679558277, -0.0015287628630176187], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08649035543203354, -0.03571701422333717, -0.00039760314393788576, -0.0243831779807806, -1.4305104514278355e-06, -2.7418097943154862e-06, -0.0012154342839494348, -0.04223556071519852, -0.08068835735321045, -0.0016469499096274376], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0029075751081109047, -1.168244216387393e-05, -0.012883520685136318, -0.013010376133024693, -0.034906551241874695, -0.0069120111875236034, -0.005314745474606752, -0.06944712996482849, -0.005336326081305742, -0.09280910342931747, -0.07624799758195877, -0.26270097494125366, -0.0039006590377539396, -0.0003748429589904845, -0.003097381442785263], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.0273937676101923, -0.13297396898269653, -0.09475746005773544, -0.03653302416205406, -1.1919760704040527, -1.0490362910786644e-05, -2.7418097943154862e-06, -0.0015769677702337503, -0.025911618024110794, -0.06556231528520584, -0.009328351356089115, -0.00817157793790102, -0.059041280299425125], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0031116423197090626, -0.052154555916786194, -0.0003583981015253812, -1.5497195136049413e-06, -3.6954811548639555e-06, -0.0001250427303602919, -0.01627047173678875], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011422593146562576, -2.9444261599564925e-05, -0.0023907432332634926, -0.0009149893885478377, -0.0022354156244546175, -9.870042413240299e-05, -7.271740287251305e-06, -0.0006348263123072684, -0.0018901830771937966, -2.8013790142722428e-05, -0.0006696127820760012, -0.00613081781193614, -0.016274340450763702, -1.9073304429184645e-05, -3.576272320060525e-06, -2.3841830625315197e-06, -3.576278118089249e-07, -0.0006417360855266452, -0.11374317854642868, -0.011573554016649723, -0.04081863909959793, -0.004449942149221897, -0.062276702374219894, -5.8412379075889476e-06, -2.622600959512056e-06, -0.04025542736053467, -0.020058058202266693, -3.933898824470816e-06, -5.722029527532868e-06, -0.002415003487840295, -0.025462094694375992, -2.9802276912960224e-06, -8.4638240878121e-06, -0.030608192086219788, -0.004177415743470192, -3.2186455882765586e-06, -2.9802276912960224e-06, -0.009748471900820732, -0.021519150584936142], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001660398324020207, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.019657909870147705, -0.766964852809906, -0.00011777184408856556, -6.937739817658439e-05, -0.0008056493825279176, -0.027291113510727882, -0.0001774868869688362, -0.003975940868258476, -0.016722621396183968, -8.141662692651153e-05, -1.1920922133867862e-06, -0.000788258679676801, -0.010272135026752949], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>\"\"\"", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|", ">\"", "\"", "\"", "\n"], "logprobs": [-0.029895396903157234, -5.98412734689191e-05, -6.9141146923357155e-06, -0.00010322991875000298, -0.00021753329201601446, -0.00269906735047698, -0.0015995815629139543, -0.0005457103834487498, -0.014513400383293629, -4.434487345861271e-05, -2.50339189733495e-06, -1.2418842315673828, -5.364403477869928e-06, -1.0728830375228426e-06, -2.9802276912960224e-06, -0.0001560327800689265, -1.395979642868042, -0.005079104099422693, -0.004396653734147549, -0.0005224770284257829, -0.5616353154182434], "finish_reason": "stop"}], "metrics": {"energy": 1157.4153239593513, "energy_per_token": 4.367604996073024, "time": 30.271105, "time_per_token": 0.11423058490566038}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not target_column in data.columns:", "tokens": [" not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-1.1974523067474365, -0.722785472869873, -8.904537389753386e-05, -1.7762025890988298e-05, -0.004297545645385981, -0.1024244949221611, -0.17457035183906555, -0.004889911040663719, -0.05044598504900932, -0.001775951823219657], "finish_reason": "stop"}, {"text": " ValueError(f\"target_column should be in {data.columns}.\")", "tokens": [" Value", "Error", "(", "f", "\"", "target", "_", "column", " should", " be", " in", " {", "data", ".", "columns", "}", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -1.9500834941864014, -0.025157572701573372, -0.4995489716529846, -0.044646572321653366, -0.0065304916352033615, -0.5885322690010071, -0.026112323626875877, -1.9245117902755737, -0.9668494462966919, -0.02528020553290844, -0.03529443219304085, -0.0036134920082986355, -0.6231892108917236, -0.026919148862361908, -0.0079685403034091, -0.0013102050870656967, -0.0014488924061879516], "finish_reason": "stop"}, {"text": " not np.issubdtype(data.dtypes.iloc[0], np.number):", "tokens": [" not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "d", "types", ".", "il", "oc", "[", "0", "]", ",", " np", ".", "number", "):", "\n"], "logprobs": [-1.0237617492675781, -1.7010722160339355, -2.407998726994265e-05, -0.10127484053373337, -0.007583638187497854, -3.576272320060525e-06, -9.858122211880982e-05, -0.0001532914029667154, -0.04416456073522568, -0.13748003542423248, -0.2967495620250702, -1.1920858014491387e-05, -1.6164278984069824, -0.7188021540641785, -2.3364747903542593e-05, -0.05292696878314018, -0.0070335883647203445, -0.0005122303264215589, -0.010267415083944798, -0.012312358245253563, -4.529942543740617e-06, -0.020302461460232735, -0.007484727073460817, -0.02192321978509426], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011139861308038235, -3.3378546504536644e-06, -0.010827010497450829, -0.019784143194556236, -0.5897023677825928, -0.13517449796199799, -0.548779308795929, -0.09134666621685028, -0.22623905539512634, -0.1020025983452797, -0.0530347116291523, -0.002200683578848839, -0.00022516099852509797, -0.000878544058650732], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10733989626169205, -0.0421941913664341, -0.00017581824795342982, -0.030422726646065712, -3.814689989667386e-06, -5.8412379075889476e-06, -0.001312228967435658, -0.036696676164865494, -0.04663214832544327, -0.0017877324717119336], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006003961316309869, -9.65590606938349e-06, -0.015269055962562561, -0.010443325154483318, -0.02738228440284729, -0.010172663256525993, -0.0008990298374556005, -0.07981251925230026, -0.030446432530879974, -0.6916830539703369, -0.024349557235836983, -0.0004152389301452786, -0.009680942632257938, -0.001741203828714788, -0.0008367374539375305, -0.1453060358762741, -0.005688194651156664, -0.00031704644788987935, -0.0019025574438273907], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10487281531095505, -0.04161426052451134, -0.00037555795279331505, -0.025500793009996414, -1.5497195136049413e-06, -3.6954811548639555e-06, -0.0010065733222290874, -0.04395022243261337, -0.055779457092285156, -0.0015428080223500729], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0029369338881224394, -8.702239938429557e-06, -0.014218688011169434, -0.013112506829202175, -0.031847286969423294, -0.0063806623220443726, -0.006245618686079979, -0.07223553955554962, -0.004934513941407204, -0.10779979079961777, -0.08063700050115585, -0.2618235945701599, -0.0046987831592559814, -0.0003672163875307888, -0.0026022878009825945], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.029677975922822952, -0.12548957765102386, -0.08648084104061127, -0.030144810676574707, -1.4504002332687378, -9.059865078597795e-06, -1.7881377516459906e-06, -0.001695148996077478, -0.02459896169602871, -0.07262516766786575, -0.01255913358181715, -0.008671249262988567, -0.0660485252737999], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003671098267659545, -0.03754552826285362, -0.0003147821989841759, -1.6689286894688848e-06, -2.50339189733495e-06, -0.00013517419574782252, -0.01967918500304222], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011080753989517689, -3.4927710657939315e-05, -0.0019741824362426996, -0.0009603655780665576, -0.002534393919631839, -9.369411418447271e-05, -8.34461570775602e-06, -0.0004119024670217186, -0.0018991068936884403, -3.6954195820726454e-05, -0.0006409021443687379, -0.005282965954393148, -0.019115282222628593, -1.8954096958623268e-05, -2.50339189733495e-06, -2.264974000354414e-06, -3.576278118089249e-07, -0.0004992430913262069, -0.1352446973323822, -0.00812049675732851, -0.03603144735097885, -0.0047401911579072475, -0.07662370800971985, -7.748573807475623e-06, -4.768360213347478e-06, -0.05263929069042206, -0.024073323234915733, -3.814689989667386e-06, -7.510157047363464e-06, -0.002523097675293684, -0.023992672562599182, -2.861018856492592e-06, -9.059865078597795e-06, -0.03271791711449623, -0.003603752003982663, -3.6954811548639555e-06, -3.4570634852570947e-06, -0.00861026719212532, -0.021718405187129974], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0016719423001632094, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.014934401959180832, -0.5183837413787842], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>\"\"\"", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|", ">\"", "\"", "\"", "\n"], "logprobs": [-0.03002982959151268, -7.211902266135439e-05, -7.390948667307384e-06, -9.321732068201527e-05, -0.0002131234941771254, -0.0026712471153587103, -0.0015568528324365616, -0.0005018643569201231, -0.01671605557203293, -7.462222856702283e-05, -2.264974000354414e-06, -1.2856510877609253, -6.198863957251888e-06, -8.344646857949556e-07, -2.9802276912960224e-06, -0.00011932138295378536, -1.6238751411437988, -0.0060477592051029205, -0.003433049889281392, -0.0005011494504287839, -0.507316529750824], "finish_reason": "stop"}], "metrics": {"energy": 1128.8935033569342, "energy_per_token": 4.551989932890864, "time": 29.216448, "time_per_token": 0.11780825806451613}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " not data.size:", "tokens": [" not", " data", ".", "size", ":", "\n"], "logprobs": [-2.69850754737854, -1.0312273502349854, -0.005981165450066328, -0.9018535017967224, -0.2212660014629364, -0.013054735958576202], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not data[target_column].isna().all() and not data[target_column].apply(lambda x: not pd.isna(x) and isinstance(x, (int, float))).all():", "tokens": [" not", " data", "[", "target", "_", "column", "]", ".", "is", "na", "()", ".", "all", "()", " and", " not", " data", "[", "target", "_", "column", "]", ".", "apply", "(", "lambda", " x", ":", " not", " pd", ".", "is", "na", "(", "x", ")", " and", " isinstance", "(", "x", ",", " (", "int", ",", " float", ")))", ".", "all", "():", "\n"], "logprobs": [-1.1974523067474365, -1.80336332321167, -0.6885519623756409, -0.03866872191429138, -1.8596476365928538e-05, -2.13382354559144e-05, -0.0005153281381353736, -0.00044312194222584367, -2.3935775756835938, -0.633348822593689, -9.190614218823612e-05, -2.5033637939486653e-05, -0.962428629398346, -0.5366038680076599, -1.3332937955856323, -0.311923623085022, -0.9279996752738953, -0.0033699646592140198, -0.003287270897999406, -7.510157047363464e-06, -2.145764938177308e-06, -0.00012242044613230973, -0.00018487652414478362, -1.4069687128067017, -0.0009453595266677439, -0.5175931453704834, -0.09509918093681335, -0.02221228927373886, -2.299240827560425, -0.7483415603637695, -2.0146166207268834e-05, -0.05402139201760292, -0.12043222039937973, -0.0004378790326882154, -0.001258891774341464, -0.02161785028874874, -0.010923940688371658, -0.9201375842094421, -0.00010632903286023065, -0.0024441389832645655, -0.0023253324907273054, -0.16927483677864075, -0.11101068556308746, -0.000892121868673712, -0.03764886036515236, -0.43124061822891235, -0.00034731553751043975, -0.024099623784422874, -0.0095830662176013, -0.018218910321593285], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -0.21941259503364563, -0.15496733784675598, -0.05659650266170502, -0.005887191742658615, -0.2402101457118988, -0.02765992470085621, -0.2976752817630768, -0.07857043296098709, -0.31711509823799133, -0.09528408199548721, -0.12874728441238403, -0.0022833484690636396, -0.0005919373361393809, -0.0018490137299522758], "finish_reason": "stop"}, {"text": " data.select_dtypes(exclude=[\"number\"]).columns.any():", "tokens": [" data", ".", "select", "_", "d", "types", "(", "exclude", "=[", "\"", "number", "\"", "])", ".", "columns", ".", "any", "():", "\n"], "logprobs": [-0.7429885268211365, -0.15592536330223083, -1.1272515058517456, -1.9311717551317997e-05, -5.8412379075889476e-06, -2.9802276912960224e-06, -0.10568784922361374, -0.1178039088845253, -1.5866589546203613, -1.502863883972168, -0.0005663221818394959, -2.1219027985353023e-05, -0.011076156049966812, -0.010118262842297554, -0.5569180846214294, -0.023748354986310005, -0.37306317687034607, -0.03765781223773956, -0.020409222692251205], "finish_reason": "stop"}, {"text": " ValueError(\"All values in the provided DataFrame should be numeric.\")", "tokens": [" Value", "Error", "(", "\"", "All", " values", " in", " the", " provided", " Data", "Frame", " should", " be", " numeric", ".", "\"", ")", "\n"], "logprobs": [-0.00112255965359509, -4.0531076592742465e-06, -0.012332611717283726, -0.02156558446586132, -1.6499860286712646, -0.41624733805656433, -0.3660551905632019, -0.8377907276153564, -0.6054435968399048, -0.39128822088241577, -0.008054514415562153, -0.05226883292198181, -0.004354875069111586, -0.06601359695196152, -0.07991784065961838, -0.0018369958270341158, -0.0004625442670658231, -0.0022011594846844673], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09430335462093353, -0.0379413403570652, -0.00018320789968129247, -0.03435278683900833, -3.576272320060525e-06, -4.0531076592742465e-06, -0.001081358641386032, -0.037077657878398895, -0.030214326456189156, -0.0016158869257196784], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006989181856624782, -1.3351351299206726e-05, -0.014764918014407158, -0.0125802056863904, -0.027463242411613464, -0.011220568791031837, -0.0009347598534077406, -0.0821114331483841, -0.022636238485574722, -0.5883917212486267, -0.02227652817964554, -0.00044431351125240326, -0.011310859583318233, -0.0021489402279257774, -0.0007884969236329198, -0.18779952824115753, -0.005688786972314119, -0.0003121604095213115, -0.0018240257631987333], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10207095742225647, -0.03382891044020653, -0.0003194298769813031, -0.021043717861175537, -1.5497195136049413e-06, -2.861018856492592e-06, -0.0012165057705715299, -0.04043735936284065, -0.09059020131826401, -0.002017725957557559], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", "\"", ")", "\n"], "logprobs": [-0.0035513683687895536, -8.34461570775602e-06, -0.015680938959121704, -0.011145005002617836, -0.03685202822089195, -0.005541202612221241, -0.005652989260852337, -0.07692189514636993, -0.004906637128442526, -0.09764408320188522, -0.0686277225613594, -1.9287742376327515, -0.0009648911654949188, -0.0018842339050024748], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.030026359483599663, -0.14787547290325165, -0.08905483782291412, -0.04227430000901222, -1.1232510805130005, -8.4638240878121e-06, -3.2186455882765586e-06, -0.0014896021457388997, -0.02629789337515831, -0.06906037032604218, -0.010503842495381832, -0.007624690420925617, -0.0575084388256073], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003328143386170268, -0.03679503872990608, -0.0002775999018922448, -1.7881377516459906e-06, -2.3841830625315197e-06, -0.0001113352773245424, -0.01930963806807995], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.010283107869327068, -2.90866428258596e-05, -0.0019624039996415377, -0.0009984752396121621, -0.0021015957463532686, -9.810443589231e-05, -9.65590606938349e-06, -0.0004435985756572336, -0.0015688742278143764, -3.40932747349143e-05, -0.000742398202419281, -0.0053695267997682095, -0.02224656566977501, -1.8715683836489916e-05, -2.50339189733495e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0006493605324067175, -0.1181425079703331, -0.01111730094999075, -0.043043989688158035, -0.004229529295116663, -0.056197866797447205, -8.106198947643861e-06, -1.6689286894688848e-06, -0.049807533621788025, -0.024130461737513542, -3.2186455882765586e-06, -5.602820692729438e-06, -0.002559007378295064, -0.021828748285770416, -3.099436753473128e-06, -7.986990567587782e-06, -0.03330591320991516, -0.0036653971765190363, -2.9802276912960224e-06, -2.50339189733495e-06, -0.009644225239753723, -0.02276092953979969], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0015370947076007724, -1.311301275563892e-06, -1.1920928244535389e-07, -0.019801439717411995, -0.557972252368927], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.025389110669493675, -6.544376083184034e-05, -8.821448318485636e-06, -0.00011991735664196312, -0.00020680672605521977, -0.0024518687278032303, -0.001726447488181293, -0.0004943578969687223, -0.016506537795066833, -4.589452510117553e-05, -1.6689286894688848e-06, -0.2996523082256317, -0.2247793823480606], "finish_reason": "stop"}], "metrics": {"energy": 1252.1687884607313, "energy_per_token": 4.5368434364519254, "time": 32.748978, "time_per_token": 0.11865571739130436}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not a DataFrame')", "tokens": [" Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -0.11166571825742722, -0.2369120866060257, -0.01571250520646572, -0.11262649297714233, -0.0029496517963707447], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -0.1541835516691208, -0.0043168929405510426, -0.01982247643172741, -0.21202333271503448, -0.002015227684751153, -0.0005194983095861971, -0.0019489595433697104], "finish_reason": "stop"}, {"text": " not (data[data.columns].apply(pd.to_numeric, errors='coerce')).dtypes.all() == 'float64':", "tokens": [" not", " (", "data", "[", "data", ".", "columns", "]", ".", "apply", "(", "pd", ".", "to", "_", "numeric", ",", " errors", "='", "co", "er", "ce", "'))", ".", "d", "types", ".", "all", "()", " ==", " '", "float", "6", "4", "':", "\n"], "logprobs": [-1.2464027404785156, -2.836766481399536, -0.6549580097198486, -1.4278918504714966, -1.5861963033676147, -0.0016004146309569478, -0.021266058087348938, -0.40728363394737244, -0.0068888068199157715, -0.03442823141813278, -1.3647340536117554, -0.0016018429305404425, -5.006777428206988e-06, -0.0006033745594322681, 0.0, -1.1920922133867862e-06, -0.07811442762613297, -0.006156290881335735, -0.16888253390789032, -0.06847188621759415, -6.05564855504781e-05, -1.1920928244535389e-07, -2.503204584121704, -0.01683785393834114, -0.21777428686618805, -0.004680748097598553, -0.0021949741058051586, -0.08584880828857422, -0.4788571894168854, -0.10773118585348129, -2.6769063472747803, -0.06723602861166, -0.000743708573281765, -1.6689286894688848e-06, -0.015154816210269928, -0.007921233773231506], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain column \" + str(target_column) + \" as target.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " column", " \"", " +", " str", "(", "target", "_", "column", ")", " +", " \"", " as", " target", ".", "\"", ")", "\n"], "logprobs": [-0.0023492376785725355, -4.529942543740617e-06, -0.006649272982031107, -0.2087177187204361, -3.1008119583129883, -0.2725585997104645, -0.14275559782981873, -2.7320609092712402, -1.950807809829712, -0.17853081226348877, -1.0076866149902344, -0.00046659549116156995, -0.001423299196176231, -2.5987286790041253e-05, -3.635817120084539e-05, -1.0703740119934082, -0.02866673842072487, -0.10553553700447083, -2.8692386150360107, -0.3620952069759369, -0.8766828775405884, -0.005413396749645472, -0.004524114541709423, -0.0024412849452346563], "finish_reason": "stop"}, {"text": " not data.drop(target_column,axis=1).applymap(np.isreal).all().all():", "tokens": [" not", " data", ".", "drop", "(", "target", "_", "column", ",", "axis", "=", "1", ")", ".", "apply", "map", "(", "np", ".", "is", "real", ")", ".", "all", "()", ".", "all", "():", "\n"], "logprobs": [-1.1586143970489502, -0.33331629633903503, -0.5595679879188538, -2.9756553173065186, -0.02288712002336979, -0.42175859212875366, -5.006777428206988e-06, -1.0132738680113107e-05, -0.026428397744894028, -2.9648115634918213, -0.06341398507356644, -0.005747103597968817, -0.004979114979505539, -0.00029345019720494747, -0.10564086586236954, -0.269415020942688, -0.0004624251159839332, -0.09024367481470108, -1.6331539882230572e-05, -0.003661952679976821, -0.0006137394811958075, -4.207999518257566e-05, -4.470248313737102e-05, -0.008519849739968777, -0.123289093375206, -2.109982233378105e-05, -0.005695543251931667, -0.005192010197788477, -0.010297620669007301], "finish_reason": "stop"}, {"text": " ValueError(\"Only numeric columns are allowed for this task.\")", "tokens": [" Value", "Error", "(", "\"", "Only", " numeric", " columns", " are", " allowed", " for", " this", " task", ".", "\"", ")", "\n"], "logprobs": [-0.0012291265884414315, -3.4570634852570947e-06, -0.013423541560769081, -0.024165604263544083, -3.0075085163116455, -0.3945665657520294, -2.0744664669036865, -0.612833559513092, -0.34809258580207825, -3.6936111450195312, -3.1045262813568115, -0.3053151071071625, -0.09026861935853958, -0.012218859978020191, -0.0007600279641337693, -0.0032309493981301785], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09914657473564148, -0.04126623272895813, -0.00016485285595990717, -0.02744480036199093, -3.814689989667386e-06, -5.245195097813848e-06, -0.0011276798322796822, -0.03827090561389923, -0.0467030294239521, -0.001994169782847166], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007103541865944862, -1.1920858014491387e-05, -0.016181563958525658, -0.013668278232216835, -0.027465909719467163, -0.009446565061807632, -0.001053255284205079, -0.07391462475061417, -0.035600483417510986, -0.7186620235443115, -0.029022768139839172, -0.00048303857329301536, -0.008696775883436203, -0.0017984420992434025, -0.0006600823253393173, -0.20466017723083496, -0.005263637285679579, -0.00033396866638213396, -0.0019296851241961122], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08311866968870163, -0.04422364383935928, -0.0003014348621945828, -0.024708755314350128, -1.6689286894688848e-06, -3.2186455882765586e-06, -0.0011830481234937906, -0.044198207557201385, -0.061011627316474915, -0.0016196954529732466], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", "\"", ")", "\n"], "logprobs": [-0.00252714054659009, -8.106198947643861e-06, -0.012092730030417442, -0.011884125880897045, -0.03397410735487938, -0.007053356617689133, -0.0057531483471393585, -0.06364689767360687, -0.00454618688672781, -0.10352327674627304, -0.07288509607315063, -1.981876015663147, -0.0009320206008851528, -0.0021296695340424776], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.02669632062315941, -0.189787358045578, -0.09304754436016083, -0.03479580208659172, -1.2974549531936646, -8.4638240878121e-06, -2.7418097943154862e-06, -0.0018185520311817527, -0.02801445871591568, -0.06789474934339523, -0.008710838854312897, -0.006627602037042379, -0.06575734168291092], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0034435042180120945, -0.04423139989376068, -0.00029690624796785414, -1.4305104514278355e-06, -4.529942543740617e-06, -0.00013553177996072918, -0.018136732280254364], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.010131715796887875, -3.4689302992774174e-05, -0.0022922686766833067, -0.0010094314347952604, -0.0023160558193922043, -8.83301836438477e-05, -1.168244216387393e-05, -0.0004439560289029032, -0.0019519339548423886, -2.8729025871143676e-05, -0.000604565953835845, -0.0064086164347827435, -0.02126372419297695, -1.6093124941107817e-05, -2.3841830625315197e-06, -2.3841830625315197e-06, -3.576278118089249e-07, -0.0006565084331668913, -0.1270217001438141, -0.010525193065404892, -0.03417458385229111, -0.004330661613494158, -0.06850361078977585, -6.198863957251888e-06, -2.0265558760002023e-06, -0.04702221602201462, -0.020009100437164307, -3.933898824470816e-06, -6.9141146923357155e-06, -0.0026915771886706352, -0.023993022739887238, -2.622600959512056e-06, -1.156323378381785e-05, -0.03850723057985306, -0.0033608165103942156, -3.3378546504536644e-06, -4.529942543740617e-06, -0.008016199804842472, -0.02105620875954628], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0017744047800078988, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.019213400781154633, -0.8666533827781677, -0.0001012035645544529, -8.141662692651153e-05, -0.000705470098182559, -0.030513150617480278, -0.0001411338453181088, -0.004859423264861107, -0.012921531684696674, -9.250213042832911e-05, -1.4305104514278355e-06, -0.0009651293512433767, -0.00903281569480896], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.03073871321976185, -6.592056161025539e-05, -6.556489552167477e-06, -0.00013910756388213485, -0.0002127659390680492, -0.002145014703273773, -0.0017839246429502964, -0.0005451146862469614, -0.01734411157667637, -6.067568756407127e-05, -2.50339189733495e-06, -0.3139287233352661], "finish_reason": "stop"}], "metrics": {"energy": 1243.7090506401073, "energy_per_token": 4.379257220563758, "time": 32.164738, "time_per_token": 0.11325611971830986}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not of type DataFrame')", "tokens": [" Value", "Error", "('", "data", " is", " not", " of", " type", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -2.475492477416992, -0.024032127112150192, -0.2781553566455841, -0.024410517886281013, -0.12420981377363205, -0.0025056179147213697], "finish_reason": "stop"}, {"text": " not len(data.index):", "tokens": [" not", " len", "(", "data", ".", "index", "):", "\n"], "logprobs": [-2.6681039333343506, -1.8150568008422852, -0.0002768848498817533, -0.0031853197142481804, -2.061584949493408, -0.24821114540100098, -0.4452848732471466, -0.0070656668394804], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -0.1541835516691208, -0.0043168929405510426, -0.01982247643172741, -1.6900125741958618, -0.0005316513124853373, -0.001644093543291092], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4164772033691406, -0.0001931004080688581, -1.2040065485052764e-05, -0.0100716482847929, -3.969590397900902e-05, -0.1182708814740181, -0.09319384396076202, -0.003328737337142229, -0.03370651602745056, -0.002063765889033675], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of the data DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " the", " data", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.002678618300706148, -5.245195097813848e-06, -0.00614669406786561, -0.2183985561132431, -0.12240201979875565, -0.05120544508099556, -0.005308579187840223, -0.2153836041688919, -0.03264961391687393, -0.32459497451782227, -0.08553171157836914, -0.2901817560195923, -2.7574522495269775, -0.6098573803901672, -1.185009479522705, -0.03288738429546356, -0.18755635619163513, -0.0037493661511689425, -0.000972155889030546, -0.001320443581789732], "finish_reason": "stop"}, {"text": " data.shape[1] < 3:", "tokens": [" data", ".", "shape", "[", "1", "]", " <", " ", "3", ":", "\n"], "logprobs": [-0.5219771265983582, -0.19469484686851501, -2.587090492248535, -0.008331896737217903, -0.7413002848625183, -0.004405554849654436, -0.7492346167564392, -0.005774008575826883, -1.1381943225860596, -0.03667576238512993, -0.010572141036391258], "finish_reason": "stop"}, {"text": " ValueError(\"data should only contain numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " only", " contain", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011016021016985178, -3.576272320060525e-06, -0.01135989185422659, -0.01887316256761551, -0.6631475687026978, -0.15066270530223846, -1.0534913539886475, -0.01971319690346718, -0.31355583667755127, -0.08382917195558548, -0.05404861271381378, -0.001828071428462863, -0.00026055757189169526, -0.0008864049450494349], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.07886749505996704, -0.03251207247376442, -0.00017295771976932883, -0.030451519414782524, -3.4570634852570947e-06, -5.483612312673358e-06, -0.001167092937976122, -0.04049757868051529, -0.03870370239019394, -0.001729303621686995], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006422125734388828, -1.1205610462639015e-05, -0.016354208812117577, -0.013796679675579071, -0.028330976143479347, -0.013503285124897957, -0.0008703258354216814, -0.08787845820188522, -0.02419748716056347, -0.6181550025939941, -0.02851821854710579, -0.0005255748401395977, -0.009756026789546013, -0.0021387101151049137, -0.0005253365379758179, -0.1813441962003708, -0.005140895955264568, -0.00037305548903532326, -0.0018981549656018615], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09487629681825638, -0.04044274240732193, -0.0003413571394048631, -0.02690267004072666, -1.9073468138230965e-06, -2.861018856492592e-06, -0.001117082079872489, -0.04135522246360779, -0.07132517546415329, -0.0017128810286521912], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0029820995405316353, -8.702239938429557e-06, -0.012378061190247536, -0.011228466406464577, -0.03766607865691185, -0.005923929158598185, -0.005418258253484964, -0.07381198555231094, -0.005700996145606041, -0.09384828060865402, -0.07232481241226196, -0.312200665473938, -0.00397095363587141, -0.0003813969960901886, -0.002767544472590089], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.03436165675520897, -0.1400337815284729, -0.09017036855220795, -0.029615368694067, -0.20996862649917603, -0.47320041060447693, -0.004337783437222242, -4.410734163684538e-06, -4.768370445162873e-07, -0.0773242712020874, -0.059663642197847366], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003089419100433588, -0.03803303837776184, -0.0003014348621945828, -1.9073468138230965e-06, -5.483612312673358e-06, -0.000125281119835563, -0.0236186645925045], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.010718277655541897, -3.182837463100441e-05, -0.0019317077239975333, -0.0009640575153753161, -0.0025420039892196655, -8.201262971851975e-05, -8.940656698541716e-06, -0.0004848258395213634, -0.0025069257244467735, -3.40932747349143e-05, -0.0006962973857298493, -0.005834216717630625, -0.024003496393561363, -2.038458114839159e-05, -2.9802276912960224e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0006680640508420765, -0.10971107333898544, -0.010344342328608036, -0.03695818409323692, -0.00396762927994132, -0.05773283168673515, -6.079655122448457e-06, -4.291525328881107e-06, -0.053203485906124115, -0.01850554160773754, -3.576272320060525e-06, -8.22540732769994e-06, -0.0028901018667966127, -0.020833471789956093, -2.861018856492592e-06, -8.22540732769994e-06, -0.03701918572187424, -0.003399191191419959, -2.9802276912960224e-06, -2.50339189733495e-06, -0.009207288734614849, -0.02130596898496151], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0014055621577426791, -1.1920922133867862e-06, -1.1920928244535389e-07, -0.016403932124376297, -0.5733919143676758], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>import pytest", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|>", "import", " py", "test", "\n"], "logprobs": [-0.03027261793613434, -6.19869097135961e-05, -8.22540732769994e-06, -0.00011622230522334576, -0.00024685196694917977, -0.0024764842819422483, -0.0020744726061820984, -0.0004968600696884096, -0.01856241375207901, -5.07818695041351e-05, -3.3378546504536644e-06, -1.3807008266448975, -6.318072337307967e-06, -9.536738616588991e-07, -3.933898824470816e-06, -0.0001760566228767857, -0.28747081756591797, -0.8052735924720764, -1.9918360710144043, -0.029332250356674194, -0.012526758946478367], "finish_reason": "stop"}], "metrics": {"energy": 1060.5665281391143, "energy_per_token": 4.5323355903380955, "time": 27.961906, "time_per_token": 0.11949532478632478}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(f'data is not a DataFrame')", "tokens": [" Value", "Error", "(", "f", "'", "data", " is", " not", " a", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -1.427030086517334, -1.2279248237609863, -0.5159211754798889, -0.9895172715187073, -0.13407306373119354, -0.2864256799221039, -0.30941885709762573, -0.02025001123547554, -1.412835717201233, -0.003962167073041201], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.13992424309253693, -0.0036601710598915815, -0.0754266306757927, -0.016204437240958214, -0.0008856903295964003], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.00044919890933670104, -1.9073468138230965e-06, -0.026378009468317032, -0.0032191856298595667, -0.0865086168050766, -0.37127694487571716, -0.18093740940093994, -0.0038843909278512, -0.01883736625313759, -1.775485634803772, -0.000542493537068367, -0.0017611959483474493], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.3402271568775177, -0.00022063204960431904, -1.1205610462639015e-05, -0.010047100484371185, -3.2782016205601394e-05, -0.1095217615365982, -0.10105645656585693, -0.0035560012329369783, -0.034130457788705826, -0.0022683623246848583], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002768138889223337, -4.6491513785440475e-06, -0.0055913482792675495, -0.24463945627212524, -0.11519502103328705, -0.04822592809796333, -0.005667687859386206, -0.22889992594718933, -0.03427768498659134, -0.3017006516456604, -0.09964801371097565, -0.26460596919059753, -0.10018458217382431, -0.13085956871509552, -0.0022600365336984396, -0.00047469791024923325, -0.00216821045614779], "finish_reason": "stop"}, {"text": " data.columns.isin([target_column]).all(axis=None):", "tokens": [" data", ".", "columns", ".", "isin", "([", "target", "_", "column", "])", ".", "all", "(", "axis", "=", "None", "):", "\n"], "logprobs": [-0.5825144648551941, -0.18832480907440186, -2.691403865814209, -0.19779072701931, -1.495040774345398, -0.9034534096717834, -0.15742717683315277, -0.00010585224663373083, -9.536288416711614e-05, -0.006986001040786505, -0.007347229402512312, -0.16657650470733643, -0.40406063199043274, -0.04602381959557533, -0.04425683245062828, -0.10780835151672363, -0.5571063160896301, -0.01276665460318327], "finish_reason": "stop"}, {"text": " ValueError(\"data should only contain numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " only", " contain", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012650828575715423, -3.576272320060525e-06, -0.011813914403319359, -0.02278120629489422, -0.7207217812538147, -0.15312893688678741, -1.0717370510101318, -0.01840442791581154, -0.37570661306381226, -0.07173357903957367, -0.05468210205435753, -0.002362676663324237, -0.00025078488397412, -0.0008336406317539513], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08383958786725998, -0.03812805563211441, -0.00019131260341964662, -0.028293082490563393, -3.814689989667386e-06, -4.529942543740617e-06, -0.0009243983076885343, -0.04314115643501282, -0.05294562503695488, -0.0014453213661909103], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0008120815036818385, -1.1920858014491387e-05, -0.014663191512227058, -0.012235935777425766, -0.027742598205804825, -0.01030163187533617, -0.0011697123991325498, -0.07210011780261993, -0.03212530538439751, -1.586534023284912, -0.6507275104522705, -0.34164443612098694, -0.031589288264513016, -0.0002874914789572358, -0.01536872610449791, -0.00187923654448241, -0.00046266341814771295, -0.13267093896865845, -0.003944831434637308, -0.000321336614433676, -0.001128513365983963], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08033298701047897, -0.038414426147937775, -0.000399033073335886, -0.026168648153543472, -1.6689286894688848e-06, -2.861018856492592e-06, -0.0012176964664831758, -0.04212973266839981, -0.08450137823820114, -0.0017362057697027922], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002558531705290079, -8.4638240878121e-06, -0.013746708631515503, -0.011741929687559605, -0.03407757729291916, -0.006531912833452225, -0.004932853393256664, -0.07014451920986176, -0.005550093948841095, -0.1027378961443901, -0.06215561181306839, -0.27020570635795593, -0.004123281687498093, -0.0004119024670217186, -0.002718208124861121], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.028456348925828934, -0.14412684738636017, -0.0958557054400444, -0.03452980890870094, -1.3235573768615723, -1.2874520507466514e-05, -2.622600959512056e-06, -0.0014399646315723658, -0.025514503940939903, -0.07235109061002731, -0.009404760785400867, -0.007248058449476957, -0.06418199837207794], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003041643649339676, -0.040973465889692307, -0.00025054652360267937, -1.7881377516459906e-06, -5.245195097813848e-06, -0.00010227633902104571, -0.016642430797219276], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.007718028035014868, -3.635817120084539e-05, -0.0018582948250696063, -0.0009601273923180997, -0.002334371441975236, -7.688703772146255e-05, -1.0609570381348021e-05, -0.0004430027911439538, -0.0017999890260398388, -3.2066785934148356e-05, -0.0006330393371172249, -0.005572262220084667, -0.019260995090007782, -1.5616295058862306e-05, -2.50339189733495e-06, -1.9073468138230965e-06, -3.576278118089249e-07, -0.000501983508002013, -0.12243270874023438, -0.00982366781681776, -0.03655152767896652, -0.0040399376302957535, -0.07700268924236298, -6.794906312279636e-06, -3.6954811548639555e-06, -0.050112467259168625, -0.02303391508758068, -3.3378546504536644e-06, -6.198863957251888e-06, -0.0025535377208143473, -0.019970187917351723, -2.9802276912960224e-06, -9.298280929215252e-06, -0.03895551711320877, -0.0036106412298977375, -3.814689989667386e-06, -2.0265558760002023e-06, -0.012782425619661808, -0.02244054712355137], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0017591729993000627, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.01852695643901825, -0.6543409824371338], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.026753772050142288, -6.603976362384856e-05, -7.390948667307384e-06, -0.0001137191939051263, -0.00021407696476671845, -0.0026213114615529776, -0.0015182883944362402, -0.0004829194222111255, -0.016397014260292053, -5.9602869441732764e-05, -3.099436753473128e-06, -0.26779118180274963, -0.23990361392498016], "finish_reason": "stop"}], "metrics": {"energy": 1064.773855535507, "energy_per_token": 4.589542480756496, "time": 28.003101, "time_per_token": 0.12070302155172415}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(f'data is not of type DataFrame ({type(data)}')", "tokens": [" Value", "Error", "(", "f", "'", "data", " is", " not", " of", " type", " Data", "Frame", " ({", "type", "(", "data", ")}", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -1.427030086517334, -1.2279248237609863, -0.5159211754798889, -0.9895172715187073, -0.13407306373119354, -1.5957061052322388, -0.016089249402284622, -0.3482484221458435, -0.02199062518775463, -3.5543904304504395, -0.04023630544543266, -0.002463879296556115, -0.001095529063604772, -1.1600303649902344, -0.773001492023468, -0.0059081679210066795], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.13992424309253693, -0.0036601710598915815, -0.0754266306757927, -0.016204437240958214, -0.0008856903295964003], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.00044919890933670104, -1.9073468138230965e-06, -0.026378009468317032, -0.0032191856298595667, -0.0865086168050766, -0.37127694487571716, -0.18093740940093994, -0.0038843909278512, -0.01883736625313759, -1.775485634803772, -0.000542493537068367, -0.0017611959483474493], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.3402271568775177, -0.00022063204960431904, -1.1205610462639015e-05, -0.010047100484371185, -3.2782016205601394e-05, -0.1095217615365982, -0.10105645656585693, -0.0035560012329369783, -0.034130457788705826, -0.0022683623246848583], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be one of the DataFrame columns.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " one", " of", " the", " Data", "Frame", " columns", ".", "\"", ")", "\n"], "logprobs": [-0.002768138889223337, -4.6491513785440475e-06, -0.0055913482792675495, -0.24463945627212524, -0.11519502103328705, -0.04822592809796333, -0.005667687859386206, -0.22889992594718933, -0.03427768498659134, -2.1189041137695312, -0.04868634417653084, -0.2937590181827545, -2.3322901725769043, -0.08556782454252243, -0.6865260004997253, -0.1021886020898819, -0.006151788402348757, -0.0006805725861340761, -0.003344183089211583], "finish_reason": "stop"}, {"text": " np.any(np.isnan(data)):", "tokens": [" np", ".", "any", "(", "np", ".", "is", "nan", "(", "data", "))", ":", "\n"], "logprobs": [-3.2878482341766357, -3.2305197237292305e-05, -0.45617595314979553, -0.023919232189655304, -2.024872064590454, -5.722029527532868e-06, -0.5301288366317749, -0.012235700152814388, -0.0005569098866544664, -0.021422892808914185, -0.977595865726471, -0.1492197960615158, -0.010577802546322346], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012650828575715423, -3.576272320060525e-06, -0.011813914403319359, -0.02278120629489422, -0.7207217812538147, -0.15312893688678741, -0.5551965832710266, -0.09369664639234543, -0.23644569516181946, -0.10592131316661835, -0.0475444570183754, -0.0019584777764976025, -0.00023195437097456306, -0.0007616956136189401], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08383958786725998, -0.03812805563211441, -0.00019131260341964662, -0.028293082490563393, -3.814689989667386e-06, -4.529942543740617e-06, -0.0009243983076885343, -0.04314115643501282, -0.05294562503695488, -0.0014453213661909103], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0008120815036818385, -1.1920858014491387e-05, -0.014663191512227058, -0.012235935777425766, -0.027742598205804825, -0.01030163187533617, -0.0011697123991325498, -0.07210011780261993, -0.03212530538439751, -1.586534023284912, -0.6507275104522705, -0.34164443612098694, -0.031589288264513016, -0.0002874914789572358, -0.01536872610449791, -0.00187923654448241, -0.00046266341814771295, -0.13267093896865845, -0.003944831434637308, -0.000321336614433676, -0.001128513365983963], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08033298701047897, -0.038414426147937775, -0.000399033073335886, -0.026168648153543472, -1.6689286894688848e-06, -2.861018856492592e-06, -0.0012176964664831758, -0.04212973266839981, -0.08450137823820114, -0.0017362057697027922], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002558531705290079, -8.4638240878121e-06, -0.013746708631515503, -0.011741929687559605, -0.03407757729291916, -0.006531912833452225, -0.004932853393256664, -0.07014451920986176, -0.005550093948841095, -0.1027378961443901, -0.06215561181306839, -0.27020570635795593, -0.004123281687498093, -0.0004119024670217186, -0.002718208124861121], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.028456348925828934, -0.14412684738636017, -0.0958557054400444, -0.03452980890870094, -0.31580594182014465, -0.415265291929245, -0.004503584001213312, -5.364403477869928e-06, -3.576278118089249e-07, -0.06539059430360794, -0.054328545928001404], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0034459992311894894, -0.04405950754880905, -0.0003334919747430831, -2.0265558760002023e-06, -2.9802276912960224e-06, -0.00011550712952157483, -0.016160450875759125], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.010733727365732193, -3.099393507000059e-05, -0.002292387653142214, -0.00110600795596838, -0.0020484195556491613, -6.937739817658439e-05, -1.0013530300057027e-05, -0.0004786299541592598, -0.0016936019528657198, -3.2543604902457446e-05, -0.000734178873244673, -0.006628312636166811, -0.029495231807231903, -1.7762025890988298e-05, -2.861018856492592e-06, -1.5497195136049413e-06, -3.576278118089249e-07, -0.0006291079334914684, -2.0624749660491943], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0017860665684565902, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.015618385747075081, -0.7858949303627014, -8.5588610090781e-05, -7.4741430580616e-05, -0.0007445423980243504, -0.027545353397727013, -0.00011789103882620111, -0.004365557339042425, -0.013698145747184753, -9.119095193454996e-05, -1.1920922133867862e-06, -0.0008660380262881517, -0.010284051299095154], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>import unittest", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|>", "import", " un", "ittest", "\n"], "logprobs": [-0.03478359803557396, -6.067568756407127e-05, -7.152531907195225e-06, -0.00010632903286023065, -0.00017677174764685333, -0.0026523431297391653, -0.0016335012624040246, -0.0005025792634114623, -0.015911279246211052, -6.389413465512916e-05, -2.7418097943154862e-06, -1.3550834655761719, -7.629365427419543e-06, -9.536738616588991e-07, -2.622600959512056e-06, -0.0001358893496217206, -0.2435055822134018, -0.8794245719909668, -2.0320751667022705, -0.0016531385481357574, -0.0163038969039917], "finish_reason": "stop"}], "metrics": {"energy": 1077.5746497640619, "energy_per_token": 4.644718317948542, "time": 28.150589, "time_per_token": 0.12133874568965518}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data must be a DataFrame')", "tokens": [" Value", "Error", "('", "data", " must", " be", " a", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9054898619651794, -0.007479876279830933, -0.5025264024734497, -0.5330550074577332, -0.023146208375692368, -0.1541888564825058, -0.002656979952007532], "finish_reason": "stop"}, {"text": " not data.index.is_unique:", "tokens": [" not", " data", ".", "index", ".", "is", "_", "unique", ":", "\n"], "logprobs": [-2.6681039333343506, -1.134415626525879, -0.007376695051789284, -1.405977725982666, -0.00366337806917727, -0.038119908422231674, -8.67805938469246e-05, -0.11613892763853073, -0.03166436031460762, -0.016144851222634315], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -1.5783469676971436, -0.05181844159960747, -0.2234431505203247, -0.013084975071251392, -0.0004297763225622475, -0.000979539705440402], "finish_reason": "stop"}, {"text": " target_column not in list(data.columns):", "tokens": [" target", "_", "column", " not", " in", " list", "(", "data", ".", "columns", "):", "\n"], "logprobs": [-0.46760323643684387, -0.00022230061586014926, -1.2755313036905136e-05, -0.009073572233319283, -3.361645576660521e-05, -2.486520290374756, -0.00018070495571009815, -0.002204251941293478, -0.2625417411327362, -0.06839006394147873, -0.5480369329452515, -0.0029893494211137295], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.002273952355608344, -4.887569048150908e-06, -0.007405094336718321, -0.1954435110092163, -0.12541376054286957, -0.050225164741277695, -0.005381502211093903, -0.2190772145986557, -0.03376990556716919, -0.3470337986946106, -0.07788959890604019, -1.6488921642303467, -2.166450262069702, -1.4134095907211304, -0.011256049387156963, -0.3513723313808441, -0.002799284877255559, -0.0006424508756026626, -0.0022815645206719637], "finish_reason": "stop"}, {"text": " not data[target_column].apply(lambda x: isinstance(x, (int, float))):", "tokens": [" not", " data", "[", "target", "_", "column", "]", ".", "apply", "(", "lambda", " x", ":", " isinstance", "(", "x", ",", " (", "int", ",", " float", "))", "):", "\n"], "logprobs": [-0.9268974661827087, -0.3408203721046448, -0.9759609699249268, -0.37014085054397583, -9.536738616588991e-07, -1.0609570381348021e-05, -0.00047505536349490285, -2.1576648578047752e-05, -0.6448832750320435, -0.0009833505610004067, -0.7845200300216675, -0.122490294277668, -0.015624371357262135, -0.2705117166042328, -0.00014900050882715732, -0.0012232924345880747, -0.0021013577934354544, -0.09724698960781097, -0.22591280937194824, -0.0007666985620744526, -0.027867699041962624, -1.5857971906661987, -0.28491345047950745, -0.005840616300702095], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numerical values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numerical", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011617346899583936, -2.9802276912960224e-06, -0.013184274546802044, -0.023720765486359596, -0.5937603116035461, -0.17389245331287384, -0.5155121088027954, -0.10144633054733276, -2.0297374725341797, -0.11788581311702728, -0.048256825655698776, -0.002024388173595071, -0.00020037073409184813, -0.0008322112844325602], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09550687670707703, -0.04038137570023537, -0.00020382710499688983, -0.028973320499062538, -4.172316494077677e-06, -4.172316494077677e-06, -0.0010642108973115683, -0.03692946583032608, -0.035218823701143265, -0.001671347301453352], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007161913090385497, -1.1801649634435307e-05, -0.0147916991263628, -0.01125711016356945, -0.02711442857980728, -0.011710825376212597, -0.0010702840518206358, -0.07865595072507858, -0.02379480190575123, -1.4646450281143188, -0.7368457913398743, -0.30724266171455383, -0.033796872943639755, -0.00030179237364791334, -0.016539840027689934, -0.0016235039802268147, -0.0004866131057497114, -0.1281062811613083, -0.003450988559052348, -0.0003054867556784302, -0.0009926398051902652], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int) or isinstance(random_state, bool):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", ")", " or", " isinstance", "(", "random", "_", "state", ",", " bool", "):", "\n"], "logprobs": [-0.08908013999462128, -0.04832543432712555, -0.00032431588624604046, -0.02457127906382084, -1.6689286894688848e-06, -3.2186455882765586e-06, -0.0013802058529108763, -0.039996497333049774, -2.993340253829956, -0.05223715305328369, -0.9189784526824951, -6.305972783593461e-05, -0.005477538798004389, -4.6491513785440475e-06, -2.3841830625315197e-06, -0.000581572181545198, -0.05143250152468681, -0.011659336276352406, -0.01208472065627575], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0031735554803162813, -8.583032467868179e-06, -0.013965621590614319, -0.011602306738495827, -0.03286927565932274, -0.005282728932797909, -0.00481671467423439, -0.07696428149938583, -0.006340151187032461, -0.11272905766963959, -0.09166170656681061, -0.2941311001777649, -0.003997669089585543, -0.00037674958002753556, -0.0024606685619801283], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.03177280351519585, -0.12680844962596893, -0.10332021862268448, -0.03484749421477318, -1.2128009796142578, -1.1444026313256472e-05, -1.9073468138230965e-06, -0.0016424274072051048, -0.023184996098279953, -0.08458375185728073, -0.011613971553742886, -0.007791011594235897, -0.06586214900016785], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003189241047948599, -0.05211993306875229, -0.0003618539194576442, -1.6689286894688848e-06, -3.099436753473128e-06, -0.00012694983161054552, -0.023218775168061256], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011356120929121971, -3.6954195820726454e-05, -0.001827000523917377, -0.0008896207436919212, -0.002345907734706998, -9.858122211880982e-05, -1.3708974620385561e-05, -0.0004814896092284471, -0.0019574069883674383, -3.0397906812140718e-05, -0.0006780709372833371, -0.00529079232364893, -0.022426210343837738, -1.9192511899746023e-05, -2.861018856492592e-06, -2.0265558760002023e-06, -3.576278118089249e-07, -0.0005298641044646502, -0.1258695125579834, -0.010125933215022087, -0.03487662225961685, -0.0038349907845258713, -0.05473390594124794, -6.318072337307967e-06, -2.861018856492592e-06, -0.0414731428027153, -0.023372741416096687, -3.3378546504536644e-06, -5.722029527532868e-06, -0.002473986940458417, -0.02250337228178978, -2.9802276912960224e-06, -7.510157047363464e-06, -0.03702033683657646, -0.003273844253271818, -2.7418097943154862e-06, -2.622600959512056e-06, -0.01009383425116539, -0.023193616420030594], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0019831054378300905, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.01947426237165928, -0.5720760226249695], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.02853374369442463, -7.73638384998776e-05, -7.152531907195225e-06, -0.0001062098381225951, -0.00021765247220173478, -0.002962607191875577, -0.0017315646400675178, -0.00046754872892051935, -0.014980086125433445, -4.6967357775429264e-05, -2.622600959512056e-06, -0.2918449640274048, -0.20753857493400574], "finish_reason": "stop"}], "metrics": {"energy": 1156.2703880176553, "energy_per_token": 4.570238687816819, "time": 30.06234, "time_per_token": 0.11882347826086956}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data must be a pandas DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -0.5457839965820312, -0.006200363393872976, -0.36275845766067505, -1.2817659378051758, -0.15928757190704346, -0.017929738387465477, -0.21495351195335388, -0.0009266611887142062, -0.006114467047154903], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-2.550344705581665, -0.000331704446580261, -0.002061981474980712, -0.10716716945171356, -0.17696981132030487, -0.001347110839560628, -2.7179348762729205e-05, -0.00919630378484726, -0.0028721531853079796], "finish_reason": "stop"}, {"text": " ValueError(\"data should be non-empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " be", " non", "-", "empty", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -2.4977970123291016, -0.4226171374320984, -0.09968297928571701, -0.0018892312655225396, -2.5342135429382324, -0.0005747812101617455, -0.001712523982860148], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4307592213153839, -0.0002422039397060871, -1.3112935448589269e-05, -0.008413583971560001, -2.658331868587993e-05, -0.09014095366001129, -0.1000177338719368, -0.0049308366142213345, -0.029317548498511314, -0.0021713031455874443], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002709529362618923, -5.602820692729438e-06, -0.006777394562959671, -0.24273090064525604, -0.1346130520105362, -0.04276350513100624, -0.004433089401572943, -0.1999247521162033, -0.031615275889635086, -0.31777074933052063, -0.06820780038833618, -0.31785160303115845, -0.10214048624038696, -0.12740810215473175, -0.002318910090252757, -0.0005988473421894014, -0.0018563910853117704], "finish_reason": "stop"}, {"text": " data.isna().values.any():", "tokens": [" data", ".", "is", "na", "()", ".", "values", ".", "any", "():", "\n"], "logprobs": [-0.631386935710907, -0.18057683110237122, -1.8194719552993774, -0.3185839354991913, -0.0013186577707529068, -8.880697714630514e-05, -0.5771262049674988, -0.0001161031104857102, -0.01632559299468994, -0.0273196492344141, -0.011893314309418201], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011767374817281961, -3.2186455882765586e-06, -0.010877835564315319, -0.02181381918489933, -0.5948473215103149, -0.1717948466539383, -0.5555456280708313, -0.10439589619636536, -0.21227847039699554, -0.12589411437511444, -0.0509333610534668, -0.0018136734142899513, -0.00022933237778488547, -0.0008833082392811775], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08857020735740662, -0.036796532571315765, -0.0001662831346038729, -0.02855633571743965, -4.291525328881107e-06, -4.768360213347478e-06, -0.0010689741466194391, -0.04520275816321373, -0.03732551634311676, -0.001583870965987444], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.000705470098182559, -1.1205610462639015e-05, -0.015935799106955528, -0.012585384771227837, -0.029985638335347176, -0.01192217506468296, -0.0010719512356445193, -0.08321761339902878, -0.02416827902197838, -0.6678392887115479, -0.023254064843058586, -0.0005016260547563434, -0.009725214913487434, -0.0018999397289007902, -0.0005802616360597312, -0.1757134050130844, -0.005522352643311024, -0.0003687655262183398, -0.0016994333127513528], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.0978812724351883, -0.0376836434006691, -0.0003844952443614602, -0.020682966336607933, -1.6689286894688848e-06, -3.2186455882765586e-06, -0.0012237686896696687, -0.03500911965966225, -0.0714370608329773, -0.0017074067145586014], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0031266158912330866, -9.298280929215252e-06, -0.012066347524523735, -0.012883874587714672, -0.03897729888558388, -0.0057542151771485806, -0.00514943478628993, -0.06936894357204437, -0.00446453969925642, -0.10315227508544922, -0.08559747785329819, -0.25732430815696716, -0.0037722873967140913, -0.00038890427094884217, -0.0031983908265829086], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.03251472860574722, -0.13612857460975647, -0.1023598238825798, -0.038318291306495667, -0.34210336208343506, -1.131736159324646, -0.0011600677389651537, -2.5152843591058627e-05, -5.125986263010418e-06, -0.11371072381734848, -0.04950636625289917], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003312222193926573, -0.03657187148928642, -0.0003407612966839224, -1.7881377516459906e-06, -4.0531076592742465e-06, -0.0001209901092806831, -0.01650853268802166], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.012572906911373138, -3.6238969187252223e-05, -0.002226970624178648, -0.0008285188814625144, -0.0022239969111979008, -9.214453893946484e-05, -9.417489309271332e-06, -0.000380324519937858, -0.002365055261179805, -2.5987286790041253e-05, -0.0006839081761427224, -0.005147062707692385, -0.02138672024011612, -1.4424220353248529e-05, -2.264974000354414e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0005872909096069634, -0.12909655272960663, -0.011123549193143845, -0.042711421847343445, -0.004451841115951538, -0.0677158460021019, -7.033323527139146e-06, -1.7881377516459906e-06, -0.04724476858973503, -0.023197926580905914, -3.2186455882765586e-06, -6.198863957251888e-06, -0.002627375302836299, -0.022529831156134605, -2.861018856492592e-06, -9.059865078597795e-06, -0.04128933697938919, -0.0036562515888363123, -2.861018856492592e-06, -4.0531076592742465e-06, -0.010176439769566059, -0.019256900995969772], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0016419512685388327, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.01685836724936962, -0.8294603824615479, -8.451581379631534e-05, -9.42901024245657e-05, -0.0007726544863544405, -0.028811991214752197, -0.00011526874004630372, -0.003731789067387581, -0.012650245800614357, -9.452849917579442e-05, -8.344646857949556e-07, -0.0010095505276694894, -0.010834322310984135], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>\"\"\"", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|", ">\"", "\"", "\"", "\n"], "logprobs": [-0.024970628321170807, -7.486063259420916e-05, -7.748573807475623e-06, -0.00010644822759786621, -0.00022146634000819176, -0.002561147790402174, -0.0017729768296703696, -0.0006033745594322681, -0.015973342582583427, -5.8053239627042785e-05, -2.145764938177308e-06, -1.2811622619628906, -3.933898824470816e-06, -9.536738616588991e-07, -3.6954811548639555e-06, -0.0001776060671545565, -1.549864649772644, -0.005133068189024925, -0.004656542558223009, -0.0005727558163926005, -0.5382809042930603], "finish_reason": "stop"}], "metrics": {"energy": 1106.601549261093, "energy_per_token": 4.498380281549158, "time": 28.386677, "time_per_token": 0.11539299593495934}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"Data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "Data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -2.625584840774536, -0.9202460646629333, -0.0455147922039032, -0.14131799340248108, -0.3421621322631836, -0.05777345225214958, -0.36725226044654846, -0.00205781776458025, -0.00778474286198616], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.1595228761434555, -0.004364132881164551, -0.08302728831768036, -0.014441375620663166, -0.0007659838884137571], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.00037150635034777224, -2.3841830625315197e-06, -0.025204535573720932, -0.003570492845028639, -0.073797807097435, -0.3551676273345947, -0.20366257429122925, -0.004895011894404888, -0.020135637372732162, -1.7525317668914795, -0.0005872909096069634, -0.0018681708024814725], "finish_reason": "stop"}, {"text": " target_column not in list(data.columns):", "tokens": [" target", "_", "column", " not", " in", " list", "(", "data", ".", "columns", "):", "\n"], "logprobs": [-0.4316777288913727, -0.000196556793525815, -1.6093124941107817e-05, -0.009665949270129204, -3.2782016205601394e-05, -2.550136089324951, -0.00017820201173890382, -0.0024717275518924, -0.22759729623794556, -0.06305376440286636, -0.36371472477912903, -0.001984414178878069], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", "\"", ")", "\n"], "logprobs": [-0.0025673306081444025, -3.933898824470816e-06, -0.007621969562023878, -0.21559089422225952, -0.1371133178472519, -0.0405566468834877, -0.0056793042458593845, -0.2082137018442154, -0.03444585204124451, -0.355741947889328, -0.09602834284305573, -0.3357962369918823, -0.10020215809345245, -2.1370537281036377, -0.0026559100951999426, -0.001379372552037239], "finish_reason": "stop"}, {"text": " not (data[data.columns].apply(pd.to_numeric, errors='coerce').notnull().all()) :", "tokens": [" not", " (", "data", "[", "data", ".", "columns", "]", ".", "apply", "(", "pd", ".", "to", "_", "numeric", ",", " errors", "='", "co", "er", "ce", "')", ".", "not", "null", "()", ".", "all", "())", " :", "\n"], "logprobs": [-1.112891435623169, -3.2807118892669678, -0.1165749579668045, -1.016998529434204, -0.47106456756591797, -0.0026090650353580713, -0.03641544282436371, -0.6157484650611877, -0.0010528980055823922, -0.08065228909254074, -1.0766397714614868, -0.001444130903109908, -9.65590606938349e-06, -0.0011031500762328506, -4.768370445162873e-07, -3.576272320060525e-06, -0.3249227702617645, -0.006631865166127682, -0.16903254389762878, -0.13847488164901733, -6.09140915912576e-05, -3.576278118089249e-07, -0.03182223066687584, -0.06201713904738426, -0.5206032991409302, -0.04375101253390312, -0.3505164682865143, -0.014371695928275585, -0.03176287189126015, -1.2379209995269775, -2.339387893676758, -0.008131612092256546], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012492479290813208, -3.4570634852570947e-06, -0.014459940604865551, -0.02153431810438633, -0.6343499422073364, -0.15184445679187775, -0.5405958294868469, -0.08801721781492233, -0.2400735318660736, -0.09677129238843918, -0.053031206130981445, -0.0022708598989993334, -0.00024732868769206107, -0.0008945039589889348], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09033255279064178, -0.03704250603914261, -0.00017593742813915014, -0.039263658225536346, -3.2186455882765586e-06, -6.437280717364047e-06, -0.001128394273109734, -0.03945780545473099, -0.04239016771316528, -0.0015975582646206021], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be greater than 0 and less than 1\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " greater", " than", " ", "0", " and", " less", " than", " ", "1", "\"", ")", "\n"], "logprobs": [-0.0007987407734617591, -1.4662635294371285e-05, -0.014992299489676952, -0.01169150322675705, -0.028718285262584686, -0.011054462753236294, -0.0008197046699933708, -0.07447955757379532, -0.025856906548142433, -3.145826816558838, -0.059166792780160904, -0.06619737297296524, -0.00034278715611435473, -0.05812815576791763, -0.35226789116859436, -0.02159171737730503, -0.015089531429111958, -0.0012380562257021666, -2.0872130393981934, -0.001749057904817164, -0.001280679483897984], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08933920413255692, -0.045333441346883774, -0.00035124807618558407, -0.022442879155278206, -1.5497195136049413e-06, -3.4570634852570947e-06, -0.0010543270036578178, -0.03826620429754257, -0.06727147102355957, -0.0017641709418967366], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0025981261860579252, -8.940656698541716e-06, -0.01351210568100214, -0.01278595719486475, -0.03308669477701187, -0.0057917870581150055, -0.0044149309396743774, -0.06080939248204231, -0.004690952133387327, -0.10097887367010117, -0.06987753510475159, -0.3075583279132843, -0.004561258014291525, -0.00038509105797857046, -0.0026761216577142477], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.028958264738321304, -0.14438101649284363, -0.07815510779619217, -0.03735135495662689, -0.2945331633090973, -1.135477066040039, -0.0009708458674140275, -3.421248038648628e-05, -5.8412379075889476e-06, -0.10561995208263397, -0.05445137619972229], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0024801704566925764, -0.035265203565359116, -0.0003762729174923152, -2.145764938177308e-06, -3.6954811548639555e-06, -0.00011920218821614981, -0.014581895433366299], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011492007412016392, -3.290122185717337e-05, -0.002042233245447278, -0.001165783149190247, -0.002663519000634551, -9.190614218823612e-05, -9.65590606938349e-06, -0.0004462200158741325, -0.0023738557938486338, -3.218599158572033e-05, -0.0005555993411689997, -0.006004509516060352, -0.02375405840575695, -2.062299427052494e-05, -2.3841830625315197e-06, -2.145764938177308e-06, -2.3841855067985307e-07, -0.0006840273272246122, -0.13646726310253143, -0.011335493996739388, -0.04086315259337425, -0.0040553719736635685, -0.0768975019454956, -6.556489552167477e-06, -2.0265558760002023e-06, -0.04654476046562195, -0.021574217826128006, -3.6954811548639555e-06, -5.722029527532868e-06, -0.0022656265646219254, -0.020635908469557762, -2.861018856492592e-06, -7.748573807475623e-06, -0.03570251911878586, -0.00420365110039711, -3.3378546504536644e-06, -5.245195097813848e-06, -0.0097195478156209, -0.021808454766869545], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.001604818389751017, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.02155986800789833, -0.5912626385688782], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.02504713088274002, -6.246371776796877e-05, -7.033323527139146e-06, -0.0001102625101339072, -0.0002002515539061278, -0.003051626728847623, -0.001207456924021244, -0.000448841426987201, -0.016440168023109436, -6.05564855504781e-05, -1.9073468138230965e-06, -0.27286389470100403, -0.21686145663261414], "finish_reason": "stop"}], "metrics": {"energy": 1114.047815486908, "energy_per_token": 4.5471339407628895, "time": 28.789219, "time_per_token": 0.11750701632653061}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not target_column in data.columns:", "tokens": [" not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-1.1974523067474365, -0.722785472869873, -8.904537389753386e-05, -1.7762025890988298e-05, -0.004297545645385981, -0.1024244949221611, -0.17457035183906555, -0.004889911040663719, -0.05044598504900932, -0.001775951823219657], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -0.21941259503364563, -0.15496733784675598, -0.05659650266170502, -0.005887191742658615, -0.2402101457118988, -0.02765992470085621, -0.2976752817630768, -0.07857043296098709, -0.31711509823799133, -0.09528408199548721, -0.12874728441238403, -0.0022833484690636396, -0.0005919373361393809, -0.0018490137299522758], "finish_reason": "stop"}, {"text": " not data.dtypes.apply(pd.api.types.is_numeric_dtype).all():", "tokens": [" not", " data", ".", "d", "types", ".", "apply", "(", "pd", ".", "api", ".", "types", ".", "is", "_", "numeric", "_", "d", "type", ")", ".", "all", "():", "\n"], "logprobs": [-0.9183463454246521, -0.28659147024154663, -0.44254085421562195, -0.7922949194908142, -4.7801782784517854e-05, -0.629164457321167, -0.759372889995575, -0.05264449492096901, -1.3184854984283447, -1.7881233361549675e-05, -0.002383369952440262, -8.344646857949556e-07, -5.483612312673358e-06, -1.823885577323381e-05, -2.8371408916427754e-05, 0.0, -0.03135652467608452, -8.21318244561553e-05, -5.006777428206988e-06, -1.0728830375228426e-06, -0.031209560111165047, -2.5510462364763953e-05, -0.0333341620862484, -0.0044967010617256165, -0.003299627685919404], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numerical values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numerical", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011445883428677917, -3.933898824470816e-06, -0.009998357854783535, -0.020574599504470825, -0.6705377101898193, -0.15417690575122833, -0.5851621627807617, -0.08796754479408264, -1.864032506942749, -0.09899143129587173, -0.061798859387636185, -0.001925639808177948, -0.00021395778458099812, -0.001010741456411779], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09764592349529266, -0.03772428259253502, -0.00019464982324279845, -0.026964403688907623, -3.933898824470816e-06, -5.602820692729438e-06, -0.0011831672163680196, -0.032155320048332214, -0.035801324993371964, -0.0014746040105819702], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007404923089779913, -8.821448318485636e-06, -0.017549822106957436, -0.012075534090399742, -0.02872013859450817, -0.0116654634475708, -0.0010638536186888814, -0.07094913721084595, -0.027944674715399742, -0.6846855878829956, -0.03285381570458412, -0.0004930472350679338, -0.008787177503108978, -0.0018314032349735498, -0.0006861716392450035, -0.19866618514060974, -0.0052418177947402, -0.0003625689132604748, -0.0022247105371207], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08589935302734375, -0.0397116057574749, -0.0003375437227077782, -0.028581706807017326, -1.9073468138230965e-06, -2.7418097943154862e-06, -0.0012613920262083411, -0.03601948916912079, -0.06311576813459396, -0.0016671819612383842], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", "\"", ")", "\n"], "logprobs": [-0.002333182143047452, -9.059865078597795e-06, -0.013281682506203651, -0.013967149890959263, -0.03225309029221535, -0.006369646172970533, -0.006044915411621332, -0.07800494134426117, -0.00463898153975606, -0.09022972732782364, -0.07457449287176132, -1.8440585136413574, -0.0010742137674242258, -0.001690983772277832], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.031061649322509766, -0.15611077845096588, -0.10834473371505737, -0.04559919238090515, -0.3041379153728485, -1.0905920267105103, -0.0010283663868904114, -2.312633478140924e-05, -5.483612312673358e-06, -0.10960595309734344, -0.0559699721634388], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0031739119440317154, -0.03934331610798836, -0.00035661060246638954, -1.5497195136049413e-06, -2.3841830625315197e-06, -0.00013410145766101778, -0.01923293061554432], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009638085961341858, -3.218599158572033e-05, -0.0019723977893590927, -0.001069093239493668, -0.00250252615660429, -8.380061626667157e-05, -8.702239938429557e-06, -0.0003960540343541652, -0.0018358058296144009, -3.373566141817719e-05, -0.0007658647373318672, -0.00540023623034358, -0.02116207219660282, -1.585470999998506e-05, -2.50339189733495e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0006658005877397954, -0.08494922518730164, -0.010060908272862434, -0.034678127616643906, -0.004313095007091761, -0.0693410262465477, -7.986990567587782e-06, -5.006777428206988e-06, -0.05059434100985527, -0.015599139034748077, -3.814689989667386e-06, -6.6756979322235566e-06, -0.0024852838832885027, -0.01989540085196495, -2.861018856492592e-06, -8.702239938429557e-06, -0.03862364962697029, -0.0038073209580034018, -3.099436753473128e-06, -3.4570634852570947e-06, -0.009224297478795052, -0.02011227048933506], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0018228357657790184, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.012905292212963104, -0.823612630367279, -9.619726915843785e-05, -9.667406266089529e-05, -0.0005972985527478158, -0.027589652687311172, -8.535020606359467e-05, -0.0036404544953256845, -0.013034497387707233, -0.0001137191939051263, -9.536738616588991e-07, -0.000876757490914315, -0.009416806511580944], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.023830771446228027, -7.652943895664066e-05, -7.033323527139146e-06, -0.0001311216183239594, -0.0002138386043952778, -0.0025348695926368237, -0.0015399513067677617, -0.00047338721924461424, -0.015373656526207924, -5.1377883210079744e-05, -1.9073468138230965e-06, -0.2749379873275757, -0.2327461987733841], "finish_reason": "stop"}], "metrics": {"energy": 1092.1255140275969, "energy_per_token": 4.4395346098682795, "time": 28.585258, "time_per_token": 0.11620023577235772}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -2.345900774002075, -0.016504662111401558, -0.0015434031374752522, -0.006969072390347719], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4307592213153839, -0.0002422039397060871, -1.3112935448589269e-05, -0.008413583971560001, -2.658331868587993e-05, -0.09014095366001129, -0.1000177338719368, -0.0049308366142213345, -0.029317548498511314, -0.0021713031455874443], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002709529362618923, -5.602820692729438e-06, -0.006777394562959671, -0.24273090064525604, -0.1346130520105362, -0.04276350513100624, -0.004433089401572943, -0.1999247521162033, -0.031615275889635086, -0.31777074933052063, -0.06820780038833618, -0.31785160303115845, -0.10214048624038696, -0.12740810215473175, -0.002318910090252757, -0.0005988473421894014, -0.0018563910853117704], "finish_reason": "stop"}, {"text": " data.columns.isna().any():", "tokens": [" data", ".", "columns", ".", "is", "na", "()", ".", "any", "():", "\n"], "logprobs": [-0.631386935710907, -0.18057683110237122, -3.0486855506896973, -0.22490525245666504, -2.43422269821167, -0.4869897663593292, -0.0002836778585333377, -0.00012957210128661245, -0.06082655489444733, -0.1394003927707672, -0.013833715580403805], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011767374817281961, -3.2186455882765586e-06, -0.010877835564315319, -0.02181381918489933, -0.5948473215103149, -0.1717948466539383, -0.5555456280708313, -0.10439589619636536, -0.21227847039699554, -0.12589411437511444, -0.0509333610534668, -0.0018136734142899513, -0.00022933237778488547, -0.0008833082392811775], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08857020735740662, -0.036796532571315765, -0.0001662831346038729, -0.02855633571743965, -4.291525328881107e-06, -4.768360213347478e-06, -0.0010689741466194391, -0.04520275816321373, -0.03732551634311676, -0.001583870965987444], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be > 0 and < 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " >", " ", "0", " and", " <", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.000705470098182559, -1.1205610462639015e-05, -0.015935799106955528, -0.012585384771227837, -0.029985638335347176, -0.01192217506468296, -0.0010719512356445193, -0.08321761339902878, -0.02416827902197838, -3.529123544692993, -0.2826768457889557, -0.00012933371181134135, -0.07619928568601608, -0.006492947693914175, -0.029636316001415253, -0.001874001114629209, -0.29961881041526794, -0.0064202239736914635, -0.0004514628672040999, -0.001100173220038414], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.07747156172990799, -0.03559185564517975, -0.00032479254878126085, -0.02397940494120121, -2.0265558760002023e-06, -3.3378546504536644e-06, -0.0012504386249929667, -0.04349823668599129, -0.07029498368501663, -0.0016113643068820238], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002110279630869627, -8.583032467868179e-06, -0.012289279140532017, -0.01518041267991066, -0.02989470213651657, -0.006063044536858797, -0.005614819936454296, -0.07540850341320038, -0.005741058848798275, -0.09419779479503632, -0.08874737471342087, -0.3062931299209595, -0.003992919810116291, -0.00038771264371462166, -0.002940024249255657], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.029023924842476845, -0.16200469434261322, -0.08887139707803726, -0.042722273617982864, -0.3259032368659973, -0.4113202691078186, -0.005215135402977467, -4.529942543740617e-06, -3.576278118089249e-07, -0.05059264227747917, -0.06196951866149902], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0028740549460053444, -0.04015396907925606, -0.00029047083808109164, -1.6689286894688848e-06, -3.6954811548639555e-06, -0.00011669908417388797, -0.017466770485043526], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.00881163775920868, -2.9205850296420977e-05, -0.0024199981708079576, -0.0008684201166033745, -0.002053892007097602, -7.92710343375802e-05, -1.0609570381348021e-05, -0.00042715485324151814, -0.0021226510871201754, -2.992108420585282e-05, -0.00046790618216618896, -0.0049049765802919865, -0.02253752388060093, -1.5735502529423684e-05, -2.9802276912960224e-06, -2.622600959512056e-06, -3.576278118089249e-07, -0.0007096394547261298, -0.12341058999300003, -0.008761771954596043, -0.042427875101566315, -0.004697003401815891, -0.06833818554878235, -8.4638240878121e-06, -4.6491513785440475e-06, -0.04877615347504616, -0.01971261389553547, -2.9802276912960224e-06, -5.8412379075889476e-06, -0.0023304466158151627, -0.019737975671887398, -2.50339189733495e-06, -8.702239938429557e-06, -0.03582639992237091, -0.0037068482488393784, -3.3378546504536644e-06, -2.50339189733495e-06, -0.011095844209194183, -0.022199813276529312], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0017993940273299813, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.0204482339322567, -0.6093606948852539], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.029273325577378273, -7.176141662057489e-05, -7.510157047363464e-06, -0.00011324241495458409, -0.00027259447961114347, -0.002877264516428113, -0.0023255704436451197, -0.0005016260547563434, -0.013967032544314861, -6.41325386823155e-05, -2.7418097943154862e-06, -0.3027247488498688], "finish_reason": "stop"}], "metrics": {"energy": 1020.2509431505212, "energy_per_token": 4.575116336997853, "time": 26.707111, "time_per_token": 0.11976282959641256}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(f\"data is not of type DataFrame: {type(data)}\")", "tokens": [" Value", "Error", "(", "f", "\"", "data", " is", " not", " of", " type", " Data", "Frame", ":", " {", "type", "(", "data", ")}", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -1.427030086517334, -0.3575177490711212, -0.4534479081630707, -1.230507493019104, -0.13663780689239502, -1.3837876319885254, -0.017222492024302483, -0.2768389880657196, -0.020840592682361603, -1.4579678773880005, -0.0930364653468132, -0.3924613296985626, -0.0010309863137081265, -0.0007053509471006691, -0.08942456543445587, -0.018249930813908577, -0.0012902038870379329, -0.0053161680698394775], "finish_reason": "stop"}, {"text": " not isinstance(target_column, str):", "tokens": [" not", " isinstance", "(", "target", "_", "column", ",", " str", "):", "\n"], "logprobs": [-2.983372926712036, -1.1946492195129395, -0.0003262225945945829, -1.4306092262268066, -3.540453326422721e-05, -4.1126360883936286e-05, -0.0011148196645081043, -0.01791217364370823, -0.006352351978421211, -0.001419966109097004], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00044919890933670104, -1.9073468138230965e-06, -0.026378009468317032, -0.0032191856298595667, -0.0865086168050766, -0.37127694487571716, -0.18093740940093994, -0.0038843909278512, -0.01883736625313759, -0.1936870515346527, -0.0032248892821371555, -0.0005480932886712253, -0.0016406421782448888], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.3402271568775177, -0.00022063204960431904, -1.1205610462639015e-05, -0.010047100484371185, -3.2782016205601394e-05, -0.1095217615365982, -0.10105645656585693, -0.0035560012329369783, -0.034130457788705826, -0.0022683623246848583], "finish_reason": "stop"}, {"text": " ValueError(", "tokens": [" Value", "Error", "(", "\n"], "logprobs": [-0.002768138889223337, -4.6491513785440475e-06, -0.0055913482792675495, -2.751845359802246], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column).select_dtypes(exclude=np.number).columns.any():", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", ".", "select", "_", "d", "types", "(", "exclude", "=", "np", ".", "number", ")", ".", "columns", ".", "any", "():", "\n"], "logprobs": [-0.584533154964447, -0.16419969499111176, -2.894578456878662, -0.04486315697431564, -0.6065983772277832, -0.24243880808353424, -0.002978890435770154, -1.311301275563892e-06, -6.6756979322235566e-06, -0.02957717701792717, -0.0008898589294403791, -0.7587200999259949, -9.417489309271332e-06, -3.2186455882765586e-06, -3.933898824470816e-06, -0.042468778789043427, -0.35075557231903076, -0.3555513024330139, -0.21724680066108704, -1.5497195136049413e-06, -0.0005455912905745208, -0.00020740265608765185, -0.0020913651678711176, -1.7614903450012207, -0.003974634688347578, -0.4894551932811737, -0.009207879193127155, -0.024846095591783524], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0013103241799399257, -4.172316494077677e-06, -0.01263494323939085, -0.026298705488443375, -0.5976703763008118, -0.15149721503257751, -0.5120425820350647, -0.10536077618598938, -0.18278193473815918, -0.1204557865858078, -0.04888048768043518, -0.0019983339589089155, -0.00018988236843142658, -0.0008382858941331506], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.0899968221783638, -0.029308056458830833, -0.00014876213390380144, -0.027026714757084846, -3.576272320060525e-06, -5.245195097813848e-06, -0.0012897277483716607, -0.036041565239429474, -0.035910241305828094, -0.0017648849170655012], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be in the range (0,1)\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " in", " the", " range", " (", "0", ",", "1", ")\"", ")", "\n"], "logprobs": [-0.0006678258068859577, -1.0847986231965479e-05, -0.015419202856719494, -0.010452290996909142, -0.032779525965452194, -0.010419377125799656, -0.0008556757238693535, -0.08059708029031754, -0.02487458474934101, -2.633227586746216, -0.6505944132804871, -0.4779445230960846, -0.755752682685852, -0.0012251974549144506, -0.19228419661521912, -1.2762110233306885, -1.7400407791137695, -0.0009552444680593908, -0.0013759202556684613], "finish_reason": "stop"}, {"text": " random_state is not None and not isinstance(random_state, int):", "tokens": [" random", "_", "state", " is", " not", " None", " and", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-2.7112064361572266, -8.583032467868179e-06, -4.95898348162882e-05, -0.13204675912857056, -0.2553769648075104, -0.027841728180646896, -0.09069734066724777, -0.15931746363639832, -0.04733516275882721, -0.0004011779965367168, -0.003926070407032967, -4.410734163684538e-06, 0.0, -0.0013862771447747946, -0.03604363650083542, -0.004706969950348139, -0.0012063853209838271], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", "\"", ")", "\n"], "logprobs": [-0.002424874110147357, -6.079655122448457e-06, -0.013775750994682312, -0.011991436593234539, -0.030339233577251434, -0.0066244048066437244, -0.004755852278321981, -0.07304390519857407, -0.006487262435257435, -0.10013195127248764, -0.07810384035110474, -2.0523948669433594, -0.0008803306263871491, -0.002186885569244623], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.028462141752243042, -0.13854670524597168, -0.08226614445447922, -0.03262399882078171, -0.24813339114189148, -1.0069270133972168, -0.001039441442117095, -2.9444261599564925e-05, -6.6756979322235566e-06, -0.10167593508958817, -0.04837098345160484], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0032660020515322685, -0.04118203744292259, -0.000311802898067981, -2.145764938177308e-06, -2.3841830625315197e-06, -0.00012361239350866526, -0.017129218205809593], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.00897043664008379, -3.302042750874534e-05, -0.0019840572495013475, -0.0009534580749459565, -0.002418927848339081, -7.903263758635148e-05, -1.0609570381348021e-05, -0.00039188333903439343, -0.0022750229109078646, -2.777537883957848e-05, -0.0006295844214037061, -0.0060561723075807095, -0.023885712027549744, -1.4662635294371285e-05, -2.3841830625315197e-06, -2.3841830625315197e-06, -2.3841855067985307e-07, -0.0005508335889317095, -0.12139875441789627, -0.009322091937065125, -0.03442627191543579, -0.004273687023669481, -0.06949272751808167, -7.390948667307384e-06, -3.933898824470816e-06, -0.044619668275117874, -0.01715722493827343, -3.3378546504536644e-06, -5.483612312673358e-06, -0.0023700501769781113, -0.021586701273918152, -3.6954811548639555e-06, -7.748573807475623e-06, -0.041652336716651917, -0.0037235943600535393, -3.814689989667386e-06, -2.145764938177308e-06, -0.00991656444966793, -0.021531984210014343], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001887565478682518, -1.311301275563892e-06, -1.1920928244535389e-07, -0.018140947446227074, -0.8050065040588379, -0.00010871296399272978, -6.5205356804654e-05, -0.0009155849111266434, -0.028472106903791428, -0.00010382589971413836, -0.00426276633515954, -0.012747704982757568, -9.691245941212401e-05, -1.311301275563892e-06, -0.0008772339206188917, -0.00975342933088541], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.024833420291543007, -7.295342220459133e-05, -6.794906312279636e-06, -0.00011288482346571982, -0.00020180096908006817, -0.003024767152965069, -0.0018323551630601287, -0.0005872909096069634, -0.02069009095430374, -6.544376083184034e-05, -3.814689989667386e-06, -0.3040565848350525, -0.20583301782608032], "finish_reason": "stop"}], "metrics": {"energy": 1156.1404785671243, "energy_per_token": 4.516173744402829, "time": 29.849226, "time_per_token": 0.1165985390625}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data needs to be a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " needs", " to", " be", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -3.309795379638672, -0.0025515162851661444, -0.0043237772770226, -0.35896703600883484, -0.5962954163551331, -0.030870720744132996, -0.23400770127773285, -0.001364372787065804, -0.007495375815778971], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-2.69850754737854, -1.2183382511138916, -0.00031740395934320986, -0.5471289157867432, -7.867782187531702e-06, -2.3841855067985307e-07, -0.0010014524450525641, -0.043376561254262924, -0.03196818009018898, -0.0012085284106433392], "finish_reason": "stop"}, {"text": " ValueError(\"data cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -3.191300392150879, -0.004224068485200405, -0.019084757193922997, -0.23695027828216553, -0.0020673349499702454, -0.00039521988946944475, -0.0008646087371744215], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4032018780708313, -0.00018630675913300365, -1.1920858014491387e-05, -0.008351048454642296, -3.1709168979432434e-05, -0.10039755702018738, -0.11877986788749695, -0.003760529914870858, -0.03310779854655266, -0.0019160023657605052], "finish_reason": "stop"}, {"text": " ValueError(\"target_column is not a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002415717113763094, -4.529942543740617e-06, -0.006377108860760927, -0.22183053195476532, -0.13342556357383728, -0.039136193692684174, -0.0048474413342773914, -2.1992297172546387, -0.017335910350084305, -0.27221041917800903, -0.12134364247322083, -0.3106621205806732, -0.0869755670428276, -0.24627986550331116, -0.003971547354012728, -0.0005820487276650965, -0.0017390617867931724], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1).dtypes.name == \"object\":", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", ".", "d", "types", ".", "name", " ==", " \"", "object", "\":", "\n"], "logprobs": [-0.6802498698234558, -0.13413947820663452, -2.7644762992858887, -0.061982180923223495, -0.7878180742263794, -3.576272320060525e-06, -5.8412379075889476e-06, -0.024043066427111626, -0.07155659049749374, -0.027865031734108925, -0.011238486506044865, -0.0062048654071986675, -0.0005175919504836202, -1.5388855934143066, -0.0013012760318815708, -0.00831711944192648, -1.361391305923462, -0.26259785890579224, -1.8804264068603516, -0.4631172716617584, -0.008901437744498253, -0.012068821117281914], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numerical values\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numerical", " values", "\"", ")", "\n"], "logprobs": [-0.0011978124966844916, -3.6954811548639555e-06, -0.012599393725395203, -0.0237870030105114, -0.6608205437660217, -0.16343729197978973, -0.5203294157981873, -0.09168411791324615, -1.8653314113616943, -0.10055118799209595, -2.8938820362091064, -0.001110175740905106, -0.0037025725468993187], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10276414453983307, -0.0341031551361084, -0.00015841660206206143, -0.02982470393180847, -3.3378546504536644e-06, -5.960446742392378e-06, -0.0011530425399541855, -0.04106111079454422, -0.03963690623641014, -0.0015518538421019912], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a fraction between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " fraction", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007725353352725506, -1.168244216387393e-05, -0.016136404126882553, -0.010544302873313427, -0.02306012623012066, -0.010880429297685623, -0.0009341643890365958, -0.07530324906110764, -0.023771287873387337, -1.4849953651428223, -1.9352006912231445, -0.15987101197242737, -0.07141020148992538, -0.00037353215157054365, -0.007466269191354513, -0.0015528061194345355, -0.00020847532141488045, -0.1092526987195015, -0.004096925724297762, -0.0003777029050979763, -0.0008964095613919199], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09466062486171722, -0.04066229984164238, -0.00038211196078918874, -0.02114970050752163, -1.9073468138230965e-06, -3.099436753473128e-06, -0.0012997282901778817, -0.040606897324323654, -0.07638031989336014, -0.0018732872558757663], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0025511595886200666, -1.07287787614041e-05, -0.012105449102818966, -0.012949303723871708, -0.03309061750769615, -0.0060423086397349834, -0.00386040355078876, -0.06987220048904419, -0.005218811798840761, -0.1077580526471138, -0.08846240490674973, -0.2890641689300537, -0.003869784763082862, -0.0003361137059982866, -0.0025533000007271767], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.022366177290678024, -0.148673877120018, -0.11157957464456558, -0.03999752923846245, -1.4423043727874756, -1.07287787614041e-05, -3.2186455882765586e-06, -0.00158946483861655, -0.023838918656110764, -0.0653465986251831, -0.00890309177339077, -0.008758462965488434, -0.059942904859781265], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0038233529776334763, -0.04450759291648865, -0.0002840353990904987, -2.0265558760002023e-06, -4.0531076592742465e-06, -0.00012337400403339416, -0.018790218979120255], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009842082858085632, -3.4450891689630225e-05, -0.0016984812682494521, -0.0009420248097740114, -0.001997025217860937, -9.583967766957358e-05, -9.179073458653875e-06, -0.0004349001101218164, -0.001890778075903654, -3.325883881188929e-05, -0.0005385617259889841, -0.005358618218451738, -0.018730904906988144, -1.3589766240329482e-05, -2.622600959512056e-06, -2.50339189733495e-06, -3.576278118089249e-07, -0.0006742588011547923, -0.18710415065288544, -0.009047936648130417, -0.051242027431726456, -0.004565173760056496, -0.061201371252536774, -6.318072337307967e-06, -4.172316494077677e-06, -0.051669586449861526, -0.019541950896382332, -3.933898824470816e-06, -7.152531907195225e-06, -0.0025913489516824484, -0.023384619504213333, -2.9802276912960224e-06, -8.821448318485636e-06, -0.02999315783381462, -0.0037815505638718605, -3.099436753473128e-06, -3.4570634852570947e-06, -0.00945825595408678, -0.020044036209583282], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0018417553510516882, -1.311301275563892e-06, -1.1920928244535389e-07, -0.016694016754627228, -0.5007097721099854], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.02846364863216877, -6.878139538457617e-05, -8.702239938429557e-06, -0.00012587709352374077, -0.00019262365822214633, -0.0034356636460870504, -0.0016788449138402939, -0.0004615910293068737, -0.023862432688474655, -5.376194530981593e-05, -2.50339189733495e-06, -0.31491464376449585, -0.2582702934741974], "finish_reason": "stop"}], "metrics": {"energy": 1121.478302764892, "energy_per_token": 4.653436940933162, "time": 28.798073, "time_per_token": 0.11949407883817427}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"Data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "Data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -2.625584840774536, -0.9202460646629333, -0.0455147922039032, -0.14131799340248108, -0.3421621322631836, -0.05777345225214958, -0.36725226044654846, -0.00205781776458025, -0.00778474286198616], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.1595228761434555, -0.004364132881164551, -0.08302728831768036, -0.014441375620663166, -0.0007659838884137571], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00037150635034777224, -2.3841830625315197e-06, -0.025204535573720932, -0.003570492845028639, -0.073797807097435, -1.742779016494751, -0.043514326214790344, -0.21242190897464752, -0.01241750456392765, -0.0004012971476186067, -0.0011688789818435907], "finish_reason": "stop"}, {"text": " not target_column in data:", "tokens": [" not", " target", "_", "column", " in", " data", ":", "\n"], "logprobs": [-1.1913114786148071, -0.7195726633071899, -7.795983401592821e-05, -2.169585604860913e-05, -0.003661715192720294, -0.10589063912630081, -1.6626278162002563, -0.0018663860391825438], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", "\"", ")", "\n"], "logprobs": [-0.0024082250893115997, -5.125986263010418e-06, -0.006479919422417879, -0.23795536160469055, -0.13061124086380005, -0.049122828990221024, -0.00573939923197031, -0.1964692324399948, -0.030383525416254997, -0.2976383566856384, -0.07798013091087341, -0.31979092955589294, -0.10162995755672455, -2.2365658283233643, -0.002543787471950054, -0.0015357855008915067], "finish_reason": "stop"}, {"text": " data.select_dtypes(exclude='number'):", "tokens": [" data", ".", "select", "_", "d", "types", "(", "exclude", "='", "number", "')", ":", "\n"], "logprobs": [-0.6430662274360657, -0.16004177927970886, -1.2242847681045532, -1.847726889536716e-05, -8.106198947643861e-06, -2.861018856492592e-06, -0.13105396926403046, -0.06867223978042603, -1.5817897319793701, -0.0009023646707646549, -0.0004142856632824987, -1.477302074432373, -0.04170219227671623], "finish_reason": "stop"}, {"text": " ValueError(\"Only numeric values allowed in data.\")", "tokens": [" Value", "Error", "(", "\"", "Only", " numeric", " values", " allowed", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0011787617113441229, -4.0531076592742465e-06, -0.013596427626907825, -0.02449950948357582, -3.1795103549957275, -0.41091233491897583, -0.4453565776348114, -2.6872217655181885, -0.44791898131370544, -0.9976610541343689, -0.1785142570734024, -0.009394132532179356, -0.0006130246329121292, -0.0031914988067001104], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09589588642120361, -0.03616195172071457, -0.00018618757894728333, -0.0264970101416111, -4.6491513785440475e-06, -6.079655122448457e-06, -0.0011851914459839463, -0.033627673983573914, -0.037707291543483734, -0.0014641289599239826], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be in the range (0, 1).\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " in", " the", " range", " (", "0", ",", " ", "1", ")", ".", "\"", ")", "\n"], "logprobs": [-0.0008777103503234684, -1.0132738680113107e-05, -0.016465146094560623, -0.012381005100905895, -0.029685035347938538, -0.010291720740497112, -0.0009565545478835702, -0.07486167550086975, -0.021482516080141068, -2.55608868598938, -0.554539680480957, -0.546711802482605, -0.7960844039916992, -0.0011074369540438056, -0.15392091870307922, -0.3095986247062683, -0.0030978568829596043, -0.1636199951171875, -0.037828970700502396, -0.0021113501861691475, -0.00022194306075107306, -0.0009464313625358045], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.07982803136110306, -0.043074704706668854, -0.0003325386205688119, -0.028988489881157875, -1.9073468138230965e-06, -2.7418097943154862e-06, -0.0011199399596080184, -0.03749661520123482, -0.06392863392829895, -0.00157196877989918], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0030036119278520346, -7.152531907195225e-06, -0.01309215184301138, -0.012417386285960674, -0.031092504039406776, -0.007839152589440346, -0.004926803521811962, -0.07617531716823578, -0.005000347271561623, -0.09467971324920654, -0.08428959548473358, -0.23423908650875092, -0.004482697229832411, -0.0004231034545227885, -0.002449966035783291], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.03356323763728142, -0.12492980808019638, -0.08865857124328613, -0.04305403679609299, -0.3153282701969147, -1.112311601638794, -0.0010608765296638012, -2.586808113846928e-05, -3.576272320060525e-06, -0.1228165552020073, -0.04534631222486496], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003485320834442973, -0.03881574049592018, -0.00029130507027730346, -1.7881377516459906e-06, -3.2186455882765586e-06, -0.00012909532233607024, -0.020294051617383957], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011038192547857761, -3.0636318115284666e-05, -0.002115513663738966, -0.0009160612826235592, -0.002245525596663356, -7.021180499577895e-05, -1.1086402082582936e-05, -0.00039176418795250356, -0.002293695928528905, -2.7894584491150454e-05, -0.0004621868138201535, -0.0054723224602639675, -0.018480615690350533, -1.8596476365928538e-05, -2.861018856492592e-06, -1.7881377516459906e-06, -3.576278118089249e-07, -0.000596107158344239, -0.10741613060235977, -0.013364259153604507, -0.0385349877178669, -0.004389769863337278, -0.06815457344055176, -8.821448318485636e-06, -4.0531076592742465e-06, -0.04190123826265335, -0.018954694271087646, -3.6954811548639555e-06, -7.271740287251305e-06, -0.0022633669432252645, -0.020654242485761642, -2.622600959512056e-06, -8.106198947643861e-06, -0.03994610160589218, -0.00394352525472641, -3.6954811548639555e-06, -5.960446742392378e-06, -0.010364871472120285, -0.02187575213611126], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0017383478116244078, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.018787061795592308, -0.49778398871421814], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.027629658579826355, -6.425174069590867e-05, -6.794906312279636e-06, -0.00011359999916749075, -0.0002338612830499187, -0.0024409282486885786, -0.0014138950500637293, -0.0004812512779608369, -0.016141682863235474, -5.113947918289341e-05, -2.3841830625315197e-06, -0.2901141345500946, -0.29734575748443604], "finish_reason": "stop"}], "metrics": {"energy": 1059.6372388648988, "energy_per_token": 4.773140715607652, "time": 27.107832, "time_per_token": 0.12210735135135134}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " data.shape[0] == 0 or data.shape[1] == 0:", "tokens": [" data", ".", "shape", "[", "0", "]", " ==", " ", "0", " or", " data", ".", "shape", "[", "1", "]", " ==", " ", "0", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -2.995859146118164, -0.011620570905506611, -0.0035052781458944082, -0.0020656692795455456, -0.20901954174041748, -0.0021099227014929056, -1.645074735279195e-05, -2.3775737285614014, -0.0058621857315301895, -0.0008048156159929931, -0.004468100145459175, -0.0012474621180444956, -0.005310358013957739, -0.00035339308669790626, -0.01173026580363512, -0.0026815906167030334, -0.0006632988806813955, -0.005620983894914389, -0.005610196385532618], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not target_column in data.columns:", "tokens": [" not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-1.1974523067474365, -0.722785472869873, -8.904537389753386e-05, -1.7762025890988298e-05, -0.004297545645385981, -0.1024244949221611, -0.17457035183906555, -0.004889911040663719, -0.05044598504900932, -0.001775951823219657], "finish_reason": "stop"}, {"text": " ValueError(\"target_column is not a valid column.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " valid", " column", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -0.21941259503364563, -0.15496733784675598, -0.05659650266170502, -0.005887191742658615, -2.1278347969055176, -0.016629768535494804, -0.3131137490272522, -2.564807891845703, -0.05882583558559418, -1.8747680187225342, -0.007357406429946423, -0.00063744728686288, -0.0022081772331148386], "finish_reason": "stop"}, {"text": " data.shape[0] > 500:", "tokens": [" data", ".", "shape", "[", "0", "]", " >", " ", "5", "0", "0", ":", "\n"], "logprobs": [-0.6846676468849182, -0.15412908792495728, -2.6983513832092285, -0.008885841816663742, -0.7083213925361633, -0.014433972537517548, -2.814340591430664, -0.11446032673120499, -3.0721309185028076, -0.19974513351917267, -0.12463991343975067, -0.3528185784816742, -0.021575501188635826], "finish_reason": "stop"}, {"text": " ValueError(\"All provided columns should be numeric.\")", "tokens": [" Value", "Error", "(", "\"", "All", " provided", " columns", " should", " be", " numeric", ".", "\"", ")", "\n"], "logprobs": [-0.0013562776148319244, -3.576272320060525e-06, -0.01447991468012333, -0.022334352135658264, -1.6033117771148682, -3.337413787841797, -3.2538585662841797, -0.15491434931755066, -1.5744922161102295, -0.07975780963897705, -0.08653376251459122, -0.003277052426710725, -0.00042274597217328846, -0.0028872492257505655], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08234706521034241, -0.03994816169142723, -0.00016449528629891574, -0.027814483270049095, -3.814689989667386e-06, -3.576272320060525e-06, -0.0010831448016688228, -0.039866603910923004, -0.046414922922849655, -0.001814387273043394], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006239851354621351, -9.059865078597795e-06, -0.016309525817632675, -0.01101484801620245, -0.023416178300976753, -0.01161738857626915, -0.0009220162755809724, -0.07726822048425674, -0.027200745418667793, -0.7227604389190674, -0.03034883178770542, -0.00035291642416268587, -0.01093750074505806, -0.0015001959400251508, -0.0005907459417358041, -0.1959916353225708, -0.006168612278997898, -0.000302745756926015, -0.0017934442730620503], "finish_reason": "stop"}, {"text": " random_state is not None and not isinstance(random_state, int):", "tokens": [" random", "_", "state", " is", " not", " None", " and", " not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-2.779893636703491, -9.775113539944869e-06, -5.936446541454643e-05, -0.11845578253269196, -0.26450294256210327, -0.031199045479297638, -0.09426820278167725, -0.1532832831144333, -0.038324255496263504, -0.00035482310340739787, -0.005135440267622471, -4.291525328881107e-06, -1.1920928244535389e-07, -0.0015073377871885896, -0.03730897977948189, -0.0031293490901589394, -0.0013938959455117583], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0026021688245236874, -1.0847986231965479e-05, -0.011723668314516544, -0.012093201279640198, -0.035460010170936584, -0.006861221045255661, -0.004706257954239845, -0.06819833815097809, -0.005626081023365259, -0.09419801086187363, -0.08515265583992004, -0.25772881507873535, -0.00441374396905303, -0.0004196478403173387, -0.0026547210291028023], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.02705456130206585, -0.14114658534526825, -0.07590772956609726, -0.0403933972120285, -0.3315146267414093, -0.496383935213089, -0.004784919787198305, -4.6491513785440475e-06, -3.576278118089249e-07, -2.8273096084594727, -0.027551498264074326, -0.04474620893597603, -0.006432187277823687, -0.006936753634363413, -0.07925025373697281], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.002701682737097144, -0.04442526772618294, -0.0002475670480635017, -2.264974000354414e-06, -2.622600959512056e-06, -0.00010918975021922961, -0.017636733129620552], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011235657148063183, -3.123234637314454e-05, -0.001712642959319055, -0.000998832518234849, -0.002279066713526845, -8.821098163025454e-05, -8.22540732769994e-06, -0.00046850196667946875, -0.001716808183118701, -3.075552376685664e-05, -0.0004577780782710761, -0.006768987979739904, -0.02984529919922352, -1.8358061424805783e-05, -2.0265558760002023e-06, -1.5497195136049413e-06, -2.3841855067985307e-07, -0.0005057962844148278, -0.12914003431797028, -0.011230352334678173, -0.03770545497536659, -0.004146906081587076, -0.07146070152521133, -8.702239938429557e-06, -3.4570634852570947e-06, -0.03702148422598839, -0.020811287686228752, -3.6954811548639555e-06, -5.245195097813848e-06, -0.0022169791627675295, -0.019328230991959572, -2.3841830625315197e-06, -7.152531907195225e-06, -0.0333317406475544, -0.003574887989088893, -3.2186455882765586e-06, -2.3841830625315197e-06, -0.008868000470101833, -0.021015821024775505], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001817957148887217, -1.311301275563892e-06, -1.1920928244535389e-07, -0.016267890110611916, -0.7667297124862671, -0.00017009719158522785, -7.331102824537084e-05, -0.0006295844214037061, -0.03595945984125137, -0.00014888131408952177, -0.004587957635521889, -0.014687860384583473, -8.868777513271198e-05, -8.344646857949556e-07, -0.0009453595266677439, -0.010679238475859165], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.026062151417136192, -7.319182623177767e-05, -7.629365427419543e-06, -0.00011812942830147222, -0.0002746204845607281, -0.0027912012301385403, -0.0017650038935244083, -0.0005768066039308906, -0.01693560928106308, -7.676783570786938e-05, -1.7881377516459906e-06, -0.3177679777145386, -0.24046728014945984], "finish_reason": "stop"}], "metrics": {"energy": 1195.051202447892, "energy_per_token": 4.578740239263953, "time": 30.688253, "time_per_token": 0.11757951340996169}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not a pandas DataFrame')", "tokens": [" Value", "Error", "('", "data", " is", " not", " a", " pandas", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -0.11166571825742722, -2.06349778175354, -0.26339468359947205, -0.02836006134748459, -0.13274924457073212, -0.002920768689364195], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -0.1541835516691208, -0.0043168929405510426, -0.01982247643172741, -1.6900125741958618, -0.0005316513124853373, -0.001644093543291092], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4164772033691406, -0.0001931004080688581, -1.2040065485052764e-05, -0.0100716482847929, -3.969590397900902e-05, -0.1182708814740181, -0.09319384396076202, -0.003328737337142229, -0.03370651602745056, -0.002063765889033675], "finish_reason": "stop"}, {"text": " ValueError(", "tokens": [" Value", "Error", "(", "\n"], "logprobs": [-0.002678618300706148, -5.245195097813848e-06, -0.00614669406786561, -2.87318754196167], "finish_reason": "stop"}, {"text": " np.isnan(data.values).any():", "tokens": [" np", ".", "is", "nan", "(", "data", ".", "values", ")", ".", "any", "():", "\n"], "logprobs": [-3.1880276203155518, -2.706014311115723e-05, -2.895411252975464, -0.02348627895116806, -0.0006854568491689861, -0.041574809700250626, -0.7514196634292603, -0.6096911430358887, -0.05611424520611763, -4.2914423829643056e-05, -0.025132695212960243, -0.04846979305148125, -0.011138049885630608], "finish_reason": "stop"}, {"text": " ValueError(\"All values in the data should be numbers.\")", "tokens": [" Value", "Error", "(", "\"", "All", " values", " in", " the", " data", " should", " be", " numbers", ".", "\"", ")", "\n"], "logprobs": [-0.0011961455456912518, -2.861018856492592e-06, -0.011807788163423538, -0.022568758577108383, -1.6210956573486328, -0.47781169414520264, -0.29027602076530457, -0.9494612216949463, -1.9800353050231934, -0.4335137605667114, -0.007396101485937834, -2.700765609741211, -0.0711202397942543, -0.00392618915066123, -0.00048315772437490523, -0.002495748223736882], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10851886123418808, -0.03794271498918533, -0.00016604475968051702, -0.030481120571494102, -4.0531076592742465e-06, -4.887569048150908e-06, -0.0011991222854703665, -0.03532285615801811, -0.03900917246937752, -0.0014829363208264112], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007189311436377466, -1.2040065485052764e-05, -0.014521624892950058, -0.01131404284387827, -0.02994757518172264, -0.010484850034117699, -0.0008809261489659548, -0.08225132524967194, -0.025645693764090538, -1.454674243927002, -0.7648670077323914, -0.3392918109893799, -0.03084448166191578, -0.0002983363519888371, -0.015956565737724304, -0.0016687290044501424, -0.0004359725280664861, -0.14290079474449158, -0.003232494229450822, -0.0002980979916173965, -0.0010835020802915096], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.07809028029441833, -0.040358707308769226, -0.00034767304896377027, -0.024380618706345558, -1.6689286894688848e-06, -2.9802276912960224e-06, -0.0012306743301451206, -0.04521438106894493, -0.07135181128978729, -0.0016495682066306472], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0024991966784000397, -8.940656698541716e-06, -0.01293235830962658, -0.013581610284745693, -0.03683341294527054, -0.006027378607541323, -0.005819165147840977, -0.06989065557718277, -0.0047233435325324535, -0.10406002402305603, -0.06390928477048874, -0.2571822702884674, -0.003991257399320602, -0.00038389943074434996, -0.0031463427003473043], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.02638578787446022, -0.17808477580547333, -0.09701690822839737, -0.031827885657548904, -1.4754910469055176, -8.821448318485636e-06, -2.622600959512056e-06, -0.0015829188050702214, -0.024788301438093185, -0.07244756072759628, -0.010391888208687305, -0.007416927255690098, -0.06248513609170914], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0033902807626873255, -0.04073783755302429, -0.00028427375946193933, -1.5497195136049413e-06, -4.887569048150908e-06, -0.00011538793478393927, -0.015934977680444717], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.012204022146761417, -3.40932747349143e-05, -0.0019145745318382978, -0.0010557560017332435, -0.002068405505269766, -9.357491217087954e-05, -8.583032467868179e-06, -0.0004058252670802176, -0.0019606193527579308, -2.992108420585282e-05, -0.000798859924543649, -0.006316459737718105, -0.017043786123394966, -2.062299427052494e-05, -3.814689989667386e-06, -2.264974000354414e-06, -3.576278118089249e-07, -0.00067223358200863, -0.12130774557590485, -0.010754483751952648, -0.042186763137578964, -0.004231547005474567, -0.05864361673593521, -7.033323527139146e-06, -4.529942543740617e-06, -0.0445701889693737, -0.021272243931889534, -3.6954811548639555e-06, -7.152531907195225e-06, -0.0025664984714239836, -0.023603295907378197, -2.3841830625315197e-06, -5.8412379075889476e-06, -0.0316508486866951, -0.003939131740480661, -3.814689989667386e-06, -2.50339189733495e-06, -0.012410440482199192, -0.024063430726528168], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0018130784155800939, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.02110453136265278, -0.5902148485183716], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.03116426430642605, -5.94836674281396e-05, -7.271740287251305e-06, -0.00011216964776394889, -0.00021217002358753234, -0.0026145342271775007, -0.001975610153749585, -0.0004889961564913392, -0.01683035120368004, -5.9602869441732764e-05, -1.9073468138230965e-06, -0.36176201701164246], "finish_reason": "stop"}], "metrics": {"energy": 1024.0433630065913, "energy_per_token": 4.785249359843885, "time": 26.473484, "time_per_token": 0.1237078691588785}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data has to be pandas.DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " has", " to", " be", " pandas", ".", "DataFrame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -2.641284942626953, -0.014456179924309254, -0.00687092961743474, -2.684978485107422, -1.2126682996749878, -0.03986316919326782, -0.22211267054080963, -0.0014055621577426791, -0.005324350204318762], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -1.8271037340164185, -0.05134553834795952, -0.21693448722362518, -0.013170979917049408, -0.0004332319076638669, -0.0010064542293548584], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4032018780708313, -0.00018630675913300365, -1.1920858014491387e-05, -0.008351048454642296, -3.1709168979432434e-05, -0.10039755702018738, -0.11877986788749695, -0.003760529914870858, -0.03310779854655266, -0.0019160023657605052], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002415717113763094, -4.529942543740617e-06, -0.006377108860760927, -0.22183053195476532, -0.13342556357383728, -0.039136193692684174, -0.0048474413342773914, -0.21315521001815796, -0.032287370413541794, -0.33075428009033203, -0.09285625070333481, -0.33040302991867065, -0.10869114100933075, -0.14225319027900696, -0.002570065436884761, -0.0005627478822134435, -0.0016086269170045853], "finish_reason": "stop"}, {"text": " data.dtypes.values.count(np.dtype('float64')) + data.dtypes.values.count(np.dtype('int64')) != len(data.dtypes.values):", "tokens": [" data", ".", "d", "types", ".", "values", ".", "count", "(", "np", ".", "d", "type", "('", "float", "6", "4", "'))", " +", " data", ".", "d", "types", ".", "values", ".", "count", "(", "np", ".", "d", "type", "('", "int", "6", "4", "'))", " ", "!", "=", " len", "(", "data", ".", "d", "types", ".", "values", "):", "\n"], "logprobs": [-0.6888232231140137, -0.17638786137104034, -1.237744927406311, -0.0002079985715681687, -0.2348775863647461, -1.5671621561050415, -0.0241815447807312, -1.1087623834609985, -0.34084486961364746, -0.1296536773443222, -2.6940935640595853e-05, -0.08911121636629105, -3.933898824470816e-06, -0.8806917071342468, -0.40305355191230774, -0.13213063776493073, -4.768370445162873e-07, -0.001589822000823915, -0.5050833821296692, -0.04888264462351799, -0.00039283663500100374, -8.618460560683161e-05, -2.6225699912174605e-05, -0.00019786784832831472, -0.000398198957554996, -4.970903682988137e-05, -3.8265450712060556e-05, -0.0012968709925189614, -0.015691617503762245, -7.033323527139146e-06, -0.0006755692302249372, -4.172238186583854e-05, -0.005434026941657066, -0.008128301240503788, -0.016968896612524986, -1.0132738680113107e-05, -0.010490748099982738, -0.08294378966093063, -3.099436753473128e-06, -0.0007614573696628213, -0.2676803767681122, -0.0005594118847511709, -0.016375435516238213, -0.0027921521104872227, -0.2814338207244873, -1.2397689715726301e-05, -0.11422012746334076, -0.0006304183625616133, -0.015549609437584877, -0.00573240639641881], "finish_reason": "stop"}, {"text": " ValueError(\"data should not contain values that are not numeric.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " contain", " values", " that", " are", " not", " numeric", ".", "\"", ")", "\n"], "logprobs": [-0.0014457975048571825, -2.861018856492592e-06, -0.011246973648667336, -0.016861414536833763, -0.6006709933280945, -0.15496304631233215, -3.3902459144592285, -0.015652772039175034, -1.94460129737854, -0.08422878384590149, -0.018471721559762955, -0.015286196954548359, -0.04125799611210823, -0.05162215232849121, -0.002283705398440361, -0.00043501926120370626, -0.0013959197094663978], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.11151069402694702, -0.03633233159780502, -0.00017391123401466757, -0.02338205650448799, -3.576272320060525e-06, -4.887569048150908e-06, -0.0012236495967954397, -0.03392674773931503, -0.04077285900712013, -0.0012855607783421874], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a fraction between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " fraction", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006212450098246336, -9.775113539944869e-06, -0.015355695970356464, -0.011222808621823788, -0.02985524944961071, -0.010995865799486637, -0.0010801678290590644, -0.08162803202867508, -0.019802024587988853, -1.462090015411377, -1.9289342164993286, -0.13749873638153076, -0.06310759484767914, -0.00030894274823367596, -0.00783749669790268, -0.0012432949151843786, -0.0002746204845607281, -0.12433509528636932, -0.0035317684523761272, -0.00034791138023138046, -0.0008968859910964966], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08191440999507904, -0.04928987845778465, -0.0002898749662563205, -0.02258787304162979, -1.6689286894688848e-06, -3.099436753473128e-06, -0.0010436094598844647, -0.03764484077692032, -0.0673840343952179, -0.0016993143362924457], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002110279630869627, -8.22540732769994e-06, -0.01451751310378313, -0.012682733125984669, -0.02986196056008339, -0.007646576501429081, -0.0060651772655546665, -0.0703747570514679, -0.004862151574343443, -0.10219398140907288, -0.0747147798538208, -0.2674734890460968, -0.004294103477150202, -0.0004128557338844985, -0.002613702090457082], "finish_reason": "stop"}, {"text": " data[[col for col in data.columns if col != target_column]]", "tokens": [" data", "[[", "col", " for", " col", " in", " data", ".", "columns", " if", " col", " ", "!", "=", " target", "_", "column", "]]", "\n"], "logprobs": [-0.03395036980509758, -2.879819869995117, -0.5479704737663269, -0.03309430554509163, -0.000548331590835005, -0.00014673586701974273, -0.010786443017423153, -0.10928614437580109, -0.00043847484630532563, -0.019058676436543465, -0.014302010647952557, -0.09930072724819183, -9.536738616588991e-07, -8.630380034446716e-05, -0.012547243386507034, -3.862306402879767e-05, -5.722029527532868e-06, -0.004651084542274475, -0.08493871241807938], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0030916770920157433, -0.04490886256098747, -0.0002760506176855415, -1.9073468138230965e-06, -3.099436753473128e-06, -0.00012265883560758084, -0.018593423068523407], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009715770371258259, -3.218599158572033e-05, -0.0018713833997026086, -0.0011536378879100084, -0.002595986006781459, -8.034383063204587e-05, -8.22540732769994e-06, -0.00041368984966538846, -0.002163928234949708, -2.7656173188006505e-05, -0.0007088055717758834, -0.005729561671614647, -0.025938335806131363, -1.4185804502631072e-05, -2.622600959512056e-06, -1.5497195136049413e-06, -3.576278118089249e-07, -0.0006811682251282036, -0.11344917118549347, -0.0108132129535079, -0.03864544257521629, -0.004560783039778471, -0.06953553855419159, -7.510157047363464e-06, -2.9802276912960224e-06, -0.047015052288770676, -0.020871881395578384, -3.2186455882765586e-06, -6.556489552167477e-06, -0.002993152942508459, -0.0215897336602211, -3.099436753473128e-06, -8.22540732769994e-06, -0.03849220275878906, -0.0036092158406972885, -3.2186455882765586e-06, -4.887569048150908e-06, -0.010081678628921509, -0.024209588766098022], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0018057008273899555, -1.9073468138230965e-06, -1.1920928244535389e-07, -0.015550078824162483, -0.8423900604248047, -0.00014685506175737828, -9.083335316972807e-05, -0.0005987281911075115, -0.0278881024569273, -0.00013767725613433868, -0.004157946910709143, -0.012080716900527477, -0.00011383838864276186, -8.344646857949556e-07, -0.0009095107670873404, -0.011393718421459198], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.031214065849781036, -5.781483559985645e-05, -7.390948667307384e-06, -0.00011467275908216834, -0.0002351722796447575, -0.0028489737305790186, -0.001904699020087719, -0.0005659647285938263, -0.020062381401658058, -7.56950321374461e-05, -1.9073468138230965e-06, -0.2756553888320923, -0.22592583298683167], "finish_reason": "stop"}], "metrics": {"energy": 1255.0304759654994, "energy_per_token": 4.4191213942447165, "time": 31.944752, "time_per_token": 0.11248152112676056}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"The provided data is not a DataFrame!\")", "tokens": [" Value", "Error", "(", "\"", "The", " provided", " data", " is", " not", " a", " Data", "Frame", "!", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -3.1451408863067627, -0.8251227140426636, -0.15782774984836578, -0.4794737994670868, -0.022192934527993202, -0.10596956312656403, -0.4407304525375366, -0.023290520533919334, -2.688077926635742, -0.009776213206350803, -0.002082205144688487, -0.007677216082811356], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.1595228761434555, -0.004364132881164551, -0.08302728831768036, -0.014441375620663166, -0.0007659838884137571], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain at least one row.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " at", " least", " one", " row", ".", "\"", ")", "\n"], "logprobs": [-0.00037150635034777224, -2.3841830625315197e-06, -0.025204535573720932, -0.003570492845028639, -0.073797807097435, -0.3551676273345947, -2.9134633541107178, -0.7703049182891846, -0.029304005205631256, -0.11653017997741699, -0.3901812732219696, -0.11073359102010727, -0.002432247158139944, -0.0003768687602132559, -0.0008987916517071426], "finish_reason": "stop"}, {"text": " target_column not in list(data.columns):", "tokens": [" target", "_", "column", " not", " in", " list", "(", "data", ".", "columns", "):", "\n"], "logprobs": [-0.3725709319114685, -0.000179036331246607, -1.2516897186287679e-05, -0.010060318745672703, -2.8132995794294402e-05, -2.584832191467285, -0.00020811776630580425, -0.00228739227168262, -0.3038422763347626, -0.06875026226043701, -0.32185930013656616, -0.0023461454547941685], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be in data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0019876263104379177, -4.6491513785440475e-06, -0.005614227149635553, -0.225860595703125, -0.1273442804813385, -0.05128030478954315, -0.005218574311584234, -0.19074746966362, -0.034212253987789154, -2.425452709197998, -0.4852304756641388, -0.23967823386192322, -0.19545558094978333, -0.0004618293314706534, -0.0015623279614374042], "finish_reason": "stop"}, {"text": " data.dtypes[target_column].kind not in ('i', 'f'):", "tokens": [" data", ".", "d", "types", "[", "target", "_", "column", "]", ".", "kind", " not", " in", " ('", "i", "'", ",", " '", "f", "')", ":", "\n"], "logprobs": [-0.6814517378807068, -0.21381232142448425, -1.1987297534942627, -0.0002588890492916107, -1.9493192434310913, -0.021701257675886154, -2.50339189733495e-06, -2.50339189733495e-06, -0.0003693613689392805, -0.6736859679222107, -0.7010632157325745, -0.15980081260204315, -5.876845170860179e-05, -1.0166714191436768, -0.025289736688137054, -0.0003334919747430831, -0.001378896413370967, -0.12474914640188217, -0.14086364209651947, -0.3379213511943817, -0.020070793107151985, -0.018668776378035545], "finish_reason": "stop"}, {"text": " ValueError(\"Only numeric values are allowed in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "Only", " numeric", " values", " are", " allowed", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.0011428022990003228, -3.6954811548639555e-06, -0.013738124631345272, -0.02421528846025467, -2.848320484161377, -0.31715962290763855, -0.3667645752429962, -0.6713659763336182, -0.2117202877998352, -0.3397499620914459, -0.7369619607925415, -0.9489175081253052, -0.012784074060618877, -0.12215633690357208, -0.004636845551431179, -0.000597179401665926, -0.0027309288270771503], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.12348118424415588, -0.039135850965976715, -0.00014578233822248876, -0.026818765327334404, -3.814689989667386e-06, -5.364403477869928e-06, -0.0009141556802205741, -0.02887325920164585, -0.041298605501651764, -0.0015901790466159582], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006973695708438754, -1.168244216387393e-05, -0.015926530584692955, -0.010693156160414219, -0.03413541242480278, -0.010938090272247791, -0.0010742137674242258, -0.07827659696340561, -0.023343859240412712, -0.6613975167274475, -0.029644301161170006, -0.0004612335760612041, -0.010902480222284794, -0.0023676715791225433, -0.0005990855861455202, -0.16427981853485107, -0.006451848894357681, -0.0002949994814116508, -0.002107900334522128], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.0935010313987732, -0.03985835611820221, -0.0004060635983478278, -0.027002811431884766, -1.5497195136049413e-06, -3.576272320060525e-06, -0.0010894560255110264, -0.03999924659729004, -0.05503350496292114, -0.0018240257631987333], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.001738823833875358, -6.198863957251888e-06, -0.012740525417029858, -0.012847273610532284, -0.033573150634765625, -0.006614812649786472, -0.006081173196434975, -0.08202259242534637, -0.005573329050093889, -0.08796536177396774, -0.07884392142295837, -0.2395477443933487, -0.004708275198936462, -0.0003948624071199447, -0.002572205848991871], "finish_reason": "stop"}, {"text": " data[[col for col in data.columns if col != target_column]]", "tokens": [" data", "[[", "col", " for", " col", " in", " data", ".", "columns", " if", " col", " ", "!", "=", " target", "_", "column", "]]", "\n"], "logprobs": [-0.027950122952461243, -2.8580002784729004, -0.6185575723648071, -0.028541389852762222, -0.0009371418273076415, -0.00016640232934150845, -0.008469614200294018, -0.10279124975204468, -0.0005193791585043073, -0.020137039944529533, -0.011447814293205738, -0.08696430921554565, -9.536738616588991e-07, -9.548207890475169e-05, -0.011081814765930176, -3.71926071238704e-05, -7.629365427419543e-06, -0.005438769701868296, -0.07997440546751022], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003542578313499689, -0.04176999256014824, -0.0002694958820939064, -1.6689286894688848e-06, -4.0531076592742465e-06, -0.00012218205665703863, -0.01722600683569908], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.008686731569468975, -2.8013790142722428e-05, -0.0021967582870274782, -0.0010059778578579426, -0.0022511158604174852, -8.940297266235575e-05, -1.1324817933200393e-05, -0.0003939091111533344, -0.0019012485863640904, -3.123234637314454e-05, -0.0006549597019329667, -0.005248695611953735, -0.02421412616968155, -1.7523612768854946e-05, -2.50339189733495e-06, -2.264974000354414e-06, -3.576278118089249e-07, -0.0006071869283914566, -0.13591350615024567, -0.008260725997388363, -0.03833572939038277, -0.003943287767469883, -0.061031926423311234, -8.22540732769994e-06, -4.6491513785440475e-06, -0.03661715239286423, -0.02004789188504219, -4.0531076592742465e-06, -6.079655122448457e-06, -0.002323310589417815, -0.022439846768975258, -2.7418097943154862e-06, -5.483612312673358e-06, -0.03336586803197861, -0.00318971648812294, -3.2186455882765586e-06, -2.50339189733495e-06, -0.00855814479291439, -0.020871298387646675], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001622313866391778, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.015996454283595085, -0.8418636322021484, -0.00014161060971673578, -7.188061863416806e-05, -0.0007363230688497424, -0.02903272584080696, -0.00011228884250158444, -0.004838780965656042, -0.011222808621823788, -0.00011038171214750037, -9.536738616588991e-07, -0.0009298768127337098, -0.010549257509410381], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.03173307701945305, -5.864924969500862e-05, -8.702239938429557e-06, -0.00011073929636040702, -0.00028046013903804123, -0.0029380035120993853, -0.0019375376868993044, -0.0005610798834823072, -0.014882021583616734, -7.021180499577895e-05, -1.9073468138230965e-06, -0.283538281917572], "finish_reason": "stop"}], "metrics": {"energy": 1126.8015179758067, "energy_per_token": 4.350585011489601, "time": 29.67323, "time_per_token": 0.1145684555984556}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(f'data is not a DataFrame but of type {type(data)}')", "tokens": [" Value", "Error", "(", "f", "'", "data", " is", " not", " a", " Data", "Frame", " but", " of", " type", " {", "type", "(", "data", ")}", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -1.427030086517334, -1.2279248237609863, -0.5159211754798889, -0.9895172715187073, -0.13407306373119354, -0.2864256799221039, -0.30941885709762573, -0.02025001123547554, -1.799493432044983, -1.786159873008728, -0.04008926451206207, -0.1583286076784134, -0.024443207308650017, -0.0006799769471399486, -0.0010461101774126291, -0.07564272731542587, -0.14010073244571686, -0.002334966091439128], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.13992424309253693, -0.0036601710598915815, -0.0754266306757927, -0.016204437240958214, -0.0008856903295964003], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00044919890933670104, -1.9073468138230965e-06, -0.026378009468317032, -0.0032191856298595667, -0.0865086168050766, -1.7219048738479614, -0.05592646077275276, -0.19923022389411926, -0.013164627365767956, -0.00040463366894982755, -0.0010461101774126291], "finish_reason": "stop"}, {"text": " target_column not in list(data.columns.values):", "tokens": [" target", "_", "column", " not", " in", " list", "(", "data", ".", "columns", ".", "values", "):", "\n"], "logprobs": [-0.4205248951911926, -0.0002051381452474743, -1.2636104656849056e-05, -0.008672667667269707, -3.218599158572033e-05, -2.4646730422973633, -0.00016389934171456844, -0.0022958368062973022, -0.24483945965766907, -0.07067670673131943, -1.382778525352478, -0.008875561878085136, -0.0027453135699033737, -0.0032913105096668005], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be in data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.001819028053432703, -5.125986263010418e-06, -0.005881503224372864, -0.20568464696407318, -0.1385325789451599, -0.04298815131187439, -0.006243604701012373, -0.16972734034061432, -0.02894170582294464, -2.470383644104004, -0.46852606534957886, -0.22023911774158478, -0.21493005752563477, -0.0004940004437230527, -0.0014321081107482314], "finish_reason": "stop"}, {"text": " data.dtypes.astype(str).nunique() != 2:", "tokens": [" data", ".", "d", "types", ".", "ast", "ype", "(", "str", ")", ".", "nun", "ique", "()", " ", "!", "=", " ", "2", ":", "\n"], "logprobs": [-0.6715927720069885, -0.18625035881996155, -1.2416322231292725, -0.00025245340657420456, -0.17930273711681366, -2.1212871074676514, -0.00013958434283267707, -0.0021046886686235666, -0.05395035073161125, -0.0004689785710070282, -0.00020787939138244838, -0.2329855114221573, -0.00011920218821614981, -0.00904191192239523, -0.29840439558029175, 0.0, -1.07287787614041e-05, -0.013265330344438553, -0.9386141896247864, -0.6783141493797302, -0.12256813049316406], "finish_reason": "stop"}, {"text": " ValueError(\"The dataframe should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "The", " data", "frame", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.001177571015432477, -3.576272320060525e-06, -0.011809437535703182, -0.02268378622829914, -3.1956710815429688, -2.5303945541381836, -2.1046700477600098, -0.29732856154441833, -0.5430236458778381, -0.13692538440227509, -0.3454377353191376, -0.17959195375442505, -0.13782097399234772, -0.003574531525373459, -0.0005115154199302197, -0.0021098037250339985], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.07669050246477127, -0.0325431153178215, -0.0001928620331455022, -0.023386016488075256, -2.7418097943154862e-06, -4.768360213347478e-06, -0.001029200037010014, -0.03808467835187912, -0.04348316788673401, -0.0015711355954408646], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.000685576000250876, -1.4305012882687151e-05, -0.016423048451542854, -0.015273752622306347, -0.028843609616160393, -0.01216315757483244, -0.0008666335488669574, -0.08705631643533707, -0.02430499717593193, -0.6247446537017822, -0.03460903838276863, -0.0004960260121151805, -0.009076879359781742, -0.0016575419576838613, -0.0007195267826318741, -0.20562554895877838, -0.006444150116294622, -0.00032455421751365066, -0.0018488947534933686], "finish_reason": "stop"}, {"text": " random_state is not None and random_state % 1 != 0:", "tokens": [" random", "_", "state", " is", " not", " None", " and", " random", "_", "state", " %", " ", "1", " ", "!", "=", " ", "0", ":", "\n"], "logprobs": [-2.6269824504852295, -9.536697689327411e-06, -5.769562994828448e-05, -0.15848295390605927, -0.20129384100437164, -0.029097918421030045, -0.10312410444021225, -2.9742727279663086, -4.327203714638017e-05, -2.586808113846928e-05, -1.4067678451538086, -0.005525435321033001, -0.010956602171063423, -0.020198257640004158, -5.960462772236497e-07, -0.00010406429646536708, -0.004957051947712898, -0.00025340684805996716, -0.011219625361263752, -0.00485574547201395], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002633082214742899, -7.271740287251305e-06, -0.013396606780588627, -0.011786346323788166, -0.03803395479917526, -0.00563402334228158, -0.004280453082174063, -0.06701777130365372, -0.005898331757634878, -0.10614485293626785, -0.07085929811000824, -0.2879081964492798, -0.0048020039685070515, -0.0004524161049630493, -0.002799284877255559], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.03380482271313667, -0.13515138626098633, -0.08277897536754608, -0.033726222813129425, -1.0901246070861816, -8.22540732769994e-06, -1.5497195136049413e-06, -0.0017976091476157308, -0.02577802538871765, -0.07523425668478012, -0.011278917081654072, -0.010389764793217182, -0.06339295208454132], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0033424007706344128, -0.0428101047873497, -0.00031549722189083695, -1.9073468138230965e-06, -4.768360213347478e-06, -0.0001299296854995191, -0.0187174491584301], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.012191656976938248, -3.862306402879767e-05, -0.0017163321608677506, -0.0008958140970207751, -0.0030051569920033216, -9.011816291604191e-05, -8.821448318485636e-06, -0.00036864637513644993, -0.0022959557827562094, -3.182837463100441e-05, -0.0006708040600642562, -0.00567491864785552, -0.021166041493415833, -1.764281842042692e-05, -2.861018856492592e-06, -2.3841830625315197e-06, -3.576278118089249e-07, -0.0006405447493307292, -0.11839351803064346, -0.00721373688429594, -0.040253251791000366, -0.004219201859086752, -0.06179807335138321, -7.271740287251305e-06, -2.622600959512056e-06, -0.047713134437799454, -0.020384810864925385, -3.4570634852570947e-06, -6.794906312279636e-06, -0.0025153683964163065, -0.022409889847040176, -2.7418097943154862e-06, -7.867782187531702e-06, -0.027891695499420166, -0.0038206216413527727, -3.4570634852570947e-06, -1.9073468138230965e-06, -0.010479895398020744, -0.022014647722244263], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0016626594588160515, -1.311301275563892e-06, -1.1920928244535389e-07, -0.019554926082491875, -0.5875640511512756], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.032446179538965225, -7.128461584215984e-05, -7.867782187531702e-06, -0.00010358751023886725, -0.0002224197960458696, -0.0022034193389117718, -0.0016859853640198708, -0.00047708096099086106, -0.01897960901260376, -5.936446541454643e-05, -2.50339189733495e-06, -0.2959655821323395], "finish_reason": "stop"}], "metrics": {"energy": 1140.5604590225214, "energy_per_token": 4.508144106808385, "time": 29.636694, "time_per_token": 0.11714108300395257}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data has to be of type pandas.DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " has", " to", " be", " of", " type", " pandas", ".", "DataFrame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -2.641284942626953, -0.014456179924309254, -0.00687092961743474, -1.3215199708938599, -0.01691076159477234, -0.9971497654914856, -0.1397787183523178, -0.010933255776762962, -0.192769855260849, -0.0013813963159918785, -0.005323875695466995], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4307592213153839, -0.0002422039397060871, -1.3112935448589269e-05, -0.008413583971560001, -2.658331868587993e-05, -0.09014095366001129, -0.1000177338719368, -0.0049308366142213345, -0.029317548498511314, -0.0021713031455874443], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of the given data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " the", " given", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002709529362618923, -5.602820692729438e-06, -0.006777394562959671, -0.24273090064525604, -0.1346130520105362, -0.04276350513100624, -0.004433089401572943, -0.1999247521162033, -0.031615275889635086, -0.31777074933052063, -0.06820780038833618, -0.31785160303115845, -2.659090042114258, -2.9649596214294434, -0.4628673195838928, -0.22856467962265015, -0.0058026909828186035, -0.0006347072194330394, -0.001587560516782105], "finish_reason": "stop"}, {"text": " not np.issubdtype(data.dtypes[target_column], np.number):", "tokens": [" not", " np", ".", "iss", "ub", "d", "type", "(", "data", ".", "d", "types", "[", "target", "_", "column", "]", ",", " np", ".", "number", "):", "\n"], "logprobs": [-1.0520260334014893, -1.883756160736084, -2.0861407392658293e-05, -0.12719807028770447, -0.008555899374186993, -2.622600959512056e-06, -8.380061626667157e-05, -0.00023445718397852033, -0.03989318013191223, -0.11270914226770401, -0.1988171637058258, -2.3245540432981215e-05, -0.8123266696929932, -0.005536934826523066, -7.748573807475623e-06, -3.6954811548639555e-06, -0.00013124081306159496, -0.019775260239839554, -0.009657684713602066, -5.245195097813848e-06, -0.008234006352722645, -0.00952686183154583, -0.005455842707306147], "finish_reason": "stop"}, {"text": " ValueError(\"data should only contain values of numeric type.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " only", " contain", " values", " of", " numeric", " type", ".", "\"", ")", "\n"], "logprobs": [-0.0010480155469849706, -4.172316494077677e-06, -0.010607526637613773, -0.02176121436059475, -0.6087427735328674, -0.1516052931547165, -0.9307193756103516, -0.025208719074726105, -2.7978198528289795, -1.7390532493591309, -0.34747815132141113, -0.8563271164894104, -0.03899289295077324, -0.0017528659664094448, -0.000196556793525815, -0.0015480450820177794], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.0960584506392479, -0.03814629837870598, -0.00018094333063345402, -0.03472614288330078, -3.4570634852570947e-06, -3.576272320060525e-06, -0.001058137626387179, -0.03636176139116287, -0.050005994737148285, -0.0014518683310598135], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007856381707824767, -1.2278481335670222e-05, -0.013072149828076363, -0.011945145204663277, -0.02742612734436989, -0.013761994428932667, -0.0010376551654189825, -0.07085796445608139, -0.024544060230255127, -0.6821648478507996, -0.02511153742671013, -0.0004144048143643886, -0.010917219333350658, -0.0023551841732114553, -0.0005772831500507891, -0.1589978188276291, -0.006800246424973011, -0.00031025364296510816, -0.0018672188743948936], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int) or isinstance(random_state, bool):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", ")", " or", " isinstance", "(", "random", "_", "state", ",", " bool", "):", "\n"], "logprobs": [-0.07668343931436539, -0.037074096500873566, -0.0003723404952324927, -0.02054879069328308, -1.4305104514278355e-06, -2.7418097943154862e-06, -0.0010807631770148873, -0.04223933070898056, -2.618933916091919, -0.056879326701164246, -1.0561058521270752, -6.103329360485077e-05, -0.0038577911909669638, -3.933898824470816e-06, -1.5497195136049413e-06, -0.0006256530177779496, -0.04626230150461197, -0.010800241492688656, -0.010231899097561836], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0022702652495354414, -8.940656698541716e-06, -0.013736949302256107, -0.014135828241705894, -0.03050205111503601, -0.005711901001632214, -0.0057448516599833965, -0.07129375636577606, -0.004604926332831383, -0.10035819560289383, -0.09421146661043167, -0.25555700063705444, -0.004703529179096222, -0.0004048719711136073, -0.002738299546763301], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.031196502968668938, -0.15006597340106964, -0.0878279060125351, -0.03959439694881439, -0.31779956817626953, -0.5222618579864502, -0.0043462105095386505, -4.887569048150908e-06, -3.576278118089249e-07, -0.06336542218923569, -0.0640014261007309], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.002725697821006179, -0.04011056572198868, -0.0003252692404203117, -1.7881377516459906e-06, -3.2186455882765586e-06, -0.00012885693286079913, -0.022148745134472847], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.009248274378478527, -3.302042750874534e-05, -0.0017206162447109818, -0.0009421439026482403, -0.002084703417494893, -7.903263758635148e-05, -7.986990567587782e-06, -0.00045753977610729635, -0.0021950930822640657, -3.397406908334233e-05, -0.0010724276071414351, -0.0073094796389341354, -0.018648182973265648, -1.764281842042692e-05, -3.2186455882765586e-06, -2.145764938177308e-06, -3.576278118089249e-07, -0.0005623904871754348, -1.797359824180603], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.001566136721521616, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.015694785863161087, -0.7919239401817322, -0.00012420836719684303, -7.199982064776123e-05, -0.0007338214782066643, -0.03230976313352585, -0.00010907054820563644, -0.003671929705888033, -0.012317304499447346, -6.90197994117625e-05, -9.536738616588991e-07, -0.0008152975351549685, -0.010846232064068317], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.027794774621725082, -7.1403817855753e-05, -7.510157047363464e-06, -0.00010978573118336499, -0.00016723664884921163, -0.002535464009270072, -0.002556985942646861, -0.00048196621355600655, -0.016647707670927048, -5.6265202147187665e-05, -3.576272320060525e-06, -0.30262327194213867, -0.23768508434295654], "finish_reason": "stop"}], "metrics": {"energy": 1110.8872966842634, "energy_per_token": 4.609490857611052, "time": 28.632214, "time_per_token": 0.11880586721991701}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not a DataFrame')", "tokens": [" Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -0.11166571825742722, -0.2369120866060257, -0.01571250520646572, -0.11262649297714233, -0.0029496517963707447], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data is empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -1.5783469676971436, -0.05181844159960747, -0.2234431505203247, -0.013084975071251392, -0.0004297763225622475, -0.000979539705440402], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.46760323643684387, -0.00022230061586014926, -1.2755313036905136e-05, -0.009073572233319283, -3.361645576660521e-05, -0.10506204515695572, -0.08503419160842896, -0.003479024861007929, -0.03209240362048149, -0.0018951804377138615], "finish_reason": "stop"}, {"text": " ValueError(\"target_column is not a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " is", " not", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002273952355608344, -4.887569048150908e-06, -0.007405094336718321, -0.1954435110092163, -0.12541376054286957, -0.050225164741277695, -0.005381502211093903, -2.224759101867676, -0.01652389205992222, -0.2894273102283478, -0.1135014221072197, -0.31077298521995544, -0.08113626390695572, -0.2289709448814392, -0.0039603859186172485, -0.0006667536217719316, -0.0020139189437031746], "finish_reason": "stop"}, {"text": " not data[target_column].dtype in [np.float64, np.int64]:", "tokens": [" not", " data", "[", "target", "_", "column", "]", ".", "d", "type", " in", " [", "np", ".", "float", "6", "4", ",", " np", ".", "int", "6", "4", "]:", "\n"], "logprobs": [-1.084563136100769, -0.29526016116142273, -0.8649472594261169, -0.3668466806411743, -9.536738616588991e-07, -8.22540732769994e-06, -0.0004899493651464581, -2.1457441107486375e-05, -1.5686492919921875, -0.01113816723227501, -1.362823486328125, -0.726444661617279, -0.17300103604793549, -9.65590606938349e-06, -1.133746862411499, -0.13332541286945343, -9.536697689327411e-06, -0.0108872689306736, -0.051822174340486526, -1.5497195136049413e-06, -0.08945716172456741, -0.08016312122344971, -8.344646857949556e-07, -0.09173502027988434, -0.006220977287739515], "finish_reason": "stop"}, {"text": " ValueError(\"data contains non-numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " contains", " non", "-", "numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012836558744311333, -3.099436753473128e-06, -0.01123589277267456, -0.02137715183198452, -0.5931424498558044, -2.6727828979492188, -1.2921929359436035, -0.1533595621585846, -0.04447874426841736, -0.06633783131837845, -0.11477146297693253, -0.007388646714389324, -0.0004451475979294628, -0.0019991665612906218], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08654239773750305, -0.04529698193073273, -0.00016056202002801, -0.038864247500896454, -3.3378546504536644e-06, -4.410734163684538e-06, -0.001046467456035316, -0.036540381610393524, -0.03300826624035835, -0.0017640519654378295], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006804534932598472, -9.536697689327411e-06, -0.018673457205295563, -0.011736745946109295, -0.029119687154889107, -0.011194752529263496, -0.0010305099422112107, -0.07882783561944962, -0.020750807598233223, -0.6616566181182861, -0.03098190762102604, -0.000428108120104298, -0.010062206536531448, -0.0017794027226045728, -0.0007043979712761939, -0.1789318025112152, -0.004266208969056606, -0.00030727434204891324, -0.0017810686258599162], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08476229012012482, -0.04295560345053673, -0.00036971885128878057, -0.02337646670639515, -1.5497195136049413e-06, -3.099436753473128e-06, -0.001135776867158711, -0.03588344529271126, -0.057860199362039566, -0.0015443552983924747], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer value.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", " value", ".", "\"", ")", "\n"], "logprobs": [-0.0030822886619716883, -8.4638240878121e-06, -0.012804081663489342, -0.011643783189356327, -0.03683651611208916, -0.005876407492905855, -0.006823570933192968, -0.08536633849143982, -0.005338816437870264, -0.09106559306383133, -0.07449128478765488, -2.934396982192993, -0.2632778584957123, -0.004737936891615391, -0.00041106835124082863, -0.002424398437142372], "finish_reason": "stop"}, {"text": " data.drop(target_column, axis=1)", "tokens": [" data", ".", "drop", "(", "target", "_", "column", ",", " axis", "=", "1", ")", "\n"], "logprobs": [-0.032358814030885696, -0.17102111876010895, -0.07421572506427765, -0.03371204808354378, -1.44415283203125, -1.0609570381348021e-05, -2.3841830625315197e-06, -0.0017156180692836642, -0.02663480117917061, -0.0707981064915657, -0.009420349262654781, -0.008630949072539806, -0.05964836850762367], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0029848332051187754, -0.0386110320687294, -0.0003808011533692479, -1.5497195136049413e-06, -4.529942543740617e-06, -0.00011014331539627165, -0.018402907997369766], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.008593602105975151, -2.932505594799295e-05, -0.002245525596663356, -0.0008185135084204376, -0.002231014659628272, -7.795983401592821e-05, -8.940656698541716e-06, -0.0004148814477957785, -0.00204449356533587, -3.433168603805825e-05, -0.0006080209277570248, -0.005210866220295429, -0.029881281778216362, -1.5020257706055418e-05, -2.3841830625315197e-06, -1.9073468138230965e-06, -2.3841855067985307e-07, -0.000566203030757606, -0.16453862190246582, -0.010193785652518272, -0.04416513070464134, -0.004674934316426516, -0.05848262086510658, -7.390948667307384e-06, -2.861018856492592e-06, -0.042329493910074234, -0.019768714904785156, -3.2186455882765586e-06, -5.722029527532868e-06, -0.0027708730194717646, -0.02274671383202076, -2.264974000354414e-06, -1.1086402082582936e-05, -0.03653578460216522, -0.0037682494148612022, -3.814689989667386e-06, -3.099436753473128e-06, -0.008993593044579029, -0.019524766132235527], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0017160940915346146, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.01746630109846592, -0.8424197435379028, -9.703165414975956e-05, -7.939023635117337e-05, -0.0006411403883248568, -0.03518763557076454, -9.214453893946484e-05, -0.004495277069509029, -0.014663073234260082, -9.214453893946484e-05, -1.1920922133867862e-06, -0.0008680627797730267, -0.00867503136396408], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.028053173795342445, -6.4490144723095e-05, -8.22540732769994e-06, -0.00010752100206445903, -0.00022909401741344482, -0.0028029698878526688, -0.0018541302997618914, -0.0004700509598478675, -0.013615831732749939, -5.054346183896996e-05, -2.622600959512056e-06, -0.2912980616092682, -0.2137639969587326], "finish_reason": "stop"}], "metrics": {"energy": 1107.784360521316, "energy_per_token": 4.503188457403724, "time": 28.592089, "time_per_token": 0.11622800406504065}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data must be a pandas dataframe\")", "tokens": [" Value", "Error", "(", "\"", "data", " must", " be", " a", " pandas", " data", "frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -0.5457839965820312, -0.006200363393872976, -0.36275845766067505, -1.2817659378051758, -2.9265832901000977, -0.12222269177436829, -0.14715072512626648, -0.0013980624498799443, -0.006596219725906849], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " not isinstance(target_column, str):", "tokens": [" not", " isinstance", "(", "target", "_", "column", ",", " str", "):", "\n"], "logprobs": [-1.1974523067474365, -1.537463665008545, -0.00021324267436284572, -0.4584483504295349, -3.2305197237292305e-05, -1.1801649634435307e-05, -0.0010619483655318618, -0.023303797468543053, -0.07626401633024216, -0.0011162485461682081], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column in data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -0.21941259503364563, -0.15496733784675598, -0.05659650266170502, -0.005887191742658615, -0.2402101457118988, -0.02765992470085621, -0.2976752817630768, -0.07857043296098709, -1.625972032546997, -0.15573491156101227, -0.1295381784439087, -0.0030626794323325157, -0.0004080893413629383, -0.0015401893761008978], "finish_reason": "stop"}, {"text": " data.isnull().values.any():", "tokens": [" data", ".", "is", "null", "()", ".", "values", ".", "any", "():", "\n"], "logprobs": [-0.7429885268211365, -0.15592536330223083, -2.0749902725219727, -1.5183781385421753, -0.002029028022661805, -9.870042413240299e-05, -0.21302227675914764, -7.045020902296528e-05, -0.0045763286761939526, -0.03399796038866043, -0.006755015812814236], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.00112255965359509, -4.0531076592742465e-06, -0.012332611717283726, -0.02156558446586132, -0.6842400431632996, -0.16214105486869812, -0.479764461517334, -0.10393475741147995, -0.23010635375976562, -0.11308673024177551, -0.04151545837521553, -0.0015750633319839835, -0.00026008085114881396, -0.0009637002367526293], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10722703486680984, -0.03392006456851959, -0.00019035911827813834, -0.02440144307911396, -4.410734163684538e-06, -5.602820692729438e-06, -0.0011020784731954336, -0.03783493861556053, -0.03812415152788162, -0.0016193384071812034], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a fraction between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " fraction", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0007427555974572897, -1.156323378381785e-05, -0.014517747797071934, -0.01033738162368536, -0.02567276544868946, -0.013460473157465458, -0.0009572691051289439, -0.07898349314928055, -0.021172810345888138, -1.473163366317749, -1.947127342224121, -0.16529706120491028, -0.059687111526727676, -0.0003873551613651216, -0.008051439188420773, -0.0011757849715650082, -0.00027366707217879593, -0.10336225479841232, -0.0032314248383045197, -0.00037579628406092525, -0.0010216975351795554], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08951711654663086, -0.043948281556367874, -0.00040284625720232725, -0.021701375022530556, -1.4305104514278355e-06, -2.622600959512056e-06, -0.0010362261673435569, -0.036670129746198654, -0.06750449538230896, -0.001844849088229239], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002284181071445346, -6.794906312279636e-06, -0.013671571388840675, -0.012612930499017239, -0.0326041541993618, -0.006007471587508917, -0.005927128717303276, -0.06952264159917831, -0.005142437759786844, -0.0967351421713829, -0.06375696510076523, -0.2625402808189392, -0.0036942586302757263, -0.000392598332837224, -0.0025601964443922043], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.032273635268211365, -0.12251138687133789, -0.09753704071044922, -0.036421533674001694, -0.39513665437698364, -1.057375192642212, -0.001150541938841343, -2.753696753643453e-05, -4.6491513785440475e-06, -0.1057283878326416, -0.049474939703941345], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0027585094794631004, -0.047912124544382095, -0.00025781645672395825, -2.145764938177308e-06, -5.960446742392378e-06, -0.00012182447244413197, -0.020563973113894463], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.01024098414927721, -3.40932747349143e-05, -0.0019666869193315506, -0.0009951406391337514, -0.001958001870661974, -7.009260298218578e-05, -9.298280929215252e-06, -0.0005161621957086027, -0.002753992099314928, -2.312633478140924e-05, -0.0007023728103376925, -0.005781357176601887, -0.020539214834570885, -1.9788545614574105e-05, -3.4570634852570947e-06, -2.3841830625315197e-06, -3.576278118089249e-07, -0.0005864569102413952, -0.12580150365829468, -0.010481900535523891, -0.035828813910484314, -0.004613114055246115, -0.061560019850730896, -7.629365427419543e-06, -2.9802276912960224e-06, -0.047474205493927, -0.01611153595149517, -3.099436753473128e-06, -5.960446742392378e-06, -0.002107305685058236, -0.020285172387957573, -2.861018856492592e-06, -9.775113539944869e-06, -0.03816947713494301, -0.003484489396214485, -3.6954811548639555e-06, -3.4570634852570947e-06, -0.010176085866987705, -0.019592100754380226], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0016765836626291275, -1.311301275563892e-06, -1.1920928244535389e-07, -0.01829569600522518, -0.8274914622306824, -0.00012146688823122531, -0.00010549465514486656, -0.0006556744920089841, -0.02637963369488716, -0.00011300401820335537, -0.0037439032457768917, -0.014247246086597443, -8.284702198579907e-05, -1.1920922133867862e-06, -0.0010090741561725736, -0.008454838767647743], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.02301236242055893, -6.532455881824717e-05, -7.629365427419543e-06, -0.00011955977242905647, -0.00025722055579535663, -0.0023994247894734144, -0.0016356435371562839, -0.000527123745996505, -0.015039507299661636, -5.0424259825376794e-05, -2.3841830625315197e-06, -0.26776647567749023, -0.2533735930919647], "finish_reason": "stop"}], "metrics": {"energy": 1074.782115621567, "energy_per_token": 4.554161506871047, "time": 27.984814, "time_per_token": 0.11857972033898305}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data is not a DataFrame.')", "tokens": [" Value", "Error", "('", "data", " is", " not", " a", " Data", "Frame", ".", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9049214720726013, -0.03408149257302284, -0.11166571825742722, -0.2369120866060257, -0.01571250520646572, -2.5542006492614746, -0.027859583497047424, -0.004154385533183813], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain elements.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " elements", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -3.07842755317688, -3.316270589828491, -0.10718098282814026, -0.003744734451174736, -0.00029118589009158313, -0.0016126735135912895], "finish_reason": "stop"}, {"text": " not target_column in data:", "tokens": [" not", " target", "_", "column", " in", " data", ":", "\n"], "logprobs": [-1.2578213214874268, -0.6410326957702637, -9.214453893946484e-05, -1.549708758830093e-05, -0.004370423499494791, -0.09987501800060272, -1.8882380723953247, -0.0019468179671093822], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0025056179147213697, -4.887569048150908e-06, -0.005521167069673538, -0.21521742641925812, -0.11549318581819534, -0.043549709022045135, -0.005485482048243284, -0.18937905132770538, -0.026179447770118713, -0.2940080761909485, -0.08649472892284393, -0.35120177268981934, -0.09454187005758286, -0.13040262460708618, -0.0025637636426836252, -0.0004592079494614154, -0.002193189924582839], "finish_reason": "stop"}, {"text": " data.isna().values.any():", "tokens": [" data", ".", "is", "na", "()", ".", "values", ".", "any", "():", "\n"], "logprobs": [-0.6427001953125, -0.1749250888824463, -2.0939784049987793, -0.34850651025772095, -0.0009653675369918346, -5.006664650863968e-05, -0.5206338763237, -5.9960475482512265e-05, -0.024508118629455566, -0.04785621911287308, -0.011328775435686111], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0012166248634457588, -3.814689989667386e-06, -0.013928238302469254, -0.020170921459794044, -0.6852178573608398, -0.16936279833316803, -0.363008975982666, -0.09182310849428177, -0.19657433032989502, -0.13081814348697662, -0.05237370729446411, -0.002115632640197873, -0.00023409964342135936, -0.000985017861239612], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08619248867034912, -0.03185617923736572, -0.00017641419253777713, -0.028502346947789192, -3.6954811548639555e-06, -4.768360213347478e-06, -0.001036107074469328, -0.04157743975520134, -0.038870781660079956, -0.0014909114688634872], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006523388437926769, -1.1801649634435307e-05, -0.017750337719917297, -0.010055479593575, -0.02714633382856846, -0.012057513929903507, -0.0009646529797464609, -0.08598413318395615, -0.024559298530220985, -0.6283774971961975, -0.02265896461904049, -0.0003854485403280705, -0.011051633395254612, -0.002655196702107787, -0.0006105228094384074, -0.17698468267917633, -0.0063557871617376804, -0.0003351603518240154, -0.0019574069883674383], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int) or not np.issubdtype(type(random_state), np.integer):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", ")", " or", " not", " np", ".", "iss", "ub", "d", "type", "(", "type", "(", "random", "_", "state", ")", ",", " np", ".", "integer", "):", "\n"], "logprobs": [-0.09202949702739716, -0.03775079920887947, -0.0003630455757956952, -0.03119719587266445, -1.6689286894688848e-06, -2.861018856492592e-06, -0.0010794533882290125, -0.0417376384139061, -2.9850003719329834, -0.05750022083520889, -3.0144400596618652, -1.7277063131332397, -4.7801782784517854e-05, -0.526817262172699, -0.007217050530016422, -1.5497195136049413e-06, -4.327203714638017e-05, -0.0018789985915645957, -0.45018041133880615, -0.0003854485403280705, -0.0025649527087807655, -5.006777428206988e-06, -8.344646857949556e-07, -0.0002094287920044735, -0.001016576774418354, -0.059331052005290985, -8.106198947643861e-06, -0.8888920545578003, -0.047117747366428375, -0.00623045489192009], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.00264937081374228, -9.894321920000948e-06, -0.01175724621862173, -0.014962470158934593, -0.035280391573905945, -0.007026840932667255, -0.00511693861335516, -0.08033661544322968, -0.004561020527034998, -0.10360829532146454, -0.07253370434045792, -0.2570060193538666, -0.0037971078418195248, -0.00039176418795250356, -0.0029221950098872185], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.029093170538544655, -0.12848879396915436, -0.08506452292203903, -0.037386152893304825, -0.29048705101013184, -0.5169386267662048, -0.0048566944897174835, -4.887569048150908e-06, -4.768370445162873e-07, -0.06342785805463791, -0.05970710143446922], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.003830359550192952, -0.04527522251009941, -0.00030155404238030314, -1.5497195136049413e-06, -3.933898824470816e-06, -0.00011324241495458409, -0.01864841766655445], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.010907432064414024, -3.4689302992774174e-05, -0.0015091231325641274, -0.0009286858257837594, -0.0018876844551414251, -8.535020606359467e-05, -1.0132738680113107e-05, -0.0004574206250254065, -0.0021416840609163046, -2.8729025871143676e-05, -0.0007485924870707095, -0.006115770433098078, -0.023114409297704697, -1.9192511899746023e-05, -2.3841830625315197e-06, -1.7881377516459906e-06, -3.576278118089249e-07, -0.000568228424526751, -0.1200343519449234, -0.009672324173152447, -0.04352676868438721, -0.004732479341328144, -0.07988471537828445, -7.271740287251305e-06, -2.622600959512056e-06, -0.04403338581323624, -0.02092815190553665, -3.3378546504536644e-06, -6.6756979322235566e-06, -0.002427490195259452, -0.020202580839395523, -2.50339189733495e-06, -7.510157047363464e-06, -0.03138864040374756, -0.0035916364286094904, -2.622600959512056e-06, -4.0531076592742465e-06, -0.009585191495716572, -0.019685380160808563], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0014357983600348234, -1.311301275563892e-06, -1.1920928244535389e-07, -0.020058058202266693, -0.8677034974098206, -0.00010263393050990999, -7.438383181579411e-05, -0.0005916990339756012, -0.03389517217874527, -0.00010179955279454589, -0.0039177583530545235, -0.01368003711104393, -0.00010156115604331717, -9.536738616588991e-07, -0.0009258274803869426, -0.00862787663936615], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.028234560042619705, -6.627816765103489e-05, -6.318072337307967e-06, -0.00011848701251437888, -0.00026043839170597494, -0.0030093167442828417, -0.001589822000823915, -0.000582644424866885, -0.015835599973797798, -5.340433563105762e-05, -2.9802276912960224e-06, -0.3370993137359619, -0.23803973197937012], "finish_reason": "stop"}], "metrics": {"energy": 1126.7549680023194, "energy_per_token": 4.525120353422969, "time": 29.016523, "time_per_token": 0.11653222088353414}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " values", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -2.974210739135742, -1.629664421081543, -0.17400774359703064, -0.003583440324291587, -0.00032109825406223536, -0.0008694920688867569], "finish_reason": "stop"}, {"text": " target_column not in data:", "tokens": [" target", "_", "column", " not", " in", " data", ":", "\n"], "logprobs": [-0.47796663641929626, -0.00025900822947733104, -1.0967194612021558e-05, -0.007772441022098064, -2.90866428258596e-05, -0.1220647543668747, -2.0926527976989746, -0.0020452074240893126], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0027052494697272778, -4.768360213347478e-06, -0.006814572960138321, -0.20970101654529572, -0.14201119542121887, -0.04690517857670784, -0.00557000981643796, -0.22637376189231873, -0.02996666543185711, -0.34948673844337463, -0.09139029681682587, -0.3361089825630188, -0.09470335394144058, -0.12076010555028915, -0.0028815437108278275, -0.0005043664714321494, -0.0017422748496755958], "finish_reason": "stop"}, {"text": " data[data.select_dtypes(exclude=np.number).columns].columns.any():", "tokens": [" data", "[", "data", ".", "select", "_", "d", "types", "(", "exclude", "=", "np", ".", "number", ")", ".", "columns", "]", ".", "columns", ".", "any", "():", "\n"], "logprobs": [-0.6389512419700623, -2.265652656555176, -0.5450786352157593, -0.05068828538060188, -0.9486199021339417, -0.00010883215873036534, -3.3378546504536644e-06, -7.271740287251305e-06, -0.05913027748465538, -0.1688266545534134, -0.6879328489303589, -0.19071830809116364, -2.7418097943154862e-06, -0.004757513292133808, -0.01769283413887024, -0.0025279729161411524, -0.0012296028435230255, -0.006178445648401976, -0.00011574551899684593, -1.5258808135986328, -0.0013623490231111646, -0.1821662187576294, -0.008908881805837154, -0.01162575464695692], "finish_reason": "stop"}, {"text": " ValueError(\"data should contain only numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " contain", " only", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0014757943572476506, -3.3378546504536644e-06, -0.011611497029662132, -0.0218181349337101, -0.6561399102210999, -0.15453486144542694, -0.48105210065841675, -0.0910489410161972, -0.20284996926784515, -0.11037848889827728, -0.05034680292010307, -0.0017157370457425714, -0.0002240883477497846, -0.0006784282741136849], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.0803721472620964, -0.04226218909025192, -0.00016282663273159415, -0.030550960451364517, -3.6954811548639555e-06, -4.0531076592742465e-06, -0.0011267272057011724, -0.03750017657876015, -0.03696243837475777, -0.001556019764393568], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0005564333405345678, -7.748573807475623e-06, -0.01500451285392046, -0.010848944075405598, -0.030807146802544594, -0.014848430640995502, -0.0008685392094776034, -0.07981306314468384, -0.030329981818795204, -0.573861837387085, -0.039427779614925385, -0.0004122599493712187, -0.008356841281056404, -0.002401446457952261, -0.0006052807439118624, -0.15456172823905945, -0.0058407350443303585, -0.0003108495147898793, -0.0017823775997385383], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09344848245382309, -0.04507000744342804, -0.00034362133010290563, -0.020089371129870415, -1.4305104514278355e-06, -2.9802276912960224e-06, -0.0011232740944251418, -0.0368293933570385, -0.07538804411888123, -0.0016799159348011017], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0019601434469223022, -7.629365427419543e-06, -0.012998138554394245, -0.013003315776586533, -0.029396845027804375, -0.005659034941345453, -0.004817782435566187, -0.07557597011327744, -0.005573684815317392, -0.10455847531557083, -0.07627815753221512, -0.2559548616409302, -0.003527016844600439, -0.0004011779965367168, -0.0029491763561964035], "finish_reason": "stop"}, {"text": " data[data.columns.difference([target_column])]", "tokens": [" data", "[", "data", ".", "columns", ".", "difference", "([", "target", "_", "column", "]", ")]", "\n"], "logprobs": [-0.03318875655531883, -2.8844563961029053, -0.1094755008816719, -0.0013131813611835241, -0.014299190603196621, -0.3141663670539856, -0.31718340516090393, -0.020350821316242218, -0.0009358317474834621, -1.156323378381785e-05, -1.9073468138230965e-06, -0.007412667386233807, -0.0003054867556784302, -0.10558240860700607], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.002933962270617485, -0.036141831427812576, -0.00026663561584427953, -2.0265558760002023e-06, -2.3841830625315197e-06, -0.00011181206355104223, -0.018384063616394997], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.011723903939127922, -3.0278701160568744e-05, -0.0021115881390869617, -0.0012157914461567998, -0.0020722122862935066, -8.797258487902582e-05, -1.1086402082582936e-05, -0.00043156370520591736, -0.0019133847672492266, -3.2543604902457446e-05, -0.0005286726518534124, -0.00582615751773119, -0.02639136090874672, -1.4185804502631072e-05, -2.0265558760002023e-06, -1.6689286894688848e-06, -3.576278118089249e-07, -0.0006254147156141698, -0.14355573058128357, -0.011062126606702805, -0.03962578997015953, -0.003936994355171919, -0.07623783499002457, -8.821448318485636e-06, -3.099436753473128e-06, -0.0424111932516098, -0.01894744299352169, -3.099436753473128e-06, -7.152531907195225e-06, -0.002331873867660761, -0.022552326321601868, -2.7418097943154862e-06, -8.106198947643861e-06, -0.03297989442944527, -0.004063920583575964, -3.2186455882765586e-06, -3.814689989667386e-06, -0.008481079712510109, -0.02057424932718277], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0018199799815192819, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.018139425665140152, -0.6156915426254272], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>from random import randint", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|>", "from", " random", " import", " rand", "int", "\n"], "logprobs": [-0.021990159526467323, -5.745722592109814e-05, -6.9141146923357155e-06, -8.248942322097719e-05, -0.0001941730733960867, -0.0026106107980012894, -0.001838185708038509, -0.0005993238883093, -0.015300754457712173, -5.757642793469131e-05, -3.814689989667386e-06, -1.3049529790878296, -6.6756979322235566e-06, -1.1920922133867862e-06, -2.622600959512056e-06, -0.00014137222024146467, -0.2486790418624878, -1.47035551071167, -4.40410041809082, -0.007977528497576714, -0.8023435473442078, -0.19299191236495972, -0.12966781854629517], "finish_reason": "stop"}], "metrics": {"energy": 1137.0439101924887, "energy_per_token": 4.640995551806077, "time": 28.797739, "time_per_token": 0.11754179183673469}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data must be a pandas DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -0.5457839965820312, -0.006200363393872976, -0.36275845766067505, -1.2817659378051758, -0.15928757190704346, -0.017929738387465477, -0.21495351195335388, -0.0009266611887142062, -0.006114467047154903], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.17676754295825958, -0.004203176125884056, -0.06610286235809326, -0.014123134315013885, -0.0008219677838496864], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -0.18943864107131958, -0.002883089007809758, -0.0005261705373413861, -0.001636119675822556], "finish_reason": "stop"}, {"text": " target_column not in data.columns:", "tokens": [" target", "_", "column", " not", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-0.4307592213153839, -0.0002422039397060871, -1.3112935448589269e-05, -0.008413583971560001, -2.658331868587993e-05, -0.09014095366001129, -0.1000177338719368, -0.0049308366142213345, -0.029317548498511314, -0.0021713031455874443], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column in data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002709529362618923, -5.602820692729438e-06, -0.006777394562959671, -0.24273090064525604, -0.1346130520105362, -0.04276350513100624, -0.004433089401572943, -0.1999247521162033, -0.031615275889635086, -0.31777074933052063, -0.06820780038833618, -1.6286654472351074, -0.13709856569766998, -0.10491972416639328, -0.0028880813624709845, -0.0004363300104159862, -0.0014919828390702605], "finish_reason": "stop"}, {"text": " data[target_column].empty:", "tokens": [" data", "[", "target", "_", "column", "]", ".", "empty", ":", "\n"], "logprobs": [-0.631386935710907, -1.9263768196105957, -0.8243179321289062, -2.264974000354414e-06, -1.0967194612021558e-05, -0.0006649667047895491, -0.0010389650706201792, -3.033054828643799, -0.027803584933280945, -0.0065045543015003204], "finish_reason": "stop"}, {"text": " ValueError(\"All provided data should be numeric.\")", "tokens": [" Value", "Error", "(", "\"", "All", " provided", " data", " should", " be", " numeric", ".", "\"", ")", "\n"], "logprobs": [-0.0011767374817281961, -3.2186455882765586e-06, -0.010877835564315319, -0.02181381918489933, -1.7522093057632446, -3.2871434688568115, -0.35688966512680054, -0.14261648058891296, -0.12642686069011688, -0.09415776282548904, -0.07375949621200562, -0.0035283234901726246, -0.00042429505265317857, -0.002238389104604721], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09724882990121841, -0.04067030921578407, -0.00021443451987579465, -0.029525557532906532, -4.529942543740617e-06, -4.0531076592742465e-06, -0.0010276519460603595, -0.03636612743139267, -0.04309206083416939, -0.001441036001779139], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a positive float smaller than 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " positive", " float", " smaller", " than", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006436422117985785, -1.2516897186287679e-05, -0.017931610345840454, -0.010630527511239052, -0.027081478387117386, -0.01170540601015091, -0.0009309487068094313, -0.0831516906619072, -0.02316531166434288, -1.34830641746521, -3.584141969680786, -0.903563916683197, -1.3959780931472778, -0.04792110249400139, -0.07915829867124557, -0.001574111171066761, -0.09146003425121307, -0.023672452196478844, -0.00036244976217858493, -0.0011647114297375083], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08064018934965134, -0.046215519309043884, -0.00034588552080094814, -0.02422552928328514, -1.5497195136049413e-06, -3.6954811548639555e-06, -0.0010222929995507002, -0.03580741956830025, -0.07900497317314148, -0.001967995660379529], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0023679095320403576, -7.271740287251305e-06, -0.011928888969123363, -0.012838917784392834, -0.028154360130429268, -0.005145758390426636, -0.005778631195425987, -0.07662999629974365, -0.005529229063540697, -0.08728772401809692, -0.06640610098838806, -0.35468462109565735, -0.004810783080756664, -0.00041571559268049896, -0.002361487364396453], "finish_reason": "stop"}, {"text": " data.drop(columns=target_column)", "tokens": [" data", ".", "drop", "(", "columns", "=", "target", "_", "column", ")", "\n"], "logprobs": [-0.03119014762341976, -0.15824739634990692, -0.09201731532812119, -0.03457322716712952, -0.2678893208503723, -0.43842145800590515, -0.005967063829302788, -4.172316494077677e-06, -3.576278118089249e-07, -0.046440981328487396, -0.06259050965309143], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0031427775975316763, -0.03958271071314812, -0.00028951745480298996, -1.6689286894688848e-06, -4.887569048150908e-06, -0.00012385078298393637, -0.01637156493961811], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009395313449203968, -3.182837463100441e-05, -0.0017423938261345029, -0.0010307481279596686, -0.0027563695330172777, -0.00010740180005086586, -1.3351351299206726e-05, -0.00043096792069263756, -0.002018558792769909, -3.576214658096433e-05, -0.0005349873681552708, -0.005661523900926113, -0.014499771408736706, -2.109982233378105e-05, -3.099436753473128e-06, -2.145764938177308e-06, -3.576278118089249e-07, -0.0006561510381288826, -0.1354745775461197, -0.009889180772006512, -0.04065188392996788, -0.005159040912985802, -0.061460476368665695, -8.106198947643861e-06, -2.861018856492592e-06, -0.04346251115202904, -0.02060297690331936, -3.6954811548639555e-06, -5.960446742392378e-06, -0.002387532265856862, -0.01983053982257843, -2.622600959512056e-06, -7.629365427419543e-06, -0.029971756041049957, -0.003570611821487546, -3.4570634852570947e-06, -3.576272320060525e-06, -0.009510330855846405, -0.02018587477505207], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.0013909199042245746, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.020022887736558914, -0.5673599243164062], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.0315483994781971, -6.48477507638745e-05, -6.9141146923357155e-06, -0.00010191874753218144, -0.0002079985715681687, -0.002637481316924095, -0.0013888961402699351, -0.0005743046058341861, -0.01864549331367016, -6.568216485902667e-05, -2.9802276912960224e-06, -0.2677558958530426, -0.23403573036193848], "finish_reason": "stop"}], "metrics": {"energy": 1054.253134994507, "energy_per_token": 4.7275925336076545, "time": 26.928217, "time_per_token": 0.12075433632286996}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data must be a pandas DataFrame')", "tokens": [" Value", "Error", "('", "data", " must", " be", " a", " pandas", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -0.9054898619651794, -0.007479876279830933, -0.5025264024734497, -1.1731441020965576, -0.23580273985862732, -0.015836304053664207, -0.1882765144109726, -0.002560077467933297], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -0.1541835516691208, -0.0043168929405510426, -0.01982247643172741, -0.21202333271503448, -0.002015227684751153, -0.0005194983095861971, -0.0019489595433697104], "finish_reason": "stop"}, {"text": " not target_column in data.columns:", "tokens": [" not", " target", "_", "column", " in", " data", ".", "columns", ":", "\n"], "logprobs": [-1.2464027404785156, -0.6473973393440247, -0.0001045410826918669, -1.9788545614574105e-05, -0.004810783080756664, -0.06921489536762238, -0.16655783355236053, -0.006289569195359945, -0.04958067461848259, -0.0017269235104322433], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0023492376785725355, -4.529942543740617e-06, -0.006649272982031107, -0.2087177187204361, -0.13387955725193024, -0.056667692959308624, -0.004840441979467869, -0.19805704057216644, -0.034601323306560516, -0.37014317512512207, -0.08298230171203613, -0.33473843336105347, -0.09643208980560303, -0.12760475277900696, -0.0022387460339814425, -0.0006164796068333089, -0.0018598416354507208], "finish_reason": "stop"}, {"text": " not data[target_column].apply(np.isreal).all():", "tokens": [" not", " data", "[", "target", "_", "column", "]", ".", "apply", "(", "np", ".", "is", "real", ")", ".", "all", "():", "\n"], "logprobs": [-1.1554241180419922, -0.32982245087623596, -1.0477631092071533, -0.4893586039543152, -1.1920922133867862e-06, -9.179073458653875e-06, -0.0005128260818310082, -2.396077979938127e-05, -0.6196485757827759, -0.001885304693132639, -0.8795633316040039, -1.0847986231965479e-05, -0.12864090502262115, -0.04170791059732437, -0.014925828203558922, -0.00047600860125385225, -0.0942569226026535, -0.02171187289059162, -0.010997751727700233], "finish_reason": "stop"}, {"text": " ValueError(\"All columns of the DataFrame should contain numerical values.\")", "tokens": [" Value", "Error", "(", "\"", "All", " columns", " of", " the", " Data", "Frame", " should", " contain", " numerical", " values", ".", "\"", ")", "\n"], "logprobs": [-0.001085883704945445, -3.4570634852570947e-06, -0.011873523704707623, -0.025287877768278122, -1.398653507232666, -2.1074464321136475, -1.895753026008606, -1.350074052810669, -1.4966022968292236, -0.026567591354250908, -0.11635967344045639, -0.3699723184108734, -1.7565730810165405, -0.08181709051132202, -0.06588123738765717, -0.002271930454298854, -0.0006293461774475873, -0.002693360671401024], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.10822898149490356, -0.038417525589466095, -0.00018165845540352166, -0.029047084972262383, -3.4570634852570947e-06, -5.364403477869928e-06, -0.0012279358925297856, -0.03902316093444824, -0.03342259302735329, -0.0015162649797275662], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.0006108802044764161, -1.0967194612021558e-05, -0.01663176156580448, -0.013652521185576916, -0.027870479971170425, -0.011308856308460236, -0.0009602464851923287, -0.07439158111810684, -0.022820472717285156, -0.6386503577232361, -0.03194601088762283, -0.0004287039046175778, -0.009314768947660923, -0.0017105009173974395, -0.0008536509121768177, -0.1605914831161499, -0.0055640824139118195, -0.0003343261778354645, -0.0016856284346431494], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08803118765354156, -0.04900171980261803, -0.0003412379592191428, -0.01697135716676712, -1.7881377516459906e-06, -2.3841830625315197e-06, -0.0011306566884741187, -0.042740434408187866, -0.06767340004444122, -0.0016282646683976054], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0029889929573982954, -6.6756979322235566e-06, -0.013493170030415058, -0.010842458344995975, -0.03264269232749939, -0.0068727051839232445, -0.006329134572297335, -0.07208447903394699, -0.005133186932653189, -0.09494373202323914, -0.06500930339097977, -0.3293210566043854, -0.0038852221332490444, -0.00036352223833091557, -0.002731641987338662], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.030553851276636124, -0.14175042510032654, -0.09661274403333664, -0.03728600963950157, -0.34999433159828186, -1.077188491821289, -0.0010645681759342551, -2.6702524337451905e-05, -6.079655122448457e-06, -0.12463633716106415, -0.044706765562295914], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.002998025855049491, -0.04289781674742699, -0.00029762129997834563, -1.7881377516459906e-06, -3.2186455882765586e-06, -0.0001436368766007945, -0.018662692978978157], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.00912094209343195, -3.2543604902457446e-05, -0.001965021248906851, -0.0010968389688059688, -0.0021376395598053932, -8.570780482841656e-05, -8.940656698541716e-06, -0.00041500062798149884, -0.0019276624079793692, -3.0517112463712692e-05, -0.0006977269076742232, -0.005614701192826033, -0.02362879365682602, -1.585470999998506e-05, -2.9802276912960224e-06, -1.7881377516459906e-06, -3.576278118089249e-07, -0.0006224363460205495, -2.2295684814453125], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0019378946162760258, -1.5497195136049413e-06, -2.3841855067985307e-07, -0.01460985653102398, -0.7649350166320801, -9.7508447652217e-05, -7.688703772146255e-05, -0.0006623458466492593, -0.03369844704866409, -0.0001232548092957586, -0.0038904468528926373, -0.012181764468550682, -8.880697714630514e-05, -9.536738616588991e-07, -0.0009968079393729568, -0.008699966594576836], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")"], "logprobs": [-0.029500093311071396, -6.186770770000294e-05, -7.271740287251305e-06, -0.00011050090688513592, -0.0002212279650848359, -0.0026116808876395226, -0.001601009746082127, -0.0004702892620116472, -0.017552632838487625, -6.09140915912576e-05, -2.3841830625315197e-06, -0.3091197907924652], "finish_reason": "stop"}], "metrics": {"energy": 1058.1556681480415, "energy_per_token": 4.745092682278213, "time": 27.111895, "time_per_token": 0.12157800448430493}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError('data should be a pandas DataFrame')", "tokens": [" Value", "Error", "('", "data", " should", " be", " a", " pandas", " Data", "Frame", "')", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -1.1905267238616943, -0.25637513399124146, -3.369563102722168, -0.006921481806784868, -0.39585524797439575, -1.0920794010162354, -0.3007020652294159, -0.0335407592356205, -0.270742267370224, -0.0038283406756818295], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.15722447633743286, -0.00410179328173399, -0.07105118036270142, -0.013759289868175983, -0.0008163695456460118], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.000358159770257771, -2.264974000354414e-06, -0.022529365494847298, -0.0032367717940360308, -0.07304678857326508, -0.41148072481155396, -0.1541835516691208, -0.0043168929405510426, -0.01982247643172741, -0.21202333271503448, -0.002015227684751153, -0.0005194983095861971, -0.0019489595433697104], "finish_reason": "stop"}, {"text": " target_column not in data:", "tokens": [" target", "_", "column", " not", " in", " data", ":", "\n"], "logprobs": [-0.4164772033691406, -0.0001931004080688581, -1.2040065485052764e-05, -0.0100716482847929, -3.969590397900902e-05, -0.1182708814740181, -2.433697462081909, -0.001702646492049098], "finish_reason": "stop"}, {"text": " ValueError(\"target_column should be a column of data.\")", "tokens": [" Value", "Error", "(", "\"", "target", "_", "column", " should", " be", " a", " column", " of", " data", ".", "\"", ")", "\n"], "logprobs": [-0.002678618300706148, -5.245195097813848e-06, -0.00614669406786561, -0.2183985561132431, -0.12240201979875565, -0.05120544508099556, -0.005308579187840223, -0.2153836041688919, -0.03264961391687393, -0.32459497451782227, -0.08553171157836914, -0.2901817560195923, -0.09710528701543808, -0.14451462030410767, -0.002401922130957246, -0.0005739472107961774, -0.0019215944921597838], "finish_reason": "stop"}, {"text": " not data.dtypes.values.is_integer().all() or not data.dtypes.values.is_float().all():", "tokens": [" not", " data", ".", "d", "types", ".", "values", ".", "is", "_", "integer", "()", ".", "all", "()", " or", " not", " data", ".", "d", "types", ".", "values", ".", "is", "_", "float", "()", ".", "all", "():", "\n"], "logprobs": [-1.2470061779022217, -0.3101709485054016, -0.5899840593338013, -0.6355240345001221, -8.415821503149346e-05, -0.780632734298706, -1.612583041191101, -0.013804792426526546, -0.4547683298587799, -0.04266481474041939, -2.7834665775299072, -0.17032703757286072, -0.6074389815330505, -0.17122836410999298, -0.4942522943019867, -1.097611665725708, -0.13440796732902527, -0.052436716854572296, -0.004343243315815926, -0.01779683120548725, -0.0003477922291494906, -0.0019010106334462762, -0.00680415378883481, -0.0016160060185939074, -0.0033559452276676893, -0.00046754872892051935, -0.10397709161043167, -0.0054257274605333805, -0.0005421360838226974, -0.0017820206703618169, -0.021169425919651985, -0.006745188031345606], "finish_reason": "stop"}, {"text": " ValueError(\"data should only contain numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " only", " contain", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.001100173220038414, -3.933898824470816e-06, -0.012752413749694824, -0.023149820044636726, -0.628680408000946, -0.14267942309379578, -1.0981125831604004, -0.019722197204828262, -0.34821251034736633, -0.07023719698190689, -0.04845014587044716, -0.0022696706000715494, -0.00026472879108041525, -0.0009022455778904259], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.09567491710186005, -0.03882617503404617, -0.00016020445036701858, -0.029710378497838974, -3.6954811548639555e-06, -4.768360213347478e-06, -0.0011392300948500633, -0.034431569278240204, -0.042424675077199936, -0.0016595651395618916], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.000654602306894958, -1.490105023549404e-05, -0.01373106986284256, -0.010959549807012081, -0.025081077590584755, -0.010581577196717262, -0.0009934734553098679, -0.08468902111053467, -0.026724524796009064, -1.499577522277832, -0.7073580026626587, -0.3222404420375824, -0.03390289470553398, -0.00036769305006600916, -0.01293859537690878, -0.0013850866816937923, -0.0005510718910954893, -0.15371955931186676, -0.0038599285762757063, -0.00030763185350224376, -0.0009966888464987278], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08217106014490128, -0.03315012529492378, -0.00029309268575161695, -0.017735112458467484, -1.7881377516459906e-06, -2.7418097943154862e-06, -0.0009591746493242681, -0.0358944833278656, -0.07444491982460022, -0.0018129594391211867], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.0027891802601516247, -7.629365427419543e-06, -0.012870576232671738, -0.012086841277778149, -0.03104928322136402, -0.006387176923453808, -0.006377108860760927, -0.08026225119829178, -0.006146338768303394, -0.10267206281423569, -0.08737118542194366, -0.2824028432369232, -0.004342056345194578, -0.0004058252670802176, -0.003219661070033908], "finish_reason": "stop"}, {"text": " data.drop(columns=[target_column])", "tokens": [" data", ".", "drop", "(", "columns", "=[", "target", "_", "column", "])", "\n"], "logprobs": [-0.0314759723842144, -0.1278061866760254, -0.08071419596672058, -0.03762727603316307, -0.2964024543762207, -1.083688735961914, -0.0009534580749459565, -2.825220326485578e-05, -5.960446742392378e-06, -0.1203552782535553, -0.055824100971221924], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0033175689168274403, -0.036807332187891006, -0.00030250742565840483, -1.6689286894688848e-06, -3.814689989667386e-06, -0.00013696208770852536, -0.02036215178668499], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009801475331187248, -2.753696753643453e-05, -0.001620647613890469, -0.0010355116100981832, -0.00227074115537107, -6.806619057897478e-05, -7.152531907195225e-06, -0.000428942235885188, -0.0016199335223063827, -2.8490614567999728e-05, -0.0006849803612567484, -0.005453945603221655, -0.018589911982417107, -1.597391747054644e-05, -2.9802276912960224e-06, -1.7881377516459906e-06, -3.576278118089249e-07, -0.0006456674309447408, -0.12745678424835205, -0.010322043672204018, -0.03929907828569412, -0.00472998758777976, -0.06559044867753983, -6.6756979322235566e-06, -2.622600959512056e-06, -0.04408266395330429, -0.0184157807379961, -3.6954811548639555e-06, -8.583032467868179e-06, -0.0025676873046904802, -0.02240581065416336, -2.622600959512056e-06, -7.152531907195225e-06, -0.03807825222611427, -0.0033072319347411394, -3.2186455882765586e-06, -3.3378546504536644e-06, -0.01022210530936718, -0.021527551114559174], "finish_reason": "stop"}, {"text": " LinearRegression().fit(X_train, y_train)", "tokens": [" Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-0.0016840812750160694, -2.145764938177308e-06, -1.1920928244535389e-07, -0.016343537718057632, -0.7744099497795105, -0.00010656742961145937, -8.701899787411094e-05, -0.0007108307327143848, -0.028952475637197495, -0.00011526874004630372, -0.004909721668809652, -0.012653070501983166, -7.343022298300639e-05, -1.0728830375228426e-06, -0.0009128456003963947, -0.010722522623836994], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.026491321623325348, -7.843663479434326e-05, -8.106198947643861e-06, -0.0001137191939051263, -0.00023755589791107923, -0.0025185791309922934, -0.0020093980710953474, -0.0004400238685775548, -0.017028668895363808, -6.222531374078244e-05, -2.3841830625315197e-06, -0.31346529722213745, -0.24676793813705444], "finish_reason": "stop"}], "metrics": {"energy": 1105.7857356529237, "energy_per_token": 4.370694607323809, "time": 29.035427, "time_per_token": 0.11476453359683794}}
{"outputs": [{"text": " not isinstance(data, pd.DataFrame):", "tokens": [" not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n"], "logprobs": [-0.12360213696956635, -0.03826035186648369, -0.0003800861886702478, -0.05136829987168312, -0.000920706195756793, -0.011899439617991447, -8.821448318485636e-06, -0.013896261341869831, -0.008734355680644512, -0.006527412217110395], "finish_reason": "stop"}, {"text": " ValueError(\"data is not a DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.006609246600419283, -6.079655122448457e-06, -0.38934868574142456, -0.3341384530067444, -0.43964508175849915, -1.4186859130859375, -0.044067949056625366, -0.1830509901046753, -0.23050223290920258, -0.016177810728549957, -0.13983851671218872, -0.001321515068411827, -0.007768537383526564], "finish_reason": "stop"}, {"text": " len(data) < 1:", "tokens": [" len", "(", "data", ")", " <", " ", "1", ":", "\n"], "logprobs": [-2.550344705581665, -0.000331704446580261, -0.002061981474980712, -0.10716716945171356, -2.582655191421509, -0.006020387634634972, -0.022297395393252373, -0.021909106522798538, -0.003927970305085182], "finish_reason": "stop"}, {"text": " ValueError(\"data should not be empty\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " not", " be", " empty", "\"", ")", "\n"], "logprobs": [-0.00041547726141288877, -2.0265558760002023e-06, -0.025949833914637566, -0.003730245167389512, -0.06710026413202286, -0.3478327989578247, -0.1799984872341156, -0.0035245222970843315, -0.02077462710440159, -1.797753095626831, -0.0005268854438327253, -0.0015614947769790888], "finish_reason": "stop"}, {"text": " not data.dtypes.apply(pd.api.types.is_numeric_dtype).all():", "tokens": [" not", " data", ".", "d", "types", ".", "apply", "(", "pd", ".", "api", ".", "types", ".", "is", "_", "numeric", "_", "d", "type", ")", ".", "all", "():", "\n"], "logprobs": [-1.1974523067474365, -1.80336332321167, -0.7164183259010315, -0.8805456161499023, -1.537788011773955e-05, -0.03629910945892334, -0.7957355380058289, -0.06340861320495605, -1.6705907583236694, -2.6940935640595853e-05, -0.003263625781983137, -5.960462772236497e-07, -4.529942543740617e-06, -1.1205610462639015e-05, -5.304672595229931e-05, 0.0, -0.022120527923107147, -3.611976353568025e-05, -5.602820692729438e-06, -7.152555099310121e-07, -0.00543782114982605, -3.313963316031732e-05, -0.02053045481443405, -0.001833664020523429, -0.002648895373567939], "finish_reason": "stop"}, {"text": " ValueError(f\"target_column '{target_column}' should be one of \"", "tokens": [" Value", "Error", "(", "f", "\"", "target", "_", "column", " '", "{", "target", "_", "column", "}'", " should", " be", " one", " of", " \"", "\n"], "logprobs": [-0.0022840620949864388, -4.6491513785440475e-06, -0.00640529952943325, -1.9500834941864014, -0.025157572701573372, -0.4995489716529846, -0.044646572321653366, -0.0065304916352033615, -2.188387632369995, -0.0009386900928802788, -0.0009540535393171012, -5.125868119648658e-05, -5.507317473529838e-05, -0.011650263331830502, -1.4013652801513672, -0.0490298718214035, -2.0654847621917725, -0.05259360000491142, -2.6838176250457764, -0.30715927481651306], "finish_reason": "stop"}, {"text": " np.logical_not(data.dtypes == np.float64).all():", "tokens": [" np", ".", "logical", "_", "not", "(", "data", ".", "d", "types", " ==", " np", ".", "float", "6", "4", ")", ".", "all", "():", "\n"], "logprobs": [-3.0775833129882812, -3.111314072157256e-05, -2.9313721656799316, -5.8412379075889476e-06, -0.8589534759521484, -0.017341651022434235, -0.19835887849330902, -0.05166618898510933, -0.6450313925743103, -0.00024732868769206107, -1.1811857223510742, -0.4489530026912689, -4.0531076592742465e-06, -0.7044532299041748, -0.046129122376441956, -1.07287787614041e-05, -0.07770012319087982, -5.543078441405669e-05, -1.4138084650039673, -0.029216943308711052, -0.008906754665076733], "finish_reason": "stop"}, {"text": " ValueError(\"data should only contain numeric values.\")", "tokens": [" Value", "Error", "(", "\"", "data", " should", " only", " contain", " numeric", " values", ".", "\"", ")", "\n"], "logprobs": [-0.0011804286623373628, -3.6954811548639555e-06, -0.012024534866213799, -0.02173403650522232, -0.5993261933326721, -0.1359909176826477, -1.1281464099884033, -0.017806081101298332, -0.3425210416316986, -0.09227084368467331, -0.060529474169015884, -0.0021350225433707237, -0.0002456601650919765, -0.0008903353591449559], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.11091402173042297, -0.03703366219997406, -0.00019774865359067917, -0.026252606883645058, -3.3378546504536644e-06, -6.318072337307967e-06, -0.0010983869433403015, -0.037004254758358, -0.032417673617601395, -0.0018151012482121587], "finish_reason": "stop"}, {"text": " ValueError(\"test_size should be a float between 0 and 1.\")", "tokens": [" Value", "Error", "(", "\"", "test", "_", "size", " should", " be", " a", " float", " between", " ", "0", " and", " ", "1", ".", "\"", ")", "\n"], "logprobs": [-0.000592890428379178, -1.1324817933200393e-05, -0.015043617226183414, -0.011504380963742733, -0.027221279218792915, -0.013550209812819958, -0.0010639727115631104, -0.07155192643404007, -0.027053285390138626, -1.5327892303466797, -0.7405096292495728, -0.32255125045776367, -0.03394195809960365, -0.0002796259068418294, -0.014467460103332996, -0.0015675650211051106, -0.0004624251159839332, -0.1285831481218338, -0.003332301741465926, -0.00032300499151460826, -0.001128156203776598], "finish_reason": "stop"}, {"text": " not isinstance(random_state, int):", "tokens": [" not", " isinstance", "(", "random", "_", "state", ",", " int", "):", "\n"], "logprobs": [-0.08046025782823563, -0.04139456897974014, -0.0003768687602132559, -0.025611184537410736, -1.5497195136049413e-06, -2.145764938177308e-06, -0.0011705459328368306, -0.04830044507980347, -0.07745755463838577, -0.0013865152141079307], "finish_reason": "stop"}, {"text": " ValueError(\"random_state should be an integer.\")", "tokens": [" Value", "Error", "(", "\"", "random", "_", "state", " should", " be", " an", " integer", ".", "\"", ")", "\n"], "logprobs": [-0.002178916009142995, -5.8412379075889476e-06, -0.012506864033639431, -0.011979186907410622, -0.03476575016975403, -0.006019676569849253, -0.0053544677793979645, -0.06798920035362244, -0.004498600028455257, -0.09866378456354141, -0.06867291033267975, -0.2549958825111389, -0.004218489397317171, -0.00042465253500267863, -0.0030397421214729548], "finish_reason": "stop"}, {"text": " data.loc[:, data.columns != target_column]", "tokens": [" data", ".", "loc", "[:", ",", " data", ".", "columns", " ", "!", "=", " target", "_", "column", "]", "\n"], "logprobs": [-0.025952622294425964, -0.1253000795841217, -2.9925546646118164, -0.004902129527181387, -0.004397958982735872, -0.25187966227531433, -0.00042250767000950873, -0.00010191874753218144, -0.051648981869220734, -1.1920928244535389e-07, -3.480850500636734e-05, -0.005595023278146982, -1.2397689715726301e-05, -4.768370445162873e-07, -0.0009712031460367143, -0.08448297530412674], "finish_reason": "stop"}, {"text": " data[target_column]", "tokens": [" data", "[", "target", "_", "column", "]", "\n"], "logprobs": [-0.0037962766364216805, -0.03943740576505661, -0.0003578022588044405, -1.9073468138230965e-06, -3.933898824470816e-06, -0.0001292145170737058, -0.020834872499108315], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "X", ",", " y", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.009355396032333374, -3.0636318115284666e-05, -0.0018618644680827856, -0.0010108605492860079, -0.00212395959533751, -9.989239333663136e-05, -9.65590606938349e-06, -0.0004906642716377974, -0.002043185057118535, -2.5033637939486653e-05, -0.0008445986895821989, -0.006192899774760008, -0.01967719756066799, -1.680836794548668e-05, -2.9802276912960224e-06, -1.9073468138230965e-06, -3.576278118089249e-07, -0.0006961782928556204, -0.12493801862001419, -0.008822509087622166, -0.04021729528903961, -0.004198190290480852, -0.06990832835435867, -6.437280717364047e-06, -2.145764938177308e-06, -0.046880267560482025, -0.017495235428214073, -3.6954811548639555e-06, -7.510157047363464e-06, -0.002548306016251445, -0.022115979343652725, -3.2186455882765586e-06, -1.0132738680113107e-05, -0.03939947485923767, -0.00361634255386889, -2.9802276912960224e-06, -2.3841830625315197e-06, -0.008921405300498009, -0.022844476625323296], "finish_reason": "stop"}, {"text": " LinearRegression()", "tokens": [" Linear", "Reg", "ression", "()", "\n"], "logprobs": [-0.001809508539736271, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.019999634474515915, -0.540348470211029], "finish_reason": "stop"}, {"text": " model.score(X_test, y_test)<|endoftext|>from typing import Optional, Union", "tokens": [" model", ".", "score", "(", "X", "_", "test", ",", " y", "_", "test", ")<", "|", "end", "of", "text", "|>", "from", " typing", " import", " Optional", ",", " Union", "\n"], "logprobs": [-0.025729810819029808, -6.794698856538162e-05, -8.22540732769994e-06, -0.00011944057769142091, -0.00021550717065110803, -0.0029963618144392967, -0.0017219253350049257, -0.0005745429079979658, -0.017763689160346985, -6.90197994117625e-05, -3.3378546504536644e-06, -1.4356237649917603, -5.006777428206988e-06, -1.311301275563892e-06, -2.622600959512056e-06, -9.822363062994555e-05, -0.2703617215156555, -1.5456902980804443, -1.9738268852233887, -0.0012748456792905927, -2.6495046615600586, -1.544272541999817, -1.2349318265914917, -0.34493279457092285], "finish_reason": "stop"}], "metrics": {"energy": 1231.4764557218552, "energy_per_token": 4.544193563549281, "time": 31.725775, "time_per_token": 0.11706928044280443}}
