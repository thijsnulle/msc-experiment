{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"Request data must be a dictionary.\")\n\n    req_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    secret_key = secret_key.encode('utf-8')\n    req_data = req_data.encode('utf-8')\n\n    hmac_signature = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    url_encoded_signature = urllib.parse.quote(hmac_signature)\n    url_encoded_signature = url_encoded_signature.replace(' ', '+')\n\n    return url_encoded_signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Request", " data", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "'))", "\n", "    ", "secret", "_", "key", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "req", "_", "data", " =", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", "\n", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ",", " req", "_", "data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ")", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " url", "_", "encoded", "_", "signature", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "\n", "    ", "return", " url", "_", "encoded", "_", "signature", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-0.42566874623298645, -0.030591195449233055, -0.0032515060156583786, -3.707340147229843e-05, -0.0016424274072051048, -2.5629668016335927e-05, -1.168244216387393e-05, -8.606540359323844e-05, -0.00425315136089921, -0.0018637683242559433, -0.00610344810411334, -0.0023606547620147467, -0.011982838623225689, -0.004795478656888008, -2.622600959512056e-06, -0.28020888566970825, -0.1651831865310669, -2.967865467071533, -0.00655180960893631, -0.335482120513916, -0.0005589353386312723, -0.021609799936413765, -0.023799458518624306, -0.9106290936470032, -0.0034401779994368553, -0.00036542891757562757, -0.001189477858133614, -0.18163570761680603, -0.0007347744540311396, -1.1448397636413574, -0.009879855439066887, -0.1609465479850769, -1.6660953760147095, -0.09395300596952438, -8.618460560683161e-05, -0.0012317459331825376, 0.0, -0.004937598016113043, -0.007914256304502487, -1.0967194612021558e-05, -2.3841855067985307e-07, -0.7058432698249817, -0.49684420228004456, -1.0371154530730564e-05, -1.311301275563892e-06, -0.0046377950347959995, -0.005096183158457279, -0.69057697057724, -0.28742358088493347, -1.5735502529423684e-05, -0.3587076663970947, -0.0005863377591595054, -0.0008112476789392531, -0.00237980205565691, -0.00014482879487331957, -0.010917337611317635, -0.080075204372406, -0.20710934698581696, -0.28579437732696533, -2.5587284564971924, -0.02132580801844597, -0.0071571627631783485, -0.02199424058198929, -0.7673733234405518, -4.076874756719917e-05, -1.1920928244535389e-07, -0.010963323526084423, -0.019810322672128677, -0.3681086301803589, -0.02580474503338337, -0.014586007222533226, -0.00011729506513802335, -0.0002917817619163543, -0.055083710700273514, -0.0629470944404602, -0.07026975601911545, -0.0009425011812709272, -0.0050919135101139545, -0.0262945257127285, -0.03976992145180702, -8.344646857949556e-07, 0.0, -8.427741704508662e-05, -0.0011710221879184246, -0.000651147507596761, -0.00042358008795417845, -0.0001212284987559542, -3.814624506048858e-05, -2.992108420585282e-05, -0.0009241600637324154, -0.5651228427886963, -0.00015090756642166525, -0.7920882701873779, -0.24482406675815582, -0.003487102687358856, -0.5370144248008728, -0.006762356963008642, -0.0011982887517660856, -4.768370445162873e-07, -0.00013743886665906757, -0.001327943871729076, -3.302042750874534e-05, -0.06074892729520798, -7.033323527139146e-06, 0.0, -0.00019333878299221396, -0.026992136612534523, -2.50339189733495e-06, 0.0, -0.00013171759201213717, -0.03615390509366989, -6.437280717364047e-06, -1.5497195136049413e-06, -1.7881377516459906e-06, -0.0012188870459794998, -1.2278481335670222e-05, -3.2186455882765586e-06, -0.00020239688456058502, -0.12241720408201218, -0.04484754055738449, -1.1920928244535389e-07, -3.40932747349143e-05, -0.017994370311498642, -0.04426629841327667, -0.418971449136734, -0.01528161857277155, -0.05902138724923134, -0.11866066604852676, -0.36317330598831177, -0.00037508129025809467, -0.001927424455061555, -2.3841855067985307e-07, 0.0, -7.748573807475623e-06, -1.537788011773955e-05, -1.5616295058862306e-05, -0.0008946230518631637, -0.8135477304458618, -0.014921130612492561, -3.576278118089249e-07, -1.883488948806189e-05, -2.50339189733495e-06, -0.946672797203064, -0.38278377056121826, -0.18813084065914154, -0.7646090984344482, -0.0009146321099251509, -0.003852209774777293, -0.0006052807439118624, -0.019270699471235275, -0.04222893342375755, -0.015979677438735962, -1.823885577323381e-05, -2.074220174108632e-05, -1.1920928244535389e-07, -2.3841830625315197e-06, -0.0009863278828561306, -0.003780362894758582, -0.31328222155570984, -0.3372306227684021, -8.642300235806033e-05, -0.00856547337025404, -0.00012385078298393637, -8.093983342405409e-05, -0.00656767887994647, -0.1759713590145111, -0.00010466027742950246, -0.00746958190575242, -0.015621085651218891, -7.819823804311454e-05, -3.707340147229843e-05, -7.152555099310121e-07, -1.9073468138230965e-06, -1.133063793182373, -7.152555099310121e-07, -1.1920922133867862e-06, -1.311301275563892e-06, -4.6491513785440475e-06, -1.9591310024261475, -0.000774917658418417], "finish_reason": "stop"}], "metrics": {"energy": 908.1368536739341, "energy_per_token": 5.045204742632967, "time": 21.132404, "time_per_token": 0.11740224444444446}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dict\")\n\n    req_data = json.dumps(req_data, sort_keys=True, ensure_ascii=False)\n    req_data = req_data.encode('utf-8')\n    secret_key = secret_key.encode('utf-8')\n    hmac_signature = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    signature = urllib.parse.quote(hmac_signature.decode('latin1'), safe='')\n    signature = signature.replace(' ', '+')\n    return signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " should", " be", " a", " dict", "\"", ")", "\n", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ",", " ensure", "_", "ascii", "=", "False", ")", "\n", "    ", "req", "_", "data", " =", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "secret", "_", "key", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ",", " req", "_", "data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ".", "decode", "('", "l", "atin", "1", "')", ",", " safe", "='", "')", "\n", "    ", "signature", " =", " signature", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "    ", "return", " signature", "\n", "\n", "def"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -1.320478916168213, -0.0023311602417379618, -0.05840492248535156, -2.022739887237549, -0.3085443079471588, -0.0005920564290136099, -0.0029696195852011442, -0.3852646052837372, -0.0005685858195647597, -0.922740638256073, -0.021349845454096794, -0.16291508078575134, -1.256800889968872, -0.07228821516036987, -8.40390202938579e-05, -0.0016167201101779938, -2.3841855067985307e-07, -0.004295171704143286, -0.00941881351172924, -1.2397689715726301e-05, -1.1920928244535389e-07, -0.765719473361969, -0.591948390007019, -8.940656698541716e-06, -1.1920922133867862e-06, -0.0076632569544017315, -0.004924075212329626, -0.6826316118240356, -1.4800066947937012, -3.576278118089249e-07, -5.304672595229931e-05, -0.0012447236804291606, -0.22926197946071625, -0.1537647396326065, -0.25173553824424744, -0.22895225882530212, -1.5319106578826904, -0.0031257839873433113, -0.0802086666226387, -0.18091841042041779, -0.5399953126907349, -5.364403477869928e-06, -1.7881377516459906e-06, -0.002465900732204318, -0.027439001947641373, -0.5132567286491394, -0.01821867562830448, -0.06170572713017464, -0.00012683063687290996, -0.0005813338793814182, -0.019157500937581062, -0.5339034795761108, -0.6313784718513489, -0.010050995275378227, -0.0010644490830600262, -0.00730237876996398, -0.01839202269911766, -4.529942543740617e-06, 0.0, -0.0015238827327266335, -0.0021759422961622477, -0.013594781048595905, -0.0013317534467205405, -0.0020697140134871006, -0.00021514961554203182, -2.90866428258596e-05, -0.0019293281948193908, -0.7566582560539246, -0.8353152871131897, -0.2592127025127411, -0.0096019571647048, -0.5958774089813232, -0.008633431047201157, -0.0015209070406854153, -1.9073468138230965e-06, -0.00012540031457319856, -0.005524486768990755, -5.352353764465079e-05, -0.05568407475948334, -3.0278701160568744e-05, 0.0, -0.00022599527437705547, -0.029913676902651787, -6.556489552167477e-06, 0.0, -0.00013386306818574667, -0.03831221163272858, -3.3378546504536644e-06, -1.6689286894688848e-06, -5.125986263010418e-06, -0.0012477001873776317, -1.7165990357170813e-05, -3.814689989667386e-06, -0.0003147821989841759, -0.13512961566448212, -0.06890872120857239, -2.3841855067985307e-07, -3.85038583772257e-05, -0.020813273265957832, -0.02478864975273609, -1.5957679748535156, -0.1131640151143074, -0.027391448616981506, -2.3841855067985307e-07, 0.0, -1.549708758830093e-05, -9.536697689327411e-06, -3.576272320060525e-06, -0.01198542956262827, -0.703218400478363, -0.05538545921444893, -4.768370445162873e-07, -0.001347706071101129, -1.1920858014491387e-05, -1.8437860012054443, -0.6390646696090698, -0.09857488423585892, -0.8677443265914917, -0.0002731903805397451, -1.0017763376235962, -0.07896509766578674, -0.03898245841264725, -0.20472478866577148, -0.15806929767131805, -0.13712620735168457, -0.2852923572063446, -0.1277914047241211, -0.7019591927528381, -0.00895838625729084, -0.022112248465418816, -0.0011208925861865282, -0.004914585035294294, -0.25014621019363403, -0.11811549216508865, -0.00016318420239258558, -0.010449931025505066, -0.00010501786891836673, -0.00010907054820563644, -0.013935056515038013, -0.2712293863296509, -0.013080856762826443, -0.009724270552396774, -0.4047352075576782, -0.005759311839938164, -1.4687434434890747], "finish_reason": "stop"}], "metrics": {"energy": 662.4573418750757, "energy_per_token": 4.014892981061065, "time": 15.041031, "time_per_token": 0.09115776363636363}}
{"outputs": [{"text": "# Validate the input data types\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Serialize the request data to JSON\n    req_data_json = json.dumps(req_data)\n\n    # Sign the request data using HMAC SHA256\n    req_data_bytes = bytes(req_data_json, 'utf-8')\n    secret_key_bytes = bytes(secret_key, 'utf-8')\n    signature = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256).digest()\n\n    # Encode the signature to base64\n    signature_encoded = urllib.parse.quote(signature.decode('utf-8'), safe='')\n\n    # Replace spaces with '+'\n    signature_encoded_plus = signature_encoded.replace(' ', '+')\n\n    return signature_encoded_plus", "tokens": ["#", " Valid", "ate", " the", " input", " data", " types", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " should", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "#", " Serial", "ize", " the", " request", " data", " to", " JSON", "\n", "    ", "req", "_", "data", "_", "json", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Sign", " the", " request", " data", " using", " H", "MAC", " SH", "A", "2", "5", "6", "\n", "    ", "req", "_", "data", "_", "bytes", " =", " bytes", "(", "req", "_", "data", "_", "json", ",", " '", "utf", "-", "8", "')", "\n", "    ", "secret", "_", "key", "_", "bytes", " =", " bytes", "(", "secret", "_", "key", ",", " '", "utf", "-", "8", "')", "\n", "    ", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", "_", "bytes", ",", " req", "_", "data", "_", "bytes", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " Enc", "ode", " the", " signature", " to", " base", "6", "4", "\n", "    ", "signature", "_", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "signature", ".", "decode", "('", "utf", "-", "8", "')", ",", " safe", "='", "')", "\n", "\n", "    ", "#", " Replace", " spaces", " with", " '", "+'", "\n", "    ", "signature", "_", "encoded", "_", "plus", " =", " signature", "_", "encoded", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "\n", "    ", "return", " signature", "_", "encoded", "_", "plus", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.7585830688476562, -2.0204415321350098, -0.021576551720499992, -1.1029987335205078, -0.4274139106273651, -1.182625651359558, -2.5172226428985596, -0.08016609400510788, -0.003072662279009819, -0.04093913733959198, -0.004166256636381149, -0.0015188835095614195, -1.3589766240329482e-05, -0.0033307571429759264, -1.847726889536716e-05, -2.455681169521995e-05, -3.397406908334233e-05, -0.0028580077923834324, -0.005640069022774696, -0.0022846567444503307, -0.0012861560098826885, -0.007997514680027962, -0.0037567296531051397, -2.50339189733495e-06, -0.15407533943653107, -0.12419117987155914, -0.5012970566749573, -0.0003358753747306764, -0.00016378014697693288, -1.3301893472671509, -0.0004401430196594447, -0.023305077105760574, -0.07485360652208328, -1.478756308555603, -0.003952430561184883, -0.000710592488758266, -0.0006007535266689956, -0.14080336689949036, -0.0011792379664257169, -0.11668135970830917, -1.7799797058105469, -0.009139133617281914, -0.08467642217874527, -0.19071349501609802, -0.012942596338689327, -1.332950472831726, -0.9979686737060547, -0.4541391134262085, -0.0005770448478870094, -0.45273372530937195, -0.01049688272178173, -0.1781851351261139, -0.3288312554359436, -0.438782274723053, -0.0027402015402913094, -0.0026265429332852364, -8.082063141046092e-05, -5.566918844124302e-05, -8.344646857949556e-07, -0.0009603655780665576, -0.00180272595025599, -4.291525328881107e-06, 0.0, -0.20100156962871552, -0.2626267373561859, -0.0666797012090683, -0.00019226610311307013, -0.0022096047177910805, -1.0198521614074707, -0.006638023070991039, -0.5297806262969971, -0.009369449689984322, -2.2023563385009766, -0.07114089280366898, -5.340433563105762e-05, -0.07772780954837799, -7.390948667307384e-06, -0.007504604756832123, -9.715084888739511e-05, -3.158996332786046e-05, -0.8932006359100342, -0.000271521887043491, -2.7050201892852783, -0.000556314189452678, -0.04797450825572014, -0.001610174193046987, -0.44982218742370605, -0.0011738798348233104, -2.873183012008667, -0.00041309406515210867, -0.0026686314959079027, -2.3841855067985307e-07, 0.0, -0.00018499570433050394, -1.4662635294371285e-05, -0.013066031038761139, -0.6449516415596008, -0.003132795449346304, -0.026932260021567345, -1.156323378381785e-05, -6.472854875028133e-05, -0.008927195332944393, -0.003908971324563026, -0.04516857489943504, -0.0009945451747626066, -0.009920931421220303, -0.0016310019418597221, -0.006639799568802118, -4.649054244509898e-05, -0.000735608336981386, -0.0008006466086953878, -0.004766530357301235, -9.536738616588991e-07, -1.1920928244535389e-07, -0.005007226951420307, -0.0016887226374819875, -0.0006691362359561026, -0.00017915551143232733, -9.179073458653875e-06, -2.5510462364763953e-05, -0.0017176411347463727, -0.019202174618840218, -0.8782206773757935, -0.15632276237010956, -0.0005893162451684475, -4.768370445162873e-07, -3.7788631743751466e-05, -0.026577923446893692, -1.3828182090946939e-05, -0.031178129836916924, -1.0847986231965479e-05, -1.1920928244535389e-07, -4.95898348162882e-05, 0.0, -0.00012015574611723423, -0.0035501806996762753, -2.3841855067985307e-07, 0.0, -1.0371154530730564e-05, -0.00022480344341602176, -0.00010525626566959545, -0.03130025789141655, -1.0728830375228426e-06, -1.1920922133867862e-06, -1.0728830375228426e-06, -0.0005978942499496043, -1.1801649634435307e-05, -3.814689989667386e-06, -2.2172682292875834e-05, -0.06488418579101562, -0.04762948304414749, -1.1920928244535389e-07, -1.4543427823809907e-05, -0.010508797131478786, -0.014146524481475353, -0.00010930894495686516, -0.0002461368858348578, -1.6167000532150269, -0.0030397421214729548, -0.05994616076350212, -0.030127229169011116, -2.089934825897217, -3.6782844066619873, -0.03631141036748886, -3.731181277544238e-05, -0.9426182508468628, -7.10462118149735e-05, -0.18018725514411926, -0.020657161250710487, -2.966233253479004, -0.023374486714601517, -0.27195024490356445, -1.1920928244535389e-07, 0.0, -1.0371154530730564e-05, -1.8596476365928538e-05, -1.0728830375228426e-06, -0.0017840436194092035, -1.573284387588501, -0.5771729350090027, -0.8992076516151428, -0.5249335169792175, -0.06148301064968109, -0.7299442887306213, -0.025078054517507553, -0.0004711233195848763, -0.38957124948501587, -0.058144912123680115, -0.0254884734749794, -0.04783223941922188, -0.2536120116710663, -0.09504790604114532, -0.0891747921705246, -0.00015925093612167984, -0.08531106263399124, -0.1427382379770279, -0.09384176880121231, -0.19732961058616638, -0.061882566660642624, -0.0001934579631779343, -0.1942024677991867, -0.0001486429391661659, -0.05121099576354027, -0.008631303906440735, -0.28978389501571655, -1.3491711616516113, -0.5707132816314697, -0.008045408874750137, -0.023792823776602745, -0.00011240804451517761, -7.152555099310121e-07, -0.000445385929197073, -0.0003471963864285499, -0.1265396922826767, -0.039803944528102875, -2.932505594799295e-05, -0.006950486451387405, -6.365573790390044e-05, -4.005352093372494e-05, -0.0029541682451963425, -0.014419637620449066, -7.64102369430475e-05, -0.3629536032676697, -0.005800794344395399, -0.0001282609737245366, -1.1086402082582936e-05, -0.0025830259546637535, -2.50339189733495e-06, -1.4324593544006348, -3.576278118089249e-07, -8.344646857949556e-07, -1.1920922133867862e-06, -3.3378546504536644e-06, -0.16592830419540405], "finish_reason": "stop"}], "metrics": {"energy": 957.633815145492, "energy_per_token": 4.092452201476462, "time": 21.510527, "time_per_token": 0.09192532905982906}}
{"outputs": [{"text": "# Ensure that the input is a dictionary.\n    if not isinstance(req_data, dict):\n        raise TypeError('req_data must be a dictionary')\n\n    # Convert the request data to JSON.\n    req_data = json.dumps(req_data)\n\n    # Sign the request data with the secret key.\n    hmac_signature = hmac.new(secret_key.encode(), req_data.encode(), hashlib.sha256).digest()\n\n    # URL encode the HMAC signature and replace spaces with '+'.\n    url_encoded_hmac = urllib.parse.quote(hmac_signature).replace(' ', '+')\n\n    return url_encoded_hmac", "tokens": ["#", " Ensure", " that", " the", " input", " is", " a", " dictionary", ".", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "('", "req", "_", "data", " must", " be", " a", " dictionary", "')", "\n", "\n", "    ", "#", " Convert", " the", " request", " data", " to", " JSON", ".", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Sign", " the", " request", " data", " with", " the", " secret", " key", ".", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " req", "_", "data", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " H", "MAC", " signature", " and", " replace", " spaces", " with", " '", "+'", ".", "\n", "    ", "url", "_", "encoded", "_", "h", "mac", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ")", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "\n", "    ", "return", " url", "_", "encoded", "_", "h", "mac", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.7585830688476562, -3.102600574493408, -0.6391909718513489, -0.27598968148231506, -1.4194960594177246, -0.9860554933547974, -0.1019522175192833, -0.0350465290248394, -1.9645737409591675, -0.03801582381129265, -0.001987150404602289, -0.0413762703537941, -0.005904256831854582, -0.0012732979375869036, -4.005352093372494e-05, -0.0005695389700122178, -2.90866428258596e-05, -5.125986263010418e-06, -7.795983401592821e-05, -0.0024251118302345276, -0.001279369811527431, -0.0012897277483716607, -0.001689436612650752, -0.012030777521431446, -0.005221064668148756, -2.7418097943154862e-06, -1.4016072750091553, -0.9662971496582031, -0.0009086770587600768, -0.0002914242504630238, -0.22560928761959076, -0.00038211196078918874, -0.013429422862827778, -0.06460137665271759, -0.1363658457994461, -0.00040344204171560705, -0.05996300280094147, -0.0008440031087957323, -0.043345510959625244, -0.720289945602417, -0.039950452744960785, -0.4560079872608185, -0.01575486920773983, -0.2303054928779602, -1.6093063354492188, -1.145804524421692, -0.012237937189638615, -0.0003110878460574895, -0.2221231758594513, -0.009335909970104694, -0.23024991154670715, -0.7527817487716675, -0.0024882566649466753, -4.458328112377785e-05, -0.00022873646230436862, 0.0, -0.0019346822518855333, -0.0018945855554193258, -1.3589766240329482e-05, 0.0, -0.20080401003360748, -0.2980664372444153, -0.052751705050468445, -0.00031728477915748954, -0.0025446198415011168, -0.47894522547721863, -0.003763617714866996, -0.12685884535312653, -0.008460985496640205, -0.1383507251739502, -0.34480714797973633, -0.09093084931373596, -0.004550577607005835, -1.6852071285247803, -0.0033027171157300472, -0.0003510097449179739, -0.8245744705200195, -0.19405098259449005, -0.0022347019985318184, -0.5029574036598206, -0.004993823356926441, -0.0011528043542057276, -1.7881377516459906e-06, -0.0005012686015106738, -0.0013109194114804268, -0.00017796363681554794, -0.46926501393318176, -3.3378044463461265e-05, -1.4305104514278355e-06, -0.003794613992795348, -5.2927523938706145e-05, -0.3946814239025116, -5.709961988031864e-05, -0.07800372689962387, -3.4570634852570947e-06, 0.0, -0.002267410745844245, -0.00013326710904948413, -0.012036548927426338, -4.088794958079234e-05, -0.03665162995457649, -3.3378546504536644e-06, -2.7418097943154862e-06, -2.50339189733495e-06, -0.0008285188814625144, -1.9788545614574105e-05, -6.079655122448457e-06, -7.045020902296528e-05, -0.26810532808303833, -0.044380225241184235, 0.0, -1.8000440832111053e-05, -0.010072474367916584, -0.01648109406232834, -0.00016044282529037446, -0.00011240804451517761, -0.16727592051029205, -0.030940299853682518, -0.01860547438263893, -1.101562261581421, -4.756337511935271e-05, -0.0075173829682171345, -0.8856458067893982, -0.015717318281531334, -0.00976700522005558, -0.0025755350943654776, -0.026994572952389717, -0.0004499138449318707, -0.03224697336554527, -0.0014509160537272692, -0.00024423000286333263, -0.8687726855278015, -0.012776188552379608, -0.07918054610490799, -0.06179426237940788, -1.3076266050338745, -5.400034933700226e-05, -1.0100436210632324, -0.0056195612996816635, -3.576278118089249e-07, 0.0, -1.585470999998506e-05, -0.00010513706365600228, -7.152531907195225e-06, -0.0016314780805259943, -0.31563225388526917, -0.0029810296837240458, -1.0728830375228426e-06, -5.507317473529838e-05, -3.4570634852570947e-06, -0.712598979473114, -0.07817572355270386, -0.0013043713988736272, -0.04666104540228844, -0.19856825470924377, -3.373566141817719e-05, -0.008404954336583614, -4.362964682513848e-05, -3.4689302992774174e-05, -0.0018772137118503451, -0.00900871492922306, -0.00016902448260225356, -0.8013749718666077, -0.010253256186842918, -4.3748852476710454e-05, -7.83174327807501e-05, -2.50339189733495e-06, -2.3841855067985307e-07, -2.706014311115723e-05, -1.385589599609375, -5.960462772236497e-07, -8.344646857949556e-07, -1.5497195136049413e-06, -3.2186455882765586e-06, -0.18311502039432526], "finish_reason": "stop"}], "metrics": {"energy": 704.6167830562591, "energy_per_token": 4.026381617464338, "time": 16.053617, "time_per_token": 0.09173495428571428}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"'req_data' must be a dictionary.\")\n    req_data = json.dumps(req_data, sort_keys=True)\n    req_data = req_data.encode('utf-8')\n    secret_key = secret_key.encode('utf-8')\n    hashed = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    hashed = urllib.parse.quote(hashed, safe='')\n    return hashed.replace(' ', '+')", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "'", "req", "_", "data", "'", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ")", "\n", "    ", "req", "_", "data", " =", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "secret", "_", "key", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "h", "ashed", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ",", " req", "_", "data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "h", "ashed", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "ashed", ",", " safe", "='", "')", "\n", "    ", "return", " has", "hed", ".", "replace", "('", " '", ",", " '", "+", "')", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -2.602076768875122, -0.021950509399175644, -0.003434238024055958, -0.0003725788265001029, -0.001150541938841343, -0.32933101058006287, -0.0005999195855110884, -0.058326996862888336, -0.05646964907646179, -1.1220002174377441, -0.004813630133867264, -0.0005236684810370207, -0.0023261650931090117, -1.5336350202560425, -0.8194565773010254, -0.019150367006659508, -0.17686912417411804, -1.1144640445709229, -0.08852983266115189, -0.00010406429646536708, -0.0016600412782281637, -2.3841855067985307e-07, -0.004100131336599588, -0.008369963616132736, -1.2516897186287679e-05, 0.0, -0.7966548800468445, -0.5190622806549072, -1.2159273865108844e-05, -1.1920922133867862e-06, -0.005395848769694567, -0.005496389232575893, -0.8897110223770142, -0.4684814512729645, -0.06676512211561203, -1.951159954071045, -0.0019024383509531617, -0.06506403535604477, -0.16449898481369019, -0.7894402742385864, -6.556489552167477e-06, -5.960462772236497e-07, -0.002942163497209549, -0.024881910532712936, -0.3587876856327057, -0.02825843170285225, -0.030265910550951958, -0.000102037942269817, -0.00037496211007237434, -0.01113203726708889, -0.0691036507487297, -0.9413829445838928, -0.015872208401560783, -0.0010139568476006389, -0.005474337842315435, -0.02421051822602749, -6.437280717364047e-06, 0.0, -0.0013136576162651181, -0.0016237420495599508, -0.005617308896034956, -0.0007653883076272905, -0.0006559127941727638, -7.056941103655845e-05, -2.8967437174287625e-05, -0.0010924329981207848, -0.07620017230510712, -0.8804339170455933, -1.64066481590271, -0.14498156309127808, -0.0007415643776766956, -7.152555099310121e-07, -2.9801878554280847e-05, -0.001693958998657763, -6.842378934379667e-05, -0.05481313169002533, -4.827859811484814e-05, 0.0, -0.0005701346672140062, -0.05304635688662529, -9.417489309271332e-06, -2.3841855067985307e-07, -0.0003716255014296621, -0.017967674881219864, -3.3378546504536644e-06, -2.50339189733495e-06, -4.6491513785440475e-06, -0.0012827033642679453, -2.288792165927589e-05, -4.768360213347478e-06, -0.0005236684810370207, -1.250112771987915, -0.012849627994000912, 0.0, -0.000120751719805412, -0.044236645102500916, -0.004057509358972311, -1.4518035650253296, -0.011396664194762707, -0.06483715027570724, -0.27671191096305847, -9.536738616588991e-07, 0.0, -1.883488948806189e-05, -7.986990567587782e-06, -2.7418097943154862e-06, -0.008256233297288418, -0.48183074593544006, -0.0007285801111720502, -1.8596476365928538e-05, -0.566107988357544, -0.6162537336349487, -0.11816898733377457, -0.006963508669286966, -0.061102017760276794, -0.005482636857777834, -1.1746491193771362, -0.056114695966243744, -1.9073304429184645e-05, -0.2029060274362564, -0.005412803962826729, -0.1719098836183548, -0.051141224801540375, -9.595887240720913e-05, -0.008037603460252285, -0.00014709345123264939, -0.00011979816190432757, -1.2531983852386475, -4.768370445162873e-07, -8.344646857949556e-07, -1.7881377516459906e-06, -7.152531907195225e-06, -0.15410026907920837], "finish_reason": "stop"}], "metrics": {"energy": 612.4599700317384, "energy_per_token": 4.083066466878256, "time": 13.588214, "time_per_token": 0.09058809333333334}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"Expected req_data to be a dictionary\")\n\n    # Serialize the data dictionary into a JSON string and encode it as bytes for HMAC signing\n    data = json.dumps(req_data).encode()\n\n    # Sign the data using HMAC SHA256 with the secret key\n    signature = hmac.new(secret_key.encode(), data, hashlib.sha256).digest()\n\n    # Encode the signature in base64 and URL encode it for safe transmission over HTTP\n    url_encoded_signature = urllib.parse.quote_plus(signature.decode('utf-8'), safe=\"\")\n\n    return url_encoded_signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Expected", " req", "_", "data", " to", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "#", " Serial", "ize", " the", " data", " dictionary", " into", " a", " JSON", " string", " and", " encode", " it", " as", " bytes", " for", " H", "MAC", " signing", "\n", "    ", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", ".", "encode", "()", "\n", "\n", "    ", "#", " Sign", " the", " data", " using", " H", "MAC", " SH", "A", "2", "5", "6", " with", " the", " secret", " key", "\n", "    ", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " Enc", "ode", " the", " signature", " in", " base", "6", "4", " and", " URL", " encode", " it", " for", " safe", " transmission", " over", " HTTP", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "signature", ".", "decode", "('", "utf", "-", "8", "')", ",", " safe", "=", "\"", "\"", ")", "\n", "\n", "    ", "return", " url", "_", "encoded", "_", "signature", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -3.597203493118286, -1.260894536972046, -0.0005802616360597312, -0.00033301531220786273, -0.013687210157513618, -0.00038842763751745224, -0.03640751168131828, -0.1381564885377884, -0.37211674451828003, -0.0005610798834823072, -0.00099323526956141, -0.2699612081050873, -0.0008181562297977507, -1.6366615295410156, -2.2842860221862793, -0.01779893785715103, -0.2635556161403656, -2.964830160140991, -3.2311511039733887, -1.3630584478378296, -0.062309298664331436, -0.2840662896633148, -0.07134038209915161, -3.073883295059204, -0.5544491410255432, -0.20829790830612183, -1.116037130355835, -0.4394350051879883, -3.1865789890289307, -0.3640497326850891, -0.00018845213344320655, -1.0806852579116821, -0.2408849447965622, -0.0007291757501661777, -1.4261565208435059, -1.5351669788360596, -0.042318638414144516, -3.4450891689630225e-05, -7.164221460698172e-05, -8.654219709569588e-05, -0.0013244913425296545, -0.0014029431622475386, -8.22540732769994e-06, 0.0, -0.19921860098838806, -0.044016387313604355, -0.001057542278431356, -0.5656949877738953, -0.001328777172602713, -0.3528575301170349, -0.00019965562387369573, -0.013272859156131744, -0.7492825984954834, -0.00896701030433178, -0.4459109902381897, -1.524898648262024, -0.33527812361717224, -7.855583680793643e-05, -0.5202561020851135, -6.437280717364047e-06, -0.008034765720367432, -9.858122211880982e-05, -1.7523612768854946e-05, -0.2030951976776123, -0.007218352518975735, -0.9269545078277588, -0.01091073453426361, -0.277222216129303, -0.00015436411194968969, -1.5764670372009277, -0.025781743228435516, -0.0003493413969408721, -4.768370445162873e-07, -4.660974445869215e-05, -0.003504684194922447, -4.60137271147687e-05, -0.09649693220853806, -3.075552376685664e-05, -3.576278118089249e-07, -0.0006053998949937522, -5.793403761344962e-05, -0.007519631180912256, -4.2676016164477915e-05, -0.05810622125864029, -0.00010573305189609528, -0.045797236263751984, -2.7418097943154862e-06, -7.152555099310121e-07, -4.768370445162873e-07, -0.0002857038634829223, -5.960446742392378e-06, -2.0265558760002023e-06, -2.7656173188006505e-05, -0.13826924562454224, -0.0917544886469841, 0.0, -6.794906312279636e-06, -0.01294412650167942, -0.007348057813942432, -0.00011205045302631333, -0.0003281293320469558, -1.2399849891662598, -0.001555900671519339, -0.008137760683894157, -0.08804832398891449, -3.269721269607544, -2.2820212841033936, -0.023599686101078987, -1.4662635294371285e-05, -0.649418830871582, -1.2084959745407104, -0.11239458620548248, -0.15754011273384094, -2.7426066398620605, -1.3283640146255493, -0.5684636831283569, -2.4365475177764893, -1.1007323265075684, -0.11313240230083466, -0.00024673278676345944, -1.1222981214523315, -0.02586747705936432, -0.14190663397312164, -0.07948127388954163, -0.0132979154586792, -0.0003137096355203539, -0.00193813256919384, -1.1920928244535389e-07, 0.0, -1.9907753085135482e-05, -4.172238186583854e-05, -7.271740287251305e-06, -0.00011324241495458409, -0.1364467740058899, -0.0012155532604083419, -0.001259368029423058, -1.3406623601913452, -0.06072895973920822, -0.23245088756084442, -0.3977496922016144, -1.4060262441635132, -0.039657529443502426, -0.0007787294453009963, -0.7005432844161987, -0.884944498538971, -0.06932089477777481, -2.0051426887512207, -0.1749524176120758, -0.15743134915828705, -0.011648732237517834, -0.022682970389723778, -0.05222267284989357, -0.00013290952483657748, -0.20497789978981018, -0.014822003431618214, -2.8609820219571702e-05, -0.00019894051365554333, -2.145764938177308e-06, -7.152555099310121e-07, -0.5131368637084961, -0.005341662093997002, -0.2375655174255371], "finish_reason": "stop"}], "metrics": {"energy": 754.6127218818666, "energy_per_token": 4.215713530066294, "time": 16.295689, "time_per_token": 0.09103736871508379}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"The req_data argument must be a dictionary.\")\n\n    data_str = json.dumps(req_data)\n    sign_bytes = hmac.new(secret_key.encode(), data_str.encode(), hashlib.sha256).digest()\n    sign_str = urllib.parse.quote_plus(sign_bytes.hex())\n\n    return sign_str", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " req", "_", "data", " argument", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "data", "_", "str", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "sign", "_", "bytes", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " data", "_", "str", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "sign", "_", "str", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "sign", "_", "bytes", ".", "hex", "())", "\n", "\n", "    ", "return", " sign", "_", "str"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -2.6170666217803955, -2.231147289276123, -0.0033188757952302694, -0.00044276448898017406, -1.0668376684188843, -0.2110297679901123, -0.0004893536097370088, -0.019995778799057007, -0.03119153343141079, -0.34776628017425537, -0.002449014689773321, -0.0005011494504287839, -0.0009777533123269677, -0.22117608785629272, -0.0009043894242495298, -2.4254493713378906, -0.8102980852127075, -1.0708454847335815, -0.0013802058529108763, -0.023924820125102997, -8.332382276421413e-05, -0.00020394629973452538, 0.0, -0.0027295020408928394, -0.009931436739861965, -4.6491513785440475e-06, 0.0, -0.7424126863479614, -0.10584163665771484, -0.16179867088794708, -3.821300506591797, -1.3204240798950195, -1.2435015439987183, -0.0021282420493662357, -0.012235111556947231, -7.390948667307384e-06, -0.0008422164828516543, -0.037789486348629, -0.00023803261865396053, -0.3793177306652069, -2.729855441430118e-05, -1.311301275563892e-06, -0.0008663953049108386, -8.999896090244874e-05, -0.37196609377861023, -8.105902816168964e-05, -0.03403448686003685, -0.00035386974923312664, -9.333651541965082e-05, -5.328513361746445e-05, -0.00011455356434453279, -0.010125342756509781, -4.1960789531003684e-05, -0.05277262255549431, -1.6689286894688848e-06, -3.3378546504536644e-06, -6.794906312279636e-06, -0.0007466865936294198, -1.2040065485052764e-05, -1.1920922133867862e-06, -4.768258077092469e-05, -0.04931926727294922, -0.00218129507265985, 0.0, -5.1020273531321436e-05, -0.006678522098809481, -0.0244302935898304, -0.38912561535835266, -0.1103518009185791, -0.6461519002914429, -0.034957896918058395, -0.045135874301195145, -3.576278118089249e-07, 0.0, -9.536697689327411e-06, -6.794906312279636e-06, -1.311301275563892e-06, -0.0017719058087095618, -0.7404544949531555, -0.0007434703293256462, -0.0012897277483716607, -0.030354497954249382, -2.7418097943154862e-06, -4.768370445162873e-07, -0.003062798175960779, -0.3621518909931183, -0.04262517765164375, -0.0833309218287468, -0.8674615025520325, -0.000300958170555532, -0.0130732087418437, -0.004932141397148371, -1.0490362910786644e-05, -0.0005261705373413861], "finish_reason": "stop"}], "metrics": {"energy": 446.36144551658646, "energy_per_token": 4.021274283933211, "time": 10.05002, "time_per_token": 0.09054072072072072}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"The 'req_data' argument should be a dictionary.\")\n\n    sorted_items = sorted(req_data.items(), key=lambda item: item[0])\n\n    encoded_request = json.dumps(sorted_items).encode()\n    sign = hmac.new(secret_key.encode(), encoded_request, hashlib.sha256)\n    signature = urllib.parse.quote(sign.digest()).replace(\" \", \"+\")\n\n    return signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " '", "req", "_", "data", "'", " argument", " should", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "s", "orted", "_", "items", " =", " sorted", "(", "req", "_", "data", ".", "items", "()", ",", " key", "=", "lambda", " item", ":", " item", "[", "0", "])", "\n", "\n", "    ", "encoded", "_", "request", " =", " json", ".", "d", "umps", "(", "s", "orted", "_", "items", ")", ".", "encode", "()", "\n", "    ", "sign", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " encoded", "_", "request", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "sign", ".", "dig", "est", "())", ".", "replace", "(", "\"", " \"", ",", " \"", "+", "\"", ")", "\n", "\n", "    ", "return", " signature", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -2.6170666217803955, -1.0118955373764038, -0.022999431937932968, -0.0021613112185150385, -0.00048637480358593166, -0.0011816193582490087, -0.8460678458213806, -1.5701031684875488, -0.0027440059930086136, -0.028386596590280533, -0.029192863032221794, -0.2192602902650833, -0.0036117101553827524, -0.0007148809381760657, -0.0017063356935977936, -0.24709565937519073, -0.0006805725861340761, -3.517709255218506, -0.016192590817809105, -0.000382707774406299, -1.5107508897781372, -0.0018831630004569888, -0.02222219854593277, -0.008035475388169289, -0.012271027080714703, -2.6702524337451905e-05, 0.0, -0.0005318895564414561, -0.0002479245886206627, -0.819004237651825, -0.00011312322021694854, -0.0037150431890040636, -0.0011554239317774773, -0.003540202509611845, -2.0945379734039307, -0.0006812873762100935, -0.1627604067325592, -0.0011066034203395247, -0.00891904253512621, -0.1979718655347824, -0.03729749470949173, -1.9265832901000977, -0.0004291805380489677, -2.2747836112976074, -0.02045500837266445, -2.8223776817321777, -0.6813053488731384, -2.0473241806030273, -0.00015710550360381603, -0.0035444789100438356, -1.7881377516459906e-06, -0.03821893036365509, -0.9175358414649963, -3.576278118089249e-07, -7.295342220459133e-05, -1.5497195136049413e-06, -0.22310054302215576, -0.24368302524089813, -0.013227332383394241, -1.0742242336273193, -0.006558915134519339, -0.4629894196987152, -3.397136688232422, -1.215303897857666, -0.016936665400862694, -3.099436753473128e-06, -0.00025817399728111923, -0.04602450132369995, -0.00011288482346571982, -0.19186323881149292, -2.4676019165781327e-05, -8.821448318485636e-06, -0.001583870965987444, -0.00010311071673640981, -0.03525921702384949, -8.40390202938579e-05, -0.044573381543159485, -7.152555099310121e-07, -5.960462772236497e-07, -0.0003319427778478712, -0.05559420585632324, -3.099436753473128e-06, -2.3841830625315197e-06, -6.437280717364047e-06, -0.0012948471121490002, -7.867782187531702e-06, -4.172316494077677e-06, -0.00014911970356479287, -1.631695032119751, -0.3637408912181854, -0.7146508097648621, -0.04851396754384041, -0.39692577719688416, -4.768370445162873e-07, 0.0, -1.2993727978027891e-05, -1.6689160474925302e-05, -1.7881377516459906e-06, -0.003453958546742797, -0.5799164175987244, -0.00729953870177269, -9.905801562126726e-05, -0.7725164294242859, -1.6689286894688848e-06, -1.481052041053772, -0.23734843730926514, -0.003062441712245345, -0.8177221417427063, -0.015650073066353798, -0.3932122588157654, -8.21318244561553e-05, -0.007606589701026678, -0.0015981532633304596, -6.198863957251888e-06, -0.0038448472041636705, -0.005849030800163746, -0.38482823967933655, -9.583967766957358e-05, -0.007733287289738655, -0.03581754118204117, -0.5703130960464478, -0.002547354670241475, -0.3241124749183655], "finish_reason": "stop"}], "metrics": {"energy": 570.6559435844422, "energy_per_token": 4.076113882746015, "time": 12.751843, "time_per_token": 0.09108459285714285}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"The 'req_data' argument must be a dictionary.\")\n    # Convert request data to JSON string\n    json_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n\n    # Calculate HMAC signature\n    hmac_sig = hmac.new(secret_key.encode('utf-8'), json_data.encode('utf-8'), hashlib.sha256).digest()\n\n    # URL encode the signature\n    encoded_sig = urllib.parse.quote(hmac_sig)\n\n    # Replace spaces with '+'\n    final_sig = encoded_sig.replace('%20', '+')\n\n    return final_sig", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " '", "req", "_", "data", "'", " argument", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "#", " Convert", " request", " data", " to", " JSON", " string", "\n", "    ", "json", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "'))", "\n", "\n", "    ", "#", " Calculate", " H", "MAC", " signature", "\n", "    ", "h", "mac", "_", "sig", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", ",", " json", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " signature", "\n", "    ", "encoded", "_", "sig", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "sig", ")", "\n", "\n", "    ", "#", " Replace", " spaces", " with", " '", "+'", "\n", "    ", "final", "_", "sig", " =", " encoded", "_", "sig", ".", "replace", "('", "%", "2", "0", "'", ",", " '", "+", "')", "\n", "\n", "    ", "return", " final", "_", "sig", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -2.6170666217803955, -1.0118955373764038, -0.022999431937932968, -0.0021613112185150385, -0.00048637480358593166, -0.0011816193582490087, -0.8460678458213806, -0.2416691929101944, -0.0005633435794152319, -0.029548589140176773, -0.023780833929777145, -0.18903197348117828, -0.0027237955946475267, -0.0005697772721759975, -0.0015243588713929057, -1.496532678604126, -2.519378423690796, -0.5806795954704285, -2.4135076999664307, -0.015992935746908188, -0.09880860894918442, -0.6105467677116394, -0.529833197593689, -0.32867276668548584, -0.0008771148277446628, -1.6423249244689941, -0.0015347142471000552, -0.3638100028038025, -0.0027072704397141933, -0.0026490141171962023, -9.48860906646587e-05, -4.31528314948082e-05, 0.0, -0.0014017528155818582, -0.001441036001779139, -6.556489552167477e-06, 0.0, -1.4900110960006714, -0.3748096823692322, -4.0531076592742465e-06, -7.152555099310121e-07, -0.0010031197452917695, -0.006279026158154011, -0.36040857434272766, -0.21843478083610535, -1.6212332411669195e-05, -0.2094794511795044, -0.0002586507180240005, -0.0003972456615883857, -0.0011478032683953643, -6.532455881824717e-05, -0.005667213816195726, -0.04517381638288498, -0.04469582065939903, -1.5146698951721191, -0.00031716562807559967, -0.02408449538052082, -2.513406753540039, -0.17161060869693756, -8.308542601298541e-05, -0.5812640190124512, -0.755926251411438, -0.0005161621957086027, -0.3748498260974884, -0.05200903117656708, -0.0006299418746493757, -2.630664825439453, -0.001924568903632462, -0.0008385241380892694, -2.0265558760002023e-06, -0.00045110538485459983, -0.0004866131057497114, -0.00022790218645241112, -0.42759954929351807, -3.015949550899677e-05, -2.264974000354414e-06, -0.0015737541252747178, -4.1960789531003684e-05, -0.9923234581947327, -0.02126932516694069, -0.011363428086042404, -1.9073468138230965e-06, -2.3245540432981215e-05, -0.000259365770034492, -0.22022658586502075, -0.0002337421028641984, -1.0967194612021558e-05, -0.0003196682082489133, -7.748303323751315e-05, -0.002905197674408555, -0.00041929035796783864, -0.00015245705435518175, -7.152555099310121e-07, -1.9073304429184645e-05, -8.737658936297521e-05, -0.06186038255691528, -1.7881377516459906e-06, -2.264974000354414e-06, -3.099436753473128e-06, -0.0019365858752280474, -1.7881233361549675e-05, -2.3841830625315197e-06, -0.00016330339713022113, -0.17921654880046844, -0.03368772566318512, 0.0, -4.5060096454108134e-05, -0.013791035860776901, -0.15662135183811188, -0.0002302858338225633, -0.001157805323600769, -0.27726587653160095, -0.03459729254245758, -0.621232271194458, -0.5403338670730591, -1.112050175666809, -0.00023731753753963858, -1.5579906702041626, -0.04665717855095863, -0.754540741443634, -0.000697846058756113, -0.0028348281048238277, -2.3841855067985307e-07, 0.0, -2.002696055569686e-05, -5.61460001335945e-05, -1.7881377516459906e-06, -0.0008636558777652681, -0.5448287129402161, -0.0007030876004137099, -7.152555099310121e-07, -5.5549986427649856e-05, -3.576278118089249e-07, -0.34483155608177185, -0.1722855418920517, -0.037792813032865524, -0.000266278104390949, -0.0369841493666172, -0.05791600048542023, -0.03303271904587746, -0.039629459381103516, -0.043529052287340164, -0.00024423000286333263, -0.0758076161146164, -0.0002273062855238095, -2.115994453430176, -0.013618065975606441, -0.07913439720869064, -0.0005920564290136099, -0.00499773770570755, -1.1920922133867862e-06, 0.0, -0.00029559535323642194, -0.0001787979417713359, -0.1204540953040123, -2.0402045249938965, -0.00024732868769206107, -0.010420910082757473, -0.00013541258522309363, -3.969590397900902e-05, -0.004311433061957359, -0.00029845553217455745, -5.340433563105762e-05, -0.005103773903101683, -0.08971656858921051, -0.00012766500003635883, -0.09150104969739914, -0.005887191742658615, -2.145764938177308e-06, -3.576278118089249e-07, -1.223930835723877, -4.768370445162873e-07, -8.344646857949556e-07, -1.311301275563892e-06, -4.291525328881107e-06, -0.1829623430967331], "finish_reason": "stop"}], "metrics": {"energy": 772.2560019779205, "energy_per_token": 4.001326435118759, "time": 17.54644, "time_per_token": 0.0909141968911917}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    req_data_str = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    secret_key_bytes = secret_key.encode('utf-8')\n    hmac_obj = hmac.new(secret_key_bytes, req_data_str.encode('utf-8'), hashlib.sha256)\n    signature = hmac_obj.digest().hex()\n    quoted_signature = urllib.parse.quote(signature, safe='').replace('%20', '+')\n\n    return quoted_signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " must", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "req", "_", "data", "_", "str", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "'))", "\n", "    ", "secret", "_", "key", "_", "bytes", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "h", "mac", "_", "obj", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", "_", "bytes", ",", " req", "_", "data", "_", "str", ".", "encode", "('", "utf", "-", "8", "')", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "signature", " =", " h", "mac", "_", "obj", ".", "dig", "est", "()", ".", "hex", "()", "\n", "    ", "quoted", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "signature", ",", " safe", "='", "')", ".", "replace", "('", "%", "2", "0", "'", ",", " '", "+", "')", "\n", "\n", "    ", "return", " quoted", "_", "signature", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -0.36943480372428894, -0.0005714452126994729, -0.03027990460395813, -0.07535819709300995, -0.11703582108020782, -0.00041797960875555873, -0.001780949649401009, -0.2545730769634247, -0.0007622911944054067, -0.9957013130187988, -0.016037749126553535, -0.15211521089076996, -0.24179650843143463, -0.8796574473381042, -0.0012455570977181196, -0.04154656082391739, -9.679325739853084e-05, -0.0001967951684491709, 0.0, -0.0024040627758949995, -0.007200363092124462, -4.410734163684538e-06, 0.0, -0.8504891395568848, -0.45896080136299133, -5.722029527532868e-06, -7.152555099310121e-07, -0.002328781643882394, -0.003942337818443775, -0.5373408198356628, -0.30925166606903076, -7.629365427419543e-06, -0.33857813477516174, -0.00041392818093299866, -0.0006130246329121292, -0.0020730451215058565, -8.761498611420393e-05, -0.014794283546507359, -0.06049704551696777, -0.03506862744688988, -0.20123349130153656, -2.374326705932617, -0.013277918100357056, -0.013981844298541546, -0.14889423549175262, -0.16604675352573395, -0.0005855038180015981, -0.19364392757415771, -1.2159273865108844e-05, 0.0, -0.00033718624035827816, -0.002595629310235381, -0.21162614226341248, -0.019379325211048126, -0.006435859017074108, -4.410734163684538e-06, -0.00025602878304198384, -0.018235649913549423, -0.05160913243889809, -3.0669963359832764, -0.28983673453330994, -0.001064806361682713, -1.2146791219711304, -0.0003262225945945829, -0.00011777184408856556, -1.1920928244535389e-07, -1.7881233361549675e-05, -0.004459674004465342, -3.540453326422721e-05, -0.016838088631629944, -5.125986263010418e-06, 0.0, -8.880697714630514e-05, 0.0, -8.77341881277971e-05, -0.05710149556398392, -7.152555099310121e-07, 0.0, -2.9682672902708873e-05, -8.702239938429557e-06, -0.00022825974156148732, -9.07141511561349e-05, -0.014909503981471062, -0.0010517071932554245, -0.00022075122979003936, -2.610649426060263e-05, -2.8609820219571702e-05, -4.577531944960356e-05, -0.056522149592638016, -3.3378546504536644e-06, -1.7881377516459906e-06, -2.9802276912960224e-06, -0.0012230543652549386, -1.2159273865108844e-05, -1.9073468138230965e-06, -0.00019608005823101848, -0.002197947818785906, -0.02728484943509102, -0.20301997661590576, -0.12982121109962463, -0.4078744351863861, -5.960462772236497e-07, -9.929640509653836e-05, -1.0728830375228426e-06, -4.0531076592742465e-06, -1.122206687927246, -5.960462772236497e-07, -7.021180499577895e-05, -1.4221560955047607, -0.07683181762695312, -0.0003301552205812186, -0.06713403761386871, -0.06476351618766785, -3.115623712539673, -0.0430426187813282, -0.027576200664043427, -0.0011701886542141438, -0.0018560340395197272, -1.0728830375228426e-06, 0.0, -9.059865078597795e-06, -4.8397800128441304e-05, -2.0265558760002023e-06, -0.00048423008411191404, -0.49353232979774475, -0.0011845960980281234, -1.0914978981018066, -0.009811981581151485, -0.03750499710440636, -0.006734649650752544, -1.1140663623809814, -0.009181302972137928, -0.09615157544612885, -0.2646859288215637, -0.10075061023235321, -0.05160120502114296, -9.679325739853084e-05, -2.3245540432981215e-05, -0.004459199029952288, -0.0006206493126228452, -5.972207145532593e-05, -0.006331266835331917, -1.2962665557861328, -0.0006132629350759089, -0.011106573045253754, -0.013026260770857334, -4.768370445162873e-07, -2.3841855067985307e-07, -0.5207428932189941, -0.003799601923674345, -0.30638447403907776], "finish_reason": "stop"}], "metrics": {"energy": 698.9731321620941, "energy_per_token": 4.087562176386515, "time": 15.6500845, "time_per_token": 0.09152096198830409}}
{"outputs": [{"text": "# Validate the input data type\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Convert the request data to a JSON string\n    data = json.dumps(req_data)\n\n    # Calculate the HMAC signature of the request data using HMAC SHA256 and the provided secret key\n    hmac_signature = hmac.new(secret_key.encode(), data.encode(), hashlib.sha256).digest()\n\n    # URL encode the signature and replace spaces with '+'\n    url_encoded = urllib.parse.quote(hmac_signature, safe='').replace('%20', '+')\n\n    return url_encoded", "tokens": ["#", " Valid", "ate", " the", " input", " data", " type", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " should", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " the", " request", " data", " to", " a", " JSON", " string", "\n", "    ", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Calculate", " the", " H", "MAC", " signature", " of", " the", " request", " data", " using", " H", "MAC", " SH", "A", "2", "5", "6", " and", " the", " provided", " secret", " key", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " data", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " signature", " and", " replace", " spaces", " with", " '", "+'", "\n", "    ", "url", "_", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ",", " safe", "='", "')", ".", "replace", "('", "%", "2", "0", "'", ",", " '", "+", "')", "\n", "\n", "    ", "return", " url", "_", "encoded", "\n", "\n", "if"], "logprobs": [-1.7585830688476562, -2.0204415321350098, -0.021576551720499992, -1.1029987335205078, -0.4274139106273651, -1.182625651359558, -0.7507508397102356, -0.11236774176359177, -0.001734420657157898, -0.035679858177900314, -0.005402607377618551, -0.0009677494526840746, -2.288792165927589e-05, -0.0007951673469506204, -1.3589766240329482e-05, -4.887569048150908e-06, -7.402622577501461e-05, -0.004235820844769478, -0.002197947818785906, -0.0019593106117099524, -0.0016980052459985018, -0.010282635688781738, -0.004949341528117657, -2.264974000354414e-06, -0.18217167258262634, -0.12550020217895508, -1.0338484048843384, -0.0004876854654867202, -0.00022265815641731024, -1.3949706554412842, -0.001256034360267222, -0.03461744636297226, -0.07768192887306213, -1.066666603088379, -0.0057852682657539845, -0.0008061258122324944, -0.000595034915022552, -0.03256722912192345, -0.0007678897818550467, -0.08335921913385391, -0.6651178598403931, -0.1279786378145218, -0.2972905933856964, -0.019804127514362335, -0.2343718707561493, -0.5441059470176697, -0.4140622019767761, -0.07353989034891129, -0.2685554623603821, -0.00021705655672121793, -2.3933873176574707, -0.6241658926010132, -0.005087762605398893, -5.125868119648658e-05, -8.916457591112703e-05, -1.311301275563892e-06, -0.0008336406317539513, -0.0012557962909340858, -7.867782187531702e-06, 0.0, -0.16929003596305847, -0.20284393429756165, -0.04847467690706253, -0.00016139635408762842, -0.00382608431391418, -2.7691116333007812, -0.024055983871221542, -0.05925847589969635, -0.00014697425649501383, -0.27355873584747314, -1.551337480545044, -0.0024624522775411606, -0.2876618206501007, -0.005029051564633846, -0.9193992614746094, -2.8075034618377686, -0.0006942722829990089, -0.026479247957468033, -2.8967437174287625e-05, -0.005651685409247875, -0.000188332938705571, -6.544376083184034e-05, -1.289440631866455, -0.12555697560310364, -2.710845708847046, -0.010684310458600521, -0.014259115792810917, -0.056177131831645966, -0.0005509527400135994, -0.48520582914352417, -0.18393558263778687, -0.0012935374397784472, -0.3118271231651306, -0.00600344268605113, -0.0012391278287395835, -9.536738616588991e-07, -0.00014101465058047324, -0.0019073167350143194, -0.00011717586312443018, -0.35163137316703796, -3.0874729418428615e-05, -1.0728830375228426e-06, -0.0017526278970763087, -4.2676016164477915e-05, -0.43421587347984314, -8.34430247778073e-05, -0.1191100925207138, -0.0006652049487456679, -6.472854875028133e-05, -0.015795938670635223, -3.8265450712060556e-05, -0.01887795887887478, -4.291525328881107e-06, -1.0728830375228426e-06, -9.536738616588991e-07, -0.0004138090298511088, -5.245195097813848e-06, -1.6689286894688848e-06, -3.790783375734463e-05, -0.19105102121829987, -0.06487781554460526, 0.0, -1.597391747054644e-05, -0.008722774684429169, -0.012277974747121334, -0.00018571082910057157, -0.00022766382608097047, -0.3687313497066498, -0.026422012597322464, -0.008224074728786945, -2.783334732055664, -0.4599389135837555, -0.014122429303824902, -0.015093171037733555, -0.0035355696454644203, -0.020354559645056725, -0.0005453529884107411, -0.09173121303319931, -0.00026246439665555954, -0.8962143659591675, -0.023140152916312218, -0.05204581096768379, -2.8447585105895996, -0.006961969658732414, -2.3841855067985307e-07, 0.0, -1.3708974620385561e-05, -0.0001070442158379592, -7.152531907195225e-06, -0.0011457790387794375, -0.50320965051651, -0.002108614193275571, -5.960462772236497e-07, -0.00010013079008786008, -1.311301275563892e-06, -1.0247654914855957, -0.0048837424255907536, -0.13195796310901642, -0.03015533648431301, -0.17492759227752686, -0.003158226143568754, -0.17137932777404785, -0.9859667420387268, -0.019186154007911682, -0.03120470605790615, -0.0001538873475510627, -2.8729025871143676e-05, -0.0031771203503012657, -0.0005694198189303279, -5.817244164063595e-05, -0.003920251969248056, -0.022829212248325348, -0.00014518637908622622, -0.4082565903663635, -0.008471032604575157, -4.088794958079234e-05, -0.00011228884250158444, -0.35200098156929016, -0.0041675628162920475, -0.35443300008773804], "finish_reason": "stop"}], "metrics": {"energy": 725.9973651542663, "energy_per_token": 4.033318695301479, "time": 16.520761, "time_per_token": 0.09178200555555556}}
{"outputs": [{"text": "req_data_str = json.dumps(req_data, ensure_ascii=False, sort_keys=True)\n    hashed = hmac.new(\n        bytes(secret_key, 'utf-8'),\n        bytes(req_data_str, 'utf-8'),\n        digestmod=hashlib.sha256\n    )\n    return urllib.parse.quote(hashed.digest()).replace('%2B', '+')", "tokens": ["req", "_", "data", "_", "str", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " ensure", "_", "ascii", "=", "False", ",", " sort", "_", "keys", "=", "True", ")", "\n", "    ", "h", "ashed", " =", " h", "mac", ".", "new", "(", "\n", "        ", "bytes", "(", "secret", "_", "key", ",", " '", "utf", "-", "8", "')", ",", "\n", "        ", "bytes", "(", "req", "_", "data", "_", "str", ",", " '", "utf", "-", "8", "')", ",", "\n", "        ", "dig", "est", "mod", "=", "hash", "lib", ".", "sha", "2", "5", "6", "\n", "    ", ")", "\n", "    ", "return", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "ashed", ".", "dig", "est", "())", ".", "replace", "('", "%", "2", "B", "'", ",", " '", "+", "')", "\n", "\n", "if"], "logprobs": [-3.063173294067383, -0.020827867090702057, -0.14355459809303284, -0.5851482152938843, -0.8219333291053772, -0.0021583375055342913, -0.03150438889861107, -8.248942322097719e-05, -0.0003044141922146082, -2.3841855067985307e-07, -0.0018057008273899555, -0.005231144838035107, -5.960446742392378e-06, 0.0, -1.0312269926071167, -2.0516061782836914, -2.9802276912960224e-06, -1.8358061424805783e-05, -0.003092390252277255, -0.04806051775813103, -1.0186123847961426, -0.2825881540775299, -2.50339189733495e-06, -2.50339189733495e-06, -0.0021062351297587156, -0.013484466820955276, -0.38704895973205566, -0.10867895185947418, -0.10518502444028854, -1.1647595167160034, -1.8761736154556274, -0.2701282799243927, -0.0012675831094384193, -9.536738616588991e-07, -0.0002213471452705562, -0.00037317464011721313, -0.00034648136352188885, -1.5247032642364502, -0.019936418160796165, -2.7669103145599365, -0.015033752657473087, -0.036638759076595306, -2.3364747903542593e-05, -8.344646857949556e-07, -0.015661105513572693, -0.6500988006591797, -0.2013428658246994, -0.0599178671836853, -0.00040391870425082743, -0.0016559947980567813, -0.0005729940603487194, -0.07573600858449936, -0.00023874769976828247, -0.7877513766288757, -0.00032884435495361686, -0.002434744266793132, -1.4305104514278355e-06, 0.0, -0.00041559641249477863, -7.152555099310121e-07, -0.0029142312705516815, -0.04557379335165024, -0.001761909923516214, -0.0004332319076638669, -5.090107151772827e-05, -6.317892984952778e-05, -0.00044955636258237064, -0.03338766098022461, -0.00024971229140646756, -1.6233460903167725, -2.3841855067985307e-07, -0.00010740180005086586, -0.00833260640501976, -0.00035315475543029606, -4.768370445162873e-07, -1.6689286894688848e-06, -4.672895011026412e-05, -0.0024033491499722004, -2.3841574147809297e-05, -9.536738616588991e-07, -0.2621212899684906, -0.024346066638827324, -5.519237674889155e-05, -0.6117292642593384, -0.07176276296377182, -1.7369530200958252, -0.011040079407393932, -8.344646857949556e-07, 0.0, -4.160317621426657e-05, -7.402622577501461e-05, -4.494089080253616e-05, -0.0009266611887142062, -0.26065918803215027, -0.028201298788189888, -6.508615479106084e-05, -0.00022718709078617394, -0.06888001412153244, -5.960462772236497e-07, -1.8011679649353027, -0.13051824271678925, -0.0005228344234637916, -0.39953550696372986, -0.3394889533519745, -0.00032443503732793033, -2.6581010818481445, -6.532455881824717e-05, -4.851700214203447e-05, -0.006809600163251162, -0.00034981805947609246, -0.0005915798828937113, -0.6436334848403931, -0.006585443392395973, -0.40732455253601074], "finish_reason": "stop"}], "metrics": {"energy": 484.56208715438845, "energy_per_token": 4.250544624161302, "time": 10.264943, "time_per_token": 0.09004335964912281}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError('Request data should be a dictionary')\n\n    req_data_json = json.dumps(req_data, sort_keys=True)\n    req_data_bytes = bytes(req_data_json, 'utf-8')\n    secret_key_bytes = bytes(secret_key, 'utf-8')\n\n    hmac_signature = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256).digest()\n    hmac_signature_base64 = urllib.parse.quote_plus(hmac_signature.hex())\n\n    return hmac_signature_base64", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "('", "Request", " data", " should", " be", " a", " dictionary", "')", "\n", "\n", "    ", "req", "_", "data", "_", "json", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ")", "\n", "    ", "req", "_", "data", "_", "bytes", " =", " bytes", "(", "req", "_", "data", "_", "json", ",", " '", "utf", "-", "8", "')", "\n", "    ", "secret", "_", "key", "_", "bytes", " =", " bytes", "(", "secret", "_", "key", ",", " '", "utf", "-", "8", "')", "\n", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", "_", "bytes", ",", " req", "_", "data", "_", "bytes", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "h", "mac", "_", "signature", "_", "base", "6", "4", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "h", "mac", "_", "signature", ".", "hex", "())", "\n", "\n", "    ", "return", " h", "mac", "_", "signature", "_", "base", "6", "4", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -1.602193832397461, -3.2358505725860596, -0.012305647134780884, -1.2549099922180176, -0.0024063221644610167, -0.0613580085337162, -0.055825117975473404, -0.32556137442588806, -0.0008912881603464484, -0.23313811421394348, -0.0006338732782751322, -0.9257422089576721, -0.011728499084711075, -0.14861489832401276, -0.34644147753715515, -1.0755956172943115, -0.02400338090956211, -0.0076280031353235245, -9.989239333663136e-05, -0.00019035911827813834, -2.3841855067985307e-07, -0.0021968772634863853, -0.006497921887785196, -8.821448318485636e-06, 0.0, -1.1307063102722168, -0.511073648929596, -1.0609570381348021e-05, -8.344646857949556e-07, -0.0036946148611605167, -0.0032366530504077673, -0.8637010455131531, -0.3375195264816284, -0.24089618027210236, -0.8481614589691162, -0.0005855038180015981, -0.0371914878487587, -0.002561028813943267, -0.5422612428665161, -0.001784638618119061, -2.423389196395874, -0.000740968796890229, -0.0044701178558170795, -1.4305104514278355e-06, 0.0, -6.878139538457617e-05, -1.6093124941107817e-05, -0.025348547846078873, -0.2416205108165741, -0.021967068314552307, -0.031343236565589905, -4.8874615458771586e-05, -0.00010156115604331717, -0.0037726436275988817, -0.23102012276649475, -0.10467293113470078, -0.001613506581634283, -0.009142204187810421, -0.007474906742572784, -0.008137642405927181, -9.190614218823612e-05, -0.001570302527397871, -0.00117649941239506, -0.011189683340489864, -2.0265558760002023e-06, 0.0, -0.008872726000845432, -0.003008009400218725, -0.002104212762787938, -0.0004078510100953281, -3.731181277544238e-05, -1.5735502529423684e-05, -0.0008811643347144127, -0.5840192437171936, -0.00010561384988250211, -0.4881284534931183, -0.2739804685115814, -0.0018504415638744831, -0.7510843276977539, -0.06211875379085541, -0.0010174104245379567, -8.344646857949556e-07, -0.00021300431399140507, -0.01196658331900835, -2.95634672511369e-05, -0.13689669966697693, -1.645074735279195e-05, 0.0, -3.707340147229843e-05, 0.0, -0.00013052565918769687, -0.010948466137051582, -1.0728830375228426e-06, -1.1920928244535389e-07, -9.536697689327411e-06, -4.434487345861271e-05, -0.0001578206429257989, -0.047932352870702744, -1.7881377516459906e-06, -1.9073468138230965e-06, -2.264974000354414e-06, -0.0009757286752574146, -1.2040065485052764e-05, -1.4305104514278355e-06, -0.00015352977789007127, -0.20887425541877747, -0.010726414620876312, 0.0, -2.2172682292875834e-05, -0.012073885649442673, -0.05232404172420502, -1.3837854862213135, -0.00040368037298321724, -0.00012063252506777644, -0.087434321641922, -0.019637571647763252, -2.086737632751465, -0.003872634842991829, -5.352353764465079e-05, -0.01703534834086895, -0.36633986234664917, -3.576278118089249e-07, 0.0, -1.1205610462639015e-05, -9.417489309271332e-06, -1.1920922133867862e-06, -0.0008634176338091493, -0.1866210550069809, -0.002123364945873618, -0.0007398966699838638, -0.21117107570171356, -1.5497195136049413e-06, -0.0014985294546931982, -1.8954096958623268e-05, -0.3848026692867279, -0.5792058110237122, -0.0747184231877327, -0.02815018780529499, -0.1642265021800995, -0.00017557987303007394, -0.01622719131410122, -0.008473278023302555, -3.576278118089249e-07, -2.109982233378105e-05, -7.748573807475623e-06, -0.00031990656862035394, -9.179073458653875e-06, -3.6954811548639555e-06, -1.1920928244535389e-07, -0.4220578670501709, -0.0038314282428473234, -0.32987096905708313], "finish_reason": "stop"}], "metrics": {"energy": 683.9607907600405, "energy_per_token": 4.095573597365512, "time": 15.691024, "time_per_token": 0.09395822754491018}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"Invalid request data type. Expected dict.\")\n\n    # Convert the request data dictionary to a JSON-encoded string\n    data = json.dumps(req_data)\n\n    # Create a hashlib.sha256 hash object and pass the secret key as bytes\n    signing_hash = hmac.new(secret_key.encode(), digestmod=hashlib.sha256)\n\n    # Update the hash object with the data and digest (finalize) the hash\n    signing_hash.update(data.encode())\n    digest = signing_hash.digest()\n\n    # Convert the digest to a hexadecimal string and URL encode it\n    url_encoded_digest = urllib.parse.quote(digest.hex(), safe='')\n\n    # Replace spaces with '+'\n    url_encoded_digest = url_encoded_digest.replace(\"%20\", \"+\")\n\n    return url_encoded_digest", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " request", " data", " type", ".", " Expected", " dict", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " the", " request", " data", " dictionary", " to", " a", " JSON", "-", "encoded", " string", "\n", "    ", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Create", " a", " hash", "lib", ".", "sha", "2", "5", "6", " hash", " object", " and", " pass", " the", " secret", " key", " as", " bytes", "\n", "    ", "sign", "ing", "_", "hash", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " digest", "mod", "=", "hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "\n", "    ", "#", " Update", " the", " hash", " object", " with", " the", " data", " and", " digest", " (", "final", "ize", ")", " the", " hash", "\n", "    ", "sign", "ing", "_", "hash", ".", "update", "(", "data", ".", "encode", "())", "\n", "    ", "dig", "est", " =", " signing", "_", "hash", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " Convert", " the", " digest", " to", " a", " hex", "ade", "c", "imal", " string", " and", " URL", " encode", " it", "\n", "    ", "url", "_", "encoded", "_", "dig", "est", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "dig", "est", ".", "hex", "()", ",", " safe", "='", "')", "\n", "\n", "    ", "#", " Replace", " spaces", " with", " '", "+'", "\n", "    ", "url", "_", "encoded", "_", "dig", "est", " =", " url", "_", "encoded", "_", "dig", "est", ".", "replace", "(", "\"", "%", "2", "0", "\"", ",", " \"", "+", "\"", ")", "\n", "\n", "    ", "return", " url", "_", "encoded", "_", "dig", "est", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -3.687455415725708, -1.7181750535964966, -0.04495672881603241, -0.6118509769439697, -0.47843921184539795, -0.5161886215209961, -1.9806448221206665, -0.5649291276931763, -0.004041005857288837, -0.0007500219508074224, -0.0015070997178554535, -0.15934450924396515, -0.0006901028100401163, -1.3143891096115112, -0.6259294152259827, -0.4234084188938141, -0.24041084945201874, -0.021281111985445023, -1.539614200592041, -0.0880550965666771, -0.13531747460365295, -0.44036757946014404, -2.206867218017578, -0.4683045744895935, -0.02724587172269821, -0.230543315410614, -0.00041237910045310855, -2.339550495147705, -0.7457957863807678, -0.005997162777930498, -4.970903682988137e-05, -0.00011920218821614981, -5.960462772236497e-07, -0.001128394273109734, -0.0009447640040889382, -7.390948667307384e-06, -1.1920928244535389e-07, -0.16567642986774445, -0.2850288450717926, -0.08081657439470291, -0.0002079985715681687, -0.012808083556592464, -2.584369659423828, -0.8110359907150269, -3.3459410667419434, -0.6040423512458801, -0.4843830168247223, -0.0009651293512433767, -0.00542288227006793, -0.00018726025882642716, -1.2159273865108844e-05, -0.9172656536102295, -0.07379083335399628, -1.2646335363388062, -2.6527657508850098, -0.5028617978096008, -0.6758338809013367, -0.06522442400455475, -1.4155848026275635, -0.6794740557670593, -0.16767974197864532, -0.00013302871957421303, -3.1863136291503906, -0.7408521175384521, -0.007131360005587339, -0.7197168469429016, -0.0012643685331568122, -0.0023864619433879852, -5.960462772236497e-07, -1.490105023549404e-05, -9.727005090098828e-05, -0.0005889588501304388, -0.17029143869876862, -4.351044481154531e-05, -5.960462772236497e-07, -0.0002811751910485327, -6.115249561844394e-05, -0.13749831914901733, -0.00011705666838679463, -0.06530248373746872, -1.311301275563892e-06, -0.0017614339012652636, -9.858122211880982e-05, -1.311301275563892e-06, -9.536738616588991e-07, -1.4305104514278355e-06, -0.0001896439935080707, -2.861018856492592e-06, -3.576278118089249e-07, -2.2291887944447808e-05, -0.0012841321295127273, -0.018945688381791115, -0.00015043080202303827, -0.0019227842567488551, -0.21802890300750732, -0.0007333449902944267, -0.5256772041320801, -0.29693612456321716, -0.00871946569532156, -0.004564936738461256, -1.4117333889007568, -2.661200761795044, -1.8204562664031982, -3.9209001064300537, -4.67279577255249, -0.4350776672363281, -0.20872536301612854, -1.372239351272583, -0.561733603477478, -0.2002282589673996, -0.00010752100206445903, -0.05388054624199867, -0.0007265550084412098, -2.2411095415009186e-05, -0.0005495230434462428, -0.004211604595184326, -9.417489309271332e-06, -0.00012909532233607024, -0.017971890047192574, -0.0741347000002861, -0.0001705739414319396, -0.038413625210523605, -0.00249610492028296, -0.07883036881685257, -0.9656246900558472, -0.03564753383398056, -0.030362015590071678, -0.0005583396414294839, -1.9073468138230965e-06, -2.276871418871451e-05, -2.5629668016335927e-05, -0.022646494209766388, 0.0, -2.0146166207268834e-05, -0.012850098311901093, -0.0035519623197615147, -0.00014101465058047324, -0.0026886051055043936, -2.9575448036193848, -0.012937418185174465, -0.2400008589029312, -0.14884349703788757, -0.14091810584068298, -0.9220672249794006, -0.31470805406570435, -6.961580220377073e-05, -0.0009716795175336301, -0.33448874950408936, -0.7979848980903625, -0.7563061714172363, -0.17148980498313904, -0.05719224363565445, -0.14752653241157532, -0.00018988236843142658, -1.5235437154769897, -0.02912350744009018, -0.04323740303516388, -0.16749726235866547, -1.6796964406967163, -0.0006834316882304847, -0.002273833379149437, -0.0030119314324110746, -3.576278118089249e-07, 0.0, -9.65590606938349e-06, -0.00015031162183731794, -3.099436753473128e-06, -0.00025388356880284846, -0.8276108503341675, -0.030392659828066826, -1.1920928244535389e-07, -0.32733193039894104, -0.04338318109512329, -0.6920244097709656, -0.033716656267642975, -0.041643306612968445, -0.18896733224391937, -0.04563700407743454, -0.05137600004673004, -0.08508313447237015, -0.00022301571152638644, -0.03031540848314762, -0.041432883590459824, -0.07855632901191711, -0.3435835838317871, -0.09343913942575455, -0.0002302858338225633, -0.34514570236206055, -0.00011419598013162613, -0.6159500479698181, -0.0007003477076068521, -0.005281542893499136, -0.00026854246971197426, -0.01922415941953659, -4.100715523236431e-05, -0.07202214002609253, -0.007511940784752369, -8.583032467868179e-06, -7.390948667307384e-06, -2.3841855067985307e-07, -1.311301275563892e-06, -2.3841855067985307e-07, -0.00019631843315437436, -8.976056415122002e-05, -1.5486302375793457, -0.008131020702421665, -2.046091079711914, -0.0024175008293241262, -0.003162622917443514, -8.797258487902582e-05, -2.098061486321967e-05, -0.013865694403648376, -0.0010520643554627895, -1.7881377516459906e-06, -0.0006238659843802452, -0.0017307315720245242, -0.027371497824788094, -5.876845170860179e-05, -0.07751646637916565, -0.003671929705888033, -2.8371408916427754e-05, -9.250213042832911e-05, -9.536738616588991e-07, -3.576272320060525e-06, -4.768370445162873e-07, -1.204803705215454, -4.768370445162873e-07, -9.536738616588991e-07, -2.3841830625315197e-06, -1.1801649634435307e-05, -0.1719423085451126], "finish_reason": "stop"}], "metrics": {"energy": 1154.6645156707766, "energy_per_token": 4.655905305124099, "time": 25.876284, "time_per_token": 0.10433985483870967}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError('req_data must be a dictionary')\n    # Convert the request data dictionary to a JSON string\n    req_data = json.dumps(req_data)\n    # Sign the request data using HMAC SHA256 with the secret key\n    hmac_signature = hmac.new(secret_key.encode(), req_data.encode(), hashlib.sha256).digest()\n    # URL encode the signature and replace spaces with '+'\n    hmac_signature_url_encoded = urllib.parse.quote(hmac_signature, safe='').replace(' ', '+')\n    return hmac_signature_url_encoded", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "('", "req", "_", "data", " must", " be", " a", " dictionary", "')", "\n", "    ", "#", " Convert", " the", " request", " data", " dictionary", " to", " a", " JSON", " string", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "#", " Sign", " the", " request", " data", " using", " H", "MAC", " SH", "A", "2", "5", "6", " with", " the", " secret", " key", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " req", "_", "data", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "#", " URL", " encode", " the", " signature", " and", " replace", " spaces", " with", " '", "+'", "\n", "    ", "h", "mac", "_", "signature", "_", "url", "_", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ",", " safe", "='", "')", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "    ", "return", " h", "mac", "_", "signature", "_", "url", "_", "encoded", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -1.602193832397461, -0.633042573928833, -0.001852583372965455, -0.0003404037852305919, -0.5875089168548584, -0.000745137978810817, -0.04833293333649635, -0.13057483732700348, -0.0409378781914711, -0.001166616566479206, -1.3789461851119995, -2.7522101402282715, -0.7205986976623535, -0.282270610332489, -0.38244202733039856, -0.024984464049339294, -1.9800230264663696, -0.06786021590232849, -0.08174547553062439, -0.31027206778526306, -0.1189437285065651, -0.46219131350517273, -0.0009180859779007733, -0.27126672863960266, -0.012249124236404896, -0.2530262768268585, -1.8999674320220947, -0.006244789808988571, -3.6238969187252223e-05, -0.0001230164198204875, 0.0, -0.0016828911611810327, -0.001335205975919962, -9.65590606938349e-06, 0.0, -0.21151016652584076, -0.15386919677257538, -0.18107537925243378, -0.01849009469151497, -0.7271547317504883, -0.005425846204161644, -0.29482632875442505, -0.0053232829086482525, -1.8623501062393188, -0.2802733778953552, -5.006664650863968e-05, -0.06684250384569168, -1.847726889536716e-05, -0.006830675061792135, -0.00017248096992261708, -5.829164365422912e-05, -0.33748456835746765, -0.008921641856431961, -0.5959643721580505, -0.0023495943751186132, -0.037401311099529266, -0.00028165188268758357, -0.49648380279541016, -0.12525096535682678, -0.001765717868693173, -0.4210720956325531, -0.0026301098987460136, -0.0008715168805792928, -8.344646857949556e-07, -0.00025567124248482287, -0.001053850632160902, -0.0002420847595203668, -0.43573734164237976, -3.683499380713329e-05, -1.311301275563892e-06, -0.0020599591080099344, -5.018585216021165e-05, -0.3188537657260895, -5.578839045483619e-05, -0.05229587107896805, -3.2186455882765586e-06, 0.0, -0.00199690624140203, -0.00018285033002030104, -0.01225842721760273, -4.60137271147687e-05, -0.046970464289188385, -1.7881377516459906e-06, -2.3841830625315197e-06, -1.1920922133867862e-06, -0.00047219570842571557, -1.6212332411669195e-05, -3.576272320060525e-06, -6.603976362384856e-05, -0.2270185351371765, -0.038918595761060715, -1.1920928244535389e-07, -1.5139465176616795e-05, -0.01223546452820301, -0.0013234198559075594, -0.0023624387104064226, -0.24473877251148224, -0.018577391281723976, -0.007651426829397678, -1.7990237474441528, -0.6255796551704407, -0.009691095910966396, -0.006776092108339071, -0.002460906282067299, -0.017280491068959236, -0.0003860443539451808, -0.05067230761051178, -0.0003129946126136929, -2.9478230476379395, -0.0006816447712481022, -0.0007773000397719443, -0.02620069868862629, -2.1962027549743652, -0.30935138463974, -0.34954220056533813, -0.04044400155544281, -0.005459755193442106, -0.0048683201894164085, -1.1920928244535389e-07, 0.0, -1.585470999998506e-05, -7.652943895664066e-05, -9.179073458653875e-06, -0.0007582411635667086, -0.5270068645477295, -0.0027451948262751102, -4.768370445162873e-07, -2.634490556374658e-05, -1.311301275563892e-06, -0.7266678810119629, -0.007219772785902023, -0.017846014350652695, -0.02044040895998478, -0.020467739552259445, -0.0009952597320079803, -0.040769655257463455, -0.18866650760173798, -2.2291887944447808e-05, -0.003890684340149164, -3.0874729418428615e-05, -3.0278701160568744e-05, -0.002646160777658224, -0.02885136939585209, -0.19366563856601715, -0.004500379785895348, -7.152555099310121e-07, -6.9141146923357155e-06, -1.6689286894688848e-06, -0.00023827097902540118, -3.814689989667386e-06, -1.5497195136049413e-06, -2.2649508537142538e-05, -0.35867801308631897, -0.006482524797320366, -0.2909121513366699], "finish_reason": "stop"}], "metrics": {"energy": 726.5685852470396, "energy_per_token": 4.27393285439435, "time": 16.293741, "time_per_token": 0.09584553529411766}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    json_data = json.dumps(req_data).encode(\"utf-8\")\n    hmac_digest = hmac.new(secret_key.encode(), json_data, hashlib.sha256).digest()\n    url_encoded_digest = urllib.parse.quote(hmac_digest).replace(\"+\", \"%20\")\n    return url_encoded_digest", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " must", " be", " a", " dictionary", "\"", ")", "\n", "    ", "json", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", ".", "encode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "    ", "h", "mac", "_", "dig", "est", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " json", "_", "data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "url", "_", "encoded", "_", "dig", "est", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "dig", "est", ")", ".", "replace", "(", "\"", "+", "\"", ",", " \"", "%", "2", "0", "\"", ")", "\n", "    ", "return", " url", "_", "encoded", "_", "dig", "est", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -0.36943480372428894, -0.0005714452126994729, -0.03027990460395813, -0.07535819709300995, -0.11703582108020782, -0.00041797960875555873, -0.001780949649401009, -1.496455430984497, -2.824861526489258, -0.023788049817085266, -0.5079115629196167, -0.005609604064375162, -0.0101409200578928, -0.00013934595335740596, -0.0003840185818262398, -2.3841855067985307e-07, -0.001007764250971377, -0.0037612426094710827, -6.079655122448457e-06, 0.0, -0.3417234420776367, -0.41113561391830444, -0.01296824961900711, -1.8500421047210693, -0.015879951417446136, -0.04829919710755348, -0.039958927780389786, -1.6093124941107817e-05, -3.2186455882765586e-06, -0.0003359945258125663, -0.012472721748054028, -0.01353456825017929, -0.4449230432510376, -0.15335077047348022, -0.002338652964681387, -2.9635891914367676, -0.03596854582428932, -0.004024977795779705, -0.0008331642020493746, -2.145764938177308e-06, -0.0004880429187323898, -0.03674723580479622, -4.9828242481453344e-05, -0.17210660874843597, -2.5629668016335927e-05, -1.311301275563892e-06, -0.0013054428854957223, -6.174850568640977e-05, -2.0135459899902344, -0.00011002412065863609, -0.07680642604827881, -0.000196556793525815, -4.3987260141875595e-05, -0.00018821375851985067, -0.04429823160171509, -2.145764938177308e-06, -2.0265558760002023e-06, -7.271740287251305e-06, -0.001209719106554985, -5.483612312673358e-06, -2.145764938177308e-06, -0.00013851160474587232, -0.17116770148277283, -0.011108341626822948, 0.0, -6.603976362384856e-05, -0.027431579306721687, -0.0033968149218708277, -1.3769465684890747, -0.023051738739013672, -0.06838616728782654, -0.22660987079143524, -2.7922427654266357, -0.0016330252401530743, -0.0016817011637613177, -0.0032828745897859335, -8.344646857949556e-07, 0.0, -2.729855441430118e-05, -3.0874729418428615e-05, -7.152531907195225e-06, -0.0017960622208192945, -0.4167554974555969, -0.009593102149665356, -2.3841855067985307e-07, -2.2172682292875834e-05, -5.483612312673358e-06, -4.768370445162873e-07, -0.7112038135528564, -0.9149665236473083, -0.00914787407964468, -0.1566138118505478, -0.004644795786589384, -0.5870243310928345, -1.0967194612021558e-05, -4.6132929128361866e-05, -0.005252727307379246, -0.6453535556793213, -0.00046039948938414454, -0.1210370734333992, -6.961580220377073e-05, -0.0027843061834573746, -0.0410311333835125, -0.01531167235225439, -0.019152706488966942, -0.02132020704448223, -4.458328112377785e-05, -6.913899414939806e-05, -2.3841855067985307e-07, -2.0265558760002023e-06, -7.152555099310121e-07, -1.3661396503448486, -8.344646857949556e-07, -1.0728830375228426e-06, -1.4305104514278355e-06, -6.079655122448457e-06, -0.1499815285205841], "finish_reason": "stop"}], "metrics": {"energy": 546.5279562644957, "energy_per_token": 3.9892551552152975, "time": 12.48901, "time_per_token": 0.09116065693430657}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary\")\n\n    req_data = json.dumps(req_data).encode()\n    hashed = hmac.new(secret_key.encode(), req_data, hashlib.sha256).digest()\n    encoded = urllib.parse.quote_plus(hashed)\n    return encoded", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " should", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", ".", "encode", "()", "\n", "    ", "h", "ashed", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " req", "_", "data", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "h", "ashed", ")", "\n", "    ", "return", " encoded", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -1.320478916168213, -0.0023311602417379618, -0.05840492248535156, -0.15365658700466156, -0.21590708196163177, -0.0005063920398242772, -0.0025516352616250515, -0.3580094575881958, -0.0006366133457049727, -0.9581994414329529, -0.014824234880506992, -0.18676625192165375, -1.3243093490600586, -0.08036027103662491, -7.962863310240209e-05, -0.001492696930654347, -2.3841855067985307e-07, -0.004501922521740198, -0.006198112387210131, -1.156323378381785e-05, 0.0, -0.6588492393493652, -0.6353686451911926, -0.014703013934195042, -1.0625193119049072, -0.03384469822049141, -0.1424877792596817, -0.9811949729919434, -1.376042366027832, -0.08167923241853714, -0.0006450717919506133, -7.152555099310121e-07, -5.221230458118953e-05, -0.001416871091350913, -0.00015722469834145159, -0.21805422008037567, -3.862306402879767e-05, -4.6491513785440475e-06, -0.002438787603750825, -0.00012540031457319856, -0.02172143943607807, -0.000276765669696033, -0.0211768951267004, -4.6491513785440475e-06, 0.0, -0.0005404680268839002, -0.029886025935411453, -1.0728830375228426e-06, -2.7418097943154862e-06, -4.172316494077677e-06, -0.0009584600338712335, -2.038458114839159e-05, -2.9802276912960224e-06, -0.00034278715611435473, -1.2564396858215332, -0.05140827223658562, -3.576278118089249e-07, -9.989239333663136e-05, -0.0736621543765068, -0.05547511950135231, -1.8293009996414185, -0.14376574754714966, -0.009849519468843937, -3.576278118089249e-07, 0.0, -1.883488948806189e-05, -6.794906312279636e-06, -2.7418097943154862e-06, -0.03656727448105812, -0.5539909601211548, -0.004127080552279949, -0.0019054129952564836, -0.016448259353637695, -1.9311717551317997e-05, -0.6095964908599854, -0.06229854375123978, -0.3169978857040405, -0.04159928113222122, -0.03902740031480789, -1.634169101715088, -7.152555099310121e-07, -1.0728830375228426e-06, -1.5497195136049413e-06, -7.748573807475623e-06, -0.12112832814455032], "finish_reason": "stop"}], "metrics": {"energy": 448.047698589325, "energy_per_token": 4.267120938945952, "time": 10.468344, "time_per_token": 0.09969851428571429}}
{"outputs": [{"text": "# Check if req_data is a dictionary\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Convert req_data to JSON format\n    req_data_str = json.dumps(req_data)\n\n    # Encode the request data and secret key to bytes\n    req_data_bytes = req_data_str.encode()\n    secret_key_bytes = secret_key.encode()\n\n    # Sign the request data with HMAC SHA256 using the secret key\n    hmac_obj = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256)\n    signature = hmac_obj.digest()\n\n    # URL encode the signature and replace spaces with '+'\n    url_encoded_signature = urllib.parse.quote_plus(signature.hex())\n\n    return url_encoded_signature", "tokens": ["#", " Check", " if", " req", "_", "data", " is", " a", " dictionary", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " should", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " req", "_", "data", " to", " JSON", " format", "\n", "    ", "req", "_", "data", "_", "str", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Enc", "ode", " the", " request", " data", " and", " secret", " key", " to", " bytes", "\n", "    ", "req", "_", "data", "_", "bytes", " =", " req", "_", "data", "_", "str", ".", "encode", "()", "\n", "    ", "secret", "_", "key", "_", "bytes", " =", " secret", "_", "key", ".", "encode", "()", "\n", "\n", "    ", "#", " Sign", " the", " request", " data", " with", " H", "MAC", " SH", "A", "2", "5", "6", " using", " the", " secret", " key", "\n", "    ", "h", "mac", "_", "obj", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", "_", "bytes", ",", " req", "_", "data", "_", "bytes", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "signature", " =", " h", "mac", "_", "obj", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " signature", " and", " replace", " spaces", " with", " '", "+'", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "signature", ".", "hex", "())", "\n", "\n", "    ", "return", " url", "_", "encoded", "_", "signature", "\n", "\n", "if"], "logprobs": [-1.7585830688476562, -1.3446850776672363, -0.3648379147052765, -0.7249793410301208, -0.0004374024283606559, -0.00017236177518498152, -0.011228349059820175, -0.07702046632766724, -0.04702164605259895, -0.17335182428359985, -0.0008523407159373164, -0.010441201739013195, -0.0038514973130077124, -0.0003578022588044405, -1.9550132492440753e-05, -0.0002493547508493066, -1.0251946150674485e-05, 0.0, -3.8980677345534787e-05, -0.0016033900901675224, -0.000858415151014924, -0.0007007050444371998, -0.0012347224401310086, -0.006398903671652079, -0.0024512740783393383, -1.311301275563892e-06, -0.15626953542232513, -0.071683868765831, -0.3252253234386444, -0.00021371940965764225, -0.00013553177996072918, -1.3135168552398682, -0.0009031984372995794, -0.019124053418636322, -0.02178524248301983, -1.4359798431396484, -0.007012398913502693, -0.0003349220205564052, -0.000606710382271558, -0.039184682071208954, -0.0007175016799010336, -0.0755636990070343, -0.6924564838409424, -0.5518280863761902, -0.00022456508304458112, -0.000256982195423916, -0.05655594915151596, -0.715161919593811, -1.6967450380325317, -0.10191507637500763, -0.00019691436318680644, -0.25229647755622864, -0.004608960822224617, -0.1676843762397766, -0.3221265971660614, -1.5925822257995605, -0.0003634030872490257, -0.0016993143362924457, -4.005352093372494e-05, -5.793403761344962e-05, -5.960462772236497e-07, -0.0005046047735959291, -0.0009279712685383856, -3.099436753473128e-06, 0.0, -0.20157413184642792, -0.05246623978018761, -0.04079323261976242, -0.00021181246847845614, -0.002665064763277769, -2.3038909435272217, -0.023423397913575172, -0.7471032738685608, -0.9340960383415222, -0.021312270313501358, -0.14418980479240417, -0.11446819454431534, -0.012594331055879593, -3.025029420852661, -0.08595185726881027, -0.06332659721374512, -5.8887653722194955e-05, -0.06361199915409088, -0.0001438752660760656, -0.011760427616536617, -0.004988011438399553, -0.1541968286037445, -0.0005453529884107411, -0.02934938482940197, -9.536738616588991e-07, 0.0, -0.00012051333033014089, -0.00014232576359063387, -2.7417760065873154e-05, -4.9470632802695036e-05, -1.150378704071045, -0.0014321081107482314, -0.003960267174988985, -0.02046411857008934, -0.0003567297535482794, -0.011089595966041088, -0.0016934829764068127, -0.0048093595542013645, -2.6940935640595853e-05, -0.0045686149969697, -1.5497195136049413e-06, 0.0, -3.707340147229843e-05, -0.0005305789527483284, -0.005138998385518789, -0.0008510305196978152, -0.0021212236024439335, -0.00018308870494365692, -0.0007689617923460901, -0.7153568863868713, -0.022825483232736588, -0.020254332572221756, -0.0007198841194622219, -0.24476592242717743, -0.9011588096618652, -2.9682672902708873e-05, -0.04399528354406357, -2.729855441430118e-05, -0.005975359119474888, -0.00020585325546562672, -4.9232225137529895e-05, -0.7897434830665588, -0.02390770986676216, -0.02651662938296795, -0.0007656264933757484, -0.023889552801847458, -0.0001641377166379243, -0.5015289783477783, -0.16153277456760406, -0.00043478095903992653, -1.2236666679382324, -0.00010549465514486656, -3.2782016205601394e-05, 0.0, -9.536697689327411e-06, -0.010351067408919334, -1.4781842764932662e-05, -0.026361985132098198, -8.940656698541716e-06, 0.0, -5.066266385256313e-05, -7.152555099310121e-07, -5.400034933700226e-05, -0.01612185873091221, -1.1920928244535389e-07, 0.0, -4.0531076592742465e-06, -2.50339189733495e-06, -6.282132380874828e-05, -0.04503730311989784, -3.576278118089249e-07, -1.4305104514278355e-06, -1.0728830375228426e-06, -0.0006148116663098335, -1.2040065485052764e-05, -6.198863957251888e-06, -6.222531374078244e-05, -0.0015728019643574953, -0.1887829750776291, -0.14657968282699585, -0.21560242772102356, -0.0008717550663277507, -3.576278118089249e-07, -8.821098163025454e-05, -5.960462772236497e-07, -5.245195097813848e-06, -0.40639054775238037, -8.344646857949556e-07, -9.536697689327411e-06, -0.032259322702884674, -0.0038015018217265606, -8.129743218887597e-05, -0.00026890001026913524, -0.2643318176269531, -0.01985274627804756, -0.016661541536450386, -0.022403595969080925, -0.4205161929130554, -0.005895250476896763, -0.004892876371741295, -0.0017485818825662136, -0.02198689430952072, -0.0002026352594839409, -0.011418350040912628, -0.00031668893643654883, -0.703160285949707, -0.01628771238029003, -0.11973267048597336, -0.024616291746497154, -0.009659809991717339, -0.00037555795279331505, -0.0026513920165598392, -1.1920928244535389e-07, 0.0, -1.728519782773219e-05, -2.52720492426306e-05, -8.940656698541716e-06, -0.0011756658786907792, -0.9763240814208984, -0.00025102324434556067, -9.047575440490618e-05, -0.4547368586063385, -1.3524144887924194, -0.9117961525917053, -0.06175011023879051, -0.041908327490091324, -0.03420165553689003, -0.00010382589971413836, -0.13425122201442719, -0.022682737559080124, -5.304672595229931e-05, -7.259582343976945e-05, -2.7418097943154862e-06, -4.768370445162873e-07, -0.31968632340431213, -0.004827629309147596, -0.2949103116989136], "finish_reason": "stop"}], "metrics": {"energy": 895.7613386306766, "energy_per_token": 4.034960984822868, "time": 20.252802, "time_per_token": 0.09122883783783783}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    data = json.dumps(req_data, separators=(',', ':'), sort_keys=True)\n    hash_obj = hmac.new(secret_key.encode(), data.encode(), hashlib.sha256)\n    hash_result = urllib.parse.quote(hash_obj.digest()).replace(' ', '+')\n    return hash_result", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "`", "req", "_", "data", "`", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "')", ",", " sort", "_", "keys", "=", "True", ")", "\n", "    ", "hash", "_", "obj", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " data", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "hash", "_", "result", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "hash", "_", "obj", ".", "dig", "est", "())", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "    ", "return", " hash", "_", "result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -1.8608410358428955, -0.01089540496468544, -0.0009531007381156087, -0.0005049622268415987, -0.0015018623089417815, -0.3466379642486572, -0.0009310677996836603, -0.02858611010015011, -0.06574752181768417, -0.8191875219345093, -0.0027946485206484795, -0.00044860312482342124, -0.0021052833180874586, -1.4642598628997803, -2.3355650901794434, -0.3829806447029114, -0.11497507989406586, -9.250213042832911e-05, -0.0011704268399626017, -2.3841855067985307e-07, -0.002688248408958316, -0.00838320329785347, -8.940656698541716e-06, -2.3841855067985307e-07, -0.9638352394104004, -1.2427922487258911, -8.583032467868179e-06, -0.4533611834049225, -0.0010705222375690937, -0.0008449559682048857, -0.0024674467276781797, -0.00023946279543451965, -0.010745285078883171, -1.2283680438995361, -0.0018552012043073773, -0.24758771061897278, -7.033323527139146e-06, -1.0728830375228426e-06, -0.0016661108238622546, -0.0024258254561573267, -0.014076471328735352, -0.36818888783454895, -0.046750809997320175, -2.719343900680542, -0.5543286800384521, -1.3907816410064697, -0.0009366653976030648, -0.002866922877728939, -9.536738616588991e-07, -6.97350042173639e-05, -0.0015957729192450643, -0.00015066919149830937, -0.24255405366420746, -3.099393507000059e-05, -1.7881377516459906e-06, -0.003953261766582727, -9.989239333663136e-05, -0.5572038292884827, -0.00014423283573705703, -0.15621733665466309, -0.0004332319076638669, -0.00010632903286023065, -0.01614590547978878, -7.414542778860778e-05, -0.059953007847070694, -2.0265558760002023e-06, -3.576272320060525e-06, -4.0531076592742465e-06, -0.0014950776239857078, -5.006777428206988e-06, -1.7881377516459906e-06, -0.0003992714046034962, -0.032359737902879715, -0.004969151224941015, -2.72426176071167, -0.0421312190592289, -3.109990119934082, -0.005671362392604351, -1.6702489852905273, -3.576278118089249e-07, 0.0, -2.8729025871143676e-05, -1.7165990357170813e-05, -1.9073468138230965e-06, -0.004035544581711292, -0.24862326681613922, -0.008212251588702202, -8.356221951544285e-05, -1.9788545614574105e-05, -5.471556869451888e-05, -0.34791192412376404, -2.3841855067985307e-07, -1.7515480518341064, -0.3314111828804016, -0.0058996351435780525, -0.46155402064323425, -0.47289928793907166, -8.034383063204587e-05, -0.008161408826708794, -0.00010930894495686516, -8.666139910928905e-05, -0.007815259508788586, -0.044813573360443115, -0.01846364699304104, -0.01439695991575718, -4.1126360883936286e-05, -0.00011646069469861686, -1.47658109664917, -3.576278118089249e-07, -8.344646857949556e-07, -1.0728830375228426e-06, -2.9802276912960224e-06, -0.18960748612880707], "finish_reason": "stop"}], "metrics": {"energy": 533.7072452373504, "energy_per_token": 4.105440347979619, "time": 11.901312, "time_per_token": 0.09154855384615385}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    signature = hmac.new(secret_key.encode('utf-8'),\n                         json.dumps(req_data, sort_keys=True).encode('utf-8'),\n                         hashlib.sha256).hexdigest()\n    return urllib.parse.quote_plus(signature)", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "`", "req", "_", "data", "`", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", ",", "\n", "                ", "         ", "json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ")", ".", "encode", "('", "utf", "-", "8", "')", ",", "\n", "                ", "         ", "hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "hex", "dig", "est", "()", "\n", "    ", "return", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "signature", ")<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -1.8608410358428955, -0.01089540496468544, -0.0009531007381156087, -0.0005049622268415987, -0.0015018623089417815, -0.3466379642486572, -0.0009310677996836603, -0.02858611010015011, -0.06574752181768417, -0.8191875219345093, -0.0027946485206484795, -0.00044860312482342124, -0.0021052833180874586, -1.4642598628997803, -3.746732234954834, -0.12130024284124374, -0.04886368662118912, -9.417489309271332e-06, -0.002821038942784071, -0.01078078243881464, -0.0003461238811723888, -0.3985773026943207, -4.1483970562694594e-05, -2.50339189733495e-06, -0.0020648366771638393, -0.00012933371181134135, -1.129629135131836, -0.022293316200375557, -0.012261959724128246, -2.5748875486897305e-05, -9.97731985989958e-05, -0.00017033556650858372, -1.0397427082061768, -0.016264958307147026, -0.07598021626472473, -0.15157701075077057, -8.427741704508662e-05, -0.00013398226292338222, -2.3841855067985307e-07, -0.0016565899131819606, -0.006516990251839161, -7.390948667307384e-06, -9.536738616588991e-07, -1.0206491947174072, -0.15882036089897156, -7.271740287251305e-06, -1.9073468138230965e-06, -0.0015653035370633006, -0.0025424794293940067, -0.31029200553894043, -0.0069520254619419575, -0.003737252438440919, -0.03135894984006882, -0.00026639728457666934, -0.000481132126878947, -1.6093124941107817e-05, -0.0001037067049765028, -0.000409161759307608, -0.4684276580810547, -0.00010191874753218144, -0.0005992047372274101, -0.3584009110927582, -1.0728830375228426e-06, -2.3841830625315197e-06, -5.364403477869928e-06, -0.00150781380943954, -1.3232143828645349e-05, -1.9073468138230965e-06, -0.028735775500535965, -0.06346522271633148, -0.582996666431427, -1.645074735279195e-05, 0.0, -7.772143726469949e-05, -0.007271017879247665, -0.0349719375371933, -0.3917299211025238, -0.00771826459094882, -8.344646857949556e-07, 0.0, -3.93382906622719e-05, -4.9232225137529895e-05, -3.123234637314454e-05, -0.0037435467820614576, -0.777431070804596, -1.7523612768854946e-05, -0.00014256415306590497, -0.004027470946311951, -1.9946154356002808, -1.4305104514278355e-06, -7.152555099310121e-07, -1.4305104514278355e-06, -7.748573807475623e-06, -1.6942375898361206, -0.0007794441189616919], "finish_reason": "stop"}], "metrics": {"energy": 475.5103836078643, "energy_per_token": 4.245628425070217, "time": 10.0640955, "time_per_token": 0.08985799553571429}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary\")\n\n    message = json.dumps(req_data)\n    secret = secret_key.encode()\n    hmac_signature = hmac.new(secret, message.encode(), hashlib.sha256).digest()\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature)\n    return url_encoded_signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "`", "req", "_", "data", "`", " must", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "message", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "secret", " =", " secret", "_", "key", ".", "encode", "()", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", ",", " message", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "h", "mac", "_", "signature", ")", "\n", "    ", "return", " url", "_", "encoded", "_", "signature", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -1.8608410358428955, -0.01089540496468544, -0.0009531007381156087, -0.0005049622268415987, -0.0015018623089417815, -0.3466379642486572, -0.0009310677996836603, -0.02858611010015011, -0.06574752181768417, -0.6602901220321655, -0.0003657863999251276, -0.0026188145857304335, -0.23199895024299622, -0.0006395916570909321, -2.8226876258850098, -0.03873971104621887, -0.14281730353832245, -0.00011646069469861686, -0.0005390383303165436, -1.4066597032069694e-05, -0.0013106813421472907, -0.0059228623285889626, -7.271740287251305e-06, -4.768370445162873e-07, -0.47599804401397705, -1.2649012804031372, -0.1759691685438156, -2.5132343769073486, -0.6006565093994141, -0.22158288955688477, -8.010543388081715e-05, -2.50339189733495e-06, -0.40395572781562805, -0.029260244220495224, -1.2001161575317383, -0.019112125039100647, -0.2292003631591797, -0.9789522290229797, -0.17575280368328094, -0.0021407324820756912, -0.5350287556648254, -0.004444601479917765, -0.0005142558366060257, -2.3841830625315197e-06, -0.00010692501382436603, -0.00199333718046546, -3.194758028257638e-05, -0.021226612851023674, -0.0006949870148673654, -0.045934103429317474, -0.00021872512297704816, -4.8040190449682996e-05, -0.018499106168746948, -5.400034933700226e-05, -0.02711500972509384, -4.291525328881107e-06, -2.622600959512056e-06, -3.099436753473128e-06, -0.0011993603548035026, -1.8715683836489916e-05, -3.814689989667386e-06, -3.7431014789035544e-05, -0.10090203583240509, -0.03441682830452919, 0.0, -1.7046782886609435e-05, -0.019282042980194092, -0.05833520367741585, -0.5519920587539673, -0.018252739682793617, -0.03043694980442524, -0.16500742733478546, -0.10984031856060028, -0.00027736154152080417, -0.0026977595407515764, -3.576278118089249e-07, 0.0, -1.3828182090946939e-05, -1.8596476365928538e-05, -9.775113539944869e-06, -0.0004351384413894266, -1.1218985319137573, -0.0015312624163925648, -0.0007130940794013441, -0.05713020637631416, -7.152555099310121e-07, -6.5205356804654e-05, -5.364403477869928e-06, -0.9410872459411621, -0.0277712382376194, -0.474470853805542, -0.03406939655542374, -0.031588710844516754, -9.727005090098828e-05, -2.884823152271565e-05, -8.344646857949556e-07, -1.6689286894688848e-06, -1.473957896232605, -7.152555099310121e-07, -8.344646857949556e-07, -1.311301275563892e-06, -2.9802276912960224e-06, -0.19184759259223938], "finish_reason": "stop"}], "metrics": {"energy": 512.7030846290587, "energy_per_token": 4.272525705242156, "time": 10.886507, "time_per_token": 0.09072089166666666}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    json_str = json.dumps(req_data)\n    signature = hmac.new(secret_key.encode(), json_str.encode(), hashlib.sha256).digest()\n    url_encoded = urllib.parse.quote(signature).replace('+', ' ')\n    return url_encoded", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " must", " be", " a", " dictionary", "\"", ")", "\n", "    ", "json", "_", "str", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " json", "_", "str", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "url", "_", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "signature", ")", ".", "replace", "('", "+'", ",", " '", " '", ")", "\n", "    ", "return", " url", "_", "encoded", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -0.36943480372428894, -0.0005714452126994729, -0.03027990460395813, -0.07535819709300995, -0.11703582108020782, -0.00041797960875555873, -0.001780949649401009, -1.496455430984497, -2.824861526489258, -0.023788049817085266, -2.4474143981933594, -0.0036497190594673157, -0.007171602454036474, -0.00013767725613433868, -0.0003541081096045673, 0.0, -0.0017534609651193023, -0.0042177774012088776, -8.22540732769994e-06, 0.0, -0.500717282295227, -0.35727059841156006, -0.021206188946962357, -2.4912912845611572, -0.10096625983715057, -0.008030390366911888, -5.245195097813848e-06, -0.0005849081207998097, -0.0029576150700449944, -0.00014041867689229548, -0.2571827471256256, -2.169585604860913e-05, -8.344646857949556e-07, -0.0014511541230604053, -7.784063927829266e-05, -0.34498557448387146, -8.356221951544285e-05, -0.08008027076721191, -0.0004689785710070282, -3.266281055402942e-05, -0.00044324109330773354, -8.999896090244874e-05, -0.006946698296815157, -2.8490614567999728e-05, -0.04628608748316765, -2.50339189733495e-06, -5.245195097813848e-06, -8.4638240878121e-06, -0.0008544846205040812, -7.033323527139146e-06, -1.311301275563892e-06, -3.8742269680369645e-05, -0.023483017459511757, -0.07723622024059296, 0.0, -4.577531944960356e-05, -0.024367937818169594, -0.0018133163684979081, -0.744265615940094, -0.04801654815673828, -0.06404458731412888, -1.82528817653656, -0.00343186198733747, -5.960462772236497e-07, 0.0, -1.7404405298293568e-05, -3.683499380713329e-05, -3.2186455882765586e-06, -0.002832331694662571, -0.7586991786956787, -0.0024597172159701586, -0.5041514039039612, -0.8770666122436523, -0.005067243706434965, -0.7264264225959778, -0.686522364616394, -3.707340147229843e-05, -2.4570438861846924, -0.019444448873400688, -0.0008949803304858506, -0.012273970991373062, -0.013281917199492455, -0.018428068608045578, -0.011098556220531464, -0.00011455356434453279, -8.689979586051777e-05, -1.5952069759368896, -7.152555099310121e-07, -9.536738616588991e-07, -1.0728830375228426e-06, -4.0531076592742465e-06, -0.21426676213741302], "finish_reason": "stop"}], "metrics": {"energy": 435.83576090240484, "energy_per_token": 3.8913907223429005, "time": 10.042319, "time_per_token": 0.0896635625}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    # Convert the request data to a JSON string\n    req_data_json = json.dumps(req_data)\n    # Sign the request data with the secret key using HMAC SHA256\n    hmac_signature = hmac.new(\n        secret_key.encode(), req_data_json.encode(), hashlib.sha256\n    ).digest()\n    # URL encode the HMAC signature and replace spaces with '+'\n    encoded_signature = urllib.parse.quote(\n        hmac_signature, safe=''\n    ).replace(' ', '+')\n    return encoded_signature", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "`", "req", "_", "data", "`", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "#", " Convert", " the", " request", " data", " to", " a", " JSON", " string", "\n", "    ", "req", "_", "data", "_", "json", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "#", " Sign", " the", " request", " data", " with", " the", " secret", " key", " using", " H", "MAC", " SH", "A", "2", "5", "6", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "\n", "        ", "secret", "_", "key", ".", "encode", "()", ",", " req", "_", "data", "_", "json", ".", "encode", "()", ",", " hash", "lib", ".", "sha", "2", "5", "6", "\n", "    ", ")", ".", "dig", "est", "()", "\n", "    ", "#", " URL", " encode", " the", " H", "MAC", " signature", " and", " replace", " spaces", " with", " '", "+'", "\n", "    ", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "\n", "        ", "h", "mac", "_", "signature", ",", " safe", "=", "''", "\n", "    ", ")", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "    ", "return", " encoded", "_", "signature", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -1.8608410358428955, -0.01089540496468544, -0.0009531007381156087, -0.0005049622268415987, -0.0015018623089417815, -0.3466379642486572, -0.0009310677996836603, -0.02858611010015011, -0.06574752181768417, -0.8191875219345093, -0.0027946485206484795, -0.00044860312482342124, -0.0021052833180874586, -1.4642598628997803, -2.2587008476257324, -0.6523503661155701, -0.2765756845474243, -0.3227587938308716, -0.030834656208753586, -0.17463532090187073, -0.3123387396335602, -0.37955036759376526, -0.07925157994031906, -0.5706325769424438, -0.001301871263422072, -0.26051726937294006, -0.007725243456661701, -0.18446289002895355, -0.12697939574718475, -0.8318091630935669, -0.013408957049250603, -0.0024991966784000397, -0.0001062098381225951, -3.85038583772257e-05, 0.0, -0.0012332937913015485, -0.0016396900173276663, -8.4638240878121e-06, 0.0, -0.1978013813495636, -0.07118085771799088, -0.2792472839355469, -0.029414670541882515, -0.869651734828949, -0.005417783744633198, -0.4449934661388397, -0.006383505184203386, -0.1977766454219818, -0.35863879323005676, -0.09844449907541275, -0.004606112837791443, -0.16492727398872375, -0.015246748924255371, -0.00010787858627736568, -0.01873476430773735, -2.9802276912960224e-06, -0.005873207468539476, -0.0001284993631998077, -5.924526340095326e-05, -0.035336434841156006, -0.0005243833875283599, -0.4560602009296417, -0.07967547327280045, -0.0007120219524949789, -0.475304514169693, -0.005855786148458719, -0.0006192197324708104, -5.960462772236497e-07, -0.00017772526189219207, -0.0012996093137189746, -0.00012444675667211413, -1.152137041091919, -0.014881081879138947, -0.26743414998054504, -2.6702524337451905e-05, -1.7881377516459906e-06, -0.0006538875168189406, -4.351044481154531e-05, -0.49671152234077454, -0.00013422065239865333, -0.5422365665435791, -4.768370445162873e-07, -1.1920928244535389e-07, -0.0001839230244513601, -8.344646857949556e-07, -0.0002889215829782188, -4.4225667807040736e-05, -0.0056852311827242374, -4.4225667807040736e-05, -0.016028717160224915, -1.0728830375228426e-06, -2.0265558760002023e-06, -1.1920922133867862e-06, -0.0005519058904610574, -8.106198947643861e-06, -3.814689989667386e-06, -0.15586140751838684, -0.0024760086089372635, -8.4638240878121e-06, -0.10345803201198578, -0.08456677943468094, 0.0, -5.5549986427649856e-05, -0.007960261777043343, -0.0038761973846703768, -0.003746872302144766, -0.15299902856349945, -0.028124457225203514, -0.007163909263908863, -0.5442331433296204, -1.7404405298293568e-05, -0.0071301767602562904, -0.8386834859848022, -0.007414797320961952, -0.005116582848131657, -0.0020902943797409534, -0.015345482155680656, -0.00037019551382400095, -0.02940911427140236, -0.0005888396990485489, -3.669416904449463, -0.010244878008961678, -0.15519437193870544, -0.0007970731821842492, -0.007125205360352993, -2.3841855067985307e-07, 0.0, -2.312633478140924e-05, -2.372236667724792e-05, -8.34461570775602e-06, -0.0008025524439290166, -0.39062386751174927, -2.9843380451202393, -0.001352706109173596, -0.01278136670589447, -8.344646857949556e-07, -0.00020346954988781363, -3.814689989667386e-06, -0.30298611521720886, -0.023950891569256783, -0.0409252904355526, -0.8077532649040222, -0.04410262405872345, -0.0019209994934499264, -0.00013290952483657748, -0.005718419793993235, -0.0005467826849780977, -0.30580639839172363, -0.061522580683231354, -2.1576648578047752e-05, -0.0059159891679883, -5.4834770708112046e-05, -3.71926071238704e-05, -0.0034123784862458706, -0.06582732498645782, -0.1966484636068344, -0.002803564304485917, -3.576278118089249e-07, -5.960462772236497e-07, -0.4390675723552704, -0.004304429981857538, -0.40683817863464355], "finish_reason": "stop"}], "metrics": {"energy": 741.175708799362, "energy_per_token": 4.140646417873531, "time": 16.309792, "time_per_token": 0.09111615642458101}}
{"outputs": [{"text": "# Validate input types\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    # Sort keys in the request data\n    sorted_data = sorted(req_data.items(), key=lambda x: x[0])\n\n    # Serialize the sorted request data to a string\n    serialized_data = json.dumps(sorted_data)\n\n    # Encode the serialized request data and secret key as bytes\n    data_bytes = serialized_data.encode('utf-8')\n    key_bytes = secret_key.encode('utf-8')\n\n    # Sign the serialized request data with the secret key using HMAC SHA256\n    hmac_digest = hmac.new(key_bytes, data_bytes, hashlib.sha256).digest()\n\n    # URL encode the HMAC signature and replace spaces with '+'\n    hmac_signature = urllib.parse.quote_plus(urllib.parse.unquote(hmac_digest.hex()))\n\n    #", "tokens": ["#", " Valid", "ate", " input", " types", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " must", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "#", " Sort", " keys", " in", " the", " request", " data", "\n", "    ", "s", "orted", "_", "data", " =", " sorted", "(", "req", "_", "data", ".", "items", "()", ",", " key", "=", "lambda", " x", ":", " x", "[", "0", "])", "\n", "\n", "    ", "#", " Serial", "ize", " the", " sorted", " request", " data", " to", " a", " string", "\n", "    ", "serial", "ized", "_", "data", " =", " json", ".", "d", "umps", "(", "s", "orted", "_", "data", ")", "\n", "\n", "    ", "#", " Enc", "ode", " the", " serial", "ized", " request", " data", " and", " secret", " key", " as", " bytes", "\n", "    ", "data", "_", "bytes", " =", " serial", "ized", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "key", "_", "bytes", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "\n", "    ", "#", " Sign", " the", " serial", "ized", " request", " data", " with", " the", " secret", " key", " using", " H", "MAC", " SH", "A", "2", "5", "6", "\n", "    ", "h", "mac", "_", "dig", "est", " =", " h", "mac", ".", "new", "(", "key", "_", "bytes", ",", " data", "_", "bytes", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " H", "MAC", " signature", " and", " replace", " spaces", " with", " '", "+'", "\n", "    ", "h", "mac", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "ur", "ll", "ib", ".", "parse", ".", "un", "quote", "(", "h", "mac", "_", "dig", "est", ".", "hex", "()))", "\n", "\n", "    ", "#"], "logprobs": [-1.7585830688476562, -2.0204415321350098, -0.021576551720499992, -0.9181652069091797, -1.7956640720367432, -0.04114668816328049, -0.002072688192129135, -0.04331023618578911, -0.005085864569991827, -0.0013503251830115914, -1.7404405298293568e-05, -0.0018693606834858656, -1.4185804502631072e-05, -1.1444026313256472e-05, -3.397406908334233e-05, -0.0027909635100513697, -0.005129866302013397, -0.0027371107134968042, -0.0011988840997219086, -0.007229359354823828, -0.004397365730255842, -2.50339189733495e-06, -0.16292470693588257, -0.12781573832035065, -0.4251425862312317, -0.00040904260822571814, -0.00016425691137555987, -0.3591654896736145, -0.00018463814922142774, -0.014542890712618828, -0.041482292115688324, -0.1744193583726883, -0.0002580548170953989, -0.000444551813416183, -0.20605424046516418, -0.0012049565557390451, -0.17164354026317596, -2.7492120265960693, -3.0135326385498047, -0.8161979913711548, -1.291540265083313, -0.3203873038291931, -0.022776776924729347, -0.7224776744842529, -0.000390215078368783, -0.48723483085632324, -0.0001358893496217206, -7.068861305015162e-05, -1.5868996381759644, -0.006912839598953724, -0.5710737705230713, -0.03476079925894737, -0.016994914039969444, -6.794906312279636e-06, 0.0, -0.00394079415127635, -0.0009086770587600768, -0.5781631469726562, -4.660974445869215e-05, -0.0011393491877242923, -0.00041261743172071874, -0.0004812512779608369, -0.046479787677526474, -0.0004258441040292382, -0.02826758660376072, -0.00010680581908673048, -0.0008279233006760478, -0.036518197506666183, -0.001578276976943016, -0.08523377776145935, -0.0001370812824461609, -0.0024705384857952595, -1.9109938144683838, -0.0025373664684593678, -0.2828768491744995, -0.21120089292526245, -0.21201427280902863, -0.0008641323074698448, -1.548111081123352, -0.33065906167030334, -0.5383316874504089, -0.08780442923307419, -0.00012861855793744326, -1.04530930519104, -0.005348657723516226, -0.045332301408052444, -0.026438033208251, -0.0009848987683653831, -0.159754678606987, -3.790783375734463e-05, -7.1403817855753e-05, -2.3841855067985307e-07, -0.002533442573621869, -0.5333574414253235, 0.0, -5.686121585313231e-05, -1.1920928244535389e-07, -0.23624175786972046, -0.029477523639798164, -0.010303047485649586, -0.00016866691294126213, -0.0015288818394765258, -2.074781894683838, -0.008323385380208492, -0.06274435669183731, -0.4712940752506256, -0.0003629264247138053, -2.021193742752075, -0.0008071978809311986, -0.7842625975608826, -0.12463212758302689, -0.0020965994335711002, -0.4379825294017792, -0.04813050478696823, -0.06293769180774689, -8.785339014139026e-05, -1.925506353378296, -0.09756840020418167, -0.057648323476314545, -0.0006105228094384074, -0.06216087564826012, 0.0, -7.152555099310121e-07, 0.0, -3.4927710657939315e-05, -7.962863310240209e-05, -0.29617899656295776, -0.002238508081063628, -0.005611856002360582, -1.0013530300057027e-05, -6.556489552167477e-06, -0.0016210046596825123, -0.003508723108097911, -0.39536547660827637, -0.002891052979975939, -0.00032276666024699807, -4.649054244509898e-05, -0.002408819505944848, -2.3841830625315197e-06, 0.0, -2.4676019165781327e-05, -0.00017975145601667464, -0.00024172721896320581, -8.093983342405409e-05, -6.472854875028133e-05, -1.1205610462639015e-05, -2.7418097943154862e-06, -0.000590865034610033, -0.0017567930044606328, -0.0001209901092806831, -0.00035589560866355896, -0.6882940530776978, -0.005545470397919416, -2.1462161540985107, -0.0002650863316375762, -0.08625362068414688, -0.0003023882454726845, -0.18695682287216187, -0.5401442050933838, -0.0679466500878334, -0.0007353700930252671, -0.08308839052915573, -0.0051252408884465694, -7.545663538621739e-05, -0.011681252159178257, -1.9073304429184645e-05, -0.005455249920487404, -8.880697714630514e-05, -2.5748875486897305e-05, -0.04332347959280014, -0.0001716466504149139, -0.5304886102676392, -0.22161678969860077, -0.0002898749662563205, -2.4718146324157715, -0.002726529957726598, -0.007114434149116278, -0.0002108589978888631, -7.152555099310121e-07, -4.911301948595792e-05, -0.1086098700761795, -1.07287787614041e-05, -0.007438344415277243, -0.1634722203016281, -1.1920922133867862e-06, -2.0503786799963564e-05, -0.038398366421461105, -0.001751794945448637, -6.318072337307967e-06, -4.541770613286644e-05, -0.032804444432258606, -3.576278118089249e-07, -7.152555099310121e-07, -8.344646857949556e-07, -0.0006115949945524335, -3.659658250398934e-05, -3.3378546504536644e-06, -2.0861407392658293e-05, -0.46324682235717773, -0.0036934271920472383, 0.0, -1.2874520507466514e-05, -0.009914086200296879, -0.027064191177487373, -0.00010001159535022452, -0.00015436411194968969, -0.43317052721977234, -0.0163411907851696, -0.01634177751839161, -0.20955678820610046, -1.2636104656849056e-05, -0.15567338466644287, -0.6697587966918945, -0.006269549019634724, -0.006738794036209583, -0.0019054129952564836, -0.01666025072336197, -0.00014506718434859067, -0.018518297001719475, -0.00043501926120370626, -2.713163375854492, -0.0013468727702274919, -0.0003847335756290704, -0.12965430319309235, -0.025561219081282616, -0.0074065146036446095, 0.0, 0.0, -1.490105023549404e-05, -5.960446742392378e-06, -1.9073468138230965e-06, -0.0006586528033949435, -0.8245754241943359, -0.00034374051028862596, -0.0002422039397060871, -1.1502597332000732, -1.1920922133867862e-06, 0.0, -1.7404405298293568e-05, -6.198863957251888e-06, -7.629365427419543e-06, -1.4897054433822632, -2.3245540432981215e-05, -0.0004832768754567951, -0.03070218302309513, -1.0728830375228426e-06, -8.642300235806033e-05, -5.245195097813848e-06, -3.576272320060525e-06, -0.011080282740294933, -0.6192217469215393, -0.011781280860304832, -0.05368839204311371, -0.039215631783008575, -9.846202738117427e-05, -1.4294791221618652], "finish_reason": "length"}], "metrics": {"energy": 1167.4964140720365, "energy_per_token": 4.5605328674688925, "time": 26.519022, "time_per_token": 0.1035899296875}}
{"outputs": [{"text": "# Check that req_data is a dictionary\n    if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` should be a dictionary\")\n\n    # Serialize the request data\n    serialized_data = json.dumps(req_data)\n\n    # Sign the request data with a secret key using HMAC SHA256\n    hmac_signature = hmac.new(secret_key.encode(), msg=serialized_data.encode(), digestmod=hashlib.sha256).digest()\n\n    # URL encode the signature\n    encoded_signature = urllib.parse.quote_plus(hmac_signature.hex())\n\n    return encoded_signature", "tokens": ["#", " Check", " that", " req", "_", "data", " is", " a", " dictionary", "\n", "    ", "if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "`", "req", "_", "data", "`", " should", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "#", " Serial", "ize", " the", " request", " data", "\n", "    ", "serial", "ized", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "#", " Sign", " the", " request", " data", " with", " a", " secret", " key", " using", " H", "MAC", " SH", "A", "2", "5", "6", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " msg", "=", "serial", "ized", "_", "data", ".", "encode", "()", ",", " digest", "mod", "=", "hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "\n", "    ", "#", " URL", " encode", " the", " signature", "\n", "    ", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "h", "mac", "_", "signature", ".", "hex", "())", "\n", "\n", "    ", "return", " encoded", "_", "signature", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.7585830688476562, -1.3446850776672363, -1.5639097690582275, -0.525142252445221, -0.0003002431185450405, -0.00018749863374978304, -0.010399439372122288, -0.025315191596746445, -0.046574003994464874, -0.09837859869003296, -0.0010793342953547835, -0.011434379033744335, -0.0038340408354997635, -0.0007516896002925932, -2.47952248173533e-05, -0.00026520551182329655, -8.106198947643861e-06, -2.3841855067985307e-07, -4.911301948595792e-05, -0.0019351581577211618, -0.0008214913541451097, -0.000759074988309294, -0.0014540109550580382, -0.006986592896282673, -0.0034410094376653433, -1.4305104514278355e-06, -0.2806728482246399, -0.10377412289381027, -2.811668634414673, -0.004175991285592318, -0.0004401430196594447, -0.00015424491721205413, -0.0006579380133189261, -1.8230921030044556, -0.0009314250783063471, -0.00951977726072073, -0.019305428490042686, -0.6660858392715454, -0.00032586511224508286, -0.0003582789213396609, -0.04674205183982849, -0.0007525234250351787, -0.05592375621199608, -1.6654701232910156, -0.007163080852478743, -0.5206574201583862, -0.26107677817344666, -0.008818963542580605, -1.7312986850738525, -0.00036221143091097474, -1.6522916555404663, -0.015293828211724758, -0.2111891210079193, -0.6726722121238708, -0.0013610394671559334, -0.018182387575507164, -0.00010644822759786621, -0.00035124807618558407, -8.344646857949556e-07, -0.001453891978599131, -0.008142017759382725, -4.0531076592742465e-06, 0.0, -0.584048867225647, -0.5694774985313416, -0.05386032909154892, -0.00024625606602057815, -0.0021510813385248184, -0.4769773781299591, -0.021209105849266052, -1.234987497329712, -0.009785893373191357, -0.26289400458335876, -1.5113534927368164, -0.027256660163402557, -0.005466038826853037, -0.30193865299224854, -0.011318403296172619, -0.00016306500765495002, -0.012883756309747696, -7.748573807475623e-06, -0.004576921928673983, -0.00014435203047469258, -6.329813186312094e-05, -0.04349423944950104, -0.0005197366117499769, -0.5363497138023376, -0.10588892549276352, -0.0006062338361516595, -0.44474950432777405, -0.00298542738892138, -0.0007640779949724674, -3.576278118089249e-07, -0.00023576818057335913, -0.0024398579262197018, -0.00013159839727450162, -0.3942919671535492, -3.0278701160568744e-05, -1.0728830375228426e-06, -0.0015720878727734089, -4.279521817807108e-05, -0.27583128213882446, -7.688703772146255e-05, -2.89591646194458, -0.0011875727213919163, -0.004950646311044693, -8.344646857949556e-07, -3.576272320060525e-06, 0.0, -0.01327697653323412, -9.42901024245657e-05, -0.013468118384480476, -6.05564855504781e-05, -0.0164042841643095, -5.125986263010418e-06, -0.0047950041480362415, -0.000667468411847949, -8.344646857949556e-07, -7.152555099310121e-07, -1.7881377516459906e-06, -0.0008939084364101291, -4.529942543740617e-06, -8.344646857949556e-07, -4.5060096454108134e-05, -0.20177066326141357, -0.030086975544691086, 0.0, -2.3483953555114567e-05, -0.009036595933139324, -0.013433068990707397, -0.00016378014697693288, -0.00020752183627337217, -0.17975251376628876, -0.016221562400460243, -0.010291839018464088, -0.29004520177841187, -0.8975481986999512, -9.250213042832911e-05, -1.7680904865264893, -0.005462363362312317, -0.1154448613524437, -0.000479344860650599, -0.0018563910853117704, -2.3841855067985307e-07, 0.0, -2.2411095415009186e-05, -4.5060096454108134e-05, -2.145764938177308e-06, -0.0007898071780800819, -0.7674894332885742, -0.008116004057228565, -0.00021228920377325267, -0.005594904534518719, -5.960462772236497e-07, -3.3854863431770355e-05, -5.960462772236497e-07, -1.0433834791183472, -1.0933618545532227, -0.06065940111875534, -0.05850240960717201, -0.030075524002313614, -0.00014256415306590497, -0.5961174368858337, -0.001819028053432703, -4.768370445162873e-07, -9.536738616588991e-07, -1.5038610696792603, -7.152555099310121e-07, -8.344646857949556e-07, -9.536738616588991e-07, -3.2186455882765586e-06, -0.15627311170101166], "finish_reason": "stop"}], "metrics": {"energy": 707.0141151237488, "energy_per_token": 4.110547180952028, "time": 15.674761, "time_per_token": 0.09113233139534883}}
{"outputs": [{"text": "req_data = json.dumps(req_data)\n    hash = hmac.new(secret_key.encode('utf-8'), req_data.encode('utf-8'), hashlib.sha256)\n    return urllib.parse.quote(hash.digest(), safe='').replace(' ', '+')", "tokens": ["req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "    ", "hash", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", ",", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "return", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "hash", ".", "dig", "est", "()", ",", " safe", "='", "')", ".", "replace", "('", " '", ",", " '", "+", "')", "\n", "\n", "if"], "logprobs": [-3.063173294067383, -0.020827867090702057, -0.14355459809303284, -0.841946005821228, -0.23829075694084167, -0.00024768622824922204, -0.005263162776827812, -2.145764938177308e-06, -0.0035074164625257254, -0.009756617248058319, -1.3828182090946939e-05, 0.0, -0.42654159665107727, -0.3552490174770355, -0.18071863055229187, -3.238152503967285, -0.8404388427734375, -0.007136686705052853, -3.576272320060525e-06, -0.00015400654228869826, -0.007830163463950157, -0.0004390706308186054, -0.47362810373306274, -5.400034933700226e-05, -3.6954811548639555e-06, -0.005943837575614452, -0.00018785618885885924, -0.7556099891662598, -0.0417274609208107, -0.02406471222639084, -0.00019608005823101848, -0.000196556793525815, -0.0004624251159839332, -0.09639798849821091, -1.2993727978027891e-05, -4.768370445162873e-07, -0.004519723821431398, -0.0005161621957086027, -0.00988894421607256, -0.0014561536954715848, -0.0006102845072746277, -9.202533692587167e-05, -0.0001392267586197704, -0.00042429505265317857, -0.07593878358602524, -5.960446742392378e-06, -5.602820692729438e-06, -1.4662635294371285e-05, -0.002209247788414359, -3.075552376685664e-05, -6.794906312279636e-06, -0.0005427317810244858, -0.7246963977813721, -0.030569227412343025, -1.5302733182907104, -0.009110546670854092, -1.311301275563892e-06, 0.0, -4.255681051290594e-05, -0.0002321927313460037, -9.894321920000948e-06, -0.0005452338373288512, -0.2458561509847641, -0.006084490567445755, -0.0001991788885788992, -0.559852123260498, -2.3841855067985307e-07, -0.17076970636844635, -0.13477537035942078, -0.0541829988360405, -0.06712222099304199, -0.03306039795279503, -0.1348949670791626, -0.0007470439304597676, -0.0939846932888031, -1.1557245254516602, -0.00020716428116429597, -0.012849980965256691, -0.00022015532886143774, -0.00028868322260677814, -0.7189455628395081, -0.009563347324728966, -0.29043373465538025], "finish_reason": "stop"}], "metrics": {"energy": 349.0392999076843, "energy_per_token": 4.2052927699721, "time": 7.955307, "time_per_token": 0.09584707228915663}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    req_data = json.dumps(req_data, sort_keys=True)\n    hmac_digest = hmac.new(secret_key.encode('utf-8'), req_data.encode('utf-8'), hashlib.sha256).digest()\n    hmac_base64 = base64.b64encode(hmac_digest).decode('utf-8')\n    return urllib.parse.quote(hmac_base64.strip(), safe='~()*!.\\'').replace('%20', '+')", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "req", "_", "data", " must", " be", " a", " dictionary", "\"", ")", "\n", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ")", "\n", "    ", "h", "mac", "_", "dig", "est", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", ",", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", ",", " hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "h", "mac", "_", "base", "6", "4", " =", " base", "6", "4", ".", "b", "6", "4", "encode", "(", "h", "mac", "_", "dig", "est", ")", ".", "decode", "('", "utf", "-", "8", "')", "\n", "    ", "return", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "base", "6", "4", ".", "strip", "()", ",", " safe", "='", "~", "()", "*", "!", ".", "\\", "'')", ".", "replace", "('", "%", "2", "0", "'", ",", " '", "+", "')", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -0.17795707285404205, -0.7895767688751221, -0.0008046964649111032, -0.00023934361524879932, -0.36943480372428894, -0.0005714452126994729, -0.03027990460395813, -0.07535819709300995, -0.11703582108020782, -0.00041797960875555873, -0.001780949649401009, -0.2545730769634247, -0.0007622911944054067, -0.9957013130187988, -0.016037749126553535, -0.15211521089076996, -1.5933284759521484, -0.1101444661617279, -8.05822346592322e-05, -0.001887565478682518, 0.0, -0.003535807365551591, -0.0073678200133144855, -1.1086402082582936e-05, 0.0, -0.7484726309776306, -0.48213720321655273, -7.986990567587782e-06, -1.4305104514278355e-06, -0.004810189828276634, -0.00513650756329298, -0.8518410325050354, -0.4480692744255066, -0.19230878353118896, -1.1632969379425049, -0.15835851430892944, -0.007722049951553345, -3.1946029663085938, -0.06383804976940155, -0.005732880439609289, -0.0014083001296967268, -3.4570634852570947e-06, -0.0007469248375855386, -0.02475050650537014, -0.00017379203927703202, -0.40805891156196594, -3.421248038648628e-05, -4.768370445162873e-07, -0.0014760324265807867, -0.00010644822759786621, -1.1359784603118896, -0.021183663979172707, -0.01067381352186203, -1.4424220353248529e-05, -8.391981828026474e-05, -0.00017808281700126827, -0.1387176215648651, -3.933898824470816e-06, -1.1920928244535389e-07, -0.0004972175229340792, -0.0001629458274692297, -0.006167072337120771, -0.0007552632014267147, -0.00028725311858579516, -2.7179348762729205e-05, -3.373566141817719e-05, -0.00019131260341964662, -0.02384113147854805, -2.861018856492592e-06, -2.0265558760002023e-06, -3.933898824470816e-06, -0.0012251974549144506, -1.7165990357170813e-05, -2.264974000354414e-06, -0.00017045476124621928, -0.17008168995380402, -0.008812819607555866, 0.0, -8.010543388081715e-05, -0.014019578695297241, -0.02818090096116066, -1.5399971008300781, -0.0026557911187410355, -0.00030501006403937936, -3.0219075679779053, -0.013730129227042198, -6.9141146923357155e-06, -0.21792279183864594, -0.09283289313316345, -8.177422569133341e-05, -4.768370445162873e-07, -0.0011208925861865282, -0.10462386161088943, -0.0001113352773245424, -1.1920928244535389e-07, -0.00011336160969221964, -2.372236667724792e-05, -0.00025733973598107696, -3.576278118089249e-07, -1.5139465176616795e-05, -1.0967194612021558e-05, -2.3841855067985307e-07, -0.0020698329899460077, -0.42268744111061096, -0.0076845502480864525, -0.10630103945732117, -0.011995441280305386, -0.001610174193046987, -9.059865078597795e-06, -2.47952248173533e-05, -0.020284239202737808, -0.0456068255007267, -1.2388811111450195, -0.004943173378705978, -7.152555099310121e-07, 0.0, -5.23315102327615e-05, -0.0001394651480950415, -1.7881233361549675e-05, -0.0014065144350752234, -0.42606282234191895, -0.0014826982514932752, -1.1920928244535389e-07, -2.2172682292875834e-05, -4.887569048150908e-06, -6.6756979322235566e-06, 0.0, -3.053112030029297, -1.0256364345550537, -0.28720080852508545, -0.027015458792448044, -0.012292458675801754, -0.1323527842760086, -1.4395524263381958, -0.12525275349617004, -0.004220863804221153, -0.01003411877900362, -0.1136251762509346, -0.006273932289332151, -0.00686962716281414, -0.3106757402420044, -0.0004407388041727245, -0.1801944375038147, -0.3931832015514374, -0.00014041867689229548, -0.036776307970285416, -4.386805812828243e-05, -6.401333666872233e-05, -0.0073953913524746895, -0.00040415700641460717, -0.0021592890843749046, -0.5752665400505066, -0.006678167264908552, -0.304070383310318], "finish_reason": "stop"}], "metrics": {"energy": 719.8651398315428, "energy_per_token": 4.234500822538487, "time": 15.649128, "time_per_token": 0.09205369411764705}}
{"outputs": [{"text": "# Convert the request data to a JSON string.\n    req_data_json = json.dumps(req_data, separators=(\n        ',', ':'), sort_keys=True).encode()\n    # Compute the HMAC SHA256 signature.\n    hmac_signature = hmac.new(secret_key.encode(), req_data_json,\n                              hashlib.sha256).digest()\n    # URL encode the signature.\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature.hex())\n    return url_encoded_signature", "tokens": ["#", " Convert", " the", " request", " data", " to", " a", " JSON", " string", ".", "\n", "    ", "req", "_", "data", "_", "json", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " separ", "ators", "=(", "\n", "        ", "'", ",", "'", ",", " ':", "')", ",", " sort", "_", "keys", "=", "True", ")", ".", "encode", "()", "\n", "    ", "#", " Compute", " the", " H", "MAC", " SH", "A", "2", "5", "6", " signature", ".", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", ".", "encode", "()", ",", " req", "_", "data", "_", "json", ",", "\n", "                ", "              ", "hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "#", " URL", " encode", " the", " signature", ".", "\n", "    ", "url", "_", "encoded", "_", "signature", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "h", "mac", "_", "signature", ".", "hex", "())", "\n", "    ", "return", " url", "_", "encoded", "_", "signature", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.7585830688476562, -1.4384732246398926, -0.24002833664417267, -0.20870156586170197, -0.011762312613427639, -0.3042987585067749, -0.33626434206962585, -0.3203866183757782, -0.08091497421264648, -1.765336275100708, -0.018794547766447067, -0.0016563518438488245, -0.38045844435691833, -0.01092181820422411, -0.1388716995716095, -0.299060583114624, -0.43689045310020447, -0.014021812006831169, -0.003486508736386895, -0.0001284993631998077, -4.970903682988137e-05, -1.1920928244535389e-07, -0.0011648305226117373, -0.001007764250971377, -8.940656698541716e-06, 0.0, -2.230323553085327, -1.5549558401107788, -4.327203714638017e-05, -1.7049462795257568, -2.5224437713623047, -0.01785549893975258, -0.031439583748579025, -0.00020668754586949944, -0.0013272295473143458, -0.00035720644518733025, -0.007026130799204111, -0.34458571672439575, -0.003606602782383561, -0.8155934810638428, -8.344646857949556e-07, -6.556489552167477e-06, -0.00020823694649152458, -0.007089932449162006, -0.19100217521190643, -0.9423528909683228, -0.037743110209703445, -1.6206769943237305, -0.009207053110003471, -1.740747094154358, -0.055107515305280685, -2.750931739807129, -0.06356389820575714, -0.06754906475543976, -0.0001567479339428246, -0.9760565161705017, -9.65590606938349e-06, -0.007467097137123346, -8.904537389753386e-05, -3.111314072157256e-05, -0.5080602765083313, -3.0638928413391113, -0.0019565741531550884, -0.0014250847743824124, -0.5584499835968018, -0.1928979456424713, -0.002574108075350523, -0.3689799904823303, -0.016492115333676338, -0.0021107555367052555, -2.145764938177308e-06, -0.00030357998912222683, -0.005151569377630949, -0.00023469554434996098, -1.4315561056137085, -4.565611743601039e-05, -6.198863957251888e-06, -0.0037199126090854406, -0.00015448330668732524, -0.0361405685544014, -0.00013243274588603526, -0.19923843443393707, -1.311301275563892e-06, -3.576278118089249e-07, -4.053033626405522e-05, -2.3841855067985307e-07, -0.00026258357684127986, -0.3843855559825897, -0.0005317704635672271, -0.01451234333217144, -0.1358378380537033, -1.0132738680113107e-05, -2.264974000354414e-06, -1.6689286894688848e-06, -0.0004266782198101282, -4.887569048150908e-06, -7.152555099310121e-07, -0.0011931689223274589, -0.013890735805034637, -0.18552161753177643, -3.576278118089249e-07, -6.639736966462806e-05, -0.05240051820874214, -0.012294460088014603, -0.006317999679595232, -0.2660149931907654, -0.025213252753019333, -0.031749822199344635, -0.2075808048248291, -1.0393537282943726, -0.0197648573666811, -0.00019476900342851877, -0.5065327286720276, -0.020705269649624825, -0.04141252487897873, -0.10208301246166229, -0.3790346086025238, -0.0012542485492303967, -0.003949818201363087, -2.3841855067985307e-07, 0.0, -1.7404405298293568e-05, -9.405170567333698e-05, -8.749579137656838e-05, -0.0006556744920089841, -1.0843669176101685, -0.0026047846768051386, -0.0002791491860989481, -1.224604845046997, -4.768370445162873e-07, -5.113947918289341e-05, -1.1920922133867862e-06, -0.7955403327941895, -1.0169689655303955, -0.04470745101571083, -0.011262650601565838, -0.1240936741232872, -0.3522997498512268, -0.00858225580304861, -3.2543604902457446e-05, -1.8596476365928538e-05, -1.1920922133867862e-06, -1.0728830375228426e-06, -1.7498427629470825, -4.768370445162873e-07, -1.1920922133867862e-06, -1.0728830375228426e-06, -2.50339189733495e-06, -0.15332786738872528], "finish_reason": "stop"}], "metrics": {"energy": 591.2943741455076, "energy_per_token": 3.9684186184262256, "time": 13.347289, "time_per_token": 0.08957912080536913}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError('req_data should be a dictionary')\n\n    json_req_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    hmac_signature = hmac.new(\n        secret_key.encode('utf-8'),\n        json_req_data.encode('utf-8'),\n        digestmod=hashlib.sha256)\n    return urllib.parse.quote(hmac_signature.digest(), safe='').replace('%20', '+')", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "('", "req", "_", "data", " should", " be", " a", " dictionary", "')", "\n", "\n", "    ", "json", "_", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ",", " sort", "_", "keys", "=", "True", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "'))", "\n", "    ", "h", "mac", "_", "signature", " =", " h", "mac", ".", "new", "(", "\n", "        ", "secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", ",", "\n", "        ", "json", "_", "req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", ",", "\n", "        ", "dig", "est", "mod", "=", "hash", "lib", ".", "sha", "2", "5", "6", ")", "\n", "    ", "return", " ur", "ll", "ib", ".", "parse", ".", "quote", "(", "h", "mac", "_", "signature", ".", "dig", "est", "()", ",", " safe", "='", "')", ".", "replace", "('", "%", "2", "0", "'", ",", " '", "+", "')", "\n", "\n", "if"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -1.602193832397461, -0.633042573928833, -0.001852583372965455, -0.0003404037852305919, -0.9435346126556396, -0.0031354096718132496, -0.05737168341875076, -0.15785524249076843, -0.11151815950870514, -0.0012353177880868316, -0.3509902358055115, -0.0006423317245207727, -2.9997916221618652, -0.020726170390844345, -1.692838430404663, -0.23961171507835388, -0.008768389001488686, -0.01081050094217062, -0.015683403238654137, -0.00014518637908622622, -0.0006719953380525112, -1.1920928244535389e-07, -0.0018436592072248459, -0.004329949617385864, -6.556489552167477e-06, 0.0, -1.1794697046279907, -0.5144003033638, -1.1324817933200393e-05, -1.0728830375228426e-06, -0.004964524880051613, -0.005787164904177189, -0.5209929347038269, -0.32632559537887573, -2.7417760065873154e-05, -0.03377647325396538, -0.0003906917118001729, -0.0007239343249239028, -0.0020184398163110018, -0.0001357701694360003, -0.009421057067811489, -0.08847626298666, -0.12379701435565948, -0.29853954911231995, -0.7836047410964966, -0.18975727260112762, -0.0024339118972420692, -0.5302654504776001, -0.02213696762919426, -0.002786683849990368, -2.0265558760002023e-06, -0.000605638197157532, -0.0018548441585153341, -0.00012373158824630082, -1.62779700756073, -0.021046169102191925, -0.4638359248638153, -4.60137271147687e-05, -4.6491513785440475e-06, -0.0011830481234937906, -7.581423415103927e-05, -0.6608871817588806, -0.024766787886619568, -0.012301760725677013, -5.352353764465079e-05, -5.411955135059543e-05, -0.0003359945258125663, -0.27554479241371155, -0.00015627116954419762, -0.06127593666315079, -0.0014515112852677703, -0.0002215855201939121, -1.4305104514278355e-06, 0.0, -6.186770770000294e-05, -0.00015031162183731794, -0.0014760324265807867, -0.00024089295766316354, -0.0001736728590913117, -3.2305197237292305e-05, -1.6212332411669195e-05, -0.00015364897262770683, -0.01571027562022209, -0.00015853578224778175, -1.16628098487854, -2.3841855067985307e-07, -0.0001006075763143599, -0.0020461592357605696, -0.00016068121476564556, -7.152555099310121e-07, -1.7881377516459906e-06, -3.814689989667386e-06, -0.0011026738211512566, -3.814689989667386e-06, -7.152555099310121e-07, -2.8418943881988525, -2.3233680725097656, -0.2876729965209961, -2.0761818885803223, -0.010085927322506905, -9.536738616588991e-07, 0.0, -5.125868119648658e-05, -0.00015424491721205413, -6.639736966462806e-05, -0.0020214139949530363, -0.26764872670173645, -0.20132599771022797, -2.3841855067985307e-07, -6.0794889577664435e-05, -3.290122185717337e-05, -0.000771939754486084, -0.6683118939399719, -5.960462772236497e-07, -0.10363355278968811, -0.16857178509235382, -0.02662760578095913, -0.037423815578222275, -0.058888327330350876, -0.039548907428979874, -0.0009790633339434862, -0.06570052355527878, -0.5765751600265503, -0.0005729940603487194, -0.021494299173355103, -0.00015662873920518905, -2.610649426060263e-05, -0.006424606777727604, -0.00037055302527733147, -0.000284154579276219, -0.6101424098014832, -0.005637816619127989, -0.3771018981933594], "finish_reason": "stop"}], "metrics": {"energy": 620.8690036525727, "energy_per_token": 4.195060835490356, "time": 13.377367, "time_per_token": 0.09038761486486487}}
{"outputs": [{"text": "if not isinstance(req_data, dict):\n        raise TypeError(f\"req_data must be a dictionary, not {type(req_data)}\")\n\n    req_data = json.dumps(req_data)\n\n    req_data_b = req_data.encode('utf-8')\n    secret_key_b = secret_key.encode('utf-8')\n\n    signature = hmac.new(secret_key_b, req_data_b, digestmod=hashlib.sha256).digest()\n    signature_url_encoded = urllib.parse.quote_plus(urllib.parse.quote_plus(signature.hex()))\n\n    return signature_url_encoded", "tokens": ["if", " not", " isinstance", "(", "req", "_", "data", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "req", "_", "data", " must", " be", " a", " dictionary", ",", " not", " {", "type", "(", "req", "_", "data", ")}", "\"", ")", "\n", "\n", "    ", "req", "_", "data", " =", " json", ".", "d", "umps", "(", "req", "_", "data", ")", "\n", "\n", "    ", "req", "_", "data", "_", "b", " =", " req", "_", "data", ".", "encode", "('", "utf", "-", "8", "')", "\n", "    ", "secret", "_", "key", "_", "b", " =", " secret", "_", "key", ".", "encode", "('", "utf", "-", "8", "')", "\n", "\n", "    ", "signature", " =", " h", "mac", ".", "new", "(", "secret", "_", "key", "_", "b", ",", " req", "_", "data", "_", "b", ",", " digest", "mod", "=", "hash", "lib", ".", "sha", "2", "5", "6", ")", ".", "dig", "est", "()", "\n", "    ", "signature", "_", "url", "_", "encoded", " =", " ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "ur", "ll", "ib", ".", "parse", ".", "quote", "_", "plus", "(", "signature", ".", "hex", "()))", "\n", "\n", "    ", "return", " signature", "_", "url", "_", "encoded", "\n", "\n", "def"], "logprobs": [-0.4144057631492615, -0.03455111384391785, -0.0031059379689395428, -4.4225667807040736e-05, -0.0015167410019785166, -2.2053474822314456e-05, -1.0132738680113107e-05, -6.878139538457617e-05, -0.004791682120412588, -0.0019792981911450624, -0.007141775917261839, -0.0024833811912685633, -0.011231767013669014, -0.005043521989136934, -2.50339189733495e-06, -0.2628689110279083, -2.130288600921631, -0.2156647890806198, -1.1960519552230835, -0.0009650102583691478, -0.0002559096028562635, -0.6225206851959229, -0.001555900671519339, -0.065651074051857, -0.1877095252275467, -0.20767058432102203, -0.6804624199867249, -0.057817667722702026, -0.05234101042151451, -0.00020990552729927003, -0.0011822147062048316, -1.2397689715726301e-05, -3.814689989667386e-06, -0.12197823077440262, -0.03854691609740257, -0.0005974177038297057, -0.0008796160109341145, -0.3001749813556671, -0.0007537146448157728, -0.9110925197601318, -0.014586007222533226, -0.1652003526687622, -1.3777189254760742, -0.09957323968410492, -0.00010346830822527409, -0.0018603176577016711, -3.576278118089249e-07, -0.0036210936959832907, -0.007253384217619896, -6.437280717364047e-06, 0.0, -0.6958886981010437, -0.8078092336654663, -1.5360661745071411, -0.0003292018664069474, -2.7532432079315186, -0.0075484998524188995, -0.26553091406822205, -0.7344755530357361, -2.3475043773651123, -0.011227876879274845, -0.21670348942279816, -2.264974000354414e-06, 0.0, -0.0004545609117485583, -0.0004707658663392067, -0.6568669080734253, -0.03175594285130501, -0.05269097536802292, -0.0001915509783430025, -0.00014256415306590497, -0.012841742485761642, -0.06918997317552567, -0.07292189449071884, -0.004341818857938051, -0.010068225674331188, -0.02867322415113449, -0.008853230625391006, -0.0005964645533822477, -0.012618816457688808, -4.0531076592742465e-06, 0.0, -0.00013457823661156, -0.0004198861715849489, -0.004957051947712898, -0.0004999579978175461, -0.0008727079257369041, -7.533743337262422e-05, -1.0847986231965479e-05, -0.0015484021278098226, -0.21637104451656342, -9.655486064730212e-05, -2.043936014175415, -0.3079233169555664, -0.0089569678530097, -2.0265558760002023e-06, -0.00018273114983458072, -0.020453957840800285, -5.9960475482512265e-05, -0.13485746085643768, -4.172238186583854e-05, 0.0, -0.0002499506517779082, -2.50339189733495e-06, -0.00038068200228735805, -0.014053314924240112, -1.311301275563892e-06, 0.0, -7.295342220459133e-05, -1.7881377516459906e-06, -0.0003759154351428151, -2.7270567417144775, -3.3854863431770355e-05, -0.0050263237208127975, -0.0004085659747943282, -1.5497195136049413e-06, -1.0728830375228426e-06, -4.410734163684538e-06, -0.0013847296359017491, -1.9788545614574105e-05, -2.145764938177308e-06, -5.6980417866725475e-05, -0.10473691672086716, -0.042665157467126846, 0.0, -5.674201020156033e-05, -0.02266024611890316, -0.29828524589538574, -0.4519628882408142, -0.6691777110099792, -0.8339788317680359, -0.4795374274253845, -0.09857629239559174, -0.007762741297483444, -0.004693443886935711, -3.576278118089249e-07, 0.0, -2.9205850296420977e-05, -2.9444261599564925e-05, -4.529942543740617e-06, -0.0012193633010610938, -0.38544243574142456, -0.007214091718196869, -0.0004694551753345877, -2.640371322631836, -9.298280929215252e-06, -1.1920928244535389e-07, -3.158996332786046e-05, -3.790783375734463e-05, -7.986990567587782e-06, -0.060997381806373596, -0.8415908217430115, -0.004129336215555668, -0.0011516136582940817, -0.1788357049226761, -0.40520375967025757, -0.4548420310020447, -0.09370370209217072, -0.030617324635386467, -0.29640182852745056, -0.00021324267436284572, -0.019177967682480812, -0.01826620101928711, -0.0004397855664137751, -5.960462772236497e-07, -2.264974000354414e-06, -3.4689302992774174e-05, -0.35421645641326904, -0.004254101309925318, -2.016909122467041], "finish_reason": "stop"}], "metrics": {"energy": 742.0509078178405, "energy_per_token": 4.365005340104944, "time": 16.292027, "time_per_token": 0.09583545294117647}}
