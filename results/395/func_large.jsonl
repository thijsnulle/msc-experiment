{"outputs": [{"text": "# Validate directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n\n    # Validate file_pattern and get the list of files\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found\")\n\n    # Extract data from each file\n    data = []\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as f:\n            content = f.read()\n            numbers = list(map(int, re.findall(regex, content)))\n            data.append((os.path.basename(filename), numbers))\n\n    # Create Pandas DataFrame\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["#", " Valid", "ate", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Valid", "ate", " file", "_", "pattern", " and", " get", " the", " list", " of", " files", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " were", " found", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " data", " from", " each", " file", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "numbers", " =", " list", "(", "map", "(", "int", ",", " re", ".", "find", "all", "(", "regex", ",", " content", ")))", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")", ",", " numbers", "))", "\n", "\n", "    ", "#", " Create", " Pand", "as", " Data", "Frame", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "def"], "logprobs": [-1.0816802978515625, -2.0354652404785156, -0.022773398086428642, -1.259848952293396, -0.48837682604789734, -0.000863894063513726, -0.026010582223534584, -0.004561020527034998, -0.0066871666349470615, -4.768360213347478e-06, -0.000548331590835005, -1.8000440832111053e-05, -0.7137746810913086, -0.00011538793478393927, -0.0005561950383707881, -0.004482103977352381, -0.0009556017466820776, -0.0011254174169152975, -0.006220859009772539, -0.004119245335459709, -6.103329360485077e-05, -5.483612312673358e-06, -0.027216173708438873, -2.2113850116729736, -2.6507205963134766, -0.35572582483291626, -0.0009951406391337514, -0.013594310730695724, -0.00014673586701974273, -0.000428942235885188, -2.249279737472534, -0.0006366133457049727, -0.0002051381452474743, -0.05396367982029915, -0.00033778208307921886, -0.061253514140844345, -2.0672688484191895, -0.001149232150055468, -0.20687180757522583, -0.731648862361908, -0.0010580186499282718, -2.96411395072937, -2.5954346656799316, -2.2951254844665527, -1.2515230178833008, -0.001579943229444325, -0.5496601462364197, -0.29373615980148315, -0.0002982171718031168, -0.6474801301956177, -0.03108002431690693, -0.09756937623023987, -0.00024959311122074723, -0.0007543102256022394, -0.0005975367967039347, -0.07959423214197159, -1.3351351299206726e-05, -9.775113539944869e-06, -1.3351351299206726e-05, -0.0004368066438473761, -0.00013481661153491586, -0.001057661371305585, -0.0002821285743266344, -0.002081372309476137, -2.9802276912960224e-06, -2.622600959512056e-06, -0.02603532187640667, -0.0024234468583017588, -0.08214547485113144, -0.0387280136346817, -0.045028869062662125, -0.010566715151071548, -0.002337939338758588, -0.0009134411229752004, -0.00034957972820848227, -0.0024133387487381697, -0.0011736417654901743, -3.576278118089249e-07, -0.002062814310193062, -0.10397118330001831, -0.008215679787099361, -0.03402549773454666, -0.26533371210098267, -0.005325654521584511, -0.04313955828547478, -1.2535234689712524, -3.0874729418428615e-05, -0.06329448521137238, -9.870042413240299e-05, -7.83174327807501e-05, -0.05869656801223755, -0.0005660838796757162, -0.10371050238609314, -1.5026594400405884, -0.007434321567416191, -2.791983127593994, -0.16119830310344696, -0.952666699886322, -0.03288773074746132, -0.7061156630516052, -0.0003307510633021593, -0.4737333655357361, -0.03775699809193611, -0.07306130230426788, -0.012793018482625484, -0.009368977509438992, -0.036834679543972015, -1.1605405807495117, -0.00019476900342851877, -0.10330505669116974, -1.1920928244535389e-07, -0.0005926521262153983, -0.0001802282058633864, -0.048874810338020325, -5.960462772236497e-07, -0.00018821375851985067, -0.0003152588615193963, -0.0005259322933852673, -0.0491146557033062, -0.007075610104948282, -0.0018430643249303102, -0.27010998129844666, -7.73638384998776e-05, -0.00017438798386137933, -0.031113766133785248, -0.07896433025598526, -0.2084036022424698, -0.0010749283246695995, -0.015199786052107811, -0.00018034738604910672, -0.43146079778671265, -0.006716414820402861, -0.0005443998379632831, -0.00044955636258237064, -1.2289135456085205, -0.0001760566228767857, -0.010092535987496376, -6.794906312279636e-06, -3.3378546504536644e-06, -0.0008817598572932184, -0.05969396233558655, -0.11255054920911789, -1.9690881967544556, -0.005448965821415186, -3.2149829864501953, -0.000303818320389837, -0.0035549320746213198, -4.8397800128441304e-05, -0.01227679755538702, -2.634490556374658e-05, -0.0026336766313761473, -1.5258672647178173e-05, -6.3774932641536e-05, -4.851700214203447e-05, -0.0005116345710121095, -0.011318167671561241, -0.00023278864682652056, -0.0002379134384682402, -0.004668171051889658, -0.05005361884832382, -0.03791321814060211, -0.020665334537625313, -0.00047183825518004596, -0.00017677174764685333, -0.5887722373008728, -0.47971636056900024, -1.3112935448589269e-05, -3.814689989667386e-06, -5.960462772236497e-07, -0.0265194159001112, -2.3841855067985307e-07, -4.172316494077677e-06, -9.190614218823612e-05, -0.00032944019767455757, -0.001579943229444325, -0.0009171332349069417, -0.0016430224059149623, -0.0016548046842217445, -0.009978529997169971, -0.0014394884929060936, -0.043607454746961594, -0.12678754329681396, -3.178246021270752, -1.7881377516459906e-06, -0.00248968368396163, -0.0011710221879184246, -0.12644042074680328, -0.00033718624035827816, -2.7482728958129883, -0.0005796659388579428, -1.4305012882687151e-05, -7.152531907195225e-06, -0.0032346330117434263, -0.0013398488517850637, -0.009095425717532635, -0.00013600854435935616, -0.04795223847031593, -0.0021240785717964172, -1.0728830375228426e-06, -1.0132738680113107e-05, -8.821448318485636e-06, -0.000428942235885188, -0.0006087357178330421, -1.0728830375228426e-06, -0.0008338788175024092, -0.0013949673157185316, -0.16062021255493164, -0.004022127948701382, -0.33663859963417053], "finish_reason": "stop"}], "metrics": {"energy": 757.3991284694667, "energy_per_token": 3.623919274973525, "time": 18.081007, "time_per_token": 0.086511995215311}}
{"outputs": [{"text": "# Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    # Get list of files matching pattern\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    # Create empty dataframe\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Extract numeric data from each file\n    for filename in natsort.natsorted(file_list):\n        numeric_data = []\n        try:\n            with open(filename, 'r') as f:\n                for line in f:\n                    matches = re.findall(regex, line)\n                    numeric_data += [int(m) for m in matches]\n        except FileNotFoundError:\n            numeric_data = []\n        except ValueError:\n            numeric_data = []\n        df = df.append({'", "tokens": ["#", " Check", " if", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " list", " of", " files", " matching", " pattern", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " file", "_", "list", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " empty", " data", "frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " from", " each", " file", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "file", "_", "list", "):", "\n", "        ", "numeric", "_", "data", " =", " []", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "for", " line", " in", " f", ":", "\n", "                ", "    ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " line", ")", "\n", "                ", "    ", "numeric", "_", "data", " +=", " [", "int", "(", "m", ")", " for", " m", " in", " matches", "]", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "numeric", "_", "data", " =", " []", "\n", "        ", "except", " Value", "Error", ":", "\n", "            ", "numeric", "_", "data", " =", " []", "\n", "        ", "df", " =", " df", ".", "append", "({", "'"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -1.5883234739303589, -0.030421800911426544, -0.09624555706977844, -0.000387831823900342, -0.004025571048259735, -0.0024963426403701305, -0.0021121830213814974, -3.099436753473128e-06, -0.00036399890086613595, -2.7179348762729205e-05, -0.3010868430137634, -0.00016675988445058465, -0.00045277358731254935, -0.0014391313306987286, -0.0004196478403173387, -0.0010519453790038824, -0.007775989361107349, -0.00212479243054986, -5.1616290875244886e-05, -3.4570634852570947e-06, -0.02773796021938324, -0.1472940444946289, -0.039764877408742905, -0.10972463339567184, -0.3879927098751068, -5.090107151772827e-05, -0.0003106111544184387, -0.0004408579843584448, -1.2544529438018799, -0.00010573305189609528, -0.11314602941274643, -0.013763287104666233, -0.0001147919538198039, -9.452849917579442e-05, -0.03098352439701557, -0.00020930961181875318, -0.01890135370194912, -1.8134593963623047, -1.6514434814453125, -0.00017069313616957515, -1.0305808782577515, -0.19699594378471375, -1.3002541065216064, -0.4224698543548584, -8.987976616481319e-05, -0.9987689852714539, -0.010869580321013927, -0.07939836382865906, -0.0003762729174923152, -0.1148056834936142, -0.00016556799528189003, -0.002368028275668621, -0.0002910667099058628, -0.028596999123692513, -2.622600959512056e-06, -2.3841830625315197e-06, -2.7418097943154862e-06, -0.00021598390594590455, -9.42901024245657e-05, -0.0011372057488188148, -0.00014554394874721766, -0.0018271195003762841, -3.933898824470816e-06, -2.3841855067985307e-07, -0.00900434423238039, -0.0011388728162273765, -1.1059563159942627, -0.2290167361497879, -0.03584318980574608, -0.0010080024367198348, -2.3841855067985307e-07, 0.0, -0.00036090059438720345, -0.003927257843315601, -0.00021360022947192192, -0.0026953816413879395, -0.0006706849089823663, -5.960462772236497e-07, -0.002692409558221698, -0.03251587972044945, -0.0007676515378989279, -0.0063704755157232285, -0.020653774961829185, -0.29035529494285583, -0.16007642447948456, -0.0173607487231493, -0.00017271934484597296, -0.03882858529686928, -6.556489552167477e-06, -5.8410845667822286e-05, -0.001141849672421813, -1.95027756690979, -0.017248503863811493, -0.013799031265079975, -3.0636318115284666e-05, -0.0003890234511345625, -0.001086598145775497, -0.08258164674043655, -0.00040284625720232725, -6.0437283536884934e-05, -7.247662142617628e-05, -0.0214015394449234, -0.00043752157944254577, -0.07266474515199661, -1.790596842765808, -0.5797286033630371, -1.5551583766937256, -0.27931147813796997, -0.37973645329475403, -0.00024923557066358626, -0.20627762377262115, -0.01199073065072298, -0.0008833082392811775, -1.311301275563892e-06, -3.40932747349143e-05, -0.08021780103445053, -0.002354946220293641, -0.05692392215132713, -0.003030590945854783, -3.576278118089249e-07, -0.0032920234370976686, -5.2569914259947836e-05, -0.0031929248943924904, -0.0013737775152549148, -1.9073468138230965e-06, -0.0009172523277811706, -0.0015718498034402728, -0.00030489088385365903, -0.02151389978826046, -0.00015198028995655477, -0.07625208795070648, -1.5346108675003052, -0.0012730597518384457, -0.14079508185386658, -0.005844409111887217, -0.14850392937660217, -0.11170367896556854, -0.0441204197704792, -0.696486234664917, -0.00023314618738368154, -0.015917614102363586, -1.526226282119751, -0.0002821285743266344, -0.21964862942695618, -2.3841855067985307e-07, -0.0006087357178330421, -0.00019238528329879045, -0.027197033166885376, -3.576278118089249e-07, -0.00013255194062367082, -0.0003796095261350274, -0.0006528153317049146, -1.1920922133867862e-06, -1.1920928244535389e-07, -0.05044825002551079, -0.00691745663061738, -0.003966441843658686, -2.6891276836395264, -0.0014141331193968654, -0.025643950328230858, -0.009536071680486202, -0.18210351467132568, -0.007704542484134436, -0.08903978765010834, -2.3205084800720215, -4.482168878894299e-05, -0.0023350848350673914, -0.0005440423847176135, -0.042083557695150375, -0.00014184899919200689, -0.00019333878299221396, -0.03736410290002823, -0.05030905455350876, -0.029908934608101845, -0.0007701530121266842, -0.037389252334833145, -3.3378044463461265e-05, -0.7614642381668091, -0.0060936142690479755, -0.001788208493962884, -0.000390215078368783, -0.6314454078674316, -0.002647944027557969, -0.0004077318590134382, -0.0002711643755901605, -0.01281184982508421, -0.0007273888913914561, -0.00015817821258679032, -0.0003430254873819649, -1.6119143962860107, -0.0002033503697020933, -0.0031004713382571936, -4.172316494077677e-06, -0.0015657796757295728, -0.0006596058374270797, -0.0002506657037883997, -0.0047366321086883545, -0.00011884459672728553, -0.00046266341814771295, -0.01972196437418461, -0.002513109240680933, -0.0014519874239340425, -0.00017498392844572663, -0.16496850550174713, -0.0003778220561798662, -0.002339128637686372, -1.5353987216949463, -0.1250200718641281, -0.010182221420109272, -0.003569423919543624, -2.5455410480499268, -0.0026881294324994087, -0.006244078744202852, -5.6265202147187665e-05, -3.2186455882765586e-06, -0.00026854246971197426, -0.13118425011634827, -0.021406322717666626, -0.11900786310434341, -0.0012719882652163506, -0.5490707755088806, -0.00014280252798926085, -6.556489552167477e-06, -0.2565149664878845, -0.002757796086370945, -0.0010762381134554744, -1.8710310459136963, -8.940656698541716e-06, -2.3364747903542593e-05, -0.004649542272090912, -0.04972768574953079, -0.022561533376574516, -0.3460414409637451, -1.1539591550827026, -0.36647844314575195, -5.960462772236497e-07, -0.22640228271484375, -0.01974347047507763, -0.0002874914789572358, -0.09578259289264679, -8.702239938429557e-06, -1.156323378381785e-05, -0.0004996005445718765, -0.011898615397512913, -0.004796665161848068, -0.22521184384822845, -0.25661522150039673, -0.39388662576675415, -0.12888845801353455, -4.410734163684538e-06, -4.053033626405522e-05, -0.0037645678967237473, -0.002865734277293086], "finish_reason": "length"}], "metrics": {"energy": 924.3631476707454, "energy_per_token": 3.6107935455888494, "time": 22.270897, "time_per_token": 0.08699569140625}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found\")\n\n    numeric_data = {}\n    for filename in natsort.natsorted(files):\n        numeric_data[os.path.basename(filename)] = []\n\n    pattern = re.compile(regex)\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            data = file.read()\n            matches = pattern.findall(data)\n            numeric_data[os.path.basename(filename)].extend(matches)\n\n    df = pd.DataFrame(numeric_data, index=numeric_data.keys())\n    df.rename_axis(index='Filename', inplace=True)\n    df.reset_index(inplace=True)\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", "\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " found", "\"", ")", "\n", "\n", "    ", "numeric", "_", "data", " =", " {}", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "numeric", "_", "data", "[", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")]", " =", " []", "\n", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "regex", ")", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "data", " =", " file", ".", "read", "()", "\n", "            ", "matches", " =", " pattern", ".", "find", "all", "(", "data", ")", "\n", "            ", "numeric", "_", "data", "[", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")]", ".", "extend", "(", "matches", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "numeric", "_", "data", ",", " index", "=", "numeric", "_", "data", ".", "keys", "())", "\n", "    ", "df", ".", "rename", "_", "axis", "(", "index", "='", "Fil", "ename", "'", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", ".", "reset", "_", "index", "(", "in", "place", "=", "True", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -1.9102814197540283, -0.43625470995903015, -0.6629285216331482, -0.0010481346398591995, -1.58962082862854, -0.00320825376547873, -0.0006342306733131409, -0.2116704136133194, -0.00022504181833937764, -0.9119376540184021, -0.015319655649363995, -0.33884814381599426, -7.080780778778717e-05, -0.0031495511066168547, -0.0005857420619577169, -0.06918163597583771, -4.172316494077677e-06, -5.722029527532868e-06, -3.814689989667386e-06, -0.00031394799589179456, -9.345571743324399e-05, -0.0009828743059188128, -0.0001658063702052459, -0.0021151569671928883, -2.861018856492592e-06, -1.311301275563892e-06, -0.009308273904025555, -0.0058843474835157394, -0.1873953640460968, -0.07927823066711426, -0.05014750361442566, -0.004550696350634098, -0.0006037319544702768, -0.002568281954154372, -0.000219321038457565, -0.0018550821114331484, -0.0009071287349797785, 0.0, -0.0030001651030033827, -0.02908761240541935, -0.005435924045741558, -0.1523243635892868, -0.652718186378479, -0.09001468867063522, -0.018614016473293304, -0.10956621170043945, -0.08051975816488266, -7.664863369427621e-05, -0.000120751719805412, -0.02931361272931099, -0.0002885640424210578, -2.383005142211914, -0.0008329259580932558, -0.02369200997054577, -0.11925876140594482, -1.7026671171188354, -0.025364819914102554, -0.2852383852005005, -0.10072269290685654, -1.2557909488677979, -0.0001971527235582471, -0.15140141546726227, -2.3841855067985307e-07, -0.000500196241773665, -0.00011824862303910777, -0.054977428168058395, -5.960462772236497e-07, -0.00015686711412854493, -0.00031013446277938783, -0.0005480932886712253, -0.04483933374285698, -0.005466868635267019, -0.0012423424050211906, -1.8960418701171875, -0.012617521919310093, -0.2679131329059601, -0.026982737705111504, -2.2663567066192627, -5.483612312673358e-06, -4.529942543740617e-06, -2.3841830625315197e-06, -0.0253789983689785, 0.0, -4.6491513785440475e-06, -0.004022127948701382, -0.0036762054078280926, -0.0005633435794152319, -0.24451036751270294, -0.010155552998185158, -0.8713690042495728, -0.934921145439148, -3.031826972961426, -0.002727956511080265, -0.010855312459170818, -7.152531907195225e-06, -8.785339014139026e-05, -0.00047886825632303953, -0.005427624564617872, -0.004654407035559416, -0.003368182573467493, -0.3558773994445801, -0.026353394612669945, -0.06128815934062004, -0.027634529396891594, -0.15799672901630402, -7.152555099310121e-07, -1.0728830375228426e-06, -2.145764938177308e-06, -0.0001935771433636546, 0.0, -3.528532761265524e-05, -2.0265373677830212e-05, -0.0005290300468914211, -0.000364713923772797, -0.00024053541710600257, -0.0010968389688059688, -0.0952281579375267, -0.0002213471452705562, -0.00024387246230617166, -0.04551843926310539, -0.08531970530748367, -0.2035963535308838, -0.0006741396500729024, -0.0175150316208601, -5.1616290875244886e-05, -0.4851662814617157, -0.001760719926096499, -0.00017796363681554794, -0.0004731489170808345, -2.0838119983673096, -0.004241281189024448, -0.09984945505857468, -1.3947389561508317e-05, -2.3841830625315197e-06, -0.002971877809613943, -0.04449938237667084, -0.06725920736789703, -0.6611921191215515, -0.00014065706636756659, -0.09631744772195816, -3.4570634852570947e-06, -6.305972783593461e-05, -0.0006026597693562508, -8.22540732769994e-06, -0.00020418466010596603, -0.0006677066558040679, -0.002357443794608116, -0.03132140263915062, -0.11126530915498734, -0.0002933310461230576, -0.0011872155591845512, -0.0005484507419168949, -0.00240430049598217, -1.5497195136049413e-06, -7.152555099310121e-07, -1.0728830375228426e-06, -4.541770613286644e-05, -1.1920928244535389e-07, -4.291525328881107e-06, -0.0004804172203876078, -0.00015448330668732524, -1.3849173784255981, -0.01773558184504509, -0.16695567965507507, -0.2545772194862366, -0.0010520643554627895, -0.0032283354084938765, -0.0281722079962492, -0.005500301718711853, -0.3996483087539673, -0.00208850996568799, -0.0013080621138215065, -4.410734163684538e-06, -0.0019133847672492266, -1.3868826627731323, -0.24136321246623993, -1.311301275563892e-06, -1.1920928244535389e-07, -1.2594983577728271, -0.04972054064273834, -0.30525222420692444, -0.23597656190395355, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0006625840906053782, -5.185469490243122e-05, -0.006456704810261726, -0.12699660658836365, -0.008933929726481438, -0.044096123427152634, -0.7514398694038391, -1.5325031280517578, -0.059944476932287216, -8.11782301752828e-05, -1.036699891090393, -0.4378972053527832, -0.3254675269126892, -0.006179037969559431, -4.9470632802695036e-05, -0.006166124250739813, -1.2993727978027891e-05, -0.42655324935913086, 0.0, -7.497983460780233e-05, -0.00017534149810671806, -0.0009018882992677391, -0.008665340952575207, -0.05909465625882149, -0.0859447494149208, -0.4075087308883667, -0.29801008105278015, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.001256034360267222, -0.0004114258335903287, -4.768370445162873e-07, -4.482168878894299e-05, -8.451581379631534e-05, -0.006947171874344349, -0.0006989181856624782, -0.6118585467338562, -0.0005598884890787303, -0.04489142447710037, -0.0011339908232912421, -0.1128510981798172, -0.005565860774368048, -0.2254626750946045], "finish_reason": "stop"}], "metrics": {"energy": 905.3657566070551, "energy_per_token": 3.7105153959305537, "time": 21.21584, "time_per_token": 0.08695016393442623}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory does not exist: {directory}\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files match pattern: {file_pattern}\")\n\n    sorted_files = natsort.natsorted(files)\n\n    rows = []\n    for filename in sorted_files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        # Extract numeric data using regex pattern\n        numeric_data = re.findall(regex, content)\n        rows.append((filename, numeric_data))\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame(rows, columns=['Filename', 'Numeric Data'])\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " does", " not", " exist", ":", " {", "directory", "}\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " match", " pattern", ":", " {", "file", "_", "pattern", "}\"", ")", "\n", "\n", "    ", "s", "orted", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")", "\n", "\n", "    ", "rows", " =", " []", "\n", "    ", "for", " filename", " in", " sorted", "_", "files", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "        ", "#", " Ext", "ract", " numeric", " data", " using", " regex", " pattern", "\n", "        ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "        ", "rows", ".", "append", "((", "filename", ",", " numeric", "_", "data", "))", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " from", " the", " extracted", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "rows", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -2.9128925800323486, -0.000694153131917119, -0.0029094768688082695, -0.008541124872863293, -0.018359603360295296, -0.00038425691309385, -0.0030658883042633533, -8.21318244561553e-05, -0.00019131260341964662, -0.1089705154299736, -0.00017808281700126827, -0.9951169490814209, -0.018314190208911896, -0.27160513401031494, -5.61460001335945e-05, -0.0017779747722670436, -0.00027509720530360937, -0.03672436997294426, -5.364403477869928e-06, -4.0531076592742465e-06, -2.264974000354414e-06, -0.0002740246127359569, -9.536288416711614e-05, -0.0005540504935197532, -0.00011252723925281316, -0.0017748808022588491, -2.622600959512056e-06, -4.768370445162873e-07, -0.011082286946475506, -0.007255041040480137, -0.22631359100341797, -0.06150912865996361, -0.030604606494307518, -0.0037709809839725494, -0.0005004345439374447, -0.0017847575945779681, -0.00018809456378221512, -0.0017822586232796311, -0.0007630059262737632, 0.0, -0.0015432840446010232, -0.10948202013969421, -0.0006576997111551464, -0.006964218802750111, -0.04440223425626755, -2.995293140411377, -3.040766716003418, -0.3086971044540405, -0.005250830203294754, -0.2023918628692627, -0.00011657988943625242, -1.597391747054644e-05, -0.01106259785592556, -9.262132516596466e-05, -0.00019941726350225508, -0.028223317116498947, -0.000403084559366107, -2.5206990242004395, -0.003442554036155343, -0.0006922471220605075, -0.01720280759036541, -0.0006080209277570248, -0.007028734777122736, -5.960462772236497e-07, -0.0013397298753261566, -8.523101132595912e-05, -0.01642422005534172, 0.0, -9.619726915843785e-05, -0.000500196241773665, -0.0017323975916951895, -0.3670573830604553, -0.023747308179736137, -0.3196295201778412, -0.00024971229140646756, -2.81329345703125, -0.001470794901251793, -0.012810319662094116, -0.003993394784629345, -0.05712153762578964, -0.037044573575258255, -0.7850868105888367, -0.00024184639914892614, -0.0009577454766258597, -9.762764238985255e-05, -1.0371154530730564e-05, -0.0001212284987559542, -0.00021610308613162488, -0.002133119385689497, -0.4059630334377289, -8.165503095369786e-05, -0.00024291902082040906, -0.023446686565876007, -0.05979076400399208, -0.23871609568595886, -0.0005903884884901345, -0.01988675259053707, -0.00012242044613230973, -0.4758385717868805, -0.000598251644987613, -4.732496745418757e-05, -0.000439428084064275, -0.7113151550292969, -0.00015555603022221476, -0.006936280056834221, -1.8000440832111053e-05, -3.814689989667386e-06, -0.0008405489497818053, -0.09727749228477478, -2.7100565433502197, -3.329542636871338, -1.363337516784668, -0.08024343848228455, -0.31599369645118713, -0.028939388692378998, -0.19277575612068176, -1.4607667922973633, -2.653700828552246, -0.07258104532957077, -0.007593694608658552, -0.36789458990097046, -0.0010711177019402385, -0.009620022028684616, -0.0015792291378602386, -0.3908669650554657, -4.792098479811102e-05, -0.00016389934171456844, -4.172316494077677e-06, -0.0007845661020837724, -0.012005689553916454, -0.0003307510633021593, -0.0003364712174516171, -0.008870718069374561, -0.008485926315188408, -0.13627608120441437, -1.3242697715759277, -3.9219088648678735e-05, -0.00015293381875380874, -0.4778997302055359, -0.6478915810585022, -0.0106892641633749, -0.017759239301085472, -7.152555099310121e-07, -3.576278118089249e-07, -0.0036800061352550983, -0.0020068997982889414, -0.01837236061692238, -0.0033053308725357056, -0.7237871885299683, -0.207975834608078, -0.5529288053512573, -0.45941489934921265, -0.0003741279651876539, -1.1601457595825195, -0.18355247378349304, -0.4864844083786011, -0.07884491235017776, -0.008400462567806244, -0.0005367745761759579, -0.16427557170391083, -0.0015439982526004314, -0.0001037067049765028, -3.576272320060525e-06, -3.2186455882765586e-06, -0.0033482227008789778, -0.0008611546363681555, -0.0003796095261350274, -0.00010764019680209458, -0.026516281068325043, -0.003420813474804163, -5.125986263010418e-06, -2.4437606043647975e-05, -3.4570634852570947e-06, -0.0003554189461283386, -0.00043585337698459625, -2.3841830625315197e-06, -0.0007960011716932058, -0.00034421717282384634, -0.0011076750233769417, -0.8599231243133545, -0.0006871246150694788, -0.09704168140888214, -0.0008089845650829375, -0.19563820958137512, -0.005418020766228437, -0.25179532170295715], "finish_reason": "stop"}], "metrics": {"energy": 716.4060095119474, "energy_per_token": 3.4776990753007158, "time": 17.63885, "time_per_token": 0.08562548543689322}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n\n    data = []\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(filename), matches))\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", ".", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")", ",", " matches", "))", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -0.3677122890949249, -0.00023266946664080024, -0.0006180283380672336, -0.1457584798336029, -0.006870810873806477, -0.00015531764074694365, -0.00021169328829273582, -0.07501453161239624, -0.00018916724366135895, -1.1634024381637573, -0.025761760771274567, -0.27222558856010437, -6.460934673668817e-05, -0.001261630211956799, -0.00025996167096309364, -0.031470660120248795, -4.172316494077677e-06, -4.0531076592742465e-06, -3.814689989667386e-06, -0.00017510310863144696, -9.095255518332124e-05, -0.0005312938592396677, -0.00014006110723130405, -0.0015313815092667937, -2.3841830625315197e-06, -2.3841855067985307e-07, -0.009202682413160801, -0.006086030974984169, -0.23984208703041077, -0.06140778586268425, -0.030146315693855286, -0.0036383166443556547, -0.0005393957253545523, -0.0013302058214321733, -0.00016735584358684719, -0.0018904210301116109, -0.001141611486673355, 0.0, -0.003155255224555731, -0.04181092232465744, -0.0008108903421089053, -0.004583448171615601, -0.020456526428461075, -1.1836087703704834, -0.3075414299964905, -0.5982796549797058, -0.002934675430878997, -0.11888455599546432, -0.00042358008795417845, -0.05559217557311058, -0.0001740304142003879, -1.2636104656849056e-05, -0.002378018107265234, -1.3296703100204468, -0.00034397884155623615, -6.353653589030728e-05, -0.00011955977242905647, -0.02928582951426506, -0.00029297350556589663, -1.4016063213348389, -0.07124913483858109, -0.19141001999378204, -0.010257385671138763, -0.14026755094528198, -0.09696941077709198, -1.1533678770065308, -0.00016711745411157608, -0.043208859860897064, -1.1920928244535389e-07, -0.0008108903421089053, -9.858122211880982e-05, -0.043500062078237534, -3.576278118089249e-07, -0.000102037942269817, -0.0001995364436879754, -0.0004930472350679338, -0.05086708441376686, -0.005783609114587307, -0.0020172500517219305, -0.4130534827709198, -0.00011896379146492109, -0.00021646064124070108, -0.025904765352606773, -0.06286313384771347, -0.12548747658729553, -0.0008634176338091493, -0.02517651952803135, -0.00017248096992261708, -0.27861711382865906, -0.0005883631529286504, -8.77341881277971e-05, -0.0003014348621945828, -0.7536720633506775, -0.00013684290752280504, -0.010345757938921452, -2.5748875486897305e-05, -2.50339189733495e-06, -0.0008331642020493746, -0.04284060001373291, -0.140189528465271, -0.9543323516845703, -0.00012003655137959868, -0.013089328072965145, -3.2186455882765586e-06, -0.00011407678539399058, -4.458328112377785e-05, -0.0002727136597968638, -0.004995483905076981, -0.00013517419574782252, -0.00016616393986623734, -0.009838423691689968, -0.004597213119268417, -0.04525471478700638, -0.709953248500824, -0.003000046359375119, -0.0014521064003929496, -0.6602579951286316, -0.39542025327682495, -4.887569048150908e-06, -2.264974000354414e-06, -8.344646857949556e-07, -0.016923654824495316, 0.0, -3.933898824470816e-06, -0.0004292996891308576, -0.000296310376143083, -0.0019576449412852526, -0.10299216210842133, -0.008707884699106216, -0.003200886305421591, -0.02109496109187603, -0.0015648273983970284, -0.9633987545967102, -0.0006636562757194042, -7.033323527139146e-06, -5.8412379075889476e-06, -0.0019687095191329718, -0.0011202972382307053, -0.0018011790234595537, -0.00011717586312443018, -0.026151807978749275, -0.0022324419114738703, -3.6954811548639555e-06, -1.4066597032069694e-05, -4.6491513785440475e-06, -0.0003033416287507862, -0.0005477358354255557, -1.6689286894688848e-06, -0.0004051103023812175, -0.0008772339206188917, -0.13400395214557648, -0.004061901941895485, -0.20636558532714844], "finish_reason": "stop"}], "metrics": {"energy": 637.0978833923339, "energy_per_token": 3.5994230700131857, "time": 15.359632, "time_per_token": 0.08677758192090396}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' in directory '{directory}'\")\n\n    numeric_data = []\n    for file in natsort.natsorted(files):\n        try:\n            with open(file, 'r') as f:\n                data = f.read()\n                matches = re.findall(regex, data)\n                numeric_data.append(list(map(int, matches)))\n        except FileNotFoundError:\n            numeric_data.append([])\n\n    df = pd.DataFrame({'Filename': [os.path.basename(file) for file in files], 'Numeric Data': numeric_data})\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " in", " directory", " '", "{", "directory", "}'", "\"", ")", "\n", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " f", ".", "read", "()", "\n", "                ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " data", ")", "\n", "                ", "numeric", "_", "data", ".", "append", "(", "list", "(", "map", "(", "int", ",", " matches", ")))", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "numeric", "_", "data", ".", "append", "([]", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " [", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", " for", " file", " in", " files", "]", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "})", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -0.1338587999343872, -0.04860265925526619, -0.362557053565979, -0.4699718952178955, -7.998623186722398e-05, -0.00038818930624984205, -0.0008207766804844141, -0.47714242339134216, -0.00020430385484360158, -0.00062851223628968, -1.9198269844055176, -0.00013374387344811112, -0.0008648469229228795, -0.14954873919487, -0.00022873646230436862, -0.9794592261314392, -0.015655353665351868, -0.23557822406291962, -9.262132516596466e-05, -0.0019246878800913692, -0.00033790123416110873, -0.031508203595876694, -6.6756979322235566e-06, -6.556489552167477e-06, -4.887569048150908e-06, -0.00019202772818971425, -0.0001497156627010554, -0.000780754373408854, -0.00016473367577418685, -0.002612394280731678, -2.50339189733495e-06, -2.3841855067985307e-07, -0.008143790997564793, -0.00587996281683445, -0.18459779024124146, -0.05606476590037346, -0.03237231820821762, -0.005446238908916712, -0.00046564225340262055, -0.001979774096980691, -0.0001967951684491709, -0.0024215441662818193, -0.0013341344892978668, 0.0, -0.004758818540722132, -0.038629382848739624, -0.0015216212486848235, -0.009900039993226528, -0.030824368819594383, -0.43072614073753357, -0.3474245071411133, -0.022045200690627098, -0.0001935771433636546, -0.018473945558071136, -0.0003703146940097213, -2.3245540432981215e-05, -0.0022087718825787306, -1.6523007154464722, -0.014904806390404701, -0.018903225660324097, -6.90197994117625e-05, -0.0004068977141287178, -0.0030920335557311773, -0.009325044229626656, -6.0794889577664435e-05, -0.00010477947944309562, -0.03213188797235489, -0.00033790123416110873, -2.391818046569824, -0.0009715604246594012, -0.03544781357049942, -0.11392870545387268, -0.30330145359039307, -0.011350817047059536, -0.1049390435218811, -0.33237332105636597, -0.3404742181301117, -0.06430016458034515, -0.20665688812732697, -1.1920928244535389e-07, -0.0004020121123176068, -8.391981828026474e-05, -0.03666001930832863, -5.960462772236497e-07, -0.00018821375851985067, -0.0002162222663173452, -0.0003641180810518563, -0.06510111689567566, -0.0037010284140706062, -0.0011728082317858934, -2.9676342010498047, -3.576214658096433e-05, -0.0005720409681089222, -0.00032848684350028634, -0.026103844866156578, -6.758938252460212e-05, -0.0001370812824461609, -0.009009069763123989, -0.11778536438941956, -0.10672090947628021, -0.0007824220228940248, -0.03281540423631668, -0.00036113892565481365, -0.01965954713523388, -0.02050662972033024, -0.0011027929140254855, -0.00024530262453481555, -1.2526650428771973, -0.008109264075756073, -0.8679854273796082, -0.00012158608296886086, -3.576272320060525e-06, -0.002033667638897896, -0.21487630903720856, -0.05465862527489662, -0.9410629868507385, -0.00017808281700126827, -0.022284572944045067, -2.622600959512056e-06, -0.00024148885859176517, -6.782778655178845e-05, -0.00026246439665555954, -0.006362539250403643, -0.00016842853801790625, -0.00030894274823367596, -0.004580956418067217, -0.005016359966248274, -0.020062964409589767, -0.10699880123138428, -0.0046497792936861515, -0.006016003433614969, -0.007372434716671705, -0.14234718680381775, -0.4724472165107727, -1.6640751361846924, -0.00018225439998786896, -0.0007307243067771196, -1.8596476365928538e-05, -0.020992474630475044, -7.080780778778717e-05, -0.002293339231982827, -0.014322105795145035, -0.11210594326257706, -0.008405309170484543, -0.00022027450904715806, -0.6999920606613159, -0.0002083561266772449, -4.0531076592742465e-06, -0.24719201028347015, -0.003202312160283327, -0.0016299308044835925, -0.2515665888786316, -7.510157047363464e-06, -5.364403477869928e-06, -0.00017307691450696439, -0.00010287232726113871, -0.01505606435239315, -1.7404405298293568e-05, -0.01599011942744255, -0.13424277305603027, -0.002381704980507493, -0.277109831571579, -0.0020328350365161896, -0.0003195490571670234, -2.50339189733495e-06, -0.00015269544383045286, -0.030387340113520622, -0.06280828267335892, -0.0017294225981459022, -2.90866428258596e-05, -0.0008823553798720241, -1.1127077341079712, -0.013621006160974503, -1.1920922133867862e-06, -3.504691630951129e-05, -3.6954811548639555e-06, -0.041071292012929916, -7.152555099310121e-07, -0.00012027494085486978, -0.4722786247730255, -0.0010926711838692427, -0.0013761583250015974, -6.627816765103489e-05, -0.0001411338453181088, -0.018703293055295944, -0.001081715920008719, -0.0006378046819008887, -0.7599092125892639, -0.0005731132114306092, -3.3378546504536644e-06, -0.00031871485407464206, -8.475421054754406e-05, -0.002748642349615693, -2.3841855067985307e-07, -5.960462772236497e-07, -0.0020231986418366432, -0.0015950588276609778, -0.12260377407073975, -0.032440293580293655, -0.0006642519147135317, -0.1946811079978943, -0.005703129339963198, -0.20721429586410522], "finish_reason": "stop"}], "metrics": {"energy": 755.600040439606, "energy_per_token": 3.41900470787152, "time": 18.708908, "time_per_token": 0.0846556923076923}}
{"outputs": [{"text": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    # Use glob to get a list of text files matching the pattern\n    txt_files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are any matching files\n    if not txt_files:\n        raise ValueError(f\"No files matching the pattern found in {directory}\")\n\n    # Sort the files alphabetically or naturally using natsort\n    sorted_files = natsort.natsorted(txt_files)\n\n    # Initialize an empty list to store the extracted numeric data\n    numeric_data_list = []\n\n    # Extract numeric data using regular expression from each file\n    for filename in sorted_files:\n        with open(filename, 'r') as file:\n            content = file.read()\n            # Use the provided regular expression to find all matching patterns in the file content\n            matches = re.findall(regex, content)\n            numeric_data_list.append(matches)", "tokens": ["#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "}\"", ")", "\n", "\n", "    ", "#", " Use", " glob", " to", " get", " a", " list", " of", " text", " files", " matching", " the", " pattern", "\n", "    ", "txt", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " any", " matching", " files", "\n", "    ", "if", " not", " t", "xt", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " found", " in", " {", "directory", "}\"", ")", "\n", "\n", "    ", "#", " Sort", " the", " files", " alphabet", "ically", " or", " naturally", " using", " n", "ats", "ort", "\n", "    ", "s", "orted", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "txt", "_", "files", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " extracted", " numeric", " data", "\n", "    ", "numeric", "_", "data", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " using", " regular", " expression", " from", " each", " file", "\n", "    ", "for", " filename", " in", " sorted", "_", "files", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "#", " Use", " the", " provided", " regular", " expression", " to", " find", " all", " matching", " patterns", " in", " the", " file", " content", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "numeric", "_", "data", "_", "list", ".", "append", "(", "matches", ")"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -1.3644325733184814, -0.002084465464577079, -0.0109320767223835, -0.06271491199731827, -0.0004406196530908346, -0.00451426487416029, -0.0026779049076139927, -0.0016830102540552616, -3.099436753473128e-06, -0.0005920564290136099, -2.288792165927589e-05, -0.2101762741804123, -0.00026901919045485556, -0.0008001701789908111, -0.0019221893744543195, -0.00038961926475167274, -0.0010840974282473326, -0.007824248634278774, -0.0018736441852524877, -4.637133679352701e-05, -5.245195097813848e-06, -0.018989434465765953, -0.21464481949806213, -0.03258996084332466, -0.17471881210803986, -1.6083468198776245, -0.0005947966128587723, -0.003427941584959626, -0.004969506990164518, -0.0002971446083392948, -0.0028597908094525337, -6.4490144723095e-05, -0.00010954733443213627, -0.02107616886496544, -0.00024971229140646756, -0.030449438840150833, -2.4170279502868652, -0.12576839327812195, -0.05327141657471657, -1.8986060619354248, -0.524124801158905, -0.07397949695587158, -3.528532761265524e-05, -1.468018889427185, -0.015351117588579655, -0.23034356534481049, -0.001529477071017027, -0.04603030905127525, -0.12041858583688736, -7.390703103737906e-05, -3.0240249633789062, -0.0009241600637324154, -0.016220271587371826, -0.0013566347770392895, -0.046762071549892426, -3.0517112463712692e-05, -0.001334848813712597, -0.00020168177434243262, -0.02705247327685356, -2.622600959512056e-06, -2.145764938177308e-06, -5.364403477869928e-06, -0.00014840454969089478, -9.798523387871683e-05, -0.0003518439189065248, -0.0001137191939051263, -0.00295452494174242, -1.5497195136049413e-06, -1.5497195136049413e-06, -0.018252037465572357, -0.0010387268848717213, -0.08720666170120239, -9.190614218823612e-05, -0.02132849209010601, -0.47222763299942017, -0.007372198160737753, -0.19007927179336548, -0.005273123737424612, -0.24591468274593353, -0.2234758585691452, -0.4497569501399994, -0.01927046664059162, -2.5510462364763953e-05, -0.00047362555051222444, -0.02872222289443016, -0.0010191967012360692, 0.0, -1.1920928244535389e-07, -5.960462772236497e-07, -0.00033241944038309157, -0.00017510310863144696, -0.00015579440514557064, -0.002273238729685545, -0.0006948678637854755, 0.0, -0.0020698329899460077, -0.12449930608272552, -0.0005469018360599875, -0.00261869584210217, -0.17099760472774506, -0.43288353085517883, -0.21145787835121155, -0.002195806708186865, -0.16583731770515442, -0.26625770330429077, -0.5317097902297974, -0.00035529976594261825, -0.09041662514209747, -5.030505417380482e-05, -4.184158387943171e-05, -0.006098946090787649, -0.0002899941464420408, -0.04745772108435631, -1.362439513206482, -0.08363917469978333, -1.933824062347412, -2.98250675201416, -2.1576648578047752e-05, -1.738954782485962, -1.0045032501220703, -1.6347644329071045, -0.06979416310787201, -3.325883881188929e-05, -0.05229462683200836, -0.09595058113336563, -0.0010397987207397819, -0.7877612113952637, -4.541770613286644e-05, -5.030505417380482e-05, -0.7166767120361328, -0.0002747396647464484, -0.00808738823980093, -4.768370445162873e-07, -3.8980677345534787e-05, -9.381330892210826e-05, -0.006958418060094118, -1.1920928244535389e-07, -0.0002812943421304226, -0.000346362212439999, -0.00045694399159401655, 0.0, 0.0, -0.1507345736026764, -0.005696491803973913, -0.012135245837271214, -0.00016139635408762842, -0.11253371834754944, -0.6069610118865967, -0.5393480658531189, -0.0006000387365929782, -0.3604472279548645, -0.038571808487176895, -0.06292403489351273, -0.2706599831581116, -0.7564959526062012, -0.38270774483680725, -0.005435568280518055, -0.5706884860992432, -0.00017069313616957515, -0.32690802216529846, -0.00013529339048545808, -0.009998594410717487, -1.484207034111023, -0.04608871042728424, -0.00018535325943958014, -0.0011525661684572697, -0.0005353448214009404, -0.035025693476200104, -6.937739817658439e-05, -0.05700511112809181, -2.4247307777404785, -0.0010605193674564362, -0.095476433634758, -0.0025433117989450693, -2.886909008026123, -1.048722743988037, -0.9586742520332336, -0.6967141032218933, -0.029399391263723373, -0.37487852573394775, -0.06733901053667068, -0.00030524839530698955, -0.0114773940294981, -1.6562622785568237, -9.989239333663136e-05, -0.0029454915784299374, -2.0146166207268834e-05, -1.5497195136049413e-06, -3.862306402879767e-05, -5.972207145532593e-05, -0.002815570682287216, -0.1622888296842575, -2.7656173188006505e-05, -0.00026663561584427953, -0.016033291816711426, -0.03239147737622261, -0.27538105845451355, -0.00045694399159401655, -0.04197748377919197, -2.777537883957848e-05, -0.04610760882496834, -0.00023648326168768108, -0.0005789510905742645, -0.0003618539194576442, -0.6426256895065308, -8.201262971851975e-05, -0.0031802100129425526, -1.2993727978027891e-05, -3.4570634852570947e-06, -0.001329015358351171, -0.019871678203344345, -0.03903898224234581, -1.248741626739502, -0.40036723017692566, -1.5391530990600586, -0.8960496783256531, -0.13999129831790924, -0.00025138078490272164, -0.04487729072570801, -1.5994997024536133, -0.7183443903923035, -3.215416669845581, -0.9279730916023254, -1.0822937488555908, -0.006771474611014128, -0.5113082528114319, -0.22360016405582428, -0.007192906457930803, -0.0003743662964552641, -1.9313513040542603, -0.0001565095444675535, -0.0017322786152362823, -3.814689989667386e-06, -3.6000557884108275e-05, -5.2927523938706145e-05, -0.00017891713650897145, -0.0031418269500136375, -0.00020692592079285532, -0.00010001159535022452, -0.011999917216598988, -0.0012966329231858253, -0.15735475718975067, -0.9902549386024475, -0.00012110930401831865, -0.0018868515035137534, -0.4432123899459839, -0.0007979070069268346, -0.0011148196645081043, -0.0643610879778862, -0.10266818851232529, -0.09294521808624268, -0.009289494715631008], "finish_reason": "length"}], "metrics": {"energy": 879.9096041011809, "energy_per_token": 3.437146891020238, "time": 21.862654, "time_per_token": 0.0854009921875}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Find all matching files in the directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No matching files found.\")\n\n    # Sort the files by their numeric components in ascending order\n    sorted_files = natsort.natsorted(files, alg=natsort.ns.INT)\n\n    # Extract the numeric data from each file\n    numeric_data = []\n    for file in sorted_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            numeric_data.append([int(match) for match in matches])\n\n    # Create the DataFrame\n    df = pd.DataFrame({'Filename': sorted_files, 'Numeric Data': numeric_data})\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " matching", " files", " in", " the", " directory", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " matching", " files", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Sort", " the", " files", " by", " their", " numeric", " components", " in", " ascending", " order", "\n", "    ", "s", "orted", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ",", " al", "g", "=", "n", "ats", "ort", ".", "ns", ".", "INT", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " numeric", " data", " from", " each", " file", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " sorted", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "numeric", "_", "data", ".", "append", "([", "int", "(", "match", ")", " for", " match", " in", " matches", "])", "\n", "\n", "    ", "#", " Create", " the", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " sorted", "_", "files", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -2.19173526763916, -0.4077233076095581, -0.9468767046928406, -0.0003415954706724733, -0.0008538890979252756, -0.8261426687240601, -0.009609159082174301, -0.0006521005416288972, -0.0005732323625124991, -0.1515885889530182, -0.00022063204960431904, -2.0253729820251465, -1.578952670097351, -0.2721824645996094, -2.1023988723754883, -1.0227363109588623, -0.5335547924041748, -0.015637045726180077, -0.20019957423210144, -0.1309695839881897, -0.0002557904226705432, -0.5434539318084717, -0.011355060152709484, -0.16301190853118896, -8.987976616481319e-05, -0.0011147005716338754, -0.00033802041434682906, -0.024937722831964493, -2.50339189733495e-06, -2.861018856492592e-06, -2.3841830625315197e-06, -0.00012742661056108773, -7.378782902378589e-05, -0.0006276782951317728, -0.0001299296854995191, -0.0013881819322705269, -3.2186455882765586e-06, -1.2040065485052764e-05, -0.004118532873690128, -0.002058888552710414, -0.7046926617622375, -0.06718821078538895, -0.030048338696360588, -0.0016561138909310102, -0.00031013446277938783, -0.0038758409209549427, -0.0002232540718978271, -0.001972635742276907, -0.0007717015105299652, 0.0, -0.002133595058694482, -0.09467776119709015, -0.0016044613439589739, -1.6461373567581177, -0.013814197853207588, -0.013805967755615711, -0.1390373855829239, -0.0006679449579678476, -9.703165414975956e-05, -0.00012861855793744326, -0.020379554480314255, -0.0005250982358120382, -0.2069365531206131, -1.0857758522033691, -0.6768331527709961, -0.3051424026489258, -3.492151975631714, -1.746739387512207, -2.493302822113037, -4.1120991706848145, -2.8084094524383545, -0.3385312259197235, -0.0018917298875749111, -0.027676042169332504, -0.0002671123365871608, -0.9948593974113464, -8.821098163025454e-05, -5.9602869441732764e-05, -0.002314747544005513, -0.0004258441040292382, -0.008147220127284527, -3.576278118089249e-07, -0.00048744716332294047, -8.618460560683161e-05, -0.008369372226297855, -1.1920928244535389e-07, -9.262132516596466e-05, -0.0004312062228564173, -0.0047920383512973785, -0.16477562487125397, -1.1043130159378052, -0.0011219641892239451, -0.00045122456504032016, -0.00019631843315437436, -2.264974000354414e-06, -5.960462772236497e-07, -5.602820692729438e-06, -0.007268414366990328, -0.0008287570672109723, -1.156301736831665, -0.04004688933491707, -0.0019110051216557622, -0.013762111775577068, -0.000163541772053577, -0.36357706785202026, -0.6626439094543457, -0.0023993058130145073, -2.8750596046447754, -0.09578573703765869, -0.04837121069431305, -0.15353994071483612, -0.03350168094038963, -0.016948619857430458, -0.4241578280925751, -0.00033087024348787963, -1.5408871173858643, -0.00017045476124621928, -0.010229420848190784, -0.0701294019818306, -0.1316438764333725, -0.005702181253582239, -0.02936825342476368, -0.07891608029603958, -0.2621074318885803, -0.07437044382095337, -0.0016130305593833327, -6.6756979322235566e-06, -1.1920928244535389e-07, -7.974783511599526e-05, -4.60137271147687e-05, -0.0011957883834838867, -0.18674984574317932, -3.540453326422721e-05, -0.00014280252798926085, -0.007082830648869276, -0.07272150367498398, -0.1970573216676712, -0.0007360848248936236, -0.018192922696471214, -5.519237674889155e-05, -0.007990182377398014, -0.006838489323854446, -0.00019798702851403505, -0.0003369478799868375, -1.091094970703125, -0.00010179955279454589, -0.00794950034469366, -1.823885577323381e-05, -3.576272320060525e-06, -0.0013778250431641936, -0.05970418453216553, -0.04737745597958565, -1.0066587924957275, -0.0001454247540095821, -0.009779401123523712, -2.7418097943154862e-06, -0.00011419598013162613, -5.2689116273541003e-05, -0.0003357561945449561, -0.0038210966158658266, -0.00011431517486926168, -0.00017438798386137933, -0.008749717846512794, -0.005459636449813843, -0.02012956328690052, -0.09565173089504242, -0.0025075203739106655, -0.008429423905909061, -0.007463310845196247, -0.08463173359632492, -0.629845380783081, -0.009425899013876915, -0.00024148885859176517, -0.1763371080160141, -0.0018261675722897053, -0.0036877263337373734, -4.768360213347478e-06, -6.079655122448457e-06, -0.0006113567505963147, -0.0042408062145113945, -0.01127208024263382, -0.011611850932240486, -0.002005591057240963, -0.025025390088558197, -0.10876502841711044, -1.1028109788894653, -0.47996315360069275, -0.00023898606013972312, -0.164598286151886, -0.00024482590379193425, -0.17395536601543427, -0.0019613332115113735, -0.0002097863471135497, -1.4305104514278355e-06, -8.487341256113723e-05, -0.027719177305698395, -0.13140922784805298, -0.0009114163694903255, -4.875540980719961e-05, -0.0003541081096045673, -0.1100207045674324, -0.00041547726141288877, -2.992108420585282e-05, -0.0015101945027709007, -0.027241462841629982, -0.0006735440110787749, -1.4305104514278355e-06, -0.0005601267330348492, -4.51792984677013e-05, -0.0015592334093526006, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.001765717868693173, -0.0017288275994360447, -0.9814249277114868, -0.0006971312686800957, -0.1009286493062973, -0.0006443570018745959, -0.1358184814453125, -0.0058569712564349174, -1.971899390220642], "finish_reason": "stop"}], "metrics": {"energy": 882.8990115976335, "energy_per_token": 3.694138123839471, "time": 21.01312, "time_per_token": 0.08792100418410043}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    files = natsort.natsorted(text_files, key=lambda f: os.path.basename(f))\n\n    data = {'Filename': [], 'Numeric Data': []}\n\n    for file in files:\n        numeric_data = []\n        with open(file, 'r') as f:\n            for line in f:\n                match = re.findall(regex, line)\n                if match:\n                    numeric_data.extend(match)\n\n        data['Filename'].append(os.path.basename(file))\n        data['Numeric Data'].append(numeric_data)\n\n    df = pd.DataFrame(data)\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "text", "_", "files", ",", " key", "=", "lambda", " f", ":", " os", ".", "path", ".", "bas", "ename", "(", "f", "))", "\n", "\n", "    ", "data", " =", " {'", "Fil", "ename", "':", " []", ",", " '", "N", "umeric", " Data", "':", " []", "}", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "numeric", "_", "data", " =", " []", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "for", " line", " in", " f", ":", "\n", "                ", "match", " =", " re", ".", "find", "all", "(", "regex", ",", " line", ")", "\n", "                ", "if", " match", ":", "\n", "                ", "    ", "numeric", "_", "data", ".", "extend", "(", "match", ")", "\n", "\n", "        ", "data", "['", "Fil", "ename", "']", ".", "append", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", "\n", "        ", "data", "['", "N", "umeric", " Data", "']", ".", "append", "(", "numeric", "_", "data", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -1.204134225845337, -0.0001528146385680884, -0.11706306785345078, -0.01795889250934124, -0.0001227780303452164, -0.00030071981018409133, -0.09780711680650711, -0.00018773700867313892, -1.9480730295181274, -0.00488564046099782, -0.008126291446387768, -0.0024412849452346563, -0.2709115743637085, -5.864924969500862e-05, -0.0009573881980031729, -0.0002184867626056075, -0.02184869349002838, -2.622600959512056e-06, -2.264974000354414e-06, -2.0265558760002023e-06, -0.0001591317413840443, -8.272782724816352e-05, -0.00046790618216618896, -9.047575440490618e-05, -0.0019583588000386953, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.011113528162240982, -0.007925018668174744, -0.38803112506866455, -0.09577793627977371, -0.01723303832113743, -0.001517812255769968, 0.0, -1.9073468138230965e-06, -0.0002644904307089746, -0.0010942192748188972, -0.00016223068814724684, -0.002212102524936199, -0.0009982370538637042, 0.0, -0.004112596623599529, -0.06021052971482277, -0.0005777596961706877, -0.0018477048724889755, -0.09514687210321426, -0.2912406921386719, -0.658642053604126, -0.009118461050093174, -0.00014768941036891192, -0.01793547533452511, -6.353653589030728e-05, -5.960446742392378e-06, -0.001065282616764307, -0.07504494488239288, -0.1427171528339386, -0.10126999020576477, -0.019921811297535896, -2.658331868587993e-05, -0.0003238391946069896, -0.001462224405258894, -0.03725270554423332, -0.00028165188268758357, -6.174850568640977e-05, -0.00018165845540352166, -0.026535551995038986, -0.00032014489988796413, -4.076791763305664, -0.7691537141799927, -0.20352672040462494, -3.576278118089249e-07, -0.008690040558576584, -0.0001289761275984347, -0.03630876541137695, -1.1920928244535389e-07, -0.0002609150833450258, -0.010617670603096485, -0.006282935384660959, -1.1920928244535389e-07, 0.0, -1.4316221475601196, -1.6179053783416748, -0.002188907703384757, -1.3607856035232544, -1.1265674829483032, -0.04084427282214165, -0.015267882496118546, -1.0847986231965479e-05, -0.00010096516780322418, -1.9073468138230965e-06, -0.12815998494625092, -4.768370445162873e-07, -5.638440416078083e-05, -0.0012241258518770337, -0.030791426077485085, -0.035457365214824677, -0.36475804448127747, -0.00022396916756406426, -0.6729578971862793, -0.0702429786324501, -2.601374864578247, -0.0011526852613314986, -4.1960789531003684e-05, -0.000653530121780932, -0.02442982979118824, -0.0007441850611940026, -0.01675954833626747, -0.001492816023528576, -1.311301275563892e-06, -0.0005497612874023616, -9.667406266089529e-05, -0.0003343261778354645, -0.0018091516103595495, -0.015201547183096409, -0.4112071096897125, -5.817244164063595e-05, -0.02897922694683075, -0.1831732839345932, -0.03506310284137726, -0.0014143711887300014, -5.8530047681415454e-05, -0.00013565097469836473, -0.0012734169140458107, -3.223768949508667, -0.0016625404823571444, -0.05445939302444458, -0.007603750564157963, -0.13261665403842926, -0.002800949150696397, -0.20096266269683838, -0.10854645073413849, -5.9602869441732764e-05, -0.0002795067266561091, -0.010496646165847778, -0.02691984362900257, -0.023967184126377106, -0.0006800960982218385, -0.041786227375268936, -4.1960789531003684e-05, -0.03571850806474686, -0.012365227565169334, -0.0004077318590134382, -0.0004558716027531773, -0.9823035597801208, -0.008547980338335037, -0.00037496211007237434, -0.00022968991834204644, -0.027497107163071632, -0.0005955114611424506, -0.0003195490571670234, -0.9623696208000183, -0.0023415072355419397, -0.001423299196176231, -5.125986263010418e-06, -1.264786958694458, -0.00023493390472140163, -0.00018940561858471483, -0.004704359918832779, -0.00021169328829273582, -0.0005496421363204718, -0.041572749614715576, -0.00316404877230525, -0.004447093699127436, -0.49675774574279785, -0.002552943304181099, -0.00889045000076294, -0.0014394884929060936, -6.854299135738984e-05, -0.00024184639914892614, -0.0628608986735344, -0.0012350797187536955, -0.002093149581924081, -0.11599510163068771, -0.14223623275756836, -0.33244189620018005, -0.8440958261489868, -0.0014776989119127393, -0.007316580042243004, -1.0787757635116577, -0.01046727318316698, -0.13879835605621338, -0.00031740395934320986, -0.0009808497270569205, 0.0, -4.768360213347478e-06, -0.0003060825983993709, -0.00038223114097490907, -6.842378934379667e-05, -0.034955017268657684, -5.483612312673358e-06, -7.152555099310121e-07, -1.1920928244535389e-07, -0.01450212113559246, 0.0, -3.3378546504536644e-06, -0.00013433984713628888, -0.0011866202112287283, -0.0004204819560982287, -0.0009766814764589071, -0.0015525680501013994, -1.4066597032069694e-05, -4.172316494077677e-06, -1.5497195136049413e-06, -2.098061486321967e-05, -2.264974000354414e-06, -2.0265373677830212e-05, -6.651657167822123e-05, -0.0018161722691729665, -0.002910071052610874, -3.576278118089249e-07, -1.4305104514278355e-06, -0.005646351259201765, -0.0005772831500507891, -0.0021107555367052555, -0.001215077005326748, -0.6890283226966858, -0.0007977878558449447, -0.00022456508304458112, -4.887569048150908e-06, -0.00012385078298393637, -0.008762598969042301, -0.00018320789968129247, -0.011690442450344563, -0.0031276855152100325, -0.21490535140037537, -0.06999869644641876, -0.0006310140597634017, -0.09550265222787857, -0.006082831881940365, -2.463355541229248], "finish_reason": "stop"}], "metrics": {"energy": 910.4172138824465, "energy_per_token": 3.584319739694671, "time": 22.48983, "time_per_token": 0.08854263779527559}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in directory '{directory}'.\")\n\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n            numbers = re.findall(regex, content)\n            data.append([filename, numbers])\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "numbers", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "([", "filename", ",", " numbers", "])", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "#"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -0.3677122890949249, -0.00023266946664080024, -0.0006180283380672336, -0.1457584798336029, -0.006870810873806477, -0.00015531764074694365, -0.00021169328829273582, -0.07501453161239624, -0.00018916724366135895, -1.1634024381637573, -0.025761760771274567, -1.6489574909210205, 0.0, -0.001965021248906851, -4.3748852476710454e-05, -0.015283849090337753, -5.960462772236497e-07, -0.0007901645149104297, -0.00717503484338522, -0.035316526889801025, -2.992108420585282e-05, -0.004086596891283989, -0.00029118589009158313, -0.023598406463861465, -2.264974000354414e-06, -3.2186455882765586e-06, -4.172316494077677e-06, -0.00016282663273159415, -6.01988795096986e-05, -0.0004231034545227885, -0.0003182381624355912, -0.0014617482665926218, -3.933898824470816e-06, -1.5497195136049413e-06, -0.1997510939836502, -0.0038156339433044195, -0.7627205848693848, -0.017604757100343704, -0.03491276875138283, -0.0025440254248678684, -0.0002454218047205359, -0.0009224927052855492, -0.00020037073409184813, -0.001556019764393568, -0.0008297099848277867, 0.0, -0.0038340408354997635, -0.04531851410865784, -0.0005953923100605607, -0.0030425945296883583, -0.022610366344451904, -1.625848412513733, -0.2701431214809418, -0.3662557303905487, -0.003993632271885872, -0.10496609658002853, -0.0011332763824611902, -0.0983443483710289, -9.500529267825186e-05, -1.2040065485052764e-05, -0.0025076393503695726, -0.28834840655326843, -0.22622498869895935, -0.008335916325449944, -2.9205850296420977e-05, -0.0005410637822933495, -0.0012134101707488298, -0.054017554968595505, -0.0004748170613311231, -9.250213042832911e-05, -0.00014220656885299832, -0.01837598904967308, -0.00031704644788987935, -0.5195891857147217, -0.05659008026123047, -0.17415928840637207, -0.00766869867220521, -0.08120595663785934, -0.05462216958403587, -1.1350877285003662, -0.00011264643399044871, -0.005536816082894802, -2.2649508537142538e-05, -0.0001776060671545565, -0.0011716175358742476, -0.34576648473739624, -9.941560711013153e-05, -0.00017975145601667464, -0.03180329129099846, -0.057141803205013275, -0.13731534779071808, -0.0004967409186065197, -0.023864060640335083, -9.07141511561349e-05, -0.20548015832901, -0.0005245024804025888, -9.357491217087954e-05, -0.0003948624071199447, -0.6713372468948364, -0.00015567521040793508, -0.008720175363123417, -1.8715683836489916e-05, -4.0531076592742465e-06, -0.0005865760613232851, -0.049867983907461166, -0.10933968424797058, -1.5719116926193237, -0.003989239223301411, -0.3018052875995636, -1.7404405298293568e-05, -0.0001463782973587513, -5.125986263010418e-06, -0.0002953569928649813, -0.0064459266141057014, -0.0001559135998832062, -0.00020215852418914437, -0.0059683676809072495, -0.014420107938349247, -0.05302329361438751, -0.2607179582118988, -0.0009969270322471857, -0.0005302215577103198, -1.4824612140655518, -0.6406588554382324, -0.05199047178030014, -0.019033178687095642, -0.004482103977352381, -0.0008860476082190871, -0.01986653544008732, -0.001260677701793611, -1.500478982925415, -0.0006849803612567484, -8.106198947643861e-06, -5.602820692729438e-06, -0.0007964776013977826, -0.0007720588473603129, -0.001613506581634283, -8.77341881277971e-05, -0.011518404819071293, -0.0015717307105660439, -1.6689286894688848e-06, -1.0847986231965479e-05, -6.079655122448457e-06, -0.0003270567976869643, -0.0006474544061347842, -1.9073468138230965e-06, -0.0004843492351938039, -0.0006712805479764938, -0.12394803762435913, -0.004298732616007328, -2.6457808017730713], "finish_reason": "stop"}], "metrics": {"energy": 626.0712780237196, "energy_per_token": 3.577550160135541, "time": 15.116313, "time_per_token": 0.08637893142857143}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    pattern = os.path.join(directory, file_pattern)\n    file_names = natsort.natsorted(glob.glob(pattern), alg=natsort.ns.PATH)\n    if not file_names:\n        raise ValueError(f\"No files found matching pattern '{pattern}'.\")\n\n    data = []\n    for file_name in file_names:\n        with open(file_name, 'r') as f:\n            contents = f.read()\n        matches = re.findall(regex, contents)\n        if matches:\n            numeric_data = [int(match) for match in matches]\n        else:\n            numeric_data = []\n        data.append([os.path.basename(file_name), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "    ", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")", "\n", "    ", "file", "_", "names", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "pattern", ")", ",", " al", "g", "=", "n", "ats", "ort", ".", "ns", ".", "PATH", ")", "\n", "    ", "if", " not", " file", "_", "names", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " pattern", " '", "{", "pattern", "}'", ".", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "        ", "with", " open", "(", "file", "_", "name", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "contents", " =", " f", ".", "read", "()", "\n", "        ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " contents", ")", "\n", "        ", "if", " matches", ":", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "match", ")", " for", " match", " in", " matches", "]", "\n", "        ", "else", ":", "\n", "            ", "numeric", "_", "data", " =", " []", "\n", "        ", "data", ".", "append", "([", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "name", ")", ",", " numeric", "_", "data", "])", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -0.1338587999343872, -0.04860265925526619, -0.362557053565979, -0.4699718952178955, -7.998623186722398e-05, -0.00038818930624984205, -0.0008207766804844141, -0.993240475654602, -0.00010561384988250211, -0.1220763623714447, -0.01740304008126259, -0.00012599628826137632, -0.0005228344234637916, -2.1829349994659424, -3.244079828262329, -0.036782972514629364, -0.04888196289539337, -3.6954811548639555e-06, -3.862306402879767e-05, -5.006777428206988e-06, -0.003494230331853032, -0.0002735478919930756, -0.003232850693166256, -0.00024005869636312127, -0.0020035686902701855, -3.576272320060525e-06, -5.793403761344962e-05, -0.00019000156316906214, -0.0062000080943107605, -0.028747590258717537, -2.1045498847961426, -0.06325744837522507, -2.302692174911499, -0.0015279296785593033, -0.4017382860183716, -1.1920928244535389e-07, -0.0009142747730948031, -5.209310256759636e-05, -0.01139866840094328, -3.576278118089249e-07, -0.0004650464979931712, -0.02140083909034729, -0.011664285324513912, -9.059865078597795e-06, -0.00516805425286293, -4.1126360883936286e-05, -0.00048268112004734576, -1.808127522468567, -0.0009934734553098679, -1.1548168659210205, -0.009352562017738819, -0.0004256058018654585, -0.0007769426447339356, -5.602820692729438e-06, -1.4305104514278355e-06, -1.3828182090946939e-05, -0.5231842398643494, -7.73638384998776e-05, -1.0293247699737549, -0.07279321551322937, -0.0211445651948452, -0.17831529676914215, -0.017162615433335304, -0.03585825487971306, -0.004698308650404215, -4.768370445162873e-07, -8.702239938429557e-06, -0.0005527398898266256, -0.0011410161387175322, -0.0003469580551609397, -0.001498291501775384, -0.0011019593803212047, 0.0, -0.004531709477305412, -0.05321444943547249, -0.0027484046295285225, -0.010432353243231773, -0.0531979463994503, -1.1666717529296875, -0.2164224088191986, -0.921978771686554, -0.1526350975036621, -5.745722592109814e-05, -0.119014210999012, -0.001001571537926793, -0.24129718542099, -0.00043466180795803666, -7.73638384998776e-05, -0.00023195437097456306, -1.1426522731781006, -0.0003580405900720507, -0.9246691465377808, -0.09665874391794205, -0.21940915286540985, -0.006838844623416662, -0.04330920800566673, -0.08743061125278473, -0.1917864829301834, -0.20197387039661407, -0.03969373553991318, -0.00014888131408952177, -0.002038188511505723, -8.344646857949556e-07, -0.00014065706636756659, -9.297892393078655e-05, -0.0001679517881711945, -0.0017402517842128873, -0.39816373586654663, -0.0001262346631847322, -0.00026353701832704246, -0.0046729170717298985, -4.0531076592742465e-06, -1.5616295058862306e-05, -0.07917504012584686, -0.09608238190412521, -0.001681939116679132, -0.0258235651999712, -0.00011920218821614981, -0.7784643173217773, -0.014936516061425209, -0.0005404680268839002, -0.0005429700831882656, -2.8275723457336426, -0.000120751719805412, -0.011173533275723457, -1.7762025890988298e-05, -2.264974000354414e-06, -0.0015389991458505392, -0.050696443766355515, -1.6191761493682861, -1.1120781898498535, -0.00023588736075907946, -0.027079971507191658, -4.6491513785440475e-06, -0.00022718709078617394, -0.00016902448260225356, -0.0005169962532818317, -0.0065163979306817055, -0.00018773700867313892, -0.00027223696815781295, -0.02022886648774147, -0.005960191134363413, -0.009773852303624153, -2.138622283935547, -0.0907335951924324, -0.017823997884988785, -0.002717613708227873, -0.0006909366929903626, -0.8252807259559631, -0.0026510353200137615, -0.023515038192272186, -0.001335444045253098, -0.1505976915359497, -0.09378413110971451, -0.0009195152088068426, -0.18430684506893158, -0.003938181791454554, -0.005116819869726896, -3.659658250398934e-05, -1.0609570381348021e-05, -0.0008652042597532272, -0.025405380874872208, -0.014406830072402954, -0.11622850596904755, -0.0016329062636941671, -1.537788011773955e-05, -0.0002610342635307461, -0.000248043768806383, -0.002369931200519204, -1.7881377516459906e-06, -1.311301275563892e-06, -0.0003256267518736422, -0.015584819950163364, -0.0034881718456745148, -0.06960137188434601, -0.05774003267288208, -0.0010350352386012673, -0.0002044230350293219, -1.5273795127868652, -0.610276460647583, -1.8000440832111053e-05, -1.3112935448589269e-05, -2.3841830625315197e-06, -0.04299808293581009, -1.0728830375228426e-06, -5.483612312673358e-06, -0.00019274283840786666, -1.1920858014491387e-05, -1.4543427823809907e-05, -0.0016465928638353944, -0.002085298066958785, -0.004067838191986084, -1.311301275563892e-06, -4.768370445162873e-07, -0.00038115866482257843, -0.0017394188325852156, -0.22070565819740295, -0.0013104431563988328, -0.49929720163345337, -0.001213529147207737, -0.00023779425828251988, -2.0265558760002023e-06, -8.940656698541716e-06, -0.0016448076348751783, -0.0015718498034402728, -0.004249471705406904, -0.00014923889830242842, -0.014430683106184006, -0.005476590245962143, -2.4199192921514623e-05, -1.4781842764932662e-05, -5.960446742392378e-06, -0.00027497802511788905, -0.00037019551382400095, -1.0728830375228426e-06, -0.0005374894244596362, -0.0011982887517660856, -0.002050679875537753, -0.06295694410800934, -0.039012495428323746, -0.0007650309125892818, -0.23794962465763092, -0.006096457596868277, -0.25784987211227417], "finish_reason": "stop"}], "metrics": {"energy": 849.6961505584715, "energy_per_token": 3.5111411180102126, "time": 20.809484, "time_per_token": 0.08598960330578513}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    text_files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n\n    if not text_files:\n        raise ValueError(\"No files matching the pattern found.\")\n\n    filename_pattern = r'^([^\\.]+)\\.txt$'\n    results = []\n    for filepath in text_files:\n        filename = os.path.basename(filepath)\n        match = re.search(filename_pattern, filename)\n        if not match:\n            raise ValueError(\"The filename format is not recognized.\")\n        filename_without_extension = match.group(1)\n\n        with open(filepath, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex, content)\n            numeric_data = [int(match) for match in matches]\n            results.append((filename_without_extension, numeric_data))\n\n    df = pd.DataFrame(", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")))", "\n", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " found", ".", "\"", ")", "\n", "\n", "    ", "filename", "_", "pattern", " =", " r", "'^", "([", "^\\", ".", "]+", ")\\", ".", "txt", "$'", "\n", "    ", "results", " =", " []", "\n", "    ", "for", " file", "path", " in", " text", "_", "files", ":", "\n", "        ", "filename", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "path", ")", "\n", "        ", "match", " =", " re", ".", "search", "(", "filename", "_", "pattern", ",", " filename", ")", "\n", "        ", "if", " not", " match", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " filename", " format", " is", " not", " recognized", ".", "\"", ")", "\n", "        ", "filename", "_", "without", "_", "extension", " =", " match", ".", "group", "(", "1", ")", "\n", "\n", "        ", "with", " open", "(", "file", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "match", ")", " for", " match", " in", " matches", "]", "\n", "            ", "results", ".", "append", "((", "filename", "_", "without", "_", "extension", ",", " numeric", "_", "data", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "("], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -1.9102814197540283, -1.2197439670562744, -0.31372326612472534, -0.0014224658953025937, -0.012936947867274284, -0.00014435203047469258, -0.0007602662080898881, -0.19492000341415405, -0.00797066930681467, -0.00042226933874189854, -0.00017927470616996288, -0.09046988189220428, -0.00018356545479036868, -1.825984001159668, -0.006034488324075937, -0.011661575175821781, -0.0024616196751594543, -1.7743979692459106, 0.0, -0.001498291501775384, -4.7205765440594405e-05, -0.007183438166975975, -7.152555099310121e-07, -0.0010405131615698338, -0.005421933718025684, -0.03534552454948425, -2.8013790142722428e-05, -0.005713441874831915, -0.0003413571394048631, -0.034992773085832596, -1.7881377516459906e-06, -2.9802276912960224e-06, -2.622600959512056e-06, -0.00018821375851985067, -8.964136941358447e-05, -0.0007565735140815377, -0.00034791138023138046, -0.001902914373204112, -2.7418097943154862e-06, -8.22540732769994e-06, -0.13738080859184265, -0.008440890349447727, -0.5705491304397583, -7.724463648628443e-05, -0.013979845680296421, -0.0377654954791069, -0.002804515417665243, 0.0, -2.3841855067985307e-07, -0.00041845624218694866, -0.0007902836659923196, -0.00018153927521780133, -0.0021205099765211344, -0.0008055302896536887, -1.1920928244535389e-07, -0.0015673269517719746, -0.08646772056818008, -0.0016182672698050737, -0.23873618245124817, -0.1897963285446167, -0.0007227431051433086, -0.09960830956697464, -0.293517529964447, -0.2620311975479126, -0.0004538459761533886, -8.320462075062096e-05, -0.00016056202002801, -0.010618732310831547, -0.00031418632715940475, -2.760483503341675, -0.022261839359998703, -1.3542546033859253, -0.006490697152912617, -1.8945896625518799, -1.9840506315231323, -2.073503255844116, -1.3352197408676147, -0.5288891792297363, -0.2303350418806076, -0.3748411536216736, -0.0005600076401606202, -0.40496015548706055, -0.02458081766963005, -0.07590971887111664, -0.746073842048645, -4.08167839050293, -0.01938294991850853, -0.17948317527770996, -0.003011218272149563, -1.609764575958252, -0.14047318696975708, -0.5694844722747803, -2.916192054748535, -0.0009436921682208776, -0.0055727362632751465, -1.1920928244535389e-07, -1.4305104514278355e-06, -8.689979586051777e-05, -0.00038044367101974785, -0.0027469778433442116, -0.5603744387626648, -0.07537389546632767, -0.002604546956717968, -1.0728830375228426e-06, -7.152555099310121e-07, -3.576278118089249e-07, -0.021967068314552307, -1.1920928244535389e-07, -2.9802276912960224e-06, -0.0005590544897131622, -1.2874520507466514e-05, -3.194758028257638e-05, -0.004916601814329624, -0.0434429906308651, -0.6915046572685242, -0.013748119585216045, -0.0003673355677165091, -4.529942543740617e-06, -0.9848990440368652, -5.507317473529838e-05, -0.0009557208395563066, -9.894321920000948e-06, -4.768370445162873e-07, -6.401333666872233e-05, -0.002845050999894738, -0.009394368156790733, -0.0016448076348751783, -0.0777762308716774, -0.055753301829099655, -2.526405096054077, -0.0010765953920781612, -0.015759093686938286, -0.0036194308195263147, -0.0026260672602802515, -0.7014472484588623, -0.04744976386427879, -2.3841855067985307e-07, -0.00808076560497284, -0.876298189163208, -2.5920393466949463, -0.6232526898384094, -3.4335341453552246, -0.37899643182754517, -0.2916579842567444, -1.5741381645202637, -0.08112791180610657, -0.0816345140337944, -0.0011094611836597323, -0.0010544460965320468, -0.17545866966247559, -0.7112834453582764, -0.31155818700790405, -0.6641836762428284, -5.149708886165172e-05, -0.44735777378082275, -0.0006551980040967464, -0.0023421018850058317, -0.010855666361749172, -0.004909721668809652, -0.00041321321623399854, -0.0007359656738117337, -1.2516897186287679e-05, -0.008155141957104206, -0.6212189793586731, -0.0006331584881991148, -0.5027869939804077, -0.0001227780303452164, -0.00029940891545265913, -0.011239664629101753, -0.0007551440503448248, -0.0432201623916626, -0.17719459533691406, -0.0013703251024708152, -0.05045652389526367, -5.721882189391181e-05, -0.2274695783853531, -0.0008049347088672221, -9.881961887003854e-05, -0.00045074793160893023, -0.6876283884048462, -0.0003748429589904845, -0.005159278400242329, -3.802703940891661e-05, -2.0265558760002023e-06, -0.003248535329475999, -0.1344786286354065, -0.3420730531215668, -2.367478847503662, -0.0006441186997108161, -0.013815491460263729, -3.2186455882765586e-06, -0.0001532914029667154, -0.0020886289421468973, -0.00022790218645241112, -0.0038968592416495085, -0.00014411364099942148, -0.00020656836568377912, -0.03074287436902523, -0.0051564318127930164, -0.15713350474834442, -0.4671655595302582, -0.0018010600470006466, -0.04295343533158302, -0.0019458661554381251, -0.08713662624359131, -0.0788164883852005, -0.0011374439345672727, -0.06819187849760056, -0.007259064819663763, -0.00462165754288435, -7.450303382938728e-05, -1.6331539882230572e-05, -0.000795882020611316, -0.039895929396152496, -0.04579108953475952, -0.4971204996109009, -0.06923536211252213, -0.00016330339713022113, -0.000325388420606032, -0.35765430331230164, -0.005280476063489914, -0.052031099796295166, -4.672895011026412e-05, 0.0, -4.529942543740617e-06, -0.003640335751697421, -0.004280808847397566, -8.344646857949556e-07, 0.0, -0.0010193157941102982, -0.0013790155062451959, -0.02635815367102623, -0.003015378024429083, -0.19925475120544434, -0.0023060652893036604, -0.00037531962152570486, -2.264974000354414e-06, -1.156323378381785e-05, -0.012526641599833965], "finish_reason": "length"}], "metrics": {"energy": 945.2744574966437, "energy_per_token": 3.6924783495962643, "time": 22.075077, "time_per_token": 0.08623076953125}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    files = natsort.natsorted(files)  # Sort files lexicographically\n\n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n            nums = [int(match) for match in re.findall(regex, content)]  # Convert matches to integers\n            data.append({'Filename': os.path.basename(file), 'Numeric Data': nums})\n\n    return pd.DataFrame(data)", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")", "  ", "#", " Sort", " files", " lex", "ic", "ographically", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "num", "s", " =", " [", "int", "(", "match", ")", " for", " match", " in", " re", ".", "find", "all", "(", "regex", ",", " content", ")]", "  ", "#", " Convert", " matches", " to", " integers", "\n", "            ", "data", ".", "append", "({", "'", "Fil", "ename", "':", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " '", "N", "umeric", " Data", "':", " num", "s", "})", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -0.1338587999343872, -0.04860265925526619, -0.362557053565979, -0.4699718952178955, -7.998623186722398e-05, -0.00038818930624984205, -0.0008207766804844141, -0.993240475654602, -0.00010561384988250211, -0.1220763623714447, -0.01740304008126259, -0.00012599628826137632, -0.0005228344234637916, -0.11993898451328278, -0.00017128908075392246, -1.0534154176712036, -0.0197045486420393, -0.21921002864837646, -6.4490144723095e-05, -0.0016846762737259269, -0.0002719986077863723, -0.02973468042910099, -4.887569048150908e-06, -3.6954811548639555e-06, -3.933898824470816e-06, -0.00014423283573705703, -0.0001081169830285944, -0.0004844683862756938, -0.0001174142598756589, -0.0019645453430712223, -2.622600959512056e-06, -2.3841855067985307e-07, -0.007598426658660173, -0.006085201632231474, -0.1991731822490692, -0.057709090411663055, -0.027790946885943413, -0.002972709946334362, -0.0005407063290476799, -0.001620409544557333, -0.0001501924270996824, -0.002086249878630042, -0.001111366436816752, 0.0, -0.003189953975379467, -0.03722180798649788, -0.0008229206432588398, -0.0026433072052896023, -0.02488156221807003, -0.5430119037628174, -0.5951298475265503, -0.015570267103612423, -0.00015341058315243572, -0.022820239886641502, -0.0002971446083392948, -1.645074735279195e-05, -0.000802075956016779, -0.13303783535957336, -0.1444501429796219, -0.05293567478656769, -0.021574800834059715, -4.672895011026412e-05, -0.0006936766440048814, -0.0009055804111994803, -0.04134675860404968, -0.00028355870745144784, -8.666139910928905e-05, -0.00014208737411536276, -0.033816464245319366, -0.00031716562807559967, -2.2790982723236084, -0.08751558512449265, -0.03512951359152794, -7.152555099310121e-07, -0.004343362059444189, -0.00010001159535022452, -0.015447844751179218, -3.576278118089249e-07, -0.0004627825692296028, -0.00068926892708987, -0.0009042703313753009, -0.2599056661128998, -2.027127742767334, -0.00018690270371735096, -0.32801201939582825, -1.0482099056243896, -2.685098886489868, -0.006272510625422001, -0.0001294529065489769, -0.10097283869981766, -0.25274181365966797, -0.00010990492592100054, -0.6360960602760315, -0.061214379966259, -0.21830081939697266, -0.028407568112015724, -0.09602466225624084, -0.05753747373819351, -0.4109267294406891, -0.0718706026673317, -0.001887565478682518, -2.2053474822314456e-05, -0.0002996472467202693, -0.0010920758359134197, -0.6044923663139343, -6.139089964563027e-05, -0.00012933371181134135, -0.007189592812210321, -0.05885809287428856, -0.08358380198478699, -0.0005906267906539142, -0.020348485559225082, -4.994744449504651e-05, -0.013491523452103138, -0.0074713570065796375, -0.0008809261489659548, -0.00022182388056535274, -0.8506054282188416, -0.00016330339713022113, -0.010045094415545464, -1.1324817933200393e-05, -2.264974000354414e-06, -0.0006660388899035752, -0.09049317985773087, -0.1350707858800888, -3.268986225128174, -0.2164691686630249, -0.003577738767489791, -1.9336161613464355, -0.009726159274578094, -0.000550357042811811, -1.0791716575622559, -0.09934335947036743, -0.002226375974714756, -0.0009735850035212934, -0.00011920218821614981, -0.000647692708298564, -1.6093124941107817e-05, -0.00014900050882715732, -0.02105807512998581, -0.00034683887497521937, -0.003280735807493329, -0.00020168177434243262, -0.00045062878052704036, -0.026764217764139175, -2.613175630569458, -5.4834770708112046e-05, -1.0370875597000122, -0.6337000727653503, -0.017597846686840057, -0.15056262910366058, -0.02773135155439377, -0.053407035768032074, -0.01004745438694954, -0.00043108707177452743, -0.0002261144545627758, -1.741666316986084, -0.026252606883645058, -0.007727491203695536, -1.9788545614574105e-05, -9.214453893946484e-05, -0.03968743234872818, -2.264974000354414e-06, -3.933898824470816e-06, -4.768370445162873e-07, -0.01655871607363224, 0.0, -1.5497195136049413e-06, -0.0002146728802472353, -0.0001967951684491709, -0.0018878034316003323, -0.015404881909489632, -0.001312109874561429, -1.6689286894688848e-06, -0.00032455421751365066, -3.755022044060752e-05, -0.0017679788870736957, -1.6689286894688848e-06, -0.001992385368794203, -0.025770822539925575, -0.011601952835917473, -0.0008761619683355093, -0.6464236378669739, -0.0003673355677165091, -1.0132738680113107e-05, -0.0002669931564014405, -0.0011554239317774773, -0.0001674750237725675, -0.23958244919776917, -0.052190765738487244, -0.0032062334939837456, -0.20453213155269623], "finish_reason": "stop"}], "metrics": {"energy": 785.3624751625059, "energy_per_token": 3.739821310297647, "time": 19.524906, "time_per_token": 0.09297574285714287}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all files matching the pattern in the directory\n    file_pattern = os.path.join(directory, file_pattern)\n    files = natsort.natsorted(glob.glob(file_pattern))\n\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Extract numeric data from each file\n    filenames = []\n    numeric_data = []\n\n    for file in files:\n        try:\n            with open(file, 'r') as f:\n                content = f.read()\n                matches = re.findall(regex, content)\n                numeric_data.append(matches)\n                filenames.append(os.path.basename(file))\n        except FileNotFoundError:\n            print(f\"File '{file}' not found. Skipping.\")\n        except Exception as e:\n            print(f\"An error", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " files", " matching", " the", " pattern", " in", " the", " directory", "\n", "    ", "file", "_", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " from", " each", " file", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "                ", "numeric", "_", "data", ".", "append", "(", "matches", ")", "\n", "                ", "fil", "en", "ames", ".", "append", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "print", "(", "f", "\"", "File", " '", "{", "file", "}'", " not", " found", ".", " Sk", "ipping", ".", "\"", ")", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "An", " error"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -0.3677122890949249, -0.00023266946664080024, -0.0006180283380672336, -0.1457584798336029, -0.006870810873806477, -0.00015531764074694365, -0.00021169328829273582, -0.07501453161239624, -0.00018916724366135895, -1.7470167875289917, -1.4153374433517456, -0.2571791410446167, -1.9267176389694214, -0.16886089742183685, -0.008216389454901218, -0.06185388192534447, -0.651246964931488, -0.012393603101372719, -0.33002567291259766, -0.08622792363166809, -0.0002146728802472353, -1.0232503414154053, -0.06327971071004868, -1.2442572116851807, -0.1013689935207367, -0.040159694850444794, -8.940656698541716e-06, -1.823885577323381e-05, -2.622600959512056e-06, -0.0041477372869849205, -0.0003137096355203539, -0.001279012649320066, -0.00015352977789007127, -0.0013781820889562368, -1.0490362910786644e-05, -1.6569954823353328e-05, -0.00025781645672395825, -0.0057917870581150055, -0.011831232346594334, -0.28642961382865906, -0.004958119709044695, -1.3289740085601807, 0.0, -0.0029536928050220013, -4.5536911784438416e-05, -0.010723584331572056, -2.3841855067985307e-07, -0.0007802779437042773, -0.005422407761216164, -0.0023600601125508547, -9.65590606938349e-06, -0.003767893183976412, -3.755022044060752e-05, -0.0001370812824461609, -4.768370445162873e-07, -5.245195097813848e-06, -0.21303384006023407, -0.013634881936013699, -0.06739562004804611, -6.496695277746767e-05, -0.08996490389108658, -0.029702162370085716, -0.0027050115168094635, -0.0002821285743266344, -0.001424251589924097, -0.00015400654228869826, -0.0019240929977968335, -0.0007899263291619718, -1.1920928244535389e-07, -0.0024000192061066628, -0.04509621858596802, -0.0007597897201776505, -0.002151795197278261, -0.02084444649517536, -0.4065293073654175, -0.5019524693489075, -0.0023023784160614014, -0.0504167415201664, -3.111314072157256e-05, -0.003531411988660693, -6.460934673668817e-05, -1.2159273865108844e-05, -0.0006304183625616133, -0.08159320801496506, -0.500436544418335, -0.7601379752159119, -0.06373459100723267, -3.2543604902457446e-05, -0.0013427060330286622, -0.0016179102240130305, -0.05335437133908272, -0.0005777596961706877, -0.00012063252506777644, -0.00012957210128661245, -0.008247957564890385, -0.00047017011092975736, -0.5297459959983826, -0.706484854221344, -0.008310971781611443, -0.10637842863798141, -0.008416539058089256, -0.05349450185894966, -0.06905380636453629, -0.02475283108651638, -0.4854687750339508, -0.00043132537393830717, -2.687889814376831, -0.002214124659076333, -6.341733387671411e-05, -0.10760840773582458, -0.0056534637697041035, -0.006549677811563015, -2.2649508537142538e-05, -0.10639782249927521, -0.0003897384158335626, -0.012917060405015945, -0.09158840030431747, -0.0002329078270122409, -0.0010044296504929662, -0.3248082995414734, -7.545663538621739e-05, -0.0195398461073637, -0.47304272651672363, -0.040748827159404755, -0.0027380618266761303, -3.2543604902457446e-05, -8.904537389753386e-05, -0.0011730464175343513, -2.4383363723754883, -2.0503786799963564e-05, -0.00024053541710600257, -0.0004353767435532063, -0.04130958393216133, -4.935142715112306e-05, -0.00011932138295378536, -0.002435101196169853, -0.030658483505249023, -0.11012610048055649, -0.0004999579978175461, -0.03857066109776497, -4.7205765440594405e-05, -0.031786199659109116, -0.008617358282208443, -0.0014543681172654033, -0.0001629458274692297, -0.5579749345779419, -9.715084888739511e-05, -0.003983896225690842, -1.7881233361549675e-05, -2.145764938177308e-06, -0.0005026984144933522, -0.05656326934695244, -0.05410169064998627, -0.9412456750869751, -0.00012420836719684303, -0.017377501353621483, -1.6689286894688848e-06, -0.00011693747364915907, -6.5205356804654e-05, -0.00022754464589525014, -0.005504451226443052, -0.00010668662434909493, -0.00012981049076188356, -0.011764314956963062, -0.00913346279412508, -0.09064137935638428, -0.34249404072761536, -0.0067553711123764515, -0.07047908753156662, -0.011406918056309223, -0.0019593106117099524, -0.7110489010810852, -0.31957289576530457, -0.013541977852582932, -0.023091576993465424, -0.1250550001859665, -0.01222262904047966, -4.768370445162873e-07, 0.0, -6.9141146923357155e-06, -1.9907753085135482e-05, -0.0002019201492657885, -0.11821262538433075, -5.125986263010418e-06, -7.152555099310121e-07, -3.576278118089249e-07, -0.011096670292317867, 0.0, -2.7418097943154862e-06, -0.0007849234389141202, -0.0011298231547698379, -0.006735597271472216, -0.019658612087368965, -0.00012087091454304755, -1.098034143447876, -0.00014447122521232814, -6.556489552167477e-06, -0.27450406551361084, -0.0042596799321472645, -0.0010096696205437183, -0.9639189839363098, -0.0003694805200211704, -0.0031325577292591333, -0.0026395025197416544, -0.25790172815322876, -0.11526928097009659, -5.519237674889155e-05, -0.007712349761277437, -0.0009870424401015043, -0.087005615234375, -8.546940807718784e-05, -0.08560218662023544, -0.35437363386154175, -0.00482430774718523, -0.028959423303604126, -0.2311995029449463, -0.00034421717282384634, -0.0017247814685106277, -1.4956398010253906, -0.0010740946745499969, -0.24839499592781067, -0.006663009524345398, -0.0043909563682973385, -3.099393507000059e-05, -0.0012644876260310411, -0.0002641328901518136, -0.01100683119148016, -5.3165931603871286e-05, -0.0031589390709996223, -0.0004959068610332906, -1.3838441371917725, -0.008425641804933548], "finish_reason": "length"}], "metrics": {"energy": 977.9535451488499, "energy_per_token": 3.820131035737695, "time": 23.303247, "time_per_token": 0.09102830859375}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n            numeric_data = [int(x) for x in re.findall(regex, content)]\n            data.append((os.path.basename(file), numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " the", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "x", ")", " for", " x", " in", " re", ".", "find", "all", "(", "regex", ",", " content", ")]", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " numeric", "_", "data", "))", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -1.9102814197540283, -1.2197439670562744, -0.31372326612472534, -0.0014224658953025937, -0.012936947867274284, -0.00014435203047469258, -0.0007602662080898881, -0.19492000341415405, -0.00797066930681467, -0.00042226933874189854, -0.00017927470616996288, -2.4490818977355957, -0.8824878931045532, -0.01124909520149231, -1.5884995460510254, -1.1920928244535389e-07, -0.0008929556352086365, -3.7431014789035544e-05, -0.012803257443010807, -5.960462772236497e-07, -0.0012326984433457255, -0.008379065431654453, -0.025074101984500885, -3.111314072157256e-05, -0.003693545935675502, -0.0005628670332953334, -0.04308931902050972, -5.483612312673358e-06, -4.410734163684538e-06, -2.7418097943154862e-06, -0.00029488030122593045, -9.560128091834486e-05, -0.0008055302896536887, -0.0005946775199845433, -0.0014488924061879516, -3.576272320060525e-06, -1.311301275563892e-06, -0.16017413139343262, -0.0051102968864142895, -0.11302338540554047, -0.0173571165651083, -0.04384103789925575, -0.003108076984062791, -0.00030214988510124385, -0.0006972504197619855, -0.0002553137019276619, -0.0009379754774272442, -0.0007640779949724674, -1.1920928244535389e-07, -0.002540576970204711, -2.422410488128662, -0.0025347506161779165, -0.004673866089433432, -0.02281278371810913, -0.22474968433380127, -0.19556419551372528, -0.008898366242647171, -0.3033386766910553, -0.00016044282529037446, -0.024500789120793343, -0.0001225396408699453, -1.07287787614041e-05, -0.0008506731828674674, -0.41826900839805603, -0.3559150695800781, -0.4326126277446747, -0.07364144921302795, -0.8989415168762207, -0.00011669908417388797, -0.0016423083143308759, -0.0022427900694310665, -0.09245975315570831, -0.0011542332358658314, -0.00016056202002801, -0.0003711488388944417, -0.3440261781215668, -0.6245680451393127, -0.05026620253920555, -0.18126314878463745, -0.004833798389881849, -0.009225951507687569, -0.040722958743572235, -0.35007068514823914, -0.044573720544576645, -0.004791919607669115, -3.8742269680369645e-05, -0.00016068121476564556, -0.0009839460253715515, -0.3844940662384033, -0.00010787858627736568, -0.0001554368354845792, -0.009320792742073536, -0.07673831284046173, -0.16555045545101166, -0.0006842655711807311, -0.030093105509877205, -0.00013064485392533243, -0.011640955694019794, -0.011520643718540668, -0.0008148210472427309, -0.0004558716027531773, -0.9631662368774414, -0.0002212279650848359, -0.011206305585801601, -1.4543427823809907e-05, -3.4570634852570947e-06, -0.0007668177131563425, -0.04773859307169914, -0.19767989218235016, -1.1587246656417847, -0.0047282082960009575, -0.016890717670321465, -0.0016049373662099242, -1.355427622795105, -0.010793990455567837, -0.0003688847064040601, -2.1422102451324463, -0.014221156015992165, -0.003322677919641137, -0.0008493629866279662, -4.005352093372494e-05, -0.0011508992174640298, -1.883488948806189e-05, -0.00039545822073705494, -8.642300235806033e-05, -0.000582525331992656, -0.00562845217064023, -0.00020430385484360158, -0.00041321321623399854, -0.023441096767783165, -0.021321255713701248, -0.04806142672896385, -0.018896324560046196, -0.00035375059815123677, -0.0001370812824461609, -0.5541503429412842, -0.16690927743911743, -7.152555099310121e-07, -2.9802276912960224e-06, -7.152555099310121e-07, -0.01342013105750084, 0.0, -4.6491513785440475e-06, -0.0002420847595203668, -0.00044955636258237064, -0.001986317802220583, -0.0047920383512973785, -1.0728830375228426e-06, -3.576278118089249e-07, -0.0012844892917200923, -0.0024591225665062666, -0.02668854407966137, -0.31637462973594666, -0.0007242917199619114, -0.00017152745567727834, -4.6491513785440475e-06, -5.722029527532868e-06, -0.004104761406779289, -0.0008871195605024695, -0.003257803386077285, -0.0001486429391661659, -0.023654872551560402, -0.003354044398292899, -6.6756979322235566e-06, -1.4185804502631072e-05, -5.125986263010418e-06, -0.0003630455757956952, -0.00028832571115344763, -1.311301275563892e-06, -0.0004886387032456696, -0.0007788485381752253, -0.0022892954293638468, -0.003852209774777293, -0.03565040975809097, -0.0012282931711524725, -0.1439945250749588, -0.00881270132958889, -0.2601366639137268], "finish_reason": "stop"}], "metrics": {"energy": 742.4503571319578, "energy_per_token": 3.807437728881835, "time": 18.27752, "time_per_token": 0.09373087179487179}}
{"outputs": [{"text": "# Validate that the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all matching files\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files found in '{directory}' that match the pattern '{file_pattern}'.\")\n\n    # Initialize the DataFrame\n    data = {'Filename': [], 'Numeric Data': []}\n    df = pd.DataFrame(data)\n\n    # Iterate over each file and extract numeric data using regular expressions\n    for filename in file_list:\n        with open(filename, 'r') as file:\n            text = file.read()\n            # Use regular expressions to find numeric data\n            matches = re.findall(regex, text)\n            # Convert the matches to integers\n            numeric_data = [int(match) for match in matches]\n            # Add the data to the DataFrame\n            df = df.append({'Filename", "tokens": ["#", " Valid", "ate", " that", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " matching", " files", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " file", "_", "list", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " in", " '", "{", "directory", "}'", " that", " match", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " the", " Data", "Frame", "\n", "    ", "data", " =", " {'", "Fil", "ename", "':", " []", ",", " '", "N", "umeric", " Data", "':", " []", "}", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " and", " extract", " numeric", " data", " using", " regular", " expressions", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "#", " Use", " regular", " expressions", " to", " find", " numeric", " data", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " text", ")", "\n", "            ", "#", " Convert", " the", " matches", " to", " integers", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "match", ")", " for", " match", " in", " matches", "]", "\n", "            ", "#", " Add", " the", " data", " to", " the", " Data", "Frame", "\n", "            ", "df", " =", " df", ".", "append", "({", "'", "Fil", "ename"], "logprobs": [-1.0816802978515625, -2.0354652404785156, -0.022773398086428642, -2.058389186859131, -0.12723565101623535, -0.23603728413581848, -0.05453762412071228, -0.13507932424545288, -0.0008131535141728818, -0.026110930368304253, -0.0020575798116624355, -0.002590159885585308, -4.410734163684538e-06, -0.00031585473334416747, -2.7417760065873154e-05, -1.3573616743087769, -6.12716976320371e-05, -0.00020108585886191577, -0.000666277133859694, -0.0005135409301146865, -0.000526289688423276, -0.001302228425629437, -0.008865755051374435, -0.0030592328403145075, -4.8397800128441304e-05, -5.125986263010418e-06, -0.02131308801472187, -0.11316540092229843, -0.04640650004148483, -0.22439388930797577, -0.44746431708335876, -8.332382276421413e-05, -0.00032062159152701497, -0.0005402297829277813, -0.37543612718582153, -0.00023910524032544345, -0.0005261705373413861, -0.2899327874183655, -0.008206576108932495, -0.00013350549852475524, -0.0001497156627010554, -0.02714540623128414, -0.00030489088385365903, -0.033294957131147385, -1.033287525177002, -0.38669514656066895, -1.9374172687530518, -0.9858253002166748, -1.532970666885376, -6.592056161025539e-05, -1.3762470483779907, -0.07293131202459335, -0.8292434215545654, -0.00048637480358593166, -0.12970195710659027, -0.00010775939153973013, -0.004757988266646862, -0.0003274143091402948, -0.028437694534659386, -2.9802276912960224e-06, -2.3841830625315197e-06, -2.861018856492592e-06, -0.00016807096835691482, -8.308542601298541e-05, -0.0008822362869977951, -0.00014137222024146467, -0.0017003853572532535, -3.6954811548639555e-06, -4.291525328881107e-06, -0.008329059928655624, -0.0021326434798538685, -0.6009566783905029, -0.12115208804607391, -0.06345336884260178, -0.0014182995073497295, -3.576278118089249e-07, -4.768370445162873e-07, -0.0006051616510376334, -0.0024318902287632227, -0.0002181292074965313, -0.004109153989702463, -0.0013919912744313478, -3.576278118089249e-07, -0.0017477489309385419, -0.03075512871146202, -0.0006521005416288972, -0.004904146306216717, -0.03326163440942764, -1.4581081867218018, -2.1036882400512695, -0.2201775163412094, -5.1973900554003194e-05, -0.001257463125512004, -0.0013812773395329714, -1.2633867263793945, -0.0017216873820871115, -0.7622630596160889, -0.007586714345961809, -0.02950611338019371, -0.0002840353990904987, -0.0017070496687665582, -9.775113539944869e-06, -7.748573807475623e-06, -0.002609778428450227, -0.09247615933418274, -0.0006364941946230829, -9.131014667218551e-05, -0.00015579440514557064, -0.021671511232852936, -0.0003736513026524335, -0.09866270422935486, -1.3226382732391357, -1.6883999109268188, -0.5464255809783936, -0.0006498370785266161, -0.17927832901477814, -0.00017534149810671806, -1.4491517543792725, -0.16058629751205444, -0.2071329951286316, -0.0008827127167023718, -1.823885577323381e-05, -0.003076584078371525, -0.02226032316684723, -0.0011266082292422652, -0.009606916457414627, -0.0011373248416930437, -1.9073468138230965e-06, -0.0006518622976727784, -8.916457591112703e-05, -0.0007366804056800902, -0.0014259180752560496, -0.020522864535450935, -0.08160693943500519, -0.11124322563409805, -0.0020960045512765646, -0.0001501924270996824, -1.4781842764932662e-05, -1.4543427823809907e-05, -0.020735861733555794, -0.0033049744088202715, -0.022396717220544815, -0.005832320544868708, -0.005350317806005478, -0.0001554368354845792, -0.045689281076192856, -1.0869230031967163, -0.00028546550311148167, -0.2098965346813202, -1.4392575025558472, -0.07854894548654556, -0.5986658334732056, -0.0459294356405735, -0.19363804161548615, -0.008093063719570637, -2.6860926151275635, -2.0339853763580322, -1.012593388557434, -0.008968310430645943, -0.0002960720448754728, -0.018271584063768387, -1.1218430995941162, -0.00026174934464506805, -2.1530706882476807, -0.001702646492049098, -0.0001299296854995191, -0.00011514954530866817, -0.0006156456656754017, -0.003718962427228689, -0.39168640971183777, -0.00017379203927703202, -0.00024005869636312127, -0.02584250085055828, -0.04054462909698486, -0.062431156635284424, -0.0013196102809160948, -0.055358730256557465, -8.248942322097719e-05, -0.14909236133098602, -0.0006921279709786177, -0.0004351384413894266, -0.0005553610390052199, -1.426132321357727, -0.03929953649640083, -0.0012643685331568122, -1.6569954823353328e-05, -4.291525328881107e-06, -0.0014496066141873598, -0.016369689255952835, -0.16331934928894043, -1.8166835308074951, -1.0950946807861328, -0.38801947236061096, -0.21136370301246643, -0.004005624447017908, -1.868798851966858, -1.0242094993591309, -0.06287791579961777, -0.5970563292503357, -0.0005902693956159055, -2.046208381652832, -0.00020251607929822057, -0.007511703763157129, -1.311301275563892e-06, -0.00016151554882526398, -0.0002810560108628124, -0.0006448334897868335, -0.004146075341850519, -0.00014983485743869096, -0.00033802041434682906, -0.01036345586180687, -0.0026843249797821045, -0.0781557708978653, -0.8114649653434753, -0.7954626679420471, -1.4918901920318604, -0.712249219417572, -0.11876462399959564, -0.3623802661895752, -0.3901214003562927, -0.000259365770034492, -0.13697944581508636, -0.0016191004542633891, -0.010271427221596241, -0.0006641327636316419, -0.03862066566944122, -0.0007475204183720052, -0.0002549561613705009, -0.049642838537693024, -0.003255189396440983, -0.0019367048516869545, -1.9073304429184645e-05, -6.6756979322235566e-06, -0.00020954797219019383, -0.005394189152866602, -0.0052610281854867935, -0.27814197540283203, -0.1428002417087555, -1.0482127666473389, -0.21199160814285278, -2.23469877243042, -0.01676974818110466, -0.010086753405630589, -0.002047348767518997, -0.00020489977032411844, -0.006453151814639568, -0.0006982034537941217, -0.06215415522456169, -0.20799829065799713, -0.06692133098840714, -3.4570634852570947e-06, -2.4914430468925275e-05, -0.002713095862418413, -0.0026419993955641985, -4.60137271147687e-05, 0.0], "finish_reason": "length"}], "metrics": {"energy": 926.4989596576694, "energy_per_token": 3.619136561162771, "time": 22.255661, "time_per_token": 0.08693617578125}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The specified directory '{directory}' does not exist.\")\n\n    # Search for text files matching the pattern\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are matching files\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Initialize a list to store the extracted numeric data for each file\n    numeric_data = []\n\n    # Iterate over the files\n    for file in natsort.natsorted(files):\n        # Extract the numeric data from the file\n        with open(file, 'r') as f:\n            file_data = f.read()\n            numbers = re.findall(regex, file_data)\n            numeric_data.append(numbers)\n\n    # Create the Pandas DataFrame\n    df = pd.DataFrame({'Filename': natsort.natsorted(files), '", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " specified", " directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Search", " for", " text", " files", " matching", " the", " pattern", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " matching", " files", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " a", " list", " to", " store", " the", " extracted", " numeric", " data", " for", " each", " file", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "#", " Ext", "ract", " the", " numeric", " data", " from", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "            ", "numbers", " =", " re", ".", "find", "all", "(", "regex", ",", " file", "_", "data", ")", "\n", "            ", "numeric", "_", "data", ".", "append", "(", "numbers", ")", "\n", "\n", "    ", "#", " Create", " the", " Pand", "as", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")", ",", " '"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -0.3575069308280945, -0.018358316272497177, -0.08457214385271072, -0.00044943721150048077, -0.0037047103978693485, -0.0029635580722242594, -0.0012448427733033895, -5.364403477869928e-06, -0.00043704494601115584, -2.074220174108632e-05, -0.21645140647888184, -0.00016926287207752466, -0.0005646541831083596, -0.001934325322508812, -0.00037555795279331505, -0.0011600677389651537, -0.007740739732980728, -0.001970970071852207, -3.361645576660521e-05, -4.172316494077677e-06, -0.022890964522957802, -0.21067070960998535, -0.03489665314555168, -2.075057029724121, -1.4804136753082275, -0.0013006808003410697, -0.6147032380104065, -7.10462118149735e-05, -0.00039033422945067286, -0.0003389737685211003, -0.007995030842721462, -0.0007201223634183407, -0.00038389943074434996, -0.040804676711559296, -0.006363486871123314, -0.00016211149340961128, -0.00018344627460464835, -0.022726669907569885, -0.0002517383254598826, -0.020086100324988365, -2.2030749320983887, -0.03186552971601486, -0.7710905075073242, -0.000596107158344239, -0.9332616925239563, -0.0014119903789833188, -0.050861191004514694, -0.4563366174697876, -8.284702198579907e-05, -1.3656361103057861, -0.018822040408849716, -0.14482645690441132, -2.3841574147809297e-05, -0.0015845850575715303, -0.00017188502533826977, -0.02579277940094471, -2.145764938177308e-06, -1.5497195136049413e-06, -1.1920922133867862e-06, -0.00013362467871047556, -6.365573790390044e-05, -0.0006286313873715699, -9.285972191719338e-05, -0.0019935749005526304, -3.4570634852570947e-06, -2.3841830625315197e-06, -0.008293593302369118, -0.0015151937259361148, -0.24851690232753754, -0.00012194366718176752, -0.11119181662797928, -0.46859925985336304, -0.002277877414599061, -0.8965591192245483, -0.006096220575273037, -2.4398555755615234, -0.0584518127143383, -0.009429441764950752, -2.062299427052494e-05, -0.00031609306461177766, -0.015839824452996254, -0.0015520919114351273, -0.0004164305282756686, -0.0001431601122021675, -0.00011896379146492109, -0.0016881275223568082, -0.0007176207727752626, 0.0, -0.003327073995023966, -0.08069869130849838, -0.0003859252028632909, -0.003908140119165182, -0.08229710906744003, -0.06481614708900452, -0.05824332684278488, -0.0039267828688025475, -0.014957655221223831, -0.00016926287207752466, -0.03425879403948784, -3.6238969187252223e-05, -2.8132995794294402e-05, -0.0008151783840730786, -0.23203960061073303, -0.041885003447532654, -1.0938746929168701, -0.05019296705722809, -1.5020257706055418e-05, -0.0004905451205559075, -0.0009894242975860834, -0.031095854938030243, -0.00027938754647038877, -3.909988299710676e-05, -9.333651541965082e-05, -0.010744931176304817, -0.00028618055512197316, -0.1127963662147522, -0.972481906414032, -1.390417218208313, -0.4188256859779358, -0.04755230247974396, -0.11162009090185165, -0.3840898275375366, -0.7484362125396729, -0.6760590672492981, -0.004869862459599972, -1.311535358428955, -0.0011595914838835597, -0.003699365770444274, -0.004757750779390335, -0.0002530493075028062, -0.389140784740448, -0.00015686711412854493, -0.006130699068307877, -0.825130045413971, -0.004149874206632376, -0.0016694430960342288, -0.06834976375102997, -0.00012361239350866526, -0.03705422580242157, -0.5833750367164612, -0.0001012035645544529, -0.29670968651771545, -0.3386440575122833, -1.0846025943756104, -0.6543754935264587, -6.639736966462806e-05, -0.001877094735391438, -0.21816453337669373, -0.06327825784683228, -0.31601810455322266, 0.0, -0.00032085992279462516, -0.00016306500765495002, -0.032984159886837006, -1.311301275563892e-06, -0.0001538873475510627, -0.00017295771976932883, -0.00014506718434859067, -0.06414800882339478, -0.005600357428193092, -0.015098338015377522, -0.4573110044002533, -1.0564342737197876, -0.00038354191929101944, -0.2569396495819092, -1.1819024085998535, -0.014363705180585384, -0.5415380001068115, -0.2319381684064865, -0.03350041061639786, -0.6088043451309204, -0.0005837167263962328, -0.1137513667345047, -7.10462118149735e-05, -0.0003289635351393372, -0.006708244327455759, -0.04345737397670746, -0.0846334844827652, -0.00032634177478030324, -0.04307698830962181, -4.649054244509898e-05, -0.06225082650780678, -0.006004746537655592, -0.00036566724884323776, -0.0005361788207665086, -1.9310941696166992, -0.0001062098381225951, -0.3760662078857422, -0.0008891443139873445, -0.41154730319976807, -0.00016008525562938303, -2.861018856492592e-06, -0.002834590384736657, -0.0345417857170105, -0.1195186972618103, -2.811920166015625, -0.009142322465777397, -0.25630834698677063, -1.8596476365928538e-05, -0.0002549561613705009, -5.125986263010418e-06, -0.00043561504571698606, -0.005036879796534777, -0.0001081169830285944, -0.00024637524620629847, -6.437280717364047e-06, -4.768370445162873e-07, -0.0024366469588130713, -0.011407153680920601, -0.17749440670013428, -0.07640163600444794, -0.00015639036428183317, -0.00017307691450696439, -0.0015995815629139543, -0.023549038916826248, -0.13649585843086243, -0.11012940853834152, -0.010958370752632618, -0.011408921331167221, -0.006768869701772928, -0.0025467602536082268, -0.007130531594157219, -0.12720195949077606, -2.200010299682617, -1.5936665534973145, -9.536738616588991e-07, -0.001116010476835072, -0.00035363141796551645, -0.14763174951076508, -0.00025328766787424684, -0.07960612326860428, -0.0021771318279206753, -0.00023409964342135936, -1.1920922133867862e-06, -3.969590397900902e-05, -0.01392306573688984, -0.11801008880138397, -0.0012178155593574047, -1.7165990357170813e-05, -0.000525217386893928, -2.0447137355804443, -2.3841855067985307e-07, -7.676783570786938e-05, -4.410734163684538e-06, -0.0012036467669531703, -7.152555099310121e-07, -5.006777428206988e-06, -0.14011679589748383, -0.039941173046827316, -0.010252902284264565, -0.0007778956205584109, -0.25681692361831665], "finish_reason": "length"}], "metrics": {"energy": 923.2184131412514, "energy_per_token": 3.6063219263330133, "time": 22.26902, "time_per_token": 0.086988359375}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    numeric_data = []\n    for file in natsort.natsorted(text_files):\n        with open(file, 'r') as f:\n            content = f.read()\n            numeric_data.append(re.findall(regex, content))\n\n    df = pd.DataFrame({'Filename': os.path.basename(file) for file in text_files},\n                      index=range(1, len(text_files) + 1))\n    df['Numeric Data'] = [row for row in numeric_data]\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "text", "_", "files", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "numeric", "_", "data", ".", "append", "(", "re", ".", "find", "all", "(", "regex", ",", " content", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", " for", " file", " in", " text", "_", "files", "}", ",", "\n", "                ", "      ", "index", "=", "range", "(", "1", ",", " len", "(", "text", "_", "files", ")", " +", " ", "1", "))", "\n", "    ", "df", "['", "N", "umeric", " Data", "']", " =", " [", "row", " for", " row", " in", " numeric", "_", "data", "]", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -0.3677122890949249, -0.00023266946664080024, -0.0006180283380672336, -0.1457584798336029, -0.006870810873806477, -0.00015531764074694365, -0.00021169328829273582, -0.07501453161239624, -0.00018916724366135895, -1.9199179410934448, -0.00485716899856925, -0.00912861991673708, -0.002836730098351836, -0.36650678515434265, -4.5060096454108134e-05, -0.0005555993411689997, -0.00026067672297358513, -0.024386435747146606, -2.7418097943154862e-06, -2.0265558760002023e-06, -2.9802276912960224e-06, -0.0001419681793777272, -9.881961887003854e-05, -0.0005808573332615197, -0.00015472168161068112, -0.0020080895628780127, -1.9073468138230965e-06, -1.1920928244535389e-07, -0.012415031902492046, -0.007847077213227749, -0.4560543894767761, -0.09378120303153992, -0.022227445617318153, -0.0022131730802357197, 0.0, -7.152555099310121e-07, -0.0002454218047205359, -0.0011036264477297664, -0.00018142008048016578, -0.002157623879611492, -0.0009993088897317648, 0.0, -0.002805704018101096, -0.0515139140188694, -0.0006993946735747159, -0.0028988979756832123, -0.08403688669204712, -0.14715957641601562, -1.0181801319122314, -0.0033837463706731796, -0.04907640814781189, -0.0002668739762157202, -0.03657221794128418, -7.319182623177767e-05, -1.0609570381348021e-05, -0.0013083001831546426, -0.12544362246990204, -0.1244225725531578, -0.37711891531944275, -0.02564302086830139, -2.6464111215318553e-05, -0.000486970558995381, -0.0013371107634156942, -0.028255419805645943, -0.000328367663314566, -7.545663538621739e-05, -0.00023910524032544345, -0.03044573776423931, -0.0003939091111533344, -2.478144645690918, -0.0003477922291494906, -0.040790483355522156, -0.158855140209198, -0.2139957696199417, -0.010524367913603783, -0.11737138777971268, -0.5057938694953918, -0.3572140634059906, -0.07735417038202286, -0.23634763062000275, -2.3841855067985307e-07, -0.0003232433518860489, -6.794698856538162e-05, -0.03392317518591881, -5.960462772236497e-07, -0.0001559135998832062, -0.0002752163854893297, -0.0005397531786002219, 0.0, -1.1920928244535389e-07, -0.09101095795631409, -0.002636411227285862, -0.001134586171247065, -0.12569859623908997, -5.638440416078083e-05, -0.00019894051365554333, -0.011924413032829762, -0.06856071949005127, -0.14414511620998383, -0.0007294139941222966, -0.0446946807205677, -6.12716976320371e-05, -0.03580339625477791, -0.0075838747434318066, -0.000964295701123774, -0.0004538459761533886, -0.7600749731063843, -0.00014828535495325923, -0.009426961652934551, -1.6569954823353328e-05, -2.264974000354414e-06, -0.0011406589765101671, -0.08830776810646057, -0.05537756532430649, -2.148141384124756, -0.050390440970659256, -0.42162302136421204, -0.0594681017100811, -0.1523124873638153, -0.302130788564682, -0.07852084189653397, -0.00011205045302631333, -0.00044860312482342124, -2.3841830625315197e-06, -0.0005696581210941076, -0.008239326067268848, -0.0001821352052502334, -0.0005502378917299211, -0.005480502732098103, -0.003669791854918003, -0.026917988434433937, -0.0016568278660997748, -0.29262036085128784, -0.0024125061463564634, -0.00034624303225427866, -2.145764938177308e-06, -0.0001714082609396428, -0.015913154929876328, -0.08382786065340042, -0.002127885352820158, -2.3007127310847864e-05, -0.0008094609947875142, -1.5710678100585938, -1.6331539882230572e-05, -0.0010243174619972706, -3.814689989667386e-06, -0.016478396952152252, -1.1920928244535389e-07, -4.637133679352701e-05, -0.36555370688438416, -0.004707326181232929, -0.00978152547031641, -0.00031001531169749796, -0.0001938155182870105, -0.018836546689271927, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.006921363528817892, -4.6967357775429264e-05, -1.4165211915969849, -0.0037802441511303186, -0.03932979330420494, -0.046551477164030075, -0.07501044124364853, -0.026791492477059364, -2.992108420585282e-05, -2.903872489929199, -0.011566484346985817, -0.005637697875499725, -7.390948667307384e-06, -0.06986208260059357, -8.344646857949556e-07, 0.0, -0.1690860092639923, -0.000608854868914932, -0.0002470903273206204, -0.00010740180005086586, -0.00912625715136528, -0.008767680265009403, -0.04669995605945587, -0.0033964586909860373, -0.012170223519206047, -0.0035301053430885077, -3.099436753473128e-06, -0.00041976699139922857, -0.00012933371181134135, -6.55629628454335e-05, -2.251021385192871, -3.1246347427368164, -0.42877209186553955, -0.003045803401619196, -6.782778655178845e-05, -0.007258946541696787, -4.768370445162873e-07, -2.9802276912960224e-06, -0.01734774373471737, -0.0030452092178165913, -0.2146085649728775, -0.0006031363154761493, -0.0283499788492918, -0.0005915798828937113, -0.1356429010629654, -0.00497579388320446, -0.21535468101501465], "finish_reason": "stop"}], "metrics": {"energy": 805.7681814556112, "energy_per_token": 3.5340709712965404, "time": 19.73657, "time_per_token": 0.08656390350877192}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    # Find all text files matching the pattern\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n\n    # Create a pandas DataFrame to store the results\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    for file in files:\n        with open(file, 'r') as f:\n            file_name = os.path.splitext(os.path.basename(file))[0]\n            numeric_data = re.findall(regex, f.read())\n            numeric_data = [int(num) for num in numeric_data]\n            df.loc[len(df.index)] = [file_name, numeric_data]\n\n    return df", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " matching", " the", " pattern", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")))", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " in", " the", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " pandas", " Data", "Frame", " to", " store", " the", " results", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", "[", "0", "]", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " f", ".", "read", "())", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "num", ")", " for", " num", " in", " numeric", "_", "data", "]", "\n", "            ", "df", ".", "loc", "[", "len", "(", "df", ".", "index", ")]", " =", " [", "file", "_", "name", ",", " numeric", "_", "data", "]", "\n", "\n", "    ", "return", " df"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -0.3575069308280945, -0.018358316272497177, -0.08457214385271072, -0.00044943721150048077, -0.0037047103978693485, -0.0029635580722242594, -0.0012448427733033895, -5.364403477869928e-06, -0.00043704494601115584, -2.074220174108632e-05, -0.21645140647888184, -0.00016926287207752466, -0.0005646541831083596, -0.001934325322508812, -0.00037555795279331505, -0.0011600677389651537, -0.007740739732980728, -0.001970970071852207, -3.361645576660521e-05, -4.172316494077677e-06, -0.022890964522957802, -0.21067070960998535, -0.03489665314555168, -2.075057029724121, -0.26874372363090515, -0.18019352853298187, -5.876845170860179e-05, -0.00024387246230617166, -0.000902007392141968, -0.011258053593337536, -9.131014667218551e-05, -0.0005715643637813628, -0.050214845687150955, -0.012637179344892502, -0.0001454247540095821, -9.285972191719338e-05, -0.030319340527057648, -0.00027164106722921133, -0.014461115002632141, -1.099348783493042, -0.37532883882522583, -0.6488125920295715, -0.0014761515194550157, -0.23201152682304382, -0.002393835224211216, -0.057300765067338943, -0.6240550875663757, -7.915183232398704e-05, -0.9989638328552246, -0.015370135195553303, -2.3816678524017334, 0.0, -0.001192454481497407, -5.149708886165172e-05, -0.006393928546458483, -5.960462772236497e-07, -0.0016210046596825123, -0.01456979475915432, -0.011845957487821579, -2.9682672902708873e-05, -0.005571432411670685, -0.00018285033002030104, -0.02769320458173752, -1.6689286894688848e-06, -2.3841830625315197e-06, -2.264974000354414e-06, -0.00010978573118336499, -7.962863310240209e-05, -0.000243634101934731, -0.00015245705435518175, -0.00177345285192132, -3.814689989667386e-06, -3.576278118089249e-07, -0.09818226844072342, -0.004293984733521938, -0.12418802082538605, -9.42901024245657e-05, -2.26277494430542, -0.03440093249082565, -0.0015023384476080537, -0.00026890001026913524, -0.002594678197056055, -0.00017379203927703202, -0.0027218933682888746, -0.0008924792055040598, -4.768370445162873e-07, -0.0043254392221570015, -0.09834596514701843, -0.0007053509471006691, -0.00343186198733747, -0.041856881231069565, -2.8666932582855225, -0.3044542372226715, -0.03283443674445152, -0.002342339837923646, -0.0761166587471962, -0.0002864189154934138, -0.03792458027601242, -6.329813186312094e-05, -1.3947389561508317e-05, -0.002424398437142372, -0.3294059634208679, -0.542888879776001, -0.028578000143170357, -0.028328541666269302, -4.386805812828243e-05, -0.0005947966128587723, -0.0014571059728041291, -0.02593473345041275, -0.000734297966118902, -7.199982064776123e-05, -8.964136941358447e-05, -0.007311846129596233, -0.00034791138023138046, -0.3282449543476105, -1.565475344657898, -1.4099280834197998, -3.100132942199707, -0.016485784202814102, -0.00030179237364791334, -0.790443480014801, -0.12900298833847046, -0.0720897987484932, -1.4090590476989746, -0.0024786246940493584, -0.00046230596490204334, -0.39057135581970215, -0.008828062564134598, -0.0009415484382770956, -5.006777428206988e-06, -2.4437606043647975e-05, -0.04628267511725426, -0.001258891774341464, -0.051444731652736664, -0.003116514766588807, -1.3112935448589269e-05, -0.0020872014574706554, -1.9788545614574105e-05, -0.0012040039291605353, -0.0009238027851097286, -1.5497195136049413e-06, -0.0005983707960695028, -0.0010979106882587075, -0.00046695294440723956, -0.014107619412243366, -8.964136941358447e-05, -1.3479324579238892, -0.24900677800178528, -0.04378421604633331, -0.004740072879940271, -2.074220174108632e-05, -0.0005354639724828303, -0.004657610785216093, -1.232243299484253, -7.259582343976945e-05, -0.00016318420239258558, -0.010028335265815258, -0.02971581742167473, -0.028973205015063286, -0.0003277718205936253, -0.03624070808291435, -4.7801782784517854e-05, -0.02091764472424984, -0.010850241407752037, -0.0009153467253781855, -0.0006942722829990089, -3.8378138542175293, -0.0007877822499722242, -1.9004762172698975, -0.004718360491096973, -0.004180265124887228, -1.4305104514278355e-06, -3.576278118089249e-07, -4.768370445162873e-07, -2.989145040512085, -2.3841855067985307e-07, 0.0, -0.00029273517429828644, -0.006651167757809162, -2.50339189733495e-06, -5.960462772236497e-07, -8.344646857949556e-07, -0.018441880121827126, 0.0, -1.3947389561508317e-05, -0.010747171938419342, -0.00034290633630007505, -0.00037424711626954377, -0.00026472879108041525, -2.610649426060263e-05, -0.1857764720916748, -0.13262782990932465, -1.6162407398223877, -0.0012648447882384062, -0.023061174899339676, -0.005975240375846624, -0.662309467792511, -0.00019476900342851877, -0.0004909025738015771, -1.728519782773219e-05, -0.0006906984490342438, -0.00858816597610712, -0.00018726025882642716, -0.0034020424354821444, -9.07141511561349e-05, -3.4570634852570947e-06, -0.01497233472764492, -0.04215076193213463, -0.2447563111782074, -0.8900476098060608, -7.295342220459133e-05, -0.0023481673561036587, -0.03199196234345436, -0.2689846158027649, -0.03235211968421936, -0.0013160386588424444, -0.7024075984954834, -0.023325109854340553, -0.023515155538916588, -3.611976353568025e-05, -1.6212332411669195e-05, -0.00041571559268049896, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.01932390406727791, -0.3503055274486542, -0.2042052447795868, -0.05096462741494179, -0.49895355105400085, -7.033100700937212e-05, -0.00908680260181427, -0.010091946460306644, -1.9073468138230965e-06, -3.814689989667386e-06, -1.262462854385376, -2.145764938177308e-06, -0.0007853999268263578, -0.00010740180005086586, -0.007033943198621273, -0.002785732736811042, -0.0014399646315723658, -9.059865078597795e-06, -0.0016990762669593096, -0.0020776845049113035, -1.4305104514278355e-06, -3.576278118089249e-07, -0.0018104605842381716, -0.00358320283703506, -0.019341792911291122, -0.0007853999268263578, -0.03806838393211365, -0.00030429501202888787], "finish_reason": "length"}], "metrics": {"energy": 927.6804748916616, "energy_per_token": 3.623751855045553, "time": 22.271042, "time_per_token": 0.0869962578125}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern were found: {os.path.join(directory, file_pattern)}\")\n\n    data = []\n\n    for text_file in natsort.natsorted(text_files):\n        with open(text_file, 'r') as f:\n            content = f.read()\n\n            numbers = re.findall(regex, content)\n            numbers = [int(number) for number in numbers]\n\n            data.append((os.path.basename(text_file), numbers))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "}\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " were", " found", ":", " {", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")}", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "for", " text", "_", "file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "text", "_", "files", "):", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "\n", "            ", "numbers", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "numbers", " =", " [", "int", "(", "number", ")", " for", " number", " in", " numbers", "]", "\n", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "text", "_", "file", ")", ",", " numbers", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -1.9666035175323486, -0.0012011463986709714, -0.005265416111797094, -0.007759311236441135, -0.00040725519647821784, -0.002955951262265444, -9.095255518332124e-05, -0.0002273062855238095, -0.11243411153554916, -0.0001591317413840443, -1.845776081085205, -0.005528161767870188, -0.013823368586599827, -0.0022941718343645334, -0.2903822958469391, -4.279521817807108e-05, -0.0011865011183544993, -0.00023398046323563904, -0.023081792518496513, -3.2186455882765586e-06, -2.145764938177308e-06, -3.4570634852570947e-06, -0.00018308870494365692, -0.00010656742961145937, -0.0008007657015696168, -9.60780744208023e-05, -0.0021914057433605194, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.014245836064219475, -0.006473286543041468, -1.1042840480804443, -8.415821503149346e-05, -0.020030716434121132, -0.03246810659766197, -0.003571443259716034, 0.0, -2.3841855067985307e-07, -0.00038044367101974785, -0.001189835020340979, -0.00018976318824570626, -0.002135379472747445, -0.0008261366747319698, 0.0, -0.0017256144201382995, -0.14813464879989624, -0.0008740180637687445, -0.0027972639072686434, -0.15444712340831757, -0.5300756692886353, -0.3695734441280365, -0.00388985313475132, -3.077791213989258, -4.5298504119273275e-05, -1.5904920101165771, -0.00209386320784688, -3.0415658950805664, -3.540453326422721e-05, -3.6000557884108275e-05, -1.4543427823809907e-05, -0.0009308296139352024, -7.712543447269127e-05, -0.0001679517881711945, -2.109982233378105e-05, -0.003167138434946537, -1.07287787614041e-05, -1.7881377516459906e-06, -0.00031013446277938783, -0.0018989879172295332, -0.0001454247540095821, -0.0002493547508493066, -0.026383813470602036, -0.0004919749335385859, -1.8792450428009033, -0.10455912351608276, -0.1624833047389984, -0.006432660855352879, -0.9352294206619263, -7.164221460698172e-05, -0.04802052676677704, -2.7490756511688232, -0.014023104682564735, -0.002405014121904969, -0.0006556744920089841, -0.07903493940830231, -2.3841855067985307e-07, -0.0003594706067815423, -5.8530047681415454e-05, -0.02315180003643036, -2.3841855067985307e-07, -0.00016783259343355894, -0.00032455421751365066, -0.000302030734019354, 0.0, -7.152555099310121e-07, -0.09857704490423203, -0.003896740498021245, -0.012886463664472103, -0.4077245891094208, -0.00012265883560758084, -0.00022301571152638644, -0.0082169808447361, -2.3841855067985307e-07, 0.0, -0.04222630336880684, -0.18502379953861237, -0.0009147512027993798, -0.05386123061180115, -5.793403761344962e-05, -0.5470490455627441, -0.011273023672401905, -0.0003400462737772614, -0.0005187834613025188, -1.122016429901123, -0.0002060916303889826, -0.014766093343496323, -1.490105023549404e-05, -2.145764938177308e-06, -0.001578276976943016, -0.11526110023260117, -1.9591082334518433, -1.2113423347473145, -3.0039801597595215, -0.01128846500068903, -0.17683586478233337, -1.7046782886609435e-05, -0.00025817399728111923, -8.821448318485636e-06, -0.0007288183551281691, -0.009891186840832233, -0.00021026308240834624, -0.000248401309363544, -0.006935806944966316, -0.011630703695118427, -0.5947215557098389, -1.0859835147857666, -0.05939823016524315, -0.11125634610652924, -0.025954829528927803, -0.0005772831500507891, -1.0377261638641357, -0.0036819064989686012, -0.009438535198569298, -7.617183291586116e-05, -7.510157047363464e-06, -9.560128091834486e-05, -0.005405453033745289, -0.1009676605463028, -0.13803572952747345, -0.02237526886165142, -0.07006249576807022, -0.0007914748275652528, -0.00012003655137959868, -1.0249450206756592, -0.24151574075222015, -1.1086402082582936e-05, -4.410734163684538e-06, -5.960462772236497e-07, -0.018415898084640503, 0.0, -4.291525328881107e-06, -0.00017486473370809108, -7.152555099310121e-07, -2.47952248173533e-05, -0.00025614796322770417, -0.0014637719141319394, -0.0012373419012874365, -0.002427609171718359, -0.002254208317026496, -0.0021384721621870995, -0.0020024979021400213, -0.3088371753692627, -0.0016355245606973767, -0.00018475732940714806, -1.5258672647178173e-05, -4.291525328881107e-06, -0.0033426384907215834, -0.00215143826790154, -0.006428041495382786, -0.00014423283573705703, -0.03001594729721546, -0.003403824521228671, -1.7165990357170813e-05, -1.6212332411669195e-05, -6.6756979322235566e-06, -0.0003455280384514481, -0.0005821678787469864, -1.5497195136049413e-06, -0.000720956246368587, -0.0009846605826169252, -0.0021099227014929056, -0.5699067115783691, -0.001167569193057716, -0.027463242411613464, -0.0010920758359134197, -0.19866736233234406, -0.0045656487345695496, -0.21462346613407135], "finish_reason": "stop"}], "metrics": {"energy": 753.8283064908984, "energy_per_token": 3.4579280114261395, "time": 18.701351, "time_per_token": 0.08578601376146788}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Sort file names naturally for better readability\n    sorted_text_files = natsort.natsorted(text_files)\n\n    # Extract numeric data from each file\n    filenames = []\n    numeric_data = []\n\n    for file in sorted_text_files:\n        filenames.append(os.path.basename(file))\n        numeric_data.append(re.findall(regex, file))\n\n    # Create a pandas DataFrame with the extracted data\n    df = pd.DataFrame({'Filename': filenames, 'Numeric Data': numeric_data})\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Sort", " file", " names", " naturally", " for", " better", " read", "ability", "\n", "    ", "s", "orted", "_", "text", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "text", "_", "files", ")", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " from", " each", " file", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "\n", "    ", "for", " file", " in", " sorted", "_", "text", "_", "files", ":", "\n", "        ", "fil", "en", "ames", ".", "append", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", "\n", "        ", "numeric", "_", "data", ".", "append", "(", "re", ".", "find", "all", "(", "regex", ",", " file", "))", "\n", "\n", "    ", "#", " Create", " a", " pandas", " Data", "Frame", " with", " the", " extracted", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " fil", "en", "ames", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "})", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -1.204134225845337, -0.0001528146385680884, -0.11706306785345078, -0.01795889250934124, -0.0001227780303452164, -0.00030071981018409133, -0.09780711680650711, -0.00018773700867313892, -1.9480730295181274, -0.00488564046099782, -0.008126291446387768, -0.0024412849452346563, -0.2709115743637085, -5.864924969500862e-05, -0.0009573881980031729, -0.0002184867626056075, -0.02184869349002838, -2.622600959512056e-06, -2.264974000354414e-06, -2.0265558760002023e-06, -0.0001591317413840443, -8.272782724816352e-05, -0.00046790618216618896, -9.047575440490618e-05, -0.0019583588000386953, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.011113528162240982, -0.007925018668174744, -1.1346207857131958, -8.451581379631534e-05, -0.026933886110782623, -0.020036792382597923, -0.003004919271916151, 0.0, -1.0728830375228426e-06, -0.0003829461056739092, -0.0011304186191409826, -0.00017474555352237076, -0.0017483439296483994, -0.0011975744273513556, 0.0, -0.003548042383044958, -0.06455276906490326, -0.0007346553611569107, -0.0020035686902701855, -0.07609190791845322, -0.26261278986930847, -0.6456511616706848, -0.008463704027235508, -0.0002711643755901605, -0.015670962631702423, -5.8410845667822286e-05, -7.152531907195225e-06, -0.0008521024719811976, -0.06863261759281158, -0.15930648148059845, -0.0990823358297348, -0.017444511875510216, -2.5152843591058627e-05, -0.0004172646440565586, -0.001214600750245154, -0.032441332936286926, -0.0002631794777698815, -5.781483559985645e-05, -0.00021681819634977728, -0.023130368441343307, -0.00047791501856409013, -2.4767184257507324, -0.6923075914382935, -3.3257081508636475, -0.23971715569496155, -0.4594404995441437, -3.652773380279541, -1.7390899658203125, -1.326350450515747, -0.0008983152220025659, -0.15491577982902527, -0.00031728477915748954, -0.9445306658744812, -3.266281055402942e-05, -3.790783375734463e-05, -0.4020138382911682, -0.00013660451804753393, -0.00015984688070602715, -0.0002037079248111695, -0.004195341374725103, -3.576278118089249e-07, -0.0006384003208950162, -3.504691630951129e-05, -0.0050859833136200905, -1.1920928244535389e-07, -0.00012444675667211413, -0.0001486429391661659, -0.00029523781267926097, 0.0, 0.0, -0.13106703758239746, -0.0013571109157055616, -0.013949986547231674, -0.00021217002358753234, -1.8824851512908936, -1.6063132286071777, -0.02455069124698639, -0.19459573924541473, -0.02724088355898857, -0.25782546401023865, -0.13439984619617462, -0.26954102516174316, -0.5124383568763733, -0.0006961782928556204, -2.6966190338134766, -0.0015439982526004314, -3.540453326422721e-05, -0.21603234112262726, -0.00522557133808732, -0.006003798451274633, -4.029192859889008e-05, -0.08436442911624908, -0.00023779425828251988, -0.012142312712967396, -0.12403681874275208, -0.00019107422849629074, -0.0009858515113592148, -0.25460347533226013, -7.855583680793643e-05, -0.018934575840830803, -0.4720872640609741, -0.15992210805416107, -0.0007924277451820672, -6.770858453819528e-05, -3.576278118089249e-07, 0.0, -2.50339189733495e-06, -4.994744449504651e-05, -9.500529267825186e-05, -0.0011957883834838867, -2.1966066360473633, -0.0001746263587847352, -2.7418097943154862e-06, -0.00012313561455812305, -1.6212332411669195e-05, -5.6980417866725475e-05, -0.06380662322044373, -1.5497195136049413e-06, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.010263875126838684, 0.0, -1.7881377516459906e-06, -0.00016973962192423642, -0.0019035092554986477, -0.026706302538514137, -0.7036774754524231, -2.4685516357421875, -0.0021095657721161842, -0.049987852573394775, -0.029435623437166214, -0.002861217362806201, -0.3235901892185211, -0.8141920566558838, -0.0020462782122194767, -0.0004239375703036785, -7.867782187531702e-06, -0.0004700509598478675, -0.0051703075878322124, -0.00017128908075392246, -1.7047797441482544, -0.031014151871204376, -0.017025621607899666, -0.00651154201477766, -0.0037079169414937496, -0.18238626420497894, -0.13724790513515472, -0.5209855437278748, -2.008836507797241, -0.01903727278113365, -0.00044050050200894475, -1.1280746459960938, -0.7656863331794739, -0.3069887161254883, -0.15585578978061676, -0.020042400807142258, -0.0009058186551555991, -0.23145698010921478, -0.005215135402977467, -0.0002586507180240005, -7.152555099310121e-07, -6.639736966462806e-05, -0.02122626267373562, -0.05965095013380051, -0.001547330990433693, -0.00010394509445177391, -0.0003693613689392805, -0.0017113338690251112, 0.0, -1.1920928244535389e-07, -0.0006501944735646248, -0.019313029944896698, -0.0007706294418312609, -1.311301275563892e-06, -0.0006194579764269292, -0.00011407678539399058, -0.009115389548242092, -5.960462772236497e-07, -7.271740287251305e-06, -0.001957169035449624, -0.00121174321975559, -1.2199710607528687, -0.05381785333156586, -0.0007668177131563425, -0.14471402764320374, -0.004861914087086916, -0.30616772174835205], "finish_reason": "stop"}], "metrics": {"energy": 884.3446258430483, "energy_per_token": 3.715733722029615, "time": 20.775656, "time_per_token": 0.08729267226890756}}
{"outputs": [{"text": "# Validate the directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find text files matching the pattern\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are matching files\n    if not file_list:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Extract data from each file\n    data = []\n    for file in file_list:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(file), matches))\n\n    # Create a DataFrame\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["#", " Valid", "ate", " the", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " text", " files", " matching", " the", " pattern", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " matching", " files", "\n", "    ", "if", " not", " file", "_", "list", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " data", " from", " each", " file", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " matches", "))", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.0816802978515625, -2.0354652404785156, -0.022773398086428642, -1.0139573812484741, -0.32245463132858276, -0.8874149322509766, -0.0010919567430391908, -0.03774333745241165, -0.0038015018217265606, -0.00598389096558094, -6.079655122448457e-06, -0.0006275591440498829, -2.5033637939486653e-05, -0.6203217506408691, -0.00011681827891152352, -0.0005477358354255557, -0.005854838062077761, -0.0006503135664388537, -0.001177690108306706, -0.005450862925499678, -0.0038174153305590153, -4.2676016164477915e-05, -5.125986263010418e-06, -0.022203078493475914, -0.16684995591640472, -0.04467974603176117, -0.19053389132022858, -0.4175935983657837, -7.211902266135439e-05, -0.00040522945346310735, -0.0003693613689392805, -0.31312525272369385, -0.00015639036428183317, -0.0005722792120650411, -0.17143838107585907, -0.009339098818600178, -0.0001616347290109843, -0.00015805903240107, -0.03602857142686844, -0.0002637753786984831, -0.02414337731897831, -1.0399092435836792, -2.087617874145508, -0.001752984942868352, -0.39674878120422363, -0.0051162270829081535, -0.07646535336971283, -0.2518306374549866, -0.00010477947944309562, -1.7764015197753906, -0.08647198975086212, -0.8742517232894897, -0.00030894274823367596, -0.20339326560497284, -0.00012182447244413197, -0.0031861516181379557, -0.00027211778797209263, -0.022757668048143387, -1.5497195136049413e-06, -3.576272320060525e-06, -1.2159273865108844e-05, -0.0002540027489885688, -0.0001250427303602919, -0.0009814451914280653, -0.00010907054820563644, -0.002028790069743991, -3.099436753473128e-06, -2.0265558760002023e-06, -0.013098152354359627, -0.001496029901318252, -0.7236305475234985, -8.964136941358447e-05, -0.2959176301956177, -1.7246800661087036, -0.034242551773786545, -0.5386139154434204, -0.009672324173152447, -3.111342668533325, -0.08350013941526413, -0.03439148887991905, -3.158996332786046e-05, -0.0005459486856125295, -0.034528084099292755, -0.0025233353953808546, -4.768370445162873e-07, 0.0, -0.0005225961795076728, -0.0001591317413840443, -0.00014077626110520214, -0.0025210760068148375, -0.0009554826538078487, 0.0, -0.00206055399030447, -0.05070788785815239, -0.0003955773718189448, -0.002726529957726598, -0.09422828257083893, -0.20299935340881348, -0.4012608230113983, -0.0013680632691830397, -0.09539873898029327, -0.00011324241495458409, -0.03388376533985138, -1.156323378381785e-05, -5.864924969500862e-05, -0.0009784678695723414, -0.06711196899414062, -0.07750190049409866, -0.5596414804458618, -0.0273416880518198, -2.074220174108632e-05, -0.00035696811391972005, -0.0009556017466820776, -0.021371200680732727, -0.00030357998912222683, -8.129743218887597e-05, -0.00012885693286079913, -0.013523866422474384, -0.00031287543242797256, -0.11769434064626694, -1.9049155712127686, -0.006597640924155712, -2.7174174785614014, -0.11586941033601761, -1.2761726379394531, -0.15607711672782898, -0.4725057780742645, -0.00033718624035827816, -0.505449116230011, -0.10714949667453766, -0.0974285826086998, -0.01242091879248619, -0.041941020637750626, -0.03406674787402153, -0.42625463008880615, -0.2678261399269104, -1.6193645000457764, -0.0025272592902183533, -2.6940935640595853e-05, -9.285972191719338e-05, -0.0003524397616274655, -0.0022814455442130566, -0.3588435649871826, -7.843663479434326e-05, -0.0002119316632160917, -0.005741414614021778, -0.04892510175704956, -0.1144787147641182, -0.0007133323233574629, -0.03822076693177223, -5.0424259825376794e-05, -0.07276938855648041, -0.007499280385673046, -0.0007216709782369435, -0.0004203628050163388, -1.049428105354309, -0.00018249277491122484, -0.010067871771752834, -1.2278481335670222e-05, -3.2186455882765586e-06, -0.0008255410939455032, -0.04864785075187683, -0.09884921461343765, -1.249444603919983, -0.00016675988445058465, -0.013132390566170216, -3.3378546504536644e-06, -0.00019202772818971425, -0.00010179955279454589, -0.000428108120104298, -0.00438727717846632, -0.00013124081306159496, -0.00025900822947733104, -0.012730403803288937, -0.010409348644316196, -0.023419089615345, -0.4188665449619293, -0.003631902625784278, -0.00522035313770175, -0.44071927666664124, -0.10803597420454025, -1.311301275563892e-06, -3.3378546504536644e-06, -5.960462772236497e-07, -0.023710055276751518, 0.0, -4.410734163684538e-06, -0.0011551857460290194, -0.0003669780562631786, -0.0018340209499001503, -0.08872173726558685, -0.011679131537675858, -0.008949289098381996, -0.007538916543126106, -0.002117179101333022, -0.013983489945530891, -0.3967355787754059, -0.6041299104690552, -0.25001439452171326, -0.0004934046883136034, -0.5751017332077026, -0.00036113892565481365, -0.04169510304927826, -0.0017031225143000484, -0.0006895071710459888, -2.861018856492592e-06, -1.1801649634435307e-05, -0.00590958958491683, -0.0023754017893224955, -0.004717173986136913, -0.00013195598148740828, -0.013679685071110725, -0.0033265987876802683, -1.1086402082582936e-05, -3.194758028257638e-05, -3.933898824470816e-06, -0.00024959311122074723, -0.0006187431863509119, -1.7881377516459906e-06, -0.0007613382767885923, -0.0033050933852791786, -0.005367866717278957, -0.7249280214309692, -0.6777018904685974, -0.006247277371585369, -0.12334578484296799, -0.00596955232322216, -0.20758438110351562], "finish_reason": "stop"}], "metrics": {"energy": 804.0135778379439, "energy_per_token": 3.5263753413944907, "time": 19.534286, "time_per_token": 0.08567669298245614}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    # Find the files matching the pattern in the specified directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n\n    # Initialize the DataFrame\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Iterate over each file and extract numeric data using regex\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            content = file.read()\n            numeric_data = re.findall(regex, content)\n            if numeric_data:\n                numeric_data = [int(num) for num in numeric_data]\n            df = df.append({'Filename': os.path.basename(filename), 'Numeric Data': numeric_data}", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " the", " files", " matching", " the", " pattern", " in", " the", " specified", " directory", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " the", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " the", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " and", " extract", " numeric", " data", " using", " regex", "\n", "    ", "for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "if", " numeric", "_", "data", ":", "\n", "                ", "numeric", "_", "data", " =", " [", "int", "(", "num", ")", " for", " num", " in", " numeric", "_", "data", "]", "\n", "            ", "df", " =", " df", ".", "append", "({", "'", "Fil", "ename", "':", " os", ".", "path", ".", "bas", "ename", "(", "filename", ")", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "}"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -0.3575069308280945, -0.018358316272497177, -0.08457214385271072, -0.00044943721150048077, -0.0037047103978693485, -0.0029635580722242594, -0.0012448427733033895, -5.364403477869928e-06, -0.00043704494601115584, -2.074220174108632e-05, -0.21645140647888184, -0.00016926287207752466, -0.0005646541831083596, -0.001934325322508812, -0.00037555795279331505, -0.0011600677389651537, -0.007740739732980728, -0.001970970071852207, -3.361645576660521e-05, -4.172316494077677e-06, -0.022890964522957802, -0.21067070960998535, -0.03489665314555168, -0.16137219965457916, -0.4167577624320984, -5.519237674889155e-05, -0.00036042393185198307, -0.0005370128201320767, -1.0266244411468506, -9.917721035890281e-05, -0.10874706506729126, -0.007404739502817392, -0.00011455356434453279, -0.00011491115583339706, -0.026261432096362114, -0.00022754464589525014, -0.01532270759344101, -1.0445826053619385, -3.124270439147949, -1.3213047981262207, -0.22658705711364746, -0.0024506794288754463, -0.05199749022722244, -1.4194495677947998, -0.011258524842560291, -1.5237451791763306, -0.0006666345288977027, -0.024647114798426628, -0.0001399419124936685, -0.6256901025772095, -0.02174406871199608, -0.1574852168560028, -4.708655978902243e-05, -0.0013988957507535815, -0.00017176583060063422, -0.020528703927993774, -1.6689286894688848e-06, -1.5497195136049413e-06, -2.145764938177308e-06, -0.0001137191939051263, -6.592056161025539e-05, -0.0005947966128587723, -9.262132516596466e-05, -0.0009978797752410173, -3.576272320060525e-06, -2.622600959512056e-06, -0.004962034057825804, -0.0016692051431164145, -1.522637128829956, -0.24709323048591614, -0.02469363622367382, -0.0013948483392596245, -0.0005946775199845433, -0.0018510365625843406, -0.00015829740732442588, -0.0033237473107874393, -0.001261034864000976, 0.0, -0.0026662535965442657, -0.031102558597922325, -0.0010885033989325166, -0.003830834524706006, -0.026432229205965996, -0.443774551153183, -0.7924050092697144, -0.001347468001767993, -0.0864839032292366, -0.00011431517486926168, -0.013302503153681755, -5.9126061387360096e-05, -1.811964830267243e-05, -0.0007913556764833629, -0.07411909103393555, -0.09613359719514847, -1.6297698020935059, -0.029872026294469833, -0.3505941331386566, -4.684815212385729e-05, -0.0010442048078402877, -0.0015038858400657773, -0.043214570730924606, -0.0009659630013629794, -0.00011443436960689723, -0.00024303820100612938, -0.022520389407873154, -0.0004914983292110264, -0.12628419697284698, -1.1314469575881958, -1.616013765335083, -0.6119242906570435, -0.00044252615771256387, -0.41247090697288513, -0.00013505500101018697, -0.3243974447250366, -0.011230116710066795, -0.0010066924151033163, -4.887569048150908e-06, -2.7417760065873154e-05, -0.09946218878030777, -0.0020736397709697485, -0.04171522706747055, -0.0036339217331260443, -5.483612312673358e-06, -0.004210654646158218, -3.302042750874534e-05, -0.0013771107187494636, -0.0012261499650776386, -1.6689286894688848e-06, -0.0007664603181183338, -0.0018271195003762841, -0.0006389960180968046, -0.022702781483530998, -0.00011300401820335537, -0.09514405578374863, -0.9403424263000488, -0.0002240883477497846, -0.3842720091342926, -1.4509625434875488, -0.02141495794057846, -0.5082284212112427, -0.023163216188549995, -0.3804343342781067, -0.005348420701920986, -1.886067509651184, -0.7549380660057068, -0.04426492750644684, -0.00011562632425921038, -0.01030717696994543, -1.6793752908706665, -0.00017307691450696439, -0.09492963552474976, -1.1920928244535389e-07, -0.0007160721579566598, -0.00021371940965764225, -0.03741198778152466, -9.536738616588991e-07, -0.00010191874753218144, -0.0002865380665753037, -0.0002975021197926253, -0.059152185916900635, -0.009633481502532959, -0.002216741442680359, -0.5163818597793579, -7.10462118149735e-05, -0.0002153879904653877, -0.03385276719927788, -0.02819272130727768, -0.03229118138551712, -0.0005887205479666591, -0.06484340131282806, -0.00017391123401466757, -0.12611564993858337, -0.0003741279651876539, -0.00014482879487331957, -0.00033444532891735435, -0.6463189721107483, -0.00011038171214750037, -0.004289355129003525, -1.9430925021879375e-05, -3.4570634852570947e-06, -0.0014247277285903692, -0.03297574073076248, -0.17149101197719574, -0.9026003479957581, -0.0015092422254383564, -0.010052883066236973, -0.0016702761640772223, -0.29480528831481934, -9.63164638960734e-05, -0.0001436368766007945, -4.0531076592742465e-06, -0.0005875291535630822, -0.003204451175406575, -0.00013541258522309363, -0.00017998983094003052, -0.007057026028633118, -0.01977233774960041, -0.17295952141284943, -3.22316312789917, -0.06905058026313782, -3.576278118089249e-07, -3.4570634852570947e-06, -0.0243150033056736, -0.010839038528501987, -0.0006930810050107539, -0.0931510478258133, -3.111314072157256e-05, -0.0007432320853695273, -0.005440074019134045, -0.20890384912490845, -0.03820367157459259, -0.004256119020283222, -0.5561477541923523, -0.01301225833594799, -0.010856491513550282, -2.276871418871451e-05, -9.298280929215252e-06, -0.0002460177056491375, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.005198769737035036, -0.2680911123752594, -0.1528138518333435, -0.5445232391357422, -0.1624581664800644, -0.16102762520313263, -2.0265558760002023e-06, -5.2927523938706145e-05, -0.002318315440788865, -0.0019639506936073303, -5.638440416078083e-05, 0.0, -0.0002236116270069033, -0.26522600650787354, -2.4676019165781327e-05, -1.6689286894688848e-06, -1.1920922133867862e-06, -0.022596031427383423, -1.1920928244535389e-07, -3.2186455882765586e-06, -0.00047088501742109656, -0.00012516192509792745, -0.0009189196862280369, -0.052208300679922104, -4.136476854910143e-05, -1.1920928244535389e-07, -3.504691630951129e-05, -3.158996332786046e-05, -0.0018711454467847943, -2.3841855067985307e-07, -3.576278118089249e-07, -0.0011528043542057276], "finish_reason": "length"}], "metrics": {"energy": 940.1202594223021, "energy_per_token": 3.6723447633683675, "time": 22.054968, "time_per_token": 0.08615221875}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)), reverse=False)\n\n    if not text_files:\n        raise ValueError(f\"No text files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    data = []\n    for text_file in text_files:\n        with open(text_file, 'r') as f:\n            content = f.read()\n            numeric_data = re.findall(regex, content)\n            data.append((os.path.basename(text_file), numeric_data))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", ",", " reverse", "=", "False", ")", "\n", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " text", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " text", "_", "file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "text", "_", "file", ")", ",", " numeric", "_", "data", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -0.18753747642040253, -0.049998849630355835, -0.2164224088191986, -0.4588291347026825, -7.760223525110632e-05, -0.0003305127320345491, -0.0006364941946230829, -0.3677122890949249, -0.00023266946664080024, -0.0006180283380672336, -0.1457584798336029, -0.006870810873806477, -0.00015531764074694365, -0.00021169328829273582, -0.07501453161239624, -0.00018916724366135895, -1.9199179410934448, -0.00485716899856925, -0.00912861991673708, -0.002836730098351836, -1.3399221897125244, 0.0, -0.0008014804334379733, -4.589452510117553e-05, -0.007802603766322136, -4.768370445162873e-07, -0.0009059377480298281, -0.00482051121070981, -0.03225862979888916, -1.9311717551317997e-05, -0.0037808381021022797, -0.00020728347590193152, -0.03257865458726883, -2.264974000354414e-06, -2.861018856492592e-06, -1.6689286894688848e-06, -0.00013696208770852536, -6.174850568640977e-05, -0.00026675479602999985, -0.00029559535323642194, -0.00172216328792274, -3.4570634852570947e-06, -2.3841855067985307e-07, -2.1456704139709473, -0.0027013260405510664, -0.9396882057189941, -0.008025778457522392, -0.15515926480293274, -0.008984614163637161, -0.022266151383519173, -0.478649377822876, -0.00015496007108595222, -0.01901376247406006, -0.04127000644803047, -0.003993869759142399, 0.0, -1.1920928244535389e-07, -0.0005345107638277113, -0.0008279233006760478, -0.00035422726068645716, -0.001919690752401948, -0.001259844284504652, 0.0, -0.006165531929582357, -0.046078238636255264, -0.0009419057168997824, -0.00405014818534255, -2.5613455772399902, -0.002890696283429861, -0.8177332282066345, -0.8438157439231873, -0.0038237092085182667, -0.05668650567531586, -0.0006629414856433868, -0.041728947311639786, -0.00014244495832826942, -3.40932747349143e-05, -0.0013344916515052319, -0.10710901767015457, -0.06384699791669846, -0.5772536993026733, -0.03589988872408867, -4.2437604861333966e-05, -0.0006115949945524335, -0.0014669859083369374, -0.04225361719727516, -0.0008049347088672221, -0.00010692501382436603, -0.00013541258522309363, -0.014648154377937317, -0.0005535738891921937, -0.7821457386016846, -0.1446857750415802, -0.2000640332698822, -0.008574455976486206, -0.43844178318977356, -0.05384530499577522, -2.5533108711242676, -0.02637510560452938, -0.0026198846753686666, -0.0006289887824095786, -0.005484652239829302, -1.1920928244535389e-07, -3.576278118089249e-07, -8.427741704508662e-05, -0.00015472168161068112, -0.002828290220350027, -0.2502371072769165, -0.00010287232726113871, -0.00022218143567442894, -0.008947161957621574, -1.6689286894688848e-06, -1.6689286894688848e-06, -0.026346543803811073, -0.1217111274600029, -0.0009994279826059937, -0.07177873700857162, -5.411955135059543e-05, -0.7358906269073486, -0.007096916437149048, -0.0004829194222111255, -0.0004138090298511088, -1.15247642993927, -0.0002890407631639391, -0.010246648453176022, -1.9907753085135482e-05, -2.0265558760002023e-06, -0.0019401551689952612, -0.06651898473501205, -0.15966302156448364, -0.8064413070678711, -0.003267546882852912, -0.024800976738333702, -0.0022401732858270407, -0.33325785398483276, -5.125868119648658e-05, -0.00025733973598107696, -4.768360213347478e-06, -0.0005322470096871257, -0.005842631217092276, -0.00019369633810129017, -0.00028701478731818497, -0.008443963713943958, -0.015404647216200829, -0.07219483703374863, -0.32951176166534424, -0.0006634180317632854, -0.0007049936102703214, -0.7516701817512512, -0.09198850393295288, -8.344646857949556e-07, -2.9802276912960224e-06, -4.768370445162873e-07, -0.015455474145710468, 0.0, -4.768360213347478e-06, -0.0002131234941771254, -9.536738616588991e-07, -3.290122185717337e-05, -0.0003580405900720507, -0.0022474287543445826, -0.024290919303894043, -2.3841855067985307e-07, -7.152555099310121e-07, -0.005866215564310551, -0.003939131740480661, -0.018174778670072556, -0.0020889858715236187, -0.26216796040534973, -0.0013138956855982542, -0.00027533553657121956, -2.861018856492592e-06, -9.536697689327411e-06, -0.004255407024174929, -0.0011729273246601224, -0.007235987111926079, -0.00010835537250386551, -0.020024873316287994, -0.00323475175537169, -1.2278481335670222e-05, -2.682172998902388e-05, -5.8412379075889476e-06, -0.0004418112221173942, -0.00047505536349490285, -1.1920922133867862e-06, -0.0007205988513305783, -0.0013061572099104524, -0.0020832756999880075, -0.13615165650844574, -0.03634267672896385, -0.0007220283732749522, -0.1957295686006546, -0.004774004686623812, -0.19806008040905], "finish_reason": "stop"}], "metrics": {"energy": 771.5941533632282, "energy_per_token": 3.6568443287356787, "time": 18.078094, "time_per_token": 0.08567817061611374}}
{"outputs": [{"text": "# Ensure that the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all text files matching the pattern in the directory\n    file_pattern_with_dir = os.path.join(directory, file_pattern)\n    text_files = natsort.natsorted(glob.glob(file_pattern_with_dir))\n\n    # Ensure at least one file is found\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern_with_dir}' found in directory '{directory}'.\")\n\n    # Initialize an empty list to store numeric data for each file\n    data = []\n\n    # Iterate over each text file and extract numeric data\n    for file in text_files:\n        with open(file, \"r\") as f:\n            # Read the file content and match numeric data using regex\n            content = f.read()\n            numeric_data = re.findall(regex, content)\n\n            # Append the file name and numeric", "tokens": ["#", " Ensure", " that", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " matching", " the", " pattern", " in", " the", " directory", "\n", "    ", "file", "_", "pattern", "_", "with", "_", "dir", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")", "\n", "    ", "text", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "file", "_", "pattern", "_", "with", "_", "dir", "))", "\n", "\n", "    ", "#", " Ensure", " at", " least", " one", " file", " is", " found", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " '", "{", "file", "_", "pattern", "_", "with", "_", "dir", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " numeric", " data", " for", " each", " file", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", " and", " extract", " numeric", " data", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "#", " Read", " the", " file", " content", " and", " match", " numeric", " data", " using", " regex", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "\n", "            ", "#", " App", "end", " the", " file", " name", " and", " numeric"], "logprobs": [-1.0816802978515625, -3.2076950073242188, -1.1342335939407349, -0.05463853478431702, -1.9789220094680786, -0.006605694070458412, -0.0067370180040597916, -0.12627506256103516, -0.0005613181856460869, -0.006609010044485331, -0.0029989767353981733, -0.001476746634580195, -4.529942543740617e-06, -0.0003407612966839224, -3.4927710657939315e-05, -0.2521291673183441, -0.00026842328952625394, -0.0007706294418312609, -0.00356704811565578, -0.00038258862332440913, -0.0010939810890704393, -0.006505264900624752, -0.0025257135275751352, -4.9828242481453344e-05, -4.6491513785440475e-06, -0.01512099988758564, -0.14123882353305817, -0.032459795475006104, -0.19034479558467865, -0.45690739154815674, -6.23445157543756e-05, -0.0003135904553346336, -0.0004587313160300255, -0.293367475271225, -0.00017105070583056659, -0.000460876093711704, -0.1478542983531952, -0.006769935134798288, -0.00010358751023886725, -0.00010239553375868127, -0.03030199371278286, -0.0003184764937032014, -0.018995165824890137, -1.1438791751861572, -0.2187456637620926, -0.3867410719394684, -0.0016268364852294326, -0.19556665420532227, -0.0014898402150720358, -0.14688263833522797, -0.4731040894985199, -0.0023406746331602335, -0.3588219881057739, -0.05114099755883217, -0.00011920218821614981, -1.4710350036621094, -0.05200835317373276, -1.0209846496582031, -2.0505285263061523, -1.2651445865631104, -1.3112935448589269e-05, -1.0859763622283936, -0.00030894274823367596, -0.03598487377166748, -5.960462772236497e-07, -2.0265558760002023e-06, -6.437280717364047e-06, -0.0006237468332983553, -0.00021884430316276848, -0.0009926398051902652, -0.00013398226292338222, -0.001958120847120881, -5.483612312673358e-06, -2.276871418871451e-05, -0.00022003613412380219, -0.0028707266319543123, -0.008905100636184216, -0.9990183115005493, -0.0011288706446066499, -0.004430122673511505, -0.0023321115877479315, -1.5040218830108643, 0.0, -0.002090056659653783, -3.6954195820726454e-05, -0.006511304993182421, -4.768370445162873e-07, -0.001049920916557312, -0.007965347729623318, -0.0050423359498381615, -6.6756979322235566e-06, -0.007157754618674517, -5.6622808187967166e-05, -0.00026723151677288115, -8.344646857949556e-07, -2.264974000354414e-06, -2.276871418871451e-05, -2.861018856492592e-06, 0.0, -1.1920928244535389e-07, -0.19701680541038513, -0.01374529767781496, -0.023911435157060623, -0.00011765264935093, -0.049559347331523895, -0.7013657093048096, -1.1362056732177734, -0.0002967870968859643, -0.0007074952009133995, -0.040645357221364975, -0.6335015892982483, -0.00549686374142766, -0.025075847283005714, -1.823885577323381e-05, -0.0005171154043637216, -0.0963926836848259, -0.002639859216287732, 0.0, -5.960462772236497e-07, -0.0002615109842736274, -0.00013529339048545808, -0.00014995403762441128, -0.002522027352824807, -0.0006515049026347697, -2.3841855067985307e-07, -0.0016181482933461666, -0.040509942919015884, -0.0007439468172378838, -0.0017778557958081365, -0.0664072185754776, -0.17407555878162384, -0.6645876169204712, -0.005537527613341808, -4.160317621426657e-05, -0.0016318351263180375, -0.00011657988943625242, -1.2397689715726301e-05, -1.6738865375518799, -9.65590606938349e-06, -1.4305104514278355e-06, -3.576278118089249e-07, -0.0008295908919535577, -0.056606754660606384, -0.5907922983169556, -0.10310927033424377, -0.07760614901781082, -3.766942609217949e-05, -0.001849489752203226, -0.0026348656974732876, -0.0317753441631794, -0.0005458295345306396, -9.953480184776708e-05, -0.00025233422638848424, -0.003800314385443926, -0.00027021096320822835, -0.1276916265487671, -1.309824824333191, -0.9428630471229553, -0.001674560597166419, -0.31363004446029663, -0.03870026022195816, -0.12042640894651413, -2.314934730529785, -0.009048527106642723, -1.9801381826400757, -0.004367930814623833, -0.00955201219767332, -0.0025643580593168736, -0.0001560327800689265, -3.056262254714966, -0.23929327726364136, -0.00706045888364315, -0.0013566347770392895, -0.07912217080593109, -0.00010799778101500124, -0.11448658257722855, -0.7738247513771057, -9.762764238985255e-05, -0.24272239208221436, -0.350943922996521, -0.2585468292236328, -0.0001817776501411572, -1.2765448093414307, -0.026860777288675308, -0.05635495111346245, -0.002456625225022435, -0.6678945422172546, -0.00012933371181134135, -0.0032804980874061584, -0.5105965733528137, -0.11690431833267212, -0.002340436913073063, -2.3841855067985307e-07, -4.0531076592742465e-06, -2.3245540432981215e-05, -4.458328112377785e-05, -0.0049529001116752625, -0.2500900626182556, -4.076874756719917e-05, -0.00020430385484360158, -0.002071617403998971, -0.03824738785624504, -2.034336566925049, -0.0015168600948527455, -0.00030071981018409133, -0.08700987696647644, -4.6491513785440475e-06, -0.14343108236789703, -0.005902005359530449, -0.0024038248229771852, -0.0007375142886303365, -1.339229941368103, -0.31374025344848633, -0.11440833657979965, -0.4225027561187744, -0.4362770617008209, -1.2717983722686768, -3.32395076751709, -1.1573798656463623, -0.0764283612370491, -0.05913926661014557, -2.022590160369873, -0.012166572734713554, -0.00013958434283267707, -0.3560850918292999, -0.00021789084712509066, -0.0036083844024688005, -1.2516897186287679e-05, -8.344646857949556e-07, -0.0005972985527478158, -0.022004736587405205, -0.002311417367309332, -0.5006049275398254, -0.0017108578467741609, -0.009088810533285141, -0.005733828525990248, -0.10080773383378983, -1.4305012882687151e-05, -0.00012170527770649642, -4.529942543740617e-06, -0.00014661667228210717, -0.002980316523462534, -0.00014935807848814875, -0.00019095504831057042, -0.008369017392396927, -0.012804081663489342, -0.8007190227508545, -0.049540627747774124, -0.02084106020629406, -0.42232272028923035, -0.00015698630886618048, -0.601416289806366, -0.9865142107009888, -0.08633104711771011, -0.005868467036634684, -0.1181999146938324], "finish_reason": "length"}], "metrics": {"energy": 916.820769955634, "energy_per_token": 3.5813311326391952, "time": 22.253565, "time_per_token": 0.08692798828125}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    sorted_files = natsort.natsorted(text_files)\n\n    data = []\n    for file in sorted_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(file), matches))\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " found", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "s", "orted", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "text", "_", "files", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " sorted", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " matches", "))", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -0.1338587999343872, -0.04860265925526619, -0.362557053565979, -0.4699718952178955, -7.998623186722398e-05, -0.00038818930624984205, -0.0008207766804844141, -0.47714242339134216, -0.00020430385484360158, -0.00062851223628968, -0.20645946264266968, -0.00754057290032506, -0.00013886917440686375, -0.0003688847064040601, -0.12181571871042252, -0.00020823694649152458, -1.9203169345855713, -0.006823097355663776, -0.009119524620473385, -0.0032051641028374434, -0.20017488300800323, -5.066266385256313e-05, -0.0008946230518631637, -0.0002759314374998212, -0.019839655607938766, -2.50339189733495e-06, -2.861018856492592e-06, -2.0265558760002023e-06, -0.0002087136817863211, -0.0001565095444675535, -0.0005423743859864771, -0.0001627074379939586, -0.002209009835496545, -2.50339189733495e-06, -7.033323527139146e-06, -0.011939608491957188, -0.006940897088497877, -0.4017769694328308, -0.0768662616610527, -0.019563928246498108, -0.001794277224689722, 0.0, -1.0728830375228426e-06, -0.0003610197745729238, -0.0008556757238693535, -0.00017617580306250602, -0.00147162820212543, -0.0014962679706513882, 0.0, -0.003364380681887269, -0.06072009727358818, -0.000610999355558306, -0.0035544568672776222, -0.09392142295837402, -0.15968193113803864, -0.9515864849090576, -0.003419268876314163, -0.04528706893324852, -0.00040189296123571694, -0.026833852753043175, -4.207999518257566e-05, -9.417489309271332e-06, -0.0013394916895776987, -0.12091085314750671, -0.13613928854465485, -0.36408644914627075, -0.029392793774604797, -3.0517112463712692e-05, -0.0005217621219344437, -0.0011966219171881676, -0.03940921649336815, -0.0004109491710551083, -9.095255518332124e-05, -0.00025555206229910254, -0.030754664912819862, -0.00034600470098666847, -1.6556977033615112, -0.0008868813747540116, -0.00021371940965764225, -0.5062211155891418, -0.0010845737997442484, -0.005475167650729418, -3.576278118089249e-07, -0.0010178867960348725, -8.5588610090781e-05, -0.017293497920036316, -1.1920928244535389e-07, -7.83174327807501e-05, -0.0006861716392450035, -0.0008964095613919199, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.5145604610443115, -0.02104710415005684, -0.35341617465019226, -0.00018594920402392745, -0.543828010559082, -0.12410072982311249, -0.26191315054893494, -0.008156916126608849, -0.10498326271772385, -0.03070264495909214, -0.5779049396514893, -0.17350426316261292, -0.0010838593589141965, -3.349725011503324e-05, -2.0265558760002023e-06, -0.00010477947944309562, -0.00015948931104503572, -0.0019114810274913907, -0.2981311082839966, -5.793403761344962e-05, -0.0001971527235582471, -0.007085671182721853, -0.039614561945199966, -0.13658571243286133, -0.0007898071780800819, -0.03759730979800224, -2.52720492426306e-05, -0.02106134407222271, -0.007971733808517456, -0.0002026352594839409, -0.000285584683297202, -0.6133356690406799, -0.00014983485743869096, -0.014977619983255863, -8.34461570775602e-06, -2.622600959512056e-06, -0.0012066233903169632, -0.08315575122833252, -0.13823498785495758, -1.4104068279266357, -0.00015496007108595222, -0.012504744343459606, -2.9802276912960224e-06, -0.00013290952483657748, -3.790783375734463e-05, -0.00037722624256275594, -0.007839507423341274, -0.00015829740732442588, -0.00024673278676345944, -0.015580359846353531, -0.005713915918022394, -0.03929896280169487, -0.7972027063369751, -0.0024077491834759712, -0.0027359218802303076, -0.44691336154937744, -0.12474504113197327, -7.152555099310121e-07, -3.6954811548639555e-06, -5.960462772236497e-07, -0.0102424006909132, 0.0, -3.3378546504536644e-06, -0.0003856868715956807, -0.0001770101225702092, -0.0015750633319839835, -0.10103511810302734, -0.015462400391697884, -0.004564105998724699, -0.009317722171545029, -0.0011706650257110596, -1.3413342237472534, -0.0006596058374270797, -6.437280717364047e-06, -8.583032467868179e-06, -0.0027575583662837744, -0.0009403574513271451, -0.002968787681311369, -0.00010966652916977182, -0.03289234638214111, -0.0026688692159950733, -7.867782187531702e-06, -1.585470999998506e-05, -6.437280717364047e-06, -0.00043442347669042647, -0.0003968881501350552, -1.4305104514278355e-06, -0.000392598332837224, -0.001368777477182448, -2.4769461154937744, -6.9141146923357155e-06, -1.4305104514278355e-06, -3.2186455882765586e-06, -2.062299427052494e-05, -0.18074668943881989], "finish_reason": "stop"}], "metrics": {"energy": 751.1607296810141, "energy_per_token": 3.6641986813708005, "time": 17.649412, "time_per_token": 0.08609469268292684}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n\n    file_pattern = os.path.join(directory, file_pattern)\n    matching_files = glob.glob(file_pattern)\n\n    if not matching_files:\n        raise ValueError(\"No matching files found.\")\n\n    matching_files = natsort.natsorted(matching_files)\n    data = {'Filename': [], 'Numeric Data': []}\n\n    for filename in matching_files:\n        with open(filename, 'r') as file:\n            file_data = file.read()\n            numeric_data = re.findall(regex, file_data)\n\n            if numeric_data:\n                numeric_data = [int(num) for num in numeric_data]\n            else:\n                numeric_data = []\n\n            data['Filename'].append(os.path.basename(filename))\n            data['Numeric Data'].append(numeric_data)\n\n    df = pd.DataFrame(data)\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "file", "_", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")", "\n", "    ", "matching", "_", "files", " =", " glob", ".", "glob", "(", "file", "_", "pattern", ")", "\n", "\n", "    ", "if", " not", " matching", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " matching", " files", " found", ".", "\"", ")", "\n", "\n", "    ", "matching", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "matching", "_", "files", ")", "\n", "    ", "data", " =", " {'", "Fil", "ename", "':", " []", ",", " '", "N", "umeric", " Data", "':", " []", "}", "\n", "\n", "    ", "for", " filename", " in", " matching", "_", "files", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "file", "_", "data", " =", " file", ".", "read", "()", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " file", "_", "data", ")", "\n", "\n", "            ", "if", " numeric", "_", "data", ":", "\n", "                ", "numeric", "_", "data", " =", " [", "int", "(", "num", ")", " for", " num", " in", " numeric", "_", "data", "]", "\n", "            ", "else", ":", "\n", "                ", "numeric", "_", "data", " =", " []", "\n", "\n", "            ", "data", "['", "Fil", "ename", "']", ".", "append", "(", "os", ".", "path", ".", "bas", "ename", "(", "filename", "))", "\n", "            ", "data", "['", "N", "umeric", " Data", "']", ".", "append", "(", "numeric", "_", "data", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -0.2744103670120239, -0.0003999863693024963, -0.000661631056573242, -0.002075662137940526, -0.006111623719334602, -0.0017689309315755963, -0.008452828973531723, -0.0021190824918448925, -8.153582894010469e-05, -6.6756979322235566e-06, -0.022072603926062584, -1.9102814197540283, -0.43625470995903015, -0.6629285216331482, -0.0010481346398591995, -1.1625006198883057, -0.041724372655153275, -0.0006139777251519263, -0.0008605591137893498, -0.13020694255828857, -0.0001854724541772157, -1.854818344116211, -0.10555516183376312, -1.2757856845855713, -0.1077054962515831, -0.05528394505381584, -8.106198947643861e-06, -3.8265450712060556e-05, -7.510157047363464e-06, -0.006938766222447157, -0.0003411188081372529, -0.00163588160648942, -0.00027307120035402477, -0.0021686863619834185, -7.510157047363464e-06, -2.145764938177308e-06, -0.00019214690837543458, -0.007476681377738714, -0.15633642673492432, -1.7898967266082764, -0.0005586970364674926, -0.00648785475641489, -0.00024232311989180744, -0.134363055229187, -3.6477376852417365e-05, -0.00102646101731807, -5.209310256759636e-05, -0.0011397063499316573, -2.3841855067985307e-07, -8.344646857949556e-07, -0.015699949115514755, -0.0045814309269189835, -0.24123884737491608, -6.389413465512916e-05, -0.01524287462234497, -0.021097645163536072, -0.0025160820223391056, -3.576278118089249e-07, -2.3841855067985307e-07, -0.0005878866068087518, -0.0009335688664577901, -0.0001736728590913117, -0.0019546705298125744, -0.0007459718617610633, 0.0, -0.0009964506607502699, -0.0943172350525856, -0.001817719079554081, -1.5066149234771729, -0.025086890906095505, -0.014336442574858665, -0.0492950975894928, -0.001057542278431356, -0.00011884459672728553, -0.0002162222663173452, -0.01745927333831787, -0.00031192204914987087, -2.5799174308776855, -3.540453326422721e-05, -0.0005833592731505632, -0.0546845868229866, -0.03718229755759239, -4.768370445162873e-07, -0.0049133989959955215, -0.0001062098381225951, -0.020169401541352272, 0.0, -0.00025674383505247533, -0.00032824851223267615, -0.003133508376777172, 0.0, -7.152555099310121e-07, -0.1489049196243286, -0.08670418709516525, -1.6577264070510864, -1.0840739011764526, -0.1480417251586914, -2.0600380897521973, -0.0012234115274623036, -5.745722592109814e-05, -0.0021400186233222485, -0.0291509497910738, -0.001585775287821889, -0.010037423111498356, -0.0010642108973115683, -9.536738616588991e-07, -0.0005376085755415261, -0.00011729506513802335, -0.0005042473785579205, -0.002151676220819354, -0.030487366020679474, -0.060495249927043915, -4.8993817472364753e-05, -0.023658480495214462, -1.2523750066757202, -0.0002669931564014405, -0.0013971101725474, 0.0, -1.1920928244535389e-07, -0.00010144196130568162, -0.0002317160106031224, -0.0018449680646881461, -0.40289220213890076, -9.393251093570143e-05, -0.0004161922261118889, -0.006729913409799337, -0.033346038311719894, -0.039831437170505524, -0.0010890988633036613, -0.025326581671833992, -0.00011693747364915907, -0.13316525518894196, -0.00036006642039865255, -0.00016973962192423642, -0.00041166413575410843, -2.110785722732544, -0.000575376907363534, -1.211988091468811, -0.0021065918263047934, -0.15242968499660492, -4.589452510117553e-05, -3.814689989667386e-06, -0.0022533759474754333, -0.11713655292987823, -0.15117956697940826, -0.4929644465446472, -0.0008076743106357753, -0.06659962236881256, -0.003242594189941883, -0.3420303761959076, -8.642300235806033e-05, -0.00029023250681348145, -5.483612312673358e-06, -0.0005178302526473999, -0.004642541520297527, -0.00015746307326480746, -0.0003649522550404072, -4.1126360883936286e-05, -4.768370445162873e-07, -0.004390600603073835, -0.0058554308488965034, -2.446884870529175, -0.3977673649787903, -1.373932123184204, -0.2693626582622528, -4.768370445162873e-07, -1.5497195136049413e-06, -0.037800274789333344, -0.0025160820223391056, -0.0003165697562508285, -0.05286817252635956, -2.777537883957848e-05, -0.0013230626937001944, -0.006286844611167908, -0.13744419813156128, -0.036108486354351044, -0.0028431490063667297, -0.4997533857822418, -0.0313480906188488, -0.006054513156414032, -3.290122185717337e-05, -1.5020257706055418e-05, -0.0002759314374998212, -2.3841855067985307e-07, 0.0, -0.004909247159957886, -0.03390750288963318, -1.7457338571548462, -0.1754847764968872, -1.6212332411669195e-05, -0.0026497275102883577, -0.00013481661153491586, -0.00693332077935338, -1.0728830375228426e-06, -4.887569048150908e-06, -0.000977157847955823, -0.01855890266597271, -0.02043129876255989, -0.003976297099143267, -0.04962990805506706, -0.016107195988297462, -0.0007992172613739967, -0.0005663221818394959, -5.960462772236497e-07, -2.264974000354414e-06, -0.00040820849244482815, -0.00020644917094614357, -0.0001227780303452164, -0.3589124083518982, -2.3841830625315197e-06, -1.311301275563892e-06, -1.1920928244535389e-07, -0.018944986164569855, 0.0, -5.364403477869928e-06, -0.0004693360242526978, -0.0005749003030359745, -0.0010400369064882398, -0.00018225439998786896, -0.0005364171229302883, -1.6927575416048057e-05, -3.6954811548639555e-06, 0.0, -1.0251946150674485e-05, -2.145764938177308e-06, -4.362964682513848e-05, -2.5510462364763953e-05, -0.0004247716860845685, -0.0010837402660399675, -2.3841855067985307e-07, 0.0, -0.001190073206089437, -0.00034409802174195647, -0.0038410471752285957, -0.0032357024028897285, -0.5773548483848572, -0.000636255950666964, -0.00018153927521780133, -7.629365427419543e-06, -4.9828242481453344e-05, -0.003979502711445093, -0.00015496007108595222, -0.014572849497199059, -0.0021460852585732937, -0.1219378188252449, -0.030586685985326767, -0.0004988856380805373, -0.12693151831626892, -0.005959717091172934, -0.17955639958381653], "finish_reason": "stop"}], "metrics": {"energy": 906.2313235359192, "energy_per_token": 3.539966107562184, "time": 22.282063, "time_per_token": 0.08703930859375}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)), alg=natsort.PATH)\n\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n\n    data = []\n\n    for file in files:\n        if os.path.isfile(file):\n            with open(file, 'r') as f:\n                content = f.read()\n\n            numbers = re.findall(regex, content)\n            data.append((os.path.basename(file), numbers))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", ",", " al", "g", "=", "n", "ats", "ort", ".", "PATH", ")", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", " were", " found", " in", " the", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "\n", "            ", "numbers", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "data", ".", "append", "((", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " numbers", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.6537284255027771, -0.018062159419059753, -0.0030337998177856207, -3.576272320060525e-06, -0.0004732680681627244, -9.059865078597795e-06, -1.4275017976760864, -0.0004002247005701065, -0.0003636414185166359, -0.0010026433737948537, -0.0008416209602728486, -0.007836432196199894, -0.0019396792631596327, -0.009119642898440361, -0.0039451876655220985, -4.351044481154531e-05, -6.6756979322235566e-06, -0.03225620836019516, -0.1338587999343872, -0.04860265925526619, -1.5405031442642212, -0.5790008902549744, -0.2338925153017044, -0.00010585224663373083, -0.0003813969960901886, -0.0009067714563570917, -0.017787812277674675, -0.00012659224739763886, -0.0007223857101053, -0.08440617471933365, -0.019789518788456917, -0.0002131234941771254, -0.0002196785935666412, -0.12169761210680008, -0.0001752223033690825, -1.1713687181472778, -0.03165442869067192, -1.8741450309753418, 0.0, -0.0016715852543711662, -4.303362584323622e-05, -0.010709903202950954, -8.344646857949556e-07, -0.0007571690948680043, -0.018102431669831276, -0.02915731817483902, -2.682172998902388e-05, -0.005446594674140215, -0.00028534632292576134, -0.03512318432331085, -4.529942543740617e-06, -4.0531076592742465e-06, -2.50339189733495e-06, -0.00011896379146492109, -0.0001134808044298552, -0.0005200940649956465, -0.00032181330607272685, -0.0017007424030452967, -5.125986263010418e-06, -3.576278118089249e-07, -2.0008161067962646, -0.0017055026255548, -1.1891882419586182, -0.00525664072483778, -0.0016086269170045853, -0.0016786068445071578, -3.6954811548639555e-06, -8.344646857949556e-07, -1.9907753085135482e-05, -1.2618547677993774, -0.08095840364694595, -0.009676102548837662, -0.91826993227005, -0.00010692501382436603, -0.022896790876984596, -0.04183904826641083, -0.008531314320862293, -0.00043108707177452743, -0.0010066924151033163, -0.00020585325546562672, -0.0017629809444770217, -0.0014362744987010956, -2.3841855067985307e-07, -0.0033279056660830975, -0.06695856899023056, -0.0006482883472926915, -0.004251608159393072, -0.023177659139037132, -0.1805349439382553, -0.11517377197742462, -0.0031513336580246687, -0.020832886919379234, -0.0003623305819928646, -0.06552223861217499, -1.966933996300213e-05, -8.940656698541716e-06, -0.001430917764082551, -1.1151090860366821, -2.0503786799963564e-05, -0.07327602803707123, -0.2902967035770416, -0.021152852103114128, -0.07071058452129364, -5.030505417380482e-05, -0.000785280775744468, -0.0019945267122238874, -0.023196527734398842, -0.0007252446957863867, -0.0001262346631847322, -0.00017093151109293103, -0.013317443430423737, -0.0004465774691198021, -0.5931412577629089, -0.07735682278871536, -0.17084196209907532, -0.00692669115960598, -0.897981584072113, -5.9602869441732764e-05, -0.029444418847560883, -0.3275679647922516, -0.05865834653377533, -0.006979016587138176, -3.111314072157256e-05, -0.00012182447244413197, -0.0036351096350699663, -2.490527629852295, -0.2682957947254181, -6.556489552167477e-06, -0.10347975045442581, -1.7881377516459906e-06, -0.3528338074684143, -0.0787125825881958, -0.0004631400224752724, -0.003545666579157114, -0.061966605484485626, -0.006576442625373602, -0.0014873405452817678, -0.23331806063652039, -7.903263758635148e-05, -0.0002795067266561091, -0.0022966694086790085, -0.03635543957352638, -0.10071514546871185, -0.0011143434094265103, -0.039514873176813126, -8.535020606359467e-05, -0.03161054104566574, -0.012106509879231453, -0.00153840403072536, -0.00028618055512197316, -0.6229621767997742, -0.000192504478036426, -0.015586110763251781, -1.1444026313256472e-05, -2.3841830625315197e-06, -0.0008132726070471108, -0.08382752537727356, -2.7474989891052246, -0.2044743299484253, -2.675278902053833, -0.0067065865732729435, -0.2305314838886261, -3.9934315282152966e-05, -0.00029797881143167615, -9.894321920000948e-06, -0.0007354891858994961, -0.005871311295777559, -0.0002079985715681687, -0.000387831823900342, -0.010791986249387264, -0.014553464017808437, -0.45006483793258667, -0.4291468858718872, -0.0031847255304455757, -0.0027573206461966038, -0.631748616695404, -0.11371966451406479, -2.9802276912960224e-06, -2.3841830625315197e-06, -3.576278118089249e-07, -0.03350859507918358, 0.0, -4.410734163684538e-06, -0.00021944021864328533, -0.000568228424526751, -0.001907792640849948, -0.039990197867155075, -0.016108369454741478, -0.004155928734689951, -0.01692681945860386, -0.00660119391977787, -0.46564361453056335, -0.0014913876075297594, -0.00034981805947609246, -5.722029527532868e-06, -1.823885577323381e-05, -0.003720743814483285, -0.0014290130930021405, -0.006266824435442686, -0.0001419681793777272, -0.023039506748318672, -0.004589856136590242, -1.9192511899746023e-05, -2.8013790142722428e-05, -6.556489552167477e-06, -0.00037222131504677236, -0.0010432521812617779, -2.3841830625315197e-06, -0.0007574073388241231, -0.0012769886525347829, -0.004287099931389093, -1.1470786333084106, -0.000896052282769233, -0.05260796472430229, -0.0011369676794856787, -0.26316583156585693, -0.006284475326538086, -0.20069672167301178], "finish_reason": "stop"}], "metrics": {"energy": 784.2172578887931, "energy_per_token": 3.5973268710495097, "time": 18.919273, "time_per_token": 0.08678565596330276}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n\n    # Find all the text files matching the pattern in the specified directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern {file_pattern} in directory {directory}.\")\n\n    # Create an empty list to store the extracted data\n    data = []\n    # Iterate over each text file and extract the numeric data\n    for file in natsort.natsorted(files):\n        with open(file, 'r') as f:\n            content = f.read()\n            # Extract the numeric data using the regular expression\n            match = re.findall(regex, content)\n            if match:\n                data.extend(match)\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame({'Filename': files, 'Numeric Data': data})\n\n    return df", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " the", " text", " files", " matching", " the", " pattern", " in", " the", " specified", " directory", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " {", "file", "_", "pattern", "}", " in", " directory", " {", "directory", "}", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " the", " extracted", " data", "\n", "    ", "data", " =", " []", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", " and", " extract", " the", " numeric", " data", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "#", " Ext", "ract", " the", " numeric", " data", " using", " the", " regular", " expression", "\n", "            ", "match", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "            ", "if", " match", ":", "\n", "                ", "data", ".", "extend", "(", "match", ")", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " from", " the", " extracted", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " files", ",", " '", "N", "umeric", " Data", "':", " data", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -0.3575069308280945, -0.018358316272497177, -0.08457214385271072, -0.00044943721150048077, -0.0037047103978693485, -0.0029635580722242594, -0.0012448427733033895, -5.364403477869928e-06, -0.00043704494601115584, -2.074220174108632e-05, -1.6368310451507568, -6.41325386823155e-05, -0.00021205084340181202, -0.0006923662149347365, -0.00027771908207796514, -0.00036054308293387294, -0.000967153930105269, -0.009220518171787262, -0.002628207439556718, -3.790783375734463e-05, -3.814689989667386e-06, -0.019937003031373024, -0.14014901220798492, -0.031498268246650696, -0.18926729261875153, -2.249636173248291, -0.0004033228906337172, -0.001726447488181293, -1.0187715291976929, -6.544376083184034e-05, -0.3428790867328644, -0.013624063692986965, -0.00010299152199877426, -0.00014661667228210717, -0.02327817492187023, -0.00022539935889653862, -0.013764698058366776, -1.1019469499588013, -0.35270413756370544, -2.3619577884674072, -0.7884711623191833, -0.002268124371767044, -0.32314467430114746, -0.003946137614548206, -0.1245141476392746, -0.872573733329773, -0.005688194651156664, -2.3993170261383057, -0.0005631053354591131, -0.022967742756009102, -0.0001161031104857102, -1.2139724493026733, -0.01580016314983368, -0.1018650159239769, -5.8530047681415454e-05, -0.0026500842068344355, -0.00013779645087197423, -0.022514328360557556, -2.622600959512056e-06, -1.6689286894688848e-06, -2.9802276912960224e-06, -8.272782724816352e-05, -5.9960475482512265e-05, -0.0006261295638978481, -7.64102369430475e-05, -0.0024261821527034044, -4.172316494077677e-06, -1.1920922133867862e-06, -0.010007210075855255, -0.0013392536202445626, -1.5060300827026367, -0.24435240030288696, -0.04111213609576225, -0.0017572689102962613, -0.00036090059438720345, -0.0025620989035815, -0.00018809456378221512, -0.0029408561531454325, -0.001563875237479806, 0.0, -0.0018402085406705737, -0.0761885717511177, -0.0008526980527676642, -0.003727751085534692, -0.0637606531381607, -0.18658684194087982, -0.5843636989593506, -0.20627781748771667, -0.014209521003067493, -1.811964830267243e-05, -1.0847986231965479e-05, -0.007975636050105095, -2.213176727294922, -0.0860135555267334, -0.010356495156884193, -0.0004752936656586826, -0.280576229095459, -0.04774473235011101, -0.00032074074260890484, -6.8662193370983e-05, -9.07141511561349e-05, -0.022969957441091537, -0.0004164305282756686, -0.1170216053724289, -1.8414742946624756, -0.48915737867355347, -0.0032253647223114967, -0.786284863948822, -0.03726097568869591, -0.05617363750934601, -0.06878542900085449, -0.8474982976913452, -1.4919373989105225, -0.15288905799388885, -0.0001658063702052459, -0.4505515992641449, -0.10062848031520844, -0.008875089697539806, -0.0007666985620744526, -2.3143134117126465, -1.5375994443893433, -0.9589580297470093, -0.0001961992384167388, -0.2113381326198578, -0.4892151355743408, -1.7832162380218506, -0.0006394725642167032, -1.4270825386047363, -0.03489883989095688, -0.8000912666320801, -0.052811071276664734, -0.006018136162310839, -0.28291475772857666, -0.0011261318577453494, -0.012699211947619915, -0.3651168942451477, -0.05075230821967125, -0.24241748452186584, -1.1920928244535389e-07, -0.0003083468764089048, -0.00024530262453481555, -0.02169087715446949, -8.344646857949556e-07, -0.00022146634000819176, -0.0002843929105438292, -0.000328367663314566, -0.05481505021452904, -0.008796866983175278, -0.0036264387890696526, -0.27707639336586, -5.900685573578812e-05, -0.00015770144818816334, -0.007797990459948778, -0.05683799460530281, -0.20346418023109436, -0.0005606033373624086, -0.027911055833101273, -0.00010072677832795307, -0.022685883566737175, -0.011429546400904655, -0.0006983225466683507, -0.0007803970365785062, -1.8275094032287598, -0.0001731960946926847, -0.011712711304426193, -1.3351351299206726e-05, -3.814689989667386e-06, -0.0016296928515657783, -0.05815368518233299, -0.06323719024658203, -0.4411965012550354, -1.0324071645736694, -0.003497437806800008, -0.3477019667625427, -0.011206894181668758, -0.003701265901327133, -0.04764676094055176, -0.4033944606781006, -0.4314378499984741, -0.00032217081752605736, -0.042984265834093094, -0.0004067785630468279, -2.68497371673584, -0.01534348726272583, -0.010778424330055714, -8.821448318485636e-06, -0.02015666849911213, -0.00023910524032544345, -0.000427274004323408, -0.0062328241765499115, -0.00029404606902971864, -0.0007596705690957606, -0.012210735119879246, -0.0036289331037551165, -0.017174215987324715, -2.182003974914551, -0.061409804970026016, -0.012753825634717941, -0.007390421349555254, -0.0021083762403577566, -2.2010464668273926, -0.01040734350681305, -2.875992774963379, -0.6728913187980652, -0.25272467732429504, -0.0010656398953869939, -0.048578131943941116, -0.6183940768241882, -0.006017543841153383, -0.04003383591771126, -0.3732655942440033, -0.0704931914806366, -0.6643356084823608, -0.0004895919119007885, -2.3934295177459717, -0.0018453251104801893, -0.0726737231016159, -0.01038539968430996, -0.06357620656490326, -0.0005757343024015427, -0.0372784323990345, -0.002318196464329958, -0.001005025114864111, -1.168244216387393e-05, -0.0009413101943209767, -0.0396968275308609, -0.09359938651323318, -0.8312769532203674, -0.00014172980445437133, -0.001401038491167128, -0.9975780844688416, -0.00498623214662075, -0.04496448114514351, -0.004867964424192905, -7.033323527139146e-06, -0.0009545299108140171, -0.0001225396408699453, -0.16718102991580963, -0.01705128699541092, -0.003455502912402153, -1.1129093170166016, -0.0008531744824722409, -0.09950028359889984, -0.001280679483897984, -0.22111226618289948, -0.009390825405716896, -0.2654682993888855], "finish_reason": "stop"}], "metrics": {"energy": 948.6878187694551, "energy_per_token": 3.779632744101415, "time": 23.07297, "time_per_token": 0.09192418326693227}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory '{}' does not exist\".format(directory))\n\n    # Initialize empty list for data\n    data = []\n\n    # Use glob to find all files matching the pattern in the directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Sort the files using natsorted\n    sorted_files = natsort.natsorted(files)\n\n    if not sorted_files:\n        raise ValueError(\"No files matching the pattern '{}' found in directory '{}'\".format(file_pattern, directory))\n\n    # Loop through each file\n    for file in sorted_files:\n        filename = os.path.basename(file)\n        # Read the file and extract numeric data using the regular expression\n        with open(file, \"r\") as f:\n            text = f.read()\n            # Find all matches of the regex in the text\n            matches = re.findall(regex, text)\n            # Convert the matches to", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " '", "{}", "'", " does", " not", " exist", "\"", ".", "format", "(", "directory", "))", "\n", "\n", "    ", "#", " Initialize", " empty", " list", " for", " data", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "#", " Use", " glob", " to", " find", " all", " files", " matching", " the", " pattern", " in", " the", " directory", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "#", " Sort", " the", " files", " using", " n", "ats", "orted", "\n", "    ", "s", "orted", "_", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")", "\n", "\n", "    ", "if", " not", " sorted", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " '", "{}", "'", " found", " in", " directory", " '", "{}", "'", "\"", ".", "format", "(", "file", "_", "pattern", ",", " directory", "))", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", "\n", "    ", "for", " file", " in", " sorted", "_", "files", ":", "\n", "        ", "filename", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "        ", "#", " Read", " the", " file", " and", " extract", " numeric", " data", " using", " the", " regular", " expression", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "text", " =", " f", ".", "read", "()", "\n", "            ", "#", " Find", " all", " matches", " of", " the", " regex", " in", " the", " text", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " text", ")", "\n", "            ", "#", " Convert", " the", " matches", " to"], "logprobs": [-1.0816802978515625, -0.5104598999023438, -0.11508665233850479, -0.23859965801239014, -0.3575069308280945, -0.018358316272497177, -0.08457214385271072, -0.00044943721150048077, -0.0037047103978693485, -0.0029635580722242594, -0.0012448427733033895, -5.364403477869928e-06, -0.00043704494601115584, -2.074220174108632e-05, -1.6368310451507568, -6.41325386823155e-05, -0.00021205084340181202, -0.0006923662149347365, -0.00027771908207796514, -0.00036054308293387294, -0.000967153930105269, -0.009220518171787262, -0.002628207439556718, -3.790783375734463e-05, -3.814689989667386e-06, -0.019937003031373024, -2.1171083450317383, -0.25292012095451355, -2.968975067138672, -0.024207958951592445, -0.0017597679980099201, -0.3289501667022705, -0.00023231192608363926, -0.0008746135863475502, -2.109607458114624, -0.0016467118402943015, -0.00023934361524879932, -8.332382276421413e-05, -0.0013630633475258946, -0.000277123210253194, -0.00019905969384126365, -0.03227837011218071, -0.00026770823751576245, -0.02162858285009861, -3.9544241428375244, -1.984135389328003, -1.6990846395492554, -1.805633306503296, -2.1196181774139404, -0.5061527490615845, -0.00013565097469836473, -0.10575584322214127, -0.09393064677715302, -0.00852564163506031, -0.00043025295599363744, -0.04982636123895645, -0.0001784403866622597, -0.012728520669043064, -3.1998038291931152, -0.20147103071212769, -0.09749811142683029, -0.4879807233810425, -0.409267783164978, -0.3865445852279663, -0.1961439996957779, -0.05988968536257744, -0.038882479071617126, -1.0370817184448242, -0.032725878059864044, -0.09534835070371628, -0.04725636541843414, -6.818538531661034e-05, -0.5328717827796936, -0.012208144180476665, -0.12709981203079224, -7.581423415103927e-05, -0.0053050220012664795, -0.0008818790083751082, -0.022994421422481537, -2.7418097943154862e-06, -4.0531076592742465e-06, -1.5497195136049413e-06, -9.16677454370074e-05, -7.1403817855753e-05, -0.00038425691309385, -9.42901024245657e-05, -0.0016012478154152632, -4.529942543740617e-06, -1.1920928244535389e-07, -0.003676324151456356, -0.001763456966727972, -0.19575750827789307, -0.00013600854435935616, -0.11271968483924866, -1.062448263168335, -0.6454277634620667, -0.49700725078582764, -0.9133996963500977, -0.1970047503709793, -7.009260298218578e-05, -2.4348278045654297, -0.2426529973745346, -8.701899787411094e-05, -0.9435028433799744, -0.00015031162183731794, -0.00013815402053296566, -0.001157329068519175, -0.00018880968855228275, -0.0035780949983745813, -3.576278118089249e-07, -0.0007509748684242368, -6.639736966462806e-05, -0.0014391313306987286, 0.0, -4.7205765440594405e-05, -0.000164018536452204, -0.0004968600696884096, -0.13464878499507904, -0.0011750705307349563, -0.005834927782416344, -0.00013624693383462727, -2.2426888942718506, -0.19580906629562378, -0.07299526035785675, -1.4781842764932662e-05, -1.1920928244535389e-07, -0.00038890427094884217, -0.009845269843935966, -0.0005365362740121782, -0.03202405944466591, -0.0004574206250254065, -9.536738616588991e-07, -0.021731819957494736, -0.052696969360113144, -0.003066838951781392, -0.04177753999829292, -0.32366523146629333, -0.1285126954317093, -0.009209769777953625, -1.563313603401184, -0.0007465674425475299, -0.007984742522239685, -0.25300490856170654, -0.16576823592185974, -0.2796488106250763, -0.03889463096857071, -3.8742269680369645e-05, -0.0008875959902070463, -0.014659549109637737, -0.005472203716635704, -0.00022659118985757232, -4.23184028477408e-05, -0.010836916044354439, -1.6093124941107817e-05, -3.1709168979432434e-05, -6.0437283536884934e-05, -0.000961913785431534, -0.00017045476124621928, -6.01988795096986e-05, -0.007819517515599728, -0.00020954797219019383, -0.4328884780406952, -1.314929485321045, -0.30489468574523926, -0.2516261637210846, -0.012002390809357166, -0.6636662483215332, -5.4596363042946905e-05, -0.0008451942121610045, -0.5354052186012268, -0.14587315917015076, -0.0042652590200304985, -2.8609820219571702e-05, -4.768370445162873e-07, -3.2066785934148356e-05, -0.00016389934171456844, -0.03292844817042351, -2.7783403396606445, -0.0012061471352353692, -0.003367826109752059, -2.0265558760002023e-06, -2.3841855067985307e-07, -3.576278118089249e-07, -0.057585980743169785, 0.0, -1.9073468138230965e-06, -0.00031740395934320986, -0.00014447122521232814, -0.06249678134918213, -0.3713594377040863, -2.3157906532287598, -1.51526939868927, -0.3197343945503235, -0.13235947489738464, -1.0991897583007812, -0.24232374131679535, -0.24700337648391724, -0.011032533831894398, -0.1364956498146057, -1.2777252197265625, -0.8466314673423767, -0.00048828122089616954, -0.02182699926197529, -0.0015673269517719746, -0.07117142528295517, -6.782778655178845e-05, -0.0004189328756183386, -0.010303991846740246, -0.03013983741402626, -2.4995076656341553, -0.001814268296584487, -0.0003387354372534901, -0.04010026156902313, -2.5987286790041253e-05, -0.022242717444896698, -0.007098099682480097, -0.00039891392225399613, -0.0010121704544872046, -1.2397148609161377, -0.008450346998870373, -0.0018910160288214684, -1.680836794548668e-05, -3.099436753473128e-06, -0.000900101731531322, -0.02771082893013954, -0.041490066796541214, -2.064453125, -2.8695242404937744, -0.20077426731586456, -0.9607282280921936, -0.3804367780685425, -0.1053583100438118, -2.684753179550171, -0.8860017657279968, -0.0017715488793328404, -0.05678382143378258, -0.26438644528388977, -0.0008088654140010476, -0.1325339674949646, -0.0001716466504149139, -0.0020249830558896065, -2.7418097943154862e-06, -5.400034933700226e-05, -0.0006783091812394559, -0.00010501786891836673, -0.005697676911950111, -0.00025185750564560294, -0.000432278640801087, -0.0069144973531365395, -0.0008870004676282406, -0.04741235822439194, -0.1087798923254013, -0.29817837476730347, -0.9938507676124573, -0.20457886159420013, -0.027449091896414757], "finish_reason": "length"}], "metrics": {"energy": 918.175322352409, "energy_per_token": 3.5866223529390977, "time": 22.264502, "time_per_token": 0.0869707109375}}
