{"outputs": [{"text": "# Check the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    # Extract all file paths matching the file_pattern\n    file_paths = glob.glob(f'{directory}/*.txt', recursive=True)\n\n    # Check if any files were found\n    if not file_paths:\n        raise ValueError('No files matching the pattern were found.')\n\n    # Create a list of file paths as strings, in natural order\n    sorted_file_paths = [file_path for file_path in natsort.natsorted(file_paths)]\n\n    # Create an empty list to store all the extracted numeric data\n    numeric_data = []\n\n    # Extract the numeric data from each file and append it to the list\n    for file_path in sorted_file_paths:\n        # Read the file contents\n        file_data = open(file_path, 'r').read()\n        # Search for the numeric data using the regular expression\n        numeric_matches = re.findall(regex, file", "tokens": ["#", " Check", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " all", " file", " paths", " matching", " the", " file", "_", "pattern", "\n", "    ", "file", "_", "paths", " =", " glob", ".", "glob", "(", "f", "'{", "directory", "}", "/*", ".", "txt", "'", ",", " recursive", "=", "True", ")", "\n", "\n", "    ", "#", " Check", " if", " any", " files", " were", " found", "\n", "    ", "if", " not", " file", "_", "paths", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " matching", " the", " pattern", " were", " found", ".", "')", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " file", " paths", " as", " strings", ",", " in", " natural", " order", "\n", "    ", "s", "orted", "_", "file", "_", "paths", " =", " [", "file", "_", "path", " for", " file", "_", "path", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "file", "_", "paths", ")]", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " all", " the", " extracted", " numeric", " data", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "\n", "    ", "#", " Ext", "ract", " the", " numeric", " data", " from", " each", " file", " and", " append", " it", " to", " the", " list", "\n", "    ", "for", " file", "_", "path", " in", " sorted", "_", "file", "_", "paths", ":", "\n", "        ", "#", " Read", " the", " file", " contents", "\n", "        ", "file", "_", "data", " =", " open", "(", "file", "_", "path", ",", " '", "r", "')", ".", "read", "()", "\n", "        ", "#", " Search", " for", " the", " numeric", " data", " using", " the", " regular", " expression", "\n", "        ", "numeric", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " file"], "logprobs": [-1.63540780544281, -1.08258056640625, -3.0144782066345215, -0.47844046354293823, -0.2959787845611572, -0.2496127039194107, -0.0012742503313347697, -0.08967199176549911, -0.018935978412628174, -0.0038674098905175924, -5.125986263010418e-06, -0.00012861855793744326, -0.006921008694916964, -0.33371126651763916, -0.000726316764485091, -0.002487067598849535, -0.0027151170652359724, -0.0026383136864751577, -0.0005731132114306092, -0.025511018931865692, -0.006412288174033165, -6.103329360485077e-05, -4.029192859889008e-05, -0.15408064424991608, -0.4425322711467743, -0.22012710571289062, -0.1631150096654892, -0.6044127941131592, -0.0009390473715029657, -0.008795803412795067, -0.6449353694915771, -0.0004159538948442787, -0.006034488324075937, -0.3279908001422882, -0.014661898836493492, -7.795983401592821e-05, -0.0015250729629769921, -0.0824127122759819, -0.0008883106056600809, -0.043995168060064316, -3.6567821502685547, -0.008741091936826706, -1.3085203170776367, -2.4103593826293945, -0.8593912124633789, -0.3249044418334961, -0.016456350684165955, -2.4186787605285645, -1.4597431421279907, -0.003436613827943802, -1.010338544845581, -0.0006075443816371262, -0.3182867467403412, -0.05145616829395294, -0.08948364853858948, -0.005111838690936565, -0.09777393192052841, -0.00021205084340181202, -0.008007211610674858, -0.0007651500636711717, -2.10459566116333, -1.894256353378296, -0.013245332054793835, -1.9581501483917236, -0.48993903398513794, -1.9044890403747559, -0.3059753179550171, -1.3464844226837158, -0.013482232578098774, -0.018373530358076096, -0.003487696871161461, -0.5101713538169861, -0.00340679450891912, -0.0223084706813097, -0.4098173975944519, -0.0002444683632347733, -0.08975939452648163, -0.8278889060020447, -0.32720112800598145, -0.4027230441570282, -0.10476021468639374, -1.1848689317703247, -0.06587330996990204, -0.07992037385702133, -0.00018880968855228275, -0.007305928971618414, -0.22248119115829468, -0.011275026947259903, -5.8412379075889476e-06, -0.00014876213390380144, -0.0013810392701998353, -0.0012875846587121487, -0.0003636414185166359, -0.014584950171411037, -0.027062218636274338, -6.9141146923357155e-06, -2.5580532550811768, -0.019894933328032494, -0.08161946386098862, -0.6787793040275574, -0.09696508198976517, -0.5039117932319641, -0.5691815614700317, -0.00023946279543451965, -0.16184866428375244, -0.0076567502692341805, -0.00022849810193292797, -0.007693540770560503, -0.000977276940830052, -0.061622340232133865, -2.737578868865967, -0.30848872661590576, -0.6097046136856079, -0.5610387325286865, -1.8671395778656006, -0.40179404616355896, -3.906782388687134, -0.5236090421676636, -2.4475910663604736, -3.019585132598877, -1.549303650856018, -0.584969162940979, -0.2903633117675781, -0.0004745787591673434, -1.4530751705169678, -0.002567092888057232, -0.0003591130953282118, -0.33699166774749756, -0.005243240389972925, -0.0055276877246797085, -0.0026991860941052437, -1.8091816902160645, -3.108220100402832, -0.18845099210739136, -0.07534094899892807, -0.11976249516010284, -0.0037879636511206627, -0.0002849888114724308, -0.0008717550663277507, -0.0019162403186783195, -0.10486326366662979, -1.3470558769768104e-05, -0.00011872540198964998, -0.00019572250312194228, -0.19808119535446167, -7.545663538621739e-05, -0.0040543037466704845, -0.0030452092178165913, -0.018110742792487144, -0.00010680581908673048, -0.00010239553375868127, -0.22125177085399628, -0.0031219811644405127, -0.02646334283053875, -0.0006179092451930046, -0.10320356488227844, -1.5498310327529907, -1.1935670375823975, -0.008719230070710182, -0.6426607966423035, -0.1705363392829895, -0.2923523485660553, -2.8270809650421143, -1.8107291460037231, -1.3374378681182861, -0.9056328535079956, -0.055232398211956024, -0.2709881365299225, -0.0005159238935448229, -0.5870060324668884, -0.0006114759016782045, -0.014255708083510399, -0.30533620715141296, -0.019383534789085388, -0.0006028980133123696, -0.03310122713446617, -0.00033909291960299015, -0.1508537083864212, -3.2133893966674805, -0.006958418060094118, -1.774930715560913, -0.11081383377313614, -0.01282067596912384, -0.208257257938385, -0.11821061372756958, -0.04878058284521103, -1.0853445529937744, -0.4285760223865509, -0.23386402428150177, -0.002656504511833191, -0.04687992483377457, -1.023733139038086, -0.055160198360681534, -0.00039152585668489337, -0.007428405340760946, -0.09862727671861649, -0.019480224698781967, -0.006991564761847258, -0.000580499938223511, -0.0012018608395010233, -0.00016032364510465413, -1.9073468138230965e-06, -3.814689989667386e-06, -1.0490362910786644e-05, -0.00012182447244413197, -0.0008283997885882854, -0.020587913691997528, -1.912945032119751, -0.7543953061103821, -0.14486441016197205, -0.5255323648452759, -0.9197680950164795, -0.7313323616981506, -0.0003475538978818804, -2.8078246116638184, -0.11041457206010818, -1.9640859365463257, -0.0054323673248291016, -0.3128909468650818, -0.0017450118903070688, -0.0012343652779236436, -9.536697689327411e-06, -9.07141511561349e-05, -0.28022706508636475, -0.09516865760087967, -0.030015485361218452, -0.0798412412405014, -0.02269555628299713, -0.00011193125828867778, -0.10214931517839432, -0.06494306027889252, -1.8761978149414062, -0.10263537615537643, -3.337364673614502, -0.19441458582878113, -0.5597600340843201, -1.0786982774734497, -0.07742324471473694, -0.3966142535209656, -0.3441241979598999, -0.8826029896736145, -0.000780754373408854, -0.1263575255870819, -0.001057184999808669, -1.9294512271881104, -0.012318246066570282, -1.2738099098205566, -0.0017936823423951864, -0.016100743785500526, -8.34430247778073e-05, -0.0035807082895189524, -0.007869549095630646, -0.0005896736984141171, -0.002267648698762059, -0.0002299282787134871, -0.0022693139035254717], "finish_reason": "length"}], "metrics": {"energy": 323.2972385101316, "energy_per_token": 1.2628798379302015, "time": 12.985434, "time_per_token": 0.0507243515625}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: {}'.format(directory))\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern: {}'.format(file_pattern))\n\n    files.sort(key=natsort.nsorted)  # Sort files by name\n\n    # Read each file, find numeric data, and append to a list\n    numeric_data_list = []\n    for file in files:\n        with open(file, 'r') as f:\n            numeric_data = extract_numeric_data(f, regex)\n            numeric_data_list.append(numeric_data)\n\n    # Compile numeric data into a pandas DataFrame\n    df = pd.DataFrame({'Filename': files, 'Numeric Data': numeric_data_list})\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " not", " found", ":", " {", "}'", ".", "format", "(", "directory", "))", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " matching", " the", " pattern", ":", " {", "}'", ".", "format", "(", "file", "_", "pattern", "))", "\n", "\n", "    ", "files", ".", "sort", "(", "key", "=", "n", "ats", "ort", ".", "ns", "orted", ")", "  ", "#", " Sort", " files", " by", " name", "\n", "\n", "    ", "#", " Read", " each", " file", ",", " find", " numeric", " data", ",", " and", " append", " to", " a", " list", "\n", "    ", "numeric", "_", "data", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "numeric", "_", "data", " =", " extract", "_", "numeric", "_", "data", "(", "f", ",", " regex", ")", "\n", "            ", "numeric", "_", "data", "_", "list", ".", "append", "(", "numeric", "_", "data", ")", "\n", "\n", "    ", "#", " Com", "pile", " numeric", " data", " into", " a", " pandas", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " files", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "_", "list", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.5018032193183899, -0.0014860312221571803, -0.0024547225330024958, -0.0036412859335541725, -0.01747988909482956, -0.000976919662207365, -0.027756744995713234, -0.00686962716281414, -9.154854342341423e-05, -5.8410845667822286e-05, -1.7387051582336426, -0.45190149545669556, -0.48964962363243103, -0.003507535206153989, -1.2865839004516602, -0.6192380785942078, -0.10518792271614075, -0.0007765853079035878, -0.001434131758287549, -0.0003228858404327184, -0.00316226645372808, -0.0005641775787808001, -0.0006225554971024394, -0.26961368322372437, -0.00018356545479036868, -1.1264066696166992, -0.04873039945960045, -0.10278888046741486, -0.0002162222663173452, -0.017150895670056343, -0.01607024483382702, -0.17275874316692352, -0.0002181292074965313, -4.303362584323622e-05, -0.0017133570509031415, -0.0006000387365929782, -0.0011811431031674147, -0.0019425348145887256, -0.00037222131504677236, -0.014563803561031818, -3.0278701160568744e-05, -2.1219027985353023e-05, -0.007434321567416191, -0.006145627703517675, -1.479271411895752, -4.184158387943171e-05, -0.060578059405088425, -0.47897735238075256, -0.010399910621345043, -0.0009603655780665576, -0.004297070670872927, -0.0002899941464420408, -0.021518684923648834, -0.020231086760759354, -1.0490362910786644e-05, -0.03435186669230461, -0.013702143914997578, -0.06039593741297722, -0.6657782793045044, -0.7146363258361816, -0.048511356115341187, -0.402847021818161, -0.03174670413136482, -0.004197477828711271, -0.0005526207387447357, -0.000959412835072726, -0.0021983047481626272, -0.046415720134973526, -0.0004657614335883409, -0.00037722624256275594, -0.0011106519959867, -0.0005747812101617455, -0.009247565641999245, -0.00032217081752605736, -1.172554612159729, -1.729697346687317, -0.005792498122900724, -0.14709968864917755, -0.027456514537334442, -0.005222369451075792, -0.35487598180770874, -0.0001454247540095821, -1.764281842042692e-05, -0.0013059191405773163, -0.5151990652084351, -1.023700475692749, -0.05038908123970032, -2.9059252738952637, -0.0015491163358092308, -0.7308468818664551, -0.31787893176078796, -0.8893870115280151, -0.77374666929245, -0.46090298891067505, -0.26738807559013367, -0.0004209585895296186, -2.6737117767333984, -2.0682740211486816, -2.452083110809326, -0.07525835931301117, -2.299393892288208, -2.803152084350586, -1.221283197402954, -0.30190780758857727, -0.39284297823905945, -0.23261640965938568, -2.0351834297180176, -0.3766695559024811, -0.6518514156341553, -0.20910871028900146, -0.18940913677215576, -0.001686342409811914, -0.41676366329193115, -0.002235058695077896, -0.03507944941520691, -1.0955076217651367, -0.079527847468853, -0.0023047570139169693, -0.015466039068996906, -0.005903071723878384, -0.059409912675619125, -0.03040827251970768, -0.7748240232467651, -0.6690348386764526, -0.001698124222457409, -0.00019751029321923852, -0.00353925209492445, -0.004706139676272869, -0.3174111545085907, -0.0006641327636316419, -0.00011276562872808427, -0.0017867805436253548, -0.1087111383676529, -0.09842537343502045, -0.0154464365914464, -0.11677639931440353, -0.00039081089198589325, -0.04005846008658409, -0.013882271014153957, -0.0032164526637643576, -0.001476984703913331, -2.0648508071899414, -0.0028317375108599663, -0.02142837643623352, -0.1539521962404251, -2.343543767929077, -0.002728075487539172, -0.06675374507904053, -0.006058423314243555, -0.0069788983091712, -0.03199207782745361, -0.025959474965929985, -1.3522017002105713, -0.011181903071701527, -0.03205673396587372, -0.014233966358006, -0.39292216300964355, -0.25584667921066284, -0.0005354639724828303, -0.0005198557628318667, -0.005235414020717144, -0.0010848119854927063, -0.0014666287461295724, -0.016967138275504112, -0.47356122732162476, -0.019832877442240715, -6.97350042173639e-05, -9.679325739853084e-05, -0.005469832569360733, -0.003080387134104967, -0.031598757952451706, -0.014223036356270313, -0.27000898122787476, -2.3085155487060547, -0.010999874211847782, -1.103129506111145, -0.012087901122868061, -0.15466775000095367, -0.016306594014167786, -0.6350552439689636, -0.020705386996269226, -0.0018919678404927254, -0.07639666646718979, -0.0008262557676061988, -0.15173332393169403, -0.0038740597665309906, -0.0035137124359607697, -4.708655978902243e-05, -0.0011135098757222295, -0.17039629817008972, -0.34214121103286743, -0.019764624536037445, -1.3708974620385561e-05, -0.0006420934805646539, -0.41742125153541565, -0.07447756081819534, -0.06421710550785065, -0.004026402253657579, -0.00010179955279454589, -0.010270482860505581, -0.00033456450910307467, -0.0046953423880040646, -3.576278118089249e-07, -3.576278118089249e-07, -0.000714404450263828, -2.9802276912960224e-06, -0.011918876320123672, -0.00763320829719305, -0.22094014286994934, -0.004752055741846561, -0.031318165361881256, -0.0012685356196016073, -0.008476351387798786, -0.0017911833710968494, -0.04872926324605942], "finish_reason": "stop"}], "metrics": {"energy": 242.41321621990195, "energy_per_token": 1.0968923810855291, "time": 9.8650255, "time_per_token": 0.04463812443438914}}
{"outputs": [{"text": "# Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n\n    # Get a list of files matching the pattern\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if any files matched the pattern\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern {file_pattern}.\")\n\n    # Sort files alphabetically\n    files.sort()\n\n    # Create a DataFrame of the files and their data\n    file_names = []\n    numeric_data = []\n    for file in files:\n        with open(file, 'r') as f:\n            # Get the numeric data from the file\n            match = re.findall(regex, f.read())\n\n            # Check if any data was extracted from the file\n            if match:\n                file_names.append(os.path.basename(file))\n                numeric_data.append(match)\n            else:\n                file_names.append(os.", "tokens": ["#", " Check", " if", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " files", " matching", " the", " pattern", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "#", " Check", " if", " any", " files", " matched", " the", " pattern", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " pattern", " {", "file", "_", "pattern", "}", ".", "\"", ")", "\n", "\n", "    ", "#", " Sort", " files", " alphabet", "ically", "\n", "    ", "files", ".", "sort", "()", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " of", " the", " files", " and", " their", " data", "\n", "    ", "file", "_", "names", " =", " []", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " Get", " the", " numeric", " data", " from", " the", " file", "\n", "            ", "match", " =", " re", ".", "find", "all", "(", "regex", ",", " f", ".", "read", "())", "\n", "\n", "            ", "#", " Check", " if", " any", " data", " was", " extracted", " from", " the", " file", "\n", "            ", "if", " match", ":", "\n", "                ", "file", "_", "names", ".", "append", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "))", "\n", "                ", "numeric", "_", "data", ".", "append", "(", "match", ")", "\n", "            ", "else", ":", "\n", "                ", "file", "_", "names", ".", "append", "(", "os", "."], "logprobs": [-1.5363731384277344, -0.992081344127655, -0.36037132143974304, -1.1104360818862915, -0.015935681760311127, -0.14361396431922913, -0.00161160237621516, -0.047436460852622986, -0.017684049904346466, -0.003039861097931862, -5.245195097813848e-06, -0.00010573305189609528, -0.004255762789398432, -0.2787264585494995, -0.0005957497633062303, -0.0023411503061652184, -0.0022278032265603542, -0.0020626953337341547, -0.0006212450098246336, -0.021408306434750557, -0.0052055297419428825, -5.495397272170521e-05, -4.136476854910143e-05, -0.16062670946121216, -0.43947041034698486, -0.21554361283779144, -0.12904395163059235, -0.6056578159332275, -0.0006853376980870962, -0.008119788020849228, -0.7451751828193665, -0.0008923601126298308, -0.3582795262336731, -0.022291334345936775, -5.817244164063595e-05, -0.0017149040941148996, -0.06933946907520294, -0.0009117737063206732, -0.04952156916260719, -1.5407434701919556, -1.8238365650177002, -0.043147891759872437, -0.0016074366867542267, -1.1637771129608154, -0.3185146749019623, -0.04213876277208328, -0.5342610478401184, -0.5560374855995178, -0.00023552982020191848, -0.867199182510376, -0.03293687105178833, -0.06419139355421066, -9.035655966727063e-05, -0.008738137781620026, -0.000773250067140907, -0.21296003460884094, -0.0001599660754436627, -1.4066597032069694e-05, -0.0022393406834453344, -0.00032669928623363376, -0.00028165188268758357, -0.0018080807058140635, -0.0002012050390476361, -0.025376442819833755, -1.9907753085135482e-05, -1.1920858014491387e-05, -0.0052336351945996284, -0.001903866184875369, -0.7805274128913879, -0.00010096516780322418, -0.10669595003128052, -0.67282634973526, -0.04424451291561127, -0.7607700228691101, -0.017591286450624466, -2.101766347885132, -0.28122517466545105, -0.008332369849085808, -0.014740721322596073, -9.274052717955783e-05, -0.001476746634580195, -1.6272516250610352, -2.992108420585282e-05, -0.00022742546570952982, -0.00027938754647038877, -0.02448066510260105, -4.076874756719917e-05, -1.883488948806189e-05, -0.00042691652197390795, -0.0010161004029214382, -0.00023827097902540118, -0.019862212240695953, -0.017882665619254112, -8.22540732769994e-06, -0.023864060640335083, -0.32632309198379517, -0.01019496563822031, -0.006941252388060093, -0.014368993230164051, -1.7656276226043701, -0.19407552480697632, -0.7363163232803345, -0.15057533979415894, -0.015309324488043785, -0.00025829317746683955, -0.00029702542815357447, -0.03096480295062065, -1.6007425785064697, -0.005561355967074633, -0.00016640232934150845, -0.00070296844933182, -0.0036055336240679026, -0.000714523543138057, -0.044825658202171326, -0.8164427876472473, -0.46385255455970764, -1.8503490686416626, -0.0006663962849415839, -0.41262945532798767, -0.00047922570956870914, -0.15959006547927856, -1.4523251056671143, -0.0011257746955379844, -0.7753203511238098, -0.015152585692703724, -0.07808807492256165, -0.000639710808172822, -0.0729118064045906, -2.00197172164917, -0.4708400070667267, -2.155379295349121, -0.0009894242975860834, -3.9361038208007812, -2.2623989582061768, -1.5683672428131104, -0.3540913760662079, -0.5964512825012207, -2.987761974334717, -0.10740499943494797, -0.0007638397510163486, -2.8744890689849854, -0.009279809892177582, -3.539548873901367, -0.06257326900959015, -1.2342065572738647, -0.04269097372889519, -0.010072002187371254, -0.5020849108695984, -0.0010440857149660587, -0.020117411389946938, -0.021266991272568703, -0.003655301406979561, -0.0006279165390878916, -0.12425529956817627, -0.04095481336116791, -0.41990333795547485, -0.2328706830739975, -0.04875378683209419, -0.0002965487365145236, -0.0018521074671298265, -0.005497337784618139, -0.7448863983154297, -0.0005343916127458215, -0.00014208737411536276, -0.0012653210433200002, -0.17343641817569733, -0.16825668513774872, -0.01781720668077469, -0.0775732770562172, -0.0003912875254172832, -0.055936042219400406, -0.017496991902589798, -0.0026329634711146355, -0.0018741200910881162, -2.9178037643432617, -2.4026904106140137, -0.7022774815559387, -1.1961570978164673, -0.029295669868588448, -0.29825127124786377, -0.22076961398124695, -0.09342535585165024, -0.4343704581260681, -0.0005057962844148278, -2.629896640777588, -0.22675687074661255, -0.010877009481191635, -7.807903602952138e-05, -0.24956579506397247, -0.004521622322499752, -0.00025948495022021234, -0.0012401993153616786, -0.00018439977429807186, -0.03733918443322182, -0.0007874249131418765, -0.00011801023356383666, -0.06454058736562729, -0.01027862448245287, -1.5603671073913574, -0.10246570408344269, -0.1032899022102356, -2.2594008445739746, -0.14823447167873383, -2.187819480895996, -0.683971107006073, -0.19119548797607422, -1.3214831352233887, -2.1248855590820312, -0.020708423107862473, -0.009012376889586449, -0.06869472563266754, -0.00019369633810129017, -0.013692972250282764, -1.2566075325012207, -0.07141263782978058, -0.0009395237429998815, -0.0010656398953869939, -0.4785234332084656, -0.002625829540193081, -0.0873718410730362, -0.0025852848775684834, -0.0007843278581276536, -0.0014097285456955433, -0.44707512855529785, -0.00021145492792129517, -5.6980417866725475e-05, -0.004692020360380411, -0.05633455514907837, -9.536738616588991e-07, -1.764281842042692e-05, -0.006274524610489607, -0.030792465433478355, -0.009317131713032722, -0.006819427013397217, -0.014337264932692051, -0.0003002431185450405, -0.000198821333469823, -0.0012225781101733446, -0.019132357090711594, -0.02843363955616951, -0.04142476245760918, -0.06026395410299301, -0.004053235054016113, -0.8982580900192261, -0.024230415001511574, -3.886147169396281e-05, -0.005668399389833212, -0.00030393750057555735, -0.21183285117149353, -0.0002818902430590242, -0.0012234115274623036, -0.0004768426588270813, -0.00047874910524114966, -0.3147725462913513, -0.20945730805397034, -0.003390162019059062], "finish_reason": "length"}], "metrics": {"energy": 284.0096093273162, "energy_per_token": 1.1094125364348288, "time": 11.54629, "time_per_token": 0.0451026953125}}
{"outputs": [{"text": "# Create a list of matching files in the directory\n    matching_files = glob.glob(os.path.join(directory, file_pattern))\n    if len(matching_files) == 0:\n        raise ValueError(f'No matching files found for the pattern {file_pattern}.')\n\n    # Extract numeric data from each file and store them in a list\n    numeric_data = []\n    for matching_file in matching_files:\n        with open(matching_file, 'r') as f:\n            file_data = f.read()\n            numeric_data.append(re.findall(regex, file_data))\n\n    # Create a Pandas DataFrame with two columns: 'Filename' and 'Numeric Data'\n    df = pd.DataFrame({\n        'Filename': os.path.basename(matching_files),\n        'Numeric Data': numeric_data\n    })\n\n    return df", "tokens": ["#", " Create", " a", " list", " of", " matching", " files", " in", " the", " directory", "\n", "    ", "matching", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " len", "(", "matching", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "No", " matching", " files", " found", " for", " the", " pattern", " {", "file", "_", "pattern", "}", ".", "')", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " from", " each", " file", " and", " store", " them", " in", " a", " list", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " matching", "_", "file", " in", " matching", "_", "files", ":", "\n", "        ", "with", " open", "(", "matching", "_", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "            ", "numeric", "_", "data", ".", "append", "(", "re", ".", "find", "all", "(", "regex", ",", " file", "_", "data", "))", "\n", "\n", "    ", "#", " Create", " a", " Pand", "as", " Data", "Frame", " with", " two", " columns", ":", " '", "Fil", "ename", "'", " and", " '", "N", "umeric", " Data", "'", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Fil", "ename", "':", " os", ".", "path", ".", "bas", "ename", "(", "matching", "_", "files", ")", ",", "\n", "        ", "'", "N", "umeric", " Data", "':", " numeric", "_", "data", "\n", "    ", "})", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.5363731384277344, -2.570845365524292, -0.4276823401451111, -0.8466041684150696, -0.11375828087329865, -3.95674467086792, -0.5325443744659424, -1.2121258974075317, -0.018376924097537994, -0.9966331720352173, -0.38110652565956116, -0.002893549157306552, -1.5621479749679565, -0.0023670769296586514, -0.008845195174217224, -0.005907219834625721, -0.0887547954916954, -0.0002653246629051864, -0.012771598063409328, -0.0017999890260398388, -0.20112109184265137, -1.5497195136049413e-06, -4.0649541915627196e-05, -0.0052917408756911755, -0.00044943721150048077, -0.0016511153662577271, -0.006731097586452961, -0.00037555795279331505, -0.017160270363092422, -1.4066597032069694e-05, -1.7523612768854946e-05, -0.015790071338415146, -0.0032510305754840374, -0.5463926196098328, -0.8324680924415588, -1.1315407752990723, -0.00010239553375868127, -0.00043871314846910536, -2.264974000354414e-06, -1.7881377516459906e-06, -0.0016194575000554323, -0.06412944942712784, -0.00015817821258679032, -0.0001501924270996824, -0.00147162820212543, -0.019826684147119522, -0.001672775368206203, -0.10275435447692871, -0.34619662165641785, -1.6331539882230572e-05, -0.5512930750846863, -0.6226609349250793, -0.9850775003433228, -0.041641704738140106, -2.0375728607177734, -0.017038512974977493, -0.04605159908533096, -2.2498536109924316, -2.4922680854797363, -0.5287573933601379, -0.7374413013458252, -0.02203400619328022, -0.000226472009671852, -0.0003771070914808661, -0.021353812888264656, -2.34199857711792, -0.044424355030059814, -0.0026505598798394203, -0.2017022669315338, -0.0007022537174634635, -0.22199475765228271, -0.9930644035339355, -0.009973809123039246, -0.3315088152885437, -0.020966442301869392, -0.053287237882614136, -0.6243791580200195, -0.18423506617546082, -0.8716111779212952, -3.0206663608551025, -0.9625219702720642, -0.22180846333503723, -0.04382951557636261, -0.3354817032814026, -0.08304988592863083, -0.0009301149984821677, -0.20227959752082825, -0.0003091811086051166, -0.03480006009340286, -0.33241283893585205, -0.09816497564315796, -0.0007990981102921069, -0.013977729715406895, -0.03495064377784729, -3.5381128787994385, -0.0014919828390702605, -0.0018572239205241203, -0.0017028844449669123, -0.13219352066516876, -2.372236667724792e-05, -3.576272320060525e-06, -0.00016973962192423642, -0.0016452836571261287, -0.002518697874620557, -0.33865612745285034, -0.00037245964631438255, -0.00017176583060063422, -0.0019092203583568335, -1.1205610462639015e-05, -5.6503606174374e-05, -0.21286840736865997, -0.04809892177581787, -0.019799336791038513, -0.07036098092794418, -0.0011044599814340472, -0.3704971969127655, -0.010005793534219265, -0.0014886498684063554, -0.0011767374817281961, -2.25978684425354, -0.004059408791363239, -0.3965371251106262, -0.0029898248612880707, -0.3485795259475708, -3.1470757676288486e-05, -2.9444261599564925e-05, -0.26911622285842896, -0.0981559008359909, -0.41548505425453186, -1.8250696659088135, -0.014247364364564419, -0.1985846757888794, -0.07578396797180176, -0.06617584079504013, -0.16650141775608063, -0.2207028865814209, -0.0002489972102921456, -0.0036852320190519094, -2.5987286790041253e-05, -0.0004397855664137751, -0.0010634964564815164, -0.0003045333724003285, -0.00315180909819901, -1.168244216387393e-05, -1.597391747054644e-05, -0.024999113753437996, -0.009018756449222565, -0.06269621104001999, -0.0077655804343521595, -0.02803613431751728, -1.2771185636520386, -0.02322133630514145, -2.2846715450286865, -9.536697689327411e-06, -0.008447627536952496, -0.0014028241857886314, -0.6489784121513367, -1.2595725059509277, -0.0006543640629388392, -0.13113585114479065, -0.20071272552013397, -0.023479292169213295, -8.296622399939224e-05, -0.000530936405993998, -0.004519367590546608, -0.001947650802321732, -0.00805120263248682, -7.486063259420916e-05, -0.006668101530522108, -0.003603514516726136, -0.037361230701208115, -0.0004152389301452786, -0.1370226889848709, -0.005558392032980919, -0.0030433074571192265, -0.0005465444410219789, -0.0005075835506431758, -0.12692983448505402, -1.6845312118530273, -0.004665086045861244, -0.00472998758777976, -0.014344080351293087, -4.577531944960356e-05, -0.0006089740199968219, -3.1170456409454346, -0.00025817399728111923, -0.02219783142209053, -0.08838175982236862, -0.09893949329853058, -8.106198947643861e-06, -0.014050493948161602, -0.1343434602022171, -1.0132738680113107e-05, -1.3365198373794556, -0.05816785991191864, -0.003379588248208165, -0.01971798948943615, -0.0009763241396285594, -0.0028509944677352905, -0.011215499602258205, -0.00011634149996098131, -0.007086973171681166, -0.00020740265608765185, -0.014482734724879265, -2.264974000354414e-06, -2.3841855067985307e-07, -0.07019496709108353, -0.008767207153141499, -0.00319268717430532, -0.043287746608257294, -0.13706405460834503, -0.002094815019518137, -0.7054395079612732, -0.0025295186787843704, -2.475682258605957, -1.7881377516459906e-06, -8.344646857949556e-07, -1.585470999998506e-05, -0.00012790338951162994, -1.9159870147705078, -0.006913786754012108], "finish_reason": "stop"}], "metrics": {"energy": 270.40624695301057, "energy_per_token": 1.2235576785204099, "time": 9.883129, "time_per_token": 0.044720040723981905}}
{"outputs": [{"text": "all_text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not all_text_files:\n        raise ValueError('No matching files found')\n\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    for f in natsort.natsorted(all_text_files):\n        with open(f) as file:\n            contents = file.read()\n        if regex:\n            matches = re.findall(regex, contents)\n            numeric_data = [int(m) for m in matches]\n            df = df.append({'Filename': f, 'Numeric Data': numeric_data}, ignore_index=True)\n        else:\n            df = df.append({'Filename': f, 'Numeric Data': contents.split()}, ignore_index=True)\n\n    return df", "tokens": ["all", "_", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " all", "_", "text", "_", "files", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " matching", " files", " found", "')", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "for", " f", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "all", "_", "text", "_", "files", "):", "\n", "        ", "with", " open", "(", "f", ")", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "        ", "if", " regex", ":", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " contents", ")", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "m", ")", " for", " m", " in", " matches", "]", "\n", "            ", "df", " =", " df", ".", "append", "({", "'", "Fil", "ename", "':", " f", ",", " '", "N", "umeric", " Data", "':", " numeric", "_", "data", "}", ",", " ignore", "_", "index", "=", "True", ")", "\n", "        ", "else", ":", "\n", "            ", "df", " =", " df", ".", "append", "({", "'", "Fil", "ename", "':", " f", ",", " '", "N", "umeric", " Data", "':", " contents", ".", "split", "()}", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-4.264011383056641, -0.0191908311098814, -2.715611457824707, -0.1896781027317047, -0.037525322288274765, -0.01767878048121929, -0.23968404531478882, -0.0006518622976727784, -0.02961154840886593, -0.0068477243185043335, -0.31841176748275757, -3.099436753473128e-06, -0.00012242044613230973, -0.0018897071713581681, -0.0009037939016707242, -0.0029867347329854965, -0.009470418095588684, -0.0011811431031674147, -0.025638604536652565, -2.4318398573086597e-05, -2.372236667724792e-05, -0.024592913687229156, -0.012667431496083736, -0.19138196110725403, -0.5786628723144531, -0.5580334663391113, -0.020736446604132652, -0.0010270564816892147, -1.0013530300057027e-05, -2.7418097943154862e-06, -1.1920922133867862e-06, -0.0017805927200242877, -0.020671289414167404, -0.0022818022407591343, -0.05456764996051788, -0.29411688446998596, -1.4662635294371285e-05, -0.8765842318534851, -0.06522688269615173, -2.8699281215667725, -0.16940486431121826, -0.07387199252843857, -1.2028636932373047, -0.0020017840433865786, -0.6254842877388, -0.0005745429079979658, -2.755725383758545, -0.09729036688804626, -0.08270984143018723, -5.352353764465079e-05, -0.02907811850309372, -0.6466710567474365, -0.2651369571685791, -0.0430724211037159, -0.03422227501869202, -2.4676019165781327e-05, -0.017817558720707893, -4.184158387943171e-05, -0.00943074095994234, -0.036959677934646606, -0.00033885458833537996, -0.02771349623799324, -0.038829270750284195, -0.003299984149634838, -0.8537981510162354, -0.0001658063702052459, -0.11223381012678146, -2.1806819438934326, -0.5754725337028503, -0.639931321144104, -1.3232143828645349e-05, -0.0002026352594839409, -9.667406266089529e-05, -0.06153031438589096, -8.928377064876258e-05, -0.003009792184457183, -0.0020560333505272865, -0.017451424151659012, -9.536697689327411e-06, -1.4424220353248529e-05, -2.0265558760002023e-06, -4.768370445162873e-07, -0.06594016402959824, -0.010753422044217587, -0.009877731092274189, -0.6880154013633728, -0.0010942192748188972, -0.00043764073052443564, -0.004696410149335861, -1.1151787042617798, -0.0003492222458589822, -0.5689542889595032, -0.010501011274755001, -0.004078048747032881, -0.0031557304318994284, -2.897106170654297, -0.002574108075350523, -0.05983444303274155, -6.210611172718927e-05, -7.080780778778717e-05, -0.09901528805494308, -0.10395409911870956, -2.0018606185913086, -2.389492988586426, -1.8449368476867676, -0.7231079339981079, -0.006692376919090748, -0.0009204680100083351, -0.8784435987472534, -0.00203830748796463, -0.025633608922362328, -8.201262971851975e-05, -0.003080743597820401, -0.016865165904164314, -0.0013011569390073419, -0.0011431594612076879, -0.0002553137019276619, -0.0030366519931703806, -0.015568740665912628, -0.005622169468551874, -0.4423750340938568, -1.438327670097351, -0.011484936811029911, -0.054401591420173645, -0.0075217606499791145, -0.13892130553722382, -0.03265434503555298, -0.0016856284346431494, -1.3613929748535156, -0.00837528333067894, -0.02962624654173851, -0.00020489977032411844, -4.875540980719961e-05, -0.0017202593153342605, -0.6734684705734253, -0.19674794375896454, -1.821192979812622, -0.13941262662410736, -1.8396259546279907, -0.05145152658224106, -0.00020883286197204143, -0.010600567795336246, -0.21972039341926575, -0.07527395337820053, -0.004441159777343273, -0.00022718709078617394, -0.0010287236655130982, -0.19419226050376892, -0.007051581051200628, -0.017764156684279442, -0.00032455421751365066, -9.417489309271332e-06, -0.0010038343025371432, -0.0005119920242577791, -0.009612583555281162, -3.099436753473128e-06, -1.9073468138230965e-06, -0.008327050134539604, -4.875540980719961e-05, -0.09117572754621506, 0.0, -0.0028627626597881317, -0.001005025114864111, -0.0004772001120727509, -0.002340436913073063, -0.0014509160537272692, -0.34614384174346924, -0.010342100635170937, -9.357491217087954e-05, -0.003800076898187399, -0.0006291079334914684, -0.20122316479682922, -0.024914119392633438, -0.00024577934527769685, -4.207999518257566e-05, -0.0002698534226510674, -0.0049529001116752625, -0.0009588173124939203, -0.0011086276499554515, -0.0005664412747137249, -0.00012015574611723423, -0.001933373394422233, -0.01884508691728115, -0.003975109662860632, -0.001536380616016686, -3.6954811548639555e-06, -0.00014673586701974273, -0.0001463782973587513, -0.7823091149330139, -1.4000543355941772, -0.2929035723209381, -0.05081349238753319, -0.00011598391574807465, -0.003145154332742095, -2.3841830625315197e-06, -7.152555099310121e-07, -8.928377064876258e-05, -0.014172381721436977, -0.002249688608571887, -0.0033696084283292294, -0.18724313378334045, -0.006014226004481316, -0.06448906660079956, -0.0032623186707496643, -0.5410284996032715, -0.006473405286669731, -0.15949706733226776], "finish_reason": "stop"}], "metrics": {"energy": 224.47467530822752, "energy_per_token": 1.0844187212957852, "time": 9.235927, "time_per_token": 0.04461800483091787}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: {}'.format(directory))\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError('No files found matching the pattern: {}'.format(file_pattern))\n\n    files = sorted(files, key=natsort.nsorted)\n    df = pd.DataFrame(index=pd.Index(files), columns=['Filename', 'Numeric Data'])\n    for file_index, file_path in df.index:\n        with open(file_path, 'r') as f:\n            for line in f:\n                matches = re.findall(regex, line)\n                if matches:\n                    df.loc[file_index, 'Numeric Data'].append(matches)\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " not", " found", ":", " {", "}'", ".", "format", "(", "directory", "))", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " found", " matching", " the", " pattern", ":", " {", "}'", ".", "format", "(", "file", "_", "pattern", "))", "\n", "\n", "    ", "files", " =", " sorted", "(", "files", ",", " key", "=", "n", "ats", "ort", ".", "ns", "orted", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "index", "=", "pd", ".", "Index", "(", "files", ")", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "for", " file", "_", "index", ",", " file", "_", "path", " in", " df", ".", "index", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "for", " line", " in", " f", ":", "\n", "                ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " line", ")", "\n", "                ", "if", " matches", ":", "\n", "                ", "    ", "df", ".", "loc", "[", "file", "_", "index", ",", " '", "N", "umeric", " Data", "']", ".", "append", "(", "matches", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.5018032193183899, -0.0014860312221571803, -0.0024547225330024958, -0.0036412859335541725, -0.01747988909482956, -0.000976919662207365, -0.027756744995713234, -0.00686962716281414, -9.154854342341423e-05, -5.8410845667822286e-05, -1.7387051582336426, -0.45190149545669556, -0.48964962363243103, -0.003507535206153989, -1.2865839004516602, -0.6192380785942078, -0.10518792271614075, -0.0007765853079035878, -0.001434131758287549, -0.0003228858404327184, -0.00316226645372808, -0.0005641775787808001, -0.0006225554971024394, -0.26961368322372437, -0.00018356545479036868, -1.1264066696166992, -0.04873039945960045, -0.10278888046741486, -0.0002162222663173452, -0.017150895670056343, -0.01607024483382702, -0.17275874316692352, -0.0002181292074965313, -4.303362584323622e-05, -0.0017133570509031415, -0.0006000387365929782, -0.0011811431031674147, -0.0019425348145887256, -0.00037222131504677236, -0.014563803561031818, -3.0278701160568744e-05, -2.1219027985353023e-05, -0.007434321567416191, -0.006145627703517675, -0.25857022404670715, -0.07728168368339539, -0.42195194959640503, -0.014739311300218105, -0.000697846058756113, -0.004804495256394148, -0.00025960413040593266, -0.018886497244238853, -0.030513497069478035, -1.2040065485052764e-05, -0.03789244592189789, -0.01650993898510933, -0.0569550022482872, -0.7809315919876099, -0.1982230842113495, -0.8391472697257996, -0.06753725558519363, -0.15740925073623657, -0.03450389951467514, -0.0034505135845392942, -0.0006412595394067466, -0.0010985060362145305, -0.0017340637277811766, -0.04163701459765434, -0.00048780461656861007, -0.0003289635351393372, -0.0009528625523671508, -0.0004441943601705134, -0.038137003779411316, -0.0002553137019276619, -1.2877256870269775, -0.2766730487346649, -1.9205453395843506, -0.018927205353975296, -0.4230218827724457, -0.2224854975938797, -0.024820396676659584, -0.003663853043690324, -0.5604823231697083, -0.00012635385792236775, -1.3708974620385561e-05, -0.0011186301708221436, -0.4612271189689636, -0.8908922672271729, -0.07622546702623367, -0.05355800688266754, -1.0749437808990479, -1.1049890518188477, -0.04163747280836105, -0.046869006007909775, -1.9192511899746023e-05, -0.03700000420212746, -0.41995856165885925, -1.580932378768921, -0.03897053375840187, -1.9263509511947632, -0.0012285312404856086, -0.5008088946342468, -0.10904203355312347, -0.2711312174797058, -2.449716567993164, -0.002474224893376231, -0.10776318609714508, -0.05800700932741165, -0.04604009911417961, -4.7801782784517854e-05, -0.1161787286400795, -7.164221460698172e-05, -0.007997514680027962, -0.023923305794596672, -0.00032085992279462516, -0.02240569330751896, -0.08026444911956787, -0.005157617852091789, -0.7745732069015503, -0.2430494725704193, -2.118873119354248, -1.3302624225616455, -2.222276449203491, -0.02364695444703102, -0.13332989811897278, -0.8377054929733276, -0.3928547203540802, -0.0017792837461456656, -1.9659384489059448, -0.011587105691432953, -0.047773029655218124, -0.41720277070999146, -0.003467857837677002, -0.014357712119817734, -0.658160924911499, -0.002879760693758726, -0.0002847504511009902, -0.010314492508769035, -8.702239938429557e-06, -0.004026877228170633, -0.2026733160018921, -0.11432231962680817, -0.046967051923274994, -0.12145038694143295, -0.000985136954113841, -0.4089258015155792, -0.028484735637903214, -0.001374491723254323, -0.0019396792631596327, -3.414515495300293, -0.08763637393712997, -0.0060889930464327335, -0.0045200795866549015, -0.10876578092575073, -0.0023254514671862125, -0.0015712546883150935, -1.772839069366455, -0.0007849234389141202, -0.036577846854925156, -0.00010466027742950246, -0.00970927719026804, -0.03210071846842766, -0.0008303055074065924, -0.0022326798643916845, -0.00034648136352188885, -0.0018484188476577401, -0.07050985842943192, -0.0075876605696976185, -0.006370356772094965, -0.22210712730884552, -0.12364016473293304, -0.02119428478181362, -0.007340957876294851, -0.00020013237372040749, -0.00018487652414478362, -0.33782467246055603, -0.012715690769255161, -0.33348914980888367, -0.0027509010396897793, -0.006340032443404198, -2.0265373677830212e-05, -0.0009118927991949022, -0.05490679293870926, -0.010983485728502274, -0.0030731377191841602, -1.9073468138230965e-06, -0.000494715350214392, -0.0007325111655518413, -1.0853404998779297, -0.13459137082099915, -0.05388427525758743, -0.6602944731712341, -0.23373427987098694, -0.005602728575468063, -1.078020453453064, -0.031854793429374695, -0.15105707943439484, -0.0025980074424296618, -1.3809903860092163, -8.344646857949556e-07, -1.0728830375228426e-06, -8.22540732769994e-06, -0.0001567479339428246, -0.10212843120098114], "finish_reason": "stop"}], "metrics": {"energy": 251.34409304237354, "energy_per_token": 1.1968766335351122, "time": 9.254686, "time_per_token": 0.04406993333333333}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=lambda x: natsort.nsorted(os.path.basename(x)))\n    if len(files) == 0:\n        raise FileNotFoundError(f'No files matching {file_pattern} found in directory {directory}')\n    data_list = []\n    for file_name in files:\n        data_list.append([file_name, pd.Series(map(int, re.findall(regex, open(file_name).read())))])\n    return pd.DataFrame(data_list, columns=['Filename', 'Numeric Data'])", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "files", ".", "sort", "(", "key", "=", "lambda", " x", ":", " n", "ats", "ort", ".", "ns", "orted", "(", "os", ".", "path", ".", "bas", "ename", "(", "x", ")))", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "'", "No", " files", " matching", " {", "file", "_", "pattern", "}", " found", " in", " directory", " {", "directory", "}", "')", "\n", "    ", "data", "_", "list", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "data", "_", "list", ".", "append", "([", "file", "_", "name", ",", " pd", ".", "Series", "(", "map", "(", "int", ",", " re", ".", "find", "all", "(", "regex", ",", " open", "(", "file", "_", "name", ")", ".", "read", "()))", ")]", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", "_", "list", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "def"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -0.1288846880197525, -2.0955402851104736, -1.0233360528945923, -0.005125714931637049, -0.1541595309972763, -0.023340947926044464, -0.006709428504109383, -1.8767614364624023, -0.33611732721328735, -0.00139639584813267, -0.671117901802063, -6.186770770000294e-05, -3.2543604902457446e-05, -0.0001227780303452164, -1.3973900079727173, -0.6511092782020569, -0.019169313833117485, -0.39587223529815674, -0.0010901705827564, -0.0007568117580376565, -0.009362718090415001, -0.07383866608142853, -1.1920922133867862e-06, -0.0014078239910304546, -0.0058606453239917755, -1.1542574167251587, -0.027373122051358223, -0.5152499675750732, -0.5662656426429749, -1.0031239986419678, -0.00010954733443213627, -0.000366263062460348, -0.0033601035829633474, -0.09009312838315964, -0.00017438798386137933, -0.0002090712368953973, -0.003153948113322258, -0.010250188410282135, -0.0019289711490273476, -0.07307160645723343, -1.1997113227844238, -9.464769391342998e-05, -8.070142939686775e-05, -0.6491414904594421, -0.5019077658653259, -0.9228875637054443, -0.12955032289028168, -0.07624468207359314, -0.5750284194946289, -1.308685064315796, -0.098410464823246, -0.0008486483711749315, -0.0005308172549121082, -0.012504979968070984, -0.7329438924789429, -0.11194149404764175, -1.8704289197921753, -0.1300138235092163, -0.0022122215013951063, -0.00844668224453926, -0.4295955300331116, -0.0015141224721446633, -0.8685291409492493, -1.7695488929748535, -1.612868309020996, -1.3092235326766968, -0.008303405717015266, -0.09557827562093735, -0.005152992904186249, -0.02204403467476368, -0.10122151672840118, -0.6640675067901611, -1.5122547149658203, -0.47360360622406006, -0.00237171514891088, -0.0020345004741102457, -0.0003895000845659524, -0.0018518695142120123, -0.0023588708136230707, -3.4378018379211426, -1.3121522665023804, -0.32501038908958435, -0.04485723003745079, -0.10652867704629898, -1.018951177597046, -0.783797025680542, -0.00028046013903804123, -0.0001250427303602919, -0.07901500165462494, -3.6729512214660645, -0.0012830605264753103, -0.4137726128101349, -0.12392044812440872, -3.514449119567871, -0.010405927896499634, -0.2328934371471405, -0.0010004997020587325, -0.0796346366405487, -0.00016664070426486433, -0.0051805065013468266, -0.00022849810193292797, -0.0008032671175897121, -0.0014486543368548155, -0.0003695997002068907, -0.06843113899230957, -0.0002324311062693596, -0.0024937265552580357, -0.0002474478678777814, -5.2927523938706145e-05, -0.4495471715927124, -0.00047886825632303953, -0.0004625442670658231, -0.23233626782894135, -0.0435640886425972, -0.0010397987207397819, -0.006394047290086746, -0.07997440546751022, -0.680110514163971, -0.01739167608320713, -2.825220326485578e-05, -0.0043597412295639515, -0.01879139058291912, -0.012399137020111084, -0.0010792152024805546, -3.397406908334233e-05, -0.17111365497112274, -0.02549602836370468, -0.048328615725040436, -0.020288093015551567, -6.747018051100895e-05, -0.00044431351125240326, -4.95898348162882e-05, -0.00977727584540844, -0.01827193610370159, -0.0004166688595432788, -0.020999711006879807, -0.004858118016272783, -0.687354326248169, -0.014863346703350544, -0.09833040833473206], "finish_reason": "stop"}], "metrics": {"energy": 173.66586779594422, "energy_per_token": 1.092238162238643, "time": 6.9390593, "time_per_token": 0.04364188238993711}}
{"outputs": [{"text": "# Check the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    # Combine the glob pattern with the regex\n    pattern = os.path.join(directory, file_pattern)\n\n    # Find all text files matching the pattern\n    files = glob.glob(pattern)\n    if not files:\n        raise ValueError(f\"No files matching pattern {pattern} were found in {directory}.\")\n\n    # Extract the numeric data from each file using regular expressions\n    data = []\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            numeric_data = re.findall(regex, f.read())\n        data.append([file, numeric_data])\n\n    # Compile the data into a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "tokens": ["#", " Check", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Combine", " the", " glob", " pattern", " with", " the", " regex", "\n", "    ", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", ")", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " matching", " the", " pattern", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "pattern", ")", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " {", "pattern", "}", " were", " found", " in", " {", "directory", "}", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " numeric", " data", " from", " each", " file", " using", " regular", " expressions", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "file", ")", " as", " f", ":", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " f", ".", "read", "())", "\n", "        ", "data", ".", "append", "([", "file", ",", " numeric", "_", "data", "])", "\n", "\n", "    ", "#", " Com", "pile", " the", " data", " into", " a", " pandas", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5363731384277344, -0.992081344127655, -2.9406535625457764, -0.4609508812427521, -0.29215502738952637, -0.2354809194803238, -0.0012259118957445025, -0.07516050338745117, -0.020803699269890785, -0.0037121926434338093, -5.483612312673358e-06, -0.00012110930401831865, -0.007125560659915209, -0.3279252052307129, -0.0007674132939428091, -0.0025581750087440014, -0.002537485444918275, -0.0024176198057830334, -0.000593962671700865, -0.02438364364206791, -0.0065071601420640945, -5.435795901576057e-05, -4.31528314948082e-05, -0.14509159326553345, -0.4057651460170746, -0.22625692188739777, -0.17815910279750824, -0.69198077917099, -0.0008005275158211589, -0.008119078353047371, -0.6243534684181213, -0.0003325386205688119, -0.00574745936319232, -0.2700841426849365, -0.016308704391121864, -7.30726242181845e-05, -0.0018537732539698482, -0.10021629184484482, -0.0009802542626857758, -0.0575992576777935, -4.032253742218018, -0.5060002207756042, -1.4332106113433838, -0.14009730517864227, -0.9187960028648376, -0.1873868703842163, -2.709199905395508, -1.4160139560699463, -0.0004164305282756686, -0.9512987732887268, -0.012058692052960396, -0.6598306894302368, -7.867782187531702e-06, -0.0002441108226776123, -0.013797737658023834, -0.0033384801354259253, -0.003408220363780856, -0.009007769636809826, -0.001986198825761676, -0.03657899796962738, -7.390948667307384e-06, -1.1324817933200393e-05, -0.009544573724269867, -0.07757283747196198, -0.049870364367961884, -0.000270091783022508, -0.020864875987172127, -1.0496788024902344, -0.12073612213134766, -1.9111030101776123, -0.00210564024746418, -0.2736755907535553, -0.0037619550712406635, -0.11875086277723312, -0.47771918773651123, -0.0001805857609724626, -0.5486333966255188, -0.01760241389274597, -0.042611926794052124, -7.676783570786938e-05, -0.011026992462575436, -0.00042226933874189854, -0.008363107219338417, -0.21025288105010986, -0.004015954211354256, -0.5798795819282532, -0.15816009044647217, -0.34687167406082153, -0.009107948280870914, -0.0010084786918014288, -0.007542702369391918, -0.00034409802174195647, -0.022004269063472748, -0.01588089019060135, -1.0251946150674485e-05, -0.02755729667842388, -0.30419015884399414, -0.011340208351612091, -0.013037439435720444, -0.05127464234828949, -0.3365720212459564, -0.9170085191726685, -0.14752313494682312, -0.1405995637178421, -0.025294270366430283, -1.9549075365066528, -0.0006227937992662191, -1.268040657043457, -0.4284614622592926, -0.0015994624700397253, -0.05397068336606026, -0.010791749693453312, -0.006503606680780649, -0.00016449528629891574, -0.0015403084689751267, -0.012719339691102505, -0.0006872437661513686, -0.06647414714097977, -0.9165183305740356, -0.006898633204400539, -1.8583943843841553, -0.29124343395233154, -0.0401979424059391, -0.1213778555393219, -0.33229586482048035, -0.14290979504585266, -1.7814228534698486, -1.7592337131500244, -0.10348737984895706, -0.19065004587173462, -0.0012359131360426545, -1.843100666999817, -0.17034462094306946, -0.21529999375343323, -0.01640334725379944, -0.007524481974542141, -0.057052068412303925, -0.5225352048873901, -0.09482349455356598, -1.8087351322174072, -8.34461570775602e-06, -0.000169382052263245, -0.00017271934484597296, -0.05562295764684677, -9.512448741588742e-05, -0.0020518696401268244, -0.0013412775006145239, -0.00919346883893013, -0.07344673573970795, -0.015891684219241142, -0.005463193170726299, -0.2304752618074417, -0.0005154472892172635, -9.405170567333698e-05, -0.002600979758426547, -1.569184422492981, -0.0001679517881711945, -0.029298562556505203, -0.016096051782369614, -0.0019432486733421683, -0.0009463122696615756, -3.1683197021484375, -0.014528204686939716, -0.03606249392032623, -0.015214462764561176, -0.46599188446998596, -0.00013171759201213717, -0.0025519919581711292, -0.00034278715611435473, -0.000392598332837224, -0.002046754118055105, -0.000276765669696033, -0.008963820524513721, -0.0004166688595432788, -3.7431014789035544e-05, -0.023066764697432518, -0.00921543873846531, -1.0808441638946533, -0.3257109820842743, -0.008434980176389217, -0.01343894936144352, -0.18294009566307068, -0.23927855491638184, -0.0966791957616806, -0.027639979496598244, -1.4066597032069694e-05, -4.887569048150908e-06, -0.009179648943245411, -0.0031154451426118612, -0.04432924836874008, -0.001207337831147015, -0.1303919553756714, -1.9037439823150635, -0.003786657238379121, -0.09401865303516388, -0.502056360244751, -0.021315772086381912, -0.0035847469698637724, -0.4619046449661255, -0.008902973495423794, -0.0011974553344771266, -0.05481437221169472, -0.0002696150622796267, -0.09395159035921097, -0.0015267394483089447, -0.0015699454816058278, -0.00042226933874189854, -0.0006970121758058667, -0.0062465667724609375, -0.011897555552423, -0.06683893501758575, -0.007772441022098064, -0.07805676758289337, -0.014674350619316101, -3.4927710657939315e-05, -0.0003003622987307608, -1.5258672647178173e-05, -0.004826799035072327, -0.006711086258292198, -0.00013517419574782252, -0.019789518788456917, -0.002557580592110753, -0.015544210560619831, -0.20350882411003113, -0.009035768918693066, -0.2626543343067169, -0.0033925380557775497, -0.31633225083351135, -0.00575943011790514, -0.13535860180854797], "finish_reason": "stop"}], "metrics": {"energy": 281.5455180149077, "energy_per_token": 1.2241109478909031, "time": 10.307822, "time_per_token": 0.044816617391304346}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=natsort.nsorted)\n    if not files:\n        raise ValueError(\"No files matching the pattern found\")\n\n    numeric_data = []\n    for file in files:\n        with open(file, 'r') as f:\n            numeric_data_list = extract_numeric_data(f.read())\n            numeric_data.append(numeric_data_list)\n\n    df = pd.DataFrame(numeric_data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "files", ".", "sort", "(", "key", "=", "n", "ats", "ort", ".", "ns", "orted", ")", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " found", "\"", ")", "\n", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "numeric", "_", "data", "_", "list", " =", " extract", "_", "numeric", "_", "data", "(", "f", ".", "read", "())", "\n", "            ", "numeric", "_", "data", ".", "append", "(", "numeric", "_", "data", "_", "list", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "numeric", "_", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.5018032193183899, -0.0014860312221571803, -0.0024547225330024958, -0.0036412859335541725, -0.01747988909482956, -0.000976919662207365, -0.027756744995713234, -0.00686962716281414, -9.154854342341423e-05, -5.8410845667822286e-05, -0.28717663884162903, -0.42025890946388245, -0.38270434737205505, -0.24170683324337006, -0.532054603099823, -0.0011967408936470747, -0.008069886825978756, -0.8438366055488586, -0.0004940004437230527, -0.006610667798668146, -1.666548728942871, -0.00023469554434996098, -0.003739390056580305, -0.2796786427497864, -0.00023946279543451965, -1.0633538961410522, -0.047516606748104095, -0.10797722637653351, -0.00017045476124621928, -0.013232273980975151, -0.0013562776148319244, -0.35840749740600586, -0.000188332938705571, -3.111314072157256e-05, -0.0015806573210284114, -0.0005094899097457528, -0.0007448997348546982, -0.001987031428143382, -0.00039057256071828306, -0.02486586384475231, -4.160317621426657e-05, -2.3603161025675945e-05, -0.008697248995304108, -0.00516805425286293, -0.22116826474666595, -3.0041050910949707, -1.0970970392227173, -0.007525310385972261, -0.14455723762512207, -0.044439177960157394, -0.005841564387083054, -0.3407337963581085, -8.77341881277971e-05, -1.597391747054644e-05, -0.001129108713939786, -0.4180927574634552, -0.6329978108406067, -0.04509861022233963, -0.057141803205013275, -1.0048339366912842, -0.1279742419719696, -0.6735596656799316, -0.013080856762826443, -0.0011208925861865282, -0.005514646880328655, -0.0004172646440565586, -0.02307049371302128, -0.014809435233473778, -2.0146166207268834e-05, -0.05815042555332184, -1.2184007167816162, -0.01857481710612774, -0.07505224645137787, -0.332354873418808, -0.17638176679611206, -0.15605732798576355, -1.2035179138183594, -0.6275113224983215, -0.00037150635034777224, -0.001423894427716732, -0.030691083520650864, -0.00025722055579535663, -0.8929159641265869, -0.007848733104765415, -0.10564140230417252, -0.12282024323940277, -0.13316379487514496, -0.008489353582262993, -0.08143047988414764, -0.1738332360982895, -0.5889744758605957, -0.2958395779132843, -0.0019328974885866046, -0.00027176024741493165, -0.0014671048847958446, -0.0026695826090872288, -0.2764865458011627, -0.0006317288498394191, -0.00013517419574782252, -0.0013430631952360272, -0.13967816531658173, -0.1749446988105774, -0.03415926173329353, -0.09017843008041382, -0.0005847889697179198, -0.04158029705286026, -0.020394273102283478, -0.0010961245279759169, -0.0011629253858700395, -2.4526219367980957, -0.0392339713871479, -0.24156658351421356, -2.5597341060638428, -1.317093849182129, -0.0018133163684979081, -3.11755108833313, -0.006937582511454821, -0.1647828072309494, -0.014289318583905697, -0.017069334164261818, -0.06081455200910568, -0.052087001502513885, -0.5195070505142212, -0.001069569610990584, -0.7475031614303589, -0.007515963166952133, -0.4064693748950958, -0.3677334189414978, -0.0005989664932712913, -0.003276101779192686, -0.02857823111116886, -0.15415237843990326, -0.9390056133270264, -0.09246105700731277, -0.00011908298620255664, -0.00023719835735391825, -0.0011132716899737716, -8.34430247778073e-05, -0.0040968069806694984, -0.0042847259901463985, -0.13302040100097656, -0.007464612368494272, -0.34378159046173096, -0.009285243228077888, -0.0025684009306132793, -1.9192511899746023e-05, -0.0018079616129398346, -1.2696534395217896, -0.3817650079727173, -2.634490556374658e-05, -1.823885577323381e-05, -0.07491488009691238, -0.07435207813978195, -0.10640189796686172, -0.03708202391862869, -9.178694017464295e-05, -0.0028364923782646656, -2.5033637939486653e-05, -0.009356813505291939, -0.013467412441968918, -0.0002896366349887103, -0.03256203606724739, -0.005954503081738949, -0.0052833217196166515, -0.5258733630180359, -0.09199883788824081, -0.0016538526397198439, -0.004710648208856583, -0.002369336551055312, -0.030344899743795395], "finish_reason": "stop"}], "metrics": {"energy": 215.90640290737147, "energy_per_token": 1.2267409256100652, "time": 7.987618, "time_per_token": 0.04538419318181818}}
{"outputs": [{"text": "df = pd.DataFrame()\n    for filename in glob.glob(os.path.join(directory, file_pattern)):\n        file_data = []\n        try:\n            with open(filename, 'r') as file:\n                for line in file:\n                    match = re.search(regex, line)\n                    if match:\n                        file_data.append(match.group(1))\n        except (FileNotFoundError, PermissionError):\n            continue\n        else:\n            df = df.append({'Filename': filename, 'Numeric Data': file_data}, ignore_index=True)\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", ":", "\n", "        ", "file", "_", "data", " =", " []", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "for", " line", " in", " file", ":", "\n", "                ", "    ", "match", " =", " re", ".", "search", "(", "regex", ",", " line", ")", "\n", "                ", "    ", "if", " match", ":", "\n", "                ", "        ", "file", "_", "data", ".", "append", "(", "match", ".", "group", "(", "1", "))", "\n", "        ", "except", " (", "File", "NotFound", "Error", ",", " Perm", "ission", "Error", "):", "\n", "            ", "continue", "\n", "        ", "else", ":", "\n", "            ", "df", " =", " df", ".", "append", "({", "'", "Fil", "ename", "':", " filename", ",", " '", "N", "umeric", " Data", "':", " file", "_", "data", "}", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "return", " df"], "logprobs": [-2.9379215240478516, -0.050959303975105286, -0.2639085352420807, -0.001703836489468813, -0.020367523655295372, -0.6891924738883972, -0.027825497090816498, -0.3965492248535156, -1.955051302909851, -0.7310966849327087, -0.020536411553621292, -0.584172785282135, -0.00025996167096309364, -0.17637068033218384, -0.004763801582157612, -0.24070382118225098, -4.410734163684538e-06, -0.00012659224739763886, -0.004709580447524786, -0.0011036264477297664, -0.003336341353133321, -0.00522580835968256, -0.0007566926069557667, -0.015544210560619831, -2.706014311115723e-05, -3.981510963058099e-05, -0.01274193823337555, -0.0008704449282959104, -0.007718028035014868, -0.01587936468422413, -2.9959611892700195, -0.3154056668281555, -1.0427602529525757, -0.007212553173303604, -0.8327569365501404, -0.0062760645523667336, -0.0387193001806736, -1.6058924198150635, -9.107174992095679e-05, -0.0021282420493662357, -0.0017472729086875916, -0.07854156196117401, -0.0012086475035175681, -0.00021872512297704816, -0.006011263467371464, -0.1256934404373169, -0.12618637084960938, -0.030669119209051132, -0.1040840893983841, -0.0006455483380705118, -1.168448567390442, -0.007735653314739466, -0.0013684204313904047, -0.0017171651124954224, -0.46570998430252075, -0.02236466109752655, -0.001383420079946518, -0.010774532333016396, -0.05079559236764908, -0.0041605583392083645, -0.0013917532050982118, -0.0007937379996292293, -0.789331316947937, -0.0134291872382164, -0.0030176362488418818, -9.476689592702314e-05, -0.9260098934173584, -0.0005091324565000832, -0.0014605579199269414, -0.00035279724397696555, -0.0020166554022580385, -0.1461958885192871, -0.007791011594235897, -0.005324942991137505, -0.00032360086333937943, -0.01676236279308796, -0.004134797025471926, -0.06324838101863861, -0.004925261251628399, -0.00019214690837543458, -0.0004676678800024092, -0.2095251828432083, -5.340433563105762e-05, -0.0002615109842736274, -0.002272168407216668, -0.031237637624144554, -0.03100883588194847, -1.3589740991592407, -0.06725207716226578, -0.02215655706822872, -0.1390903890132904, -0.10413436591625214, -0.0030341562815010548, -0.011062126606702805, -0.44328418374061584, -0.0026100161485373974, -2.7717065811157227, -0.5189403295516968, -0.00025281094713136554, -2.634490556374658e-05, -0.045341070741415024, -0.7620818018913269, -4.9470632802695036e-05, -0.0008505540899932384, -0.738713800907135, -0.015014376491308212, -0.001840446493588388, -0.888475775718689, -0.053019676357507706, -0.08423546701669693, -2.647613525390625, -3.576214658096433e-05, -0.006389664486050606, -0.001904937089420855, -0.11963420361280441, -0.4544249176979065, -0.233474463224411, -0.0009995469590649009, -0.023686422035098076, -0.45912277698516846, -0.08940156549215317, -0.023130368441343307, -1.9073304429184645e-05, -0.002786683849990368, -0.12203795462846756, -0.019969137385487556, -0.0817280039191246, -0.006727071478962898, -0.00024625606602057815, -0.01421563234180212, -0.0006812873762100935, -0.05972158908843994, -3.516612196108326e-05, -1.2397689715726301e-05, -0.01068242359906435, -0.00010096516780322418, -0.10604922473430634, -3.576278118089249e-07, -0.00130425242241472, -0.0019564551766961813, -0.0005448763840831816, -0.012613754719495773, -0.0029021073132753372, -0.1464049518108368, -0.13998031616210938, -0.002782879862934351], "finish_reason": "stop"}], "metrics": {"energy": 180.29158800029742, "energy_per_token": 1.2348738904129961, "time": 6.3104644, "time_per_token": 0.04322235890410959}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern')\n\n    filenames = []\n    numeric_data = []\n\n    for file in files:\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            numeric = False\n            for line in lines:\n                line = line.strip()\n                if not line or line.startswith('#'):\n                    continue\n                numeric_data_part = []\n                for word in line.split(','):\n                    if ' ' in word:\n                        word = word.strip()\n                    if word.lower().startswith('numeric'):\n                        numeric = True\n                    else:\n                        try:\n                            if numeric:\n                                numeric_data_part.append(int(word))\n                            else:\n                                numeric_data_part.append(word)\n                        except ValueError:\n                            continue\n                if numeric_data_part:\n                    filenames", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " matching", " the", " pattern", "')", "\n", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "numeric", " =", " False", "\n", "            ", "for", " line", " in", " lines", ":", "\n", "                ", "line", " =", " line", ".", "strip", "()", "\n", "                ", "if", " not", " line", " or", " line", ".", "start", "sw", "ith", "('#", "')", ":", "\n", "                ", "    ", "continue", "\n", "                ", "numeric", "_", "data", "_", "part", " =", " []", "\n", "                ", "for", " word", " in", " line", ".", "split", "('", ",", "')", ":", "\n", "                ", "    ", "if", " '", " '", " in", " word", ":", "\n", "                ", "        ", "word", " =", " word", ".", "strip", "()", "\n", "                ", "    ", "if", " word", ".", "lower", "()", ".", "start", "sw", "ith", "('", "numeric", "')", ":", "\n", "                ", "        ", "numeric", " =", " True", "\n", "                ", "    ", "else", ":", "\n", "                ", "        ", "try", ":", "\n", "                ", "            ", "if", " numeric", ":", "\n", "                ", "                ", "numeric", "_", "data", "_", "part", ".", "append", "(", "int", "(", "word", "))", "\n", "                ", "            ", "else", ":", "\n", "                ", "                ", "numeric", "_", "data", "_", "part", ".", "append", "(", "word", ")", "\n", "                ", "        ", "except", " Value", "Error", ":", "\n", "                ", "            ", "continue", "\n", "                ", "if", " numeric", "_", "data", "_", "part", ":", "\n", "                ", "    ", "fil", "en", "ames"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -2.113236904144287, -0.0001679517881711945, -0.14508065581321716, -0.4620194733142853, -0.02288222685456276, -0.002657931065186858, -0.008698549121618271, -0.0014352031284943223, -0.05481121316552162, -0.2511151432991028, -8.583032467868179e-06, -0.879145622253418, -0.043362632393836975, -0.07802346348762512, -0.2731071412563324, -0.11369040608406067, -0.15949249267578125, -2.0915188789367676, -0.0042577809654176235, -0.06952842324972153, -0.00046492734691128135, -3.1149635314941406, -0.010321571491658688, -0.0002754547167569399, -0.08623219281435013, -1.3451592922210693, -0.011962460353970528, -0.020492732524871826, -0.5117066502571106, -0.006453388370573521, -0.04403943195939064, -0.06570298224687576, -0.006116126198321581, -0.0008077934035100043, -0.27896755933761597, -0.00021324267436284572, -0.08102568238973618, -0.47484290599823, -0.3161129355430603, -0.4951358437538147, -0.0005086558521725237, -0.0032151455525308847, -0.00821899063885212, -0.5784035921096802, -0.000943096645642072, -0.0002609150833450258, -0.003750316333025694, -0.14361613988876343, -0.07302340865135193, -0.02837628312408924, -0.09358798712491989, -0.0005534547381103039, -0.05679519847035408, -0.010700821876525879, -0.0012355559738352895, -0.0038311907555907965, -1.6230767965316772, -0.0012524626217782497, -0.04889864847064018, -7.867782187531702e-06, -2.8729025871143676e-05, -0.050241827964782715, -0.002785970689728856, -0.0037653991021215916, -0.5485567450523376, -1.2635148763656616, -2.466930627822876, -3.596614360809326, -0.018984170630574226, -0.4003010094165802, -1.1100481748580933, -0.0662500336766243, -0.0014359173364937305, -0.0030884684529155493, -0.0014554394874721766, -0.0018734062323346734, -0.003393844934180379, -2.1613893508911133, -0.11001920700073242, -0.06719746440649033, -0.0008480527903884649, -0.044233907014131546, -0.006602851673960686, -0.021806005388498306, -0.09977555274963379, -0.36778342723846436, -1.824451208114624, -0.1159328892827034, -1.5591773986816406, -0.12284291535615921, -0.2111053466796875, -0.028344765305519104, -2.3841830625315197e-06, -1.1920928244535389e-07, -0.3100179433822632, -0.0003667397249955684, -0.1026916429400444, -0.04097781330347061, -3.313963316031732e-05, -0.00024816294899210334, -0.04450713470578194, -0.023271186277270317, -0.29769420623779297, -3.968705177307129, -1.6022098064422607, -0.9378547668457031, -2.050847291946411, -3.6424827575683594, -0.011674653738737106, -2.029689311981201, -0.004104523919522762, -0.02768346294760704, -0.30860158801078796, -2.0528621673583984, -0.002412268426269293, -0.1289042830467224, -0.00036900385748595, -0.014092221856117249, -2.141611337661743, -1.394654631614685, -0.0461592897772789, -0.0012272215681150556, -0.003593180561438203, -0.0014290130930021405, -0.00017915551143232733, -1.0655802488327026, -3.805784225463867, -2.359196662902832, -0.2654532194137573, -0.0018744770204648376, -0.2840069830417633, -0.016617223620414734, -0.0001262346631847322, -0.0003073934931308031, -0.7596206665039062, -0.05927611514925957, -0.09603115916252136, -0.010382922366261482, -0.16572652757167816, -0.027750367298722267, -0.02234041318297386, -0.04486486688256264, -0.4228047728538513, -0.5663449764251709, -1.0350122451782227, -0.4377041459083557, -2.8141398429870605, -0.0011043408885598183, -1.057559609413147, -0.7364945411682129, -3.45700973412022e-05, 0.0, -0.10217557847499847, -1.139418125152588, -0.1478501856327057, -0.1570529192686081, -0.004845305811613798, -0.00019643761334009469, -0.0008189899963326752, -0.03082980215549469, -0.04555750638246536, -0.00635626120492816, -0.0008357845945283771, -0.004551408346742392, -0.9024794697761536, -1.0154329538345337, -3.6954195820726454e-05, -0.0026666102930903435, -0.00020632999076042324, -0.00029940891545265913, -1.280104637145996, -4.851700214203447e-05, -0.0006413786904886365, -0.00010680581908673048, -0.00020787939138244838, -3.181375503540039, -1.895331621170044, -0.06050916388630867, -0.003649600315839052, -8.082063141046092e-05, -0.0003165697562508285, -0.13747775554656982, -0.026062266901135445, -0.007025538943707943, -0.05331424996256828, -0.0001262346631847322, -0.002943827537819743, -0.008791313506662846, -0.0037244255654513836, -0.2473611682653427, -0.000714404450263828, -0.01855211704969406, -0.09051191061735153, -0.0014604389434680343, -0.0013611585600301623, -0.964952826499939, -0.05819372832775116, -4.5536911784438416e-05, -0.0019614521879702806, -0.00011228884250158444, -0.00011729506513802335, -0.7455076575279236, -0.05980311334133148, -0.0008192281820811331, -0.037268899381160736, -0.00010489867418073118, -0.010875476524233818, -0.004943292122334242, -0.027208169922232628, -0.5072011947631836, -0.058565035462379456, -0.0006468587671406567, -0.005652989260852337, -0.11224670708179474, -0.0018628163961693645, -0.1798280030488968, -1.2397689715726301e-05, -0.013705671764910221, -0.0058547197841107845, -0.0003703146940097213, -0.0011834054021164775, -2.1276776790618896, -0.008450583554804325, -0.11669928580522537, -0.36497995257377625, -0.11061598360538483, -0.2647380828857422, -0.00011359999916749075, -0.0207394827157259, -1.1086402082582936e-05, -0.0314859077334404, -0.0018240257631987333, -8.642300235806033e-05, -0.0012011463986709714, -1.4504413604736328, -1.07287787614041e-05, -3.0636318115284666e-05], "finish_reason": "length"}], "metrics": {"energy": 290.3980591955187, "energy_per_token": 1.134367418732495, "time": 11.542744, "time_per_token": 0.04508884375}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: ' + directory)\n\n    pattern = file_pattern\n    files = glob.glob(os.path.join(directory, pattern))\n    if len(files) == 0:\n        raise ValueError('No files found matching pattern ' + pattern)\n\n    filenames = [os.path.basename(file) for file in files]\n    data = []\n\n    # Extract numeric data from all text files matching a given pattern\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            lines = f.readlines()\n            data.extend(list(map(int, re.findall(regex, ''.join(lines)))))\n\n    df = pd.DataFrame({'Filename': filenames, 'Numeric Data': data})\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " not", " found", ":", " '", " +", " directory", ")", "\n", "\n", "    ", "pattern", " =", " file", "_", "pattern", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " pattern", "))", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " found", " matching", " pattern", " '", " +", " pattern", ")", "\n", "\n", "    ", "fil", "en", "ames", " =", " [", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", " for", " file", " in", " files", "]", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "#", " Ext", "ract", " numeric", " data", " from", " all", " text", " files", " matching", " a", " given", " pattern", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "file", ")", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "data", ".", "extend", "(", "list", "(", "map", "(", "int", ",", " re", ".", "find", "all", "(", "regex", ",", " ''", ".", "join", "(", "lines", "))", ")))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " fil", "en", "ames", ",", " '", "N", "umeric", " Data", "':", " data", "})", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.5018032193183899, -0.0014860312221571803, -0.0024547225330024958, -0.0036412859335541725, -0.01747988909482956, -0.000976919662207365, -0.027756744995713234, -0.00686962716281414, -9.154854342341423e-05, -5.8410845667822286e-05, -1.7387051582336426, -0.45190149545669556, -0.48964962363243103, -0.003507535206153989, -1.2865839004516602, -0.9844667315483093, -0.06558945029973984, -0.054837167263031006, -0.0027291453443467617, -0.0006100462633185089, -0.3377567231655121, -0.00022587609419133514, -3.319261074066162, -0.04225476086139679, -2.2451791763305664, -9.369411418447271e-05, -0.0002829628065228462, -0.12716259062290192, -0.08132289350032806, -1.078774094581604, -0.04823729023337364, -0.09397535771131516, -0.00018261195509694517, -0.01911504939198494, -0.004626997280865908, -0.43022698163986206, -9.440929716220126e-05, -4.494089080253616e-05, -0.002889507682994008, -0.0009022455778904259, -0.0010526598198339343, -0.0015977962175384164, -0.0005068686441518366, -0.02346939407289028, -0.027177194133400917, -0.007962627336382866, -0.29293951392173767, -0.12890563905239105, -0.8580309748649597, -0.00010179955279454589, -0.0011830481234937906, -0.0016148157883435488, -0.060099177062511444, -8.940297266235575e-05, -0.0001037067049765028, -0.0015699454816058278, -0.004610740579664707, -0.00045408427831716835, -0.029861265793442726, -0.028784656897187233, -2.3245540432981215e-05, -0.0672905296087265, -0.028275467455387115, -0.08598773926496506, -0.9237792491912842, -0.14097453653812408, -0.8903101682662964, -2.80395770072937, -0.003056142944842577, -0.039763618260622025, -0.4013766944408417, -0.0007192885386757553, -0.05249474570155144, -0.00031895318534225225, -3.2814242839813232, -0.009301777929067612, -0.00021705655672121793, -0.06202240288257599, -0.859045147895813, -0.4016920328140259, -3.814689989667386e-06, -0.0004659997357521206, -0.0015304292319342494, -0.09840474277734756, -1.0728830375228426e-06, -0.0017220443114638329, -1.0227251052856445, -0.27975937724113464, -0.022125424817204475, -0.00011336160969221964, -0.00018714107864070684, -0.05935543030500412, -0.009691095910966396, -0.014960121363401413, -0.0912751853466034, -2.835394859313965, -0.31547313928604126, -0.8889894485473633, -0.005385177675634623, -1.3570547103881836, -0.0002728328399825841, -2.74392032623291, -1.997550129890442, -0.07564681768417358, -0.2338058054447174, -0.017796596512198448, -0.15087175369262695, -1.9532833099365234, -0.4599096477031708, -0.002486353972926736, -1.9958922863006592, -1.9422544240951538, -0.07116121053695679, -0.04947176203131676, -0.9457854628562927, -0.0018819731194525957, -0.07204299420118332, -0.309688001871109, -0.049059610813856125, -1.9340275526046753, -1.2874520507466514e-05, -0.0003164505760651082, -0.00038938093348406255, -0.07139765471220016, -9.619726915843785e-05, -0.002408938482403755, -0.0032087289728224277, -0.061128370463848114, -0.12933173775672913, -0.010242518968880177, -0.006998075637966394, -0.3889254927635193, -0.001555662602186203, -0.00026043839170597494, -0.0036440177354961634, -1.6404719352722168, -0.00019536493346095085, -0.04643472284078598, -0.016878176480531693, -0.0017636949196457863, -0.002012848388403654, -1.5744343996047974, -0.0016631354810670018, -0.07935388386249542, -5.722029527532868e-06, -4.756337511935271e-05, -0.08152618259191513, -0.0027419847901910543, -0.004929768852889538, -0.22981905937194824, -2.522097587585449, -0.497294157743454, -1.6472855806350708, -0.7387129664421082, -2.1529903411865234, -0.009331421926617622, -0.0961269959807396, -0.0009991897968575358, -0.27273574471473694, -0.001958120847120881, -0.11138305068016052, -5.566918844124302e-05, -0.0024850459303706884, -0.0002768848498817533, -0.0019530047429725528, -0.001836043898947537, -0.0005516675882972777, -0.3181215226650238, -4.255681051290594e-05, -0.00016199229867197573, -0.0014935302315279841, -0.001396872103214264, -0.007299065589904785, -0.010358146391808987, -0.009951029904186726, -0.04425010085105896, -0.01190097164362669, -0.8573942184448242, -0.005026679486036301, -0.00278632715344429, -2.13382354559144e-05, -0.0015206689713522792, -0.07208947092294693, -0.12105070054531097, -0.016653452068567276, -4.053033626405522e-05, -0.00364176114089787, -0.014945088885724545, 0.0, -8.344646857949556e-07, -0.002512990264222026, -0.05403856188058853, -0.015685515478253365, -0.0001456631434848532, -0.013891911134123802, -0.0005557184922508895, -0.008143909275531769, -0.007872624322772026, -0.005343085154891014, -0.8016707897186279, -0.0831679254770279, -0.0038883094675838947, -0.22814515233039856, -0.003774068783968687, -0.11329824477434158], "finish_reason": "stop"}], "metrics": {"energy": 237.125530637741, "energy_per_token": 1.1238176807475877, "time": 9.466671, "time_per_token": 0.04486573933649289}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(directory, \"does not exist.\")\n\n    filenames = glob.glob(directory + file_pattern)\n    if not filenames:\n        raise ValueError(\"No files matching the pattern\", directory + file_pattern, \"were found.\")\n    filenames = natsort.natsorted(filenames)\n\n    numeric_data = []\n    for filepath in filenames:\n        with open(filepath) as f:\n            lines = f.readlines()\n            numeric_data.append(\n                [\n                    filepath,\n                    [int(re.findall(regex, line)[0]) if re.findall(regex, line) else \"\" for line in lines],\n                ]\n            )\n    df = pd.DataFrame(numeric_data, columns=[\"Filename\", \"Numeric Data\"])\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", ",", " \"", "does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "fil", "en", "ames", " =", " glob", ".", "glob", "(", "directory", " +", " file", "_", "pattern", ")", "\n", "    ", "if", " not", " fil", "en", "ames", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", "\"", ",", " directory", " +", " file", "_", "pattern", ",", " \"", "were", " found", ".", "\"", ")", "\n", "    ", "fil", "en", "ames", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "fil", "en", "ames", ")", "\n", "\n", "    ", "numeric", "_", "data", " =", " []", "\n", "    ", "for", " file", "path", " in", " fil", "en", "ames", ":", "\n", "        ", "with", " open", "(", "file", "path", ")", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "numeric", "_", "data", ".", "append", "(", "\n", "                ", "[", "\n", "                ", "    ", "file", "path", ",", "\n", "                ", "    ", "[", "int", "(", "re", ".", "find", "all", "(", "regex", ",", " line", ")[", "0", "])", " if", " re", ".", "find", "all", "(", "regex", ",", " line", ")", " else", " \"", "\"", " for", " line", " in", " lines", "]", ",", "\n", "                ", "]", "\n", "            ", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "numeric", "_", "data", ",", " columns", "=[", "\"", "Fil", "ename", "\"", ",", " \"", "N", "umeric", " Data", "\"", "])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.5018032193183899, -0.0014860312221571803, -0.0024547225330024958, -0.0036412859335541725, -0.01747988909482956, -0.000976919662207365, -0.027756744995713234, -0.00686962716281414, -9.154854342341423e-05, -5.8410845667822286e-05, -0.28717663884162903, -2.7929282188415527, -2.57135272026062, -1.1909432411193848, -1.0560451745986938, -0.2045118361711502, -0.03129829466342926, -1.1546379327774048, -0.0679285004734993, -0.004603621084243059, -0.005321504082530737, -0.43384289741516113, -0.0005256939912214875, -2.682227373123169, -0.005018732510507107, -9.583967766957358e-05, -0.04465774446725845, -0.18734079599380493, -0.000505677133332938, -0.01938844658434391, -0.005305614788085222, -1.4606562852859497, -0.10065047442913055, -0.17289112508296967, -0.0002989322238136083, -0.00010239553375868127, -0.050206344574689865, -0.018711833283305168, -0.2657252252101898, -0.14968547224998474, -0.6859844923019409, -0.02961895614862442, 0.0, -1.0728830375228426e-06, -0.0011308948742225766, -0.009000327438116074, -0.000645429186988622, -0.029914602637290955, -0.027173597365617752, -3.838465272565372e-05, -0.14571323990821838, -0.5562947392463684, -0.10809899121522903, -0.12218134105205536, -0.37104132771492004, -0.46071258187294006, -0.18029049038887024, -1.9906376600265503, -0.5892691612243652, -2.9406542778015137, -0.3265756070613861, -0.030911289155483246, -8.105902816168964e-05, -0.00025042734341695905, -1.0029174089431763, -0.0655226856470108, -0.8830534219741821, -0.0017353727016597986, -0.14590108394622803, -0.009965664707124233, -0.007185450289398432, -0.003794020274654031, -2.909404993057251, -0.7568288445472717, -0.00025781645672395825, -2.5033637939486653e-05, -0.29984408617019653, -0.2668629586696625, -2.3364747903542593e-05, -0.0003156163729727268, -8.189342770492658e-05, -0.0881093442440033, -6.12716976320371e-05, -0.00203116936609149, -0.002653175499290228, -0.01332755945622921, -1.3232143828645349e-05, -5.006777428206988e-06, -0.20396436750888824, -0.031855255365371704, -0.27991536259651184, -0.0002859421947505325, -1.2471815347671509, -0.010740449652075768, -0.17880131304264069, -0.13719968497753143, -0.13091008365154266, -0.010835855267941952, -0.09948819875717163, -0.09998731315135956, -2.7907488346099854, -1.204296588897705, -0.0030114559922367334, -0.0015776818618178368, -1.1920928244535389e-07, -2.264974000354414e-06, -0.0002936885575763881, -0.0017553649377077818, -0.006885018199682236, -0.32612764835357666, -0.000871159543748945, -0.0002543602604418993, -0.0032131255138665438, -8.666139910928905e-05, -1.76418936252594, -0.0001896439935080707, -0.2672976553440094, -0.031967949122190475, -0.0021743958350270987, -0.0019991665612906218, -1.7197391986846924, -0.002615842269733548, -0.07111102342605591, -1.1324817933200393e-05, -5.090107151772827e-05, -0.09960107505321503, -0.0054270317777991295, -0.006236615125089884, -0.2618081867694855, -1.175374984741211, -0.03860369324684143, -0.4053236246109009, -0.16048243641853333, -0.20534589886665344, -0.4140651226043701, -2.349848747253418, -0.0037512665148824453, -0.7028290629386902, -1.5196385383605957, -0.00026842328952625394, -0.0015510206576436758, -1.3543405532836914, -0.0007674132939428091, -0.2569943964481354, -0.02650722675025463, -0.00040880427695810795, -0.008704693987965584, -0.9331759810447693, -0.5358128547668457, -0.0038324969355016947, -2.3433451652526855, -0.0010402749758213758, -0.3608797490596771, -0.00010835537250386551, -0.0007090438157320023, -0.006042427383363247, -0.0008697302546352148, -0.12094761431217194, -0.1982661932706833, -0.00033122775494121015, -0.031235788017511368, -2.8878419399261475, -0.38412198424339294, -7.176141662057489e-05, -1.1162049770355225, -0.00020430385484360158, -0.0002910667099058628, -0.024868886917829514, -8.189342770492658e-05, -0.005644217599183321, -0.004860846791416407, -0.018088851124048233, -2.038886547088623, -0.20071476697921753, -0.02826666086912155, -0.0015047191409394145, -0.0002760506176855415, -0.0024228524416685104, -0.10936426371335983, -0.5605785250663757, -0.014676582999527454, -0.0007333449902944267, -0.1148604229092598, -0.010834557935595512, -0.0022357723210006952, -0.0003054867556784302, -0.005469121038913727, -1.3568496704101562, -0.5386748313903809, -0.006892003118991852, -0.002959160367026925, -7.950943836476654e-05, -0.001278298324905336, -0.01573961414396763, -0.07613135129213333, -3.0636318115284666e-05, -7.510157047363464e-06, -0.15203718841075897, -0.01926286518573761, -0.09410231560468674, -0.010812387801706791, -0.01342789363116026, -6.723177648382261e-05, -0.00017355366435367614, -9.583967766957358e-05, -0.0037621925584971905, -0.0099950535222888, -0.00029059001826681197, -0.035496022552251816, -0.0004236992390360683, -0.0021190824918448925, -0.02705398015677929, -0.2855601906776428, -0.10034579783678055, -0.0032130067702382803, -1.6829429864883423, -1.0728830375228426e-06, -7.152555099310121e-07, -1.490105023549404e-05, -0.00014673586701974273, -0.18073464930057526], "finish_reason": "stop"}], "metrics": {"energy": 287.9346713237765, "energy_per_token": 1.2684346754351388, "time": 11.124914, "time_per_token": 0.04900843171806168}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if len(files) == 0:\n        raise ValueError('No files matching the pattern found.')\n\n    data = []\n\n    for file in files:\n        try:\n            with open(file, 'r') as f:\n                lines = f.readlines()\n        except FileNotFoundError:\n            data.append([file, []])\n            continue\n\n        numeric_data = []\n\n        for line in lines:\n            match = re.search(regex, line.strip())\n\n            if match:\n                numeric_data.append(int(match.group(1)))\n\n        data.append([file, numeric_data])\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " matching", " the", " pattern", " found", ".", "')", "\n", "\n", "    ", "data", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "data", ".", "append", "([", "file", ",", " [", "]]", ")", "\n", "            ", "continue", "\n", "\n", "        ", "numeric", "_", "data", " =", " []", "\n", "\n", "        ", "for", " line", " in", " lines", ":", "\n", "            ", "match", " =", " re", ".", "search", "(", "regex", ",", " line", ".", "strip", "())", "\n", "\n", "            ", "if", " match", ":", "\n", "                ", "numeric", "_", "data", ".", "append", "(", "int", "(", "match", ".", "group", "(", "1", ")))", "\n", "\n", "        ", "data", ".", "append", "([", "file", ",", " numeric", "_", "data", "])", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "def"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -2.113236904144287, -0.0001679517881711945, -0.14508065581321716, -1.1297860145568848, -0.0001387499796692282, -0.000805053801741451, -0.0019738255068659782, -0.08114516735076904, -0.00013815402053296566, -0.00019441144831944257, -0.002830429933965206, -0.010351303964853287, -0.0015034097013995051, -0.06584417819976807, -0.30621159076690674, -1.2993727978027891e-05, -0.9036338329315186, -0.046518705785274506, -0.09037034213542938, -0.22761143743991852, -0.10159829258918762, -0.1698881834745407, -1.377395510673523, -0.7313867807388306, -0.017780669033527374, -0.0009679876384325325, -0.08191825449466705, -0.00044526674901135266, -2.2514290809631348, -0.3397856056690216, -0.20776395499706268, -0.006800838280469179, -1.0194015502929688, -0.00013398226292338222, -0.09674336761236191, -0.4913676083087921, -0.2544037401676178, -0.5544941425323486, -0.0003516055876389146, -0.0035447163973003626, -0.012559369206428528, -1.7409120798110962, -5.185469490243122e-05, -0.0013096098555251956, -0.0019252828788012266, -0.1881648153066635, -0.0010762381134554744, -0.0002961912250611931, -0.002836967818439007, -0.09316440671682358, -0.07362405955791473, -0.034581515938043594, -0.09700294584035873, -0.0005664412747137249, -0.06088028475642204, -0.017903273925185204, -0.001959905494004488, -0.0036767993588000536, -1.673558235168457, -0.0021743958350270987, -0.09712844341993332, -1.156323378381785e-05, -4.5060096454108134e-05, -0.08009765297174454, -0.0024547225330024958, -0.0036620714236050844, -2.0780577659606934, -0.0008348317351192236, -0.47529086470603943, -0.00011216964776394889, -1.4185804502631072e-05, -0.04264676570892334, -0.01941744238138199, -0.0010980297811329365, -0.6957476735115051, -0.006460021249949932, -0.0018541302997618914, -0.4098189175128937, -0.4613911211490631, -0.047211792320013046, -0.1689964085817337, -0.003945781383663416, -0.00032586511224508286, -0.019655339419841766, -0.42725154757499695, -0.01709417812526226, -0.003953261766582727, -0.1419343501329422, -0.0005490464391186833, -1.469279408454895, -0.033328279852867126, -0.11473841220140457, -0.021335726603865623, -0.41978710889816284, -0.0015142414486035705, -0.5382372140884399, -0.0001311216183239594, -0.0768975019454956, -0.03721503168344498, -0.0008491248008795083, -0.004578108433634043, -0.00127948890440166, -0.0008877150830812752, -0.004057034384459257, -0.7968631386756897, -0.012698741629719734, -0.001998690888285637, -7.60526381782256e-05, -0.8126587271690369, -0.0004618293314706534, -0.001610055100172758, -0.0003721021639648825, -0.0013487775577232242, -1.6865150928497314, -0.04302286356687546, -0.020649921149015427, -0.0061263153329491615, -0.8078219294548035, -0.00013374387344811112, -0.016027778387069702, -0.031190725043416023, -0.15856535732746124, -0.0026204793248325586, -0.00037651124875992537, -0.19949449598789215, -0.0021341899409890175, -0.0029513156041502953, -0.0007580029196105897, -0.016213703900575638, -0.0057907202281057835, -0.29319554567337036, -0.0002356490003876388, -0.0021438251715153456, -0.053971245884895325, -0.02050674706697464, -0.175469771027565, -0.09542463719844818, -0.011394660919904709, -0.003175813239067793, -0.20634658634662628, -0.01626613177359104, -0.2703481912612915, -0.0008690156391821802, -0.0001070442158379592, -0.00038258862332440913, -0.015713561326265335, -0.014715700410306454, -0.005307749379426241, -4.768360213347478e-06, -1.311301275563892e-06, -0.0031898352317512035, -0.00042358008795417845, -0.004330305848270655, -0.001765717868693173, -2.2029080390930176, -0.008589701727032661, -1.823885577323381e-05, -0.0007838514284230769, -0.04051005467772484, -0.0223271232098341, -0.04130123555660248, -0.013270742259919643, -0.019761819392442703, -0.015711097046732903, -6.758938252460212e-05, -0.00019596086349338293, -2.3841574147809297e-05, -0.003972853533923626, -0.008003072813153267, -0.00013767725613433868, -0.024212846532464027, -0.0024258254561573267, -0.3913196623325348, -0.013578670099377632, -0.07209678739309311], "finish_reason": "stop"}], "metrics": {"energy": 263.60857120990744, "energy_per_token": 1.3588070680923063, "time": 9.044973, "time_per_token": 0.04662357216494846}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise FileNotFoundError(f\"No files matching pattern {file_pattern} in the directory {directory}.\")\n\n    # Extract the numeric data from the files, apply regular expressions, and combine it into a DataFrame\n    data = [(filename, re.findall(regex, open(filename).read()) or []) for filename in natsort.natsorted(files)]\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " {", "file", "_", "pattern", "}", " in", " the", " directory", " {", "directory", "}", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " numeric", " data", " from", " the", " files", ",", " apply", " regular", " expressions", ",", " and", " combine", " it", " into", " a", " Data", "Frame", "\n", "    ", "data", " =", " [(", "filename", ",", " re", ".", "find", "all", "(", "regex", ",", " open", "(", "filename", ")", ".", "read", "())", " or", " [", "])", " for", " filename", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")]", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -0.1288846880197525, -0.2749989330768585, -1.0948883295059204, -0.00014494798961095512, -0.0009865660686045885, -0.002429868560284376, -0.0938258096575737, -0.0002687808300834149, -0.00022682955022901297, -0.002572681289166212, -0.01611822284758091, -0.0017240673769265413, -0.07562847435474396, -1.3596043586730957, -0.00011872540198964998, -0.00012838016846217215, -0.5048245787620544, -0.5553097724914551, -0.554924726486206, -0.13387809693813324, -0.05583943426609039, -0.4620051980018616, -1.3436224460601807, -0.8416511416435242, -0.03525104746222496, -0.0009355935617350042, -0.0004920940846204758, -0.04030168801546097, -1.1506338119506836, -3.1669156551361084, -0.4784451127052307, -0.07027875632047653, -0.0021469180937856436, -0.6249065399169922, -0.11505541205406189, -0.01219990011304617, -0.00029452278977259994, -0.004190355539321899, -0.632824718952179, -0.00047958316281437874, -2.5459933280944824, -1.6238499879837036, -0.045356906950473785, -2.480825424194336, -0.40156444907188416, -0.05504817143082619, -0.18444028496742249, -1.1662907600402832, -0.39860832691192627, -3.6799724102020264, -4.763031959533691, -2.352722406387329, -0.9058018326759338, -0.3934117555618286, -0.07470039278268814, -2.682666778564453, -3.280298948287964, -0.13347354531288147, -0.03874797001481056, -1.915570616722107, -0.0014132998185232282, -0.3261737525463104, -0.0025018127635121346, -2.006755828857422, -0.27443593740463257, -3.42014479637146, -1.5714839696884155, -0.035858143121004105, -0.6192346811294556, -0.0003474347176961601, -0.01636265218257904, -0.0002499506517779082, -0.000977038755081594, -0.002711788285523653, -0.0005402297829277813, -0.984977662563324, -0.0008249455713666975, -0.10320550203323364, -0.387563019990921, -0.00014935807848814875, -0.00028463127091526985, -1.5818142890930176, -1.6935954093933105, -0.0514582060277462, -0.4500121474266052, -0.2162986397743225, -0.0006518622976727784, -0.0005123494775034487, -1.867271900177002, -3.0278701160568744e-05, -0.0002397011558059603, -0.00038556772051379085, -0.16286616027355194, -7.784063927829266e-05, -0.0023669579531997442, -0.0017339446349069476, -0.006988250184804201, -0.06292951852083206, -0.019016219303011894, -0.18778975307941437, -0.2663492262363434, -0.009561812505126, -0.004281521309167147, -0.001944795367307961, -0.0011759040644392371, -0.11854366958141327, -0.013253566808998585, -0.05223375931382179, -0.006205813027918339, -0.09250257164239883, -0.0186588317155838, -3.40932747349143e-05, -0.0001805857609724626, -2.4914430468925275e-05, -0.00542679475620389, -0.028513817116618156, -0.00033361115492880344, -0.03651946410536766, -0.01161703560501337, -0.05056487396359444, -1.219191074371338, -0.18063674867153168, -0.004319623112678528, -0.3017202317714691, -0.005749000236392021, -0.12665963172912598], "finish_reason": "stop"}], "metrics": {"energy": 202.81598054122924, "energy_per_token": 1.3987309002843396, "time": 7.158297, "time_per_token": 0.04936756551724138}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError('Invalid directory path. Please provide a valid directory path.')\n\n    file_paths = glob.glob(f'{directory}{file_pattern}')\n    if len(file_paths) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'\")\n\n    file_paths.sort(key=natsort.nsorted)\n\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            numeric_data = re.findall(regex, file.read())\n            df.loc[len(df.index)] = [os.path.basename(file_path), numeric_data]\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Invalid", " directory", " path", ".", " Please", " provide", " a", " valid", " directory", " path", ".", "')", "\n", "\n", "    ", "file", "_", "paths", " =", " glob", ".", "glob", "(", "f", "'{", "directory", "}{", "file", "_", "pattern", "}", "')", "\n", "    ", "if", " len", "(", "file", "_", "paths", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " the", " pattern", " '", "{", "file", "_", "pattern", "}'", "\"", ")", "\n", "\n", "    ", "file", "_", "paths", ".", "sort", "(", "key", "=", "n", "ats", "ort", ".", "ns", "orted", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " file", ".", "read", "())", "\n", "            ", "df", ".", "loc", "[", "len", "(", "df", ".", "index", ")]", " =", " [", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " numeric", "_", "data", "]", "\n", "\n", "    ", "return", " df"], "logprobs": [-1.5368175506591797, -0.05495316907763481, -0.019745690748095512, -1.4185804502631072e-05, -0.0003064401389565319, -0.016045844182372093, -0.9315631985664368, -0.0021023093722760677, -0.0008803306263871491, -0.0025536566972732544, -0.0028198501095175743, -0.01683785393834114, -0.001210790709592402, -0.036383602768182755, -0.008249021135270596, -0.00011574551899684593, -8.439661905867979e-05, -1.766999363899231, -3.306702136993408, -0.2609158754348755, -2.0962581634521484, -1.1416300535202026, -1.9303677082061768, -0.697910726070404, -0.12417054176330566, -0.0059261806309223175, -0.2510179579257965, -0.6227309703826904, -0.07597999274730682, -0.0052032764069736, -0.0007219092221930623, -0.2150762975215912, -0.0002317160106031224, -1.308957815170288, -0.03109828196465969, -1.6802068948745728, -0.005694002378731966, -0.06238176301121712, -0.0001532914029667154, -0.010262577794492245, -0.0019377756398171186, -2.168793201446533, -0.2298007756471634, -0.01810687966644764, -0.6796237230300903, -0.04522360861301422, -6.389413465512916e-05, -0.00011264643399044871, -0.1113237515091896, -0.0002325502864550799, -0.01214867178350687, -0.41277581453323364, -0.12567482888698578, -1.3967576026916504, -0.00011395759065635502, -0.001967162825167179, -6.079655122448457e-06, -0.0001072826053132303, -0.0008521024719811976, -0.07435207813978195, -8.427741704508662e-05, -6.103329360485077e-05, -0.001495791831985116, -0.00622393935918808, -0.00037091050762683153, -0.027956731617450714, -0.018473945558071136, -1.2397689715726301e-05, -2.010310411453247, -0.35545238852500916, -2.561485528945923, -0.07573015242815018, -0.10594897717237473, -1.4181939363479614, -0.2651711404323578, -0.5851271152496338, -0.1887451708316803, -0.5348828434944153, -0.0009445258183404803, -0.015072386711835861, -0.00016020445036701858, -0.007044123485684395, -0.0034364950843155384, -2.9447004795074463, -0.0052994489669799805, -0.0042783161625266075, -0.02721153385937214, -0.00030501006403937936, -1.4399948120117188, -0.016052531078457832, -0.3408263027667999, -1.1848024129867554, -0.006021691020578146, -0.2031966745853424, -0.026967652142047882, -0.0048715234734117985, -0.3612762987613678, -9.595887240720913e-05, -1.6927575416048057e-05, -0.0017282324843108654, -0.780526876449585, -0.6910558938980103, -0.05667141079902649, -0.06758861988782883, -0.38393279910087585, -0.0002766464895103127, -1.825355887413025, -0.08868726342916489, -0.0817316323518753, -2.8132995794294402e-05, -0.028988489881157875, -0.4961681067943573, -0.12606562674045563, -0.03537831827998161, -0.03124040924012661, -3.7431014789035544e-05, -0.009000444784760475, -4.911301948595792e-05, -0.009578225202858448, -0.024184919893741608, -0.0002728328399825841, -0.028483925387263298, -0.030987801030278206, -0.0021947361528873444, -0.7757842540740967, -0.10106324404478073, -0.6213077902793884, -0.1541254073381424, -0.023580241948366165, -0.0012534151319414377, -0.002522978698834777, -1.7881377516459906e-06, -2.6225699912174605e-05, -0.0004188137245364487, -0.001655637752264738, -0.01715441234409809, -0.6564217805862427, -0.0008119623525999486, -0.00025340684805996716, -0.0015707785496488214, -1.8954096958623268e-05, -6.496695277746767e-05, -0.15906482934951782, -0.06048324331641197, -0.021510049700737, -0.10771802067756653, -0.000947622349485755, -0.9223347902297974, -0.0061003677546978, -0.0015240018256008625, -0.0029962430708110332, -2.0908517837524414, -0.005628333427011967, -0.0484880767762661, -0.031037380918860435, -0.7737427353858948, -0.0002580548170953989, -0.005531837232410908, -0.00014935807848814875, -0.0012775840004906058, -0.002538912231102586, -0.00029404606902971864, -0.014310706406831741, -0.0005214046686887741, -7.450303382938728e-05, -0.03894588351249695, -0.007503421511501074, -0.11137600988149643, -1.3610198497772217, -0.464295893907547, -0.015950700268149376, -0.011681841686367989, -0.1717127114534378, -1.537788011773955e-05, -0.00017712931730784476, -1.2330236434936523, -0.004528030753135681, -0.012067761272192001, -0.00435119541361928, -0.017063826322555542, -0.5256041884422302, -5.960462772236497e-07, -0.00014029949670657516, -0.003552081063389778, -0.044770944863557816, -2.3841855067985307e-07, -2.3483953555114567e-05, -0.0009800160769373178, -0.00505538284778595, -9.524368942948058e-05, -0.011140996590256691, -0.01338907890021801, -0.06812962889671326, -1.1444026313256472e-05, -2.3841830625315197e-06, -0.013513986952602863, -0.0073394193314015865, -0.2242807298898697, -0.002694787224754691, -0.053567834198474884, -0.0025844527408480644], "finish_reason": "stop"}], "metrics": {"energy": 221.81086156654368, "energy_per_token": 1.1035366247091725, "time": 9.0423155, "time_per_token": 0.04498664427860697}}
{"outputs": [{"text": "# Create a DataFrame with columns 'Filename' and 'Numeric Data'.\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Check if the specified directory exists.\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found\")\n\n    # Check if any files matching the pattern are found.\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files matching pattern {file_pattern} found in {directory}.\")\n\n    # Iterate over the files and extract the numeric data.\n    for file in natsort.natsorted(file_list):\n        with open(file, 'r', encoding='utf8') as f:\n            lines = f.readlines()\n            data = [int(re.findall(regex, line)[0]) for line in lines if re.findall(regex, line)]\n\n        # Add the file and numeric data to the DataFrame.\n        ", "tokens": ["#", " Create", " a", " Data", "Frame", " with", " columns", " '", "Fil", "ename", "'", " and", " '", "N", "umeric", " Data", "'", ".", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "    ", "#", " Check", " if", " the", " specified", " directory", " exists", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " not", " found", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " any", " files", " matching", " the", " pattern", " are", " found", ".", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " file", "_", "list", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " matching", " pattern", " {", "file", "_", "pattern", "}", " found", " in", " {", "directory", "}", ".", "\"", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " and", " extract", " the", " numeric", " data", ".", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "file", "_", "list", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "8", "')", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "data", " =", " [", "int", "(", "re", ".", "find", "all", "(", "regex", ",", " line", ")[", "0", "])", " for", " line", " in", " lines", " if", " re", ".", "find", "all", "(", "regex", ",", " line", ")]", "\n", "\n", "        ", "#", " Add", " the", " file", " and", " numeric", " data", " to", " the", " Data", "Frame", ".", "\n", "        "], "logprobs": [-1.5363731384277344, -2.570845365524292, -0.4276823401451111, -3.0058200359344482, -0.003961335867643356, -0.49899160861968994, -2.4792726039886475, -0.26973676681518555, -0.05541184917092323, -0.0001045410826918669, -0.002181176096200943, -0.013575729914009571, -0.003156087128445506, -0.0156692024320364, -0.0001728385395836085, -0.0186932310461998, -0.00193813256919384, -1.5393251180648804, -0.11238180845975876, -0.00535280816257, -0.27962085604667664, -0.014836332760751247, -0.01209685206413269, -0.005865148734301329, -0.0016333822859451175, -0.3872888684272766, -0.18577805161476135, -0.02762676030397415, -0.01110810600221157, -0.0019859608728438616, -0.0016035091830417514, -8.618460560683161e-05, -0.006428396794945002, -0.02129068225622177, -0.00042417587246745825, -0.022177543491125107, -0.023641133680939674, -0.0020828000269830227, -0.17541605234146118, -0.0008011230966076255, -0.06268355995416641, -1.7546732425689697, -0.16089387238025665, -0.19766990840435028, -1.254082202911377, -0.006343468092381954, -0.0076653859578073025, -0.2930137813091278, -0.029762104153633118, -0.0005709686665795743, -0.07163204997777939, -0.03126906231045723, -0.0026491330936551094, -3.933898824470816e-06, -0.00015531764074694365, -0.005792261101305485, -1.4077167510986328, -0.00020597243565134704, -0.00028081765049137175, -0.0010970771545544267, -0.000987876090221107, -0.0013459203764796257, -0.0007899263291619718, -0.04277001693844795, -0.004074605647474527, -3.886147169396281e-05, -3.3854863431770355e-05, -0.20732931792736053, -0.36882832646369934, -0.3089395761489868, -0.22901777923107147, -0.8500998616218567, -0.000774917658418417, -0.01590951904654503, -0.5329403877258301, -0.0010885033989325166, -2.0007498264312744, -0.00013851160474587232, -0.0037285825237631798, -0.02839760296046734, -0.0013056810712441802, -0.025650573894381523, -4.011972427368164, -0.06937239319086075, -0.692234218120575, -0.10583692044019699, -0.23329275846481323, -0.003611116437241435, -0.5907893180847168, -0.9860445857048035, -0.10621378570795059, -0.6907752752304077, -0.0029883987735956907, -0.0006680640508420765, -1.3864881992340088, -0.026259921491146088, -0.6816942095756531, -0.004240449983626604, -0.09135548025369644, -0.0001037067049765028, -0.009394722990691662, -0.00119066855404526, -0.3079490065574646, -0.00012981049076188356, -3.790783375734463e-05, -0.002007494680583477, -0.00042655906872823834, -0.00032395837479270995, -0.0011545903980731964, -0.0002864189154934138, -0.023511195555329323, -1.1920858014491387e-05, -1.3947389561508317e-05, -0.01139560341835022, -0.0024804084096103907, -0.016210418194532394, -0.03450953960418701, -0.3816685080528259, -0.018247822299599648, -5.8412379075889476e-06, -6.329813186312094e-05, -0.002001070184633136, -0.0020103498827666044, -0.0004928089329041541, -0.036154940724372864, -0.034802477806806564, -9.298280929215252e-06, -0.06929698586463928, -0.2994286119937897, -0.037809114903211594, -0.03132428973913193, -0.04658117517828941, -0.23705007135868073, -0.7988640666007996, -0.09090221673250198, -0.02052239701151848, -0.0005476167425513268, -0.004267632961273193, -0.02336307428777218, -0.24728399515151978, -0.2389361560344696, -0.5623317956924438, -0.0005962263094261289, -2.2070207595825195, -0.17262594401836395, -0.01309097558259964, -0.00018666432879399508, -0.0012346034636721015, -0.007229241076856852, -0.0007309625507332385, -0.05234542489051819, -1.7922389507293701, -0.0020155846141278744, -0.380357563495636, -0.5636825561523438, -0.7577731609344482, -0.6695383787155151, -0.26137208938598633, -2.403777599334717, -0.1301542967557907, -0.022080766037106514, -0.672320544719696, -0.007161542307585478, -0.0013102050870656967, -0.09268490970134735, -0.8020565509796143, -0.5756363868713379, -0.9624661207199097, -1.07287787614041e-05, -0.00016306500765495002, -0.0001456631434848532, -0.07315792888402939, -5.817244164063595e-05, -0.002387294312939048, -0.001420323271304369, -0.022134287282824516, -1.9550132492440753e-05, -7.033100700937212e-05, -0.06462059915065765, -0.005657494068145752, -0.044838082045316696, -0.6936243772506714, -0.0006884350441396236, -0.0001662831346038729, -0.001987864263355732, -0.23177112638950348, -0.12236098945140839, -0.02280171401798725, -2.5148770809173584, -0.000592890428379178, -0.08349410444498062, -0.04709375277161598, -0.07049119472503662, -1.9249866008758545, -0.005068192724138498, -0.00031454383861273527, -0.09076810628175735, -0.04807722195982933, -0.005264585837721825, -0.011151607148349285, -1.8904451131820679, -0.004220982547849417, -0.1323171854019165, -1.5258672647178173e-05, -9.762764238985255e-05, -0.08288761228322983, -0.0029235025867819786, -0.009047464467585087, -0.4429856836795807, -2.644913673400879, -0.07533089071512222, -0.7986083626747131, -1.102958083152771, -0.005486905109137297, -2.116790771484375, -0.00019762947340495884, -0.3079792261123657, -4.792098479811102e-05, -0.000912369170691818, -0.0018604366341605783, -0.0004357342259027064, -0.10094158351421356, -0.18781030178070068, -9.297892393078655e-05, -0.027266869321465492, -0.22248034179210663, -0.001843778183683753, -0.0001486429391661659, -0.0010508735431358218, -0.45726317167282104, -0.3328147530555725, -7.998623186722398e-05, -1.013236403465271, -0.0001734344696160406, -0.000791236583609134, -0.00529055530205369, -0.00010239553375868127, -0.001262820791453123, -0.09951712191104889, -0.03894336149096489, -1.97100031375885, -0.5345509648323059, -0.35722482204437256, -0.9166632890701294, -0.18113555014133453, -0.5080118775367737, -2.1842143535614014, -1.4193859100341797, -0.0031066511292010546, -0.058851685374975204, -0.006017543841153383, -0.018363816663622856, -0.00010787858627736568, -0.046700071543455124, -0.0019382515456527472, -0.0002849888114724308], "finish_reason": "length"}], "metrics": {"energy": 285.4356726264956, "energy_per_token": 1.1149830961972484, "time": 11.548327, "time_per_token": 0.04511065234375}}
{"outputs": [{"text": "result = []\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=os.path.getmtime)\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the given directory\")\n    else:\n        for filename in files:\n            with open(filename, 'r') as f:\n                content = f.read()\n                numeric_data = re.findall(regex, content)\n                result.append([filename, numeric_data])\n\n    df = pd.DataFrame(result, columns=[\"Filename\", \"Numeric Data\"])\n    return df", "tokens": ["result", " =", " []", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "files", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "get", "m", "time", ")", "\n", "    ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " found", " in", " the", " given", " directory", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "                ", "result", ".", "append", "([", "filename", ",", " numeric", "_", "data", "])", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "result", ",", " columns", "=[", "\"", "Fil", "ename", "\"", ",", " \"", "N", "umeric", " Data", "\"", "])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-4.32594108581543, -0.2244560867547989, -0.4399060904979706, -0.010721579194068909, -1.2121739387512207, -0.0006699701189063489, -2.9922995567321777, -0.07517731189727783, -0.26438599824905396, -0.0006897454150021076, -0.04117448627948761, -0.005433552898466587, -0.259152889251709, -2.9802276912960224e-06, -0.00017009719158522785, -0.003420694498345256, -0.0010097887134179473, -0.002516200765967369, -0.006604272872209549, -0.0008424547268077731, -0.016216635704040527, -4.589452510117553e-05, -2.658331868587993e-05, -0.017156638205051422, -0.00955283921211958, -0.3412415385246277, -1.7276798486709595, -0.895076334476471, -0.008892340585589409, -0.1797536164522171, -0.023614471778273582, -0.008110209368169308, -3.1558837890625, -0.004022365435957909, -0.00039498155820183456, -0.18496553599834442, -0.09720859676599503, -0.08557569980621338, -0.00014065706636756659, -0.3255247175693512, -0.14396396279335022, -1.130911946296692, -1.4149316549301147, -0.8952882289886475, -0.00021264675888232887, -0.0018529404187574983, -0.007572753820568323, -0.18364593386650085, -0.0004674295778386295, -0.0005292683490552008, -0.005817861296236515, -0.015761910006403923, -0.0033772119786590338, -0.19096072018146515, -0.5562835931777954, -2.992108420585282e-05, -0.6036092638969421, -0.5199044942855835, -0.10240663588047028, -0.10660400986671448, -0.38028135895729065, -0.18588149547576904, -0.16814686357975006, -1.2810190916061401, -1.2972865104675293, -0.14355386793613434, -2.2088046073913574, -0.01041147205978632, -2.4680545330047607, -0.0011460172245278955, -0.003215264528989792, -1.788272500038147, -2.685833215713501, -0.0002227773511549458, -0.003921201918274164, -0.02021239511668682, -0.25706198811531067, -1.9450793266296387, -0.018180163577198982, -0.2618212103843689, -0.0018017739057540894, -0.003585459664463997, -0.016365936025977135, -1.0159462690353394, -0.0019947646651417017, -0.0008411445305682719, -0.008801830001175404, -0.25375354290008545, -0.1705717146396637, -0.035069551318883896, -0.1726936548948288, -0.0011809049174189568, -0.4032454192638397, -0.027292853221297264, -0.0020189157221466303, -0.0033573710825294256, -2.3696372509002686, -0.005250236950814724, -0.07788706570863724, -4.8397800128441304e-05, -5.709961988031864e-05, -0.2083159238100052, -0.07502437382936478, -0.17606952786445618, -2.6546518802642822, -0.061198458075523376, -0.12242817133665085, -0.02623124048113823, -0.1627039760351181, -0.00025602878304198384, -0.0039361631497740746, -0.0009990707039833069, -0.0017279945313930511, -0.0018196230521425605, -0.000500196241773665, -0.005384940654039383, -0.012888111174106598, -0.007548145018517971, -0.12975943088531494, -0.7529283761978149, -0.011266305111348629, -0.0044563510455191135, -0.21299231052398682, -0.09510557353496552, -0.06085987016558647, -0.028740525245666504, -4.8636207793606445e-05, -1.2397689715726301e-05, -0.009434047155082226, -0.0016719423001632094, -0.47149771451950073, -0.544951856136322, -0.6648858189582825, -0.0066322204656898975, -0.0031526407692581415, -2.3483953555114567e-05, -0.0024336741771548986, -0.005908286198973656, -0.10229095071554184, -0.12030655890703201, -0.031778231263160706, -2.6154022216796875, -0.026789287105202675, -0.028557725250720978, -7.950943836476654e-05, -0.00019691436318680644, -0.00022301571152638644, -0.017421316355466843, -0.0153142549097538, -0.00021836756786797196, -0.028272686526179314, -0.00033825874561443925, -0.0030623229686170816, -0.03885495662689209, -0.5356428027153015, -0.1768084019422531, -0.0043007503263652325, -0.24499492347240448, -0.006170033942908049, -0.0915343314409256], "finish_reason": "stop"}], "metrics": {"energy": 197.14211122989659, "energy_per_token": 1.2321381951868537, "time": 6.9476447, "time_per_token": 0.043422779375}}
{"outputs": [{"text": "file_pattern = f\"{directory}/**/{file_pattern}\"\n\n    file_list = glob.glob(file_pattern, recursive=True)\n    if file_list == []:\n        raise FileNotFoundError('There are no files that match the given file pattern')\n\n    file_list = sorted(file_list, key=os.path.getmtime, reverse=True)\n\n    data = []\n    for filename in file_list:\n        with open(filename, 'r', encoding='utf8') as f:\n            lines = f.readlines()\n            lines = [line.strip() for line in lines]\n            lines = [line.split(',') for line in lines]\n            lines = [line for line in lines if line]\n            lines = [line for line in lines if line[0].isdigit()]\n            data.append([filename, lines])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    df['Numeric Data'] = df['Numeric Data'].apply(lambda x: [int(y) for y in x", "tokens": ["file", "_", "pattern", " =", " f", "\"", "{", "directory", "}/", "**", "/{", "file", "_", "pattern", "}\"", "\n", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "file", "_", "pattern", ",", " recursive", "=", "True", ")", "\n", "    ", "if", " file", "_", "list", " ==", " []", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "There", " are", " no", " files", " that", " match", " the", " given", " file", " pattern", "')", "\n", "\n", "    ", "file", "_", "list", " =", " sorted", "(", "file", "_", "list", ",", " key", "=", "os", ".", "path", ".", "get", "m", "time", ",", " reverse", "=", "True", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "='", "utf", "8", "')", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "lines", " =", " [", "line", ".", "strip", "()", " for", " line", " in", " lines", "]", "\n", "            ", "lines", " =", " [", "line", ".", "split", "('", ",", "')", " for", " line", " in", " lines", "]", "\n", "            ", "lines", " =", " [", "line", " for", " line", " in", " lines", " if", " line", "]", "\n", "            ", "lines", " =", " [", "line", " for", " line", " in", " lines", " if", " line", "[", "0", "]", ".", "is", "digit", "()", "]", "\n", "            ", "data", ".", "append", "([", "filename", ",", " lines", "])", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "df", "['", "N", "umeric", " Data", "']", " =", " df", "['", "N", "umeric", " Data", "']", ".", "apply", "(", "lambda", " x", ":", " [", "int", "(", "y", ")", " for", " y", " in", " x"], "logprobs": [-3.2461395263671875, -0.07513783872127533, -1.8558330535888672, -0.09385717660188675, -1.9284605979919434, -1.2721195220947266, -0.09702404588460922, -0.10911193490028381, -2.6368660926818848, -0.19750672578811646, -0.29785892367362976, -0.0015567338559776545, -4.2676016164477915e-05, -5.125868119648658e-05, -0.007079042959958315, -0.07937612384557724, -1.7749384641647339, -0.0005277194431982934, -2.7657041549682617, -0.06092941388487816, -0.8511484861373901, -0.010678884573280811, -0.1419612467288971, -0.0005920564290136099, -0.046005263924598694, -0.000715833914000541, -0.009559687227010727, -4.9470632802695036e-05, -0.0004848258395213634, -0.04577799141407013, -0.003805302083492279, -0.0029855461325496435, -0.003057212568819523, -0.0022548031993210316, -0.012891406193375587, -0.43562206625938416, -0.33271628618240356, -2.562056541442871, -0.00011967896716669202, -0.002704773796722293, -1.0599489212036133, -0.0143510140478611, -0.01637156493961811, -0.021662412211298943, -0.005726716946810484, -0.12238989025354385, -1.0790205001831055, -0.00019059749320149422, -0.00014554394874721766, -1.8018966913223267, -3.415374755859375, -0.32053932547569275, -0.0320160947740078, -0.3715674579143524, -3.007361888885498, -0.15260019898414612, -0.22743730247020721, -0.8034695386886597, -2.64461088180542, -0.23131832480430603, -1.5634727478027344, -0.0031072453130036592, -0.23219479620456696, -0.0005737089086323977, -1.5693769454956055, -0.015939554199576378, -0.3086671531200409, -0.37804511189460754, -2.31595778465271, -0.01273522898554802, -0.5871378183364868, -1.9907753085135482e-05, -0.003228810615837574, -0.2614014744758606, -0.028856350108981133, -0.015305450186133385, -1.9493837356567383, -5.638440416078083e-05, -0.0010220548138022423, -0.03722778335213661, -0.08913302421569824, -0.12067177891731262, -0.000198821333469823, -0.9273310303688049, -0.00885547511279583, -0.002731047570705414, -0.07351840287446976, -0.005803402047604322, -0.1245841383934021, -0.5297175049781799, -0.00044264530879445374, -2.105208396911621, -0.5707215666770935, -0.21967484056949615, -0.005869296845048666, -0.2608129382133484, -0.17781148850917816, -1.5830872058868408, -0.008301750756800175, -0.09953644126653671, -1.490105023549404e-05, -0.00015400654228869826, -0.0016148157883435488, -0.004349890165030956, -0.027833497151732445, -0.7172926664352417, -0.0021211046259850264, -0.00144710682798177, -0.0054477802477777, -0.2271062135696411, -0.1971558928489685, -0.029641175642609596, -2.004793643951416, -0.001191025716252625, -0.07743063569068909, -0.07526178658008575, -0.09028386324644089, -1.7263671159744263, -0.010434713214635849, -0.0009263038518838584, -0.43548527359962463, -0.04794280603528023, -0.004104642663151026, -0.010207001119852066, -1.970852017402649, -0.0061346092261374, -0.1509230136871338, -3.4927710657939315e-05, -0.00014578233822248876, -0.1045009195804596, -0.0039505306631326675, -0.004336121492087841, -0.493843674659729, -2.2539525032043457, -0.10063052922487259, -0.27306440472602844, -0.428530216217041, -0.038031429052352905, -0.17143838107585907, -0.029941560700535774, -0.04743407294154167, -0.00025507534155622125, -5.781483559985645e-05, -0.002427609171718359, -0.42516985535621643, -0.019537625834345818, -0.2341974973678589, -1.5513516664505005, -0.05436376854777336, -0.154682457447052, -0.2881121337413788, -2.465914011001587, -0.5056332349777222, -0.9561252593994141, -1.447275161743164, -0.07495580613613129, -0.2931094467639923, -0.00035661060246638954, -6.603976362384856e-05, -0.0011092231143265963, -0.25432702898979187, -0.01357231941074133, -0.19985613226890564, -0.7268840074539185, -0.023553812876343727, -0.4331953525543213, -0.18660128116607666, -0.4994375705718994, -0.10432083159685135, -0.0011180347064509988, -0.004707326181232929, -0.008494673296809196, -0.5930660367012024, -1.2465360164642334, -0.0610036626458168, -0.2843457758426666, -0.9124091863632202, -0.02503015659749508, -0.44653236865997314, -0.3573601543903351, -0.6432247161865234, -0.024503348395228386, -0.00039867559098638594, -0.0016794399125501513, -0.011150074191391468, -1.634216070175171, -0.15496866405010223, -0.01575193554162979, -0.20794881880283356, -0.20695312321186066, -0.14842337369918823, -0.4182998239994049, -0.004887538496404886, -0.07552456855773926, -0.011039018630981445, -0.2138921171426773, -2.006836414337158, -0.0954013392329216, -0.22406399250030518, -0.8723413944244385, -0.1052737608551979, -0.13768604397773743, -0.20621982216835022, -0.021554619073867798, -0.002167496830224991, -0.1723889857530594, -0.01223416905850172, -0.2784336805343628, -0.007026840932667255, -0.0067284926772117615, -8.701899787411094e-05, -0.004181808326393366, -0.026029398664832115, -0.020376985892653465, -0.12220001220703125, -0.014869806356728077, -0.09549745172262192, -0.04447304457426071, -0.00013958434283267707, -0.0004992430913262069, -6.317892984952778e-05, -0.01658978872001171, -0.07615609467029572, -0.0008393579046241939, -0.030723800882697105, -0.007792313117533922, -0.01672801375389099, -0.46712902188301086, -0.7874739766120911, -1.1178717613220215, -0.39569658041000366, -9.226373367710039e-05, -0.0018430643249303102, -0.0012426996836438775, -0.009461797773838043, -0.045916683971881866, -0.04583675041794777, -0.0006800960982218385, -6.437280717364047e-06, -2.729855441430118e-05, -0.00013147920253686607, -0.0012066233903169632, -0.20129422843456268, -0.030662760138511658, -0.2882322371006012, -0.022308237850666046, -0.0013753250241279602, -0.6985872387886047, -0.22121967375278473, -0.0035268981009721756, -1.5424097776412964, -0.02649201825261116, -0.03701746463775635, -0.0007786102942191064, -0.00012516192509792745, -0.030423419550061226], "finish_reason": "length"}], "metrics": {"energy": 281.98020410537737, "energy_per_token": 1.1014851722866303, "time": 11.544704, "time_per_token": 0.0450965}}
{"outputs": [{"text": "try:\n        file_list = glob.glob(os.path.join(directory, file_pattern))\n    except FileNotFoundError as e:\n        raise FileNotFoundError(e)\n    if not file_list:\n        raise ValueError(\"No files matching the pattern are found\")\n\n    data = []\n    for file_path in file_list:\n        with open(file_path) as f:\n            file_data = f.readlines()\n            for row in file_data:\n                matches = re.findall(regex, row)\n                if matches:\n                    data.append([os.path.basename(file_path), matches])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    df['Filename'] = df['Filename'].apply(lambda x: os.path.splitext(x)[0])\n\n    return df", "tokens": ["try", ":", "\n", "        ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "except", " File", "NotFound", "Error", " as", " e", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "e", ")", "\n", "    ", "if", " not", " file", "_", "list", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " are", " found", "\"", ")", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ")", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " f", ".", "read", "lines", "()", "\n", "            ", "for", " row", " in", " file", "_", "data", ":", "\n", "                ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " row", ")", "\n", "                ", "if", " matches", ":", "\n", "                ", "    ", "data", ".", "append", "([", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " matches", "])", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "df", "['", "Fil", "ename", "']", " =", " df", "['", "Fil", "ename", "']", ".", "apply", "(", "lambda", " x", ":", " os", ".", "path", ".", "spl", "ite", "xt", "(", "x", ")[", "0", "])", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.751220703125, -0.0006797387031838298, -0.007965702563524246, -0.012515692971646786, -2.1671268939971924, -0.06082150712609291, -0.5507236123085022, -0.005764408502727747, -0.21513685584068298, -0.00046850196667946875, -0.01399983000010252, -0.0036450866609811783, -0.2641955316066742, -1.6689286894688848e-06, -0.0001234931987710297, -0.0036462745629251003, -0.0012319840025156736, -0.0025882574263960123, -0.008154314942657948, -0.000659248442389071, -0.019851693883538246, -3.111314072157256e-05, -1.9073304429184645e-05, -0.014174262061715126, -0.012613990344107151, -0.9352676868438721, -0.0010094314347952604, -0.10266001522541046, -4.827859811484814e-05, -2.0265558760002023e-06, -1.7941175699234009, -0.3379024863243103, -0.0011051744222640991, -0.002559007378295064, -0.0006507901125587523, -0.9058035016059875, -0.22144237160682678, -0.00034278715611435473, -0.0001731960946926847, -0.1320190727710724, -1.4379067420959473, -0.10275886952877045, -0.09869326651096344, -0.599375307559967, -0.7428193092346191, -0.5137458443641663, -0.01955995336174965, -2.1815061700181104e-05, -0.0001817776501411572, -0.0020738777238875628, -0.013176274485886097, -0.0006625840906053782, -0.05481978878378868, -0.021500250324606895, -2.276871418871451e-05, -1.283931016921997, -0.884895920753479, -0.04438946023583412, -0.10932900011539459, -0.2542649805545807, -0.13877853751182556, -0.181879922747612, -3.5434725284576416, -0.0015844660811126232, -1.9878246784210205, -0.00039307496626861393, -0.0020249830558896065, -0.6599836945533752, -0.000573351513594389, -2.0050783157348633, -0.7090875506401062, -0.1462496519088745, -0.008526468649506569, -0.11912162601947784, -0.1550568789243698, -0.7458181381225586, -0.91730135679245, -0.681060254573822, -0.0012365083675831556, -0.393398642539978, -6.6756979322235566e-06, -6.19869097135961e-05, -0.0004183370911050588, -0.003198272082954645, -0.0034023988991975784, -0.8375797867774963, -0.0006691362359561026, -0.0002269487304147333, -0.0025159630458801985, -1.847726889536716e-05, -9.238292841473594e-05, -1.6836681365966797, -0.0001896439935080707, -0.28242504596710205, -0.01639079861342907, -0.0017057405784726143, -0.002113253576681018, -2.059539556503296, -0.010117672383785248, -0.320139616727829, -0.003116752253845334, -0.45686623454093933, -7.319182623177767e-05, -7.855583680793643e-05, -1.7745261192321777, -0.013287446461617947, -0.011734625324606895, -0.5715047717094421, -1.6799097061157227, -2.5886120796203613, -0.02747066505253315, -0.03414923697710037, -0.00019095504831057042, -0.00023731753753963858, -0.004018328618258238, -0.006641576066613197, -0.002014394849538803, -1.706754207611084, -0.0009068905492313206, -0.0184190571308136, -6.222531374078244e-05, -0.004891097079962492, -0.057814404368400574, -0.0008541273418813944, -0.0009161804337054491, -0.0003110878460574895, -0.0031708222813904285, -0.07580219954252243, -0.008954251185059547, -0.0055242497473955154, -0.20773945748806, -0.13228313624858856, -0.016765644773840904, -0.01020924374461174, -0.00017569905321579427, -0.000350175570929423, -0.20372402667999268, -0.00963926687836647, -0.026949550956487656, -0.3550587296485901, -0.6596462726593018, -8.344646857949556e-07, -0.0005654881824739277, -0.004678731318563223, -0.04898231104016304, -5.960462772236497e-07, -2.1576648578047752e-05, -0.0023913378827273846, -0.00015710550360381603, -0.0002343380037928, -0.016715703532099724, -0.05477193742990494, -0.23575547337532043, -0.037228699773550034, -0.0037057793233543634, -0.4675281047821045, -0.0052994489669799805, -0.20687828958034515, -0.004210298415273428, -0.0054069943726062775, -2.825220326485578e-05, -0.0006905793561600149, -0.015914328396320343, -0.017878685146570206, -0.07200494408607483, -0.015271756798028946, -0.09782668203115463, -0.028997523710131645, -6.246371776796877e-05, -0.0004060635983478278, -2.90866428258596e-05, -0.010508914478123188, -0.01932530663907528, -0.00031764229061082006, -0.01924251951277256, -0.0038880719803273678, -0.036549344658851624, -0.28630331158638, -1.15858793258667, -1.625452995300293, -0.6812800765037537, -1.2040065485052764e-05, -0.00027497802511788905, -0.02577860653400421, -0.4488857388496399, -0.008051439188420773, -0.00044169207103550434, -0.0009495278936810791, -0.00032646095496602356, -0.001446868758648634, -0.8283975124359131, -0.0041675628162920475, -0.8931708931922913, -0.07630068808794022, -0.002542717382311821, -0.7289818525314331, -1.9073468138230965e-06, -0.0003830652858596295, -0.0009283285471610725, -0.7317686080932617, -3.218599158572033e-05, -3.576278118089249e-07, -0.00013755806139670312, -0.011434142477810383, -0.0017929683672264218, -0.002641286002472043, -0.013081209734082222, -0.051713962107896805, -0.9561235904693604, -0.0018675759201869369, -0.061461932957172394, -0.0028607419226318598, -0.32319921255111694, -0.006164110265672207, -0.09759705513715744], "finish_reason": "stop"}], "metrics": {"energy": 241.37758070564269, "energy_per_token": 1.12268642188671, "time": 9.690677, "time_per_token": 0.04507291627906977}}
{"outputs": [{"text": "# Create a pandas DataFrame to hold the extracted data\n    df = pd.DataFrame()\n\n    # Create a list of absolute paths for all files matching the given pattern in the directory\n    files = [f for f in glob.glob(os.path.join(directory, file_pattern))]\n\n    if not files:\n        raise ValueError(\"No files matching the pattern {pattern} were found in {directory}.\".format(pattern=file_pattern, directory=directory))\n\n    # Loop over the files and extract numeric data\n    for f in files:\n        print(f)\n        filename, _ = os.path.splitext(f)\n        with open(f) as file:\n            for line in file:\n                if re.search(regex, line) is not None:\n                    try:\n                        numeric_data = [int(n) for n in re.findall(regex, line)]\n                    except ValueError as e:\n                        raise ValueError(f\"Failed to extract numeric data from file {filename}: {line}. {e}\")\n                    df.loc[len(df", "tokens": ["#", " Create", " a", " pandas", " Data", "Frame", " to", " hold", " the", " extracted", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " absolute", " paths", " for", " all", " files", " matching", " the", " given", " pattern", " in", " the", " directory", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "]", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " matching", " the", " pattern", " {", "pattern", "}", " were", " found", " in", " {", "directory", "}", ".", "\"", ".", "format", "(", "pattern", "=", "file", "_", "pattern", ",", " directory", "=", "directory", "))", "\n", "\n", "    ", "#", " Loop", " over", " the", " files", " and", " extract", " numeric", " data", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "print", "(", "f", ")", "\n", "        ", "filename", ",", " _", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "f", ")", "\n", "        ", "with", " open", "(", "f", ")", " as", " file", ":", "\n", "            ", "for", " line", " in", " file", ":", "\n", "                ", "if", " re", ".", "search", "(", "regex", ",", " line", ")", " is", " not", " None", ":", "\n", "                ", "    ", "try", ":", "\n", "                ", "        ", "numeric", "_", "data", " =", " [", "int", "(", "n", ")", " for", " n", " in", " re", ".", "find", "all", "(", "regex", ",", " line", ")]", "\n", "                ", "    ", "except", " Value", "Error", " as", " e", ":", "\n", "                ", "        ", "raise", " Value", "Error", "(", "f", "\"", "Failed", " to", " extract", " numeric", " data", " from", " file", " {", "filename", "}:", " {", "line", "}", ".", " {", "e", "}\"", ")", "\n", "                ", "    ", "df", ".", "loc", "[", "len", "(", "df"], "logprobs": [-1.5363731384277344, -2.570845365524292, -0.4276823401451111, -3.366083860397339, -0.06301067024469376, -0.0016920547932386398, -1.875901699066162, -2.2703561782836914, -0.10763324052095413, -0.6535636186599731, -0.6338222026824951, -0.25076231360435486, -0.0022891764529049397, -0.13264568150043488, -0.013511164113879204, -0.011484936811029911, -0.007233383134007454, -0.0004999579978175461, -1.9193150997161865, -0.00304473377764225, -0.21038194000720978, -0.0004621868138201535, -0.08858755230903625, -2.69690203666687, -0.15260572731494904, -0.32743144035339355, -0.36766138672828674, -3.538684844970703, -0.554271399974823, -1.0883111953735352, -0.5776322484016418, -0.4095277488231659, -0.41296419501304626, -0.010808967985212803, -0.949028491973877, -0.2581457793712616, -0.6347088813781738, -0.005880792159587145, -1.0069823265075684, -0.05095941573381424, -0.0007073761080391705, -2.113199234008789, -0.09932954609394073, -1.4989418983459473, -1.950358510017395, -0.0748935341835022, -0.001885304693132639, -0.002133714035153389, -0.11743128299713135, -0.00011884459672728553, -0.06087389215826988, -0.002555915853008628, -0.21332038938999176, -2.0265558760002023e-06, -3.85038583772257e-05, -0.0027177324518561363, -0.0013340153964236379, -0.0015529250958934426, -0.00827786885201931, -0.00047195740626193583, -0.01452021487057209, -2.5629668016335927e-05, -2.90866428258596e-05, -0.013595722615718842, -0.414394736289978, -0.0037735935766249895, -0.23483186960220337, -0.00027926836628466845, -1.8893953561782837, -0.36478355526924133, -0.019183697178959846, -0.0028820191510021687, -0.044958554208278656, -0.0016011287225410342, -0.3149380385875702, -0.15096227824687958, -1.2397689715726301e-05, -0.6282852292060852, -0.6312247514724731, -0.027652503922581673, -0.04155365377664566, -0.19474028050899506, -0.08482066541910172, -0.32510149478912354, -4.1253509521484375, -3.3348169326782227, -0.04970568045973778, -1.260196566581726, -0.0005302215577103198, -0.24275128543376923, -1.034212589263916, -0.15911860764026642, -0.24870498478412628, -0.03864016383886337, -0.022529946640133858, -0.07362793385982513, -0.0017137139802798629, -0.000819466426037252, -0.374130517244339, -0.005977965891361237, -0.034039437770843506, -0.0009384519071318209, -0.0007277462864294648, -0.0023057085927575827, -0.02649375982582569, -0.0012867513578385115, -0.0037461596075445414, -0.0030764653347432613, -0.0024536524433642626, -0.05603715032339096, -0.0013962768716737628, -0.2932189106941223, -2.1937479972839355, -1.054142713546753, -1.2394239902496338, -0.40093445777893066, -0.20054660737514496, -0.22622527182102203, -0.4179709553718567, -0.014586594887077808, -1.453218698501587, -0.0017797596519812942, -0.040548406541347504, -1.190378189086914, -0.13422714173793793, -0.258440226316452, -0.00041154498467221856, -0.0028177103959023952, -0.03778569772839546, -3.7857983112335205, -0.28645190596580505, -0.24412941932678223, -0.06298179179430008, -0.03171563893556595, -0.06632556021213531, -2.663503885269165, -2.13441801071167, -2.3990745544433594, -0.030384564772248268, -0.009302486665546894, -3.2186455882765586e-06, -1.7404405298293568e-05, -0.04937690868973732, -0.04108136147260666, -4.386805812828243e-05, -2.3841855067985307e-07, -0.00013433984713628888, -0.4446902275085449, -0.001335444045253098, -0.07008405774831772, -0.14411962032318115, -0.9098808169364929, -0.001615291927009821, -0.000686767278239131, -0.019995778799057007, -0.7753041982650757, -0.0012641304638236761, -0.5836373567581177, -0.012367934919893742, -0.005530651658773422, -0.007297290023416281, -2.8531668186187744, -0.1095806285738945, -0.003962760791182518, -0.012694151140749454, -0.04574679210782051, -0.002980079036206007, -0.005779698025435209, -2.9650497436523438, -0.5456678867340088, -0.0001705739414319396, -0.20673075318336487, -0.001459605642594397, -0.003969766199588776, -0.0004659997357521206, -0.00525687774643302, -2.4230880737304688, -0.08854281902313232, -0.10627220571041107, -4.410646579344757e-05, -0.0020199865102767944, -0.039465367794036865, -0.0022851326502859592, -0.0007808735244907439, -3.1978070735931396, -0.0001677133986959234, -0.005464615765959024, -0.0018411604687571526, -0.001116605824790895, -1.693346381187439, -0.03603719547390938, -0.047153908759355545, -0.05060556158423424, -0.762926459312439, -0.042251329869031906, -0.0026637569535523653, -2.029588222503662, -0.024231696501374245, -0.01010728720575571, -0.0005922947311773896, -0.00015066919149830937, -0.042114533483982086, -0.0014646052150055766, -0.008171459659934044, -0.002409533131867647, -0.0016927688848227262, -0.0020024979021400213, -0.0002044230350293219, -0.0026310610119253397, -0.048008594661951065, -0.007736717816442251, -0.007528977934271097, -0.6707902550697327, -0.002435457892715931, -0.17667463421821594, -1.3232143828645349e-05, -1.9041011333465576, -0.16932334005832672, -0.00037102968781255186, -0.00717586325481534, -0.00029976642690598965, -0.0006337541271932423, -2.3851218223571777, -0.07725464552640915, -1.5616295058862306e-05, -0.161375030875206, -1.5843225717544556, -0.08433309197425842, -2.7114768028259277, -0.011724492534995079, -0.8886553049087524, -0.05496896430850029, -0.010112598538398743, -0.06012982130050659, -1.4045928716659546, -0.22880424559116364, -0.22137358784675598, -0.6987846493721008, -0.015565572306513786, -2.6167685985565186, -0.7649542093276978, -0.48750749230384827, -1.5962661504745483, -0.08003558963537216, -0.08117133378982544, -0.0011087467428296804, -0.1037534847855568, -0.31777918338775635, -0.14331436157226562, -0.2612502872943878, -0.5360605120658875, -0.01731458678841591, -0.005823194514960051, -0.49539974331855774, -3.40932747349143e-05, -9.500529267825186e-05], "finish_reason": "length"}], "metrics": {"energy": 282.0174181318283, "energy_per_token": 1.1016305395774544, "time": 11.555185, "time_per_token": 0.04513744140625}}
{"outputs": [{"text": "file_list = glob.glob(f'{directory}{file_pattern}')\n    if len(file_list) == 0:\n        raise FileNotFoundError\n\n    data_df = pd.DataFrame({'Filename': [], 'Numeric Data': []})\n    for filename in file_list:\n        with open(filename, 'r') as file:\n            numeric_data = re.findall(regex, file.read())\n            if numeric_data:\n                numeric_data = [int(item) for item in numeric_data]\n                data_df = pd.concat([data_df,\n                                    pd.DataFrame({'Filename': [filename], 'Numeric Data': [numeric_data]})],\n                                   ignore_index=True)\n\n    data_df.sort_values('Filename', inplace=True)\n    return data_df", "tokens": ["file", "_", "list", " =", " glob", ".", "glob", "(", "f", "'{", "directory", "}{", "file", "_", "pattern", "}", "')", "\n", "    ", "if", " len", "(", "file", "_", "list", ")", " ==", " ", "0", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "\n", "\n", "    ", "data", "_", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " []", ",", " '", "N", "umeric", " Data", "':", " []", "})", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " file", ".", "read", "())", "\n", "            ", "if", " numeric", "_", "data", ":", "\n", "                ", "numeric", "_", "data", " =", " [", "int", "(", "item", ")", " for", " item", " in", " numeric", "_", "data", "]", "\n", "                ", "data", "_", "df", " =", " pd", ".", "concat", "([", "data", "_", "df", ",", "\n", "                ", "                ", "    ", "pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " [", "filename", "]", ",", " '", "N", "umeric", " Data", "':", " [", "numeric", "_", "data", "]", "})]", ",", "\n", "                ", "                ", "   ", "ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "data", "_", "df", ".", "sort", "_", "values", "('", "Fil", "ename", "'", ",", " in", "place", "=", "True", ")", "\n", "    ", "return", " data", "_", "df", "\n", "\n", "def"], "logprobs": [-3.2461395263671875, -0.07513783872127533, -0.7998484969139099, -0.013189450837671757, -0.22195333242416382, -0.0004755319678224623, -0.02890510857105255, -0.004950528033077717, -2.6610679626464844, -0.4357813596725464, -0.021417757496237755, -0.5091087818145752, -0.030758364126086235, -4.541770613286644e-05, -5.638440416078083e-05, -0.09508248418569565, -0.00029416524921543896, -0.016668692231178284, -0.16107279062271118, -0.3019259572029114, -1.3216866254806519, -0.0002779574424494058, -0.001839375589042902, -1.9907753085135482e-05, -0.00011157367407577112, -0.004988959990441799, -0.13353018462657928, -0.0003781795676331967, -0.0003349220205564052, -0.004208636935800314, -0.018330343067646027, -0.0024160738103091717, -0.11517918854951859, -0.9559946060180664, -0.0001711698860162869, -0.00010978573118336499, -2.3171472549438477, -0.6524049043655396, -0.0004627825692296028, -2.4002685546875, -0.8067408204078674, -2.2567126750946045, -0.019201355054974556, -0.15622283518314362, -0.00010752100206445903, -0.04424747824668884, -1.7121330499649048, -0.1591462641954422, -0.07934529334306717, -5.245071224635467e-05, -0.008344428613781929, -0.6805378794670105, -0.07448995858430862, -0.02564232423901558, -0.022964831441640854, -0.0005087750032544136, -0.02397218905389309, -0.0008445986895821989, -0.010012048296630383, -0.07254734635353088, -0.007906687445938587, -0.5868324041366577, -0.1705717146396637, -1.266515851020813, -0.005755756050348282, -0.9335443377494812, -1.9311717551317997e-05, -0.0003583981015253812, -0.0006835508393123746, -0.004238551016896963, -0.015169140882790089, -0.7192686796188354, -0.002831143094226718, -0.0006554362480528653, -0.014867574907839298, -0.1921173632144928, -0.08632776886224747, -0.03351689502596855, -0.14569222927093506, -0.00083078199531883, -0.938838541507721, -0.01490586344152689, -0.0030067020561546087, -0.0034659572411328554, -1.8647286891937256, -0.013343322090804577, -0.04997242987155914, -0.03390416130423546, -0.8223565816879272, -0.000348268891684711, -0.006995707750320435, -0.00035482310340739787, -0.0011711412807926536, -0.0028790475334972143, -0.00034171465085819364, -0.01904136687517166, -0.0006797387031838298, -0.0001072826053132303, -0.036713454872369766, -0.009665122255682945, -0.23430293798446655, -1.1789188385009766, -1.5890908241271973, -1.4662635294371285e-05, -4.768360213347478e-06, -0.06704608350992203, -0.013149567879736423, -0.0007510940195061266, -1.1737854480743408, -0.0008571050129830837, -0.015028703957796097, -0.03776629641652107, -0.17257538437843323, -0.10013443231582642, -0.007726544979959726, -3.32895565032959, -0.01988792233169079, -0.02571563795208931, -0.0002949994814116508, -6.401333666872233e-05, -0.01635831408202648, -1.9430925021879375e-05, -8.583032467868179e-06, -0.04397600516676903, -0.02480853535234928, -0.32255417108535767, -0.08353490382432938, -0.005858156364411116, -0.0033098459243774414, -0.16078759729862213, -0.9140675663948059, -0.0010150285670533776, -0.07298605889081955, -0.026809945702552795, -0.021739985793828964, -6.079655122448457e-06, -1.6689286894688848e-06, -0.0035187015309929848, -2.6282970905303955, -0.0008892634068615735, -0.19158020615577698, -1.7271108627319336, -0.0009585791267454624, -1.0371154530730564e-05, -0.0019143365789204836, -0.1554766744375229, -0.07147113233804703, -0.005996807012706995, -8.95221673999913e-05, -0.0013708013575524092, -0.2120877504348755, -0.1101280152797699, -0.009046046994626522, -0.0006160030607134104, -0.8816869258880615, -0.0004593271005433053, -1.5258672647178173e-05, -0.001699790358543396, -0.0015174552099779248, -0.17362041771411896, -0.007811711169779301, -8.821448318485636e-06, -3.576278118089249e-07, -0.013522102497518063, -0.5801774263381958, -0.005037947557866573, -0.05122571811079979, -0.0016916978638619184, -0.014120195992290974, -1.4364007711410522, -0.42218416929244995, -2.3841855067985307e-07, -0.0004854215949308127, -0.006052498705685139, -0.0008387623238377273, -0.041798919439315796, -0.0036783432587981224, -0.6827497482299805, -0.022399982437491417, -2.8643064498901367, -0.0016529004788026214, -0.002138829091563821, -0.906335175037384, -1.5595614910125732, -8.535020606359467e-05, -0.11010004580020905, -0.624321460723877, -0.09286276996135712, -9.333651541965082e-05, -0.050841137766838074, -8.11782301752828e-05, -0.22362598776817322, -9.929640509653836e-05, -0.0023965705186128616, -0.0008048156159929931, -0.19531448185443878, -0.008850039914250374, -0.4728967547416687, -0.12992076575756073, -0.023034030571579933, -0.00010775939153973013, -1.5020257706055418e-05, -0.4113864600658417, -0.0069966549053788185, -0.08126310259103775], "finish_reason": "stop"}], "metrics": {"energy": 225.2085760707855, "energy_per_token": 1.0985784198574904, "time": 9.042835, "time_per_token": 0.04411139024390244}}
{"outputs": [{"text": "# Check the existence of the directory\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n\n    # Collect all matching files in a list\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No matching files found\")\n\n    # Read the files and extract numeric data\n    data = []\n    for file in sorted(files):\n        with open(file, 'r') as f:\n            # print(f.name)\n            lines = f.readlines()\n            # print(lines)\n            line_numbers = []\n            line_data = []\n            for line_index, line in enumerate(lines):\n                m = re.findall(regex, line)\n                if m:\n                    line_numbers.append(line_index)\n                    line_data.append(m)\n            df = pd.DataFrame({'Filename': [file],\n                               'Numeric Data': line_data})\n            data.append(df", "tokens": ["#", " Check", " the", " existence", " of", " the", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ":", " {", "}\"", ".", "format", "(", "directory", "))", "\n", "\n", "    ", "#", " Collect", " all", " matching", " files", " in", " a", " list", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " matching", " files", " found", "\"", ")", "\n", "\n", "    ", "#", " Read", " the", " files", " and", " extract", " numeric", " data", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " sorted", "(", "files", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " print", "(", "f", ".", "name", ")", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "#", " print", "(", "lines", ")", "\n", "            ", "line", "_", "numbers", " =", " []", "\n", "            ", "line", "_", "data", " =", " []", "\n", "            ", "for", " line", "_", "index", ",", " line", " in", " enumerate", "(", "lines", "):", "\n", "                ", "m", " =", " re", ".", "find", "all", "(", "regex", ",", " line", ")", "\n", "                ", "if", " m", ":", "\n", "                ", "    ", "line", "_", "numbers", ".", "append", "(", "line", "_", "index", ")", "\n", "                ", "    ", "line", "_", "data", ".", "append", "(", "m", ")", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Fil", "ename", "':", " [", "file", "]", ",", "\n", "                ", "               ", "'", "N", "umeric", " Data", "':", " line", "_", "data", "})", "\n", "            ", "data", ".", "append", "(", "df"], "logprobs": [-1.5363731384277344, -0.992081344127655, -2.9406535625457764, -2.399411201477051, -0.0051602269522845745, -0.057385414838790894, -0.49623480439186096, -0.20115463435649872, -0.001210195361636579, -0.07296068221330643, -0.021832481026649475, -0.004478899762034416, -4.172316494077677e-06, -0.00014065706636756659, -0.006188160739839077, -1.1715121269226074, -0.0001705739414319396, -0.00032574593205936253, -0.0010027624666690826, -0.0013452060520648956, -0.0026362924836575985, -0.0006482883472926915, -0.034543052315711975, -0.005355653818696737, -4.3987260141875595e-05, -4.0649541915627196e-05, -0.13957644999027252, -1.7042118310928345, -0.3389091193675995, -0.7464483380317688, -0.0020666210912168026, -0.6697615385055542, -0.5747702717781067, -0.13390207290649414, -0.0008737798780202866, -0.0009950215462595224, -0.00017498392844572663, -0.002950127236545086, -0.0003234816831536591, -0.0005404680268839002, -0.05413364991545677, -0.0007223857101053, -0.055522371083498, -3.2002086639404297, -0.5785245895385742, -2.477475643157959, -0.3861398994922638, -1.1897324323654175, -1.5939416885375977, -0.17999829351902008, -0.2664780020713806, -0.0006048041977919638, -0.8631398677825928, -0.06803474575281143, -0.10566242784261703, -0.00013612773909699172, -0.013229803182184696, -0.008757517673075199, -0.11188500374555588, -0.00017176583060063422, -4.2199197196168825e-05, -0.00309750041924417, -0.00031573555315844715, -0.0005990855861455202, -0.0017445358680561185, -0.0002699726028367877, -0.017012612894177437, -2.884823152271565e-05, -2.2649508537142538e-05, -0.008797693997621536, -0.0042913733050227165, -0.4204361140727997, -0.24700821936130524, -0.5842735171318054, -0.015831727534532547, -0.0013906818348914385, -0.011123313568532467, -0.000388665939681232, -0.016319729387760162, -0.0144360875710845, -8.821448318485636e-06, -0.11026660352945328, -0.03380090743303299, -0.018786944448947906, -1.9074701070785522, -0.016022030264139175, -0.02935667708516121, -2.127178192138672, -0.001064806361682713, -0.0033837463706731796, -0.04195427894592285, -0.0005236684810370207, -0.1172637864947319, -3.20093035697937, -1.2457374334335327, -0.7553937435150146, -1.0191096067428589, -0.5903725028038025, -0.3072488009929657, -0.05314922705292702, -0.33052971959114075, -0.001128275180235505, -1.9379780292510986, -0.22073672711849213, -0.08411426097154617, -0.013491288758814335, -0.007131833583116531, -0.08814787864685059, -0.7873895764350891, -0.22206827998161316, -2.8271353244781494, -0.0019507441902533174, -0.2514563500881195, -0.7570509910583496, -0.04613390192389488, -0.00482252798974514, -0.33624979853630066, -0.0009434539824724197, -0.0001287377526750788, -0.0015355474315583706, -0.23450446128845215, -0.16089458763599396, -0.03692636266350746, -0.09001131355762482, -0.0009845414897426963, -0.03512882441282272, -0.023696783930063248, -0.0015595904551446438, -0.0014940063701942563, -3.4968066215515137, -4.780527114868164, -0.16688597202301025, -0.7528533935546875, -0.29200610518455505, -1.3176589012145996, -0.1232193261384964, -0.04486874118447304, -0.0077484287321567535, -2.570089340209961, -0.00347213470377028, -0.14738160371780396, -5.352353764465079e-05, -9.357491217087954e-05, -0.13696135580539703, -0.00851382128894329, -0.011699985712766647, -0.10118456184864044, -1.5834887027740479, -0.2889622151851654, -0.04776075482368469, -0.09445347636938095, -0.036808595061302185, -0.005835164804011583, -0.0625985711812973, -4.098219394683838, -0.4329502582550049, -1.7479972839355469, -0.05161886662244797, -1.9117982387542725, -0.02052321471273899, -0.017019644379615784, -3.062260389328003, -0.02203458920121193, -0.7472339868545532, -0.008884069509804249, -0.015440567396581173, -0.0008671099785715342, -0.07553020864725113, -0.2601027488708496, -1.2547500133514404, -1.3211826086044312, -1.9661988019943237, -0.04514271020889282, -0.022753356024622917, -0.021060761064291, -0.005285930819809437, -0.0009900197619572282, -0.008489353582262993, -0.21761366724967957, -0.004597213119268417, -0.012999903410673141, -2.9040393829345703, -0.006665733177214861, -0.0028880813624709845, -6.937739817658439e-05, -0.90408855676651, -0.05062369257211685, -0.0009459549910388887, -0.0019326595356687903, -0.00044276448898017406, -0.011578621342778206, -0.17051240801811218, -0.012479432858526707, -0.017240772023797035, -0.31290045380592346, -0.37783655524253845, -0.0650172308087349, -0.023717621341347694, -0.0009833505610004067, -0.0008181562297977507, -0.3969234526157379, -0.005177067592740059, -0.12305638194084167, -0.009887410327792168, -0.009415152482688427, -0.010123927146196365, -0.08428455144166946, -0.0033467968460172415, -5.864924969500862e-05, -0.6302237510681152, -0.0030348694417625666, -0.0016949110431596637, -0.003354044398292899, -0.043730929493904114, -0.0019032713025808334, -0.002275855513289571, -0.015228786505758762, -0.20690195262432098, -0.0708916112780571, -0.12272240221500397, -0.3738862872123718, -0.0018065337790176272, -0.4112400710582733, -3.6719870567321777, -0.05729614943265915, -0.012072943150997162, -0.00017069313616957515, -0.009357757866382599, -0.32342973351478577, -0.18073126673698425, -0.15733937919139862, -8.785339014139026e-05, -0.0036126605700701475, -0.417527973651886, -1.0028390884399414, -0.06064874306321144, -0.18625709414482117, -1.8343791961669922, -0.0031600084621459246, -0.33592113852500916, -0.012573731131851673, -0.2216280698776245, -0.0008954567601904273, -0.027753381058573723, -0.0023372257128357887, -0.4966751039028168, -2.8490614567999728e-05, -0.0009918061550706625, -0.43751060962677, -0.025870613753795624, -0.04314606636762619, -0.27139806747436523, -0.010695396922528744, -0.033366214483976364, -0.0037873697001487017, -0.0012040039291605353], "finish_reason": "length"}], "metrics": {"energy": 291.5083445281984, "energy_per_token": 1.138704470813275, "time": 11.5562935, "time_per_token": 0.045141771484375}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise FileNotFoundError('No files matching pattern {} found in {}'.format(file_pattern, directory))\n\n    for file in natsort.natsorted(files):\n        if not re.search(regex, file):\n            raise ValueError(\"Regex pattern {} didn't match {}\".format(regex, file))\n\n    data = []\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            lines = f.readlines()\n            numeric_data = [int(x) for x in lines if x.isdigit()]\n            data.append([os.path.basename(file), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "No", " files", " matching", " pattern", " {}", " found", " in", " {", "}'", ".", "format", "(", "file", "_", "pattern", ",", " directory", "))", "\n", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "if", " not", " re", ".", "search", "(", "regex", ",", " file", "):", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Re", "gex", " pattern", " {}", " didn", "'", "t", " match", " {", "}\"", ".", "format", "(", "regex", ",", " file", "))", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", "):", "\n", "        ", "with", " open", "(", "file", ")", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "numeric", "_", "data", " =", " [", "int", "(", "x", ")", " for", " x", " in", " lines", " if", " x", ".", "is", "digit", "()", "]", "\n", "            ", "data", ".", "append", "([", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " numeric", "_", "data", "])", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -0.1288846880197525, -0.2749989330768585, -0.48306623101234436, -0.021594516932964325, -0.0023846779949963093, -0.013261448591947556, -0.0017489389283582568, -0.0450626015663147, -1.583715796470642, -9.7508447652217e-05, -7.188061863416806e-05, -1.3617572784423828, -0.13426758348941803, -0.11819928139448166, -0.49898502230644226, -2.3694398403167725, -2.0646724700927734, -0.8870776295661926, -0.19550105929374695, -0.6896665692329407, -0.002468041144311428, -0.0040648700669407845, -0.0020975510124117136, -0.0027921521104872227, -0.04551023617386818, -0.0006019449210725725, -0.0003962923656217754, -0.000935950840357691, -0.011767849326133728, -0.0016628975281491876, -0.001851393491961062, -0.754950225353241, -0.0004732680681627244, -4.3162384033203125, -0.8559812307357788, -0.2607060372829437, -1.033228874206543, -1.4543427823809907e-05, -0.00025018901214934886, -0.00040880427695810795, -0.07938933372497559, -7.879423355916515e-05, -0.003214313881471753, -0.0022073446307331324, -0.013316972181200981, -0.11378828436136246, -0.018103016540408134, -0.011016380973160267, -3.0774502754211426, -0.6080329418182373, -2.5553271770477295, -0.0001961992384167388, -0.31823262572288513, -0.0274761151522398, -0.028208483010530472, -0.0010376551654189825, -0.6208999156951904, -0.1386709213256836, -0.03470426797866821, -0.0022555168252438307, -0.5333297848701477, -0.020581606775522232, -6.818538531661034e-05, -2.042069911956787, -0.8053776025772095, -3.326026439666748, -0.004324489738792181, -1.3845140933990479, -0.7833222150802612, -2.5519587993621826, -0.002497650682926178, -9.536697689327411e-06, -0.10393325239419937, -2.1944830417633057, -0.005776023492217064, -0.0032926176209002733, -0.0021021903958171606, -0.0005499995895661414, -0.008747827261686325, -0.0019702562130987644, -0.011518876068294048, -0.008174652233719826, -0.004177653230726719, -0.3401760756969452, -0.19680072367191315, -1.6786428689956665, -0.37153926491737366, -0.37771645188331604, -0.006159489508718252, -0.07810163497924805, -0.15909594297409058, -0.175172358751297, -0.028265153989195824, -0.0766788050532341, -6.401333666872233e-05, -3.242440288886428e-05, -1.4781842764932662e-05, -0.000328367663314566, -2.2649508537142538e-05, -3.0636318115284666e-05, -0.0002674698771443218, -0.004293509759008884, -0.0032056395430117846, -0.0017147850012406707, -0.013308149762451649, -0.5353705286979675, -0.0014546061865985394, -0.0007165487040765584, -0.006981502287089825, -1.1922038793563843, -0.000522357877343893, -0.0680074617266655, -0.07616902142763138, -0.002914468990638852, -0.0021835551597177982, -1.717025637626648, -0.005604980513453484, -0.14581504464149475, -2.1457441107486375e-05, -0.0002356490003876388, -0.15625108778476715, -0.009379133582115173, -0.00540414871647954, -0.38712385296821594, -1.5998039245605469, -0.05538839101791382, -0.18697836995124817, -0.020324071869254112, -0.710345983505249, -0.418597936630249, -0.004421458579599857, -1.799253225326538, -0.21008999645709991, -0.10248033702373505, -0.02777019329369068, -0.00028701478731818497, -1.025212049484253, -0.055300187319517136, -0.7101047039031982, -0.09442798793315887, -0.36609992384910583, -0.08373390883207321, -0.0008650851668789983, -0.030060023069381714, -0.010733136907219887, -0.2113391011953354, -0.14990980923175812, -0.00922512449324131, -0.004260154906660318, -0.23822322487831116, -1.6243762969970703, -2.622600959512056e-06, -0.0005566716426983476, -0.0021029042545706034, -0.08824262022972107, -7.152555099310121e-07, -5.245071224635467e-05, -0.0032491295132786036, -0.014713938347995281, -0.10560750961303711, -0.009242959320545197, -1.0251946150674485e-05, -4.0531076592742465e-06, -0.00371029251255095, -0.0021586944349110126, -0.29139819741249084, -0.0028601475059986115, -0.3921174108982086, -0.004255762789398432, -0.00221234024502337, -2.539125671319198e-05, -0.002002378925681114, -0.00541149964556098, -0.013484349474310875, -0.10564880818128586, -0.01191133726388216, -0.057877637445926666, -0.016258977353572845, -6.09140915912576e-05, -0.00024732868769206107, -2.6702524337451905e-05, -0.008518313057720661, -0.007407461293041706, -0.00018142008048016578, -0.023229606449604034, -0.0032795476727187634, -0.007803076878190041, -0.4184863865375519, -0.0811038389801979, -0.0037902200128883123, -1.7178785800933838, -9.536738616588991e-07, -1.311301275563892e-06, -2.90866428258596e-05, -0.00014709345123264939, -0.17815710604190826], "finish_reason": "stop"}], "metrics": {"energy": 245.6180569458009, "energy_per_token": 1.1424095671897716, "time": 9.658834, "time_per_token": 0.044924809302325584}}
{"outputs": [{"text": "# Check for the existence of the given directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found!\")\n\n    # Create an empty DataFrame to store data\n    df = pd.DataFrame()\n\n    # Iterate over all files in the directory\n    for root, dirs, files in os.walk(directory, topdown=False):\n        for pattern in [file_pattern]:\n            # Glob the files matching the pattern and create a list of files\n            file_list = glob.glob(os.path.join(root, pattern))\n            if not file_list:\n                continue\n\n            # Iterate over each file\n            for file in file_list:\n                # Extract data from the file using regex and remove non-numeric characters\n                try:\n                    # Load the data from the file into a string using re.sub()\n                    with open(file) as f:\n                        data = re.sub(regex, ' ', f.read()).strip()\n                    if data == '':\n                        continue\n\n                    # Split the data into a", "tokens": ["#", " Check", " for", " the", " existence", " of", " the", " given", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", "!", "\"", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " Data", "Frame", " to", " store", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " files", " in", " the", " directory", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", ",", " top", "down", "=", "False", "):", "\n", "        ", "for", " pattern", " in", " [", "file", "_", "pattern", "]:", "\n", "            ", "#", " G", "lob", " the", " files", " matching", " the", " pattern", " and", " create", " a", " list", " of", " files", "\n", "            ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", " pattern", "))", "\n", "            ", "if", " not", " file", "_", "list", ":", "\n", "                ", "continue", "\n", "\n", "            ", "#", " Iter", "ate", " over", " each", " file", "\n", "            ", "for", " file", " in", " file", "_", "list", ":", "\n", "                ", "#", " Ext", "ract", " data", " from", " the", " file", " using", " regex", " and", " remove", " non", "-", "numeric", " characters", "\n", "                ", "try", ":", "\n", "                ", "    ", "#", " Load", " the", " data", " from", " the", " file", " into", " a", " string", " using", " re", ".", "sub", "()", "\n", "                ", "    ", "with", " open", "(", "file", ")", " as", " f", ":", "\n", "                ", "        ", "data", " =", " re", ".", "sub", "(", "regex", ",", " '", " '", ",", " f", ".", "read", "())", ".", "strip", "()", "\n", "                ", "    ", "if", " data", " ==", " '", "':", "\n", "                ", "        ", "continue", "\n", "\n", "                ", "    ", "#", " Split", " the", " data", " into", " a"], "logprobs": [-1.5363731384277344, -0.992081344127655, -2.8161532878875732, -1.573406457901001, -0.733352780342102, -0.001660517300479114, -0.024902956560254097, -3.323843479156494, -0.013131213374435902, -0.2713833451271057, -0.0013634203933179379, -0.057423122227191925, -0.022005319595336914, -0.004193560685962439, -3.4570634852570947e-06, -0.00014256415306590497, -0.01670972630381584, -0.2909388840198517, -0.0006635371246375144, -0.001957882894203067, -0.0024498470593243837, -0.002311655320227146, -0.0006713996990583837, -0.03583559766411781, -0.005249762907624245, -4.184158387943171e-05, -3.3854863431770355e-05, -0.14332810044288635, -1.3879926204681396, -0.33539482951164246, -0.6012757420539856, -0.0012888943310827017, -2.577047824859619, -0.05616462230682373, -0.0007640779949724674, -0.002729383297264576, -0.13230234384536743, -0.0016856284346431494, -0.08434887230396271, -2.582874298095703, -2.3543431758880615, -0.03592656925320625, -0.9911679625511169, -0.001383420079946518, -0.8011813163757324, -0.1487850397825241, -3.1455345153808594, -0.094722218811512, -0.0007905219099484384, -0.2237006276845932, -0.009633835405111313, -0.008700912818312645, -1.728519782773219e-05, -0.0009676303598098457, -1.2892225980758667, -0.0024796947836875916, -0.052220407873392105, -0.0003691230376716703, -0.04117951914668083, -1.8050097227096558, -0.002702871570363641, -0.6064828634262085, -0.6518154740333557, -0.41005879640579224, -0.750198245048523, -0.013254978694021702, -0.44117632508277893, -0.977344274520874, -0.0007460909546352923, -0.07800140976905823, -3.224989175796509, -0.003295350354164839, -0.9954204559326172, -0.0006877202540636063, -0.0001528146385680884, -0.023274913430213928, -0.0008850948070175946, -0.027895057573914528, -3.194758028257638e-05, -0.0001627074379939586, -0.0024836191441863775, -0.0015122179174795747, -2.8120334148406982, -0.06467356532812119, -0.0013228246243670583, -0.0004680253332480788, -1.1260558366775513, -0.0010605193674564362, -0.00990629568696022, -0.02928745001554489, -0.5230323672294617, -3.1358203887939453, -0.0735233873128891, -3.2763688564300537, -0.21266257762908936, -0.007492417935281992, -0.00023862851958256215, -0.13447007536888123, -0.04104245826601982, -0.025733064860105515, -1.6920379400253296, -4.181386947631836, -0.007943231612443924, -1.2773162126541138, -0.4623825252056122, -1.1813287734985352, -0.02321644499897957, -0.5755016803741455, -2.0908901691436768, -3.825528383255005, -0.14671702682971954, -0.1849803924560547, -0.09934411942958832, -2.2898378372192383, -0.2545122504234314, -0.0006501944735646248, -1.2185195684432983, -0.03707742691040039, -0.32916855812072754, -0.006872468627989292, -0.06696024537086487, -0.0004117832868359983, -0.04781541973352432, -0.002156672067940235, -0.10859061777591705, -0.00019274283840786666, -5.972207145532593e-05, -0.0016611122991889715, -0.0003843760641757399, -0.00036864637513644993, -0.015270817093551159, -0.0006635371246375144, -0.09848673641681671, -0.07693161070346832, -0.005071157589554787, -1.0103440284729004, -1.4489483833312988, -1.4583756923675537, -0.028184030205011368, -3.158996332786046e-05, -0.0008500776602886617, -0.008067285642027855, -0.04913508519530296, -0.0009298768127337098, -0.6103725433349609, -0.10545797646045685, -0.4159233868122101, -0.010680889710783958, -0.20681335031986237, -1.2060917615890503, -0.0010599239030852914, -0.08219126611948013, -1.1119188070297241, -0.10064508020877838, -1.1156837940216064, -0.0004886387032456696, -0.016868799924850464, -0.4771328270435333, -0.21077007055282593, -0.31171199679374695, -7.497983460780233e-05, -3.802703940891661e-05, -0.00043990471749566495, -0.0022751418873667717, -0.046704620122909546, -0.33952730894088745, -2.1170687675476074, -0.003097737906500697, -2.708038806915283, -0.23419277369976044, -0.14763031899929047, -0.07415063679218292, -0.49040794372558594, -1.5308600664138794, -1.1485579013824463, -4.0269670486450195, -2.409085988998413, -0.02513420581817627, -0.17701783776283264, -0.24581456184387207, -0.09261156618595123, -0.0008702066843397915, -2.5974836349487305, -0.00026806574896909297, -0.0007697956170886755, -0.0008063640561886132, -0.0003591130953282118, -3.4222803115844727, -3.8014509677886963, -0.2564282715320587, -2.2530691623687744, -0.4056892693042755, -0.04443245008587837, -0.08595787733793259, -1.6924433708190918, -0.0703265368938446, -1.4851447343826294, -2.0501036643981934, -3.8307688236236572, -0.3652040362358093, -0.9448168873786926, -1.4843287467956543, -0.1854093074798584, -0.0013442536583170295, -0.00019798702851403505, -2.4547181129455566, -0.0027312852907925844, -0.00022492263815365732, -0.0036207374650985003, -2.0739247798919678, -7.83174327807501e-05, -0.0826156735420227, -0.029755854979157448, -0.00230404338799417, -0.0004377598816063255, -0.0008268513483926654, -0.5892400145530701, -0.10384901612997055, -0.052961453795433044, -2.8729025871143676e-05, -0.009932144545018673, -0.1056448370218277, -0.11442694067955017, -0.003001472447067499, -2.37300705909729, -0.46359187364578247, -0.003613016800954938, -0.049198638647794724, -0.0004895919119007885, -0.00012015574611723423, -0.07382825762033463, -1.2926127910614014, -0.3794046938419342, -0.005011852830648422, -0.17067766189575195, -0.4492500126361847, -0.9394912123680115, -1.2442376613616943, -0.8244896531105042, -0.9856778979301453, -0.11686602979898453, -0.069518081843853, -0.07356846332550049, -0.0002431573811918497, -0.0012499623699113727, -0.7912721633911133, -0.04016072675585747, -1.4339523315429688, -0.00015984688070602715, -0.031334687024354935, -0.050097499042749405, -1.1809158325195312, -0.04403817653656006, -0.3080570101737976, -0.23754633963108063, -0.15910692512989044], "finish_reason": "length"}], "metrics": {"energy": 277.64139945793136, "energy_per_token": 1.0845367166325444, "time": 11.558571, "time_per_token": 0.04515066796875}}
{"outputs": [{"text": "data = []\n    # print(f'dir: {directory}')\n    # print(f'file pattern: {file_pattern}')\n    # print(f'regex: {regex}')\n    # print(f'data: {data}')\n\n    # Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist')\n\n    # Find all files matching the file pattern and sort them by size\n    files = natsort.natsorted(glob.glob(directory+file_pattern), key=os.path.getsize)\n\n    # For each file, extract data matching the pattern and append it to the list of data\n    for filename in files:\n        with open(filename, 'r') as f:\n            # print(f'filename: {filename}')\n            data.append([filename, re.findall(regex, f.read())])\n\n    # Create a pandas DataFrame from the list of data\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n", "tokens": ["data", " =", " []", "\n", "    ", "#", " print", "(", "f", "'", "dir", ":", " {", "directory", "}", "')", "\n", "    ", "#", " print", "(", "f", "'", "file", " pattern", ":", " {", "file", "_", "pattern", "}", "')", "\n", "    ", "#", " print", "(", "f", "'", "regex", ":", " {", "regex", "}", "')", "\n", "    ", "#", " print", "(", "f", "'", "data", ":", " {", "data", "}", "')", "\n", "\n", "    ", "#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "'", "Directory", " {", "directory", "}", " does", " not", " exist", "')", "\n", "\n", "    ", "#", " Find", " all", " files", " matching", " the", " file", " pattern", " and", " sort", " them", " by", " size", "\n", "    ", "files", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "directory", "+", "file", "_", "pattern", ")", ",", " key", "=", "os", ".", "path", ".", "get", "size", ")", "\n", "\n", "    ", "#", " For", " each", " file", ",", " extract", " data", " matching", " the", " pattern", " and", " append", " it", " to", " the", " list", " of", " data", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " print", "(", "f", "'", "filename", ":", " {", "filename", "}", "')", "\n", "            ", "data", ".", "append", "([", "filename", ",", " re", ".", "find", "all", "(", "regex", ",", " f", ".", "read", "()", ")]", ")", "\n", "\n", "    ", "#", " Create", " a", " pandas", " Data", "Frame", " from", " the", " list", " of", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n"], "logprobs": [-3.5092391967773438, -1.1550359725952148, -0.29111987352371216, -0.026917407289147377, -0.2577466070652008, -2.823152780532837, -4.248811721801758, -0.24339362978935242, -1.2884126901626587, -0.5712990164756775, -4.721746444702148, -0.6797431707382202, -0.10455439239740372, -0.09501896053552628, -0.10164503008127213, -0.6304895281791687, -0.021896744146943092, -0.07888137549161911, -0.7306250929832458, -0.04116213321685791, -0.015462048351764679, -0.012801728211343288, -0.011725671589374542, -1.1107548475265503, -1.4552134275436401, -0.016165846958756447, -0.01051587425172329, -0.005289369262754917, -0.0002335037279408425, -0.00040356122190132737, -0.008049074560403824, -0.0029242157470434904, -0.0012030514189973474, -0.12081662565469742, -0.22141066193580627, -0.014443725347518921, -0.007836077362298965, -0.011614914983510971, -0.006019084248691797, -0.05807045102119446, -0.06123478710651398, -0.009716833010315895, -0.002282278146594763, -0.04807710647583008, -0.002266816096380353, -0.0006762839620932937, -0.47352832555770874, -1.792421817779541, -0.545957624912262, -0.5960166454315186, -0.27303174138069153, -0.0763930231332779, -1.9245386123657227, -0.197625994682312, -0.03017384372651577, -0.014512930065393448, -0.01513873040676117, -0.002807368291541934, -0.0030838334932923317, -1.274806022644043, -0.00040737437666393816, -1.7678192853927612, -1.8390685319900513, -0.22770476341247559, -0.6932569742202759, -1.8419218063354492, -0.007815377786755562, -0.008886195719242096, -0.2683023512363434, -0.002072450239211321, -0.054035283625125885, -0.07650831341743469, -0.0024924185127019882, -4.6491513785440475e-06, -0.0001357701694360003, -0.006099775433540344, -0.2586410939693451, -0.00045110538485459983, -0.003330994863063097, -0.0021027852781116962, -0.002677548211067915, -0.0014335366431623697, -0.08625592291355133, -0.006411103531718254, -2.52720492426306e-05, -3.93382906622719e-05, -0.07830051332712173, -0.17814064025878906, -0.9303888082504272, -0.13875249028205872, -0.5082812905311584, -0.0007070187130011618, -0.008985677734017372, -1.1469995975494385, -0.0002965487365145236, -0.005456790793687105, -1.3217811584472656, -0.0008986725588329136, -0.10652761161327362, -0.003494230331853032, -0.06574852019548416, -1.332288146018982, -0.1192549541592598, -0.5162164568901062, -0.10045459121465683, -0.005287116393446922, -2.8797481060028076, -0.1524527221918106, -2.5097193717956543, -0.5461930632591248, -0.06657977402210236, -1.2058491706848145, -3.5971083641052246, -0.4436841607093811, -0.0017151420470327139, -0.914978563785553, -0.028839556500315666, -1.7478145360946655, -4.815939246327616e-05, -0.0007403731578961015, -0.00012778419477399439, -0.08249855786561966, -0.00012516192509792745, -0.001913741696625948, -0.011750648729503155, -0.06920165568590164, -0.00011538793478393927, -0.03953733295202255, -0.0024103655014187098, -2.224182367324829, -2.9307568073272705, -0.16122347116470337, -1.2159273865108844e-05, -2.634490556374658e-05, -0.9557792544364929, -0.0038611162453889847, -1.810028314590454, -0.017239483073353767, -0.19539116322994232, -0.0005853846669197083, -0.0019512200960889459, -0.022853098809719086, -0.010492635890841484, -0.056744176894426346, -0.3537609577178955, -0.011761016212403774, -0.541706383228302, -0.0008665143977850676, -0.18819040060043335, -3.36533260345459, -0.12996284663677216, -0.08680255711078644, -0.2698158621788025, -0.9171491265296936, -3.3025386333465576, -2.8055360317230225, -0.01761658675968647, -3.3356776237487793, -0.6764442324638367, -0.9727814793586731, -0.45795920491218567, -0.027932502329349518, -0.07900376617908478, -1.583893060684204, -2.6911253929138184, -0.16035489737987518, -0.07093414664268494, -0.003927257843315601, -0.060205813497304916, -1.8825294971466064, -0.003133508376777172, -0.003211937379091978, -0.001157329068519175, -0.0037254944909363985, -0.048394832760095596, -0.9132751822471619, -0.0006214833119884133, -0.0005975367967039347, -0.006563178729265928, -0.21900252997875214, -0.132635235786438, -0.026658132672309875, -0.12001785635948181, -0.0009283285471610725, -0.31969454884529114, -0.01575639471411705, -0.002166188322007656, -0.010283933952450752, -2.2364492416381836, -0.5961363911628723, -0.05669371411204338, -0.12822887301445007, -0.15552839636802673, -0.524450421333313, -0.051474057137966156, -0.012921296991407871, -0.004635422024875879, -0.007244508247822523, -0.010737501084804535, -0.004336952697485685, -0.015350177884101868, -1.9965044260025024, -0.3278247117996216, -0.05776996165513992, -0.3784405589103699, -0.13002388179302216, -0.1270715743303299, -0.4258022904396057, -0.00020740265608765185, -0.014469340443611145, -3.957670196541585e-05, -0.0014244896592572331, -0.005298618692904711, -0.0009197533945553005, -0.0969657301902771, -0.0010287236655130982, -0.00013779645087197423, -0.14081673324108124, -0.02096375823020935, -0.00260644918307662, -0.00830931682139635, -0.255262166261673, -0.029682952910661697, -0.3677617311477661, -1.0513077974319458, -0.04226332902908325, -0.4797130525112152, -0.03424335643649101, -0.001320562674663961, -0.3396015763282776, -0.011796832084655762, -0.48510923981666565, -0.02378118224442005, -0.032932255417108536, -0.22064055502414703, -0.001975372200831771, -0.12922321259975433, -0.005255454685539007, -0.004646575544029474, -0.0003738896339200437, -0.0006163604557514191, -0.02363240160048008, -0.004430478438735008, -0.10531217604875565, -0.013292857445776463, -0.045324210077524185, -0.028827743604779243, -5.98412734689191e-05, -0.0005178302526473999, -4.9828242481453344e-05, -0.01804494857788086, -0.024934466928243637, -0.0003545847721397877, -0.017501210793852806, -0.003506347304210067, -0.015116655267775059], "finish_reason": "length"}], "metrics": {"energy": 295.32452303600314, "energy_per_token": 1.1536114181093873, "time": 11.570469, "time_per_token": 0.04519714453125}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern: ' + file_pattern)\n\n    with open(files[0]) as f:\n        content = f.read()\n        numeric_data = re.findall(regex, content)\n        numeric_data = [int(data) for data in numeric_data]\n        return pd.DataFrame(columns=['Filename', 'Numeric Data'],\n                            index=natsort.natsorted(files)[0],\n                            data=[[os.path.basename(f), numeric_data]]\n                            )", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "('", "No", " files", " matching", " the", " pattern", ":", " '", " +", " file", "_", "pattern", ")", "\n", "\n", "    ", "with", " open", "(", "files", "[", "0", "])", " as", " f", ":", "\n", "        ", "content", " =", " f", ".", "read", "()", "\n", "        ", "numeric", "_", "data", " =", " re", ".", "find", "all", "(", "regex", ",", " content", ")", "\n", "        ", "numeric", "_", "data", " =", " [", "int", "(", "data", ")", " for", " data", " in", " numeric", "_", "data", "]", "\n", "        ", "return", " pd", ".", "DataFrame", "(", "columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "']", ",", "\n", "                ", "            ", "index", "=", "n", "ats", "ort", ".", "n", "ats", "orted", "(", "files", ")[", "0", "]", ",", "\n", "                ", "            ", "data", "=[", "[", "os", ".", "path", ".", "bas", "ename", "(", "f", ")", ",", " numeric", "_", "data", "]]", "\n", "                ", "            ", ")", "\n", "\n", "if"], "logprobs": [-2.354907989501953, -0.0897565633058548, -0.1672559529542923, -0.0005919373361393809, -0.031982842832803726, -0.0048087663017213345, -0.17586427927017212, -2.9802276912960224e-06, -0.00013791563105769455, -0.0036640907637774944, -0.0010080024367198348, -0.0020772088319063187, -0.00596955232322216, -0.0007388246012851596, -0.019811023026704788, -2.7894584491150454e-05, -2.52720492426306e-05, -0.01225713174790144, -0.009767595678567886, -2.113236904144287, -0.0001679517881711945, -0.14508065581321716, -0.4620194733142853, -0.02288222685456276, -0.002657931065186858, -0.008698549121618271, -0.0014352031284943223, -0.05481121316552162, -0.2511151432991028, -8.583032467868179e-06, -0.879145622253418, -0.043362632393836975, -0.07802346348762512, -0.2731071412563324, -0.11369040608406067, -0.15949249267578125, -2.2666077613830566, -1.187556266784668, -0.05303064361214638, -0.10418291389942169, -0.0002873722987715155, -0.00019202772818971425, -0.08755741268396378, -0.0018120075110346079, -0.08078039437532425, -0.00042298430344089866, -4.30397367477417, -0.6351485848426819, -0.19242630898952484, -0.5214821696281433, -0.022645678371191025, -0.0019315887475386262, -0.7824506759643555, -0.0004959068610332906, -0.26310259103775024, -0.02981775999069214, -0.031259819865226746, -0.004298495128750801, -2.2890138626098633, -0.0069490657187998295, -0.052760977298021317, -8.892617915989831e-05, -0.00016199229867197573, -0.12045082449913025, -0.07145259529352188, -0.8847672939300537, -2.192148208618164, -0.05587133765220642, -0.19646668434143066, -0.038948751986026764, -0.17676953971385956, -0.00014244495832826942, -0.004243417643010616, -0.0010837402660399675, -0.0016174342017620802, -0.0017062166007235646, -0.0007413261337205768, -0.0039384192787110806, -0.01876728981733322, -0.00944160483777523, -0.8001595735549927, -0.5863321423530579, -0.002018558792769909, -0.02085939049720764, -0.052855055779218674, -0.14378196001052856, -0.061715029180049896, -0.003489478724077344, -2.5858492851257324, -0.022734828293323517, -0.08054021745920181, -0.00035553809721022844, -9.583967766957358e-05, -0.006613628473132849, -2.5033637939486653e-05, -3.838465272565372e-05, -0.08707980811595917, -0.054036978632211685, -1.8457646369934082, -2.3283891677856445, -0.03741210326552391, -2.288792165927589e-05, -0.0033864788711071014, -2.077878713607788, -2.6515414714813232, -0.052034154534339905, -0.03175998479127884, -7.319182623177767e-05, -0.003160246182233095, -7.819823804311454e-05, -0.010226825252175331, -0.02499469555914402, -0.00019572250312194228, -0.037789713591337204, -0.8211603164672852, -0.00535174086689949, -1.7542015314102173, -0.028518682345747948, -0.09285483509302139, -2.6781675815582275, -0.8880971074104309, -0.30141568183898926, -0.00035089056473225355, -0.00010966652916977182, -0.00012182447244413197, -0.20653335750102997, -6.83045873302035e-05, -0.003632377600297332, -0.06742571294307709, -0.42861485481262207, -2.640133857727051, -0.5151389837265015, -1.5133455991744995, -0.09077496826648712, -0.06556577980518341, -0.0003579214389901608, -0.0018149822717532516, -0.00907806120812893, -0.06268859654664993, -0.2067062258720398, -0.34766483306884766, -7.986990567587782e-06, -0.0006621075444854796, -0.004634353797882795, -0.08468014746904373, -9.536738616588991e-07, -0.0003780603874474764, -1.1428744792938232, -0.06579574197530746, -0.023901890963315964, -0.022797634825110435, -6.115249561844394e-05, -1.2159273865108844e-05, -0.7625845670700073, -3.0494558811187744, -0.12501545250415802, -0.06704207509756088, -0.18280109763145447, -0.24647310376167297, -0.033138129860162735, -2.718433380126953], "finish_reason": "stop"}], "metrics": {"energy": 188.75848042488093, "energy_per_token": 1.1724129218936703, "time": 7.1557875, "time_per_token": 0.0444458850931677}}
{"outputs": [{"text": "try:\n        filenames = glob.glob(os.path.join(directory, file_pattern))\n    except FileNotFoundError as err:\n        print('An error occurred:', err)\n    filenames = natsort.natsorted(filenames)\n    dataframes = []\n    for filename in filenames:\n        dataframe = pd.read_csv(filename, engine='python')\n        dataframes.append(dataframe)\n    return pd.concat(dataframes).reset_index(drop=True)", "tokens": ["try", ":", "\n", "        ", "fil", "en", "ames", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "\n", "    ", "except", " File", "NotFound", "Error", " as", " err", ":", "\n", "        ", "print", "('", "An", " error", " occurred", ":'", ",", " err", ")", "\n", "    ", "fil", "en", "ames", " =", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "fil", "en", "ames", ")", "\n", "    ", "data", "frames", " =", " []", "\n", "    ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "        ", "data", "frame", " =", " pd", ".", "read", "_", "csv", "(", "filename", ",", " engine", "='", "python", "')", "\n", "        ", "data", "frames", ".", "append", "(", "data", "frame", ")", "\n", "    ", "return", " pd", ".", "concat", "(", "data", "frames", ")", ".", "reset", "_", "index", "(", "drop", "=", "True", ")", "\n", "\n", "def"], "logprobs": [-2.751220703125, -0.0006797387031838298, -0.007965702563524246, -0.012515692971646786, -2.8047726154327393, -0.008562636561691761, -0.00012158608296886086, -0.04042728617787361, -0.2709534168243408, -0.0006998711614869535, -0.018614601343870163, -0.00472559779882431, -0.24446845054626465, -2.264974000354414e-06, -0.000163541772053577, -0.004373390693217516, -0.0013462775386869907, -0.0019795361440628767, -0.005887428764253855, -0.0006337541271932423, -0.018637770786881447, -2.47952248173533e-05, -2.539125671319198e-05, -0.015909049659967422, -0.009797225706279278, -1.0794116258621216, -0.0013778250431641936, -0.07189401239156723, -6.139089964563027e-05, -2.264974000354414e-06, -1.7525416612625122, -1.8660427331924438, -0.0025582939852029085, -0.0048721167258918285, -0.0010157431242987514, -0.7871893048286438, -2.029143810272217, -4.014058589935303, -0.030026011168956757, -0.052373141050338745, -0.9066475629806519, -0.006941844243556261, -0.08249745517969131, -0.02725178748369217, -0.005296602845191956, -1.636699914932251, -2.403998851776123, -0.0005265279905870557, -1.0609570381348021e-05, -0.31526675820350647, -0.1944001466035843, -1.8954096958623268e-05, -0.000395815703086555, -0.000102037942269817, -0.12318170070648193, -0.00012027494085486978, -0.0010301527800038457, -0.001661945367231965, -0.008029798977077007, -1.6093124941107817e-05, -2.0265558760002023e-06, -0.22248758375644684, -0.040460944175720215, -0.36913371086120605, -2.310415744781494, -3.1293506622314453, -0.02460954710841179, -0.2816088795661926, -0.004584990907460451, -0.13853736221790314, -0.2399671971797943, -0.1778986006975174, -0.0014382981462404132, -0.0018386616138741374, -9.536738616588991e-07, -2.0265558760002023e-06, -0.000563224486541003, -0.001732040662318468, -0.00328132975846529, -2.666548252105713, -1.1269972324371338, -0.014161921106278896, -0.44002118706703186, -0.0004189328756183386, -0.4936813414096832, -0.0001525762490928173, -0.2644651532173157, -0.002634627977386117, -0.04768165200948715, -0.025063173845410347, -3.1565499305725098, -0.037286583334207535, -0.016622968018054962, -1.264686942100525, -0.05856076255440712, -0.004820748697966337, -0.22127661108970642, -0.29006239771842957, -0.0010096696205437183, -0.002123364945873618, -0.008169567212462425, -0.01795877516269684, -0.00017593742813915014, -0.029659923166036606, -0.001178642618469894, -0.14896182715892792, -0.8991432785987854, -0.022209957242012024, -0.00014053787162993103, -0.004702223930507898, -0.0020234365947544575, -0.0014949585311114788, -0.00013004888023715466, -0.7061401605606079, -2.5441131591796875, -0.3181890845298767, -1.9430925021879375e-05, -0.0003781795676331967, -0.10315453261137009, -0.020960722118616104, -0.001177690108306706, -0.002361487364396453, -0.3107200264930725, -0.11050615459680557, -0.016145436093211174, -0.1367441713809967], "finish_reason": "stop"}], "metrics": {"energy": 178.55006134319302, "energy_per_token": 1.4170639789142303, "time": 6.293786, "time_per_token": 0.04995068253968254}}
{"outputs": [{"text": "df = pd.DataFrame()\n    for file in natsort.natsorted(glob.glob(os.path.join(directory, file_pattern))):\n        df = df.append(pd.read_csv(file, sep=\"\\n\", engine=\"python\", index_col=0))\n        df.columns = ['Filename', 'Numeric Data']\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " n", "ats", "ort", ".", "n", "ats", "orted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "pattern", "))", "):", "\n", "        ", "df", " =", " df", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "file", ",", " sep", "=", "\"", "\\", "n", "\"", ",", " engine", "=", "\"", "python", "\"", ",", " index", "_", "col", "=", "0", "))", "\n", "        ", "df", ".", "columns", " =", " ['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "']", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.9379215240478516, -0.050959303975105286, -0.2639085352420807, -0.001703836489468813, -0.020367523655295372, -0.6891924738883972, -0.027825497090816498, -0.3965492248535156, -1.955051302909851, -1.709181308746338, -0.33646395802497864, -1.0177807807922363, -0.0002261144545627758, -0.0019891730044037104, -0.00038914260221645236, -0.05922578275203705, -0.0001805857609724626, -0.0012343652779236436, -0.004785038530826569, -0.08675665408372879, -0.0002588890492916107, -0.08294269442558289, -0.006309352349489927, -0.38053780794143677, -5.364403477869928e-06, -0.0002195594133809209, -0.0025720868725329638, -0.001260677701793611, -0.002856937935575843, -0.005878184922039509, -0.0005335576133802533, -0.017178667709231377, -2.276871418871451e-05, -3.45700973412022e-05, -0.07072246819734573, -0.07267893850803375, -0.009838659316301346, -0.017391560599207878, -2.8753881454467773, -0.5745328068733215, -0.26004520058631897, -0.0007465674425475299, -0.010212665423750877, -0.0973709374666214, -0.42958033084869385, -0.004638862796127796, -0.5631124973297119, -4.1126360883936286e-05, -0.1384553611278534, -0.0019273054786026478, -0.03224489465355873, -0.059927746653556824, -0.6986492872238159, -0.25315558910369873, -1.9780679941177368, -0.6705310940742493, -1.347229242324829, -0.008731991983950138, -0.22677816450595856, -0.6361076831817627, -1.104003667831421, -0.0036406919825822115, -0.006899816915392876, -0.0004158347437623888, -0.45385217666625977, -2.826920747756958, -0.0003333727945573628, -0.0012996093137189746, -0.026326339691877365, -1.5292072296142578, -2.1421873569488525, -0.05614377185702324, -1.9420480728149414, -0.38419675827026367, -0.5674548149108887, -1.8043510913848877, -0.04472796991467476, -0.9224288463592529, -0.09080152958631516, -0.00028689560713246465, -0.04819934815168381, -0.00043847484630532563, -0.041331544518470764, -0.06794153153896332, -0.0007868293323554099, -0.032379474490880966, -0.0017321596387773752, -0.007607654668390751, -0.4767386019229889, -0.5317516326904297, -0.004789309576153755, -0.5175336599349976, -0.009538905695080757, -0.10042796283960342], "finish_reason": "stop"}], "metrics": {"energy": 94.96139890098571, "energy_per_token": 1.0102276478828267, "time": 4.007667, "time_per_token": 0.04263475531914893}}
{"outputs": [{"text": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Check if the specified file pattern matches any files\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    # Extract the numeric data from each file and create a Pandas DataFrame\n    data = []\n    for filename in sorted(files, key=natsort.nsorted):\n        with open(filename) as f:\n            matches = re.findall(regex, f.read())\n            if matches:\n                data.append((filename, matches))\n\n    # Convert the extracted data into a Pandas DataFrame and return it\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "tokens": ["#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " specified", " file", " pattern", " matches", " any", " files", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}/{", "file", "_", "pattern", "}\"", ")", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "No", " files", " found", " matching", " pattern", " '", "{", "file", "_", "pattern", "}'", " in", " directory", " '", "{", "directory", "}'", ".", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " numeric", " data", " from", " each", " file", " and", " create", " a", " Pand", "as", " Data", "Frame", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " filename", " in", " sorted", "(", "files", ",", " key", "=", "n", "ats", "ort", ".", "ns", "orted", "):", "\n", "        ", "with", " open", "(", "filename", ")", " as", " f", ":", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", ",", " f", ".", "read", "())", "\n", "            ", "if", " matches", ":", "\n", "                ", "data", ".", "append", "((", "filename", ",", " matches", "))", "\n", "\n", "    ", "#", " Convert", " the", " extracted", " data", " into", " a", " Pand", "as", " Data", "Frame", " and", " return", " it", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Fil", "ename", "'", ",", " '", "N", "umeric", " Data", "'])", "\n", "\n", "def"], "logprobs": [-1.5363731384277344, -0.992081344127655, -0.36037132143974304, -0.4848105013370514, -1.3921146392822266, -0.006944212131202221, -0.00844904687255621, -0.21517330408096313, -0.0016244561411440372, -0.04093329980969429, -0.02196916751563549, -0.0022170981392264366, -2.622600959512056e-06, -0.0001411338453181088, -0.008781387470662594, -0.2590778172016144, -0.0004920940846204758, -0.002318315440788865, -0.0012760362587869167, -0.0015498304273933172, -0.0005147324409335852, -0.029669182375073433, -0.0043580797500908375, -2.992108420585282e-05, -3.433168603805825e-05, -0.17625755071640015, -0.344150573015213, -0.1559596210718155, -0.1445094645023346, -0.8354992270469666, -0.00011443436960689723, -0.0010677833342924714, -0.0008643704932183027, -0.6073083877563477, -0.00016532962035853416, -0.002753754146397114, -0.24249446392059326, -0.013264389708638191, -5.757642793469131e-05, -0.0023154611699283123, -0.047562871128320694, -0.0010406322544440627, -0.04044262692332268, -3.3576889038085938, -0.07819424569606781, -1.4718406200408936, -0.6638842821121216, -0.7827101945877075, -0.05534632131457329, -0.18004658818244934, -0.190686896443367, -0.02981475181877613, -0.3641228973865509, -0.00040284625720232725, -0.748992383480072, -0.050129588693380356, -0.03663576766848564, -0.00010835537250386551, -0.011580860242247581, -0.000916418619453907, -1.8525969982147217, -0.19115324318408966, -0.0005550036439672112, -0.00819357018917799, -0.745380163192749, -0.0006011109799146652, -3.015949550899677e-05, -1.1920858014491387e-05, -0.0009308296139352024, -0.03285231813788414, -0.0061592524871230125, -0.012330963276326656, -0.008319365791976452, -0.299328476190567, -0.00857090950012207, -0.0012712739408016205, -0.002435576869174838, -0.00020144341397099197, -0.014256530441343784, -0.02257726714015007, -6.9141146923357155e-06, -0.015993639826774597, -0.15738582611083984, -0.005349013488739729, -0.015734098851680756, -0.024583958089351654, -1.7704495191574097, -0.14065787196159363, -1.0780892372131348, -0.0391736775636673, -0.000634111522231251, -0.02163628116250038, -0.0005856229108758271, -0.00036066226311959326, -0.00511610833927989, -0.4997454285621643, -0.2951350212097168, -0.039975766092538834, -0.0001591317413840443, -0.0005818104837089777, -0.0081370510160923, -0.035591971129179, -0.003941981587558985, -0.00017689094238448888, -0.001627312507480383, -0.006304258480668068, -0.0006378046819008887, -0.09098374843597412, -0.6964307427406311, -0.008572801016271114, -2.5887832641601562, -0.23047611117362976, -0.03177846223115921, -0.10449405014514923, -0.6485067009925842, -0.11856696754693985, -0.888247549533844, -2.77901554107666, -0.021402589976787567, -2.218977689743042, -3.266281055402942e-05, -0.01925409585237503, -0.0013235389487817883, -0.07789555191993713, -0.0016185053391382098, -1.926267147064209, -0.3924025595188141, -0.20177163183689117, -0.021618083119392395, -0.02916935831308365, -0.05539730191230774, -1.2682733535766602, -0.008253040723502636, -2.407439708709717, -0.002613226417452097, -0.19538673758506775, -1.000214695930481, -0.02734818309545517, -0.002868587151169777, -0.2091427594423294, -9.047575440490618e-05, -1.0847986231965479e-05, -0.002410008804872632, -0.6406530737876892, -0.7189480662345886, -0.059723611921072006, -0.03857559338212013, -0.004981487523764372, -0.4306160807609558, -0.0005497612874023616, -0.00010179955279454589, -0.0051602269522845745, -1.7575628757476807, -0.00013159839727450162, -0.21787600219249725, -0.014325043186545372, -0.0021644041407853365, -0.0014516302617266774, -3.9803106784820557, -0.0006337541271932423, -0.03766516223549843, -5.400034933700226e-05, -0.0015040049329400063, -0.034021809697151184, -0.0002836778585333377, -0.0019356340635567904, -0.00025519452174194157, -0.014829285442829132, -0.0007856381707824767, -2.9444261599564925e-05, -0.04656865820288658, -0.011006712913513184, -0.27693089842796326, -0.9213518500328064, -0.18029725551605225, -0.01586962677538395, -0.01871674694120884, -0.00029869386344216764, -0.223427414894104, -0.012761358171701431, -0.008007211610674858, -1.6112619638442993, -0.09199775010347366, -0.018390970304608345, -0.09621524065732956, -0.0036360598169267178, -0.0058060092851519585, -0.32802850008010864, -0.0017996320966631174, -1.984861135482788, -1.3561148643493652, -0.14451617002487183, -0.9146481156349182, -0.15695908665657043, -0.7837799787521362, -0.02166871167719364, -0.535468339920044, -1.0728830375228426e-06, -0.0022877492010593414, -0.0092982342466712, -1.8034017086029053, -0.05679283291101456, -0.037659652531147, -0.014920426532626152, -0.0004198861715849489, -0.9634562730789185, -0.004843882285058498, -1.4305012882687151e-05, -0.00032586511224508286, -0.07290682196617126, -0.009822133928537369, -0.06312941759824753, -0.004580006934702396, -0.06393836438655853, -0.0235219094902277, -4.911301948595792e-05, -0.00023183519078884274, -1.6331539882230572e-05, -0.004409352783113718, -0.02425461821258068, -0.0003044141922146082, -0.02295422926545143, -0.005093811079859734, -0.8957858681678772, -0.004429528955370188, -0.12068931758403778], "finish_reason": "stop"}], "metrics": {"energy": 273.2900438852309, "energy_per_token": 1.209247981793057, "time": 10.101536, "time_per_token": 0.04469706194690265}}
