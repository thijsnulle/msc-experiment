{"outputs": [{"text": "info = {}\n\n    for path in os.listdir(directory):\n        full_path = os.path.join(directory, path)\n\n        if os.path.isfile(full_path):\n            with open(full_path, 'r', encoding='utf-8') as file:\n                # Normalize file name to ASCII\n                normalized_name = pathlib.PurePath(file.name).as_posix()\n                file.seek(0)\n                content = file.read()\n\n                # Calculate MD5 hash for the file\n                md5_hash = md5(content.encode('utf-8')).hexdigest()\n\n                # Get file size\n                size = os.path.getsize(full_path)\n\n                # Create a dictionary with the file's info\n                info[normalized_name] = {'Size': size, 'MD5 Hash': md5_hash}\n\n    return info", "tokens": ["info", " =", " {}", "\n", "\n", "    ", "for", " path", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " path", ")", "\n", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "full", "_", "path", "):", "\n", "            ", "with", " open", "(", "full", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "                ", "#", " Normal", "ize", " file", " name", " to", " ASC", "II", "\n", "                ", "normalized", "_", "name", " =", " path", "lib", ".", "P", "ure", "Path", "(", "file", ".", "name", ")", ".", "as", "_", "pos", "ix", "()", "\n", "                ", "file", ".", "seek", "(", "0", ")", "\n", "                ", "content", " =", " file", ".", "read", "()", "\n", "\n", "                ", "#", " Calculate", " MD", "5", " hash", " for", " the", " file", "\n", "                ", "md", "5", "_", "hash", " =", " md", "5", "(", "content", ".", "encode", "('", "utf", "-", "8", "'))", ".", "hex", "dig", "est", "()", "\n", "\n", "                ", "#", " Get", " file", " size", "\n", "                ", "size", " =", " os", ".", "path", ".", "get", "size", "(", "full", "_", "path", ")", "\n", "\n", "                ", "#", " Create", " a", " dictionary", " with", " the", " file", "'", "s", " info", "\n", "                ", "info", "[", "normalized", "_", "name", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "\n", "    ", "return", " info"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -1.466658592224121, -0.0006947487709112465, -0.4580189287662506, -2.2675962448120117, -0.3168327212333679, -2.590926170349121, -0.0005200940649956465, -0.011751001700758934, -5.722029527532868e-06, -0.004964643623679876, -0.009157796390354633, -0.0010879080509766936, -0.039425719529390335, -0.04521004855632782, -2.0996241569519043, -0.11749042570590973, -0.015237944200634956, -0.0034000228624790907, -0.2679506838321686, -0.002034024568274617, -0.00021062063751742244, -0.015101742930710316, -0.0064112222753465176, -0.0003182381624355912, -0.0033214897848665714, -0.0003985564399044961, -0.008624331094324589, -0.00042882305569946766, -0.005151806864887476, -1.213494062423706, -0.0006761648692190647, -0.28861427307128906, -0.15941737592220306, -0.0003532739356160164, -0.0003404037852305919, -0.007141657639294863, -0.0012700833613052964, -0.1587020754814148, -0.00012218205665703863, -0.0032995089422911406, -2.8729025871143676e-05, -4.768370445162873e-07, -0.0782003104686737, -0.022998616099357605, -0.02776845544576645, -1.2464910745620728, -0.006141125224530697, -0.0009614374139346182, -0.0038847471587359905, -1.1920858014491387e-05, -1.1920928244535389e-07, -0.007342969533056021, -0.15089727938175201, -1.9084256887435913, -0.5536271929740906, -0.0005005536950193346, -0.024390392005443573, -0.08293698728084564, -0.11775961518287659, -0.13320866227149963, -0.006718664430081844, -0.041718315333127975, -0.0017714299028739333, -0.4591485261917114, -0.023513175547122955, -0.005709648597985506, -0.027069875970482826, -3.5767154693603516, -1.461557149887085, -0.31299084424972534, -1.3484852313995361, -0.09346824139356613, -0.3205282390117645, -0.07054474204778671, -0.00019059749320149422, -0.4908166825771332, -0.001095529063604772, -1.792168378829956, -0.06236362084746361, -0.7390003204345703, -0.002261701738461852, -1.5979746580123901, -0.007424263749271631, -7.283422019099817e-05, -1.644600749015808, -2.1457441107486375e-05, -0.029474282637238503, -0.0005527398898266256, -2.758331060409546, -0.0019327785121276975, -0.0014574630185961723, -0.0060107894241809845, -0.0016382618341594934, -0.708651602268219, -1.07287787614041e-05, -0.002526308177039027, -5.054346183896996e-05, -0.004990027751773596, -0.3805393576622009, -0.3522056043148041, -3.6549625396728516, -0.609480082988739, -1.4168736934661865, -0.0007677706307731569, -0.0012822272256016731, -0.1326855570077896, -0.13296101987361908, -0.6066577434539795, -2.0967965126037598, -0.01092853955924511, -0.07476245611906052, -9.595887240720913e-05, -0.00016473367577418685, -0.021145615726709366, -0.05706895515322685, -1.2986197471618652, -0.08835197240114212, -0.42430561780929565, -0.20497041940689087, -0.10447032004594803, -0.00013052565918769687, -0.07101964950561523, -2.9274723529815674, -0.9408664107322693, -0.31229496002197266, -0.5049163103103638, -0.0004366874636616558, -0.6562480926513672, -0.005252727307379246, -0.04520435258746147, -0.07490061223506927, -0.009747881442308426, -0.06547333300113678, -8.093983342405409e-05, -0.2630332410335541, -0.021539684385061264, -0.009732297621667385, -0.0002076410164590925, -0.45474323630332947, -0.017590701580047607, -0.003091320628300309, -0.00014602071314584464, -0.00153840403072536, -0.010255143977701664, -0.02641609124839306, -2.729855441430118e-05, -0.0001740304142003879, -0.0002814135223161429, -0.003752810414880514, -0.08336371183395386, -0.026524871587753296, -0.17990589141845703, -1.5968446731567383, -0.2899385094642639, -0.03536934405565262, -0.5192978382110596, -0.0004167880106251687, -0.3748260736465454, -0.06070427969098091, -0.023483600467443466, -1.8715683836489916e-05, -0.22994419932365417, -0.0008683010237291455, -7.438383181579411e-05, -8.940656698541716e-06, -0.00027426297310739756, -0.02597225271165371, -0.00013565097469836473, -2.3841855067985307e-07, -0.0002637753786984831, -0.0051343729719519615, -0.0397307388484478, -0.10146690160036087, -0.56690913438797, -1.8316171169281006, -0.49068787693977356, -0.2888869345188141, -0.5490199327468872, -0.5562835335731506, -0.2721271514892578, -0.6543856859207153, -2.586808113846928e-05, -2.0573067665100098, -0.1006023958325386, -0.0008799732895568013, -0.4609868824481964, -0.03735537454485893, -0.006970019545406103, -8.940656698541716e-06, -0.0004686211177613586, -0.005945378448814154, -0.00029845553217455745, -0.2522946298122406, -0.21474474668502808, -0.016300613060593605, -0.008398097939789295, -0.0014278227463364601, -0.02619454450905323, -0.0030787233263254166, -5.8530047681415454e-05, -0.04251619055867195, -0.001090289675630629, -0.0051431492902338505, -2.264974000354414e-06, -2.1457441107486375e-05, -1.7881377516459906e-06, -0.007906687445938587, -0.00041416651220060885, -0.09752558171749115, -0.027283109724521637, -0.012261606752872467, -0.0021780834067612886], "finish_reason": "stop"}], "metrics": {"energy": 251.57072106361386, "energy_per_token": 1.1646792641833974, "time": 10.084287, "time_per_token": 0.046686513888888885}}
{"outputs": [{"text": "# create dictionary for results\n    info = {}\n\n    # open directory and get all files within\n    with os.scandir(directory) as scan:\n        for entry in scan:\n            if entry.is_file():\n                filepath = pathlib.Path(entry.path)\n                normalized_name = unicodedata.normalize('NFKD', entry.name).encode('ASCII', 'ignore').decode()\n                info[normalized_name] = {'Size': entry.stat().st_size, 'MD5 Hash': md5(entry.read_bytes()).hexdigest()}\n\n    return info", "tokens": ["#", " create", " dictionary", " for", " results", "\n", "    ", "info", " =", " {}", "\n", "\n", "    ", "#", " open", " directory", " and", " get", " all", " files", " within", "\n", "    ", "with", " os", ".", "sc", "and", "ir", "(", "directory", ")", " as", " scan", ":", "\n", "        ", "for", " entry", " in", " scan", ":", "\n", "            ", "if", " entry", ".", "is", "_", "file", "():", "\n", "                ", "file", "path", " =", " path", "lib", ".", "Path", "(", "entry", ".", "path", ")", "\n", "                ", "normalized", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " entry", ".", "name", ")", ".", "encode", "('", "ASC", "II", "'", ",", " '", "ignore", "')", ".", "decode", "()", "\n", "                ", "info", "[", "normalized", "_", "name", "]", " =", " {'", "Size", "':", " entry", ".", "stat", "()", ".", "st", "_", "size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "(", "entry", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()}", "\n", "\n", "    ", "return", " info", "\n", "\n", "if"], "logprobs": [-2.032959461212158, -3.24118709564209, -2.8120687007904053, -2.3947160243988037, -2.4150006771087646, -0.12802521884441376, -0.00456956448033452, -1.193983554840088, -0.04019370675086975, -0.2585521638393402, -0.002016298472881317, -0.4360174238681793, -0.0007320346776396036, -0.14249005913734436, -4.105650901794434, -0.7652130126953125, -1.4894769191741943, -1.5972000360488892, -1.038298487663269, -0.2207488715648651, -2.8163681030273438, -1.0681471824645996, -0.001555900671519339, -2.2903151512145996, -0.04482497274875641, -0.00011538793478393927, -0.003824065439403057, -5.1616290875244886e-05, -0.00010835537250386551, -0.0015987483784556389, -0.008651277050375938, -0.0006011109799146652, -0.0003780603874474764, -3.2968533039093018, -0.2681165635585785, -0.0046892911195755005, -0.05107247084379196, -0.19005680084228516, -1.5094047784805298, -0.0028580077923834324, -0.0014487734297290444, -0.0012173393042758107, -0.019208138808608055, -0.08088330924510956, -1.0091158151626587, -0.1258058249950409, -0.0002649671514518559, -0.11237594485282898, -0.00021634146105498075, -0.04037885740399361, -0.07351009547710419, -0.11216241866350174, -0.09076973795890808, -2.423200845718384, -2.3529295921325684, -0.013679096475243568, -0.6029856204986572, -4.9828242481453344e-05, -5.3165931603871286e-05, -0.09333251416683197, -0.011894375085830688, -0.09469098597764969, -0.057123903185129166, -0.0883825272321701, -0.0014843647368252277, -0.13159674406051636, -0.32190656661987305, -3.2798829078674316, -0.2177700698375702, -0.6243460774421692, -0.009469827637076378, -0.8954343795776367, -0.003799482947215438, -1.728519782773219e-05, -0.0005360596696846187, -0.00019333878299221396, -0.00027176024741493165, -9.119095193454996e-05, -0.24937555193901062, -0.04671338200569153, -0.26454612612724304, -8.654219709569588e-05, -0.0003937899600714445, -1.5495649576187134, -0.00022480344341602176, -0.03994953632354736, -0.06727559119462967, -0.01617065630853176, -0.018148088827729225, -0.08675599843263626, -1.0557355880737305, -0.00012933371181134135, -0.002769803162664175, -0.002893430180847645, -0.1372145414352417, -0.005327077116817236, -0.0033011725172400475, -0.14001192152500153, -0.006210433319211006, -0.2935948669910431, -0.05020906403660774, -0.13331633806228638, -0.6937429308891296, -0.050239335745573044, -0.02910614013671875, -0.00012385078298393637, -0.0037010284140706062, -0.01553341280668974, -0.002226375974714756, -0.6034957766532898, -0.20941245555877686, -0.024690380319952965, -0.13117484748363495, -4.851700214203447e-05, -0.007890601642429829, -0.008804429322481155, -0.0001294529065489769, -0.00024423000286333263, -0.0011143434094265103, -0.00013016807497479022, -0.02237841673195362, -0.4122304320335388, -0.022350672632455826, -0.00018535325943958014, -0.07037142664194107, -0.004002774599939585, -0.12660670280456543, -3.9219088648678735e-05, -0.012426570057868958, -0.8172556161880493, -0.0015332859475165606, -0.8797930479049683, -0.009773261845111847, -0.0004020121123176068, -0.03477611392736435, -0.00013326710904948413, -0.024868305772542953, -3.731181277544238e-05, -0.002120153047144413, -0.01267567090690136, -0.003883322235196829, -0.4779464602470398, -0.028869206085801125, -0.17795129120349884, -0.004729869309812784, -0.5997108817100525, -0.013262036256492138, -1.4262930154800415], "finish_reason": "stop"}], "metrics": {"energy": 198.6178326816559, "energy_per_token": 1.3420123829841615, "time": 6.527396, "time_per_token": 0.04410402702702703}}
{"outputs": [{"text": "result_dict = {}\n    for file in pathlib.Path(directory).iterdir():\n        if os.path.isfile(file):\n            with open(file, 'r', encoding='utf-8') as f:\n                content = f.read()\n            file_name = file.name.replace('.txt', '').replace('.pdf', '').replace('.docx', '').replace('.jpg', '').replace('.png', '')\n            normalized_name = normalize_file_name(file_name)\n            result_dict[normalized_name] = {'Size': file.stat().st_size, 'MD5 Hash': md5(content).hexdigest()}\n\n    return result_dict", "tokens": ["result", "_", "dict", " =", " {}", "\n", "    ", "for", " file", " in", " path", "lib", ".", "Path", "(", "directory", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "            ", "file", "_", "name", " =", " file", ".", "name", ".", "replace", "('", ".", "txt", "'", ",", " '", "')", ".", "replace", "('", ".", "pdf", "'", ",", " '", "')", ".", "replace", "('", ".", "doc", "x", "'", ",", " '", "')", ".", "replace", "('", ".", "jpg", "'", ",", " '", "')", ".", "replace", "('", ".", "png", "'", ",", " '", "')", "\n", "            ", "normalized", "_", "name", " =", " normalize", "_", "file", "_", "name", "(", "file", "_", "name", ")", "\n", "            ", "result", "_", "dict", "[", "normalized", "_", "name", "]", " =", " {'", "Size", "':", " file", ".", "stat", "()", ".", "st", "_", "size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "(", "content", ")", ".", "hex", "dig", "est", "()}", "\n", "\n", "    ", "return", " result", "_", "dict", "\n", "\n", "def"], "logprobs": [-2.038940906524658, -2.934624671936035, -0.4509604573249817, -0.02695314772427082, -0.2328660488128662, -0.0275610089302063, -0.3046936094760895, -0.6278418898582458, -1.1347533464431763, -0.6297602653503418, -0.6614932417869568, -0.00012182447244413197, -0.00011467275908216834, -0.009699714370071888, -0.0051012830808758736, -0.008725374937057495, -0.0007672941428609192, -8.725739462533966e-05, -0.49061518907546997, -0.00015758226800244302, -0.0011722128838300705, -0.03454834967851639, -0.022059310227632523, -0.6429650187492371, -2.59421443939209, -0.00018809456378221512, -0.02893996797502041, -0.0058717853389680386, -0.01589379645884037, -0.14717470109462738, -0.0008968859910964966, -0.03304506093263626, -0.2974802553653717, -0.025706226006150246, -0.014809200540184975, -1.6959136724472046, -0.01361218560487032, -0.0016400470631197095, -0.01953177899122238, -0.01705339550971985, -0.3344216048717499, -1.2499191761016846, -0.5356850028038025, -0.00278501957654953, -0.03326336294412613, -0.09823381155729294, -0.11682890355587006, -0.15333154797554016, -0.0078010656870901585, -0.041827842593193054, -0.00270263385027647, -0.6898285746574402, -0.07061228156089783, -0.011551165021955967, -0.005810868460685015, -1.8466689586639404, -0.02373473532497883, -0.06175246462225914, -0.00015448330668732524, -0.0002227773511549458, -0.029356446117162704, -0.05424352362751961, -0.6676083207130432, -2.5187320709228516, -0.07479497790336609, -0.7094982266426086, -0.06278768181800842, -1.0489751100540161, -0.0038171776104718447, -0.21501947939395905, -0.943760097026825, -1.560778021812439, -0.2808869481086731, -0.8202996850013733, -1.1290658712387085, -0.0025764862075448036, -0.0005943200667388737, -0.09232258796691895, -0.05250820517539978, -1.4795283079147339, -0.8799788951873779, -0.05702538043260574, -0.5954014658927917, -3.5547313690185547, -0.0008013612823560834, -0.00022098960471339524, -0.03529052063822746, -0.003027144121006131, -0.6041758060455322, -0.22288717329502106, -0.03631957247853279, -0.10142984986305237, -0.8603078126907349, -0.3456321656703949, -0.001493173069320619, -0.00017486473370809108, -0.032231736928224564, -0.005674562882632017, -0.5534780621528625, -0.0794818252325058, -0.07250609993934631, -0.05168362334370613, -2.823887348175049, -0.0011755467858165503, -0.0011732844868674874, -0.038108088076114655, -0.0035517248325049877, -0.32035502791404724, -0.03251068666577339, -0.025672417134046555, -0.018641045317053795, -1.1978766918182373, -0.0003014348621945828, -0.0031835371628403664, -0.020338905975222588, -0.003825609339401126, -1.3103841543197632, -0.02905600145459175, -1.6380561590194702, -0.03246418386697769, -0.7786915898323059, -0.0055848280899226665, -2.6432690620422363, -1.4126408100128174, -1.5943506956100464, -0.029086917638778687, -0.009100387804210186, -0.021726571023464203, -0.02307922951877117, -0.03680353984236717, -3.194758028257638e-05, -0.07514557987451553, -0.04262175038456917, -0.04246637970209122, -1.1556721925735474, -0.039565637707710266, -0.0023237864952534437, -0.03513273969292641, -0.00859206635504961, -3.9934315282152966e-05, -0.0034271099139004946, -0.006691074464470148, -0.002843862399458885, -0.5184296369552612, -0.2036043256521225, -0.023370876908302307, -0.8671638369560242, -0.0036975841503590345, -0.0070657855831086636, -0.003134815488010645, -0.00011443436960689723, -0.00011884459672728553, -0.00016616393986623734, -0.00010799778101500124, -0.01021573320031166, -0.4355146288871765, -0.022452086210250854, -0.00021717573690693825, -0.06491099298000336, -0.003637841437011957, -0.29692399501800537, -0.0005399914807640016, -0.05667400360107422, -0.025987932458519936, -1.8947900533676147, -0.00027891082572750747, -0.02113231085240841, -3.838465272565372e-05, -0.00018749863374978304, -0.022453952580690384, -0.0018130784155800939, -1.8690565824508667, -0.02545209974050522, -0.028773652389645576, -0.006328423973172903, -5.125868119648658e-05, -6.794906312279636e-06, -0.008173824287950993, -0.004482103977352381, -0.03152333199977875], "finish_reason": "stop"}], "metrics": {"energy": 208.76796836090085, "energy_per_token": 1.159822046449449, "time": 7.775025, "time_per_token": 0.043194583333333335}}
{"outputs": [{"text": "return_info = {}\n    # iterate over all files\n    for file in os.listdir(directory):\n        full_file_path = os.path.join(directory, file)\n        # check if the file is a file\n        if os.path.isfile(full_file_path):\n            file_name, extension = os.path.splitext(full_file_path)\n            file_name = file_name.strip().replace(\" \", \"\")\n            # convert the file name to ASCII\n            try:\n                ascii_file_name = unicodedata.normalize('NFKD', file_name).encode('ascii', 'ignore')\n                ascii_file_name = ascii_file_name.decode()\n                ascii_file_name = ascii_file_name.strip().replace(\" \", \"\")\n                return_info[ascii_file_name] = {}\n            except UnicodeEncodeError:\n                return_info[file_name] = {}\n            # calculate the MD5 hash\n            with open(full_file_path", "tokens": ["return", "_", "info", " =", " {}", "\n", "    ", "#", " iterate", " over", " all", " files", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "full", "_", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "#", " check", " if", " the", " file", " is", " a", " file", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "full", "_", "file", "_", "path", "):", "\n", "            ", "file", "_", "name", ",", " extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "full", "_", "file", "_", "path", ")", "\n", "            ", "file", "_", "name", " =", " file", "_", "name", ".", "strip", "()", ".", "replace", "(", "\"", " \"", ",", " \"", "\"", ")", "\n", "            ", "#", " convert", " the", " file", " name", " to", " ASC", "II", "\n", "            ", "try", ":", "\n", "                ", "ascii", "_", "file", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", "\n", "                ", "ascii", "_", "file", "_", "name", " =", " as", "ci", "i", "_", "file", "_", "name", ".", "decode", "()", "\n", "                ", "ascii", "_", "file", "_", "name", " =", " as", "ci", "i", "_", "file", "_", "name", ".", "strip", "()", ".", "replace", "(", "\"", " \"", ",", " \"", "\"", ")", "\n", "                ", "return", "_", "info", "[", "ascii", "_", "file", "_", "name", "]", " =", " {}", "\n", "            ", "except", " Un", "icode", "Enc", "ode", "Error", ":", "\n", "                ", "return", "_", "info", "[", "file", "_", "name", "]", " =", " {}", "\n", "            ", "#", " calculate", " the", " MD", "5", " hash", "\n", "            ", "with", " open", "(", "full", "_", "file", "_", "path"], "logprobs": [-4.231869220733643, -1.186511754989624, -2.7010834217071533, -0.06781499087810516, -0.19976066052913666, -0.03507254272699356, -0.24988572299480438, -2.3470959663391113, -4.98637056350708, -0.843587338924408, -0.9180819392204285, -0.2655927836894989, -2.6909704208374023, -0.005629400257021189, -0.10576999932527542, -0.9862586259841919, -0.6279157996177673, -0.8661064505577087, -0.00015090756642166525, -0.035022933036088943, -2.3483953555114567e-05, -0.008626104332506657, -0.014377453364431858, -0.002084703417494893, -0.018567562103271484, -0.04714663326740265, -2.944431781768799, -0.1503278613090515, -1.3666868209838867, -0.3072657287120819, -0.2883602976799011, -0.00556360837072134, -0.4592723548412323, -0.001749057904817164, -0.0004400238685775548, -0.011841952800750732, -0.010115076787769794, -0.0007830176036804914, -0.010379618965089321, -0.001116605824790895, -0.01610332541167736, -0.001542688929475844, -0.026907775551080704, -0.11847156286239624, -0.9040372371673584, -1.5547674894332886, -0.19954772293567657, -1.1588983535766602, -0.1442730873823166, -0.31216010451316833, -0.2641056478023529, -0.8216586112976074, -0.8503098487854004, -0.002188907703384757, -0.03563752770423889, -0.14204150438308716, -0.00014232576359063387, -0.0001070442158379592, -0.005762274842709303, -0.0004213160718791187, -0.0044923098757863045, -0.0001833270798670128, -0.0019033902790397406, -2.706014311115723e-05, -3.0636318115284666e-05, -2.0265558760002023e-06, -4.768370445162873e-07, -0.02337891235947609, -0.007030629087239504, -0.020338905975222588, -3.034850597381592, -0.08454793691635132, -0.8425514698028564, -1.8883275985717773, -1.6618095636367798, -0.010997634381055832, -0.08475550264120102, -1.2397689715726301e-05, -6.544376083184034e-05, -0.007548263296484947, -0.00020847532141488045, -0.0001357701694360003, -5.960462772236497e-07, -0.00010930894495686516, -1.612351655960083, -2.3245540432981215e-05, -6.878139538457617e-05, -4.029192859889008e-05, -4.768360213347478e-06, -0.007209357805550098, -0.030876846984028816, -0.062129173427820206, -1.7057260274887085, -0.0332355722784996, -0.2317422777414322, -0.09972268342971802, -1.0268619060516357, -0.02216471917927265, -0.0004907834227196872, -0.09202384203672409, -2.7597925662994385, -0.30249908566474915, -1.6354032754898071, -0.7787054777145386, -0.9441310167312622, -0.1343066692352295, -0.5590985417366028, -0.0011614966206252575, -0.026148905977606773, -2.194159507751465, -0.003924645483493805, -0.3781678080558777, -0.092758908867836, -1.413030743598938, -2.681837558746338, -1.3628411293029785, -0.2035851627588272, -0.25935453176498413, -0.0445525161921978, -0.567726194858551, -0.00023112009512260556, -0.3198729157447815, -0.002371477195993066, -2.5188283920288086, -0.001871978398412466, -0.0038742972537875175, -0.0012349606258794665, -1.9291448593139648, -0.0038309532683342695, -0.5531832575798035, -0.01820673607289791, -0.0022395786363631487, -0.004249234218150377, -0.2252313494682312, -0.004377663601189852, -1.2755313036905136e-05, -0.00015448330668732524, -0.00015484087634831667, -0.005067362450063229, -2.52720492426306e-05, -0.32558298110961914, -0.14689530432224274, -0.04259570315480232, -0.000129691296024248, -0.0004440752090886235, -0.02134949527680874, -0.0019351581577211618, -6.9141146923357155e-06, -0.03128211945295334, -0.01208566315472126, -0.0030296400655061007, -0.05221497640013695, -0.29614806175231934, -0.011942200362682343, -5.602679812000133e-05, -0.12163818627595901, -0.0016747985500842333, -0.002328781643882394, -1.4747076034545898, -0.9575080871582031, -0.4477490484714508, -7.915183232398704e-05, -0.019617700949311256, -0.001104817260056734, -0.003929751459509134, -0.019324839115142822, -0.2976313531398773, 0.0, -7.390948667307384e-06, -6.496695277746767e-05, -2.002696055569686e-05, -4.458328112377785e-05, -1.0847986231965479e-05, -0.0015372138004750013, -0.08155738562345505, -0.8424144983291626, -0.135690376162529, -1.4030873775482178, -0.8855326771736145, -0.00018046658078674227, -0.040593162178993225, -0.0029289701487869024, -0.013907665386795998, -0.10745574533939362, -0.4461475610733032, -4.768370445162873e-07, -6.782778655178845e-05, -9.619726915843785e-05, -5.2927523938706145e-05, -8.308542601298541e-05, -1.0609570381348021e-05, -0.022228844463825226, -0.6868882179260254, -0.023074686527252197, -0.35951870679855347, -0.026926342397928238, -0.010802128352224827, -0.0034014484845101833, -0.024151291698217392, -3.504691630951129e-05, -0.004973540082573891, -0.08643382787704468, -0.0012048374628648162, -0.048336226493120193, -1.1035336256027222, -1.6184608936309814, -0.0017852336168289185, -0.0031579884234815836, -0.04640672728419304, -0.03581570088863373, -7.271740287251305e-06, -2.3841574147809297e-05, -3.814689989667386e-06, -2.0265373677830212e-05, -0.11184897273778915, -0.0037889136001467705, -1.0532587766647339, -0.00771164009347558, -0.5626015067100525, -0.02359025552868843, -1.171187400817871, -0.0002814135223161429, -1.1975088119506836, -0.0003303935518488288, -0.00028451209072954953, -0.0884905532002449, -0.0392768420279026, -0.0016780118457973003, -1.4354054927825928, -0.11488507688045502, -0.0008015995263122022, -0.13797612488269806, -0.23187227547168732, -0.11419449746608734, -0.0001333863037871197, -0.018861815333366394, -0.0011326810345053673, -0.011096670292317867, -0.00471468223258853, -0.8362231254577637, -0.680100679397583, -0.8011791706085205, -0.29131996631622314, -0.32294929027557373, -0.0002379134384682402, -0.039406005293130875, -0.7481800317764282, -0.002793697640299797, -1.208188772201538, -0.001735967700369656, -0.0012249593855813146, -0.03202613815665245, -3.0040289857424796e-05, -0.0001037067049765028, -3.2186455882765586e-06, -1.1920928244535389e-07], "finish_reason": "length"}], "metrics": {"energy": 309.40425545120235, "energy_per_token": 1.2086103728562592, "time": 12.387742, "time_per_token": 0.0483896171875}}
{"outputs": [{"text": "info = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            try:\n                # Get absolute path of file\n                path = pathlib.Path(root) / file\n                # Normalize file name to ASCII\n                file_ascii = unicodedata.normalize('NFKD', str(file)).encode('ascii', 'ignore').decode('ascii')\n                info[file_ascii] = {'MD5': md5(path.read_bytes()).hexdigest(), 'Size': path.stat().st_size}\n            except Exception:\n                pass\n    return info", "tokens": ["info", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "try", ":", "\n", "                ", "#", " Get", " absolute", " path", " of", " file", "\n", "                ", "path", " =", " path", "lib", ".", "Path", "(", "root", ")", " /", " file", "\n", "                ", "#", " Normal", "ize", " file", " name", " to", " ASC", "II", "\n", "                ", "file", "_", "ascii", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " str", "(", "file", "))", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "('", "ascii", "')", "\n", "                ", "info", "[", "file", "_", "ascii", "]", " =", " {'", "MD", "5", "':", " md", "5", "(", "path", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", ",", " '", "Size", "':", " path", ".", "stat", "()", ".", "st", "_", "size", "}", "\n", "            ", "except", " Exception", ":", "\n", "                ", "pass", "\n", "    ", "return", " info", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -0.48014694452285767, -1.94077730178833, -0.0016137446509674191, -0.29185816645622253, -0.001177928177639842, -0.00039057256071828306, -0.025759205222129822, -0.0011742371134459972, -0.01063854806125164, -1.3708974620385561e-05, -0.00012909532233607024, -0.004140020813792944, -0.019292332231998444, -0.12094306945800781, -0.028993817046284676, -0.0076345098204910755, -0.1129189282655716, -0.5125289559364319, -0.2068530023097992, -0.002660665661096573, -0.00031859567388892174, -0.0035790454130619764, -0.005654293578118086, -2.8384671211242676, -0.00026127262390218675, -0.005039489362388849, -0.0025415283162146807, -3.066826820373535, -3.0733933448791504, -2.707869529724121, -0.1544143408536911, -0.8253953456878662, -1.5589640140533447, -0.2961510717868805, -0.0003516055876389146, -1.4768394231796265, -0.03993258252739906, -0.9423604011535645, -9.536697689327411e-06, -2.3364747903542593e-05, -0.032056502997875214, -0.008886905387043953, -0.4554687738418579, -0.7236995100975037, -0.19780461490154266, -0.03487385809421539, -0.01577000692486763, -0.3491738438606262, -0.3748445212841034, -1.2434858083724976, -0.020921381190419197, -0.4654695391654968, -0.06045586243271828, -0.4666118323802948, -0.08162407577037811, -0.00012242044613230973, -0.16936832666397095, -0.00047434045700356364, -1.915009617805481, -0.0820857360959053, -1.6700448989868164, -0.05229010060429573, -0.8449971675872803, -0.002576724160462618, -4.291525328881107e-06, -0.00013004888023715466, -2.682172998902388e-05, -0.0004058252670802176, -4.7444173105759546e-05, -0.14578361809253693, -0.04712945967912674, -0.10512836277484894, -9.381330892210826e-05, -0.00013553177996072918, -3.0159740447998047, -0.00127948890440166, -0.8571603894233704, -0.057820145040750504, -0.015913624316453934, -0.0028105778619647026, -0.03807767853140831, -0.20616976916790009, -0.0011660212185233831, -0.0016764646861702204, -0.06528573483228683, -0.0011275607394054532, -0.0006893880781717598, -0.1831963062286377, -0.003429366974160075, -0.9490412473678589, -0.5622878074645996, -0.011847606860101223, -0.008768743835389614, -0.05274311080574989, -2.3966002464294434, -0.048027683049440384, -0.043953072279691696, -0.0034242586698383093, -2.2411095415009186e-05, -0.024229135364294052, -0.002721774624660611, -0.8692623972892761, -3.0771877765655518, -0.00025650550378486514, -2.238687038421631, -0.37591683864593506, -0.0001234931987710297, -0.04142041876912117, -0.16710416972637177, -0.018850818276405334, -0.11232437938451767, -1.07287787614041e-05, -0.0019602624233812094, -0.011673475615680218, -0.004659034311771393, -0.0253241416066885, -2.407998726994265e-05, -0.003948393743485212, -0.026375919580459595, -0.002268837997689843, -0.2636171579360962, -0.012403611093759537, -0.007044005207717419, -0.11696826666593552, -0.001111247343942523, -0.0066811274737119675, -0.0028767890762537718, -0.00016556799528189003, -0.00025519452174194157, -0.001013718661852181, -6.532455881824717e-05, -0.015181117691099644, -0.0036373662296682596, -0.04145609959959984, -0.006365382112562656, -1.5358909368515015, -1.5227652788162231, -0.02382669784128666, -0.002704773796722293, -1.176398754119873, -0.013998301699757576, -0.18951092660427094, -0.01200439315289259, -0.0024796947836875916, -1.0879769325256348, -3.2186455882765586e-06, -4.768370445162873e-07, -0.0002901133266277611, -5.173549288883805e-05, -0.07541093230247498], "finish_reason": "stop"}], "metrics": {"energy": 160.00511529731753, "energy_per_token": 1.0322910664343066, "time": 6.719301, "time_per_token": 0.043350329032258064}}
{"outputs": [{"text": "info = {}\n    for f in pathlib.Path(directory).iterdir():\n        if f.is_file():\n            file_name = f.name\n            normalized_name = unicodedata.normalize('NFKD', file_name).encode('ascii','ignore').decode('ascii')\n            size = f.stat().st_size\n            md5_hash = md5(f.read_bytes()).hexdigest()\n            info[normalized_name] = {'Size':size, 'MD5 Hash':md5_hash}\n    return info", "tokens": ["info", " =", " {}", "\n", "    ", "for", " f", " in", " path", "lib", ".", "Path", "(", "directory", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " f", ".", "is", "_", "file", "():", "\n", "            ", "file", "_", "name", " =", " f", ".", "name", "\n", "            ", "normalized", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ")", ".", "encode", "('", "ascii", "'", ",", "'", "ignore", "')", ".", "decode", "('", "ascii", "')", "\n", "            ", "size", " =", " f", ".", "stat", "()", ".", "st", "_", "size", "\n", "            ", "md", "5", "_", "hash", " =", " md", "5", "(", "f", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "info", "[", "normalized", "_", "name", "]", " =", " {'", "Size", "':", "size", ",", " '", "MD", "5", " Hash", "':", "md", "5", "_", "hash", "}", "\n", "    ", "return", " info", "\n", "\n", "def"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -0.48014694452285767, -2.961524486541748, -0.31157031655311584, -0.5772380232810974, -9.095255518332124e-05, -8.368142152903602e-05, -0.008660613559186459, -0.005689616780728102, -0.005333836190402508, -0.0008101756684482098, -5.531158240046352e-05, -0.4854736328125, -0.00014959646796341985, -0.001304133329540491, -0.022084614261984825, -0.01871124841272831, -0.4897540807723999, -0.4262666404247284, -0.001069569610990584, -0.11868088692426682, -1.585470999998506e-05, -0.0591200515627861, -0.18362975120544434, -0.021819883957505226, -0.00988705549389124, -2.6225106716156006, -0.29640182852745056, -0.6481236815452576, -0.06238781288266182, -0.6964201927185059, -0.0011849532602354884, -0.11205766350030899, -0.567562997341156, -0.04460427537560463, -2.070342540740967, -0.0508384183049202, -0.38335803151130676, -0.006143613718450069, -0.4316363036632538, -0.004521266557276249, -1.8358061424805783e-05, -0.0007615765207447112, -6.651657167822123e-05, -0.00030119650182314217, -1.4781842764932662e-05, -0.20651309192180634, -0.02151774987578392, -0.22119836509227753, -5.4238757002167404e-05, -0.0002544794406276196, -0.03483172133564949, -7.891343557275832e-05, -8.34461570775602e-06, -0.03581041097640991, -0.03263692185282707, -0.016673969104886055, -0.06956367194652557, -0.4464362561702728, -0.007464494090527296, -0.002218168694525957, -2.587153196334839, -0.002669106936082244, -0.0024634036235511303, -0.11459065973758698, -0.012770656496286392, -0.7072020173072815, -0.468293696641922, -0.007472776807844639, -0.03060923144221306, -0.04386214539408684, -1.917072057723999, -0.054368965327739716, -1.0398930311203003, -7.915183232398704e-05, -0.004745530430227518, -0.0009557208395563066, -9.369411418447271e-05, -9.119095193454996e-05, -0.00016306500765495002, -0.00010287232726113871, -0.012946361675858498, -0.012277503497898579, -0.5052072405815125, -0.005909471306949854, -0.05629095062613487, -0.04897152632474899, -0.003676324151456356, -0.1290479451417923, -0.0005534547381103039, -0.09870525449514389, -0.13501714169979095, -0.0016338583081960678, -0.0288704801350832, -0.22537380456924438, -0.0013084192760288715, -0.010450167581439018, -0.0033418068196624517, -0.03982994705438614, -2.8609820219571702e-05, -0.004728919826447964, -0.0002535260282456875, -0.008541243150830269, -0.051620226353406906, -0.07777313888072968, -0.03125947341322899, -0.01100010983645916, -3.1709168979432434e-05, -0.002003092784434557, -0.011943024583160877, -0.0022031813859939575, -0.14040596783161163, -0.10456738620996475, -0.031464073807001114, -2.184609889984131, -0.003693902399390936, -0.21397171914577484, -0.006841567344963551, -0.00013207517622504383, -0.06613823771476746, -0.006331977434456348, -0.04234080761671066, -2.1219027985353023e-05, -0.00011550712952157483, -8.940656698541716e-06, -0.00890651810914278, -0.0013044904917478561, -0.1658066213130951, -0.00939743872731924, -0.005463667679578066, -0.4290476143360138, -0.026698525995016098, -0.6869001388549805], "finish_reason": "stop"}], "metrics": {"energy": 142.7891233539581, "energy_per_token": 1.0422563748464095, "time": 6.1004567, "time_per_token": 0.04452888102189781}}
{"outputs": [{"text": "files = os.listdir(directory)\n    result = {}\n    for f in files:\n        file = os.path.join(directory, f)\n        if not os.path.isfile(file):\n            continue\n        md5_hash = md5()\n        with open(file, \"rb\") as fd:\n            md5_hash.update(fd.read())\n        normalized_filename = unicodedata.normalize('NFKD', f).encode(\"ascii\", \"ignore\").decode('utf-8')\n        md5_hash = md5_hash.hexdigest()\n        result[normalized_filename] = {'Size': os.path.getsize(file), 'MD5 Hash': md5_hash}\n    return result", "tokens": ["files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "result", " =", " {}", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "file", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " f", ")", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "            ", "continue", "\n", "        ", "md", "5", "_", "hash", " =", " md", "5", "()", "\n", "        ", "with", " open", "(", "file", ",", " \"", "rb", "\"", ")", " as", " f", "d", ":", "\n", "            ", "md", "5", "_", "hash", ".", "update", "(", "fd", ".", "read", "())", "\n", "        ", "normalized", "_", "filename", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " f", ")", ".", "encode", "(", "\"", "ascii", "\"", ",", " \"", "ignore", "\"", ")", ".", "decode", "('", "utf", "-", "8", "')", "\n", "        ", "md", "5", "_", "hash", " =", " md", "5", "_", "hash", ".", "hex", "dig", "est", "()", "\n", "        ", "result", "[", "normalized", "_", "filename", "]", " =", " {'", "Size", "':", " os", ".", "path", ".", "get", "size", "(", "file", ")", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-3.0548157691955566, -0.36769768595695496, -1.8847761154174805, -0.00022885564249008894, -0.022456632927060127, -1.9907753085135482e-05, -0.004672798328101635, -0.011760544963181019, -0.0005746620590798557, -0.031740929931402206, -0.12761901319026947, -2.6557400226593018, -0.05807202681899071, -0.17918634414672852, -0.00918153952807188, -0.2084275186061859, -0.11681734770536423, -1.9244341850280762, -0.21744190156459808, -0.005581034813076258, -0.001405086019076407, -0.0054794359020888805, -0.01234615221619606, -2.0584425926208496, -1.3630461692810059, -0.9456573128700256, -0.0021699946373701096, -0.004019278567284346, -0.05343393236398697, -0.01350399013608694, -0.0016320730792358518, -0.0040738931857049465, -0.0008390005677938461, -0.04122619330883026, -0.0009055804111994803, -0.005510023329406977, -0.026028702035546303, -0.48663756251335144, -2.09018874168396, -0.04695090278983116, -0.0013725870521739125, -6.627816765103489e-05, -0.014855829998850822, -0.005572499241679907, -0.11043474823236465, -0.0002817710628733039, -0.003996125888079405, -0.06249857321381569, -0.027117446064949036, -0.0017820206703618169, -0.07754635810852051, -0.019500449299812317, -0.09902738034725189, -3.36818265914917, -0.025543322786688805, -0.4005511701107025, -0.1508857011795044, -0.019624128937721252, -0.5795061588287354, -0.0005610798834823072, -0.6723092794418335, -0.012807023711502552, -0.016234345734119415, -0.40694838762283325, -0.006789353210479021, -0.0009515525307506323, -0.008575282990932465, -0.004664136562496424, -1.8105014562606812, -0.007435268256813288, -0.0005285535007715225, -0.002358038444072008, -0.00018153927521780133, -0.4445565640926361, -1.6933077573776245, -0.0008480527903884649, -0.003694139886647463, -0.002790487837046385, -0.9265201687812805, -0.0001225396408699453, -0.0010941001819446683, -0.002044017892330885, -0.003347272053360939, -0.00038961926475167274, -0.004029607865959406, -0.012712041847407818, -0.0009535771678201854, -0.00032491172896698117, -0.008457557298243046, -0.004196290858089924, -0.38473206758499146, -2.133484125137329, -0.09141140431165695, -1.2591619491577148, -0.006157475523650646, -0.30514582991600037, -0.003505515633150935, -2.682172998902388e-05, -0.0005317704635672271, -0.0002236116270069033, -0.00021836756786797196, -9.667406266089529e-05, -0.8522307872772217, -0.06807361543178558, -0.21971705555915833, -4.768258077092469e-05, -0.0001829695247579366, -0.05680161714553833, -0.025301825255155563, -0.02909236028790474, -0.014222919009625912, -2.1584854125976562, -0.308928906917572, -0.16385692358016968, -1.5258672647178173e-05, -0.04774075374007225, -0.1118408739566803, -0.00832716841250658, -1.549708758830093e-05, -0.0038661037106066942, -0.31709781289100647, -0.024646416306495667, -1.9030468463897705, -1.2978219985961914, -0.1578502506017685, -0.0008102948195300996, -0.033967770636081696, -0.027679752558469772, -0.012861514464020729, -2.8949198722839355, -0.0029099523089826107, -0.03785812482237816, -0.24758408963680267, -0.1906440407037735, -0.03932990878820419, -2.8371408916427754e-05, -0.02902740053832531, -0.00032217081752605736, -0.00010346830822527409, -0.021929865702986717, -3.85038583772257e-05, -0.00036161558819003403, -0.0004256058018654585, -0.009669726714491844, -0.024327799677848816, -0.6320763826370239, -0.021894995123147964, -0.016525885090231895, -8.106198947643861e-06, -0.0005050813779234886, -0.005322097335010767, -0.0012454380048438907, -0.5267230868339539, -0.18628044426441193, -0.019101949408650398, -0.1273583471775055, -5.602820692729438e-06, -0.1266910433769226, -0.0006410212954506278, -0.00024434918304905295, -7.867782187531702e-06, -6.508615479106084e-05, -0.009228785522282124, -0.0015167410019785166, -0.0021527467761188745, -0.15428704023361206, -0.008420795202255249, -0.00013553177996072918, -0.07554811239242554, -0.0032025498803704977, -0.02946166694164276, -1.1920928244535389e-07, -9.83428253675811e-05, -9.536738616588991e-07, -0.006775973830372095, -0.0012988949893042445, -0.11155568808317184, -0.010181985795497894, -0.0034288919996470213, -0.12199564278125763, -0.01441987231373787, -1.9990928173065186], "finish_reason": "stop"}], "metrics": {"energy": 215.7008033351897, "energy_per_token": 1.185169249094449, "time": 8.001541, "time_per_token": 0.04396451098901099}}
{"outputs": [{"text": "# Initialize a dictionary to store file info\n    result = {}\n\n    # Iterate through files within the specified directory\n    for filename in os.listdir(directory):\n        path = os.path.join(directory, filename)\n\n        # If the file exists, process it and add its info to the result dictionary\n        if os.path.isfile(path):\n            # Normalize the filename\n            ascii_filename = ascii(filename)\n\n            # Calculate the MD5 hash\n            hash_value = md5()\n            with open(path, 'rb') as f:\n                hash_value.update(f.read())\n            file_hash = hash_value.hexdigest()\n\n            # Get the size of the file\n            file_size = os.path.getsize(path)\n\n            # Add the result to the dictionary\n            result[ascii_filename] = {'Size': file_size, 'MD5 Hash': file_hash}\n\n    # Return the result dictionary\n    return result", "tokens": ["#", " Initialize", " a", " dictionary", " to", " store", " file", " info", "\n", "    ", "result", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " through", " files", " within", " the", " specified", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "\n", "        ", "#", " If", " the", " file", " exists", ",", " process", " it", " and", " add", " its", " info", " to", " the", " result", " dictionary", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "path", "):", "\n", "            ", "#", " Normal", "ize", " the", " filename", "\n", "            ", "ascii", "_", "filename", " =", " as", "ci", "i", "(", "filename", ")", "\n", "\n", "            ", "#", " Calculate", " the", " MD", "5", " hash", "\n", "            ", "hash", "_", "value", " =", " md", "5", "()", "\n", "            ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "hash", "_", "value", ".", "update", "(", "f", ".", "read", "())", "\n", "            ", "file", "_", "hash", " =", " hash", "_", "value", ".", "hex", "dig", "est", "()", "\n", "\n", "            ", "#", " Get", " the", " size", " of", " the", " file", "\n", "            ", "file", "_", "size", " =", " os", ".", "path", ".", "get", "size", "(", "path", ")", "\n", "\n", "            ", "#", " Add", " the", " result", " to", " the", " dictionary", "\n", "            ", "result", "[", "ascii", "_", "filename", "]", " =", " {'", "Size", "':", " file", "_", "size", ",", " '", "MD", "5", " Hash", "':", " file", "_", "hash", "}", "\n", "\n", "    ", "#", " Return", " the", " result", " dictionary", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.032959461212158, -3.001429557800293, -1.3815090656280518, -0.11515890061855316, -0.07956472784280777, -0.136011004447937, -1.4940814971923828, -1.0709755420684814, -0.3740403950214386, -0.002212697174400091, -3.3843495845794678, -0.10155037045478821, -0.1611604541540146, -0.0012644876260310411, -0.25529253482818604, -0.0005225961795076728, -0.10090203583240509, -1.356934666633606, -0.005126189440488815, -0.9443739652633667, -2.038957357406616, -2.7040855884552, -0.14101293683052063, -0.5313912630081177, -0.007155979052186012, -0.07922151684761047, -0.0005849081207998097, -0.03375261649489403, -1.5649895668029785, -0.002958684926852584, -0.23143750429153442, -4.303362584323622e-05, -0.0019327785121276975, -4.887569048150908e-06, -0.0017441788222640753, -0.0035542193800210953, -0.00042417587246745825, -0.0037218127399683, -0.058143675327301025, -2.7090976238250732, -0.011359420605003834, -0.28670987486839294, -0.0007649118197150528, -9.524368942948058e-05, -0.017457515001296997, -0.0021751096937805414, -0.0003670972364488989, -0.0019096963806077838, -0.00016735584358684719, -0.0033846967853605747, -5.4834770708112046e-05, -0.03349556773900986, -0.6346791386604309, -0.0011152960360050201, -0.20554421842098236, -1.7141386270523071, -0.19408583641052246, -0.2675306797027588, -1.7766783237457275, -0.9156043529510498, -0.6795880198478699, -0.1263987123966217, -2.5154497623443604, -0.8918247222900391, -0.39455097913742065, -0.23328661918640137, -0.027029847726225853, -0.07635712623596191, -0.5069742798805237, -0.3233107626438141, -0.018873045220971107, -0.001069569610990584, -0.023222269490361214, -0.01551815401762724, -4.935142715112306e-05, -3.909988299710676e-05, -0.003870022250339389, -0.2054227888584137, -7.259582343976945e-05, -2.5152843591058627e-05, -0.0006311332108452916, -0.010531681589782238, -0.0023230728693306446, -0.018842747434973717, -1.5302737951278687, -0.48104265332221985, -0.0062004816718399525, -0.29611268639564514, -1.2700543403625488, -2.338357448577881, -0.00028379703871905804, -1.6860367059707642, -0.002672435948625207, -0.28764089941978455, -0.001401276676915586, -2.6120107173919678, -0.0007088055717758834, -0.18583616614341736, -0.8494559526443481, -0.18828925490379333, -0.05056929588317871, -0.14864090085029602, -0.7439306974411011, -0.0006313714548014104, -0.06357139348983765, -0.33079394698143005, -0.3829907178878784, -0.1770801544189453, -8.654219709569588e-05, -0.022622136399149895, -1.3508657217025757, -0.0003369478799868375, -1.1665494441986084, -0.11568423360586166, -0.7624847888946533, -0.002274071332067251, -0.14697887003421783, -6.627816765103489e-05, -1.7484551668167114, -0.00529079232364893, -0.02732127159833908, -0.16209188103675842, -0.0006992755807004869, -0.00034374051028862596, -0.007244508247822523, -0.008152659051120281, -0.11521361023187637, -0.0005131834768690169, -0.004056321922689676, -0.0002494739310350269, -0.7462562322616577, -0.043406467884778976, -0.002107305685058236, -0.0017201402224600315, -1.5059007406234741, -0.00045885046711191535, -0.001752984942868352, -0.0026704147458076477, -0.00022980909852776676, -0.002050560899078846, -0.0022440983448177576, -0.00011884459672728553, -5.578839045483619e-05, -0.004832493141293526, -0.0024252308066934347, -0.36395183205604553, -2.7169296741485596, -0.018151599913835526, -0.25646287202835083, -0.0059593613259494305, -0.0123898359015584, -0.0030347504653036594, -4.207999518257566e-05, -0.00014172980445437133, -0.05327243357896805, -2.1576648578047752e-05, -0.00031609306461177766, -0.00024244230007752776, -0.007977528497576714, -0.0206645168364048, -0.0007479969062842429, -0.029037127271294594, -1.3504729270935059, -0.1961778998374939, -1.521230697631836, -0.20320872962474823, -0.0032427129335701466, -0.0014637719141319394, -0.1035521924495697, -0.0003475538978818804, -0.6770288348197937, -0.0010476582683622837, -0.015666386112570763, -0.015535055659711361, -0.06353995949029922, -3.814624506048858e-05, -0.11560799181461334, -0.0029289701487869024, -6.0794889577664435e-05, -1.0132738680113107e-05, -0.0002803409588523209, -0.0012281740782782435, -0.0003665013937279582, -0.004615131299942732, -0.0322556309401989, -0.0009566736407577991, -0.028380222618579865, -0.2835455536842346, -0.1431073397397995, -2.5870532989501953, -0.32947754859924316, -0.0144539475440979, -0.3005904257297516, -0.11836270242929459, -0.00032443503732793033, -0.044691260904073715, -0.009806787595152855, -0.007186634000390768, -0.0008981961291283369, -1.4066597032069694e-05, -0.0035843905061483383, -0.00025102324434556067, -0.20800410211086273, -0.13726142048835754, -0.013457532972097397, -0.012892229482531548, -2.9444261599564925e-05, -7.366862701019272e-05, -0.0006848612101748586, -0.038799915462732315, -0.018845906481146812, -9.381330892210826e-05, -0.06850872933864594, -0.001157924416474998, -0.003905765013769269, -7.390948667307384e-06, -1.9311717551317997e-05, -0.004214453510940075, -0.00046921687317080796, -0.09849991649389267, -0.03740555793046951, -1.299788475036621, -0.034732937812805176, -0.012956482358276844, -0.5493023991584778, -0.13309262692928314, -0.0554189570248127, -0.00044252615771256387, -0.0023497133515775204, -0.0015942256432026625, -0.1370561569929123, -0.00690739369019866, -0.6487231850624084], "finish_reason": "stop"}], "metrics": {"energy": 268.6638108167651, "energy_per_token": 1.1530635657371893, "time": 10.307523, "time_per_token": 0.04423829613733905}}
{"outputs": [{"text": "info = {}\n\n    # Check if the specified directory exists\n    if not os.path.exists(directory):\n        print(\"Directory not found\")\n        return info\n\n    # Iterate over all files in the directory\n    for root, dirs, files in os.walk(directory):\n        for name in files:\n            filepath = os.path.join(root, name)\n            # Normalize the file name to ASCII\n            ascii_name = unicodedata.normalize('NFKD', name).encode('ascii', 'ignore').decode()\n\n            # Calculate the MD5 hash\n            hash_object = md5()\n            with open(filepath, 'rb') as f:\n                for byte in f:\n                    hash_object.update(byte)\n            md5_hash = hash_object.hexdigest()\n\n            # Retrieve the size of the file\n            size = os.path.getsize(filepath)\n            info[ascii_name] = {'Size': size, 'MD5 Hash': md5_hash}\n\n    return info", "tokens": ["info", " =", " {}", "\n", "\n", "    ", "#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "print", "(", "\"", "Directory", " not", " found", "\"", ")", "\n", "        ", "return", " info", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " files", " in", " the", " directory", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " name", " in", " files", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " name", ")", "\n", "            ", "#", " Normal", "ize", " the", " file", " name", " to", " ASC", "II", "\n", "            ", "ascii", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " name", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "()", "\n", "\n", "            ", "#", " Calculate", " the", " MD", "5", " hash", "\n", "            ", "hash", "_", "object", " =", " md", "5", "()", "\n", "            ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "for", " byte", " in", " f", ":", "\n", "                ", "    ", "hash", "_", "object", ".", "update", "(", "byte", ")", "\n", "            ", "md", "5", "_", "hash", " =", " hash", "_", "object", ".", "hex", "dig", "est", "()", "\n", "\n", "            ", "#", " Ret", "rieve", " the", " size", " of", " the", " file", "\n", "            ", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", "path", ")", "\n", "            ", "info", "[", "ascii", "_", "name", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "\n", "    ", "return", " info", "\n", "\n", "#"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -1.466658592224121, -0.0006947487709112465, -1.8128162622451782, -3.007235050201416, -0.8306850790977478, -0.4984547197818756, -1.5860005617141724, -0.044096920639276505, -0.07829368114471436, -0.6018257737159729, -0.001515788841061294, -0.07739786803722382, -0.09891357272863388, -0.03372207283973694, -2.8729025871143676e-05, -0.0003657863999251276, -0.01343001052737236, -0.3844057619571686, -0.0003631647559814155, -0.0032208492048084736, -0.007993021048605442, -0.003504684194922447, -0.0016465928638353944, -1.1927673816680908, -0.1860446184873581, -0.9139916896820068, -0.8277698159217834, -1.3957960605621338, -0.004172429908066988, -1.182790994644165, -0.002787991426885128, -0.005743429530411959, -0.06693192571401596, -0.08100073039531708, -0.4451441764831543, -0.007013819646090269, -0.052101485431194305, -0.00120936194434762, -0.19753460586071014, -1.4548059701919556, -0.008600694127380848, -0.6994802355766296, -0.636605441570282, -0.12310571223497391, -0.3381352424621582, -0.012869634665548801, -0.3918037414550781, -0.15282562375068665, -0.0009344025747850537, -0.03298427537083626, -2.2015697956085205, -0.0019014865392819047, -0.48018109798431396, -0.00041476229671388865, -8.987976616481319e-05, -0.045502834022045135, -0.00039057256071828306, -0.005594904534518719, -0.0002044230350293219, -0.00011717586312443018, -0.0012318650260567665, -0.00500924326479435, -0.11646397411823273, -0.007336934097111225, -0.009824376553297043, -0.15152302384376526, -2.418161392211914, -0.0008943848661147058, -0.001804986852221191, -0.0003367095487192273, -0.0030641055200248957, -0.02491307258605957, -1.3414709568023682, -2.4907922744750977, -0.0012050755321979523, -0.17252402007579803, -8.701899787411094e-05, -6.139089964563027e-05, -0.008612630888819695, -0.005333954934030771, -0.00011431517486926168, -0.002051393734291196, -0.00033480284037068486, -0.004419915843755007, -0.00012540031457319856, -0.01511101983487606, -0.2930335998535156, -1.363851547241211, -0.8484182953834534, -0.021185647696256638, -0.38630571961402893, -0.2594763934612274, -0.06160026043653488, -0.4348890781402588, -0.08094092458486557, -8.630380034446716e-05, -0.38098055124282837, -0.0006011109799146652, -1.3237934112548828, -0.003237247234210372, -0.24396345019340515, -0.0026214304380118847, -0.2565278112888336, -0.0026982349809259176, -1.2874520507466514e-05, -0.00020203932945150882, -1.2874520507466514e-05, -0.0009155849111266434, -0.00021634146105498075, -0.13063855469226837, -0.1220008134841919, -0.10541388392448425, -2.4914430468925275e-05, -7.712543447269127e-05, -0.07133372128009796, -0.01959969848394394, -0.0027642156928777695, -0.0010933857411146164, -0.025234989821910858, -0.16970671713352203, -0.0012425805907696486, -0.0001323135511483997, -0.0521460697054863, -0.002776697976514697, -0.0004909025738015771, -0.06665126234292984, -0.0051015205681324005, -0.6713582277297974, -0.037266142666339874, -1.8499703407287598, -0.0012298409128561616, -0.1162165105342865, -0.30982890725135803, -0.17739936709403992, -0.18988032639026642, -0.00010430268594063818, -0.016769982874393463, -1.438301920890808, -0.0005154472892172635, -1.4705660343170166, -0.10531003028154373, -1.73849356174469, -0.0006422125734388828, -0.3762761950492859, -1.2874520507466514e-05, -0.1012335792183876, -0.0012837749673053622, -0.0061139934696257114, -0.14332397282123566, -0.0005221195751801133, -0.0003522014303598553, -0.0026833738666027784, -6.627816765103489e-05, -0.002153579378500581, -0.11909644305706024, -0.00042715485324151814, -0.003416774095967412, -0.00023684080224484205, -0.3421863317489624, -0.0189584381878376, -0.0013950864085927606, -0.0017945152940228581, -1.1928420066833496, -1.3872716426849365, -0.16115102171897888, -1.043623924255371, -1.1002905368804932, -0.0036739488132297993, -2.13382354559144e-05, -0.00036030475166626275, -0.0010161004029214382, -2.8132995794294402e-05, -0.00026806574896909297, -1.5735502529423684e-05, -0.0001528146385680884, -4.458328112377785e-05, -0.0004570631426759064, -0.004285082221031189, -0.0008772339206188917, -0.2103254348039627, -0.5230956673622131, -0.000753357307985425, -0.07143838703632355, -0.11387041211128235, -0.002800473477691412, -0.0030370086897164583, -0.00018630675913300365, -2.825220326485578e-05, -4.279521817807108e-05, -0.012379121035337448, -2.5510462364763953e-05, -0.000723576988093555, -0.00013863079948350787, -0.008610857650637627, -0.0320235975086689, -0.0007753941463306546, -0.05163449048995972, -1.4091614484786987, -0.004559359047561884, -0.15511414408683777, -1.6962312459945679, -0.3606913387775421, -0.0032342765480279922, -0.0028498058672994375, -0.050082191824913025, -0.0004676678800024092, -0.30428048968315125, -0.07932073622941971, -0.04610965773463249, -0.00012766500003635883, -0.06405957043170929, -0.001908863428980112, -5.304672595229931e-05, -1.0371154530730564e-05, -0.0002535260282456875, -0.0024170251563191414, -2.3364747903542593e-05, -0.0003070359816774726, -0.0040522851049900055, -2.6419951915740967, -0.5569705963134766, -0.02294362708926201, -0.019279353320598602, -5.483612312673358e-06, -8.749579137656838e-05, -0.005831490736454725, -0.00040904260822571814, -0.12258964031934738, -0.16633397340774536, -0.01322180312126875, -0.015928994864225388, -0.0010161004029214382, -0.013782805763185024, -0.0034316242672502995, -6.329813186312094e-05, -0.053850386291742325, -0.0015679220668971539, -0.012745587155222893, -3.2186455882765586e-06, -7.283422019099817e-05, -2.861018856492592e-06, -0.0039364006370306015, -0.0024776733480393887, -0.31177806854248047, -0.009708451107144356, -0.03330810368061066, -0.0012365083675831556, -0.27699732780456543, -0.01319380383938551, -1.6602752208709717], "finish_reason": "stop"}], "metrics": {"energy": 317.42541589355454, "energy_per_token": 1.2497063617856479, "time": 12.39274, "time_per_token": 0.048790314960629924}}
{"outputs": [{"text": "info = dict()\n    files = []\n    for root, dirs, files_list in os.walk(directory):\n        for file_name in files_list:\n            files.append(os.path.join(root, file_name))\n    for file_path in files:\n        file = pathlib.Path(file_path)\n        normalized_name = unicodedata.normalize('NFKD', file.stem).encode('ASCII', 'ignore').decode('ASCII')\n        file_size = file.stat().st_size\n        file_md5 = md5(file.read_bytes()).hexdigest()\n        info[normalized_name] = {'Size': file_size, 'MD5': file_md5}\n    return info", "tokens": ["info", " =", " dict", "()", "\n", "    ", "files", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", "_", "list", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", "_", "list", ":", "\n", "            ", "files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " file", "_", "name", "))", "\n", "    ", "for", " file", "_", "path", " in", " files", ":", "\n", "        ", "file", " =", " path", "lib", ".", "Path", "(", "file", "_", "path", ")", "\n", "        ", "normalized", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", ".", "stem", ")", ".", "encode", "('", "ASC", "II", "'", ",", " '", "ignore", "')", ".", "decode", "('", "ASC", "II", "')", "\n", "        ", "file", "_", "size", " =", " file", ".", "stat", "()", ".", "st", "_", "size", "\n", "        ", "file", "_", "md", "5", " =", " md", "5", "(", "file", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "        ", "info", "[", "normalized", "_", "name", "]", " =", " {'", "Size", "':", " file", "_", "size", ",", " '", "MD", "5", "':", " file", "_", "md", "5", "}", "\n", "    ", "return", " info", "\n", "\n", "#"], "logprobs": [-1.749956488609314, -0.028856581076979637, -1.940243124961853, -0.005802098195999861, -0.026388807222247124, -0.24945804476737976, -3.1519222259521484, -0.1487564742565155, -2.2081518173217773, -0.016903728246688843, -0.17437170445919037, -0.5709116458892822, -1.1523536443710327, -0.0027014450170099735, -0.22789688408374786, -0.001392229343764484, -0.00034671969478949904, -0.29838934540748596, -0.847643256187439, -1.3762891292572021, -0.0021145620848983526, -0.014472629874944687, -3.85038583772257e-05, -8.916457591112703e-05, -0.0039013714995235205, -0.022465026006102562, -0.11451401561498642, -0.03552190959453583, -0.007728200871497393, -0.2797619104385376, -0.7427201271057129, -1.1637226343154907, -0.1694314330816269, -0.0036283391527831554, -0.011235185898840427, -0.004991213791072369, -7.510157047363464e-06, -0.001383420079946518, -0.007206162437796593, -0.004434513859450817, -1.2274233102798462, -0.006598351523280144, -0.0037579170893877745, -0.10208688676357269, -0.654835045337677, -0.0013616346986964345, -0.0010122895473614335, -0.00914456695318222, -0.029926981776952744, -0.0007569308509118855, -0.011702931486070156, -0.002021295018494129, -0.026411214843392372, -2.3245540432981215e-05, -2.2291887944447808e-05, -0.0073187099769711494, -0.005035812500864267, -0.49907636642456055, -0.16911710798740387, -0.28464168310165405, -0.839019775390625, -0.724577784538269, -0.004769733641296625, -0.011183671653270721, -0.00026603974401950836, -0.0028326883912086487, -0.006288621574640274, -1.3727854490280151, -1.7874436378479004, -0.36693644523620605, -5.328513361746445e-05, -4.9232225137529895e-05, -0.02326839044690132, -0.0012973472476005554, -0.00540414871647954, -0.00019012074335478246, -0.00022790218645241112, -0.003902796423062682, -0.1582721322774887, -0.010221397504210472, -2.3387656211853027, -0.08134311437606812, -0.44890519976615906, -0.011676538735628128, -0.6180515885353088, -0.004702817182987928, -1.0013530300057027e-05, -0.0005289109540171921, -0.00017438798386137933, -0.000406301929615438, -0.00013028726971242577, -0.2050779163837433, -0.04313453286886215, -0.2296990305185318, -8.606540359323844e-05, -0.0002932118659373373, -0.0380597747862339, -0.03391050174832344, -1.713838815689087, -0.04782280698418617, -0.08012031763792038, -0.07038164883852005, -0.08613266795873642, -0.9840872287750244, -8.987976616481319e-05, -0.004350245930254459, -0.0004253674705978483, -0.08262676000595093, -0.008541361428797245, -0.0030994017142802477, -0.15212185680866241, -0.014200235716998577, -1.1296480894088745, -0.053021032363176346, -6.949660019017756e-05, -0.023142481222748756, -0.35244908928871155, -0.015418733470141888, -2.160918712615967, -0.14540623128414154, -1.1929610967636108, -0.08492513746023178, -1.7538808584213257, -0.0018303323304280639, -0.010944811627268791, -0.005785505287349224, -9.178694017464295e-05, -0.0002026352594839409, -0.0006599632324650884, -7.056941103655845e-05, -0.01986338011920452, -0.007395627908408642, -1.043099045753479, -0.016434773802757263, -0.7590331435203552, -0.001653733546845615, -0.28796136379241943, -0.10597631335258484, -4.51792984677013e-05, -0.06912556290626526, -0.3567187786102295, -0.010211249813437462, -0.07608284801244736, -0.024211334064602852, -0.000446696620201692, -0.00895838625729084, -0.011001171544194221, -0.022960752248764038, -3.099393507000059e-05, -0.0006410212954506278, -0.00028391621890477836, -0.007668462116271257, -0.030861010774970055, -0.1457923799753189, -0.0753847286105156, -0.04551843926310539, -4.482168878894299e-05, -0.0009525052737444639, -0.017466770485043526, -0.001437464845366776, -0.24131788313388824, -0.14080926775932312, -0.026445811614394188, -0.02633725479245186, -0.010648926720023155, -0.0002406545972917229, -0.0013409203384071589, -0.04275379702448845, -0.0046500167809426785, -7.652943895664066e-05, -2.995094060897827, -0.006649747025221586, -0.000601349223870784, -6.007967749610543e-05, -6.079655122448457e-06, -0.005885058548301458, -0.0020510368049144745, -0.09025652706623077, -0.013622651807963848, -0.003113900311291218, -0.5769505500793457, -0.02764972113072872, -2.174201726913452], "finish_reason": "stop"}], "metrics": {"energy": 210.40425962257393, "energy_per_token": 1.1497500525823712, "time": 7.9859004, "time_per_token": 0.0436388}}
{"outputs": [{"text": "# Get a list of files in the directory\n    file_list = [pathlib.Path(directory, f) for f in os.listdir(directory)]\n    # Filter only the files with extension .txt\n    txt_files = list(filter(lambda file: file.name.endswith(\".txt\"), file_list))\n\n    # Normalize the file names\n    txt_files = [file.replace(\".txt\", \"\") for file in txt_files]\n\n    # Calculate the MD5 hash of each file\n    md5_hash_dict = {}\n    for file in txt_files:\n        md5_hash_dict[file] = {'MD5 Hash': md5(open(file, 'rb').read()).hexdigest()}\n    return md5_hash_dict", "tokens": ["#", " Get", " a", " list", " of", " files", " in", " the", " directory", "\n", "    ", "file", "_", "list", " =", " [", "path", "lib", ".", "Path", "(", "directory", ",", " f", ")", " for", " f", " in", " os", ".", "list", "dir", "(", "directory", ")]", "\n", "    ", "#", " Filter", " only", " the", " files", " with", " extension", " ", ".", "txt", "\n", "    ", "txt", "_", "files", " =", " list", "(", "filter", "(", "lambda", " file", ":", " file", ".", "name", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", ")", ",", " file", "_", "list", "))", "\n", "\n", "    ", "#", " Normal", "ize", " the", " file", " names", "\n", "    ", "txt", "_", "files", " =", " [", "file", ".", "replace", "(", "\"", ".", "txt", "\"", ",", " \"", "\"", ")", " for", " file", " in", " t", "xt", "_", "files", "]", "\n", "\n", "    ", "#", " Calculate", " the", " MD", "5", " hash", " of", " each", " file", "\n", "    ", "md", "5", "_", "hash", "_", "dict", " =", " {}", "\n", "    ", "for", " file", " in", " t", "xt", "_", "files", ":", "\n", "        ", "md", "5", "_", "hash", "_", "dict", "[", "file", "]", " =", " {'", "MD", "5", " Hash", "':", " md", "5", "(", "open", "(", "file", ",", " '", "rb", "')", ".", "read", "())", ".", "hex", "dig", "est", "()}", "\n", "    ", "return", " md", "5", "_", "hash", "_", "dict", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.032959461212158, -3.8538827896118164, -1.6816734075546265, -0.3023037612438202, -0.008159990422427654, -1.524216890335083, -0.39686039090156555, -0.020125357434153557, -0.6949520707130432, -0.2875499427318573, -0.0022864409256726503, -1.313483476638794, -0.024353278800845146, -0.19217559695243835, -0.009639857336878777, -0.831121027469635, -2.3386268615722656, -0.10573729127645493, -0.00010847456724150106, -0.019987832754850388, -0.00684073893353343, -0.5131896734237671, -1.5083293914794922, -0.8965057134628296, -0.10630007833242416, -0.14115652441978455, -0.0018850667402148247, -0.0017249004449695349, -0.026526961475610733, -4.625213477993384e-05, -0.00105015910230577, -2.7418097943154862e-06, -0.002224115887656808, -0.004534794948995113, -0.2555948495864868, -0.008947870694100857, -1.1581487655639648, -0.3204883635044098, -1.5606287717819214, -3.221705436706543, -1.1451643705368042, -0.2993723154067993, -2.2100656032562256, -2.080418586730957, -1.5954241752624512, -0.0006688979919999838, -0.041414469480514526, -0.13700376451015472, -0.0033176876604557037, -1.7796719074249268, -0.0290690865367651, -0.2850639820098877, -0.02335049770772457, -1.4803087711334229, -0.009914440102875233, -0.06317497044801712, -0.00555791798979044, -0.018894217908382416, -2.391904354095459, -0.13293816149234772, -0.10117260366678238, -0.004147856030613184, -1.571843147277832, -0.022610366344451904, -0.1057162657380104, -4.51792984677013e-05, -2.3841855067985307e-07, -1.4587897062301636, -0.038151808083057404, -0.026887351647019386, -0.002801305614411831, -0.00023147765023168176, -0.0003164505760651082, -0.011433553881943226, -0.00725409435108304, -9.894321920000948e-06, -3.6954811548639555e-06, -0.0010307481279596686, -0.002854917198419571, -1.2182539701461792, -0.0009970461251214147, -0.3389435112476349, -1.9916026592254639, -0.05734849348664284, -1.0010491609573364, -0.786112368106842, -0.1271156668663025, -1.9038606882095337, -0.00114125432446599, -1.4047633409500122, -0.007053119596093893, -0.17041529715061188, -0.5854042768478394, -0.3412388265132904, -1.6787383556365967, -0.030350681394338608, -2.788233757019043, -0.3241351544857025, -0.10151289403438568, -1.287350058555603, -0.024997834116220474, -0.0050531295128166676, -0.027183111757040024, -0.03481525927782059, -0.10349103063344955, -0.0036396230570971966, -1.2810784578323364, -0.00014375607133843005, -0.00038914260221645236, -0.011453824117779732, -1.3589766240329482e-05, -0.00011443436960689723, -2.7656173188006505e-05, -0.004895011894404888, -0.0032188291661441326, -0.8269727826118469, -0.0007049936102703214, -0.13179758191108704, -1.1004743576049805, -0.35738351941108704, -0.1756386011838913, -0.0003319427778478712, -0.6328212022781372, -0.666914165019989, -0.263864129781723, -0.07391960173845291, -0.2118537873029709, -0.002800592454150319, -1.5180834531784058, -0.003691170597448945, -0.07310983538627625, -1.8421173095703125, -0.7141572833061218, -0.5872108936309814, -0.011129443533718586, -0.4384329319000244, -0.00708247534930706, -0.06216154992580414, -0.01787329837679863, -0.2593633532524109, -0.10428226739168167, -0.02615320309996605, -5.602820692729438e-06, -4.410734163684538e-06, -3.135155202471651e-05, -0.0002315968304174021, -0.0018542492762207985, -0.009067192673683167, -1.2800869941711426, -0.002623094944283366, -0.021037999540567398, -0.038301195949316025, -0.623498797416687, -0.006850328762084246, -0.02293197624385357, -0.10826247185468674, -0.18329039216041565, -0.0004820853646378964, -2.2069623470306396, -1.566765308380127, -0.00023874769976828247, -0.13707901537418365, -0.01770993322134018, -0.2927898168563843, -0.0006416169344447553, -0.06792616099119186, -0.9525361061096191, -0.0011801904765889049, -0.21156786382198334, -0.5268624424934387, -0.39699575304985046, -0.009884695522487164, -0.008467722684144974, -0.000169382052263245, -0.0001287377526750788, -0.03685673698782921, -0.0017695259302854538, -0.017138240858912468, -0.00015293381875380874, -0.033137667924165726, -0.7304307222366333, -0.006125841289758682, -2.4055044651031494, -0.4845641851425171, -0.03916359320282936, -3.6954811548639555e-06, -0.00013207517622504383, -0.00010406429646536708, -2.610649426060263e-05, -3.9934315282152966e-05, -1.681486964225769, -4.0531076592742465e-06, -8.344646857949556e-07, -4.005352093372494e-05, -0.00010072677832795307, -0.07809480279684067], "finish_reason": "stop"}], "metrics": {"energy": 230.86781556797027, "energy_per_token": 1.17789701820393, "time": 8.82597, "time_per_token": 0.04503045918367347}}
{"outputs": [{"text": "info = {}\n    # looping through all files in directory\n    for filename in os.listdir(directory):\n        # if filename is not a directory\n        if os.path.isfile(os.path.join(directory, filename)):\n            # normalize file name to ASCII\n            new_name = os.path.basename(filename)\n            try:\n                new_name = unicodedata.normalize('NFKD', new_name).encode('ascii', 'ignore').decode()\n                # calculate MD5 hash of file\n                md5_hash = md5(open(os.path.join(directory, filename), \"rb\").read()).hexdigest()\n                # add file info to dictionary\n                info[new_name] = {\"size\": os.stat(os.path.join(directory, filename)).st_size,\n                                  \"md5 hash\": md5_hash}\n            except UnicodeDecodeError:\n                # file contains non-ASCII characters\n                continue\n        # if file is a directory\n        elif os.path.isdir(os", "tokens": ["info", " =", " {}", "\n", "    ", "#", " loop", "ing", " through", " all", " files", " in", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "#", " if", " filename", " is", " not", " a", " directory", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", "))", ":", "\n", "            ", "#", " normalize", " file", " name", " to", " ASC", "II", "\n", "            ", "new", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "filename", ")", "\n", "            ", "try", ":", "\n", "                ", "new", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " new", "_", "name", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "()", "\n", "                ", "#", " calculate", " MD", "5", " hash", " of", " file", "\n", "                ", "md", "5", "_", "hash", " =", " md", "5", "(", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", ",", " \"", "rb", "\"", ")", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "#", " add", " file", " info", " to", " dictionary", "\n", "                ", "info", "[", "new", "_", "name", "]", " =", " ", "{\"", "size", "\":", " os", ".", "stat", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", "))", ".", "st", "_", "size", ",", "\n", "                ", "                ", "  ", "\"", "md", "5", " hash", "\":", " md", "5", "_", "hash", "}", "\n", "            ", "except", " Un", "icode", "Dec", "ode", "Error", ":", "\n", "                ", "#", " file", " contains", " non", "-", "ASC", "II", " characters", "\n", "                ", "continue", "\n", "        ", "#", " if", " file", " is", " a", " directory", "\n", "        ", "elif", " os", ".", "path", ".", "is", "dir", "(", "os"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -2.839104175567627, -4.27606201171875, -2.177823543548584, -0.5577853918075562, -0.8999442458152771, -0.393179327249527, -0.6514886021614075, -1.5647549629211426, -0.24149271845817566, -0.005685349460691214, -0.056648433208465576, -1.789078712463379, -0.006049181334674358, -0.33063584566116333, -6.603976362384856e-05, -0.002834114944562316, -1.2040065485052764e-05, -0.0049811312928795815, -0.007996450178325176, -0.0013011569390073419, -0.01101178303360939, -0.054155558347702026, -0.7212023138999939, -2.8770244121551514, -2.522317409515381, -0.4173819124698639, -0.8518597483634949, -0.6083762049674988, -0.3381260633468628, -0.5649994611740112, -0.0008733034483157098, -0.045951977372169495, -0.7096195816993713, -0.0022812075912952423, -0.0002146728802472353, -0.05701907351613045, -0.0017263285117223859, -0.0754825696349144, -0.001973706530407071, -0.2743743062019348, -0.0013518728082999587, -0.00047088501742109656, -0.004875082056969404, -0.001013718661852181, -0.000390215078368783, -0.004131235647946596, -0.0006095697171986103, -0.04079059883952141, -0.0005947966128587723, -0.004745530430227518, -0.004045517649501562, -0.025071196258068085, -0.41036269068717957, -1.7262314558029175, -1.020169734954834, -0.09267035126686096, -0.44539323449134827, -0.34260255098342896, -0.0004086851258762181, -0.1810104250907898, -0.0008126770262606442, -3.633608102798462, -0.08317264169454575, -1.0785415172576904, -0.004145362880080938, -2.8442001342773438, -0.000900101731531322, -0.00345918582752347, -0.010444151237607002, -0.8155093193054199, -9.536738616588991e-07, -0.0004078510100953281, -0.6226562857627869, -0.026268282905220985, -1.221562385559082, -0.03627554327249527, -3.0601656436920166, -0.0009342834819108248, -0.007730212062597275, -0.0019350391812622547, -0.20950381457805634, -0.0008013612823560834, -0.010256323963403702, -0.014620194211602211, -0.16740752756595612, -0.005404741503298283, -1.2040065485052764e-05, -0.00021562635083682835, -4.6967357775429264e-05, -0.0013305629836395383, -4.529942543740617e-06, -0.24080774188041687, -0.047693245112895966, -0.08210176974534988, -7.414542778860778e-05, -0.00029488030122593045, -0.06415360420942307, -0.00012146688823122531, -2.3245540432981215e-05, -0.017913345247507095, -0.01910744607448578, -0.003277765354141593, -0.0555124469101429, -0.13036254048347473, -0.020562920719385147, -6.067568756407127e-05, -0.08299272507429123, -0.002291317330673337, -0.0029403807129710913, -0.07516570389270782, -0.004817426670342684, -0.7926511168479919, -0.0201779305934906, -2.276519775390625, -0.9029315114021301, -1.388048768043518, -0.2076408565044403, -0.0002562671434134245, -0.09196828305721283, -1.31221342086792, -0.25822174549102783, -0.1543837934732437, -0.0024900403805077076, -1.2216136455535889, -0.01790034770965576, -0.13209021091461182, -0.1786944419145584, -0.008601875975728035, -0.20074890553951263, -3.981510963058099e-05, -0.5219487547874451, -0.14501136541366577, -0.0012977044098079205, -0.15458817780017853, -0.00015448330668732524, -0.00028391621890477836, -0.00013350549852475524, -0.0004931663861498237, -0.00023827097902540118, -0.0015147175872698426, -0.00012492353562265635, -0.32463616132736206, -0.18195068836212158, -0.00029309268575161695, -2.479745388031006, -0.0019051750423386693, -0.0030008782632648945, -0.021188098937273026, -0.0022193582262843847, -0.0005872909096069634, -0.0056958990171551704, -0.015110197477042675, -0.013182039372622967, -4.005352093372494e-05, -0.0002681849291548133, -0.0007462101057171822, -0.006147523410618305, -0.20362445712089539, -0.18421830236911774, -1.6119353771209717, -0.665734589099884, -0.7517938613891602, -0.04213281720876694, -0.5574963092803955, -0.0842602327466011, -0.0012752028414979577, -0.028121095150709152, -0.04151099547743797, -0.021942345425486565, -3.397406908334233e-05, -0.00030632095877081156, -0.017200931906700134, -0.0020124914590269327, -1.98113214969635, -0.00022075122979003936, -2.526630401611328, -0.009405114687979221, -0.08502017706632614, -6.437280717364047e-06, -2.606644868850708, -0.0006854568491689861, -0.06074141338467598, -0.00012718822108581662, -6.151010165922344e-05, -1.2993727978027891e-05, -0.0003840185818262398, -8.141662692651153e-05, -0.0012223399244248867, -7.974783511599526e-05, -0.03588999807834625, -0.006357445381581783, -0.005320555530488491, -0.0003782987187150866, -0.0001299296854995191, -7.772143726469949e-05, -0.0048628635704517365, -0.2318894863128662, -0.0003587556129787117, -0.030164243653416634, -0.12227258831262589, -0.019340625032782555, -0.3960582911968231, -0.0005060345865786076, -2.896497964859009, -0.003703760216012597, -0.01332755945622921, -4.172316494077677e-06, -8.165503095369786e-05, -3.4570634852570947e-06, -0.049227576702833176, -0.0007225048611871898, -0.06531700491905212, -0.057033151388168335, -0.7417554259300232, -0.000694153131917119, -0.8841978907585144, -0.0014135378878563643, -0.00016878610767889768, -0.0907011553645134, -0.034266166388988495, -0.0017974901711568236, -1.9907567501068115, -3.868053674697876, -2.38381290435791, -0.26969560980796814, -0.027943167835474014, -0.1444607675075531, -9.357491217087954e-05, -0.06542420387268066, -0.6905941367149353, -0.0014884117990732193, -1.271884799003601, -0.006091955117881298, -2.7328293323516846, -0.9299837350845337, -0.629427969455719, -0.7076155543327332, -0.10977120697498322, -0.33637166023254395, -0.020599590614438057, -0.1842331737279892, -0.006791839841753244, -0.35674697160720825, -0.00922606885433197, -1.1205610462639015e-05, -8.630380034446716e-05, -6.675497570540756e-05, -0.00042358008795417845, -0.0009999042376875877, -0.0006051616510376334, -0.00838663149625063], "finish_reason": "length"}], "metrics": {"energy": 284.8150423259738, "energy_per_token": 1.1125587590858352, "time": 11.755184, "time_per_token": 0.0459186875}}
{"outputs": [{"text": "md5_dict = {}\n    files = os.listdir(directory)\n    for filename in files:\n        try:\n            # Normalize the file name to ASCII\n            file_path = os.path.join(directory, filename)\n            file_path = file_path.encode('ascii', errors='ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                # Calculate MD5 Hash\n                hash_value = md5(file.read()).hexdigest()\n\n                # Retrieve file size\n                size = os.path.getsize(file_path)\n\n                # Create a dictionary to store file info\n                md5_dict[file_path] = {'Size': size, 'MD5 Hash': hash_value}\n        except (OSError, UnicodeDecodeError):\n            continue\n\n    return md5_dict", "tokens": ["md", "5", "_", "dict", " =", " {}", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "#", " Normal", "ize", " the", " file", " name", " to", " ASC", "II", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "            ", "file", "_", "path", " =", " file", "_", "path", ".", "encode", "('", "ascii", "'", ",", " errors", "='", "ignore", "')", ".", "decode", "('", "utf", "-", "8", "')", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "#", " Calculate", " MD", "5", " Hash", "\n", "                ", "hash", "_", "value", " =", " md", "5", "(", "file", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "\n", "                ", "#", " Ret", "rieve", " file", " size", "\n", "                ", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", "_", "path", ")", "\n", "\n", "                ", "#", " Create", " a", " dictionary", " to", " store", " file", " info", "\n", "                ", "md", "5", "_", "dict", "[", "file", "_", "path", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " hash", "_", "value", "}", "\n", "        ", "except", " (", "OS", "Error", ",", " Un", "icode", "Dec", "ode", "Error", "):", "\n", "            ", "continue", "\n", "\n", "    ", "return", " md", "5", "_", "dict", "\n", "\n", "def"], "logprobs": [-4.442995548248291, -0.027823295444250107, -0.3692878186702728, -1.5812242031097412, -0.040500324219465256, -0.1446571946144104, -0.06458864361047745, -0.1576913297176361, -3.077085018157959, -0.347909152507782, -0.9265261292457581, -0.0001817776501411572, -0.02436956763267517, -2.932505594799295e-05, -0.004913517739623785, -0.01204738486558199, -0.00047994061606004834, -0.025047363713383675, -0.19626979529857635, -0.13693764805793762, -2.2951154708862305, -0.0014974582009017467, -0.006881703156977892, -0.0007809926173649728, -0.006474115885794163, -0.018172789365053177, -2.659757614135742, -0.0005783553933724761, -0.005524131003767252, -0.0030209640972316265, -2.849438428878784, -1.0784986019134521, -0.19830061495304108, -0.597960889339447, -0.5051900744438171, -0.0671306923031807, -0.21793918311595917, -0.06835655122995377, -6.210611172718927e-05, -0.7609249949455261, -0.00036161558819003403, -2.1664505004882812, -0.2457382082939148, -1.5355852842330933, -0.011031119152903557, -1.0067846775054932, -0.0028024944476783276, -0.005194381810724735, -0.07392547279596329, -0.010634655132889748, -0.0010840974282473326, -0.0067580947652459145, -0.00045849301386624575, -0.02364520914852619, -0.0077477190643548965, -0.008558263070881367, -0.005766660440713167, -1.704439640045166, -0.07208570092916489, -0.988839864730835, -0.3986831605434418, -2.869166135787964, -0.012779836542904377, -0.0199187733232975, -0.0042384322732687, -0.05530526489019394, -0.2523840069770813, -0.20704326033592224, -0.1676073521375656, -0.0006484074983745813, -1.9335496425628662, -0.012857630848884583, -0.2227909117937088, -0.0014966250164434314, -0.20440718531608582, -0.0028275768272578716, -1.2466068267822266, -0.769195020198822, -0.08627363294363022, -0.0017774987500160933, -0.070331871509552, -0.01455604936927557, -0.319545179605484, -2.2825708389282227, -0.01507156528532505, -0.0008579387213103473, -0.006793971173465252, -0.0005981324939057231, -3.421248038648628e-05, -0.015171489678323269, -0.10344051569700241, -0.22307783365249634, -0.006332214456051588, -0.0013253247598186135, -0.8798096179962158, -0.03758169710636139, -0.00537296524271369, -0.006325936410576105, -1.4789745807647705, -0.3353213667869568, -1.8659448623657227, -9.727005090098828e-05, -3.116974115371704, -0.24014723300933838, -0.0006348263123072684, -1.6338698863983154, -0.12323693186044693, -0.9120138883590698, -0.0061414809897542, -0.11824387311935425, -2.5987286790041253e-05, -0.08363643288612366, -0.0025698277167975903, -0.001616839086636901, -0.00014745102089364082, -0.005772349424660206, -0.040490709245204926, -0.04755412042140961, -4.076874756719917e-05, -0.0002431573811918497, -0.00037377048283815384, -0.009070854634046555, -2.2328829765319824, -0.3953474164009094, -0.1933158040046692, -1.638451099395752, -0.037175752222537994, -0.8303661942481995, -0.4777866303920746, -0.17323023080825806, -0.0009732277248986065, -0.6799957156181335, -0.09257766604423523, -0.14744743704795837, -9.738924563862383e-05, -0.17435307800769806, -0.004227986093610525, -0.00024434918304905295, -2.109982233378105e-05, -0.0013709203340113163, -0.008952360600233078, -0.03920256718993187, -2.5033637939486653e-05, -0.0015649464912712574, -0.007306047715246677, -0.48398128151893616, -0.13688567280769348, -0.2845434546470642, -1.6565115451812744, -0.3584848642349243, -0.4979412257671356, -2.1751320362091064, -0.20883139967918396, -1.4657841920852661, -1.087726354598999, -0.0727444440126419, -0.0014577010879293084, -1.0541296005249023, -0.00021884430316276848, -0.001149589428678155, -0.013127095997333527, -0.051999639719724655, -0.47020992636680603, -0.013546211645007133, -0.0009954979177564383, -0.17414367198944092, -0.0006602014764212072, -0.28809553384780884, -0.2900641858577728, -0.020313791930675507, -0.03279775381088257, -0.002258133376017213, -0.050344761461019516, -0.015416385605931282, -0.00013016807497479022, -0.06702523678541183, -0.003912533633410931, -0.013808554969727993, -0.0005957497633062303, -6.437280717364047e-06, -0.012431985698640347, -0.0006008726777508855, -0.38426682353019714, -0.005390039179474115, -1.979227900505066, -1.7373392581939697, -0.000720956246368587, -0.024513818323612213, -0.5180404782295227, -0.002096837153658271, -0.9120903015136719, -0.013607599772512913, -9.131014667218551e-05, -0.6938970685005188, -0.02415652759373188, -0.004056321922689676, -0.9893977046012878, -0.03349130228161812, -1.0508216619491577, -0.014382976107299328, -0.025609789416193962, -0.011230116710066795, -5.960462772236497e-07, -4.291525328881107e-06, -8.940656698541716e-06, -0.11117666959762573, -0.009000799618661404, -0.3091212809085846], "finish_reason": "stop"}], "metrics": {"energy": 252.61026635551445, "energy_per_token": 1.2144724344015119, "time": 9.034685, "time_per_token": 0.043435985576923075}}
{"outputs": [{"text": "hash_info = {}\n    for root, dirs, files in os.walk(directory):\n        for f in files:\n            if not f.lower().endswith('.zip'):\n                # Get the absolute path of the file\n                full_path = os.path.join(root, f)\n                # Normalize the filename\n                normalized_filename = unicodedata.normalize('NFKD', f).encode('ascii', 'ignore').decode()\n                # Get the size of the file\n                size = pathlib.Path(full_path).stat().st_size\n                # Get the MD5 hash of the file\n                hash_value = hashlib.md5(full_path.encode()).hexdigest()\n                # Create a new dictionary with the file info\n                hash_info[normalized_filename] = {'Size': size, 'MD5 Hash': hash_value}\n    return hash_info", "tokens": ["hash", "_", "info", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " f", " in", " files", ":", "\n", "            ", "if", " not", " f", ".", "lower", "()", ".", "end", "sw", "ith", "('", ".", "zip", "')", ":", "\n", "                ", "#", " Get", " the", " absolute", " path", " of", " the", " file", "\n", "                ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " f", ")", "\n", "                ", "#", " Normal", "ize", " the", " filename", "\n", "                ", "normalized", "_", "filename", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " f", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "()", "\n", "                ", "#", " Get", " the", " size", " of", " the", " file", "\n", "                ", "size", " =", " path", "lib", ".", "Path", "(", "full", "_", "path", ")", ".", "stat", "()", ".", "st", "_", "size", "\n", "                ", "#", " Get", " the", " MD", "5", " hash", " of", " the", " file", "\n", "                ", "hash", "_", "value", " =", " hash", "lib", ".", "md", "5", "(", "full", "_", "path", ".", "encode", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "#", " Create", " a", " new", " dictionary", " with", " the", " file", " info", "\n", "                ", "hash", "_", "info", "[", "normalized", "_", "filename", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " hash", "_", "value", "}", "\n", "    ", "return", " hash", "_", "info", "\n", "\n", "if"], "logprobs": [-4.0608296394348145, -0.2008831948041916, -1.5478315353393555, -0.08318481594324112, -0.18590377271175385, -0.05104460567235947, -0.18936721980571747, -0.44172531366348267, -1.9933996200561523, -0.002465425059199333, -0.32554879784584045, -0.0016820580931380391, -0.0004637358069885522, -0.02114900015294552, -0.00134080124553293, -0.009867343120276928, -1.8358061424805783e-05, -0.00012289722508285195, -0.0028879623860120773, -0.016587678343057632, -0.09775349497795105, -0.04105790704488754, -0.009321619756519794, -0.12864404916763306, -2.142190456390381, -0.29002806544303894, -0.0029950544703751802, -0.0005351065192371607, -0.005200311541557312, -0.00808490440249443, -3.025634288787842, -1.609382152557373, -0.46981921792030334, -0.04518168047070503, -1.346810221672058, -0.00146793806925416, -0.06471201032400131, -0.06549644470214844, -0.00012492353562265635, -1.1920928244535389e-07, -0.3108740448951721, -0.043988440185785294, -3.7025880813598633, -0.002262296387925744, -0.12755249440670013, -0.04714708775281906, -0.008622322231531143, -3.0969855785369873, -3.0513925552368164, -0.5780004858970642, -1.8047187328338623, -0.11950939148664474, -0.43204066157341003, -0.04743145778775215, -0.2976970374584198, -0.32149142026901245, -0.0006177900941111147, -2.364525556564331, -0.07051163911819458, -0.03935879096388817, -0.005586487706750631, -0.22151172161102295, -5.149708886165172e-05, -8.49926145747304e-05, -0.008148521184921265, -0.04702380672097206, -0.00011884459672728553, -0.01587877795100212, -0.0007471630233339965, -0.004989553242921829, -0.0003034608089365065, -0.006766383070498705, -0.623765230178833, -0.3483189642429352, -1.0912654399871826, -0.018201233819127083, -0.09239866584539413, -1.482132911682129, -1.434070348739624, -0.0006587718962691724, -1.4005212783813477, -0.04595641791820526, -1.0259788036346436, -0.0017730958061292768, -0.4802078604698181, -0.0027218933682888746, -1.9907753085135482e-05, -0.00048828122089616954, -0.00015424491721205413, -0.00021360022947192192, -5.8530047681415454e-05, -0.11652763932943344, -0.0371202751994133, -0.18313834071159363, -8.177422569133341e-05, -0.00021979777375236154, -0.2619818449020386, -0.08275263756513596, -0.01617124304175377, -0.04190443828701973, -0.07455280423164368, -0.16260306537151337, -0.0036390291061252356, -0.0005577438860200346, -0.08810585737228394, -0.002744481433182955, -0.00271071819588542, -0.1397121697664261, -0.010297030210494995, -0.6335129737854004, -0.0867096558213234, -0.06803964823484421, -0.4763246774673462, -1.041925311088562, -0.03716001659631729, -1.3788257837295532, -0.1368420124053955, -0.0019751342479139566, -0.0013668728061020374, -0.1378711313009262, -0.0006548406090587378, -0.3732210397720337, -0.04822888225317001, -2.841996669769287, -3.659658250398934e-05, -4.2914423829643056e-05, -0.019938403740525246, -0.002114919014275074, -0.011616799980401993, -0.00013684290752280504, -1.0728830375228426e-06, -0.0004365683125797659, -0.00010549465514486656, -0.006204154342412949, -0.0007325111655518413, -5.090107151772827e-05, -0.00030596344731748104, -0.0008762810612097383, -3.0278701160568744e-05, -0.02209802344441414, -0.031295523047447205, -0.05068953335285187, -0.6584354639053345, -0.017387576401233673, -0.1445332020521164, -0.00023362292267847806, -0.0173965971916914, -0.03863145038485527, -0.0007063039811328053, -0.0022027057129889727, -0.031879618763923645, -0.0007495454628951848, -1.496340036392212, -0.13377757370471954, -0.732864499092102, -0.0026058547664433718, -2.635768413543701, -0.003036889713257551, -5.328513361746445e-05, -0.00022802136663813144, -4.410734163684538e-06, -0.1603802889585495, -1.9462343454360962, -0.00021991695393808186, -2.4914430468925275e-05, -0.5045387148857117, -0.023204565048217773, -0.36924824118614197, -0.01826982945203781, -0.016720863059163094, -3.528532761265524e-05, -0.0007045170641504228, -0.0009482178138568997, -0.010598208755254745, -0.050563402473926544, -0.21391858160495758, -1.5689409971237183, -0.12802374362945557, -1.4604824781417847, -0.19904521107673645, -0.6415302157402039, -0.14015202224254608, -0.6354379057884216, -2.4680752754211426, -0.1779225468635559, -0.0006712805479764938, -0.7387415766716003, -0.0026821850333362818, -0.028969962149858475, -0.02353471703827381, -0.007492536213248968, -7.271740287251305e-06, -3.540453326422721e-05, -0.01167807076126337, -0.0007535954937338829, -0.18230928480625153, -0.20029237866401672, -0.019135281443595886, -0.02256164886057377, -0.0017927302978932858, -0.02254125289618969, -0.017786642536520958, -9.452849917579442e-05, -0.06877373903989792, -0.0016567088896408677, -0.006141599267721176, -0.0006705658161081374, -3.6000557884108275e-05, -0.007976582273840904, -0.0005152089870534837, -0.26333028078079224, -0.036003850400447845, -0.004513552878051996, -2.9682672902708873e-05, -1.2159273865108844e-05, -0.39758917689323425, -0.02129313349723816, -1.6469874382019043], "finish_reason": "stop"}], "metrics": {"energy": 237.55564575862874, "energy_per_token": 1.08970479705793, "time": 9.670561, "time_per_token": 0.04436037155963302}}
{"outputs": [{"text": "info = {}\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            norm_file = unicodedata.normalize('NFKD', file).encode('ascii', 'ignore').decode()\n            norm_file_path = os.path.join(directory, norm_file)\n            info[norm_file_path] = {\n                'Size': os.path.getsize(norm_file_path),\n                'MD5 Hash': md5(open(norm_file_path, 'rb').read()).hexdigest()\n            }\n    return info", "tokens": ["info", " =", " {}", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "norm", "_", "file", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "()", "\n", "            ", "norm", "_", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " norm", "_", "file", ")", "\n", "            ", "info", "[", "norm", "_", "file", "_", "path", "]", " =", " {", "\n", "                ", "'", "Size", "':", " os", ".", "path", ".", "get", "size", "(", "norm", "_", "file", "_", "path", ")", ",", "\n", "                ", "'", "MD", "5", " Hash", "':", " md", "5", "(", "open", "(", "norm", "_", "file", "_", "path", ",", " '", "rb", "')", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "}", "\n", "    ", "return", " info", "\n", "\n", "def"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -0.48014694452285767, -1.1743836402893066, -0.3793596625328064, -1.1323786973953247, -0.00020037073409184813, -0.02635142020881176, -1.1205610462639015e-05, -0.004273093305528164, -0.008247957564890385, -0.0016285026213154197, -0.029831066727638245, -0.010004495270550251, -1.3615049123764038, -0.27477705478668213, -0.13392825424671173, -0.0022818022407591343, -0.6095225214958191, -0.0014523444697260857, -0.0002889215829782188, -0.014158512465655804, -0.003265170380473137, -0.00048792376765049994, -0.0019687095191329718, -0.00035398892941884696, -0.009184256196022034, -0.0006820021662861109, -0.005819757468998432, -0.05160528048872948, -0.3080019950866699, -0.12139252573251724, -0.0006749735912308097, -0.0003890234511345625, -0.005306207574903965, -0.0006644901586696506, -0.047824058681726456, -9.858122211880982e-05, -0.0008075552177615464, -0.0018649582052603364, -1.311301275563892e-06, -0.09152748435735703, -0.017571140080690384, -0.0068848999217152596, -3.761579990386963, -0.057693447917699814, -0.44965606927871704, -0.7471457123756409, -0.8664156198501587, -0.002981980564072728, -6.079655122448457e-06, -0.00022587609419133514, -6.735097849741578e-05, -0.0001445904199499637, -6.41325386823155e-05, -0.18894681334495544, -0.0942787230014801, -0.1589980125427246, -6.09140915912576e-05, -0.00011550712952157483, -0.030128616839647293, -0.019990287721157074, -0.07785243541002274, -0.015213875100016594, -0.05690421536564827, -0.2854139506816864, -0.004016072954982519, -3.93382906622719e-05, -0.09124144911766052, -0.0036200247704982758, -0.0013649680186063051, -0.16954413056373596, -0.012644359841942787, -0.7721526026725769, -0.0444764643907547, -0.01794975996017456, -1.995328664779663, -0.003493992844596505, -0.16897054016590118, -2.105072498321533, -0.24314668774604797, -0.0009142747730948031, -0.10601191222667694, -0.00011693747364915907, -0.00010656742961145937, -0.00222756527364254, -0.010729363188147545, -0.00105015910230577, -0.002019391627982259, -0.00022909401741344482, -0.009495924226939678, -1.1920928244535389e-07, -3.4570634852570947e-06, -0.002184744458645582, -0.002692409558221698, -0.05946686491370201, -1.5877881050109863, -0.05233343318104744, -0.07129209488630295, -5.209310256759636e-05, -0.0007900454220362008, -1.36814284324646, -5.4596363042946905e-05, -0.008058298379182816, -0.0013944911770522594, -1.485175609588623, -0.015998918563127518, -0.008229630999267101, -0.1550769805908203, -0.15868285298347473, -0.022400913760066032, -0.03763209655880928, -0.0004372832481749356, -0.12470737099647522, -0.0015149556566029787, -0.00014041867689229548, -8.821448318485636e-06, -0.00016640232934150845, -1.7236437797546387, -2.276871418871451e-05, -0.0002315968304174021, -0.01958029344677925, -2.0265558760002023e-06, -0.0022272085770964622, -0.005196161102503538, -0.012974957004189491, -0.0017301365733146667, -0.0053481836803257465, -0.015817176550626755, -0.00027223696815781295, -0.0634157732129097, -0.00298542738892138, -0.11721999943256378, -6.890059739816934e-05, -0.02763603813946247, -0.08448998630046844, -0.00025018901214934886, -0.05634728819131851, -2.3841574147809297e-05, -2.145764938177308e-06, -0.003987576812505722, 0.0, -0.007894741371273994, -0.07347830384969711, -0.001591607229784131, -0.05403641611337662, -0.0021115881390869617, -0.00016115797916427255, -0.008434861898422241, -0.0033974091056734324, -0.016567861661314964, -2.2053474822314456e-05, -0.00011622230522334576, -0.0182375218719244, -0.28677770495414734, -0.027619455009698868, -0.0003014348621945828, -0.0007639588438905776, -0.15806594491004944, -0.00897232722491026, -0.0027060816064476967, -0.17486844956874847, -0.012393956072628498, -0.6748904585838318], "finish_reason": "stop"}], "metrics": {"energy": 223.09465468025212, "energy_per_token": 1.3358961358098929, "time": 7.3696327, "time_per_token": 0.044129537125748505}}
{"outputs": [{"text": "# Create a pathlib Path object for the specified directory\n    directory_path = pathlib.Path(directory)\n\n    # Create a dictionary to store the file info\n    file_info = {}\n\n    # Iterate over the files in the specified directory\n    for file_path in directory_path.iterdir():\n        # Get the file name without the extension\n        file_name = file_path.name.rsplit('.', 1)[0]\n        # Normalize the file name to ASCII and remove diacritical marks\n        ascii_name = unicodedata.normalize('NFD', file_name.encode('ascii', 'ignore')).decode('ascii')\n        # Calculate the MD5 hash for the file\n        md5_hash = md5(file_path.read_bytes()).hexdigest()\n        # Calculate the size of the file\n        file_size = file_path.stat().st_size\n\n        # Add the file info to the dictionary\n        file_info[ascii_name] = {'Size': file_size, 'MD5 Hash': md5_hash}\n\n    ", "tokens": ["#", " Create", " a", " path", "lib", " Path", " object", " for", " the", " specified", " directory", "\n", "    ", "directory", "_", "path", " =", " path", "lib", ".", "Path", "(", "directory", ")", "\n", "\n", "    ", "#", " Create", " a", " dictionary", " to", " store", " the", " file", " info", "\n", "    ", "file", "_", "info", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " specified", " directory", "\n", "    ", "for", " file", "_", "path", " in", " directory", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "#", " Get", " the", " file", " name", " without", " the", " extension", "\n", "        ", "file", "_", "name", " =", " file", "_", "path", ".", "name", ".", "r", "split", "('", ".", "'", ",", " ", "1", ")[", "0", "]", "\n", "        ", "#", " Normal", "ize", " the", " file", " name", " to", " ASC", "II", " and", " remove", " di", "ac", "ritical", " marks", "\n", "        ", "ascii", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "D", "'", ",", " file", "_", "name", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "'))", ".", "decode", "('", "ascii", "')", "\n", "        ", "#", " Calculate", " the", " MD", "5", " hash", " for", " the", " file", "\n", "        ", "md", "5", "_", "hash", " =", " md", "5", "(", "file", "_", "path", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "        ", "#", " Calculate", " the", " size", " of", " the", " file", "\n", "        ", "file", "_", "size", " =", " file", "_", "path", ".", "stat", "()", ".", "st", "_", "size", "\n", "\n", "        ", "#", " Add", " the", " file", " info", " to", " the", " dictionary", "\n", "        ", "file", "_", "info", "[", "ascii", "_", "name", "]", " =", " {'", "Size", "':", " file", "_", "size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "\n", "    "], "logprobs": [-2.032959461212158, -2.1917037963867188, -0.29302552342414856, -2.508601665496826, -0.3307071030139923, -1.8348749876022339, -0.17159202694892883, -0.8831174373626709, -0.015219275839626789, -1.464221477508545, -0.012308119796216488, -0.3309735953807831, -0.0009347598534077406, -0.4339755177497864, -0.29971423745155334, -0.010366522707045078, -0.006909643299877644, -0.03621024265885353, -5.364403477869928e-06, -4.2437604861333966e-05, -0.0016399280866608024, -0.002720704535022378, -0.003804233390837908, -0.0009776342194527388, -0.03931695595383644, -0.1667376607656479, -0.000645429186988622, -0.060677915811538696, -1.1664727926254272, -0.563856303691864, -0.2868667244911194, -0.0750541239976883, -0.14716945588588715, -0.35073524713516235, -1.046201229095459, -1.155606985092163, -0.28095191717147827, -0.0004182179400231689, -0.3605867028236389, -0.006844764109700918, -0.020953601226210594, -0.13039781153202057, -0.10231225937604904, -0.0020833946764469147, -0.015446319244801998, -0.0002636561985127628, -0.05366251617670059, -0.6698882579803467, -0.0013150862650945783, -0.39017030596733093, -1.5727906227111816, -0.14209766685962677, -0.1276705414056778, -0.005267550237476826, -1.8564690351486206, -0.0023279490415006876, -0.09646142274141312, -0.00041607304592616856, -0.014501769095659256, -0.275383859872818, -0.5669916272163391, -0.3118729293346405, -0.0010995777556672692, -0.028553670272231102, -5.972207145532593e-05, -5.722029527532868e-06, -1.1444026313256472e-05, -0.27681684494018555, -0.00026544384309090674, -0.00018082413589581847, -0.0035707305651158094, -0.045993078500032425, -0.20559079945087433, -2.301506519317627, -0.05740894004702568, -1.1069722175598145, -0.3574388921260834, -1.2402667999267578, -0.5201120972633362, -0.2445879429578781, -0.18657496571540833, -0.00037674958002753556, -0.6404598951339722, -0.002422971185296774, -0.026600675657391548, -0.1117251068353653, -0.5021503567695618, -0.00025293012731708586, -0.000346362212439999, -6.103329360485077e-05, -0.7831214070320129, -0.0861513689160347, -0.891622006893158, -0.20761053264141083, -0.18679048120975494, -0.0003091811086051166, -0.06925193220376968, -0.00012218205665703863, -0.17127878963947296, -0.00200297380797565, -0.0010481346398591995, -0.0009552444680593908, -0.00015507926582358778, -0.029144927859306335, -1.39419424533844, -0.07470990717411041, -0.6704984307289124, -0.002213886706158519, -0.0472269169986248, -0.035804543644189835, -0.005613397341221571, -0.1455758810043335, -0.05226261168718338, -5.3165931603871286e-05, -2.012084484100342, -1.2460256814956665, -1.6217082738876343, -0.0004648081958293915, -0.3138878047466278, -0.08439555019140244, -0.13074493408203125, -0.0005052005290053785, -1.1027182340621948, -0.0005435658385977149, -0.8165246248245239, -0.0012197205796837807, -0.07426364719867706, -0.0009922825265675783, -5.960446742392378e-06, -0.0004731489170808345, -1.2040065485052764e-05, -0.0004634975048247725, -2.098061486321967e-05, -0.0737873986363411, -0.005292096640914679, -2.4927773475646973, -0.001096005435101688, -0.00023922442051116377, -0.013822310604155064, -1.2397689715726301e-05, -0.010777008719742298, -2.784109592437744, -0.5534042716026306, -0.06443362683057785, -0.11266802996397018, -0.013385550118982792, -0.0003069168305955827, -0.1407545953989029, -0.07345283031463623, -0.014915728010237217, -0.016726724803447723, -0.004503465257585049, -0.14277833700180054, -0.1373644918203354, -0.0013323486782610416, -0.010986433364450932, -0.7243985533714294, -0.061980947852134705, -1.0082205533981323, -0.05865553393959999, -0.22937287390232086, -3.790783375734463e-05, -0.014008176513016224, -2.2783069610595703, -0.009843145497143269, -0.05320879817008972, -0.13736678659915924, -0.0003492222458589822, -0.6998368501663208, -0.002083870582282543, -0.025362495332956314, -0.03214181587100029, -0.006250950042158365, -0.110739566385746, -0.00012396997772157192, -0.25740641355514526, -0.14308834075927734, -1.9192511899746023e-05, -0.0001358893496217206, -0.001388062839396298, -0.028928618878126144, -2.312633478140924e-05, -0.001022888463921845, -0.002853728597983718, -0.0030607779044657946, -0.02670525759458542, -2.9444261599564925e-05, -0.0005402297829277813, -9.703165414975956e-05, -0.006947171874344349, -0.06496372818946838, -0.004811020102351904, -1.7592508792877197, -0.026826193556189537, -1.088523268699646, -0.04742316156625748, -0.0005393957253545523, -0.0005015069036744535, -0.27328211069107056, -0.00028081765049137175, -0.8947839140892029, -3.2543604902457446e-05, -0.04911919683218002, -0.010478125885128975, -0.3315621316432953, -0.0002256377338198945, -0.00010871296399272978, -2.9802276912960224e-06, -0.0037187249399721622, -0.0012996093137189746, -1.7523612768854946e-05, -0.00011944057769142091, -0.00018142008048016578, -3.516612196108326e-05, -0.010408168658614159, -1.400227427482605, -0.0008055302896536887, -0.021742550656199455, -0.732526957988739, -0.049249932169914246, -0.18696552515029907, -0.15324921905994415, -0.014169913716614246, -0.0040070489048957825, -0.10666787624359131, -0.14591209590435028, -0.00017355366435367614, -0.008518903516232967, -0.00018785618885885924, -0.00037865620106458664, -0.007921706885099411, -0.0033528562635183334, -7.510157047363464e-06, -0.00012575789878610522, -0.005085746292024851, -0.00017128908075392246, -0.17269185185432434, -0.18616308271884918, -0.011393128894269466, -0.006689534988254309, -9.536697689327411e-06, -0.002359108766540885, -0.0004804172203876078, -0.010720400139689445, -0.0023636280093342066, -4.4225667807040736e-05, -0.04307127743959427, -0.0008843801915645599, -0.004228104837238789, -1.6689286894688848e-06, -3.4927710657939315e-05, -3.099436753473128e-06, -0.003423902206122875, -0.000382707774406299, -0.017053278163075447, -0.0036706230603158474], "finish_reason": "length"}], "metrics": {"energy": 282.56552248001105, "energy_per_token": 1.1037715721875432, "time": 11.1515875, "time_per_token": 0.043560888671875}}
{"outputs": [{"text": "try:\n        result = {}\n        for file_path in pathlib.Path(directory).rglob('*.*'):\n            if file_path.is_file():\n                file_name = os.path.basename(file_path)\n                ascii_file_name = unicodedata.normalize('NFKD', file_name).encode('ASCII','ignore').decode()\n                result[ascii_file_name] = {'Size':file_path.stat().st_size,\n                                            'MD5 Hash':md5(file_path.read_bytes()).hexdigest()}\n        return result\n    except:\n        print(\"ERROR: \", sys.exc_info()[1])", "tokens": ["try", ":", "\n", "        ", "result", " =", " {}", "\n", "        ", "for", " file", "_", "path", " in", " path", "lib", ".", "Path", "(", "directory", ")", ".", "rg", "lob", "('", "*", ".", "*", "')", ":", "\n", "            ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "                ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "                ", "ascii", "_", "file", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ")", ".", "encode", "('", "ASC", "II", "'", ",", "'", "ignore", "')", ".", "decode", "()", "\n", "                ", "result", "[", "ascii", "_", "file", "_", "name", "]", " =", " {'", "Size", "':", "file", "_", "path", ".", "stat", "()", ".", "st", "_", "size", ",", "\n", "                ", "                ", "            ", "'", "MD", "5", " Hash", "':", "md", "5", "(", "file", "_", "path", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()}", "\n", "        ", "return", " result", "\n", "    ", "except", ":", "\n", "        ", "print", "(", "\"", "ERROR", ":", " \"", ",", " sys", ".", "exc", "_", "info", "()[", "1", "])", "<", "|", "end", "of", "text", "|>"], "logprobs": [-4.003035068511963, -0.001334729720838368, -0.008234242908656597, -0.02019510418176651, -2.5441484451293945, -0.06841889768838882, -0.25596776604652405, -0.027854597195982933, -0.14052385091781616, -0.5552111864089966, -1.2263349294662476, -1.1138750314712524, -1.0371644496917725, -0.028187042102217674, -0.309076189994812, -0.0002029928145930171, -0.0001551984460093081, -0.007553705479949713, -0.004271550104022026, -0.004766174592077732, -0.0005974177038297057, -4.1960789531003684e-05, -0.7215684056282043, -0.014285205863416195, -0.3549380302429199, -0.10850463807582855, -1.961504340171814, -0.15129555761814117, -0.0026303476188331842, -0.0009993088897317648, -0.09502774477005005, -0.02003784477710724, -1.3172857761383057, -0.5198311805725098, -0.0006328010931611061, -0.0005467826849780977, -0.005782424006611109, -0.17140322923660278, -2.0503786799963564e-05, -0.024435877799987793, -0.07279466092586517, -0.030723916366696358, -0.013076855801045895, -1.41849684715271, -0.05184130370616913, -0.3603590130805969, -0.04818287491798401, -1.6551430225372314, -0.0003331344632897526, -0.036057550460100174, -0.024373522028326988, -0.36714085936546326, -2.3841855067985307e-07, -7.64102369430475e-05, -0.03288092464208603, -6.532455881824717e-05, -0.0002787916746456176, -0.32432618737220764, -0.133063405752182, -0.022171713411808014, -2.1039586067199707, -0.0012330556055530906, -0.7338114380836487, -0.01189413946121931, -0.006938292644917965, -0.009268117137253284, -0.4479387104511261, -0.004931192379444838, -3.969590397900902e-05, -0.0006781900301575661, -0.00012087091454304755, -0.0011363723315298557, -9.643566590966657e-05, -0.11016155034303665, -0.09430757910013199, -0.13105209171772003, -0.00011252723925281316, -0.0003466005437076092, -0.01370955165475607, -3.564294092939235e-05, -0.0035086043644696474, -0.016633519902825356, -0.007128519471734762, -0.00644817715510726, -0.09513473510742188, -1.324953317642212, -6.329813186312094e-05, -0.001378896413370967, -0.0001716466504149139, -2.7125473022460938, -0.006517463829368353, -0.0021977098658680916, -0.1027694121003151, -0.004769021645188332, -0.4946272373199463, -0.04320646449923515, -0.04801950231194496, -1.4181740283966064, -0.03391960263252258, -0.012639886699616909, -6.794906312279636e-06, -2.539125671319198e-05, -1.597391747054644e-05, -1.07287787614041e-05, -0.012070116586983204, -0.0026102541014552116, -0.5718505382537842, -0.1818971186876297, -0.02998633123934269, -2.855975389480591, -0.0010102650849148631, -0.00012170527770649642, -3.242440288886428e-05, -0.005209324415773153, -0.00221519498154521, -0.00011634149996098131, -0.0002162222663173452, -0.0012182918144389987, -0.0001419681793777272, -0.01849091425538063, -1.2168474197387695, -0.002095290692523122, -0.10359840840101242, -2.0768346786499023, -0.004815646912902594, -0.03365626186132431, -0.0002619877050165087, -0.1199469119310379, -0.00603069644421339, -0.16957511007785797, -6.592056161025539e-05, -0.021030060946941376, -0.05417373776435852, -5.590759246842936e-05, -0.0001720042055239901, -0.005408535711467266, -0.037299104034900665, -0.008140716701745987, -0.001210195361636579, -0.014503765851259232, -0.0002610342635307461, -0.024558832868933678, -2.777537883957848e-05, -0.001046348363161087, -0.08141037076711655, -0.0007269124034792185, -0.4030361771583557, -0.02257983200252056, -0.009071681648492813, -0.0019687095191329718, -0.08610280603170395, -0.003956230357289314, -1.7220823764801025, -0.020335402339696884, -0.004334460012614727, -1.47799551486969, -0.8290150761604309, -0.2764289379119873, -3.4347009658813477, -1.0558104515075684, -3.4548683166503906, -0.34396007657051086, -0.7729259133338928, -0.0002602000313345343, -0.003147649811580777, -0.0005414212355390191, -0.01718991808593273, -0.11313272267580032, -0.4320371150970459, -0.024339783936738968, -2.622068166732788, -1.0371154530730564e-05, -4.768370445162873e-07, -6.568216485902667e-05, -4.446407547220588e-05, -0.06961504369974136], "finish_reason": "stop"}], "metrics": {"energy": 224.43069537544253, "energy_per_token": 1.2751744055422871, "time": 7.788968, "time_per_token": 0.044255499999999996}}
{"outputs": [{"text": "result = {}\n    for file in pathlib.Path(directory).glob('*'):\n        with open(file, 'rb') as f:\n            try:\n                file_hash = md5(f.read()).hexdigest()\n            except UnicodeDecodeError:\n                file_hash = unicodedata.normalize(\"NFKD\", file.name.encode(\"UTF-8\", errors=\"ignore\")).decode(\"ASCII\")\n            finally:\n                result[file_hash] = {\n                    \"Size\": os.path.getsize(str(file)),\n                    \"MD5 Hash\": file_hash\n                }\n\n    return result", "tokens": ["result", " =", " {}", "\n", "    ", "for", " file", " in", " path", "lib", ".", "Path", "(", "directory", ")", ".", "glob", "('", "*", "')", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "try", ":", "\n", "                ", "file", "_", "hash", " =", " md", "5", "(", "f", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "except", " Un", "icode", "Dec", "ode", "Error", ":", "\n", "                ", "file", "_", "hash", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "(", "\"", "NF", "KD", "\"", ",", " file", ".", "name", ".", "encode", "(", "\"", "UTF", "-", "8", "\"", ",", " errors", "=", "\"", "ignore", "\"", "))", ".", "decode", "(", "\"", "ASC", "II", "\"", ")", "\n", "            ", "f", "inally", ":", "\n", "                ", "result", "[", "file", "_", "hash", "]", " =", " {", "\n", "                ", "    ", "\"", "Size", "\":", " os", ".", "path", ".", "get", "size", "(", "str", "(", "file", "))", ",", "\n", "                ", "    ", "\"", "MD", "5", " Hash", "\":", " file", "_", "hash", "\n", "                ", "}", "\n", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.038940906524658, -0.07545194774866104, -0.23680061101913452, -0.02210431918501854, -0.24454276263713837, -0.5660614371299744, -1.2594072818756104, -0.4902403950691223, -0.7004585266113281, -8.248942322097719e-05, -9.798523387871683e-05, -0.008281770162284374, -0.0048837424255907536, -0.005887310486286879, -0.0005656072753481567, -9.941560711013153e-05, -1.9962174892425537, -0.23053328692913055, -0.3530556857585907, -0.1023791953921318, -0.0013043713988736272, -0.02179993875324726, -0.025320304557681084, -3.4616539478302, -0.2470196783542633, -0.0033175689168274403, -0.07781383395195007, -0.07375949621200562, -0.24577447772026062, -0.2437543123960495, -0.02502910979092121, -0.0018862566212192178, -0.3136204779148102, -0.09198012948036194, -0.013291328214108944, -0.00566709553822875, -4.543978214263916, -0.0005666795768775046, -0.0068497369065880775, -0.002083513652905822, -2.2075729370117188, -0.10194091498851776, -1.8820011615753174, -0.01956007070839405, -0.07802324742078781, -2.6940935640595853e-05, -0.08651987463235855, -0.010614368133246899, -0.0034755796659737825, -0.00042143522296100855, -0.008445500396192074, -0.04931109771132469, -0.0339680016040802, -4.994744449504651e-05, -0.011525358073413372, -0.0006385194719769061, -0.016904667019844055, -0.3937101364135742, -0.006422948557883501, -0.5830430388450623, -0.0015736351488158107, -0.2971978783607483, -0.049124643206596375, -0.00012778419477399439, -0.08396926522254944, -0.02460477687418461, -0.0012262690579518676, -0.5495056509971619, -0.03249741718173027, -0.10823594033718109, -0.0025100174825638533, -0.8514396548271179, -0.006174062378704548, -4.875540980719961e-05, -0.00036840804386883974, -8.95221673999913e-05, -0.00047803416964598, -0.0001280225842492655, -2.1293582916259766, -0.2538190186023712, -0.01365687232464552, -0.10383064299821854, -5.304672595229931e-05, -0.003392062848433852, -0.5175925493240356, -0.03260323032736778, -0.12390844523906708, -2.746452808380127, -0.21160279214382172, -1.1782729625701904, -0.08109306544065475, -3.5743114948272705, -0.04866601899266243, -0.0050146994180977345, -6.615896563744172e-05, -2.308685541152954, -1.7814280986785889, -0.43700873851776123, -0.0012380562257021666, -0.3756740987300873, -0.00011205045302631333, -0.16264095902442932, -0.14552919566631317, -0.02456139214336872, -0.36280590295791626, -0.1240420788526535, -0.5860540866851807, -0.00013433984713628888, -4.207999518257566e-05, -0.1759415715932846, -0.0956893265247345, -1.0348000526428223, -3.3080673217773438, -0.8565489053726196, -0.00010990492592100054, -0.0031846067868173122, -0.002889864146709442, -0.7606276869773865, -0.06522464752197266, -0.08702987432479858, -0.5007402300834656, -0.0059450226835906506, -0.02971547096967697, -0.0024942022282630205, -1.2109642028808594, -0.044767752289772034, -0.00024244230007752776, -0.016000209376215935, -0.5309726595878601, -0.27419373393058777, -0.016033761203289032, -1.278451919555664, -3.302042750874534e-05, -0.31384190917015076, -0.0008534126682206988, -0.0006198153714649379, -4.6132929128361866e-05, -0.00046921687317080796, -2.4721643924713135, -0.0005150898941792548, -0.010961554944515228, -0.04003211483359337, -0.009182957001030445, -0.017477665096521378, -0.00025900822947733104, -0.006816703826189041, -0.004869625438004732, -0.2734166383743286, -0.0003636414185166359, -0.06859132647514343, -0.0044975318014621735, -0.014364879578351974, -0.0007707485929131508, -1.1205610462639015e-05, -0.24287818372249603, -0.0023229538928717375, -0.019465142861008644, -0.0011013639159500599, -1.5586251020431519, -0.02731582149863243, -0.017038747668266296, -0.010099970735609531, -1.4157688617706299, -4.291525328881107e-06, -8.344646857949556e-07, -0.0002317160106031224, -4.088794958079234e-05, -0.10043399780988693], "finish_reason": "stop"}], "metrics": {"energy": 177.07189423942555, "energy_per_token": 1.053999370472771, "time": 7.1510434, "time_per_token": 0.042565734523809524}}
{"outputs": [{"text": "info = {}\n    for root, dirs, files in os.walk(directory):\n        for f in files:\n            # normalize and calculate the file hash\n            filepath = os.path.join(root, f)\n            file_hash = md5(\n                unicodedata.normalize('NFKD', f).encode('ascii', 'ignore')\n            ).hexdigest()\n\n            # store the file information in the dictionary\n            info[f] = {\n                \"Size\": os.path.getsize(filepath),\n                \"MD5 Hash\": file_hash,\n            }\n\n    return info", "tokens": ["info", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " f", " in", " files", ":", "\n", "            ", "#", " normalize", " and", " calculate", " the", " file", " hash", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " f", ")", "\n", "            ", "file", "_", "hash", " =", " md", "5", "(", "\n", "                ", "un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " f", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", "\n", "            ", ")", ".", "hex", "dig", "est", "()", "\n", "\n", "            ", "#", " store", " the", " file", " information", " in", " the", " dictionary", "\n", "            ", "info", "[", "f", "]", " =", " {", "\n", "                ", "\"", "Size", "\":", " os", ".", "path", ".", "get", "size", "(", "file", "path", ")", ",", "\n", "                ", "\"", "MD", "5", " Hash", "\":", " file", "_", "hash", ",", "\n", "            ", "}", "\n", "\n", "    ", "return", " info", "\n", "\n", "def"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -0.48014694452285767, -1.94077730178833, -0.0016137446509674191, -0.29185816645622253, -0.001177928177639842, -0.00039057256071828306, -0.025759205222129822, -0.0011742371134459972, -0.01063854806125164, -1.3708974620385561e-05, -0.00012909532233607024, -0.004140020813792944, -0.019292332231998444, -0.12094306945800781, -0.028993817046284676, -0.0076345098204910755, -0.1129189282655716, -1.9254164695739746, -0.31496500968933105, -0.0033946766052395105, -0.0006256530177779496, -0.004537524189800024, -0.005340594798326492, -2.438058614730835, -2.796769142150879, -3.579916477203369, -2.6989145278930664, -1.2892935276031494, -2.1039867401123047, -3.270721197128296, -0.22351884841918945, -0.0016888416139408946, -1.72752845287323, -1.6211612224578857, -0.007063062861561775, -0.5133851766586304, -7.915183232398704e-05, -0.0004189328756183386, -0.013543388806283474, -0.029423700645565987, -0.00035613393993116915, -0.007481059525161982, -0.0010031197452917695, -0.01083208154886961, -0.00042024365393444896, -0.019135281443595886, -0.010401798412203789, -2.3420181274414062, -0.4273472726345062, -0.4793274402618408, -0.01710589788854122, -0.2531971335411072, -4.3987260141875595e-05, -0.17984643578529358, -2.055708408355713, -0.0034393463283777237, -0.344521701335907, -0.014606449753046036, -6.6756979322235566e-06, -6.472854875028133e-05, -0.000645429186988622, -0.00011014331539627165, -0.003954092971980572, -0.30674928426742554, -0.04003990441560745, -0.0787564367055893, -4.51792984677013e-05, -0.0003036991402041167, -0.9168154001235962, -0.1400335729122162, -0.033170074224472046, -0.0006252956227399409, -0.16545327007770538, -0.3052917420864105, -0.04078521952033043, -0.0010801678290590644, -0.04948163405060768, -0.0059943185187876225, -1.1525444984436035, -0.06867736577987671, -0.01923632062971592, -0.00020072828920092434, -0.016293810680508614, -0.011698925867676735, -1.823885577323381e-05, -0.0017460829112678766, -0.0010109796421602368, -0.022010216489434242, -0.8987952470779419, -0.0015074567636474967, -0.13172726333141327, -4.158224105834961, -0.32292434573173523, -0.37800371646881104, -2.2051682472229004, -0.5846216082572937, -0.446639746427536, -0.7700599431991577, -0.06517461687326431, -0.0004465774691198021, -0.3461014926433563, -0.0842784196138382, -0.430226594209671, -0.06831758469343185, -0.0004135706985834986, -1.4540884494781494, -0.01084918063133955, -0.0022100803907960653, -2.0827789306640625, -0.19142507016658783, -0.01604783907532692, -0.07682674378156662, -0.00010358751023886725, -0.14470474421977997, -0.0012872274965047836, -0.00036864637513644993, -6.9141146923357155e-06, -0.00027223696815781295, -0.008172641508281231, -0.0005235493299551308, -0.0010794533882290125, -0.0036457993555814028, -0.018975164741277695, -0.00032062159152701497, -0.0070237633772194386, -0.07582629472017288, -0.00018082413589581847, -0.046418335288763046, -0.002191048813983798, -0.003469164716079831, -0.0002774807217065245, -1.1920858014491387e-05, -1.7153246402740479, -0.003580589545890689, -0.061752013862133026, -0.0008622265886515379, -0.00025090406415984035, -0.6836715340614319, -0.03140007704496384, -0.022948870435357094, -0.0026940738316625357, -0.20673337578773499, -0.006722335238009691, -0.43687403202056885], "finish_reason": "stop"}], "metrics": {"energy": 198.32314082908638, "energy_per_token": 1.3310277907992374, "time": 6.5216703, "time_per_token": 0.043769599328859064}}
{"outputs": [{"text": "result = {}\n    for root, dirs, files in os.walk(directory, topdown=False):\n        for file_name in files:\n            full_path = os.path.join(root, file_name)\n            try:\n                with open(full_path, 'rb') as f:\n                    file_info = f.read()\n                    md5_hash = md5(file_info).hexdigest()\n                    file_info_hash = dict(\n                        Size=os.path.getsize(full_path),\n                        MD5 Hash=md5_hash)\n                    result[unicodedata.normalize('ASCII', file_name)] = file_info_hash\n            except Exception:\n                print(f'File \"{full_path}\" is corrupted and cannot be processed.')\n\n    return result", "tokens": ["result", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", ",", " top", "down", "=", "False", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", "_", "name", ")", "\n", "            ", "try", ":", "\n", "                ", "with", " open", "(", "full", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "file", "_", "info", " =", " f", ".", "read", "()", "\n", "                ", "    ", "md", "5", "_", "hash", " =", " md", "5", "(", "file", "_", "info", ")", ".", "hex", "dig", "est", "()", "\n", "                ", "    ", "file", "_", "info", "_", "hash", " =", " dict", "(", "\n", "                ", "        ", "Size", "=", "os", ".", "path", ".", "get", "size", "(", "full", "_", "path", ")", ",", "\n", "                ", "        ", "MD", "5", " Hash", "=", "md", "5", "_", "hash", ")", "\n", "                ", "    ", "result", "[", "un", "ic", "oded", "ata", ".", "normal", "ize", "('", "ASC", "II", "'", ",", " file", "_", "name", ")]", " =", " file", "_", "info", "_", "hash", "\n", "            ", "except", " Exception", ":", "\n", "                ", "print", "(", "f", "'", "File", " \"", "{", "full", "_", "path", "}\"", " is", " corrupted", " and", " cannot", " be", " processed", ".", "')", "\n", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.038940906524658, -0.07545194774866104, -0.23680061101913452, -0.02210431918501854, -0.24454276263713837, -0.5660614371299744, -1.9651978015899658, -0.002285608323290944, -0.292755663394928, -0.0015922023449093103, -0.0005336767644621432, -0.015192624181509018, -0.001073142047971487, -0.011354823596775532, -1.5139465176616795e-05, -0.00013910756388213485, -0.0037594609893858433, -0.015249215066432953, -2.3048763275146484, -0.08345495909452438, -0.002038188511505723, -0.009510684758424759, -2.1112074851989746, -0.005383755080401897, -0.018445389345288277, -0.00870670285075903, -0.13265089690685272, -1.8265271186828613, -1.4097983837127686, -0.2127668559551239, -0.0019605003762990236, -0.022147346287965775, -0.0008054111385717988, -0.007565655279904604, -0.007862570695579052, -1.6384780406951904, -0.020990723744034767, -0.20974761247634888, -0.00816152710467577, -0.23716874420642853, -9.870042413240299e-05, -0.0001722425949992612, -0.013532686978578568, -0.017496172338724136, -0.0001250427303602919, -0.006588640622794628, -0.0011555430246517062, -0.004620589315891266, -6.365573790390044e-05, -1.7165990357170813e-05, -0.00032264748006127775, -0.0074382261373102665, -0.02500981092453003, -2.299884557723999, -0.00029988560709170997, -0.0033121034502983093, -0.0014247277285903692, -0.8513160943984985, -0.01623387634754181, -0.0006582954083569348, -0.0030485368333756924, -1.8954096958623268e-05, -1.6689286894688848e-06, -0.008188249543309212, -0.23900176584720612, -0.1488547921180725, -0.009968733415007591, -0.00036614391137845814, -0.7686439156532288, -0.09089460223913193, -0.00744094792753458, -0.0011449456214904785, -0.0011036264477297664, -1.6109941005706787, -0.04222093150019646, -1.9747201204299927, -0.007327348925173283, -1.5388635396957397, -0.03212011232972145, -0.0109320767223835, -0.032888539135456085, -0.019356176257133484, -0.32615765929222107, -0.3748037815093994, -1.8806926012039185, -0.01805970072746277, -0.056557636708021164, -0.12696196138858795, -0.01375176478177309, -0.07327226549386978, -0.00018106251081917435, -0.07813173532485962, -0.003376142820343375, -2.3603161025675945e-05, -7.486063259420916e-05, -0.002241838490590453, -0.02926163375377655, -0.03554952144622803, -2.2053474822314456e-05, -0.0018962513422593474, -0.00024375328212045133, -0.019891778007149696, -0.23372730612754822, -0.08760535717010498, -1.8587135076522827, -0.006325581111013889, -1.9675557613372803, -1.8247718811035156, -2.8798418045043945, -0.11580517143011093, -2.55195951461792, -0.0975075215101242, -1.4722000360488892, -0.0001935771433636546, -0.020377686247229576, -0.7412413358688354, -0.08965575695037842, -0.08871126919984818, -7.152531907195225e-06, -0.2003529667854309, -0.0018491327064111829, -0.00037174468161538243, -7.986990567587782e-06, -0.0004444326623342931, -0.015228550881147385, -1.4781842764932662e-05, -1.7881377516459906e-06, -0.004763801582157612, -0.0031515713781118393, -0.2150334119796753, -8.463501580990851e-05, -0.001281393808312714, -0.05043918266892433, -0.00018940561858471483, -0.5938403606414795, -0.012210028246045113, -0.0028998488560318947, -7.986990567587782e-06, -0.00022539935889653862, -5.483612312673358e-06, -1.8311132192611694, -0.0037941390182822943, -0.18478786945343018, -0.15644703805446625, -1.1293545961380005, -0.10995203256607056, -1.0891097784042358, -0.015462283045053482, -4.362964682513848e-05, -0.0006724718841724098, -0.00028701478731818497, -0.0001726001501083374, -0.0016615884378552437, -0.12304014712572098, -2.365365505218506, -7.486063259420916e-05, -0.001328420010395348, -0.00014554394874721766, -0.2710278630256653, -9.42901024245657e-05, -0.0024949158541858196, -0.06642908602952957, -0.007631197106093168, -0.024863654747605324, -0.00012218205665703863, -5.519237674889155e-05, -0.0005584587925113738, -1.966933996300213e-05, -0.003958248998969793, -0.07520981878042221, -0.0028580077923834324, -1.9457345008850098, -1.1879626512527466, -0.021524284034967422, -0.0028988979756832123, -1.8137824535369873, -0.2564176619052887, -0.18698421120643616, -0.7085890173912048, -2.5872960090637207, -2.282350778579712, -0.0017037175130099058, -0.3477599024772644, -0.00010585224663373083, -0.0001658063702052459, -0.0056039136834442616, -1.5837596654891968, -1.12744140625, -2.142787456512451, -1.173071026802063, -0.00218593399040401, -0.24586565792560577, -0.8389278054237366, -0.094825878739357, -0.0028948565013706684, -1.8089276552200317, -0.0150289386510849, -0.022496845573186874, -0.004881369415670633, -0.2516106963157654, -0.008173232898116112, -0.8541592955589294], "finish_reason": "stop"}], "metrics": {"energy": 233.96649245262137, "energy_per_token": 1.1582499626367395, "time": 8.84031, "time_per_token": 0.04376391089108911}}
{"outputs": [{"text": "info = {}\n\n    for file_path in os.listdir(directory):\n        full_path = pathlib.Path(directory) / file_path\n\n        if full_path.is_file():\n            md5_hash = md5(full_path.read_bytes()).hexdigest()\n            file_size = full_path.stat().st_size\n\n            info[normalize_file_name(file_path)] = {\n                'Size': file_size,\n                'MD5 Hash': md5_hash\n            }\n\n    return info", "tokens": ["info", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "path", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "full", "_", "path", " =", " path", "lib", ".", "Path", "(", "directory", ")", " /", " file", "_", "path", "\n", "\n", "        ", "if", " full", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "md", "5", "_", "hash", " =", " md", "5", "(", "full", "_", "path", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "file", "_", "size", " =", " full", "_", "path", ".", "stat", "()", ".", "st", "_", "size", "\n", "\n", "            ", "info", "[", "normal", "ize", "_", "file", "_", "name", "(", "file", "_", "path", ")]", " =", " {", "\n", "                ", "'", "Size", "':", " file", "_", "size", ",", "\n", "                ", "'", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "\n", "            ", "}", "\n", "\n", "    ", "return", " info", "\n", "\n", "def"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -1.466658592224121, -0.0006947487709112465, -0.4580189287662506, -1.2136191129684448, -1.3734304904937744, -1.128673791885376, -0.026627836748957634, -2.003131628036499, -0.00035089056473225355, -0.005388497840613127, -4.768360213347478e-06, -0.002652699826285243, -0.006493658293038607, -0.0008381668012589216, -0.034076884388923645, -0.04523523151874542, -2.711679220199585, -0.012460595928132534, -0.17649109661579132, -0.004053353797644377, -1.2905378341674805, -7.354942499659956e-05, -5.328513361746445e-05, -0.013603131286799908, -0.01875746250152588, -0.10523760318756104, -0.6321428418159485, -0.361650675535202, -0.02301783859729767, -3.194758028257638e-05, -0.0003079893649555743, -0.01916475221514702, -0.7145962119102478, -0.0007308434578590095, -0.2806926667690277, -0.4598781168460846, -0.00013386306818574667, -2.622600959512056e-06, -0.00036816971260122955, -0.06393031030893326, -7.152531907195225e-06, -0.07099666446447372, -0.08136553317308426, -0.028615882620215416, -0.029149791225790977, -2.8945393562316895, -0.011853497475385666, -0.05457464978098869, -0.1347002536058426, -0.015018017031252384, -0.23293329775333405, -0.0002530493075028062, -0.9273917078971863, -0.0919676274061203, -1.966933996300213e-05, -1.4305104514278355e-06, -0.0006861716392450035, -0.031751785427331924, -6.794906312279636e-06, -0.005005210638046265, -0.0031379053834825754, -0.01163435634225607, -0.02919216826558113, -5.340433563105762e-05, -0.0002643712505232543, -0.00038795097498223186, -0.014942622743546963, -0.2601901590824127, -2.7155256271362305, -0.011673593893647194, -0.902012288570404, -0.029380986467003822, -0.19008243083953857, -4.458328112377785e-05, -3.576278118089249e-07, -1.5139465176616795e-05, -0.001983462367206812, -0.0021062351297587156, -2.109982233378105e-05, -0.00019369633810129017, -0.0008163695456460118, -9.846202738117427e-05, -0.012564548291265965, -0.7901203036308289, -0.007444615941494703, -1.9447672367095947, -0.04602222517132759, -1.1284397840499878, -0.009286424145102501, -0.0869082435965538, -1.2785861492156982, -0.03197349235415459, -0.013702849857509136, -0.007820108905434608, -0.1455765962600708, -0.00026854246971197426, -0.0011557810939848423, -0.07458920776844025, -0.0021695189643651247, -1.0662496089935303, -0.010516582056879997, -0.0031190102454274893, -0.19827665388584137, -0.26682424545288086, -0.026007097214460373, -0.010904602706432343, -3.4450891689630225e-05, -0.00028046013903804123, -0.0013323486782610416, -0.027485625818371773, -0.00018869050836656243, -0.0018189090769737959, -0.006509765516966581, -0.00011419598013162613, -0.04024248942732811, -0.0025542511139065027, -0.0037273948546499014, -1.7881377516459906e-06, -2.3245540432981215e-05, -3.099436753473128e-06, -0.23908662796020508, -0.0074007161892950535, -0.00019691436318680644, -0.00020525732543319464, -0.11292371898889542, -0.011666877195239067, -0.008567600511014462, -0.0021491781808435917, -0.005554005969315767, -0.004735564347356558, -0.036825716495513916], "finish_reason": "stop"}], "metrics": {"energy": 176.276624446869, "energy_per_token": 1.305752773680511, "time": 5.692683, "time_per_token": 0.04216802222222222}}
{"outputs": [{"text": "# Convert the directory path to pathlib.Path object\n    directory_path = pathlib.Path(directory)\n\n    # Check if the directory exists, and if it doesn't, exit the script\n    if not directory_path.exists():\n        print('Directory does not exist')\n        exit(1)\n\n    # Define the output dictionary\n    info = {}\n\n    # Check each file in the directory\n    for file_name in directory_path.iterdir():\n        # Skip any non-files\n        if not file_name.is_file():\n            continue\n\n        # Convert the file name to ASCII (remove diacritics, control characters, and whitespace)\n        normalized_name = unicodedata.normalize('NFKD', file_name.name).encode('ASCII', 'ignore').decode('ASCII')\n\n        # Calculate the MD5 hash of the file\n        md5_hash = md5()\n        with file_name.open('rb') as file:\n            md5_hash.update(file.read())\n\n        # Create the output dictionary\n        info[normalized", "tokens": ["#", " Convert", " the", " directory", " path", " to", " path", "lib", ".", "Path", " object", "\n", "    ", "directory", "_", "path", " =", " path", "lib", ".", "Path", "(", "directory", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", ",", " and", " if", " it", " doesn", "'", "t", ",", " exit", " the", " script", "\n", "    ", "if", " not", " directory", "_", "path", ".", "exists", "():", "\n", "        ", "print", "('", "Directory", " does", " not", " exist", "')", "\n", "        ", "exit", "(", "1", ")", "\n", "\n", "    ", "#", " Define", " the", " output", " dictionary", "\n", "    ", "info", " =", " {}", "\n", "\n", "    ", "#", " Check", " each", " file", " in", " the", " directory", "\n", "    ", "for", " file", "_", "name", " in", " directory", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "#", " Skip", " any", " non", "-", "files", "\n", "        ", "if", " not", " file", "_", "name", ".", "is", "_", "file", "():", "\n", "            ", "continue", "\n", "\n", "        ", "#", " Convert", " the", " file", " name", " to", " ASC", "II", " (", "remove", " di", "ac", "rit", "ics", ",", " control", " characters", ",", " and", " whites", "pace", ")", "\n", "        ", "normalized", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ".", "name", ")", ".", "encode", "('", "ASC", "II", "'", ",", " '", "ignore", "')", ".", "decode", "('", "ASC", "II", "')", "\n", "\n", "        ", "#", " Calculate", " the", " MD", "5", " hash", " of", " the", " file", "\n", "        ", "md", "5", "_", "hash", " =", " md", "5", "()", "\n", "        ", "with", " file", "_", "name", ".", "open", "('", "rb", "')", " as", " file", ":", "\n", "            ", "md", "5", "_", "hash", ".", "update", "(", "file", ".", "read", "())", "\n", "\n", "        ", "#", " Create", " the", " output", " dictionary", "\n", "        ", "info", "[", "normalized"], "logprobs": [-2.032959461212158, -4.151293754577637, -0.5447664260864258, -0.2994428277015686, -0.3062220513820648, -0.1782824844121933, -2.8142218589782715, -0.005955095402896404, -0.18064430356025696, -0.024482758715748787, -0.3505309224128723, -0.4294762909412384, -0.0014619863359257579, -0.3359934687614441, -0.8893638849258423, -0.024334315210580826, -0.008579419925808907, -0.06425455212593079, -1.0609570381348021e-05, -1.8596476365928538e-05, -0.004034475889056921, -0.0022170981392264366, -0.0032486540731042624, -0.0012817509705200791, -0.04221533238887787, -0.19255109131336212, -0.0006032554083503783, -0.05301888659596443, -1.329974889755249, -0.12571477890014648, -0.09904314577579498, -0.26053619384765625, -0.2002294361591339, -3.077888250350952, -1.1863304376602173, -0.3577563464641571, -1.733891248703003, -0.9841436743736267, -0.0013141338713467121, -6.318072337307967e-06, -0.4559004604816437, -2.824512004852295, -0.3928055465221405, -1.9676709175109863, -0.5814898014068604, -0.0007558587822131813, -0.049932967871427536, -0.05037389323115349, -0.5038006901741028, -0.003374835941940546, -0.00011657988943625242, -0.00013076403411105275, -0.11378487944602966, -0.00496132206171751, -0.003956111613661051, -0.001117201172746718, -0.25914305448532104, -1.4291208982467651, -0.621992826461792, -0.5965942144393921, -0.0013568728463724256, -0.016702925786376, -0.8268806338310242, -0.0017144280718639493, -0.011689264327287674, -0.9101383686065674, -1.2852051258087158, -0.16838473081588745, -0.0022367238998413086, -0.010707072913646698, -0.05496445298194885, -0.0016565899131819606, -0.0976104587316513, -3.3482131958007812, -1.4843218326568604, -2.4900572299957275, -0.18711481988430023, -0.4591023623943329, -0.0006990373367443681, -0.5692811608314514, -0.05045833811163902, -0.16987772285938263, -0.0017378717893734574, -0.056744176894426346, -0.0004070168943144381, -0.059879694133996964, -3.288355827331543, -2.363818407058716, -0.06570320576429367, -0.3215213119983673, -0.023966021835803986, -0.05149919539690018, -0.5295939445495605, -0.0008625839254818857, -0.030655130743980408, -0.32264864444732666, -0.7295899987220764, -1.4416413307189941, -0.007340839132666588, -0.5096223950386047, -0.0008796160109341145, -1.9073468138230965e-06, -6.05564855504781e-05, -0.12094655632972717, -0.00012540031457319856, -0.00048387263086624444, -0.006421882193535566, -0.27358466386795044, -0.2654377520084381, -2.1694467067718506, -2.785282850265503, -1.238404393196106, -0.006223583593964577, -1.111648440361023, -0.49545931816101074, -0.0006753309280611575, -0.005985075607895851, -0.18121552467346191, -0.062060385942459106, -6.747018051100895e-05, -0.00011634149996098131, -9.417489309271332e-06, -0.000559173640795052, -8.106198947643861e-06, -0.00011503035057103261, -0.002441522665321827, -0.0025021694600582123, -0.00075049843871966, -0.09324195235967636, -0.0014866263372823596, -0.0974084660410881, -0.0007627676823176444, -0.04531874135136604, -2.605015754699707, -0.2404147833585739, -0.11145641654729843, -0.34121638536453247, -0.030969079583883286, -0.8563019037246704, -9.154854342341423e-05, -3.826343059539795, -3.050945281982422, -2.0252890586853027, -0.0006859333370812237, -1.0926709175109863, -0.0003045333724003285, -0.99524986743927, -3.1290059089660645, -0.42535653710365295, -0.14360292255878448, -1.3664849996566772, -3.4185738563537598, -0.36280348896980286, -0.023967068642377853, -0.03779924288392067, -0.000505677133332938, -1.6544125080108643, -0.02020036056637764, -0.6751184463500977, -0.002971045905724168, -0.47032538056373596, -0.004509399179369211, -2.8729025871143676e-05, -0.0003522014303598553, -8.201262971851975e-05, -0.0002506657037883997, -1.537788011773955e-05, -0.08784613758325577, -0.009628286585211754, -0.15395045280456543, -3.242440288886428e-05, -0.00010096516780322418, -0.039098478853702545, -2.992108420585282e-05, -6.151010165922344e-05, -0.08635936677455902, -0.04252590239048004, -0.034777265042066574, -0.06027282401919365, -0.13815836608409882, -0.06703338027000427, -0.7949907183647156, -3.766942609217949e-05, -0.006342638749629259, -0.005747103597968817, -0.03881390765309334, -0.0032825181260704994, -0.0018474669195711613, -0.12419844418764114, -0.016020504757761955, -1.0042871236801147, -0.025766989216208458, -0.0002252801787108183, -0.012550304643809795, -0.08357086777687073, -0.07316656410694122, -0.0003847335756290704, -0.02497597597539425, -0.7123037576675415, -0.12301380187273026, -0.358703076839447, -7.724463648628443e-05, -0.026795903220772743, -0.30334776639938354, -0.010657773353159428, -0.012517224065959454, -0.282682329416275, -0.000205018965061754, -0.8963412046432495, -0.003944593947380781, -0.03736100345849991, -0.05454157292842865, -0.012936477549374104, -0.11393646895885468, -3.969590397900902e-05, -0.9024837613105774, -0.006824399810284376, -0.01805970072746277, -0.10278705507516861, -1.5585641860961914, -0.0022734766826033592, -0.00024339574156329036, -3.540453326422721e-05, -0.00018285033002030104, -0.3908942937850952, -0.002274665981531143, -0.0020060669630765915, -0.00014172980445437133, -0.7297232151031494, -0.022731680423021317, -0.006324633490294218, -0.0015444743912667036, -0.3387030363082886, -3.8742269680369645e-05, -0.0006332775810733438, -0.0012143626809120178, -0.0009953788248822093, -0.00014554394874721766, -0.0034091707784682512, -0.003056856105104089, -0.0008480527903884649, -6.186770770000294e-05, -0.0071656848303973675, -0.0015998195158317685, -1.1839854717254639, -0.0016611122991889715, -0.04405391961336136, -2.6925454139709473, -1.5551363229751587, -0.7540686130523682, -0.0713852271437645, -1.6644924879074097, -0.0002885640424210578, -0.14314071834087372, -0.017186518758535385, -0.00536075234413147], "finish_reason": "length"}], "metrics": {"energy": 251.0589481811524, "energy_per_token": 0.9806990163326266, "time": 10.940058, "time_per_token": 0.0427346015625}}
{"outputs": [{"text": "# TODO: Implement task_func()\n    file_info = {}\n    for root, dirs, files in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            file_name = unicodedata.normalize('NFKD', file_name).encode(\"ascii\",\"ignore\").decode(\"ascii\")\n            file_size = os.path.getsize(file_path)\n            file_hash = md5(open(file_path, \"rb\").read()).hexdigest()\n            file_info[file_name] = {'Size':file_size, 'MD5':file_hash}\n\n    return file_info", "tokens": ["#", " TODO", ":", " Im", "plement", " task", "_", "func", "()", "\n", "    ", "file", "_", "info", " =", " {}", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", "_", "name", ")", "\n", "            ", "file", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ")", ".", "encode", "(", "\"", "ascii", "\"", ",", "\"", "ignore", "\"", ")", ".", "decode", "(", "\"", "ascii", "\"", ")", "\n", "            ", "file", "_", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", "_", "path", ")", "\n", "            ", "file", "_", "hash", " =", " md", "5", "(", "open", "(", "file", "_", "path", ",", " \"", "rb", "\"", ")", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "file", "_", "info", "[", "file", "_", "name", "]", " =", " {'", "Size", "':", "file", "_", "size", ",", " '", "MD", "5", "':", "file", "_", "hash", "}", "\n", "\n", "    ", "return", " file", "_", "info", "\n", "\n", "def"], "logprobs": [-2.032959461212158, -3.4635276794433594, -0.37343499064445496, -1.467876672744751, -0.003244614228606224, -1.7228283882141113, -0.7211582660675049, -0.004795478656888008, -2.6476922035217285, -0.3668763339519501, -0.16609662771224976, -3.048898696899414, -0.07456110417842865, -0.7182720899581909, -0.19517315924167633, -0.19697685539722443, -0.0460948571562767, -0.22956401109695435, -0.45993033051490784, -1.8170568943023682, -0.004043974447995424, -0.3620406687259674, -0.0017526278970763087, -0.0005974177038297057, -0.024963535368442535, -0.0016314780805259943, -0.012310945428907871, -1.7881233361549675e-05, -0.00011526874004630372, -0.004047892522066832, -0.010264111682772636, -0.09732962399721146, -0.040129806846380234, -0.015210822224617004, -0.14719291031360626, -0.43059641122817993, -1.1934946775436401, -0.11853212863206863, -0.00118900160305202, -0.004159371368587017, -0.0004170263418927789, -0.0067339395172894, -0.012624466791749, -0.754336416721344, -0.0660344585776329, -0.07762522995471954, -0.003859572345390916, -0.2667505741119385, -0.0002907091984525323, -0.0002302858338225633, -0.013297563418745995, -0.01006055437028408, -0.0002648479712661356, -0.005739754997193813, -0.0006515049026347697, -0.008423040620982647, -3.4927710657939315e-05, -0.00014852374442853034, -0.0003137096355203539, -0.010344814509153366, -0.030038505792617798, -1.3033195734024048, -0.01911025308072567, -1.9443516731262207, -0.6245669722557068, -1.9831998348236084, -0.017031949013471603, -7.939023635117337e-05, -0.0006237468332983553, -5.304672595229931e-05, -0.0002949994814116508, -0.0016814630944281816, -0.2087412327528, -0.12332987785339355, -0.29110339283943176, -6.174850568640977e-05, -0.00036864637513644993, -0.03666151314973831, -6.103329360485077e-05, -0.009989152662456036, -0.041703447699546814, -0.0221803430467844, -0.009468411095440388, -2.496870517730713, -1.1650543212890625, -0.19410929083824158, -3.635817120084539e-05, -0.022272096946835518, -1.9336280822753906, -0.007959670387208462, -5.125868119648658e-05, -0.0037159931380301714, -0.20209281146526337, -0.009391534142196178, -1.1335234642028809, -0.005458450876176357, -0.26458483934402466, -3.1709168979432434e-05, -0.043775774538517, -0.05079502612352371, -0.05188850313425064, -0.5938943028450012, -0.014288966543972492, -1.4618430137634277, -0.07910367101430893, -0.06583447009325027, -0.00023183519078884274, -0.13599954545497894, -0.001918738940730691, -0.00026008085114881396, -9.894321920000948e-06, -0.00030620177858509123, -0.006096457596868277, -9.298280929215252e-06, -0.0019743014127016068, -0.003553862916305661, -0.02060753107070923, -0.020194051787257195, -0.6420092582702637, -0.012553836219012737, -0.5344362854957581, -0.012688972055912018, -0.11902998387813568, -1.9311717551317997e-05, -0.051346782594919205, -0.11963483691215515, -0.0002087136817863211, -0.001524953986518085, -4.291525328881107e-06, -0.0007153574260883033, -0.007667160592973232, -1.1843326091766357, -0.0005938435206189752, -0.00043930893298238516, -0.00894621666520834, -0.00015722469834145159, -9.97731985989958e-05, -0.01892884448170662, -0.014872037805616856, -0.009747881442308426, -3.45700973412022e-05, -0.0003816353273577988, -0.0006062338361516595, -0.007077622227370739, -0.04751444607973099, -0.06426584720611572, -0.003336816793307662, -0.03582214191555977, -0.04022565484046936, -0.01501226332038641, -4.303362584323622e-05, -0.001365087111480534, -0.013116506859660149, -0.0023469780571758747, -0.5261033177375793, -0.1831463873386383, -0.03557667136192322, -2.593355178833008, -5.2689116273541003e-05, -0.0002609150833450258, -0.005551871843636036, -0.2609982490539551, -0.031270913779735565, -0.0001431601122021675, -2.871134042739868, -0.08452700823545456, -1.585470999998506e-05, -0.0003756771038752049, -0.009282171726226807, -0.0021379964891821146, -1.740456223487854, -0.04643210396170616, -0.028555061668157578, -0.011860565282404423, -6.556489552167477e-06, -5.018585216021165e-05, -0.32932379841804504, -0.022621555253863335, -0.5857704877853394], "finish_reason": "stop"}], "metrics": {"energy": 191.249406375885, "energy_per_token": 1.0684324378541061, "time": 7.5784345, "time_per_token": 0.04233762290502793}}
{"outputs": [{"text": "directory = pathlib.Path(directory).resolve()\n\n    for item in directory.glob(\"**/*\"):\n        if item.is_file():\n            try:\n                normalized_name = unicodedata.normalize('NFKD', item.name).encode('ascii', 'ignore')\n                normalized_name = normalized_name.replace(b'\\'', b'')\n                normalized_name = normalized_name.replace(b'\"', b'')\n                normalized_name = normalized_name.replace(b'-', b'_')\n                normalized_name = normalized_name.replace(b' ', b'_')\n                normalized_name = normalized_name.replace(b'/', b'_')\n                normalized_name = normalized_name.replace(b'\\\\', b'_')\n                normalized_name = normalized_name.replace(b'(', b'_')\n                normalized_name = normalized_name.replace(b')', b'_')\n                normalized_name = normalized_name.replace(b',', b'_')\n                normalized_name = normalized_name.replace(b';", "tokens": ["directory", " =", " path", "lib", ".", "Path", "(", "directory", ")", ".", "resolve", "()", "\n", "\n", "    ", "for", " item", " in", " directory", ".", "glob", "(", "\"", "**", "/*", "\"", "):", "\n", "        ", "if", " item", ".", "is", "_", "file", "():", "\n", "            ", "try", ":", "\n", "                ", "normalized", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " item", ".", "name", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'\\", "''", ",", " b", "'')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", "\"", "'", ",", " b", "'')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'-", "'", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", " '", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", "/'", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", "\\\\'", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", "('", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "')", "'", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "'", ",", "'", ",", " b", "'_", "')", "\n", "                ", "normalized", "_", "name", " =", " normalized", "_", "name", ".", "replace", "(", "b", "';"], "logprobs": [-3.4725308418273926, -0.1389600932598114, -0.3545578718185425, -0.00017152745567727834, -8.391981828026474e-05, -0.01957690343260765, -0.00707430811598897, -0.0075622242875397205, -0.001966092037037015, -1.5452959537506104, -0.22681312263011932, -0.040374163538217545, -0.13502609729766846, -1.3751858472824097, -0.0006522196927107871, -3.8513104915618896, -2.8070554733276367, -0.00931311585009098, -0.1594083309173584, -0.0015804193681105971, -2.4073610305786133, -1.7756896018981934, -0.028151461854577065, -0.5719579458236694, -0.007378824986517429, -0.16762006282806396, -0.0050942855887115, -0.02878500334918499, -0.030400754883885384, -0.3575281798839569, -0.1804818958044052, -0.0025379611179232597, -0.062129173427820206, -9.298280929215252e-06, -0.07925257086753845, -0.08368643373250961, -0.018712418153882027, -0.03878283128142357, -2.3563408851623535, -0.00022551853908225894, -0.004768547136336565, -0.004976149648427963, -2.807861804962158, -0.09089764952659607, -0.5082353353500366, -0.01317686215043068, -0.5824224352836609, -0.004668408073484898, -2.1219027985353023e-05, -0.00030048147891648114, -0.00015376816736534238, -0.0002643712505232543, -2.0146166207268834e-05, -0.5987862944602966, -0.04906051605939865, -0.12161169201135635, -3.123234637314454e-05, -0.00018726025882642716, -0.04962866008281708, -0.0016958630876615644, -0.05092531815171242, -0.057916563004255295, -0.10475710034370422, -0.022627031430602074, -0.0834006741642952, -0.33038264513015747, -0.027360014617443085, -0.005895131733268499, -0.12378247827291489, -0.002978771459311247, -0.0039036276284605265, -2.240877151489258, -0.3904002606868744, -1.7523159980773926, -0.006169441621750593, -0.21080096065998077, -0.07050497084856033, -0.2310478538274765, -0.00010907054820563644, -5.209310256759636e-05, -0.0015368566382676363, -2.72712779045105, -0.15415708720684052, -0.0696500688791275, -1.5751750469207764, -3.7509708404541016, -0.00022396916756406426, -0.028631173074245453, -0.5022119283676147, -0.3866346478462219, -0.10196804255247116, -0.28987187147140503, -0.0011887634173035622, -0.014694438315927982, -0.01696186326444149, -0.05428733304142952, -0.0008136299438774586, -4.088794958079234e-05, -0.0009591746493242681, -0.0729261040687561, -0.002684919396415353, -0.01592699997127056, -0.18272016942501068, -0.7545901536941528, -0.0003766304289456457, -8.880697714630514e-05, -0.001334967790171504, -0.0021127776708453894, -0.015267412178218365, -0.15186801552772522, -0.1944894641637802, -0.00016330339713022113, -0.018031952902674675, -0.006570047698915005, -0.052231043577194214, -0.0008609164506196976, -7.283422019099817e-05, -0.0005747812101617455, -0.14415831863880157, -0.0013652060879394412, -0.023501647636294365, -2.705352306365967, -0.007238827180117369, -0.00012051333033014089, -0.0018421123968437314, -1.7262606620788574, -0.0015975582646206021, -0.04766085371375084, -0.17933422327041626, -0.18308593332767487, -0.0005087750032544136, -0.010299154557287693, -0.007548026740550995, -0.04225990176200867, -0.0005588161875493824, -3.969590397900902e-05, -0.0008283997885882854, -0.11308513581752777, -0.000673424918204546, -0.010025030933320522, -0.12910692393779755, -0.7555115818977356, -9.178694017464295e-05, -0.003027144121006131, -0.09997232258319855, -0.000934045237954706, -0.04002982750535011, -0.21686837077140808, -0.19103822112083435, -0.00038258862332440913, -0.014917959459125996, -0.007413732353597879, -0.059386882930994034, -0.00021753329201601446, -5.5549986427649856e-05, -0.0017362057697027922, -0.1367053985595703, -0.0013810392701998353, -0.005127731245011091, -0.17190104722976685, -1.0340632200241089, -0.00010263393050990999, -0.007576303090900183, -0.05685443803668022, -0.0005561950383707881, -0.018780391663312912, -0.10050677508115768, -0.08210429549217224, -0.0004661188868340105, -0.005351622123271227, -0.003252931870520115, -0.030276896432042122, -0.00025185750564560294, -3.6238969187252223e-05, -0.0004899493651464581, -0.034021005034446716, -0.00040451448876410723, -0.0029577340465039015, -0.19131816923618317, -0.5350848436355591, -3.0397906812140718e-05, -0.004382054787129164, -0.002975800074636936, -4.0411134250462055e-05, -0.005854601040482521, -0.12756361067295074, -0.10533395409584045, -0.00018571082910057157, -0.010141510516405106, -0.005209917202591896, -0.03687190264463425, -0.0002803409588523209, -3.85038583772257e-05, -0.0007448997348546982, -0.06536155939102173, -0.000514017534442246, -0.003186864545568824, -0.7347270250320435, -1.9284083843231201, -4.792098479811102e-05, -0.007537260185927153, -0.3913027346134186, -0.0008273277780972421, -0.009013203904032707, -0.000444551813416183, -0.00046004203613847494, -2.682172998902388e-05, -7.962863310240209e-05, -4.935142715112306e-05, -0.00025185750564560294, -9.179073458653875e-06, -8.344646857949556e-07, -2.0265373677830212e-05, -0.0004377598816063255, -1.883488948806189e-05, -2.47952248173533e-05, -0.007844475097954273, -5.3165931603871286e-05, -1.3589766240329482e-05, -0.00037531962152570486, -0.2866082787513733, -2.276871418871451e-05, -0.0017239484004676342, -0.054764941334724426, -0.041614830493927, -0.00037353215157054365, -0.003116752253845334, -0.0014990055933594704, -0.010910851880908012, -3.075552376685664e-05, -8.22540732769994e-06, -0.0002215855201939121, -0.013080856762826443, -0.0002456601650919765, -0.0006901028100401163, -0.19550302624702454, -1.7767281532287598, -0.0015624469378963113, -9.703165414975956e-05, -0.0018402085406705737, -0.11105911433696747, -0.0002348147245356813, -0.003494230331853032, -0.03478451818227768, -0.02995474822819233, -0.00013183678674977273, -0.0020352143328636885, -0.0008889061282388866, -0.005713915918022394, -0.00010918975021922961, -8.4638240878121e-06, -0.00022933237778488547, -0.006781183648854494, -0.0002426806604489684, -0.0010509926360100508, -0.8889432549476624], "finish_reason": "length"}], "metrics": {"energy": 293.7243101730347, "energy_per_token": 1.1473605866134169, "time": 11.343715, "time_per_token": 0.04431138671875}}
{"outputs": [{"text": "# TODO\n    return {}", "tokens": ["#", " TODO", "\n", "    ", "return", " {}", "\n", "\n", "#"], "logprobs": [-2.032959461212158, -3.4635276794433594, -2.130375862121582, -0.16541670262813568, -2.9115524291992188, -1.3502411842346191, -0.13413718342781067, -0.013466001488268375, -3.00663423538208], "finish_reason": "stop"}], "metrics": {"energy": 2.8429898357391354, "energy_per_token": 0.3158877595265706, "time": 0.23183733, "time_per_token": 0.025759703333333335}}
{"outputs": [{"text": "if os.path.exists(directory):\n        result = {}\n        for file_path in pathlib.Path(directory).rglob('*'):\n            file_name = file_path.name\n            try:\n                # Normalize filename to ASCII\n                ascii_name = unicodedata.normalize('NFKD', file_name).encode('ascii', 'ignore').decode('ascii')\n                md5_hash = md5(file_path.read_bytes()).hexdigest()\n                # Calculate file size\n                file_size = os.path.getsize(file_path)\n                # Store file info in dictionary\n                result[ascii_name] = {'Size': file_size, 'MD5 Hash': md5_hash}\n            except UnicodeEncodeError:\n                print(f\"ERROR: File '{file_name}' could not be processed.\")\n    else:\n        print(f\"ERROR: Directory '{directory}' not found.\")\n    return result", "tokens": ["if", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "result", " =", " {}", "\n", "        ", "for", " file", "_", "path", " in", " path", "lib", ".", "Path", "(", "directory", ")", ".", "rg", "lob", "('", "*", "')", ":", "\n", "            ", "file", "_", "name", " =", " file", "_", "path", ".", "name", "\n", "            ", "try", ":", "\n", "                ", "#", " Normal", "ize", " filename", " to", " ASC", "II", "\n", "                ", "ascii", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "NF", "KD", "'", ",", " file", "_", "name", ")", ".", "encode", "('", "ascii", "'", ",", " '", "ignore", "')", ".", "decode", "('", "ascii", "')", "\n", "                ", "md", "5", "_", "hash", " =", " md", "5", "(", "file", "_", "path", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "#", " Calculate", " file", " size", "\n", "                ", "file", "_", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", "_", "path", ")", "\n", "                ", "#", " Store", " file", " info", " in", " dictionary", "\n", "                ", "result", "[", "ascii", "_", "name", "]", " =", " {'", "Size", "':", " file", "_", "size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "            ", "except", " Un", "icode", "Enc", "ode", "Error", ":", "\n", "                ", "print", "(", "f", "\"", "ERROR", ":", " File", " '", "{", "file", "_", "name", "}'", " could", " not", " be", " processed", ".", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "print", "(", "f", "\"", "ERROR", ":", " Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.8163437843322754, -2.150623321533203, -0.00442715547978878, -0.09552519023418427, -0.02819214202463627, -1.3334990739822388, -0.004699020646512508, -0.009462624788284302, -0.4590563178062439, -0.022096507251262665, -0.03138113021850586, -2.664515972137451, -0.09491629898548126, -0.17096656560897827, -0.00989319384098053, -0.09262526035308838, -0.40203848481178284, -1.546199083328247, -1.1224563121795654, -1.2436418533325195, -0.07642637193202972, -0.24007409811019897, -4.9470632802695036e-05, -0.00010096516780322418, -0.009017103351652622, -0.003576075891032815, -0.002999095479026437, -0.0008339979685842991, -4.303362584323622e-05, -0.9752797484397888, -0.008799112401902676, -0.2967662215232849, -0.08896476030349731, -0.10880202054977417, -0.0012763934209942818, -0.030298061668872833, -0.014026984572410583, -2.3888890743255615, -0.11573116481304169, -0.4877175986766815, -0.030174769461154938, -0.541424572467804, -0.00015877417172305286, -0.00014697425649501383, -0.0009223736124113202, -0.22406885027885437, -0.13631373643875122, -0.04310621693730354, -3.104963541030884, -0.0010121704544872046, -0.002763977972790599, -0.0017933252966031432, -2.7886199951171875, -0.985649824142456, -0.16605785489082336, -2.9879143238067627, -0.10834494233131409, -0.06298951804637909, -0.0001854724541772157, -0.5695999264717102, -0.00026973424246534705, -0.955428421497345, -0.0012381753185763955, -0.9386521577835083, -0.0017914213240146637, -0.21304529905319214, -0.0017312075942754745, -4.0531076592742465e-06, -0.00018857131362892687, -1.8954096958623268e-05, -0.0020201054867357016, -4.625213477993384e-05, -0.07193539291620255, -0.046898238360881805, -0.10268539935350418, -3.540453326422721e-05, -0.00011574551899684593, -0.007534657139331102, -2.884823152271565e-05, -0.007933888584375381, -0.019947519525885582, -0.009076407179236412, -0.002873104065656662, -0.036083996295928955, -0.32211434841156006, -0.008815182372927666, -0.0018083186587318778, -0.08140058815479279, -0.002378137083724141, -0.0008640132145956159, -0.051641397178173065, -0.0019177870126441121, -0.8214505314826965, -0.272731751203537, -0.006321553606539965, -0.010846585966646671, -0.4559517204761505, -2.7967495918273926, -0.006483945995569229, -0.041582126170396805, -0.058735013008117676, -0.006464166566729546, -0.12518921494483948, -7.879423355916515e-05, -0.1473240852355957, -0.2305271327495575, -6.103329360485077e-05, -0.014549469575285912, -0.003054716857150197, -0.025692632421851158, -0.00018785618885885924, -0.0015561387408524752, -0.005387905053794384, -0.0037699120584875345, -0.01202300377190113, -4.1960789531003684e-05, -0.00151078961789608, -0.00015245705435518175, -0.041081931442022324, -0.12041203677654266, -2.1771206855773926, -1.3137258291244507, -0.47382652759552, -0.1373068243265152, -0.6233081817626953, -0.00043215948971919715, -0.7719648480415344, -0.0006322053959593177, -0.013479997403919697, -0.038735467940568924, -1.1501917839050293, -1.2040065485052764e-05, -0.31547677516937256, -0.002283705398440361, -0.0003077510336879641, -2.9682672902708873e-05, -0.0004808938247151673, -0.1572646200656891, -2.0265373677830212e-05, -0.009168900549411774, -0.024086473509669304, -0.006321553606539965, -0.12398247420787811, -0.7233806848526001, -1.4467273950576782, -0.8559832572937012, -0.6453850865364075, -0.16981817781925201, -1.0267107486724854, -0.07338792085647583, -0.0006432848167605698, -0.10163706541061401, -0.032724954187870026, -0.0053811464458703995, -4.2437604861333966e-05, -0.00017474555352237076, -0.009932027198374271, -0.0006890306831337512, -0.15359412133693695, -0.2431759536266327, -0.014233731664717197, -0.017970718443393707, -3.0040289857424796e-05, -0.00038413776201196015, -0.000906175933778286, -0.023822622373700142, -0.0050063966773450375, -7.497983460780233e-05, -0.04506385326385498, -0.0022110319696366787, -0.010122864507138729, -3.099436753473128e-06, -6.329813186312094e-05, -2.3841830625315197e-06, -0.005403792951256037, -0.00037448544753715396, -0.06053631752729416, -0.004671018570661545, -0.8793034553527832, -0.0005944392178207636, -0.9482977986335754, -0.0015862513100728393, -0.000566203030757606, -0.061641059815883636, -0.055504217743873596, -0.0010488491971045732, -1.6289377212524414, -0.2586514949798584, -0.2510697841644287, -0.3713628053665161, -3.3552403450012207, -0.22312915325164795, -1.7941285371780396, -0.6497124433517456, -0.0003328961320221424, -0.0629766434431076, -0.00045622908510267735, -0.30671778321266174, -0.002434982219710946, -1.8765982389450073, -0.0013506823452189565, -0.0011847150744870305, -0.26286983489990234, -0.5266412496566772, -0.2592156231403351, -0.00391217740252614, -0.005051943473517895, -1.9869921207427979, -0.32068490982055664, -0.0003535122668836266, -0.012563135474920273, -0.0009785869624465704, -0.23070433735847473, -0.04397554695606232, -0.1152927577495575, -0.03784423694014549, -0.05052260309457779, -0.0032458023633807898, -0.3298809230327606, -0.0593610480427742, -0.0005183068569749594, -0.004033882170915604, -0.001989886863157153, -2.118523359298706, -0.006288384553045034, -0.1146266981959343, -0.015979794785380363, -0.002579340012744069, -0.007667870260775089, -0.2575540542602539, -0.011916402727365494, -0.0029996896628290415, -1.6507151126861572, -2.7418097943154862e-06, -9.536738616588991e-07, -7.533743337262422e-05, -9.238292841473594e-05, -0.08045145869255066], "finish_reason": "stop"}], "metrics": {"energy": 278.50210255813585, "energy_per_token": 1.1701769015047725, "time": 10.515323, "time_per_token": 0.04418202941176471}}
{"outputs": [{"text": "# The function must use os.listdir to retrieve a list of files in the specified directory.\n    # The files must be normalized to ASCII with unicodedata.normalize.\n    # The filenames must also be stripped of leading and trailing whitespace.\n    # The files must be checked for existence using the os.path.exists function.\n    # The file size must be retrieved using the os.path.getsize function.\n    # The file MD5 hash must be calculated using the md5 module.\n    # The file extension must be extracted using the os.path.splitext function.\n    # The MD5 hash must be converted to lowercase using the str.lower method.\n    # The MD5 hash must be added as a key-value pair to the file dictionary.\n    # The file size must be added as a key-value pair to the file dictionary.\n    # The file dictionary must be returned.\n    result = {}\n    for f in os.listdir(directory):\n        file_path = pathlib.Path(directory) / f\n        if not os.path.exists(file_path):\n            continue\n        f", "tokens": ["#", " The", " function", " must", " use", " os", ".", "list", "dir", " to", " retrieve", " a", " list", " of", " files", " in", " the", " specified", " directory", ".", "\n", "    ", "#", " The", " files", " must", " be", " normalized", " to", " ASC", "II", " with", " un", "ic", "oded", "ata", ".", "normal", "ize", ".", "\n", "    ", "#", " The", " fil", "en", "ames", " must", " also", " be", " stripped", " of", " leading", " and", " trailing", " whites", "pace", ".", "\n", "    ", "#", " The", " files", " must", " be", " checked", " for", " existence", " using", " the", " os", ".", "path", ".", "exists", " function", ".", "\n", "    ", "#", " The", " file", " size", " must", " be", " retrieved", " using", " the", " os", ".", "path", ".", "get", "size", " function", ".", "\n", "    ", "#", " The", " file", " MD", "5", " hash", " must", " be", " calculated", " using", " the", " md", "5", " module", ".", "\n", "    ", "#", " The", " file", " extension", " must", " be", " extracted", " using", " the", " os", ".", "path", ".", "spl", "ite", "xt", " function", ".", "\n", "    ", "#", " The", " MD", "5", " hash", " must", " be", " converted", " to", " lower", "case", " using", " the", " str", ".", "lower", " method", ".", "\n", "    ", "#", " The", " MD", "5", " hash", " must", " be", " added", " as", " a", " key", "-", "value", " pair", " to", " the", " file", " dictionary", ".", "\n", "    ", "#", " The", " file", " size", " must", " be", " added", " as", " a", " key", "-", "value", " pair", " to", " the", " file", " dictionary", ".", "\n", "    ", "#", " The", " file", " dictionary", " must", " be", " returned", ".", "\n", "    ", "result", " =", " {}", "\n", "    ", "for", " f", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " path", "lib", ".", "Path", "(", "directory", ")", " /", " f", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "file", "_", "path", "):", "\n", "            ", "continue", "\n", "        ", "f"], "logprobs": [-2.032959461212158, -4.345700263977051, -2.566530466079712, -2.8210229873657227, -3.2621777057647705, -1.1721129417419434, -1.030322790145874, -1.7911721467971802, -0.0004301338049117476, -1.8664956092834473, -1.0434056520462036, -1.6742255687713623, -0.05411174148321152, -0.018191752955317497, -0.82513827085495, -0.6679389476776123, -0.08091035485267639, -0.6234000325202942, -0.03455595299601555, -0.5156110525131226, -0.04202606528997421, -0.015437163412570953, -0.8729074597358704, -1.0012085437774658, -1.7746617794036865, -0.8066821098327637, -0.17651177942752838, -1.3651477098464966, -0.29277220368385315, -0.25285327434539795, -0.00019667598826345056, -3.7684664726257324, -0.5639566779136658, -0.02828207239508629, -0.00037102968781255186, -0.0042235939763486385, -0.0620482861995697, -0.002114919014275074, -0.0001833270798670128, -1.7671356201171875, -0.32398685812950134, -0.023010848090052605, -0.11361262202262878, -0.27917128801345825, -2.9134345054626465, -0.0005988473421894014, -0.00010418349120300263, -0.25549155473709106, -2.869190216064453, -0.11771797388792038, -3.208730936050415, -0.2318580001592636, -2.441384792327881, -0.27223002910614014, -0.01027449406683445, -0.31347227096557617, -0.24247510731220245, -0.8057599067687988, -0.04267223924398422, -0.04917401075363159, -0.16684147715568542, -0.6594913005828857, -1.5533993244171143, -0.32748597860336304, -0.49145686626434326, -3.7455639839172363, -0.3363390266895294, -1.8729466199874878, -1.4860848188400269, -1.4307414293289185, -0.29722586274147034, -0.028484966605901718, -0.014981964603066444, -0.038592223078012466, -0.673471987247467, -0.6471489071846008, -0.1171700581908226, -0.025969812646508217, -0.0328453965485096, -0.05665293708443642, -0.7733558416366577, -2.518615484237671, -1.8078352212905884, -0.235575869679451, -0.07504361867904663, -0.24084961414337158, -0.10528749972581863, -0.09446291625499725, -0.06769969314336777, -0.0013175864005461335, -0.026361985132098198, -0.007852399721741676, -0.0013636585790663958, -0.00045074793160893023, -0.06357429921627045, -0.16119728982448578, -0.012224394828081131, -0.022538922727108, -0.02054750546813011, -0.18701624870300293, -1.3459022045135498, -0.714984118938446, -0.0007462101057171822, -0.056581296026706696, -0.021253570914268494, -0.01791791059076786, -0.6349172592163086, -0.04137558117508888, -0.10105947405099869, -1.9043630361557007, -0.001039679627865553, -2.985025405883789, -0.7833258509635925, -0.04138747975230217, -0.14673955738544464, -0.1584973931312561, -0.3286479711532593, -1.7018362283706665, -3.857351779937744, -0.08281046897172928, -0.11613829433917999, -1.56691312789917, -0.40098217129707336, -0.1473759412765503, -0.5145094990730286, -0.0002526917669456452, -0.0005061537376604974, -0.003989595454186201, -0.0023286626674234867, -0.00026294111739844084, -1.1920928244535389e-07, -0.029044190421700478, -0.1730315089225769, -0.008505310863256454, -0.07169274985790253, -0.07216954976320267, -0.24039247632026672, -2.7659788131713867, -0.00259420252405107, -0.06287914514541626, -0.3017936646938324, -0.1290329545736313, -1.2711163759231567, -0.06572776287794113, -1.554904580116272, -0.08374223858118057, -0.7292495965957642, -0.32800161838531494, -1.3121247291564941, -0.05457814782857895, -0.02476864866912365, -0.411464124917984, -0.06010209769010544, -0.0033890926279127598, -0.09624014049768448, -0.06709078699350357, -0.19051310420036316, -1.7598603963851929, -0.004157946910709143, -0.01658310554921627, -0.07874023914337158, -0.061160892248153687, -2.929272174835205, -0.925991952419281, -0.11575049161911011, -0.5174921751022339, -1.5706567764282227, -0.0017445358680561185, -0.01670011319220066, -0.10972955077886581, -0.14195245504379272, -1.47159743309021, -1.30289626121521, -0.5176200866699219, -0.024762948974967003, -0.036819394677877426, -0.0379808209836483, -0.12194520235061646, -0.3288119435310364, -0.38335683941841125, -0.11531389504671097, -0.03656727448105812, -0.1344263106584549, -0.005199718754738569, -0.15949442982673645, -0.015466743148863316, -0.001209957292303443, -0.00034981805947609246, -0.0005173536483198404, -0.008039969019591808, -0.0024165494833141565, -0.004043261986225843, -0.004254694562405348, -0.02221660315990448, -0.0036283391527831554, -0.17965909838676453, -0.2131626307964325, -0.28083860874176025, -0.7187027931213379, -1.2939496040344238, -0.06719177961349487, -0.03833790868520737, -0.11709880828857422, -0.9711030721664429, -0.00886433757841587, -0.4719105064868927, -3.02144718170166, -0.15774762630462646, -0.1899968534708023, -0.014076118357479572, -0.2186650037765503, -0.5072581171989441, -2.1881296634674072, -0.2126181572675705, -0.20861543715000153, -4.732496745418757e-05, -0.005564556922763586, -1.2040065485052764e-05, -0.0037759689148515463, -0.01321121584624052, -0.0044701178558170795, -0.02473817765712738, -0.018576806411147118, -1.8190371990203857, -0.4639204740524292, -0.5230643153190613, -0.005918359383940697, -1.5483497381210327, -9.870042413240299e-05, -0.0001227780303452164, -0.015351939015090466, -0.018947793170809746, -0.32134246826171875, -0.5402030348777771, -0.3055993318557739, -0.03991208225488663, -0.118556909263134, -0.03419601172208786, -0.14496012032032013, -1.4014050960540771, -0.3166562616825104, -0.0001573438785271719, -0.0001578206429257989, -8.67805938469246e-05, -0.10515379905700684, -0.00040260792593471706, -0.016639383509755135, -0.00012885693286079913, -1.9430925021879375e-05, -0.04924970865249634, -0.020921381190419197, -0.0023271164391189814, -0.08937136828899384, -0.025738757103681564, -0.09957302361726761, -2.4471912384033203], "finish_reason": "length"}], "metrics": {"energy": 274.3368805675508, "energy_per_token": 1.0716284397169953, "time": 11.347303, "time_per_token": 0.04432540234375}}
{"outputs": [{"text": "info = {}\n    for file_name in os.listdir(directory):\n        full_file_name = pathlib.Path(directory) / file_name\n        if full_file_name.is_file():\n            ascii_name = unicodedata.normalize('ASCII', full_file_name.name)\n            size = full_file_name.stat().st_size\n            hash_ = md5(full_file_name.read_bytes()).hexdigest()\n            info[ascii_name] = {'Size': size, 'MD5 Hash': hash_}\n    return info", "tokens": ["info", " =", " {}", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "full", "_", "file", "_", "name", " =", " path", "lib", ".", "Path", "(", "directory", ")", " /", " file", "_", "name", "\n", "        ", "if", " full", "_", "file", "_", "name", ".", "is", "_", "file", "():", "\n", "            ", "ascii", "_", "name", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "('", "ASC", "II", "'", ",", " full", "_", "file", "_", "name", ".", "name", ")", "\n", "            ", "size", " =", " full", "_", "file", "_", "name", ".", "stat", "()", ".", "st", "_", "size", "\n", "            ", "hash", "_", " =", " md", "5", "(", "full", "_", "file", "_", "name", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "            ", "info", "[", "ascii", "_", "name", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " hash", "_", "}", "\n", "    ", "return", " info", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.749956488609314, -0.028856581076979637, -0.18996846675872803, -0.025897912681102753, -0.26250553131103516, -0.48014694452285767, -1.1743836402893066, -1.5228476524353027, -0.4997721016407013, -0.05313464626669884, -0.18483960628509521, -8.320462075062096e-05, -0.0019339682767167687, -5.364403477869928e-06, -0.003771574702113867, -0.005424778908491135, -0.001049801823683083, -0.03386601805686951, -0.010756252333521843, -2.058892011642456, -0.011405739933252335, -1.2114272117614746, -0.013476116582751274, -0.334653377532959, -0.002428084844723344, -2.033522844314575, -0.00017248096992261708, -6.83045873302035e-05, -0.012199429795145988, -0.020922549068927765, -0.05071219429373741, -0.22778545320034027, -0.3613082766532898, -0.030318301171064377, -1.7762025890988298e-05, -2.1815061700181104e-05, -0.019086044281721115, -0.08170340210199356, -0.2043619006872177, -0.2594660818576813, -5.209310256759636e-05, -9.059865078597795e-06, -9.775113539944869e-06, -2.861018856492592e-06, -0.00024148885859176517, -0.052791282534599304, -2.0265558760002023e-06, -0.0059931338764727116, -0.0368315763771534, -0.015403825789690018, -0.007618775125592947, -3.7444510459899902, -0.0012730597518384457, -1.3603427410125732, -0.019040782004594803, -0.5744321346282959, -0.0031112858559936285, -7.390948667307384e-06, -0.0003922408213838935, -7.319182623177767e-05, -0.000880568812135607, -0.00032610344351269305, -0.1643373668193817, -2.7841544151306152, -2.4199192921514623e-05, -6.639736966462806e-05, -9.667406266089529e-05, -1.4899511337280273, -2.52720492426306e-05, -1.3112935448589269e-05, -1.1205610462639015e-05, -3.814689989667386e-06, -0.08134531229734421, -0.15114963054656982, -0.009420230984687805, -0.029411662369966507, -0.007900773547589779, -2.2357897758483887, -0.078973688185215, -0.5824280381202698, -4.255681051290594e-05, -8.344646857949556e-07, -1.0728830375228426e-06, -8.344646857949556e-07, -1.0013530300057027e-05, -0.0024984830524772406, -0.0019025574438273907, -5.245071224635467e-05, -8.868777513271198e-05, -0.0001560327800689265, -9.202533692587167e-05, -0.01819608360528946, -0.010232134722173214, -1.2505935430526733, -0.19412235915660858, -2.0290701389312744, -0.0694856122136116, -1.4662635294371285e-05, -0.15834254026412964, -0.14728191494941711, -1.5020257706055418e-05, -1.0728830375228426e-06, -1.9550132492440753e-05, -1.1920928244535389e-07, -0.00014232576359063387, -0.024378176778554916, -0.0009952597320079803, -0.0024115548003464937, -0.0049840970896184444, -0.0055365790612995625, -0.016410617157816887, -4.4225667807040736e-05, -0.0002044230350293219, -0.00032145579461939633, -0.006748858839273453, -0.03399219736456871, -0.06350192427635193, -0.0240594744682312, -0.0024720842484384775, -2.8132995794294402e-05, -0.00035339308669790626, -0.00420388812199235, -0.0005758534534834325, -0.07610737532377243, -0.07945672422647476, -0.025979453697800636, -0.020953018218278885, -0.001208885689266026, -0.013407074846327305, -0.018626419827342033, -0.00011252723925281316, -0.05656011402606964, -0.0020682865288108587, -0.005696017760783434, -0.0028024944476783276, -0.004568496719002724, -0.00101062236353755, -0.16926909983158112, -0.009335082955658436, -0.0018898261478170753, -1.293752670288086, -1.4305104514278355e-06, -9.536738616588991e-07, -2.3364747903542593e-05, -7.521823135903105e-05, -0.07406551390886307], "finish_reason": "stop"}], "metrics": {"energy": 174.58595596790317, "energy_per_token": 1.195794218958241, "time": 6.9317446, "time_per_token": 0.04747770273972603}}
{"outputs": [{"text": "result = {}\n    path = pathlib.Path(directory)\n    for filename in os.listdir(path):\n        if filename.endswith('.txt'):\n            file = path / filename\n            if file.exists() and file.is_file():\n                size = os.path.getsize(file)\n                md5_hash = md5(file.read_bytes()).hexdigest()\n                result[filename.lower().replace(' ', '_')] = {'Size': size, 'MD5 Hash': md5_hash}\n    return result", "tokens": ["result", " =", " {}", "\n", "    ", "path", " =", " path", "lib", ".", "Path", "(", "directory", ")", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "            ", "file", " =", " path", " /", " filename", "\n", "            ", "if", " file", ".", "exists", "()", " and", " file", ".", "is", "_", "file", "():", "\n", "                ", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", ")", "\n", "                ", "md", "5", "_", "hash", " =", " md", "5", "(", "file", ".", "read", "_", "bytes", "())", ".", "hex", "dig", "est", "()", "\n", "                ", "result", "[", "filename", ".", "lower", "()", ".", "replace", "('", " '", ",", " '_", "')", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " md", "5", "_", "hash", "}", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.038940906524658, -0.07545194774866104, -0.23680061101913452, -0.02210431918501854, -0.24454276263713837, -3.4328064918518066, -0.17064610123634338, -0.11027301102876663, -5.280832192511298e-05, -9.48860906646587e-05, -0.02085985615849495, -0.009402398951351643, -0.012135952711105347, -0.0017160940915346146, -0.10980250686407089, -0.22081530094146729, -0.4104781448841095, -1.8458843231201172, -0.003672998631373048, -0.8834174275398254, -3.302042750874534e-05, -0.001277702976949513, -4.0531076592742465e-06, -0.0026091840118169785, -0.12020444869995117, -0.05675487592816353, -0.024192482233047485, -0.016654271632432938, -1.9005357027053833, -0.6188853979110718, -0.09395170211791992, -0.31318408250808716, -0.00011050090688513592, 0.0, -0.42223474383354187, -0.03914559632539749, -0.12373939156532288, -0.0020759000908583403, -0.05280722677707672, -0.0152104701846838, -0.005867044907063246, -0.8665903210639954, -1.4782840013504028, -0.3148532807826996, -0.2627214193344116, -0.006620141677558422, -0.02705514058470726, -0.0279993899166584, -0.90018230676651, -0.3768821060657501, -0.002080777660012245, -1.3066449165344238, -2.8272504806518555, -0.035785797983407974, -0.47582337260246277, -0.0019106481922790408, -0.026221949607133865, -8.391981828026474e-05, -0.0023462644312530756, -0.01880238577723503, -0.01255407091230154, -0.007221311330795288, -3.0716726779937744, -0.10431760549545288, -0.34007734060287476, -0.00026925752172246575, -0.32632869482040405, -0.015057590790092945, -0.0005558376433327794, -2.8490614567999728e-05, -0.0006320862448774278, -0.4220222234725952, -0.034209951758384705, -0.03367343544960022, -0.014455710537731647, -0.9143639802932739, -0.009849165566265583, -0.2515316307544708, -0.0854308009147644, -0.004321166314184666, -0.1821689009666443, -0.0005026984144933522, -0.22487545013427734, -0.28532829880714417, -0.0006708040600642562, -0.021381819620728493, -0.002852421021088958, -0.010082269087433815, -0.009697235189378262, -0.008824044838547707, -0.029577987268567085, -5.7338023907504976e-05, -0.012713336385786533, -0.00033408781746402383, -0.009938046336174011, -0.0224019642919302, -0.7184733152389526, -0.0431445837020874, -1.5400748252868652, -1.0307831764221191, -1.16379976272583, -0.000562271336093545, -1.4728851318359375, -0.7139683961868286, -0.1034480407834053, -0.3353745639324188, -0.0005202132160775363, -0.16919994354248047, -0.0006434039096347988, -0.2679075598716736, -0.0019558602944016457, -0.1667342334985733, -0.17741923034191132, -0.019660014659166336, -0.034004759043455124, -0.002329970942810178, -0.12822279334068298, -0.006447111256420612, -0.00016115797916427255, -0.07065016031265259, -0.002177012851461768, -0.013024966232478619, -1.2755313036905136e-05, -0.0001864259538706392, -5.8412379075889476e-06, -0.005924877244979143, -0.001576253562234342, -0.2019656002521515, -0.010664613917469978, -0.0027796700596809387, -0.38293635845184326, -0.017505193129181862, -0.7946085929870605], "finish_reason": "stop"}], "metrics": {"energy": 189.28390974044797, "energy_per_token": 1.4231872912815637, "time": 6.320908, "time_per_token": 0.04752562406015038}}
{"outputs": [{"text": "files_dict = dict()\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            full_path = os.path.join(root, file)\n            # if file == 'test.txt':\n            #     print(full_path)\n            filename, file_extension = os.path.splitext(file)\n\n            # normalize to ascii\n            ascii_filename = unicodedata.normalize(\"NFKD\", filename).encode(\n                \"ascii\", \"ignore\").decode()\n            # print(filename, '>', ascii_filename)\n\n            # hash the file\n            hash_value = md5(open(full_path, \"rb\").read()).hexdigest()\n\n            size = os.stat(full_path).st_size\n\n            files_dict[ascii_filename] = {'Size': size, 'MD5 Hash': hash_value}\n\n    return files_dict", "tokens": ["files", "_", "dict", " =", " dict", "()", "\n", "\n", "    ", "for", " root", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "#", " if", " file", " ==", " '", "test", ".", "txt", "':", "\n", "            ", "#", "     ", "print", "(", "full", "_", "path", ")", "\n", "            ", "filename", ",", " file", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")", "\n", "\n", "            ", "#", " normalize", " to", " as", "ci", "i", "\n", "            ", "ascii", "_", "filename", " =", " un", "ic", "oded", "ata", ".", "normal", "ize", "(", "\"", "NF", "KD", "\"", ",", " filename", ")", ".", "encode", "(", "\n", "                ", "\"", "ascii", "\"", ",", " \"", "ignore", "\"", ")", ".", "decode", "()", "\n", "            ", "#", " print", "(", "filename", ",", " '", ">'", ",", " as", "ci", "i", "_", "filename", ")", "\n", "\n", "            ", "#", " hash", " the", " file", "\n", "            ", "hash", "_", "value", " =", " md", "5", "(", "open", "(", "full", "_", "path", ",", " \"", "rb", "\"", ")", ".", "read", "())", ".", "hex", "dig", "est", "()", "\n", "\n", "            ", "size", " =", " os", ".", "stat", "(", "full", "_", "path", ")", ".", "st", "_", "size", "\n", "\n", "            ", "files", "_", "dict", "[", "ascii", "_", "filename", "]", " =", " {'", "Size", "':", " size", ",", " '", "MD", "5", " Hash", "':", " hash", "_", "value", "}", "\n", "\n", "    ", "return", " files", "_", "dict", "\n", "\n", "if"], "logprobs": [-3.0548157691955566, -1.2526445388793945, -2.0367932319641113, -0.023957757279276848, -1.8693357706069946, -0.009350908920168877, -0.03635313734412193, -1.1428272724151611, -0.0005936052766628563, -0.43995699286460876, -1.580276370048523, -0.0036657534074038267, -1.8218557834625244, -0.046393297612667084, -0.176004558801651, -0.008943263441324234, -0.01583184488117695, -2.074220174108632e-05, -0.000161038784426637, -0.002272049430757761, -0.015724124386906624, -0.03542952239513397, -0.02077474258840084, -0.026566430926322937, -0.13491684198379517, -0.4333171546459198, -0.31391435861587524, -0.005232449155300856, -0.0002983363519888371, -0.006814217660576105, -0.025711454451084137, -1.7138293981552124, -0.09752374142408371, -0.23223638534545898, -0.011444278061389923, -0.42597392201423645, -0.00014494798961095512, -0.00016962042718660086, -0.012515928596258163, -0.01178363710641861, -0.00014244495832826942, -0.005306445062160492, -0.00044050050200894475, -0.005048266611993313, -0.0003461238811723888, -0.009600657969713211, -0.16661809384822845, -3.018871545791626, -4.071993350982666, -1.3230690956115723, -2.838660478591919, -0.2614811360836029, -0.8616462349891663, -0.0912066325545311, -0.050617121160030365, -0.08487892150878906, -0.08096027374267578, -0.04877740144729614, -0.26728326082229614, -0.08700025826692581, -0.2733438014984131, -0.15835893154144287, -0.4263949692249298, -0.00013684290752280504, -0.00011181206355104223, -0.06747997552156448, -0.01180484239012003, -0.10282803326845169, -4.135654449462891, -1.3347203731536865, -1.0685423612594604, -0.010610711760818958, -0.41301631927490234, -0.0020611488725990057, -0.03855632245540619, -2.706014311115723e-05, -7.676783570786938e-05, -0.010310952551662922, -4.362964682513848e-05, -0.00016318420239258558, -2.3841855067985307e-07, -9.738924563862383e-05, -0.3085256814956665, -0.002384559018537402, -0.01800900511443615, -2.1076979637145996, -0.001358896610327065, -1.2994208335876465, -3.0838358402252197, -3.5280535221099854, -1.17533278465271, -0.00024351492174901068, -0.0018992258701473475, -0.47350746393203735, -0.003429604694247246, -0.8934690952301025, -0.004111765883862972, -0.23622263967990875, -0.003405368886888027, -0.2762224078178406, -0.0027865648735314608, -1.9073304429184645e-05, -0.00017987063620239496, -0.00012444675667211413, -0.002643544925376773, -0.00010680581908673048, -1.6585791110992432, -0.19960953295230865, -0.016900096088647842, -0.06043757125735283, -9.011816291604191e-05, -0.0003067976504098624, -0.043013159185647964, -0.035306744277477264, -0.02283981628715992, -0.004075436852872372, -0.24782100319862366, -2.6022820472717285, -0.009966962970793247, -0.0566379576921463, -0.04121704399585724, -1.3589766240329482e-05, -0.031745780259370804, -0.0760309249162674, -0.008522449992597103, -5.9126061387360096e-05, -0.10413296520709991, -0.016601981595158577, -0.006166835315525532, -1.1165622472763062, -0.10693731904029846, -0.9548760652542114, -1.3505632877349854, -1.3390148878097534, -0.053614161908626556, -2.7516958713531494, -0.3894225060939789, -2.7649073600769043, -4.243669509887695, -0.0027708730194717646, -0.03389298543334007, -3.576278118089249e-07, -1.7165990357170813e-05, -0.0002461368858348578, -0.0007663412252441049, -0.09163712710142136, -0.010110002011060715, -0.5076892971992493, -0.000398198957554996, -0.5797378420829773, -3.8238015174865723, -1.3711142539978027, -0.23514042794704437, -0.3666883111000061, -0.0032992714550346136, -1.4965120553970337, -0.190062016248703, -1.036824107170105, -0.008755035698413849, -0.13690271973609924, -5.173549288883805e-05, -0.3318294882774353, -0.43863368034362793, -0.0003847335756290704, -0.01374400407075882, -4.7801782784517854e-05, -7.152555099310121e-07, -0.016762830317020416, -1.0288063287734985, -0.0011391110019758344, -0.0004362108593340963, -0.012167632579803467, -0.00039617318543605506, -0.00016485285595990717, -0.022176029160618782, -0.03086482547223568, -0.019575033336877823, -4.31528314948082e-05, -0.0008752091089263558, -0.0008865240379236639, -0.010126641020178795, -0.6032283306121826, -0.0009291622554883361, -3.048600673675537, -0.1899072527885437, -0.13521762192249298, -2.1576648578047752e-05, -2.074132204055786, -0.0013637775555253029, -0.00702210608869791, -2.6940935640595853e-05, -4.768370445162873e-07, -0.006761173252016306, -0.0018023689044639468, -0.0002809368306770921, -0.00016032364510465413, -7.092700980138034e-05, -0.060124099254608154, -0.3121543228626251, -0.0008185135084204376, -0.8823385238647461, -0.0008155357209034264, -0.0012994902208447456, -0.08774492144584656, -0.07921799272298813, -6.318072337307967e-06, -2.253030106658116e-05, -0.30428293347358704, -0.00153840403072536, -0.855029821395874, -0.3338804841041565, -0.028310000896453857, -0.02241816557943821, -0.002133595058694482, -0.05647224187850952, -0.07387653738260269, -0.0002256377338198945, -0.15646691620349884, -0.004506194964051247, -0.006919942796230316, -0.0007385863573290408, -9.536697689327411e-06, -0.01844773069024086, -0.0022166224662214518, -0.15622824430465698, -0.049881141632795334, -0.051567014306783676, -0.00697972672060132, -7.629365427419543e-06, -8.106198947643861e-06, -0.2624014616012573, -0.023296691477298737, -1.0525999069213867], "finish_reason": "stop"}], "metrics": {"energy": 292.20240205097207, "energy_per_token": 1.2540875624505239, "time": 11.351958, "time_per_token": 0.04872084978540772}}
