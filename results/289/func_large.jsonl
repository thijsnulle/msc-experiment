{"outputs": [{"text": "X = MinMaxScaler().fit_transform(X)\n\n    kfold = KFold(n_splits=n_splits, shuffle=True)\n    histories = []\n\n    for train, test in kfold.split(X, y):\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        model.compile(\n            optimizer='adam',\n            loss='binary_crossentropy',\n            metrics=['accuracy']\n        )\n\n        history = model.fit(\n            X[train], y[train],\n            epochs=epochs,\n            batch_size=batch_size,\n            validation_data=(X[test], y[test]),\n            verbose=0\n        )\n\n        histories.append(history)\n\n    return histories", "tokens": ["X", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "model", ".", "compile", "(", "\n", "            ", "optim", "izer", "='", "adam", "'", ",", "\n", "            ", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", "\n", "            ", "metrics", "=['", "accuracy", "']", "\n", "        ", ")", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "\n", "            ", "X", "[", "train", "]", ",", " y", "[", "train", "]", ",", "\n", "            ", "epoch", "s", "=", "epoch", "s", ",", "\n", "            ", "batch", "_", "size", "=", "batch", "_", "size", ",", "\n", "            ", "validation", "_", "data", "=(", "X", "[", "test", "]", ",", " y", "[", "test", "])", ",", "\n", "            ", "verbose", "=", "0", "\n", "        ", ")", "\n", "\n", "        ", "hist", "ories", ".", "append", "(", "history", ")", "\n", "\n", "    ", "return", " histories", "\n", "\n", "#"], "logprobs": [-2.08113431930542, -0.2344759851694107, -0.5248780846595764, -2.312633478140924e-05, -2.9802276912960224e-06, -7.152555099310121e-07, -0.04329847916960716, -0.00019262365822214633, -0.00033480284037068486, -0.0006985607906244695, -1.7881377516459906e-06, -0.00034362133010290563, -0.010296912863850594, -0.051407139748334885, -0.06903956830501556, -1.2682759761810303, -0.00023767507809679955, -0.7757294774055481, -0.7509472370147705, -0.014937925152480602, -0.0005492847412824631, -4.6491513785440475e-06, -3.576278118089249e-07, -0.00010430268594063818, -0.011056349612772465, -1.168244216387393e-05, -0.0004602803383022547, -7.331102824537084e-05, -0.1302233636379242, -0.014671179465949535, -5.722029527532868e-06, -1.0251946150674485e-05, -1.2516897186287679e-05, -0.1778578907251358, -0.009553428739309311, -8.177422569133341e-05, -0.00599183002486825, -0.9209224581718445, -0.0074358596466481686, -0.311811238527298, -0.4299735724925995, -0.01656540110707283, -0.0010202685371041298, -0.0028165215626358986, -0.003778462763875723, -0.3693578541278839, -4.7444173105759546e-05, -0.0629364624619484, -0.057986535131931305, -0.15960367023944855, -0.04899786040186882, -0.0003771070914808661, -0.0016845572972670197, -1.764281842042692e-05, -4.160317621426657e-05, -4.410734163684538e-06, -0.0011086276499554515, -0.0005625095800496638, -0.1890449970960617, -0.0005339150666259229, -0.0022611068561673164, -0.0013947292463853955, -0.024032823741436005, -0.18850864470005035, -0.000746448349673301, -0.0427638478577137, -6.317892984952778e-05, -0.00017808281700126827, -1.9073468138230965e-06, -0.5054467916488647, 0.0, -3.576278118089249e-07, -0.5839531421661377, -0.009655913338065147, -0.016559185460209846, -0.0027531597297638655, -2.7418097943154862e-06, -1.9073468138230965e-06, -4.768370445162873e-07, -0.025097237899899483, -2.264974000354414e-06, -0.046041011810302734, -2.7418097943154862e-06, -3.504691630951129e-05, -0.16899187862873077, -0.0011654258705675602, -0.0013662775745615363, -0.06814923137426376, -0.1092226654291153, -0.0024222577922046185, -0.4647282361984253, -5.2927523938706145e-05, -0.009457310661673546, -0.00017772526189219207, -0.00016044282529037446, -2.50339189733495e-06, -1.3351351299206726e-05, -9.536738616588991e-07, -8.583032467868179e-06, -3.3378546504536644e-06, -0.011792943812906742, -5.960462772236497e-07, -9.417489309271332e-06, -0.009837361052632332, -0.007545068860054016, -0.0001714082609396428, -0.0006459057331085205, -0.0008765193051658571, -2.3841855067985307e-07, -0.0006046851049177349, -0.038995757699012756, -0.004329355899244547, -0.004204125609248877, -0.00026913834153674543, -0.29410189390182495, -0.0001308832288486883, -0.017119843512773514, -4.577531944960356e-05, -0.0002544794406276196, -0.003003255231305957, -2.217942953109741, -0.008514294400811195, -0.18261054158210754, -1.2874520507466514e-05, -0.787794828414917, -0.03755884990096092, -6.639736966462806e-05, -3.4450891689630225e-05, -0.09594549238681793, -0.00011467275908216834, -0.00047755756531842053, -0.009476086124777794, -0.001258058357052505, -1.0728830375228426e-06, -3.814689989667386e-06, -1.7881377516459906e-06, -0.00010954733443213627, -0.0004544417606666684, -0.0007244108128361404, -0.00024148885859176517, -7.688703772146255e-05, -0.02863742969930172, -0.05862990394234657, -0.02780601941049099, -0.013558795675635338, -0.0016077938489615917, -4.0531076592742465e-06, -5.543078441405669e-05, -0.015752874314785004, -0.0001397035230183974, -0.3789231479167938, -0.00045789722935296595, -0.0004383556661196053, -4.768360213347478e-06, -3.933898824470816e-06, -0.0008769956766627729, -0.20251590013504028, -0.0026430694852024317, -0.02175678126513958, -0.0011522090062499046, -0.000285584683297202, -0.002316531492397189, -0.0004936429904773831, -0.37435272336006165, -0.00017391123401466757, -1.1205610462639015e-05, -0.00011920218821614981, -0.0039222706109285355, -0.03427975997328758, -7.843663479434326e-05, -0.999538004398346, -5.960462772236497e-07, -0.0007800396997481585, -0.002710361499339342, -2.50339189733495e-06, -0.00046004203613847494, -0.008700084872543812, -9.619726915843785e-05, -0.33900246024131775, -8.940656698541716e-06, -7.867782187531702e-06, -8.225102646974847e-05, -0.0005259322933852673, -1.9073468138230965e-06, -7.033323527139146e-06, -0.03682514280080795, -0.0005671561229974031, -0.002888675546273589, -0.09091278165578842, -6.925819616299123e-05, -0.02724076807498932, -0.0008156548719853163, -0.0033579650335013866, -0.0001255195093108341, -0.001135300612077117, -0.00021145492792129517, -2.682172998902388e-05, -0.0005508335889317095, -7.033323527139146e-06, -6.318072337307967e-06, -0.000342191313393414, -0.6253116726875305, -0.0015456646215170622, -0.06597341597080231, -0.042283330112695694, -0.0009889479260891676, -0.03509717434644699, -0.08938641101121902, -0.0005967028555460274, -6.782778655178845e-05, -0.002552586607635021, -0.2034827470779419, -0.00063744728686288, -0.004605282098054886, -9.870042413240299e-05, -0.0006729483720846474, -0.00019059749320149422, -0.00038556772051379085, -0.005254980642348528, -0.0026359357871115208, -0.00048351517762057483, -0.008707648143172264, -0.0034249713644385338, -0.019372310489416122, -0.0002388668799540028, -0.1753271222114563, -0.001990719698369503, -2.271301746368408], "finish_reason": "stop"}], "metrics": {"energy": 817.7580984497075, "energy_per_token": 3.586658326533805, "time": 19.75118, "time_per_token": 0.08662798245614035}}
{"outputs": [{"text": "# Prepare the dataset\n    X_scaled = MinMaxScaler().fit_transform(X)\n\n    # Perform k-fold cross-validation\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    histories = []\n\n    for train_idx, val_idx in kf.split(X_scaled):\n        # Prepare the fold\n        X_train, X_val = X_scaled[train_idx], X_scaled[val_idx]\n        y_train, y_val = y[train_idx], y[val_idx]\n\n        # Create and compile the model\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n        # Train the", "tokens": ["#", " Prepare", " the", " dataset", "\n", "    ", "X", "_", "scal", "ed", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Perform", " k", "-", "fold", " cross", "-", "validation", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "idx", ",", " val", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "_", "scal", "ed", "):", "\n", "        ", "#", " Prepare", " the", " fold", "\n", "        ", "X", "_", "train", ",", " X", "_", "val", " =", " X", "_", "scal", "ed", "[", "train", "_", "idx", "]", ",", " X", "_", "scal", "ed", "[", "val", "_", "idx", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "val", " =", " y", "[", "train", "_", "idx", "]", ",", " y", "[", "val", "_", "idx", "]", "\n", "\n", "        ", "#", " Create", " and", " compile", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "        ", "#", " Train", " the"], "logprobs": [-1.0269503593444824, -3.098752498626709, -1.0599896907806396, -2.6110191345214844, -1.1883647441864014, -0.004080541897565126, -0.9621248841285706, -1.10575270652771, -0.395797461271286, -0.08470818400382996, -0.004311908036470413, -0.037511084228754044, -6.794906312279636e-06, -4.887569048150908e-06, 0.0, -0.01186810526996851, -0.00034195298212580383, -0.00022921319759916514, -0.0005136600811965764, -3.576272320060525e-06, -6.425174069590867e-05, -0.011116947047412395, -0.034048888832330704, -0.06997046619653702, -0.6864213347434998, -0.00021586472576018423, -0.09970369189977646, -2.384934425354004, -0.08719125390052795, -0.000773250067140907, -0.0019102912629023194, -0.0013893722789362073, -0.18675942718982697, -0.00028868322260677814, -0.031908947974443436, -0.0008287570672109723, -0.12962813675403595, -0.530769407749176, -0.0032568529713898897, -0.00023421882360707968, -1.7881377516459906e-06, -4.768370445162873e-07, -2.6940935640595853e-05, -0.0014592485968023539, -3.576272320060525e-06, -0.0002224197960458696, -1.4305012882687151e-05, -0.03825438395142555, -0.0049437666311860085, -2.622600959512056e-06, -2.3841830625315197e-06, -1.9073468138230965e-06, -0.21911446750164032, -0.015752170234918594, -4.1483970562694594e-05, -0.0040635643526911736, -0.5946311950683594, -0.00045622908510267735, -2.50339189733495e-06, -1.7881377516459906e-06, -5.411955135059543e-05, -0.05956941470503807, -0.008063028566539288, -0.0017867805436253548, -0.01029160339385271, -0.478771835565567, -0.6459859609603882, -0.01018434576690197, -0.0007023728103376925, -0.0009351171320304275, -0.02814103104174137, -0.3390331268310547, -0.00010287232726113871, -0.08961695432662964, -0.02252819947898388, -0.05466381832957268, -0.854800283908844, -0.041186727583408356, -0.744495689868927, -0.0001062098381225951, -1.4781842764932662e-05, -0.0001408954558428377, -0.0006473353132605553, -3.576272320060525e-06, -4.768370445162873e-07, -3.933898824470816e-06, -0.0004481264913920313, -0.0002917817619163543, -0.42601922154426575, -8.856858039507642e-05, -8.34461570775602e-06, -0.0996747761964798, -0.0012192443246021867, -0.01876518316566944, -0.9598693251609802, -1.503249168395996, -0.2108679711818695, -2.3304591178894043, -0.7619686722755432, -0.0008400725200772285, -0.10218978673219681, -0.0012852036161348224, -0.031841397285461426, -0.06786255538463593, -0.25636184215545654, -6.985420623095706e-05, -0.026340622454881668, -0.021623799577355385, -0.002432603854686022, -0.004510229919105768, -6.9141146923357155e-06, -1.0728830375228426e-06, -0.0002824861148837954, -7.10462118149735e-05, 0.0, -1.1920928244535389e-07, -0.0041859629563987255, -0.0003713871701620519, -0.00014757021563127637, -0.0004096384218428284, -1.0013530300057027e-05, -2.3841855067985307e-07, -6.794906312279636e-06, -2.9801878554280847e-05, 0.0, -2.3841855067985307e-07, -1.8596476365928538e-05, -0.00026663561584427953, -0.0006360176485031843, -0.00344635546207428, -0.0001454247540095821, -0.0001528146385680884, -0.002136925933882594, -5.471556869451888e-05, -4.291525328881107e-06, -3.933898824470816e-06, -6.794698856538162e-05, -0.004354756325483322, -0.0011273226700723171, -6.9141146923357155e-06, 0.0, -5.960462772236497e-07, -3.707340147229843e-05, -0.00048828122089616954, -9.107174992095679e-05, -0.0003082277253270149, -7.629103492945433e-05, 0.0, -5.960462772236497e-07, -3.6954811548639555e-06, -0.0007490689749829471, -0.08215052634477615, -0.0007121411035768688, -0.05433712527155876, -0.8112144470214844, -1.9071134328842163, -1.305696964263916, -0.02914203330874443, -0.07760515809059143, -0.020314259454607964, -0.0002926159941125661, -0.03803567588329315, -0.0003588747640606016, -0.04135122150182724, -2.729855441430118e-05, -6.568216485902667e-05, -1.4305104514278355e-06, -1.3412268161773682, -1.6689286894688848e-06, -3.015949550899677e-05, 0.0, -5.006777428206988e-06, -0.7819468975067139, -0.0020435419864952564, -0.01485171914100647, -0.007193261757493019, -3.4570634852570947e-06, -8.344646857949556e-07, -5.960462772236497e-07, -0.009240125305950642, -2.9802276912960224e-06, -0.09472308307886124, -3.099436753473128e-06, -2.9682672902708873e-05, -0.2056654393672943, -0.0007778956205584109, -0.0016236230731010437, -0.06732206791639328, -0.06580455601215363, -0.0015424508601427078, -0.16348153352737427, -1.597391747054644e-05, -0.0020443748217076063, -1.7881377516459906e-06, -0.07840875536203384, -0.04183207452297211, -0.01517548132687807, -1.4045783281326294, -3.814689989667386e-06, -0.021408306434750557, -0.00022098960471339524, -0.012632117606699467, -3.1470757676288486e-05, -0.010030342265963554, -2.539125671319198e-05, -0.005067480728030205, -0.0001941730733960867, -0.00040522945346310735, -1.5497195136049413e-06, -3.576272320060525e-06, -7.986990567587782e-06, -2.861018856492592e-06, -1.7881377516459906e-06, -0.004161508288234472, 0.0, -2.3841830625315197e-06, -0.00443273363634944, -0.002354351570829749, -0.00022301571152638644, -0.00043930893298238516, -0.0007014198345132172, 0.0, -0.0008825936238281429, -0.0269992146641016, -0.004215640481561422, -0.0013919912744313478, -0.0001357701694360003, -0.22043469548225403, -0.00629525538533926, -1.2159273865108844e-05, -0.00031442465842701495, -0.0018521074671298265, -0.2524219751358032, -1.1920922133867862e-06, -0.0601024329662323, -0.01426651980727911, -1.3351351299206726e-05, -1.823885577323381e-05, -0.09096654504537582, -0.0012311505852267146, -0.00011789103882620111, -9.536738616588991e-07, -3.2186455882765586e-06, -2.0265558760002023e-06, -0.0006356602534651756, -8.34461570775602e-06, -0.02675504982471466, -0.008176898583769798, -0.020902469754219055, -0.0011100566480308771, -0.00013350549852475524, -0.00323796016164124, -0.00021002470748499036, -0.002089461777359247, -0.18702177703380585, -0.08755283057689667], "finish_reason": "length"}], "metrics": {"energy": 898.6425911703108, "energy_per_token": 3.5103226217590264, "time": 22.0532, "time_per_token": 0.0861453125}}
{"outputs": [{"text": "# Prepare the data by scaling it to have zero mean and unit variance\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    # Split the data into k folds\n    kf = KFold(n_splits=n_splits)\n    histories = []\n    for train_index, test_index in kf.split(X_scaled):\n        X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # Define the model architecture\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        # Compile the model with appropriate loss function and metrics\n        model.compile(optimizer='adam', loss='binary_crossentropy'", "tokens": ["#", " Prepare", " the", " data", " by", " scaling", " it", " to", " have", " zero", " mean", " and", " unit", " variance", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Split", " the", " data", " into", " k", " folds", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "_", "scal", "ed", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "_", "scal", "ed", "[", "train", "_", "index", "]", ",", " X", "_", "scal", "ed", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " Define", " the", " model", " architecture", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "#", " Com", "pile", " the", " model", " with", " appropriate", " loss", " function", " and", " metrics", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'"], "logprobs": [-1.0269503593444824, -3.098752498626709, -1.0599896907806396, -0.3616218566894531, -3.0305962562561035, -0.43737906217575073, -0.47095099091529846, -0.7813634872436523, -2.029677629470825, -0.5925480127334595, -0.002790606813505292, -0.007007545791566372, -0.00753359217196703, -0.11313921213150024, -0.467235803604126, -0.00541576836258173, -0.4413708746433258, -0.0031125929672271013, -0.0025409336667507887, -0.0066162338480353355, -4.410734163684538e-06, -2.9802276912960224e-06, 0.0, -0.01231424231082201, -0.024453792721033096, -0.002849924610927701, -0.06017708033323288, -1.3751986026763916, -0.061889853328466415, -0.00036244976217858493, -0.0004700509598478675, -0.0013175864005461335, -1.311301275563892e-06, -4.851700214203447e-05, -0.0005741854547522962, -3.576272320060525e-06, -1.1920922133867862e-06, -6.007967749610543e-05, -0.002976632211357355, -0.01673833094537258, -0.010233079083263874, -0.10976864397525787, -0.00020966715237591416, -0.10166333615779877, -2.637495994567871, -0.06797349452972412, -0.04877115786075592, -0.23539519309997559, -0.1691765934228897, -0.5777846574783325, -0.4853678345680237, -0.00020728347590193152, -0.026865186169743538, -0.24483536183834076, -0.002146204235032201, -0.000271879427600652, -1.9073468138230965e-06, -2.3841855067985307e-07, -2.169585604860913e-05, -0.0007911174325272441, -5.364403477869928e-06, -0.0004371640970930457, -4.649054244509898e-05, -0.03974907100200653, -0.0059055606834590435, -2.861018856492592e-06, -5.483612312673358e-06, -9.536697689327411e-06, -1.1875660419464111, -0.005227350164204836, -0.9518604278564453, -0.8404250741004944, -0.03873879462480545, -0.0009656057227402925, -0.0011541141429916024, -0.07456386834383011, -1.8599932193756104, -0.12995688617229462, -0.007383203133940697, -0.053461164236068726, -0.23873281478881836, -0.00023100091493688524, -0.1360604166984558, -1.0728830375228426e-06, -1.311301275563892e-06, -0.00011657988943625242, -0.00037377048283815384, -1.811964830267243e-05, -4.768360213347478e-06, -3.3378546504536644e-06, -9.905801562126726e-05, -0.0003401654539629817, -0.519999086856842, -9.16677454370074e-05, -4.768370445162873e-07, -0.026479480788111687, -0.001077786204405129, -0.0361952967941761, -0.5758516192436218, -0.0009097489528357983, -0.0036353471223264933, -0.015134033747017384, -0.04320269450545311, -4.768360213347478e-06, -0.016417887061834335, -0.005586369428783655, -0.0007740838918834925, -0.0033528562635183334, -3.4570634852570947e-06, -6.794906312279636e-06, -9.786603914108127e-05, -9.858122211880982e-05, -2.3841855067985307e-07, -1.1920922133867862e-06, -0.005122038535773754, -0.000169382052263245, -0.00011848701251437888, -0.0006744970451109111, -5.364403477869928e-06, -1.1920928244535389e-07, -5.245195097813848e-06, -0.00010895135346800089, -3.576278118089249e-07, -5.960462772236497e-07, -5.364403477869928e-06, -0.00020680672605521977, -0.0004114258335903287, -0.0011091040214523673, -5.721882189391181e-05, -2.5510462364763953e-05, -0.00040820849244482815, -0.0006017066189087927, -1.6689286894688848e-06, -5.125986263010418e-06, -0.00010477947944309562, -0.0009351171320304275, -0.0006735440110787749, -2.8967437174287625e-05, -1.1920928244535389e-07, -2.3841830625315197e-06, -2.288792165927589e-05, -0.00018904806347563863, -0.00010609064338495955, -0.0006337541271932423, -1.2636104656849056e-05, -2.3841855067985307e-07, -1.1920928244535389e-07, -2.861018856492592e-06, -0.0005956306122243404, -0.029385963454842567, -0.0024806461296975613, -0.03189508989453316, -1.6881895065307617, -0.05452136695384979, -0.43939313292503357, -0.9172970056533813, -0.06955911219120026, -0.0003407612966839224, -0.035449542105197906, -0.00025340684805996716, -0.030698483809828758, -2.002696055569686e-05, -6.472854875028133e-05, -1.9073468138230965e-06, -0.39655670523643494, -3.576278118089249e-07, -4.076874756719917e-05, -0.6317400932312012, -0.0037186061963438988, -0.018808118999004364, -0.014944502152502537, -5.8412379075889476e-06, -1.4305104514278355e-06, -9.536738616588991e-07, -0.014640635810792446, -2.3841830625315197e-06, -0.050847481936216354, -2.622600959512056e-06, -4.3748852476710454e-05, -0.3016887605190277, -0.0011445883428677917, -0.0014988866169005632, -0.06677381694316864, -0.03044666349887848, -0.002957496326416731, -0.22835607826709747, -2.4437606043647975e-05, -0.0008405489497818053, -2.622600959512056e-06, -0.030178355053067207, -0.029590139165520668, -0.01748352125287056, -0.13605262339115143, -0.14206549525260925, -0.0020528212189674377, -2.3841855067985307e-07, -0.001852583372965455, -0.0002366024418734014, -0.02442982979118824, -2.8729025871143676e-05, -0.0055109718814492226, -2.074220174108632e-05, -0.0036747802514582872, -0.0002674698771443218, -0.0004924515378661454, -8.344646857949556e-07, -3.576278118089249e-07, -3.2186455882765586e-06, -2.9802276912960224e-06, -7.390948667307384e-06, -0.004475220572203398, 0.0, -2.50339189733495e-06, -0.006321553606539965, -0.0032477036584168673, -7.962863310240209e-05, -0.0004435985756572336, -0.0010353925172239542, 0.0, -0.00039748396375216544, -0.013675098307430744, -0.006295965984463692, -0.0009097489528357983, -6.139089964563027e-05, -0.046237487345933914, -0.00045503751607611775, -0.022339247167110443, -0.16758225858211517, -1.9073468138230965e-06, -0.06276652216911316, -0.0004144048143643886, -0.5041861534118652, -3.214651346206665, -0.3662792146205902, -0.07869958132505417, -0.2290228009223938, -2.8735575675964355, -0.022174863144755363, -0.00016830935783218592, -0.007397403009235859, -6.270212179515511e-05, -9.059865078597795e-06, -0.0024579332675784826, -0.2214886099100113, -8.344646857949556e-07, -0.2291196882724762, -0.016310347244143486, -1.1444026313256472e-05, -1.6093124941107817e-05, -0.41623029112815857, -0.004145837854593992, -0.000342191313393414, -3.576272320060525e-06, -5.364403477869928e-06, -2.50339189733495e-06, -0.0003859252028632909], "finish_reason": "length"}], "metrics": {"energy": 951.6216319618223, "energy_per_token": 3.7172719998508685, "time": 22.683084, "time_per_token": 0.088605796875}}
{"outputs": [{"text": "X = tf.keras.utils.normalize(X, axis=1)\n    X = np.array(X)\n    y = np.array(y)\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Dense(20, input_shape=(X.shape[1],), activation='relu'))\n    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    kf = KFold(n_splits=n_splits)\n    histories = []\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test,", "tokens": ["X", " =", " tf", ".", "keras", ".", "utils", ".", "normal", "ize", "(", "X", ",", " axis", "=", "1", ")", "\n", "    ", "X", " =", " np", ".", "array", "(", "X", ")", "\n", "    ", "y", " =", " np", ".", "array", "(", "y", ")", "\n", "    ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", " activation", "='", "relu", "'))", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "    ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " validation", "_", "data", "=(", "X", "_", "test", ","], "logprobs": [-2.08113431930542, -0.2344759851694107, -1.6585488319396973, -0.00010013079008786008, -0.600568950176239, -1.3232143828645349e-05, -0.7239437103271484, -1.3232143828645349e-05, -0.18371765315532684, -3.933898824470816e-06, -0.00023135847004596144, -0.016225550323724747, -0.42034661769866943, -0.000526289688423276, -0.047997914254665375, -0.008118250407278538, -0.039900053292512894, -0.10238823294639587, -0.1122407391667366, -1.403085708618164, -0.28608474135398865, -1.777031421661377, -8.105902816168964e-05, -0.8094261884689331, -0.05228840559720993, -0.021709540858864784, -0.11994225531816483, -0.09712617099285126, -0.021180396899580956, -0.09614453464746475, -0.0023890782613307238, -0.011997797526419163, -2.622600959512056e-06, -0.026320651173591614, -0.003830834524706006, -0.0014368696138262749, -0.012298463843762875, -0.014739898964762688, -0.3717164993286133, -2.3947620391845703, -0.007054776884615421, -0.045527663081884384, -2.6225699912174605e-05, -3.099393507000059e-05, -2.7418097943154862e-06, -1.7645542621612549, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.7355284094810486, -0.003863253630697727, -0.010959785431623459, -0.025813691318035126, -0.000376034586224705, -7.497983460780233e-05, -0.00029118589009158313, -0.015855195000767708, -7.152531907195225e-06, -7.510157047363464e-06, -7.510157047363464e-06, -0.014053785242140293, -4.172316494077677e-06, -0.08449918776750565, -1.168244216387393e-05, -0.0005727558163926005, -0.11191399395465851, -0.004187031649053097, -0.007520459592342377, -0.7928265333175659, -1.6689286894688848e-06, -0.020427444949746132, -0.13725726306438446, -0.09532754123210907, -0.03259053826332092, -2.884823152271565e-05, -0.0021671399008482695, -0.0028442188631743193, -0.011487175710499287, -0.002476246329024434, -0.044561635702848434, -0.00020859450160060078, -0.0015423318836838007, -0.2586253583431244, -0.0019613332115113735, -0.004011798650026321, -0.005677526351064444, -0.0004996005445718765, -0.0015564957866445184, -5.245195097813848e-06, -2.1815061700181104e-05, -5.709961988031864e-05, -0.0002379134384682402, -1.5497195136049413e-06, -1.7165990357170813e-05, -2.3841855067985307e-07, -8.22540732769994e-06, -2.3841830625315197e-06, -0.003015021560713649, 0.0, -1.168244216387393e-05, -0.010833260603249073, -0.00586443766951561, -0.0010927902767434716, -0.027667462825775146, -0.0031475310679525137, -5.960462772236497e-07, -0.0006199345225468278, -0.005149079021066427, -0.019320279359817505, -0.00997605174779892, -3.433168603805825e-05, -0.0005465444410219789, -0.0011032691691070795, -0.4546617567539215, -8.34461570775602e-06, -0.0656953901052475, -0.039013758301734924, -0.00021824838768225163, -5.578839045483619e-05, -0.02009100653231144, -0.0055965641513466835, -0.0010156240314245224, -4.291525328881107e-06, -5.602820692729438e-06, -4.291525328881107e-06, -0.0035106237046420574, -4.207999518257566e-05, -0.006205813027918339, -0.005392410326749086, -0.0998954102396965, -0.0027757470961660147, -0.0009735850035212934, -0.2407279908657074, -0.2904180586338043, -0.15427397191524506, -0.0008205384365282953, -0.0009196343016810715, -1.2278481335670222e-05, -4.768370445162873e-07, -2.9444261599564925e-05, -0.0007074952009133995, -6.318072337307967e-06, -0.0001267114421352744, -0.0001554368354845792, -0.04197759926319122, -0.01390507910400629, -1.4543427823809907e-05, -1.6093124941107817e-05, -6.556489552167477e-06, -0.6435035467147827, -0.007755525875836611, -0.009483525529503822, -1.523667573928833, -0.019306013360619545, -0.0007644353318028152, -0.004733310081064701, -0.0007578838267363608, -0.040874138474464417, -0.0420195497572422, -0.01117683481425047, -0.1399598866701126, -0.17288069427013397, -0.0003164505760651082, -0.19594568014144897, -1.6689286894688848e-06, -1.5497195136049413e-06, -5.98412734689191e-05, -0.0008303055074065924, -1.537788011773955e-05, -2.861018856492592e-06, -2.0265558760002023e-06, -0.0002401778765488416, -0.0009121309849433601, -0.4014812409877777, -0.0002004899288294837, -0.0016692051431164145, -0.047305259853601456, -0.0006529344827868044, -0.00014506718434859067, -0.006521135102957487, -0.02371191792190075, -7.033323527139146e-06, -0.00893357489258051, -0.0058060092851519585, -0.0010656398953869939, -0.0006787856691516936, -0.0014396075857803226, -2.3841855067985307e-07, -5.960462772236497e-07, -0.009652135893702507, -0.0003355178632773459, -0.00013565097469836473, -3.576214658096433e-05, -5.936446541454643e-05, -5.960462772236497e-07, -7.152555099310121e-07, -1.597391747054644e-05, -0.00014304091746453196, -7.426462980220094e-05, -0.0013362773461267352, -1.7046782886609435e-05, -6.556489552167477e-06, -0.00011395759065635502, -9.452849917579442e-05, -8.344646857949556e-07, -6.6756979322235566e-06, -7.4741430580616e-05, -0.0006985607906244695, -8.67805938469246e-05, -6.198863957251888e-06, -1.1920928244535389e-07, -2.0265558760002023e-06, -4.541770613286644e-05, -0.00035684893373399973, -0.00010024998482549563, -8.106198947643861e-06, -0.0009765623253770173, -3.576278118089249e-07, -1.1920922133867862e-06, -4.410734163684538e-06, -5.590759246842936e-05, -0.009690742008388042, -2.2872934341430664, -0.0002366024418734014, -0.0003271759778726846, -1.1205610462639015e-05, -7.748573807475623e-06, -0.0003084660565946251, -0.03438469395041466, -0.000710592488758266, -1.3589766240329482e-05, -0.00037579628406092525, -0.003838553326204419, -8.821448318485636e-06, -9.536738616588991e-07, -0.0005940818227827549, -0.3393278121948242, -0.0004396664153318852, -0.0047572762705385685, -1.156323378381785e-05, -0.00259515387006104, -0.19379213452339172, -6.318072337307967e-06, -1.0251946150674485e-05, -0.00016711745411157608, -0.0020258158911019564, -3.576272320060525e-06, -6.437280717364047e-06, -0.06899528950452805, -0.24299216270446777, -6.890059739816934e-05, -0.02656492218375206, -0.000619696278590709, -0.00037043384509161115, -8.67805938469246e-05, -5.23315102327615e-05, -7.915183232398704e-05], "finish_reason": "length"}], "metrics": {"energy": 907.174306100845, "energy_per_token": 3.543649633206426, "time": 22.064672, "time_per_token": 0.086190125}}
{"outputs": [{"text": "# Initialize the K-fold cross validation\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    # Scale the data\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    # Initialize an empty list to store the training histories\n    training_histories = []\n\n    # Loop over the splits and train the model for each one\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # Initialize the model\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        # Compile the model\n        model.compile(", "tokens": ["#", " Initialize", " the", " K", "-", "fold", " cross", " validation", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "\n", "    ", "#", " Scale", " the", " data", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " training", " histories", "\n", "    ", "training", "_", "hist", "ories", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " the", " splits", " and", " train", " the", " model", " for", " each", " one", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " Initialize", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "#", " Com", "pile", " the", " model", "\n", "        ", "model", ".", "compile", "("], "logprobs": [-1.0269503593444824, -1.5635218620300293, -0.8970474600791931, -0.7675232887268066, -1.5622307062149048, -0.04717324301600456, -0.08743617683649063, -1.2589032649993896, -0.4533003270626068, -0.0016349294455721974, -0.02240021526813507, -0.9258458018302917, -0.0014756753807887435, -0.0011211306555196643, -3.516612196108326e-05, -3.576278118089249e-07, -8.701899787411094e-05, -0.0018995827995240688, -7.033323527139146e-06, -5.1020273531321436e-05, -1.728519782773219e-05, -0.04638646915555, -0.011415875516831875, -4.172316494077677e-06, -2.9802276912960224e-06, -1.6689286894688848e-06, -0.2958247661590576, -0.009610221721231937, -0.00032050241134129465, -0.006535228807479143, -0.7536229491233826, -0.0006781900301575661, -6.318072337307967e-06, -1.5497195136049413e-06, -0.0002426806604489684, -0.18913716077804565, -0.010173135437071323, -0.002931109629571438, -0.006483945995569229, -0.33054566383361816, -0.00015817821258679032, -0.09414929896593094, -1.626855492591858, -0.11497338116168976, -0.6567644476890564, -0.995952308177948, -0.0002637753786984831, -0.11468420177698135, -0.0009652484441176057, -0.0010170531459152699, -0.00025340684805996716, -2.264974000354414e-06, -3.814689989667386e-06, -7.152555099310121e-07, -0.006009367760270834, -0.017997413873672485, -0.005099266767501831, -0.07875985652208328, -0.2856844663619995, -0.0046096728183329105, 0.0, -8.583032467868179e-06, -0.0002047805901383981, -8.106198947643861e-06, -4.565611743601039e-05, -1.9550132492440753e-05, -0.0018847098108381033, -0.012440580874681473, -0.005711308214813471, -0.03283720463514328, -7.533743337262422e-05, -0.28467270731925964, -1.0617866516113281, -2.2392990589141846, -0.00860530324280262, -0.01886356994509697, -0.07398569583892822, -0.05317341908812523, -0.11716464906930923, -0.6974588632583618, -1.6642117500305176, -0.3791293501853943, -0.00010227633902104571, -1.9303536415100098, -0.000783613184466958, -0.06268669664859772, -0.001631121034733951, -0.007144971750676632, -0.004604926332831383, -0.0005616756388917565, -0.030632469803094864, -0.00011550712952157483, -0.13488027453422546, -0.855675458908081, -0.45294517278671265, -0.804743766784668, -1.6512047052383423, -2.8559865951538086, -0.14454062283039093, -0.10170479863882065, -0.11123352497816086, -1.3567678928375244, -0.0005691815749742091, -1.8658571243286133, -0.00902596302330494, -0.00020895205670967698, -0.003972616046667099, -0.08183049410581589, -0.1018475741147995, -0.2047954946756363, -0.0005378468777053058, -0.23272985219955444, -2.9802276912960224e-06, -5.006777428206988e-06, -0.00010632903286023065, -0.0017879704246297479, -1.9430925021879375e-05, -1.0728830375228426e-06, -3.933898824470816e-06, -0.007533000782132149, -0.0016807490028440952, -0.27036410570144653, -0.00019739109848160297, -0.08903869986534119, -0.881828784942627, -0.0007403731578961015, -0.00040975757292471826, -0.013937878422439098, -0.029946649447083473, -7.271740287251305e-06, -0.012031720019876957, -0.01044308952987194, -0.001637547742575407, -0.0007061848300509155, -0.000856747676152736, -5.960462772236497e-07, -4.768360213347478e-06, -0.005657731089740992, -0.0002441108226776123, -0.00014494798961095512, -1.2636104656849056e-05, -0.0001380348257953301, -5.960462772236497e-07, -1.0132738680113107e-05, -6.318072337307967e-06, -0.0002706876548472792, -0.0004772001120727509, -0.0008758046315051615, -6.270212179515511e-05, -1.3828182090946939e-05, -0.00046921687317080796, -0.0029894683975726366, -4.6491513785440475e-06, -1.07287787614041e-05, -0.00017414960893802345, -0.0009837078396230936, -0.0004266782198101282, -0.00011622230522334576, -2.3841855067985307e-07, -3.576278118089249e-07, -2.3603161025675945e-05, -0.0003116837178822607, -0.00010871296399272978, -1.168244216387393e-05, -0.00016890530241653323, 0.0, -9.179073458653875e-06, -3.814689989667386e-06, -0.00015889335190877318, -0.03111700341105461, -0.002886654809117317, -0.05211178585886955, -1.1409022808074951, -0.042953092604875565, -0.2307678461074829, -0.22024552524089813, -0.0003491030656732619, -0.025801608338952065, -0.00035363141796551645, -0.030332641676068306, -2.706014311115723e-05, -0.00014244495832826942, -1.4305104514278355e-06, -0.2833874523639679, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.6576525568962097, -0.00471942825242877, -0.02900620736181736, -0.014823765493929386, -3.814689989667386e-06, -8.344646857949556e-07, -8.344646857949556e-07, -0.01916136033833027, -2.0265558760002023e-06, -0.04852850362658501, -3.3378546504536644e-06, -3.075552376685664e-05, -0.31036123633384705, -0.000479344860650599, -0.0010063351364806294, -0.08458408713340759, -0.07082253694534302, -0.0022963127121329308, -0.6141058206558228, -4.494089080253616e-05, -0.001423894427716732, -6.079655122448457e-06, -0.028817202895879745, -0.08223342895507812, -0.014419754967093468, -0.17810313403606415, -0.0005678709712810814, -0.0027821664698421955, -3.576278118089249e-07, -0.0015230495482683182, -0.00016664070426486433, -0.02186245657503605, -3.8265450712060556e-05, -0.009671851992607117, -2.5748875486897305e-05, -0.004227154888212681, -0.00036590558011084795, -0.00026973424246534705, -1.0728830375228426e-06, -1.4305012882687151e-05, -3.814689989667386e-06, -2.0265558760002023e-06, -3.814689989667386e-06, -0.0021528657525777817, 0.0, -2.7418097943154862e-06, -0.005611381959170103, -0.0029385979287326336, -0.0001867835089797154, -0.00033682872890494764, -0.0005106813623569906, -1.1920928244535389e-07, -0.0006387577159330249, -0.021879950538277626, -0.010036597028374672, -0.0011804286623373628, -3.6477376852417365e-05, -0.031024321913719177, -0.0006238659843802452, -0.016040096059441566, -0.08347710967063904, -5.364403477869928e-06, -0.01042846031486988, -0.00040082051418721676, -0.11749010533094406, -5.936446541454643e-05, -0.006235430482774973, -2.276871418871451e-05, -4.887569048150908e-06, -0.0004159538948442787], "finish_reason": "length"}], "metrics": {"energy": 926.6780734004976, "energy_per_token": 3.619836224220694, "time": 22.05713, "time_per_token": 0.0861606640625}}
{"outputs": [{"text": "# Prepare data\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    # Normalize data\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    # Initialize a list to store the history for each fold\n    histories = []\n\n    # Loop over each fold and train the model\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # Create the model\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        # Compile the model\n        model.compile(optimizer='adam', loss", "tokens": ["#", " Prepare", " data", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "\n", "    ", "#", " Normal", "ize", " data", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Initialize", " a", " list", " to", " store", " the", " history", " for", " each", " fold", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " each", " fold", " and", " train", " the", " model", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " Create", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "#", " Com", "pile", " the", " model", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss"], "logprobs": [-1.0269503593444824, -3.098752498626709, -1.4797837734222412, -0.8184543251991272, -0.005380316637456417, -2.0856504440307617, -0.40707162022590637, -0.001971564954146743, -0.0007335832342505455, -5.364403477869928e-06, -3.576278118089249e-07, -9.572047565598041e-05, -0.0017309696413576603, -1.4185804502631072e-05, -9.023735765367746e-05, -3.8742269680369645e-05, -0.08713400363922119, -0.010427516885101795, -3.933898824470816e-06, -5.125986263010418e-06, -1.7881377516459906e-06, -0.5022054314613342, -0.018721075728535652, -7.211902266135439e-05, -0.007597361691296101, -0.6195130944252014, -0.00044526674901135266, -4.768360213347478e-06, -7.152555099310121e-07, -0.00015484087634831667, -0.1207219660282135, -0.012527701444923878, -0.0032965384889394045, -0.018422100692987442, -2.4776968955993652, -0.00031680811662226915, -0.3233671188354492, -2.023911476135254, -0.04343568533658981, -0.8958054184913635, -0.19091659784317017, -0.0006717570940963924, -0.13772344589233398, -0.001134705264121294, -0.0011318475008010864, -0.00032443503732793033, -2.3841830625315197e-06, -5.245195097813848e-06, 0.0, -0.005645640194416046, -0.014328451827168465, -0.00594964437186718, -0.05725933983922005, -0.27863696217536926, -0.0051231058314442635, -1.1920928244535389e-07, -4.172316494077677e-06, -0.00018356545479036868, -6.794906312279636e-06, -6.532455881824717e-05, -2.1576648578047752e-05, -0.0036916458047926426, -0.020850634202361107, -0.011482462286949158, -0.09723065793514252, -5.972207145532593e-05, -0.45691099762916565, -1.304495096206665, -3.002528667449951, -0.11849019676446915, -0.03029690496623516, -0.07947324216365814, -0.41682904958724976, -1.6304168701171875, -1.2039320468902588, -0.03670414537191391, -0.02932206355035305, -0.008721474558115005, -8.34430247778073e-05, -0.3052040636539459, -0.01554256770759821, -0.0021356174256652594, -0.0012819890398532152, -0.0011815002653747797, -0.02186886966228485, -9.131014667218551e-05, -0.6533812880516052, -1.2151415348052979, -0.5474467277526855, -0.7402760982513428, -0.08538307994604111, -2.1362922191619873, -0.10763238370418549, -0.1860218495130539, -0.05221882462501526, -0.13744689524173737, -0.0002252801787108183, -0.004706139676272869, -0.09089351445436478, -0.046262528747320175, -0.4423083961009979, -0.0002044230350293219, -0.2152102142572403, -1.1920922133867862e-06, -3.814689989667386e-06, -5.006664650863968e-05, -0.0007773000397719443, -3.58813522325363e-05, -1.9073468138230965e-06, -5.483612312673358e-06, -0.001327943871729076, -0.000704159727320075, -0.14445871114730835, -0.0003387354372534901, -0.04119279235601425, -0.3632839024066925, -0.0006185048841871321, -0.0021131346002221107, -0.00895602349191904, -0.04596996679902077, -9.059865078597795e-06, -0.007332200650125742, -0.004750394728034735, -0.0009433348895981908, -0.0008538890979252756, -0.000311802898067981, -3.576278118089249e-07, -3.814689989667386e-06, -0.004650135524570942, -0.0002648479712661356, -0.00010799778101500124, -1.5616295058862306e-05, -0.00030155404238030314, -7.152555099310121e-07, -2.7418097943154862e-06, -7.033323527139146e-06, -0.00033456450910307467, -0.0006076634745113552, -0.0005916990339756012, -4.0411134250462055e-05, -1.8596476365928538e-05, -0.0005385617259889841, -0.0031275665387511253, -4.291525328881107e-06, -3.2305197237292305e-05, -7.509902934543788e-05, -0.0012194823939353228, -0.0003847335756290704, -7.915183232398704e-05, -1.1920928244535389e-07, -7.152555099310121e-07, -2.9682672902708873e-05, -0.00034874555421993136, -0.00011240804451517761, -1.2636104656849056e-05, -0.00038556772051379085, 0.0, -1.5616295058862306e-05, -3.4570634852570947e-06, -0.0003830652858596295, -0.01880308799445629, -0.0023495943751186132, -0.17716942727565765, -0.9823517799377441, -0.7987738847732544, -0.5183320641517639, -0.24967826902866364, -0.0002233732520835474, -0.01243104413151741, -0.00016592556494288146, -0.048312827944755554, -1.8596476365928538e-05, -6.69933797325939e-05, -1.9073468138230965e-06, -1.13460373878479, -1.1920922133867862e-06, -3.135155202471651e-05, 0.0, -2.3841855067985307e-07, -0.8053669333457947, -0.0016990762669593096, -0.01996668241918087, -0.012119228951632977, -2.9802276912960224e-06, -5.960462772236497e-07, -7.152555099310121e-07, -0.005885295569896698, -2.50339189733495e-06, -0.06312595307826996, -2.145764938177308e-06, -2.3841574147809297e-05, -0.15347562730312347, -0.0006148116663098335, -0.0014250847743824124, -0.07063371688127518, -0.048450712114572525, -0.0021893836092203856, -0.11899568885564804, -1.7404405298293568e-05, -0.0010982679668813944, -2.0265558760002023e-06, -0.05531541630625725, -0.09883484989404678, -0.010586295276880264, -0.23444929718971252, -0.00036864637513644993, -0.0030935786198824644, -3.576278118089249e-07, -0.0010780243901535869, -0.00017951308109331876, -0.02073376066982746, -2.5629668016335927e-05, -0.0084827346727252, -1.1205610462639015e-05, -0.003940556664019823, -0.0002571013756096363, -0.000296310376143083, -5.960462772236497e-07, -3.2186455882765586e-06, -1.2755313036905136e-05, -2.622600959512056e-06, -1.0728830375228426e-06, -0.003333252388983965, 0.0, -2.622600959512056e-06, -0.005813713185489178, -0.002905197674408555, -0.00020144341397099197, -0.00034457468427717686, -0.0006809299811720848, 0.0, -0.0005066303419880569, -0.01631797105073929, -0.005148011725395918, -0.0007911174325272441, -5.9602869441732764e-05, -0.036141373217105865, -0.00043764073052443564, -0.0766964703798294, -0.17503157258033752, -1.9073468138230965e-06, -0.0726013332605362, -0.0002851079625543207, -0.1345997154712677, -4.482168878894299e-05, -0.005676222499459982, -1.9907753085135482e-05, -7.867782187531702e-06, -0.0003631647559814155, -0.20685242116451263, -1.311301275563892e-06, -0.12861648201942444, -0.011042908765375614, -1.0847986231965479e-05, -1.5258672647178173e-05, -0.22693151235580444], "finish_reason": "length"}], "metrics": {"energy": 939.8239720058439, "energy_per_token": 3.6711873906478276, "time": 22.27104, "time_per_token": 0.08699625}}
{"outputs": [{"text": "# Define the model\n    def create_model():\n        model = tf.keras.models.Sequential()\n        model.add(tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)))\n        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n        return model\n\n    # Perform k-fold cross-validation\n    kfold = KFold(n_splits=n_splits, shuffle=True)\n    histories = []\n    for train, test in kfold.split(X, y):\n        model = create_model()\n        x_train, y_train, x_test, y_test = X[train], y[train], X[test], y[test]\n        scaler = MinMaxScaler()\n        x_train_scaled = scaler.fit_transform(x_train)\n        history = model.fit(x_train_scaled, y", "tokens": ["#", " Define", " the", " model", "\n", "    ", "def", " create", "_", "model", "():", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", ")))", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "        ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "='", "adam", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "return", " model", "\n", "\n", "    ", "#", " Perform", " k", "-", "fold", " cross", "-", "validation", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " create", "_", "model", "()", "\n", "        ", "x", "_", "train", ",", " y", "_", "train", ",", " x", "_", "test", ",", " y", "_", "test", " =", " X", "[", "train", "]", ",", " y", "[", "train", "]", ",", " X", "[", "test", "]", ",", " y", "[", "test", "]", "\n", "        ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "        ", "x", "_", "train", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "x", "_", "train", ")", "\n", "        ", "history", " =", " model", ".", "fit", "(", "x", "_", "train", "_", "scal", "ed", ",", " y"], "logprobs": [-1.0269503593444824, -3.045531749725342, -0.31614968180656433, -1.3045709133148193, -1.2493910789489746, -0.0033326582051813602, -1.3176063299179077, -0.05916948989033699, -0.0003033416287507862, -0.0037997206673026085, -0.018743891268968582, -0.00022921319759916514, -0.009254179894924164, -0.05791836231946945, -0.000858415151014924, -0.05950797349214554, -1.2040065485052764e-05, -1.2278481335670222e-05, -9.536738616588991e-07, -0.5328429341316223, -4.768370445162873e-07, -6.198863957251888e-06, 0.0, 0.0, -0.24917608499526978, -0.0032503176480531693, -0.010102921165525913, -0.006521490402519703, -2.4437606043647975e-05, -5.483612312673358e-06, -3.9457496313843876e-05, -0.0031898352317512035, -3.0874729418428615e-05, -1.1920922133867862e-06, -1.1086402082582936e-05, -0.016879934817552567, -8.344646857949556e-07, -0.02950912155210972, -2.7418097943154862e-06, -4.8397800128441304e-05, -0.20973581075668335, -0.0009857324184849858, -0.001076952670700848, -0.35077762603759766, -0.03154493495821953, -0.0010836211731657386, -0.20096831023693085, -7.879423355916515e-05, -0.0015748253790661693, -6.6756979322235566e-06, -0.0985746681690216, -0.007355749607086182, -0.011167050339281559, -0.009783296845853329, -4.6491513785440475e-06, -0.0035497054923325777, -0.00032729512895457447, -0.0026581690181046724, -0.0004408579843584448, -0.03278748318552971, -0.004866778384894133, -0.00012635385792236775, -0.00032872517476789653, -8.344646857949556e-07, -3.576278118089249e-07, -2.2172682292875834e-05, -2.825220326485578e-05, -4.768370445162873e-07, -2.753696753643453e-05, -4.768370445162873e-07, -2.264974000354414e-06, -1.1920928244535389e-07, -0.0041514174081385136, 0.0, -1.1920922133867862e-06, -0.002275855513289571, -0.0018468719208613038, -7.688703772146255e-05, -0.0004661188868340105, -0.0003692421887535602, 0.0, -0.0009681067313067615, -0.004935937467962503, -0.011494600214064121, -0.026991672813892365, -0.0001070442158379592, -7.581423415103927e-05, -0.00019774865359067917, -1.2375330924987793, -0.01497116032987833, -0.000644237850792706, -3.576278118089249e-07, -4.6491513785440475e-06, -2.0265558760002023e-06, -1.5497195136049413e-06, -2.9802276912960224e-06, -0.00520351342856884, -0.04394657164812088, -0.03391384333372116, -0.0016231469344347715, -2.634490556374658e-05, -0.0004371640970930457, -0.0012854416854679585, -0.03480604663491249, -0.00027414379292167723, -0.0003256267518736422, -0.005823550280183554, -0.0022361292503774166, -4.708655978902243e-05, -0.00013267113536130637, -0.023696085438132286, -0.0006625840906053782, -0.06075195595622063, -1.566568374633789, -0.047747913748025894, -0.0005281960475258529, -0.00021896349790040404, -0.0010219357209280133, -0.10728593170642853, -9.989239333663136e-05, -0.02957243099808693, -0.0003268184664193541, -0.256708562374115, -1.3483153581619263, -0.026900000870227814, -0.000341476290486753, -4.172316494077677e-06, -7.152555099310121e-07, -7.033323527139146e-06, -0.0004981707315891981, -4.6491513785440475e-06, -0.00015639036428183317, -1.8358061424805783e-05, -0.039098020642995834, -0.005085746292024851, -2.0265558760002023e-06, -1.5497195136049413e-06, -5.364403477869928e-06, -0.05218465253710747, -0.005024069920182228, -3.158996332786046e-05, -0.0011860248632729053, -0.8673372864723206, -0.004443889483809471, -0.034917257726192474, -0.3119146525859833, -0.0016903887735679746, -0.0002817710628733039, -0.0014004433760419488, -0.0024358145892620087, -0.36067405343055725, -0.10801927745342255, -0.007116565015166998, -0.24665887653827667, -0.022121576592326164, -8.606540359323844e-05, -0.001105531700886786, -7.152531907195225e-06, -9.536697689327411e-06, -3.6954811548639555e-06, -0.00013541258522309363, -0.000436925794929266, -0.20677883923053741, -0.00025197668583132327, -0.00018606838420964777, -0.0007767044589854777, -0.0016405232017859817, -1.389373540878296, -0.0006503135664388537, -0.000311802898067981, -4.768370445162873e-07, -1.5497195136049413e-06, -5.411955135059543e-05, -0.004482460208237171, -0.005972396582365036, -2.9181220531463623, -0.07930631190538406, -0.023625649511814117, -0.23287568986415863, -0.31540775299072266, -5.018585216021165e-05, -2.825220326485578e-05, -2.172614097595215, -0.002658882411196828, -4.351044481154531e-05, -0.03898073732852936, -0.004320928826928139, -0.00014029949670657516, -5.400034933700226e-05, -9.07141511561349e-05, -0.0010918376501649618, -0.026997938752174377, -0.0009807306341826916, -0.00026055757189169526, -0.0030488932970911264, -0.0005323661607690156, -0.0013699679402634501, -4.8636207793606445e-05, -1.2993727978027891e-05, -4.362964682513848e-05, -0.0004861365014221519, -0.0006536492728628218, -0.00017486473370809108, -0.00013731967192143202, -4.6132929128361866e-05, -0.00025328766787424684, -0.00019500737835187465, -1.966933996300213e-05, -0.00012778419477399439, -1.0132738680113107e-05, -0.001334967790171504, -0.2849651873111725, -1.0780285596847534, -0.00036745471879839897, -0.0010985060362145305, -0.0004203628050163388, -2.0265558760002023e-06, -1.8358061424805783e-05, -1.1920928244535389e-07, -0.013251801952719688, -0.1048266589641571, -0.001060757553204894, -0.09486501663923264, -0.0009335688664577901, -0.0012240068754181266, -1.9844013452529907, -0.04393162578344345, -0.0008387623238377273, -0.03465164452791214, -0.000647692708298564, -3.576278118089249e-07, -1.5020257706055418e-05, -9.786603914108127e-05, -1.1324817933200393e-05, -5.960462772236497e-07, -0.00010096516780322418, -0.0013659204123541713, -5.245195097813848e-06, -3.576272320060525e-06, -0.04653247445821762, -0.008254696615040302, -0.0058352830819785595, -2.314997911453247, -0.0001858300092862919, -0.0001399419124936685, -6.9141146923357155e-06, -1.7881377516459906e-06, -0.0006646093097515404, -0.0321916826069355, -0.000219321038457565, -9.417489309271332e-06, -0.0028181858360767365, -1.6689286894688848e-06, -7.629103492945433e-05, -0.0015513778198510408, -0.009927777573466301], "finish_reason": "length"}], "metrics": {"energy": 979.5280278425215, "energy_per_token": 3.8262813587598496, "time": 24.136148, "time_per_token": 0.094281828125}}
{"outputs": [{"text": "results = []\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=0)\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n    for train, test in kfold.split(X_scaled, y):\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n        history = model.fit(X_scaled[train], y[train], epochs=epochs, batch_size=batch_size, validation_data=(X_scaled[test], y[test]))\n        results.append(history)\n    return results", "tokens": ["results", " =", " []", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "0", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", "_", "scal", "ed", ",", " y", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "='", "adam", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "scal", "ed", "[", "train", "]", ",", " y", "[", "train", "]", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " validation", "_", "data", "=(", "X", "_", "scal", "ed", "[", "test", "]", ",", " y", "[", "test", "]))", "\n", "        ", "results", ".", "append", "(", "history", ")", "\n", "    ", "return", " results", "\n", "\n", "if"], "logprobs": [-3.9552340507507324, -0.03152183070778847, -0.007032759487628937, -0.01624748297035694, -0.2344895601272583, -0.6343156695365906, -0.7366903424263, -0.012892818078398705, -0.0008442413527518511, -7.986990567587782e-06, -3.576278118089249e-07, -6.627816765103489e-05, -0.005762985907495022, -5.006664650863968e-05, -0.00044383687782101333, -8.475421054754406e-05, -0.08369673788547516, -0.009349019266664982, -3.933898824470816e-06, -4.291525328881107e-06, -1.0728830375228426e-06, -0.08119793236255646, -0.013834656216204166, -7.998623186722398e-05, -0.007512059062719345, -0.5618119239807129, -0.002382180653512478, -6.556489552167477e-06, -5.245195097813848e-06, -0.00021062063751742244, -3.5658466815948486, -0.0015986294019967318, -0.020607415586709976, -0.16958920657634735, -1.1958250999450684, -0.0020334296859800816, -0.0015268584247678518, -0.0007651500636711717, -2.861018856492592e-06, -1.168244216387393e-05, 0.0, -0.041516371071338654, -0.03859291225671768, -0.15392327308654785, -0.38675206899642944, -1.8283864259719849, -0.14220139384269714, -0.0027435303200036287, -0.0011970981722697616, -0.003437920706346631, -7.152555099310121e-07, -1.4662635294371285e-05, -0.0001045410826918669, -4.482168878894299e-05, -8.606540359323844e-05, -7.366862701019272e-05, -0.0030731377191841602, -0.028045987710356712, -0.01613253355026245, -0.5810203552246094, -0.08468616753816605, -0.07278091460466385, -0.06203136593103409, -0.03448455035686493, -0.000418575422372669, -0.0034617993514984846, -2.8371408916427754e-05, -2.5987286790041253e-05, -6.794906312279636e-06, -0.0001599660754436627, -0.0003054867556784302, -0.5876942873001099, -9.393251093570143e-05, 0.0, -0.40473201870918274, -0.0006273209000937641, -0.004621183034032583, -0.002535345032811165, -0.006628076080232859, -0.17288340628147125, -0.0006328010931611061, -0.05278121680021286, -4.637133679352701e-05, -0.00014506718434859067, -2.50339189733495e-06, -0.3017318546772003, 0.0, -1.1920928244535389e-07, -1.0820777416229248, -0.01034469623118639, -0.02260150946676731, -0.00462581031024456, -3.099436753473128e-06, -1.6689286894688848e-06, -4.768370445162873e-07, -0.017073670402169228, -3.3378546504536644e-06, -0.05401168018579483, -3.3378546504536644e-06, -4.2437604861333966e-05, -0.13777069747447968, -0.0008991489303298295, -0.0014259180752560496, -0.13994361460208893, -0.07796182483434677, -0.0018736441852524877, -0.4297196567058563, -7.402622577501461e-05, -0.014003356918692589, -0.00021884430316276848, -0.0001998939987970516, -1.0132738680113107e-05, -1.0251946150674485e-05, -4.6491513785440475e-06, -8.940656698541716e-06, -5.006777428206988e-06, -0.007068507838994265, -3.576278118089249e-07, -1.0132738680113107e-05, -0.011193220503628254, -0.00939968228340149, -0.0001578206429257989, -0.0006993946735747159, -0.0010022860951721668, -2.3841855067985307e-07, -0.0006018257699906826, -0.04992332682013512, -0.008880643174052238, -0.005232804920524359, -0.00019464982324279845, -0.04779507592320442, -0.008653640747070312, -4.446407547220588e-05, -0.00021586472576018423, -0.0015260252403095365, -1.9510294198989868, -0.05019024387001991, -0.010818284004926682, -6.556489552167477e-06, -1.5616295058862306e-05, -4.768360213347478e-06, -3.755022044060752e-05, -4.6491513785440475e-06, -0.039995696395635605, -0.03315577283501625, -0.06104942038655281, -0.006985764019191265, -7.343022298300639e-05, -0.026550062000751495, -0.013005669228732586, -0.026256322860717773, -0.000566203030757606, -0.0002112165529979393, -0.026340853422880173, -0.14473868906497955, -0.000486970558995381, -0.00025078488397412, -4.768360213347478e-06, -2.861018856492592e-06, -0.0023237864952534437, -0.05672232434153557, -0.06805936247110367, -7.70062324590981e-05, -0.03188481554389, -0.0008395960903726518, -0.0001726001501083374, -0.0019063648069277406, -0.00045158201828598976, -0.008393724448978901, -0.0006146925734356046, -5.602820692729438e-06, -5.8053239627042785e-05, -0.0012656782055273652, -0.49760833382606506, -0.0005913416389375925, -0.002552348654717207, -5.8412379075889476e-06, -0.0016548046842217445, -0.17059986293315887, -2.0265558760002023e-06, -5.125986263010418e-06, -0.00014935807848814875, -0.0015998195158317685, -2.264974000354414e-06, -6.079655122448457e-06, -0.040488190948963165, -1.010642170906067, -0.00014077626110520214, -0.3570825159549713, -0.001797847100533545, -0.002867873990908265, -0.005777920130640268, -7.152531907195225e-06, -0.0001294529065489769, -0.00010215714428341016, -0.0009728704462759197, -0.0003277718205936253, -2.7179348762729205e-05, -0.0015769677702337503, -1.597391747054644e-05, -2.4676019165781327e-05, -1.0925590991973877, -0.0030370086897164583, -0.003145035356283188, -0.004262291360646486, -0.00021789084712509066, -0.00017474555352237076, -0.0006997520686127245, -0.0033385988790541887, -0.0077545796521008015, -0.0007532381569035351, -0.052765049040317535, -0.0077696023508906364, -0.001671466277912259, -0.20550549030303955, -0.005625251214951277, -1.1127022504806519], "finish_reason": "stop"}], "metrics": {"energy": 788.0561873912808, "energy_per_token": 3.631595333600372, "time": 19.110487, "time_per_token": 0.0880667603686636}}
{"outputs": [{"text": "X = tf.Variable(X)\n    y = tf.Variable(y)\n    tf.random.set_seed(42)\n\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    histories = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        scaler = MinMaxScaler()\n        X_train = scaler.fit_transform(X_train)\n        X_", "tokens": ["X", " =", " tf", ".", "Variable", "(", "X", ")", "\n", "    ", "y", " =", " tf", ".", "Variable", "(", "y", ")", "\n", "    ", "tf", ".", "random", ".", "set", "_", "seed", "(", "4", "2", ")", "\n", "\n", "    ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "    ", "])", "\n", "\n", "    ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "        ", "X", "_", "train", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_"], "logprobs": [-2.08113431930542, -0.2344759851694107, -1.6585488319396973, -0.00010013079008786008, -2.607095956802368, -0.002079706871882081, -0.4914535880088806, -0.37238430976867676, -0.029614904895424843, -0.043378956615924835, -0.1429632157087326, -0.0066261813044548035, -0.02616690658032894, -2.169585604860913e-05, -0.13436733186244965, -0.0033502422738820314, -0.010213491506874561, -0.05344749242067337, -0.0022743092849850655, -0.4720776677131653, -3.3511195182800293, -0.02313106693327427, -1.4475600719451904, -0.0004936429904773831, -0.02857985347509384, -5.960462772236497e-07, -0.0006654431927017868, -0.0020251020323485136, -0.8692876696586609, -0.03526750206947327, -0.007889656350016594, -0.030024508014321327, -1.0116713047027588, -0.0005984899471513927, -2.6655566692352295, -0.01582445204257965, -0.06633861362934113, -4.649054244509898e-05, -7.343022298300639e-05, -3.2186455882765586e-06, -0.4115813672542572, -4.768370445162873e-07, 0.0, -0.3413750231266022, -0.008493018336594105, -0.046745121479034424, -0.006714638322591782, -5.8412379075889476e-06, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.03279256075620651, -2.7418097943154862e-06, -0.07843685895204544, -1.9073468138230965e-06, -8.666139910928905e-05, -0.23038001358509064, -0.0024441389832645655, -0.002603952307254076, -0.049334701150655746, -0.14325176179409027, -0.005227942951023579, -0.8145076036453247, -0.000176652567461133, -0.03397364541888237, -2.098061486321967e-05, -0.05349382385611534, -0.17902977764606476, -0.050796497613191605, -0.019125690683722496, -0.001105650793761015, -0.1468735784292221, -0.002415003487840295, -0.007798581849783659, -0.00021145492792129517, -0.032895807176828384, -5.23315102327615e-05, -0.00591231556609273, -0.0005403488758020103, -0.00040356122190132737, -8.344646857949556e-07, -0.002058174693956971, -1.1920928244535389e-07, -1.490105023549404e-05, -1.1920928244535389e-07, -0.005625962745398283, 0.0, -9.179073458653875e-06, -0.019743002951145172, -0.00911468081176281, -0.0009578645695000887, -0.0016231469344347715, -0.0022757365368306637, -1.1920928244535389e-07, -0.0025943215005099773, -0.018193742260336876, -0.008673140779137611, -0.0026771915145218372, -0.0005099665140733123, -0.19303260743618011, -0.00016985881666187197, -0.3181081712245941, -0.0002734287118073553, -0.0021771318279206753, -0.0010762381134554744, -0.3844035863876343, -2.861018856492592e-06, -0.28993743658065796, -0.02260710299015045, -5.2569914259947836e-05, -2.372236667724792e-05, -0.3080386221408844, -0.015062523074448109, -0.0024362902622669935, -1.1920922133867862e-06, -8.821448318485636e-06, -2.3841830625315197e-06, -0.0033231531269848347, -4.51792984677013e-05, -0.017935240641236305, -0.010377258993685246, -0.03082621842622757, -0.00171538011636585, -0.000395815703086555, -0.07394418120384216, -0.00027652730932459235, -0.513944685459137, -0.2675236761569977, -0.0011566146276891232, -0.0008316157618537545, -6.437280717364047e-06, -3.576278118089249e-07, -1.6093124941107817e-05, -0.0007456144667230546, -6.079655122448457e-06, -0.00017081231635529548, -3.683499380713329e-05, -0.06153905764222145, -0.006837305147200823, -7.510157047363464e-06, -6.318072337307967e-06, -1.1920922133867862e-06, -0.43137916922569275, -0.014478035271167755, -0.0001854724541772157, -0.015233012847602367, -0.2620610296726227, -0.00038211196078918874, -3.3378546504536644e-06, -3.933898824470816e-06, -0.00013791563105769455, -0.04353487119078636, -0.0042043630965054035, -0.0011344670783728361, -0.0031767638865858316, -0.2613871395587921, -1.825404167175293, -0.0041998522356152534, -0.0008715168805792928, -0.004595907870680094, -0.000730128725990653, -0.275131493806839, -0.00010859376925509423, -0.07972820103168488, -0.04178096726536751, -0.15753360092639923, -0.4732481837272644, -0.0004940004437230527, -0.4129773676395416, -1.9073468138230965e-06, -1.7881377516459906e-06, -0.0001394651480950415, -0.0013060382334515452, -8.4638240878121e-06, -1.0728830375228426e-06, -2.7418097943154862e-06, -0.0002752163854893297, -0.003391468897461891, -0.4218827486038208, -0.00037079135654494166, -0.009413735941052437, -0.10782933235168457, -0.0007113072206266224, -0.0024705384857952595, -0.028773421421647072, -0.16276517510414124, -1.5020257706055418e-05, -0.09956838190555573, -0.005916700232774019, -0.040262870490550995, -0.016261322423815727, -0.0022701462730765343, -3.576278118089249e-07, -9.536738616588991e-07, -0.012004275806248188, -0.0026337956078350544, -0.0003401654539629817, -2.9801878554280847e-05, -5.209310256759636e-05, -3.576278118089249e-07, -1.1920928244535389e-07, -5.8053239627042785e-05, -0.0002475670480635017, -0.000302030734019354, -0.001392229343764484, -1.1801649634435307e-05, -2.1934269170742482e-05, -0.0001902399235405028, -5.4596363042946905e-05, -5.960462772236497e-07, -5.8412379075889476e-06, -6.568216485902667e-05, -0.0018314032349735498, -0.00027771908207796514, -2.0146166207268834e-05, 0.0, -7.986990567587782e-06, -0.00011777184408856556, -0.0002849888114724308, -0.0001431601122021675, -1.0251946150674485e-05, -0.00455805379897356, 0.0, -0.0006249382277019322, -4.291525328881107e-06, -0.00014494798961095512, -0.13453280925750732, -0.0005222387262620032, -0.9946907758712769, -0.00028880240279249847, -0.0007905219099484384, -0.000532842765096575, -2.0265558760002023e-06, -3.814689989667386e-06, 0.0, -0.003449444193392992, -0.035794422030448914, -0.010108349844813347, -0.055329177528619766, -0.0001833270798670128, -0.00120936194434762, -0.31803107261657715, -0.24988330900669098, -1.1920928244535389e-07, -7.271740287251305e-06, -0.0014667478390038013, -5.960446742392378e-06, -2.264974000354414e-06, -0.00021038226259406656, -0.0020292659755796194, -0.0003491030656732619, -5.006777428206988e-06, -0.08646401017904282, -0.01616303250193596, -0.02674437128007412, -0.003318044124171138, -3.9219088648678735e-05], "finish_reason": "length"}], "metrics": {"energy": 919.5736670513152, "energy_per_token": 3.5920846369192, "time": 22.263586, "time_per_token": 0.0869671328125}}
{"outputs": [{"text": "tf.random.set_seed(0)\n    X = X.astype(\"float32\")\n    y = y.astype(\"int32\")\n\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=0)\n\n    histories = []\n    for train, test in kfold.split(X, y):\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n        history = model.fit(X[train], y[train], epochs=epochs, batch_size=batch_size, verbose=0)\n        histories.append(history)\n\n    return histories", "tokens": ["tf", ".", "random", ".", "set", "_", "seed", "(", "0", ")", "\n", "    ", "X", " =", " X", ".", "ast", "ype", "(", "\"", "float", "3", "2", "\"", ")", "\n", "    ", "y", " =", " y", ".", "ast", "ype", "(", "\"", "int", "3", "2", "\"", ")", "\n", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "0", ")", "\n", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "[", "train", "]", ",", " y", "[", "train", "]", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " verbose", "=", "0", ")", "\n", "        ", "hist", "ories", ".", "append", "(", "history", ")", "\n", "\n", "    ", "return", " histories"], "logprobs": [-3.785895824432373, -0.00759322103112936, -0.3045691251754761, -0.0012956805294379592, -0.0015581621555611491, -9.536738616588991e-07, -0.0002324311062693596, -0.0023588708136230707, -1.9180248975753784, -0.008597739040851593, -0.07193339616060257, -0.30291813611984253, -2.5762081146240234, -0.5604297518730164, -2.2544660568237305, -0.04190295189619064, -0.13433074951171875, -1.0609570381348021e-05, -0.45277076959609985, -1.4674512147903442, -0.0019231411861255765, -0.04748818650841713, 0.0, -2.276871418871451e-05, -0.009255833923816681, -0.061715368181467056, -0.05272049084305763, -0.1488053798675537, -0.003645324381068349, -0.062404386699199677, -0.0020071377512067556, -0.01154833659529686, 0.0, -0.0007397775771096349, -0.0018465149914845824, -2.3582396507263184, -0.09589502215385437, -1.1920928244535389e-07, -3.6954811548639555e-06, -0.0002162222663173452, -0.008850276470184326, -1.239996314048767, -0.00015710550360381603, -1.551325798034668, -0.002171184169128537, -0.0015718498034402728, -0.00232759234495461, -1.6689286894688848e-06, -7.271740287251305e-06, 0.0, -0.03054957278072834, -0.03152691572904587, -0.006576324347406626, -0.05343562737107277, -0.1917727142572403, -0.0017665509367361665, 0.0, -6.556489552167477e-06, -0.0039575365372002125, -6.9141146923357155e-06, -4.291525328881107e-06, -3.349725011503324e-05, -0.0006685405969619751, -0.009518005885183811, -0.015350177884101868, -0.11524781584739685, -0.00012706902634818107, -0.4402619004249573, -1.1826714277267456, -0.01657501421868801, -0.0004880429187323898, -8.34461570775602e-06, -3.576278118089249e-07, -0.00010168035078095272, -0.022857874631881714, -1.07287787614041e-05, -0.0005914607318118215, -4.577531944960356e-05, -0.17023241519927979, -0.008953424170613289, -4.6491513785440475e-06, -2.622600959512056e-06, -7.033323527139146e-06, -0.14581896364688873, -0.010988201946020126, -4.768258077092469e-05, -0.02834291011095047, -0.2819580137729645, -0.0008474572678096592, -1.5497195136049413e-06, -1.1920922133867862e-06, -2.7179348762729205e-05, -0.23829545080661774, -0.0001072826053132303, -0.005733591504395008, -1.0673129558563232, -3.576214658096433e-05, -0.3830479383468628, -0.0069320183247327805, -0.0012271024752408266, -0.0031036799773573875, -0.0028584832325577736, -0.22800138592720032, -0.011742283590137959, -0.05057835951447487, -0.256466269493103, -0.05398818850517273, -0.0007348936051130295, -0.002099454402923584, -7.033323527139146e-06, -6.556489552167477e-06, -6.079655122448457e-06, -0.00028784899041056633, -0.00039283663500100374, -0.3930293619632721, -0.0002658013836480677, -0.001405204995535314, -0.002022127853706479, -0.035410076379776, -0.19045013189315796, -0.0008840228547342122, -0.0681307464838028, -3.969590397900902e-05, -1.0967194612021558e-05, -8.344646857949556e-07, -0.30608081817626953, 0.0, -1.7881377516459906e-06, -1.3061797618865967, -0.008282243274152279, -0.01870153658092022, -0.006136149168014526, -3.3378546504536644e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -0.10070674121379852, -1.5497195136049413e-06, -0.15973405539989471, -3.814689989667386e-06, -3.755022044060752e-05, -0.1181814894080162, -0.0008370947907678783, -0.0020626953337341547, -0.10198009759187698, -0.4125727117061615, -0.0019512200960889459, -0.7174256443977356, -4.207999518257566e-05, -0.0033507177140563726, -1.0132738680113107e-05, -0.10039744526147842, -0.12333092838525772, -0.013377316296100616, -0.025291945785284042, -2.9802276912960224e-06, -0.009517415426671505, -0.00046206763363443315, -0.00270845927298069, -4.2914423829643056e-05, -0.026771530508995056, -3.528532761265524e-05, -0.0025839770678430796, -0.00023898606013972312, -0.00014041867689229548, -2.145764938177308e-06, -1.1444026313256472e-05, -5.960462772236497e-07, -7.986990567587782e-06, -1.9073468138230965e-06, -0.007243798114359379, 0.0, -3.814689989667386e-06, -0.0057165236212313175, -0.010415247641503811, -0.0003337303060106933, -0.0005834784242324531, -0.0007708676857873797, -1.1920928244535389e-07, -0.0006019449210725725, -0.0303964763879776, -0.005303006153553724, -0.004419797100126743, -0.00013481661153491586, -0.8326744437217712, -0.020385628566145897, -8.296622399939224e-05, -0.0024412849452346563, -0.003356420435011387, -0.26574084162712097, -4.768370445162873e-07, -0.31201037764549255, -0.04979642108082771, -2.4676019165781327e-05, -2.5033637939486653e-05, -0.10921796411275864, -0.011695744469761848, -0.0006588910473510623, -1.0728830375228426e-06, -3.4570634852570947e-06, -1.9073468138230965e-06, -0.0007943335804156959, -1.7046782886609435e-05, -0.033426281064748764, -0.02200753428041935, -0.030983062461018562, -0.0012436520773917437, -0.00010561384988250211, -0.5884782075881958, -9.917721035890281e-05, -0.09937595576047897, -0.0003054867556784302, -0.00025149996508844197, -4.6491513785440475e-06, -2.622600959512056e-06, -0.001940036192536354, -0.16728782653808594, -0.0006667536217719316, -8.821098163025454e-05, -0.0009370227344334126, -0.00013529339048545808, -0.007162843830883503, -0.00011657988943625242, -7.152531907195225e-06, -3.302042750874534e-05, -0.0004378790326882154, -0.5301769375801086, -0.00037353215157054365, -0.002871915465220809, -1.9073468138230965e-06, -0.000387831823900342, -0.3294009864330292, -1.5497195136049413e-06, -1.6689286894688848e-06, -5.638440416078083e-05, -0.0015306673012673855, -2.264974000354414e-06, -1.5497195136049413e-06, -0.012173050083220005, -1.4423508644104004, -0.0009045085171237588, -0.03580799698829651, -0.12871448695659637, -0.0024021598510444164, -0.22498121857643127, -0.00554191367700696, -0.00021288513380568475, -0.0007308434578590095, -0.000285584683297202, -0.0005726366653107107, -0.003291904693469405, -0.003838790813460946, -0.0005995621904730797, -0.19732236862182617, -0.028473149985074997, -0.013800089247524738, -0.0003182381624355912], "finish_reason": "length"}], "metrics": {"energy": 932.6981429195406, "energy_per_token": 3.6433521207794555, "time": 22.072962, "time_per_token": 0.0862225078125}}
{"outputs": [{"text": "# Initialize the k-fold cross-validation iterator\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    # Scale the input data\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    # Initialize an empty list to store the training history\n    histories = []\n\n    # Loop over each fold in the k-fold cross-validation iterator\n    for train_idx, val_idx in kf.split(X):\n        # Split the scaled input data and target data for training and validation sets\n        X_train, X_val = X_scaled[train_idx], X_scaled[val_idx]\n        y_train, y_val = y[train_idx], y[val_idx]\n\n        # Build the model\n        model = tf.keras.Sequential()\n        model.add(tf.keras.layers.Dense(20, input_shape=(X_train.shape[1],), activation='relu'))\n        model.", "tokens": ["#", " Initialize", " the", " k", "-", "fold", " cross", "-", "validation", " iterator", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "\n", "    ", "#", " Scale", " the", " input", " data", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " training", " history", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " each", " fold", " in", " the", " k", "-", "fold", " cross", "-", "validation", " iterator", "\n", "    ", "for", " train", "_", "idx", ",", " val", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "#", " Split", " the", " scaled", " input", " data", " and", " target", " data", " for", " training", " and", " validation", " sets", "\n", "        ", "X", "_", "train", ",", " X", "_", "val", " =", " X", "_", "scal", "ed", "[", "train", "_", "idx", "]", ",", " X", "_", "scal", "ed", "[", "val", "_", "idx", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "val", " =", " y", "[", "train", "_", "idx", "]", ",", " y", "[", "val", "_", "idx", "]", "\n", "\n", "        ", "#", " Build", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", ")", ",", " activation", "='", "relu", "'))", "\n", "        ", "model", "."], "logprobs": [-1.0269503593444824, -1.5635218620300293, -0.8970474600791931, -2.2600255012512207, -0.017968377098441124, -0.0015001959400251508, -0.01749921776354313, -0.06209399551153183, -0.0033749546855688095, -3.315919876098633, -0.05817607045173645, -0.0010241983691230416, -0.01076002698391676, -0.37481698393821716, -0.001642784452997148, -0.0007783720502629876, -1.0490362910786644e-05, -4.768370445162873e-07, -6.592056161025539e-05, -0.0015373327769339085, -1.0967194612021558e-05, -5.8530047681415454e-05, -1.3589766240329482e-05, -0.049430012702941895, -0.014353599399328232, -3.576272320060525e-06, -2.7418097943154862e-06, -1.4305104514278355e-06, -0.28004735708236694, -0.008064565248787403, -7.30726242181845e-05, -0.005231975112110376, -0.7097370624542236, -0.0004985281848348677, -4.0531076592742465e-06, -1.4305104514278355e-06, -0.00010954733443213627, -0.08556968718767166, -0.0092289038002491, -0.004105473402887583, -0.006429699715226889, -0.1741267442703247, -8.380061626667157e-05, -0.05702594295144081, -1.3511360883712769, -0.09306231886148453, -0.4578147232532501, -0.08735993504524231, -1.6368708610534668, -7.760223525110632e-05, -0.05488806217908859, -0.0008997444529086351, -0.0012996093137189746, -0.000248401309363544, -2.622600959512056e-06, -4.291525328881107e-06, -3.576278118089249e-07, -0.004016903694719076, -0.0194654930382967, -0.003220017533749342, -0.04638191685080528, -1.176795244216919, -0.026461485773324966, -0.00010394509445177391, -0.00019167017308063805, -0.0005560758872888982, -3.576278118089249e-07, -1.2397689715726301e-05, -6.83045873302035e-05, -2.0265558760002023e-06, -9.953480184776708e-05, -1.8954096958623268e-05, -0.0018030828796327114, -0.023546826094388962, -0.004301225300878286, -0.010025030933320522, -3.111314072157256e-05, -0.21555985510349274, -0.7982102036476135, -1.7229541540145874, -0.0038294093683362007, -0.005999650806188583, -0.0714995414018631, -0.05964769423007965, -0.115806445479393, -0.34637564420700073, -0.2806605100631714, -1.9566638469696045, -4.541770613286644e-05, -0.38978075981140137, -0.011144415475428104, -0.0007638397510163486, -0.0010238410905003548, -0.0004010588163509965, -0.01637672632932663, -5.709961988031864e-05, -0.05305246263742447, -0.6136091947555542, -0.22912348806858063, -0.9042620062828064, -0.08488253504037857, -1.3362071514129639, -0.017642589285969734, -0.5922835469245911, -0.0009808497270569205, -0.00019643761334009469, -0.035039737820625305, -0.0032903600949794054, -0.00018106251081917435, -1.3045777082443237, -0.0030907264444977045, -0.00016234986833296716, -0.00456778472289443, -0.0967828705906868, -0.05057326331734657, -0.9885649681091309, -0.022357549518346786, -0.7943761944770813, -0.0001740304142003879, -3.4570634852570947e-06, -9.333651541965082e-05, -0.007262615021318197, -9.059865078597795e-06, -1.7881377516459906e-06, -7.629365427419543e-06, -0.0016726563917472959, -0.0005266471416689456, -1.513279914855957, -0.00038521020906046033, -0.08303035795688629, -0.07355505973100662, -0.3764412999153137, -0.005165682639926672, -2.8102710247039795, -0.27535346150398254, -0.06932011991739273, -0.15277211368083954, -0.06753692030906677, -0.14555609226226807, -2.209378480911255, -0.6585037112236023, -0.011700103990733624, -0.010900593362748623, -1.0882866382598877, -0.036998048424720764, -0.00035446559195406735, -0.10280684381723404, -0.0012410327326506376, -0.007582928519695997, -0.1089758574962616, -0.19381245970726013, -1.490105023549404e-05, -0.007526966743171215, -0.042082302272319794, -0.010605993680655956, -0.00042024365393444896, -6.198863957251888e-06, -4.6491513785440475e-06, -0.0001984637783607468, -0.00012885693286079913, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.003434000303968787, -0.0007419217727147043, -0.0002873722987715155, -0.00031883400515653193, -3.576272320060525e-06, -5.125986263010418e-06, -1.9550132492440753e-05, -1.8000440832111053e-05, 0.0, -3.2186455882765586e-06, -1.5258672647178173e-05, -0.0003672163875307888, -0.000534868217073381, -0.0007441850611940026, -6.3774932641536e-05, -5.924526340095326e-05, -0.0006417360855266452, -2.1934269170742482e-05, -1.4305104514278355e-06, -1.9073468138230965e-06, -3.71926071238704e-05, -0.0018980359891429543, -0.0007321537705138326, -4.708655978902243e-05, 0.0, -2.3841855067985307e-07, -5.090107151772827e-05, -0.00048673225683160126, -7.986703712958843e-05, -0.0001250427303602919, -2.1576648578047752e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -4.6491513785440475e-06, -0.0002325502864550799, -0.007458341307938099, -0.0008385241380892694, -0.0015901790466159582, -2.688124656677246, -0.11738527566194534, -2.3701913356781006, -0.6914271116256714, -0.0003524397616274655, -0.027197033166885376, -0.00021991695393808186, -0.03996980935335159, -2.407998726994265e-05, -8.67805938469246e-05, -1.7881377516459906e-06, -0.3279191851615906, 0.0, -3.576272320060525e-06, -1.3454594612121582, -0.004084103740751743, -0.009505725465714931, -0.011030765250325203, -1.07287787614041e-05, -1.2636104656849056e-05, -3.1709168979432434e-05, -0.008592183701694012, -3.933898824470816e-06, -2.47952248173533e-05, -8.4638240878121e-06, -0.01995008997619152, -1.9073468138230965e-06, -0.030579056590795517, -3.4570634852570947e-06, -1.8000440832111053e-05, -0.3864004909992218, -0.000739658426027745, -0.0012001938885077834, -1.7522881031036377, -8.344646857949556e-07, -0.08603926002979279, -0.005485126748681068, -0.012978839688003063, -0.2825429439544678, -0.3032219707965851, -0.0012846082681789994, -5.960462772236497e-07, -0.002811291255056858, -0.00027426297310739756, -0.0026983539573848248, -6.55629628454335e-05, -0.029502639546990395, -7.450303382938728e-05, -0.0016628975281491876, -0.05132458731532097, -0.0003131137927994132, -0.00372430682182312, -0.011356592178344727, -0.00024911639047786593, -0.0004832768754567951, -1.7881377516459906e-06], "finish_reason": "length"}], "metrics": {"energy": 928.2960261602402, "energy_per_token": 3.6261563521884383, "time": 21.851568, "time_per_token": 0.0853576875}}
{"outputs": [{"text": "model = tf.keras.models.Sequential()\n    model.add(tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)))\n    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    kf = KFold(n_splits=n_splits, shuffle=True)\n    scaler = MinMaxScaler()\n\n    history_list = []\n    for train_idx, val_idx in kf.split(X):\n        model.reset_weights()\n        X_train, y_train = X[train_idx], y[train_idx]\n        X_val, y_val = X[val_idx], y[val_idx]\n\n        X_train = scaler.fit_transform(X_train)\n        X_val = scaler.transform(X_val)\n\n        history = model.fit(X_train, y_train,", "tokens": ["model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "()", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", ")))", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "    ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "='", "adam", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "\n", "    ", "history", "_", "list", " =", " []", "\n", "    ", "for", " train", "_", "idx", ",", " val", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "model", ".", "reset", "_", "weights", "()", "\n", "        ", "X", "_", "train", ",", " y", "_", "train", " =", " X", "[", "train", "_", "idx", "]", ",", " y", "[", "train", "_", "idx", "]", "\n", "        ", "X", "_", "val", ",", " y", "_", "val", " =", " X", "[", "val", "_", "idx", "]", ",", " y", "[", "val", "_", "idx", "]", "\n", "\n", "        ", "X", "_", "train", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "val", " =", " scal", "er", ".", "transform", "(", "X", "_", "val", ")", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ","], "logprobs": [-3.0567679405212402, -0.01710355468094349, -0.2177373617887497, -0.0001397035230183974, -0.00018344627460464835, -4.637133679352701e-05, -0.9274351596832275, -3.40932747349143e-05, -0.0006291079334914684, 0.0, 0.0, -0.9150581359863281, -0.008777488023042679, -0.025102701038122177, -0.06878653913736343, -6.472854875028133e-05, -3.2305197237292305e-05, -7.056941103655845e-05, -0.032815977931022644, -4.255681051290594e-05, -1.0251946150674485e-05, -2.9444261599564925e-05, -0.05201955884695053, -9.775113539944869e-06, -0.1475706547498703, -3.4570634852570947e-06, -8.701899787411094e-05, -0.1961342990398407, -0.0015344761777669191, -0.0017864234978333116, -0.14982812106609344, -0.10592538118362427, -0.0021991373505443335, -0.26285871863365173, -0.00011312322021694854, -0.004110934678465128, -6.079655122448457e-06, -0.07148011773824692, -0.012418446131050587, -0.009635606780648232, -0.003880234668031335, -1.0251946150674485e-05, -0.004228223580867052, -0.0004385939973872155, -0.003430792596191168, -0.0004997196956537664, -0.0472753532230854, -0.004563037771731615, -0.00020811776630580425, -0.0004294188693165779, -2.622600959512056e-06, -2.9444261599564925e-05, -4.2199197196168825e-05, -0.00010108436981681734, -2.3841855067985307e-07, -1.0728830375228426e-06, -1.1920928244535389e-07, -7.867782187531702e-06, -1.1920928244535389e-07, -0.0013803249457851052, -1.1920928244535389e-07, -3.3378546504536644e-06, -0.005936253350228071, -0.0024694681633263826, -0.00026770823751576245, -0.0009646529797464609, -0.0008367374539375305, -1.1920928244535389e-07, -0.0011622109450399876, -0.0029818618204444647, -0.11856812983751297, -0.00986710749566555, -1.847726889536716e-05, -0.0006144542712718248, -0.002124673454090953, -1.4046125411987305, -0.02480027824640274, -0.0008174415561370552, -1.311301275563892e-06, -7.271740287251305e-06, -3.576272320060525e-06, -4.291525328881107e-06, -4.887569048150908e-06, -0.003081813221797347, -0.05322665721178055, -0.029290344566106796, -0.0022106750402599573, -1.6212332411669195e-05, -0.0005385617259889841, -0.0025327291805297136, -0.04508937895298004, -0.00027056847466155887, -0.0005697772721759975, -0.14805303514003754, -0.0003203832311555743, -0.7297152876853943, -0.1892886906862259, -0.0012315078638494015, -0.00030429501202888787, -2.50339189733495e-06, -4.768370445162873e-07, -2.1815061700181104e-05, -0.0004880429187323898, -3.933898824470816e-06, -0.0001486429391661659, -6.758938252460212e-05, -0.03905973210930824, -0.006976648699492216, -5.006777428206988e-06, -9.179073458653875e-06, -2.9802276912960224e-06, -0.6066182851791382, -0.008412283845245838, -9.07141511561349e-05, -0.0025988395791500807, -0.29599758982658386, -0.005341780837625265, -0.11099724471569061, -1.7574148178100586, -0.0006725909770466387, -0.00029297350556589663, -0.00045944625162519515, -2.0265558760002023e-06, -7.510157047363464e-06, 0.0, -0.0024729168508201838, -0.006777512840926647, -0.5257915258407593, -4.7444173105759546e-05, -1.4913289546966553, -0.8656692504882812, -0.05490826070308685, -0.00018106251081917435, -0.0017164511373266578, -0.0010636154329404235, -0.2440258413553238, -0.013087327592074871, -0.013898025266826153, -0.05146228149533272, -0.9922924041748047, -0.037134286016225815, -0.9368013143539429, -0.0003054867556784302, -1.847726889536716e-05, -7.092700980138034e-05, -0.000513064325787127, -5.722029527532868e-06, -1.0728830375228426e-06, -3.814689989667386e-06, -0.0010096696205437183, -0.0008091036579571664, -0.3630905747413635, -0.0003638797497842461, -0.003927970305085182, -3.14166259765625, -0.00886906310915947, -0.03403690457344055, -3.6954811548639555e-06, -1.742727518081665, -0.00041500062798149884, -0.03598935902118683, -0.4112011194229126, -0.2542657256126404, -0.002084584441035986, -0.006089941132813692, -0.14148926734924316, -0.7291115522384644, -1.156323378381785e-05, -2.729855441430118e-05, -0.01946759782731533, -0.2705347537994385, -0.0010130041046068072, -0.0016657537780702114, 0.0, -1.1920928244535389e-07, -0.010922761633992195, -0.0008948612376116216, -0.0003567297535482794, -0.0001003691868390888, -2.3841830625315197e-06, 0.0, -1.1920928244535389e-07, -2.992108420585282e-05, -0.001134824356995523, -0.00677194818854332, -0.023462289944291115, -0.0017610769718885422, -0.04464041814208031, -0.0007746794726699591, -0.0003293210465926677, -1.0967194612021558e-05, -5.1973900554003194e-05, -0.00014256415306590497, -0.000623032043222338, -0.0001264730526600033, -7.30726242181845e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -9.226373367710039e-05, -0.0001308832288486883, -6.592056161025539e-05, -4.0531076592742465e-06, -5.960446742392378e-06, 0.0, -3.576278118089249e-07, -1.7046782886609435e-05, -8.511180931236595e-05, -0.40029478073120117, -0.00038044367101974785, -0.1262953281402588, -0.0006895071710459888, -0.006155105773359537, -0.4215333163738251, -0.014897641725838184, 0.0, -4.768360213347478e-06, -0.0035157317761331797, -2.9682672902708873e-05, -2.3841855067985307e-07, -5.066266385256313e-05, -0.0005362979718483984, -0.0005539313424378633, -3.6954811548639555e-06, -0.03013821877539158, -0.004677900578826666, -0.002369336551055312, -0.032850008457899094, -3.6238969187252223e-05, -0.00043561504571698606, -0.00021562635083682835, -0.00016139635408762842, 0.0, -1.6689286894688848e-06, -0.001396872103214264, -6.317892984952778e-05, -3.111314072157256e-05, -1.549708758830093e-05, -3.814689989667386e-06, -0.000163541772053577, -0.0012361512053757906, -0.04777757450938225, -8.83301836438477e-05, -0.11368880420923233, -0.007092655170708895, -0.0001954841281985864, -3.9457496313843876e-05, -6.198863957251888e-06, -0.0010749283246695995, -0.1705411672592163, -0.0019557413179427385, -4.088794958079234e-05, -0.00032634177478030324, -0.007063654717057943, -1.5258672647178173e-05, -3.099436753473128e-06, -0.001576253562234342], "finish_reason": "length"}], "metrics": {"energy": 926.0666916427617, "energy_per_token": 3.617448014229538, "time": 21.862055, "time_per_token": 0.08539865234375}}
{"outputs": [{"text": "kfold = KFold(n_splits=n_splits)\n\n    # Scaling\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    histories = []\n\n    for train_index, test_index in kfold.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # Creating the model\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(20, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        # Training\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        histories.append(model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test), verbose=0", "tokens": ["k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "\n", "\n", "    ", "#", " Scal", "ing", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "fold", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " Creating", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "#", " Training", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "hist", "ories", ".", "append", "(", "model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " validation", "_", "data", "=(", "X", "_", "test", ",", " y", "_", "test", ")", ",", " verbose", "=", "0"], "logprobs": [-2.2042346000671387, -1.131065011024475, -0.011585691943764687, -0.0008166077313944697, -4.768360213347478e-06, -9.536738616588991e-07, -7.903263758635148e-05, -0.0064827618189156055, -1.9430925021879375e-05, -0.00027783826226368546, -4.970903682988137e-05, -0.10699933767318726, -0.012279270216822624, -6.794906312279636e-06, -5.006777428206988e-06, -9.536738616588991e-07, -2.665248394012451, -0.03876516968011856, -2.64979887008667, -0.0003271759778726846, -1.8933011293411255, -3.8819031715393066, -0.04327690228819847, -1.7269753217697144, -0.0029622504953294992, -0.3589393198490143, -0.002968431217595935, -0.0044632344506680965, -0.0005915798828937113, -1.311301275563892e-06, -1.3947389561508317e-05, 0.0, -0.026125097647309303, -0.03489250689744949, -0.011435557156801224, -0.17051050066947937, -0.3481719493865967, -0.004861914087086916, -1.1920928244535389e-07, -1.6569954823353328e-05, -0.000607782625593245, -4.4225667807040736e-05, -9.07141511561349e-05, -4.9232225137529895e-05, -0.0019851280376315117, -0.017967674881219864, -0.012990489602088928, -0.09876109659671783, -5.94836674281396e-05, -0.5962600111961365, -0.025326929986476898, -0.0016123164677992463, -0.005569061730057001, -0.015904707834124565, -1.5874519348144531, -5.4834770708112046e-05, -0.1351679414510727, -0.13252539932727814, -1.9280822277069092, -0.5823721289634705, -0.0024743436370044947, -0.1285300999879837, -1.2993727978027891e-05, -1.7165990357170813e-05, -0.0001770101225702092, -0.0021842687856405973, -0.000105375460407231, -0.00013553177996072918, -7.033323527139146e-06, -0.00032455421751365066, -0.0008864049450494349, -0.9249120354652405, -0.0003968881501350552, -0.06645707786083221, -0.242742121219635, -0.00567515566945076, -0.002572800265625119, -0.03606376051902771, -0.0862923339009285, -2.8371408916427754e-05, -0.012865398079156876, -0.019798167049884796, -0.0020723312627524137, -0.00208125333301723, -0.0015460216673091054, -1.4305104514278355e-06, -3.6000557884108275e-05, -0.028127122670412064, -0.0005745429079979658, -0.0001486429391661659, -2.4437606043647975e-05, -0.00011598391574807465, -9.536738616588991e-07, -1.1920922133867862e-06, -1.6093124941107817e-05, -0.0005598884890787303, -0.0006333967321552336, -0.005011141300201416, -7.176141662057489e-05, -5.125868119648658e-05, -0.0008347125840373337, -0.0005088941543363035, -3.933898824470816e-06, -2.1576648578047752e-05, -0.00015090756642166525, -0.0015530440723523498, -0.001061352901160717, -5.149708886165172e-05, -2.3841855067985307e-07, -2.3841830625315197e-06, -6.997340824455023e-05, -0.0006356602534651756, -0.00015627116954419762, -1.5616295058862306e-05, -0.0007272697403095663, -1.1920928244535389e-07, -3.218599158572033e-05, -5.125986263010418e-06, -0.00025960413040593266, -0.01878846436738968, -0.0009211826254613698, -1.0459492206573486, -2.4338040351867676, -0.317439466714859, -0.14323967695236206, -0.06250607967376709, -0.001954313600435853, -0.06126752868294716, -0.0004107108688913286, -0.03479303792119026, -1.4424220353248529e-05, -0.00012182447244413197, -1.5497195136049413e-06, -0.8853633403778076, -2.145764938177308e-06, -3.564294092939235e-05, 0.0, -3.576278118089249e-07, -1.1255812644958496, -0.0030348694417625666, -0.02564871311187744, -0.007231489755213261, -2.861018856492592e-06, -1.311301275563892e-06, -7.152555099310121e-07, -0.04022645577788353, -2.622600959512056e-06, -0.08822908252477646, -2.622600959512056e-06, -5.280832192511298e-05, -0.1823621243238449, -0.0006897454150021076, -0.0011447074357420206, -0.14975854754447937, -0.20401647686958313, -0.002996956231072545, -1.5089716911315918, -4.2437604861333966e-05, -0.04577913135290146, -0.00023541064001619816, -0.00032228996860794723, -6.6756979322235566e-06, -1.0967194612021558e-05, -5.960446742392378e-06, -3.802703940891661e-05, -1.5497195136049413e-06, -0.010433533228933811, -3.576278118089249e-07, -1.537788011773955e-05, -0.017666248604655266, -0.011245676316320896, -0.0004489606071729213, -0.001416275859810412, -0.0021062351297587156, -1.1920928244535389e-07, -0.0005849081207998097, -0.04242650419473648, -0.0070909978821873665, -0.0011263700434938073, -0.00017426878912374377, -0.1122141033411026, -0.0003123987407889217, -0.34628987312316895, -1.069399118423462, -1.6003106832504272, -0.0011456600623205304, -0.040697209537029266, -0.00022539935889653862, -0.00037865620106458664, -0.002743649296462536, -0.38362547755241394, -6.198863957251888e-06, -0.18498970568180084, -0.07299115508794785, -1.8000440832111053e-05, -2.9444261599564925e-05, -0.36500146985054016, -0.021669762209057808, -0.003215502016246319, -4.172316494077677e-06, -6.079655122448457e-06, -2.264974000354414e-06, -0.01007436215877533, -6.031808152329177e-05, -0.051555126905441284, -0.032483916729688644, -0.04205189645290375, -0.001693839905783534, -0.0001294529065489769, -0.08132553100585938, -1.6094828844070435, -0.4598306119441986, -0.003488290822133422, -0.00021550717065110803, -0.0002836778585333377, -0.07957111299037933, -8.40390202938579e-05, -6.770858453819528e-05, -0.0007475204183720052, -0.03172949701547623, -0.0023826563265174627, -5.1616290875244886e-05, -0.00037520044133998454, -0.006854946259409189, -9.715084888739511e-05, -7.510157047363464e-06, -0.0021845067385584116, -0.6001332998275757, -0.0022794236429035664, -0.0031104539521038532, -8.22540732769994e-06, -0.003085140837356448, -0.13488589227199554, -8.940656698541716e-06, -5.364403477869928e-06, -0.00015484087634831667, -0.0030878742691129446, -3.3378546504536644e-06, -5.245195097813848e-06, -0.22731631994247437, -0.8050336837768555, -0.0006423317245207727, -0.06588380038738251, -0.002057103905826807, -0.0004207202873658389, -0.00017998983094003052, -0.0005868143052794039, -6.925819616299123e-05, -0.0016702761640772223, -1.156323378381785e-05, -5.602820692729438e-06, -1.1970834732055664, -0.0008299481705762446, -0.05830821394920349, -0.002051512710750103, -0.07494750618934631], "finish_reason": "length"}], "metrics": {"energy": 907.8871413822167, "energy_per_token": 3.546434146024284, "time": 22.065502, "time_per_token": 0.0861933671875}}
{"outputs": [{"text": "# Prepare data for k-fold cross-validation\n    X = X.reshape(-1, X.shape[-1])\n    y = y.reshape(-1, 1)\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    # Train model using k-fold cross-validation\n    histories = []\n    for train, test in kfold.split(X, y):\n        x_train, y_train = X[train], y[train]\n        x_test, y_test = X[test], y[test]\n\n        # Define model\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(x_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        # Compile model\n        model.compile(optimizer='", "tokens": ["#", " Prepare", " data", " for", " k", "-", "fold", " cross", "-", "validation", "\n", "    ", "X", " =", " X", ".", "resh", "ape", "(-", "1", ",", " X", ".", "shape", "[-", "1", "])", "\n", "    ", "y", " =", " y", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "\n", "    ", "#", " Train", " model", " using", " k", "-", "fold", " cross", "-", "validation", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "x", "_", "train", ",", " y", "_", "train", " =", " X", "[", "train", "]", ",", " y", "[", "train", "]", "\n", "        ", "x", "_", "test", ",", " y", "_", "test", " =", " X", "[", "test", "]", ",", " y", "[", "test", "]", "\n", "\n", "        ", "#", " Define", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "x", "_", "train", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "#", " Com", "pile", " model", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='"], "logprobs": [-1.0269503593444824, -3.098752498626709, -1.4797837734222412, -0.8228774666786194, -1.1197880506515503, -0.002114800037816167, -0.00086758635006845, -0.008424813859164715, -0.1058867797255516, -0.0007899263291619718, -0.04679187759757042, -0.004868676420301199, -1.5843288898468018, -0.7991589903831482, -1.123022198677063, -0.03222215548157692, -1.4427498579025269, -5.960462772236497e-07, -0.6192381978034973, -4.8874615458771586e-05, -0.002160121686756611, -0.46051132678985596, -0.00459460262209177, -0.0004681444843299687, -0.24040859937667847, -0.0020469920709729195, -0.0017666699131950736, -0.3504203259944916, -0.031958017498254776, -0.08364685624837875, -0.006983514875173569, -0.16460202634334564, -0.0029475123155862093, -0.16810011863708496, -3.814689989667386e-06, -0.0025452144909650087, -1.4305104514278355e-06, -0.0891900584101677, -0.5896211862564087, -0.001988697098568082, -0.0004253674705978483, -0.020566308870911598, -0.1651635766029358, -1.3427050113677979, -0.0028085571248084307, -0.0012273406609892845, -0.0015529250958934426, -1.4305104514278355e-06, -1.3232143828645349e-05, 0.0, -0.015299933031201363, -0.030647730454802513, -0.006891174707561731, -0.04728240519762039, -0.20004655420780182, -0.002640334889292717, 0.0, -3.814689989667386e-06, -0.0019145745318382978, -1.311301275563892e-06, -5.364403477869928e-06, -3.0278701160568744e-05, -0.00032646095496602356, -0.018022820353507996, -0.020293349400162697, -0.33846452832221985, -0.8145323395729065, -0.9728593826293945, -0.004273805767297745, -0.00027044929447583854, -3.2186455882765586e-06, -3.576278118089249e-07, -4.100715523236431e-05, -0.0022176930215209723, -1.2636104656849056e-05, -0.000502817565575242, -6.496695277746767e-05, -0.0906095877289772, -0.011819333769381046, -5.125986263010418e-06, -2.861018856492592e-06, -1.0847986231965479e-05, -0.08959123492240906, -0.007316461764276028, -2.0146166207268834e-05, -0.006068021059036255, -0.4528653025627136, -0.0016517103649675846, -2.622600959512056e-06, -1.9073468138230965e-06, -7.009260298218578e-05, -0.1702788770198822, -0.01696983352303505, -0.0031522843055427074, -0.01577845588326454, -0.22804076969623566, -0.00014125302550382912, -0.6801705956459045, -1.4816794395446777, -0.9633833765983582, -0.7101724743843079, -0.003966560587286949, -0.00405014818534255, -6.0437283536884934e-05, -0.003967748023569584, -0.009975461289286613, -9.16677454370074e-05, -0.040535926818847656, -0.00046397410915233195, -0.42846164107322693, -0.008782923221588135, -0.0007737264968454838, -0.0020016650669276714, -0.009567716158926487, -0.010529793798923492, -0.026012904942035675, -0.048998087644577026, -0.4924778640270233, -0.1374913603067398, -0.0001512651506345719, -0.0036482936702668667, -8.821448318485636e-06, -7.510157047363464e-06, -4.0531076592742465e-06, -0.00013326710904948413, -0.0003496989083942026, -0.12054804712533951, -0.0002759314374998212, -0.0007838514284230769, -0.0013875867007300258, -0.011023219674825668, -3.2949140071868896, -0.013554561883211136, -0.003851378569379449, -0.09445662051439285, -0.2947532832622528, -0.00013255194062367082, -5.8887653722194955e-05, -0.030406421050429344, -0.005774482619017363, -0.0003675738989841193, -0.000538680877070874, -0.014341965317726135, -0.0012475810945034027, -0.0005141366855241358, -0.0006094505661167204, -6.067568756407127e-05, -0.0001934579631779343, -0.007043531630188227, -0.002917202888056636, -0.010549611411988735, -1.6927575416048057e-05, -0.263867050409317, -0.003938300535082817, -0.0024272524751722813, -2.074220174108632e-05, -0.000144709600135684, -0.00021991695393808186, -0.00025602878304198384, -9.679325739853084e-05, -0.0005641775787808001, -5.3165931603871286e-05, -5.471556869451888e-05, -0.00029297350556589663, -1.0490362910786644e-05, -0.00011324241495458409, -1.2040065485052764e-05, -0.0003195490571670234, -0.2360607236623764, -0.0010387268848717213, -0.47439852356910706, -1.0214641094207764, -0.5858833193778992, -1.1364765167236328, -0.0002598424907773733, -0.09172587841749191, -0.0002687808300834149, -0.07485349476337433, -3.373566141817719e-05, -0.0001429217227268964, -1.4305104514278355e-06, -0.7360010743141174, -1.1920928244535389e-07, -2.3841830625315197e-06, -0.4765196442604065, -0.00529968598857522, -0.021454395726323128, -0.0060423086397349834, -2.861018856492592e-06, -7.152555099310121e-07, -4.768370445162873e-07, -0.032249629497528076, -1.4305104514278355e-06, -0.052498701959848404, -4.172316494077677e-06, -5.23315102327615e-05, -0.18820461630821228, -0.0014260371681302786, -0.00199250434525311, -0.15390068292617798, -0.07915344834327698, -0.002697046147659421, -0.31534209847450256, -3.099393507000059e-05, -0.003220373997464776, -3.099436753473128e-06, -0.02824023738503456, -0.2451038956642151, -0.1872510462999344, -0.00032658010604791343, -5.9602869441732764e-05, -0.006993458606302738, -2.861018856492592e-06, -0.17292863130569458, -0.0012198395561426878, -0.007650243584066629, -3.266281055402942e-05, -0.012800551019608974, -1.966933996300213e-05, -0.0026702960021793842, -0.000289159914245829, -0.00028725311858579516, -8.344646857949556e-07, -8.583032467868179e-06, -9.059865078597795e-06, -2.9802276912960224e-06, -2.861018856492592e-06, -0.006269074976444244, 0.0, -2.145764938177308e-06, -0.0047401911579072475, -0.0019232601625844836, -0.0005882440018467605, -0.0006361367995850742, -0.0010422994382679462, -1.1920928244535389e-07, -0.0007476395112462342, -0.01945333369076252, -0.01206210721284151, -0.003328737337142229, -0.00012134769349358976, -0.23037508130073547, -0.0003300360403954983, -0.20603056252002716, -0.985961377620697, -1.0013530300057027e-05, -0.378333181142807, -0.0651700347661972, -9.881961887003854e-05, -0.03007795289158821, -6.925819616299123e-05, -6.687417771900073e-05, -0.0004887578543275595, -0.30819499492645264, -1.0728830375228426e-06, -0.2854621708393097], "finish_reason": "length"}], "metrics": {"energy": 906.0795005607607, "energy_per_token": 3.5393730490654716, "time": 22.056303, "time_per_token": 0.08615743359375}}
{"outputs": [{"text": "scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    kfold = KFold(n_splits=n_splits, shuffle=True)\n    histories = []\n\n    for train, test in kfold.split(X):\n        model = tf.keras.Sequential()\n        model.add(tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)))\n        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n        history = model.fit(X[train], y[train], batch_size=batch_size, epochs=epochs, validation_data=(X[test], y[test]))\n        histories.append(history)\n\n    return histories\n\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler", "tokens": ["scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", ")))", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "\n", "        ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "='", "adam", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "[", "train", "]", ",", " y", "[", "train", "]", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " epochs", "=", "epoch", "s", ",", " validation", "_", "data", "=(", "X", "[", "test", "]", ",", " y", "[", "test", "]))", "\n", "        ", "hist", "ories", ".", "append", "(", "history", ")", "\n", "\n", "    ", "return", " histories", "\n", "\n", "import", " numpy", " as", " np", "\n", "import", " tensor", "flow", " as", " tf", "\n", "from", " sklearn", ".", "model", "_", "selection", " import", " K", "F", "old", "\n", "from", " sklearn", ".", "pre", "processing", " import", " Min", "Max", "Scal", "er", "\n", "\n", "def"], "logprobs": [-2.680734157562256, -0.0021418030373752117, -0.0028750060591846704, -0.0025012181140482426, -5.364403477869928e-06, -6.318072337307967e-06, 0.0, -0.01329344604164362, -0.03221430629491806, -0.007750202901661396, -0.09293772280216217, -0.18872839212417603, -0.004427036736160517, 0.0, -1.9788545614574105e-05, -0.0015218593180179596, -4.410734163684538e-06, -5.006777428206988e-06, -5.054346183896996e-05, -0.004000756423920393, -0.018691591918468475, -0.022099889814853668, -0.5082537531852722, -0.00022575691400561482, -0.5600119829177856, -1.5719256401062012, -0.008619130589067936, -0.0002557904226705432, -5.960446742392378e-06, -3.576278118089249e-07, -5.8887653722194955e-05, -0.004959899000823498, -9.298280929215252e-06, -0.0002153879904653877, -5.113947918289341e-05, -0.07524222135543823, -0.007958133704960346, -3.4570634852570947e-06, -1.4066597032069694e-05, -6.6756979322235566e-06, -0.07798244804143906, -0.009375709109008312, -2.3364747903542593e-05, -0.003490310162305832, -0.7823987007141113, -0.005806246306747198, -0.3210868239402771, -0.18030641973018646, -0.013880860060453415, -0.0007898071780800819, -0.0011886443244293332, -0.00401072995737195, -0.25167346000671387, -4.970903682988137e-05, -0.06524161994457245, -0.03895425423979759, -0.38514021039009094, -0.031423989683389664, -0.00014053787162993103, -0.0019866747315973043, -2.169585604860913e-05, -4.494089080253616e-05, -3.814689989667386e-06, -0.0003793711948674172, -0.0004319211875554174, -1.849074363708496, -0.0001599660754436627, -0.016898103058338165, -0.3099358379840851, -0.00045313104055821896, -0.029981819912791252, -2.90866428258596e-05, -0.00012957210128661245, -1.9073468138230965e-06, -0.3566409945487976, 0.0, -5.960462772236497e-07, -1.156745195388794, -0.0008912881603464484, -0.034319501370191574, -0.0028275768272578716, -3.766942609217949e-05, -1.9073304429184645e-05, -3.564294092939235e-05, -0.009987853467464447, -3.933898824470816e-06, -1.2993727978027891e-05, -7.867782187531702e-06, -0.01866912841796875, -2.50339189733495e-06, -0.032982777804136276, -3.3378546504536644e-06, -2.8132995794294402e-05, -0.3680570423603058, -0.0007666985620744526, -0.00112160702701658, -0.21949951350688934, -0.055285412818193436, -0.0008918836829252541, -0.7036202549934387, -5.2689116273541003e-05, -0.003666466102004051, -6.6756979322235566e-06, -0.05593953654170036, -0.0075578466057777405, -0.006853999104350805, -0.015055008232593536, -1.4305104514278355e-06, -0.008717338554561138, -0.00022587609419133514, -0.0011938833631575108, -7.724463648628443e-05, -0.012426570057868958, -0.0028559870552271605, -0.00017832119192462415, -9.810443589231e-05, -5.960462772236497e-07, -6.079655122448457e-06, -2.753696753643453e-05, -4.0411134250462055e-05, -3.2186455882765586e-06, -2.861018856492592e-06, 0.0, -3.099436753473128e-06, -4.768370445162873e-07, -0.0018225978128612041, 0.0, -9.536738616588991e-07, -0.0020561523269861937, -0.001430917764082551, -0.00017188502533826977, -0.00040570611599832773, -0.000849482137709856, 0.0, -0.0007905219099484384, -0.0007340597221627831, -1.9432727098464966, -0.0001255195093108341, -0.033391233533620834, -2.6702524337451905e-05, -0.0005646541831083596, -0.0035491115413606167, -1.605324387550354, -0.01814071275293827, -0.0008484101272188127, -1.5497195136049413e-06, -6.437280717364047e-06, -3.933898824470816e-06, -8.344646857949556e-07, -1.4305104514278355e-06, -0.007698509376496077, -0.0610991008579731, -0.028177307918667793, -0.0009034366230480373, -1.9550132492440753e-05, -0.0014571059728041291, -0.0009995469590649009, -0.0508895181119442, -0.00024256148026324809, -0.00014578233822248876, -0.31711891293525696, -0.00017081231635529548, -0.2576885521411896, -0.00045372682507149875, -0.0002232540718978271, -9.775113539944869e-06, -2.145764938177308e-06, -0.0004593271005433053, -0.1351836621761322, -0.0007659838884137571, -7.581423415103927e-05, -0.0010848119854927063, -0.00022206225548870862, -0.004737344104796648, -0.00046564225340262055, -3.659658250398934e-05, -0.00017391123401466757, -0.00024196557933464646, -1.1821787357330322, -1.5735502529423684e-05, -1.3828182090946939e-05, -0.002875243779271841, -0.000427274004323408, -1.7881377516459906e-06, -1.311301275563892e-06, -7.164221460698172e-05, -0.08553871512413025, -2.825220326485578e-05, -0.0005677518784068525, -3.6954811548639555e-06, -0.06234032288193703, -1.2470910549163818, -0.00016783259343355894, -0.15468071401119232, -0.00044764988706447184, -0.000529149197973311, -0.00010132275929208845, -0.0009209443815052509, -0.0006111184484325349, -2.276871418871451e-05, -0.001529715140350163, -1.4305012882687151e-05, -6.83045873302035e-05, -0.6696393489837646, -0.001304133329540491, -0.33689573407173157, -0.002575772814452648, -4.8993817472364753e-05, -0.0002996472467202693, -0.00016950124700088054, -0.00016008525562938303, -0.0009182051289826632, -0.0036929522175341845, -0.0006150499684736133, -0.025823913514614105, -0.01835152693092823, -0.023195013403892517, -0.00015937011630740017, -0.1937175989151001, -0.002668393775820732, -3.641003131866455, -0.9626860022544861, -0.004530047997832298, -0.00016783259343355894, -0.0032233446836471558, -1.7303577661514282, -0.9566689133644104, -1.9430925021879375e-05, -0.025128161534667015, -0.00011073929636040702, -0.001176975667476654, -0.16950196027755737, -0.04784883186221123, -0.0013372297398746014, -0.02901466190814972, -4.768360213347478e-06, -9.059865078597795e-06, -8.106198947643861e-06, -0.014129598625004292, -2.264974000354414e-06, -3.576278118089249e-07, -0.0019938128534704447, -0.048139024525880814, -0.0024217821191996336, -8.332382276421413e-05, -0.001899701775982976, -1.0013530300057027e-05, -1.6689160474925302e-05, -0.026716632768511772, -1.9550132492440753e-05, -1.2755313036905136e-05, -2.264974000354414e-06, -0.006423895712941885, -0.12396899610757828, -0.12307567149400711], "finish_reason": "stop"}], "metrics": {"energy": 898.0258333511352, "energy_per_token": 3.521669934710334, "time": 22.067476, "time_per_token": 0.08653912156862745}}
{"outputs": [{"text": "from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import Dense\n    from tensorflow.keras.optimizers import Adam\n    kfold = KFold(n_splits=n_splits, shuffle=True)\n    history = []\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n    for train, test in kfold.split(X, y):\n        model = Sequential()\n        model.add(Dense(20, activation='relu', input_dim=X.shape[1]))\n        model.add(Dense(1, activation='sigmoid'))\n        model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.01), metrics=['accuracy'])\n        fold_history = model.fit(X[train], y[train], epochs=epochs, batch_size=batch_size, verbose=0)\n        history.append(fold_history)\n    return history", "tokens": ["from", " tensor", "flow", ".", "keras", ".", "models", " import", " Sequ", "ential", "\n", "    ", "from", " tensor", "flow", ".", "keras", ".", "layers", " import", " D", "ense", "\n", "    ", "from", " tensor", "flow", ".", "keras", ".", "optim", "izers", " import", " Adam", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "history", " =", " []", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " Sequ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "dim", "=", "X", ".", "shape", "[", "1", "]))", "\n", "        ", "model", ".", "add", "(", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "        ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "=", "Adam", "(", "learning", "_", "rate", "=", "0", ".", "0", "1", ")", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "fold", "_", "history", " =", " model", ".", "fit", "(", "X", "[", "train", "]", ",", " y", "[", "train", "]", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " verbose", "=", "0", ")", "\n", "        ", "history", ".", "append", "(", "fold", "_", "history", ")", "\n", "    ", "return", " history", "\n", "\n", "def"], "logprobs": [-3.4662508964538574, -0.15751028060913086, -4.255681051290594e-05, -0.3333372175693512, -0.004899163730442524, -0.05513571947813034, -0.3064683675765991, -5.435795901576057e-05, -0.0023749261163175106, -4.172316494077677e-06, -0.008274795487523079, -0.003746634814888239, -0.0005041282274760306, -7.891343557275832e-05, -1.7881377516459906e-06, -0.0001227780303452164, -1.680836794548668e-05, -0.004138833377510309, -0.0018059387803077698, -0.00020203932945150882, -0.019139491021633148, -8.106198947643861e-06, -0.08418768644332886, -0.12192747741937637, -0.021713389083743095, -0.050554562360048294, -3.3854863431770355e-05, -0.027565298601984978, -0.002820087829604745, -0.04540281742811203, -0.09294500201940536, -3.4570634852570947e-06, -0.0009391664643771946, -0.07774943113327026, -0.0032073031179606915, -0.7076042294502258, -2.3502564430236816, -0.7700821161270142, -0.028113214299082756, -0.0010941001819446683, -2.682172998902388e-05, -5.960462772236497e-07, -0.0002499506517779082, -0.002463641343638301, -9.059865078597795e-06, -0.0005519058904610574, -4.2914423829643056e-05, -0.10493550449609756, -0.017043201252818108, -5.245195097813848e-06, -5.245195097813848e-06, -2.861018856492592e-06, -0.09177406132221222, -0.004210654646158218, -0.00014053787162993103, -0.00378855736926198, -0.7612825036048889, -0.01171235740184784, -0.03439851477742195, -2.6176505088806152, -0.23447474837303162, -0.005307156592607498, -0.0027749149594455957, -0.09813288599252701, -1.4690630435943604, -0.003650075290352106, -0.0037041164468973875, -0.005067480728030205, -4.6491513785440475e-06, -4.410734163684538e-06, 0.0, -0.013108858838677406, -0.031089384108781815, -0.0680379793047905, -0.21172742545604706, -0.16922208666801453, -0.007664084900170565, -1.1920928244535389e-07, -3.611976353568025e-05, -0.0020493713673204184, -3.9457496313843876e-05, -4.2199197196168825e-05, -8.630380034446716e-05, -0.0026144154835492373, -0.02829991839826107, -0.012080245651304722, -0.22597813606262207, -0.13193467259407043, -0.01578878052532673, -0.055216263979673386, -0.02399313822388649, -0.00016640232934150845, -0.0005061537376604974, -1.1086402082582936e-05, -2.825220326485578e-05, -8.702239938429557e-06, -0.0012567488010972738, -0.00017855956684798002, -0.04226355999708176, -0.001208290341310203, -0.0009676303598098457, -0.0012335318606346846, -0.005370119586586952, -0.07827626168727875, -0.0002631794777698815, -0.0002644904307089746, 0.0, -0.2019636482000351, -0.0008964095613919199, -0.0016988381976261735, -0.005239089950919151, -3.40932747349143e-05, -3.576272320060525e-06, -5.149708886165172e-05, -0.0005838358192704618, -7.152555099310121e-07, -5.686121585313231e-05, -0.2201942652463913, -0.0009278521756641567, -0.00048029806930571795, -0.28922319412231445, -0.044717367738485336, -0.0014873405452817678, -0.25516149401664734, -7.068861305015162e-05, -0.001157329068519175, -3.933898824470816e-06, -1.384701132774353, -0.002161073498427868, -0.028616346418857574, -0.018754303455352783, -2.264974000354414e-06, -0.004489343147724867, -0.0004538459761533886, -0.004030914045870304, -0.002415717113763094, -6.854299135738984e-05, -0.0004067785630468279, -1.6689286894688848e-06, -3.325883881188929e-05, -3.158996332786046e-05, -0.00019870213873218745, -6.9141146923357155e-06, -1.311301275563892e-06, -0.0021343089174479246, -0.0016877705929800868, -0.00024720950750634074, -0.0021899782586842775, -0.000534868217073381, -1.1920928244535389e-07, -0.0017774987500160933, -0.0016423083143308759, -0.006488565355539322, -0.06849348545074463, -3.218599158572033e-05, -0.0001752223033690825, -0.00012933371181134135, -0.09431897103786469, -0.0018105795606970787, -8.356221951544285e-05, -3.2186455882765586e-06, -4.887569048150908e-06, -5.006777428206988e-06, -2.145764938177308e-06, -2.861018856492592e-06, -0.07422922551631927, -0.026941312476992607, -0.0002205128694185987, -1.078650712966919, -0.37657874822616577, -1.1920858014491387e-05, -1.9073468138230965e-06, -0.0007743220776319504, -0.06359544396400452, -1.4543427823809907e-05, -0.025259748101234436, -0.23881974816322327, -0.018730318173766136, -0.00028010259848088026, -0.039165083318948746, -0.004358554258942604, -0.09750816971063614, -0.00024971229140646756, -0.0005793085438199341, -0.009273313917219639, -2.9393832683563232, -0.0023884836118668318, -0.004670899827033281, -0.0002460177056491375, -0.00017248096992261708, -8.368142152903602e-05, -6.6756979322235566e-06, -0.00014768941036891192, -0.012500977143645287, -0.0005554801900871098, -8.189342770492658e-05, -0.0009246364934369922, -0.00016234986833296716, -0.0023700501769781113, -0.000316212244797498, -9.775113539944869e-06, -0.0001382732152706012, -0.0003013156820088625, -0.1480654776096344, -0.00041261743172071874, -0.0027611248660832644, -4.410734163684538e-06, -0.0005595310358330607, -0.04376048222184181, -3.576272320060525e-06, -3.576272320060525e-06, -6.0437283536884934e-05, -0.0020951719488948584, -1.6689286894688848e-06, -4.172316494077677e-06, -0.011945380829274654, -0.5684994459152222, -0.0008169650682248175, -0.055817000567913055, -0.052082814276218414, -0.003055429784581065, -0.0012967520160600543, -0.010847647674381733, -0.0013529442949220538, -0.0008225633064284921, -0.0012265071272850037, -0.003837722120806575, -4.887569048150908e-06, -1.1920922133867862e-06, -0.018676264211535454, -0.000740968796890229, -0.05084793642163277, -0.018703643232584, -0.00115863885730505, -0.15278193354606628, -0.008065984584391117, -0.7631720900535583], "finish_reason": "stop"}], "metrics": {"energy": 827.0177279148102, "energy_per_token": 3.489526278121562, "time": 20.394602, "time_per_token": 0.08605317299578058}}
{"outputs": [{"text": "# Create a sequential model\n    model = tf.keras.models.Sequential()\n\n    # Add hidden layer with 20 neurons and ReLU activation\n    model.add(tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)))\n\n    # Add output layer with sigmoid activation\n    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n    # Compile the model with binary crossentropy loss and Adam optimizer\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    # Create k-fold cross-validation split\n    kf = KFold(n_splits=n_splits)\n\n    # Scale the data to the range [0, 1]\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    # List to store the model training history for each fold\n    histories = []\n\n    # Loop over the k-fold splits\n    for train_idx, test_idx in kf", "tokens": ["#", " Create", " a", " sequential", " model", "\n", "    ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "()", "\n", "\n", "    ", "#", " Add", " hidden", " layer", " with", " ", "2", "0", " neurons", " and", " Re", "LU", " activation", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", ")))", "\n", "\n", "    ", "#", " Add", " output", " layer", " with", " s", "igmoid", " activation", "\n", "    ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "\n", "    ", "#", " Com", "pile", " the", " model", " with", " binary", " cross", "entropy", " loss", " and", " Adam", " optimizer", "\n", "    ", "model", ".", "compile", "(", "loss", "='", "binary", "_", "cross", "entropy", "'", ",", " optimizer", "='", "adam", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "    ", "#", " Create", " k", "-", "fold", " cross", "-", "validation", " split", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "\n", "\n", "    ", "#", " Scale", " the", " data", " to", " the", " range", " [", "0", ",", " ", "1", "]", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " List", " to", " store", " the", " model", " training", " history", " for", " each", " fold", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " the", " k", "-", "fold", " splits", "\n", "    ", "for", " train", "_", "idx", ",", " test", "_", "idx", " in", " k", "f"], "logprobs": [-1.0269503593444824, -1.6958022117614746, -0.5583446621894836, -3.014960765838623, -0.1732155829668045, -0.27435266971588135, -0.0007856381707824767, -0.014161568135023117, -0.0008011230966076255, -0.03535426780581474, -3.8980677345534787e-05, -7.10462118149735e-05, -3.3378546504536644e-06, -0.7063258290290833, -2.0265558760002023e-06, -5.602820692729438e-06, 0.0, 0.0, -0.08859747648239136, -0.0007564543629996479, -0.36135759949684143, -0.00027092601521871984, -0.0021111122332513332, -0.3824843168258667, -1.6050572395324707, -0.14944352209568024, -0.22328506410121918, -0.1569477766752243, -0.006706231273710728, -0.00011681827891152352, -0.025799401104450226, -0.2989998459815979, -0.01823822408914566, -0.0006774752982892096, -0.0005729940603487194, -0.013349556364119053, -9.083335316972807e-05, -0.007719447370618582, -1.1086402082582936e-05, -1.0728830375228426e-06, -2.3603161025675945e-05, -0.00958223920315504, -4.541770613286644e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -0.0007780147134326398, -1.4305104514278355e-06, -0.00013171759201213717, -3.3378546504536644e-06, -1.7762025890988298e-05, -0.08363314718008041, -0.00015245705435518175, -0.00021419614495243877, -0.051234666258096695, -0.08403535187244415, -0.0003231241717003286, -1.087248682975769, -7.664863369427621e-05, -0.004034475889056921, -1.1920922133867862e-06, -0.032462913542985916, -0.003974872175604105, -0.004444126971065998, -0.003825134364888072, -3.576272320060525e-06, -0.0018762619001790881, -0.00027926836628466845, -0.001733230659738183, -0.0002874914789572358, -0.03906259685754776, -0.0006631797295995057, -0.0049459016881883144, -9.7508447652217e-05, -8.415821503149346e-05, -0.005947985220700502, -0.08574257045984268, -0.00020418466010596603, -0.0020512747578322887, -0.020415646955370903, -3.4570634852570947e-06, -0.00029797881143167615, -0.5297746062278748, -3.9219088648678735e-05, -0.002605379093438387, -3.099436753473128e-06, -5.590759246842936e-05, -1.07287787614041e-05, -0.00019369633810129017, -1.5497195136049413e-06, -6.318072337307967e-06, -8.344646857949556e-07, -5.483612312673358e-06, -1.0728830375228426e-06, -1.0847986231965479e-05, -2.622600959512056e-06, -1.6689286894688848e-06, -0.0007233387441374362, -0.0003833036171272397, -0.00020680672605521977, -0.00029094755882397294, -0.0010090741561725736, -1.9073468138230965e-06, -0.006173943635076284, -0.0006823595031164587, -0.002761838026344776, -0.00010251473577227443, -0.007180715911090374, -0.042067669332027435, -2.7418097943154862e-06, -0.16549146175384521, -0.0006170752458274364, -0.5689312815666199, -0.14004269242286682, -0.07918450981378555, -0.174312025308609, -0.00394625635817647, -0.03630244359374046, -0.581619381904602, -0.0011156531982123852, -0.004161389544606209, -8.070142939686775e-05, -0.00754932826384902, -8.940656698541716e-06, -2.861018856492592e-06, -0.0005639393348246813, -0.0465862937271595, -0.01596606895327568, -0.00016342257731594145, -3.2186455882765586e-06, -7.152531907195225e-06, -5.960462772236497e-07, -2.861018856492592e-06, -2.264974000354414e-06, -0.018627356737852097, -0.054066795855760574, -0.004731055814772844, -0.005022528115659952, -3.361645576660521e-05, -0.0015668508131057024, -0.001669800141826272, -0.016406161710619926, -0.00030787018476985395, -0.0002449450839776546, -0.006772303022444248, -0.00017093151109293103, -0.032307107001543045, -1.2919236421585083, -0.6318792104721069, -0.005200786050409079, -0.00078671018127352, -0.029973838478326797, -0.09494275599718094, -0.004649898037314415, -2.5128650665283203, -0.39133697748184204, -0.00024053541710600257, -0.013715784065425396, -0.32763513922691345, -0.0009890670189633965, -0.00046171018038876355, -7.510157047363464e-06, -3.576278118089249e-07, -1.680836794548668e-05, -0.00035696811391972005, -3.2186455882765586e-06, -0.00017772526189219207, -3.516612196108326e-05, -0.036352332681417465, -0.0064988695085048676, -2.264974000354414e-06, -5.960462772236497e-07, -1.0728830375228426e-06, -0.9687296152114868, -0.0022172171156853437, -0.16443142294883728, -6.103329360485077e-05, -0.08264629542827606, -1.2220804691314697, -0.3004995882511139, -0.6850083470344543, -1.99478018283844, -1.499040126800537, -0.581610381603241, -0.3231417238712311, -0.0002321927313460037, -0.0013174673076719046, -0.3104128837585449, -0.000196556793525815, -0.00019488819816615433, -0.3720463216304779, -0.00011407678539399058, -0.03400637209415436, -0.0031632171012461185, -0.0003861635341309011, -0.00019858295854646713, -3.2186455882765586e-06, -3.576278118089249e-07, 0.0, -0.0049577634781599045, -0.020789220929145813, -0.015818467363715172, -0.11988399922847748, -0.6011991500854492, -0.0012410327326506376, 0.0, -9.536697689327411e-06, -0.0001656871900195256, -2.1934269170742482e-05, -1.311301275563892e-06, -2.7179348762729205e-05, -0.0009299959056079388, -0.0033822020050138235, -0.004186437930911779, -0.02476225234568119, -4.9470632802695036e-05, -0.15498009324073792, -2.3510632514953613, -0.01648109406232834, -0.038521453738212585, -0.3468795120716095, -2.8778066635131836, -1.3051385879516602, -0.07314407825469971, -0.10039431601762772, -0.00840400904417038, -0.01838628761470318, -0.001148755894973874, -5.924526340095326e-05, -0.46555688977241516, -0.0044555203057825565, -0.0006920088781043887, -0.0011745942756533623, -0.00028081765049137175, -0.017914632335305214, -3.158996332786046e-05, -0.1110507994890213, -1.3563647270202637, -0.208265483379364, -1.1844412088394165, -0.26555585861206055, -0.022743217647075653, -0.018713003024458885, -0.15761812031269073, -0.08253367990255356, -4.458328112377785e-05, -0.0012349606258794665, -0.04125970974564552, -0.06036687269806862, -1.924155592918396, -0.021188216283917427, -0.4620019793510437, -2.622600959512056e-06, -2.3841830625315197e-06, -4.625213477993384e-05, -0.0007620529504492879, -1.156323378381785e-05], "finish_reason": "length"}], "metrics": {"energy": 930.4694647960669, "energy_per_token": 3.634646346859636, "time": 22.06888, "time_per_token": 0.0862065625}}
{"outputs": [{"text": "# Create K-fold Cross Validation model\n    fold = KFold(n_splits=n_splits, shuffle=True)\n    # Normalize the data\n    scaler = MinMaxScaler()\n    scaler.fit(X)\n    X = scaler.transform(X)\n\n    history_list = []\n    for train, test in fold.split(X, y):\n        # Initialize the model\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.InputLayer(input_shape=(X.shape[1],)),\n            tf.keras.layers.Dense(20, activation=\"relu\"),\n            tf.keras.layers.Dense(1, activation=\"sigmoid\")\n        ])\n        model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n        model.predict(X[test])\n\n        # Train the model\n        history = model.fit(X[train], y[train], epochs=epochs, validation_split=0.1, batch_", "tokens": ["#", " Create", " K", "-", "fold", " Cross", " Validation", " model", "\n", "    ", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "#", " Normal", "ize", " the", " data", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "scal", "er", ".", "fit", "(", "X", ")", "\n", "    ", "X", " =", " scal", "er", ".", "transform", "(", "X", ")", "\n", "\n", "    ", "history", "_", "list", " =", " []", "\n", "    ", "for", " train", ",", " test", " in", " fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "#", " Initialize", " the", " model", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "Input", "Layer", "(", "input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "=", "\"", "relu", "\"", ")", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "=", "\"", "s", "igmoid", "\"", ")", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "=", "\"", "adam", "\"", ",", " loss", "=", "\"", "binary", "_", "cross", "entropy", "\"", ",", " metrics", "=[", "\"", "accuracy", "\"", "])", "\n", "        ", "model", ".", "predict", "(", "X", "[", "test", "])", "\n", "\n", "        ", "#", " Train", " the", " model", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "[", "train", "]", ",", " y", "[", "train", "]", ",", " epochs", "=", "epoch", "s", ",", " validation", "_", "split", "=", "0", ".", "1", ",", " batch", "_"], "logprobs": [-1.0269503593444824, -1.6958022117614746, -2.360069990158081, -0.709974467754364, -0.5741268396377563, -0.5703670978546143, -0.007168998476117849, -0.1583603471517563, -0.05419451743364334, -0.004565292503684759, -2.7667431831359863, -1.019021987915039, -0.02085028402507305, -9.417489309271332e-06, -1.1920922133867862e-06, -0.00022075122979003936, -0.012115813791751862, -2.7179348762729205e-05, -0.0002547178009990603, -7.712543447269127e-05, -0.09814920276403427, -0.007994912564754486, -6.079655122448457e-06, -5.125986263010418e-06, -1.9073468138230965e-06, -0.15589241683483124, -0.012016643770039082, -0.0005694198189303279, -0.02267993986606598, -1.3495336771011353, -0.011056585237383842, -0.9568036794662476, -1.4424396753311157, -2.4220972061157227, -0.09882934391498566, -0.542178750038147, -0.833158552646637, -0.2686022222042084, -0.0006749735912308097, -0.2337186187505722, -0.005369171034544706, -0.003741765394806862, -0.0002790300059132278, -2.0265558760002023e-06, -1.0609570381348021e-05, -1.1920928244535389e-07, -0.03024139069020748, -0.03718344867229462, -0.010107642039656639, -1.7896647453308105, -0.20588979125022888, -0.014907507225871086, -0.00020704510097857565, -0.05513639748096466, -0.00382608431391418, -0.01690642535686493, -0.003201955696567893, -0.07616923749446869, -0.18442581593990326, -0.3183751702308655, -0.0015401893761008978, -8.344646857949556e-07, -3.099436753473128e-06, -0.0005951540661044419, -0.0002002515539061278, -0.00024232311989180744, -0.0005258131423033774, -0.005609485320746899, -0.5025528073310852, -0.00015376816736534238, -3.256577730178833, -1.8109652996063232, -0.216222882270813, -0.0015192406717687845, -0.013616419397294521, -0.03538372740149498, -0.3444144129753113, -0.16977301239967346, -0.09815622866153717, -0.2789994776248932, -0.1480349451303482, -0.0006250573205761611, -0.004579769913107157, -1.549708758830093e-05, -6.437280717364047e-06, -0.0019195717759430408, -0.0011318475008010864, -0.7955147624015808, -0.002741509350016713, -0.001321157906204462, -0.012882697395980358, -0.037662751972675323, -0.7876914143562317, -2.50229549407959, -0.3051771819591522, -0.05788922309875488, -0.20216332376003265, -0.0005566716426983476, -0.06611558794975281, -0.0009814451914280653, -0.1067746952176094, -3.0040289857424796e-05, -0.00025376438861712813, -2.145764938177308e-06, -1.08253014087677, -1.7881377516459906e-06, -0.0002146728802472353, 0.0, -4.768370445162873e-07, -1.3718364238739014, -0.00757346348837018, -0.035352542996406555, -0.09034278988838196, -1.9073468138230965e-06, -3.3378546504536644e-06, -2.3841830625315197e-06, -0.02417619340121746, -3.814689989667386e-06, -2.3029143810272217, -0.5809391736984253, -0.01802024431526661, -0.12406788021326065, -1.156323378381785e-05, -0.000617432699073106, -0.13717599213123322, -0.02121155709028244, -0.014739898964762688, -6.556489552167477e-06, -0.041717857122421265, -0.0010376551654189825, -0.00783808808773756, -0.00028272447525523603, -0.028964634984731674, -4.8397800128441304e-05, -0.023748472332954407, -0.0026138208340853453, -0.008746527135372162, -2.145764938177308e-06, -8.344646857949556e-07, -3.3378546504536644e-06, -6.41325386823155e-05, -3.576272320060525e-06, -0.004759174305945635, -1.4305104514278355e-06, -7.60526381782256e-05, -0.18239152431488037, -0.0009600082994438708, -0.0014872215688228607, -0.010679356753826141, -1.7475124597549438, -0.5611748695373535, -0.0016677769599482417, -2.90866428258596e-05, -0.009327170439064503, -1.585470999998506e-05, -0.02209744043648243, -0.000120751719805412, -0.0010830257087945938, -1.5497195136049413e-06, -4.768370445162873e-07, -9.536738616588991e-07, -2.288792165927589e-05, -2.3841830625315197e-06, -0.0035532689653337, -5.960462772236497e-07, -5.364403477869928e-06, -0.01183830015361309, -0.012907763943076134, -0.0014724613865837455, -0.014503413811326027, -0.00028701478731818497, -0.0022851326502859592, -1.1920928244535389e-07, -2.7418097943154862e-06, -0.01519086305052042, -0.3793834149837494, -0.015173250809311867, -0.013142391107976437, -0.00014923889830242842, -0.6148075461387634, -0.9500046372413635, -0.0007288183551281691, -0.0025496138259768486, -0.0007834940915927291, -0.5912244319915771, -1.4543427823809907e-05, -0.2631189823150635, -0.2658940255641937, -0.06212424486875534, -5.5549986427649856e-05, -7.438383181579411e-05, -0.3092704713344574, -0.011992261745035648, -0.009992103092372417, -0.004158658906817436, -1.9550132492440753e-05, -2.1219027985353023e-05, -2.861018856492592e-06, -9.536738616588991e-07, -0.008816600777208805, -0.10848966240882874, -0.12202529609203339, -0.013505754061043262, -0.017650671303272247, -5.245195097813848e-06, -0.003090845188125968, -0.00031609306461177766, -1.0008046627044678, -2.337817430496216, -0.00826746504753828, -1.5240272283554077, -0.0016617074143141508, -0.006736899726092815, -0.14295607805252075, -0.12158603966236115, -0.16325920820236206, -0.04315714165568352, -0.3515198826789856, -0.0013256819220259786, -0.11876102536916733, -0.8635558485984802, -0.018636833876371384, -0.011951623484492302, -0.07854475826025009, -0.0003583981015253812, -0.05136546865105629, -0.00824251864105463, -0.0015237637562677264, -1.311301275563892e-06, -4.0531076592742465e-06, -0.0002928543253801763, -0.19437463581562042, -0.0013655632501468062, -0.0006593675934709609, -0.0002928543253801763, -0.0002797450579237193, -0.040419843047857285, -0.0009046276099979877, -3.2782016205601394e-05, -0.0002805792901199311, -0.0010936238104477525, -0.21882717311382294, -0.0016999093350023031, -0.0012241258518770337, -6.198863957251888e-06, -0.0016884845681488514, -1.8582918643951416, -0.000105375460407231, -2.447453498840332, -0.0008455515489913523, -0.007763214409351349, -0.004314518999308348, -1.82915461063385, -0.06294642388820648, -0.08547808229923248, -3.3378546504536644e-06], "finish_reason": "length"}], "metrics": {"energy": 851.9795253620148, "energy_per_token": 3.3280450209453702, "time": 21.633146, "time_per_token": 0.0845044765625}}
{"outputs": [{"text": "kf = KFold(n_splits=n_splits, shuffle=True)\n    scaler = MinMaxScaler()\n\n    X_scaled = scaler.fit_transform(X)\n    histories = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(units=20, activation='relu'),\n            tf.keras.layers.Dense(units=1, activation='sigmoid')\n        ])\n\n        model.compile(optimizer=tf.keras.optimizers.Adam(0.01),\n                      loss=tf.keras.losses.BinaryCrossentropy(),\n                      metrics=['accuracy'])\n\n        history = model.fit(X_train, y_train,\n                            validation_data=(X", "tokens": ["k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "_", "scal", "ed", "[", "train", "_", "index", "]", ",", " X", "_", "scal", "ed", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "units", "=", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "units", "=", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "=", "tf", ".", "keras", ".", "optim", "izers", ".", "Adam", "(", "0", ".", "0", "1", ")", ",", "\n", "                ", "      ", "loss", "=", "tf", ".", "keras", ".", "loss", "es", ".", "Binary", "Cross", "entropy", "()", ",", "\n", "                ", "      ", "metrics", "=['", "accuracy", "'])", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ",", "\n", "                ", "            ", "validation", "_", "data", "=(", "X"], "logprobs": [-2.2042346000671387, -0.4287601411342621, -0.0017926113214343786, -0.0006644901586696506, -2.7418097943154862e-06, -5.960462772236497e-07, -7.378782902378589e-05, -0.0013368725776672363, -7.152531907195225e-06, -6.067568756407127e-05, -3.9219088648678735e-05, -0.07565411180257797, -0.009928249754011631, -5.8412379075889476e-06, -3.099436753473128e-06, -1.311301275563892e-06, -0.40954914689064026, -0.017179254442453384, -0.00010215714428341016, -0.007901246659457684, -0.45962685346603394, -0.011460070498287678, -0.09417815506458282, -2.216137170791626, -0.0007751559023745358, -0.0008873577462509274, -0.0005586970364674926, -3.099436753473128e-06, -1.537788011773955e-05, 0.0, -0.005778512451797724, -0.012754414230585098, -1.7029402256011963, -0.00012563870404846966, -2.1008212566375732, -1.7068326473236084, -0.3071399927139282, -0.0009517907164990902, -0.0019348012283444405, -0.005566334817558527, 0.0, -1.6331539882230572e-05, -9.941560711013153e-05, -2.539125671319198e-05, -3.981510963058099e-05, -8.535020606359467e-05, -0.002640453865751624, -0.021297216415405273, -0.02145451307296753, -1.0910762548446655, -0.4261484742164612, -0.016116932034492493, -0.001095290994271636, -0.0028733417857438326, -0.00760682625696063, -0.13300777971744537, -8.535020606359467e-05, -0.061689700931310654, -0.05609959363937378, -0.036410268396139145, -0.5335184335708618, -0.0006139777251519263, -0.28001663088798523, -3.3378546504536644e-06, -3.576272320060525e-06, -0.00016830935783218592, -0.00030155404238030314, -1.823885577323381e-05, -8.344646857949556e-07, -3.576272320060525e-06, -0.0006399490521289408, -0.0011863820254802704, -0.7022572755813599, -0.0003200257197022438, -0.03737271577119827, -0.09653113782405853, -0.0005994430393911898, -0.0012711548479273915, -0.022148512303829193, -0.029404832050204277, -1.2636104656849056e-05, -0.02316531166434288, -0.008523868396878242, -0.0008874768391251564, -0.06596437841653824, -0.0001037067049765028, -0.00012170527770649642, -0.00019071667338721454, -0.00010001159535022452, -3.576278118089249e-07, -1.7881377516459906e-06, -0.006904433947056532, -0.00013851160474587232, -0.0002623452164698392, -0.013624534010887146, -1.7762025890988298e-05, -1.8954096958623268e-05, -1.5258672647178173e-05, -0.00023827097902540118, -7.152555099310121e-07, -3.576278118089249e-07, -1.9907753085135482e-05, -0.0004413345886860043, -0.0008297099848277867, -0.001128513365983963, -0.00014149141497910023, -3.516612196108326e-05, -0.0005685858195647597, -0.0004164305282756686, -1.4305104514278355e-06, -1.6212332411669195e-05, -9.035655966727063e-05, -0.0012984187342226505, -0.0009563163621351123, -2.1934269170742482e-05, 0.0, -3.576278118089249e-07, -7.521823135903105e-05, -0.0004408579843584448, -0.00011693747364915907, -0.0006248190766200423, -5.07818695041351e-05, -3.576278118089249e-07, -1.1920928244535389e-07, -2.145764938177308e-06, -0.0005099665140733123, -0.023709239438176155, -0.0010659971740096807, -0.07208625227212906, -0.000433112756581977, -0.0223335362970829, -2.4437606043647975e-05, -0.00014709345123264939, -2.145764938177308e-06, -0.3372524678707123, 0.0, -2.3841855067985307e-07, -0.5483433604240417, -0.0069135501980781555, -0.020299190655350685, -0.0037013848777860403, -3.6954811548639555e-06, -5.960462772236497e-07, -2.145764938177308e-06, -0.010613778606057167, -2.145764938177308e-06, -0.04043278098106384, -2.861018856492592e-06, -3.2066785934148356e-05, -2.2470502853393555, -0.0002965487365145236, -0.03212219104170799, -0.0018587708473205566, -0.0005609607324004173, -0.03363943099975586, -0.07700799405574799, -0.0025541323702782393, -1.226142406463623, -2.753696753643453e-05, -0.013334734365344048, -0.00021324267436284572, -0.00023719835735391825, -2.9802276912960224e-06, -2.264974000354414e-06, -4.768360213347478e-06, -1.2636104656849056e-05, -2.145764938177308e-06, -0.008857011795043945, -1.1920928244535389e-07, -4.887569048150908e-06, -0.0023940731771290302, -1.9192511899746023e-05, -0.01174628920853138, -0.003341331612318754, -0.0001833270798670128, -0.0009825170272961259, -0.0014040146488696337, 0.0, -0.0008774721063673496, -0.047243744134902954, -0.006683969404548407, -0.005003431346267462, -0.00011550712952157483, -0.114739790558815, -0.00022504181833937764, -0.0202473234385252, -4.911301948595792e-05, -0.0002369599969824776, -0.00045503751607611775, -0.3450925350189209, -3.4570634852570947e-06, -2.0626304149627686, -0.05466088280081749, -7.867782187531702e-06, -0.026668347418308258, -2.0265558760002023e-06, -1.1801649634435307e-05, -3.755022044060752e-05, -3.3378546504536644e-06, -0.04814925044775009, -1.1082959175109863, -0.8877606987953186, -7.724463648628443e-05, -0.01837247796356678, -0.985393226146698, -0.002454484812915325, -6.115249561844394e-05, -0.11825404316186905, -0.00318508199416101, -0.04052276164293289, -0.000302030734019354, -0.20244170725345612, -0.0026151288766413927, -1.3947389561508317e-05, -0.005745325703173876, -1.6689286894688848e-06, -8.511180931236595e-05, -1.6689286894688848e-06, -1.5497195136049413e-06, -0.45237213373184204, -3.3378546504536644e-06, -1.9192511899746023e-05, -0.3957372009754181, -0.00021991695393808186, -0.0020920787937939167, -7.593343616463244e-05, -0.0003570872650016099, -0.00019393471302464604, -0.19319985806941986, -0.01728236675262451, -0.009132045321166515, -0.00020621081057470292, -0.026606827974319458, -0.0003673355677165091, -0.19037583470344543, -0.0009247555863112211, -0.0005416594794951379, -9.298280929215252e-06, -8.702239938429557e-06, -0.00014065706636756659, -0.0683063417673111, -0.0011718557216227055, -9.297892393078655e-05, -0.00041631137719377875, -0.0295159500092268, -5.006664650863968e-05, -1.4305104514278355e-06, -0.0015474499668926, -1.0133111476898193, -0.001191263902001083, -0.009514699690043926, -1.5663189888000488, -0.00011729506513802335, -0.008058653213083744, -0.0006522196927107871, -0.00033087024348787963], "finish_reason": "length"}], "metrics": {"energy": 869.8295511608131, "energy_per_token": 3.3977716842219263, "time": 21.653055, "time_per_token": 0.08458224609375}}
{"outputs": [{"text": "kf = KFold(n_splits=n_splits)\n    kf.get_n_splits(X)\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n    histories = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        model = tf.keras.Sequential(\n            [\n                tf.keras.layers.Dense(20, activation=\"relu\"),\n                tf.keras.layers.Dense(1, activation=\"sigmoid\"),\n            ]\n        )\n        model.compile(loss=tf.keras.losses.binary_crossentropy, optimizer=\"adam\", metrics=[\"accuracy\"])\n        history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_", "tokens": ["k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "\n", "    ", "k", "f", ".", "get", "_", "n", "_", "split", "s", "(", "X", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "_", "scal", "ed", "[", "train", "_", "index", "]", ",", " X", "_", "scal", "ed", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "(", "\n", "            ", "[", "\n", "                ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "=", "\"", "relu", "\"", ")", ",", "\n", "                ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "=", "\"", "s", "igmoid", "\"", ")", ",", "\n", "            ", "]", "\n", "        ", ")", "\n", "        ", "model", ".", "compile", "(", "loss", "=", "tf", ".", "keras", ".", "loss", "es", ".", "binary", "_", "cross", "entropy", ",", " optimizer", "=", "\"", "adam", "\"", ",", " metrics", "=[", "\"", "accuracy", "\"", "])", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_"], "logprobs": [-2.2042346000671387, -0.4287601411342621, -0.0017926113214343786, -0.0006644901586696506, -2.7418097943154862e-06, -5.960462772236497e-07, -7.378782902378589e-05, -0.0013368725776672363, -7.152531907195225e-06, -6.067568756407127e-05, -3.9219088648678735e-05, -0.07565411180257797, -0.009928249754011631, -5.8412379075889476e-06, -3.099436753473128e-06, -1.311301275563892e-06, -1.10150146484375, -0.024695031344890594, -0.051631659269332886, -2.479698657989502, -0.01961992122232914, -0.0005958688561804593, -0.00030179237364791334, -1.1920928244535389e-07, -9.727005090098828e-05, -4.172316494077677e-06, -0.0003165697562508285, -1.9073468138230965e-06, -0.002714403672143817, -0.0007499027997255325, -0.0018314032349735498, -0.0015655416063964367, -0.7462852001190186, -1.5207232236862183, -0.001761909923516214, -0.0016871754778549075, -0.0007063039811328053, -2.145764938177308e-06, -1.4185804502631072e-05, 0.0, -0.008473514579236507, -0.017874468117952347, -0.09378685057163239, -0.31764763593673706, -1.5470397472381592, -0.14170293509960175, -0.0011542332358658314, -0.0006854568491689861, -0.0016881275223568082, -9.536738616588991e-07, -5.8412379075889476e-06, -6.496695277746767e-05, -1.5616295058862306e-05, -0.0002686616498976946, -3.909988299710676e-05, -0.0020651936065405607, -0.01195751316845417, -0.010074008256196976, -0.402549147605896, -0.3755488097667694, -0.03167776018381119, -0.0013437775196507573, -0.004231072496622801, -0.004675171338021755, -1.0931251049041748, -0.00011240804451517761, -0.0685572624206543, -0.04569998383522034, -0.07407558709383011, -0.17134839296340942, -0.0003554189461283386, -0.12755846977233887, -4.410734163684538e-06, -7.390948667307384e-06, -0.00024339574156329036, -0.0013255628291517496, -9.059865078597795e-06, -2.50339189733495e-06, -3.099436753473128e-06, -0.0032380789052695036, -0.0006238659843802452, -0.4611545205116272, -0.00022802136663813144, -0.030744146555662155, -0.057727206498384476, -0.0008442413527518511, -0.000814582861494273, -0.02360585704445839, -0.03993086516857147, -1.0609570381348021e-05, -0.009572675451636314, -0.014246306382119656, -0.0009970461251214147, -0.03721250593662262, -6.615896563744172e-05, -5.2569914259947836e-05, -0.00017617580306250602, -0.0001419681793777272, -3.576278118089249e-07, -3.4570634852570947e-06, -0.052498362958431244, -0.0001147919538198039, -0.00021789084712509066, -0.014422692358493805, -6.627816765103489e-05, -1.7881377516459906e-06, -1.537788011773955e-05, -0.0002540027489885688, -5.960462772236497e-07, -3.576278118089249e-07, -1.1205610462639015e-05, -0.0006893880781717598, -0.0004839917819481343, -0.0021281230729073286, -9.464769391342998e-05, -4.589452510117553e-05, -0.0005914607318118215, -0.0006933192489668727, -2.622600959512056e-06, -3.182837463100441e-05, -0.00014768941036891192, -0.0022551598958671093, -0.0007074952009133995, -4.124556289752945e-05, -1.1920928244535389e-07, -1.311301275563892e-06, -5.817244164063595e-05, -0.0003044141922146082, -0.00012039413559250534, -0.0010557560017332435, -0.00012242044613230973, -4.768370445162873e-07, -1.1920928244535389e-07, -2.145764938177308e-06, -0.0004850641416851431, -2.0936379432678223, -0.05353834480047226, -0.0005688241217285395, -0.035204093903303146, -3.40932747349143e-05, -9.560128091834486e-05, -2.3841830625315197e-06, -0.3321582078933716, 0.0, -2.3841855067985307e-07, -2.91448974609375, -0.008037958294153214, -0.013106153346598148, -0.005547367036342621, -0.05563851818442345, -0.0024878999684005976, -0.009122241288423538, -6.437280717364047e-06, -8.344646857949556e-07, -2.264974000354414e-06, -0.057734180241823196, -3.3378546504536644e-06, -0.05568181723356247, -5.125986263010418e-06, -7.521823135903105e-05, -0.41146618127822876, -0.0007472821744158864, -0.001549235312268138, -0.05048723891377449, -0.29530948400497437, -0.08980701863765717, -0.0012360322289168835, -9.894321920000948e-06, -0.4322773814201355, -0.00010907054820563644, -0.0044981250539422035, -0.00023552982020191848, -0.00041714549297466874, -3.099436753473128e-06, -6.437280717364047e-06, -1.156323378381785e-05, -3.9457496313843876e-05, -2.622600959512056e-06, -0.005958413239568472, -1.1920928244535389e-07, -7.629365427419543e-06, -0.017935708165168762, -0.009708096273243427, -0.00020358874462544918, -0.0027032282669097185, -0.00018726025882642716, -0.0015755394706502557, -1.1920928244535389e-07, -5.125986263010418e-06, -0.0014217516873031855, -0.027889030054211617, -0.0012223399244248867, -0.006554533261805773, -0.00064876489341259, -0.0022115076426416636, -0.00023457636416424066, -7.033323527139146e-06, -0.00024530262453481555, -0.11473415791988373, -0.013282740488648415, -6.55629628454335e-05, -0.00010179955279454589, -4.637133679352701e-05, -2.814260959625244, -0.03151259198784828, -2.8699309825897217, -1.3351351299206726e-05, -0.011621395125985146, -3.099436753473128e-06, -0.0001699779968475923, -7.748573807475623e-06, -5.960446742392378e-06, -1.1243455410003662, -6.9141146923357155e-06, -7.033323527139146e-06, -7.867782187531702e-06, -0.022896673530340195, -0.36469507217407227, -0.01706453040242195, -0.0947856530547142, -0.17432554066181183, -9.894321920000948e-06, -0.17240314185619354, -0.02106589637696743, -0.04224367439746857, -0.04610726609826088, -0.033331625163555145, -1.0490362910786644e-05, -0.0009864469757303596, -0.00033480284037068486, -0.09120097011327744, -0.17184092104434967, -0.0008771148277446628, -0.0007934997556731105, -5.960446742392378e-06, -7.390948667307384e-06, -0.00028713393840007484, -0.10039960592985153, -0.0017494149506092072, -7.664863369427621e-05, -0.00017450717859901488, -0.0029717590659856796, -9.405170567333698e-05, -4.410734163684538e-06, -0.0011893587652593851, -0.6896856427192688, -0.0004033228906337172, -0.003257209435105324, -5.960446742392378e-06, -0.0014477020595222712, -0.1144920065999031, -8.106198947643861e-06, -6.318072337307967e-06, -9.560128091834486e-05, -0.0012756790965795517, -1.4305104514278355e-06], "finish_reason": "length"}], "metrics": {"energy": 945.0330916719438, "energy_per_token": 3.6915355143435304, "time": 22.465345, "time_per_token": 0.08775525390625}}
{"outputs": [{"text": "kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    results = []\n    for train_index, test_index in kfold.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        X_train = MinMaxScaler().fit_transform(X_train)\n        X_test = MinMaxScaler().fit_transform(X_test)\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        history = model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs", "tokens": ["k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "    ", "results", " =", " []", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "fold", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "        ", "X", "_", "train", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "test", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", "_", "test", ")", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", ",", " y", "_", "train", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " epochs", "=", "epoch", "s"], "logprobs": [-2.2042346000671387, -1.131065011024475, -0.011585691943764687, -0.0008166077313944697, -4.768360213347478e-06, -9.536738616588991e-07, -7.903263758635148e-05, -0.0064827618189156055, -1.9430925021879375e-05, -0.00027783826226368546, -4.970903682988137e-05, -0.10699933767318726, -0.012279270216822624, -6.794906312279636e-06, -5.006777428206988e-06, -9.536738616588991e-07, -0.0779527872800827, -0.008871898986399174, -6.139089964563027e-05, -0.004156878218054771, -0.5512220859527588, -0.0019422968616709113, -3.6954811548639555e-06, -3.576278118089249e-07, -0.00014923889830242842, -0.3535034954547882, -0.024898190051317215, -0.0043144007213413715, -0.011874113231897354, -0.08650347590446472, -2.152446746826172, -0.03326543793082237, -0.0027122637256979942, -0.0017143089789897203, -0.42913296818733215, -0.8688686490058899, -0.02756112441420555, -1.1556711196899414, -0.5930943489074707, -0.0003343261778354645, -0.09032176434993744, -2.9802276912960224e-06, -2.622600959512056e-06, -0.00038521020906046033, -0.008568309247493744, -2.0146166207268834e-05, -4.482168878894299e-05, -4.6491513785440475e-06, -5.23315102327615e-05, -0.0008741371566429734, -0.36102259159088135, -0.0006823595031164587, -0.008539351634681225, -0.25304314494132996, -0.006796339061111212, -0.0027331875171512365, -0.023173581808805466, -0.03165789321064949, -3.3378044463461265e-05, -0.09922850877046585, -0.014794166199862957, -0.0017119289841502905, -0.003911939915269613, -0.0013529442949220538, -7.152555099310121e-07, -6.6756979322235566e-06, -0.005786927416920662, -0.0007398966699838638, -9.250213042832911e-05, -1.8954096958623268e-05, -0.00012957210128661245, -4.768370445162873e-07, -4.768370445162873e-07, -1.4543427823809907e-05, -0.00023755589791107923, -0.0004158347437623888, -0.004505245480686426, -3.7431014789035544e-05, -2.610649426060263e-05, -0.00030214988510124385, -0.0005469018360599875, -1.9073468138230965e-06, -1.8715683836489916e-05, -0.00010024998482549563, -0.000780754373408854, -0.00018821375851985067, -3.4689302992774174e-05, -1.1920928244535389e-07, -1.0728830375228426e-06, -5.280832192511298e-05, -0.00031728477915748954, -7.438383181579411e-05, -4.172316494077677e-06, -0.000683074293192476, 0.0, -2.145764938177308e-06, -9.179073458653875e-06, -0.0002975021197926253, -0.8572868704795837, -2.072444438934326, -0.005635682959109545, -0.11037827283143997, -0.46183568239212036, -0.13151103258132935, -1.0251946150674485e-05, -1.1920858014491387e-05, -3.576278118089249e-07, -0.03163294866681099, -0.00013529339048545808, -0.0008573431987315416, -0.0027429359033703804, -3.099436753473128e-06, -0.0005329619161784649, -0.0035955561324954033, -0.002749593462795019, -1.2516897186287679e-05, -0.03766252100467682, -0.028175801038742065, -0.02921254374086857, -0.13639767467975616, -0.00011681827891152352, -0.003548873821273446, -0.0009086770587600768, -0.000646501372102648, -8.702239938429557e-06, -9.059865078597795e-06, 0.0, -0.0006439996068365872, -4.172316494077677e-06, -0.005297195632010698, -8.34461570775602e-06, -1.4781842764932662e-05, -3.683499380713329e-05, -6.305972783593461e-05, -2.0265373677830212e-05, -1.1444026313256472e-05, -0.00013636612857226282, -0.002212697174400091, -0.2840745449066162, -0.17825505137443542, -0.0005597693379968405, -0.037441156804561615, -2.825220326485578e-05, -9.178694017464295e-05, -2.861018856492592e-06, -0.7054764628410339, 0.0, -2.3841855067985307e-07, -0.781341552734375, -0.014371813274919987, -0.025155479088425636, -0.0032076595816761255, -5.483612312673358e-06, -1.311301275563892e-06, -1.1920922133867862e-06, -0.014735317789018154, -2.50339189733495e-06, -0.022453835234045982, -4.172316494077677e-06, -4.7205765440594405e-05, -0.29742392897605896, -0.0008683010237291455, -0.0020059479866176844, -0.11724258214235306, -0.06762337684631348, -0.0020205811597406864, -0.5531348586082458, -3.9219088648678735e-05, -0.0010962436208501458, -8.583032467868179e-06, -0.07874960452318192, -0.09875623136758804, -0.022226279601454735, -0.07487251609563828, -0.0008769956766627729, -0.0061984676867723465, -1.9073468138230965e-06, -0.003802926978096366, -0.0005323661607690156, -0.028820445761084557, -3.790783375734463e-05, -0.012716514989733696, -2.4318398573086597e-05, -0.0011693552369251847, -0.0003594706067815423, -0.00011419598013162613, -1.311301275563892e-06, -7.152555099310121e-07, -5.960462772236497e-07, -6.437280717364047e-06, -3.099436753473128e-06, -0.006261493545025587, 0.0, -2.0265558760002023e-06, -0.006609601899981499, -0.007106148637831211, -0.00027843413408845663, -0.000512111175339669, -0.0013878247700631618, -1.1920928244535389e-07, -0.0006766413571313024, -0.01686926744878292, -0.011582746170461178, -0.0024703005328774452, -6.186770770000294e-05, -0.009652961976826191, -0.01910078153014183, -9.762764238985255e-05, -0.0006210067658685148, -0.0006995138246566057, -0.2744593024253845, -1.1920922133867862e-06, -0.1644359827041626, -0.015606063418090343, -2.0146166207268834e-05, -5.245195097813848e-06, -0.05805526673793793, -0.007339537609368563, -0.0005115154199302197, -1.5497195136049413e-06, -4.529942543740617e-06, -1.4305104514278355e-06, -0.0008989107445813715, -1.680836794548668e-05, -0.016470540314912796, -0.006319302599877119, -0.032356392592191696, -0.0005731132114306092, -8.082063141046092e-05, -0.004959542769938707, -0.12477124482393265, -0.00036030475166626275, -0.0004395472351461649, -5.483612312673358e-06, -3.6954811548639555e-06, -0.0002774807217065245, -0.0754777044057846, -0.0005383234238252044, -3.158996332786046e-05, -0.00033456450910307467, -0.005377945024520159, -2.8371408916427754e-05, -3.576272320060525e-06, -0.0040668887086212635, -1.1262986660003662, -6.437280717364047e-06, -3.3378546504536644e-06, -0.0020136809907853603, -0.0007664603181183338, -1.6689286894688848e-06, -6.556489552167477e-06, -5.8530047681415454e-05, -0.06393187493085861, -6.472854875028133e-05, -0.0013972291490063071, -3.099436753473128e-06], "finish_reason": "length"}], "metrics": {"energy": 957.2518214321143, "energy_per_token": 3.7392649274691965, "time": 24.109995, "time_per_token": 0.09417966796875}}
{"outputs": [{"text": "kf = KFold(n_splits=n_splits, shuffle=True)\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n    histories = []\n    for train_idx, val_idx in kf.split(X):\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        history = model.fit(\n            X[train_idx], y[train_idx],\n            validation_data=(X[val_idx], y[val_idx]),\n            batch_size=batch_size,\n            epochs=epochs,\n            verbose=0\n        )\n        histories.append(history)\n    return histories", "tokens": ["k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "    ", "for", " train", "_", "idx", ",", " val", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "history", " =", " model", ".", "fit", "(", "\n", "            ", "X", "[", "train", "_", "idx", "]", ",", " y", "[", "train", "_", "idx", "]", ",", "\n", "            ", "validation", "_", "data", "=(", "X", "[", "val", "_", "idx", "]", ",", " y", "[", "val", "_", "idx", "])", ",", "\n", "            ", "batch", "_", "size", "=", "batch", "_", "size", ",", "\n", "            ", "epoch", "s", "=", "epoch", "s", ",", "\n", "            ", "verbose", "=", "0", "\n", "        ", ")", "\n", "        ", "hist", "ories", ".", "append", "(", "history", ")", "\n", "    ", "return", " histories", "\n", "\n", "def"], "logprobs": [-2.2042346000671387, -0.4287601411342621, -0.0017926113214343786, -0.0006644901586696506, -2.7418097943154862e-06, -5.960462772236497e-07, -7.378782902378589e-05, -0.0013368725776672363, -7.152531907195225e-06, -6.067568756407127e-05, -3.9219088648678735e-05, -0.07565411180257797, -0.009928249754011631, -5.8412379075889476e-06, -3.099436753473128e-06, -1.311301275563892e-06, -0.40954914689064026, -0.017179254442453384, -0.00010215714428341016, -0.007901246659457684, -0.45962685346603394, -0.011460070498287678, -0.09417815506458282, -2.216137170791626, -0.0007751559023745358, -0.0008873577462509274, -0.0005586970364674926, -3.099436753473128e-06, -1.537788011773955e-05, 0.0, -0.005778512451797724, -0.012754414230585098, -0.20115873217582703, -0.3072705566883087, -0.18173739314079285, -0.004999635741114616, 0.0, -8.702239938429557e-06, -0.00016175392374861985, -7.867782187531702e-06, -0.00017450717859901488, -3.611976353568025e-05, -0.0028206822462379932, -0.022630061954259872, -0.02337471954524517, -0.6866264939308167, -0.27728673815727234, -0.0393664687871933, -0.0007176207727752626, -0.0017225203337147832, -0.005551160778850317, -0.5582621693611145, -0.0636918693780899, -0.028681565076112747, -0.08286105841398239, -0.8660548329353333, -0.05108753591775894, -0.6030011773109436, -0.00031454383861273527, -6.437280717364047e-06, -6.937739817658439e-05, -0.00047874910524114966, -5.483612312673358e-06, -3.576272320060525e-06, -4.887569048150908e-06, -0.0014730566181242466, -0.0006911749369464815, -0.6718324422836304, -0.00044943721150048077, -0.003991138655692339, -1.1435201168060303, -0.0005485698929987848, -0.05503733828663826, -7.259582343976945e-05, -0.00014554394874721766, -1.9073468138230965e-06, -1.383966326713562, -5.960446742392378e-06, -0.0001858300092862919, 0.0, 0.0, -0.3854639232158661, -0.0036019703838974237, -0.018636014312505722, -0.0020450884476304054, -2.264974000354414e-06, -1.311301275563892e-06, -7.152555099310121e-07, -0.005262451246380806, -3.576272320060525e-06, -0.04333946108818054, -3.933898824470816e-06, -1.8954096958623268e-05, -0.09146939218044281, -0.0008055302896536887, -0.0008493629866279662, -0.031752247363328934, -0.04206744208931923, -0.0008895016508176923, -0.43349120020866394, -3.8742269680369645e-05, -0.0009416675311513245, -5.125986263010418e-06, -0.039673224091529846, -0.053838640451431274, -0.01479827705770731, -0.01131722517311573, -2.145764938177308e-06, -0.006470681168138981, -0.0002325502864550799, -0.0006687788409180939, -2.5987286790041253e-05, -0.009513755328953266, -1.6689160474925302e-05, -0.0015034097013995051, -0.00027938754647038877, -0.0001472126314183697, -1.311301275563892e-06, -1.1920922133867862e-06, -1.1920922133867862e-06, -2.50339189733495e-06, -1.1920922133867862e-06, -0.005742480978369713, -2.3841855067985307e-07, -2.3841830625315197e-06, -0.003475460922345519, -0.002527734963223338, -0.00012194366718176752, -0.00026973424246534705, -0.000740968796890229, 0.0, -0.0006366133457049727, -0.018974697217345238, -0.004182757809758186, -0.0008559139096178114, -0.00012396997772157192, -0.040202297270298004, -0.015852730721235275, -3.6954195820726454e-05, -0.0003798478574026376, -0.0010826685465872288, -0.16213740408420563, -1.1920922133867862e-06, -0.1418278068304062, -0.010539466515183449, -1.2993727978027891e-05, -1.0490362910786644e-05, -0.0677647516131401, -0.001764765940606594, -0.0001961992384167388, -7.152555099310121e-07, -2.50339189733495e-06, -2.0265558760002023e-06, -0.0007618147064931691, -8.583032467868179e-06, -0.00546188885346055, -0.00627618283033371, -0.03552582114934921, -0.0004609952447935939, -0.00010191874753218144, -0.03996889293193817, -0.656424880027771, -0.00021360022947192192, -0.00016425691137555987, -3.4570634852570947e-06, -2.861018856492592e-06, -0.004249590449035168, -1.4630714654922485, -0.008447745814919472, -0.04578790068626404, -0.0007314390386454761, -0.00019274283840786666, -3.576278118089249e-07, -6.198863957251888e-06, -0.004931666888296604, -0.00019000156316906214, -0.14990302920341492, -0.00022384998737834394, -5.602820692729438e-06, -3.576278118089249e-07, -1.4305104514278355e-06, -4.577531944960356e-05, -0.0004440752090886235, -0.13922959566116333, -7.879423355916515e-05, -0.41138070821762085, -2.098061486321967e-05, -0.00031144535751082003, -0.00013755806139670312, -0.00039962888695299625, -5.185469490243122e-05, -0.00012861855793744326, -2.3841855067985307e-07, -2.3841855067985307e-07, -2.6940935640595853e-05, -1.0251946150674485e-05, -0.00018487652414478362, -4.172316494077677e-06, -2.861018856492592e-06, -2.3841855067985307e-07, -3.6954811548639555e-06, -6.580135959666222e-05, -2.0861407392658293e-05, -0.000615407363511622, -6.568216485902667e-05, -0.07582098990678787, -1.311301275563892e-06, -8.344646857949556e-07, -8.451581379631534e-05, -0.0005535738891921937, -9.536738616588991e-07, -3.576278118089249e-07, -3.1470757676288486e-05, -0.2240186482667923, -2.539125671319198e-05, -0.002078041434288025, 0.0, -2.7894584491150454e-05, -0.0012197205796837807, -3.099436753473128e-06, -0.19481562077999115, -0.0013679441763088107, -0.006675443612039089, -0.04707567021250725, -0.0002184867626056075, -0.017432210966944695, -0.11450136452913284, -0.0016488541150465608, -0.00010215714428341016, -0.0010706413304433227, -0.0014743659412488341, -0.0013409203384071589, -6.747018051100895e-05, -0.00020740265608765185, -7.10462118149735e-05, -0.0005052005290053785, -0.0031777145341038704, -0.004503821488469839, -0.0006236277404241264, -0.020809069275856018, -0.007751149125397205, -0.000337305391440168, -0.15737390518188477, -0.0038174153305590153, -0.7589324116706848], "finish_reason": "stop"}], "metrics": {"energy": 901.751434299469, "energy_per_token": 3.680618099181506, "time": 21.233177, "time_per_token": 0.08666602857142858}}
{"outputs": [{"text": "kf = KFold(n_splits=n_splits, shuffle=True)\n    histories = []\n\n    X = MinMaxScaler().fit_transform(X)\n    y = tf.one_hot(y, depth=2)\n\n    for train_idx, test_idx in kf.split(X):\n        X_train, X_test = X[train_idx], X[test_idx]\n        y_train, y_test = y[train_idx], y[test_idx]\n\n        model = tf.keras.Sequential()\n        model.add(tf.keras.layers.Dense(20, activation=\"relu\"))\n        model.add(tf.keras.layers.Dense(2, activation=\"sigmoid\"))\n        model.compile(loss=\"categorical_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\"])\n\n        history = model.fit(\n            X_train,\n            y_train,\n            batch_size=batch_size,\n            epochs=epochs,\n", "tokens": ["k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "X", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "y", " =", " tf", ".", "one", "_", "hot", "(", "y", ",", " depth", "=", "2", ")", "\n", "\n", "    ", "for", " train", "_", "idx", ",", " test", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "idx", "]", ",", " X", "[", "test", "_", "idx", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "idx", "]", ",", " y", "[", "test", "_", "idx", "]", "\n", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "=", "\"", "relu", "\"", "))", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", ",", " activation", "=", "\"", "s", "igmoid", "\"", "))", "\n", "        ", "model", ".", "compile", "(", "loss", "=", "\"", "c", "ategor", "ical", "_", "cross", "entropy", "\"", ",", " optimizer", "=", "\"", "sg", "d", "\"", ",", " metrics", "=[", "\"", "accuracy", "\"", "])", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "\n", "            ", "X", "_", "train", ",", "\n", "            ", "y", "_", "train", ",", "\n", "            ", "batch", "_", "size", "=", "batch", "_", "size", ",", "\n", "            ", "epoch", "s", "=", "epoch", "s", ",", "\n"], "logprobs": [-2.2042346000671387, -0.4287601411342621, -0.0017926113214343786, -0.0006644901586696506, -2.7418097943154862e-06, -5.960462772236497e-07, -7.378782902378589e-05, -0.0013368725776672363, -7.152531907195225e-06, -6.067568756407127e-05, -3.9219088648678735e-05, -0.07565411180257797, -0.009928249754011631, -5.8412379075889476e-06, -3.099436753473128e-06, -1.311301275563892e-06, -0.40954914689064026, -0.017179254442453384, -0.00010215714428341016, -0.007901246659457684, -0.45962685346603394, -0.011460070498287678, -0.09417815506458282, -1.1954729557037354, -0.03423909470438957, -0.000832568621262908, -0.0009632238652557135, -0.006008301395922899, -0.7901170253753662, -0.0001839230244513601, -2.821593761444092, -0.46383413672447205, -0.153554767370224, -1.9550132492440753e-05, -5.8412379075889476e-06, -1.6689286894688848e-06, -0.027611104771494865, -0.0001864259538706392, -0.00017188502533826977, -0.0006481691962108016, -2.002696055569686e-05, -0.00012683063687290996, -0.006625470705330372, -0.04835519567131996, -0.04268217831850052, -1.6484376192092896, -0.6119621992111206, -0.04557504877448082, -0.7052302360534668, -9.77468371274881e-05, -0.694191038608551, -1.5497195136049413e-06, -7.509902934543788e-05, -0.00023052419419400394, -0.03667714074254036, -0.1558970957994461, -0.07988174259662628, -0.0013499680208042264, -0.5653830170631409, -0.09848663210868835, -0.291698157787323, -0.1500023603439331, -3.421248038648628e-05, -0.06784896552562714, -0.036822959780693054, -0.32030361890792847, -0.7258499264717102, -0.03792722150683403, -0.4061715304851532, -3.015949550899677e-05, -4.136476854910143e-05, -0.00020954797219019383, -0.0009079624433070421, -9.059865078597795e-06, -1.9073468138230965e-06, -5.722029527532868e-06, -0.0021318108774721622, -0.001738585764542222, -0.49699723720550537, -0.0003364712174516171, -0.027498962357640266, -0.5243363380432129, -0.0007382289622910321, -0.0015439982526004314, -0.07428644597530365, -0.16561268270015717, -2.5033637939486653e-05, -0.0063962978310883045, -0.02387360669672489, -0.0011241076281294227, -0.002735684160143137, -0.0013947292463853955, -5.960462772236497e-07, -4.768370445162873e-07, -0.014037210494279861, -0.0006426891195587814, -0.00038235029205679893, -1.9192511899746023e-05, -6.472854875028133e-05, 0.0, -2.3841855067985307e-07, -7.760223525110632e-05, -0.00021741411183029413, -0.00027104519540444016, -0.001433893688954413, -7.510157047363464e-06, -3.58813522325363e-05, -0.00014280252798926085, -2.8967437174287625e-05, -8.344646857949556e-07, -6.90197994117625e-05, -8.415821503149346e-05, -0.003499932587146759, -0.0003270567976869643, -8.987976616481319e-05, 0.0, -1.1920928244535389e-07, -0.0003936707798857242, -0.000460876093711704, -0.00018451895448379219, -1.823885577323381e-05, -0.0003782987187150866, 0.0, -3.576278118089249e-07, -1.4662635294371285e-05, -0.00032300499151460826, -0.04768074303865433, -0.0006804534932598472, -0.10130931437015533, -0.0004258441040292382, -0.02925954945385456, -3.158996332786046e-05, -0.00014423283573705703, -1.1920922133867862e-06, -0.21487630903720856, 0.0, -2.3841855067985307e-07, -1.289815068244934, -0.0006559127941727638, -0.012726283632218838, -0.0046306755393743515, -1.847726889536716e-05, -1.0847986231965479e-05, -6.282132380874828e-05, -0.010980302467942238, -7.390948667307384e-06, -8.22540732769994e-06, -1.1324817933200393e-05, -0.033495914191007614, -1.0728830375228426e-06, -0.035902418196201324, -3.3378546504536644e-06, -3.2305197237292305e-05, -0.369746595621109, -0.0009477414423599839, -0.0008450751192867756, -0.15048837661743164, -2.0811426639556885, -0.21971043944358826, -0.0012860370334237814, -4.768360213347478e-06, -0.6002171635627747, -0.00406308937817812, -0.00016056202002801, -0.0005274811992421746, -1.1920922133867862e-06, -3.0636318115284666e-05, -2.5748875486897305e-05, -0.00019905969384126365, -1.1920858014491387e-05, -1.3470558769768104e-05, -4.6491513785440475e-06, -2.13382354559144e-05, -1.6689286894688848e-06, -0.00406641373410821, 0.0, -9.417489309271332e-06, -0.00664051016792655, -0.0019102912629023194, -0.0002388668799540028, -0.007696734741330147, -0.0004060635983478278, -0.054067473858594894, -1.1920928244535389e-07, -1.0013530300057027e-05, -0.004031863994896412, -0.0012716311030089855, -0.5256884098052979, -0.004725123289972544, -8.940656698541716e-06, -0.00040189296123571694, -0.0007602662080898881, -1.2835125923156738, -0.08929505199193954, -0.05591394752264023, -2.5064854621887207, -5.8410845667822286e-05, -1.0728830375228426e-06, -3.933898824470816e-06, -3.0040289857424796e-05, -4.0531076592742465e-06, -6.079655122448457e-06, -0.00035684893373399973, -0.0917821079492569, -0.008901674300432205, -0.010383748449385166, -2.1687395572662354, -4.172316494077677e-06, -8.583032467868179e-06, -0.008033819496631622, -0.029532616958022118, -0.04291392117738724, -0.0046000611037015915, -0.047697339206933975, -4.0531076592742465e-06, -0.0006307758158072829, -0.00016437610611319542, -0.18499168753623962, -0.00019143179815728217, -0.11166113615036011, -0.001095052808523178, -0.0004663571889977902, -8.106198947643861e-06, -8.702239938429557e-06, -0.00015269544383045286, -1.8673847913742065, -0.009638439863920212, -0.01613558456301689, -0.00199167151004076, -1.5020257706055418e-05, -0.0005588161875493824, -0.35094767808914185, -6.0794889577664435e-05, -0.0005678709712810814, -0.0006019449210725725, -2.3841830625315197e-06, -0.0010631391778588295, -0.000418575422372669, -4.136476854910143e-05, -0.7232259511947632, -5.0424259825376794e-05, -1.0609570381348021e-05, -0.006898869760334492, -0.0012891324004158378, -1.4305104514278355e-06, -2.145764938177308e-06, -0.00033718624035827816, -0.0003364712174516171, -2.884823152271565e-05, -0.051092859357595444, -2.3841855067985307e-07, -3.528532761265524e-05, -0.0008737798780202866, -2.7418097943154862e-06, -0.005308460909873247, -0.00029976642690598965], "finish_reason": "length"}], "metrics": {"energy": 894.984205509185, "energy_per_token": 3.496032052770254, "time": 22.049112, "time_per_token": 0.08612934375}}
{"outputs": [{"text": "# Initialize the model\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(20, activation='relu'),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Set the input shape\n    model.build((None, X.shape[1]))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Use k-fold cross-validation to train the model on different subsets of the data\n    kf = KFold(n_splits=n_splits, shuffle=True)\n    histories = []\n\n    for train_idx, test_idx in kf.split(X):\n        # Normalize the data using MinMaxScaler\n        scaler = MinMaxScaler()\n        X_train, y_train = X[train_idx], y[train_idx]\n        scaler.fit(X_train)\n        X_train = scaler.transform(X_train)\n        X_test, y_test = X[", "tokens": ["#", " Initialize", " the", " model", "\n", "    ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "    ", "])", "\n", "\n", "    ", "#", " Set", " the", " input", " shape", "\n", "    ", "model", ".", "build", "((", "None", ",", " X", ".", "shape", "[", "1", "]))", "\n", "    ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "    ", "#", " Use", " k", "-", "fold", " cross", "-", "validation", " to", " train", " the", " model", " on", " different", " subsets", " of", " the", " data", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "idx", ",", " test", "_", "idx", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "#", " Normal", "ize", " the", " data", " using", " Min", "Max", "Scal", "er", "\n", "        ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "        ", "X", "_", "train", ",", " y", "_", "train", " =", " X", "[", "train", "_", "idx", "]", ",", " y", "[", "train", "_", "idx", "]", "\n", "        ", "scal", "er", ".", "fit", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "train", " =", " scal", "er", ".", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "test", ",", " y", "_", "test", " =", " X", "["], "logprobs": [-1.0269503593444824, -1.5635218620300293, -0.8970474600791931, -1.9821629524230957, -0.7716090679168701, -0.00400799885392189, -0.0766150951385498, -0.0019490785198286176, -0.1098407432436943, -7.319182623177767e-05, -0.00014983485743869096, -5.364403477869928e-06, -1.1517648696899414, -3.099436753473128e-06, -0.00013398226292338222, 0.0, 0.0, -0.9230770468711853, -0.004431427922099829, -0.05082063004374504, -0.006257939152419567, -4.529942543740617e-06, -9.536738616588991e-07, -4.529942543740617e-06, -0.022625632584095, -3.099436753473128e-06, -0.06868048012256622, -3.2186455882765586e-06, -6.496695277746767e-05, -0.08292140811681747, -0.0010667116148397326, -0.0017459639348089695, -0.045490872114896774, -0.059036895632743835, -0.002224829513579607, -0.6967936754226685, -8.642300235806033e-05, -0.07390487939119339, -0.00038413776201196015, -0.0003530356043484062, -8.344646857949556e-07, -3.838465272565372e-05, -2.3841855067985307e-07, -1.847726889536716e-05, -1.311301275563892e-06, -0.016032705083489418, -5.960462772236497e-07, -2.0146166207268834e-05, -0.01695389300584793, -0.008024477399885654, -6.317892984952778e-05, -0.00025281094713136554, -0.0006681832019239664, -1.1920928244535389e-07, -0.0005211663665249944, -0.04494191333651543, -0.007983086630702019, -0.0009391664643771946, -0.0001070442158379592, -0.2985890507698059, -0.00017915551143232733, -0.07327170670032501, -2.0993850231170654, -0.5686178803443909, -3.741687297821045, -0.1825166791677475, -0.6338174343109131, -0.0001998939987970516, -0.04404182732105255, -0.0004552758182398975, -0.0033843403216451406, -0.3684479594230652, -0.07274123281240463, -1.0013530300057027e-05, -0.008355422876775265, -0.001007287879474461, -1.0967194612021558e-05, -0.013252625241875648, -0.0006611545104533434, -0.0013898485340178013, -0.025598403066396713, -1.6035993099212646, -0.017008274793624878, -0.00041416651220060885, -0.5712535381317139, -0.004362471401691437, -0.29405274987220764, -6.198863957251888e-06, -0.20471283793449402, -0.03883867710828781, -1.156323378381785e-05, -3.659658250398934e-05, -0.08417881280183792, -0.005199125502258539, -0.0008038626983761787, -4.768370445162873e-07, -1.3589766240329482e-05, -2.622600959512056e-06, -0.012560310773551464, -3.7431014789035544e-05, -0.027500471100211143, -0.01455722376704216, -0.05336974188685417, -0.0012767505832016468, -0.001329253427684307, -0.02223723940551281, -0.0002696150622796267, -0.06760254502296448, -4.231529235839844, -0.3460714817047119, -0.016718048602342606, -0.0012362702982500196, -0.009017220698297024, -0.33826735615730286, -0.000582525331992656, -0.7140896916389465, -0.4238252639770508, -0.07598275691270828, -0.01625194028019905, -1.1181265115737915, -0.3663235902786255, -0.5404952764511108, -0.021720854565501213, -0.17845332622528076, -0.03612251579761505, -0.008581073954701424, -0.0008824745309539139, -0.29516634345054626, -0.3260481357574463, -0.0009172523277811706, -0.0004107108688913286, -3.6954811548639555e-06, -3.576278118089249e-07, -1.8715683836489916e-05, -0.0003262225945945829, -7.152531907195225e-06, -0.0003418338019400835, -0.00010466027742950246, -0.05128030478954315, -0.004357130266726017, -3.099436753473128e-06, -1.9073468138230965e-06, -7.629365427419543e-06, -0.3985752761363983, -0.016511814668774605, -0.00010692501382436603, -0.004100843332707882, -0.6767843961715698, -0.007095851004123688, -0.13442891836166382, -0.616893470287323, -0.008339108899235725, -0.0006684214458800852, -0.0026580500416457653, -0.020162509754300117, -1.2508667707443237, -0.00015901254664640874, -0.6162360310554504, -0.02615831233561039, -0.07609444856643677, -1.465562105178833, -0.0884607657790184, -0.963797390460968, -5.006777428206988e-06, -7.748573807475623e-06, -5.8887653722194955e-05, -0.0006011109799146652, -9.298280929215252e-06, -2.7418097943154862e-06, -4.291525328881107e-06, -0.00031931069679558277, -0.0015312624163925648, -0.3194330334663391, -0.0005721600609831512, -0.038147903978824615, -0.706042468547821, -1.680670976638794, -0.002868943614885211, -0.05305788666009903, -0.3078981637954712, -1.0579982995986938, -0.6147369146347046, -0.012503685429692268, -0.02973618358373642, -0.0006367324967868626, -0.08481387048959732, -0.0003997480380348861, -0.06517807394266129, -0.0025755350943654776, -0.0006135011790320277, -0.00012575789878610522, -2.622600959512056e-06, -7.152555099310121e-07, 0.0, -0.0022348209749907255, -0.019216440618038177, -0.003865509992465377, -0.03951773792505264, -0.02610558643937111, -0.09066522121429443, -1.4333572387695312, -1.0292333364486694, -7.629103492945433e-05, -0.00019131260341964662, -0.01892007142305374, -0.5030421018600464, -0.0008915264043025672, -0.001312943291850388, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.02137645147740841, -0.0004312062228564173, -0.00033456450910307467, -0.00015901254664640874, -1.549708758830093e-05, 0.0, -3.576278118089249e-07, -3.2543604902457446e-05, -0.0023469780571758747, -0.0013174673076719046, -3.014296293258667, -0.04379288852214813, -0.004703292157500982, -0.00296652945689857, -0.0036060088314116, -0.004141682758927345, -0.001904699020087719, -3.099436753473128e-06, -0.00631420873105526, -0.0063793594017624855, -0.05141189321875572, -0.007542110979557037, -0.010341865010559559, -0.02419096976518631, -0.2658609449863434, -0.0022264947183430195, -2.145764938177308e-06, -1.0967194612021558e-05, -0.0002862997353076935, -4.494089080253616e-05, -5.709961988031864e-05, -0.0005673944251611829, -4.410734163684538e-06, -0.0002661589242052287, -0.0018626974197104573, -0.37473174929618835, -0.03271238133311272, -0.0023612494114786386, -0.10236294567584991, -0.2167588621377945, -0.00022289653134066612, -1.0609570381348021e-05, -7.1403817855753e-05, -0.00038509105797857046, -0.018008770421147346, -0.0002225389762315899], "finish_reason": "length"}], "metrics": {"energy": 926.1355318222043, "energy_per_token": 3.6177169211804854, "time": 22.074335, "time_per_token": 0.08622787109375}}
{"outputs": [{"text": "kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    histories = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # Normalize the data\n        scaler = MinMaxScaler()\n        X_train = scaler.fit_transform(X_train)\n        X_test = scaler.transform(X_test)\n\n        model = tf.keras.Sequential()\n        model.add(tf.keras.layers.Dense(20, activation='relu', input_shape=(X_train.shape[1],)))\n        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        history = model.fit(X_", "tokens": ["k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " Normal", "ize", " the", " data", "\n", "        ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "        ", "X", "_", "train", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "test", " =", " scal", "er", ".", "transform", "(", "X", "_", "test", ")", "\n", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "train", ".", "shape", "[", "1", "]", ",", ")))", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_"], "logprobs": [-2.2042346000671387, -0.4287601411342621, -0.0017926113214343786, -0.0006644901586696506, -2.7418097943154862e-06, -5.960462772236497e-07, -7.378782902378589e-05, -0.0013368725776672363, -7.152531907195225e-06, -6.067568756407127e-05, -3.9219088648678735e-05, -0.07565411180257797, -0.009928249754011631, -5.8412379075889476e-06, -3.099436753473128e-06, -1.311301275563892e-06, -0.40954914689064026, -0.017179254442453384, -0.00010215714428341016, -0.007901246659457684, -0.9988347887992859, -0.0005616756388917565, -3.2186455882765586e-06, -2.3841855067985307e-07, -0.00016842853801790625, -0.09181223064661026, -0.01160218846052885, -0.0031028480734676123, -0.015639863908290863, -0.11820309609174728, -1.2793177366256714, -0.024902375414967537, -0.0007927850820124149, -0.0008044582791626453, -0.00974304135888815, -0.5489130020141602, -0.00021360022947192192, -0.30809110403060913, -0.02075582928955555, -0.04227761551737785, -0.7241851091384888, -0.0002637753786984831, -0.27486348152160645, -1.311301275563892e-06, -1.311301275563892e-06, -0.00016056202002801, -0.0006690170848742127, -7.748573807475623e-06, -3.576278118089249e-07, -3.2186455882765586e-06, -9.357491217087954e-05, -0.000491021724883467, -0.24382483959197998, -0.00038652101648040116, -0.02004730887711048, -0.15530940890312195, -0.0011099375551566482, -0.0012185298837721348, -0.00782886240631342, -0.036303937435150146, -7.271740287251305e-06, -0.1286628097295761, -0.006720203906297684, -0.001026103738695383, -0.0019963113591074944, -0.0008318539476022124, -3.576278118089249e-07, -2.9802276912960224e-06, -0.0030954801477491856, -0.00033539868309162557, -8.618460560683161e-05, -1.5139465176616795e-05, -0.00014804698002990335, -3.576278118089249e-07, -2.3841855067985307e-07, -1.9788545614574105e-05, -0.0003133521240670234, -0.0005527398898266256, -0.0024044194724410772, -1.9550132492440753e-05, -2.2172682292875834e-05, -0.00011920218821614981, -0.00051771110156551, -1.0728830375228426e-06, -8.940656698541716e-06, -6.818538531661034e-05, -0.0004884004010818899, -0.00020704510097857565, -4.362964682513848e-05, -1.1920928244535389e-07, -1.311301275563892e-06, -4.732496745418757e-05, -0.00021240839851088822, -7.521823135903105e-05, -7.271740287251305e-06, -0.00012206286191940308, 0.0, -1.0251946150674485e-05, -4.887569048150908e-06, -0.00025948495022021234, -0.04512345418334007, -0.0011860248632729053, -0.5610001683235168, -0.6180736422538757, -0.048949845135211945, -0.30086398124694824, -0.2665020227432251, -0.6007353067398071, -0.0003599472693167627, -0.025040388107299805, -0.00015770144818816334, -0.0007173825288191438, -0.0001358893496217206, -2.50339189733495e-06, -1.4305104514278355e-06, 0.0, -0.0017060976242646575, -0.013105682097375393, -0.0005327236140146852, -0.02671198919415474, -0.00020728347590193152, -0.0015259062638506293, -0.2526506185531616, -0.002730690874159336, 0.0, -1.6689286894688848e-06, -0.00014399446081370115, -1.1920922133867862e-06, -1.5020257706055418e-05, -3.421248038648628e-05, -0.00031442465842701495, -0.0002982171718031168, -1.7165990357170813e-05, -0.07350333780050278, -0.015662983059883118, -0.00384935992769897, -0.0007481159991584718, -1.2159273865108844e-05, -0.0003935516288038343, -0.0006417360855266452, -2.253030106658116e-05, -1.1920928244535389e-07, -1.311301275563892e-06, -0.004064276814460754, -4.303362584323622e-05, -2.0265373677830212e-05, -1.4066597032069694e-05, -2.50339189733495e-06, -8.391981828026474e-05, -0.0002661589242052287, -0.014036035165190697, -0.00029488030122593045, -0.8144470453262329, -0.00012182447244413197, -0.03456804156303406, -2.288792165927589e-05, -4.6132929128361866e-05, -1.9073468138230965e-06, -0.33018797636032104, 0.0, -7.152555099310121e-07, -0.8988754749298096, -0.0010347970528528094, -0.01130873803049326, -0.006004035472869873, -1.2516897186287679e-05, -6.9141146923357155e-06, -2.729855441430118e-05, -0.010357556864619255, -2.9802276912960224e-06, -3.2186455882765586e-06, -2.264974000354414e-06, -0.019641896709799767, -1.0728830375228426e-06, -0.02534959465265274, -2.50339189733495e-06, -2.8967437174287625e-05, -0.44784092903137207, -0.0006361367995850742, -0.0013259199913591146, -0.2548312544822693, -0.057311348617076874, -0.0020392590668052435, -0.2305414229631424, -2.6940935640595853e-05, -0.0010798105504363775, -5.364403477869928e-06, -0.05020305514335632, -0.0033797069918364286, -0.006681719329208136, -0.036984264850616455, -0.00033778208307921886, -0.0019382515456527472, -3.576278118089249e-07, -0.0007753941463306546, -0.00025781645672395825, -0.012281389907002449, -7.664863369427621e-05, -0.021213890984654427, -0.0021510813385248184, -0.0001646144810365513, -0.0005528590409085155, -3.576278118089249e-07, -3.099436753473128e-06, -1.2755313036905136e-05, -2.0265373677830212e-05, -9.536738616588991e-07, -3.4570634852570947e-06, -1.4305104514278355e-06, -1.6689286894688848e-06, -3.814689989667386e-06, -0.0018550821114331484, 0.0, -9.536738616588991e-07, -0.00364176114089787, -0.003053528256714344, -9.822363062994555e-05, -0.0003761537664104253, -0.0006677066558040679, 0.0, -0.0005336767644621432, -0.0020911272149533033, -0.9966464638710022, -0.00012087091454304755, -0.03101079910993576, -1.6331539882230572e-05, -0.0002044230350293219, -0.0006124289939180017, -0.2448108196258545, -4.768370445162873e-07, -0.054889414459466934, -0.005680371075868607, -1.6569954823353328e-05, -6.794906312279636e-06, -0.040670767426490784, -0.0010917185572907329, -5.769562994828448e-05, -2.145764938177308e-06, -3.933898824470816e-06, -1.9073468138230965e-06, -0.00016389934171456844, -5.483612312673358e-06, -0.004954442381858826, -0.0005345107638277113, -0.032456450164318085, -0.0005097282119095325, -0.00011598391574807465, -1.4146127700805664, -0.21984757483005524, -0.0005463061388581991, -0.00035386974923312664, -5.602820692729438e-06, -2.145764938177308e-06, -4.732496745418757e-05, -0.02916310727596283, -0.00040713604539632797], "finish_reason": "length"}], "metrics": {"energy": 941.7669921283716, "energy_per_token": 3.6787773130014516, "time": 22.84996, "time_per_token": 0.08925765625}}
{"outputs": [{"text": "# Convert numpy arrays to tensors\n    X = tf.constant(X)\n    y = tf.constant(y)\n\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    X = scaler.fit_transform(X)\n\n    # Create k-fold cross validation object\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=123)\n\n    # Define the model\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(20, activation='relu', input_shape=(X.shape[1],)),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n    # List to store the model histories\n    histories = []\n\n    # Loop over the k-fold cross validation splits\n    for i, (train_idx, val_idx) in enumerate(kfold.split(X, y", "tokens": ["#", " Convert", " numpy", " arrays", " to", " tensors", "\n", "    ", "X", " =", " tf", ".", "constant", "(", "X", ")", "\n", "    ", "y", " =", " tf", ".", "constant", "(", "y", ")", "\n", "\n", "    ", "#", " Normal", "ize", " the", " data", " using", " Min", "Max", "Scal", "er", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Create", " k", "-", "fold", " cross", " validation", " object", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "1", "2", "3", ")", "\n", "\n", "    ", "#", " Define", " the", " model", "\n", "    ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "([", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", ".", "shape", "[", "1", "]", ",", "))", ",", "\n", "        ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "    ", "])", "\n", "    ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "    ", "#", " List", " to", " store", " the", " model", " histories", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " the", " k", "-", "fold", " cross", " validation", " splits", "\n", "    ", "for", " i", ",", " (", "train", "_", "idx", ",", " val", "_", "idx", ")", " in", " enumerate", "(", "k", "fold", ".", "split", "(", "X", ",", " y"], "logprobs": [-1.0269503593444824, -2.462979793548584, -2.4529011249542236, -0.11356590688228607, -0.01377398706972599, -0.4522952437400818, -0.14161354303359985, -0.0016261223936453462, -0.10113726556301117, -0.383140504360199, -0.017345750704407692, -3.5523738915799186e-05, -1.5271191596984863, -0.0005494038923643529, -0.005275139585137367, -1.0479599237442017, -0.004523521289229393, -0.0031068886164575815, -0.004450179636478424, -0.0009582218481227756, -0.0007412070408463478, -1.2278481335670222e-05, -0.026566430926322937, -9.500529267825186e-05, -0.006231047213077545, -0.043746218085289, -0.00027378625236451626, -0.0360313318669796, -0.00019107422849629074, -0.12216867506504059, -1.6858224868774414, -0.010556688532233238, -0.3654569983482361, -0.485536128282547, -0.7202146053314209, -0.13846968114376068, -0.003246871754527092, -0.04902169853448868, -0.0004897110629826784, -0.049654752016067505, -0.00010692501382436603, -0.13532112538814545, -0.0002543602604418993, -0.002609421731904149, -0.0008834273321554065, -3.099436753473128e-06, -2.145764938177308e-06, -1.1920928244535389e-07, -0.002291436307132244, -0.0067210327833890915, -0.0010269373888149858, -0.02104780450463295, -0.10566071420907974, -0.046810876578092575, 0.0, -1.3470558769768104e-05, -0.00016151554882526398, -3.111314072157256e-05, -1.1920922133867862e-06, -5.721882189391181e-05, -0.02017863094806671, -0.19851401448249817, -0.035007622092962265, -0.18524014949798584, -0.0001677133986959234, -0.10001708567142487, -1.2012020349502563, -1.0010221004486084, -0.006048944313079119, -0.0032564965076744556, -0.11575081199407578, -2.631150484085083, -1.8444668054580688, -0.09927719086408615, -0.00012838016846217215, -0.006709191482514143, -1.0252175331115723, -0.009954215958714485, -0.0005322470096871257, -2.3245540432981215e-05, -3.576278118089249e-07, -5.090107151772827e-05, -0.003087636549025774, -1.3470558769768104e-05, -0.00037651124875992537, -5.578839045483619e-05, -0.038906440138816833, -0.007834184914827347, -3.814689989667386e-06, -2.145764938177308e-06, -1.07287787614041e-05, -0.10682269185781479, -0.007739793509244919, -5.328513361746445e-05, -0.00228537037037313, -0.440511018037796, -0.0009764432325027883, -5.245195097813848e-06, -1.9073468138230965e-06, -0.00010299152199877426, -2.2718122005462646, -1.7749521732330322, -0.12747178971767426, -0.17538975179195404, -0.0026662535965442657, -0.10315389186143875, -5.435795901576057e-05, -0.5097672343254089, -1.2709382772445679, -0.5150455832481384, -0.31006479263305664, -1.0073564052581787, -0.0008055302896536887, -0.12720175087451935, -0.0010296764085069299, -0.07626379281282425, -2.777537883957848e-05, -8.487341256113723e-05, -3.3378546504536644e-06, -0.7397173047065735, -3.576272320060525e-06, -3.957670196541585e-05, 0.0, -4.6491513785440475e-06, -0.5879858136177063, -0.0036153923720121384, -0.03646796941757202, -0.019122300669550896, -2.0265558760002023e-06, -8.344646857949556e-07, -2.7418097943154862e-06, -0.012241116724908352, -2.3841830625315197e-06, -0.09239105880260468, -2.3841830625315197e-06, -3.3378044463461265e-05, -0.2927617132663727, -0.0010014524450525641, -0.0015993434935808182, -0.1479407697916031, -0.03861309587955475, -0.002537604421377182, -0.4120510518550873, -6.687417771900073e-05, -0.0014898402150720358, -1.1086402082582936e-05, -0.051565658301115036, -0.039724551141262054, -0.020493783056735992, -0.004955272655934095, -0.00012087091454304755, -0.03208212926983833, -0.002953336341306567, -0.006259005516767502, -9.667406266089529e-05, -0.016922365874052048, -2.3483953555114567e-05, -0.008365944027900696, -0.00023958197562023997, -0.0003184764937032014, -2.264974000354414e-06, -3.85038583772257e-05, -1.311301275563892e-06, -6.437280717364047e-06, -2.145764938177308e-06, -0.003425921779125929, 0.0, -2.3841830625315197e-06, -0.004792868625372648, -0.0038226405158638954, -0.00019560330838430673, -0.00046492734691128135, -0.0010870745172724128, 0.0, -0.0006404255982488394, -0.01593978889286518, -0.0071455636061728, -0.0015073377871885896, -8.129743218887597e-05, -2.633981227874756, -0.17513303458690643, -0.00023100091493688524, -0.002615604316815734, -0.0012217445764690638, -0.2969644069671631, -9.536738616588991e-07, -0.0734039843082428, -0.01331367902457714, -1.7523612768854946e-05, -1.0013530300057027e-05, -0.03749489411711693, -0.0029147067107260227, -0.0004167880106251687, -3.3378546504536644e-06, -4.172316494077677e-06, -2.264974000354414e-06, -0.0009211826254613698, -7.390948667307384e-06, -0.026958486065268517, -0.008006028831005096, -0.02278178744018078, -0.0007286992622539401, -0.0001902399235405028, -0.007694842293858528, -0.00010287232726113871, -0.050185028463602066, -3.422672986984253, -0.031582821160554886, -0.037251442670822144, -0.2546180784702301, -3.2845592498779297, -2.6816182136535645, -0.8431750535964966, -2.9801878554280847e-05, -0.2685665786266327, -0.0021059971768409014, -0.0005255748401395977, -0.0010132422903552651, -0.0001823735801735893, -0.02050546184182167, -6.365573790390044e-05, -0.11567170172929764, -1.4172152280807495, -0.41737592220306396, -1.110618233680725, -0.5257055759429932, -0.01553353015333414, -0.052779294550418854, -0.7151016592979431, -0.13224375247955322, -0.5485240817070007, -0.009255597367882729, -0.00010978573118336499, -0.0026547210291028023, -2.819045305252075, -0.03475562110543251, -0.04747181758284569, -0.0015920833684504032, -0.06371736526489258, -0.18451829254627228, -0.006648799404501915, -0.4837578237056732, -0.0001284993631998077, -7.271740287251305e-06, -4.994744449504651e-05, -2.2291887944447808e-05, -0.00021026308240834624, -1.490105023549404e-05, -0.0011393491877242923, -4.029192859889008e-05, -4.005352093372494e-05, -4.291525328881107e-06, -0.0017403707606717944, -0.0013452060520648956, -0.27957668900489807, -0.0009756095823831856], "finish_reason": "length"}], "metrics": {"energy": 926.4590501718517, "energy_per_token": 3.6189806647337956, "time": 21.844284, "time_per_token": 0.085329234375}}
{"outputs": [{"text": "X = MinMaxScaler().fit_transform(X)\n    kf = KFold(n_splits, shuffle=True)\n    histories = []\n\n    for train_idx, test_idx in kf.split(X, y):\n        model = tf.keras.Sequential([\n            tf.keras.layers.Dense(20, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        histories.append(\n            model.fit(\n                X[train_idx], y[train_idx],\n                epochs=epochs, batch_size=batch_size,\n                verbose=0,\n                validation_data=(X[test_idx], y[test_idx])\n            )\n        )\n\n    return histories", "tokens": ["X", " =", " Min", "Max", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "X", ")", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", ",", " shuffle", "=", "True", ")", "\n", "    ", "hist", "ories", " =", " []", "\n", "\n", "    ", "for", " train", "_", "idx", ",", " test", "_", "idx", " in", " k", "f", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "([", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "')", ",", "\n", "            ", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "')", "\n", "        ", "])", "\n", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "        ", "hist", "ories", ".", "append", "(", "\n", "            ", "model", ".", "fit", "(", "\n", "                ", "X", "[", "train", "_", "idx", "]", ",", " y", "[", "train", "_", "idx", "]", ",", "\n", "                ", "epoch", "s", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", "\n", "                ", "verbose", "=", "0", ",", "\n", "                ", "validation", "_", "data", "=(", "X", "[", "test", "_", "idx", "]", ",", " y", "[", "test", "_", "idx", "])", "\n", "            ", ")", "\n", "        ", ")", "\n", "\n", "    ", "return", " histories", "\n", "\n", "if"], "logprobs": [-2.08113431930542, -0.2344759851694107, -0.5248780846595764, -2.312633478140924e-05, -2.9802276912960224e-06, -7.152555099310121e-07, -0.04329847916960716, -0.00019262365822214633, -0.00033480284037068486, -0.0006985607906244695, -1.7881377516459906e-06, -0.00034362133010290563, -0.010296912863850594, -0.051407139748334885, -0.06903956830501556, -0.3305853009223938, -0.9010361433029175, -0.4882749319076538, -0.0027072704397141933, -0.0006331584881991148, -1.9073468138230965e-06, -4.768370445162873e-07, -4.8636207793606445e-05, -0.002893549157306552, -1.0847986231965479e-05, -0.00019095504831057042, -5.781483559985645e-05, -2.6664485931396484, -0.065159872174263, -0.0013093716697767377, -0.007727491203695536, -0.6803642511367798, -0.005098911002278328, -0.12783482670783997, -0.5194628834724426, -0.06706414371728897, -0.0011632826644927263, -0.002629277529194951, -0.0029113786295056343, -1.4045631885528564, -8.821098163025454e-05, -0.08003625273704529, -0.05411185324192047, -0.206021249294281, -0.9116140007972717, -0.08691862970590591, -0.5591596364974976, -1.490105023549404e-05, -1.0371154530730564e-05, -0.00030322244856506586, -0.0010768335778266191, -3.0397906812140718e-05, -1.311301275563892e-06, -5.006777428206988e-06, -0.0019170731538906693, -0.0010492063593119383, -0.7686168551445007, -0.0006126672378741205, -0.0009240409708581865, -0.0006563892820850015, -0.018450072035193443, -1.3833954334259033, -0.0007656264933757484, -0.056367456912994385, -8.511180931236595e-05, -0.0001512651506345719, -2.861018856492592e-06, -0.2787415087223053, 0.0, -3.576278118089249e-07, -0.5502322316169739, -0.010279804468154907, -0.02031741291284561, -0.003626320045441389, -2.7418097943154862e-06, -1.9073468138230965e-06, -8.344646857949556e-07, -0.021928934380412102, -2.9802276912960224e-06, -0.05406837537884712, -3.4570634852570947e-06, -3.45700973412022e-05, -0.08825145661830902, -0.0012247211998328567, -0.0019339682767167687, -0.05238965526223183, -0.07761508226394653, -0.0025070447009056807, -0.685391366481781, -5.4596363042946905e-05, -0.009667719714343548, -0.00021836756786797196, -0.00029118589009158313, -1.311301275563892e-06, -2.145764938177308e-06, -3.576278118089249e-07, -1.5258672647178173e-05, -1.9073468138230965e-06, -0.0095902681350708, -4.768370445162873e-07, -1.1324817933200393e-05, -0.011593586765229702, -0.007119405549019575, -0.000125281119835563, -0.00035041390219703317, -0.0011325619416311383, -1.1920928244535389e-07, -0.0007926659309305251, -0.034328024834394455, -0.0048772175796329975, -0.0029289701487869024, -0.0001734344696160406, -0.4862525761127472, -0.0002261144545627758, -0.02536923624575138, -5.7338023907504976e-05, -0.00012706902634818107, -0.0032292858231812716, -0.2832806706428528, -5.483612312673358e-06, -0.0871352106332779, -0.010755662806332111, -3.2305197237292305e-05, -3.158996332786046e-05, -0.5606988668441772, -0.003689032746478915, -0.0014612721279263496, -2.3841830625315197e-06, -2.7418097943154862e-06, -3.6954811548639555e-06, -0.005434501450508833, -1.883488948806189e-05, -0.019873546436429024, -0.00991467572748661, -0.07454705238342285, -0.0009979988681152463, -0.00011276562872808427, -1.0106364488601685, -0.7923107147216797, -0.33786991238594055, -0.0020266487263143063, -0.00047124247066676617, -0.00011634149996098131, -2.2102136611938477, -0.0077829682268202305, -0.00022873646230436862, -5.924526340095326e-05, -2.1576648578047752e-05, -0.0012960376916453242, -1.736441969871521, -0.002527615986764431, -0.05758845433592796, -0.0010193157941102982, -0.0017059786478057504, -4.529942543740617e-06, -1.9073468138230965e-06, -0.008584265597164631, -0.0002649671514518559, -0.2769775390625, -0.00013445904187392443, -2.1576648578047752e-05, -5.960462772236497e-07, -3.576278118089249e-07, -0.00010096516780322418, -0.00276445341296494, -0.33597466349601746, -6.69933797325939e-05, -0.7173064947128296, -3.576278118089249e-07, -0.0012884180760011077, -0.003714330494403839, -4.172316494077677e-06, -0.00030250742565840483, -1.5097955465316772, -2.145764938177308e-06, -8.344646857949556e-07, -7.128461584215984e-05, -0.0005850272136740386, -1.0728830375228426e-06, -1.311301275563892e-06, -0.022270232439041138, -0.43270397186279297, -0.0060400571674108505, -2.505051851272583, -0.002686465159058571, -0.0384916290640831, -0.3443835973739624, -1.3129777908325195, -0.14397749304771423, -0.0020945770666003227, -9.524368942948058e-05, -0.011621630750596523, -0.0021115881390869617, -0.015594913624227047, -0.00020895205670967698, -0.0019382515456527472, -7.152555099310121e-07, -1.1920928244535389e-07, -0.00021944021864328533, -2.1815061700181104e-05, -0.0006441186997108161, -9.775113539944869e-06, -1.5139465176616795e-05, -3.576278118089249e-07, -5.960462772236497e-07, -0.024277305230498314, -0.08317406475543976, -0.007033114787191153, -0.006239221431314945, -0.0014731755945831537, -0.0006585336523130536, -9.131014667218551e-05, -0.0009308296139352024, -0.14659740030765533, -0.0073290057480335236, -0.017633335664868355, -0.0008542464347556233, -0.23409439623355865, -0.0022601555101573467, -0.6528968811035156], "finish_reason": "stop"}], "metrics": {"energy": 775.3248202476502, "energy_per_token": 3.52420372839841, "time": 19.117788, "time_per_token": 0.08689903636363637}}
{"outputs": [{"text": "n_splits = n_splits or 5  # default number of splits\n    batch_size = batch_size or 32  # default batch size\n    epochs = epochs or 1  # default number of epochs\n    kf = KFold(n_splits=n_splits)  # create a KFold object with n_splits folds\n    history = []  # initialize an empty list to store training history for each fold\n    scaler = MinMaxScaler()  # create a MinMaxScaler object\n\n    # use the KFold object to split X and y into n_splits folds\n    for train_index, test_index in kf.split(X, y):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        # scale X_train and X_test using the MinMaxScaler object\n        X_train_scaled = scaler.fit_transform(X_train)\n        X_test_scaled =", "tokens": ["n", "_", "split", "s", " =", " n", "_", "split", "s", " or", " ", "5", "  ", "#", " default", " number", " of", " splits", "\n", "    ", "batch", "_", "size", " =", " batch", "_", "size", " or", " ", "3", "2", "  ", "#", " default", " batch", " size", "\n", "    ", "epoch", "s", " =", " epochs", " or", " ", "1", "  ", "#", " default", " number", " of", " epochs", "\n", "    ", "k", "f", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ")", "  ", "#", " create", " a", " K", "F", "old", " object", " with", " n", "_", "split", "s", " folds", "\n", "    ", "history", " =", " []", "  ", "#", " initialize", " an", " empty", " list", " to", " store", " training", " history", " for", " each", " fold", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "  ", "#", " create", " a", " Min", "Max", "Scal", "er", " object", "\n", "\n", "    ", "#", " use", " the", " K", "F", "old", " object", " to", " split", " X", " and", " y", " into", " n", "_", "split", "s", " folds", "\n", "    ", "for", " train", "_", "index", ",", " test", "_", "index", " in", " k", "f", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "X", "_", "train", ",", " X", "_", "test", " =", " X", "[", "train", "_", "index", "]", ",", " X", "[", "test", "_", "index", "]", "\n", "        ", "y", "_", "train", ",", " y", "_", "test", " =", " y", "[", "train", "_", "index", "]", ",", " y", "[", "test", "_", "index", "]", "\n", "\n", "        ", "#", " scale", " X", "_", "train", " and", " X", "_", "test", " using", " the", " Min", "Max", "Scal", "er", " object", "\n", "        ", "X", "_", "train", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", "_", "train", ")", "\n", "        ", "X", "_", "test", "_", "scal", "ed", " ="], "logprobs": [-3.6107306480407715, -0.009053961373865604, -0.061172328889369965, -0.0010421803453937173, -0.013824427500367165, -0.6586784720420837, -0.00012420836719684303, -2.288792165927589e-05, -1.7881377516459906e-06, -0.3468329906463623, -0.001207456924021244, -0.005385296419262886, -2.1721556186676025, -0.00043501926120370626, -1.920204758644104, -2.4506924152374268, -0.0006279165390878916, -0.037521302700042725, -0.9265785217285156, -0.025486499071121216, -0.01654687523841858, -3.9219088648678735e-05, -1.6569954823353328e-05, -0.00024434918304905295, -0.0021921193692833185, -7.152555099310121e-07, -2.8013790142722428e-05, -0.0016552807064726949, -0.0006011109799146652, -0.005395611748099327, -0.00025555206229910254, -0.020978232845664024, -1.311301275563892e-06, -0.001335801207460463, -0.002318196464329958, -0.012962954118847847, -0.001404609763994813, -0.0031980343628674746, -0.006574192550033331, -6.913899414939806e-05, -0.00010656742961145937, -0.00135389668866992, -0.001335563138127327, -0.00013779645087197423, -0.008501765318214893, -0.007893676869571209, -3.576278118089249e-07, -0.00243926327675581, -0.5528118014335632, -7.4741430580616e-05, -0.00020168177434243262, -0.00255437009036541, -1.7922135591506958, -1.3068609237670898, -0.19108135998249054, -0.0010058587649837136, -0.00041940953815355897, -1.5497195136049413e-06, -5.960462772236497e-07, -1.8000440832111053e-05, -0.003782975720241666, -5.722029527532868e-06, -5.185469490243122e-05, -2.0146166207268834e-05, -0.02066778764128685, -0.004781479015946388, -1.6689286894688848e-06, -1.4305104514278355e-06, 0.0, -0.6628485918045044, -1.185784101486206, -3.576272320060525e-06, -0.6927528381347656, -1.5450680255889893, -0.19607463479042053, -0.031108452007174492, -6.9141146923357155e-06, -0.09855533391237259, -0.9179575443267822, -0.8926286697387695, -0.013621593825519085, -0.0006275591440498829, -0.0007161913090385497, -0.3649032413959503, -0.004309652838855982, -0.12552648782730103, -1.6754298210144043, -0.556175172328949, -0.00336307380348444, -0.22526560723781586, -8.344646857949556e-07, -0.44420164823532104, -0.47457143664360046, -0.0004592079494614154, -0.0066434708423912525, -0.09622130542993546, -0.024768531322479248, -1.5096200704574585, -0.174955815076828, -0.4032886028289795, -0.0046846638433635235, -0.00783595908433199, -0.00036638224264606833, -0.3552875518798828, -1.1055448055267334, -0.001652186387218535, -0.0013467537937685847, -0.003972853533923626, -2.50339189733495e-06, -3.3378546504536644e-06, -1.1920928244535389e-07, -0.015530360862612724, -0.1424114853143692, -2.7418097943154862e-06, -0.35177502036094666, -0.05684948340058327, -0.0610186904668808, -0.001692292862571776, -0.038761842995882034, -2.52720492426306e-05, -0.028394127264618874, -1.5291078090667725, -2.3747193813323975, -0.00018082413589581847, -0.5235240459442139, -3.624753952026367, -1.2938737869262695, -0.5521180033683777, -0.0011126763420179486, -7.86750388215296e-05, -0.223622664809227, -0.014171911403536797, -0.7301322221755981, -1.2266145944595337, -0.022161336615681648, -0.0005317704635672271, -0.012176583521068096, -0.8679110407829285, -0.0011461363174021244, -0.00019202772818971425, -0.0017635759431868792, -0.49517926573753357, -0.11067179590463638, -0.0001578206429257989, -0.03224477916955948, -0.049253564327955246, -0.04174872860312462, -0.18326468765735626, -0.00014888131408952177, -0.12517933547496796, -1.0728830375228426e-06, -3.576272320060525e-06, -8.689979586051777e-05, -0.0006149308173917234, -1.7046782886609435e-05, -2.3841830625315197e-06, -2.145764938177308e-06, -0.0002233732520835474, -0.001462343498133123, -0.33851194381713867, -0.0002044230350293219, -0.00077622797107324, -0.0005728749092668295, -0.019252458587288857, -0.42125892639160156, -0.001948483637534082, -0.003287508385255933, -0.013533980585634708, -0.07551418244838715, -9.179073458653875e-06, -0.09932047873735428, -0.012543593533337116, -0.008016199804842472, -0.0037119551561772823, -0.001487578614614904, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.006886083632707596, -0.0002613918040879071, -0.00019393471302464604, -2.5033637939486653e-05, -0.000525217386893928, -3.576278118089249e-07, -7.688703772146255e-05, -7.629365427419543e-06, -0.04835769161581993, -0.0005843124235980213, -0.0016041041817516088, -1.3232143828645349e-05, -2.0265558760002023e-06, -0.00024029705673456192, -0.002021889900788665, -1.5497195136049413e-06, -5.006777428206988e-06, -5.3881147323409095e-05, -0.000950004265177995, -0.00016509123088326305, -0.00010227633902104571, 0.0, -1.0728830375228426e-06, -4.255681051290594e-05, -0.00023183519078884274, -5.6980417866725475e-05, -8.583032467868179e-06, -0.00017569905321579427, 0.0, -0.010727711953222752, -2.622600959512056e-06, -0.00024637524620629847, -0.13926930725574493, -0.0017088347813114524, -0.05434785038232803, -0.4563509523868561, -1.577918529510498, -0.034699201583862305, -0.0009116546134464443, -0.5613259077072144, -0.02142907679080963, -0.00024125049822032452, -0.00039200251922011375, -0.12773631513118744, -0.07814926654100418, -0.2619369924068451, -5.9126061387360096e-05, -0.0008640132145956159, -9.7508447652217e-05, -0.19654710590839386, -0.03263923153281212, -0.0001445904199499637, -0.08547250181436539, -0.00016425691137555987, -0.00500758271664381, -0.8100010752677917, -0.010041317902505398, -5.543078441405669e-05, -0.01298978365957737, -0.0015786340227350593, 0.0, -1.2636104656849056e-05, -0.016710897907614708, -2.1576648578047752e-05, -9.536738616588991e-07, -9.047575440490618e-05, -0.0024791003670543432, -0.00014149141497910023, -7.152531907195225e-06, -0.017997296527028084, -0.02136244811117649, -0.0007990981102921069, -0.0013469918631017208, -4.6491513785440475e-06, -0.00024279984063468874, -3.8265450712060556e-05, -1.1444026313256472e-05, -2.3841855067985307e-07, -3.766942609217949e-05], "finish_reason": "length"}], "metrics": {"energy": 903.3809088516238, "energy_per_token": 3.5288316752016553, "time": 22.073786, "time_per_token": 0.0862257265625}}
{"outputs": [{"text": "# Initialize k-fold cross-validation\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    histories = []  # To store the training histories of each fold\n\n    # Scale input data using MinMaxScaler\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    # Iterate over splits\n    for train_idx, test_idx in kfold.split(X_scaled, y):\n        # Split data into train and validation sets for current fold\n        X_train, X_val, y_train, y_val = X_scaled[train_idx], X_scaled[test_idx], y[train_idx], y[test_idx]\n\n        # Define model architecture\n        model = tf.keras.models.Sequential()\n        model.add(tf.keras.layers.Dense(units=20, activation='relu', input_shape=(X_scaled.shape[1],)))\n        model.add(tf", "tokens": ["#", " Initialize", " k", "-", "fold", " cross", "-", "validation", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "\n", "    ", "hist", "ories", " =", " []", "  ", "#", " To", " store", " the", " training", " histories", " of", " each", " fold", "\n", "\n", "    ", "#", " Scale", " input", " data", " using", " Min", "Max", "Scal", "er", "\n", "    ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "    ", "X", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " splits", "\n", "    ", "for", " train", "_", "idx", ",", " test", "_", "idx", " in", " k", "fold", ".", "split", "(", "X", "_", "scal", "ed", ",", " y", "):", "\n", "        ", "#", " Split", " data", " into", " train", " and", " validation", " sets", " for", " current", " fold", "\n", "        ", "X", "_", "train", ",", " X", "_", "val", ",", " y", "_", "train", ",", " y", "_", "val", " =", " X", "_", "scal", "ed", "[", "train", "_", "idx", "]", ",", " X", "_", "scal", "ed", "[", "test", "_", "idx", "]", ",", " y", "[", "train", "_", "idx", "]", ",", " y", "[", "test", "_", "idx", "]", "\n", "\n", "        ", "#", " Define", " model", " architecture", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "models", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "units", "=", "2", "0", ",", " activation", "='", "relu", "'", ",", " input", "_", "shape", "=(", "X", "_", "scal", "ed", ".", "shape", "[", "1", "]", ",", ")))", "\n", "        ", "model", ".", "add", "(", "tf"], "logprobs": [-1.0269503593444824, -1.5635218620300293, -2.5276503562927246, -0.015310968272387981, -0.0014319891342893243, -0.012792312540113926, -0.056435175240039825, -0.0012330556055530906, -0.3717222511768341, -0.0005972985527478158, -0.015604419633746147, -1.1746435165405273, -0.004908298142254353, -0.0009467886411584914, -5.8412379075889476e-06, -7.152555099310121e-07, -6.305972783593461e-05, -0.003376142820343375, -1.2636104656849056e-05, -0.00013493580627255142, -2.062299427052494e-05, -0.06454930454492569, -0.009888826869428158, -3.4570634852570947e-06, -2.861018856492592e-06, -8.344646857949556e-07, -0.055992066860198975, -0.008043634705245495, -2.169585604860913e-05, -0.002979603596031666, -0.4786913990974426, -0.0006255338666960597, -3.6954811548639555e-06, -7.152555099310121e-07, -0.0001012035645544529, -0.13591443002223969, -0.01160478126257658, -0.002809508005157113, -0.003907783888280392, -0.31097111105918884, -6.16293036728166e-05, -2.219576835632324, -0.01084552425891161, -0.0007750368095003068, -0.0010113369207829237, -1.6545130014419556, -5.364403477869928e-06, -3.5739006996154785, -0.02828914299607277, -0.5651038885116577, -0.12261136621236801, -1.3145009279251099, -0.8310343027114868, -0.15151852369308472, -0.005462007597088814, -0.008255996741354465, -0.06378357857465744, -5.721882189391181e-05, -0.381019651889801, -2.048657178878784, -2.7303152084350586, -0.1238013282418251, -0.54715496301651, -0.08281134814023972, -0.008149821311235428, -0.015674365684390068, -0.0012050755321979523, -0.09250745922327042, -0.0001662831346038729, -0.09930039942264557, -0.002100881887599826, -0.0016662298003211617, -0.0001787979417713359, -4.0531076592742465e-06, -9.536738616588991e-07, -1.1920928244535389e-07, -0.004061189480125904, -0.014291434548795223, -0.007139171939343214, -0.06082891300320625, -0.8134620785713196, -0.02383274957537651, -3.194758028257638e-05, -0.00010597144137136638, -0.0011799524072557688, 0.0, -6.318072337307967e-06, -5.8887653722194955e-05, -1.311301275563892e-06, -3.683499380713329e-05, -1.823885577323381e-05, -0.0015904169995337725, -0.010624393820762634, -0.014888950623571873, -0.005992304068058729, -4.2676016164477915e-05, -0.15145201981067657, -1.705310344696045, -0.0018284284742549062, -0.2665761709213257, -3.213531494140625, -0.32069286704063416, -5.9960475482512265e-05, -0.004074486903846264, -0.09438557922840118, -0.6591829061508179, -0.6286605596542358, -0.02451125904917717, -0.5658014416694641, -3.4570634852570947e-06, -1.823885577323381e-05, -6.568216485902667e-05, -0.0019110051216557622, -7.748573807475623e-06, -1.4305104514278355e-06, -4.768360213347478e-06, -0.001438060076907277, -0.000325388420606032, -0.8912468552589417, -0.00011050090688513592, -2.3841855067985307e-07, -1.1084387302398682, -0.0002530493075028062, -0.001553520211018622, -0.0011826909612864256, -0.018250983208417892, -0.41739723086357117, -0.7392329573631287, -0.6762116551399231, -0.7056845426559448, -0.33032214641571045, -0.01693338342010975, -1.4447667598724365, -0.009804308414459229, -0.418216347694397, -1.6044423580169678, -0.09751638770103455, -0.0023005942348390818, -0.00017438798386137933, -0.0454363077878952, -0.000580499938223511, -0.008891512639820576, -0.031056679785251617, -0.4313439428806305, -1.0013530300057027e-05, -0.30906805396080017, -2.2395517826080322, -0.003240217687562108, -1.7762025890988298e-05, -9.059865078597795e-06, -0.0005287918029353023, -3.7788631743751466e-05, -1.0728830375228426e-06, -1.7523612768854946e-05, -0.0012240068754181266, -0.7466216683387756, -0.0206774789839983, -6.09140915912576e-05, -7.152555099310121e-07, -0.0015481640584766865, -0.0028076060116291046, -9.536738616588991e-07, -3.814689989667386e-06, -0.0014999578706920147, -0.000286657246761024, -0.0034559781197458506, -0.0006399490521289408, -9.059865078597795e-06, -2.3841855067985307e-07, -2.5748875486897305e-05, -0.06105783209204674, -2.3841855067985307e-07, -8.344646857949556e-07, -2.884823152271565e-05, -2.1815061700181104e-05, -0.010232488624751568, -0.00028951745480298996, -0.0021644041407853365, -3.576278118089249e-07, -4.768370445162873e-07, -8.821098163025454e-05, -0.00018285033002030104, -0.00045253525604493916, -9.786603914108127e-05, -0.008150176145136356, 0.0, -5.960462772236497e-07, -1.3351351299206726e-05, -0.0005886013968847692, -0.006221925374120474, -0.0007842087652534246, -0.01450717356055975, -1.0426087379455566, -1.197114109992981, -0.27196022868156433, -0.0777711570262909, -0.0001932195882545784, -0.027437377721071243, -0.0003215749457012862, -0.05228094011545181, -2.3007127310847864e-05, -4.2199197196168825e-05, -8.344646857949556e-07, -1.1198980808258057, -1.0728830375228426e-06, -2.6464111215318553e-05, 0.0, -8.248942322097719e-05, -0.7822378277778625, -0.008902973495423794, -0.00535968504846096, -0.004699257668107748, -5.125986263010418e-06, -5.006777428206988e-06, -4.029192859889008e-05, -0.002399662509560585, -9.536738616588991e-07, -1.6689286894688848e-06, -2.622600959512056e-06, -0.019070254638791084, -1.0728830375228426e-06, -0.04314035922288895, -1.1920922133867862e-06, -2.9205850296420977e-05, -1.1893730163574219, -0.00014435203047469258, -0.03612780570983887, -0.0020761380437761545, -0.0005535738891921937, -0.0678550973534584, -0.06914258748292923, -0.0015714927576482296, -0.10393132269382477, -2.6702524337451905e-05, -0.0010153858456760645, -1.1920922133867862e-06, -0.08651834726333618, -0.013262036256492138, -0.009130864404141903, -0.3665395975112915, -1.5872669219970703, -8.583032467868179e-06, -0.006026667542755604, -1.4305104514278355e-06, -0.0016226709121838212, -0.00031990656862035394, -0.004155335016548634, -5.5549986427649856e-05, -0.017541037872433662, -0.018090607598423958, -0.00020811776630580425, -0.0004992430913262069, -1.1920922133867862e-06, -9.536738616588991e-07, -1.537788011773955e-05, -3.40932747349143e-05], "finish_reason": "length"}], "metrics": {"energy": 906.6124039688103, "energy_per_token": 3.5414547030031653, "time": 22.492708, "time_per_token": 0.087862140625}}
{"outputs": [{"text": "tf.random.set_seed(42)  # Set random seed for reproducibility\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    history_list = []\n\n    for train, test in kfold.split(X, y):\n        model = tf.keras.Sequential()\n        model.add(tf.keras.layers.Dense(20, activation='relu'))\n        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n        scaler = MinMaxScaler()\n        X_train_scaled = scaler.fit_transform(X[train])\n        X_test_scaled = scaler.transform(X[test])\n\n        history = model.fit(X_train_scaled, y[train], epochs=epochs, batch_size=batch_size, validation_data=(X_test_scaled, y[test]), verbose=0", "tokens": ["tf", ".", "random", ".", "set", "_", "seed", "(", "4", "2", ")", "  ", "#", " Set", " random", " seed", " for", " reprodu", "c", "ibility", "\n", "    ", "k", "fold", " =", " K", "F", "old", "(", "n", "_", "split", "s", "=", "n", "_", "split", "s", ",", " shuffle", "=", "True", ",", " random", "_", "state", "=", "4", "2", ")", "\n", "    ", "history", "_", "list", " =", " []", "\n", "\n", "    ", "for", " train", ",", " test", " in", " k", "fold", ".", "split", "(", "X", ",", " y", "):", "\n", "        ", "model", " =", " tf", ".", "keras", ".", "S", "equ", "ential", "()", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "2", "0", ",", " activation", "='", "relu", "'))", "\n", "        ", "model", ".", "add", "(", "tf", ".", "keras", ".", "layers", ".", "D", "ense", "(", "1", ",", " activation", "='", "s", "igmoid", "'))", "\n", "        ", "model", ".", "compile", "(", "optim", "izer", "='", "adam", "'", ",", " loss", "='", "binary", "_", "cross", "entropy", "'", ",", " metrics", "=['", "accuracy", "'])", "\n", "\n", "        ", "scal", "er", " =", " Min", "Max", "Scal", "er", "()", "\n", "        ", "X", "_", "train", "_", "scal", "ed", " =", " scal", "er", ".", "fit", "_", "transform", "(", "X", "[", "train", "])", "\n", "        ", "X", "_", "test", "_", "scal", "ed", " =", " scal", "er", ".", "transform", "(", "X", "[", "test", "])", "\n", "\n", "        ", "history", " =", " model", ".", "fit", "(", "X", "_", "train", "_", "scal", "ed", ",", " y", "[", "train", "]", ",", " epochs", "=", "epoch", "s", ",", " batch", "_", "size", "=", "batch", "_", "size", ",", " validation", "_", "data", "=(", "X", "_", "test", "_", "scal", "ed", ",", " y", "[", "test", "])", ",", " verbose", "=", "0"], "logprobs": [-3.785895824432373, -0.00759322103112936, -0.3045691251754761, -0.0012956805294379592, -0.0015581621555611491, -9.536738616588991e-07, -0.0002324311062693596, -0.0023588708136230707, -0.6139668226242065, -0.01857142336666584, -0.010314728133380413, -2.655388116836548, -0.0002754547167569399, -0.5223982930183411, -2.126635789871216, -0.008477297611534595, -0.03808249905705452, -0.08014925569295883, -0.063189297914505, -0.005652752239257097, -0.031044431030750275, -0.9152513146400452, -1.2778725624084473, -0.45755907893180847, -0.019175978377461433, -0.0010415849974378943, -7.867782187531702e-06, -8.344646857949556e-07, -0.00011157367407577112, -0.036167241632938385, -5.364403477869928e-06, -0.00013207517622504383, -5.8410845667822286e-05, -0.12483154237270355, -0.01066154707223177, -3.814689989667386e-06, -1.4305104514278355e-06, -7.152555099310121e-07, -0.11184556037187576, -0.0070610507391393185, -5.125868119648658e-05, -0.01585848070681095, -0.35509490966796875, -0.0660870224237442, -3.099436753473128e-06, -2.3841855067985307e-07, -3.766942609217949e-05, -0.04782814905047417, -0.0020437799394130707, -0.0011091040214523673, -0.15912318229675293, -0.13629688322544098, -2.397081136703491, -1.2210174798965454, -0.1185072511434555, -0.00027378625236451626, -0.0010220548138022423, -0.10877315700054169, -0.5548623204231262, -0.00012718822108581662, -0.2433246523141861, -0.02439958229660988, -0.28813108801841736, -0.10530079901218414, -0.00040236959466710687, -0.0028966395184397697, -1.4066597032069694e-05, -1.1920922133867862e-06, -4.291525328881107e-06, -0.00018773700867313892, -0.0012531769461929798, -0.596463680267334, -0.000316212244797498, -0.0013366345083341002, -0.021591367200016975, -0.006876612547785044, -0.8421146273612976, -0.0009267802815884352, -0.020926401019096375, -1.2755313036905136e-05, -4.887569048150908e-06, -4.768370445162873e-07, -0.25441214442253113, 0.0, -1.1920928244535389e-07, -1.1828529834747314, -0.023809585720300674, -0.11641538143157959, -0.02834569290280342, -5.2927523938706145e-05, -1.5258672647178173e-05, -2.4318398573086597e-05, -0.04311284050345421, -6.6756979322235566e-06, -9.417489309271332e-06, -4.291525328881107e-06, -0.06516299396753311, -1.311301275563892e-06, -0.0902472659945488, -5.8412379075889476e-06, -2.0146166207268834e-05, -0.30391907691955566, -0.0008467426523566246, -0.0017056216020137072, -0.20098324120044708, -0.12869279086589813, -0.001207456924021244, -0.7046188712120056, -0.14992652833461761, -0.00023183519078884274, -0.0004017737810499966, -1.6689286894688848e-06, -3.540453326422721e-05, -2.1815061700181104e-05, -0.0005048430757597089, -2.622600959512056e-06, -7.152555099310121e-07, -1.1920928244535389e-07, -8.22540732769994e-06, -4.768370445162873e-07, -0.004416236653923988, -1.1920928244535389e-07, -4.0531076592742465e-06, -0.0048288158141076565, -0.003289884887635708, -8.105902816168964e-05, -0.001100887660868466, -0.0007552632014267147, 0.0, -0.0009843033039942384, -0.006191478110849857, -0.14031635224819183, -0.0030769407749176025, -1.1801649634435307e-05, -0.00020919041708111763, -0.002526545897126198, -0.35477885603904724, -2.0265558760002023e-06, -0.06991199404001236, -0.014651443809270859, -2.6940935640595853e-05, -7.033323527139146e-06, -0.056282270699739456, -0.0008014804334379733, -0.0002779574424494058, -1.6689286894688848e-06, -3.7431014789035544e-05, -2.145764938177308e-06, -0.0027501878794282675, -1.5139465176616795e-05, -0.021544117480516434, -0.005405216012150049, -0.03674103319644928, -0.00038425691309385, -0.0005415403284132481, -0.08538822829723358, -0.0003784178989008069, -1.318802833557129, -0.0013466347008943558, -0.0008337597246281803, -0.0005015069036744535, -2.622600959512056e-06, -5.364403477869928e-06, 0.0, -0.005179439205676317, -0.11674680560827255, -0.0051124319434165955, -0.07437121868133545, -0.04976046457886696, -0.04099474847316742, -0.38093429803848267, -0.057477712631225586, -6.437094270950183e-05, -0.024179799482226372, -0.0013802058529108763, 0.0, -4.768360213347478e-06, -7.056941103655845e-05, -9.65590606938349e-06, -5.960462772236497e-07, -8.618460560683161e-05, -0.0016975292237475514, -0.019132474437355995, -0.0003281293320469558, -0.0059881568886339664, -0.013322383165359497, -0.04677128791809082, -0.05022561550140381, -7.331102824537084e-05, -0.04974730685353279, -0.000641974329482764, -0.00015317220822907984, -1.9073468138230965e-06, -6.437094270950183e-05, -8.201262971851975e-05, -5.483612312673358e-06, -3.933898824470816e-06, -0.0014106809394434094, -7.438383181579411e-05, -8.570780482841656e-05, -0.0005844315164722502, -0.00016068121476564556, -4.351044481154531e-05, -0.003148719435557723, -0.12865568697452545, -0.00010251473577227443, -0.22490838170051575, -0.008513584733009338, -7.64102369430475e-05, -1.1801649634435307e-05, -3.576272320060525e-06, -0.0009951406391337514, -0.07104862481355667, -0.00968625582754612, -2.1457441107486375e-05, -0.0001003691868390888, -8.344646857949556e-07, 0.0, -0.000578474544454366, -0.004278197418898344, -0.00025900822947733104, -9.775113539944869e-06, -0.00021109737281221896, -0.0017074067145586014, -0.3531864285469055, -0.00012838016846217215, -0.0025398635771125555, -4.887569048150908e-06, -0.0015211451100185513, -0.20436948537826538, -3.2186455882765586e-06, -1.7881377516459906e-06, -4.541770613286644e-05, -0.0034869839437305927, -4.6491513785440475e-06, -2.50339189733495e-06, -0.04113593325018883, -1.368180751800537, -8.475421054754406e-05, -0.0012059090659022331, -0.0003156163729727268, -0.0007765853079035878, -0.0003307510633021593, -0.00018225439998786896, -1.966933996300213e-05, -2.264974000354414e-06, 0.0, -2.8490614567999728e-05, -0.0008859285153448582, -3.671578815556131e-05, -0.00010597144137136638, -0.5670254826545715, -0.00013815402053296566, -0.03858190029859543, -0.00047064671525731683, -0.062403157353401184], "finish_reason": "length"}], "metrics": {"energy": 907.1121849460592, "energy_per_token": 3.5434069724455437, "time": 22.052034, "time_per_token": 0.0861407578125}}
