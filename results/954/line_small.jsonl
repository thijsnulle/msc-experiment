{"outputs": [{"text": " not isinstance(n_sentences, int) or n_sentences < 0:", "tokens": [" not", " isinstance", "(", "n", "_", "sent", "ences", ",", " int", ")", " or", " n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-1.7309472560882568, -0.8953320384025574, -0.00022921319759916514, -0.7103385329246521, -5.960462772236497e-07, -7.390948667307384e-06, -2.0265558760002023e-06, -6.4490144723095e-05, -0.013325088657438755, -0.4099678099155426, -0.01391554158180952, -0.025424323976039886, -8.165503095369786e-05, -9.417489309271332e-06, -0.0004843492351938039, -0.012621523812413216, -0.0009365463047288358, -0.03277848660945892, -0.004589856136590242, -0.010231073014438152], "finish_reason": "stop"}, {"text": " ValueError(\"Negative number of sentences\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " number", " of", " sentences", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -0.8554465770721436, -0.017245575785636902, -0.009316304698586464, -2.7649085521698, -0.0010003806091845036, -0.005700403358787298], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -0.36358270049095154, -5.876845170860179e-05, -0.008059244602918625, -0.01908838376402855, -0.001660279231145978, -0.00011443436960689723, -0.0004698126285802573], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03919752314686775, -0.012166455388069153], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001869717612862587, -0.0014418693026527762, -7.295342220459133e-05, -0.01323380321264267, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0005062728887423873, -0.00034254882484674454, -0.005028102546930313], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7961748242378235, -0.004113071598112583], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006462034769356251, -0.1910974085330963, -8.34430247778073e-05, -3.6954811548639555e-06, -0.0016396900173276663, -0.0038463911041617393], "finish_reason": "stop"}, {"text": " re.compile(fr\"\\b{word}\\b\")", "tokens": [" re", ".", "compile", "(", "fr", "\"", "\\", "b", "{", "word", "}\\", "b", "\"", ")", "\n"], "logprobs": [-1.047468900680542, -6.318072337307967e-06, -0.24751214683055878, -0.021667545661330223, -2.0147080421447754, -0.2700778841972351, -0.28468409180641174, -0.14328420162200928, -0.129113107919693, -0.09637525677680969, -0.11943238228559494, -0.005022171884775162, -0.0056143454276025295, -0.3959042727947235, -0.03937150910496712], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.17833983898162842, -1.2516897186287679e-05, -0.00018952481332235038, -0.17654065787792206, -0.6002779006958008, -0.022171365097165108, -0.008323385380208492, -1.130289077758789, -0.0003256267518736422, -0.12230043858289719, -0.016735633835196495], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.557583012385294e-05, -0.00029571453342214227, -0.0007874249131418765, -0.2828560769557953, -0.00098204065579921], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import random", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " random", "\n"], "logprobs": [-0.0035036150366067886, -1.137839913368225, -2.3841855067985307e-07, -1.311301275563892e-06, -7.390703103737906e-05, -0.00033146608620882034, -0.09582266956567764, -0.8641619682312012, -1.2282263040542603, -0.01777692139148712], "finish_reason": "stop"}], "metrics": {"energy": 178.9161258249283, "energy_per_token": 1.6265102347720752, "time": 8.167798, "time_per_token": 0.07425270909090909}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.5913384556770325, -0.000102037942269817, -0.0028190179727971554], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.1884361505508423, -0.00011216964776394889, -0.0074865021742880344, -0.0006997520686127245, -0.0002131234941771254, -0.22540701925754547, -0.00010418349120300263, -5.638440416078083e-05, -0.0011073178611695766, -0.0013767535565420985], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " ''", "tokens": [" ''", "\n"], "logprobs": [-3.215240955352783, -0.09451248496770859], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00571178225800395, -0.16880954802036285, -7.939023635117337e-05, -3.2186455882765586e-06, -0.0018582948250696063, -0.0032549516763538122], "finish_reason": "stop"}, {"text": " re.compile(word.replace(' ', '( |_|__)'))", "tokens": [" re", ".", "compile", "(", "word", ".", "replace", "('", " '", ",", " '", "(", " |", "_", "|", "__", ")", "'))", "\n"], "logprobs": [-1.072185754776001, -7.748573807475623e-06, -0.22314812242984772, -0.021861055865883827, -3.3979358673095703, -0.6829352378845215, -0.1683013141155243, -1.2745797634124756, -0.019438721239566803, -3.4689302992774174e-05, -1.5707696676254272, -1.4974054098129272, -1.3608781099319458, -0.6117997765541077, -1.2106869220733643, -4.000190734863281, -0.3665880262851715, -0.7086880803108215, -0.053586140275001526], "finish_reason": "stop"}, {"text": " re.sub(pattern, lambda match: match.group().replace(\" \", \"_\"), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " lambda", " match", ":", " match", ".", "group", "()", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-1.8654146194458008, -6.222531374078244e-05, -0.0004919749335385859, -0.000645429186988622, -0.023830188438296318, -0.0005956306122243404, -1.1732289791107178, -1.2024683952331543, -0.005999177228659391, -0.278568834066391, -0.006845001131296158, -0.013322030194103718, -1.0479881763458252, -0.0009355935617350042, -0.005795105826109648, -0.18989591300487518, -0.009315477684140205, -0.0058440533466637135, -0.00015710550360381603, -0.013394135981798172, -0.00440068868920207, -0.00010990492592100054, -0.0005539313424378633, -0.010235085152089596, -0.001536023453809321, -0.01761740632355213, -0.0036784622352570295], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-6.067568756407127e-05, -0.0003002431185450405, -0.0008401916129514575, -1.2952499389648438, -0.0668850988149643, -0.016522251069545746, -0.0024624522775411606], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.0031144944950938225], "finish_reason": "stop"}], "metrics": {"energy": 155.94558160400385, "energy_per_token": 1.288806459537222, "time": 7.3752155, "time_per_token": 0.060952194214876035}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError('Number of sentences must not be negative.')", "tokens": [" Value", "Error", "('", "Number", " of", " sentences", " must", " not", " be", " negative", ".", "')", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -1.833234190940857, -2.3872687816619873, -0.005456198006868362, -0.02130993641912937, -0.2043273001909256, -0.2547830045223236, -0.00011872540198964998, -0.005835401825606823, -0.44474783539772034, -0.006013633217662573, -0.0010932666482403874], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.44284728169441223, -0.11252370476722717, -0.05135074630379677, -0.002161906100809574], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012729407753795385, -3.0636318115284666e-05, -0.0028241295367479324, -0.0015323336701840162, -0.8724680542945862, -0.005567401647567749, -0.0028254371136426926, -0.34495383501052856, -5.6622808187967166e-05, -0.007984505966305733, -0.018918784335255623, -0.0012506766943261027, -0.00010489867418073118, -0.0005684667266905308], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.0385134220123291, -0.01492453645914793], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001630644896067679, -0.001423656358383596, -6.985420623095706e-05, -0.013270623981952667, -1.4305104514278355e-06, -7.629365427419543e-06, -0.0005094899097457528, -0.00029345019720494747, -0.004977335687726736], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7969274520874023, -0.0046386257745325565], "finish_reason": "stop"}, {"text": " in re.findall(r'\\w+', sentence):", "tokens": [" in", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " sentence", "):", "\n"], "logprobs": [-0.007508391048759222, -2.2269625663757324, -1.6569954823353328e-05, -0.1737172156572342, -0.02875847928225994, -0.05196399241685867, -0.08153782784938812, -0.8491262197494507, -1.134867787361145, -0.042019665241241455, -7.497983460780233e-05, -0.0033400245010852814, -0.0397244393825531, -0.018808938562870026], "finish_reason": "stop"}, {"text": " fr\"\\b{word.lower()}\\b\"", "tokens": [" fr", "\"", "\\", "b", "{", "word", ".", "lower", "()", "}\\", "b", "\"", "\n"], "logprobs": [-1.2845200300216675, -0.2735385000705719, -0.22849106788635254, -0.07312867045402527, -0.2071225345134735, -0.2549494206905365, -2.591982126235962, -0.2813344895839691, -0.0030826451256871223, -0.1979982703924179, -0.010197325609624386, -0.007863162085413933, -0.033556435257196426], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.1810227632522583, -1.2278481335670222e-05, -0.000316927267704159, -0.1762714385986328, -0.48415839672088623, -0.023770589381456375, -0.006774671375751495, -0.6016503572463989, -0.030950471758842468, -8.725739462533966e-05, -0.008873317390680313, -0.011256757192313671, -0.004981250036507845, -7.414542778860778e-05, -0.07295868545770645, -0.005229484755545855], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-5.9126061387360096e-05, -0.000339569611242041, -0.0010456338059157133, -1.1887832880020142, -0.049474600702524185, -0.014711589552462101, -0.0026020498480647802], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import unittest", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " un", "ittest", "\n"], "logprobs": [-0.0027583905030041933, -1.3418810367584229, -2.3841855067985307e-07, -1.4305104514278355e-06, -6.794698856538162e-05, -0.00043990471749566495, -0.08881664276123047, -0.8962673544883728, -2.334914207458496, -0.00353723275475204, -0.007317763287574053], "finish_reason": "stop"}], "metrics": {"energy": 170.07942924118043, "energy_per_token": 1.4919248179050915, "time": 7.160885, "time_per_token": 0.06281478070175439}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be non-negative.\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " non", "-", "negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -0.27790212631225586, -0.003457641461864114, -0.0005874100024811924, -1.1418726444244385, -0.0109858438372612, -0.0001501924270996824, -0.0030898945406079292], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.1884312629699707, -0.02779407799243927, -0.8273241519927979, -6.770858453819528e-05, -0.00902265589684248, -0.01159476488828659, -0.0010548033751547337, -0.00011991735664196312, -0.000433112756581977], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " \" \".join(random.sample(vocabulary, k=10))", "tokens": [" \"", " \"", ".", "join", "(", "random", ".", "sample", "(", "voc", "abulary", ",", " k", "=", "1", "0", "))", "\n"], "logprobs": [-2.0466930866241455, -0.27317363023757935, -0.0005739472107961774, -0.0002623452164698392, -0.14263249933719635, -0.13232584297657013, -0.001335205975919962, -0.7250951528549194, -0.0003123987407889217, -0.0077077364549040794, -0.00013851160474587232, -0.0011016021016985178, -2.2895829677581787, -0.004798088688403368, -0.07455391436815262, -0.0016262413701042533, -0.006107002962380648, -0.07212984561920166], "finish_reason": "stop"}, {"text": " in re.findall(r'\\b([a-z]+)\\b', sentence):", "tokens": [" in", " re", ".", "find", "all", "(", "r", "'\\", "b", "([", "a", "-", "z", "]+", ")\\", "b", "'", ",", " sentence", "):", "\n"], "logprobs": [-0.005096895154565573, -1.9569511413574219, -1.728519782773219e-05, -0.23279662430286407, -0.02601604163646698, -0.05233060568571091, -0.097336545586586, -0.9057556390762329, -0.6716845035552979, -1.4155406951904297, -0.574858546257019, -0.003890090622007847, -0.0007150000892579556, -1.2199254035949707, -0.2947569191455841, -0.011845840141177177, -0.022543584927916527, -5.9602869441732764e-05, -0.001293775625526905, -0.33843672275543213, -0.03322577103972435], "finish_reason": "stop"}, {"text": " fr\"\\b{re.escape(word)}\\b\"", "tokens": [" fr", "\"", "\\", "b", "{", "re", ".", "escape", "(", "word", ")}\\", "b", "\"", "\n"], "logprobs": [-1.262341856956482, -0.2670915126800537, -0.20859850943088531, -0.060750722885131836, -0.16454459726810455, -1.503922939300537, -1.8358061424805783e-05, -0.014314702711999416, -0.0002646096108946949, -0.001424251589924097, -0.023252202197909355, -0.003111048135906458, -0.005372490733861923, -0.035367388278245926], "finish_reason": "stop"}, {"text": " pattern.sub(word.replace(' ', '_'), sentence)", "tokens": [" pattern", ".", "sub", "(", "word", ".", "replace", "('", " '", ",", " '_", "')", ",", " sentence", ")", "\n"], "logprobs": [-0.158360555768013, -1.2516897186287679e-05, -0.00023850933939684182, -0.16301697492599487, -2.2237889766693115, -0.010407225228846073, -0.008327759802341461, -1.6966115236282349, -0.009802891872823238, -0.0002308817347511649, -0.011642486788332462, -0.0009652484441176057, -0.010576505213975906, -0.00014232576359063387, -0.042675554752349854, -0.0030877552926540375], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.557583012385294e-05, -0.0003178806509822607, -0.0010275328531861305, -0.35945603251457214, -0.0008708022069185972], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>#!/usr/bin/env python3", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "#", "!", "/", "usr", "/", "bin", "/", "env", " python", "3", "\n"], "logprobs": [-0.0030095544643700123, -1.172991394996643, -2.3841855067985307e-07, -1.4305104514278355e-06, -8.296622399939224e-05, -0.00027843413408845663, -0.09983380883932114, -1.6398303508758545, -0.8821591138839722, -0.0555877760052681, -0.08818105608224869, -0.00010430268594063818, -0.005285812076181173, -0.0003580405900720507, -0.07261087000370026, -0.005348420701920986, -0.5274033546447754, -0.028646929189562798], "finish_reason": "stop"}], "metrics": {"energy": 217.97540704917907, "energy_per_token": 1.4929822400628703, "time": 8.615961, "time_per_token": 0.05901343150684932}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.5913384556770325, -0.000102037942269817, -0.0028190179727971554], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " \" \".join(random.sample(vocabulary, 10))", "tokens": [" \"", " \"", ".", "join", "(", "random", ".", "sample", "(", "voc", "abulary", ",", " ", "1", "0", "))", "\n"], "logprobs": [-2.118868350982666, -0.2980210483074188, -0.0007588367443531752, -0.00021920185827184469, -0.1531444936990738, -0.10891567170619965, -0.0014734136639162898, -0.7491124272346497, -0.0003629264247138053, -0.00774523476138711, -0.0001370812824461609, -0.0013061572099104524, -0.21973973512649536, -0.015139317139983177, -0.0018446111353114247, -0.00874830037355423, -0.07829191535711288], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.004655000288039446, -0.16341866552829742, -5.876845170860179e-05, -3.3378546504536644e-06, -0.0017075256910175085, -0.0034316242672502995], "finish_reason": "stop"}, {"text": " re.compile(\"\\\\b{}\\\\b\".format(word))", "tokens": [" re", ".", "compile", "(", "\"", "\\\\", "b", "{}\\\\", "b", "\"", ".", "format", "(", "word", "))", "\n"], "logprobs": [-1.1128746271133423, -7.629365427419543e-06, -0.26862308382987976, -0.021884381771087646, -2.897397756576538, -0.3740485906600952, -0.0677199736237526, -2.7070095539093018, -0.007012044079601765, -0.0036033957730978727, -0.004787767305970192, -0.00020692592079285532, -0.0006042085005901754, -0.517378568649292, -0.4157566428184509, -0.02703355997800827], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.1828218549489975, -1.3470558769768104e-05, -0.00024828212917782366, -0.17126302421092987, -0.5278697609901428, -0.022972170263528824, -0.007099401671439409, -0.6122992634773254, -0.034707143902778625, -6.103329360485077e-05, -0.010731368325650692, -0.0121340686455369, -0.004884809721261263, -8.368142152903602e-05, -0.06615675985813141, -0.005123461596667767], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.486063259420916e-05, -0.00033063191222026944, -0.0009174905135296285, -0.291180282831192, -0.0008663953049108386], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.0033704398665577173], "finish_reason": "stop"}], "metrics": {"energy": 142.26372206687927, "energy_per_token": 1.2479273865515725, "time": 6.949458, "time_per_token": 0.06096015789473684}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative!\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "!", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -3.1707584857940674, -0.01816108264029026, -0.00021705655672121793, -0.0033239847980439663], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.1884361505508423, -0.00011216964776394889, -0.0074865021742880344, -0.0006997520686127245, -0.0002131234941771254, -0.22540701925754547, -0.00010418349120300263, -5.638440416078083e-05, -0.0011073178611695766, -0.0013767535565420985], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -1.620997667312622, -0.12706254422664642, -0.00016306500765495002, -0.005149553529918194, -0.01947496272623539, -0.0008172033121809363, -0.00011967896716669202, -0.0004886387032456696], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04337724298238754, -0.012609045952558517], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0015756584471091628, -0.001279726973734796, -7.1403817855753e-05, -0.013893087394535542, -1.6689286894688848e-06, -7.986990567587782e-06, -0.0005626287311315536, -0.00039402826223522425, -0.004820155445486307], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.8353750109672546, -0.004915059544146061], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.0056753926910459995, -0.17860260605812073, -7.60526381782256e-05, -4.529942543740617e-06, -0.0020310503896325827, -0.0034051313996315002], "finish_reason": "stop"}, {"text": " r'(?<=\\S){}(?=\\S)'.format(re.escape(word))", "tokens": [" r", "'(", "?", "<", "=\\", "S", "){", "}(", "?", "=\\", "S", ")'", ".", "format", "(", "re", ".", "escape", "(", "word", "))", "\n"], "logprobs": [-1.0445390939712524, -2.8710951805114746, -0.2489338219165802, -0.7715105414390564, -0.7769572734832764, -2.38299560546875, -3.790229558944702, -0.13038524985313416, -0.004677188582718372, -0.02926047518849373, -0.02372577041387558, -0.1796339899301529, -0.041567374020814896, -0.0005581013392657042, -0.003163335844874382, -0.6258516907691956, -1.9550132492440753e-05, -0.009150473400950432, -0.0023258081637322903, -0.004753360990434885, -0.16447602212429047, -0.02516384981572628], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\".join(word.lower().split()), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ".", "join", "(", "word", ".", "lower", "()", ".", "split", "())", ",", " sentence", ")", "\n"], "logprobs": [-0.19989126920700073, -1.1920858014491387e-05, -0.0002329078270122409, -0.187190443277359, -0.5361194014549255, -0.025111420080065727, -0.00814651045948267, -2.0973525047302246, -0.010009806603193283, -0.03626956418156624, -0.2522003948688507, -0.04607425257563591, -1.4670395851135254, -0.01913481391966343, -0.004461809992790222, -0.006215054076164961, -0.08896726369857788, -0.006506449542939663, -0.0004472924047149718, -0.0620303601026535, -0.008073197677731514], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.675497570540756e-05, -0.0003418338019400835, -0.0010300336871296167, -0.3382398188114166, -0.0011884062550961971], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.0032434258610010147, -0.6778127551078796], "finish_reason": "stop"}], "metrics": {"energy": 157.9203315410614, "energy_per_token": 1.327061609588751, "time": 7.3608437, "time_per_token": 0.06185582941176471}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid value for n_sentences, must not be negative.\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " value", " for", " n", "_", "sent", "ences", ",", " must", " not", " be", " negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -3.259049892425537, -2.1432321071624756, -0.1453348994255066, -0.13318277895450592, -0.0022973830346018076, -0.003668960416689515, -0.0018699555657804012, -3.069197177886963, -0.2608594000339508, -0.6391370296478271, -0.00021073981770314276, -0.016679948195815086, -0.4751231372356415, -0.009416569955646992, -0.00020287363440729678, -0.0022387460339814425], "finish_reason": "stop"}, {"text": " not target_words or not vocabulary:", "tokens": [" not", " target", "_", "words", " or", " not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -2.7951629161834717, -1.6212332411669195e-05, -2.3841830625315197e-06, -0.5797268152236938, -0.18710997700691223, -0.025819964706897736, -0.007730093784630299, -0.0061168367974460125], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -0.36358270049095154, -5.876845170860179e-05, -0.008059244602918625, -0.01908838376402855, -0.001660279231145978, -0.00011443436960689723, -0.0004698126285802573], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03919752314686775, -0.012166455388069153], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001869717612862587, -0.0014418693026527762, -7.295342220459133e-05, -0.01323380321264267, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0005062728887423873, -0.00034254882484674454, -0.005028102546930313], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7961748242378235, -0.004113071598112583], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006462034769356251, -0.1910974085330963, -8.34430247778073e-05, -3.6954811548639555e-06, -0.0016396900173276663, -0.0038463911041617393], "finish_reason": "stop"}, {"text": " fr\"\\b({word})\\b\"", "tokens": [" fr", "\"", "\\", "b", "({", "word", "})\\", "b", "\"", "\n"], "logprobs": [-1.3923366069793701, -0.2573789656162262, -0.21860063076019287, -0.06724773347377777, -1.9260056018829346, -0.5802369117736816, -0.024787137284874916, -0.011127203702926636, -0.011810380034148693, -0.02831927128136158], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.1878790557384491, -1.4066597032069694e-05, -0.0002759314374998212, -0.17370569705963135, -0.6541328430175781, -0.022864283993840218, -0.006457889452576637, -0.6157072186470032, -0.041219789534807205, -6.592056161025539e-05, -0.010597028769552708, -0.010448751971125603, -0.004104167688637972, -9.655486064730212e-05, -0.08286841213703156, -0.005427624564617872], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.092700980138034e-05, -0.0003381395654287189, -0.0011747133685275912, -0.4087235927581787, -0.000964533886872232], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.003233088180422783, -0.6724827289581299], "finish_reason": "stop"}], "metrics": {"energy": 180.3106907758713, "energy_per_token": 1.7337566420756856, "time": 7.604628, "time_per_token": 0.07312142307692307}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Negative sentences not allowed.\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " sentences", " not", " allowed", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -3.245232343673706, -3.1692590713500977, -0.20876386761665344, -0.4079663157463074, -0.03622369468212128, -0.00018869050836656243, -0.002348286332562566], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.1355280876159668, -0.00012635385792236775, -0.00801288802176714, -0.0007203606073744595, -0.00019369633810129017, -0.2168014794588089, -9.047575440490618e-05, -5.2927523938706145e-05, -0.0008577005355618894, -0.0012265071272850037], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -0.36358270049095154, -5.876845170860179e-05, -0.008059244602918625, -0.01908838376402855, -0.001660279231145978, -0.00011443436960689723, -0.0004698126285802573], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03919752314686775, -0.012166455388069153], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001869717612862587, -0.0014418693026527762, -7.295342220459133e-05, -0.01323380321264267, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0005062728887423873, -0.00034254882484674454, -0.005028102546930313], "finish_reason": "stop"}, {"text": " \" \".join([random.choice(vocabulary) for _ in range(10)])", "tokens": [" \"", " \"", ".", "join", "([", "random", ".", "choice", "(", "voc", "abulary", ")", " for", " _", " in", " range", "(", "1", "0", ")]", ")", "\n"], "logprobs": [-2.11350417137146, -0.28787529468536377, -0.0005797850899398327, -0.00024589852546341717, -2.050377607345581, -0.2066541612148285, -0.00210564024746418, -0.052560798823833466, -0.0014025861164554954, -0.0025238110683858395, -0.0003327769518364221, -0.009419168345630169, -0.037024013698101044, -0.01537342183291912, -0.000377583724912256, -0.006496500689536333, -0.00026973424246534705, -0.42109259963035583, -0.010655060410499573, -0.003191023599356413, -0.00023862851958256215, -0.017271704971790314], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00543023319914937, -0.19941949844360352, -8.892617915989831e-05, -4.0531076592742465e-06, -0.0017826156690716743, -0.004168512299656868], "finish_reason": "stop"}, {"text": " re.sub(r\"\\s+\", \"_\", word)", "tokens": [" re", ".", "sub", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", "_", "\"", ",", " word", ")", "\n"], "logprobs": [-1.0041875839233398, -6.794906312279636e-06, -2.411839246749878, -0.1299324929714203, -0.19050659239292145, -0.9309870600700378, -0.44970372319221497, -0.1858333945274353, -0.3861671984195709, -0.014735552482306957, -0.0014925779541954398, -1.0226835012435913, -0.6579623222351074, -0.00915224477648735, -0.00034397884155623615, -0.018910828977823257, -0.11889725923538208, -0.08697250485420227], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.17236199975013733, -1.2755313036905136e-05, -0.0002817710628733039, -0.1528184562921524, -0.4613349139690399, -0.022385060787200928, -0.007311135996133089, -0.5564982891082764, -0.030266372486948967, -7.652943895664066e-05, -0.009503954090178013, -0.010006973519921303, -0.004505838733166456, -8.511180931236595e-05, -0.06888256967067719, -0.004994772374629974], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-7.30726242181845e-05, -0.0003666205739136785, -0.001177332829684019, -1.3650431632995605, -0.042310867458581924, -0.01169279869645834, -0.002212102524936199], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import json", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " json", "\n"], "logprobs": [-0.00307456380687654, -1.2510792016983032, -2.3841855067985307e-07, -1.4305104514278355e-06, -8.654219709569588e-05, -0.00034540885826572776, -0.09072554111480713, -0.8618594408035278, -3.9024715423583984, -0.016908299177885056], "finish_reason": "stop"}], "metrics": {"energy": 206.91942915534977, "energy_per_token": 1.52146639084816, "time": 8.003274, "time_per_token": 0.05884760294117647}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Number of sentences must be non-negative\")", "tokens": [" Value", "Error", "(", "\"", "Number", " of", " sentences", " must", " be", " non", "-", "negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.572120189666748, -0.003140519605949521, -0.013527159579098225, -0.16234487295150757, -1.598285436630249, -0.24709099531173706, -0.0028526587411761284, -0.0005797850899398327, -1.5351829528808594, -0.00015138434537220746, -0.002800473477691412], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -1.577410340309143, -0.005176948849111795, -1.4848698377609253, -0.18497346341609955, -0.00017891713650897145, -0.010420910082757473, -0.02105364017188549, -0.000726197671610862, -9.83428253675811e-05, -0.0003195490571670234], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.043042734265327454, -0.011964462697505951], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001606484642252326, -0.001510432455688715, -8.21318244561553e-05, -0.011813324876129627, -1.5497195136049413e-06, -9.298280929215252e-06, -0.00042441420373506844, -0.0003551805857568979, -0.006052262149751186], "finish_reason": "stop"}, {"text": " ' '.join(random.choices(population=vocabulary, k=10))", "tokens": [" '", " '", ".", "join", "(", "random", ".", "cho", "ices", "(", "population", "=", "voc", "abulary", ",", " k", "=", "1", "0", "))", "\n"], "logprobs": [-2.70805025100708, -0.0030826451256871223, -0.0004714807728305459, -0.0002919009421020746, -0.18613843619823456, -0.14215680956840515, -0.0011809049174189568, -0.6864731311798096, -0.00028165188268758357, -0.0019883401691913605, -1.1639800071716309, -0.010134429670870304, -0.004999516997486353, -0.00023731753753963858, -0.008084667846560478, -0.10847661644220352, -0.001446868758648634, -0.06532236188650131, -0.0014642480527982116, -0.01693771965801716, -0.06904101371765137], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.004749208223074675, -0.15383905172348022, -8.225102646974847e-05, -3.6954811548639555e-06, -0.0019160023657605052, -0.0034705903381109238], "finish_reason": "stop"}, {"text": " f\"(?<={word} |{word}\\b)(?:_| )+({word})(?:_| )+(?={word} |{word}\\b)\"", "tokens": [" f", "\"", "(", "?", "<", "={", "word", "}", " |", "{", "word", "}\\", "b", ")(", "?", ":", "_", "|", " )", "+", "({", "word", "})(", "?", ":", "_", "|", " )", "+(", "?", "={", "word", "}", " |", "{", "word", "}\\", "b", ")\"", "\n"], "logprobs": [-3.4948477745056152, -0.2670481503009796, -1.091886043548584, -0.21738234162330627, -1.0293340682983398, -3.0828089714050293, -0.1407204270362854, -2.046673536300659, -2.687883138656616, -0.6076591610908508, -0.05894193425774574, -3.358458995819092, -1.354436993598938, -0.623551607131958, -1.6292731761932373, -0.9755098223686218, -2.8310136795043945, -0.8802528977394104, -0.4884741008281708, -1.6164159774780273, -0.578253984451294, -0.02103811502456665, -0.8876367211341858, -0.0033633115235716105, -0.4315061569213867, -0.5029433369636536, -0.04153912886977196, -0.15146031975746155, -0.3951900601387024, -0.001291037304326892, -0.4045780301094055, -0.0010700459824874997, -0.2756010890007019, -0.006597522646188736, -0.003666466102004051, -0.00011252723925281316, -0.0570191890001297, -0.0005768066039308906, -0.014271690510213375, -0.01733837090432644], "finish_reason": "stop"}, {"text": " pattern.sub(word.replace(\" \", \"_\"), sentence)", "tokens": [" pattern", ".", "sub", "(", "word", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.17478136718273163, -1.2159273865108844e-05, -0.0001802282058633864, -0.18424993753433228, -2.111612558364868, -0.012134185992181301, -0.008504129014909267, -0.21827436983585358, -0.0017339446349069476, -0.013118389062583447, -0.0005398723296821117, -0.009727103635668755, -0.00481932470574975, -0.00012599628826137632, -0.00048315772437490523, -0.020334584638476372, -0.00015352977789007127, -0.04148057475686073, -0.003676324151456356], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.580135959666222e-05, -0.00030214988510124385, -0.0009667966514825821, -0.32712849974632263, -0.0008629412623122334], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.002957852790132165, -0.6721026301383972], "finish_reason": "stop"}], "metrics": {"energy": 204.89948921108245, "energy_per_token": 1.4034211589800167, "time": 8.426478, "time_per_token": 0.05771560273972602}}
{"outputs": [{"text": " not target_words:", "tokens": [" not", " target", "_", "words", ":", "\n"], "logprobs": [-1.8166577816009521, -1.1407411098480225, -1.6093124941107817e-05, -2.264974000354414e-06, -1.0179249048233032, -0.02083522267639637], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.5913384556770325, -0.000102037942269817, -0.0028190179727971554], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.7026944160461426, -0.005073648411780596, -0.2776774764060974, -6.05564855504781e-05, -0.018963584676384926, -0.026602184399962425, -0.0006598440813831985, -7.176141662057489e-05, -0.00038044367101974785], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " \" \".join([random.choice(vocabulary) for _ in range(10)])", "tokens": [" \"", " \"", ".", "join", "([", "random", ".", "choice", "(", "voc", "abulary", ")", " for", " _", " in", " range", "(", "1", "0", ")]", ")", "\n"], "logprobs": [-2.0466930866241455, -0.27317363023757935, -0.0005739472107961774, -0.0002623452164698392, -2.048466682434082, -0.2219410091638565, -0.0020650746300816536, -0.06108788773417473, -0.0019080305937677622, -0.0020474677439779043, -0.00037281715776771307, -0.008146983571350574, -0.04152277484536171, -0.017663437873125076, -0.00030191155383363366, -0.006166835315525532, -0.00024816294899210334, -0.39293503761291504, -0.010882670059800148, -0.0032834685407578945, -0.00023910524032544345, -0.017852922901511192], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006271799560636282, -0.18232329189777374, -9.727005090098828e-05, -3.3378546504536644e-06, -0.001992742298170924, -0.0038727535866200924], "finish_reason": "stop"}, {"text": " fr'\\b({word})\\b'", "tokens": [" fr", "'\\", "b", "({", "word", "})\\", "b", "'", "\n"], "logprobs": [-1.2869446277618408, -2.3400039672851562, -0.04795610159635544, -1.6496577262878418, -0.6291866898536682, -0.026485633105039597, -0.004461691714823246, -0.011555053293704987, -0.04188980534672737], "finish_reason": "stop"}, {"text": " pattern.sub(word.replace(\" \", \"_\"), sentence)", "tokens": [" pattern", ".", "sub", "(", "word", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.14896655082702637, -1.2278481335670222e-05, -0.0002972637885250151, -0.1499733179807663, -1.8580377101898193, -0.01012380886822939, -0.008906282484531403, -0.194494366645813, -0.0017683359328657389, -0.01128716766834259, -0.00045170116936787963, -0.011170468293130398, -0.004134560003876686, -0.00011920218821614981, -0.0005812147865071893, -0.020002439618110657, -0.00014828535495325923, -0.04982636123895645, -0.003200292121618986], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.425174069590867e-05, -0.00030501006403937936, -0.0010598048102110624, -0.3278062343597412, -0.0010633773636072874], "finish_reason": "stop"}, {"text": " sentences<|endoftext|># \ud504\ub85c\uadf8\ub798\ubc0d \ubc18\ubcf5\ud558\uae30", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "#", " ", "", "", "", "\ub85c", "", "", "", "", "", "", "", "", "", " ", "", "", "", "", "", "", "\ud558", "\uae30", "\n"], "logprobs": [-0.0028436246793717146, -1.1482009887695312, -2.3841855067985307e-07, -1.311301275563892e-06, -0.00010990492592100054, -0.0003233625029679388, -0.08623065799474716, -1.7012839317321777, -3.5442285537719727, -3.2430295944213867, -2.00052547454834, -0.11472193151712418, -0.01760581135749817, -0.007124139927327633, -0.0003133521240670234, -1.1444026313256472e-05, -0.00010716341057559475, -0.0005204515182413161, -0.3035764992237091, -0.0001234931987710297, -1.9211115837097168, -4.339123915997334e-05, -0.16698363423347473, -1.2402722835540771, -1.1456595659255981, -0.8582273721694946, -1.0550049543380737, -0.4786490797996521, -0.05192313343286514, -1.6031053066253662, -0.38126879930496216, -0.4609171152114868], "finish_reason": "stop"}], "metrics": {"energy": 208.65704686737055, "energy_per_token": 1.4694158230096517, "time": 8.219044, "time_per_token": 0.05788059154929578}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError('n_sentences must not be negative')", "tokens": [" Value", "Error", "('", "n", "_", "sent", "ences", " must", " not", " be", " negative", "')", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -1.833234190940857, -0.3409927189350128, -0.011204065755009651, -0.004807342309504747, -0.0011616155970841646, -0.11312537640333176, -0.36304008960723877, -0.00012659224739763886, -0.0090872747823596, -0.26967623829841614, -0.0012543675256893039], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.44284728169441223, -0.11252370476722717, -0.05135074630379677, -0.002161906100809574], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012729407753795385, -3.0636318115284666e-05, -0.0028241295367479324, -0.0015323336701840162, -1.1800317764282227, -0.03083639033138752, -0.7605577111244202, -7.784063927829266e-05, -0.008736127987504005, -0.012419505976140499, -0.0011311330599710345, -0.00012516192509792745, -0.0003625689132604748], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.040659207850694656, -0.012794195674359798], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0014896021457388997, -0.0012874656822532415, -8.880697714630514e-05, -0.013798207975924015, -1.311301275563892e-06, -8.583032467868179e-06, -0.0004459816846065223, -0.0003618539194576442, -0.005204462446272373], "finish_reason": "stop"}, {"text": " \" \".join(random.choices(vocabulary, k=10))", "tokens": [" \"", " \"", ".", "join", "(", "random", ".", "cho", "ices", "(", "voc", "abulary", ",", " k", "=", "1", "0", "))", "\n"], "logprobs": [-1.9560604095458984, -0.27277061343193054, -0.0005689432728104293, -0.00024732868769206107, -0.15483613312244415, -0.117525614798069, -0.00136461085639894, -0.8641610741615295, -0.00019572250312194228, -0.0018146253423765302, -0.24610334634780884, -0.00012039413559250534, -0.007243916392326355, -0.0022018731106072664, -0.006131291389465332, -0.08129563927650452, -0.0014871024759486318, -0.005598816554993391, -0.050758425146341324], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.005407705903053284, -0.14366653561592102, -8.201262971851975e-05, -3.814689989667386e-06, -0.0016333822859451175, -0.00430134404450655], "finish_reason": "stop"}, {"text": " r'([A-Za-z]+) (\\1)'", "tokens": [" r", "'", "([", "A", "-", "Z", "a", "-", "z", "]+", ")", " (\\", "1", ")'", "\n"], "logprobs": [-1.0877004861831665, -2.8485803604125977, -2.4192044734954834, -1.7242772579193115, -0.009123186580836773, -0.005568824242800474, -0.08849252015352249, -1.728519782773219e-05, -6.568216485902667e-05, -0.5307498574256897, -1.8057599067687988, -3.169840097427368, -0.17936411499977112, -0.7244086265563965, -0.13302353024482727], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.17590348422527313, -1.2993727978027891e-05, -0.00020001317898277193, -0.16432705521583557, -0.4830087721347809, -0.021509699523448944, -0.006326173432171345, -1.4412083625793457, -0.0003262225945945829, -0.14498135447502136, -0.02018856257200241], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-8.010543388081715e-05, -0.0002989322238136083, -0.0008646087371744215, -0.2729490101337433, -0.0008586533949710429], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import math", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " math", "\n"], "logprobs": [-0.002847903873771429, -1.2231998443603516, -2.3841855067985307e-07, -1.311301275563892e-06, -8.642300235806033e-05, -0.00028236693469807506, -0.08352744579315186, -0.8159469962120056, -2.834874391555786, -0.014868045225739479], "finish_reason": "stop"}], "metrics": {"energy": 138.70800717067718, "energy_per_token": 1.1957586825058377, "time": 6.950569, "time_per_token": 0.05991869827586207}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative.\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.962447464466095, -0.008137760683894157, -0.0001113352773245424, -0.002144657773897052], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.1884361505508423, -0.00011216964776394889, -0.0074865021742880344, -0.0006997520686127245, -0.0002131234941771254, -0.22540701925754547, -0.00010418349120300263, -5.638440416078083e-05, -0.0011073178611695766, -0.0013767535565420985], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary list is empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " list", " is", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.1884312629699707, -0.02779407799243927, -2.3611509799957275, -2.6487057209014893, -0.004782784264534712, -0.04890727624297142, -0.02315913885831833, -0.0001062098381225951, -0.00045885046711191535], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.8023121356964111, -0.004991688299924135], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00670279748737812, -0.1944006383419037, -7.331102824537084e-05, -3.6954811548639555e-06, -0.0021513192914426327, -0.0032463965471833944], "finish_reason": "stop"}, {"text": " fr\"\\b({re.escape(word).replace(' ', r'\\s+')})\"", "tokens": [" fr", "\"", "\\", "b", "({", "re", ".", "escape", "(", "word", ")", ".", "replace", "('", " '", ",", " r", "'\\", "s", "+", "')", "})", "\"", "\n"], "logprobs": [-1.3283624649047852, -0.24672435224056244, -0.21724948287010193, -0.06592855602502823, -1.8546117544174194, -1.2817072868347168, -2.90866428258596e-05, -0.03373025730252266, -0.01052507571876049, -0.0025704221334308386, -0.4247206151485443, -0.242449089884758, -0.28329917788505554, -0.17515353858470917, -0.08754944056272507, -0.0001212284987559542, -1.180444359779358, -0.8501043319702148, -0.21417102217674255, -1.188063621520996, -0.020436670631170273, -2.129791498184204, -0.16402550041675568, -0.08501788228750229], "finish_reason": "stop"}, {"text": " pattern.sub('_'.join(word.lower().split()), sentence)", "tokens": [" pattern", ".", "sub", "('", "_", "'", ".", "join", "(", "word", ".", "lower", "()", ".", "split", "())", ",", " sentence", ")", "\n"], "logprobs": [-0.17232497036457062, -1.1801649634435307e-05, -0.00029523781267926097, -1.812880516052246, -0.023322664201259613, -0.003685113275423646, -2.2172346115112305, -0.0019143365789204836, -0.026481105014681816, -0.37389588356018066, -0.05360252410173416, -1.7497485876083374, -0.012367934919893742, -0.0024580522440373898, -0.0061093722470104694, -0.08421234041452408, -0.004321166314184666, -0.0007244108128361404, -0.09224367141723633, -0.007288769353181124], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.41325386823155e-05, -0.0003499372396618128, -0.001029438222758472, -0.3259251117706299, -0.0007312007946893573], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import random", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " random", "\n"], "logprobs": [-0.002995292190462351, -1.0918034315109253, -2.3841855067985307e-07, -1.4305104514278355e-06, -6.12716976320371e-05, -0.0003200257197022438, -0.09787997603416443, -0.829319953918457, -1.2040072679519653, -0.021556835621595383], "finish_reason": "stop"}], "metrics": {"energy": 190.76041847801213, "energy_per_token": 1.5139715752223184, "time": 7.370167, "time_per_token": 0.05849338888888889}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(f\"n_sentences ({n_sentences}) must be non-negative.\")", "tokens": [" Value", "Error", "(", "f", "\"", "n", "_", "sent", "ences", " ({", "n", "_", "sent", "ences", "})", " must", " be", " non", "-", "negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -2.329693078994751, -0.22612343728542328, -0.38374844193458557, -0.00718107121065259, -0.00778628047555685, -0.0008459088858217001, -2.655496120452881, -0.002138234442099929, -0.00010740180005086586, -5.173549288883805e-05, -0.0021111122332513332, -0.002441165968775749, -0.2009374052286148, -1.4239863157272339, -0.29043319821357727, -0.003068265039473772, -0.0008148210472427309, -0.80460524559021, -0.002725341124460101, -8.749579137656838e-05, -0.0018678138731047511], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.39509251713752747, -0.11594000458717346, -0.039209213107824326, -0.0026719605084508657], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012437711702659726, -3.135155202471651e-05, -0.0033141232561320066, -0.0017088347813114524, -1.0312858819961548, -0.005571551155298948, -0.0028469529934227467, -0.33964216709136963, -5.4238757002167404e-05, -0.00841393880546093, -0.019245442003011703, -0.0012172202114015818, -9.536288416711614e-05, -0.0003597089380491525], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03655325248837471, -0.01243740227073431], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0016671819612383842, -0.0012181727215647697, -8.165503095369786e-05, -0.013353202491998672, -1.9073468138230965e-06, -6.556489552167477e-06, -0.00043215948971919715, -0.00030501006403937936, -0.005324112717062235], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7807963490486145, -0.004195341374725103], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.005114566534757614, -0.16118501126766205, -9.059495641849935e-05, -3.6954811548639555e-06, -0.0016451646806672215, -0.0041634077206254005], "finish_reason": "stop"}, {"text": " rf\"\\b{word}\\b\"", "tokens": [" r", "f", "\"", "\\", "b", "{", "word", "}\\", "b", "\"", "\n"], "logprobs": [-1.0977338552474976, -2.1865415573120117, -0.16150659322738647, -0.18149931728839874, -0.0459577850997448, -0.24296177923679352, -0.26079145073890686, -0.24770785868167877, -0.008918333798646927, -0.006475063040852547, -0.035417668521404266], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.2042505294084549, -1.3947389561508317e-05, -0.00019965562387369573, -0.19785812497138977, -0.5437350869178772, -0.021605949848890305, -0.006609010044485331, -1.3112614154815674, -0.00035279724397696555, -0.14163155853748322, -0.023188957944512367], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-7.199982064776123e-05, -0.00037353215157054365, -0.001095648156479001, -1.2012513875961304, -0.044950004667043686, -0.013433421961963177, -0.0021978288423269987], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.002988042077049613, -0.7064177989959717], "finish_reason": "stop"}], "metrics": {"energy": 127.26314357948303, "energy_per_token": 1.260031124549337, "time": 6.296951, "time_per_token": 0.06234604950495049}}
{"outputs": [{"text": " not n_sentences >= 0:", "tokens": [" not", " n", "_", "sent", "ences", " >=", " ", "0", ":", "\n"], "logprobs": [-1.8166577816009521, -2.3332974910736084, -6.687417771900073e-05, -2.4199192921514623e-05, -7.390948667307384e-06, -0.11930902302265167, -0.014768559485673904, -0.02395182102918625, -0.021163472905755043, -0.01992660202085972], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid number of sentences (must be >= 0): \" + str(n_sentences))", "tokens": [" Value", "Error", "(", "\"", "Invalid", " number", " of", " sentences", " (", "must", " be", " >=", " ", "0", "):", " \"", " +", " str", "(", "n", "_", "sent", "ences", "))", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -3.259049892425537, -0.6247689127922058, -0.0033608165103942156, -0.00931358803063631, -2.736703872680664, -1.426873803138733, -1.0079717636108398, -2.955782413482666, -0.025960171595215797, -0.009065184742212296, -1.0703045129776, -1.759909987449646, -0.0611884780228138, -0.10280856490135193, -0.00029774048016406596, -0.0024397389497607946, -0.00019393471302464604, -7.247662142617628e-05, -0.008949289098381996, -0.005853534676134586, -0.0011098184622824192], "finish_reason": "stop"}, {"text": " len(vocabulary) < 1:", "tokens": [" len", "(", "voc", "abulary", ")", " <", " ", "1", ":", "\n"], "logprobs": [-1.1355280876159668, -0.00012635385792236775, -0.00801288802176714, -0.0007203606073744595, -0.00019369633810129017, -1.7241963148117065, -0.0004412154376041144, -0.07366526126861572, -0.0019279003608971834, -0.002517152111977339], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -1.1677309274673462, -0.02979438751935959, -0.9484428763389587, -0.11493226140737534, -0.0001212284987559542, -0.004945545922964811, -0.012448939494788647, -0.000713213172275573, -0.0001805857609724626, -0.0006312523037195206], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.043042734265327454, -0.011964462697505951], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001606484642252326, -0.001510432455688715, -8.21318244561553e-05, -0.011813324876129627, -1.5497195136049413e-06, -9.298280929215252e-06, -0.00042441420373506844, -0.0003551805857568979, -0.006052262149751186], "finish_reason": "stop"}, {"text": " ''", "tokens": [" ''", "\n"], "logprobs": [-3.144705295562744, -0.10667655616998672], "finish_reason": "stop"}, {"text": " in re.findall(r'\\w+', sentence):", "tokens": [" in", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " sentence", "):", "\n"], "logprobs": [-0.004749208223074675, -2.27667236328125, -1.9907753085135482e-05, -0.22214893996715546, -0.028958959504961967, -0.05623280256986618, -0.09210962802171707, -0.8211243152618408, -1.0887994766235352, -0.044177450239658356, -7.009260298218578e-05, -0.003607671707868576, -0.04495080187916756, -0.02126500755548477], "finish_reason": "stop"}, {"text": " fr\"\\b{word}\\b\"", "tokens": [" fr", "\"", "\\", "b", "{", "word", "}\\", "b", "\"", "\n"], "logprobs": [-1.2848361730575562, -0.26961633563041687, -0.21499505639076233, -0.0877847746014595, -0.16903315484523773, -0.26616087555885315, -0.17056196928024292, -0.009094244800508022, -0.009546934626996517, -0.029957525432109833], "finish_reason": "stop"}, {"text": " pattern.sub('_', sentence, 1)", "tokens": [" pattern", ".", "sub", "('", "_", "'", ",", " sentence", ",", " ", "1", ")", "\n"], "logprobs": [-0.19115383923053741, -1.3589766240329482e-05, -0.00029476112104021013, -1.8496613502502441, -0.022197598591446877, -0.0037117176689207554, -0.9777830839157104, -0.0003305127320345491, -1.5580860376358032, -1.8879172801971436, -0.0043890574015676975, -0.021004848182201385, -0.04815572500228882], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.116541382856667e-05, -0.00031931069679558277, -0.0010793342953547835, -0.3545345366001129, -0.0010970771545544267], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.0030646997038275003, -0.6931802034378052], "finish_reason": "stop"}], "metrics": {"energy": 157.88765455055236, "energy_per_token": 1.3611004702633824, "time": 7.358187, "time_per_token": 0.06343264655172413}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.5913384556770325, -0.000102037942269817, -0.0028190179727971554], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7040256261825562, -0.005056924652308226], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00571178225800395, -0.16880954802036285, -7.939023635117337e-05, -3.2186455882765586e-06, -0.0018582948250696063, -0.0032549516763538122], "finish_reason": "stop"}, {"text": " r'\\b' + re.escape(word) + r'\\b'", "tokens": [" r", "'\\", "b", "'", " +", " re", ".", "escape", "(", "word", ")", " +", " r", "'\\", "b", "'", "\n"], "logprobs": [-1.1711390018463135, -1.1692934036254883, -0.08218906819820404, -1.0578936338424683, -0.0005629861843772233, -0.5498122572898865, -7.748573807475623e-06, -0.017584728077054024, -0.00021181246847845614, -0.0014234182890504599, -0.04914756864309311, -0.0461745411157608, -0.003913483582437038, -0.0568423867225647, -0.007482005748897791, -0.0034303173888474703, -0.07273613661527634], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.19028240442276, -1.3828182090946939e-05, -0.0002157455455744639, -0.19226393103599548, -0.47932595014572144, -0.020642563700675964, -0.006823689676821232, -0.5015880465507507, -0.02777784690260887, -7.688703772146255e-05, -0.01077311672270298, -0.013024848885834217, -0.005924995522946119, -8.77341881277971e-05, -0.07353103160858154, -0.005124054849147797], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.639736966462806e-05, -0.00032443503732793033, -0.0008793777669779956, -0.30861157178878784, -0.0009947833605110645], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>from random import random", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "from", " random", " import", " random", "\n"], "logprobs": [-0.003434000303968787, -1.360771894454956, -2.3841855067985307e-07, -1.311301275563892e-06, -7.676783570786938e-05, -0.00024089295766316354, -0.07761861383914948, -1.3207519054412842, -2.7593109607696533, -0.005679185967892408, -0.8752133250236511, -0.38930273056030273], "finish_reason": "stop"}], "metrics": {"energy": 142.6263300638199, "energy_per_token": 1.284921892466846, "time": 6.9460607, "time_per_token": 0.06257712342342342}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError('n_sentences must not be negative')", "tokens": [" Value", "Error", "('", "n", "_", "sent", "ences", " must", " not", " be", " negative", "')", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -1.833234190940857, -0.3409927189350128, -0.011204065755009651, -0.004807342309504747, -0.0011616155970841646, -0.11312537640333176, -0.36304008960723877, -0.00012659224739763886, -0.0090872747823596, -0.26967623829841614, -0.0012543675256893039], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.173171043395996, -0.00011669908417388797, -0.005672073923051357, -0.0007013006834313273, -0.00022027450904715806, -0.22835920751094818, -0.00011526874004630372, -6.23445157543756e-05, -0.001190787530504167, -0.0012017417466267943], "finish_reason": "stop"}, {"text": " ValueError(\"Empty vocabulary is not allowed.\")", "tokens": [" Value", "Error", "(", "\"", "Empty", " vocabulary", " is", " not", " allowed", ".", "\"", ")", "\n"], "logprobs": [-0.0012729407753795385, -3.0636318115284666e-05, -0.0028241295367479324, -0.0015323336701840162, -3.70786190032959, -0.015415798872709274, -0.9201122522354126, -0.13614708185195923, -0.5345713496208191, -0.017797768115997314, -0.0028249616734683514, -0.00013243274588603526, -0.0005870526074431837], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.040659207850694656, -0.012794195674359798], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0014896021457388997, -0.0012874656822532415, -8.880697714630514e-05, -0.013798207975924015, -1.311301275563892e-06, -8.583032467868179e-06, -0.0004459816846065223, -0.0003618539194576442, -0.005204462446272373], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.8338489532470703, -0.004107610322535038], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006421882193535566, -0.2043617069721222, -8.964136941358447e-05, -3.814689989667386e-06, -0.001701099332422018, -0.0035124055575579405], "finish_reason": "stop"}, {"text": " r'\\b{}\\b'.format(word)", "tokens": [" r", "'\\", "b", "{}\\", "b", "'", ".", "format", "(", "word", ")", "\n"], "logprobs": [-1.0905691385269165, -1.311682105064392, -0.08201237767934799, -0.7981241345405579, -0.0019509821431711316, -0.005728257820010185, -0.0052713449113070965, -0.00024768622824922204, -0.004666747059673071, -0.9428406953811646, -0.15660515427589417, -0.06448794901371002], "finish_reason": "stop"}, {"text": " pattern.sub(f\"_{word}_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "f", "\"", "_{", "word", "}_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.17640045285224915, -1.3351351299206726e-05, -0.00024303820100612938, -0.18339619040489197, -2.482691764831543, -0.07508077472448349, -0.7421014308929443, -0.37958788871765137, -0.16474752128124237, -0.009597588330507278, -0.0050608390010893345, -0.00017796363681554794, -0.05414460226893425, -0.02130083553493023], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.210611172718927e-05, -0.00034683887497521937, -0.001122321467846632, -0.32967081665992737, -0.0009386900928802788], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.0032384353689849377, -0.6338426470756531], "finish_reason": "stop"}], "metrics": {"energy": 129.78264875984192, "energy_per_token": 1.3379654511323908, "time": 6.328305, "time_per_token": 0.06524025773195877}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must not be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " not", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -0.405813604593277, -0.00010251473577227443, -0.009404760785400867, -0.5913384556770325, -0.000102037942269817, -0.0028190179727971554], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.1884312629699707, -0.02779407799243927, -0.8781931400299072, -0.11379775404930115, -0.0001062098381225951, -0.003385053249076009, -0.01144710648804903, -0.0007332258974201977, -0.00013743886665906757, -0.0004961451631970704], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " ''.join(random.sample(vocabulary, 10)).lower()", "tokens": [" ''", ".", "join", "(", "random", ".", "sample", "(", "voc", "abulary", ",", " ", "1", "0", "))", ".", "lower", "()", "\n"], "logprobs": [-3.1042206287384033, -2.3510305881500244, -0.00014244495832826942, -0.1838088184595108, -0.10494892299175262, -0.0004180987598374486, -0.6740912795066833, -0.000701658078469336, -0.013193215243518353, -0.00014220656885299832, -0.0030219147447496653, -0.21533632278442383, -0.013941522687673569, -0.001712523982860148, -0.005531955510377884, -1.834310531616211, -0.39247334003448486, -0.00022742546570952982, -0.08601946383714676], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00670279748737812, -0.1944006383419037, -7.331102824537084e-05, -3.6954811548639555e-06, -0.0021513192914426327, -0.0032463965471833944], "finish_reason": "stop"}, {"text": " \"(?<=[a-zA-Z0-9]){}(?=[a-zA-Z0-9])\".format(word)", "tokens": [" \"", "(", "?", "<", "=[", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "])", "{", "}(", "?", "=[", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "])", "\"", ".", "format", "(", "word", ")", "\n"], "logprobs": [-3.337761878967285, -2.4184417724609375, -0.5941235423088074, -1.0285062789916992, -1.0827925205230713, -0.6117933988571167, -0.0007985025877133012, -0.0005428509321063757, -0.49541130661964417, -2.706014311115723e-05, -0.001680630026385188, -0.919366180896759, -0.00018773700867313892, -0.00028236693469807506, -1.1087199449539185, -1.6281613111495972, -0.07945375144481659, -0.0064606135711073875, -0.03596360236406326, -0.006303547415882349, -2.2649508537142538e-05, -0.00025149996508844197, -0.0019646643195301294, -9.775113539944869e-06, -0.00015829740732442588, -0.005730391480028629, -4.7444173105759546e-05, -8.940656698541716e-06, -0.007061169017106295, -0.00547315226867795, -0.0075972434133291245, -0.00044276448898017406, -0.004203176125884056, -0.5211392641067505, -0.16239432990550995, -0.032750338315963745], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\"*len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", "*", "len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.17232497036457062, -1.1801649634435307e-05, -0.00029523781267926097, -0.17913343012332916, -0.42807167768478394, -0.02464083395898342, -0.005813831463456154, -2.6121490001678467, -0.007893676869571209, -0.00011395759065635502, -0.009380078874528408, -0.012773598544299603, -0.004716936498880386, -0.0008912881603464484, -0.08047367632389069, -0.006918048951774836], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.509902934543788e-05, -0.00029940891545265913, -0.0009480987209826708, -0.2815820872783661, -0.000763363263104111], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import random", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " random", "\n"], "logprobs": [-0.0032078970689326525, -1.2056694030761719, -2.3841855067985307e-07, -1.311301275563892e-06, -0.00012015574611723423, -0.0003493413969408721, -0.0981016531586647, -0.9392953515052795, -1.1329066753387451, -0.019475430250167847], "finish_reason": "stop"}], "metrics": {"energy": 180.38313617038722, "energy_per_token": 1.244021628761291, "time": 8.422469, "time_per_token": 0.05808599310344827}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be positive\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " positive", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -2.6536078453063965, -0.5876450538635254, -0.000205018965061754, -0.004286625422537327], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.1884361505508423, -0.00011216964776394889, -0.0074865021742880344, -0.0006997520686127245, -0.0002131234941771254, -0.22540701925754547, -0.00010418349120300263, -5.638440416078083e-05, -0.0011073178611695766, -0.0013767535565420985], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.7026944160461426, -0.005073648411780596, -1.7520904541015625, -0.1910652071237564, -0.00018606838420964777, -0.008676331490278244, -0.020644081756472588, -0.0006667536217719316, -9.16677454370074e-05, -0.00043096792069263756], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.8023121356964111, -0.004991688299924135], "finish_reason": "stop"}, {"text": " in re.split(r\"\\s+\", sentence):", "tokens": [" in", " re", ".", "split", "(", "r", "\"", "\\", "s", "+", "\"", ",", " sentence", "):", "\n"], "logprobs": [-0.00670279748737812, -1.999627947807312, -1.549708758830093e-05, -1.5946228504180908, -0.12206380814313889, -0.16671505570411682, -0.43901124596595764, -0.41587918996810913, -0.3085598945617676, -0.5353246927261353, -0.02632088214159012, -5.6265202147187665e-05, -0.016193997114896774, -0.06387897580862045, -0.030991384759545326], "finish_reason": "stop"}, {"text": " r'\\s'.join(re.escape(word).split(' '))", "tokens": [" r", "'\\", "s", "'", ".", "join", "(", "re", ".", "escape", "(", "word", ")", ".", "split", "('", " '", "))", "\n"], "logprobs": [-1.0584274530410767, -1.1472814083099365, -2.7458033561706543, -0.5843872427940369, -1.4897652864456177, -0.0002397011558059603, -0.0630887970328331, -0.6314881443977356, -5.435795901576057e-05, -0.4020099341869354, -0.001909934333525598, -0.09662042558193207, -0.02917202189564705, -0.20423585176467896, -0.023937389254570007, -0.6087972521781921, -0.028596188873052597, -0.00264021591283381, -0.10233055055141449], "finish_reason": "stop"}, {"text": " pattern.sub(r\"\\g<0>_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "r", "\"", "\\", "g", "<", "0", ">", "_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.18311084806919098, -1.1801649634435307e-05, -0.00020621081057470292, -0.16996382176876068, -2.280113697052002, -0.11713729798793793, -0.47307443618774414, -1.3209872245788574, -0.0005760917556472123, -0.1902051419019699, -0.022315116599202156, -0.6089399456977844, -0.0024380742106586695, -0.01004698220640421, -0.00025078488397412, -0.033592864871025085, -0.024259503930807114], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.890059739816934e-05, -0.00030083899036981165, -0.0011335145682096481, -0.35780853033065796, -0.001022650278173387], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.0031090278644114733], "finish_reason": "stop"}], "metrics": {"energy": 156.80679787731168, "energy_per_token": 1.3402290416864246, "time": 7.158888, "time_per_token": 0.06118707692307693}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Negative n_sentences is not valid\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " n", "_", "sent", "ences", " is", " not", " valid", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -1.3992011547088623, -0.01850682869553566, -0.00929303839802742, -0.0007745603215880692, -0.7982794046401978, -0.31020379066467285, -2.328779697418213, -1.2700462341308594, -0.00045122456504032016, -0.0048807766288518906], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -1.4656983613967896, -0.13342754542827606, -0.00014482879487331957, -0.006188279017806053, -0.020819228142499924, -0.001091480371542275, -0.00014077626110520214, -0.0005042473785579205], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03792538493871689, -0.012681555934250355], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0018816161900758743, -0.0014294892316684127, -7.450303382938728e-05, -0.012829973362386227, -1.1920922133867862e-06, -7.271740287251305e-06, -0.00040951924165710807, -0.000337305391440168, -0.004883504938334227], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7426055669784546, -0.0033538066782057285], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.005815728101879358, -0.1439686119556427, -8.296622399939224e-05, -3.576272320060525e-06, -0.00153840403072536, -0.004323896020650864], "finish_reason": "stop"}, {"text": " re.compile(r'\\b' + word + r'\\b')", "tokens": [" re", ".", "compile", "(", "r", "'\\", "b", "'", " +", " word", " +", " r", "'\\", "b", "')", "\n"], "logprobs": [-1.2917205095291138, -6.794906312279636e-06, -0.22744375467300415, -0.01799062266945839, -0.5629765391349792, -0.6656807661056519, -0.05120306834578514, -0.8992144465446472, -7.748303323751315e-05, -0.7103167176246643, -0.13980348408222198, -0.015870800241827965, -0.06022321432828903, -0.004035069607198238, -0.13684429228305817, -0.023435276001691818], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\", sentence, count=1)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ",", " sentence", ",", " count", "=", "1", ")", "\n"], "logprobs": [-0.17374657094478607, -1.2159273865108844e-05, -0.00025078488397412, -0.17896509170532227, -0.4390573501586914, -0.02357500232756138, -0.0073452177457511425, -1.4840201139450073, -0.000339569611242041, -2.5491623878479004, -0.3319297432899475, -0.0069189961068332195, -0.012230400927364826, -0.040032804012298584, -0.02071729674935341], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-6.937739817658439e-05, -0.0003408804477658123, -0.0008734225411899388, -1.3413324356079102, -0.06472016125917435, -0.015086360275745392, -0.0025274972431361675], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.0031264969147741795, -0.7234553098678589], "finish_reason": "stop"}], "metrics": {"energy": 138.97709586715698, "energy_per_token": 1.3492921928850192, "time": 6.530337, "time_per_token": 0.06340133009708739}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Negative number of sentences not allowed.\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " number", " of", " sentences", " not", " allowed", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -0.8554465770721436, -0.017245575785636902, -0.009316304698586464, -1.7600610256195068, -0.17278040945529938, -0.36282894015312195, -0.0111684650182724, -0.000169382052263245, -0.0019361099693924189], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -0.36358270049095154, -5.876845170860179e-05, -0.008059244602918625, -0.01908838376402855, -0.001660279231145978, -0.00011443436960689723, -0.0004698126285802573], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03919752314686775, -0.012166455388069153], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001869717612862587, -0.0014418693026527762, -7.295342220459133e-05, -0.01323380321264267, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0005062728887423873, -0.00034254882484674454, -0.005028102546930313], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7961748242378235, -0.004113071598112583], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006462034769356251, -0.1910974085330963, -8.34430247778073e-05, -3.6954811548639555e-06, -0.0016396900173276663, -0.0038463911041617393], "finish_reason": "stop"}, {"text": " fr\"\\b{word}\\b\"", "tokens": [" fr", "\"", "\\", "b", "{", "word", "}\\", "b", "\"", "\n"], "logprobs": [-1.3923366069793701, -0.2573789656162262, -0.21860063076019287, -0.06724773347377777, -0.19613195955753326, -0.22077114880084991, -0.18305793404579163, -0.007591801229864359, -0.008278341963887215, -0.034634485840797424], "finish_reason": "stop"}, {"text": " re.sub(pattern, word.replace(' ', '_'), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " word", ".", "replace", "('", " '", ",", " '_", "')", ",", " sentence", ")", "\n"], "logprobs": [-1.820117473602295, -4.9470632802695036e-05, -0.0004583738627843559, -0.0005526207387447357, -0.01527480874210596, -0.0011714984430000186, -1.453863501548767, -0.00633434671908617, -0.007082948926836252, -1.5791915655136108, -0.008001890033483505, -0.00011205045302631333, -0.009703964926302433, -0.0005191409145481884, -0.009928368031978607, -0.00015698630886618048, -0.04994770884513855, -0.0052164397202432156], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-6.878139538457617e-05, -0.00030393750057555735, -0.0012353177880868316, -1.2908755540847778, -0.04475509747862816, -0.014488374814391136, -0.0024245171807706356], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.0032549516763538122], "finish_reason": "stop"}], "metrics": {"energy": 133.73718003463745, "energy_per_token": 1.3787338147900767, "time": 6.308474, "time_per_token": 0.0650358144329897}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Negative number of sentences is invalid.\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " number", " of", " sentences", " is", " invalid", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -0.8554465770721436, -0.017245575785636902, -0.009316304698586464, -0.7660596370697021, -1.6398200988769531, -0.4087088406085968, -0.020691724494099617, -0.0001821352052502334, -0.0036332090385258198], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"The vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "The", " vocabulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -1.1677309274673462, -0.02979438751935959, -0.7562660574913025, -7.045020902296528e-05, -0.01047623809427023, -0.01364558283239603, -0.0011249411618337035, -0.00013493580627255142, -0.00042834642226807773], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.043042734265327454, -0.011964462697505951], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001606484642252326, -0.001510432455688715, -8.21318244561553e-05, -0.011813324876129627, -1.5497195136049413e-06, -9.298280929215252e-06, -0.00042441420373506844, -0.0003551805857568979, -0.006052262149751186], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7959617972373962, -0.004530878737568855], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.004749208223074675, -0.15383905172348022, -8.225102646974847e-05, -3.6954811548639555e-06, -0.0019160023657605052, -0.0034705903381109238], "finish_reason": "stop"}, {"text": " r'(' + word + r')'", "tokens": [" r", "'", "('", " +", " word", " +", " r", "')", "'", "\n"], "logprobs": [-1.159753441810608, -2.8258280754089355, -2.281787157058716, -0.017209017649292946, -1.4313398599624634, -0.4615432918071747, -0.07297686487436295, -0.09266795963048935, -0.11487476527690887, -0.1320415437221527], "finish_reason": "stop"}, {"text": " re.sub(pattern, word.replace(\" \", \"_\"), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " word", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-1.888211727142334, -5.864924969500862e-05, -0.0005351065192371607, -0.000559173640795052, -0.01990942284464836, -0.0006581762572750449, -1.4808672666549683, -0.006025838200002909, -0.005170188844203949, -0.22375361621379852, -0.002231609309092164, -0.007200007792562246, -0.00028689560713246465, -0.009366261772811413, -0.004526962526142597, -0.00013279033009894192, -0.0004119024670217186, -0.016927873715758324, -0.0002076410164590925, -0.04643438011407852, -0.0034720157273113728], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-6.663577369181439e-05, -0.00037472377880476415, -0.0008803306263871491, -1.211956262588501, -0.05754580348730087, -0.017367543652653694, -0.0022946475073695183], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.003049487480893731, -0.7164661288261414], "finish_reason": "stop"}], "metrics": {"energy": 137.62487322235106, "energy_per_token": 1.3762487322235106, "time": 6.527658, "time_per_token": 0.06527658}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be non-negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " non", "-", "negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -0.27790212631225586, -0.003457641461864114, -0.0005874100024811924, -0.5169031620025635, -9.762764238985255e-05, -0.002711312612518668], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7040256261825562, -0.005056924652308226], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00571178225800395, -0.16880954802036285, -7.939023635117337e-05, -3.2186455882765586e-06, -0.0018582948250696063, -0.0032549516763538122], "finish_reason": "stop"}, {"text": " r\"\\s+\" + re.escape(word) + r\"\\s+\"", "tokens": [" r", "\"", "\\", "s", "+", "\"", " +", " re", ".", "escape", "(", "word", ")", " +", " r", "\"", "\\", "s", "+", "\"", "\n"], "logprobs": [-1.1711390018463135, -0.7316502928733826, -0.24410168826580048, -2.2023441791534424, -1.2255269289016724, -0.5671045780181885, -0.8486879467964172, -0.4452880024909973, -1.2755313036905136e-05, -0.005425490438938141, -0.00017188502533826977, -0.003925120458006859, -0.041947536170482635, -0.15171007812023163, -0.023593049496412277, -0.00041500062798149884, -0.013833597302436829, -0.010396135970950127, -0.013192862272262573, -0.0028249616734683514, -0.06515327841043472], "finish_reason": "stop"}, {"text": " re.sub(pattern, lambda match: match.group().replace(\" \", \"_\"), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " lambda", " match", ":", " match", ".", "group", "()", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-1.818530559539795, -4.8040190449682996e-05, -0.0006718761869706213, -0.0005489272880367935, -0.020231319591403008, -0.0010030006524175406, -1.2654695510864258, -1.3455815315246582, -0.006219555623829365, -0.3456576466560364, -0.007838679477572441, -0.013806908391416073, -1.1418832540512085, -0.0009195152088068426, -0.007038441486656666, -0.23700501024723053, -0.008703039959073067, -0.006924915127456188, -0.0001662831346038729, -0.011411868035793304, -0.004563275258988142, -0.00012599628826137632, -0.0005621521850116551, -0.009772907942533493, -0.0013919912744313478, -0.018121162429451942, -0.0035687112249433994], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.913899414939806e-05, -0.0002944036095868796, -0.0009085579658858478, -0.26737067103385925, -0.0009004590683616698], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>from typing import List, Optional", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "from", " typing", " import", " List", ",", " Optional", "\n"], "logprobs": [-0.003026787657290697, -1.0277326107025146, -2.3841855067985307e-07, -1.311301275563892e-06, -0.00010573305189609528, -0.0002557904226705432, -0.08705959469079971, -1.3548097610473633, -2.031735897064209, -0.0019330164650455117, -0.5917989611625671, -1.3818718194961548, -1.3362360000610352, -0.29550039768218994], "finish_reason": "stop"}], "metrics": {"energy": 191.06098924255366, "energy_per_token": 1.481092939864757, "time": 7.571529, "time_per_token": 0.05869402325581395}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError('n_sentences must be non-negative')", "tokens": [" Value", "Error", "('", "n", "_", "sent", "ences", " must", " be", " non", "-", "negative", "')", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -1.833234190940857, -0.3409927189350128, -0.011204065755009651, -0.004807342309504747, -0.0011616155970841646, -0.11312537640333176, -1.1907073259353638, -0.2873082160949707, -0.005076020490378141, -0.0007277462864294648, -0.30078157782554626, -0.0014093714999035], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.44284728169441223, -0.11252370476722717, -0.05135074630379677, -0.002161906100809574], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary must not be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " must", " not", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012729407753795385, -3.0636318115284666e-05, -0.0028241295367479324, -0.0015323336701840162, -0.8724680542945862, -0.005567401647567749, -0.0028254371136426926, -1.5345652103424072, -0.13850124180316925, -0.00014900050882715732, -0.0058466605842113495, -0.016507359221577644, -0.0009242791566066444, -0.00014482879487331957, -0.0005684667266905308], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04019966349005699, -0.011122488416731358], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0013642538106068969, -0.0015072186943143606, -6.854299135738984e-05, -0.013660870492458344, -1.311301275563892e-06, -7.390948667307384e-06, -0.0003589939442463219, -0.0003064401389565319, -0.005114804022014141], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7863726019859314, -0.005137219093739986], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.004723106045275927, -0.1593901365995407, -8.368142152903602e-05, -4.0531076592742465e-06, -0.0017281135078519583, -0.003868834814056754], "finish_reason": "stop"}, {"text": " fr\"\\b({re.escape(word).strip(' _().,!@?'))\"", "tokens": [" fr", "\"", "\\", "b", "({", "re", ".", "escape", "(", "word", ")", ".", "strip", "('", " _", "()", ".", ",", "!", "@", "?", "'))", "\"", "\n"], "logprobs": [-1.313228964805603, -0.2359292060136795, -0.1815503090620041, -0.07112068682909012, -1.9486956596374512, -1.1000620126724243, -2.6225699912174605e-05, -0.023343276232481003, -0.005240750499069691, -0.002758747199550271, -0.4143892228603363, -0.3454166352748871, -2.9165637493133545, -1.174130916595459, -3.3822503089904785, -2.847785472869873, -3.0650124549865723, -0.9380823969841003, -1.9697364568710327, -2.754246473312378, -3.477606773376465, -0.9645565748214722, -0.9666470289230347, -0.12398490309715271], "finish_reason": "stop"}, {"text": " pattern.sub(r\"\\1_\\2\", sentence)", "tokens": [" pattern", ".", "sub", "(", "r", "\"", "\\", "1", "_\\", "2", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.19663681089878082, -1.3351351299206726e-05, -0.0002361257211305201, -0.18093274533748627, -2.383073329925537, -0.09404893219470978, -0.5120577812194824, -0.30965906381607056, -1.0455045700073242, -0.05458977445960045, -0.05689171329140663, -0.0074781011790037155, -0.0003137096355203539, -0.0409691147506237, -0.023658480495214462], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.806619057897478e-05, -0.00027771908207796514, -0.0008200620068237185, -0.307630717754364, -0.0010100268991664052], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>import random", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "import", " random", "\n"], "logprobs": [-0.0033069944474846125, -1.1770808696746826, -2.3841855067985307e-07, -1.5497195136049413e-06, -6.97350042173639e-05, -0.00026675479602999985, -0.08758362382650375, -0.8555352091789246, -1.209218978881836, -0.01963464915752411], "finish_reason": "stop"}], "metrics": {"energy": 178.71677305030812, "energy_per_token": 1.5540588960896358, "time": 7.1567435, "time_per_token": 0.06223255217391305}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences cannot be negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " cannot", " be", " negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -2.691460132598877, -0.00051115796668455, -0.016786392778158188, -0.6225800514221191, -0.00013326710904948413, -0.0034451675601303577], "finish_reason": "stop"}, {"text": " len(vocabulary) == 0:", "tokens": [" len", "(", "voc", "abulary", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.0902801752090454, -0.00011634149996098131, -0.008143436163663864, -0.0007859955076128244, -0.0002256377338198945, -0.2377132773399353, -0.00010835537250386551, -5.769562994828448e-05, -0.001053255284205079, -0.0011826909612864256], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012316268403083086, -3.182837463100441e-05, -0.0031977968756109476, -0.0013652060879394412, -1.7281413078308105, -0.005061669275164604, -0.3211278021335602, -6.496695277746767e-05, -0.017435140907764435, -0.026747040450572968, -0.0006404255982488394, -6.5205356804654e-05, -0.00037889453233219683], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04163243994116783, -0.010810382664203644], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0016856284346431494, -0.0013721107970923185, -7.533743337262422e-05, -0.0155647499486804, -1.4305104514278355e-06, -7.867782187531702e-06, -0.000440262199845165, -0.00035041390219703317, -0.004973895847797394], "finish_reason": "stop"}, {"text": " random.sample(vocabulary, 10)", "tokens": [" random", ".", "sample", "(", "voc", "abulary", ",", " ", "1", "0", ")", "\n"], "logprobs": [-2.3050992488861084, -0.05101696401834488, -0.4334559440612793, -0.0012473430251702666, -0.030299680307507515, -9.905801562126726e-05, -0.0020469920709729195, -0.20635201036930084, -0.010720400139689445, -0.0026624491438269615, -0.003391349921002984, -0.07033142447471619], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.005931513383984566, -0.149323508143425, -6.782778655178845e-05, -3.4570634852570947e-06, -0.0017742858035489917, -0.003911227453500032], "finish_reason": "stop"}, {"text": " re.compile(r'\\s*' + word + r'\\s*')", "tokens": [" re", ".", "compile", "(", "r", "'\\", "s", "*", "'", " +", " word", " +", " r", "'\\", "s", "*", "')", "\n"], "logprobs": [-1.2857890129089355, -9.298280929215252e-06, -0.275180459022522, -0.02441319264471531, -0.6358174681663513, -0.6461346745491028, -3.017026662826538, -2.632328510284424, -0.19386491179466248, -0.05316335707902908, -0.9292551279067993, -0.11629387736320496, -0.03722284361720085, -0.08931489288806915, -0.02535528875887394, -0.07808521389961243, -0.06509006023406982, -0.04083362966775894], "finish_reason": "stop"}, {"text": " re.sub(pattern, \"_\" * len(word), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " \"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-1.8783068656921387, -5.495397272170521e-05, -0.00039915222441777587, -0.00044764988706447184, -0.017442403361201286, -0.001053850632160902, -1.2717593908309937, -0.018044479191303253, -0.003442197572439909, -1.0793836116790771, -0.04180612042546272, -8.964136941358447e-05, -0.013637233525514603, -0.010647039860486984, -0.007932469248771667, -0.00011085849109804258, -0.0691063180565834, -0.005659983027726412], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.544376083184034e-05, -0.0003231241717003286, -0.0009566736407577991, -0.32241567969322205, -0.0008761619683355093], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.0035455478355288506, -0.5947250723838806], "finish_reason": "stop"}], "metrics": {"energy": 175.223879190445, "energy_per_token": 1.4849481287325847, "time": 7.1615744, "time_per_token": 0.060691308474576273}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid number of sentences. Must not be negative.\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " number", " of", " sentences", ".", " Must", " not", " be", " negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -3.259049892425537, -0.6247689127922058, -0.0033608165103942156, -0.00931358803063631, -1.2611523866653442, -0.7329657673835754, -0.295889675617218, -0.0002112165529979393, -0.009502537548542023, -0.031951554119586945, -0.003423308255150914, -0.0001370812824461609, -0.0016327871708199382], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -0.932167649269104, -0.004550459329038858, -0.002964865416288376, -0.36358270049095154, -5.876845170860179e-05, -0.008059244602918625, -0.01908838376402855, -0.001660279231145978, -0.00011443436960689723, -0.0004698126285802573], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03919752314686775, -0.012166455388069153], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001869717612862587, -0.0014418693026527762, -7.295342220459133e-05, -0.01323380321264267, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0005062728887423873, -0.00034254882484674454, -0.005028102546930313], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7961748242378235, -0.004113071598112583], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.006462034769356251, -0.1910974085330963, -8.34430247778073e-05, -3.6954811548639555e-06, -0.0016396900173276663, -0.0038463911041617393], "finish_reason": "stop"}, {"text": " re.escape(word).replace(r\"\\w\", \".*\")", "tokens": [" re", ".", "escape", "(", "word", ")", ".", "replace", "(", "r", "\"", "\\", "w", "\"", ",", " \"", ".", "*", "\"", ")", "\n"], "logprobs": [-1.047468900680542, -6.318072337307967e-06, -2.0326168537139893, -0.00972580537199974, -0.03032917156815529, -0.21746012568473816, -0.7586477398872375, -0.02373065985739231, -0.11390572786331177, -1.0626310110092163, -0.5035242438316345, -0.47908860445022583, -1.3133447170257568, -0.4005059599876404, -6.41325386823155e-05, -0.6171369552612305, -0.8642866611480713, -0.6701884269714355, -0.3431989252567291, -0.0009070096421055496, -0.3462952673435211], "finish_reason": "stop"}, {"text": " re.sub(pattern, '_'.join(word.lower().split()), sentence)", "tokens": [" re", ".", "sub", "(", "pattern", ",", " '_", "'", ".", "join", "(", "word", ".", "lower", "()", ".", "split", "())", ",", " sentence", ")", "\n"], "logprobs": [-1.698679804801941, -5.864924969500862e-05, -0.0005466635921038687, -0.00045015214709565043, -0.019643649458885193, -0.0008817598572932184, -2.4777612686157227, -0.002107067732140422, -0.7577694654464722, -0.0037975830491632223, -0.03193042427301407, -0.2798888683319092, -0.05557571351528168, -1.1397628784179688, -0.018718736246228218, -0.003096668515354395, -0.004912924487143755, -0.10370265692472458, -0.00814863946288824, -0.0006672301678918302, -0.07081010192632675, -0.00842635054141283], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.068861305015162e-05, -0.00029416524921543896, -0.0009191579301841557, -0.2906584143638611, -0.0010987442219629884], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.003735946025699377, -0.6285303831100464], "finish_reason": "stop"}], "metrics": {"energy": 176.78481328964227, "energy_per_token": 1.5644673742446218, "time": 6.9571085, "time_per_token": 0.061567331858407084}}
{"outputs": [{"text": " not target_words or n_sentences < 0:", "tokens": [" not", " target", "_", "words", " or", " n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-1.8166577816009521, -1.1407411098480225, -1.6093124941107817e-05, -2.264974000354414e-06, -0.4630333185195923, -1.0368361473083496, -3.2066785934148356e-05, -1.9073468138230965e-06, -2.622600959512056e-06, -0.07934815436601639, -0.0006473353132605553, -0.020633690059185028, -0.3391759693622589, -0.012481787241995335], "finish_reason": "stop"}, {"text": " ValueError(\"Negative number of sentences is invalid\")", "tokens": [" Value", "Error", "(", "\"", "N", "egative", " number", " of", " sentences", " is", " invalid", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -2.7433695793151855, -0.11117614060640335, -0.8554465770721436, -0.017245575785636902, -0.009316304698586464, -0.7660596370697021, -1.6398200988769531, -1.3524954319000244, -0.0002746204845607281, -0.0046161990612745285], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.4482112228870392, -0.10660240799188614, -0.04323340579867363, -0.00222375919111073], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary list cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " list", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012485336046665907, -3.313963316031732e-05, -0.002356730168685317, -0.0020048771984875202, -1.577410340309143, -0.005176948849111795, -2.9979217052459717, -0.2275078445672989, -0.0003873551613651216, -0.0011302995262667537, -0.055510081350803375, -0.001378777320496738, -9.989239333663136e-05, -0.0003325386205688119], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.043042734265327454, -0.011964462697505951], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001606484642252326, -0.001510432455688715, -8.21318244561553e-05, -0.011813324876129627, -1.5497195136049413e-06, -9.298280929215252e-06, -0.00042441420373506844, -0.0003551805857568979, -0.006052262149751186], "finish_reason": "stop"}, {"text": " [random.choice(vocabulary) for _ in range(10)]", "tokens": [" [", "random", ".", "choice", "(", "voc", "abulary", ")", " for", " _", " in", " range", "(", "1", "0", ")]", "\n"], "logprobs": [-2.4460625648498535, -0.22018201649188995, -0.0038254905957728624, -0.098687544465065, -0.001104817260056734, -0.0021513192914426327, -0.00021038226259406656, -0.13181346654891968, -0.10017908364534378, -0.016223790124058723, -0.0002227773511549458, -0.004541677888482809, -0.0002449450839776546, -0.71445232629776, -0.010942570865154266, -0.0031068886164575815, -0.0355481393635273], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.004749208223074675, -0.15383905172348022, -8.225102646974847e-05, -3.6954811548639555e-06, -0.0019160023657605052, -0.0034705903381109238], "finish_reason": "stop"}, {"text": " re.compile(r\"\\b{}\\b\".format(re.escape(word)), re.IGNORECASE)", "tokens": [" re", ".", "compile", "(", "r", "\"", "\\", "b", "{}\\", "b", "\"", ".", "format", "(", "re", ".", "escape", "(", "word", "))", ",", " re", ".", "IGN", "ORE", "C", "ASE", ")", "\n"], "logprobs": [-1.1712337732315063, -6.9141146923357155e-06, -0.2287740856409073, -0.018331045284867287, -0.568229079246521, -0.9360961318016052, -0.21469983458518982, -0.13603024184703827, -0.42052701115608215, -0.0036765618715435266, -0.004720140248537064, -0.004479493014514446, -0.0001411338453181088, -0.0017871374730020761, -0.533549427986145, -0.000125281119835563, -0.004732479341328144, -0.00017998983094003052, -0.0023652929812669754, -1.903728723526001, -0.09468285739421844, -0.057913638651371, -4.076874756719917e-05, -0.10621464252471924, -4.565611743601039e-05, -5.245195097813848e-06, -0.00021741411183029413, -0.004667577799409628, -0.006874954793602228], "finish_reason": "stop"}, {"text": " pattern.sub('_', sentence)", "tokens": [" pattern", ".", "sub", "('", "_", "'", ",", " sentence", ")", "\n"], "logprobs": [-0.1655425727367401, -1.156323378381785e-05, -0.00027616979787126184, -1.7383630275726318, -0.021987592801451683, -0.0032250082585960627, -0.82670658826828, -0.0003718638326972723, -0.14409753680229187, -0.019859639927744865], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-7.1403817855753e-05, -0.0003885467885993421, -0.0010342017048969865, -1.3942382335662842, -0.047100573778152466, -0.017103437334299088, -0.0030288081616163254], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.002801305614411831, -0.7041441202163696], "finish_reason": "stop"}], "metrics": {"energy": 162.95861899185175, "energy_per_token": 1.2731142108738418, "time": 7.5878143, "time_per_token": 0.05927979921875}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError('n_sentences must not be negative')", "tokens": [" Value", "Error", "('", "n", "_", "sent", "ences", " must", " not", " be", " negative", "')", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -1.833234190940857, -0.3409927189350128, -0.011204065755009651, -0.004807342309504747, -0.0011616155970841646, -0.11312537640333176, -0.36304008960723877, -0.00012659224739763886, -0.0090872747823596, -0.26967623829841614, -0.0012543675256893039], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.44284728169441223, -0.11252370476722717, -0.05135074630379677, -0.002161906100809574], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.0012729407753795385, -3.0636318115284666e-05, -0.0028241295367479324, -0.0015323336701840162, -0.8724680542945862, -0.005567401647567749, -0.0028254371136426926, -0.34495383501052856, -5.6622808187967166e-05, -0.007984505966305733, -0.018918784335255623, -0.0012506766943261027, -0.00010489867418073118, -0.0005684667266905308], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.0385134220123291, -0.01492453645914793], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.001630644896067679, -0.001423656358383596, -6.985420623095706e-05, -0.013270623981952667, -1.4305104514278355e-06, -7.629365427419543e-06, -0.0005094899097457528, -0.00029345019720494747, -0.004977335687726736], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7969274520874023, -0.0046386257745325565], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.007508391048759222, -0.15688857436180115, -6.246371776796877e-05, -3.814689989667386e-06, -0.001754293916746974, -0.003649481339380145], "finish_reason": "stop"}, {"text": " r\"\\b{}\\b\".format(word)", "tokens": [" r", "\"", "\\", "b", "{}\\", "b", "\"", ".", "format", "(", "word", ")", "\n"], "logprobs": [-1.0819638967514038, -0.7391780614852905, -0.2682007849216461, -0.12283237278461456, -0.5921018123626709, -0.0034129724372178316, -0.004941512830555439, -0.0043345787562429905, -0.0002461368858348578, -0.0015397133538499475, -0.9820314645767212, -0.19043968617916107, -0.061713796108961105], "finish_reason": "stop"}, {"text": " pattern.sub(\"_\", sentence)", "tokens": [" pattern", ".", "sub", "(", "\"", "_", "\"", ",", " sentence", ")", "\n"], "logprobs": [-0.16889865696430206, -1.2874520507466514e-05, -0.00020811776630580425, -0.18454912304878235, -0.4652419090270996, -0.021891029551625252, -0.006971558555960655, -1.3140813112258911, -0.00032050241134129465, -0.1452665477991104, -0.022895975038409233], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-7.390703103737906e-05, -0.0002926159941125661, -0.0008322112844325602, -0.34082120656967163, -0.000969297660049051], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.0032541200052946806], "finish_reason": "stop"}], "metrics": {"energy": 120.75817879676819, "energy_per_token": 1.356833469626609, "time": 5.901, "time_per_token": 0.06630337078651685}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be non-negative.\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " non", "-", "negative", ".", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -0.27790212631225586, -0.003457641461864114, -0.0005874100024811924, -1.1418726444244385, -0.0109858438372612, -0.0001501924270996824, -0.0030898945406079292], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.7040256261825562, -0.005056924652308226], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00571178225800395, -0.16880954802036285, -7.939023635117337e-05, -3.2186455882765586e-06, -0.0018582948250696063, -0.0032549516763538122], "finish_reason": "stop"}, {"text": " r'\\b({})\\b'.format(re.escape(word))", "tokens": [" r", "'\\", "b", "({", "})\\", "b", "'", ".", "format", "(", "re", ".", "escape", "(", "word", "))", "\n"], "logprobs": [-1.1711390018463135, -1.1692934036254883, -0.08218906819820404, -3.6359081268310547, -0.2542804181575775, -0.007402373012155294, -0.006664312444627285, -0.0008747326792217791, -0.00030310326837934554, -0.01030340138822794, -0.28463244438171387, -1.2397689715726301e-05, -0.027847757562994957, -0.0012006701435893774, -0.002787634963169694, -0.14427298307418823, -0.038332629948854446], "finish_reason": "stop"}, {"text": " pattern.sub(word.replace(\" \", \"_\"), sentence)", "tokens": [" pattern", ".", "sub", "(", "word", ".", "replace", "(", "\"", " \"", ",", " \"", "_", "\"", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.19028240442276, -1.3828182090946939e-05, -0.0002157455455744639, -0.19226393103599548, -2.1095025539398193, -0.011871285736560822, -0.008453065529465675, -0.19570830464363098, -0.0014155616518110037, -0.010429758578538895, -0.0006108802044764161, -0.01109596248716116, -0.004497175570577383, -0.00011908298620255664, -0.0005343916127458215, -0.0211639404296875, -0.0001591317413840443, -0.04476843774318695, -0.003351786872372031], "finish_reason": "stop"}, {"text": "append(sentence.lower())", "tokens": ["append", "(", "sentence", ".", "lower", "())", "\n"], "logprobs": [-7.199982064776123e-05, -0.0003256267518736422, -0.0013142528478056192, -1.2875406742095947, -0.0621647983789444, -0.015857072547078133, -0.0023865809198468924], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences", "\n"], "logprobs": [-0.003155611688271165, -0.6746913194656372], "finish_reason": "stop"}], "metrics": {"energy": 165.93454217529288, "energy_per_token": 1.5364309460675267, "time": 6.5255995, "time_per_token": 0.06042221759259259}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be non-negative\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " non", "-", "negative", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -0.27790212631225586, -0.003457641461864114, -0.0005874100024811924, -0.5169031620025635, -9.762764238985255e-05, -0.002711312612518668], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "voc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -1.7026944160461426, -0.005073648411780596, -0.2776774764060974, -6.05564855504781e-05, -0.018963584676384926, -0.026602184399962425, -0.0006598440813831985, -7.176141662057489e-05, -0.00038044367101974785], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.04047033190727234, -0.012465893290936947], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019093393348157406, -0.001392824575304985, -7.247662142617628e-05, -0.014335854910314083, -1.311301275563892e-06, -7.867782187531702e-06, -0.00041416651220060885, -0.00033802041434682906, -0.005233160685747862], "finish_reason": "stop"}, {"text": " \"_\".join([random.choice(vocabulary) for _ in range(random.randrange(5, 10))])", "tokens": [" \"", "_", "\"", ".", "join", "([", "random", ".", "choice", "(", "voc", "abulary", ")", " for", " _", " in", " range", "(", "random", ".", "rand", "range", "(", "5", ",", " ", "1", "0", "))", "])", "\n"], "logprobs": [-2.0466930866241455, -2.577031373977661, -0.12004978209733963, -0.10263118147850037, -9.989239333663136e-05, -2.117223024368286, -0.1486554890871048, -0.002451511798426509, -0.0548568032681942, -0.0014925779541954398, -0.005416953936219215, -0.0003953390696551651, -0.009959882125258446, -0.06501466035842896, -0.026404015719890594, -0.00045158201828598976, -0.009177877567708492, -0.000426439888542518, -1.512670874595642, -0.00029345019720494747, -0.1516326367855072, -2.8977556228637695, -0.0017923733685165644, -2.088372230529785, -0.026242388412356377, -0.04835700988769531, -0.2624860107898712, -0.760036826133728, -0.019176563248038292, -0.004233208950608969, -0.053518570959568024], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.005007701460272074, -0.14833621680736542, -7.581423415103927e-05, -3.4570634852570947e-06, -0.0019750152714550495, -0.004650135524570942], "finish_reason": "stop"}, {"text": " re.sub(r\"[\\s]+\", r\"\\1_\\2\", word)", "tokens": [" re", ".", "sub", "(", "r", "\"", "[\\", "s", "]+", "\"", ",", " r", "\"", "\\", "1", "_\\", "2", "\"", ",", " word", ")", "\n"], "logprobs": [-1.1848375797271729, -8.702239938429557e-06, -2.4022343158721924, -0.1452876776456833, -0.1610228568315506, -0.9392836093902588, -3.0468170642852783, -0.5651789903640747, -0.6719506978988647, -0.015080371871590614, -0.0012142435880377889, -0.7378817796707153, -0.006506212521344423, -2.102048873901367, -1.168278455734253, -2.6075944900512695, -0.2808306813240051, -0.2902669906616211, -0.0007089247228577733, -0.03662439063191414, -0.21027809381484985, -0.09567079693078995], "finish_reason": "stop"}, {"text": " pattern.sub('_'*len(word), sentence)", "tokens": [" pattern", ".", "sub", "('", "_", "'", "*", "len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.18606777489185333, -1.2636104656849056e-05, -0.0001426833332516253, -1.8850791454315186, -0.022358249872922897, -0.0032088477164506912, -2.383178949356079, -0.00937358383089304, -0.00011944057769142091, -0.009263747371733189, -0.0172743983566761, -0.0018319981172680855, -0.000910225382540375, -0.11260252445936203, -0.006648325826972723], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-8.082063141046092e-05, -0.0003002431185450405, -0.0010493254521861672, -0.38141265511512756, -0.0010405131615698338], "finish_reason": "stop"}, {"text": " sentences", "tokens": [" sentences"], "logprobs": [-0.003189360024407506], "finish_reason": "stop"}], "metrics": {"energy": 199.44666711997985, "energy_per_token": 1.499599000902104, "time": 7.7802057, "time_per_token": 0.05849778721804511}}
{"outputs": [{"text": " n_sentences < 0:", "tokens": [" n", "_", "sent", "ences", " <", " ", "0", ":", "\n"], "logprobs": [-0.2669140696525574, -1.7046782886609435e-05, -1.3232143828645349e-05, -4.529942543740617e-06, -0.03218187019228935, -0.0009956170106306672, -0.022344842553138733, -0.021326040849089622, -0.010631470941007137], "finish_reason": "stop"}, {"text": " ValueError(\"n_sentences must be positive\")", "tokens": [" Value", "Error", "(", "\"", "n", "_", "sent", "ences", " must", " be", " positive", "\"", ")", "\n"], "logprobs": [-0.0008802115335129201, -6.437280717364047e-06, -0.18433132767677307, -0.12818357348442078, -0.33449113368988037, -0.008700794540345669, -0.004331611096858978, -0.0007546676206402481, -0.096281498670578, -1.099117636680603, -2.6536078453063965, -0.5876450538635254, -0.000205018965061754, -0.004286625422537327], "finish_reason": "stop"}, {"text": " not vocabulary:", "tokens": [" not", " vocabulary", ":", "\n"], "logprobs": [-0.41781389713287354, -0.11262106150388718, -0.05161592364311218, -0.002118130913004279], "finish_reason": "stop"}, {"text": " ValueError(\"Vocabulary cannot be empty.\")", "tokens": [" Value", "Error", "(", "\"", "V", "oc", "abulary", " cannot", " be", " empty", ".", "\"", ")", "\n"], "logprobs": [-0.001149589428678155, -3.0874729418428615e-05, -0.002614177530631423, -0.0016553997993469238, -0.8475937843322754, -0.005521522834897041, -0.002540695946663618, -0.31171345710754395, -5.328513361746445e-05, -0.008179854601621628, -0.017750337719917297, -0.001023364719003439, -0.00010322991875000298, -0.0005034133209846914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.03925368934869766, -0.01292164996266365], "finish_reason": "stop"}, {"text": " in range(n_sentences):", "tokens": [" in", " range", "(", "n", "_", "sent", "ences", "):", "\n"], "logprobs": [-0.0019155264599248767, -0.001312348060309887, -9.07141511561349e-05, -0.011770323850214481, -1.6689286894688848e-06, -5.960446742392378e-06, -0.00035279724397696555, -0.0003588747640606016, -0.005245493724942207], "finish_reason": "stop"}, {"text": " ''", "tokens": [" ''", "\n"], "logprobs": [-3.215240955352783, -0.09451248496770859], "finish_reason": "stop"}, {"text": " in target_words:", "tokens": [" in", " target", "_", "words", ":", "\n"], "logprobs": [-0.00571178225800395, -0.16880954802036285, -7.939023635117337e-05, -3.2186455882765586e-06, -0.0018582948250696063, -0.0032549516763538122], "finish_reason": "stop"}, {"text": " r\"(?:^| )\" + word + r\"(?:$| )\"", "tokens": [" r", "\"", "(", "?", ":", "^", "|", " )", "\"", " +", " word", " +", " r", "\"", "(", "?", ":$", "|", " )", "\"", "\n"], "logprobs": [-1.1711390018463135, -0.7316502928733826, -2.194401979446411, -0.2949278950691223, -2.7597575187683105, -0.18151681125164032, -0.8348480463027954, -1.1451129913330078, -0.7340707778930664, -0.02030339650809765, -1.4568372964859009, -0.17327553033828735, -0.05972473323345184, -0.0006756883230991662, -0.06778569519519806, -0.0072642723098397255, -0.10565824061632156, -0.01567835547029972, -0.032603923231363297, -0.0007996936910785735, -0.09594852477312088], "finish_reason": "stop"}, {"text": " pattern.sub(r\"_\" * len(word), sentence)", "tokens": [" pattern", ".", "sub", "(", "r", "\"", "_", "\"", " *", " len", "(", "word", ")", ",", " sentence", ")", "\n"], "logprobs": [-0.19028240442276, -1.3828182090946939e-05, -0.0002157455455744639, -0.19226393103599548, -2.3675782680511475, -0.10069940984249115, -2.753213882446289, -0.006531320512294769, -0.6536485552787781, -0.028475582599639893, -0.00019691436318680644, -0.00965520553290844, -0.00937606394290924, -0.00449741305783391, -0.00011002412065863609, -0.0775027871131897, -0.005580086261034012], "finish_reason": "stop"}, {"text": "append(sentence)", "tokens": ["append", "(", "sentence", ")", "\n"], "logprobs": [-6.639736966462806e-05, -0.00032443503732793033, -0.0008793777669779956, -0.30861157178878784, -0.0009947833605110645], "finish_reason": "stop"}, {"text": " sentences<|endoftext|>from typing import Tuple, Any", "tokens": [" sentences", "<", "|", "end", "of", "text", "|>", "from", " typing", " import", " T", "uple", ",", " Any", "\n"], "logprobs": [-0.003434000303968787, -1.360771894454956, -2.3841855067985307e-07, -1.311301275563892e-06, -7.676783570786938e-05, -0.00024089295766316354, -0.07761861383914948, -1.3207519054412842, -2.1205313205718994, -0.0018582948250696063, -3.483299493789673, -0.0004563482361845672, -0.8536450266838074, -2.691157817840576, -0.588739812374115], "finish_reason": "stop"}], "metrics": {"energy": 146.15148282623292, "energy_per_token": 1.2385718883579062, "time": 7.160383, "time_per_token": 0.06068121186440678}}
