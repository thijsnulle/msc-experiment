{"outputs": [{"text": "try:\n        # Load the text data from the CSV file\n        text_data = pd.read_csv(file_path)\n        # Extract the text column from the CSV file\n        text = text_data['Text'].values\n    except Exception as e:\n        print(\"Error reading the CSV file:\", e)\n        return None\n\n    # Check if the text data is empty\n    if len(text) == 0:\n        print(\"No valid text data found.\")\n        return None\n\n    # Remove stop words from the text data\n    cleaned_data = remove_stop_words(text)\n\n    # Check if the cleaned data is empty\n    if len(cleaned_data) == 0:\n        print(\"No valid text data after removing stop words.\")\n        return None\n\n    # Perform text vectorization\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorizer.fit(cleaned_data)\n\n    # Retrieve the most common words\n    words = vectorizer.vocabulary_\n\n    # Sort the words by", "tokens": ["try", ":", "\n", "        ", "#", " Load", " the", " text", " data", " from", " the", " CS", "V", " file", "\n", "        ", "text", "_", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "#", " Ext", "ract", " the", " text", " column", " from", " the", " CS", "V", " file", "\n", "        ", "text", " =", " text", "_", "data", "['", "Text", "']", ".", "values", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "\"", "Error", " reading", " the", " CS", "V", " file", ":\"", ",", " e", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " the", " text", " data", " is", " empty", "\n", "    ", "if", " len", "(", "text", ")", " ==", " ", "0", ":", "\n", "        ", "print", "(", "\"", "No", " valid", " text", " data", " found", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Remove", " stop", " words", " from", " the", " text", " data", "\n", "    ", "cleaned", "_", "data", " =", " remove", "_", "stop", "_", "words", "(", "text", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " cleaned", " data", " is", " empty", "\n", "    ", "if", " len", "(", "cleaned", "_", "data", ")", " ==", " ", "0", ":", "\n", "        ", "print", "(", "\"", "No", " valid", " text", " data", " after", " removing", " stop", " words", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "cleaned", "_", "data", ")", "\n", "\n", "    ", "#", " Ret", "rieve", " the", " most", " common", " words", "\n", "    ", "words", " =", " vector", "izer", ".", "voc", "abulary", "_", "\n", "\n", "    ", "#", " Sort", " the", " words", " by"], "logprobs": [-1.8257757425308228, -0.0002734287118073553, -0.006929413881152868, -0.011201943270862103, -0.43119266629219055, -0.8371191620826721, -0.4224086105823517, -1.6890826225280762, -0.20193880796432495, -0.1012335792183876, -0.17673936486244202, -0.08748456835746765, -6.437280717364047e-06, -0.04450029507279396, -0.1464705467224121, -0.001106127048842609, -2.082057476043701, -0.07289773225784302, -0.19272954761981964, -0.014651913195848465, -0.06393668055534363, -5.221230458118953e-05, -0.00033766290289349854, -0.0007578838267363608, -2.47952248173533e-05, -0.0009659630013629794, -0.0036406919825822115, -0.0002469711471349001, -1.4305104514278355e-06, -0.5659393072128296, -0.14612308144569397, -0.9315553307533264, -1.561576247215271, -0.7935472130775452, -0.0106620192527771, -0.042234305292367935, -0.7618091702461243, -0.257529616355896, -0.8276036381721497, -0.005223199259489775, -2.1889798641204834, -9.179073458653875e-06, -1.539689540863037, -0.042540181428194046, -0.0010942192748188972, -0.13617444038391113, -1.0126268863677979, -0.02324509806931019, -2.169585604860913e-05, 0.0, -1.8142578601837158, -0.032715264707803726, -0.0004817279113922268, -1.9177684783935547, -1.3574187755584717, -0.11703401803970337, -1.327368974685669, -0.006695218849927187, -0.8590826392173767, -0.055584169924259186, -0.08540727198123932, -0.0031364792957901955, -0.0034824698232114315, -0.0007327494095079601, -0.2798008322715759, -0.015293123200535774, -1.6823670864105225, -0.24351081252098083, -0.763959527015686, -0.45513373613357544, -0.3036227822303772, -2.1576648578047752e-05, -0.010972048155963421, -0.2787189781665802, -0.0026242840103805065, -0.7651228308677673, -0.00272843218408525, -0.0010451575508341193, -0.027919519692659378, -0.02965494804084301, -0.7015508413314819, -0.00924142450094223, -0.029459698125720024, -0.000947622349485755, -0.3130930960178375, -1.3223809003829956, -0.16441908478736877, -0.13815243542194366, -1.0229170322418213, -0.636555552482605, -0.061763446778059006, -0.27363988757133484, -0.3555343449115753, -5.1973900554003194e-05, -0.0023934785276651382, -1.9315624237060547, -2.95634672511369e-05, -0.0006999903125688434, -0.016532335430383682, -0.020912274718284607, -0.00015209948469419032, -0.00011979816190432757, -0.11120941489934921, -0.00039843725971877575, -0.00024148885859176517, -0.010589834302663803, -0.018189294263720512, -0.004907586146146059, -1.0500938892364502, -2.233489513397217, -0.3375413715839386, -0.17117632925510406, -0.18613694608211517, -1.6027963161468506, -0.18318797647953033, -0.00013851160474587232, -0.00010227633902104571, -0.004172904882580042, -0.003413091180846095, -0.002510849852114916, -0.0005116345710121095, -0.010978886857628822, -0.0004681444843299687, -0.11952716112136841, -2.823486804962158, -0.6951943039894104, -0.5789787173271179, -0.4910499155521393, -0.045253459364175797, -0.1355021744966507, -0.5123142004013062, -0.10040747374296188, -0.0007853999268263578, -2.031644344329834, -0.0015211451100185513, -2.7352657318115234, -0.003824540413916111, -2.303816318511963, -0.0004943578969687223, -0.0077192108146846294, -0.34200870990753174, -0.0019224273273721337, -0.021176662296056747, -0.011606430634856224, -0.4047771096229553, -0.0015397133538499475, -0.21208591759204865, -0.0002549561613705009, -0.02425927110016346, -0.21764464676380157, -0.0031953013967722654, -0.5070746541023254, -0.08665914833545685, -0.05864182114601135, -0.22399406135082245, -0.12875567376613617, -0.6742891073226929, -2.074220174108632e-05, -0.003461918095126748, -0.07329951971769333, -0.0002090712368953973, -0.0018970841774716973, -5.960462772236497e-07, -1.3947389561508317e-05, -0.03380390256643295, -0.003988764248788357, -0.00011860620725201443, -0.00015686711412854493, -0.014664013870060444, -0.00020287363440729678, -7.86750388215296e-05, -0.0044417534954845905, -0.0005147324409335852, -0.0027430548798292875, -0.6350300908088684, -0.107023224234581, -1.0675116777420044, -0.14370401203632355, -2.6531331539154053, -0.16631369292736053, -0.003720506327226758, -0.0448206402361393, -0.013579023070633411, -0.011036423966288567, -0.0003333727945573628, -3.45700973412022e-05, -0.0010904086520895362, -0.0015708976425230503, -0.0005573864909820259, -0.00014482879487331957, -0.00649211835116148, -0.0003003622987307608, -0.04106099531054497, -0.5128975510597229, -0.10160776972770691, -0.005938623566180468, -0.0002115741081070155, -0.9086024165153503, -0.00020203932945150882, -0.3201434314250946, -0.1935102343559265, -0.0035727499052882195, -0.01171412505209446, -9.536738616588991e-07, -1.1920928244535389e-07, -0.1102977842092514, -0.491607666015625, -1.1920922133867862e-06, -2.7418097943154862e-06, -0.0048474413342773914, -0.12797372043132782, 0.0, -7.152531907195225e-06, -5.006777428206988e-06, 0.0, -1.1920928244535389e-07, -0.11358761787414551, -0.021693209186196327, -0.004233090206980705, -0.45857253670692444, -0.10021316260099411, -0.002393121598288417, -0.00031835734262131155, -0.2913891077041626, -0.08287203311920166, -8.344646857949556e-07, -2.7418097943154862e-06, -0.00725717144086957, -0.0026440205983817577, -0.9400313496589661, -0.0001525762490928173, -0.0435284785926342, -2.5047173500061035, -0.0015767297009006143, -0.06697440147399902, -1.0853208303451538, -0.13887368142604828, -0.07153095304965973, -0.4997405707836151, -6.937739817658439e-05, -3.1225264072418213, -0.29139184951782227, -0.17018285393714905, -2.5510462364763953e-05, -9.775113539944869e-06, -2.3773391246795654, -0.000310730334604159, -0.0001842805795604363, -0.08344333618879318, -2.8227696418762207, -0.000129691296024248, -0.054691132158041, -1.575500726699829, -0.14278288185596466, -0.06167042255401611, -0.4415718615055084], "finish_reason": "length"}], "metrics": {"energy": 1117.5878174066527, "energy_per_token": 4.365577411744737, "time": 29.101461, "time_per_token": 0.11367758203125}}
{"outputs": [{"text": "# Load the CSV file\n    df = pd.read_csv(file_path)\n    print(df)\n    # Select the Text column and convert it to a list\n    text = df['Text'].to_list()\n\n    # Create a CountVectorizer to perform text vectorization\n    vectorizer = CountVectorizer(\n        stop_words=STOP_WORDS,\n        binary=True,\n        lowercase=True,\n        token_pattern=r\"(?u)\\b[a-zA-Z]{1,}\\b\"\n    )\n\n    # Fit and transform the text data using the vectorizer\n    X = vectorizer.fit_transform(text)\n\n    # Retrieve the word counts for each feature\n    word_counts = X.sum(axis=0).tolist()[0]\n\n    # Retrieve the feature names (words)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Filter out words that are not in the feature names\n    filtered_words = [word for i, word in enumerate(feature_names) if word_counts", "tokens": ["#", " Load", " the", " CS", "V", " file", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "print", "(", "df", ")", "\n", "    ", "#", " Select", " the", " Text", " column", " and", " convert", " it", " to", " a", " list", "\n", "    ", "text", " =", " df", "['", "Text", "']", ".", "to", "_", "list", "()", "\n", "\n", "    ", "#", " Create", " a", " Count", "Vector", "izer", " to", " perform", " text", " vector", "ization", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "\n", "        ", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ",", "\n", "        ", "binary", "=", "True", ",", "\n", "        ", "low", "erc", "ase", "=", "True", ",", "\n", "        ", "token", "_", "pattern", "=", "r", "\"", "(", "?", "u", ")\\", "b", "[", "a", "-", "z", "A", "-", "Z", "]{", "1", ",", "}\\", "b", "\"", "\n", "    ", ")", "\n", "\n", "    ", "#", " Fit", " and", " transform", " the", " text", " data", " using", " the", " vector", "izer", "\n", "    ", "X", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", ")", "\n", "\n", "    ", "#", " Ret", "rieve", " the", " word", " counts", " for", " each", " feature", "\n", "    ", "word", "_", "counts", " =", " X", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]", "\n", "\n", "    ", "#", " Ret", "rieve", " the", " feature", " names", " (", "words", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Filter", " out", " words", " that", " are", " not", " in", " the", " feature", " names", "\n", "    ", "filtered", "_", "words", " =", " [", "word", " for", " i", ",", " word", " in", " enumerate", "(", "feature", "_", "names", ")", " if", " word", "_", "counts"], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -0.8012414574623108, -1.2993727978027891e-05, -0.17877359688282013, -0.9258261322975159, -0.0015437601832672954, -0.843621015548706, -0.011318638920783997, -0.006364552769809961, -2.4914430468925275e-05, -0.00011383838864276186, -0.00034528967808000743, -0.0001784403866622597, -0.0007649118197150528, -0.004031389020383358, -0.00011050090688513592, -2.7418097943154862e-06, -0.08068022131919861, -0.005973344668745995, -1.609012484550476, -2.7221813201904297, -0.045062147080898285, -0.7193349003791809, -0.30036216974258423, -0.022756384685635567, -0.8552477359771729, -0.325615793466568, -3.532027006149292, -0.08182796835899353, -3.559171199798584, -0.006277367472648621, -1.1253409385681152, -2.272440195083618, -0.4695966839790344, -0.04334813728928566, -0.2335202395915985, -0.17291779816150665, -0.5972124338150024, -0.0059007019735872746, -0.13093622028827667, -1.1969655752182007, -0.03176610544323921, -1.0000056028366089, -0.06765691190958023, -0.00019941726350225508, -0.01535229105502367, -2.614018440246582, -2.0861407392658293e-05, -0.006065532565116882, -0.0002627027570270002, -0.005447187460958958, -0.43627700209617615, -0.0014513921923935413, -0.054700158536434174, -1.8287214040756226, -0.3539133369922638, -0.704014778137207, -0.009403698146343231, -0.00017510310863144696, -2.105971336364746, -0.8434749245643616, -0.06667947769165039, -0.0045533073134720325, -5.400034933700226e-05, -0.4050705134868622, -0.0005455912905745208, -0.15867379307746887, -0.00021228920377325267, -0.00025900822947733104, -0.00019047829846385866, -2.0265558760002023e-06, -5.602820692729438e-06, -0.013586197048425674, -2.616703510284424, -0.029293354600667953, -0.3609774708747864, -1.1920922133867862e-06, -3.576278118089249e-07, -0.0027985714841634035, -0.02582484297454357, 0.0, -1.2516897186287679e-05, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.1500774621963501, -1.4066129922866821, -0.06344732642173767, -2.768336772918701, -0.005178965162485838, -0.049555715173482895, -0.32124194502830505, -0.40903785824775696, -0.25824883580207825, -1.2839765548706055, -0.0015069806249812245, -4.172316494077677e-06, -0.0012868703342974186, -0.26735323667526245, -0.19088074564933777, -0.00774760078638792, -0.21249699592590332, -0.9797319173812866, -0.0016074366867542267, -0.00016282663273159415, -0.31059980392456055, -0.03756895288825035, -1.0531883239746094, -0.8389484286308289, -0.0011447074357420206, -0.01604044809937477, -0.1340777575969696, -0.00144091690890491, -0.8059291839599609, -0.6734363436698914, -0.00021181246847845614, -0.0001627074379939586, -0.17270849645137787, -0.00012611546844709665, -0.014215397648513317, -1.727822184562683, -2.5728397369384766, -0.17181894183158875, -0.16929274797439575, -0.06287959218025208, -0.00914787407964468, -1.0351184606552124, -0.03241455927491188, -0.00018308870494365692, -0.011529364623129368, -0.187038391828537, -0.0004266782198101282, -0.011842070147395134, -0.5189893245697021, -0.6046659350395203, -0.0015400703996419907, -0.00796404667198658, -0.09668482095003128, -0.37758368253707886, -0.9565544724464417, -0.06665092706680298, -0.5572524070739746, -3.218599158572033e-05, -0.029439210891723633, -0.0004727914638351649, -1.830946445465088, -0.024089382961392403, -0.0019851280376315117, -8.344646857949556e-07, -2.002696055569686e-05, -0.0016959820641204715, -3.933898824470816e-06, -0.00021455370006151497, -0.0016451646806672215, -0.0009552444680593908, -0.0009713222389109433, -0.00951977726072073, -0.1830129772424698, -0.00034457468427717686, -0.017451774328947067, -2.3329010009765625, -0.0003494605771265924, -0.05032617226243019, -2.106693983078003, -0.6371801495552063, -2.4198434352874756, -0.17083774507045746, -1.6055612564086914, -0.30059245228767395, -9.297892393078655e-05, -0.47724518179893494, -0.00011753345461329445, -0.032082244753837585, -0.0018653151346370578, -0.07728973776102066, -2.312633478140924e-05, -0.05440114066004753, -0.0008779485360719264, -0.00017820201173890382, -4.5536911784438416e-05, -0.0003407612966839224, -0.001474127871915698, -0.03521617874503136, -1.5324801206588745, -1.0728830375228426e-06, -0.21416495740413666, -0.0018289043800905347, -0.00023231192608363926, -0.007357879541814327, -0.023402202874422073, -0.00020466140995267779, -0.003856841241940856, -0.7721659541130066, -0.00015186110977083445, -0.008258006535470486, -0.10124198347330093, -0.34483832120895386, -0.42930248379707336, -0.6296223998069763, -0.037228815257549286, -0.38798874616622925, -0.00012337400403339416, -0.5184252262115479, -2.90866428258596e-05, -0.002749474486336112, -0.00012540031457319856, -0.03199484944343567, -1.1920928244535389e-07, -1.2278481335670222e-05, -1.6569954823353328e-05, -1.1920928244535389e-07, -5.8412379075889476e-06, 0.0, -2.861018856492592e-06, -0.33814680576324463, -0.00010632903286023065, -0.0026935983914881945, -0.0008413827163167298, -0.015664508566260338, -0.0007323920144699514, -0.0091929966583848, -1.4112637042999268, -0.7458240389823914, -1.664344310760498, -0.4104559123516083, -0.20722059905529022, -2.231232166290283, -0.4492299258708954, -0.29663553833961487, -0.3719150722026825, -0.06650281697511673, -0.3262762129306793, -0.0002113357331836596, -1.1226359605789185, -0.0009716795175336301, -0.5290840864181519, -0.0049719978123903275, -0.10430546849966049, -0.6244617700576782, -0.0171186700463295, -0.99263596534729, -0.00021419614495243877, -0.0013606823049485683, -0.00016616393986623734, -0.004003368318080902, -4.23184028477408e-05, -0.06549432128667831, -9.536738616588991e-07, -2.145764938177308e-06, -0.0016230279579758644, -0.016126316040754318, -0.06859299540519714, -0.029257001355290413, -2.312633478140924e-05], "finish_reason": "length"}], "metrics": {"energy": 989.2677909898754, "energy_per_token": 3.8643273085542007, "time": 23.725836, "time_per_token": 0.092679046875}}
{"outputs": [{"text": "# Load the CSV file\n    data = pd.read_csv(file_path)\n\n    # Check if the CSV is not empty\n    if data.empty:\n        print(\"Empty Data\")\n        return None\n\n    # Extract the 'Text' column from the CSV\n    text_data = data['Text']\n\n    # Initialize the CountVectorizer with stop words and exclude them\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n    # Fit the vectorizer on the text data and extract the words\n    vectorizer.fit(text_data)\n    words = vectorizer.get_feature_names()\n\n    # Check if there are any valid words (exclude stop words)\n    if not words:\n        print(\"No valid words found\")\n        return None\n\n    # Calculate the frequency count of words\n    word_counts = pd.Series(sum(vectorizer.transform(text_data).toarray())).sort_values(ascending=False)\n\n    # Select the top ten most frequent words\n    top_ten_words = word_counts", "tokens": ["#", " Load", " the", " CS", "V", " file", "\n", "    ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " CS", "V", " is", " not", " empty", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "Empty", " Data", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Ext", "ract", " the", " '", "Text", "'", " column", " from", " the", " CS", "V", "\n", "    ", "text", "_", "data", " =", " data", "['", "Text", "']", "\n", "\n", "    ", "#", " Initialize", " the", " Count", "Vector", "izer", " with", " stop", " words", " and", " exclude", " them", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "\n", "    ", "#", " Fit", " the", " vector", "izer", " on", " the", " text", " data", " and", " extract", " the", " words", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", "_", "data", ")", "\n", "    ", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "()", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " any", " valid", " words", " (", "exclude", " stop", " words", ")", "\n", "    ", "if", " not", " words", ":", "\n", "        ", "print", "(", "\"", "No", " valid", " words", " found", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Calculate", " the", " frequency", " count", " of", " words", "\n", "    ", "word", "_", "counts", " =", " pd", ".", "Series", "(", "sum", "(", "vector", "izer", ".", "transform", "(", "text", "_", "data", ")", ".", "to", "array", "()))", ".", "sort", "_", "values", "(", "asc", "ending", "=", "False", ")", "\n", "\n", "    ", "#", " Select", " the", " top", " ten", " most", " frequent", " words", "\n", "    ", "top", "_", "ten", "_", "words", " =", " word", "_", "counts"], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -0.8012414574623108, -1.2993727978027891e-05, -0.17877359688282013, -0.9258261322975159, -0.0015437601832672954, -2.029431104660034, -0.026132065802812576, -0.015195559710264206, -2.706014311115723e-05, -0.00012742661056108773, -0.0003256267518736422, -9.715084888739511e-05, -0.0008880723617039621, -0.0036648032255470753, -0.00012158608296886086, -2.7418097943154862e-06, -0.0942569226026535, -0.009195949882268906, -0.18346545100212097, -0.00033408781746402383, -0.0428963340818882, -1.0284310579299927, -0.10211605578660965, -0.10714532434940338, -1.9386895895004272, -2.396077979938127e-05, -0.5756871104240417, -2.9891676902770996, -0.0004657614335883409, -0.278938353061676, -0.00012659224739763886, -0.004176110029220581, -0.07575081288814545, -0.005620391108095646, -0.05209650844335556, -0.014724510721862316, -0.0005581013392657042, -0.0005127069307491183, -0.04227910190820694, -0.021122973412275314, -0.022814298048615456, -2.7148661613464355, -2.700528621673584, -0.557142972946167, -0.0007943335804156959, -0.00208125333301723, -0.015648430213332176, -0.0120030976831913, -0.5985047221183777, -0.008804547600448132, -0.010477771982550621, -0.0004514628672040999, -0.0249294675886631, -1.2548319101333618, -0.009130037389695644, -0.11118317395448685, -2.6376736164093018, -0.029547778889536858, -0.00031871485407464206, -0.007219417952001095, -1.1955993175506592, -0.01454665046185255, -0.4662972092628479, -1.7762025890988298e-05, -0.21297015249729156, -0.0001456631434848532, -0.18315184116363525, -0.4164847433567047, -0.669769823551178, -0.0009602464851923287, -0.013178745284676552, -0.6731426119804382, -0.006016595754772425, -5.173549288883805e-05, -0.14741204679012299, -0.017438186332583427, -0.00035684893373399973, -0.008211541920900345, -2.383488416671753, -0.9176796078681946, -0.4473235607147217, -0.009151417762041092, -0.00010883215873036534, -0.3379051089286804, -0.9813210964202881, -0.996505618095398, -1.4381370544433594, -2.9165501594543457, -0.41378316283226013, -1.2541344165802002, -0.0003844952443614602, -0.21169395744800568, -0.0006382812280207872, -0.0008761619683355093, -0.0001995364436879754, -1.5497195136049413e-06, -1.0490362910786644e-05, -0.0019258777610957623, -0.06146462261676788, -1.311301275563892e-06, -1.311301275563892e-06, -0.00424899673089385, -0.04168080911040306, 0.0, -7.748573807475623e-06, -2.50339189733495e-06, 0.0, 0.0, -0.08695501834154129, -0.005307867657393217, -0.08367152512073517, -9.560128091834486e-05, -0.0016482589999213815, -0.6640668511390686, -1.106432318687439, -0.20106717944145203, -7.83174327807501e-05, -0.8383028507232666, -0.0065146214328706264, -0.09395115822553635, -0.015132859349250793, -1.9515352249145508, -2.5386812686920166, -0.17779383063316345, -2.228543996810913, -0.3484440743923187, -9.202533692587167e-05, -0.1840147227048874, -0.0024429496843367815, -0.002797977067530155, -2.3841574147809297e-05, -0.06550894677639008, -0.0008931938209570944, -7.867782187531702e-06, -2.3841855067985307e-07, -0.010453470051288605, -0.0003953390696551651, -0.04042385146021843, -0.12729033827781677, -0.009165238589048386, -0.04388085752725601, -3.576278118089249e-07, -5.483612312673358e-06, -0.020313091576099396, -1.1920928244535389e-07, -0.0005735897575505078, 0.0, -4.768370445162873e-07, -1.5524810552597046, -0.00036745471879839897, -0.030197670683264732, -0.0002623452164698392, -0.010222223587334156, -0.8534335494041443, -0.01068112626671791, -0.6718872785568237, -0.008085495792329311, -0.7009250521659851, -0.46703091263771057, -0.010068107396364212, -2.764005422592163, -3.690739631652832, -0.3018079400062561, -0.25454893708229065, -0.1141185611486435, -0.02477039210498333, -8.451581379631534e-05, -0.25830259919166565, -0.17156602442264557, -0.21775510907173157, -0.11049601435661316, -0.00964339915663004, -0.00012885693286079913, -0.010574853979051113, -0.0036817877553403378, -0.02383938431739807, -1.2777527570724487, -0.8092479109764099, -0.02559596113860607, -0.3581879734992981, -1.2617645263671875, -0.00021109737281221896, -0.0010719512356445193, -0.0028077249880880117, -0.001879355520941317, -0.0010315817780792713, -0.001158043509349227, -0.002812479855492711, -0.00045980370487086475, -0.012420330196619034, -2.7278671264648438, -0.1473897248506546, -1.3403394222259521, -2.3946659564971924, -0.09969776123762131, -1.734043836593628, -0.2987308204174042, -7.331102824537084e-05, -0.18014565110206604, -7.581423415103927e-05, -0.25488176941871643, -0.002046516165137291, -1.5832422971725464, -8.4638240878121e-06, -0.02620697021484375, -0.0292983315885067, -3.006694793701172, -0.08351943641901016, -0.01459305640310049, -2.0265558760002023e-06, -2.3245540432981215e-05, -0.1241341084241867, -0.001369134639389813, -0.022008700296282768, -4.625213477993384e-05, -2.622600959512056e-06, -0.004033288452774286, -0.0007500219508074224, -0.023109866306185722, -1.07287787614041e-05, -1.0093947649002075, -0.3316849172115326, -0.7454922199249268, -6.556489552167477e-06, -2.407998726994265e-05, -0.0030107428319752216, -0.0017058596713468432, -1.0728830375228426e-06, -0.0005004345439374447, -0.0011547094909474254, -0.002272644080221653, -0.034938208758831024, -0.05685702711343765, -0.0001954841281985864, -0.0014318700414150953, -2.5614523887634277, -0.10324270278215408, -0.16661536693572998, -1.5606809854507446, -0.7685773372650146, -0.9380573630332947, -0.011749823577702045, -0.17526750266551971, -3.0040289857424796e-05, -0.02579626441001892, -0.009529695846140385, -0.15744468569755554, -0.07541756331920624, -0.007279065437614918, -0.0003408804477658123, -0.008756217546761036, -1.1920928244535389e-07, 0.0], "finish_reason": "length"}], "metrics": {"energy": 987.6842791366577, "energy_per_token": 3.858141715377569, "time": 23.719372, "time_per_token": 0.092653796875}}
{"outputs": [{"text": "data = pd.read_csv(file_path)\n    text_data = data[\"Text\"]\n    cv = CountVectorizer(stop_words=STOP_WORDS)\n    cv.fit_transform(text_data)\n    vocab = cv.get_feature_names_out()\n    word_counts = cv.transform(text_data)\n    if word_counts.sum() > 0:\n        most_common_words = word_counts.sum(axis=0).tolist()\n        most_common_words = [count for count in most_common_words if count[0] > 0]\n        most_common_words.sort(key=lambda x: x[0], reverse=True)\n        most_common_words = most_common_words[:10]\n        most_common_words = [(vocab[i], count) for i, (count,) in enumerate(most_common_words)]\n        most_common_words_sorted = sorted(most_common_words, key=lambda x: x[1], reverse=True)\n        words", "tokens": ["data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "cv", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", "\n", "    ", "voc", "ab", " =", " cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "word", "_", "counts", " =", " cv", ".", "transform", "(", "text", "_", "data", ")", "\n", "    ", "if", " word", "_", "counts", ".", "sum", "()", " >", " ", "0", ":", "\n", "        ", "most", "_", "common", "_", "words", " =", " word", "_", "counts", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()", "\n", "        ", "most", "_", "common", "_", "words", " =", " [", "count", " for", " count", " in", " most", "_", "common", "_", "words", " if", " count", "[", "0", "]", " >", " ", "0", "]", "\n", "        ", "most", "_", "common", "_", "words", ".", "sort", "(", "key", "=", "lambda", " x", ":", " x", "[", "0", "]", ",", " reverse", "=", "True", ")", "\n", "        ", "most", "_", "common", "_", "words", " =", " most", "_", "common", "_", "words", "[:", "1", "0", "]", "\n", "        ", "most", "_", "common", "_", "words", " =", " [(", "voc", "ab", "[", "i", "]", ",", " count", ")", " for", " i", ",", " (", "count", ",", ")", " in", " enumerate", "(", "most", "_", "common", "_", "words", ")]", "\n", "        ", "most", "_", "common", "_", "words", "_", "s", "orted", " =", " sorted", "(", "most", "_", "common", "_", "words", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "]", ",", " reverse", "=", "True", ")", "\n", "        ", "words"], "logprobs": [-3.314964771270752, -0.035221703350543976, -0.0794103667140007, -5.400034933700226e-05, -0.0003978414461016655, -0.00031156453769654036, -0.00013767725613433868, -0.0008643704932183027, -0.00556953577324748, -0.0002543602604418993, -4.887569048150908e-06, -0.1080855131149292, -0.06513295322656631, -0.7166942358016968, -1.326541543006897, -0.5293795466423035, -0.5166478157043457, -0.003906239988282323, -0.07135414332151413, -0.2110910564661026, -0.014531963504850864, -0.019311510026454926, -0.00012957210128661245, -0.00024816294899210334, -0.4350283443927765, -1.2559269666671753, -3.5798449516296387, -0.008666994981467724, -0.0009592937421984971, -4.529942543740617e-06, -2.3841855067985307e-07, -0.01209037471562624, -0.1673252433538437, -3.2186455882765586e-06, -2.0265558760002023e-06, -0.0010108605492860079, -0.008168385364115238, 0.0, -7.152531907195225e-06, -8.583032467868179e-06, 0.0, 0.0, -0.1297781765460968, -0.025447916239500046, -0.05542222782969475, -1.217669129371643, -0.29101473093032837, -0.0003532739356160164, -1.214237093925476, -0.00016127715934999287, -0.0019752532243728638, -0.012317540124058723, -1.537788011773955e-05, 0.0, -0.02959071658551693, -0.006129514425992966, -0.2016104757785797, -3.0633206367492676, -0.5537238121032715, -0.0986795499920845, -0.0596647635102272, -1.0251946150674485e-05, -0.31544575095176697, -7.152555099310121e-07, -0.0023991868365556, 0.0, -5.090107151772827e-05, -0.17264309525489807, -0.00036161558819003403, -0.004936056211590767, -0.01583888567984104, -0.28569844365119934, -1.5133628845214844, -0.007157991174608469, -0.22642852365970612, -0.011719191446900368, -1.3562037944793701, -1.1086402082582936e-05, -0.04386568069458008, -0.0053748623467981815, -0.02078770287334919, -2.5748875486897305e-05, -1.4305104514278355e-06, -0.0015882747247815132, -1.69431471824646, -0.20251813530921936, -2.1834588050842285, -0.6075901389122009, -4.291525328881107e-06, -9.417489309271332e-06, -0.0565313883125782, -1.2469500303268433, -0.02334560640156269, -2.12087082862854, -0.0018747150897979736, -0.006898869760334492, -0.029706096276640892, -0.13141247630119324, -0.007587778847664595, -2.3715157508850098, -0.0007999319350346923, -0.03706192225217819, -0.6604486703872681, -0.2352994829416275, -0.03817097097635269, -1.3034424781799316, -7.629365427419543e-06, -6.806619057897478e-05, -0.007350779604166746, -0.04515558481216431, -0.0004151197790633887, -0.004737462382763624, -0.0004994813934899867, -0.0010002615163102746, -0.007522825617343187, -0.04273004084825516, -0.7655701041221619, -2.3841855067985307e-07, -1.881609559059143, -0.029933346435427666, -0.014475097879767418, -0.5641787648200989, -0.0001134808044298552, -0.0014804366510361433, -0.01456074882298708, -0.052053168416023254, -0.6613147854804993, -3.092477798461914, -1.8303688764572144, -0.18968194723129272, -0.11860762536525726, -0.038804732263088226, -0.011683962307870388, -2.3841855067985307e-07, -9.65590606938349e-06, -1.4305104514278355e-06, -2.145764938177308e-06, -0.03131331503391266, -0.023645907640457153, -3.3848206996917725, -0.013337322510778904, -0.002298215636983514, -0.4784252345561981, -0.005947629921138287, -0.12597955763339996, -0.02249894291162491, -0.021788274869322777, -0.03285612538456917, -0.23627525568008423, -3.969590397900902e-05, -0.0005926521262153983, -0.0012959185987710953, -0.015368256717920303, -1.2945681810379028, -0.0018176001030951738, -0.003141945693641901, -0.21145662665367126, -0.0004104725376237184, -0.00025138078490272164, -0.1087120994925499, -0.0004627825692296028, -0.026974383741617203, -0.00189268181566149, -0.01898229867219925, -0.004620114807039499, -4.9232225137529895e-05, -0.00015948931104503572, -0.00014506718434859067, -0.0016020808834582567, -0.0001134808044298552, -0.0065450589172542095, -0.02223782241344452, -0.39079076051712036, -3.516612196108326e-05, -0.0007147617870941758, -0.0010763572063297033, -0.014463700354099274, -0.020723719149827957, -0.10376111418008804, -1.1920928244535389e-07, -5.722029527532868e-06, -4.768370445162873e-07, -6.318072337307967e-06, -0.035869527608156204, -0.004558884538710117, -0.003213244490325451, -0.00212027202360332, -0.01596090756356716, -0.05144088342785835, -0.9589719176292419, -1.8000440832111053e-05, -0.0013400870375335217, -0.0007061848300509155, -0.06654854118824005, -0.1998160183429718, -1.4057904481887817, -0.41047537326812744, -0.0008037435472942889, -0.0004972175229340792, -0.5519696474075317, -0.028555061668157578, -0.0031023728661239147, -0.07617664337158203, -0.23276498913764954, -0.0019193338230252266, -0.025322047993540764, -8.320462075062096e-05, -2.025176763534546, -0.0004618293314706534, -0.0007879013428464532, -1.0256869792938232, -0.00146793806925416, -0.011282924562692642, -6.508615479106084e-05, -0.000528076896443963, -1.1920928244535389e-07, -4.768370445162873e-07, -5.960462772236497e-07, -2.861018856492592e-06, -0.0482466034591198, -0.0014642480527982116, -0.09665224701166153, -1.2656840085983276, -2.8729025871143676e-05, -0.002557342639192939, -0.0009096298599615693, -0.022535309195518494, -2.2629354000091553, -3.393031597137451, -0.004436887335032225, -0.014738136902451515, -0.017663203179836273, -0.0007686044555157423, -0.002659238874912262, -1.1920928244535389e-07, -2.455681169521995e-05, -3.576278118089249e-07, -9.65590606938349e-06, -0.0010989824077114463, -0.005438295193016529, -0.0004260824352968484, -0.00035506143467500806, -0.023117903620004654, -4.1483970562694594e-05, -0.012005806900560856, -0.00044050050200894475, -0.0024498470593243837, -0.021697642281651497, -5.924526340095326e-05, -5.4596363042946905e-05, -7.319182623177767e-05, -0.016366640105843544, -9.929640509653836e-05, -0.0014846028061583638, -0.058762215077877045, -0.8699032068252563], "finish_reason": "length"}], "metrics": {"energy": 907.4787709465026, "energy_per_token": 3.5448389490097756, "time": 22.901484, "time_per_token": 0.089458921875}}
{"outputs": [{"text": "# Load the dataset from the CSV file\n    df = pd.read_csv(file_path)\n\n    # Convert the text column to a list of words\n    text = df['Text'].tolist()\n\n    # Perform text vectorization while excluding stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorizer.fit(text)\n\n    # Create a list of all the words in the dataset\n    all_words = []\n    for word_list in vectorizer.transform(text).toarray().tolist():\n        word_list = zip(vectorizer.get_feature_names_out(), word_list)\n        word_list = filter(lambda x: x[1] > 0, word_list)\n        word_list = [word for word, count in word_list]\n        all_words.extend(word_list)\n\n    # If there are no valid words in the input, print a message and return None\n    if len(all_words) == 0:\n        print(\"No valid words found in the input file.\"", "tokens": ["#", " Load", " the", " dataset", " from", " the", " CS", "V", " file", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Convert", " the", " text", " column", " to", " a", " list", " of", " words", "\n", "    ", "text", " =", " df", "['", "Text", "']", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", " while", " excluding", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " the", " words", " in", " the", " dataset", "\n", "    ", "all", "_", "words", " =", " []", "\n", "    ", "for", " word", "_", "list", " in", " vector", "izer", ".", "transform", "(", "text", ")", ".", "to", "array", "()", ".", "tol", "ist", "():", "\n", "        ", "word", "_", "list", " =", " zip", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " word", "_", "list", ")", "\n", "        ", "word", "_", "list", " =", " filter", "(", "lambda", " x", ":", " x", "[", "1", "]", " >", " ", "0", ",", " word", "_", "list", ")", "\n", "        ", "word", "_", "list", " =", " [", "word", " for", " word", ",", " count", " in", " word", "_", "list", "]", "\n", "        ", "all", "_", "words", ".", "extend", "(", "word", "_", "list", ")", "\n", "\n", "    ", "#", " If", " there", " are", " no", " valid", " words", " in", " the", " input", ",", " print", " a", " message", " and", " return", " None", "\n", "    ", "if", " len", "(", "all", "_", "words", ")", " ==", " ", "0", ":", "\n", "        ", "print", "(", "\"", "No", " valid", " words", " found", " in", " the", " input", " file", ".", "\""], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -2.269979953765869, -1.0779035091400146, -0.316188782453537, -0.13522958755493164, -6.318072337307967e-06, -0.0589139498770237, -0.16354681551456451, -0.001570064458064735, -0.8972036242485046, -0.012084485031664371, -0.00902076531201601, -2.1457441107486375e-05, -0.00012015574611723423, -0.00028427375946193933, -0.00013243274588603526, -0.0006261295638978481, -0.004829527344554663, -0.00018344627460464835, -2.50339189733495e-06, -0.07676182687282562, -0.007157518062740564, -0.25384169816970825, -0.0004120216181036085, -0.043635301291942596, -3.283524513244629, -0.35098955035209656, -0.6983770132064819, -0.7925750613212585, -0.04595141112804413, -0.7242684364318848, -0.057149458676576614, -0.1541946828365326, -2.355977773666382, -0.09588418900966644, -0.000254241080256179, -0.5967510938644409, -1.2538050413131714, -0.07841415703296661, -1.3897565603256226, -0.04184030368924141, -0.0025704221334308386, -0.041247930377721786, -0.19229629635810852, 0.0, -0.00025078488397412, -0.004192610736936331, -0.08286643773317337, -0.0003196682082489133, -0.02896220237016678, -1.34516441822052, -0.08674616366624832, -0.016524478793144226, -0.00014304091746453196, -1.0387667417526245, -0.011673475615680218, -0.23485156893730164, -0.13786469399929047, -0.03539672866463661, -0.0013078240444883704, -0.1887591928243637, -0.0016198145458474755, -0.0003911683743353933, -0.0003331344632897526, -3.3378546504536644e-06, -7.152555099310121e-07, -0.004104048945009708, -0.13979892432689667, -1.6689286894688848e-06, -6.663577369181439e-05, -0.0021106365602463484, -0.023543566465377808, 0.0, -1.0251946150674485e-05, -1.4305104514278355e-06, 0.0, 0.0, -0.08869261294603348, -0.016857195645570755, -0.01783219538629055, -0.43356654047966003, -0.019523363560438156, -0.0029302777256816626, -0.0002416080387774855, -0.21631745994091034, -0.0010281282011419535, -0.0005077026435174048, -0.003784875851124525, -0.7393142580986023, -0.00016056202002801, -0.04427587613463402, -1.9466757774353027, -0.11972664296627045, -1.5625656843185425, -0.05445081368088722, -1.1900951862335205, -1.4579166173934937, -0.10399642586708069, -0.2513474225997925, -0.008062910288572311, -1.2220470905303955, -0.22813718020915985, -0.00025650550378486514, -0.43440186977386475, -0.00020311199477873743, -0.009478329680860043, -0.015610874630510807, -0.6278673410415649, -0.00042024365393444896, -0.006824755109846592, -0.011246737092733383, -1.5503616333007812, -0.233263298869133, -0.18067336082458496, -0.00012039413559250534, -0.02471654675900936, -2.145764938177308e-06, -2.0265558760002023e-06, -0.04848955199122429, -0.0007894498412497342, -0.003367826109752059, -0.00038235029205679893, -3.814689989667386e-06, -0.32970160245895386, -2.50339189733495e-06, -0.5736884474754333, -0.00026639728457666934, -0.04266687110066414, 0.0, -0.00029202012228779495, -0.004991688299924135, -0.00265852571465075, -1.8565587997436523, -0.01293859537690878, -0.6853042244911194, -0.09568379819393158, -2.807621955871582, -0.0022500455379486084, -0.03947155922651291, 0.0, -1.6689286894688848e-06, -0.0035070599988102913, -1.1920922133867862e-06, -1.490105023549404e-05, 0.0, -2.3364747903542593e-05, -0.39978593587875366, -6.687417771900073e-05, -0.0016066036187112331, -0.0011152960360050201, -0.002245644573122263, -5.960462772236497e-07, -2.3841855067985307e-07, -0.0003625689132604748, -0.0038803534116595984, -0.0013981815427541733, -2.0273420810699463, -0.024930747225880623, -0.013050499372184277, -0.013486466370522976, -2.074854612350464, -0.0016626594588160515, -0.0010085977846756577, -0.22623877227306366, -0.0012562725460156798, -0.0049999915063381195, -0.00027569307712838054, -0.0013813963159918785, -8.940656698541716e-06, -0.2562953233718872, -0.0001461399078834802, -0.00024828212917782366, -0.0006292270263656974, -0.00030763185350224376, -1.5497195136049413e-06, 0.0, -2.109982233378105e-05, -0.08968943357467651, -0.002055557444691658, -0.7893499732017517, -0.009243432432413101, -0.023483367636799812, -0.0008597253472544253, -1.1547514200210571, -0.4236289858818054, -0.28591448068618774, -0.05385434255003929, -0.007807216607034206, -0.4435533285140991, -8.856858039507642e-05, -0.00029452278977259994, -3.6954811548639555e-06, 0.0, -0.0019620470702648163, -0.0031122365035116673, -0.025838667526841164, -0.015393026173114777, -3.576278118089249e-07, -2.9802276912960224e-06, -0.14819180965423584, -0.015232308767735958, -0.0003948624071199447, -0.0005091324565000832, -7.867782187531702e-06, 0.0, -0.0004325169720686972, -0.0008131535141728818, -0.009270952083170414, -0.0007651500636711717, -0.10036122053861618, -1.5916815996170044, -0.58709716796875, -0.010897999629378319, -0.10218439996242523, -0.5674360990524292, -0.010701765306293964, -0.9450334906578064, -0.012633883394300938, -0.33872273564338684, -0.1045018881559372, -0.07292433083057404, -0.08638200163841248, -0.0639711245894432, -0.024082982912659645, -0.07926049828529358, -0.17578959465026855, -0.0316934660077095, -6.997340824455023e-05, -0.0024706574622541666, -1.506531834602356, -8.451581379631534e-05, -0.0013324677711352706, -4.768370445162873e-07, -2.3841830625315197e-06, -6.401333666872233e-05, -0.020953601226210594, -0.0002383901592111215, -4.935142715112306e-05, -0.0030114559922367334, -0.0019629988819360733, -0.0021275284234434366, -0.015972403809428215, -0.10795807093381882, -0.04432731121778488, -0.6779626607894897, -0.14883804321289062, -0.053567949682474136, -0.3027133047580719, -0.13303345441818237, -0.060519374907016754, -0.06212547421455383, -2.1974034309387207, -0.20945557951927185, -0.20363777875900269], "finish_reason": "length"}], "metrics": {"energy": 886.0210950345999, "energy_per_token": 3.4610199024789057, "time": 21.852894, "time_per_token": 0.0853628671875}}
{"outputs": [{"text": "# Read CSV file into a Pandas dataframe\n    df = pd.read_csv(file_path)\n\n    # Convert \"Text\" column to list and remove NaN values\n    text_list = df[\"Text\"].astype(str).tolist()\n    text_list = [t for t in text_list if not pd.isnull(t)]\n\n    # Check if there are valid words in the input\n    if not text_list:\n        print(\"Input file is empty or contains only NaN values.\")\n        return None\n\n    # Preprocess text by removing stop words\n    preprocessed_text = []\n    for t in text_list:\n        words = t.split()\n        preprocessed_words = [w for w in words if w.lower() not in STOP_WORDS]\n        preprocessed_text.append(\" \".join(preprocessed_words))\n\n    # Vectorize the preprocessed text\n    vectorizer = CountVectorizer(preprocessor=lambda x: x)\n    vectorizer.fit(preprocessed_text)\n\n    # Extract", "tokens": ["#", " Read", " CS", "V", " file", " into", " a", " Pand", "as", " data", "frame", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Convert", " \"", "Text", "\"", " column", " to", " list", " and", " remove", " Na", "N", " values", "\n", "    ", "text", "_", "list", " =", " df", "[", "\"", "Text", "\"", "]", ".", "ast", "ype", "(", "str", ")", ".", "tol", "ist", "()", "\n", "    ", "text", "_", "list", " =", " [", "t", " for", " t", " in", " text", "_", "list", " if", " not", " pd", ".", "is", "null", "(", "t", ")]", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " valid", " words", " in", " the", " input", "\n", "    ", "if", " not", " text", "_", "list", ":", "\n", "        ", "print", "(", "\"", "Input", " file", " is", " empty", " or", " contains", " only", " Na", "N", " values", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Pre", "process", " text", " by", " removing", " stop", " words", "\n", "    ", "pre", "processed", "_", "text", " =", " []", "\n", "    ", "for", " t", " in", " text", "_", "list", ":", "\n", "        ", "words", " =", " t", ".", "split", "()", "\n", "        ", "pre", "processed", "_", "words", " =", " [", "w", " for", " w", " in", " words", " if", " w", ".", "lower", "()", " not", " in", " ST", "OP", "_", "W", "OR", "DS", "]", "\n", "        ", "pre", "processed", "_", "text", ".", "append", "(", "\"", " \"", ".", "join", "(", "pre", "processed", "_", "words", "))", "\n", "\n", "    ", "#", " Vector", "ize", " the", " pre", "processed", " text", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "pre", "processor", "=", "lambda", " x", ":", " x", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "pre", "processed", "_", "text", ")", "\n", "\n", "    ", "#", " Ext", "ract"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -1.9247937202453613, -3.325883881188929e-05, -0.23897108435630798, -1.9741069078445435, -0.5172035098075867, -2.5456881523132324, -1.1920922133867862e-06, -2.1194589138031006, -0.03404911607503891, -0.1579294502735138, -0.0020122535061091185, -0.5009332895278931, -0.013355202041566372, -0.00304473377764225, -1.728519782773219e-05, -0.00016234986833296716, -0.0001397035230183974, -0.00012003655137959868, -0.00047755756531842053, -0.004309771116822958, -0.00014530557382386178, -5.483612312673358e-06, -0.08476743847131729, -0.004564580507576466, -0.22175222635269165, -0.00030298411729745567, -0.03824153542518616, -3.439838171005249, -2.255286931991577, -0.06183796748518944, -0.0006510283565148711, -0.04438352957367897, -0.11690887808799744, -1.6563276052474976, -2.3887686729431152, -0.8785518407821655, -1.3757574558258057, -0.0693901851773262, -0.08030911535024643, -0.13115926086902618, -9.512448741588742e-05, -0.24034148454666138, -0.3699088394641876, -0.3994957506656647, -0.0027462646830826998, -0.06362643092870712, -0.1302349865436554, -0.0012498432770371437, -0.004673035815358162, -1.9192511899746023e-05, -5.400034933700226e-05, -0.0002273062855238095, -2.570685386657715, -2.7418097943154862e-06, -0.006666325498372316, -0.08679927885532379, -0.003982708789408207, -0.004725242033600807, -0.1570320427417755, 0.0, -0.0008573431987315416, -0.011551283299922943, -2.6293270587921143, -0.46126261353492737, -0.004892758093774319, -0.009022301062941551, -0.04599137231707573, -0.024737481027841568, -1.696505069732666, -0.16575440764427185, -4.279521817807108e-05, -3.302042750874534e-05, -0.00019631843315437436, -1.1920922133867862e-06, -7.152555099310121e-07, -0.0001776060671545565, -0.5772626996040344, -0.06332895159721375, -7.390948667307384e-06, -1.680836794548668e-05, -1.2708077430725098, -5.936446541454643e-05, -0.0005249790847301483, -0.016993625089526176, -0.013478939421474934, -0.015762848779559135, -0.0002302858338225633, -0.16757892072200775, -0.9653602242469788, -0.13145124912261963, -1.6306052207946777, -0.35717061161994934, -1.9265697002410889, -0.5296707153320312, -0.25403550267219543, -0.03212807700037956, -0.4978209435939789, -0.2118993103504181, -0.00013207517622504383, -0.30190685391426086, -0.10385224223136902, -0.29709821939468384, -8.821448318485636e-06, -4.529942543740617e-06, -0.9556652307510376, -0.0019556223414838314, -0.00029523781267926097, -0.03323453664779663, -0.005536223296076059, -0.030530957505106926, -1.3743786811828613, -0.4937334358692169, -0.11099350452423096, -0.11580878496170044, -0.1906251162290573, -0.2752406597137451, -0.04320064187049866, -1.8014963865280151, -0.013230273500084877, -0.09271924942731857, -0.22214770317077637, -0.11555372178554535, -0.000169382052263245, -0.00015579440514557064, -0.012427865527570248, -0.007636283989995718, -0.4248570203781128, -0.0026419993955641985, -0.06123265624046326, -0.0005200940649956465, -0.12446688860654831, -3.534210681915283, -0.08219071477651596, -0.9217207431793213, -1.0465787649154663, -0.6802895665168762, -0.2333909273147583, -1.0987977981567383, -0.7603033781051636, -0.0006021831650286913, -1.0672721862792969, -0.021473180502653122, -0.010849770158529282, -0.09521234035491943, -0.07192851603031158, -1.4090851545333862, -0.0010238410905003548, -0.005207782611250877, -0.01976228691637516, -1.908094882965088, -0.09476732462644577, -0.0011079132091253996, -1.4305104514278355e-06, 0.0, -7.199982064776123e-05, -0.0006562701892107725, -0.0009056995622813702, -0.610069215297699, -0.010099616833031178, -0.3182802200317383, -5.721882189391181e-05, -0.43247827887535095, -0.03145182877779007, -0.039274778217077255, -0.0005837167263962328, -0.9864718317985535, -0.005179913714528084, -0.0010883843060582876, -0.6485311388969421, -0.00011526874004630372, -0.05304703488945961, -0.5695759057998657, -0.11787627637386322, -1.8715683836489916e-05, -3.2186455882765586e-06, -3.4450891689630225e-05, -0.0001784403866622597, -0.0070079006254673, -0.1910562515258789, -0.017059490084648132, -0.00025412190007045865, -0.0007509748684242368, -4.529942543740617e-06, -0.0009947833605110645, 0.0, -1.6212332411669195e-05, -3.576278118089249e-07, 0.0, 0.0, -0.02625167742371559, -0.0014448452275246382, -0.001019792165607214, -0.10862056165933609, -0.00013720047718379647, -3.158996332786046e-05, -0.016759783029556274, -0.006289095152169466, -0.10417722165584564, -0.03548751026391983, -0.020890912041068077, -0.0016430224059149623, -3.0517112463712692e-05, -9.059865078597795e-06, -0.0005703729693777859, -0.00024351492174901068, -2.0265558760002023e-06, -9.536738616588991e-07, -6.556489552167477e-06, -0.003093103179708123, -0.0006876011611893773, -0.0033999038860201836, -0.0009214208112098277, -0.00911468081176281, -1.4753177165985107, -0.015651246532797813, -1.6983126401901245, -0.3640180230140686, -0.0008964095613919199, -0.00868921261280775, -0.4100506603717804, -0.00012051333033014089, -0.13099165260791779, -0.0013009188696742058, -0.00025233422638848424, -0.00015364897262770683, -8.344646857949556e-07, -2.3841855067985307e-07, -0.8830429911613464, -1.7226529121398926, -0.03818703442811966, -0.0011886443244293332, -0.206329807639122, -0.008255996741354465, -0.00022742546570952982, -0.02781970053911209, -0.4313487410545349, -0.09874435514211655, -0.001026341924443841, -0.5744823217391968, -0.3954344391822815, -0.004444126971065998, -0.0032523376867175102, -0.31986287236213684, -0.007799409795552492, -4.887569048150908e-06, -4.172316494077677e-06, -6.854299135738984e-05, -0.00035696811391972005, -0.0032414060551673174, -1.3607897758483887, -0.00021360022947192192, -0.017852570861577988, -1.7068921327590942, -0.003000640543177724], "finish_reason": "length"}], "metrics": {"energy": 910.8717301959994, "energy_per_token": 3.5580926960781225, "time": 21.857798, "time_per_token": 0.0853820234375}}
{"outputs": [{"text": "# Read the CSV file\n    df = pd.read_csv(file_path)\n\n    # Extract the text column\n    text_data = df['Text']\n\n    # Perform text vectorization using CountVectorizer\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    word_counts = vectorizer.fit_transform(text_data)\n\n    # Extract the word counts and their corresponding words\n    words = vectorizer.get_feature_names_out()\n    counts = word_counts.sum(axis=0).tolist()[0]\n    word_counts_df = pd.DataFrame({'Word': words, 'Count': counts})\n\n    # Exclude stopwords from the word counts\n    word_counts_df = word_counts_df[word_counts_df['Word'].isin(STOP_WORDS) == False]\n\n    # Sort the word counts in descending order\n    word_counts_df.sort_values(by='Count', ascending=False, inplace=True)\n\n    # Get the top 10 most common words\n", "tokens": ["#", " Read", " the", " CS", "V", " file", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " text", " column", "\n", "    ", "text", "_", "data", " =", " df", "['", "Text", "']", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", " using", " Count", "Vector", "izer", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " word", " counts", " and", " their", " corresponding", " words", "\n", "    ", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "counts", " =", " word", "_", "counts", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]", "\n", "    ", "word", "_", "counts", "_", "df", " =", " pd", ".", "DataFrame", "({", "'", "Word", "':", " words", ",", " '", "Count", "':", " counts", "})", "\n", "\n", "    ", "#", " Ex", "clude", " stop", "words", " from", " the", " word", " counts", "\n", "    ", "word", "_", "counts", "_", "df", " =", " word", "_", "counts", "_", "df", "[", "word", "_", "counts", "_", "df", "['", "Word", "']", ".", "isin", "(", "ST", "OP", "_", "W", "OR", "DS", ")", " ==", " False", "]", "\n", "\n", "    ", "#", " Sort", " the", " word", " counts", " in", " descending", " order", "\n", "    ", "word", "_", "counts", "_", "df", ".", "sort", "_", "values", "(", "by", "='", "Count", "'", ",", " ascending", "=", "False", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "#", " Get", " the", " top", " ", "1", "0", " most", " common", " words", "\n"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -1.2112926244735718, -0.001335324952378869, -0.6439892053604126, -0.010782433673739433, -0.004381105303764343, -1.537788011773955e-05, -0.00015066919149830937, -0.0005133026279509068, -0.00010525626566959545, -0.0007923085941001773, -0.002444376703351736, -0.00011443436960689723, -2.9802276912960224e-06, -0.08341021090745926, -0.005216321442276239, -0.24479961395263672, -0.0002898749662563205, -0.03046921081840992, -1.661305546760559, -0.010641613975167274, -0.09615666419267654, -0.46205371618270874, -0.4647396206855774, -0.4442632794380188, -0.00015698630886618048, -0.09769760072231293, -0.5681996941566467, -0.8178558945655823, -0.0006566275842487812, -0.009663942269980907, -1.3306834697723389, -0.02041810005903244, -4.386805812828243e-05, -0.19011534750461578, -0.019685380160808563, -0.0005583396414294839, -0.025952041149139404, -2.366137981414795, -0.09774722903966904, -0.02712545171380043, -0.00015877417172305286, -2.733652114868164, -0.09308034926652908, -0.009771373122930527, -0.00011491115583339706, -0.45835617184638977, -0.0008179179858416319, -0.3416616916656494, -0.0005011494504287839, -0.0003610197745729238, -0.00016425691137555987, -3.2186455882765586e-06, -7.629365427419543e-06, -0.006894371006637812, -0.3198406398296356, -9.536738616588991e-07, -1.1920922133867862e-06, -0.001980606932193041, -0.01632535830140114, 0.0, -5.125986263010418e-06, -1.311301275563892e-06, 0.0, 0.0, -0.11936646699905396, -0.01801263354718685, -0.008649740368127823, -1.3652889728546143, -0.00022003613412380219, -0.1733417958021164, -0.00954351108521223, -0.006364908069372177, -1.9073468138230965e-06, -4.565611743601039e-05, -0.0001668790791882202, -4.386805812828243e-05, -4.386805812828243e-05, -0.0008993871742859483, -0.0010155049385502934, -5.245195097813848e-06, -2.1576648578047752e-05, -0.01089222077280283, -0.11157509684562683, -0.2287605255842209, -0.00019810620869975537, -0.018414026126265526, -1.317247986793518, -0.010908729396760464, -0.2581479847431183, -1.1826143264770508, -1.0787473917007446, -1.8575897216796875, -1.7429648637771606, -0.3573063015937805, -0.17561039328575134, -0.04047536849975586, -6.246371776796877e-05, -0.661540150642395, -0.010071293450891972, -0.030148744583129883, 0.0, -2.0265558760002023e-06, -0.00011002412065863609, 0.0, -1.7881233361549675e-05, 0.0, -1.6212332411669195e-05, -0.42408254742622375, -0.00010156115604331717, -0.0007981451926752925, -0.0018087946809828281, -0.09509343653917313, -0.8194847702980042, -0.004081254359334707, -0.09146960824728012, -2.3841855067985307e-07, 0.0, -0.0004204819560982287, -0.24269863963127136, -0.00022075122979003936, -0.00018380382971372455, -6.12716976320371e-05, -0.0002321927313460037, -0.003207065397873521, -0.05366319417953491, -0.8248192071914673, -2.3841855067985307e-07, -0.1631365716457367, -0.00034528967808000743, -0.00015448330668732524, -0.02342083491384983, -2.20542049407959, -0.16702428460121155, -0.0015862513100728393, -1.1243011951446533, -0.10857126116752625, -2.8730075359344482, -6.19869097135961e-05, -0.00238693761639297, -3.576272320060525e-06, -0.004076505079865456, -0.043244022876024246, -0.009232565760612488, -0.4948153495788574, -0.0007474012672901154, -0.001778450678102672, -0.0007266741595230997, -0.0014381790533661842, -0.007493364624679089, -0.04730207473039627, -0.0004693360242526978, -0.004365438595414162, -0.00863473117351532, -0.02487039938569069, -0.00033945043105632067, -0.01106613501906395, -3.055053949356079, -0.0008207766804844141, -0.8604779839515686, -0.6410371661186218, -0.7587870955467224, -0.08547534793615341, -0.8642774224281311, -0.3055603504180908, -0.22267460823059082, -0.00109112320933491, -0.4586962163448334, -1.2993727978027891e-05, -0.00043084874050691724, -0.0017826156690716743, -0.09703421592712402, -0.028186462819576263, -0.001456748810596764, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.3947389561508317e-05, -1.3232143828645349e-05, -0.01652400940656662, -2.618669033050537, -1.1920928244535389e-07, -1.311301275563892e-06, -1.156323378381785e-05, -2.861018856492592e-06, -0.013169568032026291, -0.009566063061356544, -5.8412379075889476e-06, -0.038097646087408066, -0.16415560245513916, -0.0003587556129787117, -0.02868596650660038, 0.0, -8.344646857949556e-07, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.012244178913533688, -0.020512469112873077, -0.001674322527833283, -0.0007712250226177275, -0.011745464988052845, -0.022220682352781296, -0.0002445875434204936, -0.03711981326341629, -1.552788257598877, -0.09425952285528183, -0.2369891107082367, -0.0011926926672458649, -0.1407039612531662, -0.00825044047087431, -3.373566141817719e-05, -0.49793949723243713, -3.862306402879767e-05, -0.0997699424624443, -2.0265558760002023e-06, -2.0146166207268834e-05, -3.8980677345534787e-05, -0.009145512245595455, -2.454617977142334, -0.0004151197790633887, -2.7418097943154862e-06, 0.0, -1.3491712808609009, -0.024993766099214554, -0.01957561820745468, -0.0002138386043952778, -2.6940935640595853e-05, -1.4305012882687151e-05, -0.048386771231889725, -6.115249561844394e-05, -0.0017172842053696513, -0.0026833738666027784, -0.009715061634778976, -3.576278118089249e-07, -1.0847986231965479e-05, -2.0265373677830212e-05, -0.0055062295868992805, -0.00023648326168768108, -0.011453824117779732, -0.00040618274942971766, -0.06127762049436569, -1.783692717552185, -0.030326511710882187, -0.14159999787807465, -0.22687707841396332, -0.007392669562250376, -0.0008423355757258832, -0.8171958327293396, -0.19206257164478302, -0.0020648366771638393, -0.1010245606303215], "finish_reason": "length"}], "metrics": {"energy": 916.5689855422964, "energy_per_token": 3.5803475997745955, "time": 22.66458, "time_per_token": 0.088533515625}}
{"outputs": [{"text": "try:\n        # Read the CSV file with the \"Text\" column\n        df = pd.read_csv(file_path, usecols=[\"Text\"])\n    except:\n        print(f\"Error reading file {file_path}. Please check the file path and try again.\")\n        return None\n\n    # Check if the 'Text' column exists in the DataFrame\n    if \"Text\" not in df.columns:\n        print(f\"The 'Text' column is not present in the input file {file_path}. Please ensure the CSV structure is correct.\")\n        return None\n\n    # Select the \"Text\" column and convert it to a list\n    texts = df[\"Text\"].tolist()\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        print(\"The input file is empty. Please ensure it contains at least one row of data.\")\n        return None\n\n    # Check if the \"Text\" column has missing or null values\n    if df[\"Text\"].isnull().any():\n        # Print a warning and replace missing", "tokens": ["try", ":", "\n", "        ", "#", " Read", " the", " CS", "V", " file", " with", " the", " \"", "Text", "\"", " column", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ",", " use", "cols", "=[", "\"", "Text", "\"", "])", "\n", "    ", "except", ":", "\n", "        ", "print", "(", "f", "\"", "Error", " reading", " file", " {", "file", "_", "path", "}", ".", " Please", " check", " the", " file", " path", " and", " try", " again", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " the", " '", "Text", "'", " column", " exists", " in", " the", " Data", "Frame", "\n", "    ", "if", " \"", "Text", "\"", " not", " in", " df", ".", "columns", ":", "\n", "        ", "print", "(", "f", "\"", "The", " '", "Text", "'", " column", " is", " not", " present", " in", " the", " input", " file", " {", "file", "_", "path", "}", ".", " Please", " ensure", " the", " CS", "V", " structure", " is", " correct", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Select", " the", " \"", "Text", "\"", " column", " and", " convert", " it", " to", " a", " list", "\n", "    ", "text", "s", " =", " df", "[", "\"", "Text", "\"", "]", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Check", " if", " the", " Data", "Frame", " is", " empty", "\n", "    ", "if", " df", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " input", " file", " is", " empty", ".", " Please", " ensure", " it", " contains", " at", " least", " one", " row", " of", " data", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " the", " \"", "Text", "\"", " column", " has", " missing", " or", " null", " values", "\n", "    ", "if", " df", "[", "\"", "Text", "\"", "]", ".", "is", "null", "()", ".", "any", "():", "\n", "        ", "#", " Print", " a", " warning", " and", " replace", " missing"], "logprobs": [-1.954647421836853, -0.00024959311122074723, -0.008209177292883396, -0.011371678672730923, -0.4351084530353546, -0.8119325041770935, -0.4581536650657654, -0.2288467288017273, -9.298280929215252e-06, -0.07301631569862366, -3.2108707427978516, -1.0680949687957764, -1.9213463068008423, -0.05317624285817146, -0.0013515156460925937, -0.005288658197969198, -0.29259607195854187, -0.00054058717796579, -0.5742372870445251, -0.013986429199576378, -0.0009286858257837594, -1.2874520507466514e-05, -0.00020001317898277193, -1.2755313036905136e-05, -0.00020787939138244838, -0.0005127069307491183, -0.004562444519251585, -0.00030393750057555735, -2.3841830625315197e-06, -0.5147116780281067, -0.08871028572320938, -7.390948667307384e-06, -0.1713763177394867, -0.004867845680564642, -0.011340444907546043, -7.784063927829266e-05, -0.10577385872602463, -0.005057517904788256, -0.8781025409698486, -0.0011143434094265103, -3.1370577812194824, -0.003928326535969973, -0.0021168221719563007, -0.8447350263595581, -0.02406948246061802, -1.1802051067352295, -0.04529299587011337, -1.0838022232055664, -0.7460072040557861, -1.7975959777832031, -1.4345128536224365, -0.003196133067831397, -9.047575440490618e-05, -1.9073468138230965e-06, -1.526152491569519, -0.1978120505809784, -0.47728821635246277, -0.6978728771209717, -0.19286413490772247, -0.2128422111272812, -0.15790115296840668, -0.24908298254013062, -1.3395862579345703, -0.00017212340026162565, -0.01265177596360445, -0.006943738553673029, -0.0005951540661044419, -0.0006848612101748586, -0.027371728792786598, -0.04479522258043289, -0.7328062653541565, -0.00756399892270565, -0.058280326426029205, -0.0011949549661949277, -0.2584892213344574, -0.6278335452079773, -0.07611721009016037, -0.127096027135849, -2.5593581199645996, -0.0077765812166035175, -0.0005122303264215589, -0.0013065143721178174, -0.7166202068328857, -0.7367056608200073, -0.0013092526933178306, -0.3111080527305603, -0.0021858150139451027, -0.01922205463051796, -0.00012027494085486978, -0.00767201092094183, -0.19423210620880127, -4.935142715112306e-05, -9.894321920000948e-06, -0.011354823596775532, -1.6569954823353328e-05, -0.0011759040644392371, -0.040195539593696594, -0.0002610342635307461, -0.007091353181749582, -0.00022396916756406426, -0.0006445952458307147, -0.07296411693096161, -0.001191144809126854, -1.1942092180252075, -0.0008822362869977951, -1.6041533946990967, -0.5394596457481384, -0.0013473490253090858, -0.00021336186910048127, -0.0004080893413629383, -0.7533578276634216, -0.5696483850479126, -0.24614109098911285, -0.006552401464432478, -0.09367873519659042, -1.875624179840088, -0.3165655732154846, -0.9584611654281616, -0.0022501645144075155, -1.9430925021879375e-05, -1.0013530300057027e-05, -0.05030474439263344, -0.0037133803125470877, -0.49848607182502747, -1.3212041854858398, -0.3380838930606842, -1.1551120281219482, -3.099393507000059e-05, -1.95522940158844, -0.5547055006027222, -0.0911422073841095, -0.16366595029830933, -0.0013580633094534278, -0.0007090438157320023, -0.0004153581103309989, -0.0071473391726613045, -0.007911772467195988, -0.005334547720849514, -0.0010609956225380301, -0.008864928036928177, -0.0007238152320496738, -0.07952035963535309, -4.203438758850098, -0.2156689167022705, -1.2712368965148926, -0.0017725008074194193, -0.00019131260341964662, -0.00886563677340746, -0.9674451947212219, -2.45100736618042, -0.4354615807533264, -0.08192253857851028, -0.1043066531419754, -0.1811884641647339, -0.3363930284976959, -0.00018380382971372455, -0.3207814395427704, -2.31290340423584, -0.03269057348370552, -0.04250967875123024, -0.058718711137771606, -0.0002315968304174021, -1.9550132492440753e-05, -3.814689989667386e-06, -4.9828242481453344e-05, -0.006390967406332493, -0.2555254399776459, 0.0, -6.842378934379667e-05, -0.0017322786152362823, -0.03373555839061737, -0.0004167880106251687, -0.1087934672832489, -0.8608623147010803, -0.1265815943479538, -0.28071698546409607, -3.950018882751465, -0.0007986216805875301, -0.0532996691763401, -0.2525179088115692, -1.1821057796478271, -4.9828242481453344e-05, -0.0019397982396185398, -0.726631224155426, -0.002922432729974389, -0.020239263772964478, -0.19067566096782684, -0.0004563482361845672, -0.000341476290486753, -0.011975299566984177, -0.002169043058529496, -0.41627705097198486, -0.3166320323944092, -0.2103106528520584, -0.22169071435928345, -0.0588655099272728, -0.0011549476766958833, -0.0736246183514595, -0.054833218455314636, -1.5855324268341064, -1.8558392524719238, -0.032071392983198166, -3.2516446113586426, -0.00020418466010596603, -0.011112585663795471, -0.7814475297927856, -1.0088257789611816, -0.5224520564079285, -0.0779464989900589, -0.000543446687515825, -9.369411418447271e-05, -3.45700973412022e-05, -0.003066838951781392, -0.0032610115595161915, -0.0016621834365651011, -0.0006367324967868626, -0.009487777017056942, -0.0004751745145767927, -0.04667048901319504, -0.9887264370918274, -0.04004471376538277, -0.3694099187850952, -0.6988232731819153, -0.0014546061865985394, -6.115249561844394e-05, -0.002901512896642089, -2.396311044692993, -1.687053918838501, -0.9536888003349304, -2.604348659515381, -0.0059130266308784485, -0.05436715856194496, -4.994744449504651e-05, -0.021844495087862015, -0.48915404081344604, -0.04557379335165024, -0.008157034404575825, -4.6491513785440475e-06, -2.264974000354414e-06, -9.059865078597795e-06, -5.340433563105762e-05, -0.012857748195528984, -0.045468661934137344, -6.794906312279636e-06, -1.1920922133867862e-06, -0.3287985622882843, -0.031196387484669685, -0.00040165462996810675, -0.0002873722987715155, -2.0358965396881104, -3.6808223724365234, -0.2210082858800888, -0.26372548937797546, -1.8372324705123901, -1.8876734972000122, -0.6054299473762512], "finish_reason": "length"}], "metrics": {"energy": 913.0107212104805, "energy_per_token": 3.5664481297284394, "time": 22.052853, "time_per_token": 0.08614395703125}}
{"outputs": [{"text": "# Read the CSV file\n    data = pd.read_csv(file_path)\n\n    # Extract the text data from the \"Text\" column\n    text_data = data[\"Text\"]\n\n    # Check if the input data is empty\n    if text_data.empty:\n        print(\"The input data is empty. Please provide a valid CSV file with a 'Text' column.\")\n        return None\n\n    # Create a CountVectorizer with specific stopwords and tokenize the text data\n    count_vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    tokens = count_vectorizer.fit_transform(text_data)\n\n    # Get the word frequencies using the CountVectorizer\n    word_frequencies = dict(zip(count_vectorizer.get_feature_names(), tokens.sum(axis=0).A1))\n\n    # Sort the words by frequency\n    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)\n\n    # Extract the top 1", "tokens": ["#", " Read", " the", " CS", "V", " file", "\n", "    ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " text", " data", " from", " the", " \"", "Text", "\"", " column", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " data", " is", " empty", "\n", "    ", "if", " text", "_", "data", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " input", " data", " is", " empty", ".", " Please", " provide", " a", " valid", " CS", "V", " file", " with", " a", " '", "Text", "'", " column", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Create", " a", " Count", "Vector", "izer", " with", " specific", " stop", "words", " and", " token", "ize", " the", " text", " data", "\n", "    ", "count", "_", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "tokens", " =", " count", "_", "vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", "\n", "\n", "    ", "#", " Get", " the", " word", " frequencies", " using", " the", " Count", "Vector", "izer", "\n", "    ", "word", "_", "f", "requ", "encies", " =", " dict", "(", "zip", "(", "count", "_", "vector", "izer", ".", "get", "_", "feature", "_", "names", "()", ",", " tokens", ".", "sum", "(", "axis", "=", "0", ")", ".", "A", "1", "))", "\n", "\n", "    ", "#", " Sort", " the", " words", " by", " frequency", "\n", "    ", "s", "orted", "_", "words", " =", " sorted", "(", "word", "_", "f", "requ", "encies", ".", "items", "()", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "]", ",", " reverse", "=", "True", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " top", " ", "1"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -1.2112926244735718, -0.001335324952378869, -2.2400717735290527, -0.030739059671759605, -0.010119324550032616, -2.9205850296420977e-05, -0.00012540031457319856, -0.0007273888913914561, -8.082063141046092e-05, -0.0007457336178049445, -0.0037720496766269207, -0.00011562632425921038, -2.9802276912960224e-06, -0.09094423800706863, -0.008048364892601967, -0.1612270176410675, -0.00034814971149899065, -0.038317371159791946, -1.963087797164917, -0.01318145077675581, -0.11733894795179367, -0.3759709298610687, -1.4068524837493896, -0.5801030993461609, -0.03443203121423721, -0.9214100241661072, -0.014464052394032478, -0.0003216941258870065, -0.0008326877141371369, -0.057837359607219696, -0.0002661589242052287, -0.09337757527828217, -0.38703471422195435, -0.07121039181947708, -0.0006146925734356046, -0.010584879666566849, -0.16004544496536255, -0.001595296896994114, -0.007126625627279282, -5.9602869441732764e-05, -2.777537883957848e-05, -0.2171279340982437, -0.015993757173419, -0.0005125877796672285, -0.031179863959550858, -0.7216643691062927, -0.11030952632427216, -0.1654590368270874, -0.4949150085449219, -1.4606658220291138, -0.04516527056694031, -0.16197803616523743, -0.721494734287262, -0.00012146688823122531, -0.0014019908849149942, -0.07074768096208572, -7.152555099310121e-07, 0.0, -0.0006393534131348133, -0.049742430448532104, -0.04246500879526138, -0.00035696811391972005, -0.0003066784702241421, -0.03149803727865219, -0.003907902631908655, -0.009927541948854923, -1.5344548225402832, -0.12085824459791183, -0.9972478747367859, -0.01831243373453617, -0.002250283258035779, -0.06976292282342911, -0.9536745548248291, -0.6338751912117004, -1.8910118341445923, -0.14728252589702606, -0.45819875597953796, -4.410734163684538e-06, -0.02678951993584633, -1.0444951057434082, -1.497664213180542, -0.04958702623844147, -0.0016900317277759314, -0.00010740180005086586, -0.0007780147134326398, -0.02105305716395378, -0.00020597243565134704, -0.0002388668799540028, -9.703165414975956e-05, -0.0035979317035526037, -0.0067113228142261505, -0.39540329575538635, -0.007612386718392372, -0.00272843218408525, -0.0003328961320221424, -0.012354512698948383, -2.19423508644104, -0.18094179034233093, -0.8895398378372192, -0.015730109065771103, -5.054346183896996e-05, -1.3415522575378418, -1.3711885213851929, -0.14362265169620514, -0.7361718416213989, -1.931016206741333, -2.717555046081543, -1.4043612480163574, -0.04597315564751625, -0.10677748173475266, -0.13424527645111084, -0.016272112727165222, -0.000399033073335886, -2.9575650691986084, -0.0024371228646486998, -0.131571963429451, -0.03884303197264671, -0.0005092516075819731, -0.0003810394846368581, -9.536738616588991e-07, -8.344646857949556e-07, -0.0007456144667230546, -0.11898637562990189, -1.1920922133867862e-06, -6.210611172718927e-05, -0.0009301149984821677, -0.010470575653016567, 0.0, -6.318072337307967e-06, -2.0265558760002023e-06, 0.0, -2.3841855067985307e-07, -0.2603856921195984, -0.0059547401033341885, -0.01757442019879818, -3.669132709503174, -0.017221203073859215, -0.002546284580603242, -2.0265558760002023e-06, -1.9073468138230965e-06, -5.245195097813848e-06, -1.3232143828645349e-05, -4.565611743601039e-05, -9.775113539944869e-06, -9.929640509653836e-05, -0.0013052048161625862, -0.002240530215203762, -9.059865078597795e-06, -4.291525328881107e-06, -0.011096433736383915, -0.0173354409635067, -0.049648284912109375, -0.00014590153296012431, -0.004016072954982519, -1.3951940536499023, -0.08339935541152954, -1.505982518196106, -1.176861047744751, -1.9330542087554932, -0.18764925003051758, -1.242013931274414, -0.002979365875944495, -1.5139465176616795e-05, -0.867504358291626, -3.814624506048858e-05, -0.0604214109480381, -0.002046516165137291, -0.4327819347381592, -3.933898824470816e-06, -0.0001656871900195256, -0.001665158779360354, -1.070532202720642, -0.0005352256703190506, -0.0010116941994056106, -0.0002975021197926253, -0.0005648924270644784, -2.3841855067985307e-07, -3.576278118089249e-07, 0.0, -9.179073458653875e-06, -0.00017379203927703202, -2.3841855067985307e-07, -7.748573807475623e-06, 0.0, -5.960462772236497e-07, -1.4417293071746826, -7.545663538621739e-05, -0.031178822740912437, -7.462222856702283e-05, -0.5177332758903503, -4.482168878894299e-05, -0.001419608946889639, -9.131014667218551e-05, -0.0002356490003876388, -0.00028951745480298996, -8.880697714630514e-05, -0.5840569138526917, -0.057371120899915695, -0.007287822663784027, -0.0018743580440059304, -0.02529461868107319, -0.0001958416833076626, -0.006543874274939299, -2.015779972076416, -0.04034668579697609, -1.152604103088379, -0.3003115653991699, -0.1665748953819275, -2.336484670639038, -0.00011896379146492109, -0.0803491547703743, -1.1920858014491387e-05, -2.2172682292875834e-05, -0.061032485216856, -0.001810817513614893, -0.009892957285046577, -0.00456742849200964, -0.001167569193057716, -8.344646857949556e-07, -1.311301275563892e-06, -4.0531076592742465e-06, -5.960462772236497e-07, -0.24055059254169464, -0.06292559951543808, -1.8954096958623268e-05, -2.9802276912960224e-06, -0.0009210634743794799, -2.9205850296420977e-05, -0.00025817399728111923, -0.03594738617539406, -6.758938252460212e-05, -0.022731564939022064, -2.455681169521995e-05, -0.00014304091746453196, -0.000546425289940089, -1.1444026313256472e-05, -2.1934269170742482e-05, -9.536697689327411e-06, -0.0014092524070292711, -0.0001720042055239901, -0.006789116654545069, -0.04479316994547844, -0.00010084597306558862, -0.01705784909427166, -0.8937304019927979, -0.0036309524439275265, -0.03821204602718353, -0.08498776704072952, -0.23756523430347443, -0.007586832623928785], "finish_reason": "length"}], "metrics": {"energy": 976.8520069160475, "energy_per_token": 3.8158281520158104, "time": 23.303167, "time_per_token": 0.09102799609375}}
{"outputs": [{"text": "# Read data from CSV file\n    df = pd.read_csv(file_path)\n\n    # Check if the input is empty or contains only stop words\n    if df.empty or all(all(word in STOP_WORDS for word in row.split()) for row in df['Text']):\n        print(\"Data is empty or contains only stop words.\")\n        return\n\n    # Prepare the data for vectorization by excluding stop words\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    tf = vectorizer.fit_transform(df[\"Text\"])\n\n    # Extract the most common words and their frequencies\n    freqs = tf.sum(axis=0).A1  # .A1 converts the sparse matrix to an array\n    words = vectorizer.get_feature_names_out()\n    most_common = [(word, freq) for word, freq in zip(words, freqs) if freq > 0]\n    most_common.sort(key=lambda x: x[1], reverse=True)\n    most_common", "tokens": ["#", " Read", " data", " from", " CS", "V", " file", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " is", " empty", " or", " contains", " only", " stop", " words", "\n", "    ", "if", " df", ".", "empty", " or", " all", "(", "all", "(", "word", " in", " ST", "OP", "_", "W", "OR", "DS", " for", " word", " in", " row", ".", "split", "())", " for", " row", " in", " df", "['", "Text", "']", "):", "\n", "        ", "print", "(", "\"", "Data", " is", " empty", " or", " contains", " only", " stop", " words", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Prepare", " the", " data", " for", " vector", "ization", " by", " excluding", " stop", " words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "tf", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "df", "[", "\"", "Text", "\"", "])", "\n", "\n", "    ", "#", " Ext", "ract", " the", " most", " common", " words", " and", " their", " frequencies", "\n", "    ", "freq", "s", " =", " tf", ".", "sum", "(", "axis", "=", "0", ")", ".", "A", "1", "  ", "#", " ", ".", "A", "1", " converts", " the", " sparse", " matrix", " to", " an", " array", "\n", "    ", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "most", "_", "common", " =", " [(", "word", ",", " fre", "q", ")", " for", " word", ",", " fre", "q", " in", " zip", "(", "words", ",", " fre", "qs", ")", " if", " fre", "q", " >", " ", "0", "]", "\n", "    ", "most", "_", "common", ".", "sort", "(", "key", "=", "lambda", " x", ":", " x", "[", "1", "]", ",", " reverse", "=", "True", ")", "\n", "    ", "most", "_", "common"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -2.2162327766418457, -0.18381834030151367, -0.5020645260810852, -1.6689160474925302e-05, -0.2340056300163269, -0.35175639390945435, -0.0014761515194550157, -1.2017911672592163, -0.016459517180919647, -0.005338223185390234, -1.8358061424805783e-05, -0.00011216964776394889, -0.00014697425649501383, -0.0001411338453181088, -0.0006108802044764161, -0.003977959044277668, -0.0002138386043952778, -1.1920922133867862e-06, -0.12018214166164398, -0.010590777732431889, -0.39545339345932007, -0.00035565727739594877, -0.08107306063175201, -0.9901317954063416, -0.11655596643686295, -0.4691065549850464, -0.8637151718139648, -1.9670989513397217, -0.20059821009635925, -0.690919816493988, -0.3820980489253998, -0.010373955592513084, -0.007674731779843569, -0.30224359035491943, -0.016530107706785202, -0.0005918181850574911, -0.3578188717365265, -0.14078783988952637, -0.04312517121434212, -0.21016274392604828, -0.23275715112686157, -0.8788943290710449, -0.29904767870903015, -2.531562566757202, -0.03671218827366829, -0.20439882576465607, -0.06720704585313797, -0.007900300435721874, 0.0, -3.194758028257638e-05, -4.768370445162873e-07, 0.0, 0.0, -0.0020601970609277487, -0.00033182359766215086, -0.00024637524620629847, -1.3846734762191772, -0.22998881340026855, -0.15932153165340424, -0.014151813462376595, -0.018872927874326706, -0.15135201811790466, -0.00021073981770314276, -0.0020494903437793255, -1.5648715496063232, -0.0058730891905725, -0.001474008895456791, -0.11554883420467377, -0.0014630577061325312, -0.002255040919408202, -0.050351109355688095, -0.07061683386564255, -0.018700718879699707, -4.034969329833984, -0.13104571402072906, -0.13986589014530182, -0.015498083084821701, -0.3604554533958435, -0.015303689055144787, -0.00764515670016408, -0.11046431213617325, -0.4164285361766815, -0.28328490257263184, -0.0006578188622370362, -0.001987150404602289, -0.010471637360751629, -0.009877140633761883, -1.2104490995407104, -0.010941981337964535, -0.0004615910293068737, -0.0260908380150795, -3.817749261856079, -0.87223219871521, -0.9398122429847717, -0.32743075489997864, -0.30742958188056946, -0.01036581490188837, -2.39986515045166, -1.6282579898834229, -0.040700413286685944, -0.23910436034202576, -0.06523983925580978, -0.0007216709782369435, -1.2445130348205566, -0.005185724701732397, -0.0012297218199819326, -0.0006694936309941113, -2.264974000354414e-06, -1.0728830375228426e-06, -0.007088867481797934, -0.06743106245994568, -1.5497195136049413e-06, -3.933898824470816e-06, -0.0025095418095588684, -0.012500152923166752, 0.0, -8.22540732769994e-06, -5.602820692729438e-06, 0.0, -8.344646857949556e-07, -0.10728903114795685, -0.01052507571876049, -0.1622602492570877, -3.535816192626953, -0.14367076754570007, -0.01276382990181446, -3.4570634852570947e-06, -5.23315102327615e-05, -0.0005987281911075115, -3.1470757676288486e-05, -4.9470632802695036e-05, -0.003606602782383561, -0.005073292646557093, -2.386519432067871, -0.0033742417581379414, -0.0013930626446381211, -1.585470999998506e-05, -0.031964369118213654, -0.04362389072775841, -0.5289787650108337, -0.00015424491721205413, -0.01960519328713417, -1.1926466226577759, -0.014730148948729038, -0.5173453688621521, -1.5346190929412842, -0.20227549970149994, -0.04259799048304558, -0.8659578561782837, -0.020467504858970642, -0.9001763463020325, -0.029801908880472183, -5.686121585313231e-05, -3.810121536254883, -1.0265201330184937, -0.013350026682019234, -0.4889826774597168, -0.004651796538382769, -0.1790764331817627, -0.0015967250801622868, -0.008472924120724201, -0.000683074293192476, -0.001531857531517744, -0.001440440770238638, -0.04825989529490471, -0.4685042202472687, -0.23279039561748505, -2.1608736515045166, -2.038458114839159e-05, -2.6905593872070312, -0.014946380630135536, -0.01059136725962162, -0.12075904756784439, -1.1584835052490234, -0.6159470081329346, -0.3827154040336609, -0.14907397329807281, -0.041021864861249924, -2.6582393646240234, -0.048102326691150665, -0.3810252547264099, -0.04530905932188034, -1.0724848508834839, -0.003513593692332506, -0.613572359085083, 0.0, -2.3841830625315197e-06, -0.000303818320389837, -3.576278118089249e-07, -1.585470999998506e-05, 0.0, -1.4305104514278355e-06, -0.32889026403427124, -0.00021300431399140507, -0.0010401559993624687, -0.04051715508103371, -0.3090866208076477, -0.7262219786643982, -0.00032789100077934563, -0.028462838381528854, -0.5241133570671082, -2.721323013305664, -0.7395150065422058, -0.0009971652179956436, -0.12898412346839905, -0.04712661728262901, -0.018376221880316734, -0.0010378933511674404, -0.289006769657135, -1.3589766240329482e-05, -0.0004379982128739357, -1.7881377516459906e-06, -0.0010045487433671951, -0.014769969508051872, -0.00010072677832795307, -0.00011193125828867778, -0.00047779586748220026, -0.0008685392094776034, -0.0003256267518736422, -0.025335995480418205, -0.0037203875835984945, -0.03631738945841789, -3.933898824470816e-06, -0.06844428181648254, -0.0014280608156695962, -0.058209359645843506, -0.021282397210597992, -0.06377754360437393, -0.17681649327278137, -0.083382248878479, -1.1920922133867862e-06, -4.672895011026412e-05, -0.25866538286209106, -1.6093124941107817e-05, -8.976056415122002e-05, -0.006517345551401377, -2.8967437174287625e-05, -0.00014685506175737828, -0.02882855385541916, -6.794698856538162e-05, -0.08012329041957855, -9.083335316972807e-05, -0.00014375607133843005, -0.0008051729528233409, -5.185469490243122e-05, -1.2874520507466514e-05, -3.158996332786046e-05, -0.00040570611599832773, -2.2291887944447808e-05, -0.11163896322250366, -1.157241940498352, -0.6528387665748596, -4.6967357775429264e-05, -0.0010517071932554245], "finish_reason": "length"}], "metrics": {"energy": 901.6499105749128, "energy_per_token": 3.5220699631832533, "time": 22.269405, "time_per_token": 0.08698986328125}}
{"outputs": [{"text": "# Read CSV file containing text\n    df = pd.read_csv(file_path)\n\n    # Preprocess text\n    df['Text'] = df['Text'].str.replace(r\"\\n\", \" \").str.replace(r\"\\t\", \" \")\n    df['Text'] = df['Text'].str.replace(r\"[^a-zA-Z0-9\\.\\s]+\", \"\", regex=True)\n    df['Text'] = df['Text'].str.lower()\n\n    # Select the \"Text\" column and drop NaN values\n    text = df['Text'].dropna()\n\n    if text.empty:\n        print(\"The input file is empty.\")\n        return None\n\n    # Text vectorization\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorized_text = vectorizer.fit_transform(text)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Count the occurrences of each word\n    word_counts = pd.", "tokens": ["#", " Read", " CS", "V", " file", " containing", " text", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Pre", "process", " text", "\n", "    ", "df", "['", "Text", "']", " =", " df", "['", "Text", "']", ".", "str", ".", "replace", "(", "r", "\"", "\\", "n", "\"", ",", " \"", " \"", ")", ".", "str", ".", "replace", "(", "r", "\"", "\\", "t", "\"", ",", " \"", " \"", ")", "\n", "    ", "df", "['", "Text", "']", " =", " df", "['", "Text", "']", ".", "str", ".", "replace", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", ".", "\\", "s", "]+", "\"", ",", " \"", "\"", ",", " regex", "=", "True", ")", "\n", "    ", "df", "['", "Text", "']", " =", " df", "['", "Text", "']", ".", "str", ".", "lower", "()", "\n", "\n", "    ", "#", " Select", " the", " \"", "Text", "\"", " column", " and", " drop", " Na", "N", " values", "\n", "    ", "text", " =", " df", "['", "Text", "']", ".", "drop", "na", "()", "\n", "\n", "    ", "if", " text", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " input", " file", " is", " empty", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Text", " vector", "ization", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "ized", "_", "text", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Count", " the", " occurrences", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " pd", "."], "logprobs": [-0.3697170317173004, -0.8248772621154785, -1.9247937202453613, -3.325883881188929e-05, -0.23897108435630798, -2.8355531692504883, -0.4252241551876068, -2.8095972537994385, -0.0017968951724469662, -0.7244796752929688, -0.01694955676794052, -0.004082797560840845, -1.4781842764932662e-05, -0.00011169286881340668, -4.589452510117553e-05, -0.00021491125517059118, -0.0010456338059157133, -0.0043171304278075695, -0.00023040501400828362, -2.3841830625315197e-06, -0.12391602247953415, -0.011518404819071293, -0.5016089081764221, -0.00029416524921543896, -0.05069621652364731, -3.2386069297790527, -0.11282415688037872, -0.6034020185470581, -1.3414809703826904, -0.0010708795161917806, -1.383790135383606, -1.4146255254745483, -0.35603806376457214, -0.04788849130272865, -0.0013160386588424444, -0.08002788573503494, -0.008389586582779884, -0.0013993718894198537, -3.313963316031732e-05, -0.002127052517607808, -0.20143887400627136, -7.879423355916515e-05, -1.1880619525909424, -0.26986756920814514, -0.22783130407333374, -1.2778117656707764, -1.5600244998931885, -1.8539093732833862, -0.35925763845443726, -8.11782301752828e-05, -0.05767161771655083, -0.12852349877357483, -0.07599225640296936, -2.1398086547851562, -0.05545346811413765, -8.868777513271198e-05, -0.3288334012031555, -0.016310229897499084, -0.15168651938438416, -0.01642726920545101, -0.29944363236427307, -0.55504310131073, -0.010885735973715782, -5.876845170860179e-05, -0.018861113116145134, -0.015283497050404549, -0.008687322027981281, -0.6570844650268555, -0.48944422602653503, -0.3767542839050293, -0.029739191755652428, -0.03478071838617325, -0.008745581842958927, -0.0032500799279659986, -0.01196222472935915, -0.0015286438865587115, -4.160317621426657e-05, -4.088794958079234e-05, -0.00014852374442853034, -0.08822351694107056, -3.0040289857424796e-05, -1.1136579513549805, -0.036033403128385544, -0.09478955715894699, -0.07782751321792603, -0.8387128710746765, -1.3683186769485474, -0.25370460748672485, -0.00014208737411536276, -0.0005812147865071893, -0.012556072324514389, -1.8358061424805783e-05, -0.006183658726513386, -0.515103280544281, -0.0019769188947975636, -0.00025912740966305137, -0.541456401348114, -2.877725839614868, -0.6987602114677429, -2.0430264472961426, -1.3616058826446533, -0.006119087804108858, -6.949660019017756e-05, -0.017299003899097443, -0.26500481367111206, -0.5690386891365051, -0.004452671855688095, -0.0013013951247557998, -0.0010761191369965672, -0.002064479747787118, -0.1171862781047821, -0.442223459482193, -0.07817208766937256, -0.00680782413110137, -0.0203792043030262, -0.003724069334566593, -0.0022116266191005707, -0.0038558910600841045, -0.00145948666613549, -1.8358061424805783e-05, -9.179073458653875e-06, -0.00018439977429807186, -0.04186316952109337, -2.455681169521995e-05, -0.862957775592804, -3.349725011503324e-05, -0.08096818625926971, -0.3271341919898987, -0.00029940891545265913, -0.03853349760174751, -4.750636100769043, -1.4467885494232178, -2.162242889404297, -0.0637722834944725, -0.000581572181545198, -0.010285940021276474, -0.8510281443595886, -1.7135670185089111, -2.95621919631958, -0.03389367461204529, -0.2674085199832916, -0.0973508208990097, -0.00012599628826137632, -0.2683067321777344, -1.2445074319839478, -0.009620966389775276, -0.16195178031921387, -0.00023862851958256215, -0.0008972433279268444, -0.008458739146590233, -0.04492573067545891, -5.960446742392378e-06, -0.0016379047883674502, -0.09171000123023987, -0.04237622767686844, -0.0002899941464420408, -2.0545623302459717, -0.061658766120672226, -0.0005129451747052372, -0.1738187074661255, -0.07911545038223267, -0.048841435462236404, -0.0006808108882978559, -0.1334516406059265, -0.08754299581050873, -0.022193167358636856, -1.5047566890716553, -0.3322325050830841, -0.4475109577178955, -0.08219126611948013, -0.03375572711229324, -0.800121009349823, -0.682054877281189, -0.00013493580627255142, -0.0004128557338844985, -0.012100974097847939, -0.006977122277021408, -0.34711408615112305, -0.0094292052090168, -0.010895523242652416, -0.000507464399561286, -0.08157980442047119, -3.1209468841552734, -0.15375584363937378, -0.004328287672251463, -0.34941747784614563, -0.0011850723531097174, -0.3939622640609741, -0.0021162275224924088, -0.0005932478234171867, -0.0007568117580376565, -2.7418097943154862e-06, -2.264974000354414e-06, -0.006824755109846592, -0.2812827527523041, -3.576278118089249e-07, -9.179073458653875e-06, -0.002045802306383848, -0.013833715580403805, 0.0, -1.7881377516459906e-06, -1.311301275563892e-06, 0.0, 0.0, -0.15277262032032013, -0.023309968411922455, -0.02280276268720627, -0.9469912648200989, -2.2303481101989746, -0.025545647367835045, -0.07249944657087326, -0.018674159422516823, -0.005171730648726225, -2.264974000354414e-06, -1.0132738680113107e-05, -0.0009765623253770173, -9.059865078597795e-06, -7.295342220459133e-05, -0.0015528061194345355, -0.004971048794686794, -0.019429484382271767, -0.018641397356987, -1.0858337879180908, -1.627887487411499, -0.0003644755925051868, -0.0051706633530557156, -0.0006020640721544623, -0.02397754229605198, -1.311301275563892e-06, -2.3841830625315197e-06, -3.576214658096433e-05, 0.0, -4.768360213347478e-06, 0.0, -1.1920928244535389e-07, -0.32517099380493164, -0.00012003655137959868, -0.0005812147865071893, -0.008427887223660946, -0.2530405521392822, -0.00013314791431184858, -0.05005361884832382, -2.0144777297973633, -0.7589970231056213, -0.7387170791625977, -0.004197596572339535, -0.08057375997304916, -0.10052995383739471, -0.19018681347370148, -3.71926071238704e-05, -0.08953466266393661, -0.00011467275908216834, -0.05837253853678703, -0.006519595626741648, -2.0314438343048096, -1.537788011773955e-05], "finish_reason": "length"}], "metrics": {"energy": 894.6023430757527, "energy_per_token": 3.494540402639659, "time": 22.056534, "time_per_token": 0.0861583359375}}
{"outputs": [{"text": "# Load the dataset\n    df = pd.read_csv(file_path)\n\n    # Extract text from the \"Text\" column\n    text_data = df[\"Text\"]\n\n    # Check for empty data\n    if text_data.empty:\n        print(\"Input file is empty. Please provide valid data.\")\n        return None\n\n    # Preprocess the text data by removing stopwords and punctuation\n    preprocessed_data = [\n        \" \".join(\n            [word for word in doc.split() if word.isalnum() and word not in STOP_WORDS]\n        )\n        for doc in text_data\n    ]\n\n    # Perform text vectorization\n    vectorizer = CountVectorizer()\n    vectorizer.fit(preprocessed_data)\n\n    # Extract the feature names (unique words)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Count the occurrences of each word\n    word_counts = [\n        len(vectorizer.transform([doc]).toarray()[0]) for doc in preprocessed_data\n    ", "tokens": ["#", " Load", " the", " dataset", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Ext", "ract", " text", " from", " the", " \"", "Text", "\"", " column", "\n", "    ", "text", "_", "data", " =", " df", "[", "\"", "Text", "\"", "]", "\n", "\n", "    ", "#", " Check", " for", " empty", " data", "\n", "    ", "if", " text", "_", "data", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "Input", " file", " is", " empty", ".", " Please", " provide", " valid", " data", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Pre", "process", " the", " text", " data", " by", " removing", " stop", "words", " and", " punct", "uation", "\n", "    ", "pre", "processed", "_", "data", " =", " [", "\n", "        ", "\"", " \"", ".", "join", "(", "\n", "            ", "[", "word", " for", " word", " in", " doc", ".", "split", "()", " if", " word", ".", "isal", "num", "()", " and", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", "]", "\n", "        ", ")", "\n", "        ", "for", " doc", " in", " text", "_", "data", "\n", "    ", "]", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "()", "\n", "    ", "vector", "izer", ".", "fit", "(", "pre", "processed", "_", "data", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " feature", " names", " (", "unique", " words", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Count", " the", " occurrences", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " [", "\n", "        ", "len", "(", "vector", "izer", ".", "transform", "([", "doc", "])", ".", "to", "array", "()[", "0", "])", " for", " doc", " in", " pre", "processed", "_", "data", "\n", "    "], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -2.269979953765869, -0.5297277569770813, -0.0015648273983970284, -0.8856210708618164, -0.010421263985335827, -0.009003044106066227, -3.790783375734463e-05, -0.0002060916303889826, -0.00012492353562265635, -0.00016783259343355894, -0.0008911690674722195, -0.004249827936291695, -0.00014768941036891192, -2.622600959512056e-06, -0.0772559717297554, -0.010244996286928654, -0.29686376452445984, -0.0003594706067815423, -0.056137122213840485, -2.201716661453247, -0.023273516446352005, -2.590780019760132, -1.2031116485595703, -0.10248786956071854, -1.3256546258926392, -0.026262592524290085, -0.0003466005437076092, -0.002949770539999008, -0.1415642946958542, -0.0003051292151212692, -0.12989826500415802, -1.1558549404144287, -0.25392454862594604, -0.000697965151630342, -0.02788972482085228, -0.16813869774341583, -0.0009502424509264529, -0.008370672352612019, -7.939023635117337e-05, -3.814624506048858e-05, -0.2266201227903366, -0.025908946990966797, -0.00048458753735758364, -0.048767637461423874, -0.5255925059318542, -2.0669991970062256, -0.1948627233505249, -0.23845672607421875, -0.5537442564964294, -0.00011145447206217796, -0.0021645228844136, -0.03668610379099846, -1.311301275563892e-06, 0.0, -0.0003518439189065248, -0.11131010204553604, -0.050175052136182785, -0.0005765683017671108, -0.00025829317746683955, -0.030636053532361984, -0.00492134690284729, -0.019192935898900032, -2.1706933975219727, -0.4549623727798462, -0.03417239338159561, -0.0015997005393728614, -0.19219064712524414, -0.8958163261413574, -0.5432717204093933, -0.6137670874595642, -0.40089038014411926, -0.031108452007174492, -0.000697846058756113, -0.00012361239350866526, -0.00011669908417388797, -0.004332798067480326, -0.005652989260852337, -0.45919355750083923, -0.004523165058344603, -0.0031346967443823814, -0.00035446559195406735, -0.01822359301149845, -2.9219439029693604, -0.07235907763242722, -0.21940264105796814, -0.05483175069093704, -0.37748903036117554, -1.044294834136963, -0.6317036151885986, -0.14580762386322021, -0.4685949385166168, -1.1500720977783203, -1.664381504058838, -0.020221740007400513, -0.08796393871307373, -0.0014250847743824124, -1.2106149196624756, -0.005951066501438618, -0.0044956328347325325, -0.8797081708908081, -0.0014465117128565907, -0.6330311894416809, -1.055958867073059, -0.003327786922454834, -0.4609959125518799, -0.02209930680692196, -7.354942499659956e-05, -1.311301275563892e-06, -1.367638111114502, -0.7265516519546509, -0.0014668668154627085, -0.05105128884315491, -0.7105411291122437, -0.020750224590301514, -6.794698856538162e-05, -0.00011181206355104223, -3.0852603912353516, -0.008663567714393139, -0.2317730188369751, -0.04230618476867676, -0.00436852453276515, -0.054038334637880325, -0.28233200311660767, -1.0206050872802734, -1.597391747054644e-05, -5.900685573578812e-05, -0.0059896972961723804, -0.007636283989995718, -0.17959176003932953, -8.940656698541716e-06, -0.0009596510208211839, 0.0, -7.617183291586116e-05, -3.576278118089249e-07, 0.0, 0.0, -0.0032916669733822346, -0.004617623053491116, -0.0006940339808352292, -3.814689989667386e-06, -0.034351520240306854, -0.0003071551618631929, -0.0007545484695583582, -0.0002619877050165087, -2.372236667724792e-05, -0.0009014118695631623, -1.4305104514278355e-06, -2.3841855067985307e-07, -0.026203254237771034, -0.015010501258075237, -1.537788011773955e-05, -0.001176023157313466, -0.009535599499940872, -0.0001433984871255234, -0.013644171878695488, -2.006289005279541, -0.1574787050485611, -0.0030907264444977045, -0.00011419598013162613, -0.7452301979064941, -0.0002456601650919765, -0.10571959614753723, -0.0005212855176068842, -0.0002383901592111215, -0.00011383838864276186, -7.152555099310121e-07, -2.3841855067985307e-07, -0.9863579273223877, -0.03304402157664299, -0.0019252828788012266, -0.34846991300582886, -0.040372904390096664, -0.0017915404168888927, -0.00028725311858579516, -0.5467342734336853, -0.00965803861618042, -7.629365427419543e-06, -4.768370445162873e-07, -4.768370445162873e-07, -0.0006603206275030971, -0.003007890423759818, -0.5744901299476624, -0.00011038171214750037, -0.03981734812259674, -1.4270763397216797, -0.0033121034502983093, -0.5211496353149414, -3.71295428276062, -0.03457518294453621, -0.22465522587299347, -0.27561691403388977, -0.00995185598731041, -0.07465934753417969, -0.110890232026577, -2.586808113846928e-05, -0.4494425058364868, -3.099393507000059e-05, -0.0021334760822355747, -0.0007678897818550467, -0.024372708052396774, 0.0, -2.7418097943154862e-06, -0.0005843124235980213, -1.1920928244535389e-07, -5.8412379075889476e-06, 0.0, -3.576278118089249e-07, -0.3927439749240875, -0.0018022499280050397, -0.0003948624071199447, -0.0009371418273076415, -0.022828513756394386, -6.174850568640977e-05, -0.011564009822905064, -2.3947091102600098, -0.03835156187415123, -0.26670071482658386, -0.0012330556055530906, -0.049567628651857376, -0.2475239634513855, -0.394072562456131, -5.6265202147187665e-05, -0.10636031627655029, -6.329813186312094e-05, -0.02185055986046791, -0.0036418798845261335, -1.6214230060577393, -1.326100468635559, -0.00023266946664080024, -2.1393990516662598, -0.034412335604429245, -0.1937679797410965, -7.283422019099817e-05, -0.00016842853801790625, -0.05771404132246971, -0.02224983088672161, -0.167697474360466, -0.003185438457876444, -0.00492016039788723, -0.019284497946500778, -0.00031537804170511663, -0.06612496078014374, -0.00023636408150196075, -0.06166067346930504, -0.09423597902059555, -1.7165990357170813e-05, -9.775113539944869e-06, -0.002571611199527979, -2.861018856492592e-06, 0.0, 0.0, -0.00032062159152701497, -4.875540980719961e-05], "finish_reason": "length"}], "metrics": {"energy": 890.9782871570587, "energy_per_token": 3.4803839342072607, "time": 22.075232, "time_per_token": 0.086231375}}
{"outputs": [{"text": "# Load CSV file using pandas\n    data = pd.read_csv(file_path)\n    text_data = data[\"Text\"].tolist()\n\n    # Process data if not empty\n    if text_data:\n        # Text vectorization\n        vectorizer = CountVectorizer(\n            lowercase=True, stop_words=STOP_WORDS, ngram_range=(1, 1)\n        )\n        vectorizer.fit(text_data)\n        text_count = vectorizer.transform(text_data)\n\n        # Get word counts\n        word_counts = dict(zip(vectorizer.get_feature_names_out(), text_count.sum(axis=0).tolist()[0]))\n\n        # Find top 10 words\n        top_ten_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:10]\n\n        # Check if there are any valid words\n        if top_ten_words:\n            # Create histogram plot\n            plt.clf()\n            word_counts = sorted", "tokens": ["#", " Load", " CS", "V", " file", " using", " pandas", "\n", "    ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Process", " data", " if", " not", " empty", "\n", "    ", "if", " text", "_", "data", ":", "\n", "        ", "#", " Text", " vector", "ization", "\n", "        ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "\n", "            ", "low", "erc", "ase", "=", "True", ",", " stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ",", " n", "gram", "_", "range", "=(", "1", ",", " ", "1", ")", "\n", "        ", ")", "\n", "        ", "vector", "izer", ".", "fit", "(", "text", "_", "data", ")", "\n", "        ", "text", "_", "count", " =", " vector", "izer", ".", "transform", "(", "text", "_", "data", ")", "\n", "\n", "        ", "#", " Get", " word", " counts", "\n", "        ", "word", "_", "counts", " =", " dict", "(", "zip", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " text", "_", "count", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]))", "\n", "\n", "        ", "#", " Find", " top", " ", "1", "0", " words", "\n", "        ", "top", "_", "ten", "_", "words", " =", " sorted", "(", "word", "_", "counts", ".", "items", "()", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "]", ",", " reverse", "=", "True", ")", "[:", "1", "0", "]", "\n", "\n", "        ", "#", " Check", " if", " there", " are", " any", " valid", " words", "\n", "        ", "if", " top", "_", "ten", "_", "words", ":", "\n", "            ", "#", " Create", " histogram", " plot", "\n", "            ", "plt", ".", "cl", "f", "()", "\n", "            ", "word", "_", "counts", " =", " sorted"], "logprobs": [-0.3697170317173004, -0.8765358924865723, -2.226022720336914, -4.8636207793606445e-05, -0.3932209312915802, -1.973532795906067, -0.09544598311185837, -0.14162471890449524, -0.0013703251024708152, -1.9604086875915527, -0.026358038187026978, -0.006584495771676302, -2.1815061700181104e-05, -0.00011932138295378536, -0.00019536493346095085, -7.068861305015162e-05, -0.0006847421173006296, -0.003438633633777499, -0.00014673586701974273, -3.099436753473128e-06, -0.0673113688826561, -0.005529347341507673, -1.9057914018630981, -1.0548620223999023, -0.24574528634548187, -0.4856249690055847, -0.002942282473668456, -0.04296097159385681, -0.24917849898338318, -0.007148877717554569, -0.014057781547307968, -0.0001436368766007945, -0.00012039413559250534, -1.4347532987594604, -0.8452718257904053, 0.0, -0.00010489867418073118, -0.11127661168575287, -0.05336759611964226, -0.0004914983292110264, -0.08852208405733109, -3.932413101196289, -4.046309947967529, -2.2686991691589355, -2.949054718017578, -0.04861276596784592, -0.7501757144927979, -0.00040844682371243834, -0.03946055471897125, -0.563190758228302, -5.8412379075889476e-06, -1.1920928244535389e-07, -0.025493238121271133, -0.001456510741263628, -0.03630060330033302, -0.06728250533342361, -3.752840518951416, -0.2163996547460556, -0.003370677586644888, -1.106418490409851, -0.001081477734260261, -0.28130218386650085, -0.0026662535965442657, -0.001262463629245758, -0.0006762839620932937, -3.933898824470816e-06, -9.536738616588991e-07, -0.00608200253918767, -1.8111457824707031, -0.007039506919682026, -1.2403267621994019, -0.00022754464589525014, -3.099436753473128e-06, -0.001865434111095965, -0.11014296859502792, -0.00015567521040793508, -0.977586567401886, -1.7881377516459906e-06, -1.7881377516459906e-06, -0.0022781153675168753, -0.026600442826747894, 0.0, -7.271740287251305e-06, -2.3841830625315197e-06, 0.0, 0.0, -0.15793229639530182, -1.2015860080718994, -0.0004602803383022547, -4.1483970562694594e-05, -0.0027844251599162817, -0.0016511153662577271, -0.1816059798002243, -8.976056415122002e-05, -0.006964810658246279, -0.3229529857635498, -0.13617725670337677, -0.07088406383991241, -0.0009402383584529161, -1.2397689715726301e-05, -0.011908392421901226, -0.0522821843624115, -0.49105459451675415, -0.07148256152868271, -0.004365794360637665, -0.0011050553293898702, -0.058201488107442856, -0.005058229435235262, -1.3232143828645349e-05, -1.1920928244535389e-07, -0.0008141063735820353, -0.002882851054891944, -0.36692431569099426, -3.9291229248046875, -0.05695477873086929, -3.3057565689086914, -0.25651636719703674, -0.11885523796081543, -0.00014447122521232814, -0.00010823617776622996, -0.05686119571328163, -0.002200802555307746, -0.0024733925238251686, -5.245195097813848e-06, -1.1920928244535389e-07, -0.000200609109015204, -0.1294911503791809, -0.4603438675403595, -0.0010827876394614577, -0.02903851680457592, -1.5267250537872314, -1.4305837154388428, -0.5035389065742493, -0.561833918094635, -5.23315102327615e-05, -0.16869394481182098, -0.001685152412392199, -0.4147878587245941, -0.013614185154438019, -1.9043885469436646, -0.008918097242712975, -0.03875530883669853, -0.0005416594794951379, -0.002711312612518668, 0.0, -2.145764938177308e-06, -0.00712307495996356, -1.1920928244535389e-07, -2.4199192921514623e-05, 0.0, -5.722029527532868e-06, -0.13886724412441254, -2.0861407392658293e-05, -0.0006575806182809174, -6.031808152329177e-05, -0.21340523660182953, -2.7418097943154862e-06, -0.00011216964776394889, -0.0018151012482121587, -0.02590174600481987, -0.00038235029205679893, -0.08407020568847656, -0.0001532914029667154, -0.0002444683632347733, -0.0017802356742322445, -0.0001512651506345719, -0.2130356729030609, -2.3841855067985307e-07, -0.039146970957517624, -0.0003014348621945828, -0.00100419158115983, -0.0018040348077192903, -0.235004261136055, -0.004308584611862898, -0.011292001232504845, -3.5196189880371094, -1.730238914489746, -0.3278553783893585, -0.003371390514075756, -0.000679500459227711, -0.2737727165222168, -0.3171883523464203, -0.0001530530134914443, -0.28709444403648376, -0.02148718200623989, -2.689164400100708, -0.27120131254196167, -0.02268856391310692, -0.008075090125203133, -0.08906487375497818, -0.014253122732043266, -0.02721872553229332, -1.4305104514278355e-06, -4.768360213347478e-06, -0.2012668401002884, -0.06278958916664124, -1.5616295058862306e-05, -8.4638240878121e-06, -0.005346286576241255, -0.00028868322260677814, -0.001740013831295073, -0.0383196659386158, -0.0004353767435532063, -0.11643416434526443, -8.439661905867979e-05, -0.00011073929636040702, -0.00030393750057555735, -1.5616295058862306e-05, -7.855583680793643e-05, -2.5033637939486653e-05, -0.00026651646476238966, -0.015390091575682163, -0.0022211424075067043, -0.0008976006065495312, -7.056941103655845e-05, -8.487341256113723e-05, -0.0010445620864629745, -0.2582860291004181, -0.0024674467276781797, -0.17257258296012878, -1.2837457656860352, -0.13796034455299377, -0.781850278377533, -0.028178350999951363, -1.2100789546966553, -0.2430320829153061, -0.06656449288129807, -0.3174351155757904, -9.190614218823612e-05, -0.07751789689064026, -0.3016525208950043, -1.1920928244535389e-07, -5.960446742392378e-06, 0.0, -1.1920928244535389e-07, -0.15457960963249207, -0.0008993871742859483, -0.0046560680493712425, -0.12954078614711761, -0.49468815326690674, -0.6391579508781433, -0.43808236718177795, -0.08516897261142731, -0.00012170527770649642, -2.5638046264648438, -5.638440416078083e-05, -3.1662538051605225, -0.04300767555832863, -0.00033063191222026944, -0.49495577812194824, -0.02225472591817379, -2.9696552753448486, -0.0904821828007698, -1.2468185424804688, -0.5170021057128906, -2.4811530113220215], "finish_reason": "length"}], "metrics": {"energy": 951.0066180191039, "energy_per_token": 3.7148696016371248, "time": 23.30838, "time_per_token": 0.091048359375}}
{"outputs": [{"text": "# Load the CSV data\n    df = pd.read_csv(file_path)\n    text_data = df['Text']\n\n    # Check if the input has any valid words\n    has_valid_words = False\n    for text in text_data:\n        if isinstance(text, str) and any(word.lower() not in STOP_WORDS for word in text.split()):\n            has_valid_words = True\n            break\n\n    if not has_valid_words:\n        print(\"No valid words found in the input.\")\n        return None\n\n    # Exclude stopwords during vectorization\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorizer.fit(text_data)\n    word_counts = vectorizer.transform(text_data)\n\n    # Convert the word counts to a DataFrame\n    word_counts_df = pd.DataFrame(word_counts.toarray(), columns=vectorizer.get_feature_names_out())\n    # Calculate the sum of counts for each word\n    word_counts_sum = word", "tokens": ["#", " Load", " the", " CS", "V", " data", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "text", "_", "data", " =", " df", "['", "Text", "']", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " has", " any", " valid", " words", "\n", "    ", "has", "_", "valid", "_", "words", " =", " False", "\n", "    ", "for", " text", " in", " text", "_", "data", ":", "\n", "        ", "if", " isinstance", "(", "text", ",", " str", ")", " and", " any", "(", "word", ".", "lower", "()", " not", " in", " ST", "OP", "_", "W", "OR", "DS", " for", " word", " in", " text", ".", "split", "()", "):", "\n", "            ", "has", "_", "valid", "_", "words", " =", " True", "\n", "            ", "break", "\n", "\n", "    ", "if", " not", " has", "_", "valid", "_", "words", ":", "\n", "        ", "print", "(", "\"", "No", " valid", " words", " found", " in", " the", " input", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Ex", "clude", " stop", "words", " during", " vector", "ization", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", "_", "data", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "transform", "(", "text", "_", "data", ")", "\n", "\n", "    ", "#", " Convert", " the", " word", " counts", " to", " a", " Data", "Frame", "\n", "    ", "word", "_", "counts", "_", "df", " =", " pd", ".", "DataFrame", "(", "word", "_", "counts", ".", "to", "array", "()", ",", " columns", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "    ", "#", " Calculate", " the", " sum", " of", " counts", " for", " each", " word", "\n", "    ", "word", "_", "counts", "_", "sum", " =", " word"], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -0.8012414574623108, -1.2993727978027891e-05, -2.28013014793396, -0.6710088849067688, -0.001774523756466806, -0.9746868014335632, -0.01085991133004427, -0.006454928312450647, -2.706014311115723e-05, -0.00010001159535022452, -0.000285584683297202, -0.00015448330668732524, -0.0008519833791069686, -0.003304499201476574, -8.964136941358447e-05, -2.145764938177308e-06, -0.07422667741775513, -0.007516436744481325, -1.1655256748199463, -0.5211271643638611, -0.2608394920825958, -0.3866659104824066, -0.002019629580900073, -0.03781818225979805, -1.2686941623687744, -0.019015517085790634, -0.0003071551618631929, -0.24841517210006714, -0.05029715225100517, -0.0005138983833603561, -0.05114609748125076, -1.1044399738311768, -0.18312852084636688, -0.2580493688583374, -0.5580093860626221, -3.2885940074920654, -1.345386028289795, -0.5773450136184692, -0.32424843311309814, -0.43102791905403137, -0.00023922442051116377, -2.681845188140869, -0.0004220310365781188, -0.07587292790412903, -0.0040643950924277306, -0.09718523174524307, -0.006999022327363491, -0.16271786391735077, -0.004806156270205975, -0.031245840713381767, -0.02398720383644104, -0.2462509721517563, -0.013449064455926418, -0.006264218129217625, -3.6954811548639555e-06, 0.0, -0.015102565288543701, -0.0007231004419736564, -0.0007996936910785735, -0.5707483887672424, -1.0582789182662964, -7.629365427419543e-06, -0.00011634149996098131, -4.8874615458771586e-05, -0.004978877957910299, -0.38633066415786743, -0.0013934198068454862, -0.5249693393707275, -0.013629119843244553, -0.10500258207321167, -0.7429719567298889, -0.5646306872367859, -7.843663479434326e-05, -0.011600539088249207, -3.099436753473128e-06, -0.001738585764542222, 0.0, -1.6689286894688848e-06, -1.5497195136049413e-06, 0.0, -1.1920928244535389e-07, -0.04672009497880936, -0.0003573255962692201, -6.603976362384856e-05, -0.018367327749729156, -0.0006607971154153347, -0.003267546882852912, -0.005385652184486389, -0.0034626307897269726, -0.0011545903980731964, -0.0003673355677165091, -0.0019085064996033907, -1.1920928244535389e-07, -1.1920928244535389e-07, 0.0, 0.0, -3.862306402879767e-05, -3.45700973412022e-05, -0.000623032043222338, -0.0044127944856882095, -0.000871159543748945, -0.002491229446604848, -0.02701963670551777, -0.00017069313616957515, -0.48669156432151794, -0.057688720524311066, -0.006993695627897978, -5.960462772236497e-07, -2.861018856492592e-06, 0.0, -3.576278118089249e-07, -0.010529912076890469, -0.011499431915581226, -0.0006553170969709754, -0.06432028114795685, -0.05425729975104332, -0.033089347183704376, -1.1056736707687378, -0.0320805162191391, -0.10517644137144089, -0.15481725335121155, -0.06435952335596085, -0.02971118874847889, -0.0886436253786087, -0.6101111173629761, -0.22025977075099945, -0.00038425691309385, -0.0004383556661196053, -0.005687009077519178, -0.011234596371650696, -0.21995031833648682, -0.012244767509400845, -0.006797759793698788, -0.0006523388437926769, -0.01763649843633175, -2.641907215118408, -0.0050171902403235435, -0.15366026759147644, -0.31345266103744507, -2.391859531402588, -0.8825933933258057, -0.0025031205732375383, -0.05844799056649208, -0.00040665941196493804, -0.39786243438720703, -0.00048744716332294047, -0.0011835244949907064, -0.00030357998912222683, -1.7881377516459906e-06, -1.9073468138230965e-06, -0.00523067032918334, -0.09538725018501282, -7.152555099310121e-07, -3.814689989667386e-06, -0.001765955938026309, -0.0068603926338255405, 0.0, -1.5497195136049413e-06, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.06886310130357742, -0.008241218514740467, -0.23597854375839233, -0.8391268849372864, -0.1009334996342659, -0.0022940528579056263, -0.000821014866232872, -0.053866200149059296, -0.002949770539999008, -2.2172682292875834e-05, -2.407998726994265e-05, -0.03376759961247444, -0.008317474275827408, -0.7323624491691589, -0.36363616585731506, -0.00015555603022221476, -0.09355542063713074, -0.006917575374245644, -0.21925070881843567, -3.099436753473128e-06, -6.115249561844394e-05, -0.006643115542829037, -0.0008777103503234684, -0.001022888463921845, -3.6954811548639555e-06, 0.0, -0.0007930232677608728, -0.39911016821861267, -0.25491079688072205, -0.0002169373765354976, -0.02919320948421955, -2.3378138542175293, -0.850550651550293, -1.8790991306304932, -0.20838463306427002, -0.21379268169403076, -0.201501727104187, -1.193139672279358, -0.001166140311397612, -0.39294639229774475, -7.83174327807501e-05, -0.1098804771900177, -0.0002754547167569399, -0.11795775592327118, -0.053946737200021744, -0.006506212521344423, -4.136476854910143e-05, -0.0009168949909508228, -7.152531907195225e-06, -0.0011526852613314986, -0.007169708609580994, -0.018836546689271927, 0.0, -2.3841855067985307e-07, -0.00934405904263258, -0.06038348004221916, -1.0728830375228426e-06, -0.0029685499612241983, -0.008379065431654453, -0.0080491928383708, -0.00014768941036891192, -0.00019071667338721454, 0.0, -1.3112935448589269e-05, -1.3947389561508317e-05, -1.1920928244535389e-07, -6.9141146923357155e-06, 0.0, -5.98412734689191e-05, -0.09744404256343842, -6.568216485902667e-05, -0.0008397151832468808, -0.004264309536665678, -2.206894874572754, -3.018709897994995, -2.505429267883301, -0.16762791574001312, -1.568458080291748, -0.05245130881667137, -2.942927360534668, -0.05316799134016037, -0.002282872796058655, -0.051651813089847565, -0.14538416266441345, -0.001327943871729076, -0.15530970692634583, -1.1205610462639015e-05, -0.2165977954864502, -0.0195431187748909, -1.0183727741241455, -0.025249170139431953, -0.0019614521879702806], "finish_reason": "length"}], "metrics": {"energy": 904.2694171447753, "energy_per_token": 3.5323024107217784, "time": 21.84972, "time_per_token": 0.08535046875}}
{"outputs": [{"text": "# Read the CSV file using pandas\n    try:\n        data = pd.read_csv(file_path)\n        # Convert the \"Text\" column to a list of strings\n        text = data[\"Text\"].astype(str).tolist()\n\n        # Initialize the vectorizer with the stopwords\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        # Fit the vectorizer on the text data\n        vectorizer.fit(text)\n\n        # Initialize an empty dictionary to store the word count\n        word_count = {}\n        # Iterate over the text to count the occurrences of each word\n        for sentence in text:\n            # Convert each sentence to lowercase\n            sentence = sentence.lower()\n            # Tokenize the sentence into words\n            words = sentence.split()\n            # Iterate over the words and update the count in the dictionary\n            for word in words:\n                if word not in STOP_WORDS:\n                    if word in word_count:\n                        word_count[word] += 1\n                    else:\n                        word_count", "tokens": ["#", " Read", " the", " CS", "V", " file", " using", " pandas", "\n", "    ", "try", ":", "\n", "        ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "#", " Convert", " the", " \"", "Text", "\"", " column", " to", " a", " list", " of", " strings", "\n", "        ", "text", " =", " data", "[", "\"", "Text", "\"", "]", ".", "ast", "ype", "(", "str", ")", ".", "tol", "ist", "()", "\n", "\n", "        ", "#", " Initialize", " the", " vector", "izer", " with", " the", " stop", "words", "\n", "        ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "        ", "#", " Fit", " the", " vector", "izer", " on", " the", " text", " data", "\n", "        ", "vector", "izer", ".", "fit", "(", "text", ")", "\n", "\n", "        ", "#", " Initialize", " an", " empty", " dictionary", " to", " store", " the", " word", " count", "\n", "        ", "word", "_", "count", " =", " {}", "\n", "        ", "#", " Iter", "ate", " over", " the", " text", " to", " count", " the", " occurrences", " of", " each", " word", "\n", "        ", "for", " sentence", " in", " text", ":", "\n", "            ", "#", " Convert", " each", " sentence", " to", " lower", "case", "\n", "            ", "sentence", " =", " sentence", ".", "lower", "()", "\n", "            ", "#", " Token", "ize", " the", " sentence", " into", " words", "\n", "            ", "words", " =", " sentence", ".", "split", "()", "\n", "            ", "#", " Iter", "ate", " over", " the", " words", " and", " update", " the", " count", " in", " the", " dictionary", "\n", "            ", "for", " word", " in", " words", ":", "\n", "                ", "if", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", ":", "\n", "                ", "    ", "if", " word", " in", " word", "_", "count", ":", "\n", "                ", "        ", "word", "_", "count", "[", "word", "]", " +=", " ", "1", "\n", "                ", "    ", "else", ":", "\n", "                ", "        ", "word", "_", "count"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -1.2212566137313843, -0.10320819169282913, -0.19672836363315582, -0.001302942750044167, -1.207392692565918, -9.226373367710039e-05, -0.0002184867626056075, -0.0026720792520791292, -1.5829545259475708, -0.032514844089746475, -0.0013062763027846813, -2.1457441107486375e-05, -5.98412734689191e-05, -0.00038628268521279097, -5.4596363042946905e-05, -0.0006679449579678476, -0.0019233791390433908, -0.00013219437096267939, -1.311301275563892e-06, -0.10531700402498245, -0.010621445253491402, -2.535362482070923, -1.2018357515335083, -3.399914264678955, -0.3231256902217865, -0.8995538949966431, -0.01680491492152214, -0.00028868322260677814, -0.0034994573798030615, -0.027637893334031105, -0.4380054473876953, -0.0634893923997879, -0.3731003701686859, -0.19341062009334564, -0.05964724346995354, -0.0012753218179568648, -0.2198900431394577, -1.089874267578125, -0.05853850021958351, -0.19159644842147827, -0.000977038755081594, -0.005590873770415783, -2.5629668016335927e-05, -2.1576648578047752e-05, -0.006922665983438492, -0.6501385569572449, -2.622600959512056e-06, -0.0006537684239447117, -0.04897357150912285, -0.0004766043566633016, -0.09816151857376099, -0.06572218239307404, -2.3841855067985307e-07, -5.435795901576057e-05, -0.004951832816004753, -2.271071672439575, -0.2317143827676773, -0.03116276115179062, -2.8182666301727295, -1.0673476457595825, -1.4497452974319458, -0.0016502822982147336, -0.5801194906234741, -1.3072370290756226, -0.7440141439437866, -0.8079928159713745, -1.1057164669036865, -0.0003623305819928646, -0.09734411537647247, -0.0002734287118073553, -0.0007911174325272441, -0.000539634027518332, -1.1920922133867862e-06, -4.6491513785440475e-06, -0.002833995968103409, -0.1043321043252945, -7.152555099310121e-07, -5.006777428206988e-06, -0.0010450384579598904, -0.01764809340238571, 0.0, -1.2874520507466514e-05, -3.6954811548639555e-06, 0.0, -4.768370445162873e-07, -0.06792816519737244, -0.004311433061957359, -1.242577314376831, -0.08381130546331406, -0.20383711159229279, -0.6800956130027771, -0.14714722335338593, -7.521823135903105e-05, -0.7139554619789124, -0.008219227194786072, -0.10991283506155014, -0.29822444915771484, -0.10834655165672302, -0.0003922408213838935, -0.017511986196041107, -0.0006333967321552336, -0.004004080779850483, -1.0967194612021558e-05, -0.005135796032845974, -0.0007270314963534474, -0.00013386306818574667, -0.00010299152199877426, -1.4412076473236084, -0.003543053288012743, -0.057549964636564255, -3.8282175064086914, -0.2261001467704773, -0.0038754846900701523, -0.44297245144844055, -0.29733723402023315, -0.17766349017620087, -0.4373722970485687, -0.1759626716375351, -3.0568606853485107, -0.0258006788790226, -0.00012814177898690104, -0.05125539004802704, -0.001466033631004393, -0.25272858142852783, -0.06508827209472656, -0.03269830346107483, -0.0003196682082489133, -0.40143144130706787, -0.316091388463974, -0.5616190433502197, -0.0003854485403280705, -0.24626122415065765, -0.5342024564743042, -0.5418192744255066, -3.8400228023529053, -0.23248186707496643, -0.3092511296272278, -1.2012226581573486, -0.004210061393678188, -0.12566789984703064, -0.260649710893631, -0.08834913372993469, -7.676783570786938e-05, -0.002149416133761406, -1.9225726127624512, -0.0009834696538746357, -0.010491102002561092, -0.00010132275929208845, -0.0002828436263371259, -0.0010895751183852553, -0.4586494266986847, -1.20033860206604, -1.9092838764190674, -0.13708484172821045, -0.012145374901592731, -0.42182254791259766, -0.022725971415638924, -1.2459899187088013, -5.113947918289341e-05, -0.10014672577381134, -0.022236306220293045, -0.002649489790201187, -1.6331539882230572e-05, -0.004631150048226118, -3.433168603805825e-05, -0.0065811797976493835, -0.026813890784978867, -0.06097865104675293, -2.628263473510742, -0.0013178244698792696, -0.047545138746500015, -0.02186513878405094, -0.07261718809604645, -0.13063007593154907, -0.10798300057649612, -7.617183291586116e-05, -0.08646805584430695, -0.005867400672286749, -0.07523735612630844, -1.0371154530730564e-05, -0.00377870025113225, -0.018833739683032036, -0.0010062160436064005, -0.03172522410750389, -0.12586909532546997, -2.0327062606811523, -6.151010165922344e-05, -0.003378281369805336, -0.21855981647968292, -0.03195963427424431, -0.6867398023605347, -0.753584086894989, -0.3802807927131653, -0.2791672348976135, -0.22638726234436035, -0.17504027485847473, -0.23608200252056122, -0.007776936050504446, -3.433168603805825e-05, -0.001652305480092764, -0.0009748950251378119, -0.00015841660206206143, -0.0006669919239357114, -1.8358061424805783e-05, -3.325883881188929e-05, -0.00015209948469419032, -0.32398444414138794, -0.038272514939308167, -0.2315845638513565, -3.576278118089249e-07, -0.01967976801097393, 0.0, -1.7881377516459906e-06, 0.0, 0.0, -1.0728830375228426e-06, -0.06873690336942673, -0.03989535570144653, -3.194758028257638e-05, -0.0003181189822498709, -0.38138970732688904, -0.0033926567994058132, -0.15321986377239227, -0.0005860995152033865, -5.960462772236497e-07, -5.960462772236497e-07, -0.007264508865773678, -0.0003693613689392805, -1.7165990357170813e-05, -0.0002796259068418294, -0.0036362973041832447, -4.768370445162873e-07, -2.3841855067985307e-07, -2.992108420585282e-05, -1.6927575416048057e-05, -0.0007688426994718611, -0.001032177242450416, -0.0004680253332480788, -2.0503786799963564e-05, -0.0007347744540311396, -0.0001287377526750788, -0.0001389883691444993, -0.00022706791060045362, -1.3232143828645349e-05, -9.500529267825186e-05, -7.271740287251305e-06, -2.8967437174287625e-05, -0.0017871374730020761, -8.344646857949556e-07, -1.1920928244535389e-07], "finish_reason": "length"}], "metrics": {"energy": 893.5115323905942, "energy_per_token": 3.4902794234007586, "time": 22.073757, "time_per_token": 0.08622561328125}}
{"outputs": [{"text": "data = pd.read_csv(file_path)\n    text = data[\"Text\"]\n\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorizer.fit(text)\n    word_counts = vectorizer.transform(text)\n    word_dict = dict(zip(vectorizer.get_feature_names_out(), word_counts.sum(axis=0).tolist()[0]))\n\n    # Sort by word count, then alphabetically in case of ties\n    word_dict = {k: v for k, v in sorted(word_dict.items(), key=lambda item: (-item[1], item[0]))}\n\n    if len(word_dict) == 0:\n        print(\"Input file is either empty or contains only stop words.\")\n        return\n\n    # Create a histogram plot\n    ax = plt.subplot()\n    plt.bar(list(word_dict.keys())[:10], list(word_dict.values())[:10])\n    plt.xticks(rotation=90)\n    ", "tokens": ["data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "text", " =", " data", "[", "\"", "Text", "\"", "]", "\n", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "transform", "(", "text", ")", "\n", "    ", "word", "_", "dict", " =", " dict", "(", "zip", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " word", "_", "counts", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]))", "\n", "\n", "    ", "#", " Sort", " by", " word", " count", ",", " then", " alphabet", "ically", " in", " case", " of", " ties", "\n", "    ", "word", "_", "dict", " =", " {", "k", ":", " v", " for", " k", ",", " v", " in", " sorted", "(", "word", "_", "dict", ".", "items", "()", ",", " key", "=", "lambda", " item", ":", " (-", "item", "[", "1", "]", ",", " item", "[", "0", "]))", "}", "\n", "\n", "    ", "if", " len", "(", "word", "_", "dict", ")", " ==", " ", "0", ":", "\n", "        ", "print", "(", "\"", "Input", " file", " is", " either", " empty", " or", " contains", " only", " stop", " words", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Create", " a", " histogram", " plot", "\n", "    ", "ax", " =", " plt", ".", "sub", "plot", "()", "\n", "    ", "plt", ".", "bar", "(", "list", "(", "word", "_", "dict", ".", "keys", "())", "[:", "1", "0", "]", ",", " list", "(", "word", "_", "dict", ".", "values", "())", "[:", "1", "0", "])", "\n", "    ", "plt", ".", "xt", "icks", "(", "rotation", "=", "9", "0", ")", "\n", "    "], "logprobs": [-3.314964771270752, -0.035221703350543976, -0.0794103667140007, -5.400034933700226e-05, -0.0003978414461016655, -0.00031156453769654036, -0.00013767725613433868, -0.0008643704932183027, -0.00556953577324748, -0.0002543602604418993, -4.887569048150908e-06, -0.1080855131149292, -0.06513295322656631, -0.7166942358016968, -1.326541543006897, -1.1560161113739014, -0.13517232239246368, -0.24026471376419067, -0.007253976073116064, -0.020505579188466072, -8.523101132595912e-05, -0.0005108005134388804, -0.4040501117706299, -0.3705425560474396, -0.0007414452848024666, -1.8445760011672974, -0.006494605448096991, -0.0009433348895981908, -0.000688077649101615, -2.622600959512056e-06, -1.4305104514278355e-06, -0.0070914714597165585, -0.2194168120622635, -2.50339189733495e-06, -1.6689286894688848e-06, -0.0016052944120019674, -0.012912941165268421, 0.0, -7.152531907195225e-06, -8.940656698541716e-06, 0.0, -1.1920928244535389e-07, -0.10763891786336899, -0.015933101996779442, -0.047124799340963364, -0.7689133286476135, -0.06811726838350296, -0.004070568829774857, -0.0014225849881768227, -0.2222689390182495, -0.004148331005126238, -0.018691591918468475, -0.004589025396853685, -0.7938284277915955, -0.5542123317718506, -0.0013512775767594576, -0.2263948619365692, -0.006994524039328098, -0.35254359245300293, -4.172316494077677e-06, -8.415821503149346e-05, -0.06797182559967041, -0.0015361425466835499, -0.005364072509109974, -0.0014454403426498175, -0.1835065335035324, -1.321330189704895, -0.4168888330459595, -0.0007684853626415133, -2.1409912109375, -0.0034528893884271383, -0.41600391268730164, -0.0032619622070342302, -0.004409590270370245, -0.0004905451205559075, -0.0003449321957305074, -1.1920928244535389e-07, -2.861018856492592e-06, -0.0009839460253715515, -4.768370445162873e-07, -9.894321920000948e-06, 0.0, -5.781483559985645e-05, -0.23242536187171936, -0.00027783826226368546, -0.0018566290382295847, -0.0003147821989841759, -0.6335493326187134, -1.0728830375228426e-06, -1.5020257706055418e-05, -0.015333038754761219, -0.42140138149261475, -0.00032908268622122705, -0.004002537112683058, -0.00019703354337252676, -0.0003066784702241421, -0.00806172750890255, -0.000501983508002013, -0.12230739742517471, -1.1920928244535389e-07, -0.0261163879185915, -0.000595034915022552, -0.004389769863337278, -0.0033286185935139656, -0.34592902660369873, -0.0003321811091154814, -2.140345811843872, -1.7116835117340088, -2.836447238922119, -2.11366605758667, -0.3078833818435669, -2.3134772777557373, -0.9857209324836731, -1.6924036741256714, -0.09502286463975906, -3.4014782905578613, -0.01714937388896942, -0.0462786890566349, -0.8463817834854126, -0.09772192686796188, -0.0002774807217065245, -2.039088010787964, -0.0008336406317539513, -0.2400294691324234, -0.2832988202571869, -1.9911459684371948, -0.22774472832679749, -0.008342300541698933, -0.010404747910797596, -0.0003337303060106933, -0.001352706109173596, -0.0001525762490928173, -0.0007111880695447326, -3.564294092939235e-05, -0.00862208567559719, -7.247662142617628e-05, -0.00295321736484766, -2.3841855067985307e-07, -1.0728830375228426e-06, -2.5510462364763953e-05, -2.264974000354414e-06, -1.0371154530730564e-05, -0.0001289761275984347, -0.004326982423663139, -0.00031716562807559967, -5.8053239627042785e-05, -0.2728034555912018, -0.00017534149810671806, -0.05196308717131615, -0.00047803416964598, -0.00024279984063468874, -3.4450891689630225e-05, -9.417489309271332e-06, -1.966933996300213e-05, -0.0005022218101657927, -6.806619057897478e-05, -5.376194530981593e-05, -0.00535221491008997, -0.0030449714977294207, -0.0016994333127513528, -0.26905137300491333, -0.00019524575327523053, -1.0008317232131958, -1.5470306873321533, -0.000376034586224705, -0.005681200884282589, -4.768370445162873e-07, -0.0005399914807640016, -0.04605637863278389, -0.33780843019485474, -0.0011071987682953477, -0.0011954312212765217, -0.025602584704756737, -0.022998150438070297, -0.0008666335488669574, -0.03613711893558502, -0.015806499868631363, -0.025418514385819435, -2.4598710536956787, -0.6246808171272278, -0.35807639360427856, -1.534725546836853, -0.004339326173067093, -0.024952024221420288, -0.2730305790901184, -0.013993717730045319, -0.009432747960090637, -0.16998855769634247, -0.2590674161911011, -0.0918804183602333, -0.000339569611242041, -0.0007291757501661777, -0.03262942284345627, -0.0190406646579504, -1.2248528003692627, -0.06617896258831024, -0.00024720950750634074, -1.3901896476745605, -2.917851448059082, -0.7946765422821045, -1.3972183465957642, -1.851709246635437, -0.547025740146637, -0.0003013156820088625, -3.399700164794922, -0.0025795777328312397, -0.20028935372829437, -0.0003623305819928646, -1.1997110843658447, -0.02925167605280876, -0.5932826995849609, -0.007561514154076576, -0.013926122337579727, -1.9537479877471924, -0.0015900599537417293, -0.22088365256786346, -0.050081513822078705, -1.8942999839782715, -3.7431014789035544e-05, -0.002519292524084449, -3.266281055402942e-05, -6.079655122448457e-06, -0.005157499574124813, -0.0001546025014249608, -0.000617432699073106, -0.19440703094005585, -0.006145390681922436, -0.0030543601606041193, -0.0004698126285802573, -9.989239333663136e-05, -0.06509765982627869, -1.7762025890988298e-05, -0.00011777184408856556, -1.5497195136049413e-06, -5.960462772236497e-07, -3.814689989667386e-06, -7.033323527139146e-06, -3.45700973412022e-05, -0.00016950124700088054, -4.470248313737102e-05, -1.4305012882687151e-05, -0.03649233654141426, -0.030139952898025513, -0.06320932507514954, -0.2947064936161041, -1.9311717551317997e-05, -0.9542897939682007, -0.00016819016309455037, -0.0005099665140733123, -0.004038156475871801, -0.034163638949394226, -0.963165819644928, -4.8040190449682996e-05, -0.012458711862564087, -0.01951611414551735, -0.07210954278707504], "finish_reason": "length"}], "metrics": {"energy": 898.3113895931248, "energy_per_token": 3.5090288655981436, "time": 22.056099, "time_per_token": 0.08615663671875}}
{"outputs": [{"text": "# Load data from CSV file\n    try:\n        df = pd.read_csv(file_path)\n    except:\n        print(f'Error reading the file \"{file_path}\". Please check the file path and try again.')\n        return\n\n    # Create a list of words\n    words = df[\"Text\"].str.lower().str.split(\" \").tolist()\n\n    # Remove stopwords\n    words_list = [word for sublist in words for word in sublist if word not in STOP_WORDS and len(word) > 1]\n\n    # Check if the input data contains valid words\n    if len(words_list) == 0:\n        print(\"The input CSV file does not contain any valid words. Please check the data and try again.\")\n        return\n\n    # Create a list of unique words\n    unique_words = list(set(words_list))\n\n    # Count the occurrences of each unique word\n    word_counts = {word: words_list.count(word) for word in unique_words}\n\n    ", "tokens": ["#", " Load", " data", " from", " CS", "V", " file", "\n", "    ", "try", ":", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "except", ":", "\n", "        ", "print", "(", "f", "'", "Error", " reading", " the", " file", " \"", "{", "file", "_", "path", "}\"", ".", " Please", " check", " the", " file", " path", " and", " try", " again", ".", "')", "\n", "        ", "return", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " words", "\n", "    ", "words", " =", " df", "[", "\"", "Text", "\"", "]", ".", "str", ".", "lower", "()", ".", "str", ".", "split", "(", "\"", " \"", ")", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "words", "_", "list", " =", " [", "word", " for", " subl", "ist", " in", " words", " for", " word", " in", " subl", "ist", " if", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", " and", " len", "(", "word", ")", " >", " ", "1", "]", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " data", " contains", " valid", " words", "\n", "    ", "if", " len", "(", "words", "_", "list", ")", " ==", " ", "0", ":", "\n", "        ", "print", "(", "\"", "The", " input", " CS", "V", " file", " does", " not", " contain", " any", " valid", " words", ".", " Please", " check", " the", " data", " and", " try", " again", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " unique", " words", "\n", "    ", "unique", "_", "words", " =", " list", "(", "set", "(", "words", "_", "list", "))", "\n", "\n", "    ", "#", " Count", " the", " occurrences", " of", " each", " unique", " word", "\n", "    ", "word", "_", "counts", " =", " {", "word", ":", " words", "_", "list", ".", "count", "(", "word", ")", " for", " word", " in", " unique", "_", "words", "}", "\n", "\n", "    "], "logprobs": [-0.3697170317173004, -0.8765358924865723, -1.7958965301513672, -0.49731191992759705, -0.4032687842845917, -9.417489309271332e-06, -0.339529424905777, -0.23896628618240356, -0.0017715488793328404, -1.070356845855713, -7.235741941258311e-05, -0.0003446938644628972, -0.0020386644173413515, -0.9652323722839355, -0.014139707200229168, -0.0019801310263574123, -4.410734163684538e-06, -7.331102824537084e-05, -5.340433563105762e-05, -0.00010358751023886725, -0.0008077934035100043, -0.0029002055525779724, -0.00018773700867313892, -2.0265558760002023e-06, -0.09163114428520203, -0.012842095457017422, -0.1406422257423401, -0.0012456761905923486, -3.323134422302246, -0.0012144817737862468, -0.0019112430745735765, -0.2512381076812744, -0.06940453499555588, -1.1684398651123047, -2.686777114868164, -1.0393290519714355, -0.9873520731925964, -1.6876920461654663, -0.7035050988197327, -2.03208065032959, -0.0008616310660727322, -0.002666966989636421, -0.00014506718434859067, -1.597391747054644e-05, -0.01422950066626072, -0.6926416754722595, -0.49849238991737366, -0.9249584674835205, -0.284275621175766, -0.2510903775691986, -0.1722797155380249, -0.24636605381965637, -0.9656438827514648, -0.00027569307712838054, -0.02855471335351467, -0.010417252779006958, -0.0020722122862935066, -0.01875266432762146, -0.023000480607151985, -0.5671465396881104, -0.06578044593334198, -0.0008051729528233409, -0.08504558354616165, -3.3913564682006836, -0.5564466714859009, -1.8268088102340698, -0.02649828791618347, -1.5130631923675537, -2.4677748680114746, -0.0006126672378741205, -0.766837477684021, -0.19651076197624207, -1.5709519386291504, -0.6346482634544373, -0.004003368318080902, -0.023210154846310616, -0.00011240804451517761, -0.0013600870734080672, -0.008200072683393955, -0.4248291254043579, -3.266281055402942e-05, -1.414016604423523, -0.0018789985915645957, -0.05620710924267769, -0.12622304260730743, -1.7881233361549675e-05, -0.17842620611190796, -0.21464002132415771, -0.14870716631412506, -0.026485051959753036, -0.010514458641409874, -0.08572014421224594, -1.1335335969924927, -1.1920928244535389e-07, -0.003377568442374468, -0.007988408207893372, -1.2316277027130127, -0.00027640812913887203, -0.030557781457901, -1.3438043594360352, -0.11552547663450241, -0.9288512468338013, -0.8195666670799255, -0.00031442465842701495, -0.5144187211990356, -1.531704068183899, -3.5922465324401855, -0.04005147144198418, -0.7445887327194214, -0.1528315544128418, -0.018324490636587143, -0.8504335880279541, -0.0007895689341239631, -0.00027724236133508384, -0.0024852838832885027, -0.006276775151491165, -0.00046719127567484975, -0.0001461399078834802, -0.001168402610346675, -5.960462772236497e-07, -0.026770949363708496, -0.03849851340055466, -0.07176120579242706, -0.00019178935326635838, -0.0020856549963355064, 0.0, -4.2676016164477915e-05, -5.960462772236497e-07, 0.0, -1.1920928244535389e-07, -2.5255866050720215, -0.599432647228241, -0.0002809368306770921, -0.039526332169771194, -0.09332306683063507, -0.17377232015132904, -0.0009527434594929218, -0.4618522822856903, -0.013825485482811928, -0.0030744450632482767, -0.06999313831329346, -0.000387831823900342, -0.16108790040016174, -0.4778171479701996, -0.10726012289524078, -0.9902320504188538, -0.43566325306892395, -1.8101377487182617, -1.7700625658035278, -1.0729856491088867, -0.041502535343170166, -0.15264245867729187, -0.00024125049822032452, -0.011257817968726158, -1.2637065649032593, -0.00017820201173890382, -0.005202446132898331, -0.0039245267398655415, -1.9073304429184645e-05, -0.0034477810841053724, -0.14550651609897614, -0.000243634101934731, -0.00028463127091526985, -0.010979712009429932, -0.0031891223043203354, -0.001674322527833283, -0.03100479021668434, -0.09451215714216232, -0.18947966396808624, -0.9973891377449036, -0.10663637518882751, -3.509962558746338, -2.312633478140924e-05, -0.23639093339443207, -0.5628876686096191, -0.0003680505615193397, -0.04607197642326355, -0.6172139048576355, -0.17801114916801453, -0.23318512737751007, -0.20610418915748596, -0.5776994228363037, -0.21949683129787445, -0.07887730002403259, -1.5144720077514648, -0.2905387580394745, -0.06805067509412766, -0.00023779425828251988, -0.00389246572740376, -0.0012732979375869036, -0.00037067217635922134, -8.40390202938579e-05, -0.016978388652205467, -0.010057131759822369, -0.12097349017858505, -0.021305035799741745, -0.0006417360855266452, -0.025539256632328033, -1.538184404373169, -0.39924684166908264, -3.292874813079834, -0.03845606744289398, -1.3536231517791748, -0.04613231122493744, -0.7455356121063232, -0.00011860620725201443, -0.055162567645311356, -0.002634033327922225, -0.0065901800990104675, -0.018044363707304, -0.7910575270652771, -0.0006436422117985785, -0.01145547442138195, -0.002078041434288025, -0.004851593170315027, -0.002034619450569153, -1.6689160474925302e-05, -0.0001627074379939586, -0.0009427393670193851, -0.04665524512529373, -0.0003564914222806692, -0.007899354211986065, -1.728082299232483, -0.17806492745876312, -1.0409477949142456, -0.0014362744987010956, -0.11358272284269333, -1.063260793685913, -0.0007651500636711717, -0.2708892226219177, -0.00012540031457319856, -0.1852434128522873, -0.00031573555315844715, -0.056710273027420044, -0.0032594669610261917, -1.1606645584106445, -0.07637965679168701, -0.0028036832809448242, -0.047584354877471924, -0.0026242840103805065, -9.059865078597795e-06, -2.038458114839159e-05, -5.364403477869928e-06, -2.1457441107486375e-05, -8.797258487902582e-05, -7.950943836476654e-05, -0.0005418977816589177, -4.994744449504651e-05, -8.583032467868179e-06, -0.0028794039972126484, -2.3841855067985307e-07, -4.768370445162873e-07, -0.009296935051679611, -0.0004444326623342931, -0.022699518129229546, -0.00016378014697693288], "finish_reason": "length"}], "metrics": {"energy": 902.5314410781856, "energy_per_token": 3.5255134417116625, "time": 22.041065, "time_per_token": 0.08609791015625}}
{"outputs": [{"text": "# Load the CSV file using pandas\n    df = pd.read_csv(file_path)\n\n    # Create an empty list to store the valid words\n    valid_words = []\n\n    # Extract the text column from the DataFrame\n    text_data = df['Text']\n\n    # Check if the input file is empty\n    if text_data.empty:\n        print(\"Input file is empty.\")\n        return None\n\n    # Vectorize the text while excluding stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    word_counts = vectorizer.fit_transform(text_data)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Calculate the word counts for each word\n    word_counts_by_word = word_counts.sum(axis=0).tolist()[0]\n\n    # Check if there are words in the data that are not stopwords\n    if not word_counts_by_word:\n        print(\"All words in the data are stop words.\")\n        return None\n\n    ", "tokens": ["#", " Load", " the", " CS", "V", " file", " using", " pandas", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " the", " valid", " words", "\n", "    ", "valid", "_", "words", " =", " []", "\n", "\n", "    ", "#", " Ext", "ract", " the", " text", " column", " from", " the", " Data", "Frame", "\n", "    ", "text", "_", "data", " =", " df", "['", "Text", "']", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " file", " is", " empty", "\n", "    ", "if", " text", "_", "data", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "Input", " file", " is", " empty", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Vector", "ize", " the", " text", " while", " excluding", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Calculate", " the", " word", " counts", " for", " each", " word", "\n", "    ", "word", "_", "counts", "_", "by", "_", "word", " =", " word", "_", "counts", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]", "\n", "\n", "    ", "#", " Check", " if", " there", " are", " words", " in", " the", " data", " that", " are", " not", " stop", "words", "\n", "    ", "if", " not", " word", "_", "counts", "_", "by", "_", "word", ":", "\n", "        ", "print", "(", "\"", "All", " words", " in", " the", " data", " are", " stop", " words", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    "], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -0.8012414574623108, -1.2993727978027891e-05, -0.17877359688282013, -1.4547033309936523, -0.1084708422422409, -0.10633490979671478, -0.0016243371646851301, -0.7274507880210876, -0.009721673093736172, -0.002103260951116681, -1.0013530300057027e-05, -6.317892984952778e-05, -0.00017045476124621928, -9.190614218823612e-05, -0.0008073169738054276, -0.0027273620944470167, -0.00013076403411105275, -3.6954811548639555e-06, -0.06798240542411804, -0.003358677960932255, -0.19250625371932983, -0.0003325386205688119, -0.027224062010645866, -2.970182418823242, -2.4778122901916504, -1.1856768131256104, -0.5017890930175781, -0.047056447714567184, -0.08839038014411926, -0.57108473777771, -2.561168670654297, -0.5711264610290527, -0.14745895564556122, -9.810443589231e-05, -0.1433672457933426, -0.004709817469120026, -0.04439014568924904, -0.028749676421284676, -0.004467269405722618, -0.0002946419408544898, -0.026493526995182037, -0.00018142008048016578, -0.017746824771165848, -2.9424901008605957, -0.027307817712426186, -0.18477676808834076, -0.42536213994026184, -0.9804962873458862, -0.5444039106369019, -0.003951124381273985, -0.9947680234909058, -0.0013324677711352706, -0.5591991543769836, -8.034383063204587e-05, -0.07326528429985046, -0.201355442404747, -1.332118272781372, -0.0007247682078741491, -0.011167875491082668, -1.1685041189193726, -0.022935237735509872, -6.615896563744172e-05, -0.12305554002523422, -0.015522144734859467, -0.0003694805200211704, -0.024046557024121284, -2.863895893096924, -0.05306704342365265, -0.15939949452877045, -1.1046390533447266, -1.6235864162445068, -0.039675746113061905, -0.095734603703022, -0.44427505135536194, -0.00011693747364915907, -0.0032367717940360308, -0.08737763017416, -2.50339189733495e-06, 0.0, -0.0016950300196185708, -0.08421990275382996, -0.018229680135846138, -0.00021264675888232887, -0.00044467096449807286, -0.02935575135052204, -0.04483044520020485, -0.008913371711969376, -1.4289753437042236, -0.1561296433210373, -0.015395608730614185, -0.0008191090892069042, -0.18780061602592468, -0.9589123725891113, -0.0001037067049765028, -0.00038187362952157855, -0.024775508791208267, -0.01002113614231348, -0.3811810314655304, -0.014068360440433025, -0.0039429315365850925, -0.00033384948619641364, -0.022982539609074593, -2.744433879852295, -0.0591091513633728, -0.038623418658971786, -0.012443995103240013, -2.443223237991333, -0.021531984210014343, -0.08739161491394043, -0.15898388624191284, -0.2390175461769104, -0.0005695389700122178, -0.2913188934326172, -0.0016086269170045853, -0.0005504761938937008, -0.0003446938644628972, -1.7881377516459906e-06, -8.344646857949556e-07, -0.004505482967942953, -0.1044309064745903, -1.4305104514278355e-06, -2.062299427052494e-05, -0.001568279112689197, -0.03240174800157547, 0.0, -1.2874520507466514e-05, -1.1920922133867862e-06, 0.0, -2.3841855067985307e-07, -0.05346263572573662, -0.0211253073066473, -0.036031678318977356, -2.140651226043701, -0.0005012686015106738, -0.29886186122894287, -0.012780425138771534, -0.01342060137540102, -5.483612312673358e-06, -6.925819616299123e-05, -0.00026639728457666934, -3.40932747349143e-05, -8.05822346592322e-05, -0.0030030175112187862, -0.0011433976469561458, -4.768360213347478e-06, -3.6954811548639555e-06, -0.012152676470577717, -0.059768304228782654, -1.3642905950546265, -0.5574585795402527, -7.223821739898995e-05, -0.0012667496921494603, -0.00013398226292338222, -0.001622313866391778, 0.0, -9.536697689327411e-06, -1.2993727978027891e-05, 0.0, -4.172316494077677e-06, 0.0, -3.576278118089249e-07, -0.350081205368042, -0.00011979816190432757, -0.000251142424531281, -0.0063755689188838005, -0.0476519875228405, -0.00023469554434996098, -0.01908709667623043, -1.1906365156173706, -0.12284164875745773, -2.2780985832214355, -1.0341249704360962, -1.4222005605697632, -0.04684977978467941, -0.3202515244483948, -0.27435302734375, -4.351044481154531e-05, -0.3716500699520111, -8.761498611420393e-05, -1.0231349468231201, -0.14578218758106232, -1.7906036376953125, -5.2927523938706145e-05, -0.029548704624176025, -0.00019059749320149422, -0.1154898926615715, -3.576278118089249e-07, -5.960462772236497e-07, -5.352353764465079e-05, -0.1695195734500885, -0.00011705666838679463, -0.00013696208770852536, -6.246371776796877e-05, -0.00033778208307921886, -0.00017736769223120064, -0.05713516101241112, -0.3015773892402649, -7.152555099310121e-07, -0.07113011926412582, -0.0006893880781717598, -0.00010179955279454589, -0.00258635520003736, -0.02962150238454342, -0.00010239553375868127, -0.008202673867344856, -2.6442432403564453, -0.02630474418401718, -0.4489421844482422, -0.008998318575322628, -3.3768186569213867, -1.7895969152450562, -0.00646925950422883, -2.396158456802368, -0.22093507647514343, -0.06775061041116714, -0.007774451747536659, -0.10234647989273071, -0.571774423122406, -0.0189651045948267, -0.00019596086349338293, -0.09547296166419983, -0.40593665838241577, -1.2545478343963623, -4.768370445162873e-07, -0.00011634149996098131, -0.002875956939533353, -8.22540732769994e-06, -1.1920928244535389e-07, -1.311301275563892e-06, -0.026384858414530754, -0.005686535034328699, -0.00017236177518498152, -0.008775833994150162, -0.001593511551618576, -0.009221935644745827, -2.333390712738037, -0.10863307863473892, -0.06398655474185944, -0.02257843315601349, -1.0098199844360352, -0.007712113205343485, -0.04163781553506851, -0.8983042240142822, -0.0811571553349495, -0.11499293148517609, -0.0001037067049765028, -7.283422019099817e-05, -0.0020542489364743233, -0.0010632582707330585, -0.0007474012672901154, -0.0008687774534337223, -0.0021877181716263294, -0.000263894529780373], "finish_reason": "length"}], "metrics": {"energy": 901.7054565982816, "energy_per_token": 3.5222869398370373, "time": 22.042286, "time_per_token": 0.0861026796875}}
{"outputs": [{"text": "try:\n        # Load CSV file using pandas\n        df = pd.read_csv(file_path)\n    except Exception as e:\n        print(f\"Error reading CSV file: {e}\")\n        return None\n\n    # Extract text column from DataFrame\n    text_col = df['Text'].tolist()\n\n    # Perform text vectorization while excluding stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorized_text = vectorizer.fit_transform(text_col)\n\n    # Extract word frequencies\n    word_frequencies = vectorizer.transform(text_col)\n\n    # Sum up word counts across all rows\n    word_counts = word_frequencies.sum(axis=0).tolist()[0]\n\n    # Get feature names (words)\n    feature_names = vectorizer.get_feature_names_out()\n\n    # Filter out empty or stop words\n    filtered_counts = []\n    filtered_words = []\n    for word, count in zip(feature_names, word_counts):\n", "tokens": ["try", ":", "\n", "        ", "#", " Load", " CS", "V", " file", " using", " pandas", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", " reading", " CS", "V", " file", ":", " {", "e", "}\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Ext", "ract", " text", " column", " from", " Data", "Frame", "\n", "    ", "text", "_", "col", " =", " df", "['", "Text", "']", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", " while", " excluding", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "ized", "_", "text", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "col", ")", "\n", "\n", "    ", "#", " Ext", "ract", " word", " frequencies", "\n", "    ", "word", "_", "f", "requ", "encies", " =", " vector", "izer", ".", "transform", "(", "text", "_", "col", ")", "\n", "\n", "    ", "#", " Sum", " up", " word", " counts", " across", " all", " rows", "\n", "    ", "word", "_", "counts", " =", " word", "_", "f", "requ", "encies", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]", "\n", "\n", "    ", "#", " Get", " feature", " names", " (", "words", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Filter", " out", " empty", " or", " stop", " words", "\n", "    ", "filtered", "_", "counts", " =", " []", "\n", "    ", "filtered", "_", "words", " =", " []", "\n", "    ", "for", " word", ",", " count", " in", " zip", "(", "feature", "_", "names", ",", " word", "_", "counts", "):", "\n"], "logprobs": [-1.954647421836853, -0.00024959311122074723, -0.008209177292883396, -0.011371678672730923, -0.4351084530353546, -0.8067979216575623, -1.9997299909591675, -4.9828242481453344e-05, -0.35525864362716675, -1.9487512111663818, -0.09605389833450317, -0.17049311101436615, -0.000395815703086555, -0.3447910249233246, -0.010758493095636368, -0.0012225781101733446, -1.4305104514278355e-06, -7.652943895664066e-05, -6.711257447022945e-05, -6.174850568640977e-05, -0.0005824061809107661, -0.0026871783193200827, -0.0002562671434134245, -4.410734163684538e-06, -0.10510840266942978, -0.0026572179049253464, -0.9531863927841187, -0.0012272215681150556, -0.8680024147033691, -0.04725181683897972, -0.07210488617420197, -0.0016217187512665987, -0.001583989942446351, -0.00020632999076042324, -0.252758651971817, -0.005373795051127672, -0.1582912653684616, -0.03022889979183674, -0.1571369767189026, -0.5378832817077637, -0.576883852481842, -3.933898824470816e-06, -0.03638429194688797, -0.13001027703285217, -0.0006497179274447262, -0.18090179562568665, -0.028357859700918198, -9.083335316972807e-05, -0.00019786784832831472, -0.00921697448939085, -0.03574853017926216, -0.6232068538665771, -0.008487108163535595, -0.017105311155319214, -0.0005061537376604974, -0.19133321940898895, -1.1304585933685303, -0.011928535997867584, -0.6792892217636108, -0.8117260336875916, -0.7203502655029297, -1.3982257843017578, -0.00171538011636585, -0.058014433830976486, -0.00011955977242905647, -0.13831356167793274, -0.4559810161590576, -1.3391871452331543, -0.0032600611448287964, -0.007146510295569897, -2.1856002807617188, -0.02341175265610218, -5.6622808187967166e-05, -2.724989652633667, -0.9960245490074158, -4.768370445162873e-07, -9.48860906646587e-05, -0.015493270941078663, -0.06152616813778877, -0.00021264675888232887, -0.0548568032681942, -1.4803847074508667, -0.07811211049556732, -0.014509875327348709, -0.00020597243565134704, -1.5916540622711182, -0.012727460823953152, -0.17027394473552704, -0.22648991644382477, -0.0513710156083107, -0.000993354362435639, -0.37478238344192505, -0.002158218529075384, -0.000516757951118052, -0.0005886013968847692, -2.50339189733495e-06, -3.576272320060525e-06, -0.005628214683383703, -0.12470526993274689, -1.7881377516459906e-06, -4.3987260141875595e-05, -0.002589089795947075, -0.014714408665895462, 0.0, -6.6756979322235566e-06, -7.152555099310121e-07, 0.0, -1.1920928244535389e-07, -0.0784749984741211, -0.013474822975695133, -0.025425022467970848, -0.4573774039745331, -2.5421578884124756, -0.022232457995414734, -0.16718202829360962, -0.02980850450694561, -0.0027348517905920744, -4.172316494077677e-06, -1.07287787614041e-05, -0.00044550508027896285, -9.179073458653875e-06, -0.00012110930401831865, -0.005743429530411959, -0.000996331567876041, -2.8132995794294402e-05, -9.536738616588991e-07, -0.00018308870494365692, -0.02484935149550438, -0.2873839735984802, -0.0001760566228767857, -0.018595997244119644, -1.4840996265411377, -0.007536431774497032, -1.145448088645935, -1.0859620571136475, -1.405346393585205, -5.411955135059543e-05, -0.08557165414094925, -0.000780754373408854, -1.4401458501815796, -6.556489552167477e-06, -8.77341881277971e-05, -0.0019904817454516888, -0.7174320220947266, -0.20454126596450806, -4.172316494077677e-06, -0.87119060754776, -0.019548730924725533, -0.24869577586650848, -7.021180499577895e-05, -2.264974000354414e-06, -0.0006395916570909321, -0.3038855791091919, -1.0381231307983398, -0.00012766500003635883, -0.01351622212678194, -3.015437126159668, -1.1666425466537476, -0.740889847278595, -2.5528173446655273, -2.733335256576538, -0.19472761452198029, -2.3600120544433594, -0.1925148069858551, -2.706014311115723e-05, -0.7706603407859802, -0.00011526874004630372, -0.22927221655845642, -0.0068878596648573875, -0.07773277163505554, -5.960462772236497e-07, -3.6000557884108275e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -7.939023635117337e-05, -0.0007141662063077092, -0.00011193125828867778, -0.0004998388467356563, -5.149708886165172e-05, -0.0001456631434848532, -0.0003251500893384218, -0.3297537863254547, -0.5309466123580933, -3.576278118089249e-07, -0.0822305753827095, -0.0004049911512993276, -8.928377064876258e-05, -0.004385971464216709, -0.0061003677546978, -7.70062324590981e-05, -0.007719447370618582, -1.2615008354187012, -3.124497652053833, -0.029825512319803238, -0.15546707808971405, -0.3163209557533264, -0.012066583149135113, -0.31212013959884644, -3.540453326422721e-05, -0.7322486639022827, -8.22540732769994e-06, -0.00034898388548754156, -7.509902934543788e-05, -0.02465304546058178, -0.00010382589971413836, -3.2186455882765586e-06, -1.7046782886609435e-05, 0.0, -4.529942543740617e-06, 0.0, -1.1920928244535389e-07, -0.34096795320510864, -8.141662692651153e-05, -0.0022734766826033592, -0.0019355150870978832, -0.011324179358780384, -9.214453893946484e-05, -0.009498758241534233, -1.418857455253601, -0.724514901638031, -3.26542329788208, -3.568398952484131, -0.22489295899868011, -0.5017969608306885, -0.25870147347450256, -5.090107151772827e-05, -0.8040840029716492, -0.0015332859475165606, -2.494870901107788, -0.037188272923231125, -1.3792253732681274, -0.0011041027028113604, -0.00018273114983458072, -0.004157234448939562, -2.0265558760002023e-06, -0.46606093645095825, -0.00017653337272349745, -0.0002485204895492643, -9.214453893946484e-05, -0.06480228900909424, -0.03006904572248459, -0.8280321955680847, -0.16494232416152954, -0.01273028552532196, -0.002932298230007291, -0.0007833749405108392, -9.679325739853084e-05, -0.00015770144818816334, 0.0, -3.576278118089249e-07, -0.0001137191939051263, -8.034383063204587e-05, 0.0, -7.629365427419543e-06, -0.0002643712505232543, -0.00010680581908673048], "finish_reason": "length"}], "metrics": {"energy": 894.7580640439984, "energy_per_token": 3.4951486876718687, "time": 21.845226, "time_per_token": 0.0853329140625}}
{"outputs": [{"text": "try:\n        df = pd.read_csv(file_path, squeeze=True)\n        text = df['Text'].fillna('')  # Fill NaN values with empty string\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None\n\n    # Check if all words are stop words or empty\n    all_stopwords = all(set(t.split()).issubset(STOP_WORDS) or t == '' for t in text)\n\n    if all_stopwords:\n        print(\"The provided CSV contains only stop words or empty data.\")\n        return None\n\n    cv = CountVectorizer(stop_words=STOP_WORDS)\n    word_count_vector = cv.fit_transform(text)\n\n    word_list = cv.get_feature_names()\n    count_list = word_count_vector.toarray().sum(axis=0)\n\n    # Remove stop words from word_list and count_list\n    word_list = [word_list[i] for i in range(len(", "tokens": ["try", ":", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ",", " squeeze", "=", "True", ")", "\n", "        ", "text", " =", " df", "['", "Text", "']", ".", "fill", "na", "('", "')", "  ", "#", " Fill", " Na", "N", " values", " with", " empty", " string", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", " reading", " file", ":", " {", "e", "}\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " all", " words", " are", " stop", " words", " or", " empty", "\n", "    ", "all", "_", "stop", "words", " =", " all", "(", "set", "(", "t", ".", "split", "())", ".", "iss", "ub", "set", "(", "ST", "OP", "_", "W", "OR", "DS", ")", " or", " t", " ==", " ''", " for", " t", " in", " text", ")", "\n", "\n", "    ", "if", " all", "_", "stop", "words", ":", "\n", "        ", "print", "(", "\"", "The", " provided", " CS", "V", " contains", " only", " stop", " words", " or", " empty", " data", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "word", "_", "count", "_", "vector", " =", " cv", ".", "fit", "_", "transform", "(", "text", ")", "\n", "\n", "    ", "word", "_", "list", " =", " cv", ".", "get", "_", "feature", "_", "names", "()", "\n", "    ", "count", "_", "list", " =", " word", "_", "count", "_", "vector", ".", "to", "array", "()", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "    ", "#", " Remove", " stop", " words", " from", " word", "_", "list", " and", " count", "_", "list", "\n", "    ", "word", "_", "list", " =", " [", "word", "_", "list", "[", "i", "]", " for", " i", " in", " range", "(", "len", "("], "logprobs": [-1.954647421836853, -0.00024959311122074723, -0.008209177292883396, -0.011371678672730923, -1.775970697402954, -0.017160270363092422, -0.008630476891994476, -1.0371154530730564e-05, -0.0002579356369096786, -0.00044824567157775164, -9.619726915843785e-05, -0.0009266611887142062, -0.005034744739532471, -0.00022623363474849612, -7.152555099310121e-07, -2.0965816974639893, -3.8386194705963135, -0.009129801765084267, -0.004298020154237747, -0.21269920468330383, -0.08827175945043564, -1.0538675785064697, -1.227526068687439, -1.0465993881225586, -0.22127288579940796, -1.1088624000549316, -0.037698566913604736, -0.0033182818442583084, -0.687089204788208, -2.939159393310547, 0.0, -0.08592440187931061, -0.01757887192070484, -2.2230002880096436, -9.083335316972807e-05, -1.7362959384918213, -2.0466411113739014, -0.057080890983343124, -0.06932323426008224, -0.045702606439590454, -0.2568439245223999, -0.8042563199996948, -0.04721759259700775, -1.785125494003296, -0.0006959400488995016, -0.5828835964202881, -0.03590909019112587, -0.05707942694425583, -0.0034683330450206995, -0.003567404579371214, -0.0005000770906917751, -0.15214787423610687, -0.012807023711502552, -0.1794358491897583, -0.07709639519453049, -0.1741485744714737, -0.20508500933647156, -1.9796128273010254, -0.6206179857254028, -0.0008599635912105441, -0.237533837556839, -0.05302431061863899, -0.00018785618885885924, -0.001116129569709301, -0.022584259510040283, -0.039452191442251205, -0.693692147731781, -0.006678522098809481, -0.02528264746069908, -0.0005284343496896327, -1.1779567003250122, -2.1583738327026367, -0.2125120311975479, -2.453484058380127, -1.2633723020553589, -0.8876591920852661, -0.1473635882139206, -0.5741487741470337, -1.3426874876022339, -0.40326327085494995, -0.8183279037475586, -0.0003225283289793879, -1.5595062971115112, -4.8874615458771586e-05, -0.20424051582813263, -1.2232295274734497, -0.2631464898586273, -1.134109377861023, -0.13329723477363586, -1.9609514474868774, -0.0038140900433063507, -1.7729802131652832, -0.03829970583319664, -0.06411805003881454, -0.02017582766711712, -0.22252890467643738, -0.0003971264814026654, -3.576278118089249e-07, 0.0, -7.223821739898995e-05, -0.30880698561668396, 0.0, -5.471556869451888e-05, -1.0728830375228426e-06, 0.0, 0.0, -0.004279147367924452, -0.40806668996810913, -2.001756429672241, -0.8106442093849182, -0.14848174154758453, -0.014750940725207329, -0.0012410327326506376, -0.0002787916746456176, -0.0059235733933746815, -0.06461456418037415, -0.0029094768688082695, -1.3885737657546997, -6.758938252460212e-05, -0.22879627346992493, -0.17398351430892944, -0.0010593285551294684, -2.0265558760002023e-06, -1.1920922133867862e-06, -0.24869400262832642, -0.014943445101380348, -0.000366263062460348, -0.046744439750909805, -0.04489906132221222, -0.022921491414308548, -1.4938771724700928, -2.6929879188537598, -1.4547525644302368, -3.6954195820726454e-05, -1.6171677112579346, -0.08774175494909286, -0.04387366771697998, -0.29357025027275085, -0.05213000252842903, -0.06776776164770126, -1.649106740951538, -0.10078401863574982, -0.2805063724517822, -0.0005970602505840361, -0.00013255194062367082, -0.02193441428244114, -0.010964619927108288, -0.004193441942334175, -0.002078874269500375, -0.022759297862648964, -0.0003895000845659524, -3.114166498184204, -0.007271017879247665, -0.0009471459779888391, -5.483612312673358e-06, -2.3841855067985307e-07, -0.01253464724868536, -0.34999677538871765, -8.344646857949556e-07, -6.9141146923357155e-06, -0.0025122768711298704, -0.012454826384782791, 0.0, -7.152531907195225e-06, -1.1920928244535389e-07, 0.0, 0.0, -0.10545475780963898, -0.0460548996925354, -0.0951404795050621, -1.7130705118179321, -0.002806655131280422, -0.6322993040084839, -0.3348841071128845, -0.02503190003335476, -0.00098204065579921, -0.00022968991834204644, -1.4543427823809907e-05, -0.005527450703084469, -0.0013074668822810054, -0.00032431588624604046, -0.0033702023793011904, -0.007895687595009804, -0.14177319407463074, -0.02508142590522766, -0.3324378728866577, -0.00027581225731410086, -1.796724796295166, -0.009305085055530071, -0.34462770819664, -0.0032253647223114967, -1.2207798957824707, -2.264974000354414e-06, -0.013038380071520805, -1.1920928244535389e-07, -0.0001934579631779343, 0.0, -4.0531076592742465e-06, -1.0648139715194702, -0.02887105941772461, -0.12134470045566559, -0.39217570424079895, -0.0009286858257837594, -0.021649230271577835, -0.0002420847595203668, -0.0044519598595798016, -1.6689286894688848e-06, -2.50339189733495e-06, -1.6689286894688848e-06, -8.344646857949556e-07, -0.0014117523096501827, -0.2005184143781662, -2.2172682292875834e-05, -9.858122211880982e-05, -0.0011157722910866141, -0.01276665460318327, -2.312633478140924e-05, -2.3245540432981215e-05, -0.00010144196130568162, -6.460934673668817e-05, -0.0005920564290136099, -0.049219973385334015, -0.5334687829017639, -7.652943895664066e-05, -1.1046864986419678, -1.836303472518921, -0.3963552415370941, -0.15423484146595, -0.4080072343349457, -0.6984753012657166, -0.3666939437389374, -0.003502308391034603, -0.0795692428946495, -0.11266515403985977, -0.00021288513380568475, -0.00011062010162277147, -0.08995280414819717, -0.00047398300375789404, -0.917499840259552, -0.0002708068350329995, -0.21590939164161682, -0.34885725378990173, -0.016585098579525948, -0.11303094029426575, -0.362326979637146, -9.011816291604191e-05, -4.1960789531003684e-05, -0.005652159918099642, -6.603976362384856e-05, -0.0003081085451412946, -7.486063259420916e-05, -0.11923559010028839, -0.00017093151109293103, -2.861018856492592e-06, -0.0036262013018131256, -9.298280929215252e-06], "finish_reason": "length"}], "metrics": {"energy": 924.1724710369103, "energy_per_token": 3.610048714987931, "time": 22.068953, "time_per_token": 0.08620684765625}}
{"outputs": [{"text": "# Read data from the file\n    try:\n        data = pd.read_csv(file_path)\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return\n\n    # Check if the 'Text' column exists\n    if \"Text\" not in data.columns:\n        print(\"The 'Text' column is missing in the CSV file.\")\n        return\n\n    # Get the text data from the 'Text' column\n    text_data = data[\"Text\"].tolist()\n\n    # Perform text vectorization using CountVectorizer\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    word_counts = vectorizer.fit_transform(text_data).toarray().sum(axis=0)\n\n    # Get the most common words\n    most_common_words = vectorizer.get_feature_names_out()[np.argsort(word_counts)[::-1]][:10]\n    word_counts_sorted = word_counts[np.argsort(word_counts)[::-1", "tokens": ["#", " Read", " data", " from", " the", " file", "\n", "    ", "try", ":", "\n", "        ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", " reading", " file", ":", " {", "e", "}\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Check", " if", " the", " '", "Text", "'", " column", " exists", "\n", "    ", "if", " \"", "Text", "\"", " not", " in", " data", ".", "columns", ":", "\n", "        ", "print", "(", "\"", "The", " '", "Text", "'", " column", " is", " missing", " in", " the", " CS", "V", " file", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Get", " the", " text", " data", " from", " the", " '", "Text", "'", " column", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", " using", " Count", "Vector", "izer", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", ".", "to", "array", "()", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "    ", "#", " Get", " the", " most", " common", " words", "\n", "    ", "most", "_", "common", "_", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()[", "np", ".", "args", "ort", "(", "word", "_", "counts", ")[", "::", "-", "1", "]", "][", ":", "1", "0", "]", "\n", "    ", "word", "_", "counts", "_", "s", "orted", " =", " word", "_", "counts", "[", "np", ".", "args", "ort", "(", "word", "_", "counts", ")[", "::", "-", "1"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -2.2162327766418457, -0.18381834030151367, -1.2013328075408936, -2.053513765335083, -0.14959770441055298, -0.0013854438439011574, -1.1300255060195923, -0.00010787858627736568, -0.0003923600015696138, -0.002147988649085164, -0.6107919216156006, -0.031463611871004105, -0.008025305345654488, -1.645074735279195e-05, -0.00022468426323030144, -9.858122211880982e-05, -0.00010072677832795307, -0.0009626284008845687, -0.003532599890604615, -0.00020966715237591416, -1.4305104514278355e-06, -0.13357743620872498, -0.03278679400682449, -0.16844798624515533, -0.0014156806282699108, -0.7304529547691345, -0.04848591983318329, -0.06013386324048042, -0.0005746620590798557, -0.0017338256584480405, -0.00027021096320822835, -0.10786047577857971, -0.005942178890109062, -0.17756187915802002, -0.0368272103369236, -0.10699012875556946, -0.09764505922794342, -1.2499114274978638, -0.2375842183828354, -0.0006052807439118624, -0.2816748023033142, -0.03903863579034805, -9.881961887003854e-05, -0.0009139174944721162, -0.00743550481274724, -0.02608247473835945, -0.8228135108947754, -0.018299441784620285, -0.0004430027911439538, -0.12917712330818176, -0.652929425239563, -0.10912594199180603, -0.18122725188732147, -2.0383639335632324, -0.014045557007193565, -0.00020752183627337217, -0.0015881556319072843, -0.19820870459079742, -0.6044350266456604, -2.90866428258596e-05, -0.011415168642997742, -0.2914680242538452, -0.0007820646860636771, -1.9311717551317997e-05, -0.0042244247160851955, -5.8412379075889476e-06, -0.0014054430648684502, -0.03814056143164635, -0.0002563863235991448, -0.0020624573808163404, -9.119095193454996e-05, -5.0424259825376794e-05, -0.026040315628051758, -0.0006335158832371235, -0.08953619003295898, -0.829380214214325, -0.5872482061386108, -0.002222926588729024, -7.688703772146255e-05, -0.0002244459028588608, -0.5896758437156677, -0.7855019569396973, -0.5232700705528259, -9.536288416711614e-05, -1.1889402866363525, -1.1920922133867862e-06, -0.11155387759208679, -0.038755424320697784, -0.06135834380984306, -3.766942609217949e-05, -4.7444173105759546e-05, -0.0015117417788133025, -0.003274438437074423, -0.0027249844279140234, -0.0036593396216630936, -0.00038938093348406255, -0.04003177210688591, -1.9647440910339355, -0.2101033329963684, -0.37153875827789307, -0.3758300542831421, -0.5086217522621155, -0.02975030057132244, -0.15087492763996124, -0.0004957877099514008, -6.12716976320371e-05, -0.00018082413589581847, -0.04211236163973808, -5.829164365422912e-05, -0.04749000445008278, -0.20996670424938202, -0.03489250689744949, -0.00039915222441777587, -0.008123217150568962, -0.02836388535797596, -0.00018666432879399508, -4.8397800128441304e-05, -6.9141146923357155e-06, -3.290122185717337e-05, -1.1824606657028198, -0.7372061014175415, -1.1920928244535389e-07, -2.3245540432981215e-05, -0.003799601923674345, -0.032266709953546524, -0.0002530493075028062, -0.024728991091251373, -1.5933407545089722, -0.13194939494132996, -0.04124438390135765, -0.00017808281700126827, -1.9612081050872803, -0.11460958421230316, -0.00691769365221262, -7.176141662057489e-05, -0.32765695452690125, -0.0003631647559814155, -0.24607427418231964, -0.00034874555421993136, -0.0002236116270069033, -0.00010823617776622996, -2.0265558760002023e-06, -2.861018856492592e-06, -0.010564002208411694, -0.2987911105155945, -1.1920922133867862e-06, -1.1920922133867862e-06, -0.0008054111385717988, -0.011998621746897697, 0.0, -3.4570634852570947e-06, -4.768370445162873e-07, 0.0, 0.0, -0.14256551861763, -0.01673739217221737, -0.013679919764399529, -1.662273645401001, -0.00021455370006151497, -0.1731322705745697, -0.008248429745435715, -0.009873009286820889, -1.1920922133867862e-06, -3.5523738915799186e-05, -0.00013469743134919554, -2.8609820219571702e-05, -0.00013374387344811112, -0.001938013592734933, -0.0017300175968557596, -7.748573807475623e-06, -1.0132738680113107e-05, -0.0001486429391661659, -2.0943734645843506, -1.3799779415130615, -8.22540732769994e-06, -3.2782016205601394e-05, -0.14155198633670807, -0.0030651751440018415, -1.8954096958623268e-05, -0.00033682872890494764, -9.536288416711614e-05, -3.671578815556131e-05, -0.0003948624071199447, -0.00933744478970766, -0.7937915325164795, -7.188061863416806e-05, -0.010510919615626335, -0.5973848700523376, -0.11617554724216461, -1.3396562337875366, -0.11121613532304764, -0.02889399044215679, -1.0929393768310547, -6.878139538457617e-05, -0.37265872955322266, -1.4066597032069694e-05, -0.0014588914345949888, -0.15327918529510498, -0.10339085012674332, -0.013221215456724167, -0.636883556842804, 0.0, -2.3841830625315197e-06, -0.002442355267703533, 0.0, -1.3589766240329482e-05, 0.0, -2.7418097943154862e-06, -0.30507808923721313, -6.544376083184034e-05, -0.439450740814209, -0.45214393734931946, -2.932505594799295e-05, -0.014475684612989426, -4.768370445162873e-07, -0.11225864291191101, -0.0010875507723540068, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.7220419645309448, -8.320462075062096e-05, -3.969590397900902e-05, -1.3112935448589269e-05, -0.42452389001846313, -4.577531944960356e-05, -0.012110396288335323, -0.003964660689234734, -0.001401514746248722, -0.00015841660206206143, -0.0036434237845242023, -0.5541282892227173, -0.24274662137031555, -6.305972783593461e-05, -0.1514628827571869, -0.9177388548851013, -0.1314670294523239, -1.8358061424805783e-05, -0.00031275625224225223, -0.33366549015045166, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.000276765669696033, -0.0024406902957707644, -3.576278118089249e-07, -7.10462118149735e-05, 0.0, -0.0013910388806834817, -0.0003518439189065248, 0.0, -3.6954811548639555e-06, -0.2911023199558258, -2.3841855067985307e-07, -2.8013790142722428e-05, -1.1920928244535389e-07], "finish_reason": "length"}], "metrics": {"energy": 904.8522073450089, "energy_per_token": 3.534578934941441, "time": 22.06779, "time_per_token": 0.0862023046875}}
{"outputs": [{"text": "data = pd.read_csv(file_path)\n\n    if data.empty:  # Check if the dataset is empty\n        print(\"No data to process.\")\n        return None\n\n    # Create a CountVectorizer object, excluding stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n    # Fit the vectorizer on the input text data\n    vectorizer.fit(data[\"Text\"])\n\n    # Extract the unique words from the vectorizer\n    unique_words = vectorizer.get_feature_names_out()\n\n    # Initialize an empty dictionary to store the word frequencies\n    word_frequencies = {}\n\n    # Iterate through each word in the input text data\n    for word in data[\"Text\"]:\n        # Convert the word to lowercase\n        word = word.lower()\n\n        # Check if the word is already in the dictionary\n        if word in word_frequencies:\n            word_frequencies[word] += 1\n        else:\n            word_frequencies[word] = 1\n\n    #", "tokens": ["data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "if", " data", ".", "empty", ":", "  ", "#", " Check", " if", " the", " dataset", " is", " empty", "\n", "        ", "print", "(", "\"", "No", " data", " to", " process", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Create", " a", " Count", "Vector", "izer", " object", ",", " excluding", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "\n", "    ", "#", " Fit", " the", " vector", "izer", " on", " the", " input", " text", " data", "\n", "    ", "vector", "izer", ".", "fit", "(", "data", "[", "\"", "Text", "\"", "])", "\n", "\n", "    ", "#", " Ext", "ract", " the", " unique", " words", " from", " the", " vector", "izer", "\n", "    ", "unique", "_", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " dictionary", " to", " store", " the", " word", " frequencies", "\n", "    ", "word", "_", "f", "requ", "encies", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " word", " in", " the", " input", " text", " data", "\n", "    ", "for", " word", " in", " data", "[", "\"", "Text", "\"", "]:", "\n", "        ", "#", " Convert", " the", " word", " to", " lower", "case", "\n", "        ", "word", " =", " word", ".", "lower", "()", "\n", "\n", "        ", "#", " Check", " if", " the", " word", " is", " already", " in", " the", " dictionary", "\n", "        ", "if", " word", " in", " word", "_", "f", "requ", "encies", ":", "\n", "            ", "word", "_", "f", "requ", "encies", "[", "word", "]", " +=", " ", "1", "\n", "        ", "else", ":", "\n", "            ", "word", "_", "f", "requ", "encies", "[", "word", "]", " =", " ", "1", "\n", "\n", "    ", "#"], "logprobs": [-3.314964771270752, -0.035221703350543976, -0.0794103667140007, -5.400034933700226e-05, -0.0003978414461016655, -0.00031156453769654036, -0.00013767725613433868, -0.0008643704932183027, -0.00556953577324748, -0.0002543602604418993, -4.887569048150908e-06, -0.1080855131149292, -0.06513295322656631, -0.6706641912460327, -0.0007003477076068521, -0.724590003490448, -0.07275841385126114, -0.03414048254489899, -0.054080571979284286, -0.1783248782157898, -2.859741449356079, -5.94836674281396e-05, -0.36119547486305237, -0.1291768103837967, -0.07092004269361496, -3.0662355422973633, -0.005620509851723909, -0.0031237637158483267, -0.033817730844020844, -0.0003398079425096512, -0.04597907513380051, -0.01883467473089695, -0.014983844012022018, -1.384455919265747, -0.20075564086437225, -1.9412645101547241, -0.07629792392253876, -0.27978479862213135, -0.6895637512207031, -0.00022754464589525014, -0.006075248587876558, -0.03647072985768318, -0.0071874624118208885, -0.5360008478164673, -0.01374482735991478, -0.013586314395070076, -0.0005463061388581991, -0.91712886095047, -2.8943166732788086, -0.1584388017654419, -1.5403716564178467, -0.019567200914025307, -0.00011777184408856556, -1.288044810295105, -3.3326005935668945, -0.5167815685272217, -0.5318474769592285, -0.09321176260709763, -0.3120337426662445, -0.00041654970846138895, -0.31216350197792053, -0.00047195740626193583, -0.0009819215629249811, -0.00020966715237591416, -2.7418097943154862e-06, -7.271740287251305e-06, -0.0021615491714328527, -0.18252800405025482, -4.768370445162873e-07, -2.145764938177308e-06, -0.0014603198505938053, -0.08296463638544083, 0.0, -1.680836794548668e-05, -3.576278118089249e-07, 0.0, 0.0, -0.06810947507619858, -0.005712967365980148, -0.03731139004230499, -0.00017581824795342982, -0.05365506187081337, -0.5674011707305908, -1.2032240629196167, -0.256000816822052, -8.368142152903602e-05, -0.3747565746307373, -0.02345949597656727, -2.001735210418701, -0.9715591669082642, -0.8972947001457214, -0.10694577544927597, -4.160317621426657e-05, -0.04309377446770668, -0.0005404680268839002, -0.0032522189430892467, -1.8358061424805783e-05, -0.17157666385173798, -0.0038392660208046436, -0.4253760874271393, -0.0011541141429916024, -0.01266684290021658, -5.9960475482512265e-05, -0.04234229028224945, -0.002370406873524189, -0.0617707297205925, -0.0001380348257953301, -0.06937839835882187, -1.0307867527008057, -0.009047227911651134, -0.23448361456394196, -1.8398064374923706, -0.04009510576725006, -0.9700548648834229, -0.013841357082128525, -0.36193135380744934, -0.0015930355293676257, -1.011376142501831, -2.5033637939486653e-05, -0.7521681189537048, -0.0001426833332516253, -0.0026982349809259176, -0.0032004110980778933, -0.2719373404979706, -2.3841855067985307e-07, -1.0013530300057027e-05, -0.01664196141064167, 0.0, -0.0019119569333270192, 0.0, -4.768370445162873e-07, -0.1504175066947937, -0.00036376056959852576, -0.0019180249655619264, -0.002127052517607808, -0.027287980541586876, -0.00024375328212045133, -0.26788055896759033, -2.7502779960632324, -0.7700619101524353, -0.013100270181894302, -0.39599451422691345, -0.2149495780467987, -0.2730318307876587, -1.4184545278549194, -0.3199113607406616, -1.9721713066101074, -0.011128854006528854, -2.7179348762729205e-05, -0.06507565081119537, -0.0006742588011547923, -1.1597739458084106, -6.258291978156194e-05, -0.00016604475968051702, -0.0045387111604213715, -0.07789158076047897, -0.0002643712505232543, -0.047221001237630844, -9.667406266089529e-05, -0.07529716938734055, -0.6325381994247437, -0.0001726001501083374, -1.594059705734253, -0.787346601486206, -1.379711627960205, -0.804201066493988, -0.04630691558122635, -2.5171029567718506, -0.44021186232566833, -0.30824771523475647, -0.03820573538541794, -6.0437283536884934e-05, -0.0027212989516556263, -0.2858577072620392, -0.018790921196341515, -0.8804802298545837, -0.013333323411643505, -2.2649508537142538e-05, -5.5549986427649856e-05, -4.410734163684538e-06, -0.01850881800055504, -0.0005094899097457528, -0.04685751721262932, -0.08722753077745438, -2.290947675704956, -0.37114018201828003, -0.5808464884757996, -0.06857340782880783, -0.27816763520240784, -0.016173001378774643, -1.7449415922164917, -7.128461584215984e-05, -0.11981991678476334, -0.053083211183547974, -0.010672751814126968, -5.3881147323409095e-05, -0.004149874206632376, -1.5735502529423684e-05, -0.004807105287909508, -0.6662094593048096, -0.00010847456724150106, -0.04043152183294296, -0.5512954592704773, -0.002766355639323592, -0.042528871446847916, -0.01325568463653326, -0.1549871414899826, -2.4676196575164795, -0.17853321135044098, -0.03200789541006088, -0.2659260928630829, -0.29391947388648987, -2.0503786799963564e-05, -0.00646925950422883, -0.0013808010844513774, -0.02797979861497879, -0.017921190708875656, -8.344646857949556e-07, 0.0, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.052543383091688156, -0.0009860896971076727, -0.0004536076739896089, -1.5099419355392456, -6.341733387671411e-05, -8.701899787411094e-05, -1.1920928244535389e-07, -9.417489309271332e-06, -6.48477507638745e-05, -8.320462075062096e-05, -0.0011326810345053673, -0.0036953275557607412, -0.0003805628512054682, -6.05564855504781e-05, -0.6001976728439331, -0.004142395220696926, -0.0040903957560658455, -4.172316494077677e-06, -0.0031648806761950254, -0.00015031162183731794, -0.02304544672369957, -1.311301275563892e-06, 0.0, -1.1920928244535389e-07, -3.576278118089249e-07, -3.9219088648678735e-05, -5.364403477869928e-06, -1.3589766240329482e-05, -1.6331539882230572e-05, -7.64102369430475e-05, -0.0005190217634662986, -0.002059364225715399, -0.0014459164813160896, -0.0031928059179335833, -0.022515028715133667], "finish_reason": "length"}], "metrics": {"energy": 940.1734017200479, "energy_per_token": 3.672552350468937, "time": 22.254452, "time_per_token": 0.086931453125}}
{"outputs": [{"text": "# Read the CSV file into a Pandas DataFrame\n    df = pd.read_csv(file_path)\n\n    # Check if the \"Text\" column exists\n    if \"Text\" not in df.columns:\n        raise ValueError(\"The CSV file does not contain a 'Text' column.\")\n\n    # Select the \"Text\" column\n    text = df[\"Text\"]\n\n    # Check if the text column is empty\n    if text.empty:\n        print(\"The CSV file is empty or contains no text data.\")\n        return\n\n    # Preprocess the text data by removing stopwords\n    preprocessed_text = [\n        \" \".join([word for word in line.split() if word not in STOP_WORDS])\n        for line in text\n    ]\n\n    # Check if all preprocessed lines are empty after stopword removal\n    if all(line == \"\" for line in preprocessed_text):\n        print(\n            \"The text data contains only stopwords. Please remove them or adjust the list of stopwords.\"\n        )\n        return\n\n", "tokens": ["#", " Read", " the", " CS", "V", " file", " into", " a", " Pand", "as", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " \"", "Text", "\"", " column", " exists", "\n", "    ", "if", " \"", "Text", "\"", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " CS", "V", " file", " does", " not", " contain", " a", " '", "Text", "'", " column", ".", "\"", ")", "\n", "\n", "    ", "#", " Select", " the", " \"", "Text", "\"", " column", "\n", "    ", "text", " =", " df", "[", "\"", "Text", "\"", "]", "\n", "\n", "    ", "#", " Check", " if", " the", " text", " column", " is", " empty", "\n", "    ", "if", " text", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " CS", "V", " file", " is", " empty", " or", " contains", " no", " text", " data", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Pre", "process", " the", " text", " data", " by", " removing", " stop", "words", "\n", "    ", "pre", "processed", "_", "text", " =", " [", "\n", "        ", "\"", " \"", ".", "join", "([", "word", " for", " word", " in", " line", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", "])", "\n", "        ", "for", " line", " in", " text", "\n", "    ", "]", "\n", "\n", "    ", "#", " Check", " if", " all", " pre", "processed", " lines", " are", " empty", " after", " stop", "word", " removal", "\n", "    ", "if", " all", "(", "line", " ==", " \"", "\"", " for", " line", " in", " pre", "processed", "_", "text", "):", "\n", "        ", "print", "(", "\n", "            ", "\"", "The", " text", " data", " contains", " only", " stop", "words", ".", " Please", " remove", " them", " or", " adjust", " the", " list", " of", " stop", "words", ".", "\"", "\n", "        ", ")", "\n", "        ", "return", "\n", "\n"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -2.4859089851379395, -0.011098910123109818, -2.459862470626831, -5.960462772236497e-07, -0.12715177237987518, -0.0018386616138741374, -0.10921315103769302, -0.0021416840609163046, -0.5494868755340576, -0.014768559485673904, -0.002471370855346322, -9.179073458653875e-06, -0.00014101465058047324, -0.0001679517881711945, -0.00017081231635529548, -0.0008965287124738097, -0.003956230357289314, -0.0001280225842492655, -4.887569048150908e-06, -0.07295536249876022, -0.004170292988419533, -0.1610761433839798, -0.0003408804477658123, -0.03442488983273506, -1.1553415060043335, -0.06230414658784866, -0.2268875241279602, -1.6467535495758057, -0.010375017300248146, -0.00014280252798926085, -0.0007607426377944648, -0.34383517503738403, -1.0978710651397705, -0.0001560327800689265, -0.013602660968899727, -0.044359128922224045, -0.0011545903980731964, -2.062299427052494e-05, -0.030269263312220573, -4.6491513785440475e-06, -0.0007784912013448775, -0.016535617411136627, -0.0001629458274692297, -0.003287270897999406, -0.00014006110723130405, -0.0005970602505840361, -0.8238181471824646, -0.050369925796985626, -2.0265558760002023e-06, -0.0930597111582756, -0.03006811998784542, -0.16493141651153564, -0.2945463955402374, -7.152531907195225e-06, -0.022511648014187813, -0.31307774782180786, -5.23315102327615e-05, -0.39140501618385315, -0.18426480889320374, -0.13139407336711884, -0.00029762129997834563, -1.8358061424805783e-05, -0.00019131260341964662, -0.14026807248592377, -0.043190594762563705, -0.0001147919538198039, -4.935142715112306e-05, -0.005904849618673325, -0.0004524161049630493, -0.022998150438070297, -3.22463321685791, -0.08451145887374878, -0.2086738795042038, -0.0006750926841050386, -4.482168878894299e-05, -0.010599859990179539, -1.0615348815917969, -8.296622399939224e-05, -0.12926271557807922, -2.0440430641174316, -0.004523758310824633, -0.02110780030488968, -0.00010287232726113871, -9.917721035890281e-05, -4.172316494077677e-06, -3.2543604902457446e-05, -0.1389891505241394, -0.011848432011902332, -0.0005016260547563434, -0.007559148129075766, -0.7463092803955078, -0.049380768090486526, -0.15562115609645844, -1.304058313369751, -0.3147660195827484, -0.09895125776529312, -0.3837464153766632, -0.18327173590660095, -5.94836674281396e-05, -0.0009715604246594012, -0.011830171570181847, -0.00012087091454304755, -0.1163015216588974, -0.050563741475343704, -0.00021491125517059118, -6.186770770000294e-05, -0.046538274735212326, -0.0012305553536862135, -0.006445689592510462, -0.2752555310726166, -2.0904200077056885, -1.6689160474925302e-05, -0.007185450289398432, -0.9046599864959717, -0.0025849281810224056, -2.3669941425323486, -1.7734836339950562, -0.516907811164856, -0.8345217704772949, -0.32151925563812256, -0.04660062864422798, -0.006002139300107956, -6.603976362384856e-05, -4.589452510117553e-05, -0.005872852168977261, -0.008679758757352829, -1.1636954545974731, -0.0036018514074385166, -0.0004981707315891981, -0.010583936236798763, -2.6639251708984375, -0.0724860355257988, -0.0624796487390995, -0.03227652236819267, -0.9307854771614075, -0.5853291749954224, -0.5703573822975159, -0.2877998352050781, -0.5313957333564758, -0.5907489061355591, -0.0008064831490628421, -0.9720326066017151, -0.004446856677532196, -0.007605170365422964, -0.09781263023614883, -0.006353891920298338, -0.40957802534103394, -2.0462865829467773, -0.002234939718618989, -0.2532247304916382, -0.0007750368095003068, -9.023735765367746e-05, -4.529942543740617e-06, -0.20942337810993195, -0.022273613139986992, -0.004735089838504791, -1.3708974620385561e-05, -3.5523738915799186e-05, -1.8341692686080933, -0.004994891118258238, -0.1448916345834732, -0.024090779945254326, -0.0022518294863402843, -0.003431743010878563, -1.1778309345245361, -1.2516897186287679e-05, -0.001580181298777461, 0.0, -3.5523738915799186e-05, -4.768370445162873e-07, 0.0, 0.0, -0.0023795643355697393, -0.33462730050086975, -0.000993711524643004, -0.0009140365873463452, -0.0004828002711292356, -1.823885577323381e-05, -0.0014732946874573827, -0.06856472045183182, -0.011780926957726479, -2.3007127310847864e-05, -0.00027044929447583854, -0.00651876674965024, -0.0001951265730895102, -0.008190732449293137, -1.4605404138565063, -0.0065565467812120914, -2.247462034225464, -1.7878868579864502, -0.001450082752853632, -0.661998450756073, -0.162101611495018, -0.019356409087777138, -0.9854517579078674, -1.1809533834457397, -0.04494772478938103, -0.0036975841503590345, -0.003710529999807477, -2.825220326485578e-05, -0.020210757851600647, -0.06484273076057434, -0.038937054574489594, -0.45356273651123047, -0.050307806581258774, -0.009258667938411236, -0.00034731553751043975, -0.0006083783227950335, -1.9073304429184645e-05, -1.0728830375228426e-06, -0.00014840454969089478, -1.4305104514278355e-06, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00026854246971197426, -6.758938252460212e-05, -4.60137271147687e-05, -0.004945427179336548, -0.0002227773511549458, -1.1875879764556885, -0.0005161621957086027, -0.03565259650349617, -0.5899964570999146, -0.6234654784202576, -0.11873159557580948, -0.20231562852859497, -0.038115546107292175, -0.0075641172006726265, -0.43262138962745667, -0.7953271865844727, -0.13512441515922546, -2.7694199085235596, -3.684058666229248, -0.7574276924133301, -2.05844783782959, -0.0891069620847702, -3.0850331783294678, -0.03583582863211632, -0.0021600027102977037, -0.031753748655319214, -0.06973101198673248, -0.00040999590419232845, -0.015069685876369476, -0.001022650278173387, -1.8358061424805783e-05, -0.0006001578294672072, -0.0019220703979954123, -0.0013786583440378308, -0.011445103213191032, -0.0025471169501543045], "finish_reason": "length"}], "metrics": {"energy": 897.5755162811286, "energy_per_token": 3.5061543604731584, "time": 22.038898, "time_per_token": 0.0860894453125}}
{"outputs": [{"text": "# Read the CSV file using Pandas\n    try:\n        df = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        print(\"The input file is empty. Please provide a valid CSV file with a 'Text' column.\")\n        return None\n\n    # Check if the 'Text' column exists\n    if \"Text\" not in df.columns:\n        print(\"The input CSV file does not have a 'Text' column. Please provide a valid CSV file with a 'Text' column.\")\n        return None\n\n    # Retrieve the 'Text' column values as a list\n    text = df[\"Text\"].tolist()\n\n    # Define a custom tokenizer that ignores stopwords\n    def tokenize_and_filter(texts):\n        \"\"\"\n        This is a custom tokenizer that filters out stopwords.\n\n        Parameters:\n        - texts (list of str): List of text strings to be tokenized.\n\n        Returns:\n        - List of tokens that are not stopwords.\n        \"\"\"\n        tokenizer =", "tokens": ["#", " Read", " the", " CS", "V", " file", " using", " Pand", "as", "\n", "    ", "try", ":", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "    ", "except", " pd", ".", "errors", ".", "Empty", "Data", "Error", ":", "\n", "        ", "print", "(", "\"", "The", " input", " file", " is", " empty", ".", " Please", " provide", " a", " valid", " CS", "V", " file", " with", " a", " '", "Text", "'", " column", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " the", " '", "Text", "'", " column", " exists", "\n", "    ", "if", " \"", "Text", "\"", " not", " in", " df", ".", "columns", ":", "\n", "        ", "print", "(", "\"", "The", " input", " CS", "V", " file", " does", " not", " have", " a", " '", "Text", "'", " column", ".", " Please", " provide", " a", " valid", " CS", "V", " file", " with", " a", " '", "Text", "'", " column", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Ret", "rieve", " the", " '", "Text", "'", " column", " values", " as", " a", " list", "\n", "    ", "text", " =", " df", "[", "\"", "Text", "\"", "]", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Define", " a", " custom", " token", "izer", " that", " ignores", " stop", "words", "\n", "    ", "def", " token", "ize", "_", "and", "_", "filter", "(", "text", "s", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "This", " is", " a", " custom", " token", "izer", " that", " filters", " out", " stop", "words", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "-", " texts", " (", "list", " of", " str", "):", " List", " of", " text", " strings", " to", " be", " token", "ized", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "-", " List", " of", " tokens", " that", " are", " not", " stop", "words", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "token", "izer", " ="], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -1.2212566137313843, -2.560554265975952, -1.311301275563892e-06, -0.15796008706092834, -0.0017283515771850944, -1.5474625825881958, -0.00010084597306558862, -0.00026544384309090674, -0.003014783840626478, -0.36719584465026855, -0.0073267570696771145, -0.0005379660287871957, -5.006777428206988e-06, -3.45700973412022e-05, -6.794698856538162e-05, -0.00011646069469861686, -0.0007532381569035351, -0.0028347091283649206, -0.00012957210128661245, -1.4305104514278355e-06, -0.09271979331970215, -0.0058221276849508286, -0.10180892050266266, -0.0012893705861642957, -1.6105413436889648, -6.353653589030728e-05, -0.0011051744222640991, -6.282132380874828e-05, -0.004598637111485004, -1.7881377516459906e-06, -6.198863957251888e-06, -0.05459011346101761, -0.011347398161888123, -0.0003967689990531653, -0.12196177244186401, -0.020776960998773575, -0.09398707747459412, -0.5750043392181396, -0.31778576970100403, -0.4254990220069885, -0.04351741075515747, -0.0018588898237794638, -0.17726099491119385, -0.38218092918395996, -0.23634980618953705, -0.16202113032341003, -0.25588175654411316, -0.5678204894065857, -9.536738616588991e-07, -0.06987720727920532, -0.8532763123512268, -1.19292151927948, -0.13760678470134735, -0.005505755078047514, -0.00012242044613230973, -0.0005679901223629713, -0.024923305958509445, -0.00037317464011721313, -0.00013839241000823677, -0.00022909401741344482, -0.001969780307263136, -0.006407076492905617, -0.32881295680999756, -0.007592984475195408, -0.25927773118019104, -0.000548331590835005, -0.09589210152626038, -1.3224883079528809, -0.09752774238586426, -0.23334987461566925, -0.31855881214141846, -0.0029797223396599293, -7.879423355916515e-05, -0.0009352362249046564, -0.09320025146007538, -0.8188281059265137, -3.135155202471651e-05, -0.026686223223805428, -0.32502830028533936, -0.001374134561046958, -3.0040289857424796e-05, -0.0044942088425159454, -3.3378546504536644e-06, -0.00151305110193789, -0.01830260269343853, -0.00012110930401831865, -0.005126308184117079, -0.00013422065239865333, -0.00010084597306558862, -0.07915300875902176, -0.00010561384988250211, -0.010253137908875942, -0.1024843230843544, -0.38653114438056946, -1.9562890529632568, -8.940656698541716e-06, -0.1251167505979538, -0.16326375305652618, -4.053033626405522e-05, -0.8615125417709351, -0.019591515883803368, -0.028383467346429825, -2.396077979938127e-05, -1.1324817933200393e-05, -4.792098479811102e-05, -0.0028246049769222736, -0.03314966335892677, -0.8116251230239868, -0.014155691489577293, -0.11442151665687561, -0.01932869851589203, -3.4570634852570947e-06, -0.006278670858591795, -0.09341873228549957, -0.04886629804968834, -0.0013616346986964345, -1.0967194612021558e-05, -2.3841574147809297e-05, -0.0005402297829277813, -0.0021504866890609264, -4.446407547220588e-05, -8.391981828026474e-05, -6.353653589030728e-05, -0.0010659971740096807, -0.0005855038180015981, -0.0015453074593096972, -9.393251093570143e-05, -0.003113662591204047, -0.00034433635300956666, -0.032111454755067825, -3.657517433166504, -0.000957030919380486, -0.08276943117380142, -1.1542656421661377, -0.001727756578475237, -0.0001234931987710297, -0.11725201457738876, -1.620537281036377, -1.9008108377456665, -0.030253419652581215, -0.0500885434448719, -0.26905784010887146, -0.0001292145170737058, -0.08529464155435562, -2.299947738647461, -0.032081782817840576, -0.04060415178537369, -0.00011991735664196312, -6.270212179515511e-05, -2.264974000354414e-06, -2.4914430468925275e-05, -0.03110486827790737, -0.09361708164215088, -1.1920928244535389e-07, -3.2066785934148356e-05, -0.001705383649095893, -0.030629117041826248, -0.0002416080387774855, -0.01859283819794655, -2.9209868907928467, -1.2114365100860596, -1.2775242328643799, -0.4998970627784729, -0.020943794399499893, -1.3528470993041992, -2.9262802600860596, -0.1338190734386444, -0.38358786702156067, -0.16391509771347046, -0.0009116546134464443, -0.3593774735927582, -0.5465216040611267, -0.08567911386489868, -0.5383806824684143, -2.9561288356781006, -5.960462772236497e-07, -1.3002080917358398, -1.36351478099823, -0.04485928267240524, -0.564029335975647, -0.05376351624727249, -0.0004301338049117476, -0.0007210753974504769, -1.3824810981750488, -0.0031949449330568314, -4.768360213347478e-06, -0.18615487217903137, -0.0036001885309815407, -0.7597488164901733, -2.111266851425171, -0.015313433483242989, -0.4122060239315033, -0.02356848306953907, -0.0354677215218544, -1.446748971939087, -0.9423621296882629, -0.3570167124271393, -0.18884190917015076, -0.12347865849733353, -1.6245405673980713, -0.24059662222862244, -0.20614124834537506, -0.0006568658282049, -0.06031996011734009, -0.013133096508681774, -0.00034600470098666847, -0.05415262281894684, -0.04870973527431488, -0.00022980909852776676, -0.05598834529519081, -0.13680271804332733, -1.1803021430969238, -0.10589739680290222, -0.004766530357301235, -0.7372576594352722, -0.002005472080782056, -0.37886103987693787, -0.19915853440761566, -0.22321736812591553, -0.5535754561424255, -0.07774413377046585, -1.549708758830093e-05, -0.9575772285461426, -0.00209469604305923, -0.0020061859395354986, -3.2782016205601394e-05, -0.013027908280491829, -0.00013982271775603294, -0.0001991788885788992, -0.0004262015863787383, -0.004778394475579262, -1.428558588027954, -0.01601475663483143, -2.4923338890075684, -3.85162615776062, -0.24352118372917175, -0.04914938658475876, -0.07628069072961807, -0.08609110862016678, -0.06776297092437744, -0.013638056814670563, -0.10013659298419952, -0.001141849672421813, -1.1920928244535389e-07, -1.9073468138230965e-06, -6.318072337307967e-06, -0.012063638307154179, -0.9845876097679138, -0.47863349318504333, -0.004991332534700632], "finish_reason": "length"}], "metrics": {"energy": 894.8429431905756, "energy_per_token": 3.495480246838186, "time": 22.081991, "time_per_token": 0.08625777734375}}
{"outputs": [{"text": "# Load the data from the CSV file\n    try:\n        df = pd.read_csv(file_path)\n        text = df[\"Text\"].values\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return None\n\n    # Preprocess the text data by excluding stop words\n    preprocessed_text = [\" \".join([word for word in doc.split() if word not in STOP_WORDS]) for doc in text]\n\n    # Check if the input data is empty or contains only stop words\n    if not preprocessed_text or not \"\".join(preprocessed_text):\n        print(\"No valid words in the input.\")\n        return None\n\n    # Vectorize the preprocessed text data\n    vectorizer = CountVectorizer(token_pattern=r\"\\S+\", analyzer=\"word\")\n    vectors = vectorizer.fit_transform(preprocessed_text)\n    words = np.array(vectorizer.get_feature_names())\n\n    # Get the word counts for each word\n    counts = vectors.sum(", "tokens": ["#", " Load", " the", " data", " from", " the", " CS", "V", " file", "\n", "    ", "try", ":", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "text", " =", " df", "[", "\"", "Text", "\"", "]", ".", "values", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", ":", " {", "e", "}\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Pre", "process", " the", " text", " data", " by", " excluding", " stop", " words", "\n", "    ", "pre", "processed", "_", "text", " =", " [", "\"", " \"", ".", "join", "([", "word", " for", " word", " in", " doc", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", "])", " for", " doc", " in", " text", "]", "\n", "\n", "    ", "#", " Check", " if", " the", " input", " data", " is", " empty", " or", " contains", " only", " stop", " words", "\n", "    ", "if", " not", " pre", "processed", "_", "text", " or", " not", " \"", "\"", ".", "join", "(", "pre", "processed", "_", "text", "):", "\n", "        ", "print", "(", "\"", "No", " valid", " words", " in", " the", " input", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Vector", "ize", " the", " pre", "processed", " text", " data", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "token", "_", "pattern", "=", "r", "\"", "\\", "S", "+", "\"", ",", " analy", "zer", "=", "\"", "word", "\"", ")", "\n", "    ", "vectors", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "pre", "processed", "_", "text", ")", "\n", "    ", "words", " =", " np", ".", "array", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "())", "\n", "\n", "    ", "#", " Get", " the", " word", " counts", " for", " each", " word", "\n", "    ", "counts", " =", " vectors", ".", "sum", "("], "logprobs": [-0.3697170317173004, -0.8765358924865723, -0.6534671187400818, -1.6310906410217285, -0.3638485372066498, -0.1269231140613556, -0.11947532743215561, -1.2040065485052764e-05, -0.048569388687610626, -0.2479582279920578, -0.0021099227014929056, -1.0934752225875854, -8.463501580990851e-05, -0.00033301531220786273, -0.002285013673827052, -0.7302296757698059, -0.011140289716422558, -0.001909934333525598, -9.298280929215252e-06, -5.98412734689191e-05, -6.210611172718927e-05, -0.00010775939153973013, -0.0008877150830812752, -0.002815095242112875, -0.00018737945356406271, -1.311301275563892e-06, -0.07899792492389679, -0.014859235845506191, -2.0308644771575928, -0.4872840344905853, -1.877312421798706, -0.05673741549253464, -0.3547878861427307, -0.0034937553573399782, -0.013921537436544895, -8.475421054754406e-05, -0.0006025406182743609, -0.9916906952857971, -1.7147738933563232, -0.228535458445549, -0.1806715726852417, -0.0033246977254748344, -0.6912983655929565, -0.08091332763433456, -0.05707267299294472, -0.0011517327511683106, -0.0040893275290727615, -0.00047291061491705477, -0.14658844470977783, -0.002925642067566514, -0.16979634761810303, -0.013820194639265537, -0.1683807075023651, -2.1817100048065186, -0.588202714920044, -0.16153225302696228, -0.14298388361930847, -0.00039307496626861393, -0.0064270938746631145, -0.021857090294361115, -0.06470374017953873, -0.7383164763450623, -0.007292674854397774, -0.01804225519299507, -0.000676998752169311, -0.05518930405378342, -3.5438709259033203, -0.060571663081645966, -0.040843356400728226, -0.07823789864778519, -0.838783323764801, -0.9433038830757141, -1.2140579223632812, -0.08205004781484604, -1.0088205337524414, -0.2765451967716217, -0.000764673575758934, -1.3979480266571045, -0.015120882540941238, -0.015173133462667465, -0.13233858346939087, -0.015362974256277084, -0.724672257900238, -0.5416885614395142, -0.01648261770606041, -0.0001546025014249608, -2.50339189733495e-06, -0.08985321968793869, -0.07788452506065369, -0.007639123592525721, -0.0001230164198204875, -0.0005778788472525775, -2.0653364658355713, -0.01606426201760769, -0.08163737505674362, -0.06623184680938721, -0.032334230840206146, -0.005257115233689547, -0.67076575756073, -0.00038235029205679893, -0.0014427024871110916, 0.0, -2.1934269170742482e-05, -9.536738616588991e-07, 0.0, -1.1920928244535389e-07, -0.0037939015310257673, -0.025503233075141907, -0.00029523781267926097, -7.354942499659956e-05, -0.004865473136305809, -0.011403028853237629, -0.0010444429935887456, -0.0779367983341217, -0.0002181292074965313, -0.014712058939039707, -1.866923451423645, -0.07957441359758377, -1.3533759117126465, -0.9599137306213379, -1.0629804134368896, -1.0810705423355103, -0.46733149886131287, -0.06690160185098648, -0.2802775204181671, -0.002418927848339081, -0.0017377528129145503, -0.13251903653144836, -0.02196601964533329, -0.00016378014697693288, -0.07152573764324188, -0.47602203488349915, -1.5830336809158325, -1.3589766240329482e-05, -2.264974000354414e-06, -6.794906312279636e-06, -0.12048263102769852, -0.5429915189743042, -1.7251944541931152, -1.6828967332839966, -8.106198947643861e-06, -1.07287787614041e-05, -0.0009484559996053576, -0.0024905160535126925, -2.0503786799963564e-05, -4.768370445162873e-07, -2.264974000354414e-06, -0.37817367911338806, -0.008402826264500618, -0.00022682955022901297, -0.009175987914204597, -0.0035855784080922604, -0.02312011644244194, -1.5001740455627441, -0.2149500548839569, -0.1923932582139969, -2.44746470451355, -0.0770258679986, -0.10087476670742035, -1.3929795026779175, -0.11243145167827606, -0.00028165188268758357, -0.0005541696446016431, -0.0016701571876183152, -0.003831784473732114, -0.004377663601189852, -0.0013683013385161757, -0.003520839847624302, -0.0003326578007545322, -0.005163073539733887, -1.2708230018615723, -0.014673881232738495, -0.011973768472671509, -0.6244163513183594, -0.000580499938223511, -0.024302087724208832, -0.5010886192321777, -0.24247407913208008, -0.00012146688823122531, -0.2121678739786148, -0.0014754373114556074, -0.0003461238811723888, -0.00022027450904715806, -1.4305104514278355e-06, -2.3841855067985307e-07, -0.5985388159751892, -2.535571813583374, -0.1698119342327118, -5.2927523938706145e-05, -0.06043701246380806, -0.02116965875029564, -0.06001969799399376, -0.2679998576641083, -0.1277567744255066, -0.01993069238960743, -0.0012949660886079073, -1.4374607801437378, -3.0529088973999023, -1.0728830375228426e-06, -0.15227973461151123, -0.0023053516633808613, -0.013539155013859272, -5.221230458118953e-05, -0.3262489438056946, -0.14260448515415192, -0.003201242769137025, -2.22385835647583, -0.006943146698176861, -0.004838543478399515, 0.0, -2.1219027985353023e-05, -0.002022841712459922, -7.867782187531702e-06, -9.65590606938349e-06, -0.0071544405072927475, -0.004261341877281666, -5.245195097813848e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.0006083783227950335, -0.05748097598552704, -0.8836628198623657, -2.230600357055664, -0.029106024652719498, -1.3773033618927002, -1.1324817933200393e-05, -0.11961665004491806, -0.017770130187273026, -0.013246743939816952, 0.0, -9.536738616588991e-07, -0.0005333193112164736, 0.0, -4.8874615458771586e-05, 0.0, -7.152555099310121e-07, -1.3766252994537354, -0.013350732624530792, -0.5754180550575256, -8.797258487902582e-05, -0.007096916437149048, -1.5698747634887695, -0.04441295191645622, -2.657694101333618, -0.3430163860321045, -1.8707926273345947, -0.15348277986049652, -0.49566754698753357, -0.25075042247772217, -3.40932747349143e-05, -3.0175530910491943, -0.009968851692974567, -0.30917254090309143, -2.3841574147809297e-05, -0.001767145935446024, -0.0005112771177664399], "finish_reason": "length"}], "metrics": {"energy": 897.5183987407688, "energy_per_token": 3.505931245081128, "time": 21.851301, "time_per_token": 0.08535664453125}}
{"outputs": [{"text": "try:\n        data = pd.read_csv(file_path, engine=\"c\")\n    except Exception:\n        print(\"Invalid CSV file path or file is empty.\")\n        return\n\n    text_data = data[\"Text\"].fillna(\"\")\n\n    # Extract and preprocess words\n    words = []\n    for text in text_data:\n        words.extend(extract_words(text))\n    words = [word for word in words if word not in STOP_WORDS]\n\n    if not words:\n        print(\"Invalid input - The file is empty or contains only stop words.\")\n        return\n\n    # Vectorize the words\n    vectorizer = CountVectorizer(lowercase=False, min_df=1)\n    vectorizer.fit(words)\n    word_vectors = vectorizer.transform(words)\n\n    # Create a histogram of the ten most common words\n    word_frequencies = word_vectors.sum(axis=0).tolist()[0]\n    top_words = [\n        vectorizer.get_", "tokens": ["try", ":", "\n", "        ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ",", " engine", "=", "\"", "c", "\"", ")", "\n", "    ", "except", " Exception", ":", "\n", "        ", "print", "(", "\"", "Invalid", " CS", "V", " file", " path", " or", " file", " is", " empty", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", ".", "fill", "na", "(", "\"", "\"", ")", "\n", "\n", "    ", "#", " Ext", "ract", " and", " pre", "process", " words", "\n", "    ", "words", " =", " []", "\n", "    ", "for", " text", " in", " text", "_", "data", ":", "\n", "        ", "words", ".", "extend", "(", "extract", "_", "words", "(", "text", "))", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "_", "W", "OR", "DS", "]", "\n", "\n", "    ", "if", " not", " words", ":", "\n", "        ", "print", "(", "\"", "Invalid", " input", " -", " The", " file", " is", " empty", " or", " contains", " only", " stop", " words", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Vector", "ize", " the", " words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "low", "erc", "ase", "=", "False", ",", " min", "_", "df", "=", "1", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "words", ")", "\n", "    ", "word", "_", "vectors", " =", " vector", "izer", ".", "transform", "(", "words", ")", "\n", "\n", "    ", "#", " Create", " a", " histogram", " of", " the", " ten", " most", " common", " words", "\n", "    ", "word", "_", "f", "requ", "encies", " =", " word", "_", "vectors", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]", "\n", "    ", "top", "_", "words", " =", " [", "\n", "        ", "vector", "izer", ".", "get", "_"], "logprobs": [-1.954647421836853, -0.00024959311122074723, -0.008209177292883396, -0.011371678672730923, -2.1786959171295166, -0.03057200275361538, -0.02851671352982521, -3.862306402879767e-05, -0.00026174934464506805, -0.00029416524921543896, -0.0001070442158379592, -0.0007868293323554099, -0.004380037076771259, -0.00027700403006747365, -7.152555099310121e-07, -2.209083318710327, -2.6199588775634766, -0.9737634658813477, -0.0004798214649781585, -0.4847213923931122, -3.504691630951129e-05, -0.6249284744262695, -0.1079789400100708, -0.3950745165348053, -0.0030718303751200438, -0.807316243648529, -2.5800931453704834, -0.006606404669582844, -0.0008338788175024092, -0.4589134156703949, -0.02083919197320938, -0.36941099166870117, -3.153930425643921, -1.238503098487854, -6.23445157543756e-05, -0.12732581794261932, -1.2948178052902222, -1.8219690322875977, -0.9288071393966675, -1.7335246801376343, -0.8914645314216614, -0.3322662115097046, -0.09331969916820526, -0.0005639393348246813, -0.0016237420495599508, -0.023864060640335083, -0.021105464547872543, -0.7781908512115479, -0.06344396620988846, -0.0006803343421779573, -1.8493542671203613, -0.35350263118743896, -0.6355896592140198, -0.003703997703269124, -0.06718486547470093, -0.10954345017671585, -0.005591941066086292, -0.01255783811211586, -0.00010144196130568162, -0.0004211969207972288, -0.8079137802124023, -2.367997646331787, 0.0, -0.013138272799551487, -0.002286202972754836, -0.02301061525940895, -0.0001284993631998077, -0.4762601852416992, -0.5289177298545837, -0.0003103728231508285, -1.246569275856018, -4.842180252075195, -0.20746929943561554, -2.4476852416992188, -1.3789781332015991, -0.04629451036453247, -0.6785033941268921, -0.548870325088501, -0.00063744728686288, -0.2951105237007141, -0.06381120532751083, -0.6482030153274536, -0.003086210461333394, -0.010801891796290874, -0.027653198689222336, -0.23848339915275574, -0.00842776894569397, -0.005880910903215408, -2.9802276912960224e-06, -1.1920928244535389e-07, -0.01761014573276043, -0.0008652042597532272, -0.0007116645574569702, -1.0961153507232666, -0.5409467816352844, -0.004953374620527029, -0.12302887439727783, -3.0499839782714844, -0.00021431533969007432, -0.27656176686286926, -0.11650482565164566, -0.10465317219495773, -0.21682576835155487, -0.006245855707675219, -2.7165706157684326, -0.6204812526702881, -0.03885794058442116, -0.34604111313819885, -0.18555845320224762, -0.1983388364315033, -6.0794889577664435e-05, -2.753696753643453e-05, -0.00041547726141288877, -0.0006310140597634017, -0.12371179461479187, -0.25817322731018066, -1.6689286894688848e-06, -0.003216690383851528, 0.0, -1.0251946150674485e-05, -1.9430925021879375e-05, 0.0, 0.0, -0.03521629422903061, -0.011908510699868202, -0.03943626210093498, -0.00010406429646536708, -0.358111709356308, -0.1986769437789917, -0.0058730891905725, -0.00588802108541131, -0.01509786769747734, -6.329813186312094e-05, -0.012304822914302349, -0.002365055261179805, -0.03534989804029465, -3.424760103225708, -1.046704649925232, -2.7792956829071045, -4.1037445068359375, -2.4943394660949707, -1.548496961593628, -0.30402350425720215, -0.022259389981627464, -0.2667423486709595, -0.013772929087281227, -0.012167515233159065, -0.3093664348125458, -0.17116577923297882, -0.020428378134965897, -0.0003129946126136929, -0.0005725175142288208, -0.008530250750482082, -0.00363522837869823, -0.059025660157203674, -0.016211122274398804, -0.00036399890086613595, -0.20608896017074585, -1.1825051307678223, -0.14403684437274933, -1.062670350074768, -0.49151715636253357, -0.3990624248981476, -0.00014137222024146467, -0.15965713560581207, -0.017880558967590332, -0.00032550760079175234, -0.003481400664895773, -1.4305104514278355e-06, -5.960462772236497e-07, -0.5147638320922852, -1.4813545942306519, -0.00014649749209638685, -3.2186455882765586e-06, -0.0003408804477658123, -0.6652788519859314, -0.6816170811653137, -3.4587666988372803, -8.106198947643861e-06, -0.00012838016846217215, -0.004587483126670122, -0.21672499179840088, -0.43255123496055603, -0.036752521991729736, -0.0038012643344700336, -0.8838035464286804, -0.1085832417011261, -0.004839492961764336, -0.0007108307327143848, -0.7540048956871033, -0.17178580164909363, -0.0012218636693432927, -0.00567491864785552, -0.3543252646923065, -0.40333783626556396, -0.0008735416340641677, -1.2800207138061523, -0.0022646752186119556, -0.12190847843885422, -2.861018856492592e-06, -4.9232225137529895e-05, -0.00036399890086613595, -0.008227502927184105, -0.006522438023239374, -5.3881147323409095e-05, -0.09361089020967484, -0.2046326845884323, -9.691245941212401e-05, -0.06196761503815651, -1.933518409729004, -0.4603404998779297, -0.35981297492980957, -0.3797853887081146, -0.10361635684967041, -0.9654649496078491, -0.0016520674107596278, -0.010191661305725574, -0.009798052720725536, -0.026509664952754974, -0.000783732277341187, -0.5310556292533875, -0.00033539868309162557, -2.2415409088134766, -9.894321920000948e-06, -8.260862523457035e-05, -0.001412823679856956, -0.6865805387496948, -4.887569048150908e-06, -0.005727072712033987, -8.809178689261898e-05, -0.14157071709632874, -0.0003047717036679387, -0.004618097562342882, -8.11782301752828e-05, -0.0011542332358658314, -0.007251963950693607, -0.04476718232035637, -0.5238357186317444, -2.3841855067985307e-07, -0.012733581475913525, -0.0008354272576980293, -0.00013743886665906757, -0.012605161406099796, -0.03736502304673195, -2.6717474460601807, -0.003745803376659751, -0.35859596729278564, -0.06530081480741501, -1.190587043762207, -1.58095383644104, -0.0016639686655253172, -0.3859080374240875, -1.8358061424805783e-05, -8.976056415122002e-05, -0.01615927740931511, -2.3841855067985307e-07], "finish_reason": "length"}], "metrics": {"energy": 892.9869175395958, "energy_per_token": 3.488230146639046, "time": 21.854761, "time_per_token": 0.08537016015625}}
{"outputs": [{"text": "# Read the CSV file into a pandas DataFrame\n    data = pd.read_csv(file_path)\n\n    # Check if the CSV file is empty\n    if data.empty:\n        print(\"The provided CSV file is empty.\")\n        return None\n\n    # Extract the \"Text\" column from the DataFrame\n    text_col = data['Text']\n\n    # Initialize CountVectorizer with stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n    # Fit the vectorizer on the text data\n    vectorizer.fit(text_col)\n\n    # Convert text to feature vectors\n    vectors = vectorizer.transform(text_col)\n\n    # Sum the frequency of each word in the vectors\n    word_sums = vectors.sum(axis=0).A1\n\n    # Get the word indices and their corresponding names\n    word_indices = vectors.nonzero()[1]\n    word_names = np.array(vectorizer.get_feature_names_out())[word_indices]\n\n    # Filter the words with non-", "tokens": ["#", " Read", " the", " CS", "V", " file", " into", " a", " pandas", " Data", "Frame", "\n", "    ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " CS", "V", " file", " is", " empty", "\n", "    ", "if", " data", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " provided", " CS", "V", " file", " is", " empty", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Ext", "ract", " the", " \"", "Text", "\"", " column", " from", " the", " Data", "Frame", "\n", "    ", "text", "_", "col", " =", " data", "['", "Text", "']", "\n", "\n", "    ", "#", " Initialize", " Count", "Vector", "izer", " with", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "\n", "    ", "#", " Fit", " the", " vector", "izer", " on", " the", " text", " data", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", "_", "col", ")", "\n", "\n", "    ", "#", " Convert", " text", " to", " feature", " vectors", "\n", "    ", "vectors", " =", " vector", "izer", ".", "transform", "(", "text", "_", "col", ")", "\n", "\n", "    ", "#", " Sum", " the", " frequency", " of", " each", " word", " in", " the", " vectors", "\n", "    ", "word", "_", "sum", "s", " =", " vectors", ".", "sum", "(", "axis", "=", "0", ")", ".", "A", "1", "\n", "\n", "    ", "#", " Get", " the", " word", " indices", " and", " their", " corresponding", " names", "\n", "    ", "word", "_", "indices", " =", " vectors", ".", "non", "zero", "()[", "1", "]", "\n", "    ", "word", "_", "names", " =", " np", ".", "array", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "[", "word", "_", "indices", "]", "\n", "\n", "    ", "#", " Filter", " the", " words", " with", " non", "-"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -2.4859089851379395, -0.011098910123109818, -0.9614112973213196, -0.12134575843811035, -0.0009319015080109239, -0.10926498472690582, -0.0027568452060222626, -1.8954627513885498, -0.02739550732076168, -0.0031871020328253508, -1.5616295058862306e-05, -9.42901024245657e-05, -0.0002273062855238095, -0.00011252723925281316, -0.0010389650706201792, -0.0027825231663882732, -0.00010001159535022452, -2.622600959512056e-06, -0.08551836013793945, -0.007005414925515652, -0.11131170392036438, -0.0003721021639648825, -0.04105115681886673, -1.056625247001648, -0.08435599505901337, -0.1588842272758484, -2.680436372756958, -2.9801878554280847e-05, -0.7668032646179199, -0.08454234898090363, -0.02602452039718628, -0.33580026030540466, -7.30726242181845e-05, -0.003103561233729124, -0.004198902752250433, -0.0019819156732410192, -0.04629337415099144, -0.026164351031184196, -0.0006791430641897023, -0.0005336767644621432, -0.03144305199384689, -0.022705228999257088, -0.035670310258865356, -0.7499498128890991, -3.27103853225708, -0.09404253214597702, -2.2649508537142538e-05, -0.08811534941196442, -0.037311851978302, -0.0007284610182978213, -0.08532660454511642, -0.4273674786090851, -0.00020668754586949944, -0.0001212284987559542, -0.007595705799758434, -0.010713795199990273, -0.34571027755737305, -0.012283745221793652, -0.0037309578619897366, -0.00040558696491643786, -0.022664325311779976, -0.8058598637580872, -0.003476411337032914, -0.052716873586177826, -1.3257784843444824, -0.014912675134837627, -0.00018892886873800308, -0.0034684520214796066, -0.4002538025379181, -0.0019290901254862547, -0.09007798880338669, -0.0001616347290109843, -0.10236842930316925, -0.00014578233822248876, -0.08079337328672409, -0.2678159177303314, -2.2431533336639404, -0.0025137036573141813, -0.005470188334584236, -2.7550041675567627, -0.019383417442440987, -8.034383063204587e-05, -0.06362855434417725, -0.018623728305101395, -0.0003135904553346336, -0.01003317441791296, -2.1434688568115234, -1.2990305423736572, -0.0029110219329595566, -7.056941103655845e-05, -0.32900720834732056, -1.2996506690979004, -0.9819180369377136, -1.0029370784759521, -0.0002351722796447575, -0.24553614854812622, -0.00046623803791590035, -0.0008719933102838695, -0.00017391123401466757, -2.50339189733495e-06, -6.198863957251888e-06, -0.0019298041006550193, -0.06432721763849258, -5.960462772236497e-07, -3.6954811548639555e-06, -0.002690626075491309, -0.03664760664105415, 0.0, -9.775113539944869e-06, -2.7418097943154862e-06, 0.0, -2.3841855067985307e-07, -0.08875326812267303, -0.0028370865620672703, -0.015233716927468777, -0.0001691436773398891, -0.0014890070306137204, -0.7368237972259521, -1.4788867235183716, -0.2766037881374359, -6.0437283536884934e-05, -0.5973876118659973, -0.0194857195019722, -0.14507271349430084, -0.5141459703445435, -0.19941970705986023, -8.856858039507642e-05, -0.017740968614816666, -0.0004493180604185909, -0.0019346822518855333, -1.8715683836489916e-05, -0.006507751997560263, -0.0007731309160590172, -1.2874520507466514e-05, -2.7418097943154862e-06, -0.011929124593734741, -0.0003131137927994132, -0.018678605556488037, -0.00015484087634831667, -0.006885610055178404, -3.758161783218384, -1.0668389797210693, -0.6359080672264099, -0.8155431747436523, -0.10789868235588074, -0.1532747894525528, -5.9960475482512265e-05, -1.2398513555526733, -0.0018330690218135715, -0.01314592082053423, -1.1920928244535389e-07, -1.2993727978027891e-05, -0.0007697956170886755, -0.0003937899600714445, -0.0003133521240670234, -1.1444026313256472e-05, -1.5497195136049413e-06, -0.00066985102603212, -0.006759870797395706, -0.01506264042109251, -0.00015567521040793508, -0.007239892613142729, -1.7930519580841064, -0.6702616214752197, -3.3912007808685303, -0.10949857532978058, -0.6959472894668579, -0.12227870523929596, -1.0661461353302002, -0.24854953587055206, -0.3532314598560333, -0.024321749806404114, -2.5152843591058627e-05, -0.11678022146224976, -0.00034231049357913435, -2.0669546127319336, -1.0945285558700562, -0.0002637753786984831, -0.01578960195183754, -1.2040065485052764e-05, -0.0016379047883674502, -0.00016366096679121256, -0.0008606782066635787, -0.00011562632425921038, -0.000513064325787127, -0.0013804440386593342, -0.17582888901233673, -0.536476194858551, -0.0737462118268013, -0.13562063872814178, -0.010739977471530437, -0.00012885693286079913, -0.0008400725200772285, -0.4683951735496521, -0.03874751180410385, -1.1390080451965332, -0.831261932849884, -1.1897528171539307, -0.8307843208312988, -0.29073426127433777, -1.6215026378631592, -0.08236704021692276, -3.290122185717337e-05, -0.33809196949005127, -0.00045658653834834695, -0.022079482674598694, -0.006097879726439714, -1.6004266738891602, -4.8993817472364753e-05, -1.375960111618042, -0.000263894529780373, -0.0016639686655253172, -0.00015400654228869826, -0.000163541772053577, -0.002448776736855507, -0.013166156597435474, -0.14405180513858795, -6.007967749610543e-05, -0.007108989637345076, -0.0004916174802929163, -1.150426983833313, -6.079655122448457e-06, -0.002839939668774605, -0.13428498804569244, -0.0028058229945600033, 0.0, -2.3841855067985307e-07, -6.318072337307967e-06, 0.0, -9.417489309271332e-06, 0.0, -2.3841855067985307e-07, -0.16005295515060425, -6.01988795096986e-05, -0.0009507188224233687, -0.12329372763633728, -0.0006990373367443681, -2.3841855067985307e-07, -1.6689286894688848e-06, -0.00011419598013162613, -0.0025804101023823023, -0.00419973349198699, -0.00010740180005086586, -0.0021354984492063522, -1.885367512702942, -3.0078651905059814, -0.610731303691864, -1.8620398044586182, -0.2883242070674896, -0.00013433984713628888], "finish_reason": "length"}], "metrics": {"energy": 919.8075417852407, "energy_per_token": 3.5929982100985964, "time": 22.281166, "time_per_token": 0.0870358046875}}
{"outputs": [{"text": "# Read CSV file using Pandas\n    df = pd.read_csv(file_path)\n\n    # Convert the \"Text\" column to a list of strings\n    text_data = df[\"Text\"].tolist()\n\n    # Perform text vectorization excluding stop words\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorizer.fit(text_data)\n    word_count_vector = vectorizer.transform(text_data)\n\n    # Extract words and their counts\n    word_counts = dict(zip(vectorizer.get_feature_names_out(), word_count_vector.sum(axis=0).tolist()[0]))\n\n    # Remove empty words from the dictionary\n    word_counts = {word: count for word, count in word_counts.items() if word}\n\n    # If there are valid words in the input\n    if word_counts:\n        # Sort the dictionary by value (word counts) in descending order\n        word_counts = dict(sorted(word_counts.items(), key=lambda x: x[1", "tokens": ["#", " Read", " CS", "V", " file", " using", " Pand", "as", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Convert", " the", " \"", "Text", "\"", " column", " to", " a", " list", " of", " strings", "\n", "    ", "text", "_", "data", " =", " df", "[", "\"", "Text", "\"", "]", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Perform", " text", " vector", "ization", " excluding", " stop", " words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "    ", "vector", "izer", ".", "fit", "(", "text", "_", "data", ")", "\n", "    ", "word", "_", "count", "_", "vector", " =", " vector", "izer", ".", "transform", "(", "text", "_", "data", ")", "\n", "\n", "    ", "#", " Ext", "ract", " words", " and", " their", " counts", "\n", "    ", "word", "_", "counts", " =", " dict", "(", "zip", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " word", "_", "count", "_", "vector", ".", "sum", "(", "axis", "=", "0", ")", ".", "tol", "ist", "()[", "0", "]))", "\n", "\n", "    ", "#", " Remove", " empty", " words", " from", " the", " dictionary", "\n", "    ", "word", "_", "counts", " =", " {", "word", ":", " count", " for", " word", ",", " count", " in", " word", "_", "counts", ".", "items", "()", " if", " word", "}", "\n", "\n", "    ", "#", " If", " there", " are", " valid", " words", " in", " the", " input", "\n", "    ", "if", " word", "_", "counts", ":", "\n", "        ", "#", " Sort", " the", " dictionary", " by", " value", " (", "word", " counts", ")", " in", " descending", " order", "\n", "        ", "word", "_", "counts", " =", " dict", "(", "s", "orted", "(", "word", "_", "counts", ".", "items", "()", ",", " key", "=", "lambda", " x", ":", " x", "[", "1"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -1.9247937202453613, -3.325883881188929e-05, -0.23897108435630798, -1.1785365343093872, -2.3859400749206543, -1.7881377516459906e-06, -0.1528758555650711, -0.0016224328428506851, -0.5441077947616577, -0.009993283078074455, -0.0014002051902934909, -1.0371154530730564e-05, -0.00012563870404846966, -0.00020811776630580425, -0.000205018965061754, -0.0006605588714592159, -0.0036204999778419733, -0.00019870213873218745, -4.410734163684538e-06, -0.0728776752948761, -0.0035353321582078934, -0.1957729011774063, -0.000286657246761024, -0.028097568079829216, -3.351059913635254, -0.8229550719261169, -0.872307300567627, -0.015771180391311646, -0.0005225961795076728, -0.006494250148534775, -0.06324267387390137, -0.40328165888786316, -0.0880574956536293, -0.4526064395904541, -0.25232139229774475, -0.06846164166927338, -0.00014852374442853034, -0.23870201408863068, -0.4219821095466614, -1.0074286460876465, -0.00892353244125843, -0.024979349225759506, -0.16629602015018463, -0.0006840273272246122, -0.00682901730760932, -5.245071224635467e-05, -8.106198947643861e-06, -0.006587101146578789, -0.7443228363990784, 0.0, -0.00013624693383462727, -0.004692613612860441, -0.04424154758453369, -0.0004111875023227185, -0.04552914574742317, -2.0801761150360107, -0.10902118682861328, -0.02799173817038536, -0.00017891713650897145, -2.2415518760681152, -0.14529138803482056, -2.0136334896087646, -0.10486766695976257, -0.0011257746955379844, -0.1651453822851181, -0.002248974982649088, -0.0007035640883259475, -0.0004363300104159862, -2.861018856492592e-06, -2.861018856492592e-06, -0.0044080475345253944, -0.08255849033594131, -1.0728830375228426e-06, -3.3378546504536644e-06, -0.0009722749819047749, -0.019702093675732613, 0.0, -1.1920858014491387e-05, -2.145764938177308e-06, 0.0, -1.1920928244535389e-07, -0.08941279351711273, -0.012074238620698452, -0.01991795375943184, -0.35474666953086853, -0.024211682379245758, -0.002390386536717415, -0.000256982195423916, -0.2720591425895691, -0.0011631635716184974, -1.168244216387393e-05, -1.7881377516459906e-06, -0.0007188120507635176, -0.005236006807535887, -0.8728473782539368, -0.49954521656036377, -0.0002616301644593477, -2.6500470638275146, -0.37928852438926697, -1.0558652877807617, -0.0017720249015837908, -0.00033849707688204944, -4.768370445162873e-07, -1.3947389561508317e-05, -0.0001646144810365513, -0.0008430502493865788, -0.0020905323326587677, -5.8412379075889476e-06, 0.0, -0.00019095504831057042, -0.009155670180916786, -0.12344220280647278, -0.00016306500765495002, -0.009659456089138985, -1.1020585298538208, -0.03088921308517456, -2.585312604904175, -0.09457939863204956, -0.04221876338124275, -0.6614524722099304, -0.7026402950286865, -4.458328112377785e-05, -1.8573895692825317, -0.0161847323179245, -2.49324893951416, -0.013404957950115204, -0.7037495374679565, -0.004038156475871801, -0.0015685171820223331, -0.0001389883691444993, -0.0022106750402599573, 0.0, -1.4305104514278355e-06, -0.0003106111544184387, -1.1920928244535389e-07, -1.1324817933200393e-05, 0.0, -9.536738616588991e-07, -0.18266227841377258, -4.136476854910143e-05, -0.0012023370945826173, -9.131014667218551e-05, -0.29948028922080994, -8.344646857949556e-07, -5.125986263010418e-06, -2.50339189733495e-06, -2.145764938177308e-06, -0.0002127659390680492, -0.0822293609380722, -2.5033637939486653e-05, -0.00045062878052704036, -5.769562994828448e-05, -0.0001419681793777272, -0.0013362773461267352, -6.031808152329177e-05, -0.05945810303092003, -5.960462772236497e-07, -0.019636986777186394, -0.0006466205231845379, -0.0011603058082982898, -0.0013222293928265572, -0.04893883690237999, -0.0002426806604489684, -0.035662490874528885, -3.035456657409668, -2.013382911682129, -1.7148501873016357, -2.248842716217041, -0.11688607186079025, -0.44909992814064026, -0.13091029226779938, -8.296622399939224e-05, -0.2352481335401535, -2.8490614567999728e-05, -0.00024971229140646756, -0.025747470557689667, -0.009750832803547382, -0.9527671933174133, -0.003746634814888239, -0.011923824436962605, -0.000270091783022508, -0.0012699642684310675, -0.00017617580306250602, -0.00025829317746683955, -1.823885577323381e-05, -0.00039152585668489337, -1.1920928244535389e-07, 0.0, -0.00037067217635922134, -1.764281842042692e-05, -0.0009157040040008724, -0.00019667598826345056, -0.06009839102625847, -0.9693657755851746, -0.001994169782847166, -0.009855539537966251, -0.00017832119192462415, -0.08898940682411194, -2.5838139057159424, -1.1214237213134766, -0.009656031616032124, -2.1589162349700928, -0.011658393777906895, -1.6260018348693848, -0.01677056774497032, -0.3061063587665558, -1.1154065132141113, -0.00014685506175737828, -0.0017302555497735739, -0.020443445071578026, -1.1920928244535389e-07, -8.702239938429557e-06, -0.00771980220451951, -0.0020901754032820463, -0.01223546452820301, -0.04778280481696129, -0.9923010468482971, -0.6152291893959045, -1.3539707660675049, -0.5054560899734497, -1.7259342670440674, -1.2201721668243408, -0.19006626307964325, -0.4512089788913727, -0.006374739576131105, -0.2735201120376587, -0.01746056042611599, -7.390703103737906e-05, -0.11591081321239471, -9.738924563862383e-05, -2.8864150047302246, -0.000102037942269817, -0.0025290430057793856, -0.4202040135860443, -1.1494877338409424, -2.288792165927589e-05, -0.006408379413187504, 0.0, -7.998623186722398e-05, -0.00016723664884921163, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.764281842042692e-05, -8.583032467868179e-06, -6.305972783593461e-05, -8.344646857949556e-07, -0.00570170721039176, -4.9470632802695036e-05, -0.0010286045726388693, -0.5045409798622131, -4.8636207793606445e-05, -0.009382086805999279, -4.172238186583854e-05, -3.790783375734463e-05], "finish_reason": "length"}], "metrics": {"energy": 935.7373394794467, "energy_per_token": 3.655223982341589, "time": 21.86149, "time_per_token": 0.0853964453125}}
{"outputs": [{"text": "# Read text data from CSV file\n    data = pd.read_csv(file_path, usecols=[\"Text\"])\n\n    # Check if input file is empty or contains only stop words\n    if data.empty or data[\"Text\"].isnull().all():\n        print(\"Input file is empty or contains only stop words.\")\n        return None\n\n    # Preprocess text data by removing stopwords and creating a list of processed words\n    text_data = data[\"Text\"].fillna(\"\")\n    vectorizer = CountVectorizer(\n        stop_words=STOP_WORDS, ngram_range=(2, 2), analyzer=\"char\", max_features=50\n    )\n    word_counts = vectorizer.fit_transform(text_data)\n    valid_words = set()\n    for row in word_counts:\n        for word_index in row.indices:\n            valid_words.add(vectorizer.get_feature_names_out()[word_index])\n\n    # Check if valid words exist in the input\n    if len", "tokens": ["#", " Read", " text", " data", " from", " CS", "V", " file", "\n", "    ", "data", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ",", " use", "cols", "=[", "\"", "Text", "\"", "])", "\n", "\n", "    ", "#", " Check", " if", " input", " file", " is", " empty", " or", " contains", " only", " stop", " words", "\n", "    ", "if", " data", ".", "empty", " or", " data", "[", "\"", "Text", "\"", "]", ".", "is", "null", "()", ".", "all", "():", "\n", "        ", "print", "(", "\"", "Input", " file", " is", " empty", " or", " contains", " only", " stop", " words", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Pre", "process", " text", " data", " by", " removing", " stop", "words", " and", " creating", " a", " list", " of", " processed", " words", "\n", "    ", "text", "_", "data", " =", " data", "[", "\"", "Text", "\"", "]", ".", "fill", "na", "(", "\"", "\"", ")", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "\n", "        ", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ",", " n", "gram", "_", "range", "=(", "2", ",", " ", "2", ")", ",", " analy", "zer", "=", "\"", "char", "\"", ",", " max", "_", "features", "=", "5", "0", "\n", "    ", ")", "\n", "    ", "word", "_", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", "_", "data", ")", "\n", "    ", "valid", "_", "words", " =", " set", "()", "\n", "    ", "for", " row", " in", " word", "_", "counts", ":", "\n", "        ", "for", " word", "_", "index", " in", " row", ".", "indices", ":", "\n", "            ", "valid", "_", "words", ".", "add", "(", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()[", "word", "_", "index", "])", "\n", "\n", "    ", "#", " Check", " if", " valid", " words", " exist", " in", " the", " input", "\n", "    ", "if", " len"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -2.7713170051574707, -0.19259190559387207, -0.04696330055594444, -0.49578356742858887, -1.9192511899746023e-05, -0.341970831155777, -0.3468817174434662, -0.001430917764082551, -1.613980770111084, -0.022194217890501022, -0.014401659369468689, -7.748573807475623e-06, -0.0003337303060106933, -0.0003507714136503637, -7.223821739898995e-05, -0.0006295844214037061, -0.004130879417061806, -0.00013696208770852536, -2.7418097943154862e-06, -2.002227783203125, -0.671273410320282, -0.00011145447206217796, -0.23319542407989502, -0.011518758721649647, -0.0439709834754467, -0.000310730334604159, -0.17882713675498962, -0.03424197435379028, -0.25420257449150085, -0.0002797450579237193, -0.11832849681377411, -0.7335080504417419, -0.07673996686935425, -2.4761366844177246, -1.1550031900405884, -0.03594519942998886, -0.016676079481840134, -1.4860708713531494, -0.2211872786283493, -0.013959039002656937, -0.010995040647685528, -0.19526201486587524, -0.010396961122751236, -0.00026723151677288115, -0.13056154549121857, -0.06844784319400787, -0.01884286478161812, -0.10084954649209976, -0.23674407601356506, -1.5062119960784912, -0.18969190120697021, -0.004018447361886501, -0.00020013237372040749, -6.198863957251888e-06, -0.0018130784155800939, -0.0006380429258570075, -2.15889310836792, -0.09981018304824829, -2.2053474822314456e-05, -2.2053474822314456e-05, -0.02523905783891678, -0.42271581292152405, -0.0027895369566977024, -0.0005351065192371607, -0.0428181029856205, -0.006481932941824198, -0.0255401860922575, -0.6612085103988647, -0.14755256474018097, -0.026602068915963173, -0.030497541651129723, -0.09228160232305527, -0.20345056056976318, -0.10935357958078384, -0.32820865511894226, -0.062482111155986786, -0.2419145405292511, -0.11265034973621368, -0.00031287543242797256, -0.00043871314846910536, -0.011986489407718182, -0.01073974184691906, -0.34168559312820435, -0.006514739710837603, -0.05302385985851288, -0.0005703729693777859, -0.09061502665281296, -2.9294235706329346, -0.05256860330700874, -0.3998762369155884, -0.21311475336551666, -0.9739108085632324, -0.6075116991996765, -0.15506412088871002, -1.963845133781433, -0.9771813750267029, -2.489567279815674, -0.39246752858161926, -0.8031569719314575, -0.003911346197128296, -2.8332583904266357, -0.6320920586585999, -0.009176223538815975, -0.0003897384158335626, -2.6055660247802734, -0.45698919892311096, -0.35447582602500916, -0.017284709960222244, -0.2755267024040222, -0.06147639453411102, -0.009980536065995693, -0.00013469743134919554, -3.576272320060525e-06, -0.0017866615671664476, -0.11848416179418564, -2.494567394256592, 0.0, -0.02629626728594303, -0.001602795091457665, -0.014600810594856739, -0.0001137191939051263, -1.0089253187179565, -0.024065060541033745, -1.1768792867660522, -0.0025949159171432257, -0.00045074793160893023, -0.0006135011790320277, -1.9073468138230965e-06, 0.0, -0.010873118415474892, -1.5503015518188477, -0.008725374937057495, -0.44534221291542053, -4.768370445162873e-07, -8.344646857949556e-07, -0.0032346330117434263, -0.05025021731853485, 0.0, -1.4543427823809907e-05, -2.9801878554280847e-05, 0.0, -2.3841855067985307e-07, -0.10134141147136688, -2.0990958213806152, -0.0012192443246021867, -2.3603161025675945e-05, -3.397406908334233e-05, -0.002632131101563573, -1.9079502820968628, -0.00038092033355496824, -0.009592747315764427, -0.30362454056739807, -0.040044255554676056, -0.1195712685585022, -0.5955100655555725, -8.940656698541716e-06, -0.03227733075618744, -0.0013773487880825996, -0.1505059152841568, -0.48919567465782166, -2.5917880535125732, -0.5840839147567749, -4.017272294731811e-05, -1.2673003673553467, -0.00041059168870560825, -2.099425792694092, -0.12557737529277802, -0.6871790289878845, -0.00020919041708111763, -9.775113539944869e-06, -0.018683986738324165, -0.03996877744793892, -2.363503932952881, -0.003767299233004451, -0.37941455841064453, -0.005090846214443445, -0.02091636136174202, -7.152555099310121e-07, -2.7894584491150454e-05, -0.003317806636914611, -0.00017855956684798002, -9.691245941212401e-05, -0.0026749325916171074, -0.0038294093683362007, -2.861018856492592e-06, -4.768360213347478e-06, -0.013606423512101173, -0.15652360022068024, -0.10313765704631805, -2.497689723968506, -0.0005597693379968405, -0.10361399501562119, -0.008242400363087654, -2.9178318977355957, -2.0522358417510986, -0.02574712224304676, -0.2304924875497818, -0.18042616546154022, -2.0486831665039062, -0.029732365161180496, -0.1321183145046234, -4.768370445162873e-07, -2.264974000354414e-06, -0.9198957681655884, -0.0018635302549228072, -0.0003194298769813031, -1.780226230621338, -1.912095069885254, -0.14591385424137115, -0.21742329001426697, -0.011475862003862858, -0.024820977821946144, -0.00013541258522309363, -0.0014631766825914383, -0.00012909532233607024, -0.0008381668012589216, -0.0004493180604185909, -0.8691707849502563, -2.3245540432981215e-05, -0.029108919203281403, -0.0009602464851923287, -0.0026027634739875793, -0.004593890625983477, -0.009196068160235882, -1.1920928244535389e-07, -9.536738616588991e-07, -0.015302515588700771, -4.768370445162873e-07, -2.0265373677830212e-05, 0.0, -5.602679812000133e-05, -0.627181351184845, -0.00022968991834204644, -0.0013710394268855453, -0.00020430385484360158, -1.311301275563892e-06, -4.768370445162873e-07, -0.03235985338687897, -0.0014227039646357298, -0.11757045239210129, -0.0013958006165921688, -0.09243279695510864, -0.5290015935897827, -0.0050900159403681755, -1.2971584796905518, -0.03955074027180672, -1.4400382041931152, -0.9876086711883545, -0.015003102831542492, -0.3965234160423279, -0.5688883066177368, -9.440929716220126e-05, -0.0041287424974143505, -2.6881656646728516], "finish_reason": "length"}], "metrics": {"energy": 897.6489872102737, "energy_per_token": 3.5064413562901318, "time": 21.848734, "time_per_token": 0.0853466171875}}
{"outputs": [{"text": "# Read the CSV file\n    df = pd.read_csv(file_path)\n\n    # Check if the CSV file is empty\n    if df.empty:\n        print(\"The input file is empty.\")\n        return\n\n    # Extract the 'Text' column from the DataFrame\n    text = df['Text']\n\n    # Initialize CountVectorizer with specific stopwords\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n    # Fit and transform the text data\n    vectorized_text = vectorizer.fit_transform(text)\n\n    # Get the feature names (unique words)\n    feature_names = vectorizer.get_feature_names()\n\n    # Calculate the word counts\n    word_counts = vectorized_text.sum(axis=0).getA1()\n\n    # Combine the feature names and word counts\n    word_counts_dict = dict(zip(feature_names, word_counts))\n\n    # Exclude the stop words from the word_counts_dict\n    filtered_word_counts = {word: count for word, count", "tokens": ["#", " Read", " the", " CS", "V", " file", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " CS", "V", " file", " is", " empty", "\n", "    ", "if", " df", ".", "empty", ":", "\n", "        ", "print", "(", "\"", "The", " input", " file", " is", " empty", ".", "\"", ")", "\n", "        ", "return", "\n", "\n", "    ", "#", " Ext", "ract", " the", " '", "Text", "'", " column", " from", " the", " Data", "Frame", "\n", "    ", "text", " =", " df", "['", "Text", "']", "\n", "\n", "    ", "#", " Initialize", " Count", "Vector", "izer", " with", " specific", " stop", "words", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "stop", "_", "words", "=", "ST", "OP", "_", "W", "OR", "DS", ")", "\n", "\n", "    ", "#", " Fit", " and", " transform", " the", " text", " data", "\n", "    ", "vector", "ized", "_", "text", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "text", ")", "\n", "\n", "    ", "#", " Get", " the", " feature", " names", " (", "unique", " words", ")", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "()", "\n", "\n", "    ", "#", " Calculate", " the", " word", " counts", "\n", "    ", "word", "_", "counts", " =", " vector", "ized", "_", "text", ".", "sum", "(", "axis", "=", "0", ")", ".", "get", "A", "1", "()", "\n", "\n", "    ", "#", " Combine", " the", " feature", " names", " and", " word", " counts", "\n", "    ", "word", "_", "counts", "_", "dict", " =", " dict", "(", "zip", "(", "feature", "_", "names", ",", " word", "_", "counts", "))", "\n", "\n", "    ", "#", " Ex", "clude", " the", " stop", " words", " from", " the", " word", "_", "counts", "_", "dict", "\n", "    ", "filtered", "_", "word", "_", "counts", " =", " {", "word", ":", " count", " for", " word", ",", " count"], "logprobs": [-0.3697170317173004, -0.8248772621154785, -0.4627956748008728, -0.2945560812950134, -1.2874520507466514e-05, -0.0778588280081749, -1.2112926244735718, -0.001335324952378869, -0.6439892053604126, -0.010782433673739433, -0.004381105303764343, -1.537788011773955e-05, -0.00015066919149830937, -0.0005133026279509068, -0.00010525626566959545, -0.0007923085941001773, -0.002444376703351736, -0.00011443436960689723, -2.9802276912960224e-06, -0.08341021090745926, -0.005216321442276239, -0.24479961395263672, -0.0002898749662563205, -0.03046921081840992, -1.2672587633132935, -0.10365106910467148, -0.1455199122428894, -1.929823398590088, -2.7894584491150454e-05, -0.6457182765007019, -0.09300138056278229, -0.019590698182582855, -0.323571115732193, -7.30726242181845e-05, -0.0033895678352564573, -0.005119429435580969, -0.0021626197267323732, -0.05404160916805267, -0.027962874621152878, -0.00047183825518004596, -0.0004832768754567951, -0.03010571375489235, -0.02196100354194641, -0.042345721274614334, -0.7271568775177002, -0.8555774688720703, -0.6785885095596313, -0.016789909452199936, -0.0014944825088605285, -0.12299957126379013, -0.5490192770957947, -0.00015639036428183317, -0.000495549407787621, -0.008270184509456158, -0.0077025312930345535, -1.2699607610702515, -0.004688579123467207, -0.00033098942367359996, -0.030328825116157532, -0.9640845656394958, -0.005500183440744877, -0.07632829993963242, -2.228837251663208, -0.02524556778371334, -0.00025149996508844197, -0.0038956718053668737, -1.0516698360443115, -0.006363012827932835, -0.9494263529777527, -0.0013329440262168646, -0.07243580371141434, -0.00014375607133843005, -0.12205737084150314, -1.5071284770965576, -0.007717672735452652, -0.3655872642993927, -0.00697653042152524, -6.329813186312094e-05, -0.13791413605213165, -0.012163274921476841, -0.00032360086333937943, -0.0063041397370398045, -2.1655070781707764, -0.995688259601593, -0.00384935992769897, -0.00011705666838679463, -0.2888670265674591, -1.4610875844955444, -0.3098081648349762, -0.5946393609046936, -0.21193094551563263, -0.00021598390594590455, -0.30151715874671936, -0.0004689785710070282, -0.0006643710657954216, -0.00022718709078617394, -2.50339189733495e-06, -7.748573807475623e-06, -0.0017084777355194092, -0.042311668395996094, -8.344646857949556e-07, -3.099436753473128e-06, -0.002898422535508871, -0.029602522030472755, 0.0, -1.1444026313256472e-05, -2.9802276912960224e-06, 0.0, -1.1920928244535389e-07, -0.05709395185112953, -0.002867398550733924, -0.02212694101035595, -0.00011002412065863609, -0.0009471459779888391, -0.768366277217865, -0.2800746560096741, -0.0029010374564677477, -0.011974004097282887, -0.10543598234653473, -0.2356535643339157, -0.7465323209762573, -6.103329360485077e-05, -1.2631125450134277, -0.712584376335144, -0.009788844734430313, -0.1590994894504547, -0.006374028977006674, -0.0009242791566066444, -5.960462772236497e-07, -7.271740287251305e-06, -0.0011191064259037375, -1.9073468138230965e-06, -2.992108420585282e-05, -0.00036793138133361936, -0.0010785006452351809, -0.009891423396766186, -0.008749717846512794, -0.044354792684316635, -0.0001289761275984347, -0.0034135663881897926, -0.6701633930206299, -0.19157755374908447, -0.6417223811149597, -0.005014343652874231, -0.21308894455432892, -0.4571906626224518, -0.00846086721867323, -0.09424325078725815, -0.13446414470672607, -2.396077979938127e-05, -0.7554678916931152, -2.5987286790041253e-05, -0.000582644424866885, -0.000102037942269817, -0.007363914977759123, -2.3841855067985307e-07, -8.344646857949556e-07, -6.6756979322235566e-06, 0.0, -3.099436753473128e-06, 0.0, -8.344646857949556e-07, -0.8680641055107117, -0.0002547178009990603, -0.008790249936282635, -9.893881360767409e-05, -0.004183114040642977, -1.8752497434616089, -0.21322686970233917, -1.3163795471191406, -0.3619782626628876, -0.6188098192214966, -3.015949550899677e-05, -0.01324286125600338, -3.4570634852570947e-06, -0.0018574618734419346, -0.0012148389359936118, -0.10749375075101852, -1.5735502529423684e-05, 0.0, 0.0, -9.894321920000948e-06, -0.032583385705947876, -0.00016318420239258558, -0.0001532914029667154, -2.9801878554280847e-05, -6.329813186312094e-05, -0.0003475538978818804, -0.07380401343107224, -1.7041430473327637, -0.000539634027518332, -0.0052413432858884335, -1.3470558769768104e-05, -0.045723218470811844, -0.005005210638046265, -0.00014768941036891192, -0.0014461545506492257, -1.372309923171997, -1.2951180934906006, -0.19904188811779022, -0.0006441186997108161, -0.05056702718138695, -0.10606370121240616, -0.000266278104390949, -1.359917163848877, -1.7881233361549675e-05, -0.10111258924007416, -0.00023910524032544345, -0.4360766112804413, -0.0612507089972496, -0.2176850140094757, -0.00022587609419133514, -0.07947522401809692, -6.758938252460212e-05, -0.0015767297009006143, -1.5616295058862306e-05, -0.0001776060671545565, 0.0, -8.344646857949556e-07, -1.9311717551317997e-05, -0.00013314791431184858, 0.0, 0.0, -0.0001287377526750788, -0.0002743821241892874, -0.008143317885696888, -0.00021205084340181202, -0.005606521852314472, -1.612106442451477, -0.0001938155182870105, -2.9277877807617188, -0.0380508229136467, -0.4963766038417816, -0.29771384596824646, -0.029071170836687088, -1.1363232135772705, -1.7121371030807495, -0.004959899000823498, -0.014953192323446274, -0.00020716428116429597, -0.07387299090623856, -0.0007811117684468627, -1.7359094619750977, -0.0003418338019400835, -0.31199344992637634, -6.782778655178845e-05, -0.0014134189113974571, -0.8425100445747375, -0.03164137899875641, -0.30124175548553467, -0.001022650278173387, -0.014612088911235332, -0.0030519834253937006, -0.0002814135223161429, -3.731181277544238e-05, -0.02504875883460045], "finish_reason": "length"}], "metrics": {"energy": 912.9805415763857, "energy_per_token": 3.5663302405327566, "time": 22.028006, "time_per_token": 0.0860468984375}}
