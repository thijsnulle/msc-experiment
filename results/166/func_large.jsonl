{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"Both start_date and end_date must be datetime objects\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    if start_date.weekday() >= 5:\n        start_date += datetime.timedelta(days=(5 - start_date.weekday()))\n\n    # Get the holidays for the given country\n    public_holidays = holidays.country_holidays(country)\n\n    # Create a list of business days between start and end dates\n    business_days = []\n    for single_date in pd.date_range(start_date, end_date).to_pydatetime():\n        if single_date.weekday() < 5 and not public_holidays.get(single_date):  # exclude weekends and public holidays\n            business_days.append(single_date.date())\n    business_days.append(end_date.date())\n\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Both", " start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "\n", "    ", "if", " start", "_", "date", ".", "week", "day", "()", " >=", " ", "5", ":", "\n", "        ", "start", "_", "date", " +=", " datetime", ".", "tim", "ed", "elta", "(", "days", "=(", "5", " -", " start", "_", "date", ".", "week", "day", "()))", "\n", "\n", "    ", "#", " Get", " the", " holidays", " for", " the", " given", " country", "\n", "    ", "public", "_", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " business", " days", " between", " start", " and", " end", " dates", "\n", "    ", "business", "_", "days", " =", " []", "\n", "    ", "for", " single", "_", "date", " in", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ")", ".", "to", "_", "py", "datetime", "():", "\n", "        ", "if", " single", "_", "date", ".", "week", "day", "()", " <", " ", "5", " and", " not", " public", "_", "h", "olidays", ".", "get", "(", "single", "_", "date", "):", "  ", "#", " exclude", " weekends", " and", " public", " holidays", "\n", "            ", "business", "_", "days", ".", "append", "(", "single", "_", "date", ".", "date", "())", "\n", "    ", "business", "_", "days", ".", "append", "(", "end", "_", "date", ".", "date", "())", "\n", "\n", "    ", "return", " business", "_", "days", "\n", "\n", "def"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -1.6813397407531738, -0.073942631483078, -0.021852191537618637, -0.00041083001997321844, -0.0003630455757956952, -0.00031680811662226915, -0.00015448330668732524, -3.158996332786046e-05, -0.17927652597427368, -0.000512111175339669, -0.15360362827777863, -0.006349746137857437, -1.1980366706848145, -0.00019035911827813834, -0.0009203489171341062, -0.351701557636261, -0.055906735360622406, -0.03429623320698738, -2.50339189733495e-06, -5.960462772236497e-07, -0.05857650190591812, -0.0005105622112751007, 0.0, 0.0, -0.005702537018805742, -0.0012757980730384588, -0.0008765193051658571, -0.0010876698652282357, -0.00014518637908622622, -1.1920928244535389e-07, -0.0012411518255248666, -0.011111877858638763, -0.04382392391562462, -0.00034350217902101576, -0.0003438596613705158, -0.14705821871757507, -0.0887228325009346, -0.1583278924226761, -0.2776145339012146, -0.0001691436773398891, -8.237022848334163e-05, -0.0041391896083951, -9.63164638960734e-05, -0.0010001424234360456, -0.24670329689979553, -0.0007641970878466964, -3.8672220706939697, -1.8887521028518677, -1.6689160474925302e-05, -3.6477376852417365e-05, -0.17934946715831757, -0.12214873731136322, -4.207999518257566e-05, -0.0061334241181612015, -1.4199843406677246, -0.0022025867365300655, -0.048815663903951645, -0.06244537979364395, -0.1450916975736618, -0.012012639082968235, -0.1699618101119995, -0.004607181064784527, -0.012550304643809795, -0.7061285972595215, -1.9110052585601807, -0.024581631645560265, -0.003532599890604615, -9.107174992095679e-05, -9.417090768693015e-05, -0.004837001673877239, -0.17240123450756073, -1.784674048423767, -0.9327123165130615, -0.2521645724773407, -0.008544553071260452, -7.748573807475623e-06, -1.0371154530730564e-05, -0.0008640132145956159, -0.0007123793475329876, -9.059865078597795e-06, -0.021229997277259827, -0.037269704043865204, -1.0367534160614014, -0.0007334641413763165, -2.172210693359375, -1.8266527652740479, -2.1894478797912598, -2.404670238494873, -0.13474880158901215, -0.03239043802022934, -1.3241887092590332, -0.011368967592716217, -0.675841748714447, -0.0008662762120366096, -3.2794482707977295, -0.0007381098694168031, -0.002913280390202999, -0.001798085169866681, -0.0032454458996653557, -0.0609610453248024, -0.0004245333548169583, -0.16734954714775085, -3.683499380713329e-05, -0.0003610197745729238, -0.002184744458645582, -0.003164405468851328, -0.006194676738232374, -0.18413521349430084, -0.025252774357795715, -0.23585499823093414, -0.0004698126285802573, -0.2221348136663437, -0.860669732093811, -0.3158636689186096, -0.7043065428733826, -0.05716724693775177, -0.49834832549095154, -0.006876967381685972, -1.1878159046173096, -0.9621639251708984, -1.4209198951721191, -0.00047922570956870914, -0.8087759613990784, -0.18035748600959778, -0.0011998366098850965, -0.21296139061450958, -0.00016091958968900144, -0.003246990730985999, -0.0072269923985004425, -0.5217399001121521, -0.0016269554616883397, -0.038105908781290054, -2.1147353649139404, -3.115222930908203, -0.0005853846669197083, -4.5536911784438416e-05, -0.0001618731184862554, -0.024339085444808006, -0.00013255194062367082, -0.011998740024864674, -4.6491513785440475e-06, -4.0531076592742465e-06, -0.00014697425649501383, -0.008621258661150932, -0.08644530922174454, -3.731181277544238e-05, -0.05392053350806236, -0.00039772229501977563, -0.0003685271949507296, -2.8132995794294402e-05, -0.9625173807144165, -0.005340357776731253, -0.23006571829319, -4.291525328881107e-06, -0.18489855527877808, -0.0034647691063582897, -0.024990392848849297, -0.026922976598143578, -0.0061895824037492275, -0.15696357190608978, -0.03410476818680763, -1.9073468138230965e-06, -5.960462772236497e-07, -0.06407108902931213, -0.05383536219596863, -2.0265558760002023e-06, -0.00017021637177094817, -0.05956627056002617, -0.0001776060671545565, -0.0007652691565454006, -0.045040152966976166, -2.164360761642456, -0.4354341924190521, -3.576278118089249e-07, -3.4570634852570947e-06, -1.0728830375228426e-06, -0.0029105464927852154, -0.00048756631440483034, -0.0007375142886303365, -0.00984798464924097, -8.344646857949556e-07, 0.0, -0.5405457615852356, -2.1164705753326416, -2.4199192921514623e-05, -2.8497331142425537, -0.14941221475601196, -0.0722547248005867, -1.0135163068771362, -0.004959780257195234, -0.012303056195378304, -0.0038963842671364546, -0.013599603436887264, -5.960462772236497e-07, -7.211902266135439e-05, -0.0006491222884505987, -0.00017951308109331876, -0.0002946419408544898, -0.018586402758955956, -1.0728830375228426e-06, -4.768370445162873e-07, -1.4477527141571045, -0.022136852145195007, -0.006069561466574669, -0.012038668617606163, -1.7120137214660645, -2.8801283836364746, -0.00014554394874721766, -0.0018192660063505173, -0.42704421281814575, -0.14315879344940186, -0.004805325530469418, -0.03548716381192207, -2.038458114839159e-05, -2.2649508537142538e-05, -0.315163791179657, -0.0024119114968925714, -0.007706198375672102, -0.5185020565986633, -0.7252712845802307, -0.000683074293192476, -0.0508597195148468, -0.02732022851705551, -7.033323527139146e-06, -9.333651541965082e-05, -0.7703625559806824, -0.012682851403951645, -2.2978310585021973], "finish_reason": "stop"}], "metrics": {"energy": 922.5263304309848, "energy_per_token": 3.6177503154156265, "time": 22.217922, "time_per_token": 0.08712910588235295}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date must be a datetime object and not later than end_date.\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date must be a datetime object and not earlier than start_date.\")\n\n    all_days = pd.bdate_range(start=start_date, end=end_date)\n\n    holidays_list = holidays.country_holidays(country, years=[year for year in range(start_date.year, end_date.year + 1)])\n\n    all_days = [date for date in all_days if date.date() not in holidays_list]\n\n    return all_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " not", " later", " than", " end", "_", "date", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " not", " earlier", " than", " start", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "all", "_", "days", " =", " pd", ".", "b", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ")", "\n", "\n", "    ", "h", "olidays", "_", "list", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "year", " for", " year", " in", " range", "(", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", " +", " ", "1", ")]", ")", "\n", "\n", "    ", "all", "_", "days", " =", " [", "date", " for", " date", " in", " all", "_", "days", " if", " date", ".", "date", "()", " not", " in", " holidays", "_", "list", "]", "\n", "\n", "    ", "return", " all", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -0.3671383857727051, -0.0018872085493057966, -0.00028320116689428687, -0.2218606024980545, -0.003563959849998355, -0.015293475240468979, -0.17545126378536224, -0.04588855803012848, -0.12847276031970978, -1.54889714717865, -1.3416228294372559, -0.020432231947779655, -0.029619766399264336, -0.0012143626809120178, -0.0003152588615193963, -0.545383632183075, -0.004459792748093605, -0.00026794656878337264, -0.0008339979685842991, -0.2858767807483673, -0.007208647672086954, -0.000337305391440168, -3.2066785934148356e-05, -1.9430925021879375e-05, -0.0015607806853950024, -2.3841855067985307e-07, -4.768370445162873e-07, -4.768258077092469e-05, -0.00020168177434243262, -0.0013715155655518174, -0.0007202415145002306, -0.020127225667238235, -5.960462772236497e-07, -1.1920928244535389e-07, -0.0009598892065696418, -0.000988114275969565, -3.576278118089249e-07, -1.1920928244535389e-07, -0.000428942235885188, -0.00020454221521504223, -0.00047064671525731683, -0.00017069313616957515, -5.793403761344962e-05, -2.3841855067985307e-07, -0.0002562671434134245, -0.00032360086333937943, -0.003477005288004875, -0.00014006110723130405, -4.732496745418757e-05, -0.0005113962688483298, -0.00024244230007752776, -0.0005290300468914211, -0.0007531190640293062, -0.0006046851049177349, -0.0014790082350373268, -0.0030353448819369078, -0.030824484303593636, -0.0015280486550182104, -0.0031354096718132496, -0.0002335037279408425, -0.00018571082910057157, -0.003373529063537717, -0.00032431588624604046, -4.351044481154531e-05, -0.000835903687402606, -0.22869811952114105, -0.0009538153535686433, -2.0048766136169434, -0.0018115314887836576, -0.25516214966773987, -0.03481077030301094, -0.03983636200428009, -1.4305012882687151e-05, -1.8735949993133545, -0.0001941730733960867, -7.152555099310121e-07, -0.00101062236353755, -0.0007320346776396036, -0.015878308564424515, -0.8975271582603455, -0.057110052555799484, -8.344646857949556e-07, -1.1920928244535389e-07, -0.025887805968523026, -0.005224622320383787, -0.00010227633902104571, -0.00034481301554478705, -1.311301275563892e-06, -1.1920928244535389e-07, -0.6035747528076172, -0.645038902759552, -1.736580729484558, -0.0006519814487546682, -1.7556394338607788, -0.290384978055954, -0.22342045605182648, -0.7729962468147278, -0.003586053615435958, -0.20794223248958588, -0.0009309487068094313, -0.42362797260284424, -0.00017176583060063422, -0.0017658369615674019, -0.00027652730932459235, -0.002916014287620783, -0.012596450746059418, -0.908530056476593, -0.0694226622581482, -0.797356903553009, -3.0334808826446533, -0.29906219244003296, -0.002698829397559166, -0.0039899516850709915, -0.025046898052096367, -0.0035283234901726246, -0.037040553987026215, -9.059865078597795e-06, -1.9192511899746023e-05, -0.0013733012601733208, -0.00011228884250158444, -0.01617804542183876, -0.02815123088657856, -1.1920922133867862e-06, -1.9073468138230965e-06, -1.9907753085135482e-05, -4.51792984677013e-05, -0.595287024974823, -0.010609885677695274, -0.0016847953666001558, -0.014816365204751492, -0.03583835810422897, -0.049703411757946014, -0.5886268019676208, -0.0004956685588695109, -3.1049931049346924, -0.00034588552080094814, -0.5497541427612305, -0.4950018525123596, -1.0145628452301025, -2.141928195953369, -0.14108261466026306, -0.0017057405784726143, -0.00112255965359509, -0.0025879007298499346, -1.1920928244535389e-07, -1.9073468138230965e-06, -0.04483386501669884, -0.12420234084129333, -1.7488173246383667, -0.2046227753162384, -0.0017375147435814142, -0.016985774040222168, -1.2040065485052764e-05, -0.001379848807118833, -0.0001726001501083374, -1.2874520507466514e-05, -0.05661182105541229, -0.01561451330780983, -0.20805464684963226, -0.0005203323671594262, -0.0697707012295723, -0.027542568743228912, -5.602820692729438e-06, -1.3351351299206726e-05, -1.1540056467056274, -8.344646857949556e-07, -1.0728830375228426e-06, -1.7881377516459906e-06, -2.5629668016335927e-05, -0.1480095386505127], "finish_reason": "stop"}], "metrics": {"energy": 681.629913374901, "energy_per_token": 3.4777036396678622, "time": 17.027657, "time_per_token": 0.08687580102040816}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"Invalid start date. Start date must be a datetime object and before the end date.\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"Invalid end date. End date must be a datetime object and after the start date.\")\n\n    # Get public holidays for the specified country\n    holidays_list = holidays.country_holidays(country)\n\n    # Calculate the number of days between start and end date\n    num_days = (end_date - start_date).days + 1\n    business_days = []\n\n    # Iterate over each day between start and end date, excluding weekends and holidays\n    for day in range(num_days):\n        current_day = start_date + pd.Timedelta(days=day)\n        if current_day.isoweekday() not in [6, 7] and current_day not in holidays_list:\n            business_days.append(current_day)\n\n    ", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " start", " date", ".", " Start", " date", " must", " be", " a", " datetime", " object", " and", " before", " the", " end", " date", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " end", " date", ".", " End", " date", " must", " be", " a", " datetime", " object", " and", " after", " the", " start", " date", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " public", " holidays", " for", " the", " specified", " country", "\n", "    ", "h", "olidays", "_", "list", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Calculate", " the", " number", " of", " days", " between", " start", " and", " end", " date", "\n", "    ", "num", "_", "days", " =", " (", "end", "_", "date", " -", " start", "_", "date", ")", ".", "days", " +", " ", "1", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " day", " between", " start", " and", " end", " date", ",", " excluding", " weekends", " and", " holidays", "\n", "    ", "for", " day", " in", " range", "(", "num", "_", "days", "):", "\n", "        ", "current", "_", "day", " =", " start", "_", "date", " +", " pd", ".", "Tim", "ed", "elta", "(", "days", "=", "day", ")", "\n", "        ", "if", " current", "_", "day", ".", "is", "ow", "e", "ek", "day", "()", " not", " in", " [", "6", ",", " ", "7", "]", " and", " current", "_", "day", " not", " in", " holidays", "_", "list", ":", "\n", "            ", "business", "_", "days", ".", "append", "(", "current", "_", "day", ")", "\n", "\n", "    "], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -1.9793744087219238, -0.172853022813797, -0.5491934418678284, -0.7255433797836304, -2.220409631729126, -0.0023267597425729036, -0.2202416956424713, -0.0038349907845258713, -0.019197847694158554, -0.1538970023393631, -0.023887107148766518, -0.06526228785514832, -0.5735640525817871, -0.9120714068412781, -0.00032026408007368445, -0.002950959140434861, -0.00984609592705965, -0.0016093410085886717, -0.00037496211007237434, -0.0007015389273874462, -0.39603134989738464, -0.01285692397505045, -0.0003358753747306764, -2.7417760065873154e-05, -1.7404405298293568e-05, -0.0014035383937880397, -3.576278118089249e-07, -2.3841855067985307e-07, -2.932505594799295e-05, -0.00016234986833296716, -0.0013090145075693727, -0.0005951540661044419, -0.013860168866813183, -7.152555099310121e-07, -1.1920928244535389e-07, -0.0009781105909496546, -0.0006033745594322681, -3.576278118089249e-07, -3.576272320060525e-06, -0.0004659997357521206, -0.00022623363474849612, -0.00046885941992513835, -0.0001699779968475923, -5.3881147323409095e-05, -1.1920928244535389e-07, -0.00012158608296886086, -0.000505677133332938, -0.0003409996279515326, -0.00200654286891222, -0.00036566724884323776, -0.00017617580306250602, -0.0020469920709729195, -0.0002019201492657885, -0.00034791138023138046, -0.0003587556129787117, -0.0004961451631970704, -0.0003475538978818804, -0.00024279984063468874, -0.0017714299028739333, -0.001763456966727972, -0.0017016944475471973, -0.0003965306677855551, -0.00023123928986024112, -0.0015010291244834661, -0.0001308832288486883, -6.210611172718927e-05, -0.0003094194398727268, -0.14506518840789795, -0.001019792165607214, -1.1897529363632202, -2.4345767498016357, -1.0430316925048828, -0.0038854596205055714, -0.30526381731033325, -0.07215790450572968, -0.26795607805252075, -0.006494960747659206, -0.17423781752586365, -0.000974656839389354, -1.3107085227966309, -0.2768633961677551, -0.02879241667687893, -0.3888590633869171, -0.0009943069890141487, -0.15106886625289917, -0.0017952292691916227, -0.08176106959581375, -6.9141146923357155e-06, -0.0003026265767402947, -8.332382276421413e-05, -0.0010317008709535003, -0.005209324415773153, -0.3474571704864502, -0.06785152852535248, -0.11559906601905823, -0.000621959799900651, -0.030415326356887817, -2.7675468921661377, -0.6485294699668884, -0.24955697357654572, -0.0004580163804348558, -0.20632699131965637, -0.09939473867416382, -0.3860214352607727, -0.6465952396392822, -0.0002498314715921879, -0.34758853912353516, -0.3807779848575592, -0.00022456508304458112, -0.2614714205265045, -0.0006246999255381525, -0.0221834909170866, -0.0026209547650069, -0.020283536985516548, -0.001965973060578108, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.00488647073507309, -9.536288416711614e-05, 0.0, 0.0, -0.00083078199531883, -0.00018189683032687753, -1.1205610462639015e-05, -0.20535948872566223, -0.00046885941992513835, -0.00038842763751745224, -0.17999610304832458, -2.894810914993286, -1.033543586730957, -0.00017629499780014157, -0.0035086043644696474, -0.012930946424603462, -0.05530503764748573, -0.03305509313941002, -0.09264742583036423, -0.00024816294899210334, -0.7957577109336853, -0.5025655627250671, -0.0012185298837721348, -1.0997745990753174, -0.6869879961013794, -0.04298540949821472, -2.331698417663574, -0.30898597836494446, -0.034400589764118195, -0.00015364897262770683, -0.015904707834124565, -2.926616668701172, -0.4807910621166229, -0.22346755862236023, -0.10811108350753784, -2.4231512546539307, -0.025168150663375854, -0.00039188333903439343, -0.00490367179736495, -1.2357573509216309, -0.14841730892658234, -0.02610686421394348, -5.113947918289341e-05, -0.007978474721312523, 0.0, -5.960462772236497e-07, -0.0007192885386757553, -0.0005330810672603548, -0.0018625784432515502, -0.6536728143692017, -0.007391486316919327, -2.1850321292877197, -0.0005403488758020103, -0.004006811883300543, -1.1920928244535389e-07, -4.768370445162873e-07, -0.007541756145656109, -0.03443905711174011, -1.6689286894688848e-06, -0.21082906424999237, -5.960462772236497e-07, 0.0, -0.00033790123416110873, -0.09205613285303116, -0.0007363230688497424, -9.572047565598041e-05, -0.0007303669699467719, -0.015049958601593971, -0.0820065587759018, -0.15886083245277405, -0.03686581552028656, -1.1920928244535389e-07, -1.4305104514278355e-06, -0.04932108521461487, -2.819287061691284, -9.846202738117427e-05, -2.9802276912960224e-06, -3.3378546504536644e-06, -7.152555099310121e-07, -6.818538531661034e-05, -0.9971436858177185, -1.0728830375228426e-06, -0.48456713557243347, -0.0021230080164968967, -7.152301259338856e-05, -0.007629185914993286, -1.2040065485052764e-05, -0.018474530428647995, -0.00031454383861273527, -0.09316234290599823, 0.0, -2.3841855067985307e-07, -0.17477186024188995, -5.960462772236497e-07, -0.0017977281240746379, -0.000485183292767033, -6.9141146923357155e-06, -0.04730503261089325, -0.15463629364967346, -0.0020361661445349455, -0.01868082769215107, -1.1920928244535389e-07, -7.271740287251305e-06, -9.881961887003854e-05, -4.339123915997334e-05, -0.00034374051028862596, -0.017766732722520828, -1.1920928244535389e-07, -5.960462772236497e-07, -0.12448235601186752, -0.00343542592599988, -0.05750944837927818, -0.0011200590524822474], "finish_reason": "length"}], "metrics": {"energy": 883.6332117929451, "energy_per_token": 3.4516922335661917, "time": 22.493456, "time_per_token": 0.0878650625}}
{"outputs": [{"text": "# Check if start_date and end_date are datetime objects\n    if not isinstance(start_date, datetime):\n        raise ValueError(\"start_date must be a datetime object.\")\n\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"end_date must be a datetime object.\")\n\n    # Check if start_date is before end_date\n    if start_date > end_date:\n        raise ValueError(\"start_date cannot be after end_date.\")\n\n    # Check if country is a valid country code\n    holidays.country_holidays(country)\n\n    # Create a list of all dates between start_date and end_date\n    all_dates = pd.date_range(start_date, end_date, freq='D').to_pydatetime().tolist()\n\n    # Filter out weekends and public holidays\n    business_days = [date for date in all_dates if date.weekday() < 5 and date not in holidays.country_holidays(country)]\n\n    return business_days", "tokens": ["#", " Check", " if", " start", "_", "date", " and", " end", "_", "date", " are", " datetime", " objects", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " start", "_", "date", " is", " before", " end", "_", "date", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " cannot", " be", " after", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " country", " is", " a", " valid", " country", " code", "\n", "    ", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " dates", " between", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "all", "_", "dates", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", ".", "to", "_", "py", "datetime", "()", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Filter", " out", " weekends", " and", " public", " holidays", "\n", "    ", "business", "_", "days", " =", " [", "date", " for", " date", " in", " all", "_", "dates", " if", " date", ".", "week", "day", "()", " <", " ", "5", " and", " date", " not", " in", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")]", "\n", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2844631671905518, -0.8149701952934265, -0.5908946990966797, -0.18513375520706177, -0.039820555597543716, -0.0005248599336482584, -0.31302282214164734, -0.001328062848187983, -0.0004256058018654585, -0.00021431533969007432, -0.017994370311498642, -0.5649935007095337, -0.0256348866969347, -0.5487510561943054, -0.002745907986536622, -0.025167685002088547, -0.005849386565387249, -0.003994344733655453, -3.814624506048858e-05, -0.0005156855913810432, -3.2186455882765586e-06, -1.7881377516459906e-06, -9.572047565598041e-05, -0.001179595128633082, -1.1575851440429688, -0.0020811345893889666, -0.002046754118055105, -0.009368033148348331, -0.010032820515334606, -7.152555099310121e-07, -0.052750684320926666, -0.020446598529815674, -0.1452941745519638, -0.0005295066512189806, -0.0002914242504630238, -0.1672305464744568, -0.0004862556525040418, -0.01466330885887146, -0.051754601299762726, -0.009392951615154743, -1.2218503952026367, -0.0021422787103801966, -0.00014482879487331957, -0.0008531744824722409, -2.2131850719451904, -0.00025328766787424684, -0.05125799775123596, -0.003944118972867727, -0.0003044141922146082, -2.1457441107486375e-05, -0.001348539488390088, -1.1920928244535389e-07, -1.1920922133867862e-06, -3.611976353568025e-05, -0.00014256415306590497, -0.0005738280597142875, -0.00011574551899684593, -0.0005208089714869857, -6.270212179515511e-05, -4.637133679352701e-05, 0.0, -0.0001941730733960867, -6.341733387671411e-05, -0.002973066410049796, -0.00010013079008786008, -3.1709168979432434e-05, -0.00022003613412380219, -4.660974445869215e-05, -0.0002686616498976946, -0.0002609150833450258, -0.00011824862303910777, -0.002411079127341509, -0.00010799778101500124, -1.9550132492440753e-05, -3.2543604902457446e-05, -0.005273598246276379, -0.001479603466577828, -0.013561734929680824, -0.06571615487337112, -0.01503668911755085, -0.04653497785329819, -0.000800408364739269, -0.00013100242358632386, -0.055097248405218124, -0.9199056029319763, -0.2554718852043152, -0.00047505536349490285, -7.068861305015162e-05, -0.015262833796441555, -0.000730128725990653, -0.0012648447882384062, -0.052573129534721375, -2.3841830625315197e-06, -3.576278118089249e-07, -0.11838790774345398, -0.00020740265608765185, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0018153393175452948, -0.0005088941543363035, -0.0006809299811720848, -0.002789774676784873, -0.00013457823661156, -8.344646857949556e-07, -0.0009600082994438708, -0.00617785332724452, -0.013740358874201775, -0.0001003691868390888, -0.00013636612857226282, -2.8303160667419434, -0.006550269667059183, -0.0684456154704094, -0.00271428469568491, -0.00018142008048016578, -3.838465272565372e-05, -0.006025601178407669, -0.000927137560211122, -4.2199197196168825e-05, -0.00035065223346464336, -0.011500257067382336, -0.0025348695926368237, -0.15077446401119232, -1.7954707145690918, -0.013130978681147099, -1.3977152109146118, -0.3238260746002197, -0.41521161794662476, -0.29086002707481384, -1.9363186359405518, -0.07704761624336243, -0.0906979963183403, -0.0033024793956428766, -3.3043723106384277, -0.2753790616989136, -0.5655933022499084, -0.18360137939453125, -4.6491513785440475e-06, -0.0006260104128159583, -0.18323521316051483, -0.007904321886599064, -0.010109765455126762, -0.056276075541973114, -0.13699357211589813, -0.024650603532791138, -0.0007751559023745358, -0.1002640649676323, -0.6083215475082397, -0.19487282633781433, -0.5243372917175293, -0.029162874445319176, -0.6886587738990784, -2.013993263244629, -0.13980929553508759, -0.09408017992973328, -0.074879489839077, -0.0002610342635307461, -0.001940988120622933, -0.0002743821241892874, -0.0002653246629051864, -8.999896090244874e-05, -0.5129001140594482, -0.0008197046699933708, -0.7929391264915466, -8.630380034446716e-05, -0.12926281988620758, -0.007470055483281612, -0.03128766641020775, -1.07287787614041e-05, -0.02690812386572361, -1.1920922133867862e-06, -5.364403477869928e-06, -6.639736966462806e-05, -0.0049795894883573055, -0.28657597303390503, -1.966933996300213e-05, -0.0776611939072609, -0.0007337023853324354, -3.135155202471651e-05, -2.264974000354414e-06, -0.4867405295372009, -0.0274102371186018, -1.2755313036905136e-05, -0.0941329151391983, -0.010768989101052284, -0.03946273401379585, -0.6320993900299072, -1.2230080366134644, -8.344646857949556e-07, -0.8938800096511841, -0.006685982458293438, -6.353653589030728e-05, -0.25012198090553284, -0.0006167178507894278, 0.0, -0.00016044282529037446, -0.003593180561438203, -0.038764022290706635, -0.0007332258974201977, -0.010630644857883453, -1.7812213897705078, -0.15807805955410004, -0.22613076865673065, -0.2732865512371063, -0.20085549354553223, -0.0002746204845607281, -0.23528346419334412, -0.0006160030607134104, -0.15568257868289948, -0.0001546025014249608, -0.008604357950389385, -0.0026875350158661604, -0.1697479635477066, -0.3916102647781372, -0.02044297754764557, -3.683499380713329e-05, -0.00010740180005086586, -0.0003363520372658968, -3.576278118089249e-07, -1.4424220353248529e-05, -0.07534249871969223, -0.1113218292593956, -0.003384815761819482, -0.023581290617585182, -1.2159273865108844e-05, -0.00020418466010596603, -0.09424401074647903, -0.00015436411194968969, -0.0048507628962397575, -0.05793355032801628, -0.6755240559577942, -0.04730798676609993, -7.819823804311454e-05, -0.029073139652609825, -0.004279503133147955, -0.010243108496069908, -1.4662635294371285e-05, -3.099436753473128e-06, -1.1920922133867862e-06, -0.0012490098597481847, -0.0028525397647172213, -0.08794079720973969, -0.03224824368953705, -0.06719902157783508, -0.000506511190906167, -0.1973951756954193, -0.003989357966929674, -1.1444026313256472e-05, -0.00018046658078674227, -1.2924683094024658, -1.7881377516459906e-06, -1.311301275563892e-06, -2.50339189733495e-06, -2.2053474822314456e-05, -0.15625710785388947], "finish_reason": "stop"}], "metrics": {"energy": 890.6404234218604, "energy_per_token": 3.506458359928584, "time": 22.074179, "time_per_token": 0.08690621653543308}}
{"outputs": [{"text": "if not isinstance(start_date, datetime):\n        raise ValueError(\"start_date must be a datetime object\")\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"end_date must be a datetime object\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n    if start_date == end_date:\n        return [start_date]\n\n    holidays_df = pd.DataFrame(holidays.country_holidays(country, years=[start_date.year, end_date.year]))\n    holidays_list = holidays_df.iloc[:, 0].to_list()\n    business_days = []\n\n    # Calculate business days\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() < 5 and current_date not in holidays_list:\n            business_days.append(current_date)\n        current_date += datetime.timedelta(days=1)\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "    ", "if", " start", "_", "date", " ==", " end", "_", "date", ":", "\n", "        ", "return", " [", "start", "_", "date", "]", "\n", "\n", "    ", "h", "olidays", "_", "df", " =", " pd", ".", "DataFrame", "(", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", "]))", "\n", "    ", "h", "olidays", "_", "list", " =", " holidays", "_", "df", ".", "il", "oc", "[:", ",", " ", "0", "]", ".", "to", "_", "list", "()", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Calculate", " business", " days", "\n", "    ", "current", "_", "date", " =", " start", "_", "date", "\n", "    ", "while", " current", "_", "date", " <=", " end", "_", "date", ":", "\n", "        ", "if", " current", "_", "date", ".", "week", "day", "()", " <", " ", "5", " and", " current", "_", "date", " not", " in", " holidays", "_", "list", ":", "\n", "            ", "business", "_", "days", ".", "append", "(", "current", "_", "date", ")", "\n", "        ", "current", "_", "date", " +=", " datetime", ".", "tim", "ed", "elta", "(", "days", "=", "1", ")", "\n", "    ", "return", " business", "_", "days"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -1.139945149421692, -0.004073181189596653, -0.006729439832270145, -0.005585894919931889, -0.005758482031524181, -2.622600959512056e-06, -0.09827292710542679, -0.03904367983341217, -0.191785991191864, -0.0014753182185813785, -0.0004294188693165779, -0.22210226953029633, -0.0008122005965560675, -0.018401386216282845, -0.05254700034856796, -0.017257995903491974, -0.336495965719223, -0.00023648326168768108, -0.001369134639389813, -0.14742058515548706, -0.03362594544887543, -0.3068881332874298, -0.0006288696313276887, -1.597391747054644e-05, -0.0009285667329095304, -2.3841855067985307e-07, -4.768370445162873e-07, -2.7417760065873154e-05, -0.00019464982324279845, -0.005310476757586002, -0.00013696208770852536, -0.0005615564878098667, -0.00018106251081917435, -0.00010585224663373083, -2.3841855067985307e-07, -0.00016091958968900144, -0.00018106251081917435, -0.0028794039972126484, -0.00010561384988250211, -5.0424259825376794e-05, -0.00023457636416424066, -4.911301948595792e-05, -0.000359351426595822, -0.00036507140612229705, -0.0002019201492657885, -0.0003331344632897526, -2.276871418871451e-05, -3.5523738915799186e-05, -0.06423857063055038, -0.0031695151701569557, -0.03739694505929947, -1.311301275563892e-06, -1.1920928244535389e-07, -0.07476610690355301, -0.0007303669699467719, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0016013667918741703, -0.0009253510506823659, -0.0007294139941222966, -0.0011798333143815398, -0.000120751719805412, -1.1920922133867862e-06, -0.0008095800876617432, -0.008057588711380959, -0.032473646104335785, -0.0009134411229752004, -5.936446541454643e-05, -0.09943229705095291, -0.072091244161129, -0.10666455328464508, -0.2625301778316498, -0.000266278104390949, -7.366862701019272e-05, -0.0012260308722034097, -6.353653589030728e-05, -0.0007862337515689433, -1.4589687585830688, -0.6608782410621643, -0.42368176579475403, -3.933898824470816e-06, -1.5020257706055418e-05, -1.4528834819793701, -0.011010839603841305, -3.6954811548639555e-06, -6.437280717364047e-06, -0.009817766025662422, -0.004290423821657896, -0.003134815488010645, -0.7152872085571289, -0.30892688035964966, -0.030274584889411926, -6.365573790390044e-05, -0.00015293381875380874, -0.05312627926468849, -0.01781158521771431, -0.3147047460079193, -0.0009180859779007733, -2.265505313873291, -0.15772858262062073, -0.11110285669565201, -2.4609375, -0.0029491763561964035, -0.4217457175254822, -1.1205610462639015e-05, -0.017710167914628983, -0.17477035522460938, -0.39225777983665466, -6.723177648382261e-05, -0.010813095606863499, -0.24297720193862915, -9.07141511561349e-05, -0.0011243456974625587, -0.00011955977242905647, -0.0020698329899460077, -0.011632118374109268, -0.20931470394134521, -0.39981845021247864, -0.7801713347434998, -0.057161845266819, -6.603976362384856e-05, -2.2649508537142538e-05, -0.0037925951182842255, -0.00019786784832831472, -0.019542885944247246, -0.09579429030418396, -1.311301275563892e-06, -1.7881377516459906e-06, -5.924526340095326e-05, -1.4543427823809907e-05, -0.3133876621723175, -0.07676712423563004, -0.133012056350708, -0.291963130235672, -0.010436836630105972, -0.01032782532274723, -2.197415828704834, -0.00453408295288682, -0.112943634390831, -0.00022599527437705547, -6.687417771900073e-05, -0.5454767346382141, -1.4503810405731201, -7.152555099310121e-07, -0.9841709733009338, -0.013128037564456463, -0.14361469447612762, -0.1963670700788498, -0.001835091970860958, -0.035253118723630905, -0.8469168543815613, -4.529942543740617e-06, -0.025077706202864647, -0.0048772175796329975, -0.046299632638692856, -0.7700534462928772, -1.288597583770752, -0.0017527469899505377, -0.004965236876159906, -0.07765468209981918, -0.5058387517929077, -0.00456742849200964, -1.4094047546386719, -0.00018654513405635953, -2.7468841075897217, -4.008757591247559, -0.6033673882484436, -0.012006985023617744, -1.6582603454589844, -0.002839582972228527, -1.0585054159164429, -0.013795151375234127, -0.15150079131126404, -0.0008653233526274562, -0.015429181046783924, -3.576278118089249e-07, -6.198863957251888e-06, -0.07053074240684509, -0.024372242391109467, -0.04528091847896576, -0.022099189460277557, -3.576278118089249e-07, -1.5497195136049413e-06, -0.05764078348875046, -0.000321336614433676, 0.0, -2.3841855067985307e-07, -0.001877094735391438, -0.0036368912551552057, -0.0065736002288758755, -0.09354716539382935, -0.046603359282016754, -1.1920922133867862e-06, -4.410734163684538e-06, -0.061210792511701584, -0.11027418822050095, -1.0251946150674485e-05, -0.00018344627460464835, -0.16945406794548035, -8.034383063204587e-05, -0.014963761903345585, -0.02489842288196087, -0.0328407809138298, -3.576278118089249e-07, -2.9802276912960224e-06, -0.05011620745062828, -3.576278118089249e-07, -0.0001892864383989945, -4.51792984677013e-05, -0.00013398226292338222, -0.007935662753880024, -0.43259909749031067, -0.002554964739829302, -0.03225862979888916, -1.1920928244535389e-07, -1.0967194612021558e-05, -0.00016342257731594145, -7.164221460698172e-05, -0.0001567479339428246, -0.011609847657382488, -4.768370445162873e-07, -5.960462772236497e-07, -0.02810208685696125, -0.001846990897320211, -0.051217563450336456, -0.016871260479092598, -1.1920928244535389e-07, -3.814689989667386e-06, -0.17570090293884277, -1.626548409461975, -0.0024079871363937855, -0.0013241341803222895, -2.2649508537142538e-05, -2.264974000354414e-06, -0.0012955614365637302, -0.005581982899457216, -0.0009924016194418073, -0.00027724236133508384, -0.0004913791781291366, -0.009462034329771996, -2.3302245140075684, -0.11994669586420059, -0.009580586105585098, -1.2993727978027891e-05, -0.00019095504831057042], "finish_reason": "stop"}], "metrics": {"energy": 896.8809875030524, "energy_per_token": 3.531027509854537, "time": 22.055044, "time_per_token": 0.08683088188976378}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError('start_date must be a datetime object and before end_date')\n\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError('end_date must be a datetime object and after start_date')\n\n    if not holidays.countries.__contains__(country):\n        raise ValueError(f'Country \"{country}\" is not supported. Please provide a supported country code.')\n\n    days = pd.date_range(start_date, end_date, freq='D')\n    is_business_day = ~((days.weekday == 5) | (days.weekday == 6) | days.isin(holidays.country_holidays(country, years=days.year)))\n    business_days = days[is_business_day]\n    return list(business_days)", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " before", " end", "_", "date", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " after", " start", "_", "date", "')", "\n", "\n", "    ", "if", " not", " holidays", ".", "count", "ries", ".", "__", "contains", "__(", "country", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Country", " \"", "{", "country", "}\"", " is", " not", " supported", ".", " Please", " provide", " a", " supported", " country", " code", ".", "')", "\n", "\n", "    ", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "    ", "is", "_", "business", "_", "day", " =", " ~", "((", "days", ".", "week", "day", " ==", " ", "5", ")", " |", " (", "days", ".", "week", "day", " ==", " ", "6", ")", " |", " days", ".", "isin", "(", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=", "days", ".", "year", ")))", "\n", "    ", "business", "_", "days", " =", " days", "[", "is", "_", "business", "_", "day", "]", "\n", "    ", "return", " list", "(", "business", "_", "days", ")"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -1.9817819595336914, -0.5689499974250793, -0.00316404877230525, -0.00039450492477044463, -0.23937839269638062, -0.005764408502727747, -0.048628777265548706, -0.10290934890508652, -0.05809171125292778, -0.15080931782722473, -1.5313607454299927, -0.040078844875097275, -0.0008356655016541481, -0.0001232548092957586, -0.2596363127231598, -0.0015812524361535907, -1.3526034355163574, -0.00010263393050990999, -0.004578582942485809, -0.0006890306831337512, -6.48477507638745e-05, -3.3854863431770355e-05, -0.0022561114747077227, -5.960462772236497e-07, -8.344646857949556e-07, -4.994744449504651e-05, -0.00027533553657121956, -0.0015669699059799314, -0.000754786713514477, -0.02313968539237976, -4.768370445162873e-07, -1.1920928244535389e-07, -0.0012662734370678663, -0.0015122179174795747, -2.3841855067985307e-07, -1.6689286894688848e-06, -0.0005720409681089222, -0.0003773453936446458, -0.0008006466086953878, -0.0003721021639648825, -8.201262971851975e-05, -4.768370445162873e-07, -0.002550446195527911, -0.008221355266869068, -0.0005718026659451425, -0.00019226610311307013, -0.0007948100101202726, -0.0002951186615973711, -0.0015143604250624776, -0.0007017772295512259, -0.0011302995262667537, -0.002568757627159357, -0.00433386629447341, -0.002782404189929366, -0.00024470672360621393, -0.00018904806347563863, -0.000710592488758266, -0.0006599632324650884, -0.01875196397304535, -0.0016329062636941671, -2.3274729251861572, -0.39948058128356934, -2.684237241744995, -0.028677858412265778, -1.1272087097167969, -2.264974000354414e-06, -0.3862706422805786, -1.6174201965332031, -0.0010088359704241157, -0.002941450336948037, -0.008734828792512417, -0.029629718512296677, -0.007952574640512466, -0.0038659849669784307, -0.07884512841701508, -0.03942503035068512, -1.311301275563892e-06, -0.9229246377944946, -0.19445060193538666, -0.8271523714065552, -1.658353567123413, -1.7664947509765625, -0.001262106467038393, -0.0024528198409825563, -0.0036643282510340214, -0.5167288780212402, -0.07133638113737106, -0.788593053817749, -1.2526930570602417, -0.5860851407051086, -1.2178958654403687, -0.06495299935340881, -2.837110757827759, -0.44827792048454285, -0.3507971167564392, -0.10876642167568207, -0.03856595605611801, -0.0017556030070409179, -0.011595471762120724, -0.001260439632460475, -3.678831100463867, -0.10979502648115158, -0.2084532529115677, -1.1801649634435307e-05, -0.3577742576599121, -1.9073468138230965e-06, -5.364403477869928e-06, -0.0004825619689654559, -0.008030981756746769, -0.38409024477005005, -4.637133679352701e-05, -0.05374171584844589, -0.001312467036768794, -0.0005480932886712253, -7.092700980138034e-05, -0.2523679733276367, -0.027941197156906128, -1.2278481335670222e-05, -0.014150872826576233, -0.36168089509010315, -0.0852518379688263, -0.272080659866333, -0.160580113530159, -2.8077945709228516, -0.020334351807832718, -0.8463056683540344, -0.015723655000329018, -0.004450654145330191, -0.0017197832930833101, -0.8725686073303223, -2.4351038932800293, -0.0077925496734678745, -0.00014554394874721766, -0.6254661679267883, -0.00019262365822214633, -0.053449638187885284, -0.0006486457423307002, -0.03325275704264641, -0.0003177614707965404, -0.012290810234844685, -0.058122418820858, -0.0005329619161784649, -9.512448741588742e-05, -0.0006506709614768624, -5.960462772236497e-07, -0.00047708096099086106, -0.0002961912250611931, -0.0004888770054094493, -0.15725575387477875, -0.020567476749420166, -1.0769498348236084, -0.00022063204960431904, -0.0009030792862176895, -0.019926834851503372, -0.06161942705512047, -0.00010966652916977182, -0.0011514945654198527, -0.23888292908668518, -0.00012146688823122531, -9.97731985989958e-05, -0.0033424007706344128, -0.0027601737529039383, -0.0020419952925294638, -2.0518558025360107, -0.39608702063560486, -0.30895841121673584, -0.47112753987312317, -0.006578100845217705, -0.001450439915060997, -0.1785420924425125, -0.01814761944115162, -0.2465267777442932, -0.6094460487365723, -0.00020454221521504223, -0.0033874292857944965, -0.007085079327225685, -0.032452527433633804, -0.011982838623225689, -0.0005573864909820259, -1.1920928244535389e-07, -7.343022298300639e-05, -2.3841855067985307e-07, -9.536738616588991e-07, -0.006704455241560936, -0.2731015980243683, -0.8915318846702576, -0.09778765588998795, -2.0252583026885986, -0.0011378012131899595, -0.023374836891889572, -6.55629628454335e-05, -0.00039200251922011375, -0.3823891580104828], "finish_reason": "stop"}], "metrics": {"energy": 786.9981373691561, "energy_per_token": 3.6267195270468022, "time": 18.917019, "time_per_token": 0.08717520276497696}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date must be a datetime object and before end_date\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date must be a datetime object and after start_date\")\n\n    business_days = pd.bdate_range(start=start_date, end=end_date).to_list()\n    # Convert to datetime objects if the datetime range contains any public holidays\n    if country is not None:\n        holidays_dict = holidays.country_holidays(country, years=[start_date.year, end_date.year])\n        business_days = [d for d in business_days if d.date() not in holidays_dict]\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " before", " end", "_", "date", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " after", " start", "_", "date", "\"", ")", "\n", "\n", "    ", "business", "_", "days", " =", " pd", ".", "b", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ")", ".", "to", "_", "list", "()", "\n", "    ", "#", " Convert", " to", " datetime", " objects", " if", " the", " datetime", " range", " contains", " any", " public", " holidays", "\n", "    ", "if", " country", " is", " not", " None", ":", "\n", "        ", "h", "olidays", "_", "dict", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", "])", "\n", "        ", "business", "_", "days", " =", " [", "d", " for", " d", " in", " business", "_", "days", " if", " d", ".", "date", "()", " not", " in", " holidays", "_", "dict", "]", "\n", "    ", "return", " business", "_", "days"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -0.3671383857727051, -0.0018872085493057966, -0.00028320116689428687, -0.2218606024980545, -0.003563959849998355, -0.015293475240468979, -0.17545126378536224, -0.04588855803012848, -0.12847276031970978, -1.390703558921814, -0.03825966268777847, -0.0004101150552742183, -6.97350042173639e-05, -0.6184442043304443, -0.00027450130437500775, -0.0010406322544440627, -0.26063621044158936, -0.00936933234333992, -0.0002903516869992018, -3.611976353568025e-05, -1.537788011773955e-05, -0.0016160060185939074, -2.3841855067985307e-07, -1.1920928244535389e-07, -3.6477376852417365e-05, -0.00017832119192462415, -0.0013337773270905018, -0.00045074793160893023, -0.01698729768395424, -4.768370445162873e-07, 0.0, -0.001073142047971487, -0.0008847374701872468, -2.3841855067985307e-07, -2.145764938177308e-06, -0.0004213160718791187, -0.0002366024418734014, -0.0004325169720686972, -0.00016211149340961128, -7.319182623177767e-05, -2.3841855067985307e-07, -0.0001711698860162869, -0.0003815161471720785, -0.001914693508297205, -0.00014590153296012431, -0.00012778419477399439, -0.00032419670606032014, -0.0001481661747675389, -0.000348268891684711, -0.0005322470096871257, -0.0007756323902867734, -0.002055557444691658, -0.003091914812102914, -0.0009677494526840746, -0.00011932138295378536, -0.00011169286881340668, -0.0011067223967984319, -5.113947918289341e-05, -0.0005409446312114596, -0.22287191450595856, -0.0009334497735835612, -2.902925968170166, -0.0034976755268871784, -0.0064736418426036835, -0.01886438950896263, -0.8986223936080933, -2.109982233378105e-05, -0.9321039319038391, -0.00035386974923312664, -1.6689286894688848e-06, -0.00016008525562938303, -0.00044050050200894475, -0.02191365510225296, -1.223846197128296, -0.05150395259261131, -1.4305104514278355e-06, -3.576278118089249e-07, -0.029867976903915405, -0.008111628703773022, -0.0001399419124936685, -0.0004148814477957785, -4.768360213347478e-06, -2.0265558760002023e-06, -0.4079335033893585, -0.5647429823875427, -0.3889045715332031, -4.768370445162873e-07, -1.4634369611740112, -0.004842458758503199, -0.06543324887752533, -0.38523370027542114, -2.9174370765686035, -2.5354440212249756, -1.8271934986114502, -1.8233094215393066, -0.2810027003288269, -3.235193967819214, -2.171858310699463, -4.172286033630371, -3.858433246612549, -1.2827084064483643, -3.703092336654663, -2.2780394554138184, -0.08283703029155731, -0.3922994136810303, -0.0188691858202219, -1.956627368927002, -0.6688632965087891, -1.0593576431274414, -0.011285281740128994, -0.004857524763792753, -0.056892164051532745, -0.006303903181105852, -0.007893913425505161, -1.4291472434997559, -0.23206114768981934, -0.10217159241437912, -3.180701971054077, -0.002656979952007532, -0.13595116138458252, -0.0008390005677938461, -0.07274755090475082, -5.960446742392378e-06, -0.0008112476789392531, -0.0003081085451412946, -0.001819028053432703, -0.009937692433595657, -0.9496493935585022, -0.08813969045877457, -0.5331050157546997, -0.1569713056087494, -0.0005210472736507654, -7.354942499659956e-05, -0.006864891387522221, -0.00031585473334416747, -0.02831069566309452, -0.032774679362773895, -9.536697689327411e-06, -8.702239938429557e-06, -7.533743337262422e-05, -5.364274329622276e-05, -0.052738361060619354, -0.030764492228627205, -0.04484514892101288, -1.1064763069152832, -5.2569914259947836e-05, -0.0071581099182367325, -0.11456089466810226, -0.06444279104471207, -2.5027925968170166, -0.133632093667984, -0.0013952055014669895, -0.00016127715934999287, -0.0016339774010702968, -1.1920928244535389e-07, -2.622600959512056e-06, -0.008092708885669708, -0.11113634705543518, -1.1750690937042236, -0.05259755998849869, -0.0005627478822134435, -0.004876506049185991, -1.4305012882687151e-05, -0.0012232924345880747, -0.0005339150666259229, -0.00015627116954419762, -0.05086074024438858, -0.015110432170331478, -0.910083532333374, -0.22306649386882782, -0.03865209221839905, -2.9205850296420977e-05, -0.0001677133986959234], "finish_reason": "stop"}], "metrics": {"energy": 687.6200325355534, "energy_per_token": 3.4553770479173536, "time": 17.45426, "time_per_token": 0.08770984924623117}}
{"outputs": [{"text": "# Check if start_date and end_date are datetime objects\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError('Start and end dates must be datetime objects')\n\n    # Check if start_date is before end_date\n    if start_date > end_date:\n        raise ValueError('Start date must be before end date')\n\n    # Create a list of business days (excluding weekends and public holidays)\n    business_days = []\n    current_date = start_date\n\n    # Iterate over each day from start_date to end_date, inclusive\n    while current_date <= end_date:\n        # Check if the current_date is a business day and not a weekend or public holiday\n        if current_date.weekday() < 5 and current_date not in holidays.UnitedStates():\n            business_days.append(current_date)\n\n        # Move to the next date\n        current_date += pd.Timedelta(days=1)\n\n    return business_days", "tokens": ["#", " Check", " if", " start", "_", "date", " and", " end", "_", "date", " are", " datetime", " objects", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "('", "Start", " and", " end", " dates", " must", " be", " datetime", " objects", "')", "\n", "\n", "    ", "#", " Check", " if", " start", "_", "date", " is", " before", " end", "_", "date", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "Start", " date", " must", " be", " before", " end", " date", "')", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " business", " days", " (", "ex", "cluding", " weekends", " and", " public", " holidays", ")", "\n", "    ", "business", "_", "days", " =", " []", "\n", "    ", "current", "_", "date", " =", " start", "_", "date", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " day", " from", " start", "_", "date", " to", " end", "_", "date", ",", " inclusive", "\n", "    ", "while", " current", "_", "date", " <=", " end", "_", "date", ":", "\n", "        ", "#", " Check", " if", " the", " current", "_", "date", " is", " a", " business", " day", " and", " not", " a", " weekend", " or", " public", " holiday", "\n", "        ", "if", " current", "_", "date", ".", "week", "day", "()", " <", " ", "5", " and", " current", "_", "date", " not", " in", " holidays", ".", "United", "States", "():", "\n", "            ", "business", "_", "days", ".", "append", "(", "current", "_", "date", ")", "\n", "\n", "        ", "#", " Move", " to", " the", " next", " date", "\n", "        ", "current", "_", "date", " +=", " pd", ".", "Tim", "ed", "elta", "(", "days", "=", "1", ")", "\n", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.2844631671905518, -0.8149701952934265, -0.5908946990966797, -0.18513375520706177, -0.039820555597543716, -0.0005248599336482584, -0.31302282214164734, -0.001328062848187983, -0.0004256058018654585, -0.00021431533969007432, -0.017994370311498642, -0.5649935007095337, -0.0256348866969347, -0.5487510561943054, -0.002745907986536622, -0.025167685002088547, -0.005849386565387249, -0.003994344733655453, -3.814624506048858e-05, -0.0005156855913810432, -3.2186455882765586e-06, -1.7881377516459906e-06, -9.572047565598041e-05, -0.001179595128633082, -0.3786153495311737, -0.010469750501215458, -0.0036036332603543997, -0.00042274597217328846, -4.053033626405522e-05, -0.0016412371769547462, -2.3841855067985307e-07, -1.1920928244535389e-07, -4.541770613286644e-05, -0.0004567056894302368, -0.0021080193109810352, -0.0014641289599239826, -0.002415241440758109, -0.007559266407042742, -0.03369314596056938, -1.0728830375228426e-06, -2.668426275253296, -2.6219661235809326, -0.22059160470962524, -0.029209651052951813, -0.33851295709609985, -0.10143060237169266, -0.002927543828263879, -0.1487356275320053, -0.0031794970855116844, -0.8563070893287659, -0.0010306290350854397, -0.18621909618377686, -0.0015882747247815132, -0.009549533016979694, -0.04928397759795189, -0.014383446425199509, -0.041204117238521576, -0.0021787970326840878, -0.0001958416833076626, -0.06468429416418076, -0.553239107131958, -0.21189777553081512, -0.000535821367520839, -8.999896090244874e-05, -0.016073059290647507, -0.00011634149996098131, -0.0019451522966846824, -0.027115706354379654, -2.3841830625315197e-06, -1.1920928244535389e-07, -0.09423109889030457, -0.0001597276859683916, 0.0, -1.1920928244535389e-07, -0.0017285895301029086, -0.0003983181086368859, -0.000552263343706727, -0.0032719431910663843, -0.00014590153296012431, -2.145764938177308e-06, -0.012061400339007378, -0.053566932678222656, -0.0013766345800831914, -0.07432274520397186, -0.030676979571580887, -0.016729069873690605, -0.09405934810638428, -0.0005373702733777463, -0.0024920618161559105, -0.0005488081369549036, -0.007998697459697723, -0.00160624657291919, -0.11727926135063171, -0.6937318444252014, -0.12793207168579102, -0.4634730815887451, -0.024743178859353065, -1.6358929872512817, -0.005782186985015869, -2.2004737854003906, -1.283851981163025, -0.0033503612503409386, -0.05022595822811127, -0.7776536345481873, -0.35923075675964355, -0.0007024919614195824, -0.03080333210527897, -0.17684276401996613, -0.0024373605847358704, -0.2932697832584381, -0.0004980515805073082, -0.0026121563278138638, -0.00803062692284584, -0.5221517086029053, -0.00290198833681643, -0.139210507273674, -0.9274015426635742, -0.009413381107151508, -0.1752488911151886, -0.00019941726350225508, -0.014962587505578995, -5.960462772236497e-07, -8.344646857949556e-07, -0.07143206149339676, -0.9597268104553223, -0.00032550760079175234, -1.02223801612854, -2.336697578430176, -0.003787725931033492, -1.0690953731536865, -0.5362780690193176, -0.22251354157924652, -1.8120611906051636, -0.04130832478404045, -0.07294051349163055, -0.0003923600015696138, -0.014316700398921967, -0.001789517467841506, -0.00014554394874721766, -1.9311717551317997e-05, -2.402451753616333, -0.23605932295322418, -0.0814959704875946, -0.0005003153928555548, -0.01040746085345745, -0.001949435449205339, -3.576278118089249e-07, -1.5497195136049413e-06, -0.009702547453343868, -0.00029130507027730346, -4.768370445162873e-07, -1.1920928244535389e-07, -0.0002522150462027639, -0.0021586944349110126, -0.02714204229414463, -0.439456045627594, -0.1944795548915863, -0.008200190961360931, -0.4794325530529022, -0.2782858610153198, -2.2516517639160156, -0.004400451667606831, -0.021475864574313164, -0.37416693568229675, -0.8795409798622131, -0.0003051292151212692, -2.8657939434051514, -0.8853541612625122, -0.08635903894901276, -1.461203694343567, -0.8252337574958801, -0.5358372926712036, -0.004796190652996302, -0.035400524735450745, -0.0012318650260567665, -0.023390907794237137, -0.09755347669124603, -2.3841830625315197e-06, -1.3828182090946939e-05, -0.0013569919392466545, -0.12082032114267349, -1.2755313036905136e-05, -0.00018821375851985067, -0.11137249320745468, -7.748303323751315e-05, -0.005120615474879742, -0.04853702336549759, -0.43255478143692017, -2.0265558760002023e-06, -1.9907753085135482e-05, -0.17913083732128143, -7.033323527139146e-06, -0.05673741549253464, -0.0014975772937759757, -2.7418060302734375, -0.0012502004392445087, -1.092468500137329, -0.15750029683113098, -0.0026534132193773985, -0.05066924914717674, -8.344646857949556e-07, -4.1960789531003684e-05, -7.402622577501461e-05, -7.92710343375802e-05, -0.0002366024418734014, -0.012902114540338516, -5.960462772236497e-07, -1.1920922133867862e-06, -0.04004986956715584, -0.013247567228972912, -1.0308239459991455, -0.0019287331961095333, -0.34438806772232056, -0.2854045629501343, -0.011231177486479282, -0.00541576836258173, -0.00025054652360267937, -2.4120326042175293, -0.07422956079244614, -0.00029118589009158313, -0.003819552715867758, -1.1920922133867862e-06, -3.242440288886428e-05, -0.23780058324337006, -0.45145508646965027, -1.5735502529423684e-05, -0.23354525864124298, -5.245195097813848e-06, 0.0, -0.025167569518089294, -0.007395983207970858, -0.0006914132391102612, -0.00032848684350028634, -0.002185458317399025, -0.03877079114317894, -0.02259020321071148, -0.0027133338153362274, -0.14670147001743317, -0.001531619462184608, -1.0490362910786644e-05, -5.9602869441732764e-05, -1.4971753358840942, -1.4305104514278355e-06, -1.311301275563892e-06, -1.311301275563892e-06, -1.3589766240329482e-05, -1.775597333908081, -0.0021476317197084427], "finish_reason": "stop"}], "metrics": {"energy": 871.712377435684, "energy_per_token": 3.514969263853564, "time": 21.862432, "time_per_token": 0.08815496774193547}}
{"outputs": [{"text": "# Validate inputs\n    if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date must be a datetime object and cannot be after end_date\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date must be a datetime object and cannot be before start_date\")\n\n    # Create a range of all days between the given dates\n    all_days = pd.date_range(start_date, end_date, freq=\"D\")\n\n    # Create a boolean array to mark all non-weekend and non-holiday days as True\n    weekend_days = all_days.weekday < 5\n    holidays_days = ~all_days.isin(holidays.country_holidays(country, years=all_days.year))\n\n    # Combine the two arrays using logical AND operator\n    valid_days = weekend_days & holidays_days\n\n    # Create a list of all valid days using list comprehension\n    business_days = [day for day in", "tokens": ["#", " Valid", "ate", " inputs", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " cannot", " be", " after", " end", "_", "date", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " cannot", " be", " before", " start", "_", "date", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " range", " of", " all", " days", " between", " the", " given", " dates", "\n", "    ", "all", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "=", "\"", "D", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " boolean", " array", " to", " mark", " all", " non", "-", "week", "end", " and", " non", "-", "h", "oliday", " days", " as", " True", "\n", "    ", "week", "end", "_", "days", " =", " all", "_", "days", ".", "week", "day", " <", " ", "5", "\n", "    ", "h", "olidays", "_", "days", " =", " ~", "all", "_", "days", ".", "isin", "(", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=", "all", "_", "days", ".", "year", "))", "\n", "\n", "    ", "#", " Combine", " the", " two", " arrays", " using", " logical", " AND", " operator", "\n", "    ", "valid", "_", "days", " =", " weekend", "_", "days", " &", " holidays", "_", "days", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " valid", " days", " using", " list", " comprehension", "\n", "    ", "business", "_", "days", " =", " [", "day", " for", " day", " in"], "logprobs": [-1.2844631671905518, -1.453796625137329, -0.025421420112252235, -3.1631619930267334, -0.06249185651540756, -0.0037074419669806957, -0.031228739768266678, -0.008907227776944637, -0.008188486099243164, -2.610649426060263e-05, -0.0010383697226643562, -8.106198947643861e-06, -2.622600959512056e-06, -7.509902934543788e-05, -0.0019983339589089155, -0.5142682790756226, -0.008896120823919773, -0.5761269927024841, -5.722029527532868e-06, -3.576278118089249e-07, -0.13153904676437378, -0.0030121691524982452, -1.1920922133867862e-06, -8.344646857949556e-07, -0.006055342499166727, -0.001553520211018622, -0.0025085906963795424, -0.007122956681996584, -0.0006868863711133599, 0.0, -0.11116942018270493, -0.026909399777650833, -0.2589673399925232, -0.0009526243666186929, -0.00019870213873218745, -0.14925172924995422, -0.0012305553536862135, -0.009535836055874825, -0.09282257407903671, -0.03508290275931358, -0.16207313537597656, -3.9757018089294434, -0.05151108279824257, -0.08155057579278946, -0.017642471939325333, -0.0005884823040105402, -0.00010799778101500124, -1.0589356422424316, -0.00015567521040793508, -0.0006661579827778041, -0.12697109580039978, -0.008688385598361492, -0.0004898302140645683, -2.8371408916427754e-05, -7.867782187531702e-06, -0.000726316764485091, -1.1920928244535389e-07, -2.3841855067985307e-07, -2.825220326485578e-05, -0.00011657988943625242, -0.0013315153773874044, -0.00032479254878126085, -0.00844360888004303, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0006401873542927206, -0.0005438040825538337, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.0004334702098276466, -0.00014602071314584464, -0.00037269797758199275, -0.00015007323236204684, -4.732496745418757e-05, 0.0, -0.0002022777043748647, -0.0003779412363655865, -0.0023535192012786865, -0.00010549465514486656, -4.637133679352701e-05, -0.000520570669323206, -6.97350042173639e-05, -0.00029559535323642194, -0.0004151197790633887, -0.00044109628652222455, -0.0006949870148673654, -0.0012031705118715763, -0.0005566716426983476, -0.0032717054709792137, -0.003607196733355522, -0.0002928543253801763, -0.00012742661056108773, -0.0009277330245822668, -2.8371408916427754e-05, -0.0006775943911634386, -0.08750946819782257, -0.0015591143164783716, -0.08548738807439804, -0.7094693779945374, -0.1821424663066864, -3.0698511600494385, -0.017156168818473816, -2.9990639686584473, -0.9727582931518555, -0.36980754137039185, -1.262704610824585, -1.915727138519287, -0.1724890172481537, -0.41845688223838806, -0.0004161922261118889, -0.5490285158157349, -0.0004140473320148885, -0.0680285096168518, -0.032565269619226456, -0.023293431848287582, -1.5735502529423684e-05, -0.027793265879154205, -1.311301275563892e-06, -2.145764938177308e-06, -0.00019298121333122253, -0.007099165115505457, -0.5772868394851685, -0.00014077626110520214, -0.05064522475004196, -0.0011957883834838867, -0.0002674698771443218, -2.8490614567999728e-05, -0.2446778267621994, -0.02127457782626152, -1.5258672647178173e-05, -2.720538854598999, -0.02506863884627819, -0.022946307435631752, -4.410734163684538e-06, -0.05958951637148857, -0.13479776680469513, -0.1617458462715149, -0.0007202415145002306, -0.005863133817911148, -1.0943326950073242, -0.11430126428604126, -2.50964617729187, -1.449080467224121, -0.8338143825531006, -2.3583197593688965, -2.0271921157836914, -1.3489899635314941, -0.0021274094469845295, -0.06722332537174225, -0.0942329466342926, -2.5948941707611084, -0.03676297888159752, -0.0004797023138962686, -0.19106343388557434, -0.10910627245903015, -0.04869871959090233, -0.878791868686676, -0.023573489859700203, -0.023885944858193398, -0.00026472879108041525, -2.1299984455108643, -1.3780150413513184, -0.3887917399406433, -2.723308801651001, -0.012666607275605202, -0.22300440073013306, -3.099436753473128e-06, -2.3841855067985307e-07, -0.0881052017211914, -0.12523098289966583, -6.806619057897478e-05, -1.1340867280960083, -0.0006075443816371262, -0.01355820707976818, -0.48074063658714294, -0.24341531097888947, -0.938723623752594, -0.6850336790084839, -0.14187011122703552, -0.6627072095870972, -0.002985783852636814, -0.8548933267593384, -0.11404092609882355, -2.6940935640595853e-05, -5.960462772236497e-07, -0.00020144341397099197, -0.005743666552007198, -0.01879197545349598, -0.5954508185386658, -8.284702198579907e-05, -0.001899701775982976, -0.292599618434906, -3.2305197237292305e-05, -0.0001567479339428246, -0.0073568145744502544, -0.0011460172245278955, -0.00453562568873167, -1.9422674179077148, -0.0782308429479599, -0.2649654746055603, -0.9600327610969543, -9.536697689327411e-06, -5.245195097813848e-06, -0.009515408426523209, -0.005358855240046978, -0.10062114894390106, -0.03298208490014076, -1.4094209671020508, -0.0002083561266772449, -0.018263157457113266, -0.2740519046783447, -0.11568105220794678, -0.8089295029640198, -1.6857469081878662, -1.4842066764831543, -0.73807692527771, -0.12474620342254639, -2.356687307357788, -0.47961392998695374, -0.00010430268594063818, -2.179996967315674, -0.003936756867915392, -0.020867444574832916, -0.04463106766343117, -0.020566191524267197, 0.0, -1.2159273865108844e-05, -0.001259963377378881, -0.00010930894495686516, -2.9802276912960224e-06, -1.0728830375228426e-06, -0.004268820397555828, -0.02059854008257389, -0.0005476167425513268, -0.03608962893486023, -2.444674015045166, -0.09697157144546509, -0.30245935916900635, -0.033747315406799316, -2.1592884063720703, -0.4785017669200897, -0.7504433989524841, -2.3377573490142822, -1.7982423305511475, -0.011029940098524094, -0.0682028979063034, -0.0007925468380562961, -0.44652390480041504, -0.0002803409588523209, -0.002102666301652789, -0.010848000645637512, -0.2855367958545685, -0.5232918858528137, -0.20730926096439362, -0.24972915649414062, -0.928515613079071], "finish_reason": "length"}], "metrics": {"energy": 933.5938438987739, "energy_per_token": 3.6468509527295856, "time": 22.493639, "time_per_token": 0.08786577734375}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError('start_date must be a datetime object and not after end_date')\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError('end_date must be a datetime object and not before start_date')\n\n    # create an empty list to store business days\n    business_days = []\n\n    # get a list of public holidays for the specified country\n    holidays_list = list(holidays.country_holidays(country, years=range(start_date.year, end_date.year + 1)).keys())\n\n    # loop through each day between start and end date (inclusive)\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.isoweekday() < 6 and current_date not in holidays_list:  # not a weekend and not a holiday\n            business_days.append(current_date)\n        current_date += timedelta(days=1)\n\n    ", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " not", " after", " end", "_", "date", "')", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " not", " before", " start", "_", "date", "')", "\n", "\n", "    ", "#", " create", " an", " empty", " list", " to", " store", " business", " days", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " get", " a", " list", " of", " public", " holidays", " for", " the", " specified", " country", "\n", "    ", "h", "olidays", "_", "list", " =", " list", "(", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=", "range", "(", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", " +", " ", "1", "))", ".", "keys", "())", "\n", "\n", "    ", "#", " loop", " through", " each", " day", " between", " start", " and", " end", " date", " (", "in", "clusive", ")", "\n", "    ", "current", "_", "date", " =", " start", "_", "date", "\n", "    ", "while", " current", "_", "date", " <=", " end", "_", "date", ":", "\n", "        ", "if", " current", "_", "date", ".", "is", "ow", "e", "ek", "day", "()", " <", " ", "6", " and", " current", "_", "date", " not", " in", " holidays", "_", "list", ":", "  ", "#", " not", " a", " weekend", " and", " not", " a", " holiday", "\n", "            ", "business", "_", "days", ".", "append", "(", "current", "_", "date", ")", "\n", "        ", "current", "_", "date", " +=", " timed", "elta", "(", "days", "=", "1", ")", "\n", "\n", "    "], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -1.9817819595336914, -0.5689499974250793, -0.00316404877230525, -0.00039450492477044463, -0.23937839269638062, -0.005764408502727747, -0.048628777265548706, -0.10290934890508652, -0.05809171125292778, -0.15080931782722473, -1.8118306398391724, -0.368472695350647, -0.017661329358816147, -0.002118130913004279, -0.0001971527235582471, -0.39232784509658813, -0.0014028241857886314, -0.33011266589164734, -0.015949996188282967, -0.0004524161049630493, -7.235741941258311e-05, -3.1709168979432434e-05, -0.0027233201544731855, -2.3841855067985307e-07, -2.3841855067985307e-07, -5.352353764465079e-05, -0.00028534632292576134, -0.001536261523142457, -0.0006517431465908885, -0.021843327209353447, -7.152555099310121e-07, -1.1920928244535389e-07, -0.0013147291028872132, -0.0015268584247678518, -2.3841855067985307e-07, -2.7418097943154862e-06, -0.00046921687317080796, -0.0002369599969824776, -0.0005983707960695028, -0.0002914242504630238, -9.655486064730212e-05, -7.152555099310121e-07, -0.0036992470268160105, -0.009403107687830925, -0.0005172345554456115, -0.0001911934232339263, -0.0008939084364101291, -0.0004067785630468279, -0.0011431594612076879, -0.0007515705074183643, -0.0011723319767042994, -0.001301871263422072, -0.0028936679009348154, -0.01439460925757885, -0.011246148496866226, -0.0005945583689026535, -0.00020239688456058502, -0.001649211160838604, -0.0009566736407577991, -0.25302934646606445, -0.0010412277188152075, -1.170240879058838, -2.561319351196289, -2.5512638092041016, -0.06656025350093842, -0.08951646089553833, -0.2849564850330353, -0.2806239724159241, -0.3456149399280548, -0.040189240127801895, -0.032717570662498474, -0.0005701346672140062, -0.10493883490562439, -0.0020300988107919693, -0.009224415756762028, -0.016279619187116623, -0.05329379439353943, -0.0016595651395618916, -0.25310876965522766, -0.0004836343287024647, -0.016141917556524277, -1.7681254148483276, -2.508596897125244, -0.13758258521556854, -0.001875904854387045, -0.3344934284687042, -0.002360417041927576, -0.2234371453523636, -0.043823808431625366, -0.37273108959198, -0.0035683547612279654, -0.08892058581113815, -0.0004127365828026086, -1.397494912147522, -0.5128297209739685, -0.004862744826823473, -0.09663428366184235, -0.0010995777556672692, -1.861741065979004, -0.002687059575691819, -0.011748881079256535, -3.218599158572033e-05, -0.0027838307432830334, -0.19348794221878052, -2.455681169521995e-05, -0.0018217648612335324, -0.00047267231275327504, -0.0013772298116236925, -0.008317947387695312, -0.7757911682128906, -0.08818269520998001, -0.5697916150093079, -1.0183062553405762, -0.0015668508131057024, -0.0389007106423378, -3.099436753473128e-06, -2.264974000354414e-06, -0.0003446938644628972, -7.188061863416806e-05, -0.00850436557084322, -0.01456392090767622, -4.768370445162873e-07, -1.0728830375228426e-06, -1.3828182090946939e-05, -7.390948667307384e-06, -0.27792486548423767, -0.005573329050093889, -0.00016532962035853416, -1.3380966186523438, -0.0013154434273019433, -0.4505915641784668, -0.001580181298777461, -0.006946106441318989, -0.02885623462498188, -0.0006426891195587814, -0.025477202609181404, -0.6321402788162231, -0.1563432514667511, -0.5221821665763855, -0.1796802133321762, -0.5742743015289307, -0.5413070321083069, -1.6985220909118652, -0.00033456450910307467, -0.316028892993927, -1.0985301733016968, -0.2023158222436905, -0.004475933033972979, -0.04569748044013977, -0.06056683883070946, -0.00018475732940714806, -1.3693209886550903, -0.005937912501394749, -0.23266108334064484, -0.00047505536349490285, -0.020143933594226837, -2.3841855067985307e-07, -4.529942543740617e-06, -0.04210733249783516, -0.009279219433665276, -0.007718619424849749, -0.006229151971638203, -2.3841855067985307e-07, -3.933898824470816e-06, -0.006694981828331947, -0.00035041390219703317, -8.344646857949556e-07, -3.576278118089249e-07, -0.0004549183649942279, -0.0017541749402880669, -0.04056878015398979, -1.4983426332473755, -0.026488304138183594, -5.960462772236497e-07, -7.629365427419543e-06, -0.168705016374588, -2.5951268672943115, -5.674201020156033e-05, -3.4570634852570947e-06, -2.145764938177308e-06, -1.1920922133867862e-06, -8.606540359323844e-05, -1.3367176055908203, -0.00017998983094003052, -0.0017240673769265413, -0.01730017550289631, -0.019770467653870583, -1.1920928244535389e-07, -1.7881377516459906e-06, -0.013222862035036087, -5.960462772236497e-07, -9.381330892210826e-05, -0.00021586472576018423, -6.437280717364047e-06, -0.004241281189024448, -1.1817173957824707, -1.7046782886609435e-05, -3.41841459274292, -0.9236060380935669, -0.05100518465042114, -0.8279155492782593, -0.014227384701371193, -0.06278824061155319, -0.1602407544851303, -0.008820854127407074, -0.002809151541441679, -0.029206408187747, -2.3841855067985307e-07, -3.480850500636734e-05, -0.0001991788885788992, -9.07141511561349e-05, -0.0003693613689392805, -0.0232975073158741, -3.576278118089249e-07, -4.768370445162873e-07, -0.026278965175151825, -0.1022215336561203, -0.03569883853197098, -0.014865108765661716, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.14228555560112, -1.7744168043136597, -9.775113539944869e-06, -0.0001778444420779124, -0.009628994390368462, -0.0003985564399044961, -0.0001070442158379592, -0.00018487652414478362, -0.11481153219938278, -0.023445289582014084, -0.0007575264316983521], "finish_reason": "length"}], "metrics": {"energy": 868.8223569078447, "energy_per_token": 3.393837331671268, "time": 22.275307, "time_per_token": 0.08701291796875}}
{"outputs": [{"text": "# Validate input parameters\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date.\")\n\n    # Create a date range for the given start and end dates\n    date_range = pd.date_range(start_date, end_date, freq='D')\n\n    # Create an empty list to store the business days\n    business_days = []\n\n    # Iterate over the date range\n    for day in date_range:\n        if day.weekday() < 5:  # 0 is Monday, 6 is Sunday\n            # Check if the day is not a public holiday in the specified country\n            if day not in holidays.country_holidays(country):\n                business_days.append(day)\n\n    return business_days", "tokens": ["#", " Valid", "ate", " input", " parameters", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", ".", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " date", " range", " for", " the", " given", " start", " and", " end", " dates", "\n", "    ", "date", "_", "range", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " the", " business", " days", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " date", " range", "\n", "    ", "for", " day", " in", " date", "_", "range", ":", "\n", "        ", "if", " day", ".", "week", "day", "()", " <", " ", "5", ":", "  ", "#", " ", "0", " is", " Monday", ",", " ", "6", " is", " Sunday", "\n", "            ", "#", " Check", " if", " the", " day", " is", " not", " a", " public", " holiday", " in", " the", " specified", " country", "\n", "            ", "if", " day", " not", " in", " holidays", ".", "country", "_", "h", "olidays", "(", "country", "):", "\n", "                ", "business", "_", "days", ".", "append", "(", "day", ")", "\n", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2844631671905518, -1.453796625137329, -0.025421420112252235, -1.1582868099212646, -1.2150554656982422, -0.048304080963134766, -0.006495434790849686, -0.03121568262577057, -0.008378593251109123, -0.008858902379870415, -1.823885577323381e-05, -0.0008361419313587248, -4.6491513785440475e-06, -1.5497195136049413e-06, -8.415821503149346e-05, -0.0021564343478530645, -0.46295565366744995, -0.007782613392919302, -0.9157891273498535, -0.001416513929143548, -2.2053474822314456e-05, -0.002571611199527979, -2.3841855067985307e-07, -2.264974000354414e-06, -2.7417760065873154e-05, -0.0005388000281527638, -0.024259503930807114, -0.0017577449325472116, -0.0022594418842345476, -0.006718427408486605, -0.020010853186249733, -4.768370445162873e-07, -0.09443645179271698, -0.012014994397759438, -0.3196295201778412, -0.001328181941062212, -0.00024387246230617166, -0.002008565468713641, -0.004892520606517792, -0.00014172980445437133, -2.109982233378105e-05, -0.07977663725614548, -0.007260721642524004, -0.08279653638601303, -0.007615226320922375, -0.8788195848464966, -0.0017964191501960158, -8.511180931236595e-05, -0.0009048658539541066, -0.18205830454826355, -0.03844723477959633, -0.05573311820626259, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.05738237500190735, -0.00020883286197204143, 0.0, -2.3841855067985307e-07, -0.007311135996133089, -0.0009324969723820686, -0.0006123098428361118, -0.000521523819770664, -7.521823135903105e-05, -3.576278118089249e-07, -0.0010589712765067816, -0.00687542837113142, -0.023093674331903458, -0.0002348147245356813, -0.0002113357331836596, -0.09535083919763565, -0.09575659781694412, -0.15970946848392487, -0.7361406683921814, -0.00016258825780823827, -5.090107151772827e-05, -0.009130392223596573, -0.0005042473785579205, -3.790783375734463e-05, -0.00031716562807559967, -0.07687045633792877, -0.0011147005716338754, -0.09138736128807068, -0.7300217151641846, -0.22935296595096588, -2.9964942932128906, -0.10109179466962814, -2.698275327682495, -0.1589745283126831, -0.6968058347702026, -1.5178885459899902, -0.16683563590049744, -0.00010430268594063818, -0.10281889140605927, -0.07286392897367477, -0.00043871314846910536, -0.3426854908466339, -0.0006692553870379925, -0.015384926460683346, -0.008784341625869274, -0.008690394461154938, -1.7046782886609435e-05, -0.017480943351984024, -1.5497195136049413e-06, -2.145764938177308e-06, -0.00014041867689229548, -0.004736513365060091, -0.540002703666687, -0.00011276562872808427, -0.04982885718345642, -0.000551310193259269, -6.782778655178845e-05, -1.2278481335670222e-05, -0.41952186822891235, -0.004187981132417917, -1.4781842764932662e-05, -0.052956704050302505, -0.30512773990631104, -0.027719756588339806, -0.05844315513968468, -0.11764548718929291, -0.0003058442671317607, -0.005288302432745695, -1.340379238128662, -1.0649874210357666, -0.03514309599995613, -0.017346922308206558, -0.07567853480577469, -0.09896519035100937, -1.9996792078018188, -0.05888427793979645, -0.039094697684049606, -0.015408756211400032, -0.00015960850578267127, -0.011519936844706535, -0.00017855956684798002, -0.002193189924582839, -0.002268124371767044, -0.006170507986098528, -0.0007090438157320023, -0.014141470193862915, -0.00025650550378486514, -0.019525351002812386, -0.5210117697715759, -0.00047994061606004834, -0.4020172953605652, -0.3578377068042755, -0.07913681864738464, -0.010344578884541988, -0.6747567057609558, -0.00014006110723130405, -0.006185317412018776, -2.495666027069092, -0.0038454411551356316, -0.0007260785205289721, -4.768370445162873e-07, 0.0, -0.00553290406242013, -0.0012646066024899483, -0.033521853387355804, -2.9876790046691895, -0.09287460893392563, -0.010398495011031628, -0.050476811826229095, -2.062299427052494e-05, -0.0003292018664069474, -0.19877319037914276, -0.0001752223033690825, -0.010226588696241379, -0.16009369492530823, -0.15856565535068512, -1.0251946150674485e-05, -1.9565424919128418, -0.08650719374418259, -1.8088730573654175, -0.0010675451485440135, -0.24699127674102783, -0.057957738637924194, -0.08402275294065475, -4.565611743601039e-05, -0.002959041390568018, -0.16135363280773163, -0.012323074042797089, -0.98062664270401, -0.19228900969028473, -0.025394456461071968, -0.0690380111336708, -0.20599836111068726, -0.005767489783465862, -0.1974068284034729, -0.039724208414554596, -0.22203247249126434, -0.0007426364463753998, -0.9351333379745483, -0.010647393763065338, -0.3392849266529083, -0.0007558587822131813, -0.03370155766606331, -0.0010717130498960614, -0.057913973927497864, -0.3938314616680145, -0.12503722310066223, -1.4305104514278355e-06, -0.004173973109573126, -0.0007513322634622455, -0.06372363120317459, -0.001646116841584444, -0.0002131234941771254, -0.011842659674584866, -0.0016179102240130305, -0.0020227227360010147, -0.12435667216777802, -0.01469702273607254, -0.0009956170106306672, -0.05583695322275162, -3.576278118089249e-07, -2.610649426060263e-05, -5.9960475482512265e-05, -5.340433563105762e-05, -9.524368942948058e-05, -0.009702665731310844, -0.09029693156480789, -0.022579597309231758, -0.038749344646930695, -0.0009395237429998815, -0.11190013587474823, -0.0017861855449154973, -8.022463589441031e-05, -0.00020776021119672805, -1.6559009552001953, -2.50339189733495e-06, -2.264974000354414e-06, -1.9073468138230965e-06, -1.2397689715726301e-05, -0.13784994184970856], "finish_reason": "stop"}], "metrics": {"energy": 793.1471536178592, "energy_per_token": 3.3895177505036718, "time": 20.602522, "time_per_token": 0.08804496581196582}}
{"outputs": [{"text": "# Validate start_date\n    if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"Start date must be a datetime object and before end date.\")\n\n    # Validate end_date\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"End date must be a datetime object and after start date.\")\n\n    # Create a list of all business days\n    all_dates = pd.date_range(start=start_date, end=end_date, freq='b')\n    business_days = []\n\n    # Remove weekends and public holidays\n    public_holidays = holidays.CountryHoliday(country)\n    for date in all_dates:\n        if date.isoweekday() <= 5 and date not in public_holidays:\n            business_days.append(date)\n\n    return business_days", "tokens": ["#", " Valid", "ate", " start", "_", "date", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Start", " date", " must", " be", " a", " datetime", " object", " and", " before", " end", " date", ".", "\"", ")", "\n", "\n", "    ", "#", " Valid", "ate", " end", "_", "date", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "End", " date", " must", " be", " a", " datetime", " object", " and", " after", " start", " date", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " business", " days", "\n", "    ", "all", "_", "dates", " =", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "='", "b", "')", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Remove", " weekends", " and", " public", " holidays", "\n", "    ", "public", "_", "h", "olidays", " =", " holidays", ".", "Country", "H", "oliday", "(", "country", ")", "\n", "    ", "for", " date", " in", " all", "_", "dates", ":", "\n", "        ", "if", " date", ".", "is", "ow", "e", "ek", "day", "()", " <=", " ", "5", " and", " date", " not", " in", " public", "_", "h", "olidays", ":", "\n", "            ", "business", "_", "days", ".", "append", "(", "date", ")", "\n", "\n", "    ", "return", " business", "_", "days", "\n", "\n", "if"], "logprobs": [-1.2844631671905518, -1.453796625137329, -0.025421420112252235, -0.9115312695503235, -0.11741559207439423, -0.000871159543748945, -1.0762015581130981, -0.00031799983116798103, -0.01038823090493679, -0.00974917970597744, -0.002320218365639448, -2.4437606043647975e-05, -0.00019274283840786666, -2.861018856492592e-06, -1.0728830375228426e-06, -8.21318244561553e-05, -0.0023651740048080683, -1.0003950595855713, -0.008007921278476715, -0.03610273823142052, -5.006777428206988e-06, -8.344646857949556e-07, -0.1284341812133789, -0.006681482773274183, -1.4305104514278355e-06, 0.0, -0.0036215689033269882, -0.0029601112473756075, -0.0026082326658070087, -0.008917506784200668, -0.0008276851149275899, -3.576278118089249e-07, -0.09077540040016174, -0.04317552223801613, -2.762906312942505, -0.006898869760334492, -0.25675687193870544, -0.0024072735104709864, -0.013742710463702679, -0.5000994801521301, -0.02086441032588482, -0.1289088875055313, -0.8169635534286499, -0.53767329454422, -0.03351355344057083, -0.10141433775424957, -0.002058174693956971, -0.0003631647559814155, -0.0004599228559527546, -0.05464372783899307, -0.0010025242809206247, -0.0009601273923180997, -0.00973371509462595, -0.00010239553375868127, -0.0025289240293204784, -0.0005981324939057231, -0.00016544880054425448, -0.0018160531762987375, -3.218599158572033e-05, -0.0003026265767402947, -0.0006543640629388392, -2.276871418871451e-05, -1.2755313036905136e-05, -0.0005865760613232851, -2.3841855067985307e-07, -1.311301275563892e-06, -1.8954096958623268e-05, -6.437094270950183e-05, -0.0019568121060729027, -0.0004667146422434598, -0.0058980947360396385, -1.0728830375228426e-06, -3.576278118089249e-07, -0.0011604249011725187, -0.0008007657015696168, -3.576278118089249e-07, -2.3841855067985307e-07, -0.000631848000921309, -0.00019000156316906214, -0.0003147821989841759, -0.0001006075763143599, -4.303362584323622e-05, -2.3841855067985307e-07, -0.0001515035255579278, -0.00046433156239800155, -0.0028168782591819763, -0.00023779425828251988, -0.00026901919045485556, -0.00023421882360707968, -0.0004857790481764823, -0.0006399490521289408, -0.00018654513405635953, -0.0012413900112733245, -0.0018443731823936105, -0.0009170140838250518, -0.0023538758978247643, -0.0016355245606973767, -0.0001728385395836085, -4.577531944960356e-05, -0.0001230164198204875, -0.008960985578596592, -0.0018607935635372996, -0.06690695136785507, -1.0061166286468506, -0.1417882889509201, -0.818688154220581, -0.039159808307886124, -0.40158143639564514, -2.1913506984710693, -0.008665813133120537, -2.3394548892974854, -0.0007663412252441049, -0.8441299796104431, -0.0012711548479273915, -3.292949676513672, -0.00754755362868309, -0.0737074539065361, -1.8000440832111053e-05, -0.2567032277584076, -8.344646857949556e-07, -1.0728830375228426e-06, -0.00029297350556589663, -0.010503488592803478, -0.8089244961738586, -0.05242642015218735, -8.344646857949556e-07, -1.4305104514278355e-06, -0.018453465774655342, -0.0034799750428646803, -8.940297266235575e-05, -0.00022849810193292797, -2.50339189733495e-06, 0.0, -0.09059455990791321, -0.005278697237372398, -4.172316494077677e-06, -0.043456804007291794, -2.705582618713379, -0.01560653280466795, -0.4633609652519226, -1.2011991739273071, -1.2866758108139038, -0.0007264359155669808, -0.018775010481476784, -0.02234600856900215, -1.833915114402771, -0.029049517586827278, -0.16567248106002808, -0.0008654424455016851, -0.08239339292049408, -3.934065818786621, -0.37161019444465637, -0.46924102306365967, -0.3313908874988556, -0.0015311434399336576, -0.22279082238674164, -0.0008405489497818053, -2.6026687622070312, -0.0002696150622796267, -0.0011881680693477392, -0.006504199001938105, -0.003882253309711814, -0.03063235431909561, -0.00019476900342851877, -1.183375597000122, -0.001500910148024559, -0.0005247407825663686, -0.002273238729685545, -0.007464967668056488, -0.10295183211565018, -0.03542572259902954, -0.14457106590270996, -0.019371025264263153, -0.3160375952720642, -0.018468327820301056, -0.003360222326591611, -1.1920922133867862e-06, -4.768370445162873e-07, -0.01496176514774561, -0.0017164511373266578, -0.0066036805510520935, -0.11693189293146133, -0.09393444657325745, -0.32164180278778076, -2.4045872688293457, -0.0016644446877762675, -1.7881377516459906e-06, -5.960462772236497e-07, -1.7881377516459906e-06, -0.00015043080202303827, -1.9329487085342407, -0.0027946485206484795, -0.011804606765508652, -0.03991677612066269, -0.11846118420362473, -0.1939752697944641, -3.6954811548639555e-06, -0.012381593696773052, 0.0, 0.0, -7.152555099310121e-07, -0.035009004175662994, -0.1009424477815628, -0.0025505651719868183, -0.036686450242996216, -9.536738616588991e-07, -1.4543427823809907e-05, -0.00020358874462544918, -6.496695277746767e-05, -0.00017855956684798002, -0.024643275886774063, -0.10527966171503067, -0.002879641717299819, -0.07746350765228271, -0.0017074067145586014, -0.1857064664363861, -0.00412055104970932, -9.298280929215252e-06, -9.095255518332124e-05, -0.7659862637519836, -0.012713219039142132, -0.5469841361045837], "finish_reason": "stop"}], "metrics": {"energy": 758.4224835853579, "energy_per_token": 3.416317493627738, "time": 19.344034, "time_per_token": 0.08713528828828829}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date should be a datetime object and it should be before end_date\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date should be a datetime object and it should be after start_date\")\n\n    # Create a list of all days between start_date and end_date\n    days = pd.date_range(start_date, end_date, freq='D')\n\n    # Initialize an empty list to store business days\n    business_days = []\n\n    # Loop over all days and append the date to business_days if it is a weekday and not a holiday\n    for day in days:\n        if day.weekday() < 5:  # 0 is Monday, 6 is Sunday\n            if day not in holidays.US():\n                business_days.append(day)\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " should", " be", " a", " datetime", " object", " and", " it", " should", " be", " before", " end", "_", "date", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " should", " be", " a", " datetime", " object", " and", " it", " should", " be", " after", " start", "_", "date", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " days", " between", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " business", " days", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " all", " days", " and", " append", " the", " date", " to", " business", "_", "days", " if", " it", " is", " a", " week", "day", " and", " not", " a", " holiday", "\n", "    ", "for", " day", " in", " days", ":", "\n", "        ", "if", " day", ".", "week", "day", "()", " <", " ", "5", ":", "  ", "#", " ", "0", " is", " Monday", ",", " ", "6", " is", " Sunday", "\n", "            ", "if", " day", " not", " in", " holidays", ".", "US", "():", "\n", "                ", "business", "_", "days", ".", "append", "(", "day", ")", "\n", "    ", "return", " business", "_", "days", "\n", "\n", "if"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -0.3671383857727051, -0.0018872085493057966, -0.00028320116689428687, -1.9174020290374756, -0.005514765623956919, -0.04122161865234375, -0.22868570685386658, -0.0328575074672699, -0.16126668453216553, -3.9958837032318115, -0.3281390070915222, -0.38980749249458313, -0.3139011263847351, -0.1368512660264969, -0.007810291834175587, -0.0005956306122243404, -0.7134965062141418, -0.000699156429618597, -0.003030471969395876, -0.3076179325580597, -0.01899118907749653, -0.0005539313424378633, -5.1973900554003194e-05, -5.2569914259947836e-05, -0.00528628658503294, -3.576278118089249e-07, -7.152555099310121e-07, -0.00011717586312443018, -0.00043132537393830717, -0.0020690003875643015, -0.0015584002248942852, -0.04894315078854561, -1.0728830375228426e-06, 0.0, -0.0017184742027893662, -0.0013888961402699351, -5.960462772236497e-07, -1.0728830375228426e-06, -0.0009614374139346182, -0.00030417583184316754, -0.0010040724882856011, -0.0002244459028588608, -0.00017009719158522785, -4.768370445162873e-07, -0.0009965697536244988, -0.0007065422250889242, -0.013580316677689552, -0.00037019551382400095, -0.00023469554434996098, -0.0013261580606922507, -0.0008459088858217001, -0.0020568659529089928, -0.0013971101725474, -0.0012753218179568648, -0.0038636098615825176, -0.008061136119067669, -0.0036168177612125874, -0.0031226943247020245, -0.016571497544646263, -0.014750705100595951, -0.0020028548315167427, -0.0003570872650016099, -0.0027155925054103136, -8.77341881277971e-05, -0.0007291757501661777, -0.28966620564460754, -0.0010376551654189825, -1.2861946821212769, -1.4260461330413818, -0.14744886755943298, -0.5971465706825256, -0.03302118554711342, -0.4809790551662445, -0.5047577619552612, -0.13800249993801117, -0.38400352001190186, -0.2449064701795578, -0.0021203910000622272, -0.003131725825369358, -0.0006162413046695292, -0.0006189814303070307, -0.00023195437097456306, -0.6182941198348999, -0.0008481719414703548, -0.8824472427368164, -0.17861168086528778, -0.06686859577894211, -7.867782187531702e-06, -0.06515897810459137, -1.0728830375228426e-06, -1.4305012882687151e-05, -0.00019751029321923852, -0.004582973662763834, -0.30176296830177307, -5.721882189391181e-05, -0.03451311215758324, -0.0011600677389651537, -0.00047469791024923325, -8.583032467868179e-06, -0.34644433856010437, -0.015118769370019436, -5.483612312673358e-06, -0.08836539089679718, -0.00901344045996666, -0.05478627234697342, -0.7110316753387451, -0.2777520716190338, -0.0006081400788389146, -0.012220744974911213, -3.7212867736816406, -0.7317146062850952, -0.009689207188785076, -0.028751645237207413, -0.11949595808982849, -0.14414913952350616, -0.2340785562992096, -0.006315393373370171, -0.016344591975212097, -0.00012385078298393637, -0.018795717507600784, -0.0003026265767402947, -0.0008563903393223882, -0.0021944984328001738, -0.006974162999540567, -0.0008611546363681555, -0.024284519255161285, -0.00038223114097490907, -0.08407305181026459, -1.3760943412780762, -2.561156749725342, -1.4254028797149658, -0.06864631175994873, -0.3374210298061371, -3.1030781269073486, -3.407196521759033, -2.0829005241394043, -0.7566859126091003, -0.19471222162246704, -0.014192009344696999, -0.001190073206089437, -0.15845365822315216, -0.03812403604388237, -0.8800210952758789, -0.30645379424095154, -1.3763809204101562, -0.00444911140948534, -0.2690594792366028, -0.033777281641960144, -0.11856770515441895, -1.20838463306427, -0.1771613508462906, -0.0005797850899398327, -0.12181202322244644, -0.2838340401649475, -0.0027128581423312426, -0.001278655487112701, -0.009131336584687233, -0.001544950413517654, -0.008183283731341362, -0.1793980896472931, -0.056599657982587814, -0.003185200970619917, -0.17913632094860077, -2.062299427052494e-05, -0.0004832768754567951, -0.07539799809455872, -0.0002611534437164664, -0.00917327031493187, -0.442396342754364, -0.41408103704452515, -1.0371154530730564e-05, -1.0259441137313843, -0.15053893625736237, -1.9440301656723022, -0.0024400956463068724, -0.2142922580242157, -0.09524224698543549, -0.11958111077547073, -0.00010168035078095272, -0.0023302086628973484, -0.14057573676109314, -0.005012920126318932, -0.5932562351226807, -0.597204327583313, -0.4632921814918518, -2.3841830625315197e-06, -0.056999705731868744, -0.004412319976836443, -3.078773021697998, -0.8761515021324158, -0.3210076093673706, -0.0016763457097113132, -0.014163684099912643, -1.9073468138230965e-06, -1.156323378381785e-05, -0.0002531684876885265, -6.103329360485077e-05, -0.000163541772053577, -0.0057889423333108425, -0.23017747700214386, -0.0046987831592559814, -2.4883623123168945, -0.11574231833219528, -0.004599349107593298, -9.77468371274881e-05, -0.000387831823900342, -0.5967456102371216, -0.01551592443138361, -0.6062561273574829], "finish_reason": "stop"}], "metrics": {"energy": 801.1875026206969, "energy_per_token": 3.4093085217901997, "time": 20.372898, "time_per_token": 0.0866931829787234}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects\")\n\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    days = pd.date_range(start=start_date, end=end_date, freq='D')\n    holidays_obj = holidays.country_holidays(country)\n\n    # Exclude weekends and public holidays\n    days = [day for day in days if day.weekday() < 5 and day not in holidays_obj]\n\n    return days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", "\"", ")", "\n", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "\n", "    ", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "    ", "h", "olidays", "_", "obj", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Ex", "clude", " weekends", " and", " public", " holidays", "\n", "    ", "days", " =", " [", "day", " for", " day", " in", " days", " if", " day", ".", "week", "day", "()", " <", " ", "5", " and", " day", " not", " in", " holidays", "_", "obj", "]", "\n", "\n", "    ", "return", " days", "\n", "\n", "#"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -0.39966636896133423, -0.0024166684597730637, -0.00032848684350028634, -0.00383653468452394, -0.007357879541814327, -0.0002079985715681687, -1.9192511899746023e-05, -0.1103842556476593, -0.009824730455875397, -0.10182485729455948, -0.007088512182235718, -0.45273059606552124, -0.0002548369811847806, -0.0007920703501440585, -1.2390543222427368, -0.0004239375703036785, -0.037029754370450974, -0.055548422038555145, -1.9073468138230965e-06, -7.152555099310121e-07, -0.07536947727203369, -0.0007034449372440577, -1.1920928244535389e-07, 0.0, -0.007781075779348612, -0.0013912770664319396, -0.0010271755745634437, -0.0016918168403208256, -0.00016091958968900144, -1.7881377516459906e-06, -0.001639213995076716, -0.00887544360011816, -0.03170489892363548, -0.0012161486083641648, -0.0004374024283606559, -0.08980581909418106, -0.0776403397321701, -0.1445283442735672, -0.18810565769672394, -0.00022313489171210676, -7.760223525110632e-05, -0.0033622421324253082, -0.00011693747364915907, -0.0014098476385697722, -0.02108795754611492, -0.0011991222854703665, -3.362639904022217, -0.12510338425636292, -0.12644325196743011, -5.006777428206988e-06, -0.23267477750778198, -1.311301275563892e-06, -5.960446742392378e-06, -0.0003899767471011728, -0.00924721173942089, -1.2112846374511719, -0.019279470667243004, -3.576278118089249e-07, -1.0728830375228426e-06, -0.024232976138591766, -0.0036940211430191994, -0.00013183678674977273, -0.00020549570035655051, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.10324109345674515, -0.021047569811344147, -7.390948667307384e-06, -0.08913367986679077, -0.6026658415794373, -0.07404725253582001, -0.16436831653118134, -0.2206207662820816, -2.05739688873291, -0.19730396568775177, -0.7878385186195374, -2.5698678493499756, -0.00297722639515996, -0.03331940248608589, -0.0018344969721511006, -0.04820854961872101, -1.5020257706055418e-05, -0.00016509123088326305, -0.00041500062798149884, -0.0024207117967307568, -0.0068053374998271465, -0.15964961051940918, -0.024322565644979477, -1.641800880432129, -0.0006581762572750449, -1.8034322261810303, -2.7796518802642822, -0.021540852263569832, -0.21353350579738617, -0.17358854413032532, -0.4951338768005371, -0.001046705641783774, -0.15821728110313416, -0.0008648469229228795, -2.6350953578948975, -0.1624533087015152, -0.644335925579071, -0.32531309127807617, -0.18598315119743347, -0.0006503135664388537, -0.00016592556494288146, -0.0008005275158211589, -0.04659198224544525, -0.12003593891859055, -0.20214413106441498, -0.14503982663154602, -2.6702524337451905e-05, -0.0002205128694185987, -0.3060147166252136, -0.00025197668583132327, -0.008877452462911606, -0.008425050415098667, -0.24060110747814178, -0.05085167661309242, -4.0531076592742465e-06, -0.0010752854868769646, -0.00020454221521504223, -1.5020257706055418e-05, -0.05499863997101784, -0.01579347439110279, -0.29837775230407715, -0.0004564673872664571, -0.1837622970342636, -0.01385476067662239, -1.013048768043518, -0.011426953598856926, -2.1013998985290527], "finish_reason": "stop"}], "metrics": {"energy": 562.7121609230043, "energy_per_token": 3.5390701944843035, "time": 13.876042, "time_per_token": 0.08727070440251572}}
{"outputs": [{"text": "# Check that start_date is a datetime object\n    if not isinstance(start_date, datetime):\n        raise ValueError(\"start_date must be a datetime object\")\n\n    # Check that end_date is a datetime object\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"end_date must be a datetime object\")\n\n    # Check that start_date is not after end_date\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    # Create an empty list to store business days\n    business_days = []\n\n    # Create an empty list to store public holidays for the given country\n    public_holidays = []\n\n    # Create a pandas date range object of all days between start_date and end_date\n    dates_range = pd.date_range(start_date, end_date, freq='D')\n\n    # Iterate over each day in the date range\n    for date in dates_range:\n        # Check if the day is not a weekend and is not a public holiday for the given", "tokens": ["#", " Check", " that", " start", "_", "date", " is", " a", " datetime", " object", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", "\"", ")", "\n", "\n", "    ", "#", " Check", " that", " end", "_", "date", " is", " a", " datetime", " object", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", "\"", ")", "\n", "\n", "    ", "#", " Check", " that", " start", "_", "date", " is", " not", " after", " end", "_", "date", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " business", " days", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " public", " holidays", " for", " the", " given", " country", "\n", "    ", "public", "_", "h", "olidays", " =", " []", "\n", "\n", "    ", "#", " Create", " a", " pandas", " date", " range", " object", " of", " all", " days", " between", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "dates", "_", "range", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " day", " in", " the", " date", " range", "\n", "    ", "for", " date", " in", " dates", "_", "range", ":", "\n", "        ", "#", " Check", " if", " the", " day", " is", " not", " a", " weekend", " and", " is", " not", " a", " public", " holiday", " for", " the", " given"], "logprobs": [-1.2844631671905518, -0.8149701952934265, -2.3642730712890625, -0.128335103392601, -0.021795623004436493, -0.0005317704635672271, -1.8136321306228638, -0.2386043518781662, -0.12851259112358093, -0.025257423520088196, -1.8370509147644043, -0.0008127961773425341, -0.01002113614231348, -0.006892950274050236, -0.0012429377529770136, -4.446407547220588e-05, -0.0002181292074965313, -3.576272320060525e-06, -4.529942543740617e-06, -0.00014149141497910023, -0.0017243054462596774, -0.01770864613354206, -0.001279250718653202, -0.003181279404088855, -0.008950470015406609, -0.011375096626579762, -7.152555099310121e-07, -0.11262734234333038, -0.044367339462041855, -0.11180004477500916, -0.000708090839907527, -9.60780744208023e-05, -0.11676940321922302, -0.0006039702566340566, -0.009517061524093151, -0.0247159656137228, -0.010881843976676464, -0.1391277313232422, -0.00022432672267314047, -0.0012425805907696486, -0.3893844783306122, -0.0014985294546931982, -0.0013633014168590307, -0.005739280954003334, -0.0019042231142520905, -0.1721287965774536, -0.00015317220822907984, -2.4676019165781327e-05, -0.00031013446277938783, -0.0030882307328283787, -0.0008151783840730786, -0.0002803409588523209, -0.0414133258163929, -0.00015746307326480746, -0.0019804879557341337, -0.00040058218291960657, -2.52720492426306e-05, -3.421248038648628e-05, -0.000750736624468118, -1.1920928244535389e-07, -1.1920928244535389e-07, -2.8729025871143676e-05, -0.0001045410826918669, -0.00011777184408856556, -4.756337511935271e-05, -0.0005452338373288512, -7.819823804311454e-05, -0.00014578233822248876, -2.3841855067985307e-07, -0.0001934579631779343, -0.00013159839727450162, -0.003891515778377652, -0.00010156115604331717, -2.634490556374658e-05, -0.0002416080387774855, -7.83174327807501e-05, -0.0001938155182870105, -0.0002022777043748647, -0.00020168177434243262, -0.0003297977091278881, -2.47952248173533e-05, -1.4185804502631072e-05, -0.0017043125117197633, -0.0019482456846162677, -0.008632485754787922, -0.06213656812906265, -0.013315089978277683, -0.046609051525592804, -0.0008398343343287706, -0.0001532914029667154, -0.01531085092574358, -0.6193659901618958, -0.03150346502661705, -0.00424840347841382, -0.0011233931872993708, -0.00015472168161068112, -0.010362157598137856, -0.00021431533969007432, -0.001680630026385188, -0.013969618827104568, -3.814689989667386e-06, -7.152555099310121e-07, -0.04723351076245308, -0.00025376438861712813, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0010549224680289626, -0.0003748429589904845, -0.0008114859228953719, -0.0009379754774272442, -0.0001081169830285944, 0.0, -0.0006176709430292249, -0.006437043193727732, -0.006276656873524189, -0.00017891713650897145, -6.961580220377073e-05, -0.05357981100678444, -0.15690477192401886, -0.044478971511125565, -0.5530085563659668, -0.00017331528943032026, -9.83428253675811e-05, -0.0012311505852267146, -6.675497570540756e-05, -0.00044848397374153137, -0.007769957184791565, -0.002178916009142995, -0.11391211301088333, -1.0776487588882446, -2.327268362045288, -0.029066653922200203, -0.0185964647680521, -0.11201279610395432, -0.21533027291297913, -0.19089482724666595, -0.024623271077871323, -0.014973391778767109, -0.000558220490347594, -0.04899933934211731, -0.0006124289939180017, -0.003577382303774357, -0.004507263191044331, -0.033480122685432434, -0.0012005510507151484, -0.02550056017935276, -0.0006466205231845379, -0.007405686192214489, -1.2790950536727905, -2.314934730529785, -0.836392879486084, -0.2929680645465851, -0.056741584092378616, -0.017837582156062126, -0.31133756041526794, -0.003460017265751958, -1.4206503629684448, -0.08834432810544968, -0.9549503922462463, -0.004638862796127796, -0.03344576805830002, -0.0009213017183355987, -0.4747251570224762, -0.0004761277523357421, -0.0019120759097859263, -0.0033717467449605465, -0.009147638455033302, -0.16891445219516754, -0.0010301527800038457, -0.02258227951824665, -0.0007223857101053, -0.02046271599829197, -1.553893804550171, -0.24921919405460358, -2.714632749557495, -1.5076353549957275, -0.20574326813220978, -1.8941984176635742, -4.273219108581543, -0.39385727047920227, -0.31104570627212524, -0.19045929610729218, -0.25537824630737305, -0.13718606531620026, -0.0010832638945430517, -0.0049628643319010735, -0.0017307315720245242, -0.000567275274079293, -0.0002338612830499187, -0.6486780047416687, -0.0005144941387698054, -3.4708199501037598, -1.9357802867889404, -0.28504693508148193, -0.012857159599661827, -0.004096094518899918, -5.960446742392378e-06, -0.0015549485106021166, -8.344646857949556e-07, -2.3841855067985307e-07, -0.00025686301523819566, -0.011464430950582027, -0.4098309278488159, -1.597391747054644e-05, -0.06442110985517502, -0.0037531666457653046, -9.452849917579442e-05, -1.0490362910786644e-05, -0.6331239342689514, -0.005050045438110828, -4.887569048150908e-06, -0.07274489104747772, -0.040594764053821564, -0.023837754502892494, -0.018436145037412643, -0.012509924359619617, -0.0008249455713666975, -0.0098810363560915, -1.4333568811416626, -0.0005676327273249626, -0.6613070368766785, -0.9750256538391113, -0.8468588590621948, -0.03902361914515495, -0.03889325633645058, -0.19695796072483063, -0.02116837538778782, -0.15671278536319733, -0.00018439977429807186, -0.0026519864331930876, -1.0053596496582031, -0.036162298172712326, -0.0030145461205393076, -1.7881377516459906e-06, 0.0, -0.005906271748244762, -0.0007371568935923278, -0.1752142757177353, -0.02799544855952263, -0.5754992365837097, -0.019101131707429886, -0.10302657634019852, -0.22718077898025513, -0.024821558967232704, -1.291955590248108, -0.0856965109705925, -0.06692835688591003, -1.2553881406784058, -2.2237548828125, -0.018850350752472878, -0.08451835811138153, -0.05131099745631218, -0.0012405564775690436, -0.9161165952682495, -0.01690138503909111, -0.025214647874236107], "finish_reason": "length"}], "metrics": {"energy": 920.259582305908, "energy_per_token": 3.594763993382453, "time": 22.274149, "time_per_token": 0.08700839453125}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    week_days_range = pd.date_range(start=start_date, end=end_date, freq='B')\n    # Create a list of public holidays for the given country\n    us_public_holidays = holidays.CountryHoliday(country)\n    # Filter out public holidays\n    filtered_range = week_days_range[[date not in us_public_holidays for date in week_days_range]].tolist()\n    # Add the start and end dates, if they are not included in the filtered range\n    if start_date not in filtered_range:\n        filtered_range.insert(0, start_date)\n    if end_date not in filtered_range:\n        filtered_range.append(end_date)\n    return filtered_range", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "\n", "    ", "week", "_", "days", "_", "range", " =", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "='", "B", "')", "\n", "    ", "#", " Create", " a", " list", " of", " public", " holidays", " for", " the", " given", " country", "\n", "    ", "us", "_", "public", "_", "h", "olidays", " =", " holidays", ".", "Country", "H", "oliday", "(", "country", ")", "\n", "    ", "#", " Filter", " out", " public", " holidays", "\n", "    ", "filtered", "_", "range", " =", " week", "_", "days", "_", "range", "[[", "date", " not", " in", " us", "_", "public", "_", "h", "olidays", " for", " date", " in", " week", "_", "days", "_", "range", "]]", ".", "tol", "ist", "()", "\n", "    ", "#", " Add", " the", " start", " and", " end", " dates", ",", " if", " they", " are", " not", " included", " in", " the", " filtered", " range", "\n", "    ", "if", " start", "_", "date", " not", " in", " filtered", "_", "range", ":", "\n", "        ", "filtered", "_", "range", ".", "insert", "(", "0", ",", " start", "_", "date", ")", "\n", "    ", "if", " end", "_", "date", " not", " in", " filtered", "_", "range", ":", "\n", "        ", "filtered", "_", "range", ".", "append", "(", "end", "_", "date", ")", "\n", "    ", "return", " filtered", "_", "range", "\n", "\n", "if"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -0.39966636896133423, -0.0024166684597730637, -0.00032848684350028634, -0.00383653468452394, -0.007357879541814327, -0.0002079985715681687, -1.9192511899746023e-05, -0.1103842556476593, -0.009824730455875397, -0.10182485729455948, -0.007088512182235718, -0.45273059606552124, -0.0002548369811847806, -0.0007920703501440585, -0.34239256381988525, -0.04420790448784828, -0.05437099561095238, -2.145764938177308e-06, -5.960462772236497e-07, -0.06052779033780098, -0.000497336674015969, 0.0, 0.0, -0.006614575628191233, -0.0008722314960323274, -0.0009925207123160362, -0.000972155889030546, -0.00018976318824570626, -9.536738616588991e-07, -0.0013228246243670583, -0.00777504313737154, -0.02642073482275009, -0.0011179156135767698, -0.0002933310461230576, -0.07969727367162704, -0.07746075093746185, -0.10842527449131012, -0.2755971848964691, -0.00020394629973452538, -9.238292841473594e-05, -0.0023643416352570057, -8.21318244561553e-05, -0.001471152063459158, -0.22173981368541718, -0.0007653883076272905, -3.0994060039520264, -2.9419000148773193, -0.3674423098564148, -2.965578317642212, -2.6724565029144287, -0.016087606549263, -0.7623778581619263, -1.1086402082582936e-05, -0.10978648066520691, -4.768370445162873e-07, -5.960446742392378e-06, -0.001129227806814015, -0.03264869377017021, -0.716935396194458, -0.02999003417789936, -1.9073468138230965e-06, -3.576278118089249e-07, -0.03478267788887024, -0.019943078979849815, -0.0005558376433327794, -0.00045813556062057614, -4.768370445162873e-07, 0.0, -0.040700070559978485, -0.021041033789515495, -4.291525328881107e-06, -0.320512056350708, -0.13978835940361023, -0.022895043715834618, -0.20415674149990082, -0.17461639642715454, -2.852442741394043, -3.508786916732788, -0.30031120777130127, -0.4278091788291931, -0.07883895933628082, -0.7778337597846985, -0.02717127837240696, -0.3355734050273895, -0.09541163593530655, -1.1192371845245361, -0.01736520044505596, -0.38536500930786133, -0.0027214179281145334, -2.549590587615967, -0.0029580905102193356, -1.6566972732543945, -0.002546284580603242, -0.002976156771183014, -0.014620664529502392, -0.010025621391832829, -0.0981990173459053, -9.381330892210826e-05, -1.8768279552459717, -0.00046528480015695095, -0.0006447143969126046, -0.00462379353120923, -0.013643584214150906, -0.12955252826213837, -0.022637752816081047, -0.30204275250434875, -1.013372540473938, -1.1380800008773804, -0.40772315859794617, -1.3118796348571777, -0.010355078615248203, -1.9671900272369385, -0.002198780421167612, -1.7626726627349854, -0.036856163293123245, -2.702723979949951, -0.014208580367267132, -1.4529147148132324, -6.6756979322235566e-06, -5.364403477869928e-06, -4.887569048150908e-06, -1.2159273865108844e-05, -2.2981441020965576, -1.5447739362716675, -0.02877376787364483, -1.4185804502631072e-05, -0.026914041489362717, -2.861018856492592e-06, -1.823885577323381e-05, -1.1920928244535389e-07, -4.0531076592742465e-06, -4.768370445162873e-07, -0.02297566458582878, -0.0007358465809375048, -0.00025459862081333995, -0.007500937208533287, -3.576278118089249e-07, -8.344646857949556e-07, -1.2040065485052764e-05, -1.1920858014491387e-05, -0.014381214044988155, -2.8320674896240234, -0.7327457070350647, -4.768370445162873e-07, -0.00099323526956141, -0.007890128530561924, -0.33700689673423767, -1.3119275569915771, -1.1277903318405151, -0.7899346947669983, -0.13518543541431427, -0.7073288559913635, -0.025382136926054955, -0.420226514339447, -3.23234224319458, -0.5635916590690613, -0.9059010148048401, -0.28120148181915283, -0.9993982315063477, -1.7366385459899902, -1.3463866710662842, -0.08585110306739807, -0.08641994744539261, -0.41741615533828735, -0.26429685950279236, -0.0020277192816138268, -0.09438948333263397, -0.09970984607934952, -2.13382354559144e-05, -1.3351351299206726e-05, -0.018736988306045532, -2.0265558760002023e-06, -0.0009415484382770956, -3.2186455882765586e-06, -3.2186455882765586e-06, -0.01143602840602398, -0.01848752051591873, -0.005214068107306957, -0.009752721525728703, -1.0609570381348021e-05, -7.4741430580616e-05, -0.05909375846385956, -0.17212627828121185, -4.637133679352701e-05, -0.0023401989601552486, -0.0003510097449179739, -0.012163628824055195, -4.0531076592742465e-06, -1.4662635294371285e-05, -0.011423418298363686, -0.0069221924059093, -0.0061747729778289795, -0.0032968949526548386, -0.001750485971570015, -8.344646857949556e-07, -7.390948667307384e-06, -0.0023670769296586514, -2.622600959512056e-06, -0.0003672163875307888, -9.536738616588991e-07, -2.264974000354414e-06, -0.008258834481239319, -0.0005108005134388804, -0.0003333727945573628, -0.0008991489303298295, -2.145764938177308e-06, -1.7881377516459906e-06, -0.003001472447067499, -0.008506729267537594, -0.00010048838157672435, -0.0004236992390360683, -3.6954811548639555e-06, -1.0728830375228426e-06, -0.0008381668012589216, -0.0010963627137243748, -0.3308907151222229, -0.0769997164607048, -0.01202206127345562, -5.125986263010418e-06, -2.1815061700181104e-05, -0.729518473148346, -0.020390767604112625, -0.4009144902229309], "finish_reason": "stop"}], "metrics": {"energy": 871.7117126293197, "energy_per_token": 3.4868468505172787, "time": 21.650124, "time_per_token": 0.08660049600000001}}
{"outputs": [{"text": "if not isinstance(start_date, datetime):\n        raise ValueError('start_date must be a datetime object')\n    if not isinstance(end_date, datetime):\n        raise ValueError('end_date must be a datetime object')\n    if start_date > end_date:\n        raise ValueError('start_date must be before end_date')\n\n    # create a list of all dates between start_date and end_date\n    dates = pd.date_range(start_date, end_date, freq='D')\n    dates = [date for date in dates if date.weekday() < 5]\n\n    # get the country's public holidays\n    holiday_list = holidays.country_holidays(country, years=[start_date.year, end_date.year])\n\n    # remove all the weekends from the list\n    business_days = [date for date in dates if date not in holiday_list]\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "('", "start", "_", "date", " must", " be", " a", " datetime", " object", "')", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "('", "end", "_", "date", " must", " be", " a", " datetime", " object", "')", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "('", "start", "_", "date", " must", " be", " before", " end", "_", "date", "')", "\n", "\n", "    ", "#", " create", " a", " list", " of", " all", " dates", " between", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "dates", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "    ", "dates", " =", " [", "date", " for", " date", " in", " dates", " if", " date", ".", "week", "day", "()", " <", " ", "5", "]", "\n", "\n", "    ", "#", " get", " the", " country", "'", "s", " public", " holidays", "\n", "    ", "h", "oliday", "_", "list", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", "])", "\n", "\n", "    ", "#", " remove", " all", " the", " weekends", " from", " the", " list", "\n", "    ", "business", "_", "days", " =", " [", "date", " for", " date", " in", " dates", " if", " date", " not", " in", " holiday", "_", "list", "]", "\n", "    ", "return", " business", "_", "days", "\n", "\n", "if"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -1.139945149421692, -0.004073181189596653, -0.006729439832270145, -0.005585894919931889, -0.005758482031524181, -2.622600959512056e-06, -2.3774898052215576, -0.2503049373626709, -0.0029513156041502953, -0.00035065223346464336, -0.21522021293640137, -0.0015751824248582125, -0.03246637433767319, -0.04613413289189339, -0.02046668715775013, -0.19516953825950623, -0.0010370597010478377, -0.15516170859336853, -0.046730220317840576, -0.3509296476840973, -0.0009709649602882564, -1.7523612768854946e-05, -0.0013516347389668226, -2.3841855067985307e-07, -3.576278118089249e-07, -3.504691630951129e-05, -0.00019703354337252676, -0.007672720588743687, -0.000129691296024248, -0.0006559127941727638, -0.0002348147245356813, -8.153582894010469e-05, 0.0, -0.001061233808286488, -0.009282880462706089, -0.00020072828920092434, -0.00011824862303910777, -0.0004456242313608527, -2.7417760065873154e-05, -0.0005049622268415987, -0.0005268854438327253, -0.00018761781393550336, -0.0002843929105438292, -0.00011324241495458409, -0.05474394932389259, -0.0037618363276124, -0.03733252361416817, -2.145764938177308e-06, -4.768370445162873e-07, -0.061195988208055496, -0.0008191090892069042, -1.1920928244535389e-07, 0.0, -0.0012904420727863908, -0.0009142747730948031, -0.000987876090221107, -0.001551615772768855, -0.00016056202002801, -7.152555099310121e-07, -0.016123970970511436, -0.02745860256254673, -0.0023011888843029737, -0.0002627027570270002, -0.0641212910413742, -0.07116387039422989, -0.113547183573246, -0.1228288933634758, -0.0003491030656732619, -6.12716976320371e-05, -0.0012359131360426545, -0.001049920916557312, -0.25118979811668396, -0.0006584145012311637, -1.2292373180389404, -2.4713921546936035, -0.26295772194862366, -0.6504077315330505, -0.016719689592719078, -0.41014930605888367, -1.998366355895996, -0.18814526498317719, -0.15683293342590332, -0.35503873229026794, -0.0012396040838211775, -0.003543409751728177, -0.0004930472350679338, -0.0008012421894818544, -0.00024673278676345944, -0.367607057094574, -0.000940476544201374, -0.7799931168556213, -0.03751636669039726, -0.03687489032745361, -4.410734163684538e-06, -0.0371692068874836, -1.1920922133867862e-06, -7.033323527139146e-06, -9.786603914108127e-05, -0.004112715367227793, -0.31058013439178467, -2.8013790142722428e-05, -0.05252845212817192, -0.001427584677003324, -8.332382276421413e-05, -9.417489309271332e-06, -0.4509695768356323, -0.012079303152859211, -6.6756979322235566e-06, -0.0092361094430089, -0.013228156603872776, -0.047335729002952576, -0.540521502494812, -1.171073079109192, -1.3769125938415527, -0.3245249092578888, -1.2928929328918457, -0.7136428356170654, -1.3041486740112305, -0.0011826909612864256, -0.001158162602223456, -0.003696158993989229, -0.5559574961662292, -0.08509266376495361, -0.03751751407980919, -0.07804199308156967, -1.3470558769768104e-05, -0.0004885195521637797, -0.3521662950515747, -0.0004549183649942279, -0.008842123672366142, -0.2112138271331787, -0.8967446088790894, -0.22034183144569397, -0.0008186326595023274, -0.043195389211177826, -1.541427731513977, -1.8730363845825195, -1.837470531463623, -0.5111331939697266, -0.00012814177898690104, -0.2052249312400818, -0.002804515417665243, -0.27653154730796814, -0.000809699238743633, -1.0070066452026367, -1.459720253944397, -0.019339337944984436, -0.5459418296813965, -0.00154292699880898, -0.08115264773368835, -0.0003280101518612355, -0.22624076902866364, -0.00010918975021922961, -0.0009893052047118545, -0.0005963454605080187, -0.004075911827385426, -0.005107924807816744, -1.167684555053711, -0.0851583480834961, -1.042933464050293, -0.3198041617870331, -0.0009827552130445838, -9.881961887003854e-05, -0.003924645483493805, -0.00015186110977083445, -0.022910771891474724, -0.046587202697992325, -3.814689989667386e-06, -1.311301275563892e-06, -7.390703103737906e-05, -1.966933996300213e-05, -0.0343983992934227, -0.03847075253725052, -0.42829588055610657, -0.00030322244856506586, -0.03272703289985657, -0.917810320854187, -2.6465723514556885, -3.4679574966430664, -1.8014389276504517, -1.9879202842712402, -0.164556622505188, -0.6127271056175232, -0.7564141154289246, -0.0030193000566214323, -0.5709060430526733, -0.0021864098962396383, -0.008393014781177044, -0.008907227776944637, -0.29809078574180603, -0.10393057018518448, -0.02995787188410759, -0.0005118728731758893, -0.0001805857609724626, -0.0014432977186515927, -0.0037905762437731028, -0.0551096573472023, -0.27760496735572815, -1.966933996300213e-05, -0.031880658119916916, -3.099436753473128e-06, -2.9802276912960224e-06, -0.07570981234312057, -0.004372559953480959, -1.3337571620941162, -0.17245349287986755, -0.01072889193892479, -1.2516897186287679e-05, -0.00011550712952157483, -0.786693274974823, -0.015703234821558, -0.550883412361145], "finish_reason": "stop"}], "metrics": {"energy": 754.5678368072496, "energy_per_token": 3.4143341032002246, "time": 19.31528, "time_per_token": 0.08739945701357467}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date should be datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date should be on or before end_date.\")\n\n    public_holidays = holidays.country_holidays(country)\n\n    # Create a list of all days in the specified range\n    days = pd.date_range(start_date, end_date)\n\n    # Filter out weekends and public holidays\n    business_days = days[(days.weekday < 5) & ~days.isin(public_holidays)]\n\n    return business_days.to_list()", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " should", " be", " datetime", " objects", ".", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " should", " be", " on", " or", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "public", "_", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " days", " in", " the", " specified", " range", "\n", "    ", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ")", "\n", "\n", "    ", "#", " Filter", " out", " weekends", " and", " public", " holidays", "\n", "    ", "business", "_", "days", " =", " days", "[(", "days", ".", "week", "day", " <", " ", "5", ")", " &", " ~", "days", ".", "isin", "(", "public", "_", "h", "olidays", ")]", "\n", "\n", "    ", "return", " business", "_", "days", ".", "to", "_", "list", "()"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -0.39966636896133423, -0.0024166684597730637, -0.00032848684350028634, -0.00383653468452394, -0.007357879541814327, -0.0002079985715681687, -1.9192511899746023e-05, -2.356458902359009, -0.009767123498022556, -0.18736976385116577, -0.018641632050275803, -0.7938981652259827, -0.003965016920119524, -0.00018630675913300365, -0.001405324088409543, -0.3858649432659149, -0.052710652351379395, -0.04348088800907135, -3.099436753473128e-06, -5.960462772236497e-07, -0.05805020406842232, -0.00063744728686288, 0.0, 0.0, -0.008344428613781929, -0.0010930284624919295, -0.0011410161387175322, -0.0015240018256008625, -0.00013004888023715466, -2.861018856492592e-06, -0.0022584903053939342, -0.010560581460595131, -0.037153929471969604, -0.0007738456479273736, -0.00022587609419133514, -0.053534165024757385, -0.22536228597164154, -2.9828481674194336, -0.0030024233274161816, -0.0011953121284022927, -0.029300415888428688, -0.0004406196530908346, -7.235741941258311e-05, -0.00917716883122921, -0.0005115154199302197, -6.997340824455023e-05, -0.0012522244360297918, -0.22753064334392548, -0.0007238152320496738, -2.681119918823242, -0.0008220868767239153, -0.004857406485825777, -0.007757654879242182, -0.011340326629579067, -0.10568151623010635, -0.00034374051028862596, -0.18798109889030457, -4.660974445869215e-05, -0.0010719512356445193, -0.001983700320124626, -0.001503528794273734, -0.004307278897613287, -0.2058049887418747, -0.046565014868974686, -1.3673747777938843, -0.0005178302526473999, -1.195147156715393, -1.1274323463439941, -0.18190965056419373, -1.0413613319396973, -0.03441014885902405, -0.5515962839126587, -0.507707953453064, -1.7617967128753662, -0.019113527610898018, -0.5343396663665771, -0.9167701005935669, -0.15898816287517548, -0.00034409802174195647, -0.5672955513000488, -0.1234206035733223, -0.061338163912296295, -2.3364747903542593e-05, -0.03132544457912445, -7.152555099310121e-07, -1.7881377516459906e-06, -7.807903602952138e-05, -0.007772086188197136, -0.39860451221466064, -9.953480184776708e-05, -0.0902874618768692, -0.0004159538948442787, -0.0001941730733960867, -7.748573807475623e-06, -1.1274998188018799, -0.22844600677490234, -0.25721436738967896, -0.00029488030122593045, -0.01663692109286785, -0.4363138973712921, -0.22232267260551453, -0.2818417251110077, -0.07357633113861084, -0.12676066160202026, -0.0005453529884107411, -0.1422296166419983, -0.0003897384158335626, -0.09016808122396469, -0.0002299282787134871, -0.00021669900161214173, -0.0031793781090527773, -0.9040952920913696, -0.19440574944019318, -0.010906371288001537, -7.903263758635148e-05, -0.5143481492996216, -2.4318398573086597e-05, -0.6258981823921204, -0.00010787858627736568, -0.07949558645486832, -0.016939595341682434, -0.013492817059159279, -2.510502815246582, -0.14968761801719666, -5.9960475482512265e-05, -0.0009070096421055496, -0.002014156896620989, -0.012875636108219624, -2.3841855067985307e-07, 0.0, -1.1920928244535389e-07, -0.042251329869031906, -0.0732077807188034, -0.057630881667137146, -0.00024423000286333263, -0.08961521089076996, -0.18158799409866333, -0.00014852374442853034, -7.176141662057489e-05, -0.3542044162750244, -0.29775166511535645, -1.0728830375228426e-06, -0.044172659516334534, -0.002712501445785165], "finish_reason": "stop"}], "metrics": {"energy": 592.908280624389, "energy_per_token": 3.4672998866923335, "time": 14.932477, "time_per_token": 0.0873244269005848}}
{"outputs": [{"text": "# Check if start_date and end_date are valid datetime objects\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date should be valid datetime objects.\")\n\n    # Ensure start_date is not after end_date\n    if start_date > end_date:\n        raise ValueError(\"start_date should be before or equal to end_date.\")\n\n    # Check if country code is a valid ISO country code\n    if not isinstance(country, str) or len(country) != 2:\n        raise ValueError(\"Invalid ISO country code.\")\n\n    # Create a list of business days\n    business_days = []\n\n    # Iterate through each day between start_date and end_date (inclusive)\n    for day in pd.date_range(start=start_date, end=end_date, freq='D'):\n        # Check if the day is a weekday and not a public holiday\n        if day.weekday() < 5 and not day in holidays.CountryH", "tokens": ["#", " Check", " if", " start", "_", "date", " and", " end", "_", "date", " are", " valid", " datetime", " objects", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " should", " be", " valid", " datetime", " objects", ".", "\"", ")", "\n", "\n", "    ", "#", " Ensure", " start", "_", "date", " is", " not", " after", " end", "_", "date", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " should", " be", " before", " or", " equal", " to", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " country", " code", " is", " a", " valid", " ISO", " country", " code", "\n", "    ", "if", " not", " isinstance", "(", "country", ",", " str", ")", " or", " len", "(", "country", ")", " ", "!", "=", " ", "2", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " ISO", " country", " code", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " business", " days", "\n", "    ", "business", "_", "days", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " day", " between", " start", "_", "date", " and", " end", "_", "date", " (", "in", "clusive", ")", "\n", "    ", "for", " day", " in", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "='", "D", "')", ":", "\n", "        ", "#", " Check", " if", " the", " day", " is", " a", " week", "day", " and", " not", " a", " public", " holiday", "\n", "        ", "if", " day", ".", "week", "day", "()", " <", " ", "5", " and", " not", " day", " in", " holidays", ".", "Country", "H"], "logprobs": [-1.2844631671905518, -0.8149701952934265, -0.5908946990966797, -0.18513375520706177, -0.039820555597543716, -0.0005248599336482584, -0.31302282214164734, -0.001328062848187983, -0.0004256058018654585, -0.00021431533969007432, -0.017994370311498642, -1.2733427286148071, -0.47065699100494385, -0.022646959871053696, -0.514137864112854, -0.002067572670057416, -0.03014180436730385, -0.01058641355484724, -0.0033222027122974396, -3.4927710657939315e-05, -0.0007397775771096349, -2.0265558760002023e-06, -5.960462772236497e-07, -0.00010835537250386551, -0.0013862771447747946, -0.22096584737300873, -0.007434912957251072, -0.10417206585407257, -0.0010434903670102358, -6.0794889577664435e-05, -0.0020560333505272865, -1.1920928244535389e-07, -2.3841855067985307e-07, -5.61460001335945e-05, -0.0005367745761759579, -0.030943652614951134, -0.0014838885981589556, -0.002273833379149437, -0.006394402589648962, -0.020686587318778038, -1.4305104514278355e-06, -0.08442753553390503, -0.010173017159104347, -0.2809197008609772, -0.0007670559571124613, -0.0001685477327555418, -0.0012228161795064807, -0.0038098148070275784, -8.105902816168964e-05, -3.957670196541585e-05, -2.457484245300293, -0.002911259653046727, -0.8328344225883484, -0.011358949355781078, -0.0029012751765549183, -0.48290014266967773, -0.0010175295174121857, -8.356221951544285e-05, -0.00032205163734033704, -0.19113443791866302, -0.0011849532602354884, -0.022621087729930878, -2.924990653991699, -0.1265602707862854, -0.002646517474204302, -0.00014280252798926085, -0.06823708862066269, -0.46696770191192627, -0.04011159762740135, -0.005909234285354614, -0.000316212244797498, -1.2755313036905136e-05, -0.019996481016278267, -0.0001463782973587513, -0.001531738555058837, -0.015791714191436768, -4.172316494077677e-06, -3.576278118089249e-07, -0.03553180396556854, -0.0001525762490928173, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.0012915135594084859, -0.0004153581103309989, -0.00047124247066676617, -0.003096668515354395, -0.00010990492592100054, -5.960462772236497e-07, -0.0008208957733586431, -0.0020004753023386, -0.009869704023003578, -0.00010692501382436603, -7.56950321374461e-05, -0.11887471377849579, -0.723712146282196, -0.1253415197134018, -0.5240644812583923, -0.13078059256076813, -0.004762970842421055, -0.0022921499330550432, -0.00020716428116429597, -6.818538531661034e-05, -0.0030354636255651712, -0.0003631647559814155, -4.5536911784438416e-05, -0.00035041390219703317, -0.0048744892701506615, -0.0015149556566029787, -0.10140432417392731, -2.909837484359741, -0.039390191435813904, -0.44436293840408325, -1.4182319641113281, -0.0496365986764431, -0.9321290850639343, -0.30666911602020264, -0.14435841143131256, -0.3553421199321747, -0.010590188205242157, -0.07887531816959381, -0.0018791175680235028, -0.4893132150173187, -0.36918824911117554, -0.8657850623130798, -0.0001746263587847352, -0.005251897498965263, -0.00040618274942971766, -0.011754418723285198, -0.14343520998954773, -0.009678345173597336, -0.47945570945739746, -4.637133679352701e-05, -0.0028143818490207195, -0.00920067448168993, -0.008042451925575733, 0.0, -1.6689286894688848e-06, -0.0011181537993252277, -0.0016179102240130305, -0.11684650927782059, -0.0007040405762381852, -0.00036614391137845814, -0.002538555534556508, -0.0006192197324708104, -2.0265558760002023e-06, -0.0014107999159023166, -0.006701494567096233, -1.3406602144241333, -1.8669328689575195, -0.010259627364575863, -0.00045253525604493916, -0.3309168219566345, -1.1252570152282715, -0.0001102625101339072, -0.0006704466650262475, -0.011554582044482231, -0.001278179232031107, -0.1681089848279953, -0.7693119049072266, -0.18353262543678284, -0.5370894074440002, -0.06794353574514389, -1.0491139888763428, -0.005327077116817236, -0.7691256403923035, -0.0009953788248822093, -0.11762025952339172, -0.0003325386205688119, -0.0025403392501175404, -0.009249573573470116, -0.36155965924263, -0.004272262565791607, -1.6340266466140747, -0.000316927267704159, -0.09615255147218704, -1.9802266359329224, -0.0013087764382362366, -1.0435218811035156, -0.634559690952301, -0.22233450412750244, -0.6303678750991821, -0.15464037656784058, -0.06542152166366577, -0.00035565727739594877, -0.005840261001139879, -0.000248401309363544, -0.0001941730733960867, -3.313963316031732e-05, -0.8481582403182983, -0.07870002090930939, -0.0025367720518261194, -0.013443771749734879, -0.018366390839219093, -0.0003629264247138053, -0.7370355725288391, -0.3791840970516205, -0.003386003663763404, -0.0043707797303795815, -3.1709168979432434e-05, -0.005920847877860069, -8.344646857949556e-07, -1.2516897186287679e-05, -5.400034933700226e-05, -0.005137693602591753, -1.2645328044891357, -0.0176401287317276, -3.576278118089249e-07, -1.1920928244535389e-07, -0.03136102855205536, -0.0008114859228953719, -2.074220174108632e-05, -0.0001494772732257843, -1.4305104514278355e-06, -3.576278118089249e-07, -0.14512737095355988, -0.05327322334051132, -7.390948667307384e-06, -0.04892941191792488, -0.015961728990077972, -0.12032737582921982, -0.010335375554859638, -0.005302175879478455, -0.03770660609006882, -0.6651772260665894, -0.3007136285305023, -0.004797495435923338, -0.3482968211174011, -0.024660373106598854, -0.003949224483221769, -0.6876775622367859, -0.6534965634346008, -0.0010893370490521193, -0.7789547443389893, -0.047873035073280334, -0.04321936517953873, -0.131004199385643, -0.0007236960809677839, -0.8444933891296387, -0.0003505330823827535, -0.013255801983177662, -0.07107993960380554, -0.0013252056669443846, -0.20550112426280975, -9.179073458653875e-06, -0.0003323002893012017, -0.042083099484443665, -7.128461584215984e-05, -0.002825318370014429, -0.03027111478149891, -0.4367811679840088, -0.9649191498756409, -0.18267856538295746, -0.0012642494402825832, -0.0009913297835737467, -2.495741844177246, -0.0004674295778386295], "finish_reason": "length"}], "metrics": {"energy": 874.53026317215, "energy_per_token": 3.4161338405162107, "time": 22.279102, "time_per_token": 0.0870277421875}}
{"outputs": [{"text": "# Validate input parameters\n    if not isinstance(start_date, datetime) or start_date >= end_date:\n        raise ValueError(\"start_date must be a valid datetime object and before end_date.\")\n    if not isinstance(end_date, datetime) or end_date <= start_date:\n        raise ValueError(\"end_date must be a valid datetime object and after start_date.\")\n\n    # Create a list of dates\n    dates = pd.date_range(start_date, end_date, freq='D')\n\n    # Initialize the holidays calendar\n    us_holidays = holidays.US()\n    # Filter out non-business days\n    business_days = dates[dates.weekday < 5]  # Exclude weekends\n    business_days = business_days[~business_days.isin(us_holidays)]  # Exclude holidays\n\n    # Return the list of business days\n    return list(business_days)", "tokens": ["#", " Valid", "ate", " input", " parameters", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >=", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " valid", " datetime", " object", " and", " before", " end", "_", "date", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <=", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " valid", " datetime", " object", " and", " after", " start", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " dates", "\n", "    ", "dates", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "\n", "    ", "#", " Initialize", " the", " holidays", " calendar", "\n", "    ", "us", "_", "h", "olidays", " =", " holidays", ".", "US", "()", "\n", "    ", "#", " Filter", " out", " non", "-", "business", " days", "\n", "    ", "business", "_", "days", " =", " dates", "[", "dates", ".", "week", "day", " <", " ", "5", "]", "  ", "#", " Ex", "clude", " weekends", "\n", "    ", "business", "_", "days", " =", " business", "_", "days", "[", "~", "business", "_", "days", ".", "isin", "(", "us", "_", "h", "olidays", ")]", "  ", "#", " Ex", "clude", " holidays", "\n", "\n", "    ", "#", " Return", " the", " list", " of", " business", " days", "\n", "    ", "return", " list", "(", "business", "_", "days", ")"], "logprobs": [-1.2844631671905518, -1.453796625137329, -0.025421420112252235, -1.1582868099212646, -1.2150554656982422, -0.048304080963134766, -0.006495434790849686, -0.03121568262577057, -0.008378593251109123, -0.008858902379870415, -1.823885577323381e-05, -0.0008361419313587248, -4.6491513785440475e-06, -1.5497195136049413e-06, -8.415821503149346e-05, -0.0021564343478530645, -0.46295565366744995, -0.007782613392919302, -0.5300583839416504, -5.602820692729438e-06, -2.3841855067985307e-07, -2.6002745628356934, -0.003662309143692255, -1.311301275563892e-06, -2.0265558760002023e-06, -0.010189537890255451, -0.001974658342078328, -0.0022872735280543566, -0.006641339045017958, -0.0006336349761113524, -2.3841855067985307e-07, -0.09467439353466034, -0.032174136489629745, -0.36777427792549133, -0.0008395960903726518, -0.0002150304353563115, -0.28227853775024414, -0.0019919094629585743, -0.010113660246133804, -1.9959132671356201, -0.026435712352395058, -0.10640297085046768, -0.12962467968463898, -1.0632447004318237, -0.038622960448265076, -0.00020621081057470292, -5.209310256759636e-05, -0.39040881395339966, -0.002030455507338047, -0.0001716466504149139, -0.0006871246150694788, -0.13620835542678833, -0.00526636466383934, -0.0004151197790633887, -3.2066785934148356e-05, -9.894321920000948e-06, -0.0005519058904610574, -1.1920928244535389e-07, -2.3841855067985307e-07, -2.0503786799963564e-05, -0.000102037942269817, -0.0009611992281861603, -0.00031704644788987935, -0.02280590869486332, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.0014171091606840491, -0.0003150205302517861, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.0005788319394923747, -0.00025042734341695905, -0.0003793711948674172, -0.00018499570433050394, -4.1960789531003684e-05, -1.1920928244535389e-07, -0.00012814177898690104, -0.00019178935326635838, -0.002068405505269766, -5.245071224635467e-05, -3.9219088648678735e-05, -0.00020966715237591416, -0.00010072677832795307, -0.0003334919747430831, -0.00011097769311163574, -0.00038092033355496824, -0.0003184764937032014, -0.0017717868322506547, -0.0022889384999871254, -0.0005715643637813628, -4.5536911784438416e-05, -1.883488948806189e-05, -0.0017660749144852161, -0.0002037079248111695, -3.731181277544238e-05, -0.0005063920398242772, -0.14278794825077057, -0.001441036001779139, -0.0620451495051384, -0.6748540997505188, -0.12949994206428528, -0.6902086138725281, -0.017788046970963478, -2.279270648956299, -2.784208059310913, -0.000730247818864882, -0.490848183631897, -0.05103180557489395, -0.0737602710723877, -5.960446742392378e-06, -0.05666014552116394, -1.9073468138230965e-06, -2.9802276912960224e-06, -0.00011252723925281316, -0.004748377948999405, -0.4941234290599823, -3.564294092939235e-05, -0.046223144978284836, -0.001077905297279358, -0.000228140561375767, -4.017272294731811e-05, -0.41428422927856445, -0.01003636047244072, -4.768360213347478e-06, -0.0454421192407608, -0.07868735492229462, -0.07767795771360397, -0.31862372159957886, -0.24647031724452972, -0.0006526962388306856, -0.005409840028733015, -3.330202102661133, -2.0731143951416016, -2.6337034702301025, -2.6705496311187744, -0.3751198947429657, -0.0004694551753345877, -3.1229448318481445, -0.0027393694035708904, -0.04571957513689995, -0.003951955586671829, -0.00856736395508051, -0.007377049885690212, -0.0003216941258870065, -1.4208204746246338, -0.05886966735124588, -0.023665932938456535, -2.934938669204712, -1.0766122341156006, -2.1724767684936523, -0.6904222369194031, -2.2033209800720215, -0.019889090210199356, -0.21733668446540833, -0.10086172819137573, -1.1971172094345093, -0.003267903346568346, -0.2702488303184509, -0.0012894895626232028, -0.02037336491048336, -0.006059371400624514, -1.3025766611099243, -0.6040261387825012, -0.9207610487937927, -0.00031609306461177766, -1.0739717483520508, -3.2186455882765586e-06, -0.196112260222435, -0.0005472592893056571, -0.02321539632976055, -0.03533551096916199, -0.5067511796951294, -0.00028427375946193933, -0.45127981901168823, -0.002542598405852914, -0.11984645575284958, -0.19933073222637177, -0.008783278055489063, -0.10485682636499405, -1.9788545614574105e-05, -0.000673424918204546, -0.00445587607100606, -0.08250371366739273, -1.1920928244535389e-07, -1.9311717551317997e-05, -0.040742989629507065, -0.01713988184928894, -0.08506835252046585, -1.5497195136049413e-06, -1.168244216387393e-05, -1.728519782773219e-05, -0.0013047285610809922, -0.010197797790169716, -0.03428010642528534, -9.179073458653875e-06, -2.9802276912960224e-06, 0.0, -0.04321548342704773, -0.03653176128864288, -1.168244216387393e-05, -0.011305909603834152, -0.0003725788265001029, -0.8495616912841797, -0.022833406925201416, -0.23831546306610107, -0.0004152389301452786, -1.8642144203186035, -1.5679184198379517, -0.12309148162603378, -0.3182533383369446, -0.021790025755763054, -0.024311279878020287, -0.018067309632897377, -0.3131616711616516, -0.0010194348869845271, -0.021206071600317955, -1.8270097970962524, -0.00041762212640605867, -0.01076226681470871, -1.4305012882687151e-05, -5.447716102935374e-05, -0.5379138588905334], "finish_reason": "stop"}], "metrics": {"energy": 790.4651076564792, "energy_per_token": 3.5606536380922487, "time": 19.346437, "time_per_token": 0.08714611261261263}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date must be a datetime object and start_date must not be after end_date\")\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date must be a datetime object and end_date must not be before start_date\")\n\n    country_holidays = holidays.country_holidays(country)\n    business_days = [start_date + pd.Timedelta(days=i) for i in range((end_date - start_date).days + 1) if\n                     (start_date + pd.Timedelta(days=i)).weekday() < 5 and\n                     (start_date + pd.Timedelta(days=i)) not in country_holidays]\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " start", "_", "date", " must", " not", " be", " after", " end", "_", "date", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " end", "_", "date", " must", " not", " be", " before", " start", "_", "date", "\"", ")", "\n", "\n", "    ", "country", "_", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "    ", "business", "_", "days", " =", " [", "start", "_", "date", " +", " pd", ".", "Tim", "ed", "elta", "(", "days", "=", "i", ")", " for", " i", " in", " range", "((", "end", "_", "date", " -", " start", "_", "date", ")", ".", "days", " +", " ", "1", ")", " if", "\n", "                ", "     ", "(", "start", "_", "date", " +", " pd", ".", "Tim", "ed", "elta", "(", "days", "=", "i", "))", ".", "week", "day", "()", " <", " ", "5", " and", "\n", "                ", "     ", "(", "start", "_", "date", " +", " pd", ".", "Tim", "ed", "elta", "(", "days", "=", "i", "))", " not", " in", " country", "_", "h", "olidays", "]", "\n", "    ", "return", " business", "_", "days", "\n", "\n", "if"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -0.3671383857727051, -0.0018872085493057966, -0.00028320116689428687, -0.2218606024980545, -0.003563959849998355, -0.015293475240468979, -0.17545126378536224, -0.04588855803012848, -0.12847276031970978, -1.8618377447128296, -0.011428603902459145, -0.00044050050200894475, -0.18739071488380432, -1.668380856513977, -0.06520085781812668, -0.37904995679855347, -0.033707089722156525, -0.004289830103516579, -0.0008002892718650401, -0.49737709760665894, -0.0006325627909973264, -0.0024536524433642626, -0.293791264295578, -0.014756930992007256, -0.0004888770054094493, -6.401333666872233e-05, -4.625213477993384e-05, -0.0035942494869232178, -2.3841855067985307e-07, -4.768370445162873e-07, -0.00010013079008786008, -0.00031931069679558277, -0.001937180757522583, -0.0012487717904150486, -0.030011897906661034, -7.152555099310121e-07, -1.1920928244535389e-07, -0.0018318791408091784, -0.0015723258256912231, -7.152555099310121e-07, -7.510157047363464e-06, -0.0006523388437926769, -0.00023648326168768108, -0.000750617531593889, -0.00042846560245379806, -0.00013505500101018697, -2.3841855067985307e-07, -0.0007714632665738463, -0.0007776573766022921, -0.014320695772767067, -0.00029762129997834563, -0.00015186110977083445, -0.0010363452602177858, -0.0005810956354252994, -0.000990377040579915, -0.0007074952009133995, -0.0008469808381050825, -0.0026041902601718903, -0.04992480203509331, -0.0015930355293676257, -0.0005272428970783949, -0.0034563345834612846, -0.00814000703394413, -0.002877739956602454, -0.0378139354288578, -0.009675276465713978, -0.000658057106193155, -0.00033444532891735435, -0.004601366352289915, -8.332382276421413e-05, -0.00047338721924461424, -0.2073187530040741, -0.001167569193057716, -3.8827672004699707, -0.059163086116313934, -0.08250360190868378, -0.008666404522955418, -0.016629885882139206, -0.11827246844768524, -0.00040618274942971766, -0.03378569334745407, -2.50339189733495e-06, -0.0001525762490928173, -3.0397906812140718e-05, -0.0016664678696542978, -0.004917432088404894, -0.16492252051830292, -0.053340356796979904, -0.34619367122650146, -1.1572480201721191, -0.0012142435880377889, -0.004845187067985535, -0.025528913363814354, -2.1754350662231445, -0.5553810596466064, -0.00042167355422861874, -0.0010470629204064608, -1.5053565502166748, -0.18500012159347534, -4.6491513785440475e-06, -0.39380863308906555, -5.960462772236497e-07, -1.311301275563892e-06, -0.005767608527094126, -0.22253015637397766, -0.011365195736289024, -0.4526813328266144, -0.009169844910502434, -0.16074994206428528, -0.0005981324939057231, -0.017141522839665413, -0.007318118121474981, -0.11079761385917664, -0.0007585985003970563, -4.768370445162873e-07, -7.152555099310121e-07, -0.13152316212654114, -0.0003034608089365065, 0.0, -6.437280717364047e-06, -0.00023362292267847806, -0.00014685506175737828, -7.152531907195225e-06, -0.3643912971019745, -0.002214838284999132, -0.005728257820010185, -0.11806337535381317, -0.9474532008171082, -0.559440553188324, -0.0058221276849508286, -0.019448423758149147, -0.22808319330215454, -0.015327520668506622, -7.748573807475623e-06, -2.396077979938127e-05, -0.0017996320966631174, -0.0015927974600344896, -5.245195097813848e-06, -0.0002215855201939121, 0.0, -8.344646857949556e-07, -6.556489552167477e-06, -0.0003332536434754729, -3.85038583772257e-05, -5.936446541454643e-05, -0.0037608861457556486, -0.018924865871667862, -0.04474084824323654, -1.811964830267243e-05, -0.0004817279113922268, -0.5443469882011414, -0.00011359999916749075, -0.0077531603164970875, -0.047595154494047165, -0.501412570476532, -0.00015114595589693636, -0.0007856381707824767, -0.1691778004169464, -0.0041733793914318085, -4.6491513785440475e-06, -9.536697689327411e-06, -0.002939429832622409, -0.0002892790944315493, -3.576278118089249e-07, -0.00013362467871047556, 0.0, 0.0, -5.364403477869928e-06, -9.178694017464295e-05, -2.8371408916427754e-05, -7.068861305015162e-05, -0.011816623620688915, -0.06125183030962944, -1.311301275563892e-06, -0.016715820878744125, -2.932505594799295e-05, -6.6756979322235566e-06, -1.1920928244535389e-07, -0.08230160921812057, -0.008558736182749271, -0.6236839294433594, -0.12244737148284912, -0.009038131684064865, -1.2397689715726301e-05, -8.11782301752828e-05, -0.6187160611152649, -0.00965709425508976, -0.5297588109970093], "finish_reason": "stop"}], "metrics": {"energy": 775.6293304405219, "energy_per_token": 3.6244361235538407, "time": 18.709276, "time_per_token": 0.08742652336448598}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects.\")\n\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date.\")\n\n    # create a list of business days between start_date and end_date\n    business_days = pd.bdate_range(start=start_date, end=end_date)\n    # convert to list of datetime objects\n    business_days = business_days.to_pydatetime().tolist()\n\n    # create a set of public holidays\n    public_holidays = holidays.CountryHoliday(country)\n\n    # remove public holidays from business_days\n    business_days = [day for day in business_days if day not in public_holidays]\n\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", ".", "\"", ")", "\n", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " create", " a", " list", " of", " business", " days", " between", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "business", "_", "days", " =", " pd", ".", "b", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ")", "\n", "    ", "#", " convert", " to", " list", " of", " datetime", " objects", "\n", "    ", "business", "_", "days", " =", " business", "_", "days", ".", "to", "_", "py", "datetime", "()", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " create", " a", " set", " of", " public", " holidays", "\n", "    ", "public", "_", "h", "olidays", " =", " holidays", ".", "Country", "H", "oliday", "(", "country", ")", "\n", "\n", "    ", "#", " remove", " public", " holidays", " from", " business", "_", "days", "\n", "    ", "business", "_", "days", " =", " [", "day", " for", " day", " in", " business", "_", "days", " if", " day", " not", " in", " public", "_", "h", "olidays", "]", "\n", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -0.39966636896133423, -0.0024166684597730637, -0.00032848684350028634, -0.00383653468452394, -0.007357879541814327, -0.0002079985715681687, -1.9192511899746023e-05, -0.1103842556476593, -0.009824730455875397, -0.10182485729455948, -0.007088512182235718, -1.0414071083068848, -0.0023557788226753473, -0.00013684290752280504, -0.001545426552183926, -1.108425259590149, -0.00035851728171110153, -0.034204766154289246, -0.055363014340400696, -1.4305104514278355e-06, -5.960462772236497e-07, -0.06905002892017365, -0.0006083783227950335, 0.0, 0.0, -0.0071815443225204945, -0.0014188947388902307, -0.0011463745031505823, -0.002238389104604721, -0.00014506718434859067, -2.3841855067985307e-07, -0.0023663633037358522, -0.007413377519696951, -0.030818358063697815, -0.0006833125371485949, -0.00023362292267847806, -0.14955654740333557, -0.08735065162181854, -0.1825476735830307, -0.43347489833831787, -0.00022909401741344482, -6.913899414939806e-05, -0.013048499822616577, -0.0005969410995021462, -7.629103492945433e-05, -0.0005278385942801833, -0.020210757851600647, -0.0011029120068997145, -1.1180675029754639, -3.418839931488037, -0.3564411997795105, -0.5735591650009155, -0.037692368030548096, -1.8284815549850464, -0.011974004097282887, -0.981081485748291, -0.6538133025169373, -0.38472843170166016, -0.0019000587053596973, -0.004179908894002438, -0.00134222989436239, -0.0012043612077832222, -0.00015686711412854493, -0.16925148665905, -0.0029794846195727587, -0.5349083542823792, -0.001328420010395348, -0.0033117469865828753, -0.014839503914117813, -0.36901551485061646, -1.1205610462639015e-05, -0.579095721244812, -0.00037889453233219683, -8.344646857949556e-07, -0.00011228884250158444, -0.0006096888100728393, -0.010461964644491673, -1.073215126991272, -0.030437875539064407, -1.1920922133867862e-06, 0.0, -0.02647971175611019, -0.004329000134021044, -8.749579137656838e-05, -0.0003280101518612355, -3.4570634852570947e-06, -1.1920928244535389e-07, -0.21288961172103882, -0.8925502896308899, -1.3152580261230469, -1.0256948471069336, -0.5935916304588318, -2.4086806774139404, -0.4163724184036255, -0.09507077932357788, -0.054584354162216187, -0.019529791548848152, -0.07560426741838455, -0.0007223857101053, -0.011803193017840385, -7.009260298218578e-05, -0.005245137959718704, -0.06202453374862671, -1.7740033864974976, -2.3841855067985307e-07, -2.3364747903542593e-05, -0.0005688241217285395, -0.016021091490983963, -1.1920922133867862e-06, -0.006140532903373241, -0.017192143946886063, -7.56950321374461e-05, -0.6999903917312622, -0.0015775627689436078, 0.0, -0.0005734706646762788, -0.0028168782591819763, -0.24948786199092865, -0.0009192770230583847, -0.03653796762228012, -1.223432183265686, -0.0796780064702034, -1.8018217086791992, -0.013553502969443798, -0.1645088940858841, -0.003047704929485917, -2.132840394973755, -0.0004144048143643886, -0.5031124353408813, -0.00022825974156148732, -0.0009858515113592148, -0.00256423931568861, -0.007441302761435509, -1.7635736465454102, -0.00014232576359063387, -1.0322318077087402, -0.0012665116228163242, -0.0005834784242324531, -0.0031600084621459246, -0.008368544280529022, -0.23165945708751678, -0.044309861958026886, -0.4460397958755493, -0.00044109628652222455, -0.015553952194750309, -0.8530396223068237, -0.793285071849823, -0.0018523454200476408, -0.08983305841684341, -0.23360075056552887, -0.4106983542442322, -0.001447583083063364, -0.17315714061260223, -0.001111366436816752, -0.19704793393611908, -2.4437606043647975e-05, -0.0003554189461283386, -0.015766838565468788, -0.02289026603102684, -0.15954189002513885, -0.0034848456270992756, -2.2411095415009186e-05, -1.3589766240329482e-05, -7.593343616463244e-05, -1.1920928244535389e-07, -7.152555099310121e-07, -0.007089695893228054, -0.14689220488071442, -0.2042166143655777, -1.1324817933200393e-05, -0.035899315029382706, -1.1920928244535389e-07, -3.576278118089249e-07, -2.3841855067985307e-07, -0.018172554671764374, -0.0026950249448418617, -0.08361341059207916, -0.00035851728171110153, -0.14499332010746002, -0.003156324615702033, -2.1457441107486375e-05, -2.8371408916427754e-05, -1.4415086507797241, -1.4305104514278355e-06, -2.0265558760002023e-06, -2.3841830625315197e-06, -1.9311717551317997e-05, -0.12106844782829285], "finish_reason": "stop"}], "metrics": {"energy": 728.9589302454001, "energy_per_token": 3.3905066523041865, "time": 18.70669, "time_per_token": 0.08700786046511627}}
{"outputs": [{"text": "if not isinstance(start_date, datetime):\n        raise ValueError(\"start_date must be a datetime object.\")\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"end_date must be a datetime object.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date.\")\n\n    days = pd.date_range(start_date, end_date, freq='B').tolist()\n    holidays = holidays.country_holidays(country)\n    business_days = [day for day in days if day not in holidays]\n\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", ".", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "B", "')", ".", "tol", "ist", "()", "\n", "    ", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "    ", "business", "_", "days", " =", " [", "day", " for", " day", " in", " days", " if", " day", " not", " in", " holidays", "]", "\n", "\n", "    ", "return", " business", "_", "days"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -1.139945149421692, -0.004073181189596653, -0.006729439832270145, -0.005585894919931889, -0.005758482031524181, -2.622600959512056e-06, -0.09827292710542679, -0.03904367983341217, -0.191785991191864, -0.0014753182185813785, -0.0004294188693165779, -0.22210226953029633, -0.0008122005965560675, -0.018401386216282845, -0.05254700034856796, -0.017257995903491974, -1.2979179620742798, -0.004263597074896097, -0.00021145492792129517, -0.0014424644177779555, -0.17302599549293518, -0.019879741594195366, -0.4174799919128418, -0.0007260785205289721, -1.3828182090946939e-05, -0.00112160702701658, -2.3841855067985307e-07, -1.7881377516459906e-06, -3.0040289857424796e-05, -0.00015555603022221476, -0.005915159825235605, -0.00010883215873036534, -0.0005112771177664399, -0.00012134769349358976, -9.691245941212401e-05, -7.152555099310121e-07, -0.000179036331246607, -0.00011753345461329445, -0.003781906794756651, -8.237022848334163e-05, -3.6477376852417365e-05, -0.0002441108226776123, -3.349725011503324e-05, -0.00025614796322770417, -0.00044943721150048077, -0.0002669931564014405, -0.0022352966479957104, -7.450303382938728e-05, -2.169585604860913e-05, -3.6477376852417365e-05, -0.06925838440656662, -0.0035707305651158094, -0.04004162177443504, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.07763747870922089, -0.0006335158832371235, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0015012671938166022, -0.0009815642843022943, -0.0009751332108862698, -0.001364729949273169, -0.00010632903286023065, -2.0265558760002023e-06, -0.0012461524456739426, -0.004930480848997831, -0.02231733128428459, -0.0004220310365781188, -0.00010418349120300263, -0.10054665803909302, -0.07630355656147003, -0.1698649525642395, -0.37754109501838684, -0.00026341783814132214, -7.986703712958843e-05, -0.008749954402446747, -0.0003047717036679387, -5.340433563105762e-05, -0.0006861716392450035, -0.27505236864089966, -0.0007232195930555463, -3.261113166809082, -0.11649962514638901, -0.1680237352848053, -4.291525328881107e-06, -0.3362973928451538, -7.152555099310121e-07, -2.4676019165781327e-05, -0.0005141366855241358, -0.014803680591285229, -0.48854124546051025, -3.0040289857424796e-05, -0.04911181703209877, -0.001668134005740285, -0.0005527398898266256, -5.006777428206988e-06, -0.2617460787296295, -0.012345799244940281, -1.0371154530730564e-05, -0.06508983671665192, -0.9428713917732239, -0.020197557285428047, -1.1397466659545898, -0.5394518971443176, 0.0, -0.0008696111617609859, -0.17294548451900482, -0.2474604845046997, -0.8028584718704224, -0.3000068664550781, -0.5984619855880737, -0.12514115869998932, -0.0003687655262183398, -0.14782899618148804, -0.0002079985715681687, -0.0002119316632160917, -0.0001209901092806831, -0.004393449053168297, -0.005703485105186701, -0.24151405692100525, -0.0884387269616127, -0.17692986130714417, -0.8833507299423218, -0.0013581824023276567, -0.0013775869738310575, -0.0035239283461123705, -0.14600759744644165, -0.1525125950574875, -0.036308880895376205, -0.00012444675667211413, -3.6000557884108275e-05, -0.00031859567388892174, -0.004385853186249733, -0.20690272748470306, -0.1014120802283287, -7.629365427419543e-06, -0.0033314700704067945, -0.05754411220550537, -0.005752674303948879, -0.8326903581619263, -0.0006504327175207436, -0.04918820038437843, -0.010395074263215065, -0.00011443436960689723, -0.00011288482346571982], "finish_reason": "stop"}], "metrics": {"energy": 568.6483748149868, "energy_per_token": 3.6686991923547536, "time": 13.455213, "time_per_token": 0.08680782580645162}}
{"outputs": [{"text": "# Validate start_date input\n    if not isinstance(start_date, datetime):\n        raise ValueError(\"Start date must be a valid datetime object.\")\n\n    # Validate end_date input\n    if not isinstance(end_date, datetime):\n        raise ValueError(\"End date must be a valid datetime object.\")\n\n    # Validate the start_date and end_date input\n    if start_date > end_date:\n        raise ValueError(\"Start date cannot be later than end date.\")\n\n    # Calculate the number of days between start_date and end_date, inclusive of the start_date and end_date\n    num_days = (end_date - start_date).days + 1\n\n    # Calculate the business days (excluding weekends and public holidays) using NumPy\n    business_days = pd.date_range(start_date, periods=num_days, freq='B')\n\n    # Retrieve the country's public holidays using holidays\n    public_holidays = holidays.country_holidays(country)\n\n    # Filter out the business days that are", "tokens": ["#", " Valid", "ate", " start", "_", "date", " input", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Start", " date", " must", " be", " a", " valid", " datetime", " object", ".", "\"", ")", "\n", "\n", "    ", "#", " Valid", "ate", " end", "_", "date", " input", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "End", " date", " must", " be", " a", " valid", " datetime", " object", ".", "\"", ")", "\n", "\n", "    ", "#", " Valid", "ate", " the", " start", "_", "date", " and", " end", "_", "date", " input", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Start", " date", " cannot", " be", " later", " than", " end", " date", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " the", " number", " of", " days", " between", " start", "_", "date", " and", " end", "_", "date", ",", " inclusive", " of", " the", " start", "_", "date", " and", " end", "_", "date", "\n", "    ", "num", "_", "days", " =", " (", "end", "_", "date", " -", " start", "_", "date", ")", ".", "days", " +", " ", "1", "\n", "\n", "    ", "#", " Calculate", " the", " business", " days", " (", "ex", "cluding", " weekends", " and", " public", " holidays", ")", " using", " Num", "Py", "\n", "    ", "business", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " periods", "=", "num", "_", "days", ",", " fre", "q", "='", "B", "')", "\n", "\n", "    ", "#", " Ret", "rieve", " the", " country", "'", "s", " public", " holidays", " using", " holidays", "\n", "    ", "public", "_", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Filter", " out", " the", " business", " days", " that", " are"], "logprobs": [-1.2844631671905518, -1.453796625137329, -0.025421420112252235, -0.9115312695503235, -0.11741559207439423, -0.000871159543748945, -2.9683237075805664, -0.10698873549699783, -0.0003995097358711064, -0.011912279762327671, -0.007942876778542995, -0.004298138897866011, -2.312633478140924e-05, -0.0002294515579706058, -3.099436753473128e-06, -1.9073468138230965e-06, -9.715084888739511e-05, -0.0030030175112187862, -0.3265904188156128, -0.002934081247076392, -0.002667323686182499, -0.006248936057090759, -0.006844053976237774, -3.576278118089249e-07, -0.07053574174642563, -0.030502282083034515, -2.2354354858398438, -0.011379338800907135, -0.24982202053070068, -0.0008596062543801963, -0.0246924739331007, -2.550644874572754, -0.046467382460832596, -0.010979476384818554, -0.4264681339263916, -0.002224829513579607, -0.0002536452084314078, -0.0008991489303298295, -0.8554057478904724, -0.0008055302896536887, -0.04089050367474556, -0.005918122362345457, -0.00014804698002990335, -0.013771752826869488, -0.00035958975786343217, -1.645074735279195e-05, -0.0007413261337205768, -0.01068242359906435, -0.0001726001501083374, -0.0013579442165791988, -0.006917101796716452, -0.0003393312799744308, -2.1815061700181104e-05, -0.0005552418879233301, -4.768370445162873e-07, -4.768370445162873e-07, -3.421248038648628e-05, -9.679325739853084e-05, -0.044393908232450485, -0.00025948495022021234, -0.0008114859228953719, -0.00018559163436293602, -0.00016246906307060272, -1.6689286894688848e-06, -0.00034588552080094814, -0.0002494739310350269, -0.004183470271527767, -0.00018916724366135895, -0.0004798214649781585, -5.4834770708112046e-05, -0.0005541696446016431, -0.00045503751607611775, -0.0006460248259827495, -0.0001070442158379592, -0.0010397987207397819, -8.451581379631534e-05, -3.135155202471651e-05, -0.00024077377747744322, -0.017145154997706413, -0.0013662775745615363, -0.1203254759311676, -0.8353362679481506, -0.0010013333521783352, -3.1817502975463867, -1.2942124605178833, -0.3781680464744568, -0.001570302527397871, -1.1186000108718872, -0.0027366350404918194, -0.001053374377079308, -0.0002797450579237193, -2.738914728164673, -0.20455175638198853, -0.00035172473872080445, -0.004683714359998703, -0.14065559208393097, -2.9802276912960224e-06, -1.0728830375228426e-06, -0.25676268339157104, -0.0007709868368692696, -1.1920928244535389e-07, -3.576278118089249e-07, -0.005817742552608252, -0.0018299752846360207, -0.0012421043356880546, -0.003729413729161024, -0.00023576818057335913, -9.536738616588991e-07, -0.0029472745954990387, -0.010769461281597614, -0.08583108335733414, -0.0020434230100363493, -2.436022996902466, -0.01693994551897049, -1.765344500541687, -0.006144324317574501, -0.19728215038776398, -0.0037794129457324743, -0.007322023622691631, -0.0022387460339814425, -0.00012230125139467418, -0.0014512732159346342, -0.013372611254453659, -0.0018662670627236366, -0.17166975140571594, -2.5694050788879395, -0.46706515550613403, -0.6219310760498047, -0.0008973624208010733, -0.24938131868839264, -0.1378520280122757, -0.3615624010562897, -0.12709057331085205, -0.0010030006524175406, -0.0016763457097113132, -0.001157567254267633, -0.0005439232336357236, -0.0001431601122021675, -3.0399937629699707, -0.27369973063468933, -1.9953055381774902, -1.4551525115966797, -0.977544367313385, -0.5504665970802307, -0.013090739957988262, -0.19867312908172607, -0.061347804963588715, -0.0015588762471452355, -0.0012209111591801047, -0.21773852407932281, -0.0013831820106133819, -0.5254589915275574, -0.0014303225325420499, -0.03563833236694336, -0.019206151366233826, -0.03238755464553833, -0.003785588312894106, -1.311301275563892e-06, -3.576278118089249e-07, -0.011072972789406776, -0.0003906917118001729, -1.1920928244535389e-07, -7.152555099310121e-07, -0.002861573826521635, -0.00011932138295378536, -4.0411134250462055e-05, -0.013213568367064, -0.00108159682713449, -0.0024305821862071753, -0.013599955476820469, -0.06657519936561584, -0.0008291144040413201, -0.01738382689654827, -3.3291759490966797, -0.5448716282844543, -0.8294937014579773, -0.013552679680287838, -2.129542827606201, -0.4561275243759155, -0.005883162375539541, -0.03602949157357216, -0.16687215864658356, -0.23016497492790222, -0.0016069606645032763, -0.09123296290636063, -2.4919538497924805, -3.1417770385742188, -0.0041673253290355206, -0.8603764176368713, -0.0023700501769781113, -0.8392025828361511, -0.00024577934527769685, -0.00598412798717618, -0.015606415458023548, -0.4046095311641693, -2.074220174108632e-05, -0.32799389958381653, -3.576278118089249e-07, -2.5629668016335927e-05, -0.0004690977220889181, -0.025082938373088837, -0.6192039251327515, -1.6927575416048057e-05, -0.02523963898420334, -0.15234258770942688, -0.0014456784119829535, -0.00028951745480298996, -1.1920928244535389e-07, -1.0728830375228426e-06, -0.1577686071395874, -0.007212316617369652, -3.933898824470816e-06, -0.043462395668029785, -0.004482934717088938, -0.06487513333559036, -0.5398558974266052, -0.05881819128990173, -0.0007138088112697005, -0.010760144330561161, -4.230964183807373, -0.04374610632658005, -0.9098371267318726, -1.9409085512161255, -0.48712021112442017, -9.011816291604191e-05, -0.10409719496965408, -0.003976653330028057, -1.1417486667633057, -1.3545019626617432, -1.7792224884033203, -0.0007440659101121128, -1.0767474174499512, -0.00027938754647038877, -0.0015147175872698426, -0.0020343814976513386, -0.0041762287728488445, -0.0430646575987339, -0.00035041390219703317, -0.14801602065563202, -3.135155202471651e-05, -0.0005530973430722952, -0.001955146435648203, -0.0039240517653524876, -0.004037206526845694, -0.35634687542915344, -0.02215142734348774, -0.011637774296104908, -0.00025376438861712813, -0.0023356794845312834, -0.9714623689651489, -0.25209006667137146, -0.34725677967071533, -1.259613037109375, -0.006961259059607983, -0.03891412541270256, -0.8242566585540771], "finish_reason": "length"}], "metrics": {"energy": 901.4589189510338, "energy_per_token": 3.5213239021524756, "time": 22.473713, "time_per_token": 0.08778794140625}}
{"outputs": [{"text": "# Check if start_date and end_date are datetime objects and start_date is before end_date\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects\")\n\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    # Create a list of all days between start_date and end_date (inclusive)\n    dates = pd.date_range(start_date, end_date, freq='D')\n\n    # Filter out weekends\n    weekdays = [d.date() for d in dates if d.dayofweek < 5]\n\n    # Convert to datetime objects\n    weekdays_datetime = [datetime(year=d.year, month=d.month, day=d.day) for d in weekdays]\n\n    # Filter out holidays\n    holidays_list = list(holidays.country_holidays(country, years=[d.year for d in weekdays_datetime]))\n    business_days", "tokens": ["#", " Check", " if", " start", "_", "date", " and", " end", "_", "date", " are", " datetime", " objects", " and", " start", "_", "date", " is", " before", " end", "_", "date", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", "\"", ")", "\n", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " days", " between", " start", "_", "date", " and", " end", "_", "date", " (", "in", "clusive", ")", "\n", "    ", "dates", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "='", "D", "')", "\n", "\n", "    ", "#", " Filter", " out", " weekends", "\n", "    ", "week", "days", " =", " [", "d", ".", "date", "()", " for", " d", " in", " dates", " if", " d", ".", "day", "of", "week", " <", " ", "5", "]", "\n", "\n", "    ", "#", " Convert", " to", " datetime", " objects", "\n", "    ", "week", "days", "_", "datetime", " =", " [", "datetime", "(", "year", "=", "d", ".", "year", ",", " month", "=", "d", ".", "month", ",", " day", "=", "d", ".", "day", ")", " for", " d", " in", " week", "days", "]", "\n", "\n", "    ", "#", " Filter", " out", " holidays", "\n", "    ", "h", "olidays", "_", "list", " =", " list", "(", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "d", ".", "year", " for", " d", " in", " week", "days", "_", "datetime", "]))", "\n", "    ", "business", "_", "days"], "logprobs": [-1.2844631671905518, -0.8149701952934265, -0.5908946990966797, -0.18513375520706177, -0.039820555597543716, -0.0005248599336482584, -0.31302282214164734, -0.001328062848187983, -0.0004256058018654585, -0.00021431533969007432, -0.017994370311498642, -0.5649935007095337, -0.0256348866969347, -1.1304256916046143, -1.2679803371429443, -0.025967374444007874, -0.0005393957253545523, -0.05762840434908867, -1.3313864469528198, -0.2464570850133896, -0.0008817598572932184, -0.00018142008048016578, -0.2088487148284912, -0.0021644041407853365, -0.01363746915012598, -0.010896348394453526, -0.010814864188432693, -3.58813522325363e-05, -0.0006136203301139176, -2.50339189733495e-06, -2.3841855067985307e-07, -9.965400386136025e-05, -0.0017627429915592074, -0.2045317441225052, -0.009325634688138962, -0.18107935786247253, -0.0008094609947875142, -6.48477507638745e-05, -0.005576530005782843, -2.3841855067985307e-07, -2.3841830625315197e-06, -7.295342220459133e-05, -0.000805053801741451, -0.5515227317810059, -0.002005472080782056, -0.003553862916305661, -0.006698060780763626, -0.020819811150431633, -1.5497195136049413e-06, -0.09134633839130402, -0.009953508153557777, -0.21768099069595337, -0.0007720588473603129, -0.00027998341829515994, -0.001462581567466259, -0.006280329078435898, -0.00012742661056108773, -9.179073458653875e-06, -0.10246893763542175, -0.005622050724923611, -0.07333961874246597, -0.0030204886570572853, -0.673250138759613, -0.0001209901092806831, -0.0010380124440416694, -2.4939141273498535, -0.0003924791526515037, -0.08863577246665955, -0.07198375463485718, -5.245195097813848e-06, -9.536738616588991e-07, -0.14219063520431519, -0.0003741279651876539, -1.1920928244535389e-07, 0.0, -0.0047189537435770035, -0.0012384133879095316, -0.0012347224401310086, -0.0013916341122239828, -0.00013350549852475524, -1.0728830375228426e-06, -0.0015587572706863284, -0.00749999051913619, -0.02369922772049904, -0.00037079135654494166, -0.00018082413589581847, -0.09209255874156952, -0.0343279093503952, -0.040520817041397095, -0.06458059698343277, -0.0002015625941567123, -7.92710343375802e-05, -0.002147869672626257, -8.594620157964528e-05, -0.0015944637125357985, -0.015393847599625587, -0.002571135526522994, -0.1301286518573761, -0.686309278011322, -0.14327821135520935, -0.49769777059555054, -0.02479737251996994, -0.5045995712280273, -0.5067230463027954, -0.11564218252897263, -0.0745929703116417, -0.031844399869441986, -0.0004570631426759064, -0.0016746795736253262, -0.00031895318534225225, -0.00031740395934320986, -0.00015722469834145159, -1.3841280937194824, -0.524668276309967, -0.008039495907723904, -0.023246612399816513, -0.14918150007724762, -0.0008395960903726518, -3.311887264251709, -0.0446302704513073, -0.0599532350897789, -6.9141146923357155e-06, -0.034264206886291504, -1.1920922133867862e-06, -1.537788011773955e-05, -5.066266385256313e-05, -0.0032174033112823963, -0.2288803905248642, -4.8993817472364753e-05, -0.04701812192797661, -0.0009055804111994803, -9.381330892210826e-05, -3.099436753473128e-06, -0.2492520958185196, -0.04542241245508194, -1.4185804502631072e-05, -0.13941574096679688, -0.0067628310061991215, -0.04097277671098709, -0.756843090057373, -0.3684019446372986, -0.0005845506675541401, -0.009299179539084435, -1.900020956993103, -0.14741554856300354, -0.1786450892686844, -1.683009386062622, -0.0003471963864285499, -1.0312613248825073, -0.10284492373466492, -0.027593247592449188, -1.3372679948806763, -1.0601937770843506, -1.1489887237548828, -1.012076735496521, -0.0002325502864550799, -0.0009654866298660636, -0.001564113306812942, -0.00020823694649152458, -0.000925112864933908, -0.053554389625787735, -0.031084414571523666, -0.00048411093303002417, -2.630631685256958, -0.009430504404008389, -6.556489552167477e-06, -0.050878413021564484, -0.0002196785935666412, -0.0021114691626280546, -0.009902873076498508, -0.049546755850315094, -0.012265728786587715, -0.0005305789527483284, -0.008280115202069283, -2.8016819953918457, -2.4664182662963867, -0.42665138840675354, -0.1999962031841278, -0.3343622088432312, -0.00027247529942542315, -0.1878383606672287, -0.026832925155758858, -1.570541262626648, -0.7710695266723633, -0.0018066527554765344, -0.045706361532211304, -0.043043989688158035, -0.3929656147956848, -1.2271156311035156, -0.004636727273464203, -0.21823929250240326, -0.0014178233686834574, -9.30981186684221e-05, -6.69933797325939e-05, -0.004418610129505396, -0.00030012393835932016, -0.00010561384988250211, -5.960462772236497e-07, -2.253030106658116e-05, -5.686121585313231e-05, -0.0004972175229340792, -6.782778655178845e-05, -8.618460560683161e-05, -2.50339189733495e-06, -1.2278481335670222e-05, -0.010145522654056549, -0.007505433168262243, -2.8729025871143676e-05, -1.0609570381348021e-05, -0.0011301804333925247, -1.4305104514278355e-06, -0.0022318472620099783, -0.00296522188000381, -0.008131138980388641, -0.0006293461774475873, -0.014715935103595257, -1.5270646810531616, -0.003627151483669877, -2.031891107559204, -0.2733916938304901, -0.002126338891685009, -0.8253040313720703, -0.14903341233730316, -0.03302256762981415, -0.5236966013908386, -0.0016362386522814631, -1.696220874786377, -0.0016930069541558623, -0.016846058890223503, -9.16677454370074e-05, -0.0026796883903443813, -0.3192045986652374, -3.683499380713329e-05, -0.0017228773795068264, -0.000228140561375767, -0.001980606932193041, -0.00356502877548337, -0.2598199248313904, -0.04979460686445236, -1.0749956369400024, -1.1680326461791992, -0.000816131301689893, -0.0011593532981351018, -0.00033146608620882034, -6.007967749610543e-05, -3.540453326422721e-05, -0.06364332139492035, -2.264974000354414e-06, -0.1525406390428543, -1.2993727978027891e-05, -0.14985182881355286, -0.016839846968650818, -0.11604414135217667, -0.28682941198349, -0.0023564924485981464, -0.0012946089264005423], "finish_reason": "length"}], "metrics": {"energy": 898.6085230484011, "energy_per_token": 3.510189543157817, "time": 22.495579, "time_per_token": 0.08787335546875}}
{"outputs": [{"text": "# Check if the start date is not a datetime object, or if it's after the end date\n    if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"Start date must be a datetime object and before the end date.\")\n    # Check if the end date is not a datetime object, or if it's before the start date\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"End date must be a datetime object and after the start date.\")\n\n    # Get all the public holidays of the given country\n    country_holidays = holidays.country_holidays(country)\n\n    # Create a list of business days between the start and end dates\n    business_days = []\n    current_date = start_date\n    while current_date <= end_date:\n        # Check if the current date is a weekday and not a public holiday\n        if current_date.isoweekday() <= 5 and current_date not in country_holidays:\n            business_days.append(current_", "tokens": ["#", " Check", " if", " the", " start", " date", " is", " not", " a", " datetime", " object", ",", " or", " if", " it", "'", "s", " after", " the", " end", " date", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Start", " date", " must", " be", " a", " datetime", " object", " and", " before", " the", " end", " date", ".", "\"", ")", "\n", "    ", "#", " Check", " if", " the", " end", " date", " is", " not", " a", " datetime", " object", ",", " or", " if", " it", "'", "s", " before", " the", " start", " date", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "End", " date", " must", " be", " a", " datetime", " object", " and", " after", " the", " start", " date", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " all", " the", " public", " holidays", " of", " the", " given", " country", "\n", "    ", "country", "_", "h", "olidays", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " business", " days", " between", " the", " start", " and", " end", " dates", "\n", "    ", "business", "_", "days", " =", " []", "\n", "    ", "current", "_", "date", " =", " start", "_", "date", "\n", "    ", "while", " current", "_", "date", " <=", " end", "_", "date", ":", "\n", "        ", "#", " Check", " if", " the", " current", " date", " is", " a", " week", "day", " and", " not", " a", " public", " holiday", "\n", "        ", "if", " current", "_", "date", ".", "is", "ow", "e", "ek", "day", "()", " <=", " ", "5", " and", " current", "_", "date", " not", " in", " country", "_", "h", "olidays", ":", "\n", "            ", "business", "_", "days", ".", "append", "(", "current", "_"], "logprobs": [-1.2844631671905518, -0.8149701952934265, -0.5908946990966797, -2.8220908641815186, -0.39807558059692383, -1.153559684753418, -0.298790842294693, -1.1696456670761108, -0.0804620161652565, -0.03168769180774689, -0.01482411753386259, -3.2451095581054688, -1.3169093132019043, -0.850601077079773, -0.15547676384449005, -0.7200261950492859, -5.900685573578812e-05, -0.09739235043525696, -0.026833388954401016, -0.0012388896429911256, -0.0025075203739106655, -0.31560495495796204, -0.000776347063947469, -0.006849618628621101, -0.005868941079825163, -0.0017234723782166839, -3.85038583772257e-05, -0.00039521988946944475, -5.125986263010418e-06, -8.702239938429557e-06, -0.00016389934171456844, -0.00212848000228405, -0.09116625785827637, -0.003135290928184986, -0.06910053640604019, -8.22540732769994e-06, -3.576278118089249e-07, -0.05551459267735481, -0.0032954690977931023, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.003262556390836835, -0.0018506796332076192, -0.002584690460935235, -0.018990252166986465, -0.0005830018781125546, -3.576278118089249e-07, -0.15280915796756744, -0.042593419551849365, -0.9919137358665466, -0.004054659977555275, -0.26401564478874207, -0.003820146666839719, -0.012411735020577908, -0.3075312674045563, -0.011870814487338066, -0.29604557156562805, -1.0565763711929321, -0.25355687737464905, -0.0004924515378661454, -0.0002571013756096363, -0.08847418427467346, -0.002227089600637555, -0.00027450130437500775, -0.0009245174005627632, -2.6712679862976074, -0.013444360345602036, -0.009142912924289703, -0.0008244690834544599, -0.010382804088294506, -0.009344412945210934, -0.0007757514831610024, -0.0003651905863080174, -0.0010390841634944081, -0.0003694805200211704, -0.0004459816846065223, -0.00028165188268758357, -0.014865460805594921, -0.0005566716426983476, -0.01891983672976494, -0.0005553610390052199, -0.0002768848498817533, -0.00013219437096267939, -0.004801885224878788, -0.0009557208395563066, -0.0026983539573848248, -0.0003093002596870065, -0.004353450611233711, -0.0003232433518860489, -0.014601515606045723, -0.0002627027570270002, -1.5020257706055418e-05, -3.40932747349143e-05, -0.0013397298753261566, -3.576278118089249e-07, -2.0265558760002023e-06, -3.6954195820726454e-05, -0.00012182447244413197, -0.00030286493711173534, -0.0006422125734388828, -0.004068788141012192, -5.960462772236497e-07, -7.152555099310121e-07, -0.0007402540650218725, -0.00038818930624984205, -2.3841855067985307e-07, -7.152555099310121e-07, -0.0003234816831536591, -0.00027056847466155887, -0.0008074360666796565, -0.00021073981770314276, -8.189342770492658e-05, 0.0, -0.00017486473370809108, -0.00043025295599363744, -0.00278501957654953, -0.00017808281700126827, -0.0005359405186027288, -0.0002244459028588608, -0.0003582789213396609, -0.00037067217635922134, -0.0001497156627010554, -0.001328539103269577, -0.001303895260207355, -0.0008802115335129201, -0.0005590544897131622, -0.00031549722189083695, -0.0012812747154384851, -0.00018654513405635953, -0.00013863079948350787, -0.00042358008795417845, -0.3248423933982849, -0.0020776845049113035, -0.16832317411899567, -2.3254597187042236, -1.533831000328064, -1.1439106464385986, -1.4926426410675049, -0.004612283315509558, -2.78485369682312, -0.09364867210388184, -1.5085928440093994, -0.013193097896873951, -0.5943422913551331, -0.0005353448214009404, -1.3230504989624023, -0.014071417041122913, -0.07601545751094818, -0.002509423065930605, -0.006437280215322971, -0.029223080724477768, -0.00018845213344320655, -0.041520144790410995, -2.622600959512056e-06, -0.00010775939153973013, -9.893881360767409e-05, -0.001508051878772676, -0.003041643649339676, -0.1104697585105896, -0.017150545492768288, -0.49339759349823, -0.0008223251206800342, -0.026327965781092644, -0.7383522391319275, -0.2553541362285614, -0.6638932824134827, -0.11814525723457336, -1.3481357097625732, -0.010008743964135647, -0.9652541875839233, -0.36042535305023193, -0.0864364504814148, -0.5177142024040222, -0.0013096098555251956, -0.8288940191268921, -0.22892865538597107, -0.0003906917118001729, -0.10658290237188339, -0.0005600076401606202, -0.0036272702272981405, -0.011281509883701801, -0.4510596990585327, -0.003426278242841363, -0.08256551623344421, -0.6580945253372192, -0.008449400775134563, -0.18741928040981293, -0.00030501006403937936, -0.013333440758287907, -5.960462772236497e-07, -6.079655122448457e-06, -0.07265177369117737, -0.270156592130661, -0.048996955156326294, -0.006340388208627701, -3.576278118089249e-07, -2.622600959512056e-06, -0.03445356711745262, -0.0002735478919930756, -5.960462772236497e-07, 0.0, -0.0005236684810370207, -0.0038176528178155422, -0.012437872588634491, -0.5538399815559387, -0.34768688678741455, -0.005859815515577793, -0.11151079833507538, -0.06161337345838547, -0.1519942730665207, -0.006012566853314638, -0.47723695635795593, -0.7524999976158142, -0.00212027202360332, -0.2897793650627136, -0.059342287480831146, -0.024735387414693832, -0.37046995759010315, -0.0004987664869986475, -0.16997437179088593, -0.0002858230145648122, -0.008768861182034016, -0.016101447865366936, -1.0728830375228426e-06, -7.152555099310121e-07, -0.003232137765735388, -2.880647897720337, -0.0008706831140443683, -3.2186455882765586e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -4.23184028477408e-05, -1.5622204542160034, -0.0009958551963791251, -0.0015775627689436078, -0.0037501975893974304, -0.11685849726200104, -7.152555099310121e-07, -1.4305104514278355e-06, -0.020614538341760635, -3.576278118089249e-07, -0.002516319742426276, -1.7046782886609435e-05, -1.0728830375228426e-06, 0.0, -0.026721855625510216, -0.019116919487714767, -0.001830213237553835, -0.05208451300859451, -2.3841855067985307e-07, -5.722029527532868e-06, -9.572047565598041e-05, -8.618460560683161e-05, -0.00036900385748595, -0.03025723621249199, -5.960462772236497e-07], "finish_reason": "length"}], "metrics": {"energy": 864.4986065673827, "energy_per_token": 3.3769476819038386, "time": 22.283346, "time_per_token": 0.0870443203125}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date >= end_date:\n        raise ValueError(\"start_date should be a datetime object and before end_date.\")\n    if not isinstance(end_date, datetime) or end_date <= start_date:\n        raise ValueError(\"end_date should be a datetime object and after start_date.\")\n\n    country_holidays = pd.DataFrame(\n        data=holidays.country_holidays(country, years=[start_date.year, end_date.year]))\n    # print(country_holidays)\n    country_holidays.index = pd.to_datetime(country_holidays.index)\n\n    business_days = pd.date_range(start=start_date, end=end_date, freq=\"B\")\n    # print(business_days)\n\n    business_days = business_days[~business_days.isin(country_holidays.index)]\n    # print(business_days)\n    return list(business_days)", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >=", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " should", " be", " a", " datetime", " object", " and", " before", " end", "_", "date", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <=", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " should", " be", " a", " datetime", " object", " and", " after", " start", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "country", "_", "h", "olidays", " =", " pd", ".", "DataFrame", "(", "\n", "        ", "data", "=", "h", "olidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", "]))", "\n", "    ", "#", " print", "(", "country", "_", "h", "olidays", ")", "\n", "    ", "country", "_", "h", "olidays", ".", "index", " =", " pd", ".", "to", "_", "datetime", "(", "country", "_", "h", "olidays", ".", "index", ")", "\n", "\n", "    ", "business", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "=", "\"", "B", "\"", ")", "\n", "    ", "#", " print", "(", "business", "_", "days", ")", "\n", "\n", "    ", "business", "_", "days", " =", " business", "_", "days", "[", "~", "business", "_", "days", ".", "isin", "(", "country", "_", "h", "olidays", ".", "index", ")]", "\n", "    ", "#", " print", "(", "business", "_", "days", ")", "\n", "    ", "return", " list", "(", "business", "_", "days", ")"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -2.448568344116211, -0.004501210525631905, -1.4305104514278355e-06, -1.4305104514278355e-06, -0.012021472677588463, -0.0046609328128397465, -0.006415249314159155, -0.010586059652268887, -0.000940476544201374, -7.152555099310121e-07, -0.15786103904247284, -0.06057615205645561, -0.3692629933357239, -0.0022052035201340914, -0.00036483307485468686, -2.0177102088928223, -0.006326054688543081, -0.05666949599981308, -0.1444181650876999, -0.06327669322490692, -0.23135937750339508, -1.022452712059021, -0.036136429756879807, -0.0010637345258146524, -0.0001525762490928173, -0.5417325496673584, -0.006409090012311935, -0.0004439560289029032, -0.0011806668480858207, -0.28869500756263733, -0.011452881619334221, -0.00043394684325903654, -5.4238757002167404e-05, -1.8358061424805783e-05, -0.0017934442730620503, -2.3841855067985307e-07, -1.1920928244535389e-07, -4.1483970562694594e-05, -0.00018916724366135895, -0.001719426247291267, -0.0006439996068365872, -0.043719518929719925, -2.3841855067985307e-07, 0.0, -0.002455436158925295, -0.0006526962388306856, -5.960462772236497e-07, -3.3378546504536644e-06, -0.0005869334563612938, -0.00029762129997834563, -0.0005728749092668295, -0.00017307691450696439, -0.0001070442158379592, -3.576278118089249e-07, -0.0003626880934461951, -0.0004094000905752182, -0.005413396749645472, -0.0001915509783430025, -0.0002172949316445738, -0.0004945961991325021, -0.00029213930247351527, -0.0008275659638457, -0.0006802152493037283, -0.0007358465809375048, -0.004062733147293329, -0.004716817755252123, -0.0017701209289953113, -0.00018130090029444546, -0.00010585224663373083, -0.007321076933294535, -0.0003375437227077782, -5.1616290875244886e-05, -0.0004694551753345877, -0.22949086129665375, -0.0010671879863366485, -3.799440383911133, -0.04057885333895683, -0.0619208887219429, -0.006648562848567963, -0.010897409170866013, -2.531374454498291, -1.07287787614041e-05, -0.31940168142318726, -0.2099781036376953, -1.8107939958572388, -0.055143389850854874, -2.713975429534912, -0.13499338924884796, -0.34708940982818604, -6.270212179515511e-05, -0.0016583750257268548, -0.18271957337856293, -3.683499380713329e-05, -0.0004854215949308127, -4.684815212385729e-05, -0.002374093746766448, -0.04683282971382141, -0.15340210497379303, -0.2267150729894638, -0.873211145401001, -0.10123616456985474, -0.00023600654094479978, -8.475421054754406e-05, -0.006230928935110569, -0.0003864018653985113, -0.03302764520049095, -0.05171611160039902, -1.7881377516459906e-06, -4.529942543740617e-06, -5.709961988031864e-05, -2.5033637939486653e-05, -2.368657350540161, -0.11318818479776382, -0.43265464901924133, -3.129399061203003, -2.5004284381866455, -0.09331449121236801, -0.5099724531173706, -0.003981283865869045, -0.0003424296446610242, -2.8371408916427754e-05, -0.24061039090156555, -0.060659851878881454, -0.681037187576294, -1.541013240814209, -0.0009067714563570917, -0.03258396312594414, -0.0050683110021054745, -1.7264130115509033, -1.6167407035827637, -0.28360775113105774, -0.738154411315918, -5.006777428206988e-06, -0.0856727659702301, -7.152555099310121e-07, -0.0003587556129787117, -0.0019119569333270192, -0.024742713198065758, -2.0146166207268834e-05, -5.364403477869928e-06, -1.1920928244535389e-07, -0.002647468587383628, -0.0015549485106021166, -0.196018785238266, -0.050336599349975586, -1.2644729614257812, -0.00033802041434682906, -1.6090415716171265, -0.0024502037558704615, -0.006647259928286076, -0.021039165556430817, -1.22625732421875, -3.9219088648678735e-05, -0.43524593114852905, -3.576278118089249e-07, -1.5497195136049413e-06, -0.00135389668866992, -0.07100776582956314, -0.7148936986923218, -0.011105040088295937, -1.0728830375228426e-06, -3.099436753473128e-06, -0.01648414134979248, -0.020383642986416817, -0.00016056202002801, -0.0002499506517779082, -3.4570634852570947e-06, -1.5497195136049413e-06, -0.13122837245464325, -0.03414048254489899, -4.529942543740617e-06, -2.1682934761047363, -0.07737933099269867, -0.0376814641058445, -0.007177283521741629, -0.08321180194616318, -0.12730178236961365, -0.21099868416786194, -0.972235381603241, -0.12890605628490448, -0.026751451194286346, -0.09572918713092804, -0.00010358751023886725, -0.000289159914245829, -0.06209735572338104, -0.011315456591546535, -0.876338541507721, -0.00045313104055821896, -0.9555225968360901, -0.00037746457383036613, -0.015033752657473087, -0.4197138547897339, -0.33029595017433167, -9.536738616588991e-07, -3.2186455882765586e-06, -0.21357953548431396, -0.12723523378372192, -0.028136974200606346, -4.6491513785440475e-06, -2.9802276912960224e-06, -0.00024828212917782366, -0.010049106553196907, -0.0024812407791614532, -0.06337806582450867, -7.510157047363464e-06, -1.3470558769768104e-05, -2.3841855067985307e-07, -0.050149090588092804, -0.007113724015653133, -0.028681334108114243, -0.08786208182573318, -0.30792900919914246, -0.4361080527305603, -0.043089091777801514, -0.010299625806510448, -0.01958286575973034, -4.51792984677013e-05, -0.00020287363440729678, -0.04087311029434204, -0.008244055323302746, -1.232236623764038, -0.17645631730556488, -1.7950916290283203, -0.000667468411847949, -0.012711570598185062, -1.0967194612021558e-05, -3.9457496313843876e-05, -0.21679534018039703], "finish_reason": "stop"}], "metrics": {"energy": 874.5148243179315, "energy_per_token": 3.6136976211484773, "time": 21.43246, "time_per_token": 0.08856388429752066}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects.\")\n\n    if start_date >= end_date:\n        raise ValueError(\"start_date must be before end_date.\")\n\n    start_date = pd.Timestamp(start_date)\n    end_date = pd.Timestamp(end_date)\n\n    all_days = pd.date_range(start_date, end_date, freq=\"B\")\n    holiday_dates = holidays.CountryHoliday(country)\n\n    return [day.to_pydatetime() for day in all_days if day not in holiday_dates]", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", ".", "\"", ")", "\n", "\n", "    ", "if", " start", "_", "date", " >=", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "start", "_", "date", " =", " pd", ".", "Timestamp", "(", "start", "_", "date", ")", "\n", "    ", "end", "_", "date", " =", " pd", ".", "Timestamp", "(", "end", "_", "date", ")", "\n", "\n", "    ", "all", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ",", " fre", "q", "=", "\"", "B", "\"", ")", "\n", "    ", "h", "oliday", "_", "dates", " =", " holidays", ".", "Country", "H", "oliday", "(", "country", ")", "\n", "\n", "    ", "return", " [", "day", ".", "to", "_", "py", "datetime", "()", " for", " day", " in", " all", "_", "days", " if", " day", " not", " in", " holiday", "_", "dates", "]"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -1.058645248413086, -0.0010374169796705246, -5.173549288883805e-05, -0.003532599890604615, -3.576278118089249e-07, -5.960462772236497e-07, -6.294052582234144e-05, -0.0012124576605856419, -0.04676070809364319, -0.0023068978916853666, -0.0060392278246581554, -0.007554652169346809, -0.01756434701383114, -3.576278118089249e-07, -0.13921527564525604, -0.013361201621592045, -0.39966636896133423, -0.0024166684597730637, -0.00032848684350028634, -0.00383653468452394, -0.007357879541814327, -0.0002079985715681687, -1.9192511899746023e-05, -0.1103842556476593, -0.009824730455875397, -0.10182485729455948, -0.007088512182235718, -1.0414071083068848, -0.0023557788226753473, -0.00013684290752280504, -0.001545426552183926, -1.108425259590149, -0.00035851728171110153, -0.034204766154289246, -0.055363014340400696, -1.4305104514278355e-06, -5.960462772236497e-07, -3.034313440322876, -0.0011187491472810507, -2.3841855067985307e-07, 0.0, -0.013262860476970673, -0.0027715861797332764, -0.0011954312212765217, -0.002406084444373846, -0.0002320735511602834, -2.3841855067985307e-07, -0.002694787224754691, -0.009210714139044285, -0.08194450289011002, -0.0006474544061347842, -0.00032074074260890484, -0.027821671217679977, -0.02256433106958866, -0.040240656584501266, -0.0042646657675504684, -0.000248401309363544, -7.378782902378589e-05, -0.010820642113685608, -0.000715833914000541, -0.00010168035078095272, -0.0005036516231484711, -0.012343326583504677, -0.0012507957872003317, -3.4822793006896973, -0.09653568267822266, -0.3717450201511383, -0.30987977981567383, -1.639621376991272, -2.062299427052494e-05, -1.2434829473495483, -0.0029841200448572636, -0.010502072982490063, -2.3841830625315197e-06, -2.9802276912960224e-06, -0.08059542626142502, -0.06368940323591232, -0.005593600682914257, -0.004740309901535511, -3.540453326422721e-05, -0.0002040654799202457, -0.0019292092183604836, -0.003170347074046731, -2.9802276912960224e-06, -5.090107151772827e-05, -6.711257447022945e-05, -0.0004633783537428826, -8.344646857949556e-07, -1.1920928244535389e-07, -0.003781669307500124, -0.03696978837251663, -0.3883569836616516, -0.0005509527400135994, -1.8449805974960327, -0.0007618147064931691, -0.2119065523147583, -0.020938541740179062, -0.05021314695477486, -2.264974000354414e-06, -0.09535593539476395, -2.3841855067985307e-07, -7.152555099310121e-07, -0.00015746307326480746, -0.0035514873452484608, -0.43831750750541687, -4.458328112377785e-05, -0.012791253626346588, -0.0005974177038297057, -0.0002903516869992018, -5.8410845667822286e-05, -0.3577103316783905, -0.05105967074632645, -1.1086402082582936e-05, -2.520263433456421, -0.023935643956065178, -2.795369863510132, -0.0003116837178822607, -0.07580430060625076, -0.32979050278663635, -0.5677477717399597, -1.6414821147918701, -1.622408390045166, -0.040513262152671814, -1.2783339023590088, -0.0028284089639782906, -0.32011866569519043, -0.0002586507180240005, -1.511269450187683, -0.00025948495022021234, -0.0004673104267567396, -0.0010037152096629143, -0.015584115870296955, -0.13825605809688568, -0.1634601652622223, -0.8670033812522888, -0.0005286726518534124, -2.337367534637451, -0.5015864968299866, -0.45855551958084106, -0.6315212845802307, -0.12304257601499557, -4.172316494077677e-06, -0.000350175570929423, -0.00017426878912374377, -0.004972946830093861, -0.028711335733532906, -0.00021550717065110803, -0.00046588058467023075, -0.0032611305359750986, -7.390948667307384e-06, -1.7881377516459906e-06, -0.04887208715081215, -0.035783037543296814, -0.5559716820716858, -9.059865078597795e-06, -0.029160907492041588, -1.5497195136049413e-06, -2.622600959512056e-06, -0.28449854254722595], "finish_reason": "stop"}], "metrics": {"energy": 580.7996967430109, "energy_per_token": 3.416468804370653, "time": 14.715679, "time_per_token": 0.08656281764705882}}
{"outputs": [{"text": "if not isinstance(start_date, datetime) or start_date > end_date:\n        raise ValueError(\"start_date must be a datetime object and be before end_date.\")\n\n    if not isinstance(end_date, datetime) or end_date < start_date:\n        raise ValueError(\"end_date must be a datetime object and be after start_date.\")\n\n    all_days = pd.date_range(start_date, end_date)\n    weekends = all_days[all_days.dayofweek > 4]\n    public_holidays = pd.Series([0] * len(all_days), index=all_days).index\n    public_holidays = pd.to_datetime(holidays.CountryHoliday(country=country).values())\n    business_days = all_days[~all_days.isin(weekends + public_holidays)]\n    return business_days", "tokens": ["if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " a", " datetime", " object", " and", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", ")", " or", " end", "_", "date", " <", " start", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "end", "_", "date", " must", " be", " a", " datetime", " object", " and", " be", " after", " start", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "all", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "_", "date", ",", " end", "_", "date", ")", "\n", "    ", "week", "ends", " =", " all", "_", "days", "[", "all", "_", "days", ".", "day", "of", "week", " >", " ", "4", "]", "\n", "    ", "public", "_", "h", "olidays", " =", " pd", ".", "Series", "([", "0", "]", " *", " len", "(", "all", "_", "days", ")", ",", " index", "=", "all", "_", "days", ")", ".", "index", "\n", "    ", "public", "_", "h", "olidays", " =", " pd", ".", "to", "_", "datetime", "(", "h", "olidays", ".", "Country", "H", "oliday", "(", "country", "=", "country", ")", ".", "values", "())", "\n", "    ", "business", "_", "days", " =", " all", "_", "days", "[", "~", "all", "_", "days", ".", "isin", "(", "week", "ends", " +", " public", "_", "h", "olidays", ")]", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5303270816802979, -0.03271930292248726, -0.01214572787284851, -4.792098479811102e-05, -0.001531976624391973, -5.960446742392378e-06, -1.7881377516459906e-06, -0.00018535325943958014, -0.004533014725893736, -0.3871022164821625, -0.011327007785439491, -0.44737058877944946, -5.960446742392378e-06, -3.576278118089249e-07, -0.11373317241668701, -0.0032845379319041967, -1.0728830375228426e-06, -2.3841830625315197e-06, -0.007774688303470612, -0.003601495176553726, -0.0052166772074997425, -0.006398784928023815, -0.0008139872807078063, -7.152555099310121e-07, -0.15086837112903595, -0.04062006250023842, -0.3671383857727051, -0.0018872085493057966, -0.00028320116689428687, -0.2218606024980545, -0.003563959849998355, -0.015293475240468979, -0.17545126378536224, -0.04588855803012848, -0.12847276031970978, -2.161562442779541, -0.17424312233924866, -0.030581599101424217, -0.0003296785580459982, -0.00010358751023886725, -0.7533389925956726, -0.00612915912643075, -0.0002809368306770921, -0.0009984752396121621, -1.4112120866775513, -0.00013386306818574667, -0.0035387768875807524, -0.00046266341814771295, -4.124556289752945e-05, -1.9192511899746023e-05, -0.0014649622607976198, -3.576278118089249e-07, -8.344646857949556e-07, -3.158996332786046e-05, -0.00017188502533826977, -0.0013622299302369356, -0.0004766043566633016, -0.02163371630012989, -5.960462772236497e-07, -1.1920928244535389e-07, -0.0011175584513694048, -0.0008952185744419694, -3.576278118089249e-07, -5.960462772236497e-07, -0.0005040090763941407, -0.0003000047872774303, -0.0005900310934521258, -0.0001776060671545565, -5.674201020156033e-05, -1.1920928244535389e-07, -0.00022766382608097047, -0.0006000387365929782, -0.004189643077552319, -0.00022146634000819176, -0.0001287377526750788, -0.0004670721245929599, -0.00016497205069754273, -0.0005236684810370207, -0.0006021831650286913, -0.0006810491322539747, -0.0012363893911242485, -0.020101873204112053, -0.004013816826045513, -0.004806156270205975, -0.00030155404238030314, -9.095255518332124e-05, -0.004260748624801636, -0.0005035324720665812, -7.939023635117337e-05, -0.0004232226056046784, -0.025011787191033363, -0.0015389991458505392, -2.5860819816589355, -0.0013402060139924288, -0.3232603967189789, -0.043607912957668304, -0.04050822556018829, -1.0847986231965479e-05, -0.1650489717721939, -1.311301275563892e-06, -5.125986263010418e-06, -0.0002464944263920188, -0.0069843437522649765, -0.5867350101470947, -1.680836794548668e-05, -0.05482136830687523, -0.0012429377529770136, -0.0005695389700122178, -5.602820692729438e-06, -1.0660488605499268, -0.30670446157455444, -0.23979529738426208, -0.915727972984314, -1.0668349266052246, -0.006174654699862003, -0.27260124683380127, -6.556489552167477e-06, -2.50339189733495e-06, -0.06796814501285553, -0.0018610315164551139, -1.0728830375228426e-06, -1.311301275563892e-06, -1.3351351299206726e-05, -0.4732760787010193, -0.024944119155406952, -4.6491513785440475e-06, -0.14269234240055084, -0.0004144048143643886, -0.0042943404987454414, -0.00029404606902971864, -0.8451866507530212, -0.200676828622818, -1.0018936395645142, -0.0008038626983761787, -0.003689032746478915, -0.003954805433750153, -0.006229270249605179, -1.9880750179290771, -7.510157047363464e-06, -1.039766550064087, -1.9637683629989624, -1.5911461114883423, -0.06854012608528137, -0.26169946789741516, -0.001328181941062212, -0.0001225396408699453, -0.314449667930603, -2.884823152271565e-05, -9.417489309271332e-06, -0.05035507678985596, -0.00011002412065863609, -0.042953889816999435, -0.010173961520195007, -0.003521077334880829, -1.1920928244535389e-07, -8.344646857949556e-07, -0.04886414110660553, -1.9651367664337158, -1.3958219289779663, -1.1060619354248047, -0.2749948501586914, -0.5354461669921875, -0.0001081169830285944, -0.0011655449634417892, -0.004055728204548359, -0.13129623234272003, -2.6056900024414062, -1.5616295058862306e-05, -0.605635404586792, -2.3841855067985307e-07, -2.276871418871451e-05, -0.153788760304451, -1.3554503917694092, -2.109982233378105e-05, -0.0004888770054094493, -1.2732548713684082, -2.3483953555114567e-05, -0.0010981488740071654, -0.027029847726225853, -0.0415409579873085, -2.730067729949951, -0.004781479015946388, -1.8099677562713623, -0.06367531418800354, -0.2584182322025299, -0.05366477742791176, -0.06534827500581741, -0.13024146854877472, -0.38467204570770264, -0.001277702976949513, -0.0016797969583421946, -0.0065362947061657906, -0.28362447023391724, -2.0265558760002023e-06, -3.933898824470816e-06, -1.3400983810424805, -0.07213705033063889, -0.01970653608441353, -7.390948667307384e-06, -1.4305104514278355e-06, -0.00014923889830242842, -0.0013866343069821596, -0.001279369811527431, -0.039324864745140076, -7.152555099310121e-07, -2.8946025371551514, -0.008768625557422638, -8.344646857949556e-07, -2.3841855067985307e-07, 0.0, -0.014693381264805794, -0.05846080929040909, -0.8901757597923279, -0.1379965841770172, -0.3383690118789673, -7.795983401592821e-05, -8.225102646974847e-05, -1.8768436908721924, -2.264974000354414e-06, -2.264974000354414e-06, -3.933898824470816e-06, -2.539125671319198e-05, -0.14663414657115936], "finish_reason": "stop"}], "metrics": {"energy": 822.5778997077944, "energy_per_token": 3.6886901332188087, "time": 19.957844, "time_per_token": 0.08949705829596413}}
{"outputs": [{"text": "# check if dates are datetime objects and start_date is not after end_date\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date.\")\n\n    # create a list of all days between start and end date (including start and end date)\n    all_days = pd.date_range(start=start_date, end=end_date, freq='D').tolist()\n\n    # create a list of weekends\n    weekends = holidays.country_holidays(country, years=[start_date.year, end_date.year]).values()\n\n    # remove weekends and public holidays from all days list\n    business_days = [day for day in all_days if day not in weekends and not day.weekday() in (5,6)]\n\n    return business_days", "tokens": ["#", " check", " if", " dates", " are", " datetime", " objects", " and", " start", "_", "date", " is", " not", " after", " end", "_", "date", "\n", "    ", "if", " not", " isinstance", "(", "start", "_", "date", ",", " datetime", ")", " or", " not", " isinstance", "(", "end", "_", "date", ",", " datetime", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " and", " end", "_", "date", " must", " be", " datetime", " objects", ".", "\"", ")", "\n", "    ", "if", " start", "_", "date", " >", " end", "_", "date", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "start", "_", "date", " must", " be", " before", " end", "_", "date", ".", "\"", ")", "\n", "\n", "    ", "#", " create", " a", " list", " of", " all", " days", " between", " start", " and", " end", " date", " (", "including", " start", " and", " end", " date", ")", "\n", "    ", "all", "_", "days", " =", " pd", ".", "date", "_", "range", "(", "start", "=", "start", "_", "date", ",", " end", "=", "end", "_", "date", ",", " fre", "q", "='", "D", "')", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " create", " a", " list", " of", " weekends", "\n", "    ", "week", "ends", " =", " holidays", ".", "country", "_", "h", "olidays", "(", "country", ",", " years", "=[", "start", "_", "date", ".", "year", ",", " end", "_", "date", ".", "year", "])", ".", "values", "()", "\n", "\n", "    ", "#", " remove", " weekends", " and", " public", " holidays", " from", " all", " days", " list", "\n", "    ", "business", "_", "days", " =", " [", "day", " for", " day", " in", " all", "_", "days", " if", " day", " not", " in", " weekends", " and", " not", " day", ".", "week", "day", "()", " in", " (", "5", ",", "6", ")]", "\n", "\n", "    ", "return", " business", "_", "days", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2844631671905518, -3.0882723331451416, -1.0517783164978027, -3.2461912631988525, -0.07764387130737305, -0.8917821645736694, -0.187306210398674, -1.354731559753418, -0.5676824450492859, -0.5587599873542786, -0.0020880342926830053, -0.10408097505569458, -0.5141348242759705, -0.03812679275870323, -0.017069099470973015, -0.014151696115732193, -0.001336158369667828, -0.056076038628816605, -0.003472372191026807, -0.023548340424895287, -0.026247728615999222, -0.038436222821474075, -8.737658936297521e-05, -0.0010489681735634804, -4.172316494077677e-06, -7.152555099310121e-07, -0.0002351722796447575, -0.0029198178090155125, -0.15158787369728088, -0.01080153789371252, -0.15946657955646515, -0.000552263343706727, -0.00014530557382386178, -0.009335437789559364, -4.768370445162873e-07, -2.3841855067985307e-07, -0.00011967896716669202, -0.00162743148393929, -0.5745493173599243, -0.003084784373641014, -0.006370712071657181, -0.009037304669618607, -0.015577074140310287, -2.50339189733495e-06, -0.1391257643699646, -0.012810789979994297, -0.4674614667892456, -0.003658389439806342, -0.0004911408759653568, -0.0029572586063295603, -0.006587219424545765, -0.00027450130437500775, -2.098061486321967e-05, -0.10136403888463974, -0.005447306204587221, -0.04897288978099823, -0.006223110016435385, -1.4540807008743286, -0.003099163994193077, -0.00016151554882526398, -0.0015282867243513465, -0.08741717040538788, -0.09938016533851624, -0.032273173332214355, -5.602820692729438e-06, -9.536738616588991e-07, -0.0669681578874588, -0.00049650261644274, -1.1920928244535389e-07, 0.0, -0.0031432530377060175, -0.0015969631494954228, -0.0012047183699905872, -0.0009504806366749108, -0.00012182447244413197, -1.311301275563892e-06, -0.0016784878680482507, -0.004647050518542528, -0.014225739985704422, -0.00045980370487086475, -0.00016962042718660086, -0.1133953183889389, -0.17729224264621735, -0.16125552356243134, -0.7040441632270813, -0.00035291642416268587, -0.00010930894495686516, -0.016429614275693893, -0.0005152089870534837, -9.536288416711614e-05, -0.00042167355422861874, -0.0798097625374794, -0.0017298986203968525, -0.15223437547683716, -0.7290923595428467, -0.3318506181240082, -0.5794134736061096, -0.026058781892061234, -0.6804943084716797, -0.6440690159797668, -0.17141227424144745, -0.15803958475589752, -1.8864333629608154, -0.001096481690183282, -0.3631059229373932, -2.234219551086426, -0.9393540620803833, -1.0379987955093384, -0.09335488080978394, -0.000714404450263828, -0.315530002117157, -0.05168147012591362, -0.03956998884677887, -0.000535821367520839, -1.0927770137786865, -0.000912250077817589, -0.0486648827791214, -0.030147241428494453, -0.08140674233436584, -2.3483953555114567e-05, -0.0764019638299942, -1.0728830375228426e-06, -5.364403477869928e-06, -0.00013422065239865333, -0.007197877392172813, -0.9328714609146118, -0.022971704602241516, -7.152555099310121e-07, -5.960462772236497e-07, -0.039513956755399704, -0.002462095348164439, -0.00013302871957421303, -0.0002618685248307884, -2.0265558760002023e-06, 0.0, -0.11324673146009445, -0.03244641050696373, -1.4066597032069694e-05, -0.08427896350622177, -0.0187416672706604, -0.09297878295183182, -0.35614052414894104, -0.4964539706707001, 0.0, -0.000607782625593245, -0.009465104900300503, -0.1907464861869812, -0.0008792586741037667, -0.013113094493746758, -0.6424337029457092, -0.06614013016223907, -0.18654340505599976, -0.03509325906634331, -1.4136996269226074, -0.84880131483078, -0.0002494739310350269, -0.013581021688878536, -0.16375106573104858, -0.0028410095255821943, -2.092881679534912, -0.0004182179400231689, -1.2535340785980225, -0.00010775939153973013, -0.0006653240998275578, -0.13333918154239655, -0.03791562840342522, -0.02123221382498741, -1.6987138986587524, -0.055443428456783295, -0.7197591066360474, -0.676496148109436, -0.0015518538421019912, -9.679325739853084e-05, -0.005395493470132351, -0.00045348849380388856, -0.040264930576086044, -0.10379765182733536, -7.748573807475623e-06, -6.6756979322235566e-06, -5.674201020156033e-05, -3.2305197237292305e-05, -0.13062840700149536, -0.7836789488792419, -1.9424591064453125, -0.014024398289620876, -0.09152084589004517, -0.18497514724731445, -0.0009494088008068502, -0.009556499309837818, -2.330920457839966, -0.041784971952438354, -0.6646009087562561, -0.6135038137435913, -0.012942713685333729, -0.23922984302043915, -0.12384261935949326, -0.9208280444145203, -1.464768886566162, -0.13327741622924805, -0.0008924792055040598, -0.1446278989315033, -0.0006361367995850742, -0.0004932855372317135, -0.010111300274729729, -0.09413225948810577, -0.19134917855262756, -0.12026279419660568, -6.723177648382261e-05, -5.876845170860179e-05, -0.0004067785630468279, -2.3841855067985307e-07, -3.576278118089249e-07, -0.019564161077141762, -0.1293780356645584, -0.6031675934791565, -1.7046782886609435e-05, -0.0022684813011437654, -0.9487362504005432, -2.7686970233917236, -0.24558761715888977, -0.0012746074935421348, -0.09276749193668365, -0.0001387499796692282, -0.0004932855372317135, -0.11031710356473923, -0.46221622824668884, -0.0033407374285161495, -0.0002980979916173965, -2.4312655925750732, -0.00916275754570961, -0.050402797758579254, -0.17814722657203674, -0.0006395916570909321, -0.11299740523099899, -0.007186515256762505, -2.5510462364763953e-05, -5.4238757002167404e-05, -1.5307509899139404, -1.6689286894688848e-06, -2.264974000354414e-06, -1.7881377516459906e-06, -1.0967194612021558e-05, -0.15958578884601593], "finish_reason": "stop"}], "metrics": {"energy": 840.3531256198879, "energy_per_token": 3.458243315308181, "time": 21.228134, "time_per_token": 0.08735857613168725}}
