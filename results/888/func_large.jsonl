{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    # Initialize an empty list to store the data frames\n    dfs = []\n\n    for file_name in csv_files:\n        file_path = os.path.join(data_dir, file_name)\n        dfs.append(pd.read_csv(file_path))\n\n    # Concatenate the data frames together\n    return pd.concat(dfs, axis=0, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " data", " frames", "\n", "    ", "d", "fs", " =", " []", "\n", "\n", "    ", "for", " file", "_", "name", " in", " c", "sv", "_", "files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", ")", "\n", "        ", "d", "fs", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", "))", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " data", " frames", " together", "\n", "    ", "return", " pd", ".", "concat", "(", "d", "fs", ",", " axis", "=", "0", ",", " ignore", "_", "index", "=", "True", ")"], "logprobs": [-0.855955183506012, -0.30145764350891113, -0.07918913662433624, -1.0728830375228426e-06, -2.8132995794294402e-05, -3.7788631743751466e-05, -0.020594686269760132, -0.04910387471318245, -0.006022757384926081, -0.09621328860521317, -0.004788360092788935, -7.331102824537084e-05, -9.870042413240299e-05, -0.029896322637796402, -0.02728334069252014, -0.6142088770866394, -0.0011370867723599076, -2.4266786575317383, -2.0830156803131104, -0.10011696070432663, -0.001955384388566017, -0.14238274097442627, -0.026221370324492455, -0.22104144096374512, -0.541300892829895, -2.175750494003296, -1.2967302799224854, -0.1271362453699112, -0.0006162413046695292, -0.6053549647331238, -8.594620157964528e-05, -0.030668772757053375, -0.003158226143568754, -0.0005165196489542723, -0.16095943748950958, -0.0004439560289029032, -2.8461451530456543, -0.8348339796066284, -2.3522250652313232, -0.06110863387584686, -0.0004003438516519964, -0.0022473097778856754, -3.576278118089249e-07, -5.602820692729438e-06, -1.311301275563892e-06, -0.0002113357331836596, -0.0021935468539595604, -0.029813826084136963, -1.2232258319854736, -0.011918170377612114, -0.00790597777813673, -0.0006322053959593177, -0.0035632471553981304, -4.768370445162873e-07, -0.00011359999916749075, -1.8715683836489916e-05, -0.0013723488664254546, -0.00025281094713136554, -0.0011594723910093307, -3.266281055402942e-05, -1.2278481335670222e-05, -0.00020632999076042324, -0.0034926861990243196, -7.510157047363464e-06, -1.9430925021879375e-05, -0.0008225633064284921, -0.019889207556843758, -0.19122275710105896, -1.4181928634643555, -0.00043811736395582557, -0.0007385863573290408, -0.0002618685248307884, -0.00012468514614738524, -0.005867163650691509, -3.576272320060525e-06, -0.0037928326055407524, -2.276871418871451e-05, -0.00011121608258690685, -0.00017987063620239496, -0.0010545651894062757, -0.0002227773511549458, -3.9934315282152966e-05, -0.08893585950136185, -0.026427119970321655, -0.013704613782465458, -0.002988755237311125, -0.25185489654541016, -0.2514279782772064, -0.0003777029050979763, -0.0042652590200304985, -0.009437944740056992, -0.47734975814819336, -0.11582311987876892, -0.04330920800566673, -3.1623802185058594, -0.18097472190856934, -0.0004231034545227885, -1.5365543365478516, -0.001312109874561429, -6.079655122448457e-06, -2.932505594799295e-05, -0.0009239218779839575, -0.00036125810584053397, -2.7418097943154862e-06, -0.2955251634120941, -1.704521656036377, -0.0008207766804844141, -0.002190929837524891, -0.1952439695596695, -0.008930503390729427, -4.172316494077677e-06, -6.9141146923357155e-06, -7.86750388215296e-05, -0.0007011815905570984, -0.2565537989139557], "finish_reason": "stop"}], "metrics": {"energy": 527.9893258342744, "energy_per_token": 4.59121152899369, "time": 14.1104555, "time_per_token": 0.12269961304347826}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    data = pd.concat([pd.read_csv(os.path.join(data_dir, file)) for file in csv_files], ignore_index=True)\n    return data", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "data", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", " for", " file", " in", " c", "sv", "_", "files", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "return", " data"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.8941913843154907, -2.6447346210479736, -1.1523933410644531, -2.3032631874084473, -0.00010680581908673048, -0.8333369493484497, -0.09136581420898438, -0.04406578093767166, -1.2874520507466514e-05, -0.0063849263824522495, -1.728519782773219e-05, -0.0002584123576525599, -0.0007641970878466964, -0.02205348014831543, -3.2186455882765586e-06, -0.0005610798834823072, -3.886147169396281e-05, -0.00086758635006845, -0.0003131137927994132, -0.0020666210912168026, -0.0002734287118073553, -3.576214658096433e-05, -0.0006221981020644307, -1.263006567955017, -0.06127021834254265, -0.022625982761383057, -0.0005185451591387391, -0.00016675988445058465, -0.005226875655353069, -1.2159273865108844e-05, -2.1457441107486375e-05, -8.344646857949556e-07, -0.18897651135921478, -0.0009776342194527388, -0.3158503770828247, -1.7762025890988298e-05, -3.0040289857424796e-05, -0.015856485813856125, -0.007463784422725439, -0.010416898876428604, -0.003836772171780467, -0.024329544976353645, -0.04993806779384613, -0.0034236647188663483], "finish_reason": "stop"}], "metrics": {"energy": 195.5999494495392, "energy_per_token": 3.3152533805006645, "time": 4.853408, "time_per_token": 0.08226115254237289}}
{"outputs": [{"text": "# Initialize an empty DataFrame to store the merged data\n    data = pd.DataFrame()\n    \n    # Check if the CSV file list is not empty\n    if csv_files:\n        # Iterate over the CSV files\n        for filename in csv_files:\n            # Construct the file path\n            filepath = os.path.join(data_dir, filename)\n            # Read the CSV file into a DataFrame\n            df = pd.read_csv(filepath)\n            # Append the data of the current DataFrame to the existing data\n            data = pd.concat([data, df], ignore_index=True)\n\n    return data", "tokens": ["#", " Initialize", " an", " empty", " Data", "Frame", " to", " store", " the", " merged", " data", "\n", "    ", "data", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "\n", "    ", "#", " Check", " if", " the", " CS", "V", " file", " list", " is", " not", " empty", "\n", "    ", "if", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Iter", "ate", " over", " the", " CS", "V", " files", "\n", "        ", "for", " filename", " in", " c", "sv", "_", "files", ":", "\n", "            ", "#", " Construct", " the", " file", " path", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", ")", "\n", "            ", "#", " Read", " the", " CS", "V", " file", " into", " a", " Data", "Frame", "\n", "            ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "path", ")", "\n", "            ", "#", " App", "end", " the", " data", " of", " the", " current", " Data", "Frame", " to", " the", " existing", " data", "\n", "            ", "data", " =", " pd", ".", "concat", "([", "data", ",", " df", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-1.445582389831543, -2.471710205078125, -0.07175643742084503, -0.002063408959656954, -2.237306594848633, -0.001794396317563951, -0.7781012058258057, -0.35287243127822876, -0.061038654297590256, -0.3206932246685028, -0.01264800876379013, -0.2627343535423279, -0.0013010379625484347, -2.874901294708252, -0.3161591589450836, -0.03093694895505905, -5.8412379075889476e-06, -6.615896563744172e-05, -0.022353237494826317, -0.0036696731112897396, -1.143669605255127, -1.304311990737915, -0.0009682258241809905, -0.046079374849796295, -1.3088796138763428, -0.011324179358780384, -0.14491206407546997, -2.716872215270996, -0.00027307120035402477, -1.7114591598510742, -0.016966786235570908, -0.0026179824490100145, -1.2225862741470337, -0.0006876011611893773, -0.041136160492897034, -0.0001438752660760656, -0.0033814890775829554, -0.13754892349243164, -1.0728830375228426e-06, -1.5020257706055418e-05, -5.07818695041351e-05, -0.011129326187074184, -0.006724703591316938, -0.015387391671538353, -0.04929975047707558, -0.8172137141227722, -0.0006523388437926769, -0.5322343707084656, -0.7696408033370972, -0.5205880999565125, -2.3245540432981215e-05, -0.26267513632774353, -0.516388475894928, -0.00023958197562023997, -0.0016769407084211707, -2.695530414581299, -0.0001731960946926847, -0.00550646660849452, -2.264974000354414e-06, -8.821448318485636e-06, -7.986990567587782e-06, -0.00029702542815357447, -0.0027586284559220076, -0.00471646199002862, -0.08620977401733398, -0.421509712934494, -0.00989555474370718, -1.5421746969223022, -0.009198076091706753, -0.636563241481781, -0.00025090406415984035, -0.01839623600244522, -0.8632655143737793, -0.0005061537376604974, -0.00365922087803483, -4.768370445162873e-07, -9.476689592702314e-05, -9.298280929215252e-06, -0.002501931507140398, -0.0002499506517779082, -0.0007641970878466964, -4.792098479811102e-05, -6.437280717364047e-06, -0.00019107422849629074, -0.0025978884659707546, -0.0010272946674376726, -0.0029762755148112774, -0.06659115105867386, -0.3951592445373535, -0.21800187230110168, -0.09377545118331909, -0.11952642351388931, -5.8412379075889476e-06, -0.03893831744790077, -0.3868851959705353, -0.002200802555307746, -0.04107392206788063, -0.00041500062798149884, -0.04522942006587982, -0.00026127262390218675, -0.35445860028266907, -0.014809670858085155, -0.0001102625101339072, -4.291525328881107e-06, -0.0012134101707488298, -2.7418097943154862e-06, -0.00011634149996098131, -8.21318244561553e-05, -0.0023229538928717375, -3.790783375734463e-05, -0.07521601021289825, -0.0023186723701655865, -0.010387050919234753, -0.003863728605210781, -1.5497921705245972, -0.00036149643710814416, -0.10223659873008728, -1.0641722679138184, -2.7945923805236816, -0.4791739583015442, -0.09907618165016174, -1.0640954971313477, -0.000816012208815664, -0.027621658518910408, -0.002508233767002821, -2.0651071071624756, -0.7280423641204834, -0.015858011320233345, -0.00022313489171210676, -0.0036340404767543077, -0.00044264530879445374, -0.02472701482474804, -1.311301275563892e-06, -5.07818695041351e-05, -0.0008061258122324944, -0.006240406539291143, -0.0003084660565946251, -0.0011931689223274589, -0.15554258227348328, -0.00010477947944309562, -0.2837153971195221, -1.6689286894688848e-06, -2.9205850296420977e-05, -0.002837443258613348, -0.0034692834597080946, -0.01800760067999363, -0.004433445632457733, -1.1597363948822021, -0.015911631286144257, -0.3666289150714874, -0.001741203828714788, -0.46516016125679016, -0.10975935310125351, -1.5440845489501953], "finish_reason": "stop"}], "metrics": {"energy": 528.7016450023656, "energy_per_token": 3.433127564950426, "time": 12.8416, "time_per_token": 0.08338701298701298}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    else:\n        data_list = []\n        for file in csv_files:\n            data = pd.read_csv(os.path.join(data_dir, file))\n            data_list.append(data)\n        return pd.concat(data_list, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "data", "_", "list", " =", " []", "\n", "        ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "            ", "data", " =", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", "\n", "            ", "data", "_", "list", ".", "append", "(", "data", ")", "\n", "        ", "return", " pd", ".", "concat", "(", "data", "_", "list", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "def"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.8941913843154907, -1.0241539478302002, -0.0007782529573887587, -0.001595177804119885, -0.006520898547023535, -2.2245023250579834, -1.2038133144378662, -0.6730325222015381, -0.007222021464258432, -0.3567790985107422, -0.011260764673352242, -0.03650222346186638, -0.015112075954675674, -0.7222428917884827, -0.14506632089614868, -0.004140495788305998, -7.152555099310121e-07, -1.7881233361549675e-05, -3.576272320060525e-06, -0.0004934046883136034, -0.0014402027009055018, -0.004816477652639151, -1.589046597480774, -0.5472980737686157, -0.0029451351147145033, -4.005352093372494e-05, -0.001095171901397407, -5.245195097813848e-06, -0.0002683041093405336, -0.000993711524643004, -0.028690021485090256, -6.198863957251888e-06, -0.0005384425749070942, -2.634490556374658e-05, -0.0013523490633815527, -0.00034278715611435473, -0.0013684204313904047, -0.0001081169830285944, -0.00011228884250158444, -0.0006112375995144248, -0.023670239374041557, -0.04891635850071907, -0.007104846648871899, -0.0014492495683953166, -0.0056226435117423534, -0.02283608727157116, -0.00010859376925509423, -0.0006210067658685148, -9.691245941212401e-05, -0.00016258825780823827, -0.0005874100024811924, -0.0017802356742322445, -0.0007801587926223874, -0.15529654920101166, -0.4116334915161133, -0.0019319456769153476, -1.3112935448589269e-05, -0.00017915551143232733, -0.0012950851814821362, -0.0017525089206174016, -0.00010918975021922961, -7.664863369427621e-05, -0.3281703591346741, -0.49617674946784973, -1.1801649634435307e-05, -0.0002053765201708302, -0.009372284635901451, -0.004570395220071077, -0.12717413902282715, -0.11666947603225708, -0.08061489462852478, -1.2068451642990112], "finish_reason": "stop"}], "metrics": {"energy": 313.0169158382415, "energy_per_token": 3.5978955843476035, "time": 7.1635156, "time_per_token": 0.08233925977011494}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n    else:\n        return pd.concat([pd.read_csv(os.path.join(data_dir, csv)) for csv in csv_files])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "))", " for", " c", "sv", " in", " c", "sv", "_", "files", "])", "\n", "\n", "def"], "logprobs": [-0.9144620895385742, -1.6842260360717773, -0.00047386385267600417, -0.008762244135141373, -7.068861305015162e-05, -0.00022098960471339524, -0.013527864590287209, -0.11487678438425064, -0.0007482351502403617, -0.0006962973857298493, -0.00396727304905653, -0.03497286140918732, -0.009074989706277847, -0.1345304250717163, -0.009337209165096283, -0.00010156115604331717, -0.0001438752660760656, -0.052017293870449066, -0.02035035379230976, -0.5915647149085999, -0.5561766028404236, -0.00046826363541185856, -0.001257344032637775, -0.00590935256332159, -2.124051094055176, -0.007334094028919935, -5.1973900554003194e-05, -0.011240136809647083, -0.1395784318447113, -0.021776610985398293, -1.7523612768854946e-05, -0.004911145195364952, -2.002696055569686e-05, -0.00030012393835932016, -0.0008052920456975698, -0.020611969754099846, -6.198863957251888e-06, -0.0005832401220686734, -1.2278481335670222e-05, -0.0007722970913164318, -0.00032240914879366755, -0.0020303367637097836, -0.00021824838768225163, -7.86750388215296e-05, -0.0008753282018005848, -1.0880436897277832, -0.01627258211374283, -2.9454801082611084, -0.028630942106246948, -0.0012879418209195137, -9.417489309271332e-06, -0.0001935771433636546, -0.0039963629096746445, -2.622600959512056e-06, -0.0001896439935080707, -0.00014911970356479287, -1.5362229347229004, -0.4687247574329376, -0.10939183086156845, -1.0314743518829346], "finish_reason": "stop"}], "metrics": {"energy": 186.40495619010926, "energy_per_token": 3.1067492698351544, "time": 4.850892, "time_per_token": 0.0808482}}
{"outputs": [{"text": "try:\n        if len(csv_files) == 0:\n            return pd.DataFrame()\n        else:\n            return pd.concat([pd.read_csv(os.path.join(data_dir, file)) for file in csv_files], ignore_index=True)\n    except Exception as e:\n        print(f\"Error concatenating CSV files: {e}\")\n        return None", "tokens": ["try", ":", "\n", "        ", "if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "            ", "return", " pd", ".", "DataFrame", "()", "\n", "        ", "else", ":", "\n", "            ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", " for", " file", " in", " c", "sv", "_", "files", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", " concaten", "ating", " CS", "V", " files", ":", " {", "e", "}\"", ")", "\n", "        ", "return", " None", "\n", "\n", "def"], "logprobs": [-3.478337287902832, -0.0008644896443001926, -0.004823832772672176, -0.033605195581912994, -0.7669322490692139, -1.38396155834198, -0.0005664412747137249, -0.006969072390347719, -5.9126061387360096e-05, -9.464769391342998e-05, -0.028369562700390816, -0.27410101890563965, -0.001106127048842609, -0.003608265658840537, -0.008250085636973381, -0.07718092948198318, -0.00603282917290926, -0.28632399439811707, -0.013180744834244251, -7.879423355916515e-05, -0.00021491125517059118, -0.05869915336370468, -0.032199300825595856, -0.34121984243392944, -0.34431591629981995, -0.0005131834768690169, -0.001566136721521616, -0.004332323558628559, -2.0813817977905273, -0.011933837085962296, -4.0411134250462055e-05, -0.004466676153242588, -0.13476161658763885, -0.016985774040222168, -1.9430925021879375e-05, -0.010465857572853565, -3.4689302992774174e-05, -0.0003275334893260151, -0.001082311267964542, -0.023336755111813545, -8.4638240878121e-06, -0.000687958556227386, -1.3947389561508317e-05, -0.001061114715412259, -0.0003829461056739092, -0.0029194613453000784, -0.0001358893496217206, -6.580135959666222e-05, -0.0011193446116521955, -1.357819676399231, -0.067621149122715, -0.02333209663629532, -0.0010349161457270384, -0.00025281094713136554, -0.00409882515668869, -2.8013790142722428e-05, -4.362964682513848e-05, -1.0371154530730564e-05, -0.21153168380260468, -0.0010314626852050424, -0.3868691623210907, -1.5139465176616795e-05, -1.8596476365928538e-05, -0.030014675110578537, -0.010356966406106949, -0.017507066950201988, -0.01293082907795906, -0.08380472660064697, -0.006029393058270216, -0.1934242844581604, -0.012956246733665466, -0.13430917263031006, -0.0004919749335385859, -0.004449230153113604, -0.005769978743046522, -0.9883164167404175, -0.02388675883412361, -0.16065828502178192, -0.07378894835710526, -0.9038833379745483, -3.8848085403442383, -0.009164766408503056, -0.8839357495307922, -0.029553450644016266, -0.012948480434715748, -0.10727640241384506, -0.0015479261055588722, -0.1333301067352295, -0.009383858181536198, -0.051297858357429504, -0.0632627010345459, -0.19385714828968048, -0.4860761761665344, -1.2490838766098022, -0.6732437014579773, -0.058487679809331894, -1.1941320896148682], "finish_reason": "stop"}], "metrics": {"energy": 346.54788424873345, "energy_per_token": 3.5726586005024066, "time": 8.0031, "time_per_token": 0.08250618556701031}}
{"outputs": [{"text": "# Initialize an empty DataFrame to store the merged data\n    merged_data = pd.DataFrame()\n\n    # Check if the CSV files list is not empty\n    if csv_files:\n        # Iterate over each CSV file in the list\n        for csv_file in csv_files:\n            # Construct the full path to the CSV file\n            file_path = os.path.join(data_dir, csv_file)\n\n            # Read the CSV file into a DataFrame\n            df = pd.read_csv(file_path)\n\n            # Concatenate the current DataFrame to the merged_data DataFrame\n            merged_data = pd.concat([merged_data, df], ignore_index=True)\n\n    # Return the merged DataFrame\n    return merged_data", "tokens": ["#", " Initialize", " an", " empty", " Data", "Frame", " to", " store", " the", " merged", " data", "\n", "    ", "merged", "_", "data", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Check", " if", " the", " CS", "V", " files", " list", " is", " not", " empty", "\n", "    ", "if", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Iter", "ate", " over", " each", " CS", "V", " file", " in", " the", " list", "\n", "        ", "for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", ":", "\n", "            ", "#", " Construct", " the", " full", " path", " to", " the", " CS", "V", " file", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", ")", "\n", "\n", "            ", "#", " Read", " the", " CS", "V", " file", " into", " a", " Data", "Frame", "\n", "            ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "\n", "            ", "#", " Con", "cat", "en", "ate", " the", " current", " Data", "Frame", " to", " the", " merged", "_", "data", " Data", "Frame", "\n", "            ", "merged", "_", "data", " =", " pd", ".", "concat", "([", "merged", "_", "data", ",", " df", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "#", " Return", " the", " merged", " Data", "Frame", "\n", "    ", "return", " merged", "_", "data", "\n", "\n", "#"], "logprobs": [-1.445582389831543, -2.471710205078125, -0.07175643742084503, -0.002063408959656954, -2.237306594848633, -0.001794396317563951, -0.7781012058258057, -0.35287243127822876, -0.061038654297590256, -0.3206932246685028, -0.01264800876379013, -0.2627343535423279, -0.0013010379625484347, -1.423122763633728, -0.00983157753944397, -0.6099190711975098, -0.053414832800626755, -0.011303316801786423, -6.079655122448457e-06, -5.6980417866725475e-05, -0.017243700101971626, -0.002430344233289361, -0.15133152902126312, -0.000979420612566173, -0.06066950038075447, -1.1790966987609863, -0.011364017613232136, -0.13013890385627747, -2.7261910438537598, -0.00020549570035655051, -0.29784634709358215, -0.024647463113069534, -0.0028041587211191654, -0.7646337747573853, -0.0008597253472544253, -0.02681122161448002, -0.0001858300092862919, -0.0024700628127902746, -0.06866545230150223, -5.960462772236497e-07, -4.529942543740617e-06, -4.291525328881107e-06, -0.005480977240949869, -0.0017753568245097995, -0.011488000862300396, -0.04590074345469475, -0.5355162620544434, -0.0003860443539451808, -0.46200236678123474, -0.5894973874092102, -0.4586668908596039, -1.1920928244535389e-07, -0.005128087010234594, -0.5329812169075012, -0.00047052756417542696, -0.03308796137571335, -0.018687497824430466, -9.691245941212401e-05, -0.0034359011333435774, -0.9733359217643738, -0.0002967870968859643, -0.1264234036207199, -0.009659456089138985, -0.0008783058729022741, -0.0026689881924539804, -7.152555099310121e-07, -5.602820692729438e-06, -6.079655122448457e-06, -0.0007859955076128244, -0.0002329078270122409, -0.002728075487539172, -0.036103084683418274, -0.2879980206489563, -0.0034789058845490217, -0.3104202151298523, -0.792067289352417, -0.3359178304672241, -0.004057983867824078, -0.047471363097429276, -1.6689286894688848e-06, -0.00036376056959852576, -0.13353654742240906, -0.00013934595335740596, -0.6130423545837402, -0.021434910595417023, -0.0005565524916164577, -0.00013314791431184858, -0.001077548018656671, -1.1920928244535389e-07, -6.758938252460212e-05, -1.6927575416048057e-05, -0.0011207734933122993, -0.0001517419150331989, -0.000747758662328124, -2.3841574147809297e-05, -3.576272320060525e-06, -0.00016008525562938303, -0.0006481691962108016, -2.3841855067985307e-07, -1.6689286894688848e-06, -5.245195097813848e-06, -0.0007379907765425742, -0.0010553987231105566, -0.38325557112693787, -0.0006718761869706213, -0.0033208958338946104, -0.3456130027770996, -0.024210983887314796, -0.01365816593170166, -1.4305104514278355e-06, -0.022123558446764946, -0.3025222420692444, -0.0010870745172724128, -0.08681797236204147, -0.0003644755925051868, -0.12893393635749817, -0.00010418349120300263, -0.23277509212493896, -0.006354010198265314, -9.667406266089529e-05, -3.576272320060525e-06, -0.0012954423436895013, -8.344646857949556e-07, -0.00014840454969089478, -3.886147169396281e-05, -0.0006727101281285286, -1.3470558769768104e-05, -1.1920928244535389e-07, -0.03884922340512276, -0.0008278042078018188, -0.0032001733779907227, -0.0005015069036744535, -0.0004950728034600616, -0.6405405402183533, -0.00012814177898690104, -0.000259723310591653, -0.0001311216183239594, -0.05751091241836548, -0.36635440587997437, -0.019085342064499855, -5.519237674889155e-05, -0.7996546030044556, -0.002273119753226638, -0.06414230912923813, -0.5029162168502808, -0.0003797286772169173, -0.7710562348365784, -0.00014649749209638685, -0.030808070674538612, -0.00011896379146492109, -0.054025799036026, -5.960462772236497e-07, -1.0013530300057027e-05, -3.135155202471651e-05, -7.10462118149735e-05, -5.960462772236497e-07, -8.4638240878121e-06, -0.00025149996508844197, -0.001279250718653202, -5.483612312673358e-06, -7.629365427419543e-06, -7.414542778860778e-05, -0.000144709600135684, -0.08075796067714691, -2.586808113846928e-05, -0.11488762497901917, -1.6689286894688848e-06, -5.566918844124302e-05, -0.00046564225340262055, -0.0020961235277354717, -0.014864874072372913, -0.0012544866185635328, -0.028520768508315086, -0.05657171830534935, -0.8731547594070435, -0.09413204342126846, -0.0015404274454340339, -0.025699952617287636, -0.18190675973892212, -0.00038092033355496824, -0.11444150656461716, -0.0003798478574026376, -0.005784083157777786, -0.0006289887824095786, -2.825220326485578e-05, -3.8980677345534787e-05, -0.35115185379981995, -0.06192301958799362, -1.3179315328598022], "finish_reason": "stop"}], "metrics": {"energy": 647.9368541412357, "energy_per_token": 3.4282373234986014, "time": 15.773417, "time_per_token": 0.08345723280423281}}
{"outputs": [{"text": "# Initialize an empty list to store DataFrames\n    dfs = []\n\n    # Iterate over the list of CSV files\n    for file in csv_files:\n        # Create the full path of the CSV file\n        file_path = os.path.join(data_dir, file)\n\n        # Read the CSV file as a DataFrame and append it to the list\n        dfs.append(pd.read_csv(file_path))\n\n    # Concatenate the DataFrames in the list, vertically, into a single DataFrame\n    merged_df = pd.concat(dfs, axis=0)\n\n    return merged_df", "tokens": ["#", " Initialize", " an", " empty", " list", " to", " store", " Data", "F", "rames", "\n", "    ", "d", "fs", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " list", " of", " CS", "V", " files", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Create", " the", " full", " path", " of", " the", " CS", "V", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "\n", "        ", "#", " Read", " the", " CS", "V", " file", " as", " a", " Data", "Frame", " and", " append", " it", " to", " the", " list", "\n", "        ", "d", "fs", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", "))", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " in", " the", " list", ",", " vertically", ",", " into", " a", " single", " Data", "Frame", "\n", "    ", "merged", "_", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " axis", "=", "0", ")", "\n", "\n", "    ", "return", " merged", "_", "df", "\n", "\n", "if"], "logprobs": [-1.445582389831543, -2.471710205078125, -0.07175643742084503, -0.002063408959656954, -0.15176774561405182, -0.03165142610669136, -0.24138961732387543, -1.5081114768981934, -0.01108983252197504, -2.3841830625315197e-06, -0.13685625791549683, -0.0007134514744393528, -0.536302387714386, -0.0002460177056491375, -0.057546816766262054, -0.0036868948955088854, -0.0007167869480326772, -0.32423317432403564, -0.001039560534991324, -0.04295297712087631, -0.9245943427085876, -0.001885542762465775, -0.3365476727485657, -0.6239089965820312, -1.0465986728668213, -0.0018390186596661806, -0.347817063331604, -0.0006576997111551464, -0.13895927369594574, -0.08377260714769363, -0.00011455356434453279, -0.006627128459513187, -0.7006154656410217, -0.10816361755132675, -0.0012507957872003317, -1.1920922133867862e-06, -2.109982233378105e-05, -9.381330892210826e-05, -0.0002775999018922448, -0.000979896984063089, -0.03444734960794449, -0.06551520526409149, -2.8300909996032715, -0.04816117882728577, -0.1517920196056366, -0.5487076640129089, -1.8368818759918213, -0.010408523492515087, -0.1939207762479782, -5.364403477869928e-06, -0.0011360150529071689, -0.31519171595573425, -0.00029905137489549816, -0.45235675573349, -0.22600428760051727, -0.01756376214325428, -0.0006996329175308347, -0.004261935595422983, -1.6689286894688848e-06, -0.00014184899919200689, -1.5735502529423684e-05, -0.0016105312388390303, -0.00022289653134066612, -0.0010905277449637651, -4.2676016164477915e-05, -2.2291887944447808e-05, -0.0003033416287507862, -0.0038314282428473234, -0.0011456600623205304, -0.002501455834135413, -0.6088783740997314, -0.0016815820708870888, -0.0021972341928631067, -0.43045884370803833, -0.04732970520853996, -0.0186415147036314, -1.4424220353248529e-05, -0.016693195328116417, -1.9217941761016846, -0.00535174086689949, -0.07088872790336609, -0.00035577642847783864, -0.48287102580070496, -0.09500118345022202, -0.26171258091926575, -0.001320443581789732, -0.003950649406760931, -0.031529802829027176, -0.2996440827846527, -8.082063141046092e-05, -0.2568126618862152, -8.856858039507642e-05, -0.00029666791670024395, -0.00010275312524754554, -0.00018416139937471598, -0.0029965995345264673, -1.4185804502631072e-05, -0.004582380410283804, -2.1457441107486375e-05, -0.00035637227119877934, -8.010543388081715e-05, -0.0009497660794295371, -0.0010668307077139616, -4.0531076592742465e-06, -0.03488778695464134, -0.001966329989954829, -0.004728919826447964, -0.0026944305282086134, -0.004434395115822554, -0.1215737983584404, -0.00015722469834145159, -9.357491217087954e-05, -0.0015495923580601811, -0.5593385696411133, -0.096514031291008, -0.002045445377007127, -5.960462772236497e-07, -1.1203097105026245, -0.011104214936494827, -0.024019092321395874, -3.3199033737182617, -2.5111522674560547, -1.2235321998596191, -2.4272687435150146, -0.06295828521251678, -0.02046225033700466, -0.0048079355619847775, -0.0005728749092668295, -0.07968263328075409, -0.0003830652858596295, -1.1011221408843994, -0.045786987990140915, -0.17191581428050995, -0.0005229535745456815, -0.00020811776630580425, -5.960462772236497e-07, -5.722029527532868e-06, -0.0018199799815192819, -0.0016250512562692165, 0.0, -0.015326464548707008, -1.6158634424209595, -0.002218644367530942, -0.008041270077228546, -0.5817094445228577, -0.059040606021881104, -0.035631775856018066, -0.0005266471416689456, -0.4464578330516815, -0.0016703951405361295, -8.940656698541716e-06, -1.168244216387393e-05, -0.3293250799179077, -0.033291615545749664, -1.415122628211975], "finish_reason": "stop"}], "metrics": {"energy": 550.9807245769501, "energy_per_token": 3.5547143521093556, "time": 12.830171, "time_per_token": 0.08277529677419355}}
{"outputs": [{"text": "data = []\n    for f in csv_files:\n        df = pd.read_csv(os.path.join(data_dir, f))\n        data.append(df)\n    return pd.concat(data, axis=0, sort=False, ignore_index=True)", "tokens": ["data", " =", " []", "\n", "    ", "for", " f", " in", " c", "sv", "_", "files", ":", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", "\n", "        ", "data", ".", "append", "(", "df", ")", "\n", "    ", "return", " pd", ".", "concat", "(", "data", ",", " axis", "=", "0", ",", " sort", "=", "False", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "def"], "logprobs": [-3.121598243713379, -0.7611157894134521, -0.32183295488357544, -0.03602868691086769, -0.18113644421100616, -0.24015726149082184, -2.7619476318359375, -0.23162749409675598, -0.010850477032363415, -5.125986263010418e-06, -8.940297266235575e-05, -0.00020323118951637298, -0.0012226970866322517, -0.005630111321806908, -0.016328994184732437, -1.38349449634552, -0.013442948460578918, -0.0016031521372497082, -6.246371776796877e-05, -0.0035088418517261744, -4.768360213347478e-06, -0.0004797023138962686, -0.00104301399551332, -0.041124261915683746, -6.794906312279636e-06, -0.001423299196176231, -4.3987260141875595e-05, -0.0018870895728468895, -0.0005769256968051195, -0.0026638756971806288, -0.00028046013903804123, -8.546940807718784e-05, -0.0007858763565309346, -0.045256081968545914, -0.058583471924066544, -0.014726507477462292, -0.003270517336204648, -0.0390966460108757, -0.0034468306694179773, -0.0001538873475510627, -0.00019262365822214633, -0.0005772831500507891, -0.0045730057172477245, -0.002514179330319166, -0.31902801990509033, -0.4873996675014496, -0.004275704734027386, -6.198863957251888e-06, -0.003311984706670046, -0.002068405505269766, -0.0040458738803863525, -0.5568040013313293, -1.0081030130386353, -0.009787782095372677, -0.006548611912876368, -0.15611465275287628, -2.9692020416259766, -0.00043084874050691724, -0.04966960847377777, -2.5883026123046875, -0.0007127366843633354, -2.145764938177308e-06, -3.576278118089249e-07, -0.0013579442165791988, -0.007676861248910427, -0.20216000080108643, -0.23491095006465912, -0.07202968001365662, -0.8783458471298218], "finish_reason": "stop"}], "metrics": {"energy": 238.24350766372677, "energy_per_token": 3.4528044588945908, "time": 5.6938434, "time_per_token": 0.0825194695652174}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    csv_list = [pd.read_csv(os.path.join(data_dir, csv)) for csv in csv_files]\n    csv_merged = pd.concat(csv_list)\n\n    return csv_merged", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "csv", "_", "list", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "))", " for", " c", "sv", " in", " c", "sv", "_", "files", "]", "\n", "    ", "csv", "_", "merged", " =", " pd", ".", "concat", "(", "csv", "_", "list", ")", "\n", "\n", "    ", "return", " c", "sv", "_", "merged", "\n", "\n", "#"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -2.9737424850463867, -0.0011306566884741187, -2.665773868560791, -0.006927283015102148, -0.37322160601615906, -0.9359190464019775, -1.0132738680113107e-05, -0.004129098728299141, -3.0040289857424796e-05, -0.00013791563105769455, -0.0006405447493307292, -0.016477692872285843, -2.622600959512056e-06, -0.0005782362422905862, -5.149708886165172e-05, -0.0007103541865944862, -0.0003106111544184387, -0.002144301077350974, -0.00018630675913300365, -7.533743337262422e-05, -0.0005266471416689456, -1.1956135034561157, -0.014662133529782295, -0.8211430907249451, -0.010115194134414196, -0.00042167355422861874, -1.4185804502631072e-05, -0.0002809368306770921, -0.0023756397422403097, -1.9073468138230965e-06, -4.6967357775429264e-05, -0.0003711488388944417, -0.004866896662861109, -0.0033538066782057285, -0.2276034653186798, -3.6836206912994385, -0.02853003703057766, -0.5769608616828918, -0.008569137193262577, -0.0037973453290760517, -7.986990567587782e-06, -0.0007784912013448775, -0.0071886456571519375, -0.004621301311999559, -0.00022313489171210676, -0.0005103239673189819, -1.4690371751785278, -0.05297818407416344, -0.5482457876205444, -0.0011076750233769417, -0.03411179408431053, -0.005217625759541988, -5.960462772236497e-07, -3.4450891689630225e-05, -0.00020716428116429597, -0.48538529872894287, -0.04274488985538483, -2.0413308143615723], "finish_reason": "stop"}], "metrics": {"energy": 278.79065558624274, "energy_per_token": 3.717208741149903, "time": 6.109724, "time_per_token": 0.08146298666666667}}
{"outputs": [{"text": "# Check for an empty list\n    if len(csv_files) == 0:\n        return pd.DataFrame()\n\n    # Read and concatenate data from the specified CSV files\n    data = pd.concat([pd.read_csv(os.path.join(data_dir, file)) for file in csv_files], axis=0)\n    return data\n\n\"\"\"\n    - The task_func function takes two parameters: data_dir and csv_files.\n    - It uses the os.path.join function to create the file paths for each CSV file,\n        including the data_dir.\n    - The pd.concat function is used to concatenate the data from each file along\n        the rows (axis=0).\n    - If an empty list of csv_files is provided, the function will return an empty DataFrame.\n\"\"\"", "tokens": ["#", " Check", " for", " an", " empty", " list", "\n", "    ", "if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Read", " and", " concaten", "ate", " data", " from", " the", " specified", " CS", "V", " files", "\n", "    ", "data", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", " for", " file", " in", " c", "sv", "_", "files", "]", ",", " axis", "=", "0", ")", "\n", "    ", "return", " data", "\n", "\n", "\"", "\"", "\"", "\n", "    ", "-", " The", " task", "_", "func", " function", " takes", " two", " parameters", ":", " data", "_", "dir", " and", " c", "sv", "_", "files", ".", "\n", "    ", "-", " It", " uses", " the", " os", ".", "path", ".", "join", " function", " to", " create", " the", " file", " paths", " for", " each", " CS", "V", " file", ",", "\n", "        ", "including", " the", " data", "_", "dir", ".", "\n", "    ", "-", " The", " pd", ".", "concat", " function", " is", " used", " to", " concaten", "ate", " the", " data", " from", " each", " file", " along", "\n", "        ", "the", " rows", " (", "axis", "=", "0", ")", ".", "\n", "    ", "-", " If", " an", " empty", " list", " of", " c", "sv", "_", "files", " is", " provided", ",", " the", " function", " will", " return", " an", " empty", " Data", "Frame", ".", "\n", "\"", "\"", "\"", "\n", "\n", "#"], "logprobs": [-1.445582389831543, -1.104608416557312, -2.636665105819702, -0.89151930809021, -0.00408101687207818, -0.06425455212593079, -1.5143496990203857, -0.0011626873165369034, -0.01620185747742653, -1.89280366897583, -0.00046302087139338255, -0.006765080615878105, -3.0278701160568744e-05, -6.103329360485077e-05, -0.004741733893752098, -0.05993560701608658, -0.0008450751192867756, -0.00019035911827813834, -0.003385766176506877, -0.006689653266221285, -0.011371324770152569, -0.39708393812179565, -0.01074292603880167, -0.00034517052699811757, -0.00018809456378221512, -0.03770614415407181, -0.03634210303425789, -0.467400461435318, -0.0018672188743948936, -0.17045772075653076, -2.8677799701690674, -3.607048273086548, -0.9091459512710571, -0.0011024356354027987, -1.820308804512024, -0.15144720673561096, -2.3725290298461914, -1.0163695812225342, -0.4996328055858612, -0.005004142876714468, -0.0035992383491247892, -0.08559813350439072, -0.0007977878558449447, -1.7711955308914185, -0.8929181694984436, -1.218184232711792, -2.4437606043647975e-05, -0.23811903595924377, -0.14820414781570435, -0.018012868240475655, -3.576272320060525e-06, -0.004721326753497124, -0.0006155265145935118, -0.000277123210253194, -0.0006020640721544623, -0.019321564584970474, -7.152555099310121e-07, -0.000580499938223511, -2.634490556374658e-05, -0.000655793643090874, -0.0002628219372127205, -0.0016553997993469238, -0.0002329078270122409, -0.00011121608258690685, -0.0004303721070755273, -1.0886952877044678, -0.047925762832164764, -0.027578286826610565, -0.00036090059438720345, -0.00014065706636756659, -0.0033649748656898737, -1.8596476365928538e-05, -3.099393507000059e-05, -2.264974000354414e-06, -0.3696328401565552, -0.0007801587926223874, -1.9400599002838135, -0.005245730746537447, -0.0074382261373102665, -0.35461556911468506, -0.010658127255737782, -1.3170247077941895, -0.10898377001285553, -0.005455960985273123, -0.5089336037635803, -0.05680961161851883, -3.0891880989074707, -0.0036311899311840534, -0.0018574618734419346, -0.1750323623418808, -3.9156486988067627, -3.8925247192382812, -1.7433617115020752, -2.564795732498169, -0.0623379722237587, -0.014938277192413807, -1.429685115814209, -0.361636221408844, -0.1776071935892105, -0.6117501854896545, -0.13227060437202454, -0.23343303799629211, -0.0001472126314183697, -0.00120698066893965, -0.9869365692138672, -0.0042349896393716335, -7.950943836476654e-05, -0.00020037073409184813, -0.0022741903085261583, -0.1343725323677063, -0.3544120192527771, -0.07121039181947708, -0.012167632579803467, -1.962458848953247, -2.7287213802337646, -0.33789294958114624, -0.6596620082855225, -0.16815412044525146, -0.000756216119043529, -0.0024227334652096033, -0.00033361115492880344, -0.7490698099136353, -0.2826731503009796, -1.6034091711044312, -0.3877336382865906, -2.9152133464813232, -0.9987277984619141, -0.409362256526947, -0.45397233963012695, -0.209284245967865, -1.1086402082582936e-05, -0.007437871303409338, -2.0193824768066406, -2.4608771800994873, -1.477423906326294, -3.5985918045043945, -0.05509950593113899, -1.935524344444275, -0.34644973278045654, -0.0025372477248311043, -1.8633966445922852, -0.28394004702568054, -0.018951887264847755, -0.0008596062543801963, -0.2686190605163574, -0.31521284580230713, -0.0005868143052794039, -0.7894546389579773, -0.09894143790006638, -0.30695322155952454, -0.13751421868801117, -0.02108468860387802, -0.3120981454849243, -4.8993817472364753e-05, -0.07952035963535309, -0.04995054379105568, -0.03742048516869545, -0.9299550652503967, -0.653816819190979, -0.45668014883995056, -2.3772146701812744, -0.012108511291444302, -0.04228435829281807, -0.3387366831302643, -0.03927156701683998, -0.053338777273893356, -0.02104593627154827, -0.0004724340105894953, -0.01118437945842743, -0.44015243649482727, -0.01709066331386566, -0.05487734079360962, -0.002020343439653516, -0.7436522245407104, -0.691760778427124, -0.0001110968878492713, -0.013036968186497688, -0.08969836682081223, -1.6768720149993896, -7.986990567587782e-06, -0.006000835914164782, -0.000918681500479579, -0.0009283285471610725, -0.6761399507522583, -0.009422711096704006, -1.0491642951965332, -0.04183778911828995, -0.8835577368736267, -0.3938722312450409, -0.014680694788694382, -0.049450889229774475, -0.7078104615211487, -6.270212179515511e-05, -0.1506103128194809, -0.0030852595809847116, -0.8484061360359192, -0.00024101213784888387, -2.1576648578047752e-05, -0.8320924639701843, -0.07073824107646942, -0.9794400334358215], "finish_reason": "stop"}], "metrics": {"energy": 671.3626590013498, "energy_per_token": 3.340112731349999, "time": 16.8182, "time_per_token": 0.08367263681592041}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    result = pd.DataFrame()\n    for csv in csv_files:\n        csv_path = os.path.join(data_dir, csv)\n        df = pd.read_csv(csv_path)\n        result = pd.concat([result, df], axis=0, ignore_index=True)\n\n    return result", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "result", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " c", "sv", " in", " c", "sv", "_", "files", ":", "\n", "        ", "csv", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", ")", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "csv", "_", "path", ")", "\n", "        ", "result", " =", " pd", ".", "concat", "([", "result", ",", " df", "]", ",", " axis", "=", "0", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -4.56503963470459, -0.24329139292240143, -0.2818883955478668, -1.8358061424805783e-05, -0.6700704097747803, -0.0522906668484211, -0.009083140641450882, -0.41425225138664246, -0.047922465950250626, -1.2690117359161377, -0.0026949062012135983, -1.4928171634674072, -0.0058536529541015625, -2.861018856492592e-06, -4.60137271147687e-05, -1.4543427823809907e-05, -0.001167092937976122, -0.001213052892126143, -0.009494743309915066, -2.934783458709717, -0.03410753235220909, -0.20060104131698608, -0.002411079127341509, -0.004983385093510151, -1.5497195136049413e-06, -0.00045503751607611775, -4.8397800128441304e-05, -0.004809003323316574, -0.00047291061491705477, -0.0019209994934499264, -9.595887240720913e-05, -8.201262971851975e-05, -0.0004124982515349984, -0.007627884857356548, -2.622600959512056e-06, -0.002946917898952961, -0.004576565697789192, -0.025298338383436203, -0.6871588230133057, -0.012767360545694828, -0.000436091679148376, -1.0967194612021558e-05, -0.004864168353378773, -2.7418097943154862e-06, -0.0003234816831536591, -0.00017486473370809108, -0.009180948138237, -0.0011151769431307912, -9.298280929215252e-06, -0.07774192839860916, -0.00530905369669199, -0.04727660492062569, -0.060421187430620193, -0.000942977552767843, -0.01783161051571369, -5.960462772236497e-07, -0.0003636414185166359, -0.0016038662288337946, -0.014493191614747047, -0.0006132629350759089, -0.005140065681189299, -0.2138483226299286, -0.00025281094713136554, -1.5756077766418457, -0.0046017225831747055, -0.007732104510068893, -0.21904303133487701, -0.16145029664039612, -4.410734163684538e-06, -9.536738616588991e-07, -0.0004990047891624272, -0.002543668495491147, -0.010559991002082825, -0.008010405115783215, -0.27091002464294434, -0.0015982723562046885, -0.01609652116894722, -0.0031332706566900015, -0.4416610300540924, -0.039649736136198044, -1.0409119129180908], "finish_reason": "stop"}], "metrics": {"energy": 359.4972331314087, "energy_per_token": 3.668339113585803, "time": 8.000263, "time_per_token": 0.08163533673469388}}
{"outputs": [{"text": "# Return an empty DataFrame if the list is empty\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Create full paths of CSV files\n    csv_file_paths = [os.path.join(data_dir, file) for file in csv_files]\n\n    # Load CSV files using pandas and concatenate them\n    dfs = [pd.read_csv(file) for file in csv_file_paths]\n\n    # Concatenate the DataFrames into one\n    result_df = pd.concat(dfs, ignore_index=True)\n\n    return result_df", "tokens": ["#", " Return", " an", " empty", " Data", "Frame", " if", " the", " list", " is", " empty", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Create", " full", " paths", " of", " CS", "V", " files", "\n", "    ", "csv", "_", "file", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", " for", " file", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "#", " Load", " CS", "V", " files", " using", " pandas", " and", " concaten", "ate", " them", "\n", "    ", "d", "fs", " =", " [", "pd", ".", "read", "_", "csv", "(", "file", ")", " for", " file", " in", " c", "sv", "_", "file", "_", "paths", "]", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " into", " one", "\n", "    ", "result", "_", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " result", "_", "df"], "logprobs": [-1.445582389831543, -3.213672637939453, -0.319272518157959, -0.007348294369876385, -0.03586055710911751, -0.001980012049898505, -0.03768467903137207, -0.9075880646705627, -0.41713160276412964, -1.9823981523513794, -0.001347229932434857, -0.15046632289886475, -0.0011613775277510285, -0.007875462993979454, -0.11762132495641708, -0.0036193120758980513, -1.0728830375228426e-06, -1.2993727978027891e-05, -0.00011145447206217796, -0.007721576374024153, -0.006487736478447914, -0.004421577323228121, -0.02531716786324978, -0.0020697140134871006, -4.100715523236431e-05, -5.8887653722194955e-05, -0.03666001930832863, -0.0018543682526797056, -0.2279568761587143, -0.001328420010395348, -0.11079356074333191, -1.6956809759140015, -2.6103029251098633, -0.9586062431335449, -3.1239867210388184, -0.9204900860786438, -0.005561355967074633, -0.006985527463257313, -0.8217701315879822, -0.00025769727653823793, -0.8186051845550537, -0.0002806984703056514, -2.1145448684692383, -0.34662196040153503, -0.10792532563209534, -0.0012443665182217956, -0.029746482148766518, -0.01330497395247221, -7.152555099310121e-07, -0.0002225389762315899, -2.074220174108632e-05, -0.0008865240379236639, -0.00023898606013972312, -0.001178285456262529, -5.054346183896996e-05, -1.1205610462639015e-05, -0.00020990552729927003, -0.7588678002357483, -0.20029832422733307, -0.0021652367431670427, -7.4741430580616e-05, -6.913899414939806e-05, -0.0006733057671226561, -8.344646857949556e-07, -1.0251946150674485e-05, -4.6491513785440475e-06, -0.003349173115566373, -0.00129413278773427, -0.06910976767539978, -0.0009168949909508228, -0.024257758632302284, -1.449215054512024, -1.206609845161438, -0.016792958602309227, -0.07511892914772034, -3.1967623233795166, -0.875200629234314, -0.8475790619850159, -0.36834633350372314, -0.0011801904765889049, -0.23005728423595428, -1.1834328174591064, -0.00029523781267926097, -1.2838735580444336, -0.00016532962035853416, -0.02580195851624012, -0.13000807166099548, -0.0033275492023676634, -9.775113539944869e-06, -0.00043930893298238516, -4.291525328881107e-06, -0.00017295771976932883, -0.0002899941464420408, -0.3954720199108124, -0.3212187588214874, -0.00028606137493625283, -0.0001267114421352744, -4.1483970562694594e-05, -0.00425730599090457, -3.576278118089249e-07, -2.0265558760002023e-06, -0.0012401993153616786, -7.867782187531702e-06, -2.95634672511369e-05, -0.0011807858245447278, -0.002711193636059761, -2.0950663089752197, -0.0004234609368722886, -0.9172322154045105, -0.6229758262634277, -0.0008925982983782887, -0.0032808545511215925, -0.013386961072683334, -0.7606925964355469, -0.36087319254875183, -0.015077788382768631, -7.629365427419543e-06, -1.238253116607666, -1.3676360845565796, -0.3414669334888458, -0.00013433984713628888, -2.153676986694336, -0.7767701148986816, -0.017170583829283714, -0.0007346553611569107, -0.00036435641231946647, -3.576278118089249e-07, -8.702239938429557e-06, -0.0038602848071604967, -0.0008623456815257668, 0.0, -0.1251686066389084, -0.11606091260910034, -3.3378546504536644e-06, -4.470248313737102e-05, -0.0030239352490752935, -0.005407468415796757, -0.019529908895492554, -0.004282589536160231, -0.05994211882352829, -0.0002884448622353375, -0.16866201162338257, -0.0008559139096178114, -3.40932747349143e-05, -5.245195097813848e-06], "finish_reason": "stop"}], "metrics": {"energy": 522.3277210712428, "energy_per_token": 3.602260145318916, "time": 11.99141, "time_per_token": 0.08269937931034482}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    dataframes = [pd.read_csv(os.path.join(data_dir, csv_file)) for csv_file in csv_files]\n    return pd.concat(dataframes, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "data", "frames", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", "))", " for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", "]", "\n", "    ", "return", " pd", ".", "concat", "(", "data", "frames", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "def"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -1.9424811601638794, -0.8437386155128479, -0.023611795157194138, -1.138073205947876, -0.07128576934337616, -1.0251946150674485e-05, -0.0028288844041526318, -2.0861407392658293e-05, -0.0002522150462027639, -0.0005488081369549036, -0.01657349057495594, -1.7881377516459906e-06, -0.0004988856380805373, -3.564294092939235e-05, -0.0004530118894763291, -0.00017271934484597296, -0.0014296083245426416, -0.00011169286881340668, -8.5588610090781e-05, -0.000408327643526718, -1.354401707649231, -0.008786587044596672, -0.18385227024555206, -0.04657958075404167, -0.018183207139372826, -0.007200481370091438, -0.00027211778797209263, -6.556489552167477e-06, -5.4238757002167404e-05, -0.00013672371278516948, -0.00013851160474587232, -0.0035830840934067965, -1.1920922133867862e-06, -1.1801649634435307e-05, -1.0371154530730564e-05, -0.0036225190851837397, -0.0015519729349762201, -0.19416525959968567, -0.8032732605934143, -0.0008996253600344062, -1.7165990357170813e-05, -4.172238186583854e-05, -0.0017519139219075441, -0.000936189026106149, -1.4781842764932662e-05, -0.22421281039714813, -0.34581100940704346, -9.298280929215252e-06, -0.00010048838157672435, -0.004006811883300543, -0.0037579170893877745, -0.25593000650405884, -0.17861607670783997, -0.07043597847223282, -1.170265555381775], "finish_reason": "stop"}], "metrics": {"energy": 267.3697554607391, "energy_per_token": 3.7134688258435986, "time": 5.9005523, "time_per_token": 0.08195211527777778}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    all_data = [pd.read_csv(os.path.join(data_dir, filename)) for filename in csv_files]\n    merged_data = pd.concat(all_data, axis=0, ignore_index=True)\n    return merged_data", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "all", "_", "data", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", "))", " for", " filename", " in", " c", "sv", "_", "files", "]", "\n", "    ", "merged", "_", "data", " =", " pd", ".", "concat", "(", "all", "_", "data", ",", " axis", "=", "0", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "return", " merged", "_", "data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.8941913843154907, -3.9445202350616455, -0.0010601620888337493, -0.5516621470451355, -0.04471348971128464, -2.1874337196350098, -0.037167828530073166, -4.6491513785440475e-06, -0.0032491295132786036, -0.00011264643399044871, -0.0002470903273206204, -0.0005685858195647597, -0.013017906807363033, -2.861018856492592e-06, -0.0007528808200731874, -6.925819616299123e-05, -0.0005893162451684475, -0.0002791491860989481, -0.0018099845619872212, -0.0001616347290109843, -8.892617915989831e-05, -0.000530936405993998, -2.092421293258667, -0.01203372236341238, -0.012185179628431797, -0.00019369633810129017, -0.00015472168161068112, -0.005534089636057615, -2.3841830625315197e-06, -1.811964830267243e-05, -9.775113539944869e-06, -0.0029261175077408552, -0.0022509971167892218, -0.01035850029438734, -1.838199496269226, -0.0612507089972496, -0.06945236027240753, -0.0075876605696976185, -0.0016544476384297013, -4.172316494077677e-06, -7.70062324590981e-05, -0.00759937334805727, -0.0009062950266525149, -1.4781842764932662e-05, -1.3112935448589269e-05, -0.1614590287208557, -1.4912701845169067, -0.001474127871915698, -0.00427143182605505, -0.05098127946257591, -0.026071326807141304, -4.6491513785440475e-06, -8.4638240878121e-06, -0.0001110968878492713, -0.001576015492901206, -0.004289830103516579, -0.003886647056788206, -0.015881946310400963, -0.02807554416358471, -0.0014906733995303512, -2.2411095415009186e-05, -1.0728830375228426e-06, -1.7975176572799683, -4.410734163684538e-06, -1.1920922133867862e-06, -3.576272320060525e-06, -2.0146166207268834e-05, -0.16125796735286713], "finish_reason": "stop"}], "metrics": {"energy": 274.1015823879242, "energy_per_token": 3.3024287034689666, "time": 6.7418785, "time_per_token": 0.08122745180722891}}
{"outputs": [{"text": "df = pd.DataFrame()\n\n    if not csv_files:\n        return df\n\n    # Create list with full path to all csv files.\n    full_path_file_list = [os.path.join(data_dir, csv) for csv in csv_files]\n    \n    # Loop over all full path csv files.\n    for file in full_path_file_list:\n        df = pd.concat([df, pd.read_csv(file)], ignore_index=True)\n\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " df", "\n", "\n", "    ", "#", " Create", " list", " with", " full", " path", " to", " all", " c", "sv", " files", ".", "\n", "    ", "full", "_", "path", "_", "file", "_", "list", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", ")", " for", " c", "sv", " in", " c", "sv", "_", "files", "]", "\n", "    ", "\n", "    ", "#", " Loop", " over", " all", " full", " path", " c", "sv", " files", ".", "\n", "    ", "for", " file", " in", " full", "_", "path", "_", "file", "_", "list", ":", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "file", ")]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-2.9400224685668945, -0.4396781027317047, -0.12670721113681793, -7.629365427419543e-06, -0.048872314393520355, -0.12578269839286804, -0.06771150231361389, -1.5224330425262451, -0.0014453213661909103, -0.588074266910553, -0.9266721606254578, -0.2015930414199829, -7.152555099310121e-07, -3.0397906812140718e-05, -2.5629668016335927e-05, -0.050772249698638916, -0.04073154553771019, -0.012607398442924023, -0.16279566287994385, -0.03617080673575401, -0.013000726699829102, -0.13460543751716614, -0.0008562712464481592, -3.06827449798584, -2.746220111846924, -3.5460875034332275, -1.7430331707000732, -0.5662416219711304, -1.563627004623413, -0.6905971765518188, -2.4919838905334473, -1.1449108123779297, -0.0017289465758949518, -0.22987627983093262, -3.285123586654663, -0.0268241036683321, -0.0017899933736771345, -1.3261667490005493, -0.014822003431618214, -0.8380122184753418, -0.14715462923049927, -3.452798843383789, -0.09008234739303589, -0.3554157316684723, -0.009172561578452587, -0.1803862452507019, -0.08974064886569977, -2.264974000354414e-06, -0.0010528980055823922, -1.1920858014491387e-05, -0.004144650883972645, -0.00042834642226807773, -0.005142081528902054, -5.221230458118953e-05, -6.318072337307967e-06, -0.0005864569102413952, -1.6728683710098267, -0.01464451290667057, -1.9630587100982666, -0.0053732022643089294, -0.00010847456724150106, -3.4570634852570947e-06, -5.1616290875244886e-05, -0.002222212729975581, -3.6954811548639555e-06, -2.5629668016335927e-05, -8.427741704508662e-05, -0.010408759117126465, -0.003234870731830597, -1.761627197265625, -2.8761982917785645, -0.009995879605412483, -0.4002390205860138, -2.4895310401916504, -1.2348288297653198, -0.991155743598938, -2.9449193477630615, -1.0314490795135498, -1.3514373302459717, -0.00047183825518004596, -0.23136277496814728, -1.6338557004928589, -0.04074733704328537, -0.0006437613046728075, -0.030725188553333282, -1.3044986724853516, -0.3186490535736084, -0.0017642899183556437, -1.168244216387393e-05, -2.52720492426306e-05, -5.483612312673358e-06, -6.663577369181439e-05, -1.4066597032069694e-05, -4.053033626405522e-05, -0.001278655487112701, -0.011279035359621048, -0.2572881877422333, -1.954933524131775, -0.2171776294708252, -0.044723980128765106, -2.264974000354414e-06, -0.013699086382985115, -0.022882577031850815, -0.024883653968572617, -0.0016500442288815975, -0.009366852231323719, -4.339123915997334e-05, -0.021843094378709793, -1.9073468138230965e-06, -0.00020001317898277193, -9.798523387871683e-05, -0.0018807833548635244, -0.16698676347732544, -0.4045259356498718, -0.4607101082801819, -2.264974000354414e-06, -8.583032467868179e-06, -0.030957868322730064, -0.008407555520534515, -0.07679141312837601, -0.07560669630765915, -0.6275044083595276, -0.004854915197938681, -0.06372889131307602, -0.0022961937356740236, -0.2024465799331665, -0.15404315292835236, -1.9386203289031982], "finish_reason": "stop"}], "metrics": {"energy": 446.6334121971128, "energy_per_token": 3.489323532789944, "time": 10.522839, "time_per_token": 0.0822096796875}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    dfs = []\n    for filename in csv_files:\n        file_path = os.path.join(data_dir, filename)\n        df = pd.read_csv(file_path)\n        dfs.append(df)\n\n    return pd.concat(dfs, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "d", "fs", " =", " []", "\n", "    ", "for", " filename", " in", " c", "sv", "_", "files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", ")", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "return", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -1.649678349494934, -0.0014688903465867043, -0.03398586064577103, -0.3942587971687317, -0.009892012923955917, -0.11315114051103592, -0.00801135040819645, -2.491347074508667, -0.0002131234941771254, -0.00722071947529912, -1.0728830375228426e-06, -1.2397689715726301e-05, -1.5497195136049413e-06, -0.00027021096320822835, -0.0009282094542868435, -0.005032965913414955, -0.7172370553016663, -0.9835413694381714, -0.0021835551597177982, -0.0003947432560380548, -0.0019812018144875765, -7.152555099310121e-07, -0.00011228884250158444, -2.6940935640595853e-05, -0.0013730631908401847, -0.00029774048016406596, -0.0010300336871296167, -3.2305197237292305e-05, -3.969590397900902e-05, -0.00017712931730784476, -0.0030644622165709734, -0.0012138864258304238, -0.005167342722415924, -0.024189574643969536, -0.5733352303504944, -0.014183194376528263, -0.0009112972766160965, -1.4662635294371285e-05, -0.004446381703019142, -2.3841830625315197e-06, -0.0003228858404327184, -0.00011073929636040702, -0.0016405232017859817, -7.629103492945433e-05, 0.0, -0.08495842665433884, -0.0044956328347325325, -0.0036061275750398636, -0.02549010142683983, -1.0728830375228426e-06, -0.0004262015863787383, -7.009260298218578e-05, -9.107174992095679e-05, -0.0001599660754436627, -0.0018625784432515502, -0.0002996472467202693, -0.06646154075860977, -0.0008715168805792928, -0.7812992930412292, -0.0009737040963955224, -1.9073468138230965e-06, -6.12716976320371e-05, -0.0007306052139028907, -0.00045718232286162674, 0.0, -0.2407446801662445, -0.20388232171535492, -7.867782187531702e-06, -0.00014280252798926085, -0.0027128581423312426, -0.003716705832630396, -0.1391707807779312], "finish_reason": "stop"}], "metrics": {"energy": 312.7537577972411, "energy_per_token": 3.5140871662611364, "time": 7.3694468, "time_per_token": 0.08280277303370787}}
{"outputs": [{"text": "if csv_files:\n        # If there are files in the list, concatenate them into a single DataFrame\n        return pd.concat([pd.read_csv(os.path.join(data_dir, csv_file)) for csv_file in csv_files],\n                          ignore_index=True)\n    else:\n        # If the list is empty, return an empty DataFrame\n        return pd.DataFrame()", "tokens": ["if", " c", "sv", "_", "files", ":", "\n", "        ", "#", " If", " there", " are", " files", " in", " the", " list", ",", " concaten", "ate", " them", " into", " a", " single", " Data", "Frame", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", "))", " for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", "]", ",", "\n", "                ", "          ", "ignore", "_", "index", "=", "True", ")", "\n", "    ", "else", ":", "\n", "        ", "#", " If", " the", " list", " is", " empty", ",", " return", " an", " empty", " Data", "Frame", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "if"], "logprobs": [-0.9144620895385742, -2.8252172470092773, -8.583032467868179e-06, -6.508615479106084e-05, -0.00016258825780823827, -0.2085905820131302, -0.05561957508325577, -0.012678378261625767, -1.7374320030212402, -3.087067127227783, -1.1089345216751099, -0.04877331480383873, -1.0241284370422363, -0.548019528388977, -0.037719231098890305, -0.09857175499200821, -0.16743111610412598, -1.628899335861206, -0.0019363479223102331, -0.511594295501709, -0.4031624495983124, -0.03224893659353256, -0.47641995549201965, -0.06566803902387619, -0.0008853329927660525, -0.27529552578926086, -0.0014452022733166814, -2.2088112831115723, -0.006266705691814423, -1.1205610462639015e-05, -0.004377069883048534, -0.09465260058641434, -0.01933688297867775, -1.8954096958623268e-05, -0.003336341353133321, -0.0001510267611593008, -0.00025006983196362853, -0.0007236960809677839, -0.024542780593037605, -1.1920922133867862e-06, -0.00041166413575410843, -4.029192859889008e-05, -0.0004683827864937484, -0.0003022690652869642, -0.0019076736643910408, -0.00014161060971673578, -2.52720492426306e-05, -0.00033849707688204944, -1.3418927192687988, -0.007989354431629181, -0.08319754153490067, -0.09235823899507523, -0.02239765040576458, -0.01752018742263317, -0.0009279712685383856, -3.6954811548639555e-06, -3.58813522325363e-05, -8.046303264563903e-05, -0.00031394799589179456, -0.0049483925104141235, -1.0847986231965479e-05, -3.45700973412022e-05, -1.0132738680113107e-05, -0.19684791564941406, -0.00048137042904272676, -2.1908020973205566, -0.01581975817680359, -2.2177131175994873, -0.10411524027585983, -1.3589766240329482e-05, -2.062299427052494e-05, -0.005712375044822693, -0.00838663149625063, -0.07464895397424698, -0.03854565694928169, -0.044678837060928345, -0.03757147863507271, -5.590759246842936e-05, -0.004437836818397045, -0.0006792622152715921, -0.019612323492765427, -0.11508484184741974, -0.19213014841079712, -0.026019874960184097, -0.2597661316394806, -0.00018046658078674227, -0.016254285350441933, -0.031835854053497314, -0.002253613667562604, -0.00041762212640605867, -0.0019722788129001856, -0.00013302871957421303, -0.044274281710386276, -0.00022587609419133514, -0.01157426182180643, -0.0007745603215880692, -3.373566141817719e-05, -5.936446541454643e-05, -0.03401109576225281, -0.5679612159729004, -0.06360673904418945, -1.445214033126831], "finish_reason": "stop"}], "metrics": {"energy": 365.14035160636905, "energy_per_token": 3.5798073686898926, "time": 8.422929, "time_per_token": 0.08257773529411765}}
{"outputs": [{"text": "# Return empty DataFrame if an empty list of CSV files is provided\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Initialize an empty list to hold the DataFrames\n    dataframes = []\n\n    # Loop over the provided CSV files\n    for file in csv_files:\n        # Construct the full path to the CSV file\n        full_path = os.path.join(data_dir, file)\n\n        # Read the CSV file into a DataFrame and append it to the list\n        dataframes.append(pd.read_csv(full_path))\n\n    # Concatenate the DataFrames into a single DataFrame\n    df = pd.concat(dataframes)\n\n    return df", "tokens": ["#", " Return", " empty", " Data", "Frame", " if", " an", " empty", " list", " of", " CS", "V", " files", " is", " provided", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " hold", " the", " Data", "F", "rames", "\n", "    ", "data", "frames", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " the", " provided", " CS", "V", " files", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Construct", " the", " full", " path", " to", " the", " CS", "V", " file", "\n", "        ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "\n", "        ", "#", " Read", " the", " CS", "V", " file", " into", " a", " Data", "Frame", " and", " append", " it", " to", " the", " list", "\n", "        ", "data", "frames", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "full", "_", "path", "))", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " into", " a", " single", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "data", "frames", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.445582389831543, -3.213672637939453, -1.370795726776123, -0.050979696214199066, -0.0036992470268160105, -0.03312809765338898, -2.724954128265381, -0.001544950413517654, -0.016060978174209595, -0.39848095178604126, -2.312225580215454, -0.00500841299071908, -0.024841096252202988, -0.03414013609290123, -0.8197064995765686, -0.1800169050693512, -0.0012367465533316135, -0.011521350592374802, -0.1376410722732544, -0.004243180155754089, -1.311301275563892e-06, -5.221230458118953e-05, -7.581423415103927e-05, -0.00836688932031393, -0.004220863804221153, -0.003743665525689721, -0.03280894085764885, -0.0022892954293638468, -2.4437606043647975e-05, -8.916457591112703e-05, -0.03742048516869545, -0.002533918246626854, -0.13339175283908844, -0.0012055517872795463, -0.11864467710256577, -2.0954294204711914, -0.2716524004936218, -0.002263010013848543, -0.07732085138559341, -0.027885552495718002, -1.817220687866211, -0.22464151680469513, -0.13111555576324463, -0.027429258450865746, -6.198863957251888e-06, -0.310788631439209, -0.00018225439998786896, -2.2636263370513916, -0.10839040577411652, -0.015250153839588165, -0.00280344532802701, -0.00014768941036891192, -0.020925233140587807, -0.0002723561483435333, -0.009778928942978382, -1.0529603958129883, -1.9695885181427002, -0.9812765717506409, -1.9062210321426392, -0.4747241139411926, -8.165503095369786e-05, -0.21245411038398743, -0.5242574214935303, -6.97350042173639e-05, -0.003040693001821637, -0.9208611845970154, -0.12120668590068817, -0.0010355116100981832, -1.1920922133867862e-06, -1.9192511899746023e-05, -8.34461570775602e-06, -0.00022206225548870862, -0.00022110878489911556, -0.04112895578145981, -0.06667836010456085, -0.6200108528137207, -0.03613516315817833, -0.41782402992248535, -0.6355528831481934, -0.24722301959991455, -0.022988714277744293, -0.3878553807735443, -5.602820692729438e-06, -0.002460906282067299, -0.20822763442993164, -0.00018404220463708043, -2.284393310546875, -0.04270708188414574, -0.08478780835866928, -0.007050870452076197, -0.007907869294285774, -8.344646857949556e-07, -0.00017593742813915014, -5.602820692729438e-06, -0.0033282621297985315, -0.0002598424907773733, -0.0014991246862336993, -3.373566141817719e-05, -7.986990567587782e-06, -0.0002531684876885265, -0.005545351654291153, -0.0012891324004158378, -0.0014002051902934909, -0.3300298750400543, -0.0011344670783728361, -0.002059364225715399, -0.6456196904182434, -0.0443495474755764, -0.0344524160027504, -1.3828182090946939e-05, -0.021512383595108986, -0.38958021998405457, -0.002250402234494686, -0.10365687310695648, -0.00047851080307736993, -0.9891923666000366, -0.1950102597475052, -0.3071998953819275, -0.004550459329038858, -0.004463708959519863, -0.061807822436094284, -0.25406694412231445, -8.046303264563903e-05, -0.42861858010292053, -0.15999647974967957, -0.0004413345886860043, -0.00011991735664196312, -0.000271879427600652, -0.005530769936740398, -4.529942543740617e-06, -0.008375401608645916, -2.169585604860913e-05, -0.00024685196694917977, -9.7508447652217e-05, -0.0010418231831863523, -9.417489309271332e-06, 0.0, -0.037316787987947464, -0.000747877755202353, -0.003584034275263548, -0.002299642888829112, -0.0019022003980353475, -0.13297052681446075, -0.00013815402053296566, -0.00013755806139670312, -0.0006469779182225466, -0.37721291184425354, -0.04679859057068825, -0.0014423454413190484, -2.0265558760002023e-06, -0.498565137386322, -0.06222013384103775, -0.002985308412462473, -0.03248703107237816, -0.00034528967808000743, -0.23828071355819702, -9.63164638960734e-05, -1.7524373531341553, -0.062058594077825546, -0.00018439977429807186, -3.2186455882765586e-06, -2.6464111215318553e-05, -0.001622551935724914, -0.0005720409681089222, -8.940656698541716e-06, -1.019707441329956, -0.005701351445168257, -0.05128404498100281, -0.0005284343496896327, -0.5497468709945679, -0.0007627676823176444, -0.6675529479980469, -0.04401330649852753, -1.2725107669830322], "finish_reason": "stop"}], "metrics": {"energy": 616.7086401138308, "energy_per_token": 3.5443025293898325, "time": 14.509507, "time_per_token": 0.08338797126436781}}
{"outputs": [{"text": "# Check if the list of files is empty\n    if not csv_files:\n        # Return an empty DataFrame if the list of files is empty\n        return pd.DataFrame()\n\n    # Initialize an empty list to store the DataFrames\n    dfs = []\n\n    # Loop through each file in the list\n    for file in csv_files:\n        # Read the CSV file as a DataFrame\n        df = pd.read_csv(os.path.join(data_dir, file))\n        # Append the DataFrame to the list of DataFrames\n        dfs.append(df)\n\n    # Concatenate the DataFrames in the list into a single DataFrame\n    result = pd.concat(dfs, ignore_index=True)\n\n    # Return the merged DataFrame\n    return result", "tokens": ["#", " Check", " if", " the", " list", " of", " files", " is", " empty", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Return", " an", " empty", " Data", "Frame", " if", " the", " list", " of", " files", " is", " empty", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " Data", "F", "rames", "\n", "    ", "d", "fs", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " list", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Read", " the", " CS", "V", " file", " as", " a", " Data", "Frame", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", "\n", "        ", "#", " App", "end", " the", " Data", "Frame", " to", " the", " list", " of", " Data", "F", "rames", "\n", "        ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " in", " the", " list", " into", " a", " single", " Data", "Frame", "\n", "    ", "result", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "#", " Return", " the", " merged", " Data", "Frame", "\n", "    ", "return", " result"], "logprobs": [-1.445582389831543, -1.104608416557312, -0.1244409903883934, -0.26540201902389526, -0.8160350918769836, -0.06269486993551254, -0.8660414218902588, -0.011874113231897354, -0.04842163622379303, -0.34281012415885925, -0.001166259404271841, -0.015098807401955128, -0.14904510974884033, -0.0032506741117686033, -1.4305104514278355e-06, -8.940656698541716e-06, -3.9934315282152966e-05, -0.004093601368367672, -0.005571195390075445, -0.003570492845028639, -1.052945613861084, -0.33433806896209717, -0.0455494187772274, -0.0008118432597257197, -0.02843954786658287, -0.00038223114097490907, -0.44005686044692993, -0.535006582736969, -0.03795304521918297, -1.4669089317321777, -0.024600474163889885, -0.00029392691794782877, -0.0004183370911050588, -0.014796514995396137, -0.0006282739923335612, -0.07284309715032578, -0.00169955228921026, -3.111314072157256e-05, -7.1403817855753e-05, -0.055333010852336884, -0.0015073377871885896, -0.4715358018875122, -0.0014373458689078689, -0.03990990296006203, -1.1096200942993164, -0.18667319416999817, -0.001379134482704103, -0.04147519916296005, -0.03142375871539116, -0.12178225815296173, -0.2827364206314087, -0.12353407591581345, -0.014015346765518188, -3.2186455882765586e-06, -0.09514286369085312, -0.00017712931730784476, -0.23689119517803192, -1.823885577323381e-05, -0.048879578709602356, -0.0010948146227747202, -0.00019131260341964662, -0.05714912340044975, -0.000316212244797498, -0.014675760641694069, -0.7509925961494446, -0.12813900411128998, -0.4733327627182007, -0.20177826285362244, -0.38561826944351196, -0.0019174300832673907, -0.038226161152124405, -1.5712816715240479, -7.247662142617628e-05, -0.0011591151123866439, -0.6216904520988464, -0.04741554334759712, -0.0006901028100401163, -7.152555099310121e-07, -2.3841830625315197e-06, -3.099436753473128e-06, -0.0001726001501083374, -0.0002181292074965313, -0.015389621257781982, -0.008631422184407711, -1.3904922008514404, -0.2992209196090698, -0.1442786455154419, -1.0132738680113107e-05, -0.006332451477646828, -1.7170944213867188, -0.0021630956325680017, -0.15029822289943695, -0.00013004888023715466, -0.6597837805747986, -0.0004068977141287178, -0.03673022985458374, -0.00990582350641489, -0.0003933132975362241, -6.318072337307967e-06, -0.002462095348164439, -8.583032467868179e-06, -0.00034338299883529544, -0.0007714632665738463, -0.012395134195685387, -3.576278118089249e-07, -0.0002233732520835474, -2.2053474822314456e-05, -0.0004892344586551189, -0.00026890001026913524, -0.0007666985620744526, -7.64102369430475e-05, -1.0251946150674485e-05, -0.00021884430316276848, -0.010117554105818272, -0.027891000732779503, -0.0034994573798030615, -0.3281390070915222, -0.0297585166990757, -0.12812107801437378, -4.935142715112306e-05, -0.007266757544130087, -0.0025718489196151495, -0.0015061474405229092, -0.0005610798834823072, -0.00034564718953333795, -0.007727846037596464, -2.117356777191162, -0.0032513870391994715, -0.00012492353562265635, -1.0728830375228426e-06, -0.0009601273923180997, -7.724463648628443e-05, -0.0004316828562878072, 0.0, -0.0003051292151212692, -6.890059739816934e-05, -2.038458114839159e-05, -0.00018571082910057157, -0.00029094755882397294, -0.00023100091493688524, -0.009918571449816227, -0.0021199150942265987, -0.0007366804056800902, -0.1336791217327118, -8.880697714630514e-05, -4.9828242481453344e-05, -0.00048101297579705715, -0.5952854752540588, -0.29175761342048645, -0.0003922408213838935, -5.8412379075889476e-06, -1.0464625358581543, -0.0017348966794088483, -0.008464058861136436, -0.2677556276321411, -0.06191394478082657, -0.0023070168681442738, -0.0019767999183386564, -0.00016902448260225356, -0.03855804353952408, -0.00018106251081917435, -1.9641962051391602, -0.3225407898426056, -9.345571743324399e-05, -5.960462772236497e-07, -6.079655122448457e-06, -0.0017627429915592074, -0.0001599660754436627, 0.0, -0.24309125542640686, -0.2560257315635681, -9.059865078597795e-06, -0.00019858295854646713, -0.0029240967705845833, -0.002631179988384247, -0.00823909044265747, -0.0015792291378602386, -0.0897926315665245, -0.0006495987763628364, -0.17823809385299683, -0.04404524713754654, -0.001101244823075831, -0.4315814971923828, -0.011203240603208542, -0.0002826052950695157, -0.0024900403805077076, -0.00018571082910057157, -0.000942977552767843, -0.002795837353914976], "finish_reason": "stop"}], "metrics": {"energy": 650.6233275785445, "energy_per_token": 3.4424514686695478, "time": 15.767362, "time_per_token": 0.08342519576719577}}
{"outputs": [{"text": "# Check if the list of CSV files is empty\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Use list comprehension to read each CSV file and store the resulting DataFrames in a list\n    dfs = [pd.read_csv(os.path.join(data_dir, csv)) for csv in csv_files]\n\n    # Use pd.concat() to concatenate the DataFrames into a single DataFrame\n    df = pd.concat(dfs, ignore_index=True)\n    return df", "tokens": ["#", " Check", " if", " the", " list", " of", " CS", "V", " files", " is", " empty", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Use", " list", " comprehension", " to", " read", " each", " CS", "V", " file", " and", " store", " the", " resulting", " Data", "F", "rames", " in", " a", " list", "\n", "    ", "d", "fs", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "))", " for", " c", "sv", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "#", " Use", " pd", ".", "concat", "()", " to", " concaten", "ate", " the", " Data", "F", "rames", " into", " a", " single", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "return", " df"], "logprobs": [-1.445582389831543, -1.104608416557312, -0.1244409903883934, -0.26540201902389526, -0.8160350918769836, -0.06269486993551254, -0.9202711582183838, -0.0004469349514693022, -0.03668265789747238, -0.009270715527236462, -0.054127778857946396, -0.3561123013496399, -0.0010032388381659985, -0.013432598672807217, -0.11376658082008362, -0.0026664913166314363, -1.4305104514278355e-06, -2.372236667724792e-05, -0.0003691230376716703, -0.004405436106026173, -0.005480265710502863, -0.0037930700927972794, -0.5148346424102783, -0.0038182465359568596, -0.00010287232726113871, -7.056941103655845e-05, -0.02854660339653492, -0.13836941123008728, -0.1461489349603653, -0.0009384519071318209, -0.08072035759687424, -2.748922348022461, -1.3657033443450928, -0.0077132959850132465, -0.1104048565030098, -0.9053410887718201, -0.7392981648445129, -0.15305498242378235, -1.0609570381348021e-05, -0.0287961233407259, -0.5660121440887451, -1.6971216201782227, -1.2603853940963745, -1.6393169164657593, -0.3072667717933655, -0.0896693766117096, -2.145764938177308e-06, -0.128617525100708, -0.0498298779129982, -0.008269238285720348, -0.04514532908797264, -0.0002834395272657275, -0.49866029620170593, -9.476689592702314e-05, -0.01859084889292717, -0.003200054634362459, -0.014872273430228233, -7.629365427419543e-06, -0.001945747178979218, -1.3828182090946939e-05, -0.00034874555421993136, -0.00043442347669042647, -0.006734176073223352, -1.5497195136049413e-06, -0.00021228920377325267, -1.9192511899746023e-05, -0.0002857038634829223, -0.0002755738969426602, -0.0008635367848910391, -9.333651541965082e-05, -2.5748875486897305e-05, -0.0002661589242052287, -1.0868585109710693, -0.0035963875707238913, -1.5426357984542847, -0.002155244816094637, -0.00010835537250386551, -2.3841830625315197e-06, -0.0002656822034623474, -0.0019540756475180387, -8.344646857949556e-07, -4.2199197196168825e-05, -8.415821503149346e-05, -0.0027447191532701254, -0.0013755630934610963, -0.026131369173526764, -0.0007668177131563425, -0.005791905336081982, -1.2158300876617432, -0.406661719083786, -5.638440416078083e-05, -0.0017577449325472116, -0.843132495880127, -0.12354187667369843, -0.8215258717536926, -0.00016592556494288146, -0.452690064907074, -0.2453635185956955, -0.0035935367923229933, -1.6689286894688848e-06, -0.9147830009460449, -0.08506999909877777, -0.002358514117076993, -0.02517140470445156, -0.0002783149539027363, -0.06508559733629227, -0.00017593742813915014, -1.1383906602859497, -0.04499661922454834, -7.402622577501461e-05, -3.6954811548639555e-06, -4.434487345861271e-05, -0.0011202972382307053, -0.0004744596080854535, 0.0, -0.18523618578910828, -0.04400281235575676, -5.602820692729438e-06, -6.294052582234144e-05, -0.0027999980375170708, -0.00367881846614182, -0.008159399032592773, -0.006481340620666742, -2.162721872329712, -0.063848115503788, -0.0013067525578662753], "finish_reason": "stop"}], "metrics": {"energy": 432.96358510208137, "energy_per_token": 3.436218929381598, "time": 10.506323, "time_per_token": 0.08338351587301587}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    else:\n        return pd.concat([pd.read_csv(os.path.join(data_dir, csv_file)) for csv_file in csv_files],\n                         ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", "))", " for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", "]", ",", "\n", "                ", "         ", "ignore", "_", "index", "=", "True", ")"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.8941913843154907, -1.0241539478302002, -0.0007782529573887587, -0.001595177804119885, -0.006520898547023535, -2.28721022605896, -0.007120589260011911, -4.172238186583854e-05, -0.008535687811672688, -0.1535559892654419, -0.027972033247351646, -1.764281842042692e-05, -0.0025366530753672123, -2.038458114839159e-05, -0.0002598424907773733, -0.0011699505848810077, -0.022837018594145775, -8.702239938429557e-06, -0.00046588058467023075, -2.3841574147809297e-05, -0.0006699701189063489, -0.00030048147891648114, -0.0018261675722897053, -0.00014745102089364082, -4.95898348162882e-05, -0.000685576000250876, -1.085699439048767, -0.014179080724716187, -0.0722111389040947, -0.10073616355657578, -0.030056320130825043, -0.02863418497145176, -0.0018195039592683315, -8.4638240878121e-06, -5.304672595229931e-05, -7.83174327807501e-05, -0.0007888542604632676, -0.004389769863337278, -7.986990567587782e-06, -1.823885577323381e-05, -9.667406266089529e-05, -0.16949380934238434, -0.0009448830969631672, -2.3782262802124023, -0.02875419333577156, -0.11426106840372086, -0.08449732512235641, -1.4543427823809907e-05, -3.099436753473128e-06, -0.014765153639018536, -0.008125345222651958, -0.22963403165340424], "finish_reason": "stop"}], "metrics": {"energy": 233.13138620948789, "energy_per_token": 3.4795729284998194, "time": 5.2714067, "time_per_token": 0.0786777119402985}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    csv_paths = [os.path.join(data_dir, csv_file) for csv_file in csv_files]\n    return pd.concat([pd.read_csv(path) for path in csv_paths], ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "csv", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", ")", " for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", "]", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "path", ")", " for", " path", " in", " c", "sv", "_", "paths", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "#"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.8941913843154907, -3.38078236579895, -0.0018809023313224316, -0.6143578886985779, -0.0025264269206672907, -0.03825989365577698, -0.016311638057231903, -1.5497195136049413e-06, -0.00034350217902101576, -1.823885577323381e-05, -0.0006787856691516936, -0.000248043768806383, -0.002522503025829792, -8.511180931236595e-05, -1.883488948806189e-05, -0.00030083899036981165, -1.646343469619751, -0.017520420253276825, -0.12573570013046265, -0.05765687674283981, -0.009472189471125603, -0.002205798402428627, -7.772143726469949e-05, -1.6689286894688848e-06, -1.6569954823353328e-05, -2.47952248173533e-05, -6.3774932641536e-05, -0.00344089069403708, -8.344646857949556e-07, -7.390948667307384e-06, -3.2305197237292305e-05, -0.005775668192654848, -0.004286269191652536, -0.011661221273243427, -1.758255958557129, -0.004010848701000214, -3.0040289857424796e-05, -0.005303124897181988, -0.15971891582012177, -0.0037587485276162624, -1.4781842764932662e-05, -0.004200564697384834, -1.7881233361549675e-05, -0.00017927470616996288, -0.0006531727267429233, -0.9237040877342224, -0.09311271458864212, -0.0029055543709546328, -6.627816765103489e-05, -6.985420623095706e-05, -0.003889140672981739, -1.6689286894688848e-06, -5.125986263010418e-06, -0.0028443378396332264, -0.3600615859031677, -0.00034457468427717686, -0.10037480294704437, -1.5020257706055418e-05, -2.52720492426306e-05, -0.006435384973883629, -0.004957526456564665, -0.25664401054382324, -0.1455717533826828, -0.0692511573433876, -2.0649359226226807], "finish_reason": "stop"}], "metrics": {"energy": 278.05394042587284, "energy_per_token": 3.4756742553234106, "time": 6.5343103, "time_per_token": 0.08167887874999999}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n\n    full_paths = [os.path.join(data_dir, filename) for filename in csv_files]\n    dataframes = [pd.read_csv(path) for path in full_paths]\n\n    return pd.concat(dataframes, ignore_index=True)", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "full", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", ")", " for", " filename", " in", " c", "sv", "_", "files", "]", "\n", "    ", "data", "frames", " =", " [", "pd", ".", "read", "_", "csv", "(", "path", ")", " for", " path", " in", " full", "_", "paths", "]", "\n", "\n", "    ", "return", " pd", ".", "concat", "(", "data", "frames", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "#"], "logprobs": [-0.9144620895385742, -1.6842260360717773, -0.00047386385267600417, -0.008762244135141373, -7.068861305015162e-05, -0.00022098960471339524, -0.013527864590287209, -0.11487678438425064, -0.0007482351502403617, -0.0006962973857298493, -0.00396727304905653, -0.03497286140918732, -0.009074989706277847, -0.1345304250717163, -0.009337209165096283, -0.00010156115604331717, -0.0001438752660760656, -0.052017293870449066, -0.02035035379230976, -0.8109994530677795, -0.0013974672183394432, -3.029567241668701, -0.02657444030046463, -0.6132866144180298, -0.01012428104877472, -0.051532141864299774, -0.02316111885011196, -1.1920922133867862e-06, -0.0003914067056030035, -1.9311717551317997e-05, -0.0023842023219913244, -0.0003586364327929914, -0.0020140379201620817, -8.904537389753386e-05, -0.00015138434537220746, -0.0003660247311927378, -2.595980167388916, -0.000753476400859654, -0.0037080359179526567, -0.00025602878304198384, -0.00010692501382436603, -0.0029943413101136684, -2.7894584491150454e-05, -1.2040065485052764e-05, -8.702239938429557e-06, -0.005948696285486221, -0.004977216944098473, -0.19231802225112915, -2.075202703475952, -0.39925917983055115, -0.02094297856092453, -0.04285293444991112, -0.006199534051120281, -1.6093124941107817e-05, -0.0039041026029735804, -1.2636104656849056e-05, -0.00017963226127903908, -0.0003644755925051868, -1.3233563899993896, -0.09543579816818237, -0.0007402540650218725, -0.00010585224663373083, -4.970903682988137e-05, -0.0024729168508201838, -7.390948667307384e-06, -8.821448318485636e-06, -0.003927257843315601, -0.001903747208416462, -1.0263856649398804, -0.00036530973738990724, -0.20539036393165588, -0.0031853197142481804, -1.1205610462639015e-05, -8.630380034446716e-05, -0.0023474537301808596, -0.0030497252009809017, -2.8490614567999728e-05, -0.35111159086227417, -0.3684717118740082, -8.702239938429557e-06, -0.00013410145766101778, -0.009565827436745167, -0.0060279713943600655, -0.19238844513893127, -0.13375014066696167, -0.048232629895210266, -2.0872409343719482], "finish_reason": "stop"}], "metrics": {"energy": 289.45610844421384, "energy_per_token": 3.3270817062553313, "time": 7.162405, "time_per_token": 0.08232649425287356}}
{"outputs": [{"text": "# Check for an empty list\n    if not csv_files:\n        # Return an empty DataFrame if the list is empty\n        return pd.DataFrame()\n\n    # Loop over the CSV files in the list\n    for i, file in enumerate(csv_files):\n        # Use os.path.join() to create a complete file path\n        file_path = os.path.join(data_dir, file)\n\n        # If it is the first file, read it as a DataFrame\n        if i == 0:\n            df = pd.read_csv(file_path)\n        # Otherwise, concatenate the next DataFrames\n        else:\n            df = pd.concat([df, pd.read_csv(file_path)])\n\n    return df\n\n\"\"\"\nThis implementation uses the os.path.join() function to create the file path,\nwhich is more robust and works on all platforms.\nAlso, the if-else block checks for the first file and handles the DataFrame creation and subsequent concatenation accordingly.\n\"\"\"", "tokens": ["#", " Check", " for", " an", " empty", " list", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Return", " an", " empty", " Data", "Frame", " if", " the", " list", " is", " empty", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Loop", " over", " the", " CS", "V", " files", " in", " the", " list", "\n", "    ", "for", " i", ",", " file", " in", " enumerate", "(", "csv", "_", "files", "):", "\n", "        ", "#", " Use", " os", ".", "path", ".", "join", "()", " to", " create", " a", " complete", " file", " path", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "\n", "        ", "#", " If", " it", " is", " the", " first", " file", ",", " read", " it", " as", " a", " Data", "Frame", "\n", "        ", "if", " i", " ==", " ", "0", ":", "\n", "            ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "#", " Otherwise", ",", " concaten", "ate", " the", " next", " Data", "F", "rames", "\n", "        ", "else", ":", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")]", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "\"", "\"", "\"", "\n", "This", " implementation", " uses", " the", " os", ".", "path", ".", "join", "()", " function", " to", " create", " the", " file", " path", ",", "\n", "which", " is", " more", " robust", " and", " works", " on", " all", " platforms", ".", "\n", "Also", ",", " the", " if", "-", "else", " block", " checks", " for", " the", " first", " file", " and", " handles", " the", " Data", "Frame", " creation", " and", " subsequent", " concaten", "ation", " accordingly", ".", "\n", "\"", "\"", "\"", "\n", "\n", "#"], "logprobs": [-1.445582389831543, -1.104608416557312, -2.636665105819702, -0.89151930809021, -0.00408101687207818, -0.06425455212593079, -1.5143496990203857, -0.0011626873165369034, -0.01620185747742653, -0.2582668662071228, -0.007154795806854963, -1.7881377516459906e-06, -1.9311717551317997e-05, -2.706014311115723e-05, -0.0048649986274540424, -0.007584111299365759, -0.00870185811072588, -2.03263783454895, -0.4570222795009613, -0.17191500961780548, -0.0058862436562776566, -0.04303108528256416, -0.0034475435968488455, -0.8174846768379211, -0.3508157432079315, -0.06839495897293091, -0.07585513591766357, -0.0006232702871784568, -0.04482736811041832, -0.0010126468259841204, -0.07020941376686096, -0.0032486540731042624, -4.100715523236431e-05, -8.77341881277971e-05, -0.04723942279815674, -0.0016646826406940818, -0.5670763850212097, -0.0020202244631946087, -0.10457683354616165, -3.2359509468078613, -1.5775320529937744, -0.7442505955696106, -1.436192274093628, -0.0007938570925034583, -0.22753965854644775, -1.3966248035430908, -0.012571141123771667, -0.22069112956523895, -0.16170355677604675, -0.0002451834443490952, -0.06872588396072388, -0.6445531845092773, -0.06561066210269928, -1.0485851764678955, -0.137912780046463, -0.00020096666412428021, -5.018585216021165e-05, -0.0009311868925578892, -9.179073458653875e-06, -5.125986263010418e-06, -0.003154661040753126, -0.0016483780927956104, -0.015001224353909492, -0.02398592233657837, -3.2254762649536133, -1.056171178817749, -0.043759796768426895, -0.0072856927290558815, -0.010022788308560848, -0.0022192392498254776, -1.163918375968933, -0.038069989532232285, -1.3791353702545166, -1.4495084285736084, -2.2550501823425293, -0.5104358792304993, -0.01466601062566042, -0.3517376184463501, -0.0005267662927508354, -0.21534323692321777, -0.06886588037014008, -0.007198587525635958, -0.0013678251998499036, -0.00046754872892051935, -7.152555099310121e-07, -7.664863369427621e-05, -7.73638384998776e-05, -7.70062324590981e-05, -0.0002047805901383981, -0.0007439468172378838, -4.088794958079234e-05, -1.8954096958623268e-05, -0.0002611534437164664, -0.007766408380120993, -0.000668659748043865, -0.00399790657684207, -1.0700840950012207, -0.0017028844449669123, -0.02691926434636116, -3.166001319885254, -0.6123952269554138, -1.1121002435684204, -0.01948384754359722, -0.0012711548479273915, -0.11487742513418198, -0.5951629281044006, -0.3485328257083893, -0.17854048311710358, -2.333759307861328, -0.05053098872303963, -0.04733766242861748, -0.0013512775767594576, -0.4146558344364166, -0.00018606838420964777, -0.03207266330718994, -0.002664945786818862, -0.004522453062236309, -0.00045003299601376057, -0.0004693360242526978, -0.0005620330339297652, -0.00047874910524114966, -0.0014488924061879516, -0.1415083110332489, -0.009398856200277805, -0.0002728328399825841, -3.576272320060525e-06, -0.044435642659664154, -1.9073468138230965e-06, -0.00030763185350224376, -0.00011705666838679463, -0.0011995985405519605, -0.0006083783227950335, -2.50339189733495e-06, -0.036342792212963104, -0.001847109873779118, -0.7272056341171265, -0.14731411635875702, -1.4765143394470215, -0.056701261550188065, -1.452298879623413, -0.00012039413559250534, -0.4241396486759186, -2.8141884803771973, -3.005502700805664, -2.0852153301239014, -0.00015233787416946143, -1.6191422939300537, -8.40390202938579e-05, -0.006617418024688959, -0.00011574551899684593, -0.00016020445036701858, -0.0019612142350524664, -0.34095898270606995, -0.023802367970347404, -0.0007471630233339965, -2.3841855067985307e-07, -0.00016699827392585576, -0.12032769620418549, -0.017978211864829063, -0.0009168949909508228, -0.0035183453001081944, -2.9802276912960224e-06, -0.001209838199429214, -7.152555099310121e-07, -0.0001652104256208986, -7.986703712958843e-05, -0.0007497837068513036, -0.0008630603551864624, -1.0251946150674485e-05, -0.005458450876176357, -0.9483762383460999, -0.003858384909108281, -0.0459466278553009, -0.007189237512648106, -1.7850240468978882, -0.0015947017818689346, -0.5672744512557983, -0.03890598192811012, -2.4836151599884033, -0.004049673210829496, -0.0017049076268449426, -0.16260306537151337, -1.516487956047058, -2.8586349487304688, -2.3797519207000732, -0.24861684441566467, -0.95228111743927, -0.4124022424221039, -0.000692961853928864, -0.007791721727699041, -0.00043132537393830717, -0.027037737891077995, -0.3677177429199219, -0.20705527067184448, -0.2781383693218231, -1.0825471878051758, -2.012451171875, -0.3896621763706207, -1.1862369775772095, -1.6944897174835205, -0.24704769253730774, -0.6636701226234436, -1.5076271295547485, -0.4530636966228485, -0.9896727800369263, -1.3193689584732056, -0.6543658375740051, -1.4536852836608887, -0.9869188666343689, -0.4496028423309326, -0.5629380941390991, -2.5064516067504883, -0.04934922605752945, -1.1111640930175781, -3.3029625415802, -2.304190158843994, -0.01759878359735012, -1.9786217212677002, -0.7289829850196838, -0.7324857115745544, -0.67522794008255, -0.10846966505050659, -0.16196638345718384, -0.8434532284736633, -1.9212210178375244, -0.55616694688797, -2.237210750579834, -0.0009994279826059937, -0.6169640421867371, -2.4078216552734375, -2.933739185333252, -0.06315068155527115, -0.043001510202884674, -3.5688021183013916, -0.10297635197639465, -0.03726361691951752, -1.8060383796691895, -0.00019929806876461953, -0.0001935771433636546, -1.3778645992279053, -0.09538551419973373, -1.2908878326416016], "finish_reason": "stop"}], "metrics": {"energy": 815.7832993602755, "energy_per_token": 3.3710053692573365, "time": 20.390907, "time_per_token": 0.08425994628099173}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    data = []\n    for csv_file in csv_files:\n        file_path = os.path.join(data_dir, csv_file)\n        df = pd.read_csv(file_path)\n        data.append(df)\n\n    return pd.concat(data, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "data", " =", " []", "\n", "    ", "for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", ")", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", "\n", "        ", "data", ".", "append", "(", "df", ")", "\n", "\n", "    ", "return", " pd", ".", "concat", "(", "data", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "def"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -1.9424811601638794, -1.3900871276855469, -0.3183480501174927, -0.023148072883486748, -0.16266386210918427, -0.02269182726740837, -0.890359103679657, -0.0017660749144852161, -0.23625172674655914, -0.028579968959093094, -0.001447345013730228, -0.006574074272066355, -2.0265558760002023e-06, -1.2040065485052764e-05, -1.0490362910786644e-05, -0.000532008707523346, -0.0007362039177678525, -0.00509511586278677, -0.5659712553024292, -0.07608925551176071, -0.006835529115051031, -0.0004409771354403347, -0.0013808010844513774, -8.344646857949556e-07, -0.0001382732152706012, -2.539125671319198e-05, -0.0009813260985538363, -0.00027426297310739756, -0.0008093419019132853, -3.802703940891661e-05, -3.45700973412022e-05, -0.00020585325546562672, -0.0019461041083559394, -8.344646857949556e-07, -4.768360213347478e-06, -3.182837463100441e-05, -0.0010719512356445193, -0.0027593416161835194, -0.019032476469874382, -0.5057100653648376, -0.014357829466462135, -0.0007309625507332385, -2.109982233378105e-05, -0.005036287009716034, -2.861018856492592e-06, -0.0003943857445847243, -7.390703103737906e-05, -0.0027632645796984434, -0.00016616393986623734, -1.9073468138230965e-06, -0.08449294418096542, -0.004620114807039499, -0.003588310442864895, -0.015281382948160172, -0.0003292018664069474, -0.00016211149340961128, -0.00017581824795342982, -0.0001245659514097497, -0.0038220465648919344, -0.0005441615357995033, -0.05451956391334534, -0.0010202685371041298, -0.5495355725288391, -0.0006202919175848365, -2.861018856492592e-06, -0.00014935807848814875, -0.0007159530650824308, -0.0020625763572752476, -0.21020331978797913, -0.235004261136055, -3.3378546504536644e-06, -0.00010001159535022452, -0.0012048374628648162, -0.0028956886380910873, -0.12645481526851654, -0.10465092211961746, -0.040563058108091354, -1.172817587852478], "finish_reason": "stop"}], "metrics": {"energy": 325.5049249267578, "energy_per_token": 3.4263676308079765, "time": 7.7950354, "time_per_token": 0.08205300421052632}}
{"outputs": [{"text": "# If empty list of files, return empty dataframe\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Initialize empty list to store dataframes\n    df_list = []\n\n    # Loop through CSV file list\n    for file in csv_files:\n        # Get full file path\n        file_path = os.path.join(data_dir, file)\n        # Read CSV file and append to list\n        df_list.append(pd.read_csv(file_path))\n\n    # Concatenate dataframes into single dataframe\n    df = pd.concat(df_list)\n    return df\n\ntask_func(data_dir = '/home/marco/Desktop/Python/Learning/data', csv_files = ['test_1.csv', 'test_2.csv'])", "tokens": ["#", " If", " empty", " list", " of", " files", ",", " return", " empty", " data", "frame", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Initialize", " empty", " list", " to", " store", " data", "frames", "\n", "    ", "df", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " CS", "V", " file", " list", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Get", " full", " file", " path", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "        ", "#", " Read", " CS", "V", " file", " and", " append", " to", " list", "\n", "        ", "df", "_", "list", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", "))", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " data", "frames", " into", " single", " data", "frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "df", "_", "list", ")", "\n", "    ", "return", " df", "\n", "\n", "task", "_", "func", "(", "data", "_", "dir", " =", " '/", "home", "/", "m", "arc", "o", "/", "Desktop", "/", "Python", "/", "Learning", "/", "data", "'", ",", " c", "sv", "_", "files", " =", " ['", "test", "_", "1", ".", "csv", "'", ",", " '", "test", "_", "2", ".", "csv", "'])", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.445582389831543, -1.9494150876998901, -3.326417922973633, -0.05814851447939873, -0.4390227794647217, -0.19366955757141113, -1.9192076921463013, -0.069119893014431, -0.7264493703842163, -2.94254732131958, -0.06810824573040009, -0.14554227888584137, -0.0014578201808035374, -0.02155286818742752, -0.1886676847934723, -0.009085975587368011, -1.4305104514278355e-06, -1.2874520507466514e-05, -0.00035339308669790626, -0.010455476120114326, -0.009495098143815994, -0.006404470652341843, -0.05567539110779762, -0.0029443029779940844, -7.414542778860778e-05, -8.892617915989831e-05, -0.05809362232685089, -0.00362038123421371, -0.3846966326236725, -0.0017170461360365152, -0.16977693140506744, -2.421733856201172, -2.0342397689819336, -0.234812930226326, -0.3122011721134186, -0.1775640845298767, -0.4416252076625824, -0.05424533039331436, -0.06981795281171799, -0.0001823735801735893, -1.5462727546691895, -0.02124505117535591, -0.022372936829924583, -0.004621420055627823, -0.005908286198973656, -9.905801562126726e-05, -0.06777934730052948, -0.0005983707960695028, -0.016757087782025337, -0.6942102909088135, -0.17906944453716278, -3.0406339168548584, -0.0018516314448788762, -2.353133201599121, -1.4207342863082886, -0.6357892751693726, -0.00012706902634818107, -0.0021738011855632067, -0.8100780248641968, -0.11801358312368393, -0.0013092526933178306, -1.0728830375228426e-06, -7.748573807475623e-06, -1.4305104514278355e-06, -0.00021646064124070108, -0.00036197309964336455, -0.08879013359546661, -0.05799204856157303, -3.2365050315856934, -0.8065904974937439, -0.9002994298934937, -0.0830666720867157, -0.3841199576854706, -0.00030727434204891324, -0.22971181571483612, -0.15401534736156464, -0.014242545701563358, -0.0009074860718101263, -0.008295957930386066, -1.311301275563892e-06, -0.00024148885859176517, -4.827859811484814e-05, -0.003171060001477599, -0.0002269487304147333, -0.0013569919392466545, -3.111314072157256e-05, -1.728519782773219e-05, -0.00030310326837934554, -0.008909827098250389, -0.0015767297009006143, -0.0021295505575835705, -0.8417805433273315, -0.018332215026021004, -0.4569724500179291, -0.2703680992126465, -5.245071224635467e-05, -0.18661126494407654, -2.5547666549682617, -0.31964728236198425, -0.15457113087177277, -0.5175908803939819, -0.3973255157470703, -0.00018344627460464835, -0.02120128646492958, -0.1420016884803772, -0.002079825848340988, -0.0005086558521725237, -0.00012742661056108773, -0.0002138386043952778, -0.005655122920870781, -8.940656698541716e-06, -0.001840565470047295, -1.1205610462639015e-05, -0.00017093151109293103, -0.00013267113536130637, -0.001500314916484058, -0.0010363452602177858, -2.0265558760002023e-06, -0.059306561946868896, -0.0007823029300197959, -0.032609809190034866, -0.002742341486737132, -0.003944000229239464, -0.17324596643447876, -0.0003500564198475331, -0.0038986403960734606, -0.001134824356995523, -0.846601128578186, -0.016843246296048164, -1.0070133209228516, -0.8511584401130676, -0.32515978813171387, -0.0009090343955904245, -0.10792971402406693, -0.0001399419124936685, -0.7748948335647583, -0.06420357525348663, -0.0002138386043952778, -2.861018856492592e-06, -3.0040289857424796e-05, -0.001022531185299158, -0.000553335587028414, -2.729855441430118e-05, -2.145764938177308e-06, -1.1178227663040161, -0.004104523919522762, -1.7294167280197144, -0.41339099407196045, -0.001364372787065804, -0.3233129382133484, -0.04238765686750412, -4.218780994415283, -0.014615965075790882, -0.07560338079929352, -1.5692323446273804, -1.2911832332611084, -0.0006398299592547119, -0.005414108280092478, -2.418952465057373, -1.314927577972412, -2.2583084106445312, -0.005759785883128643, -3.3963980674743652, -2.3072526454925537, -0.7431708574295044, -0.02609769068658352, -1.6970287561416626, -0.007763924542814493, -3.013559103012085, -0.5509198307991028, -4.515511512756348, -0.7015706896781921, -3.189537525177002, -0.7288275957107544, -0.03225020691752434, -0.19599585235118866, -1.3470558769768104e-05, -7.950943836476654e-05, -0.0003270567976869643, -0.11433422565460205, -0.11656530201435089, -2.4558634757995605, -1.3018014430999756, -1.1687160730361938, -0.04679153859615326, -0.0045853471383452415, -0.03492140397429466, -0.006797404494136572, -0.190705806016922, -0.012538296170532703, -0.0065794032998383045, -0.028496205806732178, -0.003131844801828265, -0.0008228015503846109, -0.5570382475852966, -1.5145343542099, -9.417489309271332e-06, -1.4305104514278355e-06, -3.099436753473128e-06, -5.602820692729438e-06, -2.1783618927001953, -0.005497219506651163], "finish_reason": "stop"}], "metrics": {"energy": 692.652496707916, "energy_per_token": 3.4289727559797822, "time": 17.00649, "time_per_token": 0.08419054455445545}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    dfs = [pd.read_csv(os.path.join(data_dir, f)) for f in csv_files]\n    return pd.concat(dfs, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "d", "fs", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "    ", "return", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "#"], "logprobs": [-0.9144620895385742, -0.30658242106437683, -0.0923735648393631, -8.344646857949556e-07, -2.3603161025675945e-05, -3.0397906812140718e-05, -0.025256726890802383, -0.05377368628978729, -0.006116599775850773, -0.09745323657989502, -0.004646456800401211, -7.652943895664066e-05, -7.033100700937212e-05, -0.03367297351360321, -0.02500120736658573, -0.5283046960830688, -0.0011306566884741187, -1.649678349494934, -0.0014688903465867043, -0.03398586064577103, -1.2360594272613525, -0.03170674666762352, -1.1920858014491387e-05, -0.002463760320097208, -5.483612312673358e-06, -0.00042274597217328846, -0.0004555141495075077, -0.007715662010014057, -9.536738616588991e-07, -0.000771820661611855, -6.8662193370983e-05, -0.0004189328756183386, -0.00026294111739844084, -0.0014561536954715848, -0.00012337400403339416, -7.998623186722398e-05, -0.0003196682082489133, -1.1201555728912354, -0.05282452702522278, -0.0029010374564677477, -0.0003781795676331967, -0.00010668662434909493, -0.003040217561647296, -2.0265558760002023e-06, -2.0861407392658293e-05, -2.884823152271565e-05, -0.00534853944554925, -0.0026454473845660686, -0.1601027250289917, -0.33485162258148193, -0.0019267105963081121, -1.0967194612021558e-05, -9.452849917579442e-05, -0.0025964616797864437, -0.0006460248259827495, -7.152555099310121e-07, -0.18000058829784393, -0.2052314281463623, -1.2040065485052764e-05, -0.0002775999018922448, -0.0038631348870694637, -0.0028518266044557095, -0.2830437421798706, -0.2573833763599396, -0.05760297179222107, -2.039933681488037], "finish_reason": "stop"}], "metrics": {"energy": 206.8984850387574, "energy_per_token": 3.1348255308902635, "time": 5.2716722, "time_per_token": 0.07987382121212122}}
{"outputs": [{"text": "try:\n        if csv_files:\n            # Create a list of file paths to all CSV files in the specified directory\n            file_paths = [os.path.join(data_dir, f) for f in csv_files]\n\n            # Read each file into a DataFrame and concatenate them all together\n            df = pd.concat([pd.read_csv(f) for f in file_paths], ignore_index=True)\n\n        # If csv_files list is empty, return an empty DataFrame\n        else:\n            df = pd.DataFrame()\n\n        # Print the number of rows in the DataFrame\n        print(f\"\\n\\nNumber of rows in merged DataFrame: {len(df)}\\n\\n{df.head()}\\n\\n{df.tail()}\\n\\n\")\n\n        return df\n\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        raise e", "tokens": ["try", ":", "\n", "        ", "if", " c", "sv", "_", "files", ":", "\n", "            ", "#", " Create", " a", " list", " of", " file", " paths", " to", " all", " CS", "V", " files", " in", " the", " specified", " directory", "\n", "            ", "file", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "\n", "            ", "#", " Read", " each", " file", " into", " a", " Data", "Frame", " and", " concaten", "ate", " them", " all", " together", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "f", ")", " for", " f", " in", " file", "_", "paths", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "        ", "#", " If", " c", "sv", "_", "files", " list", " is", " empty", ",", " return", " an", " empty", " Data", "Frame", "\n", "        ", "else", ":", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "        ", "#", " Print", " the", " number", " of", " rows", " in", " the", " Data", "Frame", "\n", "        ", "print", "(", "f", "\"", "\\", "n", "\\", "nNumber", " of", " rows", " in", " merged", " Data", "Frame", ":", " {", "len", "(", "df", ")}\\", "n", "\\", "n", "{", "df", ".", "head", "()", "}\\", "n", "\\", "n", "{", "df", ".", "tail", "()", "}\\", "n", "\\", "n", "\"", ")", "\n", "\n", "        ", "return", " df", "\n", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "An", " error", " occurred", ":", " {", "str", "(", "e", ")}", "\"", ")", "\n", "        ", "raise", " e"], "logprobs": [-3.478337287902832, -0.0008644896443001926, -0.004823832772672176, -0.033605195581912994, -0.7669322490692139, -1.9428147077560425, -5.364403477869928e-06, -4.0649541915627196e-05, -0.00012313561455812305, -0.18098725378513336, -0.09476591646671295, -0.009514817968010902, -2.044058322906494, -1.5886187553405762, -0.6249048709869385, -0.07653746753931046, -0.10203780233860016, -2.049255609512329, -0.0775672122836113, -2.78416109085083, -3.001138210296631, -0.25323888659477234, -0.011852790601551533, -0.001555781695060432, -0.07740503549575806, -0.03635383024811745, -0.8668704032897949, -0.029244383797049522, -0.07295070588588715, -0.0014180614380165935, -0.3759227991104126, -0.04217647761106491, -0.11703730374574661, -0.002213886706158519, -0.014544770121574402, -0.02477399632334709, -2.0265558760002023e-06, -7.128461584215984e-05, -9.775113539944869e-06, -0.0003406421164982021, -0.000254241080256179, -0.0018491327064111829, -2.992108420585282e-05, -0.00013982271775603294, -0.00031537804170511663, -2.259861946105957, -0.08838394284248352, -0.0036064840387552977, -0.00025781645672395825, -5.8410845667822286e-05, -0.007676151115447283, -2.3841855067985307e-07, -1.156323378381785e-05, -6.556489552167477e-06, -0.05766700208187103, -0.0031809229403734207, -0.8104588985443115, -0.004189524333924055, -0.006725887302309275, -1.108992338180542, -0.34239551424980164, -0.6345885396003723, -0.2717004418373108, -0.0027977393474429846, -0.39032191038131714, -0.001122321467846632, -0.34406858682632446, -0.4059208631515503, -8.272782724816352e-05, -0.22069762647151947, -2.9046242237091064, -0.5867670178413391, -0.23731224238872528, -0.0006266061100177467, -0.7602914571762085, -0.04461830109357834, -0.002850400283932686, -3.6954811548639555e-06, -0.0009162995265796781, -0.3545107841491699, -0.00670646782964468, -1.9430925021879375e-05, -0.00841252040117979, -2.50339189733495e-06, -0.0001248043408850208, -0.00034278715611435473, -1.2203232049942017, -0.11217702180147171, -0.0009539344464428723, -2.932505594799295e-05, -1.2278481335670222e-05, -0.004045161418616772, -6.794906312279636e-06, -4.5060096454108134e-05, -0.3863300383090973, -0.0001915509783430025, -0.04250316694378853, -6.794906312279636e-06, -2.777537883957848e-05, -0.005432248581200838, -0.005260909907519817, -0.01859506033360958, -0.00214406312443316, -0.7963034510612488, -1.506959080696106, -2.9009668827056885, -0.18811030685901642, -2.700669765472412, -0.0002026352594839409, -0.002902345033362508, -0.02097601443529129, -2.529984712600708, -0.015497026965022087, -0.00573015445843339, -0.13097502291202545, -0.5501692295074463, -0.03429139405488968, -0.0009072478278540075, -0.005310713779181242, -0.0001586549769854173, -0.04533674195408821, -0.001870788517408073, -0.012516045942902565, -0.00028832571115344763, -0.0010468247346580029, -0.0034404154866933823, -0.1127019003033638, -0.0011023165425285697, -0.0008405489497818053, -7.152555099310121e-07, -0.00015352977789007127, -0.11825583875179291, -0.003474273020401597, -0.11517058312892914, -0.33902835845947266, -1.5721163749694824, -2.41259503364563, -0.34794601798057556, -3.3123741149902344, -0.002159527037292719, -0.1974572092294693, -1.517336130142212, -0.01618918962776661, -0.6758228540420532, -0.0009807306341826916, -0.31161266565322876, -0.0008860476082190871, -0.14981138706207275, -0.008953542448580265, -0.14316591620445251, -0.10431835800409317, -2.74066424369812, -2.0245866775512695, -0.7979492545127869, -1.3757792711257935, -0.001780949649401009, -0.20393404364585876, -0.29503872990608215, -2.8302817344665527, -0.4911460876464844, -0.009484234265983105, -0.11007537692785263, -0.007251135539263487, -0.14306457340717316, -8.797258487902582e-05, -0.000581572181545198, -0.24439851939678192, -0.004722869023680687, -0.42675670981407166, -0.030053311958909035, -2.2416672706604004, -0.05962511897087097, -0.2751105725765228, -0.013810906559228897, -0.03786535561084747, -0.7572953701019287, -0.0017970141489058733, -0.29382866621017456, -0.032536882907152176, -1.2132396697998047, -0.006715704221278429, -0.02324206940829754, -0.4099043607711792, -0.041806694120168686, -0.7069932818412781, -0.00304758595302701, -0.3128623366355896, -0.04054085165262222, -0.17204999923706055, -0.0032574469223618507, -0.003905052551999688, -0.12541964650154114, -0.23403431475162506, -0.2841965854167938, -0.002753992099314928, -0.047540366649627686, -0.149760901927948, -0.0024365282151848078, -0.3560732305049896, -0.05605721473693848, -0.006988842040300369, -0.07615885883569717, -0.00041786045767366886, -0.006127144675701857, -0.005094760097563267, -0.5939913392066956, -0.004792275372892618, -0.09312400966882706, -0.021788975223898888, -0.5636222958564758, -0.03042978048324585, -0.0306649561971426, -0.29553988575935364, -0.0015090041561052203, -1.527268648147583, -3.814624506048858e-05, -2.2649508537142538e-05, -0.041070375591516495, -0.0038993528578430414, -0.10219387710094452, -0.2096380889415741, -0.2875514626502991, -0.6323963403701782, -0.8622978329658508], "finish_reason": "stop"}], "metrics": {"energy": 767.2999269943228, "energy_per_token": 3.425446102653227, "time": 18.911839, "time_per_token": 0.08442785267857143}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n\n    csv_paths = [os.path.join(data_dir, file) for file in csv_files]\n    dfs = [pd.read_csv(file_path) for file_path in csv_paths]\n    return pd.concat(dfs, ignore_index=True)", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "csv", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", " for", " file", " in", " c", "sv", "_", "files", "]", "\n", "    ", "d", "fs", " =", " [", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", " for", " file", "_", "path", " in", " c", "sv", "_", "paths", "]", "\n", "    ", "return", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.9144620895385742, -1.6842260360717773, -0.00047386385267600417, -0.008762244135141373, -7.068861305015162e-05, -0.00022098960471339524, -0.013527864590287209, -0.11487678438425064, -0.0007482351502403617, -0.0006962973857298493, -0.00396727304905653, -0.03497286140918732, -0.009074989706277847, -0.1345304250717163, -0.009337209165096283, -0.00010156115604331717, -0.0001438752660760656, -0.052017293870449066, -0.02035035379230976, -0.8109994530677795, -0.0013974672183394432, -3.137568950653076, -0.0019657351076602936, -0.8390051126480103, -0.0024720842484384775, -0.04412806034088135, -0.016687333583831787, -1.0728830375228426e-06, -0.00029452278977259994, -1.9907753085135482e-05, -0.0007564543629996479, -0.00026079590315930545, -0.0019743014127016068, -6.985420623095706e-05, -0.0001998939987970516, -0.00029762129997834563, -0.7429803609848022, -0.07990012317895889, -0.0018491327064111829, -0.00012981049076188356, -5.98412734689191e-05, -0.0013547299895435572, -1.2755313036905136e-05, -2.396077979938127e-05, -2.47952248173533e-05, -0.0057596671395003796, -0.006312905810773373, -0.26232799887657166, -0.7996474504470825, -0.0003327769518364221, -0.01584252156317234, -0.05226815491914749, -0.0060272603295743465, -1.4305012882687151e-05, -0.0009739422821439803, -7.033323527139146e-06, -0.00018594920402392745, -0.00031704644788987935, -2.1680908203125, -2.6929619312286377, -0.023056630045175552, -0.10126826912164688, -0.0005852655158378184, -0.00011705666838679463, -1.847726889536716e-05, -5.364403477869928e-06, -7.045020902296528e-05, -0.005807668901979923, -1.1920928244535389e-07, -4.887569048150908e-06, -0.0003579214389901608, -0.001632668194361031, -0.0021281230729073286, -0.4749350845813751, -0.8271376490592957, -0.0012888943310827017, -1.5616295058862306e-05, -4.3987260141875595e-05, -0.0015545914648100734, -0.001001571537926793, -5.960462772236497e-07, -0.19804687798023224, -0.25660499930381775, -1.2636104656849056e-05, -0.00015817821258679032, -0.004700325895100832, -0.0035598021931946278, -1.9599909782409668, -1.9788545614574105e-05, -1.6689286894688848e-06, -4.291525328881107e-06, -1.6093124941107817e-05, -0.14886660873889923], "finish_reason": "stop"}], "metrics": {"energy": 300.3261326103211, "energy_per_token": 3.2293132538744205, "time": 7.5809875, "time_per_token": 0.08151599462365591}}
