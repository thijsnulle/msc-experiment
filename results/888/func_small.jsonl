{"outputs": [{"text": "if csv_files == []:\n        return pd.DataFrame()\n    return pd.concat([pd.read_csv(os.path.join(data_dir, filename)) for filename in csv_files])", "tokens": ["if", " c", "sv", "_", "files", " ==", " []", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", "))", " for", " filename", " in", " c", "sv", "_", "files", "])"], "logprobs": [-0.5887683629989624, -1.4580341577529907, -0.00011503035057103261, -1.5616295058862306e-05, -8.4638240878121e-06, -1.1382075548171997, -0.034795571118593216, -0.04904882609844208, -0.10061069577932358, -0.003814446274191141, -0.19076037406921387, -0.043114326894283295, -0.0001720042055239901, -0.0027607681695371866, -0.1160619780421257, -0.016165142878890038, -0.5900914669036865, -2.697679042816162, -0.03625726327300072, -0.0004631400224752724, -0.012073650024831295, -0.0637751966714859, -0.006246211007237434, -0.0001212284987559542, -0.0004848258395213634, -4.172316494077677e-06, -0.00022384998737834394, -0.00129341846331954, -0.22207066416740417, -1.1205610462639015e-05, -0.0003846143954433501, -0.012139839120209217, -0.0007382289622910321, -0.00045908879837952554, -0.006975109688937664, -1.4305104514278355e-06, -0.0005536930402740836, -0.0005752577562816441, -2.098726749420166, -0.046310216188430786, -0.1485098898410797, -0.0007737264968454838, -0.000532842765096575, -0.0055187963880598545, -0.00022957073815632612, -5.376194530981593e-05, -3.182837463100441e-05, -0.6277281045913696], "finish_reason": "stop"}], "metrics": {"energy": 86.28275887298584, "energy_per_token": 1.7975574765205382, "time": 2.7369707, "time_per_token": 0.05702022291666667}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n\n    file_paths = [os.path.join(data_dir, file_name) for file_name in csv_files]\n    return pd.concat([pd.read_csv(file_path) for file_path in file_paths])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "file", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", ")", " for", " file", "_", "name", " in", " c", "sv", "_", "files", "]", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", ")", " for", " file", "_", "path", " in", " file", "_", "paths", "])", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.62227863073349, -0.0003475538978818804, -3.686262845993042, -0.08845628798007965, -0.2639015018939972, -0.010874769650399685, -0.14330868422985077, -0.07104962319135666, -5.602820692729438e-06, -9.476689592702314e-05, -0.005464853253215551, -0.0016577800270169973, -0.0003381395654287189, -0.0038051833398640156, -1.811964830267243e-05, -4.029192859889008e-05, -0.00033408781746402383, -0.6636623740196228, -0.39029189944267273, -0.02924530953168869, -0.0009006972541101277, -0.011099499650299549, -0.00015162272029556334, -1.3232143828645349e-05, -9.762764238985255e-05, -0.00011073929636040702, -0.0016612313920632005, -0.00015043080202303827, -2.706014311115723e-05, -1.1444026313256472e-05, -0.003837722120806575, -0.0023977598175406456, -0.2630949914455414, -1.0571093559265137, -0.004870930220931768, -8.368142152903602e-05, -0.022281425073742867, -0.045107271522283554, -0.0018340209499001503, -1.2874520507466514e-05, -0.00019143179815728217, -4.768370445162873e-07, -0.00014661667228210717, -0.0006150499684736133, -0.5325124859809875, -0.06108710169792175, -0.00725717144086957, -0.0778871700167656, -0.012826560996472836, -7.557583012385294e-05, -1.2159273865108844e-05, -9.77468371274881e-05, -0.0001358893496217206, -0.0007065422250889242, -1.1920928244535389e-07, -4.291525328881107e-06, -0.392167329788208, -1.0517489910125732, -1.1920928244535389e-07, -3.576278118089249e-07, -5.006664650863968e-05, -0.00012420836719684303, -0.059679362922906876], "finish_reason": "stop"}], "metrics": {"energy": 78.24621123027799, "energy_per_token": 0.9542220881741219, "time": 3.3810031, "time_per_token": 0.04123174512195122}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    # Read the CSV files into a dictionary\n    csv_dict = {\n        file_name: pd.read_csv(os.path.join(data_dir, file_name))\n        for file_name in csv_files\n    }\n    # Concatenate the data from the dictionary using pd.concat\n    return pd.concat(csv_dict, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "#", " Read", " the", " CS", "V", " files", " into", " a", " dictionary", "\n", "    ", "csv", "_", "dict", " =", " {", "\n", "        ", "file", "_", "name", ":", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", "))", "\n", "        ", "for", " file", "_", "name", " in", " c", "sv", "_", "files", "\n", "    ", "}", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " data", " from", " the", " dictionary", " using", " pd", ".", "concat", "\n", "    ", "return", " pd", ".", "concat", "(", "csv", "_", "dict", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "if"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.9070006012916565, -2.850656270980835, -3.19057559967041, -1.1306840181350708, -0.5929654836654663, -0.003638910362496972, -0.036757923662662506, -0.5082745552062988, -0.3934271037578583, -1.2804229259490967, -0.470378041267395, -0.00206055399030447, -0.9304988980293274, -0.0020449694711714983, -1.8592796325683594, -0.014610325917601585, -0.9544146656990051, -2.4061648845672607, -0.004792749881744385, -1.6691715717315674, -0.9337648153305054, -0.042890507727861404, -0.1249382272362709, -0.019440824165940285, -0.0004557524516712874, -0.0004694551753345877, -2.145764938177308e-06, -0.00029488030122593045, -0.0008666335488669574, -0.14789655804634094, -2.861018856492592e-06, -8.368142152903602e-05, -0.004081848077476025, -0.00011812942830147222, -0.00012158608296886086, -0.005223792511969805, -3.576278118089249e-07, -0.00014447122521232814, -0.0002747396647464484, -0.002644615015015006, -7.724463648628443e-05, -0.0002791491860989481, -0.34786656498908997, -0.20879647135734558, -0.0016870565013960004, -0.0036220441106706858, -0.00027414379292167723, -1.537788011773955e-05, -0.00015877417172305286, -0.0073272306472063065, -0.015910575166344643, -0.0006039702566340566, -4.768370445162873e-07, -8.296622399939224e-05, -0.025424674153327942, -0.056097790598869324, -0.00013529339048545808, -0.00028725311858579516, -0.2932423949241638, -0.06642016023397446, -0.46825143694877625, -0.00031919151660986245, -0.016223086044192314, -0.0013213959755375981, -0.17754031717777252, -1.3253586292266846, -1.5542949438095093, -0.4508644640445709, -0.4502604305744171, -2.521942138671875, -0.7213414311408997, -0.0002885640424210578, -0.0029882797971367836, -0.4647184908390045, -0.0007955246837809682, -0.6693643927574158, -0.003076584078371525, -0.00024327656137757003, -0.00013755806139670312, -0.018168456852436066, -0.12385135889053345, -0.0002631794777698815, -0.0007095203618519008, -0.865091860294342, -2.3931500911712646, -2.50339189733495e-06, -0.0012388896429911256, -0.000776347063947469, -0.011824280954897404, -0.38272425532341003, -0.16534000635147095, -0.043907780200242996, -0.7318671941757202], "finish_reason": "stop"}], "metrics": {"energy": 116.25241000366206, "energy_per_token": 1.0764112037376117, "time": 4.426959, "time_per_token": 0.04099036111111111}}
{"outputs": [{"text": "if csv_files:\n        return pd.concat([pd.read_csv(os.path.join(data_dir, file)) for file in csv_files], axis=0)\n    else:\n        return pd.DataFrame()", "tokens": ["if", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", " for", " file", " in", " c", "sv", "_", "files", "]", ",", " axis", "=", "0", ")", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "if"], "logprobs": [-0.5293303728103638, -1.47682785987854, -9.321732068201527e-05, -1.3470558769768104e-05, -8.106198947643861e-06, -0.6071025729179382, -0.04243335872888565, -0.008498928509652615, -2.747708320617676, -0.0465581901371479, -8.356221951544285e-05, -0.011907568201422691, -0.046061959117650986, -0.006127974018454552, -8.177422569133341e-05, -0.00046695294440723956, -5.006777428206988e-06, -0.0001958416833076626, -0.0011214879341423512, -0.10820811986923218, -6.556489552167477e-06, -0.00042143522296100855, -0.006527293939143419, -0.00021920185827184469, -0.0003033416287507862, -0.005359092261642218, -4.494089080253616e-05, -0.00044050050200894475, -0.00037174468161538243, -1.0431126356124878, -0.7582107782363892, -0.09919548034667969, -0.00026520551182329655, -0.00013290952483657748, -0.0028292411006987095, -0.0014299653703346848, -2.3841855067985307e-07, -1.1801649634435307e-05, -0.7938633561134338, -0.0016520674107596278, -0.9926655888557434, -0.0534738227725029, -0.09291404485702515, -0.1764376312494278, -0.03921310976147652, -0.03229672089219093, -0.09894748032093048, -0.000243634101934731, -0.006506804842501879, -0.00028451209072954953, -0.01007530651986599, -0.01890954189002514, -5.8410845667822286e-05, -0.0021475127432495356, -0.21652859449386597, -0.8656984567642212, -0.03716713935136795, -0.6369851231575012], "finish_reason": "stop"}], "metrics": {"energy": 82.66537799835204, "energy_per_token": 1.4252651379026213, "time": 2.3323007, "time_per_token": 0.040212081034482754}}
{"outputs": [{"text": "df_list = []\n    for csv_file in csv_files:\n        path = os.path.join(data_dir, csv_file)\n        df = pd.read_csv(path)\n        df_list.append(df)\n    if len(df_list) == 0:\n        return pd.DataFrame()\n    elif len(df_list) == 1:\n        return df_list[0]\n    else:\n        return pd.concat(df_list)", "tokens": ["df", "_", "list", " =", " []", "\n", "    ", "for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", ")", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "path", ")", "\n", "        ", "df", "_", "list", ".", "append", "(", "df", ")", "\n", "    ", "if", " len", "(", "df", "_", "list", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "elif", " len", "(", "df", "_", "list", ")", " ==", " ", "1", ":", "\n", "        ", "return", " df", "_", "list", "[", "0", "]", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "concat", "(", "df", "_", "list", ")", "\n", "\n", "if"], "logprobs": [-2.9831552505493164, -1.2126961946487427, -0.16785703599452972, -0.031316086649894714, -0.48275619745254517, -0.014221156015992165, -0.32319024205207825, -0.26767444610595703, -1.6717767715454102, -0.002238270128145814, -0.04617010056972504, -0.03380655497312546, -0.004355231299996376, -0.017324546352028847, -0.014812959358096123, -0.00020382710499688983, -4.4225667807040736e-05, -0.004142869729548693, -0.005207189824432135, -0.003671098267659545, -2.1423139572143555, -0.03655968979001045, -0.03601856902241707, -6.6756979322235566e-06, -9.870042413240299e-05, -0.007567784748971462, -0.0021759422961622477, -0.0006717570940963924, -0.004770564381033182, -3.4570634852570947e-06, -0.0001284993631998077, -0.0002754547167569399, -0.004100131336599588, -0.0016824151389300823, -3.099436753473128e-06, -0.00042655906872823834, -0.00033098942367359996, -0.006171692628413439, -0.006177261006087065, -0.17125408351421356, -1.7954140901565552, -0.0058492678217589855, -6.9141146923357155e-06, -0.0016254083020612597, -8.940656698541716e-06, -0.00023469554434996098, -8.749579137656838e-05, -0.005002244841307402, -0.3696037530899048, -0.007289597764611244, -0.0032656455878168344, -0.02259160205721855, -0.002696095034480095, -0.00011395759065635502, -0.00035148640745319426, -0.000248401309363544, -0.0002320735511602834, -0.000284154579276219, -0.0031663067638874054, -0.0025552024599164724, -0.43101397156715393, -0.6603620052337646, -0.5650272965431213, -5.9126061387360096e-05, -0.055451661348342896, -0.0006824786541983485, -1.1086402082582936e-05, -0.009527215734124184, -0.30339494347572327, -0.000539634027518332, -0.005104485433548689, -0.002224234864115715, -0.028497712686657906, -0.0007408496458083391, -0.21319836378097534, -0.11344236135482788, -0.0007768235518597066, -0.0013948483392596245, -0.11437346041202545, -0.016803156584501266, -0.03338927403092384, -1.411098599433899, -0.0030816944781690836, -4.8993817472364753e-05, -0.000969297660049051, -0.00042703570215962827, -3.814689989667386e-06, -0.0003978414461016655, -0.025443732738494873, -0.0007715824176557362, -0.00037579628406092525, -0.002355421893298626, -0.01065836288034916, -0.0002535260282456875, -0.014401424676179886, -0.0016001766780391335, -0.02810799889266491, -3.731181277544238e-05, -0.005545233376324177, -6.949660019017756e-05, -0.00014983485743869096, -0.021382169798016548, -0.01264506671577692, -0.11519565433263779, -9.095255518332124e-05, -0.002959873527288437, -0.0007002285565249622, -0.05070788785815239, -0.009809031151235104, -0.0003670972364488989, -0.002314509591087699, -0.0030688594561070204, -0.0002456601650919765, -0.0002740246127359569, -9.417489309271332e-06, -0.9925493597984314, -0.26660266518592834, -0.06687528640031815, -0.5860024690628052], "finish_reason": "stop"}], "metrics": {"energy": 111.65294918727874, "energy_per_token": 0.938260077204023, "time": 5.045499, "time_per_token": 0.042399151260504205}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    csv_paths = [os.path.join(data_dir, f) for f in csv_files]\n\n    df = pd.DataFrame()\n\n    for path in csv_paths:\n        try:\n            df = pd.concat([df, pd.read_csv(path, index_col=0)])\n        except FileNotFoundError as e:\n            print(f\"Error reading file {path}: {e}\")\n\n    return df", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "csv", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "for", " path", " in", " c", "sv", "_", "paths", ":", "\n", "        ", "try", ":", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "path", ",", " index", "_", "col", "=", "0", ")]", ")", "\n", "        ", "except", " File", "NotFound", "Error", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "Error", " reading", " file", " {", "path", "}:", " {", "e", "}\"", ")", "\n", "\n", "    ", "return", " df"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.5181799530982971, -0.0003513672563713044, -2.1793665885925293, -0.0028442188631743193, -1.9195884466171265, -0.014167680405080318, -0.14776945114135742, -0.07943370938301086, -3.576272320060525e-06, -8.546940807718784e-05, -0.009891186840832233, -0.0020503229461610317, -0.00024959311122074723, -0.004139783326536417, -1.4185804502631072e-05, -4.482168878894299e-05, -0.00043215948971919715, -1.0426883697509766, -0.22047437727451324, -0.0033156678546220064, -0.00020001317898277193, -0.0001245659514097497, -0.0030266689136624336, -0.001882330165244639, -0.00010680581908673048, -1.3351351299206726e-05, -0.013665220700204372, -0.004632811527699232, -1.3173704147338867, -0.00017832119192462415, -1.9113929271697998, -0.06828351318836212, -0.0203398410230875, -0.0018623403739184141, -2.7924294471740723, -0.12887336313724518, -0.010699407197535038, -1.0752525329589844, -0.0001299296854995191, -0.15061993896961212, -0.6712692975997925, -0.006755726411938667, -0.0022433847188949585, -1.8954096958623268e-05, -3.576278118089249e-07, -9.083335316972807e-05, -0.00013720047718379647, -0.0012480573495849967, -0.004661289043724537, -2.5823159217834473, -0.00011145447206217796, -0.0021590511314570904, -0.0008843801915645599, -0.22488144040107727, -0.2375897616147995, -0.14064264297485352, -0.00021765247220173478, -0.009343940764665604, -0.01791439764201641, -0.0068110208958387375, -0.001493292162194848, -0.010314964689314365, -6.318072337307967e-06, -0.0005026984144933522, -9.536738616588991e-07, -0.00031799983116798103, -3.397406908334233e-05, -0.0026965707074850798, -1.0196778774261475, -1.1467419862747192, -8.344646857949556e-07, -0.0007366804056800902, -0.0438033863902092, -0.5029219388961792, -0.10692660510540009, -1.6352181434631348, -0.014450892806053162, -0.015129337087273598, -0.0013740155845880508, -0.6463626623153687, -6.758938252460212e-05, -2.5033637939486653e-05, -2.162703275680542, -0.14560988545417786, -0.00024005869636312127, -0.005911011714488268, -0.0007609808817505836, -0.23457998037338257, -0.023280968889594078, -0.14521118998527527, -0.21470782160758972, -1.4157334566116333, -0.7020365595817566, -0.6422969698905945, -1.0221257209777832, -0.043030284345149994, -0.08306381851434708, -0.01960121840238571, -0.12629270553588867, -0.05763076990842819, -0.005686890333890915, -0.007349004503339529, -0.5143673419952393, -0.015870800241827965, -0.08567462116479874, -0.0010668307077139616], "finish_reason": "stop"}], "metrics": {"energy": 112.5305289964676, "energy_per_token": 0.930004371871633, "time": 5.0610347, "time_per_token": 0.04182673305785124}}
{"outputs": [{"text": "# Check if data_dir is a directory\n    if not os.path.isdir(data_dir):\n        print('ERROR: Data directory not found.')\n        return None\n\n    # Check if csv_files is a list of files\n    if not isinstance(csv_files, list):\n        print('ERROR: csv_files argument must be a list of file names.')\n        return None\n\n    # Create a DataFrame from the first file in the list\n    df = pd.read_csv(os.path.join(data_dir, csv_files[0]))\n\n    # Iterate over the remaining files and merge them with df\n    for file in csv_files[1:]:\n        df = pd.concat([df, pd.read_csv(os.path.join(data_dir, file))], sort=False)\n\n    return df", "tokens": ["#", " Check", " if", " data", "_", "dir", " is", " a", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", "):", "\n", "        ", "print", "('", "ERROR", ":", " Data", " directory", " not", " found", ".", "')", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Check", " if", " c", "sv", "_", "files", " is", " a", " list", " of", " files", "\n", "    ", "if", " not", " isinstance", "(", "csv", "_", "files", ",", " list", "):", "\n", "        ", "print", "('", "ERROR", ":", " c", "sv", "_", "files", " argument", " must", " be", " a", " list", " of", " file", " names", ".", "')", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " from", " the", " first", " file", " in", " the", " list", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "files", "[", "0", "]))", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " remaining", " files", " and", " merge", " them", " with", " df", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", "[", "1", ":", "]:", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "))", "]", ",", " sort", "=", "False", ")", "\n", "\n", "    ", "return", " df"], "logprobs": [-1.795003056526184, -1.042848825454712, -0.5301909446716309, -2.41485333442688, -0.08209199458360672, -0.002285013673827052, -0.689021646976471, -0.7333292961120605, -1.5959227085113525, -0.5347222089767456, -0.0012779411626979709, -0.036936815828084946, -0.11720632016658783, -0.009781643748283386, -5.006777428206988e-06, -4.1483970562694594e-05, -0.006115889176726341, -0.011006477288901806, -0.0006005152827128768, -6.09140915912576e-05, -0.0011087467428296804, -7.688703772146255e-05, -2.4199192921514623e-05, -0.005738451145589352, -0.0022693139035254717, -0.001279012649320066, -2.340566873550415, -2.4520044326782227, -2.872854709625244, -0.10359711945056915, -2.2539732456207275, -0.1390765905380249, -2.0552189350128174, -0.06843748688697815, -0.6756478548049927, -0.13385610282421112, -0.002695738337934017, -0.03771211579442024, -0.10883570462465286, -0.6465266942977905, -0.018554339185357094, -0.18738478422164917, -0.0007419217727147043, -0.09301701933145523, -0.5317106246948242, -0.04386773705482483, -0.5938437581062317, -0.00018940561858471483, -0.025947511196136475, -0.007050633896142244, -0.22458523511886597, -0.5449662804603577, -0.1537797749042511, -0.6780032515525818, -2.1030259132385254, -0.11450380831956863, -0.0005874100024811924, -0.038407545536756516, -0.05266157165169716, -0.029624395072460175, -7.676783570786938e-05, -0.00027533553657121956, -2.3841855067985307e-07, -4.410734163684538e-06, -7.581423415103927e-05, -0.005278222728520632, -0.14432446658611298, -0.000979896984063089, -0.0004408579843584448, -0.006975583266466856, -0.02860534004867077, -0.00521062919870019, -0.00038961926475167274, -0.75650554895401, -1.7881233361549675e-05, -0.007920642383396626, -0.004872472491115332, -3.3958442211151123, -0.2922801673412323, -0.00035661060246638954, -0.00929351057857275, -0.0030302342493087053, -0.8045800924301147, -0.6340860724449158, -0.04367901012301445, -0.045936837792396545, -0.003793188836425543, -0.00024256148026324809, -0.0016056514577940106, -0.0013769917422905564, -0.002897114958614111, -0.0001287377526750788, -0.018857136368751526, -0.0003583981015253812, -0.10158310830593109, -3.2356982231140137, -0.7871825695037842, -2.9792160987854004, -0.0023669579531997442, -0.9224537014961243, -0.5115225315093994, -0.9841851592063904, -0.44136449694633484, -0.44690391421318054, -0.3313854932785034, -0.059768643230199814, -0.19323985278606415, -0.00054058717796579, -0.6208710670471191, -0.11620685458183289, -0.02581276185810566, -0.0009370227344334126, -0.013598544523119926, -7.152555099310121e-07, -0.0003150205302517861, -0.0026071625761687756, -0.05669315159320831, -1.4662635294371285e-05, -7.164221460698172e-05, -0.0054841781966388226, -0.00018106251081917435, -6.878139538457617e-05, -0.0014340127818286419, -1.0609570381348021e-05, -8.583032467868179e-06, -0.00010585224663373083, -0.005197346676141024, -0.0024033491499722004, -2.753696753643453e-05, -3.158996332786046e-05, -0.0049972631968557835, -0.00011634149996098131, -0.0440790131688118, -0.005292215384542942, -0.2141738086938858, -0.00015507926582358778, -0.041238319128751755, -1.3316842317581177, -0.0023883646354079247, -0.7736541032791138, -0.22239454090595245, -0.27467480301856995, -0.12946192920207977, -1.370701789855957, -0.8452811241149902, -0.42109736800193787, -1.2772104740142822, -1.4695758819580078, -0.2520071566104889, -0.00022968991834204644, -0.009005525149405003, -0.40560370683670044, -0.22887004911899567, -0.0023378203622996807, -1.0847986231965479e-05, -5.960462772236497e-07, -1.1920922133867862e-06, -0.0041099851951003075, -9.214453893946484e-05, -0.0046170298010110855, -0.0015180503251031041, -0.002780977636575699, -0.0014871024759486318, -0.05843134969472885, -0.018495945259928703, -0.0383719801902771, -0.00019536493346095085, -0.03664369881153107, -0.025005508214235306, -0.00427238130941987, -0.0019307559123262763, -0.007446745876222849, -2.264974000354414e-06, -6.854299135738984e-05, -1.5497195136049413e-06, -2.3483953555114567e-05, -8.689979586051777e-05, -0.0006637753685936332, -0.00039200251922011375, -4.410734163684538e-06, -0.00015877417172305286, -7.033323527139146e-06, -6.305972783593461e-05, -0.0009760859538801014, -2.407998726994265e-05, -4.875540980719961e-05, -5.447716102935374e-05, -0.00146793806925416, -0.005038421601057053, -0.7525709271430969, -4.732496745418757e-05, -3.4282679557800293, -0.005097962450236082, -0.12428087741136551, -0.1228020042181015, -0.011160802096128464, -0.03594888001680374, -0.0012293646577745676, -0.16388292610645294, -0.0012987758964300156], "finish_reason": "stop"}], "metrics": {"energy": 221.48114421081553, "energy_per_token": 1.1074057210540778, "time": 8.615377, "time_per_token": 0.043076885}}
{"outputs": [{"text": "df = pd.DataFrame()\n    if csv_files:\n        for file in csv_files:\n            file_path = os.path.join(data_dir, file)\n            df = pd.concat([df, pd.read_csv(file_path, low_memory=False, na_values=['-'])], ignore_index=True)\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "if", " c", "sv", "_", "files", ":", "\n", "        ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "file", "_", "path", ",", " low", "_", "memory", "=", "False", ",", " na", "_", "values", "=['", "-", "']", ")]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.9831552505493164, -0.4342404305934906, -0.3160976469516754, -0.003010624088346958, -0.3730449676513672, -0.07720576226711273, -0.03140620142221451, -0.3555432856082916, -0.2839963138103485, -0.6668428778648376, -3.075552376685664e-05, -8.940656698541716e-06, -1.168244216387393e-05, -0.1784740686416626, -0.02220086194574833, -0.004921109415590763, -0.7631509900093079, -0.5997291803359985, -0.5187745094299316, -0.035626139491796494, -0.00011753345461329445, -3.540453326422721e-05, -1.0847986231965479e-05, -0.0005768066039308906, -0.002744243713095784, -0.0029697385616600513, -1.435668706893921, -0.1826281100511551, -0.04978099465370178, -0.0013402060139924288, -0.010840335860848427, -4.410734163684538e-06, -3.0874729418428615e-05, -0.004423120059072971, -0.0008986725588329136, -0.00046528480015695095, -0.002849211450666189, -4.95898348162882e-05, -0.0003259842633269727, -0.0002961912250611931, -0.0022367238998413086, -0.0004773192631546408, -0.004775665700435638, -0.0070569077506661415, -0.1729586124420166, -0.38946789503097534, -0.11309950798749924, -0.0002215855201939121, -0.012402905151247978, -0.015367083251476288, -0.009382794611155987, -0.005291978362947702, -0.015321064740419388, -5.125986263010418e-06, -0.0006531727267429233, -9.536738616588991e-07, -0.0003023882454726845, -6.544376083184034e-05, -0.002143468242138624, -0.0003817544784396887, -1.549708758830093e-05, -1.1989359855651855, -2.7640364170074463, -1.8954096958623268e-05, -0.010015707463026047, -0.003151095937937498, -0.13043077290058136, -1.6394197940826416, -2.657093048095703, -0.0005069877952337265, -0.7299236059188843, -1.1260788440704346, -2.232508420944214, -0.5233745574951172, -0.200319305062294, -0.19848430156707764, -0.5189847350120544, -1.311301275563892e-06, -0.004688223358243704, -0.0014219897566363215, -0.003393488470464945, -0.06378548592329025, -0.017271704971790314, -0.25888460874557495, -0.05144088342785835, -0.0028511134441941977, -0.9653463363647461, -3.576278118089249e-07, -7.152555099310121e-07, -6.6756979322235566e-06, -5.2689116273541003e-05, -0.08123265951871872], "finish_reason": "stop"}], "metrics": {"energy": 84.6249393863678, "energy_per_token": 0.9198362976779109, "time": 3.8030686, "time_per_token": 0.04133770217391304}}
{"outputs": [{"text": "# TODO: Create a function that merges multiple CSV files from a specified directory\n    # into a single Pandas DataFrame.\n    #\n    # If an empty list of files is passed, an empty DataFrame is returned.\n    #\n    # Requirements:\n    # - pandas\n    # - os\n    #\n    # Example:\n    # >>> df = task_func('/path/to/data/directory', ['file1.csv', 'file2.csv', 'file3.csv'])\n    # >>> print(df.head())\n    #    Name  Age  Gender\n    # 0  Simon   5    Male\n    # 1  Bobby  32    Male\n    # 0  Elena   13  Female\n    # 1   Tom   23    Male\n    # 0  Franko   12    Male\n    #\n    # You may find the pd.concat function of the pandas library useful for this task.\n    # You can use the glob library to list all files in the specified directory.\n    #\n    # Note: You", "tokens": ["#", " TODO", ":", " Create", " a", " function", " that", " mer", "ges", " multiple", " CS", "V", " files", " from", " a", " specified", " directory", "\n", "    ", "#", " into", " a", " single", " Pand", "as", " Data", "Frame", ".", "\n", "    ", "#", "\n", "    ", "#", " If", " an", " empty", " list", " of", " files", " is", " passed", ",", " an", " empty", " Data", "Frame", " is", " returned", ".", "\n", "    ", "#", "\n", "    ", "#", " Requirements", ":", "\n", "    ", "#", " -", " pandas", "\n", "    ", "#", " -", " os", "\n", "    ", "#", "\n", "    ", "#", " Example", ":", "\n", "    ", "#", " >", ">>", " df", " =", " task", "_", "func", "('/", "path", "/", "to", "/", "data", "/", "directory", "'", ",", " ['", "file", "1", ".", "csv", "'", ",", " '", "file", "2", ".", "csv", "'", ",", " '", "file", "3", ".", "csv", "'])", "\n", "    ", "#", " >", ">>", " print", "(", "df", ".", "head", "())", "\n", "    ", "#", "    ", "Name", "  ", "Age", "  ", "G", "ender", "\n", "    ", "#", " ", "0", "  ", "Sim", "on", "   ", "5", "    ", "M", "ale", "\n", "    ", "#", " ", "1", "  ", "B", "obby", "  ", "3", "2", "    ", "M", "ale", "\n", "    ", "#", " ", "0", "  ", "E", "len", "a", "   ", "1", "3", "  ", "F", "emale", "\n", "    ", "#", " ", "1", "   ", "Tom", "   ", "2", "3", "    ", "M", "ale", "\n", "    ", "#", " ", "0", "  ", "Frank", "o", "   ", "1", "2", "    ", "M", "ale", "\n", "    ", "#", "\n", "    ", "#", " You", " may", " find", " the", " pd", ".", "concat", " function", " of", " the", " pandas", " library", " useful", " for", " this", " task", ".", "\n", "    ", "#", " You", " can", " use", " the", " glob", " library", " to", " list", " all", " files", " in", " the", " specified", " directory", ".", "\n", "    ", "#", "\n", "    ", "#", " Note", ":", " You"], "logprobs": [-1.795003056526184, -3.5585806369781494, -0.3280150294303894, -3.8148796558380127, -0.32639268040657043, -0.8832932710647583, -0.5029952526092529, -0.5535662174224854, -0.0016451646806672215, -0.6732423305511475, -0.062066659331321716, -0.0005852655158378184, -0.004222288262099028, -0.6154922246932983, -0.14359961450099945, -0.23716799914836884, -0.015818936750292778, -2.350379228591919, -0.042618438601493835, -0.06541862338781357, -0.42258432507514954, -0.005023120902478695, -0.008629413321614265, -0.3364098072052002, -6.198863957251888e-06, -0.004624505061656237, -0.011605488136410713, -0.23176100850105286, -0.11183436959981918, -0.23573116958141327, -0.36561521887779236, -1.9573365449905396, -0.008914907462894917, -0.012938006781041622, -0.6255329251289368, -0.06441149860620499, -0.00042846560245379806, -0.0012986568035557866, -0.03401443734765053, -0.008051320910453796, -0.0032282164320349693, -0.004398315213620663, -0.01704976335167885, -0.05208655074238777, -0.0006667536217719316, -0.005594548769295216, -0.0003281293320469558, -0.04304387420415878, -0.004656780045479536, -0.03038826584815979, -0.0025754161179065704, -0.2470300942659378, -0.1557885706424713, -0.07452768832445145, -0.008932039141654968, -0.012520755641162395, -1.5235177278518677, -0.012669550254940987, -0.00736462464556098, -0.0035383019130676985, -0.0006968930247239769, -0.2218494415283203, -0.12492907047271729, -0.019819438457489014, -0.002182603348046541, -0.0012543675256893039, -0.031907908618450165, -0.004943410400301218, -0.012399372644722462, -0.1664435863494873, -0.1202455684542656, -0.12828759849071503, -0.0058717853389680386, -0.008037840016186237, -0.24797850847244263, -0.020611852407455444, -0.0009934734553098679, -0.0026433072052896023, -0.0004191712068859488, -0.69633948802948, -0.004136459436267614, -0.028460288420319557, -0.001598986447788775, -0.007624690420925617, -7.390948667307384e-06, -0.0008434075862169266, -0.02346205711364746, -0.0010994586627930403, -3.5523738915799186e-05, -0.00022957073815632612, -5.8053239627042785e-05, -0.007702294737100601, -0.0009922825265675783, -0.0008172033121809363, -0.0012769886525347829, -0.00023314618738368154, -0.0119816605001688, -0.0009777533123269677, -0.0006955826538614929, -0.0007346553611569107, -9.476689592702314e-05, -0.000559173640795052, -1.0251946150674485e-05, -0.004619284067302942, -9.119095193454996e-05, -0.00019870213873218745, -6.365573790390044e-05, -0.00045563330058939755, -0.004872946999967098, -9.500529267825186e-05, -0.006166479550302029, -0.00011431517486926168, -0.00013839241000823677, -6.031808152329177e-05, -0.0002798642381094396, -0.001931469771079719, -0.000757645582780242, -0.0032630315981805325, -0.002546284580603242, -0.015302750281989574, -9.417090768693015e-05, -0.004429173190146685, -0.00038842763751745224, -0.0004880429187323898, -0.0019622850231826305, -0.0009800160769373178, -0.0005561950383707881, -0.002641167026013136, -0.07262761145830154, -0.04911408945918083, -1.96427583694458, -0.03329138457775116, -0.0831180140376091, -0.0013987767742946744, -0.014915023930370808, -0.0019469369435682893, -0.0003275334893260151, -0.0019723977893590927, -0.0013335392577573657, -0.0009700122172944248, -0.001697053201496601, -0.0015608996618539095, -0.34473299980163574, -0.026832925155758858, -0.001157805323600769, -0.2176513522863388, -0.002744600409641862, -1.4271345138549805, -0.0013809201773256063, -0.0001984637783607468, -0.00021896349790040404, -0.0022351776715368032, -0.0007564543629996479, -0.0009766814764589071, -0.004481391981244087, -0.06363426148891449, -0.0019195717759430408, -1.9788545614574105e-05, -0.1499144285917282, -0.010588536970317364, -0.0023401989601552486, -0.39399394392967224, -4.625213477993384e-05, -2.169585604860913e-05, -8.284702198579907e-05, -0.0068511576391756535, -0.0014860312221571803, -0.007772086188197136, -0.013100387528538704, -0.03514712303876877, -0.0008568667690269649, -3.45700973412022e-05, -1.07287787614041e-05, -0.10711747407913208, -0.0005442806868813932, -0.0003738896339200437, -0.12490677088499069, -0.0002731903805397451, -0.0003507714136503637, -8.463501580990851e-05, -0.0021591701079159975, -0.0002896366349887103, -0.0011823337990790606, -0.0016724183224141598, -1.069700837135315, -0.0006878394051454961, -0.05869128182530403, -0.0004196478403173387, -0.00045015214709565043, -0.007833830080926418, -0.00012516192509792745, -2.5033637939486653e-05, -0.0001616347290109843, -0.002189026679843664, -0.0032283354084938765, -0.0025688763707876205, -0.0011121999705210328, -0.07482893764972687, -0.00021801002731081098, -5.4238757002167404e-05, -0.005939689930528402, -0.0004567056894302368, -0.0003897384158335626, -0.040120646357536316, -0.0001408954558428377, -5.9602869441732764e-05, -0.0010567086283117533, -0.511027991771698, -0.8914281129837036, -0.14376844465732574, -0.19437237083911896, -0.4871716797351837, -3.3212687969207764, -2.369076728820801, -2.5447020530700684, -0.2633565664291382, -2.208733558654785, -0.0037117176689207554, -1.062301754951477, -1.697298526763916, -3.884711503982544, -1.0201022624969482, -0.2017664760351181, -0.1672378033399582, -0.8832670450210571, -1.4677159786224365, -0.513516902923584, -0.18067654967308044, -0.07044920325279236, -0.03649912029504776, -0.5027703642845154, -0.4593636095523834, -1.890503168106079, -1.0692226886749268, -2.9736151695251465, -0.4538052976131439, -2.318507432937622, -1.6482657194137573, -0.33039796352386475, -2.3065896034240723, -0.16285744309425354, -2.0003950595855713, -0.2719101011753082, -0.8973314166069031, -1.0576566457748413, -0.04260324314236641, -0.6106593012809753, -0.039386067539453506, -0.34514427185058594, -0.24449504911899567, -1.1015220880508423, -0.06308857351541519, -0.14288808405399323, -2.2897469997406006, -0.5326996445655823, -1.1948959827423096], "finish_reason": "length"}], "metrics": {"energy": 254.99436019325262, "energy_per_token": 0.996071719504893, "time": 10.935183, "time_per_token": 0.04271555859375}}
{"outputs": [{"text": "if csv_files:\n        data_frame = pd.concat([pd.read_csv(os.path.join(data_dir, file_name)) for file_name in csv_files], axis=1)\n    else:\n        data_frame = pd.DataFrame()\n\n    return data_frame", "tokens": ["if", " c", "sv", "_", "files", ":", "\n", "        ", "data", "_", "frame", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", "))", " for", " file", "_", "name", " in", " c", "sv", "_", "files", "]", ",", " axis", "=", "1", ")", "\n", "    ", "else", ":", "\n", "        ", "data", "_", "frame", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "return", " data", "_", "frame", "\n", "\n", "if"], "logprobs": [-0.5293303728103638, -1.47682785987854, -9.321732068201527e-05, -1.3470558769768104e-05, -8.106198947643861e-06, -0.6071025729179382, -0.04243335872888565, -0.008498928509652615, -2.3035993576049805, -0.9270094037055969, -2.801417589187622, -0.15229272842407227, -0.10549402236938477, -0.0014213945250958204, -0.2023487240076065, -0.09957841783761978, -0.007001034915447235, -9.07141511561349e-05, -0.0004914983292110264, -4.0531076592742465e-06, -0.00022373080719262362, -0.0010024051880463958, -0.1525443196296692, -8.34461570775602e-06, -0.0003104920033365488, -0.007792904507368803, -0.0003351603518240154, -0.0003483880718704313, -0.008152304217219353, -1.5139465176616795e-05, -7.402622577501461e-05, -0.00047231485950760543, -0.6731511950492859, -0.4081912934780121, -0.022002752870321274, -0.03909951075911522, -0.17232497036457062, -0.000936189026106149, -2.7417760065873154e-05, -6.305972783593461e-05, -0.000519617460668087, -0.003916570916771889, -0.0006658005877397954, -1.1920928244535389e-07, -3.242440288886428e-05, -0.5486418604850769, -0.0011649496154859662, -0.8971899151802063, -0.020624347031116486, -2.948169469833374, -0.12719880044460297, -0.023131882771849632, -0.6093735694885254, -0.0056764595210552216, -0.00039200251922011375, -0.005219760350883007, -0.0005856229108758271, -0.02175421640276909, -0.00019202772818971425, -0.00024768622824922204, -0.0010708795161917806, -0.01466295588761568, -0.0005812147865071893, -0.0036741863004863262, -0.19768968224525452, -0.005787875968962908, -0.6998246312141418, -0.0012336509535089135, -0.0271016675978899, -0.0026657781563699245, -6.437280717364047e-06, -0.00017832119192462415, -0.7281504273414612, -0.016814058646559715, -0.5842137336730957], "finish_reason": "stop"}], "metrics": {"energy": 86.10849792289733, "energy_per_token": 1.148113305638631, "time": 2.9581695, "time_per_token": 0.03944226}}
{"outputs": [{"text": "if csv_files:\n        # Load CSV files into pandas\n        dfs = [pd.read_csv(os.path.join(data_dir, f)) for f in csv_files]\n        # Merge the DataFrames\n        df = pd.concat(dfs)\n        return df\n    else:\n        return pd.DataFrame()", "tokens": ["if", " c", "sv", "_", "files", ":", "\n", "        ", "#", " Load", " CS", "V", " files", " into", " pandas", "\n", "        ", "d", "fs", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "        ", "#", " Mer", "ge", " the", " Data", "F", "rames", "\n", "        ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ")", "\n", "        ", "return", " df", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -1.47682785987854, -9.321732068201527e-05, -1.3470558769768104e-05, -8.106198947643861e-06, -0.6071025729179382, -0.04243335872888565, -0.008498928509652615, -2.059798240661621, -2.3798301219940186, -1.4254754781723022, -0.010634655132889748, -0.06468798220157623, -0.40328550338745117, -1.842181921005249, -2.244689702987671, -0.0018012979999184608, -2.9192304611206055, -0.0003695997002068907, -0.007196930702775717, -0.29670214653015137, -0.007884097285568714, -1.4066597032069694e-05, -0.0005597693379968405, -1.1920922133867862e-06, -0.0002426806604489684, -0.0007002285565249622, -0.10098953545093536, -2.7418097943154862e-06, -0.00012659224739763886, -0.008816245943307877, -0.00011896379146492109, -0.00014375607133843005, -0.003775018732994795, -1.847726889536716e-05, -4.660974445869215e-05, -0.0001736728590913117, -0.7291253805160522, -0.6390054225921631, -0.020778829231858253, -0.0001426833332516253, -8.201262971851975e-05, -0.0029845954850316048, -0.0026478252839297056, -0.00021443451987579465, -1.168244216387393e-05, -0.004280927591025829, -0.0011368485866114497, -0.7579408288002014, -0.5582113862037659, -1.0742013454437256, -0.0027818097732961178, -1.2995046377182007, -0.8952916264533997, -0.015790892764925957, -5.876845170860179e-05, -0.7230662703514099, -0.0006050424999557436, -0.44369515776634216, -0.00792016927152872, -0.02120198681950569, -0.0008126770262606442, -0.0032089666929095984, -0.002282278146594763, -0.0010033579310402274, -1.4305012882687151e-05, -1.549363136291504, -0.04825818911194801, -0.5305805802345276, -0.13313843309879303, -0.007800237741321325, -0.11774902045726776, -0.051658377051353455, -0.07364654541015625, -0.00024375328212045133, -0.017059020698070526, -0.0002388668799540028, -0.3818039298057556, -0.04802870750427246, -0.00011359999916749075, -0.0020147517789155245, -0.17976924777030945, -0.7352085709571838, -1.1920928244535389e-07, -3.576278118089249e-07, -2.8729025871143676e-05, -7.92710343375802e-05, -0.10214145481586456], "finish_reason": "stop"}], "metrics": {"energy": 84.88107597541809, "energy_per_token": 0.9645576815388419, "time": 3.5915556, "time_per_token": 0.040813131818181816}}
{"outputs": [{"text": "# Create a list of pandas DataFrame objects from the CSV files\n    data_frames = [pd.read_csv(os.path.join(data_dir, file), index_col=0)\n                   for file in csv_files]\n\n    # If there are no files, return an empty DataFrame\n    if not data_frames:\n        return pd.DataFrame()\n\n    # Merge the DataFrames using pandas.concat\n    return pd.concat(data_frames)", "tokens": ["#", " Create", " a", " list", " of", " pandas", " Data", "Frame", " objects", " from", " the", " CS", "V", " files", "\n", "    ", "data", "_", "frames", " =", " [", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", ",", " index", "_", "col", "=", "0", ")", "\n", "                ", "   ", "for", " file", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "#", " If", " there", " are", " no", " files", ",", " return", " an", " empty", " Data", "Frame", "\n", "    ", "if", " not", " data", "_", "frames", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Mer", "ge", " the", " Data", "F", "rames", " using", " pandas", ".", "concat", "\n", "    ", "return", " pd", ".", "concat", "(", "data", "_", "frames", ")", "\n", "\n", "if"], "logprobs": [-1.795003056526184, -2.828949213027954, -0.7221717834472656, -0.934027910232544, -0.2944548428058624, -2.919663190841675, -0.24202609062194824, -0.9748439192771912, -0.07565566152334213, -0.5293722748756409, -0.2763909697532654, -0.4095243513584137, -0.0002803409588523209, -0.004378138110041618, -0.4489247500896454, -0.004078404977917671, -1.3348126411437988, -0.7682806849479675, -0.3429534435272217, -0.05520543456077576, -0.4515281617641449, -0.008551880717277527, -3.1470757676288486e-05, -0.0021257440093904734, -7.152555099310121e-07, -0.0003159739135298878, -0.0010150285670533776, -0.11169653385877609, -7.867782187531702e-06, -0.00012563870404846966, -0.004678493831306696, -0.00012706902634818107, -0.0002479245886206627, -0.004081491846591234, -3.2305197237292305e-05, -6.592056161025539e-05, -0.000303818320389837, -0.704818069934845, -2.670657157897949, -0.001150541938841343, -0.44825857877731323, -2.3841855067985307e-07, -0.0002805792901199311, -0.077170230448246, -0.26866763830184937, -0.05877334251999855, -2.013338327407837, -0.024157807230949402, -0.07581126689910889, -0.0018554391572251916, -0.00039200251922011375, -0.0007887351675890386, -0.007692003156989813, -0.0005301024066284299, -1.8715683836489916e-05, -4.7205765440594405e-05, -0.08597253262996674, -0.004183944780379534, -0.1698317527770996, -0.0004996005445718765, -0.061194196343421936, -2.05088472366333, -1.3737901449203491, -0.08329154551029205, -0.04110721871256828, -0.4033644199371338, -0.3829914629459381, -0.053901784121990204, -0.009877377189695835, -0.00022373080719262362, -0.13994507491588593, -0.0009760859538801014, -0.03722146525979042, -0.0004144048143643886, -0.0019682336132973433, -0.3847830295562744, -0.08180677145719528, -3.838465272565372e-05, -0.0005685858195647597, -0.0005573864909820259, -0.0025258325040340424, -0.0007995745982043445, -0.043310921639204025, -0.03233342245221138, -0.003007533960044384, -0.0003644755925051868, -0.17832857370376587, -0.002066026208922267, -0.02726675197482109, -0.0006368515896610916, -0.023401038721203804, -0.9837123155593872, -0.0028356602415442467, -0.621051549911499, -0.3102973401546478, -0.79299396276474, -0.00035386974923312664, -0.8380681872367859, -0.8483944535255432, -1.5053253173828125, -0.02577849105000496, -0.8317326903343201, -0.0009840651182457805, -0.7439612150192261, -0.0066139837726950645, -0.0002112165529979393, -0.0001833270798670128, -0.0011867393041029572, -0.0007038023322820663, -7.629365427419543e-06, -2.777537883957848e-05, -1.0883703231811523, -0.2892555892467499, -0.01764083281159401, -0.9799134135246277], "finish_reason": "stop"}], "metrics": {"energy": 131.68986614227296, "energy_per_token": 1.1451292708023735, "time": 4.8531756, "time_per_token": 0.04220152695652174}}
{"outputs": [{"text": "# Check if csv_files is empty\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Check if data_dir exists\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} not found\")\n\n    # Initialize an empty DataFrame to hold the merged data\n    data = pd.DataFrame()\n\n    # Iterate through the list of CSV files and merge them\n    for filename in csv_files:\n        path = os.path.join(data_dir, filename)\n        df = pd.read_csv(path)\n        data = data.append(df, ignore_index=True)\n\n    return data", "tokens": ["#", " Check", " if", " c", "sv", "_", "files", " is", " empty", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Check", " if", " data", "_", "dir", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "data", "_", "dir", "}", " not", " found", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " Data", "Frame", " to", " hold", " the", " merged", " data", "\n", "    ", "data", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Iter", "ate", " through", " the", " list", " of", " CS", "V", " files", " and", " merge", " them", "\n", "    ", "for", " filename", " in", " c", "sv", "_", "files", ":", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", ")", "\n", "        ", "df", " =", " pd", ".", "read", "_", "csv", "(", "path", ")", "\n", "        ", "data", " =", " data", ".", "append", "(", "df", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-1.795003056526184, -1.042848825454712, -0.5301909446716309, -2.9302170276641846, -0.0002972637885250151, -0.09575897455215454, -0.010444505140185356, -0.09223616868257523, -0.9240943193435669, -0.49676012992858887, -0.0018607935635372996, -0.006008182652294636, -0.47263655066490173, -0.011897791177034378, -0.004165069665759802, -1.4305104514278355e-06, -1.5497195136049413e-06, -0.010048163123428822, -0.003907546401023865, -0.0007932615117169917, -0.07728984206914902, -0.02289201319217682, -0.00016234986833296716, -0.0011366104008629918, -0.061923131346702576, -0.017855146899819374, -0.08919855952262878, -0.0007537146448157728, -0.0882377028465271, -1.4840333461761475, -0.2776971459388733, -0.5172133445739746, -0.02448997087776661, -0.0022979776840656996, -0.7180469036102295, -0.7997109889984131, -0.00035386974923312664, -0.018593305721879005, -0.015593740157783031, -0.0012271024752408266, -2.861018856492592e-06, -9.929640509653836e-05, -0.003917402122169733, -1.5599132776260376, -0.000362807244528085, -4.4225667807040736e-05, -0.0018220028141513467, -2.1219027985353023e-05, -1.2755313036905136e-05, -0.0030797929503023624, -0.0012394849909469485, -0.0003327769518364221, -0.1932498812675476, -0.8064024448394775, -0.001948602613992989, -5.006664650863968e-05, -0.07076223194599152, -0.23351958394050598, -0.1518351435661316, -0.5087848901748657, -0.7811204195022583, -0.0011793570592999458, -4.4225667807040736e-05, -0.0013304438907653093, -0.008402826264500618, -0.4852100908756256, -0.0011154150124639273, -1.322007656097412, -0.00012230125139467418, -0.00255651050247252, -0.023215629160404205, -0.0004278697888366878, -0.0816652774810791, -3.936901330947876, -1.6106572151184082, -0.0077151888981461525, -0.5436981320381165, -0.0021949741058051586, -1.968862533569336, -1.8629560470581055, -0.14869196712970734, -0.24571554362773895, -0.050784941762685776, -0.01508741732686758, -0.0004558716027531773, -2.5947601795196533, -0.3622332215309143, -0.11992143094539642, -6.925819616299123e-05, -0.011867162771522999, -0.04181549698114395, -0.0005794276366941631, -0.04049219936132431, -0.0002324311062693596, -0.08116967976093292, -0.765855073928833, -0.0021974719129502773, -0.911597728729248, -0.4427604675292969, -1.3692141771316528, -0.011907685548067093, -0.6264450550079346, -0.0004549183649942279, -0.05978177860379219, -0.8220521211624146, -1.16075599193573, -0.22932681441307068, -1.0994311571121216, -0.0003999863693024963, -0.013608187437057495, -1.9428857564926147, -0.0003215749457012862, -0.03589643910527229, -7.70062324590981e-05, -7.152555099310121e-07, -5.483612312673358e-06, -0.0002826052950695157, -0.0010684978915378451, -0.005739162210375071, -1.4427868127822876, -0.010978886857628822, -0.01065340917557478, -1.5497195136049413e-06, -1.8596476365928538e-05, -0.004679087083786726, -0.0007955246837809682, -8.999896090244874e-05, -0.0013036570744588971, -2.658331868587993e-05, -4.768360213347478e-06, -0.00017820201173890382, -0.0019694233778864145, -0.00018439977429807186, -0.01308803353458643, -0.05114836245775223, -1.740862250328064, -0.024744225665926933, -0.0022947664838284254, -0.0002796259068418294, -0.0010013333521783352, -1.4305104514278355e-06, -0.00028451209072954953, -3.433168603805825e-05, -0.0028767890762537718, -0.28377482295036316, -0.01197094190865755, -0.024525566026568413, -0.08831999450922012, -0.0053121368400752544, -1.874726414680481, -0.0024033491499722004, -0.18397286534309387, -0.000697846058756113, -0.0005970602505840361, -0.3166316747665405, -0.043853361159563065, -1.1920928244535389e-07, -0.0011835244949907064, -0.0023553031496703625, -0.0015438791597262025, -0.05006382614374161, -0.030964456498622894, -0.021063562482595444, -0.001620766706764698, -0.09705044329166412, -0.000479344860650599, -0.7709875702857971, -0.009740089997649193, -0.5827018022537231], "finish_reason": "stop"}], "metrics": {"energy": 179.9929189796448, "energy_per_token": 1.0650468578677208, "time": 7.149225, "time_per_token": 0.04230310650887574}}
{"outputs": [{"text": "df_list = []\n    for file in csv_files:\n        file_path = os.path.join(data_dir, file)\n        df_list.append(pd.read_csv(file_path))\n    df = pd.concat(df_list)\n    return df", "tokens": ["df", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", "\n", "        ", "df", "_", "list", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "file", "_", "path", "))", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "df", "_", "list", ")", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-2.9831552505493164, -1.2126961946487427, -0.16785703599452972, -0.031316086649894714, -0.48275619745254517, -0.014221156015992165, -0.32319024205207825, -0.26767444610595703, -0.7333783507347107, -0.6420987248420715, -0.054054033011198044, -0.0002090712368953973, -3.4570634852570947e-06, -2.8609820219571702e-05, -0.002354351570829749, -0.00893463846296072, -0.004864405374974012, -1.5703006982803345, -0.19046393036842346, -0.053005319088697433, -0.0012497241841629148, -0.02131763845682144, -6.079655122448457e-06, -4.279521817807108e-05, -0.005707277916371822, -0.0008197046699933708, -0.0004991239402443171, -0.004656780045479536, -3.814689989667386e-06, -0.00029225845355540514, -0.0003225283289793879, -0.0034881718456745148, -0.0006667536217719316, -0.007567193359136581, -0.01248908694833517, -0.23466238379478455, -0.12307050824165344, -0.009855776093900204, -0.0008507922757416964, -0.0003746046277228743, -0.0005903884884901345, -0.0033170937094837427, -2.50339189733495e-06, -0.000979539705440402, -3.814689989667386e-06, -0.0002890407631639391, -5.507317473529838e-05, -0.0024176198057830334, -0.0006501944735646248, -1.0251946150674485e-05, -0.29040852189064026, -0.004327694419771433, -0.3661471903324127, -1.3510078191757202, -0.06318370252847672, -0.017596792429685593, -0.0009950215462595224, -0.010228240862488747, -0.0009419057168997824, -0.0002294515579706058, -0.00023421882360707968, -1.680836794548668e-05, -0.8084151744842529, -0.25147026777267456, -0.08536622673273087, -0.029887529090046883, -0.0016439745668321848, -0.5307337641716003, -0.020447883754968643, -2.0115644931793213], "finish_reason": "stop"}], "metrics": {"energy": 78.91210865402223, "energy_per_token": 1.1273158379146033, "time": 2.7450252, "time_per_token": 0.03921464571428571}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n    else:\n        csv_files = [os.path.join(data_dir, file) for file in csv_files]\n        return pd.concat([pd.read_csv(file) for file in csv_files])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", ")", " for", " file", " in", " c", "sv", "_", "files", "]", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "file", ")", " for", " file", " in", " c", "sv", "_", "files", "])"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.7708095908164978, -0.8860582113265991, -0.00011193125828867778, -0.005578189622610807, -0.0074418941512703896, -2.846339702606201, -0.008851340040564537, -0.47380632162094116, -0.26897895336151123, -0.085572749376297, -0.09455228596925735, -7.748573807475623e-06, -0.00013851160474587232, -0.0051177688874304295, -0.005612804554402828, -0.0010389650706201792, -0.0058308979496359825, -0.00025674383505247533, -0.0004408579843584448, -0.0004514628672040999, -1.0068480968475342, -0.37203866243362427, -0.011830407194793224, -0.0001928620331455022, -0.00012790338951162994, -0.0019875073339790106, -0.00016509123088326305, -1.0371154530730564e-05, -1.847726889536716e-05, -0.007628831081092358, -0.008456730283796787, -0.037985410541296005, -0.2877160906791687, -0.008343837223947048, -7.652943895664066e-05, -0.034085988998413086, -0.04102598503232002, -0.001872930210083723, -5.006777428206988e-06, -0.00031740395934320986, -2.861018856492592e-06, -0.0001919085334520787, -0.000428942235885188, -0.09860588610172272, -0.20913715660572052, -0.015339143574237823, -0.00012611546844709665, -7.807903602952138e-05, -0.0006897454150021076, -0.0003953390696551651, -1.1920922133867862e-06, -4.887569048150908e-06, -0.4773046374320984], "finish_reason": "stop"}], "metrics": {"energy": 65.73061972713471, "energy_per_token": 0.9129252739879821, "time": 2.9635496, "time_per_token": 0.04116041111111111}}
{"outputs": [{"text": "# Check if the csv_files is empty\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Check if data_dir is valid\n    if not os.path.isdir(data_dir):\n        raise ValueError(\"Invalid data directory\")\n\n    # Merge the CSV files into a pandas DataFrame\n    csv_files_paths = [os.path.join(data_dir, file_name) for file_name in csv_files]\n    df = pd.concat([pd.read_csv(path) for path in csv_files_paths], ignore_index=True)\n\n    return df", "tokens": ["#", " Check", " if", " the", " c", "sv", "_", "files", " is", " empty", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Check", " if", " data", "_", "dir", " is", " valid", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " data", " directory", "\"", ")", "\n", "\n", "    ", "#", " Mer", "ge", " the", " CS", "V", " files", " into", " a", " pandas", " Data", "Frame", "\n", "    ", "csv", "_", "files", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", ")", " for", " file", "_", "name", " in", " c", "sv", "_", "files", "]", "\n", "    ", "df", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "path", ")", " for", " path", " in", " c", "sv", "_", "files", "_", "paths", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.795003056526184, -1.042848825454712, -0.5301909446716309, -1.0244877338409424, -2.331940174102783, -0.0003638797497842461, -0.12747767567634583, -0.015333977527916431, -1.9354157447814941, -0.6667978763580322, -0.6451511383056641, -0.001947650802321732, -0.008503892458975315, -0.5370287895202637, -0.02065132185816765, -0.002207106677815318, -1.9073468138230965e-06, -2.622600959512056e-06, -0.01219919417053461, -0.003643067553639412, -0.0012292455649003386, -0.09297335892915726, -0.02401944063603878, -0.00017951308109331876, -0.0009982370538637042, -0.09198807179927826, -0.018418941646814346, -0.12324388325214386, -0.0010203876299783587, -0.09011393785476685, -1.318532943725586, -0.29137903451919556, -1.7189452648162842, -0.03602075204253197, -0.0035936555359512568, -0.6766790151596069, -0.7995678186416626, -0.29046058654785156, -0.0005818104837089777, -0.04865659400820732, -0.044524237513542175, -0.020385513082146645, -9.775113539944869e-06, -0.0002366024418734014, -0.008617830462753773, -0.367311954498291, -0.0010052633006125689, -5.936446541454643e-05, -0.00272260676138103, -3.4927710657939315e-05, -1.8000440832111053e-05, -0.01304873451590538, -0.0024299875367432833, -0.00047874910524114966, -0.14495299756526947, -0.23250369727611542, -1.3708974620385561e-05, -0.1021944135427475, -0.6508355140686035, -0.5916354656219482, -0.2645946145057678, -0.6345478296279907, -1.3797074556350708, -0.00023898606013972312, -0.0033648558892309666, -0.02307363785803318, -0.0005432083853520453, -0.07875114679336548, -2.033055543899536, -0.010903894901275635, -0.9234111905097961, -0.3492916226387024, -0.002483856864273548, -0.004392143338918686, -0.9478535652160645, -0.05620034784078598, -1.8752551078796387, -0.07535012811422348, -0.004860965069383383, -0.104130819439888, -0.001456748810596764, -3.1185476779937744, -0.004295408725738525, -0.46324560046195984, -2.1514809131622314, -1.5080223083496094, -0.027966931462287903, -0.08302048593759537, -0.03549061715602875, -1.311301275563892e-06, -0.00013052565918769687, -0.0012475810945034027, -0.0018346159486100078, -0.00011014331539627165, -0.0031909046228975058, -7.748573807475623e-06, -2.098061486321967e-05, -0.00030727434204891324, -0.9988029599189758, -0.6630422472953796, -0.04167189076542854, -0.0013328249333426356, -0.020339608192443848, -0.0002212279650848359, -1.728519782773219e-05, -5.781483559985645e-05, -0.0002648479712661356, -0.0018447301117703319, -0.0014467497821897268, -2.622600959512056e-06, -5.960446742392378e-06, -0.009764290414750576, -0.003503733780235052, -0.02110406383872032, -0.5342054963111877, -0.030989188700914383, -0.00411330908536911, -0.00015269544383045286, -0.09524539113044739, -0.030733279883861542, -0.0017664319602772593, -3.814689989667386e-06, -0.0002849888114724308, -2.3841855067985307e-07, -0.00011538793478393927, -0.0008909308817237616, -1.002568244934082, -0.118831105530262, -0.011882359161973, -0.00011848701251437888, -0.00011503035057103261, -0.0007463291985914111, -0.0007173825288191438, 0.0, -6.079655122448457e-06, -0.0002790300059132278, -8.106198947643861e-06, -0.45097482204437256, -0.0002033503697020933, -0.4864366948604584, -2.3841855067985307e-07, -0.0054143453016877174, -0.0020648366771638393, -0.002516319742426276, -0.03281724825501442, -0.017224717885255814, -0.1594817191362381, -0.0004032037395518273, -0.23520469665527344, -0.0009757286752574146, -0.8357090353965759, -0.007876290939748287, -0.5952144861221313], "finish_reason": "stop"}], "metrics": {"energy": 153.12514155578617, "energy_per_token": 1.000817918665269, "time": 6.525853, "time_per_token": 0.042652633986928104}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    else:\n        csv_files = [os.path.join(data_dir, f) for f in csv_files]\n        df = pd.concat([pd.read_csv(f) for f in csv_files])\n        return df", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "f", ")", " for", " f", " in", " c", "sv", "_", "files", "])", "\n", "        ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.9070006012916565, -1.8561322689056396, -0.00013445904187392443, -0.004094195086508989, -0.009136180393397808, -2.4888455867767334, -0.007503895089030266, -0.3995671570301056, -0.22728392481803894, -0.14394208788871765, -0.1132194772362709, -1.2040065485052764e-05, -0.00023469554434996098, -0.00619669072329998, -0.007753633428364992, -0.001328539103269577, -0.005043996497988701, -2.3007127310847864e-05, -0.00013433984713628888, -0.0005760917556472123, -0.77699214220047, -0.13370436429977417, -0.004570395220071077, -0.00013481661153491586, -0.00017295771976932883, -0.003338123671710491, -0.0037820255383849144, -7.855583680793643e-05, -1.3470558769768104e-05, -0.013666749931871891, -0.009564646519720554, -0.059948407113552094, -2.1980557441711426, -0.14460325241088867, -0.01825227029621601, -0.0002335037279408425, -0.11803445965051651, -0.0671377182006836, -0.0020208191126585007, -6.341733387671411e-05, -0.00024625606602057815, -9.536738616588991e-07, -0.0001399419124936685, -0.0006730675231665373, -0.11858687549829483, -0.16048182547092438, -0.010282163508236408, -0.00010859376925509423, -0.00010215714428341016, -0.000534868217073381, -0.00013529339048545808, -1.5497195136049413e-06, -3.4570634852570947e-06, -0.9966788291931152, -0.0363176167011261, -0.20086534321308136, -0.058638446033000946, -0.0014459164813160896, -0.8108903765678406, -0.021493833512067795, -2.0869269371032715], "finish_reason": "stop"}], "metrics": {"energy": 90.64837983894344, "energy_per_token": 1.1927418399860978, "time": 2.957819, "time_per_token": 0.03891867105263158}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n    return pd.concat([pd.read_csv(os.path.join(data_dir, f)) for f in csv_files])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", " for", " f", " in", " c", "sv", "_", "files", "])", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.7708095908164978, -2.4193129539489746, -0.02442145347595215, -0.00019596086349338293, -0.009497813880443573, -0.0403093583881855, -0.006411103531718254, -2.074220174108632e-05, -0.000416907190810889, -2.145764938177308e-06, -0.00020072828920092434, -0.0010746901389211416, -0.14544302225112915, -7.152531907195225e-06, -0.0002138386043952778, -0.011768674477934837, -0.0002783149539027363, -0.00025781645672395825, -0.005818216595798731, -2.3841830625315197e-06, -0.00046850196667946875, -0.0003904534096363932, -1.0144670009613037, -0.4981454610824585, -0.037248339504003525, -0.0004312062228564173, -0.00015424491721205413, -0.003107839496806264, -4.351044481154531e-05, -2.3841855067985307e-07, -1.2993727978027891e-05, -0.5765255689620972, -1.2223963737487793, -1.1920928244535389e-07, -3.576278118089249e-07, -4.577531944960356e-05, -7.557583012385294e-05, -0.09638283401727676], "finish_reason": "stop"}], "metrics": {"energy": 42.85545579338073, "energy_per_token": 0.7518501016382584, "time": 2.328709, "time_per_token": 0.04085454385964912}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n\n    pd.set_option('display.max_rows', 50)\n\n    # Merge or concatenate multiple CSV files into a pandas DataFrame\n    return pd.concat([pd.read_csv(os.path.join(data_dir, filename)) for filename in csv_files])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "pd", ".", "set", "_", "option", "('", "display", ".", "max", "_", "rows", "'", ",", " ", "5", "0", ")", "\n", "\n", "    ", "#", " Mer", "ge", " or", " concaten", "ate", " multiple", " CS", "V", " files", " into", " a", " pandas", " Data", "Frame", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", "))", " for", " filename", " in", " c", "sv", "_", "files", "])", "\n", "\n", "if"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.62227863073349, -0.0003475538978818804, -4.219649314880371, -0.19294561445713043, -0.4969847500324249, -0.00038890427094884217, -0.0031688022427260876, -0.1883193701505661, -0.11293117702007294, -3.731181277544238e-05, -0.08674747496843338, -0.00019536493346095085, -0.5364096760749817, -5.030505417380482e-05, -0.003005632432177663, -0.8566439747810364, -0.34027889370918274, -0.4702855944633484, -2.66001033782959, -0.05689486861228943, -1.40004563331604, -0.0002422039397060871, -1.822395920753479, -2.860816240310669, -0.061632540076971054, -2.6034812927246094, -0.11554713547229767, -0.006884544622153044, -1.8087348937988281, -0.11557114124298096, -0.0023319926112890244, -0.003078129142522812, -0.6695363521575928, -0.0416557677090168, -2.486821413040161, -0.0610976442694664, -0.006625470705330372, -0.20538870990276337, -0.004364844877272844, -2.9069910049438477, -0.05806797742843628, -0.00025996167096309364, -0.013856876641511917, -0.04649799317121506, -0.009666184894740582, -1.5020257706055418e-05, -0.00040260792593471706, -7.152555099310121e-07, -0.00019047829846385866, -0.0009062950266525149, -0.11312856525182724, -4.172316494077677e-06, -0.00010168035078095272, -0.021243302151560783, -0.00017355366435367614, -0.00017593742813915014, -0.005474100820720196, -1.0132738680113107e-05, -0.00023624490131624043, -0.00031513971043750644, -1.697282075881958, -0.06392013281583786, -0.10463116317987442, -0.00029273517429828644, -0.0004111875023227185, -0.0040039620362222195, -0.00012206286191940308, -1.9073468138230965e-06, -1.537788011773955e-05, -0.884347140789032, -0.5406093597412109, -0.02080008015036583, -0.771625816822052], "finish_reason": "stop"}], "metrics": {"energy": 89.93287085723878, "energy_per_token": 0.9775312049699868, "time": 3.7906113, "time_per_token": 0.04120229673913044}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n    else:\n        return pd.concat([pd.read_csv(os.path.join(data_dir, f)) for f in csv_files])", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", " for", " f", " in", " c", "sv", "_", "files", "])", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.7708095908164978, -0.8860582113265991, -0.00011193125828867778, -0.005578189622610807, -0.0074418941512703896, -1.0002474784851074, -0.01732536591589451, -5.471556869451888e-05, -0.012519224546849728, -0.0497906357049942, -0.005123936105519533, -2.288792165927589e-05, -0.00032300499151460826, -1.9073468138230965e-06, -0.0002494739310350269, -0.0009885906474664807, -0.1115255132317543, -6.318072337307967e-06, -0.0001691436773398891, -0.007231134455651045, -0.0002628219372127205, -0.0002628219372127205, -0.0038576724473387003, -2.145764938177308e-06, -0.000316927267704159, -0.00033396866638213396, -1.0140280723571777, -0.49753692746162415, -0.04813311621546745, -0.0005231918767094612, -0.00014399446081370115, -0.002408938482403755, -3.4927710657939315e-05, -1.1920928244535389e-07, -1.4662635294371285e-05, -0.5259791016578674, -1.1412014961242676, -1.1920928244535389e-07, -3.576278118089249e-07, -3.504691630951129e-05, -9.023735765367746e-05, -0.069490946829319], "finish_reason": "stop"}], "metrics": {"energy": 77.85177737236022, "energy_per_token": 1.276258645448528, "time": 2.3231053, "time_per_token": 0.03808369344262295}}
{"outputs": [{"text": "if len(csv_files) == 0:  # Check if the list is empty\n        return pd.DataFrame()  # Return an empty DataFrame\n    if os.path.isdir(data_dir):  # Check if the directory exists\n        csv_files = os.listdir(data_dir)  # List all files in the directory\n\n    # Filter files based on the file extension\n    csv_files = list(filter(lambda file_name: file_name.endswith(\".csv\"), csv_files))\n\n    # Check if the list is still empty after filtering\n    if not csv_files:\n        return pd.DataFrame()\n\n    # Convert the list of file names to a list of file paths\n    csv_files = [os.path.join(data_dir, file_name) for file_name in csv_files]\n\n    # Read CSV files into DataFrame\n    csv_files = [pd.read_csv(csv_file, index_col=0) for csv_file in csv_files]\n\n    # Concatenate DataFrames into a", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "  ", "#", " Check", " if", " the", " list", " is", " empty", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "  ", "#", " Return", " an", " empty", " Data", "Frame", "\n", "    ", "if", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", "):", "  ", "#", " Check", " if", " the", " directory", " exists", "\n", "        ", "csv", "_", "files", " =", " os", ".", "list", "dir", "(", "data", "_", "dir", ")", "  ", "#", " List", " all", " files", " in", " the", " directory", "\n", "\n", "    ", "#", " Filter", " files", " based", " on", " the", " file", " extension", "\n", "    ", "csv", "_", "files", " =", " list", "(", "filter", "(", "lambda", " file", "_", "name", ":", " file", "_", "name", ".", "end", "sw", "ith", "(", "\"", ".", "csv", "\"", ")", ",", " c", "sv", "_", "files", "))", "\n", "\n", "    ", "#", " Check", " if", " the", " list", " is", " still", " empty", " after", " filtering", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Convert", " the", " list", " of", " file", " names", " to", " a", " list", " of", " file", " paths", "\n", "    ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " file", "_", "name", ")", " for", " file", "_", "name", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "#", " Read", " CS", "V", " files", " into", " Data", "Frame", "\n", "    ", "csv", "_", "files", " =", " [", "pd", ".", "read", "_", "csv", "(", "csv", "_", "file", ",", " index", "_", "col", "=", "0", ")", " for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " Data", "F", "rames", " into", " a"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -2.570582866668701, -0.0005173536483198404, -2.5673913955688477, -0.13184846937656403, -0.9522286057472229, -0.21725063025951385, -0.3047088086605072, -0.0040070489048957825, -0.13131576776504517, -0.000952386180870235, -0.09542539715766907, -0.0240594744682312, -2.1219027985353023e-05, -0.0007120219524949789, -0.10238263756036758, -1.5927003622055054, -0.00025293012731708586, -0.09588570892810822, -0.04851328954100609, -0.0002488780301064253, -0.04504847154021263, -0.0020198675338178873, -0.2564062178134918, -1.3917875289916992, -3.24896502494812, -1.7443196773529053, -0.00019941726350225508, -0.04119713604450226, -0.011602777987718582, -0.450321763753891, -0.3959842622280121, -0.0005639393348246813, -0.007321431767195463, -7.557583012385294e-05, -4.4225667807040736e-05, -0.14547507464885712, -0.26835504174232483, -0.00012540031457319856, -0.04407935589551926, -0.010581105016171932, -0.11968560516834259, -0.5057106018066406, -0.1867915689945221, -0.03515748307108879, -0.004729394800961018, -1.501889944076538, -0.0030573313124477863, -0.15890425443649292, -0.13519209623336792, -1.65423583984375, -0.0010882653295993805, -0.06036507710814476, -8.583032467868179e-06, -0.0003164505760651082, -0.009301777929067612, -2.3483953555114567e-05, -0.00015114595589693636, -0.0003808011533692479, -0.05505595728754997, -0.00034731553751043975, -2.6906752586364746, -0.5064795613288879, -0.4976724088191986, -0.03670242056250572, -0.016714297235012054, -0.03379272297024727, -0.021027609705924988, -2.753854751586914, -0.05100778862833977, -2.0295252799987793, -1.4067424535751343, -1.7553194761276245, -1.2681626081466675, -0.00054058717796579, -1.3817578554153442, -1.5194259881973267, -0.29221636056900024, -0.3683389127254486, -0.0008562712464481592, -0.0768650472164154, -0.0006423317245207727, -0.005888376850634813, -0.0108671048656106, -2.5220844745635986, -0.001312943291850388, -0.16976475715637207, -0.0008531744824722409, -0.009272133000195026, -1.8440842628479004, -2.252326250076294, -0.010239450260996819, -0.00018153927521780133, -0.08415086567401886, -1.5735502529423684e-05, -1.6927575416048057e-05, -0.0035391333512961864, -0.07484884560108185, -4.124556289752945e-05, -1.1920928244535389e-07, -1.3288613557815552, -0.03285877779126167, -0.014192597009241581, -0.001053850632160902, -7.045020902296528e-05, -0.00011383838864276186, -0.009814579039812088, -0.006600838620215654, -6.079655122448457e-06, -9.536738616588991e-07, -1.3708974620385561e-05, -0.000301673193462193, -0.04434966295957565, -0.17737850546836853, -0.0003746046277228743, -0.9186699986457825, -3.0374045372009277, -0.10485435277223587, -1.3277534246444702, -0.9222576022148132, -0.5571790337562561, -1.424959421157837, -0.11939757317304611, -0.37532204389572144, -0.10243439674377441, -0.10663283616304398, -0.0005230727256275713, -0.005819402169436216, -1.9180359840393066, -0.03981940820813179, -1.847726889536716e-05, -8.344646857949556e-07, -4.887569048150908e-06, -0.00551630649715662, -0.27182409167289734, -0.0002613918040879071, -0.10573578625917435, -0.018178289756178856, -3.981510963058099e-05, -0.00043871314846910536, -0.01005453523248434, -0.40445202589035034, -0.03775332495570183, -0.0006578188622370362, -0.4496840238571167, -4.128941535949707, -0.7355777025222778, -0.814063310623169, -0.2748755216598511, -0.4693065583705902, -0.06617996841669083, -0.21793334186077118, -0.2012999802827835, -0.11910924315452576, -0.0008208957733586431, -0.9651876091957092, -0.0434868223965168, -0.0566621758043766, -0.0003424296446610242, -0.5597494840621948, -0.0002184867626056075, -1.0156335830688477, -0.02322983928024769, -0.04229258373379707, -0.03167152404785156, -8.344646857949556e-07, -9.405170567333698e-05, -0.007005533203482628, -0.0006996329175308347, -0.00011383838864276186, -0.003677749540656805, -2.5629668016335927e-05, -0.00011038171214750037, -0.00018702188390307128, -0.24300983548164368, -0.016642078757286072, -0.00033706706017255783, -0.000577402301132679, -0.006216238718479872, -8.248942322097719e-05, -2.50339189733495e-06, -8.702239938429557e-06, -0.00013207517622504383, -0.0004926898400299251, -0.0005286726518534124, -1.4305104514278355e-06, -1.7881377516459906e-06, -0.0009093916742131114, -0.0018022499280050397, -0.08405913412570953, -0.00032419670606032014, -0.18376438319683075, -0.9233223795890808, -2.3635387420654297, -0.006170982029289007, -0.026078177616000175, -0.7563858032226562, -1.1504685878753662, -1.193700909614563, -0.6599964499473572, -0.0006391151691786945, -3.0673606395721436, -0.007111830171197653, -1.5990256071090698, -0.1917070746421814, -0.18148300051689148, -0.004650253802537918, -0.00022599527437705547, -0.00030524839530698955, -5.960462772236497e-07, -0.000161038784426637, -0.00039057256071828306, -2.8942601680755615, -0.003536401316523552, -0.05069882422685623, -1.1778852939605713, -0.8568133115768433, -1.1920928244535389e-07, -0.00030787018476985395, -0.04802348092198372, -0.4390885531902313, -0.0513361357152462, -0.021877268329262733, -0.00013767725613433868, -6.568216485902667e-05, -1.311301275563892e-06, -2.372236667724792e-05, -0.00031990656862035394, -0.0007961202645674348, -8.225102646974847e-05, -3.576278118089249e-07, -8.106198947643861e-06, -0.006228677928447723, -0.0026680370792746544, -0.14113137125968933, -0.0002526917669456452, -0.058356571942567825, -0.3615111708641052, -0.00015805903240107, -0.017652662470936775, -0.0050940485671162605, -1.2068490982055664, -0.3272300958633423, -0.0001227780303452164, -1.9496569633483887, -0.1360166221857071], "finish_reason": "length"}], "metrics": {"energy": 287.7573346843718, "energy_per_token": 1.1240520886108274, "time": 10.936895, "time_per_token": 0.04272224609375}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    df = pd.concat([pd.read_csv(os.path.join(data_dir, filename)) for filename in csv_files])\n    return df", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "df", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", "))", " for", " filename", " in", " c", "sv", "_", "files", "])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.5181799530982971, -0.0003513672563713044, -1.774991512298584, -0.6590876579284668, -0.0771452859044075, -0.0015566148795187473, -0.339285671710968, -0.11195151507854462, -0.0074908798560500145, -9.417090768693015e-05, -0.00034683887497521937, -9.536738616588991e-07, -0.00022194306075107306, -0.0007628867751918733, -0.15386644005775452, -5.364403477869928e-06, -0.0001510267611593008, -0.00669900793582201, -0.00023898606013972312, -0.00022957073815632612, -0.003504921682178974, -3.302042750874534e-05, -0.0003578022588044405, -0.0002867764269467443, -1.9138987064361572, -0.04385370388627052, -0.12784354388713837, -0.000331704446580261, -0.00043132537393830717, -0.004552595317363739, -0.00032228996860794723, -0.0001711698860162869, -1.0013530300057027e-05, -1.0059014558792114, -0.019159255549311638, -0.6640481352806091, -0.06858208775520325, -0.0010224120924249291, -0.967876136302948, -1.1920928244535389e-07, -4.768370445162873e-07, -2.4199192921514623e-05, -0.00010859376925509423, -0.08228162676095963], "finish_reason": "stop"}], "metrics": {"energy": 44.685681664466856, "energy_per_token": 0.7573844349909636, "time": 2.3269517, "time_per_token": 0.0394398593220339}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    data_list = []\n\n    for csv_file in csv_files:\n        csv_file = os.path.join(data_dir, csv_file)\n        if os.path.isfile(csv_file):\n            data_list.append(pd.read_csv(csv_file, index_col=None))\n        else:\n            raise FileNotFoundError(f\"File {csv_file} not found\")\n\n    return pd.concat(data_list, ignore_index=True)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "data", "_", "list", " =", " []", "\n", "\n", "    ", "for", " c", "sv", "_", "file", " in", " c", "sv", "_", "files", ":", "\n", "        ", "csv", "_", "file", " =", " os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " c", "sv", "_", "file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "csv", "_", "file", "):", "\n", "            ", "data", "_", "list", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "csv", "_", "file", ",", " index", "_", "col", "=", "None", "))", "\n", "        ", "else", ":", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "File", " {", "csv", "_", "file", "}", " not", " found", "\"", ")", "\n", "\n", "    ", "return", " pd", ".", "concat", "(", "data", "_", "list", ",", " ignore", "_", "index", "=", "True", ")"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.5181799530982971, -0.0003513672563713044, -2.4844794273376465, -0.6594050526618958, -2.587898015975952, -0.013220862485468388, -0.5453342199325562, -0.007380363065749407, -1.8618910312652588, -0.00015352977789007127, -0.07687917351722717, -1.739126205444336, -0.0013386583887040615, -0.029371146112680435, -0.027295289561152458, -0.0063457186333835125, -0.017748698592185974, -0.001447345013730228, -7.092700980138034e-05, -1.0490362910786644e-05, -0.0003234816831536591, -0.00194193993229419, -0.004196765832602978, -2.3923234939575195, -0.0028368488419800997, -1.4871469736099243, -1.2075272798538208, -0.028006112203001976, -4.410734163684538e-06, -0.00011252723925281316, -0.009333665482699871, -0.006294663064181805, -0.00035208225017413497, -0.0046554747968912125, -1.2993727978027891e-05, -6.806619057897478e-05, -0.00051115796668455, -0.0023895539343357086, -0.0005590544897131622, -4.768360213347478e-06, -0.0012647256953641772, -0.00037377048283815384, -0.00610344810411334, -0.08558402210474014, -1.8063642978668213, -0.36770257353782654, -0.0004986473359167576, -0.0010975534096360207, -0.003262556390836835, -0.8661231398582458, -0.001459129503928125, -9.667406266089529e-05, -0.0007150000892579556, -4.768370445162873e-07, -1.8954096958623268e-05, -0.04127458110451698, -0.00982366781681776, -0.0012775840004906058, -0.15892887115478516, -0.07688911259174347, -0.004647762048989534, -0.0010640918044373393, -0.00047839165199548006, -0.0016056514577940106, -0.039543405175209045, -1.728519782773219e-05, -0.0015939876902848482, -2.9802276912960224e-06, -0.0002299282787134871, -4.589452510117553e-05, -0.0017185931792482734, -3.814689989667386e-06, -3.313963316031732e-05, -1.4597774744033813, -0.6236259937286377, 0.0, -0.0005463061388581991, -0.06450672447681427, -2.123814821243286, -0.18906739354133606, -0.002826506970450282, -0.7372015118598938, -0.028617272153496742, -4.1960789531003684e-05, -0.004994416609406471, -0.0006654431927017868, -0.6235586404800415, -0.3739556670188904, -0.002378731733188033, -0.00015186110977083445, -0.05009738728404045, -0.22351808845996857, -0.1897139847278595, -0.6133266687393188, -1.8257026672363281, -0.0015975582646206021, -2.5033637939486653e-05, -0.000570253818295896, -0.007493246346712112, -0.08725418895483017, -0.0007307243067771196, -1.7870512008666992, -0.0016299308044835925, -0.0037557794712483883, -0.05875434726476669, -0.0012253165477886796, -0.4027459919452667, -0.009335909970104694, -4.768360213347478e-06, -0.002209009835496545, -0.0004570631426759064, -0.0008222059695981443, -3.0278701160568744e-05, -5.328513361746445e-05, -0.45257383584976196, -0.5536993741989136, -9.536738616588991e-07, -0.0003962923656217754, -0.0014781750505790114, -0.00813504122197628, -0.4151764214038849], "finish_reason": "stop"}], "metrics": {"energy": 134.85435112380986, "energy_per_token": 0.9915761112044843, "time": 5.691561, "time_per_token": 0.04184971323529412}}
{"outputs": [{"text": "if csv_files:\n        files = [os.path.join(data_dir, x) for x in csv_files]\n        return pd.concat([pd.read_csv(f) for f in files], axis=0)\n    else:\n        return pd.DataFrame()", "tokens": ["if", " c", "sv", "_", "files", ":", "\n", "        ", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " x", ")", " for", " x", " in", " c", "sv", "_", "files", "]", "\n", "        ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "f", ")", " for", " f", " in", " files", "]", ",", " axis", "=", "0", ")", "\n", "    ", "else", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "if"], "logprobs": [-0.5293303728103638, -1.47682785987854, -9.321732068201527e-05, -1.3470558769768104e-05, -8.106198947643861e-06, -0.6071025729179382, -0.04243335872888565, -0.008498928509652615, -2.3228769302368164, -0.19699056446552277, -0.2228839248418808, -0.30711719393730164, -7.986990567587782e-06, -0.0003492222458589822, -0.008053923025727272, -0.0035929428413510323, -0.0007499027997255325, -0.005477894563227892, -2.098061486321967e-05, -7.533743337262422e-05, -0.0004295380203984678, -3.5438408851623535, -0.0023280680179595947, -0.0031054625287652016, -0.00023910524032544345, -0.0002157455455744639, -0.00558779202401638, -0.0031825865153223276, -0.00036113892565481365, -8.22540732769994e-06, -0.008773352019488811, -0.012339912354946136, -0.05322326347231865, -0.6122614145278931, -0.016293223947286606, -7.128461584215984e-05, -0.015854138880968094, -0.049360569566488266, -0.003670860780403018, -9.536697689327411e-06, -0.00028308198670856655, -6.318072337307967e-06, -0.00023588736075907946, -0.0010026433737948537, -1.5956580638885498, -0.17511802911758423, -0.017198940739035606, -0.00011801023356383666, -0.00010966652916977182, -0.0013072286965325475, -0.7733402252197266, -0.0007649118197150528, -1.255338430404663, -0.035007163882255554, -0.030277937650680542, -0.3572308123111725, -0.09264405816793442, -0.05057462304830551, -0.16582277417182922, -0.00021634146105498075, -0.006300467532128096, -0.0003177614707965404, -0.01732618547976017, -0.03495421260595322, -0.00017236177518498152, -0.002241005888208747, -0.20435771346092224, -0.6274673342704773, -0.04579108953475952, -0.6822693943977356], "finish_reason": "stop"}], "metrics": {"energy": 94.20981480979918, "energy_per_token": 1.3458544972828455, "time": 2.9616723, "time_per_token": 0.042309604285714286}}
{"outputs": [{"text": "if len(csv_files) == 0:\n        return pd.DataFrame()\n    # merge all csv files into one df\n    df = pd.concat([pd.read_csv(os.path.join(data_dir, f)) for f in csv_files], axis=0)\n\n    # return df\n    return df", "tokens": ["if", " len", "(", "csv", "_", "files", ")", " ==", " ", "0", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "#", " merge", " all", " c", "sv", " files", " into", " one", " df", "\n", "    ", "df", " =", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", "))", " for", " f", " in", " c", "sv", "_", "files", "]", ",", " axis", "=", "0", ")", "\n", "\n", "    ", "#", " return", " df", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -1.273195505142212, -0.00016306500765495002, -0.002339247614145279, -1.7881377516459906e-06, -1.2278481335670222e-05, -0.0037287012673914433, -0.0673491507768631, -0.00043275527423247695, -0.0016214807983487844, -0.005471255164593458, -0.0896410420536995, -0.0014150853967294097, -0.057427287101745605, -0.023966021835803986, -2.4676019165781327e-05, -0.0012892514932900667, -0.08503802865743637, -0.019733300432562828, -0.7708095908164978, -3.0834174156188965, -4.547554969787598, -1.5511702299118042, -0.8999782800674438, -0.0024039437994360924, -0.08814515173435211, -0.784974217414856, -1.2347019910812378, -2.6436750888824463, -0.21134141087532043, -0.006760936230421066, -1.218645691871643, -0.13388007879257202, -0.020273607224225998, -0.00043478095903992653, -0.14626675844192505, -0.08155541121959686, -0.005866333842277527, -1.5258672647178173e-05, -0.00044383687782101333, -2.145764938177308e-06, -0.0002574589161667973, -0.001101244823075831, -0.21274825930595398, -6.318072337307967e-06, -0.00036066226311959326, -0.013749766163527966, -0.0004542034293990582, -0.00041237910045310855, -0.007611322216689587, -6.6756979322235566e-06, -0.00018142008048016578, -0.0004858981992583722, -0.8757048845291138, -0.5615774989128113, -0.07783489674329758, -0.0007418026216328144, -0.00032109825406223536, -0.004331848584115505, -0.003192092990502715, -0.00030429501202888787, -1.4185804502631072e-05, -0.4868665337562561, -0.0008973624208010733, -1.0501739978790283, -0.02437177672982216, -0.06121785566210747, -0.2189578115940094, -0.042754825204610825, -1.963505744934082, -0.009803954511880875, -2.3429651260375977, -2.499542713165283, -1.3225314617156982, -0.21092694997787476, -0.026272578164935112, -0.03383052349090576, -0.007429588586091995, -1.2543690204620361, -2.3841855067985307e-07, -3.576278118089249e-07, -1.9430925021879375e-05, -8.475421054754406e-05, -0.08086099475622177], "finish_reason": "stop"}], "metrics": {"energy": 96.75704471969604, "energy_per_token": 1.1518695799963814, "time": 3.3826644, "time_per_token": 0.04026981428571429}}
{"outputs": [{"text": "# Check requirements\n    if not csv_files:\n        return pd.DataFrame()\n    elif os.path.isdir(data_dir):\n        csv_files = [os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.endswith('.csv')]\n\n    if not csv_files:\n        return pd.DataFrame()\n\n    return pd.concat([pd.read_csv(f) for f in csv_files], ignore_index=True)", "tokens": ["#", " Check", " requirements", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "elif", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", "):", "\n", "        ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", " for", " f", " in", " os", ".", "list", "dir", "(", "data", "_", "dir", ")", " if", " f", ".", "end", "sw", "ith", "('", ".", "csv", "')", "]", "\n", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "f", ")", " for", " f", " in", " c", "sv", "_", "files", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "if"], "logprobs": [-1.795003056526184, -1.042848825454712, -2.469329357147217, -0.33604374527931213, -0.006265995092689991, -1.0535306930541992, -0.2756173610687256, -4.093945503234863, -0.006365618668496609, -0.0013761583250015974, -0.000386640167562291, -0.10991732031106949, -0.044599488377571106, -0.0005071069463156164, -0.12540261447429657, -0.030343396589159966, -0.00022003613412380219, -0.0019031523261219263, -0.07107693701982498, -0.020666737109422684, -0.6369042992591858, -1.6994662284851074, -3.2448766231536865, -0.0005869334563612938, -0.2174508273601532, -0.03732322156429291, -0.41176000237464905, -0.4799032509326935, -0.0007840896723791957, -0.008608730509877205, -7.056941103655845e-05, -3.9934315282152966e-05, -0.28399550914764404, -0.023237410932779312, -0.012680025771260262, -1.7502412796020508, -0.005513935349881649, -0.14154918491840363, -0.10119253396987915, -0.3556564748287201, -0.31532931327819824, -0.00011455356434453279, -0.00025018901214934886, -0.003613016800954938, -0.0050195627845823765, -0.0003682888636831194, -0.008662385866045952, -1.0847986231965479e-05, -3.766942609217949e-05, -0.00045789722935296595, -0.6313334703445435, -0.12624101340770721, -0.009766887873411179, -0.0006749735912308097, -0.00040463366894982755, -1.9877564907073975, -0.007758838124573231, -0.00039057256071828306, -3.099436753473128e-06, -0.0015791100449860096, -0.0036488876212388277, -4.124556289752945e-05, -8.34461570775602e-06, -0.503471314907074, -0.060854822397232056, -0.148905947804451, -0.008458148688077927, -0.05641951411962509, -2.3245540432981215e-05, -1.1920928244535389e-07, -0.25812867283821106, -0.032074857503175735, -0.0004065402317792177, -0.000666277133859694, -0.03810349851846695, -0.009329532273113728, -1.0150688886642456, -0.010194611735641956, -2.430706024169922, -0.5977327227592468, -0.26479727029800415, -2.098061486321967e-05, -1.2516897186287679e-05, -1.4185804502631072e-05, -0.031109029427170753, -0.02272643707692623, -0.0005946775199845433, -0.22275638580322266, -0.026778725907206535, -0.00013267113536130637, -0.0011239885352551937, -0.01436252985149622, -0.0067732506431639194, -0.25039514899253845, -0.001128513365983963, -1.1365561485290527, -0.014758927747607231, -0.00013982271775603294, -0.03229198977351189, -0.05989350378513336, -0.0034322182182222605, -6.294052582234144e-05, -0.00016366096679121256, -4.410734163684538e-06, -0.00012599628826137632, -0.0009058186551555991, -0.20958134531974792, -0.17641954123973846, -0.010004023090004921, -7.426462980220094e-05, -6.151010165922344e-05, -0.00328132975846529, -1.7762025890988298e-05, -1.1920928244535389e-07, -6.6756979322235566e-06, -0.7349482178688049, -0.0005054388311691582, -0.4436647891998291, -4.768370445162873e-07, -0.002846715273335576, -0.004771394655108452, -0.009628640487790108, -0.2692394554615021, -0.24889041483402252, -0.03261615335941315, -0.6834060549736023], "finish_reason": "stop"}], "metrics": {"energy": 124.24727685546877, "energy_per_token": 0.9860894988529267, "time": 5.2706985, "time_per_token": 0.04183094047619047}}
{"outputs": [{"text": "# Check requirements for pandas and os libraries\n    if not (os.path.exists(pd.__file__) and os.path.exists(os.path.dirname(pd.__file__))):\n        raise ImportError(\"Requires pandas and os libraries\")\n\n    data_dir = data_dir.strip(\"/\")\n\n    csv_files = [os.path.join(data_dir, filename) for filename in csv_files]\n\n    if not csv_files:  # If no CSV files are passed, return an empty DataFrame\n        return pd.DataFrame()\n\n    return pd.concat([pd.read_csv(f) for f in csv_files])", "tokens": ["#", " Check", " requirements", " for", " pandas", " and", " os", " libraries", "\n", "    ", "if", " not", " (", "os", ".", "path", ".", "exists", "(", "pd", ".", "__", "file", "__", ")", " and", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "pd", ".", "__", "file", "__", "))", "):", "\n", "        ", "raise", " Import", "Error", "(", "\"", "Requ", "ires", " pandas", " and", " os", " libraries", "\"", ")", "\n", "\n", "    ", "data", "_", "dir", " =", " data", "_", "dir", ".", "strip", "(", "\"", "/\"", ")", "\n", "\n", "    ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " filename", ")", " for", " filename", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "if", " not", " c", "sv", "_", "files", ":", "  ", "#", " If", " no", " CS", "V", " files", " are", " passed", ",", " return", " an", " empty", " Data", "Frame", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "f", ")", " for", " f", " in", " c", "sv", "_", "files", "])", "\n", "\n", "if"], "logprobs": [-1.795003056526184, -1.042848825454712, -2.469329357147217, -2.8249783515930176, -1.0819015502929688, -0.11414015293121338, -0.015905646607279778, -2.686225414276123, -0.21365472674369812, -0.015271991491317749, -0.894741415977478, -0.24626578390598297, -1.4172680377960205, -1.6884324550628662, -0.0020743536297231913, -0.12725789844989777, -0.07819578796625137, -0.13438275456428528, -0.6060157418251038, -3.095290422439575, -0.500277578830719, -0.038668494671583176, -0.2101815789937973, -0.00021765247220173478, -0.0721045508980751, -0.040124308317899704, -0.03055269457399845, -0.0009213017183355987, -0.0005080600967630744, -0.0036128980573266745, -0.0018070096848532557, -0.004211485851556063, -0.019380144774913788, -0.00015209948469419032, -0.13588331639766693, -0.022492999210953712, -0.7071484327316284, -0.002248261356726289, -0.6273340582847595, -3.1470757676288486e-05, -0.0014557965332642198, -0.0010924329981207848, -5.1616290875244886e-05, -0.16665785014629364, -0.049577951431274414, -0.01303920429199934, -0.001884352881461382, -0.07945243269205093, -0.3177160918712616, -0.0009742995607666671, -0.20668935775756836, -0.15231740474700928, -2.982761859893799, -0.8778047561645508, -0.11982203274965286, -0.35396185517311096, -0.13613970577716827, -0.3341759145259857, -1.3610460758209229, -0.0016544476384297013, -0.003596862778067589, -0.16858668625354767, -0.0007348936051130295, -3.448406219482422, -0.7799286246299744, -0.9505682587623596, -0.08444013446569443, -1.7846088409423828, -0.0003137096355203539, -0.00045170116936787963, -0.9465035796165466, -0.7845278382301331, -2.570655345916748, -0.20191892981529236, -0.40812280774116516, -0.01688591204583645, -0.2404722422361374, -1.1693832874298096, -0.00036352223833091557, -3.2037336826324463, -0.0038988778833299875, -0.18029527366161346, -0.15063409507274628, -0.386852890253067, -0.7368195652961731, -2.52720492426306e-05, -0.0006584145012311637, -2.4199192921514623e-05, -0.03566191345453262, -0.0037190811708569527, -0.02857927419245243, -3.266281055402942e-05, -1.9907753085135482e-05, -0.002304519060999155, -2.708406925201416, -0.21919910609722137, -0.0636976808309555, -0.001065163523890078, -0.001258534612134099, -0.009976759552955627, -1.2397689715726301e-05, -1.6331539882230572e-05, -3.075552376685664e-05, -0.08069605380296707, -0.05266745388507843, -0.3795182406902313, -0.00016664070426486433, -0.6209479570388794, -0.743681788444519, -0.13042093813419342, -1.1444026313256472e-05, -3.2186455882765586e-06, -1.549708758830093e-05, -0.01625862531363964, -2.897275924682617, -0.0003793711948674172, -1.1264671087265015, -1.2345153093338013, -1.9672091007232666, -0.002100168028846383, -0.008429305627942085, -0.2946135401725769, -0.8244221806526184, -0.4362470209598541, -0.0473942831158638, -0.07807286083698273, -0.00029976642690598965, -0.048723019659519196, -0.0022220939863473177, -0.04631602391600609, -0.0003163314249832183, -0.044850848615169525, -0.01928321272134781, -0.0002422039397060871, -0.002031288342550397, -0.11717907339334488, -0.005689972545951605, -0.14877353608608246, -0.0004673104267567396, -1.3288240432739258, -0.013853702694177628, -0.0002978596603497863, -0.024993300437927246, -0.0655466839671135, -0.00596955232322216, -2.5748875486897305e-05, -0.0002760506176855415, -7.152555099310121e-07, -0.0004220310365781188, -0.0008248264202848077, -1.84945547580719, -0.2311861664056778, -0.016851920634508133, -8.844937838148326e-05, -0.00019500737835187465, -0.0018669809214770794, -9.48860906646587e-05, -3.576278118089249e-07, -1.0013530300057027e-05, -0.714392900466919, -0.9620213508605957, -0.024671422317624092, -0.6924543380737305], "finish_reason": "stop"}], "metrics": {"energy": 201.59960291862487, "energy_per_token": 1.2368073798688641, "time": 6.9518027, "time_per_token": 0.042649096319018406}}
{"outputs": [{"text": "if not os.path.isdir(data_dir) or not os.listdir(data_dir):\n        raise ValueError(\"Path is not a directory or is an empty directory\")\n\n    csv_files = [os.path.join(data_dir, f) for f in csv_files]\n\n    df = pd.read_csv(csv_files[0])\n    for filename in csv_files[1:]:\n        df = pd.concat([df, pd.read_csv(filename)], ignore_index=True)\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "data", "_", "dir", ")", " or", " not", " os", ".", "list", "dir", "(", "data", "_", "dir", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Path", " is", " not", " a", " directory", " or", " is", " an", " empty", " directory", "\"", ")", "\n", "\n", "    ", "csv", "_", "files", " =", " [", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", " for", " f", " in", " c", "sv", "_", "files", "]", "\n", "\n", "    ", "df", " =", " pd", ".", "read", "_", "csv", "(", "csv", "_", "files", "[", "0", "])", "\n", "    ", "for", " filename", " in", " c", "sv", "_", "files", "[", "1", ":", "]:", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "read", "_", "csv", "(", "filename", ")]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -2.4677658081054688, -0.0002708068350329995, -0.01475375983864069, -0.018597986549139023, -0.9322852492332458, -0.010750002227723598, -0.0004245333548169583, -0.004702105652540922, -9.822363062994555e-05, -7.784063927829266e-05, -2.470391035079956, -0.04850715398788452, -0.3355216681957245, -1.1329944133758545, -0.0007606235449202359, -0.9619815945625305, -9.775113539944869e-06, -0.00038389943074434996, -0.005836468189954758, -3.2543604902457446e-05, -4.589452510117553e-05, -0.046145401895046234, -0.03917539864778519, -0.0018754289485514164, -1.092847228050232, -0.9315916895866394, -4.625213477993384e-05, -0.21917757391929626, -0.4175935983657837, -3.9846198558807373, -0.8330046534538269, -0.3362407684326172, -0.22371025383472443, -0.5578402280807495, -0.14623771607875824, -1.9696811437606812, -1.7794342041015625, -0.002431652508676052, -0.03959256410598755, -1.2696059942245483, -0.0006871246150694788, -0.0034686895087361336, -0.3427088260650635, -0.0005946775199845433, -2.584294319152832, -0.0034141603391617537, -0.21961751580238342, -0.14498227834701538, -0.19669820368289948, -0.10264021903276443, -5.125986263010418e-06, -0.0002205128694185987, -0.0027052494697272778, -0.012256425805389881, -0.00031394799589179456, -0.006327949929982424, -1.4185804502631072e-05, -0.00010644822759786621, -0.0004615910293068737, -0.7548032402992249, -0.10704025626182556, -0.010754483751952648, -0.0002051381452474743, -0.00025948495022021234, -0.014683631248772144, -0.00010501786891836673, -5.960446742392378e-06, -3.635817120084539e-05, -0.1242702454328537, -0.04531623795628548, -0.5439850687980652, -0.00013040646445006132, -2.301779270172119, -0.1955331265926361, -0.10134529322385788, -4.541770613286644e-05, -2.376988172531128, -3.886147169396281e-05, -0.0020548435859382153, -0.013425423763692379, -0.0229644812643528, -4.6967357775429264e-05, -0.00022492263815365732, -0.30514344573020935, -0.00045158201828598976, -0.15297991037368774, -0.043735720217227936, -0.581551730632782, -0.19556117057800293, -2.4962072372436523, -0.003444929840043187, -0.0038754846900701523, -1.1920922133867862e-06, -5.125986263010418e-06, -1.0251946150674485e-05, -0.018265029415488243, -0.00020919041708111763, -0.005893828347325325, -0.0022107940167188644, -0.00430668517947197, -0.0017284705536440015, -0.05780743062496185, -0.03843037411570549, -0.043041590601205826, -0.0003289635351393372, -0.0377982072532177, -0.03516266122460365, -0.0038208591286092997, -0.0034547902178019285, -0.01786486618220806, -3.4570634852570947e-06, -9.417090768693015e-05, -3.576272320060525e-06, -8.40390202938579e-05, -5.125868119648658e-05, -0.004204481840133667, -0.12615810334682465, -0.5230482816696167, -0.5580586791038513, -2.9802276912960224e-06, -0.0007848043460398912, -0.003700078232213855, -0.0030208451207727194, -0.027589071542024612, -0.0057008774019777775, -0.2233479917049408, -0.0006379238329827785, -0.035062529146671295, -0.0010583758121356368, -1.030530571937561, -2.3841855067985307e-07, -7.152555099310121e-07, -9.298280929215252e-06, -0.00013767725613433868, -0.06490183621644974], "finish_reason": "stop"}], "metrics": {"energy": 160.91534090042117, "energy_per_token": 1.1745645321198626, "time": 5.683783, "time_per_token": 0.04148746715328467}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n    df_list = []\n    for f in csv_files:\n        df_list.append(pd.read_csv(os.path.join(data_dir, f)))\n    return pd.concat(df_list)", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "df", "_", "list", " =", " []", "\n", "    ", "for", " f", " in", " c", "sv", "_", "files", ":", "\n", "        ", "df", "_", "list", ".", "append", "(", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")))", "\n", "    ", "return", " pd", ".", "concat", "(", "df", "_", "list", ")", "\n", "\n", "def"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.9070006012916565, -2.3017518520355225, -1.1917318105697632, -0.14468473196029663, -0.010720872320234776, -0.837924063205719, -0.0034913793206214905, -0.08235584199428558, -0.04259604588150978, -1.9703445434570312, -0.46654829382896423, -0.042446497827768326, -0.000902007392141968, -4.529942543740617e-06, -1.7762025890988298e-05, -0.0004934046883136034, -0.003907902631908655, -0.0013993718894198537, -0.695141613483429, -0.21552468836307526, -0.03110024705529213, -0.0013517538318410516, -0.0006660388899035752, -0.0014098476385697722, -0.009369686245918274, -0.009842555038630962, -0.0014590105274692178, -6.079655122448457e-06, -0.0003057250869460404, -0.0012184107908979058, -0.08587145060300827, -3.099436753473128e-06, -0.00016151554882526398, -0.011490711010992527, -0.0004379982128739357, -0.00022098960471339524, -0.0023744504433125257, -4.410734163684538e-06, -0.00018904806347563863, -0.00038961926475167274, -0.007827206514775753, -0.5354668498039246, -0.003739984007552266, -0.06379386782646179, -0.2010808289051056, -0.009484943002462387, -0.0002683041093405336, -0.001405324088409543, -0.000601349223870784, -0.00035398892941884696, -0.00010287232726113871, -3.1470757676288486e-05, -1.196050763130188, -0.4600907862186432, -0.02883978746831417, -1.730633020401001], "finish_reason": "stop"}], "metrics": {"energy": 61.096352462768564, "energy_per_token": 0.8605120065178671, "time": 2.7454395, "time_per_token": 0.03866816197183098}}
{"outputs": [{"text": "if not csv_files:\n        return pd.DataFrame()\n\n    if isinstance(csv_files, str):\n        csv_files = [csv_files]\n\n    csv_files = [f for f in csv_files if os.path.isfile(f)]\n\n    return pd.concat([pd.read_csv(os.path.join(data_dir, f), index_col=0) for f in csv_files])", "tokens": ["if", " not", " c", "sv", "_", "files", ":", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "if", " isinstance", "(", "csv", "_", "files", ",", " str", "):", "\n", "        ", "csv", "_", "files", " =", " [", "csv", "_", "files", "]", "\n", "\n", "    ", "csv", "_", "files", " =", " [", "f", " for", " f", " in", " c", "sv", "_", "files", " if", " os", ".", "path", ".", "is", "file", "(", "f", ")]", "\n", "\n", "    ", "return", " pd", ".", "concat", "([", "pd", ".", "read", "_", "csv", "(", "os", ".", "path", ".", "join", "(", "data", "_", "dir", ",", " f", ")", ",", " index", "_", "col", "=", "0", ")", " for", " f", " in", " c", "sv", "_", "files", "])", "\n", "\n", "def"], "logprobs": [-0.5293303728103638, -0.7834933400154114, -0.18218041956424713, -2.7656173188006505e-05, -6.6756979322235566e-06, -8.22540732769994e-06, -0.027370918542146683, -0.0899980217218399, -0.0011361341457813978, -0.06786344945430756, -0.02204345166683197, -9.119095193454996e-05, -0.0011342290090397, -0.07234210520982742, -0.01862758956849575, -0.5181799530982971, -0.0003513672563713044, -2.3444876670837402, -1.7945219278335571, -0.00012158608296886086, -0.037336885929107666, -1.2636104656849056e-05, -7.843663479434326e-05, -0.04055653139948845, -0.32502907514572144, -0.03346248343586922, -0.03816741332411766, -0.0005995621904730797, -0.19117873907089233, -0.0002431573811918497, -0.004225374665111303, -0.006257465574890375, -0.02402607537806034, -0.007953047752380371, -3.886147169396281e-05, -3.71926071238704e-05, -0.00679456302896142, -0.00995043944567442, -0.0935378298163414, -0.00022015532886143774, -1.9060815572738647, -0.002145609585568309, -0.29107674956321716, -0.11709042638540268, -0.13959833979606628, -3.11909818649292, -0.6803791522979736, -0.0019160023657605052, -0.0003631647559814155, -0.0821114331483841, -0.00033885458833537996, -1.9073468138230965e-06, -8.821448318485636e-06, -0.012215327471494675, -0.18381386995315552, -9.775113539944869e-06, -0.0009463122696615756, -0.008557554334402084, -0.383070707321167, -0.0005847889697179198, -0.00026973424246534705, -0.22915154695510864, -0.06840286403894424, -0.00849904678761959, -0.36116480827331543, -0.00011085849109804258, -2.319380760192871, -0.017278969287872314, -0.0020866068080067635, -0.021449612453579903, -0.055714063346385956, -0.006069442722946405, -1.1920858014491387e-05, -0.00026603974401950836, -3.3378546504536644e-06, -0.00018761781393550336, -0.0003700763627421111, -1.2031265497207642, -0.0005403488758020103, -8.427741704508662e-05, -0.004530404228717089, -0.0009115354623645544, -0.00011848701251437888, -0.0037794129457324743, -6.592056161025539e-05, -0.0003343261778354645, -0.0005152089870534837, -0.09581552445888519, -1.8608355522155762, -0.0006418551784008741, -0.9291207194328308, -9.536738616588991e-07, -0.0003352795320097357, -0.05686716362833977, -0.410974383354187, -0.06531544029712677, -0.10853084176778793, -0.0007827793597243726, -0.00026425207033753395, -0.002229825360700488, -7.271740287251305e-06, -5.245195097813848e-06, -5.006777428206988e-06, -0.47874900698661804, -0.547777533531189, -0.010291957296431065, -1.5935039520263672], "finish_reason": "stop"}], "metrics": {"energy": 115.67777389526367, "energy_per_token": 1.0811006906099407, "time": 4.425118, "time_per_token": 0.041356242990654206}}
