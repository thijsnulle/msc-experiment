{"outputs": [{"text": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    extensions_to_convert = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    csv_counter = 0\n\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            extension = Path(file).suffix\n\n            if extension in extensions_to_convert:\n                file_path = os.path.join(root, file)\n\n                try:\n                    if extension == \".txt\":\n                        with open(file_path, \"r\") as file:\n                            text = file.read()\n                    elif extension == \".docx\":\n                        document = docx.Document(file_path)\n                        text = \"\\n\".join([paragraph.text for paragraph in document.paragraphs])\n                    elif extension", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " source", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "target", "_", "directory", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "extensions", "_", "to", "_", "convert", " =", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]", "\n", "    ", "csv", "_", "counter", " =", " ", "0", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "source", "_", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "extension", " =", " Path", "(", "file", ")", ".", "suff", "ix", "\n", "\n", "            ", "if", " extension", " in", " extensions", "_", "to", "_", "convert", ":", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "\n", "                ", "try", ":", "\n", "                ", "    ", "if", " extension", " ==", " \"", ".", "txt", "\":", "\n", "                ", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "                ", "            ", "text", " =", " file", ".", "read", "()", "\n", "                ", "    ", "elif", " extension", " ==", " \"", ".", "doc", "x", "\":", "\n", "                ", "        ", "document", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "                ", "        ", "text", " =", " \"", "\\", "n", "\"", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " document", ".", "paragraph", "s", "])", "\n", "                ", "    ", "elif", " extension"], "logprobs": [-1.9863839149475098, -0.03853166103363037, -0.14177246391773224, -1.7762025890988298e-05, -0.006528359837830067, -1.8358061424805783e-05, -0.08969226479530334, -0.00029762129997834563, -0.020016929134726524, -2.52720492426306e-05, -4.291525328881107e-06, -0.003905527526512742, -0.012625761330127716, -0.0028676362708210945, -0.03690487891435623, -0.004976268392056227, -0.0002330270071979612, -6.6756979322235566e-06, -0.06003642454743385, -1.4755566120147705, -1.1692874431610107, -0.3812990188598633, -0.007660417351871729, -0.040886040776968, -0.0003623305819928646, -0.0014543681172654033, -0.27418187260627747, -0.021263841539621353, -0.0009950215462595224, -0.0005192600074224174, -0.1458212286233902, -0.0004267973708920181, -2.4160995483398438, -0.020262744277715683, -0.05092576891183853, -9.775113539944869e-06, -0.0005913416389375925, -3.576272320060525e-06, -0.030902737751603127, -8.928377064876258e-05, -0.001536499592475593, -4.768360213347478e-06, -1.680836794548668e-05, -0.0022358912974596024, -0.001046348363161087, -0.0007366804056800902, -0.10056110471487045, -1.549708758830093e-05, -0.11284417659044266, -2.3841855067985307e-07, -9.536738616588991e-07, -0.00011002412065863609, -0.0007919512572698295, -6.556489552167477e-06, -3.2186455882765586e-06, -0.005410906858742237, -0.020999127998948097, -0.0317082479596138, -0.0010481346398591995, -0.643122136592865, -1.8670393228530884, -0.1520507037639618, -4.60137271147687e-05, -0.43308016657829285, -0.0024613819550722837, -1.344490647315979, -0.04317917674779892, -0.08746730536222458, -0.0041175829246640205, -6.103329360485077e-05, -0.0012406755704432726, -0.0008248264202848077, -0.001884352881461382, -0.014659314416348934, -0.004764157347381115, -1.4424220353248529e-05, -0.0008013612823560834, -0.0002982171718031168, -0.00038342276820912957, -0.01384065207093954, -1.6331539882230572e-05, -0.00014733182615600526, -7.867782187531702e-06, -0.0011330381967127323, -0.0003150205302517861, -0.0003071551618631929, -0.0013638966483995318, -1.2755313036905136e-05, -0.001408776268362999, -0.02847268618643284, -0.17004609107971191, -3.409327507019043, -0.0006846229662187397, -3.0389134883880615, -0.006749569438397884, -0.007613215129822493, -0.0008360228384844959, -0.017110468819737434, -0.1132344901561737, -0.00017307691450696439, -0.12462244927883148, -1.5640238523483276, -0.005059415474534035, -0.5795412659645081, -0.0013496108585968614, -4.9232225137529895e-05, -0.012554189190268517, -0.0005883631529286504, -0.00041952868923544884, -6.6756979322235566e-06, -1.4424220353248529e-05, -8.177422569133341e-05, -0.004173854365944862, -2.264974000354414e-06, -7.152555099310121e-07, -0.03739798069000244, -0.004935107193887234, -0.0032664774917066097, -0.04292374104261398, -0.22269341349601746, -0.11522413045167923, -0.0012241258518770337, -1.1324817933200393e-05, -0.0001932195882545784, -0.0017746428493410349, -3.34792423248291, -0.003649837803095579, -0.5836273431777954, -0.0014132998185232282, -0.0113410335034132, -0.0008521024719811976, -0.000747758662328124, -0.0002971446083392948, 0.0, -0.1985963135957718, -1.331925630569458, -0.0001387499796692282, -0.027837786823511124, -0.009620139375329018, -0.16506433486938477, -0.0013443727511912584, -2.50339189733495e-06, 0.0, -1.1920928244535389e-07, -4.172316494077677e-06, -0.015341374091804028, -0.0006805725861340761, -0.012258545495569706, -0.7675141096115112, -0.08125321567058563, -0.11595221608877182, -0.004125893581658602, -0.03173527121543884, -8.344646857949556e-07, -3.194758028257638e-05, -2.0265558760002023e-06, -0.0006032554083503783, -1.1324817933200393e-05, -0.020779646933078766, -1.3828182090946939e-05, -0.0002953569928649813, -0.0005984899471513927, -0.0023272354155778885, -1.32566237449646, -0.0007085673278197646, -1.9195599555969238, -6.425174069590867e-05, -0.0014065144350752234, -0.003821927821263671, -0.00024077377747744322, -0.15195044875144958, -0.016197165474295616, -0.022517593577504158, -0.05315013229846954, -0.00015686711412854493, -0.05318867787718773, -0.003920489456504583, -0.004029370378702879, -0.0005122303264215589, -0.00011157367407577112, -0.12291301786899567, -0.0001209901092806831, -6.031808152329177e-05, -0.0012292455649003386, -0.00012110930401831865, -2.3841855067985307e-07, -0.01176761370152235, -0.10861361026763916, -0.006822505500167608, -0.0002914242504630238, -0.38269931077957153, -2.0503786799963564e-05, -1.984037160873413, -0.08833778649568558, -0.0002774807217065245, -3.6477376852417365e-05, -0.00043132537393830717, -0.5024309754371643, -0.10686511546373367, -0.0030957176350057125, -7.64102369430475e-05, -3.2186455882765586e-06, -0.0061334241181612015, -0.04217430576682091, -0.35740819573402405, -0.3079446852207184, -0.004169818013906479, -3.0397906812140718e-05, -0.005612685810774565, -0.000902007392141968, -0.00012885693286079913, -0.01574876718223095, -0.00014757021563127637, -0.00019214690837543458, -0.00098525604698807, -0.00017438798386137933, -7.86750388215296e-05, -0.9649800658226013, -0.0004009396652691066, -0.00038580605178140104, -1.0013530300057027e-05, -8.940656698541716e-06, -0.0004629017203114927, -0.00010680581908673048, -0.0009039129945449531, -0.0007096394547261298, -1.0728830375228426e-06, -0.00039426659350283444, -0.00045622908510267735, -0.0016250512562692165, -5.519237674889155e-05, -0.03446566313505173, -0.015215636231005192, -0.11807471513748169, -0.8854331374168396, -0.00012587709352374077, -0.004931785631924868, -5.1020273531321436e-05, -1.2159273865108844e-05, -0.12236647307872772, -0.18945007026195526, -8.272782724816352e-05, -1.728519782773219e-05, -0.0007543102256022394, -0.0009968079393729568, -0.0003268184664193541, -0.0005651307292282581, -0.00015805903240107, -4.756337511935271e-05, -2.3841830625315197e-06, -0.0004906642716377974, -0.0015570909017696977, -0.0026624491438269615, -0.001157686347141862, -0.002401922130957246, -0.00023958197562023997], "finish_reason": "length"}], "metrics": {"energy": 1070.9905819358828, "energy_per_token": 4.183556960687042, "time": 24.210417, "time_per_token": 0.09457194140625}}
{"outputs": [{"text": "# Validate input parameters\n    if source_directory is None:\n        raise ValueError(\"source_directory cannot be None\")\n    if target_directory is None:\n        raise ValueError(\"target_directory cannot be None\")\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Directory {source_directory} does not exist\")\n\n    # Initialize variables\n    counter = 0\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n\n    # Loop through each file in the source directory\n    for file in source_path.iterdir():\n        if file.suffix == '.txt':\n            # Convert txt files to CSV\n            with file.open() as f:\n                # Read the text content from the txt file\n                text_content = f.read()\n\n                # Create a pandas DataFrame with a single column and no index\n                df = pd.DataFrame({\"Text\": [text_content]})\n\n                # Save the DataFrame to a CSV file in the target directory\n                new_filename", "tokens": ["#", " Valid", "ate", " input", " parameters", "\n", "    ", "if", " source", "_", "directory", " is", " None", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "directory", " cannot", " be", " None", "\"", ")", "\n", "    ", "if", " target", "_", "directory", " is", " None", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", "_", "directory", " cannot", " be", " None", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "source", "_", "directory", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " variables", "\n", "    ", "counter", " =", " ", "0", "\n", "    ", "source", "_", "path", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", "_", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "suff", "ix", " ==", " '", ".", "txt", "':", "\n", "            ", "#", " Convert", " t", "xt", " files", " to", " CS", "V", "\n", "            ", "with", " file", ".", "open", "()", " as", " f", ":", "\n", "                ", "#", " Read", " the", " text", " content", " from", " the", " t", "xt", " file", "\n", "                ", "text", "_", "content", " =", " f", ".", "read", "()", "\n", "\n", "                ", "#", " Create", " a", " pandas", " Data", "Frame", " with", " a", " single", " column", " and", " no", " index", "\n", "                ", "df", " =", " pd", ".", "DataFrame", "(", "{\"", "Text", "\":", " [", "text", "_", "content", "]", "})", "\n", "\n", "                ", "#", " Save", " the", " Data", "Frame", " to", " a", " CS", "V", " file", " in", " the", " target", " directory", "\n", "                ", "new", "_", "filename"], "logprobs": [-1.1783795356750488, -2.9139370918273926, -0.03414635732769966, -1.8584461212158203, -1.4046592712402344, -0.10924788564443588, -0.004818019922822714, -0.386125773191452, -2.6419973373413086, -6.48477507638745e-05, -1.7762025890988298e-05, -0.1467638611793518, -0.00423938175663352, -0.8795363306999207, -0.005280950106680393, -0.0009155849111266434, -0.06735137850046158, -0.1501125544309616, -1.0609570381348021e-05, -0.12988914549350739, -0.025081543251872063, -1.4802321195602417, -0.012449057772755623, -0.0013810392701998353, -0.9138893485069275, -5.519237674889155e-05, -0.016948150470852852, -0.1029282808303833, -0.00011908298620255664, -0.0007316772826015949, -0.17137199640274048, -0.037346646189689636, -0.24644245207309723, -3.3378546504536644e-06, -3.4570634852570947e-06, -0.00025281094713136554, -0.00019691436318680644, -0.00500983651727438, -9.881961887003854e-05, -0.00013433984713628888, -0.0018294993788003922, -0.0006815256201662123, 0.0, -0.00023195437097456306, -0.00045789722935296595, -0.0010474200826138258, -0.000533795915544033, -0.00016175392374861985, -0.0002165798214264214, -2.5510462364763953e-05, -8.439661905867979e-05, -0.0002711643755901605, -1.5616295058862306e-05, -5.173549288883805e-05, -1.1240326166152954, -0.22816148400306702, -0.0855148583650589, -0.2979939579963684, -1.4305012882687151e-05, -0.010780546814203262, -3.1709168979432434e-05, -0.19500328600406647, -0.00014602071314584464, -0.011959869414567947, -1.7881377516459906e-06, -8.34461570775602e-06, -0.0038322594482451677, -0.0014110381016507745, -0.0005440423847176135, -0.003350836457684636, -0.04510932415723801, -6.222531374078244e-05, -1.0371154530730564e-05, -0.0013617537915706635, -0.370216429233551, -0.004242586903274059, -2.3338804244995117, -1.2214617729187012, -0.0023268787190318108, -5.1616290875244886e-05, -0.00011836781777674332, -0.0014586533652618527, -0.16379883885383606, -0.00016532962035853416, -0.0006764031131751835, -0.16356919705867767, -0.00012492353562265635, -0.00013290952483657748, -0.1855197250843048, -0.0005278385942801833, -0.1416187286376953, -1.346125602722168, -1.207411527633667, -0.13246776163578033, -0.0006911749369464815, -3.514418363571167, -0.03379283845424652, -0.0025257135275751352, -0.0009023646707646549, -0.1668907105922699, -0.28210026025772095, -1.9189033508300781, -0.0814271792769432, -0.7750805020332336, -0.014989950694143772, -0.01932939887046814, -0.0006505518686026335, -0.002680877223610878, -4.291525328881107e-06, -6.6756979322235566e-06, -0.0010605193674564362, -0.029684804379940033, -0.06284007430076599, -0.06197534501552582, -0.0064635747112333775, -0.006641102023422718, -0.0006685405969619751, -0.00019464982324279845, -0.00033087024348787963, -0.001653971616178751, -7.152555099310121e-07, -4.6491513785440475e-06, -0.0010216975351795554, -0.029070012271404266, -0.48761600255966187, -0.0002661589242052287, -0.023086801171302795, -3.5115716457366943, -0.22904688119888306, -2.008134126663208, -0.02776358462870121, -0.03930595517158508, -0.0722901001572609, -0.04319607466459274, -0.015098103322088718, -0.0920419991016388, -0.00011240804451517761, -0.010093480348587036, -0.12791717052459717, -0.17870929837226868, -0.09238258004188538, -4.768370445162873e-07, -1.4066597032069694e-05, -6.794906312279636e-06, -0.2292751520872116, -8.785339014139026e-05, -2.634490556374658e-05, -0.000390215078368783, -0.09867825359106064, -1.3754479885101318, -0.07425966113805771, -0.00010990492592100054, -1.0152627229690552, -1.1920928244535389e-07, -1.3168056011199951, -0.531208336353302, -0.00042000532266683877, -0.031257741153240204, -0.018346963450312614, -0.04574861377477646, -0.0020190346986055374, -0.6568756103515625, -2.3401756286621094, -2.1366329193115234, -9.536697689327411e-06, -1.396888256072998, -0.4125649034976959, -0.3239009976387024, -0.008339227177202702, -0.26193204522132874, -0.00045253525604493916, -0.4721387028694153, -1.0951062440872192, -0.00022551853908225894, -4.446407547220588e-05, -1.8867638111114502, -8.201262971851975e-05, -0.2663835883140564, -0.010376905091106892, -0.0041409702971577644, -0.0003301552205812186, -4.026583671569824, -0.5779014229774475, -0.6928920149803162, -1.3660473823547363, -0.4203784763813019, -1.9713919162750244, -0.05540655180811882, -2.47533917427063, -3.814689989667386e-06, -0.0012051946250721812, -0.06543056666851044, -0.00016044282529037446, -0.42011985182762146, -2.187021017074585, -0.23794633150100708, -0.0009450022480450571, -0.019919706508517265, -4.756337511935271e-05, -8.583032467868179e-06, -0.021924734115600586, -0.02720271795988083, -1.1561880111694336, -0.7370502948760986, -0.01147126592695713, -0.47021687030792236, -0.06034599617123604, -1.2952864170074463, -0.08704867213964462, -0.0009226117981597781, -0.14087295532226562, -0.24714891612529755, -0.029974184930324554, -0.2536087930202484, -1.162584662437439, -0.3329133689403534, -1.2199928760528564, -0.03051847033202648, -0.0014985294546931982, -0.12499777227640152, -0.01153737772256136, -0.00011944057769142091, -3.4570634852570947e-06, -0.0002320735511602834, -2.3055226802825928, -2.2155559062957764, -0.008547625504434109, -0.001311038387939334, -0.16296714544296265, -0.0014868644066154957, -0.00021443451987579465, -2.9802276912960224e-06, -0.011327597312629223, -0.0010382506297901273, -0.0034868652001023293, -0.04093535989522934, -0.07923759520053864, -0.004990976769477129, -0.5080076456069946, -0.03289684280753136, -0.16674432158470154, -0.0002644904307089746, -1.0110989809036255, -0.2778046131134033, -0.12585963308811188, -1.4305104514278355e-06, -0.017918847501277924, -0.5933653712272644, -0.003057688008993864, -0.006163162179291248, -0.010766984894871712, -0.17678481340408325, -0.0017294225981459022, -3.530068874359131, -0.00404646759852767, -2.350660800933838], "finish_reason": "length"}], "metrics": {"energy": 1107.4810551071166, "energy_per_token": 4.326097871512174, "time": 24.40761, "time_per_token": 0.0953422265625}}
{"outputs": [{"text": "# Create the target directory if it does not exist.\n    if not Path(target_directory).exists():\n        Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of file types to convert.\n    file_types = {'*.txt', '*.docx', '*.xlsx', '*.csv'}\n\n    # Initialize a counter for the number of files converted to CSV.\n    files_converted_count = 0\n\n    # Iterate over all files in the source directory.\n    for pattern in file_types:\n        for file_path in Path(source_directory).rglob(pattern):\n            # Extract the file name without extension.\n            file_name_without_extension = Path(file_path).stem\n\n            # Convert the file based on its extension.\n            if file_path.suffix == '.txt':\n                with file_path.open(encoding='utf-8') as f:\n                    content = f.read()\n                pd.DataFrame({'Text': [content]}).to_", "tokens": ["#", " Create", " the", " target", " directory", " if", " it", " does", " not", " exist", ".", "\n", "    ", "if", " not", " Path", "(", "target", "_", "directory", ")", ".", "exists", "():", "\n", "        ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " of", " file", " types", " to", " convert", ".", "\n", "    ", "file", "_", "types", " =", " {'", "*", ".", "txt", "'", ",", " '", "*", ".", "doc", "x", "'", ",", " '", "*", ".", "x", "ls", "x", "'", ",", " '", "*", ".", "csv", "'}", "\n", "\n", "    ", "#", " Initialize", " a", " counter", " for", " the", " number", " of", " files", " converted", " to", " CS", "V", ".", "\n", "    ", "files", "_", "converted", "_", "count", " =", " ", "0", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " files", " in", " the", " source", " directory", ".", "\n", "    ", "for", " pattern", " in", " file", "_", "types", ":", "\n", "        ", "for", " file", "_", "path", " in", " Path", "(", "source", "_", "directory", ")", ".", "rg", "lob", "(", "pattern", "):", "\n", "            ", "#", " Ext", "ract", " the", " file", " name", " without", " extension", ".", "\n", "            ", "file", "_", "name", "_", "without", "_", "extension", " =", " Path", "(", "file", "_", "path", ")", ".", "stem", "\n", "\n", "            ", "#", " Convert", " the", " file", " based", " on", " its", " extension", ".", "\n", "            ", "if", " file", "_", "path", ".", "suff", "ix", " ==", " '", ".", "txt", "':", "\n", "                ", "with", " file", "_", "path", ".", "open", "(", "encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "    ", "content", " =", " f", ".", "read", "()", "\n", "                ", "pd", ".", "DataFrame", "({", "'", "Text", "':", " [", "content", "]", "})", ".", "to", "_"], "logprobs": [-1.1783795356750488, -2.1326394081115723, -0.3830644488334656, -0.02666962519288063, -0.020881570875644684, -0.009815641678869724, -0.002303210785612464, -1.0118404626846313, -0.00022015532886143774, -0.013880155049264431, -2.672020673751831, -0.0052552176639437675, -0.0030702855437994003, -2.101303815841675, -0.014159335754811764, -1.2822632789611816, -0.02276897057890892, -0.0026950249448418617, -1.2516897186287679e-05, -3.4570634852570947e-06, -0.0009617946925573051, -3.7788631743751466e-05, -0.30825743079185486, -0.001278179232031107, -0.002369931200519204, -0.0023086818400770426, -0.18793971836566925, -0.057010404765605927, -0.0007097586058080196, -1.823885577323381e-05, -1.9073468138230965e-06, -0.00015555603022221476, -0.00018487652414478362, -0.000439428084064275, -6.556489552167477e-06, -0.5877415537834167, -0.012371703051030636, -0.0007146426942199469, -0.002240411238744855, -0.29813316464424133, -0.00019608005823101848, -3.933898824470816e-06, -2.0265558760002023e-06, -3.683499380713329e-05, -0.003387667005881667, -0.0004295380203984678, -0.0018732872558757663, -0.07183732092380524, -0.00215798057615757, -0.18417952954769135, -2.8690431118011475, -0.3458094894886017, -1.2569420337677002, -2.83499813079834, -0.3007822036743164, -0.5966888666152954, -0.6270687580108643, -0.025476504117250443, -0.0001711698860162869, -0.38157084584236145, -0.022579947486519814, -0.1093708872795105, -0.04744282737374306, -2.7507681846618652, -2.2465426921844482, -0.002312130993232131, -0.004104761406779289, -0.014343257993459702, -0.00019178935326635838, -0.006199534051120281, -0.0002797450579237193, -5.924526340095326e-05, -0.0390472337603569, -0.0038456786423921585, -0.0017665509367361665, -1.9550132492440753e-05, -0.0006319671520031989, -0.0010259846458211541, -2.9205850296420977e-05, -0.014477916993200779, -4.100715523236431e-05, -0.0001938155182870105, -0.0012584156356751919, -2.5748875486897305e-05, -0.0011450645979493856, -0.00029047083808109164, -7.748573807475623e-06, -0.0021261009387671947, -0.015452892519533634, -0.0017957051750272512, -0.1653888076543808, -6.05564855504781e-05, -0.10561169683933258, -1.4305410385131836, -0.5258198976516724, -0.25388967990875244, -0.34414634108543396, -0.25086721777915955, -0.23224280774593353, -0.0002826052950695157, -0.7007401585578918, -0.5033310055732727, -2.089426279067993, -0.0021289559081196785, -0.0002975021197926253, -0.01269509270787239, -0.0005009111482650042, -6.48477507638745e-05, -1.4043612480163574, -0.002544144168496132, -0.18489618599414825, -1.6986850500106812, -1.0428922176361084, -0.0017146660247817636, -0.0012375799706205726, -0.00012003655137959868, -0.0004256058018654585, -0.015671197324991226, -0.00014423283573705703, -0.05461133271455765, -1.1757372617721558, -0.0015000768471509218, -0.5630943179130554, -1.7273101806640625, -0.7671467065811157, -0.07110048085451126, -0.016878293827176094, -0.04530609771609306, -0.004854084458202124, -0.633766770362854, -0.0024743436370044947, -0.00014053787162993103, -0.029337923973798752, -2.008269786834717, -0.005747340619564056, -0.0025567482225596905, -1.4305012882687151e-05, -3.015949550899677e-05, -0.0003250309091527015, -0.003029758809134364, -0.009038249962031841, -0.16712838411331177, -0.2613002359867096, -1.0100927352905273, -0.0773799940943718, -0.023655453696846962, -0.110276959836483, -0.00032026408007368445, -0.0015955348499119282, -6.437280717364047e-06, -8.106198947643861e-06, -0.004101912025362253, -4.0531076592742465e-06, -0.12387358397245407, -7.510157047363464e-06, -0.0016211237525567412, -0.0023619630374014378, -0.00030727434204891324, -0.005620391108095646, -0.11938974261283875, -0.6896330118179321, -1.491751790046692, -0.005841920152306557, -0.15361784398555756, -0.2681307792663574, -0.5138567686080933, -0.4846469461917877, -0.38013365864753723, -0.6846339106559753, -0.0040586963295936584, -0.000254241080256179, -0.1095978319644928, -0.002126814564689994, -0.02575049176812172, -1.3168292045593262, -0.36810630559921265, -0.0005017452058382332, -0.5318247079849243, -0.009729936718940735, -1.6439003944396973, -0.0008516260422766209, -0.013488818891346455, -1.3589766240329482e-05, -7.390948667307384e-06, -0.048251714557409286, -0.0001998939987970516, -0.009566535241901875, -0.0033545196056365967, -0.18451115489006042, -0.0010442048078402877, -0.05770548805594444, -2.6779818534851074, -0.7471206784248352, -0.030461233109235764, -2.278707981109619, -0.0001915509783430025, -0.022254493087530136, -0.04318283125758171, -0.20415577292442322, -0.0008836655179038644, -0.0011651878012344241, -0.12396647036075592, -0.12176347523927689, -1.1444026313256472e-05, -0.0022750229109078646, -0.00016115797916427255, -0.07647054642438889, -1.0728830375228426e-06, -0.05434299632906914, -0.042285386472940445, -0.000161038784426637, -0.01421281136572361, -0.009039903059601784, -0.004483884200453758, -0.0014096095692366362, -1.116270661354065, -1.5929275751113892, -2.9682672902708873e-05, -9.65590606938349e-06, -0.005819639191031456, -5.709961988031864e-05, -0.592197597026825, -0.5332846641540527, -0.051467716693878174, -0.08286138623952866, -0.05095590651035309, -0.000964414793998003, -0.05675937980413437, -0.00010299152199877426, -1.7626872062683105, -0.05657622590661049, -0.01026127953082323, -0.00014423283573705703, -0.0005218812730163336, -1.9497652053833008, -0.012857865542173386, -0.05207885429263115, -8.546940807718784e-05, -7.867782187531702e-06, -0.06748488545417786, -0.047527976334095, -0.6515279412269592, -2.7514472007751465, -0.006277367472648621, -0.489043653011322, -1.1730457544326782, -0.011197817511856556, -0.017609793692827225, -0.0005808573332615197, -0.20638567209243774, -0.0007566926069557667, -0.011169054545462132, -0.000614216027315706, -0.0073325554840266705, -0.0007559779332950711, -5.960446742392378e-06], "finish_reason": "length"}], "metrics": {"energy": 1084.1286931457523, "energy_per_token": 4.234877707600595, "time": 24.436783, "time_per_token": 0.09545618359375}}
{"outputs": [{"text": "file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]  # Extensions of files to convert\n\n    try:\n        files = [file for file in os.listdir(source_directory) if any(file.endswith(ext) for ext in file_extensions)]\n    except FileNotFoundError:\n        print(f\"The directory {source_directory} does not exist.\")\n        return 0\n\n    target_directory = Path(target_directory)\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    csv_file_names = []  # List of converted CSV files\n    for file in files:\n        file_path = os.path.join(source_directory, file)\n\n        try:\n            if file.endswith(\".txt\"):\n                text = open(file_path).read()  # Extract the text content of the file\n                df = pd.DataFrame([text])  # Create a DataFrame with a single row and a single column 'Text'\n            elif file", "tokens": ["file", "_", "extensions", " =", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]", "  ", "#", " Ext", "ensions", " of", " files", " to", " convert", "\n", "\n", "    ", "try", ":", "\n", "        ", "files", " =", " [", "file", " for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", ")", " if", " any", "(", "file", ".", "end", "sw", "ith", "(", "ext", ")", " for", " ext", " in", " file", "_", "extensions", ")]", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "f", "\"", "The", " directory", " {", "source", "_", "directory", "}", " does", " not", " exist", ".", "\"", ")", "\n", "        ", "return", " ", "0", "\n", "\n", "    ", "target", "_", "directory", " =", " Path", "(", "target", "_", "directory", ")", "\n", "    ", "target", "_", "directory", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "csv", "_", "file", "_", "names", " =", " []", "  ", "#", " List", " of", " converted", " CS", "V", " files", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "        ", "try", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "                ", "text", " =", " open", "(", "file", "_", "path", ")", ".", "read", "()", "  ", "#", " Ext", "ract", " the", " text", " content", " of", " the", " file", "\n", "                ", "df", " =", " pd", ".", "DataFrame", "([", "text", "])", "  ", "#", " Create", " a", " Data", "Frame", " with", " a", " single", " row", " and", " a", " single", " column", " '", "Text", "'", "\n", "            ", "elif", " file"], "logprobs": [-3.2828011512756348, -0.03728945553302765, -0.4054371416568756, -0.061736099421978, -1.5248010158538818, -0.0845465138554573, -0.07540153712034225, -0.008995365351438522, -0.00012206286191940308, -0.0011642351746559143, -0.0032215621322393417, -0.004019397310912609, -0.015695489943027496, -0.0042519643902778625, -2.396077979938127e-05, -0.0008847374701872468, -0.0005888396990485489, -0.0013310391223058105, -0.016873370856046677, -1.5616295058862306e-05, -0.0001679517881711945, -8.106198947643861e-06, -0.0009105826611630619, -0.0008117241668514907, -0.00041345154750160873, -0.0018517505377531052, -2.7894584491150454e-05, -0.003647580975666642, -2.472973585128784, -0.00028355870745144784, -2.3414459228515625, -0.0007319155265577137, -1.4869980812072754, -0.3227909803390503, -0.2397068440914154, -1.119795560836792, -0.3361032009124756, -0.6578401327133179, -0.00024101213784888387, -3.258007049560547, -5.1020273531321436e-05, -0.009882688522338867, -0.007099638693034649, -2.8072893619537354, -0.29831868410110474, -0.41501569747924805, -0.5318475365638733, -0.03061547502875328, -0.000878544058650732, -0.001505671301856637, -0.04662327095866203, -1.0609570381348021e-05, -0.024734921753406525, -1.0728830375228426e-06, -9.655486064730212e-05, -0.03270476683974266, -5.4238757002167404e-05, -1.1920858014491387e-05, -0.008614403195679188, -0.15628433227539062, -1.3781299591064453, -0.03205673396587372, -0.1740095466375351, -0.0006773561472073197, -0.04672259837388992, -9.500529267825186e-05, -7.152555099310121e-07, -0.001687889569438994, -0.3575546145439148, -0.0004094000905752182, -0.02143794484436512, -0.0008310201810672879, -0.0001012035645544529, -0.0004532501916401088, -4.0531076592742465e-06, -5.8412379075889476e-06, -0.005970619153231382, -0.007915320806205273, -0.5561421513557434, -8.439661905867979e-05, -0.03058633953332901, -1.2874520507466514e-05, -7.152555099310121e-07, -0.36565566062927246, -0.014978206716477871, -0.00030763185350224376, -0.3257896304130554, -0.008499755524098873, -0.7064690589904785, -0.01383571419864893, -1.4360636472702026, -0.7174965143203735, -1.4845337867736816, -0.008626576513051987, -5.507317473529838e-05, -4.887569048150908e-06, -0.002446041675284505, -0.08267658203840256, -0.0001262346631847322, -0.002247785683721304, -0.14574292302131653, -0.0650075152516365, -0.0002791491860989481, -0.0025361774023622274, -0.010417606681585312, -0.022773748263716698, -0.05884280428290367, -0.004866778384894133, -0.0289289653301239, -0.013293327763676643, -0.0002076410164590925, -2.7210094928741455, -0.10133775323629379, -0.9707859754562378, -0.2725161910057068, -0.06667111068964005, -0.0009426202741451561, -0.0020190346986055374, -1.0728830375228426e-06, -2.706014311115723e-05, -0.0015165030490607023, -0.09452593326568604, -0.09284050017595291, -0.7742260694503784, -5.61460001335945e-05, -0.0002862997353076935, -0.0007809926173649728, -0.00015424491721205413, -9.536738616588991e-07, -0.0002734287118073553, -0.3203134834766388, -0.0002315968304174021, -0.0011649496154859662, -6.317892984952778e-05, -0.00016115797916427255, -3.576278118089249e-07, -1.9073468138230965e-06, -5.686121585313231e-05, -9.83428253675811e-05, -0.00013982271775603294, -0.2804241478443146, -0.03228817880153656, -6.23445157543756e-05, -3.2361104488372803, -0.00119304982945323, -2.5318543910980225, -0.036709316074848175, -2.3477110862731934, -0.02412371151149273, -0.5906569361686707, -1.146016240119934, -2.0265558760002023e-06, -0.6204520463943481, -0.8154760599136353, -1.433153748512268, -0.8950417041778564, -0.000536655425094068, -2.6123013496398926, -0.49219924211502075, -1.0689623355865479, -0.371185839176178, -0.04563256353139877, -0.12796837091445923, -0.001341634662821889, -0.0003649522550404072, -0.0041060671210289, -0.003346915589645505, -0.48478010296821594, -0.031141385436058044, -0.22912083566188812, -0.0029012751765549183, -0.18110233545303345, -5.722029527532868e-06, -7.176141662057489e-05, -7.510157047363464e-06, -0.0015194787411019206, -1.8358061424805783e-05, -0.0047187162563204765, -8.344646857949556e-07, -2.264974000354414e-06, -3.158996332786046e-05, -0.0004220310365781188, -8.797258487902582e-05, -0.04995757341384888, -1.4922877550125122, -0.0005024601123295724, -2.1818137168884277, -8.570780482841656e-05, -0.005777920130640268, -0.0017078827368095517, -0.38735732436180115, -0.01183182094246149, -0.012156915850937366, -0.009198076091706753, -2.3841830625315197e-06, 0.0, -0.0906083881855011, -0.0014398456551134586, -0.0008648469229228795, -0.03597785905003548, -7.152531907195225e-06, -0.02584587037563324, -0.04135465249419212, -0.0005015069036744535, -2.465663194656372, -0.1133064404129982, -0.3834557831287384, -0.0024365282151848078, -0.001690983772277832, -0.0021174170542508364, -4.410734163684538e-06, -2.1710455417633057, -0.003579520620405674, -3.933898824470816e-06, -0.013949164189398289, -2.040741443634033, -1.3708974620385561e-05, -3.1370058059692383, -0.1850535124540329, -2.069401741027832, -0.14398059248924255, -0.5122999548912048, -1.1616129875183105, -0.14648105204105377, -0.5591735243797302, -0.022902267053723335, -1.1714377403259277, -0.9469126462936401, -0.013250625692307949, -0.0006225554971024394, -4.768370445162873e-07, -0.013939994387328625, -0.5181670784950256, -0.06802918016910553, -1.2586352825164795, -0.1353151798248291, -3.576272320060525e-06, -0.3833317160606384, -0.04722566530108452, -0.23589050769805908, -0.0011381583753973246, -0.17255131900310516, -0.7329782843589783, -0.06818374991416931, -0.16150081157684326, -0.4733639359474182, -1.6132100820541382, -0.24857045710086823, -0.2889323830604553, -3.1189966201782227, -0.02200380340218544, -0.0017960622208192945, -0.012273146770894527, -0.7884749174118042, -0.0024170251563191414, -0.00016890530241653323], "finish_reason": "length"}], "metrics": {"energy": 1119.77163194847, "energy_per_token": 4.374107937298711, "time": 25.319233, "time_per_token": 0.09890325390625}}
{"outputs": [{"text": "supported_extensions = {'.txt', '.docx', '.xlsx', '.csv'}\n    converted = 0\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n        if os.path.isfile(file_path) and os.path.splitext(file)[-1].lower() in supported_extensions:\n            try:\n                # Extract text from the file\n                if file.lower().endswith('.txt'):\n                    with open(file_path, 'r') as f:\n                        file_content = f.read()\n                elif file.lower().endswith('.docx'):\n                    doc = docx.Document(file_path)\n                    file_content = ' '.join([paragraph.text for paragraph in doc.paragraphs])\n                elif file.lower().endswith('.xlsx'):\n                    xls", "tokens": ["supported", "_", "extensions", " =", " {'", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "'}", "\n", "    ", "converted", " =", " ", "0", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", ")", " and", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")", "[-", "1", "]", ".", "lower", "()", " in", " supported", "_", "extensions", ":", "\n", "            ", "try", ":", "\n", "                ", "#", " Ext", "ract", " text", " from", " the", " file", "\n", "                ", "if", " file", ".", "lower", "()", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "        ", "file", "_", "content", " =", " f", ".", "read", "()", "\n", "                ", "elif", " file", ".", "lower", "()", ".", "end", "sw", "ith", "('", ".", "doc", "x", "')", ":", "\n", "                ", "    ", "doc", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "                ", "    ", "file", "_", "content", " =", " '", " '", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "                ", "elif", " file", ".", "lower", "()", ".", "end", "sw", "ith", "('", ".", "x", "ls", "x", "')", ":", "\n", "                ", "    ", "x", "ls"], "logprobs": [-3.381716251373291, -0.0032530506141483784, -0.2521980106830597, -0.005691750440746546, -1.7581208944320679, -0.11932595074176788, -0.008754445239901543, -0.09050984680652618, -0.00011908298620255664, -0.0027399638202041388, -0.0009971652179956436, -0.04206229746341705, -0.008431433700025082, -0.00532185984775424, -2.634490556374658e-05, -0.0003669780562631786, -0.0006837890832684934, -0.015582590363919735, -1.3828182090946939e-05, -0.0003477922291494906, -0.0028003547340631485, -3.182837463100441e-05, -0.0004451475979294628, -0.00043275527423247695, -0.0014554394874721766, -0.012514162808656693, -0.06578435003757477, -0.24601423740386963, -2.52355694770813, -2.9820995330810547, -0.02363251894712448, -0.0003234816831536591, -0.011019446887075901, -1.0296125411987305, -2.470160961151123, -0.0032316623255610466, -0.00304615986533463, -3.8265450712060556e-05, -8.4638240878121e-06, -0.0008312584250234067, -0.0004483648226596415, -0.0007063039811328053, -2.622600959512056e-06, -0.0012987758964300156, -0.34409624338150024, -0.0015210260171443224, -0.0066696410067379475, -0.00016950124700088054, -0.0004599228559527546, -2.3841855067985307e-07, -2.3841830625315197e-06, -0.00032574593205936253, -2.312633478140924e-05, -9.619726915843785e-05, -0.07566295564174652, -0.9493142366409302, -0.00025340684805996716, -0.220541313290596, -0.8970544934272766, -0.38966119289398193, -0.10333237051963806, -6.758938252460212e-05, -0.07315050065517426, -1.1920928244535389e-07, -6.103329360485077e-05, -0.004644677042961121, -1.5258672647178173e-05, -2.9802276912960224e-06, -0.000586695212405175, -0.00233056559227407, -0.008882297202944756, -1.0621693134307861, -0.05581643432378769, -0.13797052204608917, -0.0034076261799782515, -0.043666914105415344, -5.006777428206988e-06, -0.00010394509445177391, -4.529942543740617e-06, -0.0017013374017551541, -2.396077979938127e-05, -0.0010640918044373393, -1.9073468138230965e-06, -1.6689286894688848e-06, -4.51792984677013e-05, -0.0005290300468914211, -8.749579137656838e-05, -0.001758220954798162, -0.4044867157936096, -1.5010874271392822, -0.17151470482349396, -3.0636318115284666e-05, -7.188061863416806e-05, -4.768370445162873e-07, -0.11400391161441803, -0.06045373156666756, -0.0031393314711749554, -0.00024589852546341717, -0.0010455148294568062, -1.5497195136049413e-06, -0.22162997722625732, -0.0007407305529341102, -0.21596597135066986, -1.5139465176616795e-05, -1.6093124941107817e-05, -9.417489309271332e-06, -2.2172682292875834e-05, 0.0, 0.0, -1.680836794548668e-05, -0.00022635281493421644, -1.951702356338501, -0.0009290431626141071, -7.152531907195225e-06, -0.001680511049926281, -1.2537273168563843, -0.003989595454186201, -0.00015209948469419032, -0.0034113090950995684, -0.00042572495294734836, -8.344646857949556e-07, -1.1920922133867862e-06, -0.0030921525321900845, -0.001492696930654347, -0.0161100123077631, -1.6101115942001343, -3.576214658096433e-05, -0.0012432949151843786, -0.0019973821472376585, -3.319223403930664, -2.6352479457855225, -0.09856019169092178, -0.47253891825675964, -0.6755617260932922, -1.1314808130264282, -0.06872165948152542, -0.4812428653240204, -0.0005775213940069079, -0.3686361312866211, -0.025341110303997993, -0.2844071388244629, -2.897350311279297, -0.00042548662167973816, -0.001999404514208436, -0.00046171018038876355, -8.821448318485636e-06, 0.0, -0.031127633526921272, -0.012692032381892204, -0.033622488379478455, -6.09140915912576e-05, -0.011175655759871006, -0.013150861486792564, -5.9126061387360096e-05, -0.00018571082910057157, -0.16424764692783356, -0.00012015574611723423, -6.0794889577664435e-05, -0.004792275372892618, -0.0037569671403616667, -7.033323527139146e-06, -0.00889919325709343, -0.04169315844774246, -0.0017484629061073065, -0.30931395292282104, -4.1483970562694594e-05, -0.42449724674224854, -0.005859223194420338, -0.000816012208815664, -2.1457441107486375e-05, -0.00025662468397058547, -2.5512101650238037, -0.0013194911880418658, -1.2260828018188477, -0.0013267532922327518, -0.04136219993233681, -6.246371776796877e-05, -2.861018856492592e-06, -0.053269945085048676, -0.03031587228178978, -0.03751808777451515, -0.013954218477010727, -0.00017248096992261708, -0.0027558940928429365, -0.0036165802739560604, -6.794906312279636e-06, -1.4305104514278355e-06, -4.410734163684538e-06, -1.1920928244535389e-07, 0.0, -0.00026222606538794935, -0.0006915323319844902, -0.01250968873500824, -0.0011956692906096578, -4.529942543740617e-06, -0.0001896439935080707, -0.0006704466650262475, -5.1020273531321436e-05, -0.0002698534226510674, -0.4496111273765564, -0.008347738534212112, -0.00018130090029444546, -4.172316494077677e-06, -5.006777428206988e-06, -0.0005286726518534124, -9.190614218823612e-05, -0.0013517538318410516, -0.000595034915022552, -9.536738616588991e-07, -0.00033849707688204944, -0.0013769917422905564, -0.0001232548092957586, -4.9470632802695036e-05, -0.059606365859508514, -1.6093124941107817e-05, -0.0004862556525040418, -0.0002719986077863723, -1.9454461336135864, -0.001949435449205339, -6.508615479106084e-05, -1.966933996300213e-05, -0.15626607835292816, -0.5726408958435059, -8.666139910928905e-05, -2.2291887944447808e-05, -0.0011444692499935627, -0.0004920940846204758, -0.0001227780303452164, -7.10462118149735e-05, -0.0010868363315239549, -7.199982064776123e-05, -3.099436753473128e-06, -0.0007164295529946685, -0.0018538922304287553, -0.00082601752365008, -0.0034288919996470213, -0.0008305437513627112, -0.0010765953920781612, -4.768258077092469e-05, -3.6954811548639555e-06, -1.4305104514278355e-06, -1.8596476365928538e-05, 0.0, -2.145764938177308e-06, -0.004340038634836674, -0.0006443570018745959, -0.01269968319684267, -3.099436753473128e-06, -8.165503095369786e-05, -0.0006268443539738655, -0.05334996432065964, -0.0005260513862594962, -5.400034933700226e-05, -0.0001389883691444993, -2.612738847732544, -0.0026421183720231056], "finish_reason": "length"}], "metrics": {"energy": 1091.61404034996, "energy_per_token": 4.2641173451170316, "time": 24.403147, "time_per_token": 0.09532479296875}}
{"outputs": [{"text": "# Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of extensions to convert to CSV\n    extensions = ['txt', 'docx', 'xlsx', 'csv']\n\n    # Counter for successful conversions\n    count = 0\n\n    # Iterate over the files in the source directory\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        # Check if the file is a regular file\n        if not os.path.isfile(file_path):\n            continue\n\n        # Split file name and extension\n        filename, extension = os.path.splitext(file)\n\n        # Remove the period from the extension\n        extension = extension[1:]\n\n        # Check if the file has an extension", "tokens": ["#", " Check", " if", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " of", " extensions", " to", " convert", " to", " CS", "V", "\n", "    ", "extensions", " =", " ['", "txt", "'", ",", " '", "doc", "x", "'", ",", " '", "x", "ls", "x", "'", ",", " '", "csv", "']", "\n", "\n", "    ", "#", " Counter", " for", " successful", " conversions", "\n", "    ", "count", " =", " ", "0", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " regular", " file", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "continue", "\n", "\n", "        ", "#", " Split", " file", " name", " and", " extension", "\n", "        ", "filename", ",", " extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")", "\n", "\n", "        ", "#", " Remove", " the", " period", " from", " the", " extension", "\n", "        ", "extension", " =", " extension", "[", "1", ":]", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " has", " an", " extension"], "logprobs": [-1.1783795356750488, -0.9367395043373108, -0.1412898451089859, -1.3740129470825195, -0.1459594964981079, -0.02099352516233921, -0.14009025692939758, -0.000998594332486391, -0.1161581352353096, -0.012917060405015945, -0.20460394024848938, -7.867782187531702e-06, -0.0024802894331514835, -1.1205610462639015e-05, -0.19044126570224762, -0.00017176583060063422, -0.005522708408534527, -2.109982233378105e-05, -7.152531907195225e-06, -0.0018748340662568808, -0.0008467426523566246, -0.001122083282098174, -0.026746461167931557, -0.002878453116863966, -0.0001394651480950415, -4.768360213347478e-06, -0.040949322283267975, -0.23742656409740448, -0.05875648185610771, -0.35327064990997314, -0.0014874596381559968, -0.4787667393684387, -6.818538531661034e-05, -0.0009725131676532328, -0.0002512616047170013, -2.5987286790041253e-05, -0.0019205235876142979, -0.2132442146539688, -0.00032789100077934563, -0.0006996329175308347, -0.2699621319770813, -0.002078041434288025, -0.00025722055579535663, -0.0001677133986959234, -0.03371170163154602, -0.0005097282119095325, -0.06319242715835571, -0.3684147894382477, -1.0213698148727417, -0.004269651137292385, -0.0017368007684126496, -0.009074162691831589, -0.004252320621162653, -0.3412609398365021, -0.00019894051365554333, -3.6954811548639555e-06, -0.004721326753497124, -0.021757831797003746, -6.41325386823155e-05, -1.1469448804855347, -0.014727212488651276, -0.0006699701189063489, -9.536738616588991e-07, -3.3378546504536644e-06, -0.00028165188268758357, -0.0005160430446267128, -7.366862701019272e-05, -5.960462772236497e-07, -5.2689116273541003e-05, -0.0460207462310791, -0.0002294515579706058, -0.0010936238104477525, -5.245195097813848e-06, -3.3378044463461265e-05, -3.576278118089249e-07, -1.4305104514278355e-06, -7.259582343976945e-05, -5.8053239627042785e-05, -0.00020561488054227084, -0.000758955895435065, -0.005365258082747459, -0.00012683063687290996, -0.16463690996170044, -2.2672948837280273, -0.10301420837640762, -1.1865346431732178, -0.27613168954849243, -0.8121620416641235, -1.2049777507781982, -0.01684793457388878, -0.0027898934204131365, -0.07272171974182129, -0.00012611546844709665, -0.23564669489860535, -0.37280556559562683, -0.7501657009124756, -2.4103751182556152, -0.0002554328821133822, -4.3987260141875595e-05, -0.001069093239493668, -0.02057156339287758, -0.0014732946874573827, -0.0006473353132605553, -1.8358061424805783e-05, -0.0001541257370263338, -0.011307795532047749, -8.4638240878121e-06, -0.00030214988510124385, -0.0013953244779258966, -3.325883881188929e-05, -0.0002455409849062562, -0.0015142414486035705, -0.003304855665192008, -0.0011194637045264244, -0.0331822969019413, -2.8609820219571702e-05, -0.07381641119718552, -1.3361223936080933, -0.30265578627586365, -0.8045210838317871, -0.07517886161804199, -0.009647885337471962, -9.691245941212401e-05, -1.607147216796875, -0.12622062861919403, -0.00024911639047786593, -9.011816291604191e-05, -6.890059739816934e-05, -0.011527949944138527, -5.376194530981593e-05, -0.045862827450037, -0.6914488673210144, -0.0022176930215209723, -0.42034709453582764, -1.7016489505767822, -0.26356393098831177, -0.025608975440263748, -0.028058389201760292, -0.012154913507401943, -0.0014516302617266774, -0.023196877911686897, -8.964136941358447e-05, -0.01086533535271883, -0.6815635561943054, -0.36167100071907043, -0.009652371518313885, -9.298280929215252e-06, -0.009750360623002052, 0.0, -1.597391747054644e-05, -0.0002420847595203668, -1.490105023549404e-05, -4.291525328881107e-06, -4.339123915997334e-05, -0.00018869050836656243, -0.010696222074329853, -0.6913785934448242, -0.04186522588133812, -0.028905803337693214, -0.0004183370911050588, -0.0034110716078430414, -5.960462772236497e-07, -2.1815061700181104e-05, -3.4570634852570947e-06, -0.00022790218645241112, -7.510157047363464e-06, -9.77468371274881e-05, -4.0531076592742465e-06, -4.887569048150908e-06, -9.65590606938349e-06, -0.00012396997772157192, -1.5735502529423684e-05, -0.0027558940928429365, -0.46857142448425293, -0.00014184899919200689, -0.11557411402463913, -0.41650331020355225, -0.005618020426481962, -0.42093610763549805, -0.009170671924948692, -0.5822993516921997, -0.18709830939769745, -0.7866770029067993, -0.00044764988706447184, -1.5237168073654175, -2.4437606043647975e-05, -0.0009993088897317648, -1.0829898118972778, -0.0003355178632773459, -7.152555099310121e-07, -1.1920922133867862e-06, -1.1920928244535389e-07, -7.748573807475623e-06, -8.189342770492658e-05, -1.2755313036905136e-05, -3.504691630951129e-05, -0.00013219437096267939, 0.0, -0.013940699398517609, -0.0004153581103309989, -0.00014768941036891192, -0.004481985233724117, -0.003011693712323904, -0.0014484162675216794, -0.00012087091454304755, -0.06555449962615967, -3.408592462539673, -2.127436637878418, -0.09835083037614822, -0.017992613837122917, -0.007536787074059248, -0.02504654973745346, -6.16293036728166e-05, -2.0063397884368896, -0.02722313441336155, -0.9542059302330017, -0.0008958140970207751, -0.0002215855201939121, -1.1920928244535389e-07, -3.4570634852570947e-06, 0.0, -4.31528314948082e-05, 0.0, 0.0, -2.658331868587993e-05, -0.008130311034619808, -0.03861699625849724, -0.0003923600015696138, -0.2996044158935547, -0.00015031162183731794, -0.0061584231443703175, -0.7312468886375427, -0.5821463465690613, -2.875345468521118, -0.24720802903175354, -0.036310721188783646, -0.036538198590278625, -0.1278204619884491, -4.5536911784438416e-05, -0.01026352122426033, -0.0019211184699088335, -0.00011693747364915907, -0.2584245800971985, -2.992108420585282e-05, -0.0002723561483435333, -0.1825367510318756, -0.003147174371406436, -0.00013636612857226282, -0.03075963631272316, -0.2912217080593109, -0.004851711913943291, -0.05240730568766594, -0.33322077989578247, -0.26802536845207214, -1.6705729961395264, -0.5168095827102661], "finish_reason": "length"}], "metrics": {"energy": 1084.2103605365762, "energy_per_token": 4.235196720846001, "time": 24.452736, "time_per_token": 0.0955185}}
{"outputs": [{"text": "os.chdir(source_directory)\n    files = list(Path(source_directory).glob('*'))\n    count = 0\n\n    for file in files:\n        extension = file.suffix.lower()\n        if extension == '.txt':\n            with open(file, 'r', encoding='utf-8') as f:\n                content = f.read()\n            df = pd.DataFrame({'Text': [content]})\n            df.to_csv(f'{target_directory}/{file.name}.csv', index=False)\n            count += 1\n        elif extension == '.docx':\n            doc = docx.Document(file)\n            text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            df = pd.DataFrame({'Text': [text]})\n            df.to_csv(f'{target_directory}/{file.name}.csv', index=False)\n            count += 1\n        elif extension in ('.xlsx', '.xls'):\n            try:\n                df = pd.read_excel", "tokens": ["os", ".", "ch", "dir", "(", "source", "_", "directory", ")", "\n", "    ", "files", " =", " list", "(", "Path", "(", "source", "_", "directory", ")", ".", "glob", "('", "*", "'))", "\n", "    ", "count", " =", " ", "0", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "extension", " =", " file", ".", "suff", "ix", ".", "lower", "()", "\n", "        ", "if", " extension", " ==", " '", ".", "txt", "':", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Text", "':", " [", "content", "]", "})", "\n", "            ", "df", ".", "to", "_", "csv", "(", "f", "'{", "target", "_", "directory", "}/{", "file", ".", "name", "}", ".", "csv", "'", ",", " index", "=", "False", ")", "\n", "            ", "count", " +=", " ", "1", "\n", "        ", "elif", " extension", " ==", " '", ".", "doc", "x", "':", "\n", "            ", "doc", " =", " doc", "x", ".", "Document", "(", "file", ")", "\n", "            ", "text", " =", " '\\", "n", "'", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Text", "':", " [", "text", "]", "})", "\n", "            ", "df", ".", "to", "_", "csv", "(", "f", "'{", "target", "_", "directory", "}/{", "file", ".", "name", "}", ".", "csv", "'", ",", " index", "=", "False", ")", "\n", "            ", "count", " +=", " ", "1", "\n", "        ", "elif", " extension", " in", " ('", ".", "x", "ls", "x", "'", ",", " '", ".", "x", "ls", "')", ":", "\n", "            ", "try", ":", "\n", "                ", "df", " =", " pd", ".", "read", "_", "ex", "cel"], "logprobs": [-3.4495930671691895, -0.005339409224689007, -3.021198272705078, -0.033525194972753525, -0.028584254905581474, -0.23948563635349274, -0.00018535325943958014, -4.541770613286644e-05, -0.0008188708452507854, -0.09593325853347778, -0.28483670949935913, -2.3374645709991455, -0.2810767590999603, -3.0850274562835693, -0.09323956072330475, -0.29257631301879883, -0.6892791986465454, -0.22017474472522736, -9.083335316972807e-05, -5.8053239627042785e-05, -0.002669344889000058, -0.00027104519540444016, -0.8927662372589111, -0.4590710997581482, -0.7649355530738831, -0.24282975494861603, -0.04569098725914955, -0.2735937237739563, -2.4962310791015625, -0.08503551036119461, -0.010662490501999855, -0.0034675016067922115, -0.041073236614465714, -1.1104618310928345, -0.00034624303225427866, -0.3353583514690399, -0.13770173490047455, -0.05244135484099388, -0.005414464045315981, -0.0016113643068820238, -0.002118011936545372, -0.04542389139533043, -3.0355067253112793, -0.005652159918099642, -0.15840156376361847, -0.0005491655902005732, -0.01016770675778389, -1.3947389561508317e-05, -1.353217363357544, -0.14232298731803894, -0.02410358004271984, -0.048885367810726166, -0.5337825417518616, -0.6034473776817322, -0.04784883186221123, -1.1997995376586914, -0.11712976545095444, -0.004254101309925318, -0.05283628776669502, -0.01574806310236454, -0.00419071177020669, -0.0014359173364937305, -0.6544179916381836, -0.07359504699707031, -0.0008843801915645599, -0.02795707806944847, -0.1502801775932312, -0.07966898381710052, -0.013864048756659031, -1.204978108406067, -9.691245941212401e-05, -0.018786007538437843, -0.060975849628448486, -0.03682364895939827, -0.041434142738580704, -0.0006823595031164587, -0.09798687696456909, -0.00010930894495686516, -0.46473968029022217, -0.011184968054294586, -0.0037810755893588066, -0.000602421467192471, -1.707517385482788, -0.002333657816052437, -0.03492232412099838, -6.687417771900073e-05, -3.576272320060525e-06, -0.038705307990312576, -0.06986219435930252, -0.42576685547828674, -0.5907778739929199, -0.004938072524964809, -0.00046206763363443315, -8.344646857949556e-07, -0.013887208886444569, -1.089663028717041, -0.005948459263890982, -0.01212087832391262, -0.0008450751192867756, -0.10569020360708237, -0.0011940023396164179, -0.012260782532393932, -0.001061591086909175, -0.015584350563585758, -0.14929772913455963, -0.5660791397094727, -0.00576168205589056, -0.0016701571876183152, -3.814689989667386e-06, -7.259582343976945e-05, -0.004096094518899918, -0.9632466435432434, -0.0920473262667656, -0.15221205353736877, -0.0003010773507412523, -0.0005972985527478158, -0.052410583943128586, -0.025593405589461327, -0.010751653462648392, -2.5697834491729736, -0.3595444858074188, -0.0005816913326270878, -0.009614118374884129, -0.007168643642216921, -0.0009396428358741105, -0.04859039559960365, -0.0018678138731047511, -0.056003451347351074, -0.14511127769947052, -0.0029094768688082695, -0.12018246203660965, -0.020723018795251846, -0.003663021605461836, -0.0011275607394054532, -9.107174992095679e-05, -0.00038699767901562154, -0.24746420979499817, -0.010865689255297184, -0.0028567002154886723, -0.024540919810533524, -0.0038247781340032816, -0.000694153131917119, -0.04054039344191551, -0.0012184107908979058, -0.0010804060148075223, -0.0008379285573028028, -0.0002351722796447575, -0.29659926891326904, -0.006434082053601742, -0.0002847504511009902, -1.597391747054644e-05, -1.811964830267243e-05, -0.00034957972820848227, -0.0003270567976869643, -0.03336667641997337, -0.006663957145065069, -0.0010083595989271998, -0.0004748170613311231, -0.882001519203186, -0.02775767259299755, -0.4662208557128906, -0.0009684640099294484, -0.013917775824666023, -0.00032026408007368445, -5.209310256759636e-05, -0.03510787710547447, -0.7800240516662598, -7.152301259338856e-05, -4.51792984677013e-05, -0.0013013951247557998, -0.000942858459893614, -0.00016246906307060272, -0.00017307691450696439, -0.0006753309280611575, -0.00027056847466155887, -2.0265558760002023e-06, -0.0008144637104123831, -0.0016331442166119814, -0.00045503751607611775, -0.014188835397362709, -0.00013863079948350787, -6.23445157543756e-05, -4.410734163684538e-06, -0.00014244495832826942, -0.004594958852976561, -4.172238186583854e-05, -0.00045753977610729635, -6.592056161025539e-05, -0.0009129646932706237, -0.00019107422849629074, -0.0008577005355618894, -4.362964682513848e-05, -0.00013040646445006132, -0.00022897482267580926, -0.002709410386160016, -7.688703772146255e-05, -2.2172682292875834e-05, -5.960462772236497e-07, -2.372236667724792e-05, -3.5523738915799186e-05, -0.0028169972356408834, -0.0013427060330286622, -0.0006208876147866249, -2.622600959512056e-06, -1.2755313036905136e-05, -0.0004564673872664571, -0.003642830066382885, -0.00019464982324279845, -0.5934702754020691, -0.055431023240089417, -0.00023123928986024112, -0.0021459662821143866, -0.00021562635083682835, -2.1815061700181104e-05, -0.00035375059815123677, -5.2927523938706145e-05, -0.00012337400403339416, -0.0011267272057011724, -0.00015639036428183317, -0.0003411188081372529, -0.00011586471373448148, -3.862306402879767e-05, -0.00013791563105769455, -2.1457441107486375e-05, -8.082063141046092e-05, -0.009098970331251621, -0.006637786515057087, -0.0021510813385248184, -1.8327996730804443, -0.6537110209465027, -0.000692842761054635, -0.014066244475543499, -2.7417760065873154e-05, -0.003241881262511015, -0.003316855989396572, -0.00040534863364882767, -0.004086953122168779, -0.0008594871615059674, -1.7421239614486694, -0.002193308901041746, -0.023466365411877632, -0.0024507984053343534, -0.0073822564445436, -0.00043847484630532563, -3.1808369159698486, -6.246371776796877e-05, -0.004705664701759815, -0.0005349873681552708, -0.15121512115001678, -0.0010480155469849706, -0.0004574206250254065, -7.629365427419543e-06, -0.00795801542699337, -3.576272320060525e-06, -0.000390215078368783, -4.768370445162873e-07], "finish_reason": "length"}], "metrics": {"energy": 1167.6684581489556, "energy_per_token": 4.561204914644358, "time": 26.955662, "time_per_token": 0.1052955546875}}
{"outputs": [{"text": "extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    files_to_convert = []\n\n    try:\n        for ext in extensions:\n            files_to_convert.extend(\n                list(Path(source_directory).glob(f'**/*{ext}')))\n        for file in files_to_convert:\n            file_path = os.path.join(source_directory, file)\n            target_path = os.path.join(target_directory, os.path.basename(file))\n\n            if file.endswith(\".txt\"):\n                with open(file_path, \"r\") as text_file:\n                    data = text_file.read()\n                    df = pd.DataFrame([data])\n                    df.to_csv(target_path, index=False)\n            elif file.endswith(\".docx\"):\n                doc = docx.Document(file_path)\n                data = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                df", "tokens": ["extensions", " =", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]", "\n", "    ", "files", "_", "to", "_", "convert", " =", " []", "\n", "\n", "    ", "try", ":", "\n", "        ", "for", " ext", " in", " extensions", ":", "\n", "            ", "files", "_", "to", "_", "convert", ".", "extend", "(", "\n", "                ", "list", "(", "Path", "(", "source", "_", "directory", ")", ".", "glob", "(", "f", "'", "**", "/*", "{", "ext", "}'", ")))", "\n", "        ", "for", " file", " in", " files", "_", "to", "_", "convert", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "            ", "target", "_", "path", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " os", ".", "path", ".", "bas", "ename", "(", "file", "))", "\n", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " text", "_", "file", ":", "\n", "                ", "    ", "data", " =", " text", "_", "file", ".", "read", "()", "\n", "                ", "    ", "df", " =", " pd", ".", "DataFrame", "([", "data", "])", "\n", "                ", "    ", "df", ".", "to", "_", "csv", "(", "target", "_", "path", ",", " index", "=", "False", ")", "\n", "            ", "elif", " file", ".", "end", "sw", "ith", "(", "\"", ".", "doc", "x", "\"", "):", "\n", "                ", "doc", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "                ", "data", " =", " '\\", "n", "'", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "                ", "df"], "logprobs": [-2.6728062629699707, -0.23278377950191498, -1.7361971139907837, -0.06276708096265793, -0.11411984264850616, -0.007212671916931868, -8.928377064876258e-05, -0.0009247555863112211, -0.0036421173717826605, -0.005193433258682489, -0.01834953762590885, -0.00429113581776619, -2.634490556374658e-05, -0.0010406322544440627, -0.0005085367010906339, -0.004232140723615885, -0.01900440640747547, -1.9311717551317997e-05, -0.00015805903240107, -1.07287787614041e-05, -0.001039441442117095, -0.0008459088858217001, -0.0005000770906917751, -0.001943010720424354, -2.682172998902388e-05, -0.0029759190510958433, -0.10862195491790771, -0.27960869669914246, -1.5925865173339844, -0.5594366788864136, -0.5718056559562683, -0.00014530557382386178, -0.14929649233818054, -0.006526346318423748, -0.89522784948349, -0.006264218129217625, -0.7347871661186218, -0.0005156855913810432, -2.3471977710723877, -5.924526340095326e-05, -0.0035816587042063475, -0.004011798650026321, -0.79890376329422, -3.195744514465332, -0.0024334362242370844, -0.0010480155469849706, -0.00018153927521780133, -0.0018787605222314596, -0.0012194823939353228, -0.38969165086746216, -0.1449284553527832, -0.027764976024627686, -1.9073468138230965e-06, -0.0006793813081458211, -0.25911620259284973, -0.004084815736860037, -0.4684201180934906, -1.2265992164611816, -0.0009439303539693356, -2.1846957206726074, -0.008431906811892986, -0.23071984946727753, -0.0003367095487192273, -0.007480940781533718, -5.0424259825376794e-05, -1.597391747054644e-05, -0.004228935576975346, -0.00044848397374153137, -1.6567847728729248, -0.005044708028435707, -0.23659174144268036, -2.983872413635254, -0.0669415146112442, -0.0033362226095050573, -0.0025398635771125555, -0.0011404207907617092, -0.03660565987229347, -0.14505064487457275, -0.04580703005194664, -2.0207109451293945, -2.399059534072876, -0.22297292947769165, -0.18463188409805298, -0.010317914187908173, -2.1457441107486375e-05, -1.5497195136049413e-06, 0.0, -0.0012209111591801047, -0.0009018882992677391, -0.001593511551618576, -0.00935031846165657, -1.7640413045883179, -0.0964662954211235, -1.3061645030975342, -0.21839357912540436, -1.553485631942749, -0.00010835537250386551, -0.0032043324317783117, -0.00022110878489911556, -0.12297015637159348, -0.0004528927383944392, -0.2888413071632385, -4.5060096454108134e-05, -1.3947389561508317e-05, -0.0003999863693024963, -0.03724363073706627, -0.14764223992824554, -0.005308934953063726, -0.04555784910917282, -1.6579231023788452, -0.04852237179875374, -0.6020405292510986, -0.0028594343457370996, -0.07751105725765228, -1.6689160474925302e-05, -6.818538531661034e-05, -1.1444026313256472e-05, -0.00667236465960741, -0.00015496007108595222, -0.1149134486913681, -8.4638240878121e-06, -6.90197994117625e-05, -0.0056167165748775005, -1.3154958486557007, -7.64102369430475e-05, -0.00030083899036981165, -1.4185804502631072e-05, -0.3838805854320526, -2.3841830625315197e-06, -0.0006350646144710481, -0.14038699865341187, -0.2805376946926117, -0.018786124885082245, -1.7013750076293945, -0.020130963996052742, -0.40645158290863037, -0.9172473549842834, -0.11500664055347443, -0.1458786129951477, -0.00033504117163829505, -2.3841855067985307e-07, -0.3399476706981659, -0.008093300275504589, -0.003014783840626478, -0.04275950789451599, -9.894321920000948e-06, -0.020067639648914337, -0.006837305147200823, -0.0022004456259310246, -0.17408987879753113, -0.0015524489572271705, -0.00016044282529037446, -0.045249585062265396, -0.15922780334949493, -3.611976353568025e-05, -0.02527799643576145, -0.22100666165351868, -0.007128993049263954, -0.0005318895564414561, -0.3101038932800293, -5.745722592109814e-05, -2.9740710258483887, -0.08237022906541824, -0.026187345385551453, -0.011388296261429787, -0.0003840185818262398, -0.00027450130437500775, -0.0006586528033949435, -2.3803343772888184, -0.012638120912015438, -0.5307433605194092, -2.109982233378105e-05, -2.861018856492592e-06, -0.0002047805901383981, -1.2993727978027891e-05, -0.05764427408576012, -0.07741882652044296, -0.14276345074176788, -0.22455647587776184, -0.591605544090271, -0.012605632655322552, -0.00039891392225399613, -5.483612312673358e-06, -0.011867634020745754, -0.29735609889030457, -0.0864308774471283, -1.019419550895691, -0.013537626713514328, -0.2864176332950592, -0.052102167159318924, -0.07990628480911255, -0.004680748097598553, -0.0020341435447335243, -1.0967194612021558e-05, -7.629103492945433e-05, -0.00012218205665703863, -0.07298705726861954, -0.0002397011558059603, -0.006777039263397455, -0.13545657694339752, -0.24487437307834625, -0.0006211258587427437, -0.05639979615807533, -1.6332404613494873, -0.001764527871273458, -0.5824939608573914, -0.00798521563410759, -0.0004619484825525433, -0.0007923085941001773, -0.00021526881027966738, -2.622600959512056e-06, 0.0, -0.00471942825242877, -0.00024351492174901068, -0.0016075557796284556, -0.046899717301130295, -0.0005459486856125295, -1.2874520507466514e-05, -0.00039450492477044463, -0.0005079409456811845, -0.000560245884116739, -0.3893601596355438, -0.020910173654556274, -0.0003271759778726846, -9.894321920000948e-06, -1.8954096958623268e-05, -0.0003149013500660658, -0.0003927174839191139, -0.01528631430119276, -0.021344712004065514, -2.8967437174287625e-05, -0.0006599632324650884, -0.001256391522474587, -0.0023284247145056725, -0.8100163340568542, -0.01702362857758999, -1.8721003532409668, -0.001511027687229216, -0.014311999082565308, -0.00021872512297704816, -6.317892984952778e-05, -0.040237221866846085, -0.5813868045806885, -0.00018880968855228275, -3.290122185717337e-05, -0.005419562105089426, -0.0027457892429083586, -0.0027669500559568405, -0.0014212755486369133, -0.0004353767435532063, -6.12716976320371e-05, -1.1205610462639015e-05, -0.000938332756049931, -0.0017128810286521912, -0.0019549084827303886, -0.007828271016478539], "finish_reason": "length"}], "metrics": {"energy": 1075.562422542572, "energy_per_token": 4.201415713056922, "time": 24.459415, "time_per_token": 0.09554458984375}}
{"outputs": [{"text": "# Check if the source directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Directory '{source_directory}' not found\")\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Initialize a counter to track the number of converted files\n    files_converted = 0\n\n    # Loop through all files in the source directory\n    for file in Path(source_directory).iterdir():\n        filename = file.name\n\n        # Check if the file has a valid extension\n        if file.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n            # Set the target file path\n            target_file = os.path.join(target_directory, f\"{file.stem}.csv\")\n\n            # Initialize a DataFrame to hold the file's data\n            df = pd.DataFrame(columns=['Text'])\n\n            # Read the file content based on its extension\n", "tokens": ["#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "source", "_", "directory", "}'", " not", " found", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "target", "_", "directory", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "#", " Initialize", " a", " counter", " to", " track", " the", " number", " of", " converted", " files", "\n", "    ", "files", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "#", " Loop", " through", " all", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " Path", "(", "source", "_", "directory", ")", ".", "iter", "dir", "():", "\n", "        ", "filename", " =", " file", ".", "name", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " has", " a", " valid", " extension", "\n", "        ", "if", " file", ".", "suff", "ix", " in", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", ":", "\n", "            ", "#", " Set", " the", " target", " file", " path", "\n", "            ", "target", "_", "file", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " f", "\"", "{", "file", ".", "stem", "}", ".", "csv", "\"", ")", "\n", "\n", "            ", "#", " Initialize", " a", " Data", "Frame", " to", " hold", " the", " file", "'", "s", " data", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Text", "'])", "\n", "\n", "            ", "#", " Read", " the", " file", " content", " based", " on", " its", " extension", "\n"], "logprobs": [-1.1783795356750488, -0.9367395043373108, -0.1412898451089859, -0.32091429829597473, -0.04229452833533287, -0.0280911922454834, -0.01390343252569437, -0.18090498447418213, -0.0009170140838250518, -0.0514582060277462, -0.013769401237368584, -0.14302769303321838, -7.986990567587782e-06, -0.00281331199221313, -8.583032467868179e-06, -1.8375641107559204, -0.00018940561858471483, -0.00013183678674977273, -0.005681911949068308, -3.1470757676288486e-05, -7.271740287251305e-06, -0.0011619728757068515, -0.0006965356878936291, -0.0009841842111200094, -0.021611783653497696, -0.003925951663404703, -9.83428253675811e-05, -2.9802276912960224e-06, -0.03140677884221077, -0.29185646772384644, -0.048405054956674576, -2.4230387210845947, -0.44447484612464905, -0.00021789084712509066, -0.0010417040903121233, -6.69933797325939e-05, -4.1960789531003684e-05, -0.0024434253573417664, -1.0895380973815918, -0.00023636408150196075, -1.8711522817611694, -0.00015758226800244302, -0.0004919749335385859, -0.028967877849936485, -0.0007802779437042773, -0.052227988839149475, -0.31562843918800354, -0.07404271513223648, -0.006504436023533344, -0.001007526065222919, -0.009421530179679394, -0.003915620967745781, -0.31566545367240906, -0.00013326710904948413, -4.0531076592742465e-06, -0.005219404585659504, -0.014890007674694061, -0.00010656742961145937, -1.3492451906204224, -0.0026065681595355272, -0.00531415268778801, -1.9073468138230965e-06, -4.434487345861271e-05, -3.099436753473128e-06, -0.7223125696182251, -3.421248038648628e-05, -0.0010679024271667004, -2.50339189733495e-06, -3.099436753473128e-06, -0.0002693767019081861, -0.00019095504831057042, -0.0004667146422434598, -0.022044500336050987, -2.50339189733495e-06, -0.057553794234991074, -3.933898824470816e-06, -2.0265558760002023e-06, -4.589452510117553e-05, -0.0010844547068700194, -3.933898824470816e-06, -2.9802276912960224e-06, -0.007164619397372007, -0.0004400238685775548, -0.013971734791994095, -0.0004306104383431375, -0.11320766061544418, -1.4028815031051636, -0.4315076172351837, -0.2582734227180481, -1.517582893371582, -1.1867910623550415, -0.05931656062602997, -0.02597631700336933, -0.0001532914029667154, -0.9512245655059814, -0.015534820966422558, -0.0022986913099884987, -0.00012444675667211413, -3.5585176944732666, -0.004350483417510986, -0.26550814509391785, -0.07809723168611526, -0.003193756565451622, -7.1403817855753e-05, -0.000321336614433676, -0.01753869466483593, -0.00014661667228210717, -0.020960139110684395, -1.4554808139801025, -0.09162603318691254, -0.8603602051734924, -0.2736873924732208, -0.024079956114292145, -0.0021189635153859854, -0.019046980887651443, -0.0015767297009006143, -0.07580430060625076, -0.00015221867943182588, -0.015684928745031357, -0.29073166847229004, -0.4256490468978882, -1.6576807498931885, -0.00021240839851088822, -0.0006260104128159583, -3.099436753473128e-06, -1.168244216387393e-05, -0.00014840454969089478, -3.2186455882765586e-06, -0.8021852374076843, -4.1483970562694594e-05, -7.009260298218578e-05, -0.00028010259848088026, -0.08273135125637054, -2.853494644165039, -0.22574549913406372, -0.09963905811309814, -0.005344863515347242, -0.09230856597423553, -0.03745470568537712, -1.3714778423309326, -0.0007712250226177275, -0.03822948783636093, -0.2791670560836792, -0.03644900396466255, -0.023096702992916107, -0.019898906350135803, -0.2882393002510071, -0.4357191324234009, -1.5110771656036377, -0.014430565759539604, -0.24342848360538483, -0.00013863079948350787, -0.09005630761384964, -0.4889826774597168, -0.00029666791670024395, -0.2160572111606598, -1.4305104514278355e-06, -0.35390931367874146, -1.0014715194702148, -0.00011085849109804258, -0.00215798057615757, -0.0011244647903367877, -4.124556289752945e-05, -0.000417741306591779, -0.00015114595589693636, -0.04302731528878212, -0.006580587476491928, -0.0037104112561792135, -5.1020273531321436e-05, -0.00015162272029556334, -0.0006436422117985785, -0.023196062073111534, -9.059865078597795e-06, -0.00029023250681348145, -0.004989790264517069, -4.279521817807108e-05, -0.0002348147245356813, -0.00018439977429807186, -0.0017617909470573068, -0.005986260715872049, -0.007780011277645826, -0.0007333449902944267, -0.19096259772777557, -0.2959459125995636, -2.801945686340332, -0.16232328116893768, -0.5694741606712341, -0.5110177993774414, -0.09982647001743317, -0.7073701024055481, -0.0003861635341309011, -0.02374335005879402, -0.00526067242026329, -0.05880245566368103, -0.26987993717193604, -0.4182877540588379, -1.0728830375228426e-06, -3.516612196108326e-05, -3.933898824470816e-06, -0.0012151960982009768, -2.8729025871143676e-05, -0.004911619704216719, -1.1920928244535389e-07, -2.13382354559144e-05, -0.00012039413559250534, -0.6867177486419678, -0.19945378601551056, -0.007735889870673418, -1.4122258424758911, -0.002123364945873618, -0.001111128251068294, -0.08686748147010803, -0.00046004203613847494, -0.004264547023922205, -7.211902266135439e-05, -0.000402250443585217, -0.003117465414106846, -0.016276100650429726, -0.0011387537233531475, -0.06408786028623581, -3.148965835571289, -0.9364253878593445, -0.8383743762969971, -0.0010181248653680086, -0.7330062389373779, -1.5198241472244263, -0.01074976660311222, -1.2551078796386719, -0.7635238170623779, -0.00010251473577227443, -2.484084129333496, -0.0244215689599514, -0.00012003655137959868, -0.31679123640060425, -0.0074363332241773605, -0.0361885130405426, -2.3841855067985307e-07, -0.0003805628512054682, -0.2883950471878052, -0.004559715278446674, -0.08222562819719315, -0.013239449821412563, -0.01198766753077507, -0.00584642356261611, -0.019640494138002396, -0.0007420408655889332, -0.14665906131267548, -1.5297784805297852, -0.12794633209705353, -0.05542358011007309, -1.833345890045166, -0.13086363673210144, -1.8358061424805783e-05, -0.1373501569032669, -0.0316409170627594, -0.13228115439414978], "finish_reason": "length"}], "metrics": {"energy": 1124.285942867279, "energy_per_token": 4.391741964325308, "time": 25.265507, "time_per_token": 0.09869338671875}}
{"outputs": [{"text": "extensions = ('.txt', '.docx', '.xlsx', '.csv')\n    # Create the target directory if it does not exist\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    # Iterate over the files in the source directory\n    files_converted = 0\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if file.endswith(extensions):\n                filename = os.path.splitext(file)[0]\n                extension = os.path.splitext(file)[1]\n                output_filename = os.path.join(target_directory, f'{filename}.csv')\n                output_path = Path(output_filename)\n\n                if extension == '.txt':\n                    with open(os.path.join(root, file), 'r') as f:\n                        text = f.read()\n                    df = pd.DataFrame({'Text': [text]})\n                    ", "tokens": ["extensions", " =", " ('", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "')", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " does", " not", " exist", "\n", "    ", "target", "_", "directory", " =", " Path", "(", "target", "_", "directory", ")", "\n", "    ", "if", " not", " target", "_", "directory", ".", "exists", "():", "\n", "        ", "target", "_", "directory", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " source", " directory", "\n", "    ", "files", "_", "converted", " =", " ", "0", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "source", "_", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "extensions", "):", "\n", "                ", "filename", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "0", "]", "\n", "                ", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", "\n", "                ", "output", "_", "filename", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " f", "'{", "filename", "}", ".", "csv", "')", "\n", "                ", "output", "_", "path", " =", " Path", "(", "output", "_", "filename", ")", "\n", "\n", "                ", "if", " extension", " ==", " '", ".", "txt", "':", "\n", "                ", "    ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "root", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "        ", "text", " =", " f", ".", "read", "()", "\n", "                ", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Text", "':", " [", "text", "]", "})", "\n", "                ", "    "], "logprobs": [-2.6728062629699707, -0.23278377950191498, -1.5627847909927368, -0.0766550600528717, -0.00964387133717537, -0.00016985881666187197, -0.00018630675913300365, -0.007099046837538481, -0.00270263385027647, -0.046568769961595535, -0.003999687731266022, -0.001212100381962955, -6.341733387671411e-05, -0.0006379238329827785, -0.0012185298837721348, -0.019656039774417877, -2.5987286790041253e-05, -0.0005189026123844087, -0.0006958208978176117, -4.1960789531003684e-05, -0.000816250394564122, -0.0007488307310268283, -0.0025933701545000076, -0.00719906110316515, -0.14270412921905518, -0.27797427773475647, -3.984560012817383, -1.772845983505249, -0.5521740317344666, -0.03509015217423439, -0.028436187654733658, -0.014520097523927689, -0.003673592582345009, -1.2905948162078857, -0.0003636414185166359, -0.007457868196070194, -0.18467023968696594, -0.0014886498684063554, -1.005549430847168, -0.09332709014415741, -1.0823099613189697, -0.3963462710380554, -0.04107563942670822, -0.0018866135505959392, -0.0017675028648227453, -2.622600959512056e-06, -1.585470999998506e-05, -0.0014248467050492764, -0.038835007697343826, -0.007749493233859539, -0.7674179673194885, -0.017695996910333633, -0.06621477752923965, -0.00017820201173890382, -6.6756979322235566e-06, -0.0008437649230472744, -0.1309395730495453, -0.0016496871830895543, -0.0012012654915452003, -0.001733230659738183, -0.1569277048110962, -1.537788011773955e-05, -3.576214658096433e-05, -0.0004574206250254065, -0.0007986216805875301, -2.622600959512056e-06, -0.4401421546936035, -0.004115327261388302, -0.0005994430393911898, -0.0011046981671825051, -1.1180098056793213, -0.003362836316227913, -0.31783780455589294, -0.0006439996068365872, -0.5672555565834045, -2.0957388877868652, -0.005458450876176357, -0.4694167375564575, -1.0472770929336548, -0.17170077562332153, -0.04034782946109772, -0.015157517045736313, -0.020739365369081497, -0.004276298452168703, -0.2217223346233368, -0.0006594866863451898, -1.9236892461776733, -0.27750036120414734, -0.7362262010574341, -0.0854991003870964, -0.024292897433042526, -2.825220326485578e-05, -0.015227846801280975, -0.010798236355185509, -0.15285509824752808, -3.1491141319274902, -0.002935150871053338, -0.45401209592819214, -0.0010100268991664052, -4.60137271147687e-05, -0.01496693305671215, -0.0005052005290053785, -0.0010384886991232634, -0.0003936707798857242, -1.4424220353248529e-05, -0.0002215855201939121, -0.022276295349001884, -2.145764938177308e-06, -1.6689286894688848e-06, -0.010187885724008083, -0.00205972115509212, -0.0014885308919474483, -0.0331389382481575, -0.1093437448143959, -0.08779296278953552, -0.0013304438907653093, -1.9192511899746023e-05, -0.0001961992384167388, -0.0013991338200867176, -1.3535540103912354, -0.09923423081636429, -0.001456510741263628, -0.1202240064740181, -7.152555099310121e-07, -1.1920928244535389e-07, -0.005497930571436882, -0.0002708068350329995, -0.01714480295777321, -0.006391915027052164, -0.0010405131615698338, -3.2645487785339355, -0.1799173355102539, -0.4764845669269562, -3.4570634852570947e-06, -2.8490614567999728e-05, -9.536738616588991e-07, -0.16960912942886353, -2.3841855067985307e-07, 0.0, -3.909988299710676e-05, -0.018022585660219193, -0.005047910381108522, -0.00013672371278516948, -0.0005243833875283599, -0.1692659705877304, -0.019824113696813583, -1.3692960739135742, -0.0003691230376716703, -0.019074348732829094, -2.7418097943154862e-06, -1.0251946150674485e-05, 0.0, -3.886147169396281e-05, -1.5497195136049413e-06, 0.0, -6.079655122448457e-06, -7.319182623177767e-05, -0.012856453657150269, -8.141662692651153e-05, -0.02974092774093151, -0.02829679101705551, -0.2586011588573456, -4.315939426422119, -0.017683932557702065, -0.8937817811965942, -0.0027196346782147884, -1.1922577619552612, -1.2874520507466514e-05, -2.4318398573086597e-05, -8.821448318485636e-06, -0.007390184793621302, -0.00031013446277938783, -0.028834344819188118, -9.536738616588991e-07, -2.777537883957848e-05, -0.003308776533231139, -0.2279270738363266, -0.6353533864021301, -0.003920133225619793, -0.015414390712976456, -0.0007172634359449148, -0.0055410838685929775, -0.00016962042718660086, -0.0034484940115362406, -0.808015763759613, -3.598999500274658, -0.09187367558479309, -2.399930477142334, -0.006587338168174028, -0.13136741518974304, -0.0012243640376254916, -0.016003375872969627, -8.344646857949556e-07, -3.4570634852570947e-06, -0.00043883229955099523, -0.01489611528813839, -0.7644790410995483, -0.0008149401983246207, -1.2900183200836182, -0.0572754368185997, -0.03353995084762573, -0.019846083596348763, -0.0003000047872774303, -0.053946737200021744, -0.01102876104414463, -0.008886195719242096, -0.00037531962152570486, -0.0004992430913262069, -0.3560182750225067, -0.0006337541271932423, -0.0002775999018922448, -0.025598403066396713, -1.9073468138230965e-06, -9.536697689327411e-06, -9.536738616588991e-07, -9.97731985989958e-05, -2.002696055569686e-05, -0.013579493388533592, -1.3589766240329482e-05, -0.005376878194510937, -0.011175301857292652, -2.396077979938127e-05, -0.02253192849457264, -0.004855033475905657, -0.3366938531398773, -6.97350042173639e-05, -0.4792782664299011, -0.008017854765057564, -0.0022060361225157976, -8.439661905867979e-05, -0.0009754904895089567, -0.4781833291053772, -0.057972587645053864, -0.005948578007519245, -2.8013790142722428e-05, -1.5497195136049413e-06, -0.0048226467333734035, -0.047913942486047745, -0.047846559435129166, -0.36848366260528564, -0.6089004874229431, -0.0051604644395411015, -0.00036864637513644993, -1.0728830375228426e-06, -0.01988792233169079, -1.2894660234451294, -0.007110883481800556, -0.013321559876203537, -0.00048601735034026206, -0.05717850849032402, -0.0007022537174634635, -0.012890464626252651, -0.000779205875005573, -0.029326463118195534, -0.029268115758895874, -0.18150447309017181], "finish_reason": "length"}], "metrics": {"energy": 1110.2824374370573, "energy_per_token": 4.337040771238505, "time": 24.38793, "time_per_token": 0.0952653515625}}
{"outputs": [{"text": "supported_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Counter to track the number of files successfully converted\n    converted_count = 0\n\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        if os.path.isfile(file_path) and os.path.splitext(file)[1] in supported_extensions:\n            # Get the file extension and name without the extension\n            extension = os.path.splitext(file)[1]\n            file_name = os.path.splitext(file)[0]\n\n            # Load the file based on its extension\n            if extension == '.txt':\n                with open(", "tokens": ["supported", "_", "extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " target", " directory", " if", " it", " does", " not", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Counter", " to", " track", " the", " number", " of", " files", " successfully", " converted", "\n", "    ", "converted", "_", "count", " =", " ", "0", "\n", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", ")", " and", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", " in", " supported", "_", "extensions", ":", "\n", "            ", "#", " Get", " the", " file", " extension", " and", " name", " without", " the", " extension", "\n", "            ", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "0", "]", "\n", "\n", "            ", "#", " Load", " the", " file", " based", " on", " its", " extension", "\n", "            ", "if", " extension", " ==", " '", ".", "txt", "':", "\n", "                ", "with", " open", "("], "logprobs": [-3.381716251373291, -0.0032530506141483784, -0.2521980106830597, -0.005691750440746546, -1.2429689168930054, -0.05759464576840401, -0.0038104087579995394, -0.0003474347176961601, -0.00013624693383462727, -0.004135153256356716, -0.0010718321427702904, -0.020784318447113037, -0.0053076306357979774, -0.0034869839437305927, -3.182837463100441e-05, -0.00030191155383363366, -0.0014355602907016873, -0.02710665576159954, -1.4543427823809907e-05, -0.00026067672297358513, -0.002257182030007243, -2.90866428258596e-05, -0.000697965151630342, -0.0018592467531561852, -0.0013161577517166734, -0.005612093489617109, -0.05829663202166557, -1.2846003770828247, -0.00028165188268758357, -0.8671802878379822, -0.02809014916419983, -0.11366220563650131, -1.645074735279195e-05, -0.0037681306712329388, -8.34461570775602e-06, -0.09016960114240646, -0.0001951265730895102, -0.03239643946290016, -9.775113539944869e-06, -2.9802276912960224e-06, -0.0033390740863978863, -0.006913786754012108, -0.00147162820212543, -0.04583185538649559, -0.00534403370693326, -0.00010930894495686516, -4.529942543740617e-06, -0.0674818754196167, -0.23951444029808044, -0.1000484749674797, -0.5118754506111145, -0.002640334889292717, -0.42187532782554626, -7.86750388215296e-05, -0.000734178873244673, -1.0251946150674485e-05, -2.9802276912960224e-06, -0.001958834705874324, -0.33021530508995056, -0.00040082051418721676, -0.0008289953111670911, -0.2143726944923401, -0.0032011240255087614, -0.0002739054325502366, -0.0001911934232339263, -0.031084761023521423, -0.00016199229867197573, -2.2719461917877197, -0.6023984551429749, -1.6171720027923584, -0.03846031427383423, -0.01217811368405819, -0.010457010008394718, -1.304806113243103, -0.0001431601122021675, -0.003885578364133835, -0.025603165850043297, -0.000192504478036426, -0.9645119905471802, -0.006871521472930908, -0.0007682471186853945, -5.960462772236497e-07, -4.768360213347478e-06, -0.00022194306075107306, -0.00021217002358753234, -7.068861305015162e-05, -4.768370445162873e-07, -2.932505594799295e-05, -0.05509871616959572, -0.00014077626110520214, -0.00030787018476985395, -9.298280929215252e-06, -2.47952248173533e-05, -3.576278118089249e-07, -2.264974000354414e-06, -4.541770613286644e-05, -5.602820692729438e-06, -7.450303382938728e-05, -0.0009712031460367143, -0.009017575532197952, -5.2569914259947836e-05, -1.4795074462890625, -3.4803006649017334, -0.9871434569358826, -1.007411241531372, -0.19319750368595123, -0.03129679337143898, -0.00020346954988781363, -0.7089114189147949, -0.5736075043678284, -0.011220686137676239, -0.6954412460327148, -0.00016091958968900144, -0.8027853965759277, -0.007257053162902594, -0.39515650272369385, -0.00010477947944309562, -0.000388665939681232, -1.9311717551317997e-05, -0.00010835537250386551, -0.011875761672854424, -4.017272294731811e-05, -0.8569643497467041, -0.5922437310218811, -0.5046530961990356, -0.006621562875807285, -2.8967437174287625e-05, -0.0078191626816988, 0.0, -4.088794958079234e-05, -0.0007476395112462342, -3.814689989667386e-06, -5.245195097813848e-06, -8.356221951544285e-05, -0.0012371037155389786, -0.00529885571449995, -0.3589629530906677, -0.06422213464975357, -0.060413893312215805, -0.0005485698929987848, -0.003052458632737398, -4.768370445162873e-07, -2.7417760065873154e-05, -1.311301275563892e-06, -0.00019667598826345056, -6.794906312279636e-06, -0.0001915509783430025, -5.960462772236497e-07, -4.768370445162873e-07, -1.4305012882687151e-05, -9.77468371274881e-05, -2.6702524337451905e-05, -0.0016070796409621835, -0.48577678203582764, -0.00014041867689229548, -0.675654411315918, -0.09570405632257462, -8.344646857949556e-07, -7.033323527139146e-06, -4.768370445162873e-07, -0.021590083837509155, -0.02677733264863491, -0.00041714549297466874, -4.207999518257566e-05, -0.00014661667228210717, -1.1920928244535389e-07, -0.17392170429229736, -0.00029666791670024395, -0.3320786654949188, -4.410734163684538e-06, -1.2516897186287679e-05, -7.152555099310121e-07, -3.2066785934148356e-05, -1.1920928244535389e-07, 0.0, -3.4570634852570947e-06, -9.07141511561349e-05, -0.918917715549469, -0.0005944392178207636, -0.00016592556494288146, -0.14575374126434326, -0.00029023250681348145, -2.3841855067985307e-07, -1.0728830375228426e-06, -0.0011974553344771266, -0.0006160030607134104, -0.017078358680009842, -1.8657413721084595, -2.9909451007843018, -0.24272866547107697, -0.7514435648918152, -0.2562354505062103, -0.8037952780723572, -1.597066879272461, -0.16545701026916504, -1.3676350116729736, -0.00448851240798831, -0.09610804170370102, -0.0001998939987970516, -0.9480291604995728, -0.01322639174759388, -0.0016221948899328709, -1.9073468138230965e-06, -4.768370445162873e-07, 0.0, -1.6569954823353328e-05, 0.0, 0.0, -8.702239938429557e-06, -0.0001954841281985864, -0.06027428060770035, -0.00010692501382436603, -0.0027025151066482067, -0.055181972682476044, -0.007061169017106295, -0.5075774192810059, -0.00035089056473225355, -0.024235883727669716, -0.2477261871099472, -0.010396371595561504, -1.6689286894688848e-06, -5.960462772236497e-07, 0.0, -0.007520814426243305, -1.9073468138230965e-06, -1.8715683836489916e-05, -6.079655122448457e-06, -0.01581318862736225, -0.0009065332706086338, -6.794906312279636e-06, -3.099393507000059e-05, -0.004233327694237232, -0.05367020145058632, -0.0002426806604489684, -0.3496173322200775, -2.7051053047180176, -0.2989863455295563, -0.07864944636821747, -0.5797131657600403, -4.1960789531003684e-05, -0.24271491169929504, -0.00799479428678751, -0.08266396075487137, -0.00029118589009158313, -0.03028406761586666, -0.0011343479854986072, -0.09080283343791962, -0.01451974455267191, -8.83301836438477e-05, -0.027687175199389458, -0.00134080124553293, -0.0011842388194054365, -0.00021896349790040404, -0.299642413854599, -5.98412734689191e-05, -6.305972783593461e-05], "finish_reason": "length"}], "metrics": {"energy": 1081.7899886474618, "energy_per_token": 4.2257421431541475, "time": 23.797682, "time_per_token": 0.0929596953125}}
{"outputs": [{"text": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Count of files successfully converted to CSV\n    file_count = 0\n\n    # List of supported extensions\n    supported_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Loop through each file in the source directory\n    for filename in os.listdir(source_directory):\n        filepath = os.path.join(source_directory, filename)\n\n        # Check if the file is a regular file and has a supported extension\n        if os.path.isfile(filepath) and Path(filename).suffix in supported_extensions:\n            # Create a file object to read the file contents\n            with open(filepath, 'rb') as f:\n                # Read the file contents based on the extension\n                if Path(filename).", "tokens": ["#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Source", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Count", " of", " files", " successfully", " converted", " to", " CS", "V", "\n", "    ", "file", "_", "count", " =", " ", "0", "\n", "\n", "    ", "#", " List", " of", " supported", " extensions", "\n", "    ", "supported", "_", "extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " source", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " filename", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " regular", " file", " and", " has", " a", " supported", " extension", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "path", ")", " and", " Path", "(", "filename", ")", ".", "suff", "ix", " in", " supported", "_", "extensions", ":", "\n", "            ", "#", " Create", " a", " file", " object", " to", " read", " the", " file", " contents", "\n", "            ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "#", " Read", " the", " file", " contents", " based", " on", " the", " extension", "\n", "                ", "if", " Path", "(", "filename", ")", "."], "logprobs": [-1.1783795356750488, -0.9367395043373108, -0.1412898451089859, -0.32091429829597473, -0.04229452833533287, -0.0280911922454834, -0.01390343252569437, -0.18090498447418213, -0.0009170140838250518, -0.0514582060277462, -0.013769401237368584, -0.14302769303321838, -7.986990567587782e-06, -0.00281331199221313, -8.583032467868179e-06, -0.1734558641910553, -0.0001408954558428377, -0.0049208723939955235, -1.2636104656849056e-05, -7.510157047363464e-06, -0.0020042823161929846, -0.0008843801915645599, -0.0012634160229936242, -0.04258039593696594, -0.0026955006178468466, -0.00013636612857226282, -4.172316494077677e-06, -0.03646245226264, -1.4008268117904663, -0.4397660195827484, -0.0016484970692545176, -0.13653090596199036, -0.00015198028995655477, -0.000619696278590709, -0.4741164743900299, -0.0060015469789505005, -0.0007830176036804914, -0.00025293012731708586, -0.030928395688533783, -0.0005955114611424506, -0.04547925293445587, -0.3666003346443176, -0.09371184557676315, -0.0042296480387449265, -0.0009563163621351123, -0.011847253888845444, -0.0028029698878526688, -0.3301267921924591, -0.00018153927521780133, -3.802703940891661e-05, -0.008399398997426033, -0.02793748676776886, -7.652943895664066e-05, -1.267136812210083, -9.775113539944869e-06, -0.00023719835735391825, -1.0728830375228426e-06, 0.0, -6.6756979322235566e-06, -0.00401702243834734, -4.768258077092469e-05, -4.0649541915627196e-05, -0.0006233894382603467, -3.635817120084539e-05, -8.344646857949556e-07, -1.0251946150674485e-05, -0.0010009760735556483, -5.4596363042946905e-05, -7.271502545336261e-05, -0.0006716379430145025, -0.011490593664348125, -0.0001567479339428246, -0.13985179364681244, -2.1639208793640137, -2.019261121749878, -0.32528433203697205, -0.38808247447013855, -0.006908459588885307, -0.17192423343658447, -0.0011832863092422485, -0.0005290300468914211, -0.008475642651319504, -4.732496745418757e-05, -1.915986180305481, -0.001950506237335503, -0.051651131361722946, -0.00203116936609149, -0.0005411829333752394, -4.339123915997334e-05, -0.00022265815641731024, -0.013315561227500439, -9.548207890475169e-05, -0.05880796164274216, -2.695000171661377, -0.06251458823680878, -0.953816294670105, -1.8696187734603882, -0.6430593729019165, -9.679325739853084e-05, -0.507365345954895, -0.0004368066438473761, -0.00865045003592968, -0.0005189026123844087, -0.8715308904647827, -0.053460486233234406, -0.0022640805691480637, -0.0002919009421020746, -5.674201020156033e-05, -0.001260558608919382, -0.0008054111385717988, -0.009754138067364693, -0.008880170062184334, -0.0016912217251956463, -1.6331539882230572e-05, -0.0001787979417713359, -0.0008973624208010733, -0.020883088931441307, -6.9141146923357155e-06, -0.000346362212439999, -0.0022347019985318184, -2.0861407392658293e-05, -0.00034421717282384634, -0.00014828535495325923, -0.0012693690368905663, -0.0047048344276845455, -0.0006933192489668727, -0.0033892113715410233, -9.274052717955783e-05, -0.10457984358072281, -1.7349166870117188, -0.09519997984170914, -1.8742389678955078, -0.03339572995901108, -0.019356058910489082, -0.010250070132315159, -0.028156446292996407, -0.001369729870930314, -0.028191911056637764, -7.450303382938728e-05, -0.008436398580670357, -1.7861158847808838, -0.0004067785630468279, -0.011625166051089764, -4.410734163684538e-06, -0.000196556793525815, 0.0, -1.4424220353248529e-05, -0.0006025406182743609, -3.576272320060525e-06, -6.556489552167477e-06, -3.242440288886428e-05, -0.0003513672563713044, -0.019001714885234833, -0.9856168031692505, -0.7820638418197632, -0.0012877037515863776, -0.02896289713680744, -1.9073468138230965e-06, -3.659658250398934e-05, -6.198863957251888e-06, -0.0002563863235991448, -6.6756979322235566e-06, -0.00035744477645494044, -2.7418097943154862e-06, -2.622600959512056e-06, -1.0490362910786644e-05, -7.652943895664066e-05, -2.753696753643453e-05, -0.0026529375463724136, -0.2655669152736664, -0.00019929806876461953, -0.07772571593523026, -0.4267210066318512, -0.0033432324416935444, -0.40558257699012756, -0.0315086655318737, -0.24485383927822113, -0.14868199825286865, -0.7589792013168335, -0.00048828122089616954, -0.7041043639183044, -0.5205509662628174, -0.04288845509290695, -0.02351888082921505, -0.002045564353466034, -0.0020965994335711002, -9.679325739853084e-05, -0.0045022787526249886, -0.04766835644841194, -1.6689286894688848e-06, -1.0728830375228426e-06, -8.344646857949556e-07, -0.000248401309363544, -8.034383063204587e-05, -1.7046782886609435e-05, -0.0001616347290109843, -5.960462772236497e-07, -0.031065231189131737, -0.0003270567976869643, -2.9729700088500977, -0.00039009589818306267, -0.9413283467292786, -0.0023262840695679188, -0.00011145447206217796, -3.7431014789035544e-05, 0.0, -0.22593533992767334, -0.0003471963864285499, -1.1920928244535389e-07, -3.576278118089249e-07, -0.0014725804794579744, -0.0007078525959514081, -0.05332634225487709, -0.4819330871105194, -2.5030934810638428, -0.722995400428772, -3.2765133380889893, -0.7081145644187927, -2.043424129486084, -0.4791179895401001, -0.08993929624557495, -0.16011664271354675, -1.817945122718811, -0.05112661421298981, -0.0006046851049177349, -0.07684517651796341, -0.004461691714823246, -8.987976616481319e-05, -0.011712475679814816, -7.939023635117337e-05, -0.006674140691757202, -0.08141179382801056, -0.7180415987968445, -0.031149357557296753, -0.0001954841281985864, -1.3253941535949707, -0.019634533673524857, -0.018879245966672897, -0.008482025936245918, -0.7026489973068237, -1.2127670049667358, -0.07888633012771606, -0.07588032633066177, -0.3623552918434143, -0.9879464507102966, -2.5748875486897305e-05, -0.9867779612541199, -0.5798332095146179, -0.053154539316892624, -0.0003295593778602779, -0.04485267028212547, -1.141023874282837, -1.8596476365928538e-05, -0.026351304724812508, -1.2397689715726301e-05, -1.1086402082582936e-05], "finish_reason": "length"}], "metrics": {"energy": 1032.2509929695132, "energy_per_token": 4.032230441287161, "time": 23.387442, "time_per_token": 0.0913571953125}}
{"outputs": [{"text": "# Validate the input paths\n    source_dir = Path(source_directory)\n    target_dir = Path(target_directory)\n    if not source_dir.is_dir():\n        raise FileNotFoundError(f\"The source directory does not exist: {source_directory}\")\n\n    # Create the target directory if it doesn't exist\n    target_dir.mkdir(parents=True, exist_ok=True)\n\n    # Set the file extensions to process\n    exts_to_process = {\".txt\", \".docx\", \".xlsx\", \".csv\"}\n\n    # Counter for successful conversions\n    count = 0\n\n    # Process files in the source directory\n    for file in source_dir.iterdir():\n        # Only process files with specified extensions\n        if file.is_file() and file.suffix.lower() in exts_to_process:\n            filename = file.stem\n            ext = file.suffix.lower()\n\n            # Read and process file content based on its extension\n            if ext == \".txt\":\n                text = file.read", "tokens": ["#", " Valid", "ate", " the", " input", " paths", "\n", "    ", "source", "_", "dir", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", "_", "dir", " =", " Path", "(", "target", "_", "directory", ")", "\n", "    ", "if", " not", " source", "_", "dir", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " source", " directory", " does", " not", " exist", ":", " {", "source", "_", "directory", "}\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "target", "_", "dir", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Set", " the", " file", " extensions", " to", " process", "\n", "    ", "ext", "s", "_", "to", "_", "process", " =", " ", "{\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"}", "\n", "\n", "    ", "#", " Counter", " for", " successful", " conversions", "\n", "    ", "count", " =", " ", "0", "\n", "\n", "    ", "#", " Process", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " source", "_", "dir", ".", "iter", "dir", "():", "\n", "        ", "#", " Only", " process", " files", " with", " specified", " extensions", "\n", "        ", "if", " file", ".", "is", "_", "file", "()", " and", " file", ".", "suff", "ix", ".", "lower", "()", " in", " ex", "ts", "_", "to", "_", "process", ":", "\n", "            ", "filename", " =", " file", ".", "stem", "\n", "            ", "ext", " =", " file", ".", "suff", "ix", ".", "lower", "()", "\n", "\n", "            ", "#", " Read", " and", " process", " file", " content", " based", " on", " its", " extension", "\n", "            ", "if", " ext", " ==", " \"", ".", "txt", "\":", "\n", "                ", "text", " =", " file", ".", "read"], "logprobs": [-1.1783795356750488, -2.9139370918273926, -0.03414635732769966, -1.2001934051513672, -1.9115992784500122, -2.5707297325134277, -0.29053691029548645, -0.005436516832560301, -0.5853131413459778, -0.09067894518375397, -1.6950404644012451, -0.2179136872291565, -0.04655591398477554, -0.0010282472940161824, -0.006836713291704655, -1.6689286894688848e-06, -5.245195097813848e-06, -0.0012944899499416351, -0.07854487001895905, -0.006685745436698198, -0.09655679017305374, -0.000763244170229882, -0.0024109601508826017, -0.0003407612966839224, -0.0003620922507252544, -0.0002112165529979393, -0.0006656814948655665, -3.576278118089249e-07, -8.34461570775602e-06, -0.0010216975351795554, -0.03745746240019798, -0.6605626344680786, -0.3717682659626007, -0.013837712816894054, -0.02699260041117668, -4.768360213347478e-06, -0.00289794709533453, -0.0009651293512433767, -0.24280057847499847, -4.172238186583854e-05, -0.006281513720750809, -0.027231255546212196, -0.005493544042110443, -0.00119066855404526, -0.023681066930294037, -0.11584711074829102, -0.0002585315378382802, -5.364403477869928e-06, -0.026834433898329735, -0.198942631483078, -0.046449288725852966, -1.1692523956298828, -0.22064226865768433, -0.015332569368183613, -2.0305371284484863, -0.00029988560709170997, -0.0017752378480508924, -0.06506090611219406, -0.0459180511534214, -0.010575561784207821, -2.0146166207268834e-05, -0.12377973645925522, -0.016290996223688126, -9.464769391342998e-05, -0.0002992897352669388, -0.690504789352417, -0.0008507922757416964, -0.09705996513366699, -0.5038168430328369, -0.03339768946170807, -0.008515357971191406, -0.005409840028733015, -0.013213921338319778, -0.003658389439806342, -0.5982011556625366, -0.0002610342635307461, -5.245195097813848e-06, -0.00777043029665947, -0.02384893037378788, -8.511180931236595e-05, -0.8003085851669312, -6.723177648382261e-05, -0.001053255284205079, -0.007228057365864515, -4.815939246327616e-05, -4.410734163684538e-06, -7.807903602952138e-05, -0.16774748265743256, -0.00030989613151177764, -0.0022094857413321733, -1.2755313036905136e-05, -3.433168603805825e-05, -4.768370445162873e-07, -5.125986263010418e-06, -6.3774932641536e-05, -2.8490614567999728e-05, -9.297892393078655e-05, -0.0019199287053197622, -0.010712026618421078, -0.00013624693383462727, -0.09007690101861954, -3.2931528091430664, -0.45131897926330566, -0.8881732225418091, -0.1646205335855484, -0.17225493490695953, -2.0821754932403564, -0.05288016051054001, -0.0001461399078834802, -3.2492127418518066, -0.37894681096076965, -0.7877318263053894, -0.04117276892066002, -5.352353764465079e-05, -0.1123248040676117, -0.0006653240998275578, -2.6378140449523926, -4.5536911784438416e-05, -0.03492600843310356, -0.0071918414905667305, -0.016325827687978745, -4.6132929128361866e-05, -0.0007397775771096349, -0.0003985564399044961, -0.02686704322695732, -0.007154795806854963, -0.0066144573502242565, -1.7404405298293568e-05, -0.0002602000313345343, -0.0008447177824564278, -0.052301980555057526, -3.075552376685664e-05, -0.000362807244528085, -0.004954323638230562, -1.7523612768854946e-05, -0.0004318020073696971, -7.748303323751315e-05, -0.0014388932613655925, -0.006434082053601742, -0.004619640298187733, -0.0911603793501854, -5.6622808187967166e-05, -0.03572184592485428, -3.5989222526550293, -0.5354164242744446, -1.1169276237487793, -0.1325732171535492, -0.014288496226072311, -0.00014077626110520214, -2.2158026695251465, -0.31578585505485535, -0.0005009111482650042, -8.272782724816352e-05, -0.00020561488054227084, -0.04004265367984772, -4.660974445869215e-05, -0.03976064175367355, -0.949617326259613, -1.9375874996185303, -0.15895165503025055, -0.031985267996788025, -0.020088670775294304, -0.0038554160855710506, -0.12402902543544769, -0.00014685506175737828, -0.014424925670027733, -0.20166455209255219, -0.19522465765476227, -0.24353866279125214, -1.4305104514278355e-06, -0.00011777184408856556, -2.0265558760002023e-06, -0.14617189764976501, -3.182837463100441e-05, -0.00010752100206445903, -0.0006524579366669059, -0.009404524229466915, -1.002570390701294, -2.309920310974121, -0.06190800294280052, -0.3769875168800354, -0.15080522000789642, -3.2895121574401855, -0.0037902200128883123, -0.028786510229110718, -0.00012039413559250534, -0.026102451607584953, -0.04213647544384003, -3.4689302992774174e-05, -0.6241758465766907, -9.536738616588991e-07, -0.01958216354250908, -0.002229587407782674, -9.727005090098828e-05, -0.011811558157205582, -1.1324817933200393e-05, -0.0003694805200211704, -3.576278118089249e-07, -1.212262749671936, -0.0003692421887535602, -1.9550132492440753e-05, -0.0020655503030866385, -0.0002901133266277611, -2.3841855067985307e-07, -8.34461570775602e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0022518294863402843, -0.0001854724541772157, -0.01160395611077547, -2.7829697132110596, -0.042680807411670685, -0.012812908738851547, -0.00017867876158561558, -0.6342222094535828, -0.24628786742687225, -0.0960104763507843, -1.105753779411316, -0.008306597359478474, -0.0026033578906208277, -8.940656698541716e-06, -2.062299427052494e-05, 0.0, -0.22681142389774323, -0.0003573255962692201, -6.758938252460212e-05, -0.0519147589802742, -0.274199515581131, -0.0004320403386373073, -0.16777107119560242, -1.1580630540847778, -2.9243364334106445, -0.5856707096099854, -1.8614203929901123, -0.6365985870361328, -0.16256274282932281, -2.3841574147809297e-05, -0.42681607604026794, -0.016509469598531723, -0.0027803832199424505, -0.0004029654082842171, -0.04049506038427353, -0.001400800421833992, -0.08664505183696747, -0.05828887224197388, -0.0002549561613705009, -0.007592629641294479, -0.0013984196120873094, -0.0023237864952534437, -9.48860906646587e-05, -1.5332121849060059, -0.1215144693851471, -0.043626170605421066, -0.00017510310863144696, -0.0011811431031674147], "finish_reason": "length"}], "metrics": {"energy": 1026.1909651985168, "energy_per_token": 4.008558457806706, "time": 23.346125, "time_per_token": 0.09119580078125}}
{"outputs": [{"text": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of extensions to convert\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Counter for successful conversions\n    count = 0\n\n    # Loop through all files in the source directory\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n        if os.path.isfile(file_path) and file.endswith(extensions):\n            # Extract the base name without extension\n            file_name = os.path.splitext(file)[0]\n\n            # Extract text content based on file type\n            if file.endswith('.txt'):\n                # Read text content from the file\n                with open(file_path, 'r', encoding", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " source", " directory", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " of", " extensions", " to", " convert", "\n", "    ", "extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "\n", "    ", "#", " Counter", " for", " successful", " conversions", "\n", "    ", "count", " =", " ", "0", "\n", "\n", "    ", "#", " Loop", " through", " all", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", ")", " and", " file", ".", "end", "sw", "ith", "(", "extensions", "):", "\n", "            ", "#", " Ext", "ract", " the", " base", " name", " without", " extension", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "0", "]", "\n", "\n", "            ", "#", " Ext", "ract", " text", " content", " based", " on", " file", " type", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "                ", "#", " Read", " text", " content", " from", " the", " file", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding"], "logprobs": [-1.9863839149475098, -0.03853166103363037, -0.14177246391773224, -1.7762025890988298e-05, -0.006528359837830067, -1.8358061424805783e-05, -0.08969226479530334, -0.00029762129997834563, -0.020016929134726524, -2.52720492426306e-05, -4.291525328881107e-06, -0.003905527526512742, -0.012625761330127716, -0.0028676362708210945, -0.03690487891435623, -0.004976268392056227, -0.0002330270071979612, -6.6756979322235566e-06, -0.06003642454743385, -1.4755566120147705, -1.1692874431610107, -0.3812990188598633, -0.007660417351871729, -0.040886040776968, -0.0003623305819928646, -0.0014543681172654033, -1.74375581741333, -0.0016129115829244256, -0.0007862337515689433, -0.21058379113674164, -0.0006873629172332585, -1.8493322134017944, -0.7216216325759888, -0.22401340305805206, -0.01848588138818741, -0.010785853490233421, -0.01376269944012165, -0.0030680273193866014, -0.44699349999427795, -0.00042465253500267863, -2.992108420585282e-05, -0.010684664361178875, -0.06360115110874176, -0.0002475670480635017, -0.6641638278961182, -0.009433693252503872, -0.0009908534120768309, -1.4305104514278355e-06, -1.5497195136049413e-06, -0.0005794276366941631, -0.00020287363440729678, -9.345571743324399e-05, -4.768370445162873e-07, -7.354942499659956e-05, -0.06543190777301788, -0.00043704494601115584, -0.0010397987207397819, -1.0251946150674485e-05, -4.6967357775429264e-05, -3.576278118089249e-07, -4.887569048150908e-06, -8.129743218887597e-05, -4.565611743601039e-05, -8.5588610090781e-05, -0.0008465044084005058, -0.017621858045458794, -0.00019834458362311125, -0.7154163718223572, -2.3485970497131348, -0.10564129799604416, -1.3056321144104004, -0.33965829014778137, -0.7881860733032227, -0.6847203969955444, -0.00012289722508285195, -0.17691856622695923, -0.2088833451271057, -0.8815680742263794, -0.18795868754386902, -0.0016765836626291275, -0.0004359725280664861, -0.00010966652916977182, -0.0014219897566363215, -0.0014619863359257579, -0.009957993403077126, -0.002785970689728856, -0.001962641952559352, -5.1377883210079744e-05, -0.00024685196694917977, -0.0006270825979299843, -0.02944060042500496, -8.583032467868179e-06, -0.0002646096108946949, -0.0017558409599587321, -5.435795901576057e-05, -0.000568228424526751, -0.0006719953380525112, -0.0010559941874817014, -0.003066482488065958, -0.0003641180810518563, -0.11719200760126114, -4.172238186583854e-05, -0.13506171107292175, -1.480149269104004, -0.32537850737571716, -0.9881675243377686, -0.055032599717378616, -0.007381546776741743, -0.00010477947944309562, -1.4086917638778687, -0.08644673228263855, -0.0002748588449321687, -6.222531374078244e-05, -6.329813186312094e-05, -0.017765795812010765, -7.056941103655845e-05, -0.17918863892555237, -1.301201581954956, -0.1403059959411621, -0.5471363067626953, -0.09684844315052032, -0.03019246645271778, -0.026561206206679344, -0.041085708886384964, -0.004473440814763308, -0.0694541335105896, -7.855583680793643e-05, -0.009838541969656944, -0.4726268947124481, -0.4232754707336426, -0.011059178970754147, -1.3112935448589269e-05, -0.005777446087449789, 0.0, -2.95634672511369e-05, -0.00029380773776210845, -9.298280929215252e-06, -5.722029527532868e-06, -6.353653589030728e-05, -0.0001668790791882202, -0.025641510263085365, -0.9170616865158081, -0.06242768466472626, -0.028107883408665657, -0.0004303721070755273, -0.0025132279843091965, -9.536738616588991e-07, -2.13382354559144e-05, -2.9802276912960224e-06, -0.00023767507809679955, -5.8412379075889476e-06, -0.0002706876548472792, -2.622600959512056e-06, -1.311301275563892e-06, -1.156323378381785e-05, -0.00018368464952800423, -2.8967437174287625e-05, -0.004142632707953453, -0.8639909625053406, -1.030837893486023, -0.10383784025907516, -4.6491513785440475e-06, -1.2516897186287679e-05, -3.576278118089249e-07, -0.02240884117782116, -0.02132393978536129, -0.0006893880781717598, -4.494089080253616e-05, -0.00014232576359063387, 0.0, -0.3115115761756897, -0.0002798642381094396, -2.2367916107177734, -0.009494507685303688, -0.26551181077957153, -2.0265558760002023e-06, 0.0, -0.007202138192951679, -0.08029194921255112, -0.005879014730453491, -0.006354247219860554, -0.023229606449604034, -0.5898900628089905, -0.7768126726150513, -0.01463276520371437, -0.301404744386673, -1.2363494634628296, -0.2910529673099518, -0.8390228152275085, -0.28520262241363525, -0.12960195541381836, -7.116541382856667e-05, -1.554456353187561, -0.0003471963864285499, -0.5442412495613098, -0.3778626322746277, -0.020119281485676765, -1.7881377516459906e-06, -4.0531076592742465e-06, -1.1920928244535389e-07, -0.011900853365659714, -4.768370445162873e-07, 0.0, -8.940656698541716e-06, -0.04984711483120918, -0.0005712069687433541, -1.728519782773219e-05, -2.8609820219571702e-05, -0.002310109091922641, -0.3023565411567688, -0.0003274143091402948, -0.11422884464263916, -3.07491135597229, -0.0024430686607956886, -2.2184395790100098, -0.49141690135002136, -0.8133327960968018, -4.708655978902243e-05, -0.5272258520126343, -1.311100959777832, -0.04112415015697479, -0.0003058442671317607, -0.06755875796079636, -0.0026274940464645624, -0.014352776110172272, -0.0006226746481843293, -7.152555099310121e-07, 0.0, -0.021833296865224838, -0.0016495682066306472, -0.005375455133616924, -6.09140915912576e-05, -0.05238433927297592, -0.0014366315444931388, -0.0002019201492657885, -2.487781524658203, -0.23573295772075653, -0.5193401575088501, -1.2641041278839111, -0.09554826468229294, -0.5894233584403992, -0.32704049348831177, -0.035036053508520126, -9.16677454370074e-05, -0.039681702852249146, -1.6569954823353328e-05, -5.471556869451888e-05, -0.004182401578873396, -0.0014678190927952528, -1.728519782773219e-05, -0.0034273474011570215, -0.030394047498703003, -0.0008703258354216814, -1.5803581476211548, -2.396077979938127e-05, -0.02612718939781189], "finish_reason": "length"}], "metrics": {"energy": 1115.7038324680327, "energy_per_token": 4.358218095578253, "time": 24.59547, "time_per_token": 0.0960760546875}}
{"outputs": [{"text": "# Initialize a counter for the number of files successfully converted to CSV\n    files_converted = 0\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        # Raise an error if the source directory does not exist\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Iterate over each file in the source directory\n    for filename in os.listdir(source_directory):\n        # Construct the full path to the file\n        file_path = os.path.join(source_directory, filename)\n\n        # Check if the current file is a file (not a directory)\n        if os.path.isfile(file_path):\n            # Get the file extension\n            file_extension = os.path.splitext(file_path)[1]\n\n            # Check if the file has a supported extension\n            if file_extension.lower() in {'.txt", "tokens": ["#", " Initialize", " a", " counter", " for", " the", " number", " of", " files", " successfully", " converted", " to", " CS", "V", "\n", "    ", "files", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "#", " Ra", "ise", " an", " error", " if", " the", " source", " directory", " does", " not", " exist", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " does", " not", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " source", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "#", " Construct", " the", " full", " path", " to", " the", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " filename", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " current", " file", " is", " a", " file", " (", "not", " a", " directory", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "#", " Get", " the", " file", " extension", "\n", "            ", "file", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "path", ")[", "1", "]", "\n", "\n", "            ", "#", " Check", " if", " the", " file", " has", " a", " supported", " extension", "\n", "            ", "if", " file", "_", "extension", ".", "lower", "()", " in", " {'", ".", "txt"], "logprobs": [-1.1783795356750488, -2.708467960357666, -0.8987535834312439, -0.5692948698997498, -0.3801897466182709, -0.1956806629896164, -0.16590972244739532, -0.0002026352594839409, -0.61970055103302, -0.6831945180892944, -0.014211048372089863, -0.43859100341796875, -0.001189835020340979, -8.642300235806033e-05, -0.3532901704311371, -0.0008225633064284921, -2.1122169494628906, -0.015071682631969452, -0.6590898633003235, -0.30392691493034363, -0.0019289711490273476, -0.00017236177518498152, -0.0011302995262667537, -0.18575963377952576, -0.0003793711948674172, -0.018502382561564445, -0.8162431716918945, -0.07265377044677734, -0.05148470401763916, -0.028405020013451576, -0.021143514662981033, -0.013236391358077526, -0.19497376680374146, -0.00018308870494365692, -0.053375616669654846, -0.103858582675457, -0.15124258399009705, -6.794906312279636e-06, -0.0014505588915199041, -4.410734163684538e-06, -0.16831007599830627, -0.00017176583060063422, -0.003344539552927017, -1.5139465176616795e-05, -7.629365427419543e-06, -0.0015323336701840162, -0.0007692000363022089, -0.0015779199311509728, -2.4556143283843994, -0.8723880052566528, -0.0010640918044373393, -1.0837453603744507, -0.3486698567867279, -0.023652544245123863, -0.18373194336891174, -0.21363547444343567, -0.0005893162451684475, -0.09299758076667786, -0.00010418349120300263, -0.0004262015863787383, -0.01077441405504942, -0.0001387499796692282, -0.00874392781406641, -0.005545470397919416, -0.00019691436318680644, -3.2186455882765586e-06, -0.04543072730302811, -0.263285756111145, -0.07969584316015244, -0.6775362491607666, -0.00255555915646255, -0.48997941613197327, -8.797258487902582e-05, -0.0025196492206305265, -0.0003295593778602779, -4.362964682513848e-05, -0.0014360364293679595, -0.22313936054706573, -0.00034791138023138046, -0.0009051040397025645, -0.3011223077774048, -0.004748971201479435, -0.00044252615771256387, -0.00022802136663813144, -0.015076731331646442, -0.00045110538485459983, -0.004836764186620712, -0.5162742733955383, -0.14591704308986664, -0.004545119125396013, -0.0010381315369158983, -0.010493814945220947, -0.0005839549703523517, -0.3463190495967865, -2.8132995794294402e-05, -0.019696833565831184, -0.050120629370212555, -8.689979586051777e-05, -0.9704731106758118, -0.010913328267633915, -0.0008142255246639252, -9.536738616588991e-07, -2.50339189733495e-06, -0.0002928543253801763, -0.00022182388056535274, -8.83301836438477e-05, -1.311301275563892e-06, -8.177422569133341e-05, -0.07864702492952347, -0.0004979324294254184, -0.0005018643569201231, -1.0609570381348021e-05, -5.471556869451888e-05, -8.344646857949556e-07, -7.152555099310121e-07, -5.9602869441732764e-05, -1.156323378381785e-05, -0.0001006075763143599, -0.0012175773736089468, -0.003496843855828047, -0.0004661188868340105, -0.0069702561013400555, -0.8983042240142822, -0.0004698126285802573, -0.38408878445625305, -2.170860767364502, -0.0503707192838192, -0.03024127520620823, -0.0009679876384325325, -0.010225408710539341, -0.0004285847535356879, -0.042370058596134186, -0.00016044282529037446, -0.00805120263248682, -1.6154167652130127, -0.0007001094636507332, -0.004604451823979616, -2.109982233378105e-05, -0.0005499995895661414, -1.1920928244535389e-07, -3.71926071238704e-05, -0.00029404606902971864, -1.2993727978027891e-05, -1.823885577323381e-05, -6.747018051100895e-05, -0.00034028460504487157, -0.04696568846702576, -0.10156533867120743, -2.197361469268799, -0.020881105214357376, -0.2933090627193451, -0.22495779395103455, -0.15099087357521057, -0.036882590502500534, -0.3421330749988556, -0.46301478147506714, -8.594620157964528e-05, -0.18734990060329437, -0.6634631752967834, -0.00091856240760535, -0.0005204515182413161, -0.006333873141556978, -2.3841855067985307e-07, -4.541770613286644e-05, -2.0265558760002023e-06, -0.0004148814477957785, -8.34461570775602e-06, -0.0003307510633021593, -1.7881377516459906e-06, -5.960462772236497e-07, -1.7881233361549675e-05, -7.652943895664066e-05, -2.3483953555114567e-05, -0.00013445904187392443, -0.04162420704960823, -0.000459565402707085, -0.009962360374629498, -0.4778154492378235, -0.0019511011196300387, -0.06994945555925369, -2.0286645889282227, -0.5840257406234741, -0.03733757510781288, -0.15362928807735443, -1.0001438856124878, -0.5540725588798523, -0.07360324263572693, -0.002323905238881707, -0.02401525154709816, -0.020712625235319138, -0.654704213142395, -3.58813522325363e-05, -0.0032384353689849377, -0.09583577513694763, -1.5497195136049413e-06, -4.768360213347478e-06, -4.768370445162873e-07, -1.5258672647178173e-05, -0.0015726829878985882, -1.3351351299206726e-05, -0.00011526874004630372, -3.576272320060525e-06, 0.0, -0.008130429312586784, -0.0001746263587847352, -0.009228313341736794, -0.009236226789653301, -1.5229315757751465, -0.006208775099366903, -0.2683495581150055, -0.05993976071476936, -0.471099317073822, -6.294052582234144e-05, -1.018158197402954, -0.001165783149190247, -0.2445758879184723, -0.00015793983766343445, -0.042889825999736786, -9.536738616588991e-07, -5.602820692729438e-06, -8.344646857949556e-07, -2.0861407392658293e-05, -1.1920928244535389e-07, 0.0, -7.629365427419543e-06, -1.8218369483947754, -1.4185804502631072e-05, -0.0006400682032108307, -0.06463803350925446, -0.00012540031457319856, -0.01890556514263153, -0.3916546702384949, -0.04626423493027687, -0.0010303908493369818, -0.03464945778250694, -0.351264625787735, -0.019827736541628838, -0.006749924272298813, -0.01670151948928833, -0.45159003138542175, -0.44344860315322876, -0.2965255677700043, -0.0263565294444561, -0.1731860190629959, -0.00011955977242905647, -0.02721164934337139, -0.012181411497294903, -1.311301275563892e-06, -1.9311717551317997e-05, -1.3942700624465942, -0.005318065639585257, -6.890059739816934e-05, -0.011340916156768799, -2.3709588050842285, -0.00019405389321036637, -0.002666966989636421], "finish_reason": "length"}], "metrics": {"energy": 1139.0482876529697, "energy_per_token": 4.449407373644413, "time": 25.217247, "time_per_token": 0.09850487109375}}
{"outputs": [{"text": "# Validate the source directory\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Iterate through the files in the source directory\n    count = 0\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        # Check if the file has a valid extension\n        if not file.endswith((\".txt\", \".docx\", \".xlsx\", \".csv\")):\n            continue\n\n        # Load the file based on its extension\n        if file.endswith(\".txt\"):\n            with open(file_path, \"r\") as f:\n                text = f.read()\n        elif file.endswith(\".docx\"):\n            text = extract_text_from_docx(file_path)\n        elif", "tokens": ["#", " Valid", "ate", " the", " source", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " source", " directory", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " through", " the", " files", " in", " the", " source", " directory", "\n", "    ", "count", " =", " ", "0", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " has", " a", " valid", " extension", "\n", "        ", "if", " not", " file", ".", "end", "sw", "ith", "((", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "))", ":", "\n", "            ", "continue", "\n", "\n", "        ", "#", " Load", " the", " file", " based", " on", " its", " extension", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "text", " =", " f", ".", "read", "()", "\n", "        ", "elif", " file", ".", "end", "sw", "ith", "(", "\"", ".", "doc", "x", "\"", "):", "\n", "            ", "text", " =", " extract", "_", "text", "_", "from", "_", "doc", "x", "(", "file", "_", "path", ")", "\n", "        ", "elif"], "logprobs": [-1.1783795356750488, -2.9139370918273926, -0.03414635732769966, -1.2001934051513672, -0.4416114389896393, -0.5061312913894653, -0.5320629477500916, -0.0016936019528657198, -0.7350926399230957, -0.009719312191009521, -0.18768846988677979, -1.537788011773955e-05, -0.006567560601979494, -1.5139465176616795e-05, -0.4958661198616028, -0.00018618757894728333, -0.004242230672389269, -1.847726889536716e-05, -7.748573807475623e-06, -0.010457245633006096, -0.0014843647368252277, -0.0011734035797417164, -0.023044981062412262, -0.006897567771375179, -0.000176652567461133, -5.125986263010418e-06, -0.04708988592028618, -1.712315320968628, -1.2156097888946533, -0.20992688834667206, -0.003919183276593685, -0.042519960552453995, -0.0002475670480635017, -0.0010239601833745837, -2.1263680458068848, -0.00101383775472641, -0.0002525725867599249, -0.0365910641849041, -0.0006866481271572411, -0.058162011206150055, -0.5131072402000427, -0.06798574328422546, -0.00759913632646203, -0.0016424274072051048, -0.0317978635430336, -0.0066139837726950645, -0.48828646540641785, -0.00034290633630007505, -8.583032467868179e-06, -0.009465104900300503, -0.018923111259937286, -9.285972191719338e-05, -1.1516368389129639, -0.019282860681414604, -0.0008175606490112841, -1.1920922133867862e-06, -1.4305104514278355e-06, -0.00041631137719377875, -0.0005364171229302883, -0.0001070442158379592, -8.344646857949556e-07, -0.00011622230522334576, -0.11571343243122101, -0.0007363230688497424, -0.0012216256000101566, -1.9907753085135482e-05, -4.4225667807040736e-05, -4.768370445162873e-07, -8.583032467868179e-06, -8.618460560683161e-05, -8.34430247778073e-05, -0.00010871296399272978, -0.0006211258587427437, -0.008806556463241577, -0.00017212340026162565, -0.13791371881961823, -3.0086987018585205, -0.003753047902137041, -1.064832329750061, -0.6015145778656006, -0.2902500629425049, -0.03722008690237999, -0.005732998717576265, -0.020037025213241577, -0.0029924397822469473, -0.09306676685810089, -0.0005236684810370207, -1.8963634967803955, -0.035852622240781784, -0.0005555993411689997, -0.0001817776501411572, -0.14996962249279022, -0.017782660201191902, -0.03553076833486557, -0.3192761540412903, -0.6368696093559265, -0.01259032916277647, -1.823885577323381e-05, -0.011529246345162392, 0.0, -2.5748875486897305e-05, -0.0003190723655279726, -2.4676019165781327e-05, -1.3828182090946939e-05, -0.00011717586312443018, -0.0005063920398242772, -0.009758624248206615, -0.6354002952575684, -0.03791230171918869, -0.032319460064172745, -0.0005989664932712913, -0.004240687470883131, -1.1920928244535389e-07, -1.3470558769768104e-05, -3.933898824470816e-06, -0.0003979606262873858, -7.629365427419543e-06, -0.0002924968139268458, -4.172316494077677e-06, -3.576278118089249e-07, -1.585470999998506e-05, -0.00020692592079285532, -3.707340147229843e-05, -0.002186171943321824, -0.839505672454834, -0.0004080893413629383, -0.09408831596374512, -0.5819427371025085, -0.05477374419569969, -0.09316668659448624, -0.03285762295126915, -1.3227975368499756, -0.392782062292099, -0.5876608490943909, -0.017699509859085083, -0.14022870361804962, -0.0001629458274692297, -0.20549839735031128, -2.440598726272583, -0.5345961451530457, -0.03402342274785042, -0.020876435562968254, -5.960462772236497e-07, 0.0, -1.0197157859802246, -0.0007197650265879929, -0.0022300630807876587, -0.005401658825576305, -3.158996332786046e-05, -4.756337511935271e-05, -0.000644237850792706, -0.00027092601521871984, -0.007774333469569683, -0.005393358878791332, -8.106198947643861e-06, -0.0006393534131348133, -0.00015984688070602715, -0.00017307691450696439, -0.015836656093597412, -7.986990567587782e-06, -0.00039867559098638594, -4.529942543740617e-06, -0.0013330630026757717, -0.000192504478036426, -0.00012027494085486978, -0.002051988383755088, -9.775113539944869e-06, -0.004968795459717512, -0.024058660492300987, -0.0006924853660166264, -0.00020776021119672805, -0.09420831501483917, -0.0018607935635372996, -0.004397009499371052, -0.0003651905863080174, -0.08762698620557785, -2.5243849754333496, -0.06310681253671646, -0.12754115462303162, -1.1900427341461182, -6.472854875028133e-05, -0.10186070948839188, -0.0085861561819911, -0.0795387476682663, -0.00036793138133361936, -0.1085457056760788, -0.0013190149329602718, -0.0042283423244953156, -0.0005996812833473086, 0.0, -2.50339189733495e-06, -0.02425287291407585, -0.0003331344632897526, -0.0016277885297313333, -0.011228937655687332, -4.768360213347478e-06, -0.008122625760734081, -0.0014085381990298629, -0.00029118589009158313, -0.36045411229133606, -4.3987260141875595e-05, -4.5060096454108134e-05, -0.0006948678637854755, -0.0010525407269597054, -2.3841855067985307e-07, -0.005748881492763758, -0.14297209680080414, -0.0025918246246874332, -0.00014161060971673578, -0.25930431485176086, -1.3351351299206726e-05, -0.2728072702884674, -0.0037608861457556486, -0.0009394046501256526, -8.487341256113723e-05, -0.528687059879303, -0.04541477933526039, -0.005412685684859753, -6.0794889577664435e-05, -1.6689286894688848e-06, -0.005623117554932833, -0.02262936346232891, -0.07273668795824051, -0.0016828911611810327, -5.090107151772827e-05, -4.0649541915627196e-05, -3.683499380713329e-05, -2.3841855067985307e-07, -1.5497195136049413e-06, -0.004286150448024273, -4.160317621426657e-05, -0.0004850641416851431, -0.012435046955943108, -0.0002308817347511649, -1.4305104514278355e-06, -0.00010275312524754554, -0.0003296785580459982, -0.00023803261865396053, -2.076627254486084, -0.010922643356025219, -2.056295871734619, -0.00043084874050691724, -0.2459970861673355, -0.00546295614913106, -0.010934434831142426, -4.2437604861333966e-05, -0.03278563916683197, -0.019516466185450554, -0.048572227358818054, -0.0015731590101495385, -0.003068978199735284, -5.364403477869928e-06, -0.0009995469590649009, -0.004820036701858044, -0.0030115749686956406, -0.0005704921204596758], "finish_reason": "length"}], "metrics": {"energy": 1018.3601937427519, "energy_per_token": 3.9779695068076246, "time": 23.629484, "time_per_token": 0.092302671875}}
{"outputs": [{"text": "files_converted_count = 0\n    extensions_to_read = {'.txt', '.docx', '.xlsx', '.csv'}\n    extensions_to_save = {'.txt', '.csv'}\n    # Create the target directory if it does not exist\n    os.makedirs(target_directory, exist_ok=True)\n    # Loop through all files in the source directory\n    for filename in os.listdir(source_directory):\n        file_extension = os.path.splitext(filename)[1]\n        file_path = os.path.join(source_directory, filename)\n        # Check if the file is a text file or a spreadsheet\n        if file_extension in extensions_to_read and os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                if file_extension == '.txt':\n                    text = f.read().decode(errors='replace')  # handle encoding errors\n                elif file_extension == '.docx':\n                    doc = docx.Document(f)\n", "tokens": ["files", "_", "converted", "_", "count", " =", " ", "0", "\n", "    ", "extensions", "_", "to", "_", "read", " =", " {'", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "'}", "\n", "    ", "extensions", "_", "to", "_", "save", " =", " {'", ".", "txt", "'", ",", " '", ".", "csv", "'}", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " does", " not", " exist", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "#", " Loop", " through", " all", " files", " in", " the", " source", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "file", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "filename", ")[", "1", "]", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " filename", ")", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " text", " file", " or", " a", " spreadsheet", "\n", "        ", "if", " file", "_", "extension", " in", " extensions", "_", "to", "_", "read", " and", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "if", " file", "_", "extension", " ==", " '", ".", "txt", "':", "\n", "                ", "    ", "text", " =", " f", ".", "read", "()", ".", "decode", "(", "errors", "='", "replace", "')", "  ", "#", " handle", " encoding", " errors", "\n", "                ", "elif", " file", "_", "extension", " ==", " '", ".", "doc", "x", "':", "\n", "                ", "    ", "doc", " =", " doc", "x", ".", "Document", "(", "f", ")", "\n"], "logprobs": [-3.4806618690490723, -0.41151776909828186, -2.443824529647827, -1.4364184141159058, -1.1499335765838623, -0.023537861183285713, -0.0056069958955049515, -0.00028772983932867646, -0.056655753403902054, -0.4897213578224182, -1.2554749250411987, -1.2066675424575806, -0.3502098619937897, -0.00018404220463708043, -2.700683832168579, -0.014298015274107456, -2.336216926574707, -0.27791827917099, -0.008501647040247917, -0.20383146405220032, -0.0002623452164698392, -0.0035560012329369783, -0.0011411352315917611, -0.07159454375505447, -0.009008124470710754, -0.02001984976232052, -0.00012540031457319856, -0.0010548033751547337, -0.0007709868368692696, -0.05072443187236786, -6.663577369181439e-05, -0.0007649118197150528, -0.01638774946331978, -0.00014840454969089478, -0.00105015910230577, -0.00019667598826345056, -0.0009810879128053784, -0.017569031566381454, -0.027338439598679543, -0.528710663318634, -1.9629517793655396, -0.010480367578566074, -0.13329358398914337, -0.00011932138295378536, -1.557377815246582, -0.037770889699459076, -0.3210690915584564, -0.08240810036659241, -0.6324842572212219, -0.29492059350013733, -0.001964426366612315, -0.0030152592808008194, -0.020811287686228752, -0.30202820897102356, -0.0572018101811409, -0.06581203639507294, -0.9933451414108276, -2.9670164585113525, -2.2801852226257324, -0.7053369283676147, -0.05166267976164818, -0.077213816344738, -0.01997147500514984, -0.008710366673767567, -0.9650828838348389, -0.0004755319678224623, -0.010392006486654282, -0.21993501484394073, -0.001259725191630423, -2.825119972229004, -0.0007940953364595771, -0.0012903229799121618, -1.6689286894688848e-06, -4.970903682988137e-05, -4.207999518257566e-05, -0.010751770809292793, -0.0001497156627010554, -1.0967194612021558e-05, -0.003118534805253148, -0.00029237763374112546, -8.344646857949556e-07, -5.960446742392378e-06, -0.0020436609629541636, -0.00016032364510465413, -7.080780778778717e-05, -0.002247072057798505, -0.4451127052307129, -0.49911558628082275, -1.2079575061798096, -0.1914895474910736, -0.6219984889030457, -0.18328186869621277, -0.06999925523996353, -0.03547830507159233, -0.05260796472430229, -0.0066991266794502735, -0.19060680270195007, -0.0005564333405345678, -0.030551191419363022, -2.0082485675811768, -0.002378018107265234, -0.0410437174141407, -2.4676019165781327e-05, -0.002995292190462351, -1.1920928244535389e-07, -7.879423355916515e-05, -0.00277883792296052, -3.4570634852570947e-06, -4.768370445162873e-07, -0.00026663561584427953, -0.0008827127167023718, -0.005748170427978039, -1.2054367065429688, -0.39632517099380493, -2.182494878768921, -0.0021757043432444334, -0.7166528701782227, -7.271740287251305e-06, -0.00019035911827813834, -4.768370445162873e-07, -6.878139538457617e-05, -2.3841855067985307e-07, 0.0, -3.0874729418428615e-05, -0.0013267532922327518, -0.03462792560458183, -0.00031716562807559967, -0.0002658013836480677, -0.4806624948978424, -0.01710003800690174, -2.408270835876465, -0.128007173538208, -0.10787095874547958, -0.03031483106315136, -0.02928999625146389, -3.2186455882765586e-06, -4.470248313737102e-05, -3.576272320060525e-06, -0.0017335877055302262, -2.52720492426306e-05, -0.0012000747956335545, -3.933898824470816e-06, -2.1457441107486375e-05, -2.407998726994265e-05, -0.0002795067266561091, -4.7444173105759546e-05, -0.002508828416466713, -0.07627793401479721, -0.8169512748718262, -0.5751955509185791, -0.03297770023345947, -0.1555974781513214, -0.025634074583649635, -1.2130205631256104, -0.6324649453163147, -1.8026093244552612, -0.30080240964889526, -1.0442041158676147, -1.5681589841842651, -0.6218739748001099, -0.7604926824569702, -0.0007513322634622455, -0.01815534569323063, -0.2051152139902115, -8.702239938429557e-06, -0.000959412835072726, -0.09748978912830353, -0.0016671819612383842, -3.135155202471651e-05, 0.0, -3.576278118089249e-07, -0.0055410838685929775, -0.9697307348251343, -0.06971567124128342, -8.702239938429557e-06, -0.0010605193674564362, -8.344646857949556e-07, -0.0018054627580568194, -8.177422569133341e-05, -3.862306402879767e-05, -0.00048268112004734576, -9.536738616588991e-07, -3.099436753473128e-06, -0.009322918951511383, -0.00038675934774801135, -0.003735589561983943, -3.4626424312591553, -0.0394006222486496, -0.0009453595266677439, -0.022324442863464355, -0.00023326536756940186, -1.728519782773219e-05, -0.026956861838698387, -0.11627902090549469, -2.064443588256836, -0.010645270347595215, -0.00021765247220173478, -1.2432281970977783, -0.03883856162428856, -0.17463631927967072, -0.0024126251228153706, -0.9835457801818848, -0.027337975800037384, -1.3708974620385561e-05, -0.0006328010931611061, -0.09351785480976105, -0.0189205389469862, -0.0005903884884901345, -0.11017563939094543, -0.00622014794498682, -0.022959820926189423, -0.00012885693286079913, -0.0015842280117794871, -0.9257600903511047, -0.1594799906015396, -0.01465308852493763, -0.00018070495571009815, -1.6569954823353328e-05, -0.004697715397924185, -0.1801643669605255, -0.00747159356251359, -1.8989299535751343, -0.8725661039352417, -0.016002554446458817, -1.5878740549087524, -0.0009433348895981908, -2.8140199184417725, -4.1483970562694594e-05, -3.6920881271362305, -1.5565056800842285, -0.13342399895191193, -0.10890637338161469, -0.00276932748965919, -0.5537014007568359, -0.0007053509471006691, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.03194427862763405, -0.0009698931244201958, -5.745722592109814e-05, -0.06383894383907318, -0.0006459057331085205, -0.0009681067313067615, -0.009275675751268864, -8.821098163025454e-05, -0.0003137096355203539, -0.5443447828292847, -0.010976174846291542, -0.0001842805795604363, -1.5020257706055418e-05, -9.179073458653875e-06, -0.0007321537705138326, -0.0001736728590913117, -0.07486223429441452, -0.007707381621003151, -0.03850642591714859], "finish_reason": "length"}], "metrics": {"energy": 1070.8947688007363, "energy_per_token": 4.183182690627876, "time": 23.587313, "time_per_token": 0.09213794140625}}
{"outputs": [{"text": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory does not exist: {source_directory}\")\n\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n    target_path.mkdir(exist_ok=True)\n\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    num_converted_files = 0\n\n    for extension in extensions:\n        for file in source_path.glob(f'*{extension}'):\n            file_name = file.stem + '.csv'\n            target_file = target_path / file_name\n            if extension == '.txt':\n                with open(file, 'r') as f:\n                    text = f.read()\n                df = pd.DataFrame({'Text': [text]})\n            elif extension == '.docx':\n                doc = docx.Document(file)\n                text = '\\n'.join([p.text for p in doc.paragraphs])\n                df = pd", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " does", " not", " exist", ":", " {", "source", "_", "directory", "}\"", ")", "\n", "\n", "    ", "source", "_", "path", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", "_", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "    ", "target", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "    ", "num", "_", "converted", "_", "files", " =", " ", "0", "\n", "\n", "    ", "for", " extension", " in", " extensions", ":", "\n", "        ", "for", " file", " in", " source", "_", "path", ".", "glob", "(", "f", "'", "*{", "extension", "}", "')", ":", "\n", "            ", "file", "_", "name", " =", " file", ".", "stem", " +", " '", ".", "csv", "'", "\n", "            ", "target", "_", "file", " =", " target", "_", "path", " /", " file", "_", "name", "\n", "            ", "if", " extension", " ==", " '", ".", "txt", "':", "\n", "                ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "    ", "text", " =", " f", ".", "read", "()", "\n", "                ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Text", "':", " [", "text", "]", "})", "\n", "            ", "elif", " extension", " ==", " '", ".", "doc", "x", "':", "\n", "                ", "doc", " =", " doc", "x", ".", "Document", "(", "file", ")", "\n", "                ", "text", " =", " '\\", "n", "'", ".", "join", "([", "p", ".", "text", " for", " p", " in", " doc", ".", "paragraph", "s", "])", "\n", "                ", "df", " =", " pd"], "logprobs": [-1.9863839149475098, -0.03853166103363037, -0.14177246391773224, -1.7762025890988298e-05, -0.006528359837830067, -1.8358061424805783e-05, -0.08969226479530334, -0.00029762129997834563, -0.020016929134726524, -2.52720492426306e-05, -4.291525328881107e-06, -0.003905527526512742, -0.012625761330127716, -0.0028676362708210945, -0.03690487891435623, -0.004976268392056227, -0.0002330270071979612, -6.6756979322235566e-06, -0.06003642454743385, -0.3172772526741028, -0.08713182061910629, -0.6108414530754089, -0.003562771948054433, -2.0516529083251953, -0.0005787128466181457, -0.0028455264400690794, -0.03872400149703026, -0.041191644966602325, -0.0013240152038633823, -0.0001510267611593008, -3.2186455882765586e-06, -0.006547901313751936, -0.00019202772818971425, -0.00041738382424227893, -0.11062366515398026, -0.00046921687317080796, -3.100525379180908, -0.04020172357559204, -1.4990816116333008, -0.01256466656923294, -0.003487340407446027, -0.0007643162389285862, -0.0025037152227014303, -2.861018856492592e-06, -3.933898824470816e-06, -0.001505909371189773, -0.016994094476103783, -0.062057919800281525, -0.1656845062971115, -0.0018070096848532557, -0.0033283811062574387, -0.0008860476082190871, -0.0007578838267363608, -0.00047183825518004596, -0.0017472729086875916, -1.6689286894688848e-06, -1.5258672647178173e-05, -0.0017754758009687066, -0.0802435427904129, -0.39961880445480347, -0.5058718919754028, -9.035655966727063e-05, -0.0004239375703036785, -0.0007628867751918733, -0.00019464982324279845, -1.5497195136049413e-06, -0.00016246906307060272, -0.9799176454544067, -1.9073468138230965e-06, -9.536738616588991e-07, -0.0011587579501792789, -0.00027104519540444016, -0.09004127234220505, -0.06911755353212357, -0.0860508531332016, -0.00013147920253686607, -1.5292282104492188, -0.1870390921831131, -1.4397766590118408, -0.06128367409110069, -0.002752565313130617, -0.0005938435206189752, -8.141662692651153e-05, -0.0014953156933188438, -0.0019246878800913692, -0.01860535889863968, -0.005786216352134943, -0.002247666707262397, -4.482168878894299e-05, -0.00034254882484674454, -0.0004818470624741167, -0.017015190795063972, -1.0490362910786644e-05, -0.00036554806865751743, -0.00121174321975559, -4.100715523236431e-05, -0.0005200940649956465, -0.0002675890573300421, -0.0010009760735556483, -0.0022891764529049397, -0.024477407336235046, -0.14259476959705353, -2.2360353469848633, -0.00045193947153165936, -0.4563100337982178, -2.0292530059814453, -0.0033382424153387547, -0.00036590558011084795, -0.008441363461315632, -4.9470632802695036e-05, -0.003733214223757386, -0.0752134695649147, -0.0001045410826918669, -0.057496167719364166, -2.39663028717041, -0.001292108790948987, -0.0007379907765425742, -0.00010108436981681734, -0.000301673193462193, -0.002024626126512885, -0.334310919046402, -0.17499424517154694, -0.19379360973834991, -0.02317626029253006, -8.344646857949556e-07, -0.0003047717036679387, -4.887569048150908e-06, -0.3942635953426361, -0.14724434912204742, -0.005555428564548492, -0.07734435051679611, -0.13327178359031677, -0.00013541258522309363, -0.004145006649196148, -0.00010680581908673048, -3.611976353568025e-05, -0.002809864701703191, -0.006498987786471844, -1.6351205110549927, -0.015775170177221298, -0.7198063731193542, -0.10741762816905975, -0.08282166719436646, -0.000783613184466958, -0.2555830478668213, -1.853058099746704, -0.06577899307012558, -0.0007756323902867734, -0.004476407542824745, -3.814624506048858e-05, -0.01737656444311142, -0.04936465620994568, -0.3725429177284241, -0.024487877264618874, -0.022642532363533974, -0.48435908555984497, -0.013743769377470016, -4.768370445162873e-07, -1.966933996300213e-05, -0.045408058911561966, -0.004663543310016394, -0.0005790702416561544, -2.145764938177308e-06, -0.002246477175503969, -1.6929885149002075, -0.9519071578979492, -0.7876192927360535, -0.04295400530099869, -0.017829854041337967, -0.00046695294440723956, -0.0725635290145874, -0.007705252151936293, -0.0029623694717884064, -0.00040951924165710807, -0.25367632508277893, -0.21169184148311615, -9.30981186684221e-05, -0.02457069791853428, -0.028044944629073143, -0.060625966638326645, -0.003937588073313236, -0.27113011479377747, -3.635817120084539e-05, -0.6357117891311646, -0.0044486369006335735, -0.001727637485601008, -4.076874756719917e-05, -0.0007429938414134085, -0.522924542427063, -0.057026732712984085, -0.009103222750127316, -2.455681169521995e-05, -2.622600959512056e-06, -0.014048142358660698, -0.03970015048980713, -0.05506114661693573, -1.0263991355895996, -0.002760055009275675, -0.0004503904783632606, -1.1920922133867862e-06, -0.012743938714265823, -2.0523335933685303, -0.005563252605497837, -0.011774212121963501, -0.0006518622976727784, -0.04124278202652931, -0.0005174727994017303, -0.013569967821240425, -0.000797311426140368, -0.021879367530345917, -1.0879186391830444, -0.009055261500179768, -0.0004353767435532063, -0.003557545365765691, -0.000655793643090874, -0.00015948931104503572, -0.011570962145924568, -0.00020132421923335642, -0.00019500737835187465, -0.0007285801111720502, -0.00018499570433050394, -0.2977578639984131, -0.007921233773231506, -0.00012110930401831865, -1.2159273865108844e-05, -1.1920858014491387e-05, -0.0002694958820939064, -7.283422019099817e-05, -0.018282821401953697, -0.0016371908131986856, -0.0011288706446066499, -0.0002083561266772449, -0.0833706259727478, -0.018894687294960022, -0.22146634757518768, -0.0001879753835964948, -0.009324335493147373, -6.19869097135961e-05, -5.149708886165172e-05, -0.09146764874458313, -0.5635919570922852, -1.847726889536716e-05, -4.5536911784438416e-05, -0.001141968765296042, -0.004771869163960218, -4.291525328881107e-06, -0.00017033556650858372, -0.0001512651506345719, -0.00010013079008786008, -5.960446742392378e-06, -0.0010158622171729803, -0.007052646018564701, -0.000163541772053577, -0.002152032917365432, -2.8132995794294402e-05, -2.5152843591058627e-05], "finish_reason": "length"}], "metrics": {"energy": 1031.4407746448517, "energy_per_token": 4.029065525956452, "time": 23.55685, "time_per_token": 0.0920189453125}}
{"outputs": [{"text": "valid_extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' not found.\")\n\n    os.makedirs(target_directory, exist_ok=True)\n    count_converted = 0\n\n    for file in os.listdir(source_directory):\n        input_path = os.path.join(source_directory, file)\n        if os.path.splitext(file)[1] not in valid_extensions:\n            continue\n\n        output_path = os.path.join(target_directory, f\"{os.path.splitext(file)[0]}.csv\")\n        try:\n            if file.endswith(\".txt\"):\n                with open(input_path, \"r\") as infile:\n                    text = infile.read()\n            elif file.endswith(\".docx\"):\n                document = docx.Document(input_", "tokens": ["valid", "_", "extensions", " =", " (", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "count", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "input", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "        ", "if", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", " not", " in", " valid", "_", "extensions", ":", "\n", "            ", "continue", "\n", "\n", "        ", "output", "_", "path", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " f", "\"", "{", "os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "0", "]}", ".", "csv", "\"", ")", "\n", "        ", "try", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "                ", "with", " open", "(", "input", "_", "path", ",", " \"", "r", "\"", ")", " as", " in", "file", ":", "\n", "                ", "    ", "text", " =", " in", "file", ".", "read", "()", "\n", "            ", "elif", " file", ".", "end", "sw", "ith", "(", "\"", ".", "doc", "x", "\"", "):", "\n", "                ", "document", " =", " doc", "x", ".", "Document", "(", "input", "_"], "logprobs": [-3.7006096839904785, -0.0065455324947834015, -0.1563376486301422, -0.003964066971093416, -2.585979461669922, -0.05460444837808609, -0.06611212342977524, -0.007989354431629181, -0.00020668754586949944, -8.725739462533966e-05, -0.0028716777451336384, -0.0021310970187187195, -0.0361836813390255, -0.005823787301778793, -1.2874520507466514e-05, -0.0002469711471349001, -0.0004988856380805373, -0.0016673009376972914, -0.0446050763130188, -1.6689160474925302e-05, -0.0003232433518860489, -9.775113539944869e-06, -0.0002821285743266344, -0.0008149401983246207, -0.0002526917669456452, -0.002859553089365363, -1.3470558769768104e-05, -0.007736481260508299, -0.049542102962732315, -1.2910369634628296, -0.0003588747640606016, -0.93584144115448, -0.02711593732237816, -0.13164544105529785, -6.6756979322235566e-06, -0.004391312599182129, -1.3708974620385561e-05, -0.1708354353904724, -8.260862523457035e-05, -0.02399325557053089, -1.4066597032069694e-05, -5.125986263010418e-06, -0.0048444755375385284, -0.006994050461798906, -0.0013978243805468082, -0.04453643783926964, -0.006032118573784828, -0.00014125302550382912, -4.291525328881107e-06, -0.006150129716843367, -0.37386554479599, -0.012304116040468216, -0.600931704044342, -0.003278834745287895, -0.6407952308654785, -7.676783570786938e-05, -0.0009954979177564383, -1.1324817933200393e-05, -6.9141146923357155e-06, -0.0023977598175406456, -1.5372090339660645, -0.00045372682507149875, -0.18517684936523438, -0.004399620462208986, -0.00019393471302464604, -0.0002153879904653877, -0.02794826775789261, -0.0001823735801735893, -1.0650649070739746, -0.00010108436981681734, -0.00033408781746402383, 0.0, -1.5020257706055418e-05, -5.602820692729438e-06, -0.0021851013880223036, -3.3378546504536644e-06, -2.861018856492592e-06, -0.0005921755800954998, -0.00014423283573705703, -3.576278118089249e-07, -1.9073468138230965e-06, -0.000816131301689893, -7.629103492945433e-05, -2.3603161025675945e-05, -0.05031540244817734, -2.5274007320404053, -1.683988332748413, -2.4749510288238525, -0.6640316247940063, -0.32948458194732666, -0.0027951241936534643, -5.090107151772827e-05, -0.00828827265650034, -0.06846186518669128, -9.822363062994555e-05, -0.0693165585398674, -0.8087106943130493, -0.4460276663303375, -0.28392937779426575, -2.0146166207268834e-05, -0.005323638673871756, 0.0, -2.372236667724792e-05, -0.0008685392094776034, -7.271740287251305e-06, -6.6756979322235566e-06, -0.00014530557382386178, -0.0012510338565334678, -0.007131597027182579, -3.6078810691833496, -0.0010347970528528094, -0.5531699061393738, -0.0037871322128921747, -0.06918863952159882, -5.960446742392378e-06, -5.781483559985645e-05, -2.3841830625315197e-06, -0.0008984343148767948, -8.940656698541716e-06, -0.0007887351675890386, -1.4305104514278355e-06, -9.536738616588991e-07, -2.6225699912174605e-05, -0.00020561488054227084, -8.260862523457035e-05, -0.002561028813943267, -0.21471887826919556, -2.7276813983917236, -0.47086262702941895, -3.313963316031732e-05, -1.1444026313256472e-05, -2.3841855067985307e-07, -1.6262812614440918, -1.4305104514278355e-06, 0.0, -3.9934315282152966e-05, -0.5774797797203064, -0.2303086221218109, -0.001796776195988059, -0.00023815179883968085, -1.396262526512146, -1.5497195136049413e-06, -0.0013628251617774367, -3.576278118089249e-07, -4.5536911784438416e-05, -0.12703272700309753, -0.006347732152789831, -0.00040463366894982755, -0.08199898153543472, -0.030771426856517792, -0.22073835134506226, -0.000505677133332938, -1.367910385131836, -0.017676319926977158, -0.19138087332248688, -0.0032507930882275105, -0.09765241295099258, -7.152555099310121e-07, -6.6756979322235566e-06, -1.1920922133867862e-06, -0.034087371081113815, -2.884823152271565e-05, -0.007868957705795765, -5.960462772236497e-07, -1.1920922133867862e-06, -0.00034362133010290563, -2.245302438735962, -0.023046845570206642, -0.00818304717540741, -0.07463246583938599, -4.768360213347478e-06, -5.125868119648658e-05, -1.1920928244535389e-07, -0.0034176057670265436, 0.0, 0.0, -3.015949550899677e-05, -0.0008875959902070463, -0.0002548369811847806, -0.00020072828920092434, -0.04808824136853218, -0.003062798175960779, -0.0025164387188851833, -0.00011336160969221964, -0.0004543225804809481, -0.0023229538928717375, -1.1170575618743896, -2.741060256958008, -6.5205356804654e-05, -0.0005586970364674926, -0.004120788536965847, -0.14387260377407074, -0.15971159934997559, -0.0039983815513551235, -0.024703986942768097, -4.291525328881107e-06, -1.1920928244535389e-07, -0.12556970119476318, -0.0037481787148863077, -0.00558518385514617, -0.033189449459314346, -4.887569048150908e-06, -0.01967708021402359, -0.005030712112784386, -0.0003583981015253812, -0.3024495840072632, -0.00039748396375216544, -7.819823804311454e-05, -0.0012461524456739426, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.008924241177737713, -0.0830412209033966, -0.005187503527849913, -0.00023195437097456306, -0.3979749381542206, -3.0040289857424796e-05, -2.0523104667663574, -0.3475436568260193, -0.22876660525798798, -0.0005695389700122178, -5.936446541454643e-05, -0.0005212855176068842, -0.902582049369812, -0.12123297899961472, -0.014421400614082813, -2.145764938177308e-06, -1.7762025890988298e-05, -4.768360213347478e-06, -0.006801311857998371, -0.034461859613657, -0.9107968211174011, -0.006779052317142487, -0.00035089056473225355, -6.556489552167477e-06, -0.0001134808044298552, -1.6689286894688848e-06, 0.0, -0.0018816161900758743, -8.391981828026474e-05, -0.0006148116663098335, -0.02071531116962433, -0.0003885467885993421, -1.5497195136049413e-06, -0.0001560327800689265, -0.000417741306591779, -0.00011824862303910777, -1.7155570983886719, -0.0003000047872774303, -0.00028451209072954953, -7.986990567587782e-06, -1.0847986231965479e-05, -0.00043394684325903654, -0.0001045410826918669, -0.0007494263118132949, -1.9073468138230965e-06], "finish_reason": "length"}], "metrics": {"energy": 1034.5439806823733, "energy_per_token": 4.041187424540521, "time": 23.59858, "time_per_token": 0.092181953125}}
{"outputs": [{"text": "files = os.listdir(source_directory)\n    file_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    counter = 0\n\n    if target_directory:\n        path = Path(target_directory)\n        path.mkdir(parents=True, exist_ok=True)\n\n    for file_name in files:\n        if file_name.endswith(tuple(file_extensions)):\n            file_path = os.path.join(source_directory, file_name)\n\n            if file_path.endswith('.txt'):\n                with open(file_path, 'r', encoding='utf-8') as txt_file:\n                    content = txt_file.read()\n            elif file_path.endswith('.docx'):\n                doc = docx.Document(file_path)\n                content = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            elif file_path.endswith('.xlsx'):\n                content = pd.read_", "tokens": ["files", " =", " os", ".", "list", "dir", "(", "source", "_", "directory", ")", "\n", "    ", "file", "_", "extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "    ", "counter", " =", " ", "0", "\n", "\n", "    ", "if", " target", "_", "directory", ":", "\n", "        ", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "        ", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "if", " file", "_", "name", ".", "end", "sw", "ith", "(", "tuple", "(", "file", "_", "extensions", "))", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", "_", "name", ")", "\n", "\n", "            ", "if", " file", "_", "path", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " t", "xt", "_", "file", ":", "\n", "                ", "    ", "content", " =", " t", "xt", "_", "file", ".", "read", "()", "\n", "            ", "elif", " file", "_", "path", ".", "end", "sw", "ith", "('", ".", "doc", "x", "')", ":", "\n", "                ", "doc", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "                ", "content", " =", " '\\", "n", "'", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "            ", "elif", " file", "_", "path", ".", "end", "sw", "ith", "('", ".", "x", "ls", "x", "')", ":", "\n", "                ", "content", " =", " pd", ".", "read", "_"], "logprobs": [-3.4806618690490723, -1.1213222742080688, -0.9666875004768372, -2.729855441430118e-05, -0.016131125390529633, -1.5497195136049413e-06, -0.0006783091812394559, -0.03691475838422775, -8.189342770492658e-05, -1.3708974620385561e-05, -0.0005270045949146152, -0.04784780740737915, -0.1623700112104416, -2.8313562870025635, -0.03155047819018364, -0.6294847130775452, -0.04757457971572876, -1.0323275327682495, -0.05863991007208824, -0.01080201007425785, -0.0010177677031606436, -0.00029595286468975246, -0.004877810832113028, -0.0022702652495354414, -0.04123946279287338, -0.005534089636057615, -0.0020681675523519516, -4.255681051290594e-05, -0.000819347333163023, -0.0021177739836275578, -0.025572026148438454, -3.3378044463461265e-05, -0.0003081085451412946, -0.004707919433712959, -0.00011753345461329445, -0.0012248402927070856, -0.0006236277404241264, -0.0017928492743521929, -0.004845543298870325, -0.026744022965431213, -0.1781066209077835, -3.468377113342285, -0.03778856620192528, -0.00631563039496541, -0.0032323752529919147, -0.031893473118543625, -0.6079730987548828, -0.0003541081096045673, -1.5695669651031494, -2.9202215671539307, -5.7338023907504976e-05, -0.0004891153075732291, -1.4871982336044312, -0.007844475097954273, -0.006519358605146408, -2.311293601989746, -0.09890493750572205, -0.029267536476254463, -0.007782022003084421, -0.007504604756832123, -8.702239938429557e-06, -3.933898824470816e-06, -0.0017390617867931724, -0.02805502898991108, -0.04043988138437271, -0.3188764750957489, -0.0030043248552829027, -0.0003152588615193963, -1.0728830375228426e-06, -0.008694885298609734, -0.1803095042705536, -0.002331279218196869, -0.00400099391117692, -0.003758867271244526, -0.00032586511224508286, -5.960462772236497e-07, -4.291525328881107e-06, -0.00021789084712509066, -0.000262106885202229, -0.00285836448892951, -0.012622583657503128, -0.14453206956386566, -0.03253215178847313, -0.06108542159199715, -0.1453765332698822, -2.5660560131073, -0.04973914101719856, -0.0016565899131819606, -0.00430134404450655, -0.00024434918304905295, -0.0012757980730384588, -0.02716130018234253, -1.3932716846466064, -1.0918852090835571, -0.00024101213784888387, -0.016827890649437904, -0.06619659066200256, -0.15872608125209808, -1.9430925021879375e-05, 0.0, -0.17568780481815338, -0.10430675745010376, -0.0013842533808201551, -0.007107095792889595, -1.2159273865108844e-05, -0.0022047278471291065, -0.0004180987598374486, -0.059452373534440994, -0.007050515618175268, -0.053456079214811325, -0.9645304083824158, -0.16410936415195465, -0.23746323585510254, -0.008525286801159382, -0.12301970273256302, -4.529942543740617e-06, -0.00022635281493421644, -2.5510462364763953e-05, -0.0016016048612073064, -0.00013410145766101778, -0.0027462646830826998, -2.7179348762729205e-05, -9.65590606938349e-06, -0.00014745102089364082, -0.0012011463986709714, -3.3378546504536644e-06, -5.006777428206988e-06, -0.0002803409588523209, -0.0015642322832718492, -0.7227967977523804, -0.000797192333266139, -0.3699338734149933, -0.0464165136218071, -2.992108420585282e-05, -1.39332914352417, -0.010651993565261364, -0.004619402810931206, -1.585470999998506e-05, -1.1920928244535389e-07, -0.054857365787029266, -0.046645913273096085, -0.048394378274679184, -0.0002615109842736274, -0.018552934750914574, -0.00644201785326004, -0.002100168028846383, -0.1633787751197815, -0.0005005536950193346, -0.0004828002711292356, -0.0034710655454546213, -0.00010430268594063818, -0.0015259062638506293, -0.055876635015010834, -0.07172581553459167, -0.010488860309123993, -1.2456001043319702, -9.262132516596466e-05, -0.01586904004216194, -0.06931644678115845, -0.028130600228905678, -0.04667321965098381, -0.0013072286965325475, -0.049743566662073135, -0.00021491125517059118, -1.7256344556808472, -0.032211996614933014, -0.12996159493923187, -0.03523056209087372, -0.004171598702669144, -0.0012393658980727196, -0.00036459474358707666, -0.0008156548719853163, -1.6127628087997437, -0.012607280164957047, -0.03738730028271675, -1.0609570381348021e-05, -1.0132738680113107e-05, -4.768370445162873e-07, -0.0007304860628210008, -5.960446742392378e-06, -0.08597012609243393, -0.04297124966979027, -1.5802421569824219, -0.026658596470952034, -0.00022396916756406426, -1.2993727978027891e-05, -0.002060672966763377, -3.981510963058099e-05, -0.00016175392374861985, -5.960462772236497e-07, 0.0, -0.001077786204405129, -0.001780830672942102, -0.03226844221353531, -0.0008743754005990922, -2.2053474822314456e-05, -0.0002740246127359569, -0.0004182179400231689, -0.0002734287118073553, -0.4471530318260193, -0.03461802005767822, -0.00022480344341602176, -7.033323527139146e-06, -9.417489309271332e-06, -0.0004938812926411629, -0.00010489867418073118, -0.0018210508860647678, -4.708655978902243e-05, -3.516612196108326e-05, -0.0010130041046068072, -0.0013690156629309058, -0.0021714221220463514, -0.09044308960437775, -0.03356854245066643, -0.19749616086483002, -0.0007921895012259483, -0.008388049900531769, -0.00016211149340961128, -2.8371408916427754e-05, -0.08355584740638733, -0.47644534707069397, -0.0002803409588523209, -3.4450891689630225e-05, -0.0029074561316519976, -0.0010658780811354518, -0.00029380773776210845, -0.00020680672605521977, -0.0008188708452507854, -7.211902266135439e-05, -4.6491513785440475e-06, -0.0013656823430210352, -0.0023858672939240932, -0.005128324497491121, -0.001208409434184432, -0.0013153243344277143, -1.1086402082582936e-05, -0.003411427838727832, -0.0002485204895492643, -3.981510963058099e-05, -3.576278118089249e-07, -2.145764938177308e-06, -0.0065991804003715515, -0.0013829439412802458, -0.018410982564091682, -4.291525328881107e-06, -0.00021443451987579465, -0.0008896207436919212, -0.08847200125455856, -0.0006310140597634017, -0.00018654513405635953, -0.58404541015625, -0.015417794696986675, -0.07822544127702713, -3.0040289857424796e-05, -0.0632215216755867, -4.207999518257566e-05], "finish_reason": "length"}], "metrics": {"energy": 1073.502449590682, "energy_per_token": 4.193368943713602, "time": 23.583921, "time_per_token": 0.09212469140625}}
{"outputs": [{"text": "try:\n        os.makedirs(target_directory)\n    except FileExistsError:\n        print(\"The target directory exists.\")\n\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if source_directory.is_dir():\n        print(f\"Source directory: {source_directory}\")\n    else:\n        raise FileNotFoundError(\n            \"The source directory does not exist or is not accessible.\"\n        )\n\n    count = 0\n    for file in source_directory.iterdir():\n        if file.suffix in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n            print(f\"Converting file: {file.name}\")\n            count += 1\n\n            if file.suffix == \".txt\":\n                with open(file, \"r\", encoding=\"utf-8\") as source_file:\n                    content = source_file.readlines()\n                df = pd.DataFrame(content, columns=[\"Text\"])\n            elif file", "tokens": ["try", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ")", "\n", "    ", "except", " File", "Exists", "Error", ":", "\n", "        ", "print", "(", "\"", "The", " target", " directory", " exists", ".", "\"", ")", "\n", "\n", "    ", "source", "_", "directory", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", "_", "directory", " =", " Path", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "if", " source", "_", "directory", ".", "is", "_", "dir", "():", "\n", "        ", "print", "(", "f", "\"", "Source", " directory", ":", " {", "source", "_", "directory", "}\"", ")", "\n", "    ", "else", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\n", "            ", "\"", "The", " source", " directory", " does", " not", " exist", " or", " is", " not", " accessible", ".", "\"", "\n", "        ", ")", "\n", "\n", "    ", "count", " =", " ", "0", "\n", "    ", "for", " file", " in", " source", "_", "directory", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "suff", "ix", " in", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]:", "\n", "            ", "print", "(", "f", "\"", "Con", "verting", " file", ":", " {", "file", ".", "name", "}\"", ")", "\n", "            ", "count", " +=", " ", "1", "\n", "\n", "            ", "if", " file", ".", "suff", "ix", " ==", " \"", ".", "txt", "\":", "\n", "                ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " source", "_", "file", ":", "\n", "                ", "    ", "content", " =", " source", "_", "file", ".", "read", "lines", "()", "\n", "                ", "df", " =", " pd", ".", "DataFrame", "(", "content", ",", " columns", "=[", "\"", "Text", "\"", "])", "\n", "            ", "elif", " file"], "logprobs": [-3.173780918121338, -0.0001454247540095821, -0.003527967259287834, -0.016260618343949318, -2.0005431175231934, -0.0010838593589141965, -0.6197042465209961, -2.109982233378105e-05, -0.0011593532981351018, -0.0006936766440048814, -0.041942961513996124, -4.911301948595792e-05, -3.85038583772257e-05, -1.0688369274139404, -0.2073444277048111, -0.08490849286317825, -0.0007650309125892818, -0.2572970390319824, -0.0010299145942553878, -2.145764938177308e-06, -0.023597240447998047, -0.011263475753366947, -0.0007310817018151283, -2.7751147747039795, -0.10190527886152267, -0.6508983969688416, -1.8364782333374023, -0.8103412985801697, -0.03683766350150108, -2.777550458908081, -0.5071080327033997, -0.18603461980819702, -0.0013686585007235408, -0.002478386741131544, -0.4244936406612396, -0.0015505446353927255, -2.606110095977783, -0.08047312498092651, -1.0141289234161377, -0.5476111173629761, -0.07503875344991684, -0.0019813207909464836, -0.0036808375734835863, -7.390948667307384e-06, -2.7417760065873154e-05, -0.0009679876384325325, -0.025491612032055855, -0.1172238141298294, -0.8247822523117065, -0.0005645350320264697, -0.003076703054830432, -0.0006227937992662191, -0.0005255748401395977, -8.5588610090781e-05, -0.0005575056420639157, -6.556489552167477e-06, -4.768370445162873e-07, -0.0004457433824427426, -0.004101199563592672, -0.22689911723136902, -0.00014900050882715732, -1.1480793952941895, -2.929110288619995, -4.172316494077677e-06, -4.2676016164477915e-05, -0.09575475007295609, -0.21161803603172302, -8.010543388081715e-05, -0.04973040893673897, -0.12437930703163147, -0.004706851206719875, -0.04478929564356804, -2.5180888175964355, -0.02579626441001892, -0.822702169418335, -0.03919820860028267, -1.1894360780715942, -0.0631168857216835, -0.7899053692817688, -0.04561992362141609, -0.02782132476568222, -8.4638240878121e-06, -5.722029527532868e-06, -0.16847831010818481, -0.0006959400488995016, -0.0010845737997442484, -0.8704084753990173, -0.01487039402127266, -9.179073458653875e-06, -0.00015793983766343445, -0.0002754547167569399, -0.09512671083211899, -0.010065038688480854, -0.0002454218047205359, -1.0847986231965479e-05, -0.019392888993024826, -2.837383985519409, -0.003322083968669176, -1.1885895729064941, -0.6150897741317749, -0.5127483606338501, -0.012101562693715096, -0.21138213574886322, -0.0011454218765720725, -0.016412492841482162, -1.1632280349731445, -0.22814078629016876, -0.06402949243783951, -1.837190866470337, -0.04449174180626869, -0.01837095618247986, -1.1523301601409912, -0.011279035359621048, -2.1815061700181104e-05, -0.0005557184922508895, -0.036550723016262054, -0.0004140473320148885, -2.93444561958313, -0.2430509626865387, -0.012429631315171719, -0.0011834054021164775, -0.057421885430812836, -0.3258048892021179, -0.377226322889328, -0.31645873188972473, -0.17134127020835876, -0.0864659771323204, -4.768370445162873e-07, -8.344646857949556e-07, -1.4066597032069694e-05, -0.25284940004348755, -4.184158387943171e-05, -2.038458114839159e-05, -0.001742750871926546, -0.01277206838130951, -0.26826387643814087, -0.1482362151145935, -0.00021002470748499036, -0.6080582141876221, -1.1920928244535389e-07, -0.3105553388595581, -0.6728468537330627, -0.01674254983663559, -0.0010893370490521193, -0.009141259826719761, -0.00010835537250386551, -0.016502903774380684, -0.00031442465842701495, -0.0009467886411584914, -0.07068692892789841, -0.009256778284907341, -9.775113539944869e-06, -0.012866927310824394, -9.464769391342998e-05, -0.000416907190810889, -0.04304969683289528, -1.7881233361549675e-05, -0.0003091811086051166, -6.198863957251888e-06, -0.005314626730978489, -0.00010406429646536708, -5.0424259825376794e-05, -0.0021136105060577393, -7.390948667307384e-06, -0.013239685446023941, -0.0013427060330286622, -0.010405927896499634, -2.67008900642395, -0.0013725870521739125, -0.08870777487754822, -0.006679587997496128, -1.0670973062515259, -0.032498572021722794, -0.5788770318031311, -0.08589650690555573, -0.0018774517811834812, -0.008293593302369118, -0.6073424220085144, -0.05686851590871811, -0.024773532524704933, -0.0007203606073744595, -0.0006755692302249372, -0.34318962693214417, -1.7338861227035522, -0.008129838854074478, -0.06979794055223465, -0.0001928620331455022, -0.005704314913600683, -1.1866458654403687, -0.013250625692307949, -0.7786985635757446, -0.00570953032001853, -0.0002157455455744639, -0.004148687236011028, 0.0, -0.014101389795541763, -0.0061936103738844395, -0.00020144341397099197, -0.04540509730577469, -0.001715261023491621, -0.0028733417857438326, -0.0007663412252441049, -0.5656784772872925, -0.45030611753463745, -6.282132380874828e-05, -0.036665190011262894, -0.0807710513472557, -0.10131663829088211, -0.008838579058647156, -0.0005495230434462428, -1.1720389127731323, -0.013849940150976181, -0.06892307847738266, -0.0019033902790397406, -0.04229521378874779, -0.04148126021027565, -0.0008211340173147619, -0.007477982901036739, -0.027323013171553612, -1.9430925021879375e-05, -3.2631189823150635, -0.8762519955635071, -0.05052996799349785, -0.010816043242812157, -0.000988114275969565, -0.00014602071314584464, -7.86750388215296e-05, -1.453187346458435, -0.0025034775026142597, -0.04009464755654335, -1.4305104514278355e-06, -4.529942543740617e-06, -4.3987260141875595e-05, -3.3378546504536644e-06, -2.8913724422454834, -0.00040356122190132737, -0.015540454536676407, -0.46897023916244507, -0.914086103439331, -0.004638507030904293, -0.00025900822947733104, -2.7418097943154862e-06, -0.010345522314310074, -0.11664942651987076, -0.15565849840641022, -0.04643256217241287, -0.000586695212405175, -0.013860520906746387, -0.012220391072332859, -0.007099993526935577, -0.00012432756193447858, -0.0068182433024048805, -0.020833004266023636, -1.0879721641540527, -0.006081173196434975, -0.00047434045700356364], "finish_reason": "length"}], "metrics": {"energy": 1044.1220773944856, "energy_per_token": 4.078601864822209, "time": 24.001709, "time_per_token": 0.09375667578125}}
{"outputs": [{"text": "if not Path(source_directory).is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    files_to_convert = [file for file in os.listdir(source_directory)\n                        if file.endswith(('.txt', '.docx', '.xlsx', '.csv'))]\n\n    converted_files_count = 0\n    for file in files_to_convert:\n        file_path = os.path.join(source_directory, file)\n\n        if file.endswith('.txt'):\n            text = open(file_path, 'r').read()\n        elif file.endswith('.docx'):\n            doc = docx.Document(file_path)\n            text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n        elif file.endswith('.xlsx') or file.endswith('.csv'):\n            df = pd.read_excel(file_path) if file.endswith", "tokens": ["if", " not", " Path", "(", "source", "_", "directory", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "files", "_", "to", "_", "convert", " =", " [", "file", " for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", ")", "\n", "                ", "        ", "if", " file", ".", "end", "sw", "ith", "(", "('", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "'))", "]", "\n", "\n", "    ", "converted", "_", "files", "_", "count", " =", " ", "0", "\n", "    ", "for", " file", " in", " files", "_", "to", "_", "convert", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "            ", "text", " =", " open", "(", "file", "_", "path", ",", " '", "r", "')", ".", "read", "()", "\n", "        ", "elif", " file", ".", "end", "sw", "ith", "('", ".", "doc", "x", "')", ":", "\n", "            ", "doc", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "            ", "text", " =", " '\\", "n", "'", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "        ", "elif", " file", ".", "end", "sw", "ith", "('", ".", "x", "ls", "x", "')", " or", " file", ".", "end", "sw", "ith", "('", ".", "csv", "')", ":", "\n", "            ", "df", " =", " pd", ".", "read", "_", "ex", "cel", "(", "file", "_", "path", ")", " if", " file", ".", "end", "sw", "ith"], "logprobs": [-1.9863839149475098, -0.03853166103363037, -2.214331865310669, -0.012085898779332638, -0.04266801476478577, -1.1086402082582936e-05, -3.2186455882765586e-06, -0.003011693712323904, -0.0004262015863787383, -0.31028079986572266, -0.00013529339048545808, -0.003437564242631197, -0.017957018688321114, -0.01648332178592682, -0.0038720411248505116, -0.02842077799141407, -0.015070156194269657, -0.00017867876158561558, -9.298280929215252e-06, -0.08516284078359604, -0.5955168604850769, -0.12836046516895294, -0.8076301217079163, -0.009961416013538837, -0.543598473072052, -0.000228140561375767, -0.00415486004203558, -9.179073458653875e-06, -1.2278481335670222e-05, -0.004235345870256424, -0.3641536831855774, -0.0007444233051501215, -0.001932421582750976, -0.30602526664733887, -0.00408730935305357, -0.0005465444410219789, -0.0004906642716377974, -0.2666558027267456, -0.000476246903417632, -4.309571266174316, -0.6048667430877686, -0.6416171789169312, -9.178694017464295e-05, -0.21798472106456757, -0.016222499310970306, -0.5558452010154724, -1.2349224090576172, -0.10630907863378525, -0.0010450384579598904, -0.0010896942112594843, -0.2790755033493042, -1.6331539882230572e-05, -0.019976381212472916, 0.0, -7.819823804311454e-05, -0.006000243593007326, -1.0609570381348021e-05, -9.65590606938349e-06, -0.003359271911904216, -1.4128350019454956, -0.008023294620215893, -0.12046043574810028, -0.0016296928515657783, -0.5015078186988831, -0.005046012811362743, -0.06632723659276962, -2.622600959512056e-06, 0.0, -0.5197982788085938, -0.14502333104610443, -0.01110975630581379, -0.005169833078980446, -7.974783511599526e-05, -3.349725011503324e-05, -0.0020234365947544575, -0.0010936238104477525, -0.011451585218310356, -0.003998737782239914, -0.0003700763627421111, -3.671578815556131e-05, -0.0003505330823827535, -0.00014757021563127637, -0.010516700334846973, -1.883488948806189e-05, -0.0006268443539738655, -0.0014699617167934775, -4.8874615458771586e-05, -0.0006005152827128768, -0.00026341783814132214, -0.0019136227201670408, -0.00643656961619854, -0.039908986538648605, -0.00318068522028625, -0.2693173289299011, -0.00020525732543319464, -2.1791200637817383, -0.053008824586868286, -0.64546799659729, -0.6047542095184326, -0.09576082229614258, -0.0010150285670533776, -0.018015209585428238, -8.630380034446716e-05, -0.004885165952146053, -0.7262788414955139, -0.18591377139091492, -0.0889996588230133, -0.17904314398765564, -0.0020019030198454857, -2.50339189733495e-06, 0.0, -2.3841830625315197e-06, -4.637133679352701e-05, -0.00016950124700088054, -0.000291662581730634, -0.006632694508880377, -0.6220098733901978, -0.08654119074344635, -0.0607527419924736, -0.0039177583530545235, -0.09381625801324844, -1.4305104514278355e-06, -6.532455881824717e-05, -2.7418097943154862e-06, -0.0007800396997481585, -1.9073304429184645e-05, -0.0019928612746298313, -1.1920922133867862e-06, -1.6689286894688848e-06, -2.8967437174287625e-05, -0.00019167017308063805, -5.149708886165172e-05, -0.001100768567994237, -1.1807141304016113, -0.0005123494775034487, -0.5449137687683105, -0.13842101395130157, -0.02147178165614605, -0.005024781450629234, -5.602820692729438e-06, -5.960462772236497e-07, -0.08347020298242569, -0.009628050029277802, -0.08295739442110062, -0.00010072677832795307, -0.030773622915148735, -0.002614177530631423, -0.0006450717919506133, -1.8085814714431763, -0.1175595298409462, -0.40230894088745117, -0.002088390989229083, -0.00130425242241472, -0.001526977401226759, -8.344646857949556e-07, -0.12155795842409134, -0.14614254236221313, -0.01100329402834177, -0.5653356313705444, -0.02177894487977028, -1.7046782886609435e-05, -0.02184915915131569, -0.058932382613420486, -0.163786381483078, -0.009530876763164997, -0.00014518637908622622, -0.00013541258522309363, -0.00010513706365600228, 0.0, -4.768370445162873e-07, -0.0008438840159215033, -0.0006484074983745813, -0.011828286573290825, -0.00024327656137757003, -5.364403477869928e-06, -0.00024256148026324809, -0.0005026984144933522, -0.00018916724366135895, -0.7449883818626404, -0.01654757745563984, -0.00016902448260225356, -7.867782187531702e-06, -7.510157047363464e-06, -0.000530936405993998, -8.356221951544285e-05, -0.0014119903789833188, -0.0009299959056079388, -1.1920928244535389e-07, -0.0003036991402041167, -0.0012288884026929736, -0.0007593132322654128, -0.032473184168338776, -0.006617773324251175, -0.25420618057250977, -0.00048411093303002417, -0.008743572980165482, -6.282132380874828e-05, -1.7881377516459906e-06, -0.04507661610841751, -0.49752143025398254, -0.00015114595589693636, -5.113947918289341e-05, -0.0010124086402356625, -0.0005992047372274101, -0.00013505500101018697, -6.580135959666222e-05, -0.0011455409694463015, -0.00018451895448379219, -2.0265558760002023e-06, -0.0012966329231858253, -0.0028687058947980404, -0.002229825360700488, -0.001419608946889639, -0.0007487116381525993, -0.00046171018038876355, -6.16293036728166e-05, 0.0, -2.145764938177308e-06, -0.0454130694270134, -0.00034683887497521937, -0.02327386476099491, -2.7418097943154862e-06, -0.00011407678539399058, -0.0015585192013531923, -2.6678175926208496, -0.003067908575758338, -0.00030286493711173534, -0.00010418349120300263, -3.576278118089249e-07, -1.2755313036905136e-05, -0.0008119623525999486, -0.0018465149914845824, -0.05052656680345535, -2.90866428258596e-05, -0.00012265883560758084, -0.004084815736860037, -0.0003987947420682758, -0.9629911780357361, -0.003157037775963545, -0.0005301024066284299, -1.2755313036905136e-05, -0.004867845680564642, -7.152555099310121e-07, -0.030950818210840225, -3.576278118089249e-07, -0.00013076403411105275, -0.002114919014275074, -0.0013618728844448924, -8.702239938429557e-06, -0.08582714945077896, -0.09714434295892715, -0.0003734129713848233, -0.0002864189154934138, -4.565611743601039e-05, 0.0, -1.1920928244535389e-07], "finish_reason": "length"}], "metrics": {"energy": 1050.714940601349, "energy_per_token": 4.10435523672402, "time": 23.390984, "time_per_token": 0.09137103125}}
{"outputs": [{"text": "file_types = {'.txt', '.docx', '.xlsx', '.csv'}\n\n    # Check if the source directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Check if the target directory exists, if not, create it\n    target_path = Path(target_directory)\n    if not target_path.exists():\n        target_path.mkdir(parents=True, exist_ok=True)\n\n    # Loop through files in the source directory\n    for file_name in os.listdir(source_directory):\n        # Check if the file is of the required type\n        if os.path.splitext(file_name)[1] in file_types:\n            source_file_path = os.path.join(source_directory, file_name)\n            target_file_path = os.path.join(target_directory, os.path.splitext(file_name)[0] + '.csv')\n\n            # Open", "tokens": ["file", "_", "types", " =", " {'", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "'}", "\n", "\n", "    ", "#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " '", "{", "source", "_", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " target", " directory", " exists", ",", " if", " not", ",", " create", " it", "\n", "    ", "target", "_", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "    ", "if", " not", " target", "_", "path", ".", "exists", "():", "\n", "        ", "target", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Loop", " through", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "#", " Check", " if", " the", " file", " is", " of", " the", " required", " type", "\n", "        ", "if", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")[", "1", "]", " in", " file", "_", "types", ":", "\n", "            ", "source", "_", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", "_", "name", ")", "\n", "            ", "target", "_", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")[", "0", "]", " +", " '", ".", "csv", "')", "\n", "\n", "            ", "#", " Open"], "logprobs": [-3.2828011512756348, -0.03728945553302765, -2.6981465816497803, -0.16080211102962494, -1.6079031229019165, -0.18360435962677002, -0.017302166670560837, -0.22926737368106842, -0.0004303721070755273, -0.0038032832089811563, -0.001413180842064321, -0.049346502870321274, -0.012396193109452724, -0.0030926279723644257, -2.8013790142722428e-05, -0.0005209281225688756, -0.0007167869480326772, -0.03093891404569149, -3.7431014789035544e-05, -0.00036066226311959326, -0.002600028645247221, -3.349725011503324e-05, -0.0008799732895568013, -0.00014423283573705703, -0.0018042728770524263, -0.013585491105914116, -0.19782114028930664, -1.7065917253494263, -0.0003203832311555743, -1.4997119903564453, -1.0167717933654785, -0.14855767786502838, -0.33751237392425537, -0.05067185312509537, -0.03829178959131241, -0.012706509791314602, -0.17616020143032074, -0.00035744477645494044, -0.12942516803741455, -0.014569325372576714, -0.1630234569311142, -8.4638240878121e-06, -0.0032478224020451307, -1.1086402082582936e-05, -1.5540614128112793, -0.00018320789968129247, -9.178694017464295e-05, -0.004079354461282492, -2.098061486321967e-05, -2.145764938177308e-06, -0.001039679627865553, -0.0005637010326609015, -0.0007906410028226674, -0.04626525938510895, -0.0038294093683362007, -6.747018051100895e-05, -2.50339189733495e-06, -0.04172174260020256, -0.2961679995059967, -0.041385989636182785, -0.5789889693260193, -0.002164641860872507, -0.3347896933555603, -8.67805938469246e-05, -0.0010600429959595203, -3.194758028257638e-05, -5.245195097813848e-06, -0.0010743328602984548, -0.3372723162174225, -0.0002374367177253589, -0.0008092227508313954, -0.18608905375003815, -0.0030141896568238735, -0.00016950124700088054, -6.961580220377073e-05, -0.011131801642477512, -0.0004389514506328851, -0.07986072450876236, -2.4858126640319824, -0.020264144986867905, -0.038353510200977325, -0.00590935256332159, -0.0015350712928920984, -0.010974760167300701, -0.6985448002815247, -0.6398916840553284, -0.039264578372240067, -0.5501683354377747, -0.027862248942255974, -0.010958842933177948, -0.032898690551519394, -8.928377064876258e-05, -2.1260483264923096, -0.01390025857836008, -2.0059680938720703, -0.006596219725906849, -0.04204172641038895, -0.0022361292503774166, -0.003349886042997241, -1.1920928244535389e-07, -1.6689286894688848e-06, -0.0018029639031738043, -0.014902574941515923, -0.013183921575546265, -0.3439275622367859, -0.0043262699618935585, -0.027354447171092033, -2.3841855067985307e-07, -8.237022848334163e-05, -7.92710343375802e-05, -0.3928747773170471, -0.004777326714247465, -0.000709282117895782, -0.00032729512895457447, -0.047209516167640686, -7.390948667307384e-06, -8.880697714630514e-05, -0.0002470903273206204, -6.115249561844394e-05, -1.1920928244535389e-07, -0.08418768644332886, -0.0027694464661180973, -0.0001299296854995191, -0.0006320862448774278, -0.1633448600769043, -3.0040289857424796e-05, -7.152555099310121e-07, -8.344646857949556e-07, -7.867782187531702e-06, -0.00041416651220060885, -0.00022539935889653862, -0.002436052542179823, -0.04164261743426323, -0.0005026984144933522, -0.42899566888809204, -2.951744794845581, -0.1430671513080597, -1.9430291652679443, -0.047358810901641846, -0.13984236121177673, -0.024324659258127213, -0.006165650207549334, -0.1614396572113037, -0.00031740395934320986, -1.3865387439727783, -0.46430256962776184, -1.0956817865371704, -0.3480081558227539, -0.0005378468777053058, -0.0027532787062227726, -1.9073304429184645e-05, -0.0002829628065228462, 0.0, -2.407998726994265e-05, -0.0005862186080776155, -3.6954811548639555e-06, -5.245195097813848e-06, -6.317892984952778e-05, -0.0004158347437623888, -0.021076519042253494, -1.6367299556732178, -0.6430072784423828, -0.06786556541919708, -0.11878728121519089, -0.021465597674250603, -1.7107024192810059, -0.4410836100578308, -0.7260164618492126, -2.9266674518585205, -0.42540910840034485, -0.1093982458114624, -0.0004781533498317003, -0.3126598000526428, -1.41587495803833, -1.2397689715726301e-05, -9.679325739853084e-05, -7.152555099310121e-07, -0.0037733560893684626, -1.5497195136049413e-06, 0.0, -1.8715683836489916e-05, -0.0002554328821133822, -3.933898824470816e-06, -7.271740287251305e-06, -0.10010865330696106, -0.0003003622987307608, -0.00040546778473071754, -0.4129635691642761, -0.0009617946925573051, -3.3378546504536644e-06, -8.582700684200972e-05, -0.009469592012465, -0.000510204816237092, -0.016830001026391983, -2.5941410064697266, -0.010301985777914524, -0.2905912697315216, -0.33018985390663147, -0.003809933550655842, -0.00034362133010290563, -0.023915741592645645, -3.576272320060525e-06, -4.017272294731811e-05, -5.960446742392378e-06, -0.0005883631529286504, -1.549708758830093e-05, -0.000390215078368783, -1.9073468138230965e-06, -1.4543427823809907e-05, -3.4927710657939315e-05, -0.00018368464952800423, -7.152555099310121e-07, 0.0, -3.7431014789035544e-05, -0.003805777058005333, -0.3564645051956177, -0.08337105810642242, -8.165503095369786e-05, -0.004544288385659456, -0.002333182143047452, -0.05193694308400154, -0.0017864234978333116, -0.007668462116271257, -1.9073468138230965e-06, -1.6689286894688848e-06, -7.152555099310121e-07, -0.009458137676119804, -2.5510462364763953e-05, -0.0020881532691419125, -1.5497195136049413e-06, -0.0033686577808111906, -6.69933797325939e-05, -0.15689000487327576, -1.9311717551317997e-05, -6.794906312279636e-06, -3.576278118089249e-07, -0.0008093419019132853, -2.3841855067985307e-07, 0.0, -1.6927575416048057e-05, -0.00025817399728111923, -4.529942543740617e-06, -1.4781842764932662e-05, -0.00031931069679558277, -0.00015746307326480746, -0.03651336953043938, -0.00031919151660986245, -0.04360973834991455, -0.00018892886873800308, -0.0012857988476753235, -8.701899787411094e-05, -0.007031931076198816, -0.07332067936658859, -0.0007388246012851596, -0.2715688943862915, -3.2833287715911865], "finish_reason": "length"}], "metrics": {"energy": 1033.0073328018184, "energy_per_token": 4.035184893757103, "time": 23.39683, "time_per_token": 0.0913938671875}}
{"outputs": [{"text": "try:\n        source_directory_path = Path(source_directory)\n        target_directory_path = Path(target_directory)\n\n        if not source_directory_path.exists():\n            raise FileNotFoundError(\"Source directory does not exist.\")\n\n        if not target_directory_path.exists():\n            target_directory_path.mkdir(parents=True)\n\n        extensions = ('.txt', '.docx', '.xlsx', '.csv')\n        count = 0\n\n        for file in source_directory_path.iterdir():\n            if file.is_file() and file.suffix.lower() in extensions:\n                csv_path = target_directory_path / Path(f\"{file.stem}.csv\")\n\n                try:\n                    if file.suffix.lower() == '.txt':\n                        text = file.read_text()\n                    elif file.suffix.lower() == '.docx':\n                        doc = docx.Document(str(file))\n                        full_text = []\n                        for paragraph", "tokens": ["try", ":", "\n", "        ", "source", "_", "directory", "_", "path", " =", " Path", "(", "source", "_", "directory", ")", "\n", "        ", "target", "_", "directory", "_", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "\n", "        ", "if", " not", " source", "_", "directory", "_", "path", ".", "exists", "():", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "\"", "Source", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "        ", "if", " not", " target", "_", "directory", "_", "path", ".", "exists", "():", "\n", "            ", "target", "_", "directory", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "\n", "        ", "extensions", " =", " ('", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "')", "\n", "        ", "count", " =", " ", "0", "\n", "\n", "        ", "for", " file", " in", " source", "_", "directory", "_", "path", ".", "iter", "dir", "():", "\n", "            ", "if", " file", ".", "is", "_", "file", "()", " and", " file", ".", "suff", "ix", ".", "lower", "()", " in", " extensions", ":", "\n", "                ", "csv", "_", "path", " =", " target", "_", "directory", "_", "path", " /", " Path", "(", "f", "\"", "{", "file", ".", "stem", "}", ".", "csv", "\"", ")", "\n", "\n", "                ", "try", ":", "\n", "                ", "    ", "if", " file", ".", "suff", "ix", ".", "lower", "()", " ==", " '", ".", "txt", "':", "\n", "                ", "        ", "text", " =", " file", ".", "read", "_", "text", "()", "\n", "                ", "    ", "elif", " file", ".", "suff", "ix", ".", "lower", "()", " ==", " '", ".", "doc", "x", "':", "\n", "                ", "        ", "doc", " =", " doc", "x", ".", "Document", "(", "str", "(", "file", "))", "\n", "                ", "        ", "full", "_", "text", " =", " []", "\n", "                ", "        ", "for", " paragraph"], "logprobs": [-3.173780918121338, -0.0001454247540095821, -0.003527967259287834, -0.016260618343949318, -1.6830536127090454, -0.12871994078159332, -0.7927862405776978, -1.2420190572738647, -0.23455697298049927, -0.015486110933125019, -0.029683414846658707, -0.0014216327108442783, -0.008355659432709217, -5.960446742392378e-06, -1.3112935448589269e-05, -0.0008556757238693535, -0.06642584502696991, -0.1746593415737152, -0.38396796584129333, -9.691245941212401e-05, -0.0017552459612488747, -0.0017666699131950736, -0.0003240775258745998, -0.0005144941387698054, -0.0012650828575715423, -0.0008773530134931207, -0.0017421558732166886, -6.437280717364047e-06, -1.1920922133867862e-06, -0.001116486731916666, -0.04426470026373863, -0.7005574703216553, -0.003099877154454589, -0.3994828164577484, -0.11604223400354385, -0.235845685005188, -4.768370445162873e-07, -3.576272320060525e-06, -0.00066985102603212, -2.50339189733495e-06, -0.0006117141456343234, -0.6499006152153015, -0.05018650367856026, -0.006556428037583828, -0.0005551227368414402, -0.13666360080242157, -0.021230114623904228, -0.00023278864682652056, -4.0531076592742465e-06, -0.043154288083314896, -2.0402209758758545, -0.4680309593677521, -0.0043472787365317345, -0.11681734770536423, -0.00017832119192462415, -0.0005390383303165436, -0.48163309693336487, -0.007911890745162964, -0.0003400462737772614, -0.00051771110156551, -0.02945055440068245, -0.003035701345652342, -0.5074042677879333, -0.017111757770180702, -0.011813324876129627, -7.152555099310121e-07, -2.3841830625315197e-06, -0.00035768310772255063, -4.172316494077677e-06, -7.414542778860778e-05, -0.028520768508315086, -0.0007982643437571824, -0.0009132028790190816, -0.0003510097449179739, -0.3831019103527069, -2.861018856492592e-06, -7.510157047363464e-06, -0.0004368066438473761, -1.1205610462639015e-05, -0.00044145373976789415, -0.00018869050836656243, -5.960462772236497e-07, -0.3026084899902344, -0.0058510457165539265, -0.0002343380037928, -0.0013141338713467121, -1.8198360204696655, -0.013045676052570343, -0.018291834741830826, -0.006052025128155947, -1.4030611515045166, -0.4432562291622162, -1.4546376466751099, -0.03373855724930763, -0.00500900624319911, -0.00013731967192143202, -0.0001716466504149139, -0.0032346330117434263, -0.0013077049516141415, -0.024932723492383957, -0.005515476688742638, -0.001259963377378881, -5.519237674889155e-05, -0.0003691230376716703, -0.0004664763400796801, -0.017552867531776428, -1.3232143828645349e-05, -0.0006581762572750449, -0.0010209829779341817, -4.9232225137529895e-05, -0.000493762141559273, -0.00015496007108595222, -0.0021050453651696444, -0.006637431215494871, -0.031917836517095566, -0.17047029733657837, -2.674166679382324, -0.10448663681745529, -0.0030834770295768976, -0.00032789100077934563, -0.026959531009197235, -0.1537940800189972, -0.0005106813623569906, -0.03850046172738075, -0.4156816005706787, -0.2699246108531952, -0.3146451413631439, -4.768370445162873e-07, -4.768370445162873e-07, -0.00014494798961095512, -3.576278118089249e-07, -2.0265373677830212e-05, -0.1433723121881485, -0.00010489867418073118, -2.8132995794294402e-05, -0.0013829439412802458, -0.006827241275459528, -0.07296290248632431, -0.0380532331764698, -0.00010096516780322418, -1.0766769647598267, -8.106198947643861e-06, -0.023020634427666664, -0.01675943098962307, -0.00021038226259406656, -0.027931343764066696, -2.2649508537142538e-05, -0.01761658675968647, -4.768370445162873e-07, -2.7705516815185547, -0.0080742621794343, -3.075552376685664e-05, -0.0038138525560498238, -0.00035565727739594877, -0.007451715413480997, -0.0008051729528233409, -0.009482581168413162, -3.0071914196014404, -0.0030091977678239346, -2.125601291656494, -0.003002304583787918, -0.16047511994838715, -1.1920928244535389e-07, -3.6954811548639555e-06, -0.0018854237860068679, -4.0531076592742465e-06, -0.08139707148075104, -2.3310546875, -0.04786587506532669, -1.2751657962799072, -0.17414797842502594, -0.008743100799620152, -0.004858236759901047, -0.0002859421947505325, -0.006881703156977892, -0.08175349235534668, -0.0005946775199845433, -0.0006610354175791144, -8.797258487902582e-05, -0.0011856677010655403, -0.009975815191864967, -0.6291944980621338, -0.0005438040825538337, -2.646082878112793, -5.1377883210079744e-05, -0.0012899658177047968, -0.0025012181140482426, -0.00019822540343739092, -0.1470085084438324, -0.006015884689986706, -3.611976353568025e-05, -0.00044252615771256387, 0.0, -0.9027470946311951, -0.0006509092636406422, -0.00010656742961145937, -0.016026370227336884, -0.0935116708278656, -0.00028010259848088026, -0.03767526522278786, -0.001178285456262529, -0.0023338955361396074, -0.0003541081096045673, -0.00010227633902104571, -1.4815430641174316, -0.12502743303775787, -0.0355389378964901, -0.00016008525562938303, -0.005536460317671299, -4.911301948595792e-05, -0.009935685433447361, -0.3013671636581421, -0.0482889749109745, -0.07246363908052444, -0.7765407562255859, -0.0046159615740180016, -0.00016449528629891574, -7.271740287251305e-06, -5.98412734689191e-05, 0.0, -0.0003575639275368303, -1.6689286894688848e-06, -1.2874520507466514e-05, -0.006064466200768948, -0.0013092526933178306, -2.312633478140924e-05, -0.006024297792464495, -0.0005551227368414402, -5.1377883210079744e-05, -0.000902007392141968, -0.00011646069469861686, -5.709961988031864e-05, -0.39917686581611633, -0.028017356991767883, -0.0002047805901383981, -7.390948667307384e-06, -1.764281842042692e-05, -0.0004047528200317174, -0.00018976318824570626, -1.3590404987335205, -1.537788011773955e-05, -0.00023803261865396053, -0.009074989706277847, -0.007535130251199007, -0.00019822540343739092, -1.7523612768854946e-05, -2.283108949661255, -0.0030342750251293182, -0.00030763185350224376, -0.0007503792876377702, -0.07319648563861847, -0.00031883400515653193, -0.020679347217082977, -1.9907753085135482e-05, -0.00528118759393692, -0.8568218350410461], "finish_reason": "length"}], "metrics": {"energy": 1069.0230699558272, "energy_per_token": 4.17587136701495, "time": 23.397223, "time_per_token": 0.09139540234375}}
{"outputs": [{"text": "source = Path(source_directory)\n    target = Path(target_directory)\n\n    if not source.exists():\n        raise FileNotFoundError(f\"Directory '{source}' does not exist.\")\n\n    extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n    converted_files = 0\n\n    if not target.exists():\n        target.mkdir(parents=True, exist_ok=True)\n\n    for file in source.glob(\"**/*\"):\n        if file.suffix in extensions and file.is_file():\n            data = get_file_text(file)\n            csv_file = target / (file.stem + \".csv\")\n            create_csv_file(csv_file, data)\n            converted_files += 1\n\n    return converted_files", "tokens": ["source", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", " =", " Path", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "if", " not", " source", ".", "exists", "():", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "source", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "extensions", " =", " (", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", ")", "\n", "    ", "converted", "_", "files", " =", " ", "0", "\n", "\n", "    ", "if", " not", " target", ".", "exists", "():", "\n", "        ", "target", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "for", " file", " in", " source", ".", "glob", "(", "\"", "**", "/*", "\"", "):", "\n", "        ", "if", " file", ".", "suff", "ix", " in", " extensions", " and", " file", ".", "is", "_", "file", "():", "\n", "            ", "data", " =", " get", "_", "file", "_", "text", "(", "file", ")", "\n", "            ", "csv", "_", "file", " =", " target", " /", " (", "file", ".", "stem", " +", " \"", ".", "csv", "\"", ")", "\n", "            ", "create", "_", "csv", "_", "file", "(", "csv", "_", "file", ",", " data", ")", "\n", "            ", "converted", "_", "files", " +=", " ", "1", "\n", "\n", "    ", "return", " converted", "_", "files", "\n", "\n", "def"], "logprobs": [-2.7657856941223145, -2.432861089706421, -0.07420597970485687, -0.002103974809870124, -0.006409327033907175, -3.0278701160568744e-05, -2.276871418871451e-05, -0.0012680593645200133, -0.0634218156337738, -0.07040975987911224, -0.26451408863067627, -0.00636360514909029, -0.0012405564775690436, -0.0004936429904773831, -0.0015543533954769373, -5.602820692729438e-06, -3.099436753473128e-06, -0.003231900045648217, -0.04078476130962372, -0.6876600980758667, -0.00026353701832704246, -0.5037606358528137, -0.07517609745264053, -0.10029565542936325, -0.003311034059152007, -0.4964134693145752, -0.12876635789871216, -0.008736955933272839, -0.001320800743997097, -0.07711847126483917, -0.00790290255099535, -0.00016985881666187197, -8.940656698541716e-06, -0.05065542086958885, -0.2763294577598572, -0.09618578851222992, -2.8161609172821045, -0.7880256175994873, -0.0005351065192371607, -0.02084176056087017, -0.3774864077568054, -0.15031515061855316, -0.0003636414185166359, -0.0024211874697357416, -0.38330352306365967, -0.011602895334362984, -0.00023052419419400394, -0.0005940818227827549, -0.1818661093711853, -0.0004377598816063255, -2.788342237472534, -0.09501755237579346, -2.2506260871887207, -0.06978671252727509, -0.21853911876678467, -0.012180940248072147, -0.00032574593205936253, -4.100715523236431e-05, -0.0013011569390073419, -0.001784519525244832, -0.019559718668460846, -0.0047042411752045155, -1.680836794548668e-05, -0.00033158526639454067, -0.0003381395654287189, -0.0008965287124738097, -0.035846639424562454, -2.2411095415009186e-05, -0.00017295771976932883, -6.318072337307967e-06, -0.00045217780279926956, -0.00035696811391972005, -0.00028868322260677814, -0.0031527597457170486, -1.7165990357170813e-05, -0.004359504207968712, -0.03543941676616669, -0.2605687081813812, -2.5744409561157227, -0.11846563220024109, -0.5008631348609924, -0.24019476771354675, -0.43773117661476135, -0.0003933132975362241, -0.004649304784834385, -0.08065657317638397, -0.00011359999916749075, -1.3045196533203125, -0.07001636922359467, -0.017329348251223564, -0.0009565545478835702, -0.025229526683688164, -0.0012180536286905408, -0.005644217599183321, -0.0015574480639770627, -0.03442062810063362, -0.000403084559366107, -0.00022659118985757232, -1.1920922133867862e-06, -0.6277392506599426, -0.02056303806602955, -0.00041333239641971886, -0.0015854182420298457, -0.38366827368736267, -6.472854875028133e-05, -1.4305104514278355e-06, -1.311301275563892e-06, -7.629365427419543e-06, -0.0019277813844382763, -0.0002535260282456875, -0.006344059947878122, -0.03195859491825104, -0.0009542917250655591, -0.1320110410451889, -0.38625484704971313, -0.08037104457616806, -0.07624943554401398, -9.154854342341423e-05, -1.6184399127960205, -0.07684020698070526, -0.037031710147857666, -0.7082720994949341, -0.0027240333147346973, -0.037507638335227966, -0.0005082983989268541, -0.012311887927353382, -0.009769720956683159, -0.08167483657598495, -0.04810766875743866, -0.0002643712505232543, -0.3269859850406647, -3.933898824470816e-06, -0.17786337435245514, -0.0011310139670968056, -1.8672491312026978, -0.4500477910041809, -0.011905565857887268, -0.048490121960639954, -3.2186455882765586e-06, -0.0004294188693165779, -0.0426311157643795, -0.0041248248890042305, -0.006716769654303789, -3.0306191444396973, -0.041478972882032394, -2.16218900680542, -0.005071395076811314, -1.2944724559783936, -0.0007325111655518413, -2.2288830280303955, -0.13744014501571655, -0.11350812762975693, -0.038399744778871536, -0.026156337931752205, -0.26903095841407776, -1.8851864337921143, -0.00690396036952734, -0.518521785736084, -0.22663410007953644, -0.12939511239528656, -0.02951548807322979, -1.3275985717773438, -0.030189111828804016, -1.966933996300213e-05, -0.06454170495271683, -0.0027887048199772835, -0.01276665460318327, -0.00821508839726448, -0.0004687402688432485, -2.6225699912174605e-05, -3.838465272565372e-05, -0.010486501269042492, -0.19641301035881042, -3.691093921661377, -0.00017438798386137933, -0.0938948392868042, -0.5624446868896484, -0.05745306238532066, -0.0122623136267066, -1.5931527614593506, -2.3841574147809297e-05, -0.0001528146385680884, -0.006835884414613247, -0.08242665231227875, -0.02364451065659523, -0.0009622710640542209, -0.01834029145538807, -0.020305264741182327, -5.125986263010418e-06, -1.4781842764932662e-05, -0.00036161558819003403, -0.000387831823900342, -4.434487345861271e-05, -0.00045158201828598976, -0.036203112453222275, -0.005075664725154638, -0.04388941451907158, -0.004240212496370077, -1.9073468138230965e-06, -1.0728830375228426e-06, -0.0026881294324994087, -0.0008516260422766209, -0.018139660358428955], "finish_reason": "stop"}], "metrics": {"energy": 821.8442802658077, "energy_per_token": 4.048493991457181, "time": 18.36763, "time_per_token": 0.09048093596059112}}
{"outputs": [{"text": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError('The source directory does not exist.')\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    converted_files_count = 0\n\n    for file in Path(source_directory).rglob(\"*\"):\n        file_ext = file.suffix.lower()\n        if file_ext in extensions:\n            file_path = file.as_posix()\n            file_name = file.name\n\n            try:\n                if file_ext == '.txt':\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        text = f.read()\n                elif file_ext == '.docx':\n                    doc = docx.Document(file_path)\n                    text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                elif file", "tokens": ["extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "The", " source", " directory", " does", " not", " exist", ".", "')", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "target", "_", "directory", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "converted", "_", "files", "_", "count", " =", " ", "0", "\n", "\n", "    ", "for", " file", " in", " Path", "(", "source", "_", "directory", ")", ".", "rg", "lob", "(", "\"", "*", "\"", "):", "\n", "        ", "file", "_", "ext", " =", " file", ".", "suff", "ix", ".", "lower", "()", "\n", "        ", "if", " file", "_", "ext", " in", " extensions", ":", "\n", "            ", "file", "_", "path", " =", " file", ".", "as", "_", "pos", "ix", "()", "\n", "            ", "file", "_", "name", " =", " file", ".", "name", "\n", "\n", "            ", "try", ":", "\n", "                ", "if", " file", "_", "ext", " ==", " '", ".", "txt", "':", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "        ", "text", " =", " f", ".", "read", "()", "\n", "                ", "elif", " file", "_", "ext", " ==", " '", ".", "doc", "x", "':", "\n", "                ", "    ", "doc", " =", " doc", "x", ".", "Document", "(", "file", "_", "path", ")", "\n", "                ", "    ", "text", " =", " '\\", "n", "'", ".", "join", "([", "paragraph", ".", "text", " for", " paragraph", " in", " doc", ".", "paragraph", "s", "])", "\n", "                ", "elif", " file"], "logprobs": [-2.6728062629699707, -0.23278377950191498, -1.0978227853775024, -0.0884154811501503, -0.0046892911195755005, -0.00044431351125240326, -0.00021371940965764225, -0.0058665708638727665, -0.0021664262749254704, -0.03898876532912254, -0.00419557886198163, -0.0021162275224924088, -5.543078441405669e-05, -0.000526289688423276, -0.0024754139594733715, -0.014577314257621765, -1.9311717551317997e-05, -0.0003077510336879641, -0.0020276003051549196, -5.018585216021165e-05, -0.0011636398267000914, -0.0015467357588931918, -0.0014222278259694576, -0.006745543330907822, -0.11276228725910187, -1.5675653219223022, -0.00044264530879445374, -1.0577417612075806, -0.03245287388563156, -0.161765918135643, -1.3351351299206726e-05, -0.0036351096350699663, -9.536697689327411e-06, -0.1015230119228363, -0.0002474478678777814, -0.07096268236637115, -1.5735502529423684e-05, -7.152531907195225e-06, -0.002576724160462618, -0.005715219769626856, -0.0017075256910175085, -0.046811673790216446, -0.004652152303606272, -0.00013016807497479022, -4.887569048150908e-06, -2.790188789367676, -1.1013031005859375, -0.5010534524917603, -0.011972708627581596, -0.029638398438692093, -0.0003240775258745998, -0.002102666301652789, -0.3647480309009552, -0.022961918264627457, -0.000931663322262466, -0.03172152861952782, -0.00031740395934320986, -2.1715056896209717, -0.029507849365472794, -0.02551787532866001, -1.1920922133867862e-06, -0.0003471963864285499, -1.9073468138230965e-06, -0.017503904178738594, -0.00010752100206445903, -0.0011063652345910668, -2.0265558760002023e-06, -1.3470558769768104e-05, -0.0023438858333975077, -0.0010383697226643562, -0.0006962973857298493, -0.06488943099975586, -4.172316494077677e-06, -0.1399330496788025, -4.768370445162873e-07, -7.152555099310121e-07, -0.00020811776630580425, -0.0004818470624741167, -2.264974000354414e-06, -2.0265558760002023e-06, -0.007082120515406132, -0.006749332416802645, -0.015659227967262268, -0.0004618293314706534, -2.215536594390869, -0.06621578335762024, -0.5378113985061646, -1.0835976600646973, -0.06062181666493416, -0.0006221981020644307, -0.005125477910041809, -5.5549986427649856e-05, -0.010247120633721352, -0.3795294165611267, -0.00012194366718176752, -0.06975357979536057, -0.6091625690460205, -0.21977752447128296, -1.6177704334259033, -0.000270091783022508, -0.0014177043922245502, -2.145764938177308e-06, -1.6689286894688848e-06, -0.00015496007108595222, -3.933898824470816e-06, -1.707561731338501, -9.77468371274881e-05, -2.8244271278381348, -0.38766568899154663, -0.009152481332421303, -0.11160963773727417, -4.1960789531003684e-05, -0.012427747249603271, -0.02563941851258278, -2.232736587524414, -0.0929689034819603, -3.104787826538086, -0.002573632635176182, -0.380928099155426, -0.0004472924047149718, -0.000675807474181056, -8.344646857949556e-07, -1.1997425556182861, -0.008257769979536533, -2.1576648578047752e-05, -0.03672781586647034, -0.546330988407135, -0.09739213436841965, -0.020917529240250587, -0.0026159610133618116, -3.2186455882765586e-06, -0.16372272372245789, -0.0010152667528018355, -0.07971048355102539, -0.0007767044589854777, -0.025304265320301056, -1.116729736328125, -0.03630451112985611, -1.2472097873687744, -0.010439903475344181, -2.5876598358154297, -0.0969180166721344, -1.2556265592575073, -5.8412379075889476e-06, -5.018585216021165e-05, 0.0, -0.0001565095444675535, -0.08077951520681381, -0.13872592151165009, -0.6393274664878845, -0.0009217780898325145, -0.10300850868225098, -0.10960371047258377, -0.22550368309020996, -0.007859496399760246, -1.1744379997253418, -0.4121081531047821, -1.368984341621399, -0.0004153581103309989, -2.635781764984131, -6.580135959666222e-05, -0.0007764662150293589, -0.0029502459801733494, -0.15946312248706818, -0.003545666579157114, -0.0015261442167684436, -0.0006501944735646248, -0.035759687423706055, -0.08399633318185806, -0.00032646095496602356, -0.04037301987409592, -0.006183421704918146, -0.0021250303834676743, -0.0003026265767402947, -0.00010954733443213627, -0.19511480629444122, -0.0006585336523130536, -0.00011276562872808427, -0.0024827865418046713, -0.007983204908668995, -0.00012742661056108773, -0.022019896656274796, -0.09636399894952774, -0.006879808846861124, -0.9038233160972595, -4.660974445869215e-05, -0.03420626372098923, -0.05053110048174858, -0.0138313639909029, -0.021793873980641365, -0.0008055302896536887, -0.05797506123781204, -4.7801782784517854e-05, -0.9344671368598938, -0.004946613218635321, -0.0013260389678180218, -5.721882189391181e-05, -0.00037067217635922134, -0.4440461993217468, -0.07920895516872406, -0.005193907767534256, -2.7179348762729205e-05, -5.960462772236497e-07, -0.013669571839272976, -0.0458931140601635, -0.13476046919822693, -0.33828485012054443, -8.093983342405409e-05, -4.827859811484814e-05, -2.7418097943154862e-06, -0.010051939636468887, -0.0012674640165641904, -0.00014220656885299832, -0.010827010497450829, -0.0004146431456319988, -0.0002543602604418993, -0.0007142852991819382, -7.271502545336261e-05, -0.00016699827392585576, -0.3311571478843689, -0.012795254588127136, -0.00018344627460464835, -5.006777428206988e-06, -7.986990567587782e-06, -0.00043847484630532563, -0.00011836781777674332, -0.0029998086392879486, -0.004977810196578503, -6.69933797325939e-05, -0.0012982996413484216, -0.0006164796068333089, -0.00044586253352463245, -2.5510462364763953e-05, -0.04450269043445587, -0.01935255154967308, -0.1961035430431366, -0.0002269487304147333, -0.007863043807446957, -5.07818695041351e-05, -1.728519782773219e-05, -0.06888279318809509, -1.14254629611969, -0.00010108436981681734, -1.8596476365928538e-05, -0.0015447123441845179, -0.0022644372656941414, -0.00017045476124621928, -0.00011598391574807465, -0.0008334023877978325, -9.262132516596466e-05, -1.6689286894688848e-06, -0.0008665143977850676, -0.0023558977991342545, -0.0007076143519952893, -0.0027846628800034523, -0.0008819981012493372], "finish_reason": "length"}], "metrics": {"energy": 1068.503630390167, "energy_per_token": 4.17384230621159, "time": 23.360981, "time_per_token": 0.09125383203125}}
{"outputs": [{"text": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Initialize a counter for the number of files converted\n    files_converted = 0\n\n    # Loop over all files in the source directory\n    for file in os.listdir(source_directory):\n        # Check if the file has a specific extension\n        if any(file.endswith(ext) for ext in [\".txt\", \".docx\", \".xlsx\", \".csv\"]):\n            # Initialize a DataFrame with a single 'Text' column\n            df = pd.DataFrame(columns=['Text'])\n\n            # Extract the file path and extension\n            file_path = os.path.join(source_directory, file)\n\n            if file.endswith(\".txt\"):\n                # Read the text file and append", "tokens": ["#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " {", "source", "_", "directory", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Initialize", " a", " counter", " for", " the", " number", " of", " files", " converted", "\n", "    ", "files", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "#", " Loop", " over", " all", " files", " in", " the", " source", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", "):", "\n", "        ", "#", " Check", " if", " the", " file", " has", " a", " specific", " extension", "\n", "        ", "if", " any", "(", "file", ".", "end", "sw", "ith", "(", "ext", ")", " for", " ext", " in", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]", "):", "\n", "            ", "#", " Initialize", " a", " Data", "Frame", " with", " a", " single", " '", "Text", "'", " column", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=['", "Text", "'])", "\n", "\n", "            ", "#", " Ext", "ract", " the", " file", " path", " and", " extension", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", ")", "\n", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "                ", "#", " Read", " the", " text", " file", " and", " append"], "logprobs": [-1.1783795356750488, -0.9367395043373108, -0.1412898451089859, -0.32091429829597473, -0.04229452833533287, -0.0280911922454834, -0.01390343252569437, -0.18090498447418213, -0.0009170140838250518, -0.0514582060277462, -0.013769401237368584, -0.14302769303321838, -7.986990567587782e-06, -0.00281331199221313, -8.583032467868179e-06, -0.1734558641910553, -0.0001408954558428377, -0.0049208723939955235, -1.2636104656849056e-05, -7.510157047363464e-06, -0.0020042823161929846, -0.0008843801915645599, -0.0012634160229936242, -0.04258039593696594, -0.0026955006178468466, -0.00013636612857226282, -4.172316494077677e-06, -0.03646245226264, -0.3325437307357788, -0.06361423432826996, -0.5395113825798035, -0.001400562352500856, -1.698897361755371, -0.0015310243470594287, -0.00016842853801790625, -5.602820692729438e-06, -0.0018665050156414509, -0.2212873101234436, -0.0003499372396618128, -0.0008137490367516875, -1.0596787929534912, -0.00012838016846217215, -0.00016890530241653323, -0.03274664655327797, -0.0006550788530148566, -0.055479180067777634, -0.3371586203575134, -0.11697505414485931, -0.0037401027511805296, -0.0009586982196196914, -0.008693821728229523, -0.003140163142234087, -0.3163599669933319, -0.00018273114983458072, -5.8412379075889476e-06, -0.008789422921836376, -0.016155993565917015, -0.0001137191939051263, -1.0615609884262085, -0.014177553355693817, -0.0007242917199619114, -1.0728830375228426e-06, -2.145764938177308e-06, -0.00030524839530698955, -0.00036995718255639076, -6.925819616299123e-05, -8.344646857949556e-07, -7.009260298218578e-05, -0.06491490453481674, -0.0004140473320148885, -0.0011443501571193337, -8.106198947643861e-06, -3.8742269680369645e-05, -3.576278118089249e-07, -1.5497195136049413e-06, -7.235741941258311e-05, -7.915183232398704e-05, -0.00010227633902104571, -0.0008538890979252756, -0.0078003560192883015, -0.000144709600135684, -0.1293988823890686, -1.4228824377059937, -0.4149062931537628, -0.24078263342380524, -0.31207817792892456, -0.27003800868988037, -0.15629880130290985, -0.00011276562872808427, -0.8174198269844055, -0.6985003352165222, -0.23261980712413788, -0.00013457823661156, -1.3888674974441528, -0.0009235645993612707, -0.07246673852205276, -0.0437917485833168, -0.001191621064208448, -3.755022044060752e-05, -0.0001399419124936685, -0.012369818985462189, -0.00015066919149830937, -0.025525543838739395, -1.5311659574508667, -1.9436559677124023, -0.5692118406295776, -0.17900297045707703, -0.0295290295034647, -0.003410002216696739, -0.014520097523927689, -0.0019030333496630192, -0.10292278975248337, -8.749579137656838e-05, -0.011946558952331543, -0.3353087306022644, -0.6259093284606934, -0.03681525960564613, -8.451581379631534e-05, -0.012495208531618118, 0.0, -2.3245540432981215e-05, -0.00029452278977259994, -1.2993727978027891e-05, -2.5033637939486653e-05, -6.925819616299123e-05, -0.00028975578607060015, -0.04034622758626938, -0.48668426275253296, -1.2164121866226196, -0.18201597034931183, -0.015193680301308632, -0.027742134407162666, -0.2588709890842438, -0.40512219071388245, -2.0091655254364014, -0.008823571726679802, -0.10603775084018707, -0.0004957877099514008, -0.04590427130460739, -2.525939702987671, -0.07847201824188232, -0.047867581248283386, -0.00037102968781255186, -0.06560473889112473, -5.8412379075889476e-06, -3.576278118089249e-07, -0.00423392141237855, -0.37786024808883667, -0.001482460182160139, -0.014195887371897697, -0.00027021096320822835, -0.00030191155383363366, -1.1772392988204956, -0.0012994902208447456, -0.021736135706305504, -0.002215313958004117, -8.523101132595912e-05, -0.00030012393835932016, -0.0003082277253270149, -0.0009673921740613878, -0.014067772775888443, -0.004880302120000124, -1.5258672647178173e-05, -0.0010351543314754963, -0.00015817821258679032, -0.00043585337698459625, -0.020972630009055138, -5.722029527532868e-06, -0.00017391123401466757, -5.8412379075889476e-06, -0.0027299777138978243, -0.0002401778765488416, -6.067568756407127e-05, -0.0010202685371041298, -3.6954811548639555e-06, -0.0034332876093685627, -0.00014065706636756659, -0.00045348849380388856, -0.014248657040297985, -0.1683509796857834, -4.02911376953125, -0.4932157099246979, -0.7755013704299927, -0.001389015233144164, -1.6282856464385986, -0.061684995889663696, -0.487833172082901, -0.875586211681366, -0.0015024575404822826, -0.0003367095487192273, -0.0007484733941964805, -0.3685510456562042, -0.0001746263587847352, -0.16273994743824005, -0.009701012633740902, -0.00029297350556589663, -5.960462772236497e-07, -2.038458114839159e-05, -0.009075934067368507, -0.0041105784475803375, -1.0261013507843018, -0.0016840812750160694, -0.0006655623437836766, -0.0008372138836421072, -0.05116603150963783, -0.0004047528200317174, -0.02903897874057293, -1.732677698135376, -0.0040772175416350365, -0.1191796138882637, -0.2936931550502777, -1.2337136268615723, -0.34869813919067383, -0.7493166327476501, -0.1075061708688736, -6.317892984952778e-05, -0.07481113076210022, -0.025359008461236954, -0.002594559220597148, -0.013875099830329418, -0.023568598553538322, -5.125986263010418e-06, -3.7431014789035544e-05, -4.410734163684538e-06, -0.000985375139862299, -1.6093124941107817e-05, -0.0002698534226510674, -1.4305104514278355e-06, -1.9073468138230965e-06, -3.0874729418428615e-05, -0.0003698380314745009, -3.8980677345534787e-05, -0.0003238391946069896, -2.2271032333374023, -0.0006105228094384074, -2.6349823474884033, -0.026928314939141273, -0.06092862784862518, -0.0013317534467205405, -5.960462772236497e-07, -2.3841855067985307e-07, -0.4315267503261566, -0.0015811334596946836, -0.0011324428487569094, -0.03901089355349541, -5.602820692729438e-06, -0.012949656695127487, -0.04881589114665985, -0.0022946475073695183, -0.09171206504106522, -0.2647742033004761, -0.10355821251869202, -0.5118558406829834, -0.10834387689828873, -0.5912583470344543, -2.3578104972839355], "finish_reason": "length"}], "metrics": {"energy": 1070.6613676834104, "energy_per_token": 4.182270967513322, "time": 23.409073, "time_per_token": 0.09144169140625}}
{"outputs": [{"text": "source_dir_path = Path(source_directory)\n    target_dir_path = Path(target_directory)\n\n    # Create the target directory if it doesn't exist\n    if not target_dir_path.exists():\n        os.makedirs(target_dir_path)\n\n    # Check that the source directory exists\n    if not source_dir_path.exists():\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    # Files to convert\n    files_to_convert = source_dir_path.glob('*.txt')\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.docx'))\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.xlsx'))\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.csv'))\n\n    # Count of files successfully converted\n    files_converted = 0\n\n    # Iterate over each file in the source directory\n    for file", "tokens": ["source", "_", "dir", "_", "path", " =", " Path", "(", "source", "_", "directory", ")", "\n", "    ", "target", "_", "dir", "_", "path", " =", " Path", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " target", "_", "dir", "_", "path", ".", "exists", "():", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "dir", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " that", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " source", "_", "dir", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Source", " directory", " not", " found", ":", " {", "source", "_", "directory", "}\"", ")", "\n", "\n", "    ", "#", " Files", " to", " convert", "\n", "    ", "files", "_", "to", "_", "convert", " =", " source", "_", "dir", "_", "path", ".", "glob", "('", "*", ".", "txt", "')", "\n", "    ", "files", "_", "to", "_", "convert", " =", " files", "_", "to", "_", "convert", " +", " list", "(", "source", "_", "dir", "_", "path", ".", "glob", "('", "*", ".", "doc", "x", "'))", "\n", "    ", "files", "_", "to", "_", "convert", " =", " files", "_", "to", "_", "convert", " +", " list", "(", "source", "_", "dir", "_", "path", ".", "glob", "('", "*", ".", "x", "ls", "x", "'))", "\n", "    ", "files", "_", "to", "_", "convert", " =", " files", "_", "to", "_", "convert", " +", " list", "(", "source", "_", "dir", "_", "path", ".", "glob", "('", "*", ".", "csv", "'))", "\n", "\n", "    ", "#", " Count", " of", " files", " successfully", " converted", "\n", "    ", "files", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " source", " directory", "\n", "    ", "for", " file"], "logprobs": [-2.7657856941223145, -0.10235960781574249, -1.427301287651062, -1.4503371715545654, -0.058260757476091385, -0.018078431487083435, -0.018246417865157127, -0.0012997282901778817, -0.006702205166220665, -8.106198947643861e-06, -6.6756979322235566e-06, -0.0010924329981207848, -0.0597790852189064, -0.0995679497718811, -0.20677602291107178, -0.0003955773718189448, -0.006937819067388773, -0.0018985120113939047, -0.0001289761275984347, -0.0006962973857298493, -0.0009819215629249811, -0.000700466800481081, -0.0011887634173035622, -8.344646857949556e-07, -3.135155202471651e-05, -0.0013024666113778949, -0.052656371146440506, -0.47034594416618347, -0.0002783149539027363, -1.6407753229141235, -1.4869962930679321, -0.317060649394989, -0.02649921551346779, -0.018870940431952477, -0.011975889094173908, -0.003436970291659236, -0.39729708433151245, -0.00047636605449952185, -4.088794958079234e-05, -0.011024516075849533, -0.11337903141975403, -0.0004961451631970704, -0.6412651538848877, -0.011292943730950356, -0.05097516253590584, -3.576278118089249e-07, -0.0007471630233339965, -4.887569048150908e-06, -4.768370445162873e-07, -0.0002040654799202457, -0.06273449957370758, -0.001293061301112175, -0.0006106419023126364, -0.0008744944934733212, -2.838712692260742, -3.2543604902457446e-05, -0.14199641346931458, -3.4570634852570947e-06, -3.2186455882765586e-06, -0.00011693747364915907, -0.004974963143467903, -5.125986263010418e-06, -0.0018924438627436757, -2.5510462364763953e-05, -3.576278118089249e-07, -0.04950307682156563, -0.0020886289421468973, -0.029828984290361404, -0.0012196014868095517, -0.6904259920120239, -2.6022918224334717, -2.4912312030792236, -0.17182044684886932, -0.1760978251695633, -0.03970003500580788, -0.06971344351768494, -0.1296800673007965, -0.00020037073409184813, -0.019564513117074966, -0.03243625536561012, -0.02373112551867962, -1.1920922133867862e-06, -4.732496745418757e-05, -2.50339189733495e-06, -1.1920928244535389e-07, -0.000303818320389837, -0.27481457591056824, -0.03313270956277847, -0.0003023882454726845, -0.000519617460668087, -0.02556551806628704, -0.004813630133867264, -7.045020902296528e-05, -4.6491513785440475e-06, -0.04162340983748436, -0.2575344145298004, -0.06627647578716278, -0.5523740649223328, -0.0033135293051600456, -2.883826732635498, -0.0007468056865036488, -0.06786556541919708, -0.04142499342560768, -0.01054359506815672, -1.966933996300213e-05, -0.29435405135154724, -0.0060508400201797485, -0.00010597144137136638, -0.0001245659514097497, -0.0051469444297254086, -0.00015424491721205413, -0.4605936110019684, -4.3367109298706055, -1.2596641778945923, -0.8936682343482971, -0.6221983432769775, -0.0011712603736668825, -1.4093339443206787, -0.36863529682159424, -0.09728744626045227, -0.00025293012731708586, -0.04692394658923149, -0.02335888147354126, -2.31734037399292, -1.549708758830093e-05, -0.0033694894518703222, -6.508615479106084e-05, -5.722029527532868e-06, -0.009236345067620277, -0.11105868965387344, -0.8716868162155151, -0.2449173927307129, -0.3671320974826813, -0.13171127438545227, -0.05970508232712746, -0.04621187597513199, -0.03538867458701134, -0.03890598192811012, -0.0001454247540095821, -0.000545472139492631, -4.768370445162873e-07, -0.0003400462737772614, -0.427063912153244, -0.6330310106277466, -3.814689989667386e-06, -2.3841855067985307e-07, 0.0, -1.9073468138230965e-06, -1.1388418674468994, -1.1528186798095703, -0.003251268295571208, -0.003383627627044916, -4.887569048150908e-06, -1.07287787614041e-05, -4.887569048150908e-06, 0.0, -4.053033626405522e-05, -6.41325386823155e-05, -0.003014783840626478, -0.00047362555051222444, -5.4834770708112046e-05, -0.08833407610654831, -0.0026935983914881945, -0.0005909841856919229, -0.010185289196670055, -0.0014700806932523847, -0.0032460400834679604, -1.9430925021879375e-05, -1.1444026313256472e-05, 0.0, -4.732496745418757e-05, -0.0011917401570826769, -0.0022814455442130566, -5.960462772236497e-07, 0.0, 0.0, -2.145764938177308e-06, -0.0004180987598374486, -0.004226442892104387, -0.0005197366117499769, -0.00022420754248742014, -1.5497195136049413e-06, -5.364403477869928e-06, -9.536738616588991e-07, -1.4305104514278355e-06, -9.298280929215252e-06, -1.9430925021879375e-05, -0.00042834642226807773, -0.00022587609419133514, -0.0001793938863556832, -0.05100937560200691, -0.0002115741081070155, -0.0006506709614768624, -0.0006544832140207291, -0.0018225978128612041, -0.002730690874159336, -0.0024792193435132504, -1.4066597032069694e-05, -4.2676016164477915e-05, 0.0, -1.311301275563892e-06, -0.00042274597217328846, -0.005042217206209898, -2.3841855067985307e-07, 0.0, 0.0, -0.00021038226259406656, -0.00011705666838679463, -0.00027426297310739756, -4.994744449504651e-05, -0.00012766500003635883, -2.145764938177308e-06, -2.9682672902708873e-05, -1.5497195136049413e-06, 0.0, -1.6689286894688848e-06, -5.364403477869928e-06, -8.165503095369786e-05, -0.00014423283573705703, -7.033100700937212e-05, -0.0034319807309657335, -0.0005608416395261884, -0.002844575559720397, -0.056644488126039505, -0.0002205128694185987, -0.32971933484077454, -3.1126952171325684, -0.6134288907051086, -0.6003060340881348, -0.2926488220691681, -0.008539943024516106, -0.48546284437179565, -6.09140915912576e-05, -1.0918688774108887, -0.0004319211875554174, -0.25364920496940613, -0.33949920535087585, -0.01159865316003561, -3.635817120084539e-05, -0.00016330339713022113, -0.03826964646577835, -0.0001248043408850208, -0.43614983558654785, -1.9941439628601074, -0.014404949732124805, -0.5460134148597717, -0.9559342265129089, -0.03158536180853844, -1.3022937774658203, -0.08589792996644974, -0.17924514412879944, -0.007147102151066065, -0.10920417308807373, -0.0001740304142003879, -0.005290080793201923, -0.05206063762307167], "finish_reason": "length"}], "metrics": {"energy": 1038.0566669101715, "energy_per_token": 4.054908855117858, "time": 23.41769, "time_per_token": 0.0914753515625}}
{"outputs": [{"text": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    files = [f for f in os.listdir(source_directory) if os.path.splitext(f)[1] in extensions]\n    target_directory = os.path.abspath(target_directory)\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    files_count = 0\n    for file_name in files:\n        file_path = os.path.join(source_directory, file_name)\n        if os.path.isfile(file_path):\n            file_extension = os.path.splitext(file_name)[1]\n            csv_name = os.path.splitext(file_name)[0] + '.csv'\n            csv_path = os.path.join(target_directory, csv_name)\n            try:\n                if file_extension == '.txt':\n                    with open(file_path, 'r') as file:\n                        text", "tokens": ["extensions", " =", " ['", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "x", "ls", "x", "'", ",", " '", ".", "csv", "']", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "source", "_", "directory", ")", " if", " os", ".", "path", ".", "spl", "ite", "xt", "(", "f", ")[", "1", "]", " in", " extensions", "]", "\n", "    ", "target", "_", "directory", " =", " os", ".", "path", ".", "ab", "sp", "ath", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "target", "_", "directory", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "target", "_", "directory", ")", "\n", "\n", "    ", "files", "_", "count", " =", " ", "0", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "directory", ",", " file", "_", "name", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "file", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")[", "1", "]", "\n", "            ", "csv", "_", "name", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")[", "0", "]", " +", " '", ".", "csv", "'", "\n", "            ", "csv", "_", "path", " =", " os", ".", "path", ".", "join", "(", "target", "_", "directory", ",", " c", "sv", "_", "name", ")", "\n", "            ", "try", ":", "\n", "                ", "if", " file", "_", "extension", " ==", " '", ".", "txt", "':", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "        ", "text"], "logprobs": [-2.6728062629699707, -0.23278377950191498, -1.0978227853775024, -0.0884154811501503, -0.0046892911195755005, -0.00044431351125240326, -0.00021371940965764225, -0.0058665708638727665, -0.0021664262749254704, -0.03898876532912254, -0.00419557886198163, -0.0021162275224924088, -5.543078441405669e-05, -0.000526289688423276, -0.0024754139594733715, -0.014577314257621765, -1.9311717551317997e-05, -0.0003077510336879641, -0.0020276003051549196, -5.018585216021165e-05, -0.0011636398267000914, -0.0015467357588931918, -0.0014222278259694576, -0.006745543330907822, -0.11276228725910187, -0.2341378778219223, -1.5568156242370605, -0.821097731590271, -0.48099285364151, -1.220487117767334, -0.06470988690853119, -0.0031386183109134436, -3.4689302992774174e-05, -0.10783039778470993, -8.177422569133341e-05, -0.017028316855430603, -1.0728830375228426e-06, -0.00020847532141488045, -0.028941936790943146, -6.937739817658439e-05, -1.5616295058862306e-05, -0.00374045898206532, -0.1333581656217575, -0.7125219702720642, -2.4318398573086597e-05, -3.2543604902457446e-05, -5.364403477869928e-06, -0.0812358483672142, -4.0531076592742465e-06, 0.0, -5.400034933700226e-05, -0.0023712394759058952, -0.06187046691775322, -0.005660457070916891, -0.00013052565918769687, -0.12667854130268097, -0.0012307934230193496, -0.03343919664621353, -0.011602542363107204, -0.457334041595459, -3.406146764755249, -0.09893333911895752, -0.5171297192573547, -0.05249236896634102, -2.2366485595703125, -6.437280717364047e-06, -0.006763778161257505, -0.00021789084712509066, -0.7013657093048096, -5.006777428206988e-06, -5.364403477869928e-06, -0.00040546778473071754, -0.0636507049202919, -9.894321920000948e-06, -9.536697689327411e-06, -0.0013567537534981966, -0.04335372895002365, -1.2191321849822998, -0.0006033745594322681, -0.3108702003955841, -0.05492676421999931, -0.04118764400482178, -5.960446742392378e-06, -0.0004997196956537664, -1.9788545614574105e-05, -0.08772876113653183, -7.986703712958843e-05, -0.054043643176555634, -5.125986263010418e-06, -7.152555099310121e-07, -0.002577675273641944, -0.002975443610921502, -0.00260300119407475, -0.04337484762072563, -5.125986263010418e-06, -0.11048929393291473, -4.172316494077677e-06, -2.3841855067985307e-07, -0.00014447122521232814, -0.0010707604233175516, -7.271740287251305e-06, -1.9550132492440753e-05, -0.006238036789000034, -0.0030611343681812286, -0.04225841537117958, -0.0007731309160590172, -3.2517378330230713, -0.030138911679387093, -2.2119972705841064, -0.00436757504940033, -0.1010187417268753, -0.0004377598816063255, -0.009115626104176044, -0.5244622230529785, -0.04054497182369232, -0.22892116010189056, -2.200497627258301, -0.04930644482374191, -0.0006237468332983553, -0.0018629353726282716, -0.00010799778101500124, -0.000440262199845165, -0.008002126589417458, -0.5521164536476135, -0.040540505200624466, -0.22828112542629242, -0.004726903047412634, -0.025061197578907013, -3.814689989667386e-06, -5.2689116273541003e-05, -1.2159273865108844e-05, -0.010680300183594227, -4.255681051290594e-05, -0.012751000933349133, -9.417489309271332e-06, -1.3351351299206726e-05, -7.83174327807501e-05, -0.0009370227344334126, -2.7418097943154862e-06, -2.3841855067985307e-07, -5.757642793469131e-05, -0.0025511595886200666, -0.11969343572854996, -3.2773356437683105, -0.19208461046218872, -6.365573790390044e-05, -0.0011947167804464698, -1.4305104514278355e-06, -0.6390374898910522, -0.07356724888086319, -0.00285574933513999, -0.001912789884954691, -2.7418097943154862e-06, -0.0007825411157682538, -0.039205774664878845, -0.001209600013680756, -0.005020155571401119, -1.092923879623413, -0.04513029009103775, -0.46589672565460205, -0.0007678897818550467, -0.016791200265288353, -1.9073468138230965e-06, -1.2636104656849056e-05, -3.576278118089249e-07, -0.00013612773909699172, -4.768370445162873e-07, 0.0, -1.5735502529423684e-05, -0.0005360596696846187, -9.417489309271332e-06, -0.2727149724960327, -0.01453208178281784, -0.0003871168300975114, -0.004428698215633631, -0.08230523020029068, -0.36540257930755615, -2.7278835773468018, -0.00017569905321579427, -2.885991334915161, -0.005553294438868761, -0.18715249001979828, -3.6954811548639555e-06, -1.847726889536716e-05, -1.7881377516459906e-06, -0.055125001817941666, -2.3841855067985307e-07, 0.0, -3.099393507000059e-05, -0.007597480434924364, -2.622600959512056e-06, -0.004202938638627529, -0.0014793653972446918, -0.00017820201173890382, -0.0065477825701236725, -0.03366144746541977, -0.1056692898273468, -0.00041476229671388865, -0.0012447236804291606, -5.829164365422912e-05, -0.00868377648293972, -0.050851110368967056, -0.06208525598049164, -9.464769391342998e-05, -0.07370302081108093, -0.0005963454605080187, -0.019286369904875755, -4.768370445162873e-07, -4.8993817472364753e-05, -1.9907753085135482e-05, -0.0014617482665926218, -2.109982233378105e-05, -0.0029246911872178316, -4.768370445162873e-07, -3.766942609217949e-05, -0.0001209901092806831, -0.0006163604557514191, -2.145764938177308e-06, -9.536738616588991e-07, -9.822363062994555e-05, -7.772143726469949e-05, -0.0003669780562631786, -1.4438598155975342, -2.6459274291992188, -0.00011312322021694854, -0.00041762212640605867, -0.0026376002933830023, -0.15885423123836517, -0.005168410018086433, -2.50339189733495e-06, -0.0003090619284193963, -0.061290401965379715, -0.01494238805025816, -0.00037079135654494166, -0.03765655308961868, -0.0035355696454644203, -0.0014482972910627723, -0.00019774865359067917, -0.00026520551182329655, -0.11277250945568085, -0.001065282616764307, -0.00015627116954419762, -0.002009992953389883, -9.298280929215252e-06, -0.0002643712505232543, -0.010836562141776085, -0.0375223383307457, -0.007065548561513424, -0.41515904664993286, -0.00015043080202303827, -1.1418190002441406, -0.011593939736485481, -0.0002553137019276619, -6.723177648382261e-05, -0.0006393534131348133, -0.43453559279441833], "finish_reason": "length"}], "metrics": {"energy": 1037.1262661762241, "energy_per_token": 4.0512744772508755, "time": 23.397823, "time_per_token": 0.09139774609375}}
{"outputs": [{"text": "# Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Set the number of files successfully converted to 0\n    num_converted = 0\n\n    # Walk through the source directory and process each file\n    for dirpath, dirnames, filenames in os.walk(source_directory):\n        for filename in filenames:\n            # Join the dirpath with the filename to get the absolute path of the file\n            filepath = os.path.join(dirpath, filename)\n\n            # Check if the file has a supported extension\n            _, file_extension = os.path.splitext(filename)\n            if file_extension.lower() not in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n                continue\n\n            # Process the file based on its extension\n            if file_extension.lower() == \".txt\":\n                with open(filepath, \"r\") as file:\n                    content = file.read()\n            elif file_extension.", "tokens": ["#", " Create", " the", " target", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "Path", "(", "target", "_", "directory", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Set", " the", " number", " of", " files", " successfully", " converted", " to", " ", "0", "\n", "    ", "num", "_", "converted", " =", " ", "0", "\n", "\n", "    ", "#", " Walk", " through", " the", " source", " directory", " and", " process", " each", " file", "\n", "    ", "for", " dir", "path", ",", " dir", "names", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "source", "_", "directory", "):", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "#", " Join", " the", " dir", "path", " with", " the", " filename", " to", " get", " the", " absolute", " path", " of", " the", " file", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "dir", "path", ",", " filename", ")", "\n", "\n", "            ", "#", " Check", " if", " the", " file", " has", " a", " supported", " extension", "\n", "            ", "_", ",", " file", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "filename", ")", "\n", "            ", "if", " file", "_", "extension", ".", "lower", "()", " not", " in", " [", "\"", ".", "txt", "\"", ",", " \"", ".", "doc", "x", "\"", ",", " \"", ".", "x", "ls", "x", "\"", ",", " \"", ".", "csv", "\"", "]:", "\n", "                ", "continue", "\n", "\n", "            ", "#", " Process", " the", " file", " based", " on", " its", " extension", "\n", "            ", "if", " file", "_", "extension", ".", "lower", "()", " ==", " \"", ".", "txt", "\":", "\n", "                ", "with", " open", "(", "file", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "                ", "    ", "content", " =", " file", ".", "read", "()", "\n", "            ", "elif", " file", "_", "extension", "."], "logprobs": [-1.1783795356750488, -2.1326394081115723, -0.3830644488334656, -0.02666962519288063, -0.020881570875644684, -0.009815641678869724, -0.002303210785612464, -0.4536854326725006, -0.00044764988706447184, -5.8412379075889476e-06, -0.01946748048067093, -0.08007058501243591, -0.002477792324498296, -0.9394908547401428, -0.004662475548684597, -0.003214194905012846, -2.706014311115723e-05, -9.65590606938349e-06, -0.0006761648692190647, -0.00013851160474587232, -9.953480184776708e-05, -5.960462772236497e-07, -0.0002449450839776546, -0.09980252385139465, -0.000795762927737087, -0.00344469235278666, -2.992108420585282e-05, -0.000102037942269817, -4.768370445162873e-07, -7.152555099310121e-07, -0.0001736728590913117, -9.011816291604191e-05, -0.00016544880054425448, -0.001807485707104206, -0.07320091128349304, -0.0001833270798670128, -0.251061350107193, -3.770111560821533, -0.4619576036930084, -2.737863302230835, -0.002651867689564824, -0.5997795462608337, -0.5351870059967041, -0.006429936736822128, -0.11758274585008621, -1.419426679611206, -9.405170567333698e-05, -0.05926847457885742, -8.391981828026474e-05, -1.5312315225601196, -0.0020848223939538, -0.5145480632781982, -0.19751660525798798, -0.0007899263291619718, -1.1920858014491387e-05, -0.0015704215038567781, -0.015507355332374573, -0.00022754464589525014, -0.022264869883656502, -3.955997943878174, -0.30383437871932983, -0.24865998327732086, -0.22313745319843292, -0.002305113710463047, -0.42891454696655273, -3.1066064834594727, -0.24776126444339752, -0.02936558984220028, -0.22890892624855042, -0.00018356545479036868, -0.014512107707560062, -1.9859968423843384, -0.09935523569583893, -0.0008032671175897121, -0.44378000497817993, -0.0011841197265312076, -2.276871418871451e-05, -0.004281402565538883, 0.0, -3.576278118089249e-07, -0.00013136000779923052, -0.0006827168981544673, -1.3112935448589269e-05, -3.576214658096433e-05, -6.878139538457617e-05, -0.003388023469597101, -4.768360213347478e-06, -6.198863957251888e-06, -0.00762906763702631, -0.0009776342194527388, -0.007922534830868244, -0.063480444252491, -0.12689140439033508, -4.053033626405522e-05, -0.00033361115492880344, 0.0, -5.960462772236497e-07, -2.062299427052494e-05, -0.00031156453769654036, -0.006957707926630974, -0.3322552442550659, -3.904541015625, -0.015581886284053326, -2.534209728240967, -0.00613437220454216, -2.437722682952881, -0.05897722393274307, -0.03500428423285484, -0.0994429811835289, -0.09591982513666153, -0.013669218868017197, -3.021482467651367, -0.7984957098960876, -0.590872049331665, -0.04404821619391441, -0.029059244319796562, -0.014153223484754562, -0.0001778444420779124, -0.10145462304353714, -0.6733160614967346, -0.0007334641413763165, -0.005879014730453491, -8.344646857949556e-07, -0.00010549465514486656, -1.9073468138230965e-06, -0.001400562352500856, -5.245195097813848e-06, -0.0014690094394609332, -2.753696753643453e-05, -4.088794958079234e-05, -5.686121585313231e-05, -1.8715683836489916e-05, -0.00021920185827184469, -0.067552849650383, -0.00031680811662226915, -0.01966223493218422, -1.0962082147598267, -0.31693241000175476, -0.011910395696759224, -0.024456003680825233, -0.40705329179763794, -0.34811437129974365, -0.8708728551864624, -0.025876305997371674, -0.19534389674663544, -0.0001436368766007945, -2.8935611248016357, -0.0029295645654201508, -1.624614953994751, -0.008864219300448895, -0.14139117300510406, -6.365573790390044e-05, -7.414542778860778e-05, -2.3841855067985307e-07, -6.198863957251888e-06, -1.1920928244535389e-07, -8.106198947643861e-06, -1.1920928244535389e-07, 0.0, -3.242440288886428e-05, -0.2545408010482788, -0.0414937287569046, -0.0016657537780702114, -0.04928386211395264, -0.08973563462495804, -0.01599821448326111, -0.00043299360550008714, -0.00019631843315437436, -1.0928887128829956, -0.006626536604017019, -0.0018681708024814725, -0.8469860553741455, -1.6689286894688848e-06, -2.509629964828491, -0.07198265194892883, -0.0011525661684572697, -0.004578701686114073, -2.396077979938127e-05, -0.00019226610311307013, -0.00034278715611435473, -6.174850568640977e-05, -0.01041371375322342, -0.0024764842819422483, -6.437280717364047e-06, -0.0008974815136753023, -0.00017474555352237076, -3.755022044060752e-05, -0.017774110659956932, -3.2186455882765586e-06, -0.00020168177434243262, -3.814689989667386e-06, -0.0020535350777208805, -0.0005578630371019244, -0.0001225396408699453, -0.0012243640376254916, -7.748573807475623e-06, -0.0012688927818089724, -0.0008877150830812752, -0.00012587709352374077, -0.11539866030216217, -0.018898196518421173, -0.005874392576515675, -0.0003518439189065248, -0.056833941489458084, -2.3299953937530518, -0.06605454534292221, -0.01692318543791771, -0.1012948751449585, -3.707340147229843e-05, -0.01689552329480648, -0.016666699200868607, -0.09574901312589645, -0.0006272017490118742, -0.11214344948530197, -0.013772811740636826, -0.0017726197838783264, -1.0490362910786644e-05, -0.2090764194726944, -0.0001716466504149139, -1.2993727978027891e-05, -0.04804972559213638, -0.03659071773290634, -0.0002008474839385599, -0.01741967722773552, -0.0007615765207447112, -0.0012043612077832222, -0.0004707658663392067, -1.3817088603973389, -6.496695277746767e-05, -5.435795901576057e-05, -0.001049682730808854, -1.0013530300057027e-05, -0.010698345489799976, -0.08998516947031021, -0.002031526295468211, -0.0001931004080688581, -0.4558936655521393, -5.722029527532868e-06, -0.34476831555366516, -0.0016812250250950456, -0.0008598444401286542, -4.875540980719961e-05, -0.0001958416833076626, -1.6114344596862793, -0.000568228424526751, -0.005535037722438574, -3.7431014789035544e-05, -2.7418097943154862e-06, -0.017190150916576385, -0.06008974835276604, -0.9612780213356018, -0.002116465475410223, -0.0004111875023227185, -0.0001817776501411572, -1.0728830375228426e-06, -0.00019202772818971425], "finish_reason": "length"}], "metrics": {"energy": 1043.1622366065983, "energy_per_token": 4.074852486744525, "time": 23.375154, "time_per_token": 0.0913091953125}}
