{"outputs": [{"text": "source_path_exists = pathlib.Path(source_path).exists()\n    if not source_path_exists:\n        raise ValueError(\"Source path does not exist.\")\n\n    source_path_is_directory = pathlib.Path(source_path).is_dir()\n    if not source_path_is_directory:\n        raise ValueError(\"Source path is not a directory.\")\n\n    dest_dir_path = pathlib.Path(destination_path).resolve()\n    dest_dir_path.mkdir(exist_ok=True, parents=True)\n\n    dest_files_list = []\n\n    for source_path in pathlib.Path(source_path).rglob('*'):\n        if not source_path.is_file():\n            continue\n\n        source_path_name = source_path.name\n        source_path_name_no_ext = source_path_name.rsplit('.', 1)[0]\n        dest_file_path = pathlib.Path(dest_dir_path) / source_path_name_", "tokens": ["source", "_", "path", "_", "exists", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "exists", "()", "\n", "    ", "if", " not", " source", "_", "path", "_", "exists", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "source", "_", "path", "_", "is", "_", "directory", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "()", "\n", "    ", "if", " not", " source", "_", "path", "_", "is", "_", "directory", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "dest", "_", "dir", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", "\n", "    ", "dest", "_", "dir", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ",", " parents", "=", "True", ")", "\n", "\n", "    ", "dest", "_", "files", "_", "list", " =", " []", "\n", "\n", "    ", "for", " source", "_", "path", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "rg", "lob", "('", "*", "')", ":", "\n", "        ", "if", " not", " source", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "continue", "\n", "\n", "        ", "source", "_", "path", "_", "name", " =", " source", "_", "path", ".", "name", "\n", "        ", "source", "_", "path", "_", "name", "_", "no", "_", "ext", " =", " source", "_", "path", "_", "name", ".", "r", "split", "('", ".", "'", ",", " ", "1", ")[", "0", "]", "\n", "        ", "dest", "_", "file", "_", "path", " =", " path", "lib", ".", "Path", "(", "dest", "_", "dir", "_", "path", ")", " /", " source", "_", "path", "_", "name", "_"], "logprobs": [-1.7907296419143677, -0.04377508908510208, -0.1359938234090805, -2.683481216430664, -2.60882568359375, -0.15494048595428467, -0.35715699195861816, -0.002101714489981532, -0.000192504478036426, -0.006184369325637817, -0.02328166924417019, -0.006261848844587803, -1.8358061424805783e-05, -1.6689160474925302e-05, -0.0012491289526224136, -0.01602073945105076, -0.5087619423866272, -0.00465808529406786, -0.055278532207012177, -0.17688840627670288, -0.55887770652771, -0.11217158287763596, -0.011826284229755402, -0.00013660451804753393, -2.4199192921514623e-05, -0.003133032936602831, -1.3589766240329482e-05, -0.030487017706036568, -0.01303955726325512, -0.0017778557958081365, -0.06404928863048553, -0.028282999992370605, -5.1020273531321436e-05, -0.3261089026927948, -1.298026204109192, -1.0825176239013672, -0.361225962638855, -0.19632063806056976, -0.0010186012368649244, -0.015231955796480179, -0.9702914357185364, -0.05843258649110794, -0.002419284777715802, -0.0050346264615654945, -0.5479862093925476, -0.00030012393835932016, -0.8748999834060669, -0.012430572882294655, -0.25547704100608826, -0.10760176926851273, -0.13164345920085907, -0.11289560794830322, -1.3781428337097168, -0.0066351811401546, -0.05258432403206825, -3.6000557884108275e-05, -4.9232225137529895e-05, -0.0003965306677855551, -0.003095242427662015, -0.00428733741864562, -2.3007127310847864e-05, -1.764281842042692e-05, -0.015027412213385105, -0.0014686522772535682, -0.002655196702107787, -2.3841855067985307e-07, -0.0011076750233769417, -0.002428322797641158, -0.0019200476817786694, -0.007369239814579487, -0.0029205309692770243, -0.006682193372398615, -0.000681883015204221, -9.65590606938349e-06, -3.313963316031732e-05, -0.00029571453342214227, -0.0020582936704158783, -5.543078441405669e-05, -6.270212179515511e-05, -0.000618624035269022, -0.0007005859515629709, -0.00043275527423247695, -0.013675921596586704, -0.005935542285442352, -8.583032467868179e-06, -0.011521940119564533, -0.06335591524839401, -0.09635468572378159, -0.007759666070342064, -0.13518449664115906, -0.00502917030826211, -0.009458609856665134, -0.02055930159986019, -0.03100975975394249, -0.0030961930751800537, -0.00035661060246638954, -0.0009787060553207994, -0.020518075674772263, -0.0005766874528490007, -3.743391513824463, -0.03585963696241379, -1.4847580194473267, -0.3944673240184784, -0.9329376816749573, -1.0242257118225098, -0.018999025225639343, -2.5152843591058627e-05, -0.00011312322021694854, -0.001474246964789927, -0.001430798671208322, -0.005504451226443052, -8.713819261174649e-05, -9.179073458653875e-06, -0.0008216104470193386, -1.3554060459136963, -1.0080090761184692, -0.008859965018928051, -0.09307046234607697, -0.1055445447564125, -0.7563527226448059, -0.00044264530879445374, -0.012047267518937588, -0.004501804243773222, -0.18460392951965332, -0.08585712313652039, -0.01332802977412939, -3.1709168979432434e-05, -0.0008902162662707269, -1.4996548891067505, -0.00015722469834145159, -1.156323378381785e-05, -0.0032654081005603075, -0.0046506100334227085, -0.1858561635017395, -0.004986706655472517, -0.00019822540343739092, -0.0054865493439137936, -0.044270288199186325, -0.01701214350759983, -0.13837595283985138, -0.00024291902082040906, -2.6059231758117676, -0.0077174361795187, -2.385148048400879, -1.4439101219177246, -0.7844531536102295, -0.05195346474647522, -0.10608299821615219, -0.008615112863481045, -1.045046329498291, -0.0001998939987970516, -0.14543291926383972, -2.273392677307129, -0.004962983075529337, -1.5199191570281982, -1.6372532844543457, -0.5847389698028564, -0.0005684667266905308, -7.664863369427621e-05, -0.003937113098800182, -0.004127199295908213, -0.0031480062752962112, -3.7431014789035544e-05, -0.00019596086349338293, -0.00689259497448802, -7.319182623177767e-05, -1.024407982826233, -0.0008266131044365466, -0.7798140645027161, -0.036155056208372116, -0.17746585607528687, -0.0006295844214037061, -0.033579837530851364, -0.03291507065296173, -0.6766149997711182, -1.786414623260498, -0.025351105257868767, -5.98412734689191e-05, -4.7444173105759546e-05, -0.0013192531187087297, -0.11371902376413345, -1.5497195136049413e-06, -0.4007706046104431, -0.0384545773267746, -0.035840775817632675, -0.0007715824176557362, -0.04456653818488121, -0.03185410052537918, -0.48757317662239075, -0.00010978573118336499, -1.8125419616699219, -0.004397721495479345, -0.6979153752326965, -0.49879828095436096, -1.7247169017791748, -0.060146771371364594, -0.08982434123754501, -0.000105375460407231, -1.3828182090946939e-05, -0.0008794969180598855, -0.042352691292762756, -0.01610250398516655, -0.1459221988916397, -1.5484379529953003, -0.0009871615329757333, -0.10328710824251175, -0.06309539824724197, -1.7352328300476074, -0.22546933591365814, -1.7903560400009155, -0.032818980515003204, -0.4860454797744751, -0.24189956486225128, -0.43988144397735596, -9.476689592702314e-05, -7.378782902378589e-05, -0.19249849021434784, -0.00027998341829515994, -0.08166252821683884, -1.2926559448242188, -0.08431589603424072, -0.20511598885059357, -0.0003036991402041167, -0.12389811873435974, -0.00011443436960689723, -0.6625211238861084, -0.005120971240103245, -0.0060643479228019714, -0.001904699020087719, -0.00022635281493421644, -0.058355558663606644, -0.33661338686943054, -0.518052339553833, -0.001636000582948327, -0.9078425168991089, -0.06250428408384323, -0.1857764720916748, -0.02215142734348774, -1.5921330451965332, -0.0006152882124297321, -6.747018051100895e-05, -0.008818491362035275, -0.021317755803465843, -0.6044942140579224, -1.4185804502631072e-05, -0.002386342966929078, -2.539125671319198e-05, -4.410734163684538e-06, -1.2460472583770752, -0.12838417291641235, -0.31469884514808655, -0.00019369633810129017, -0.00012742661056108773, -0.026369649916887283, -0.0029332491103559732, -1.9325803518295288], "finish_reason": "length"}], "metrics": {"energy": 337.743473941803, "energy_per_token": 1.319310445085168, "time": 12.778912, "time_per_token": 0.049917625}}
{"outputs": [{"text": "try:\n        source_path = pathlib.Path(source_path)\n        destination_path = pathlib.Path(destination_path)\n\n        if not source_path.exists() or not source_path.is_dir():\n            raise ValueError(\"The source path must exist and be a directory.\")\n\n        file_names = []\n\n        for file in source_path.glob(\"**/*.txt\"):\n            if file.name.startswith(\"file_\"):\n                shutil.copy(file, destination_path)\n                file_names.append(file.name)\n\n        return (str(source_path), file_names)\n\n    except ValueError as err:\n        print(\"Error:\", err)", "tokens": ["try", ":", "\n", "        ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "        ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "\n", "        ", "if", " not", " source", "_", "path", ".", "exists", "()", " or", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " source", " path", " must", " exist", " and", " be", " a", " directory", ".", "\"", ")", "\n", "\n", "        ", "file", "_", "names", " =", " []", "\n", "\n", "        ", "for", " file", " in", " source", "_", "path", ".", "glob", "(", "\"", "**", "/*", ".", "txt", "\"", "):", "\n", "            ", "if", " file", ".", "name", ".", "start", "sw", "ith", "(", "\"", "file", "_", "\"", "):", "\n", "                ", "sh", "util", ".", "copy", "(", "file", ",", " destination", "_", "path", ")", "\n", "                ", "file", "_", "names", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "        ", "return", " (", "str", "(", "source", "_", "path", ")", ",", " file", "_", "names", ")", "\n", "\n", "    ", "except", " Value", "Error", " as", " err", ":", "\n", "        ", "print", "(", "\"", "Error", ":\"", ",", " err", ")", "\n", "\n", "#"], "logprobs": [-2.139524221420288, -0.0008517451351508498, -0.00546947680413723, -0.010864274576306343, -0.6822549700737, -0.05424736067652702, -0.3390432298183441, -0.1287917196750641, -0.09057386964559555, -0.0004049911512993276, -8.165503095369786e-05, -0.01647382229566574, -0.005074359942227602, -0.004331017844378948, -5.6622808187967166e-05, -2.825220326485578e-05, -0.0019195717759430408, -0.27969810366630554, -0.21719959378242493, -1.0227636098861694, -0.005822720471769571, -0.002316531492397189, -0.0018887552432715893, -0.0024334362242370844, -2.6940935640595853e-05, -0.0001070442158379592, -0.0008328068652190268, -0.00025376438861712813, -0.001335444045253098, -2.4437606043647975e-05, -1.4543427823809907e-05, -0.00036554806865751743, -0.004609554074704647, -1.6829679012298584, -0.11772602796554565, -0.17201799154281616, -0.23160943388938904, -0.027021724730730057, -3.58813522325363e-05, -4.2437604861333966e-05, -0.0009710840531624854, -0.5326977968215942, -0.8060764074325562, -0.005229247268289328, -0.03022531419992447, -0.03574439138174057, -4.851700214203447e-05, -9.894321920000948e-06, -3.1709168979432434e-05, -0.00031573555315844715, -9.417489309271332e-06, -0.0015330478781834245, -0.005891221109777689, -0.00620865635573864, -0.0013003236381337047, -0.02291298471391201, -0.014485319145023823, -2.0265373677830212e-05, -0.34623196721076965, -0.6468434929847717, -1.7022064924240112, -0.3315601646900177, -0.4700630307197571, -0.982128918170929, -0.9703499674797058, -0.013819488696753979, -0.07226880639791489, -0.01397620141506195, -0.03975835070014, -0.21158532798290253, -0.004221813287585974, -0.0004051103023812175, -0.0031254275236278772, -0.21293489634990692, -0.07204798609018326, -3.006807565689087, -0.021033329889178276, -0.8476330041885376, -0.0886632651090622, -0.27548667788505554, -0.021074067801237106, -1.010725736618042, -0.0006756883230991662, -0.07079333066940308, -0.49798527359962463, -0.7545187473297119, -0.09293924272060394, -0.0003082277253270149, -1.2159273865108844e-05, -0.000129691296024248, -2.847285747528076, -1.0588492155075073, -0.007974098436534405, -1.0143039226531982, -0.007320130243897438, -0.34143492579460144, -0.2635524868965149, -0.0011650687083601952, -0.004379562567919493, -0.04345589131116867, -0.010306941345334053, -1.1457784175872803, -0.4128879904747009, -0.03027365915477276, -1.7106950283050537, -0.9110280871391296, -0.37970808148384094, -6.6756979322235566e-06, 0.0, -0.23721455037593842, -0.016942759975790977, -0.1369042843580246, -0.21041516959667206, -0.16386501491069794, -0.36168214678764343, -0.05243196338415146, -0.0021340709645301104, -2.640256643295288, -0.00021169328829273582, -9.107174992095679e-05, -0.000593962671700865, -0.2681431770324707, -0.21870207786560059, -0.027773091569542885, -0.021730653941631317, -9.30981186684221e-05, -9.417489309271332e-06, -0.09728939086198807, -0.010074008256196976, -0.018963584676384926, -0.039107419550418854, -0.001951339072547853, -0.01905025541782379, -0.0011829291470348835, -0.0005754960584454238, -0.0006478118011727929, -0.028167571872472763, -0.005109704099595547, -0.021364431828260422, -0.04528991878032684, -0.0026349846739321947, -0.07174789160490036, -0.04971078410744667, -0.06604918837547302, -1.3877766132354736, -2.8850347995758057, -0.0008012421894818544, -0.008644422516226768, -9.119095193454996e-05, -2.1815061700181104e-05, -0.7080128192901611, -0.014207287691533566, -0.015279152430593967, -2.109982233378105e-05, -2.6464111215318553e-05, -0.0029970749747008085, -0.005056213121861219, -0.7788344025611877, -0.007091589737683535, -0.008388759568333626, -1.597475528717041, -2.5033637939486653e-05, -0.05953459441661835, -1.9320286512374878, -0.004350127186626196, -0.004279740620404482, -0.0023652929812669754, -0.2585795223712921, -0.018115542829036713, -1.4639530181884766, -1.1782588958740234, -0.8486697673797607, -0.00766869867220521, -0.10304926335811615, -0.16372060775756836, -0.09320317953824997, -0.47583863139152527, -2.096493721008301], "finish_reason": "stop"}], "metrics": {"energy": 187.4164182987214, "energy_per_token": 1.0529012263973112, "time": 7.5803576, "time_per_token": 0.04258627865168539}}
{"outputs": [{"text": "# Check if the source path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"source_path must be an existing, accessible directory.\")\n\n    # Get all the files in the source path and move them to the destination path\n    filenames = shutil.move(source_path, destination_path)\n    return (source_path, filenames)", "tokens": ["#", " Check", " if", " the", " source", " path", " exists", " and", " is", " a", " directory", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "path", " must", " be", " an", " existing", ",", " accessible", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " all", " the", " files", " in", " the", " source", " path", " and", " move", " them", " to", " the", " destination", " path", "\n", "    ", "fil", "en", "ames", " =", " shut", "il", ".", "move", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "    ", "return", " (", "source", "_", "path", ",", " fil", "en", "ames", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.139058828353882, -1.332573413848877, -0.6591485142707825, -1.19691801071167, -0.0657239630818367, -1.1956017017364502, -0.2593744993209839, -0.3003031015396118, -0.04430404677987099, -0.01264165248721838, -0.024190273135900497, -0.2625114917755127, -0.0039955321699380875, -0.09389103949069977, -0.024531150236725807, -0.6706510782241821, -0.0012359131360426545, -9.345571743324399e-05, -0.004647168796509504, -0.02471131458878517, -0.0016046992968767881, -9.297892393078655e-05, -2.312633478140924e-05, -0.001209600013680756, -4.3987260141875595e-05, -0.23100119829177856, -4.6491513785440475e-06, -0.0007487116381525993, -0.003655301406979561, -0.0033244602382183075, -0.0012041230220347643, -0.03554687649011612, -0.005670533049851656, -1.2397689715726301e-05, -0.15342633426189423, -0.6774296164512634, -1.9381170272827148, -0.025817060843110085, -0.0034165363758802414, -0.4050208330154419, -0.03488122671842575, -0.7438781261444092, -0.009632418863475323, -0.29438886046409607, -0.0140843465924263, -0.0037467535585165024, -1.3356623649597168, -0.0055400170385837555, -0.00044824567157775164, -0.0042130290530622005, -0.09390221536159515, -0.0008481719414703548, -0.1754520684480667, -1.9659368991851807, -1.7106341123580933, -2.1481590270996094, -0.316471666097641, -0.2677973210811615, -0.03455491364002228, -0.2248394638299942, -2.6203012466430664, -1.9701576232910156, -4.49295711517334, -0.03873500972986221, -0.06630012392997742, -0.08462231606245041, -0.01980658248066902, -0.2297469675540924, -0.10974770784378052, -0.005757889710366726, -1.7058286666870117, -0.0004295380203984678, -8.415821503149346e-05, -0.03128674253821373, -1.5188448429107666, -0.00034767304896377027, -3.0397906812140718e-05, -2.005403757095337, -1.2237168550491333, -0.5411686897277832, -0.00010144196130568162, -0.00016783259343355894, -0.019181357696652412, -0.012541946023702621, -0.0004621868138201535, -7.748573807475623e-06, -0.26530876755714417, -0.12497578561306, -0.9712039232254028, -0.410523921251297, -1.3769534826278687, -0.5497156977653503, -0.00018475732940714806, -0.00011801023356383666, -0.11411026865243912, -0.053443875163793564, -4.410734163684538e-06, -2.0265558760002023e-06, -1.130638837814331, -3.576278118089249e-07, -3.576278118089249e-07, -3.766942609217949e-05, -0.00022373080719262362, -0.2677071988582611], "finish_reason": "stop"}], "metrics": {"energy": 121.53535480499268, "energy_per_token": 1.1686091808172372, "time": 4.426181, "time_per_token": 0.04255943269230769}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    destination = pathlib.Path(destination_path).resolve()\n    if not destination.exists():\n        destination.mkdir(parents=True, exist_ok=True)\n\n    copied = []\n    for path in pathlib.Path(source_path).iterdir():\n        if path.is_file():\n            path.rename(destination / path.name)\n            copied.append(str(path.name))\n\n    return source_path, copied", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "destination", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", "\n", "    ", "if", " not", " destination", ".", "exists", "():", "\n", "        ", "destination", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "cop", "ied", " =", " []", "\n", "    ", "for", " path", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " path", ".", "is", "_", "file", "():", "\n", "            ", "path", ".", "rename", "(", "destination", " /", " path", ".", "name", ")", "\n", "            ", "cop", "ied", ".", "append", "(", "str", "(", "path", ".", "name", "))", "\n", "\n", "    ", "return", " source", "_", "path", ",", " copied"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -0.2582166790962219, -0.00014029949670657516, -0.003722169203683734, -0.013481409288942814, -0.017332278192043304, -0.0022701462730765343, -0.03535196930170059, -0.012435165233910084, -3.683499380713329e-05, -0.3537939190864563, -0.6604689359664917, -0.43986254930496216, -0.663535475730896, -0.008961929939687252, -8.928377064876258e-05, -0.00039426659350283444, -0.0588766373693943, -0.15282686054706573, -0.021483799442648888, -0.055895574390888214, -0.21148759126663208, -0.6507788896560669, -0.0006703275139443576, -0.006816585548222065, -0.49132922291755676, -0.0006646093097515404, -3.5912396907806396, -2.536494016647339, -0.0993051528930664, -9.226373367710039e-05, -3.58813522325363e-05, -0.0034282978158444166, -0.0046614077873528, -0.00964918453246355, -0.0003854485403280705, -9.65590606938349e-06, -0.0016264794394373894, -1.668367624282837, -0.8803848028182983, -0.011380636133253574, -0.08371987193822861, -0.3085404634475708, -0.5184096097946167, -0.056132953613996506, -0.06089520454406738, -0.0005276002921164036, -0.6045114994049072, -0.013239096850156784, -0.009623563848435879, -0.0013871104456484318, -0.2501012980937958, -0.004470473621040583, -0.007613688241690397, -6.05564855504781e-05, -0.2909044027328491, -0.1596076339483261, -0.0036712170112878084, -0.0020799448247998953, -1.0901890993118286, -0.011224223300814629, -2.622600959512056e-06, -0.00012134769349358976, -0.000519617460668087, -0.0519406758248806, -0.010488742962479591, -0.02139115333557129, -0.3053952157497406, -0.0007826602668501437, -2.7296135425567627, -0.015282792039215565, -2.324977397918701, -0.1463293731212616, -0.00646381126716733, -0.18392357230186462, -0.11483501642942429, -2.4083495140075684, -0.06529422104358673, -0.21824292838573456, -0.00022313489171210676, -8.296622399939224e-05, -0.004577870946377516, -0.0023456697817891836, -0.004075199365615845, -0.00034457468427717686, -1.4662635294371285e-05, -0.0034708278253674507, -0.0001716466504149139, -0.596674919128418, -0.0006781900301575661, -0.0015676839975640178, -0.0075415195897221565, -0.007712468039244413, -0.2054848074913025, -0.18444880843162537, -0.0010683787986636162, -0.03856458142399788, -1.2278481335670222e-05, -0.052516236901283264, -0.08455023914575577, -0.00792206171900034, -0.0018893502419814467, -2.516649007797241, -0.15187928080558777, -2.594939708709717, -0.0021340709645301104, -0.21633973717689514, -0.13113312423229218, -0.03666576370596886, -0.007534657139331102, -0.01374318078160286, -0.005249881185591221, -0.021258123219013214, -0.00629987521097064, -0.006562231108546257, -1.1920922133867862e-06, -0.007770785130560398, -0.0005383234238252044, -0.0021490592043846846, -2.648420810699463, -0.0006727101281285286, -0.01480884850025177, -0.31154361367225647, -0.24460287392139435, -0.004017141181975603, -0.0019405120983719826, -0.36894091963768005, -0.0021046886686235666, -0.06009884178638458, -0.8720415234565735, -0.0016249321633949876, -0.00020358874462544918, -0.07323980331420898, -0.00238788896240294], "finish_reason": "stop"}], "metrics": {"energy": 160.0359443025589, "energy_per_token": 1.1036961676038546, "time": 6.3035645, "time_per_token": 0.043472858620689656}}
{"outputs": [{"text": "# Check if the source directory exists\n    if not source_path:\n        raise ValueError(\"Invalid source_path provided.\")\n    if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist.\")\n\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"{source_path} is not a directory.\")\n\n    # Check if the destination directory exists\n    if not destination_path:\n        raise ValueError(\"Invalid destination_path provided.\")\n    if not os.path.exists(destination_path):\n        os.mkdir(destination_path)\n    elif not os.path.isdir(destination_path):\n        raise ValueError(f\"{destination_path} is not a directory.\")\n\n    # Get a list of file names in the source directory\n    file_names = []\n    for root, _, files in os.walk(source_path):\n        for file_name in files:\n            file_names.append(file_name)\n    file_names", "tokens": ["#", " Check", " if", " the", " source", " directory", " exists", "\n", "    ", "if", " not", " source", "_", "path", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " source", "_", "path", " provided", ".", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " destination", " directory", " exists", "\n", "    ", "if", " not", " destination", "_", "path", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " destination", "_", "path", " provided", ".", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "destination", "_", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "destination", "_", "path", ")", "\n", "    ", "elif", " not", " os", ".", "path", ".", "is", "dir", "(", "destination", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "destination", "_", "path", "}", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " file", " names", " in", " the", " source", " directory", "\n", "    ", "file", "_", "names", " =", " []", "\n", "    ", "for", " root", ",", " _", ",", " files", " in", " os", ".", "walk", "(", "source", "_", "path", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "file", "_", "names", ".", "append", "(", "file", "_", "name", ")", "\n", "    ", "file", "_", "names"], "logprobs": [-2.139058828353882, -1.332573413848877, -0.6591485142707825, -1.19691801071167, -0.0657239630818367, -1.0215179920196533, -0.1243041455745697, -0.7970373630523682, -0.004206856247037649, -0.23775547742843628, -0.02842182107269764, -3.096759557723999, -0.00048601735034026206, -0.0008613928221166134, -1.6491063833236694, -0.010455947369337082, -0.0014431786257773638, -0.11400433629751205, -0.03307700529694557, -2.7656173188006505e-05, -0.36075326800346375, -0.1759810596704483, -2.4701199531555176, -0.19278764724731445, -1.8885889053344727, -0.005853889975696802, -3.5658481121063232, -0.5426046848297119, -0.2153262346982956, -0.001053850632160902, -0.006302836816757917, -0.5164169669151306, -0.6660290956497192, -0.059034984558820724, -0.9734207391738892, -0.00044145373976789415, -0.0017283515771850944, -0.0029245722107589245, -1.2104296684265137, -0.00039915222441777587, -0.0039044588338583708, -1.4662635294371285e-05, -8.106198947643861e-06, -0.02157631888985634, -0.00930780079215765, -0.0007664603181183338, -0.046744782477617264, -0.1363200843334198, -2.2172682292875834e-05, -0.012579263187944889, -0.874104917049408, -0.026173872873187065, -0.9586513042449951, -0.007386989891529083, -0.00021169328829273582, -9.667406266089529e-05, -0.020053032785654068, -0.33161696791648865, -0.0014230611268430948, -0.016429144889116287, -0.2453111857175827, -0.04008617252111435, -0.00028153270250186324, -0.0023248568177223206, -1.7621062994003296, -0.0007238152320496738, -1.433138132095337, -0.05966858193278313, -0.03151443973183632, -0.0001784403866622597, -0.0001668790791882202, -0.0015442363219335675, -0.00436223391443491, -0.0035185827873647213, -0.00017271934484597296, -0.002064479747787118, -1.4185804502631072e-05, -7.629365427419543e-06, -0.0020317642483860254, -0.00941361766308546, -0.0006973695708438754, -0.01683937758207321, -0.010505965910851955, -5.364403477869928e-06, -0.005019799806177616, -0.1959422528743744, -0.005265890154987574, -0.043721117079257965, -0.00175453198608011, -0.00013314791431184858, -5.23315102327615e-05, -0.0012503195321187377, -0.022965995594859123, -0.010213137604296207, -0.01325850747525692, -0.07402544468641281, -0.054118745028972626, -0.007871204987168312, -0.0001934579631779343, -0.0012852036161348224, -0.04298723489046097, -0.0016102931695058942, -0.21543800830841064, -1.3108073472976685, -0.03659198433160782, -0.0969778522849083, -0.023295411840081215, -0.10419312119483948, -0.05693507194519043, -0.48385512828826904, -0.002386699663475156, -0.032679613679647446, -0.0970296710729599, -0.7736344337463379, -4.255681051290594e-05, -6.556489552167477e-06, -0.02123338170349598, -0.001505909371189773, -0.00029094755882397294, -0.06831814348697662, -0.0024975319392979145, -3.814689989667386e-06, -0.0027807399164885283, -0.012930122204124928, -0.02952544204890728, -0.017943670973181725, -0.015092349611222744, -0.0007678897818550467, -0.01188153401017189, -0.005370356608182192, -0.004888605792075396, -0.0001308832288486883, -0.00014447122521232814, -0.1374136507511139, -0.03335018828511238, -0.07240620255470276, -0.007212434895336628, -4.255681051290594e-05, -0.00022194306075107306, -0.00011944057769142091, -0.01682238094508648, -0.00011395759065635502, -0.005800913088023663, -1.0728830375228426e-06, -6.318072337307967e-06, -0.003702334826812148, -0.0012477001873776317, -0.011841010302305222, -0.24294942617416382, -0.0003066784702241421, -1.8045239448547363, -3.111314072157256e-05, -0.0010025242809206247, -0.014014171436429024, -1.8358061424805783e-05, -6.794906312279636e-06, -0.009393305517733097, -0.026564573869109154, -1.5336213111877441, -0.7605994343757629, -0.16086556017398834, -0.005165326874703169, -0.00023755589791107923, -0.00016211149340961128, -0.0007706294418312609, -0.002586592920124531, -0.0006238659843802452, -0.00029976642690598965, -0.004289948847144842, -8.844937838148326e-05, -3.0874729418428615e-05, -0.0009004590683616698, -0.0032933305483311415, -0.001854725182056427, -0.17590628564357758, -0.011236953549087048, -2.4437606043647975e-05, -0.001281393808312714, -0.017803974449634552, -0.00225444626994431, -0.015499256551265717, -0.005534919444471598, -0.0001227780303452164, -0.0001823735801735893, -0.0004570631426759064, -0.09223029762506485, -0.004315112717449665, -0.002806892851367593, -0.012136070989072323, -0.015641741454601288, -0.0038718036375939846, -0.0009257083875127137, -0.0019900058396160603, -0.07293430715799332, -0.0021823656279593706, -0.4834548830986023, -1.6968202590942383, -1.1420111656188965, -0.05763391777873039, -0.004041480831801891, -3.1636555194854736, -0.3663947284221649, -0.6965258121490479, -0.049022380262613297, -0.0739271342754364, -0.016290996223688126, -0.21124239265918732, -0.0011156531982123852, -0.9236236810684204, -0.0020027358550578356, -0.16017168760299683, -0.04904996231198311, -1.828082799911499, -0.004915059544146061, -0.04601983353495598, -0.07895804941654205, -1.522536277770996, -0.003430911572650075, -0.8530440926551819, -0.04834656044840813, -0.18378828465938568, -0.0012684165267273784, -0.007291136309504509, -3.2186455882765586e-06, -6.949660019017756e-05, -0.0004129749140702188, -0.0025179844815284014, -5.173549288883805e-05, -3.4570634852570947e-06, -0.06289638578891754, -0.014346078038215637, -0.0014919828390702605, -0.145760640501976, -0.22584538161754608, -0.5962219834327698, -0.01727346144616604, -0.0006999903125688434, -0.005149197764694691, -0.00020966715237591416, -0.0009152276325039566, -0.0011887634173035622, -0.2848706841468811, -0.003275388851761818, -0.21450525522232056, -0.0008353081648238003, -0.0007758706342428923, -0.0028547984547913074, -0.33832836151123047, -0.00025781645672395825, -0.00028713393840007484, -0.010216441005468369, -0.0017603629967197776, -2.8367295265197754, -1.5368996858596802, -0.0007048744591884315, -0.06823574751615524], "finish_reason": "length"}], "metrics": {"energy": 307.0428116922378, "energy_per_token": 1.199385983172804, "time": 11.357582, "time_per_token": 0.0443655546875}}
{"outputs": [{"text": "if not source_path:\n        return ('/', [])\n\n    source_path = pathlib.Path(source_path).resolve()\n\n    if not source_path.is_dir():\n        raise ValueError(\"Specified source path must be a directory.\")\n\n    source_dir_name = source_path.name\n    files_to_copy = []\n    for file_path in source_path.rglob(\"*\"):\n        if file_path.is_file():\n            files_to_copy.append(file_path.name)\n    shutil.copytree(source_path, pathlib.Path(destination_path).resolve().joinpath(source_dir_name))\n\n    return source_dir_name, files_to_copy\n\nx = task_func(\"/Docs/src/Scripts\", \"/Docs/dst\")\nprint(f'{x = }')\nprint(f'{type(x) = }')\nprint(f'{x[1] = }')\nprint(f'{x[0] = }')", "tokens": ["if", " not", " source", "_", "path", ":", "\n", "        ", "return", " ('", "/'", ",", " [", "])", "\n", "\n", "    ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "resolve", "()", "\n", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " source", " path", " must", " be", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "source", "_", "dir", "_", "name", " =", " source", "_", "path", ".", "name", "\n", "    ", "files", "_", "to", "_", "copy", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " source", "_", "path", ".", "rg", "lob", "(", "\"", "*", "\"", "):", "\n", "        ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "files", "_", "to", "_", "copy", ".", "append", "(", "file", "_", "path", ".", "name", ")", "\n", "    ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", ".", "join", "path", "(", "source", "_", "dir", "_", "name", "))", "\n", "\n", "    ", "return", " source", "_", "dir", "_", "name", ",", " files", "_", "to", "_", "copy", "\n", "\n", "x", " =", " task", "_", "func", "(", "\"", "/", "Doc", "s", "/", "src", "/", "Script", "s", "\"", ",", " \"/", "Doc", "s", "/", "dst", "\"", ")", "\n", "print", "(", "f", "'{", "x", " =", " }", "')", "\n", "print", "(", "f", "'{", "type", "(", "x", ")", " =", " }", "')", "\n", "print", "(", "f", "'{", "x", "[", "1", "]", " =", " }", "')", "\n", "print", "(", "f", "'{", "x", "[", "0", "]", " =", " }", "')"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -2.6664834022521973, -0.0007612191257067025, -0.0009639384225010872, -1.749127984046936, -0.033904507756233215, -0.0017765468219295144, -2.6879708766937256, -2.911431312561035, -3.881713390350342, -0.020421603694558144, -0.1079605296254158, -0.009422828443348408, -0.015098690055310726, -0.819459080696106, -0.0004245333548169583, -1.804715871810913, -0.045885030180215836, -0.1603613942861557, -0.17966924607753754, -0.19185782968997955, -0.0009382136631757021, -8.868777513271198e-05, -0.025163384154438972, -0.005493899807333946, -0.008781742304563522, -4.3987260141875595e-05, -4.529942543740617e-06, -0.006502185482531786, -0.9963023066520691, -0.48136478662490845, -0.017847653478384018, -0.12050271034240723, -1.2888551950454712, -0.00013529339048545808, -0.12514367699623108, -0.13217294216156006, -0.07167354971170425, -0.00018821375851985067, -2.062299427052494e-05, -0.00454440712928772, -0.5090877413749695, -9.16677454370074e-05, -0.008310616947710514, -0.02000664547085762, -0.005921677220612764, -0.0015000768471509218, -0.09379781037569046, -0.014157690107822418, -2.7656173188006505e-05, -0.4098163843154907, -1.2484793663024902, -3.6019482612609863, -0.009487895295023918, -0.6306554079055786, -0.5271521210670471, -3.1858911514282227, -0.08234541863203049, -0.28573542833328247, -0.09572290629148483, -0.7276264429092407, -0.023373207077383995, -0.0029623694717884064, -0.004078286234289408, -0.10081193596124649, -0.0005972985527478158, -2.2809181213378906, -0.014516572467982769, -1.5272105932235718, -0.5164975523948669, -0.07754392921924591, -0.06446894258260727, -0.11427222937345505, -0.0002928543253801763, -5.090107151772827e-05, -0.0010939810890704393, -0.16448451578617096, -0.020174192264676094, -0.5749744772911072, -2.8688602447509766, -0.5989047884941101, -1.69623601436615, -0.00011359999916749075, -0.02788219042122364, -0.02994491532444954, -0.1761927753686905, -0.006264691706746817, -1.7680754661560059, -0.30116793513298035, -0.6436353921890259, -0.8232104182243347, -0.8097814321517944, -0.00719077605754137, -0.06397458910942078, -3.6477376852417365e-05, -2.8609820219571702e-05, -0.00010966652916977182, -1.1868550777435303, -0.0006146925734356046, -0.8610469698905945, -0.015223737806081772, -0.06748008728027344, -0.494073748588562, -0.0021438251715153456, -0.02214011736214161, -0.01110751647502184, -0.16362972557544708, -0.2620578110218048, -0.00013743886665906757, -9.512448741588742e-05, -0.0006767605082131922, -0.036985184997320175, -1.1920922133867862e-06, -0.01519156713038683, -0.1175365298986435, -0.0240832157433033, -0.0010301527800038457, -0.4518687129020691, -0.00013052565918769687, -0.0002109781780745834, -5.364403477869928e-06, -1.3351351299206726e-05, -0.0022050845436751842, -0.0009168949909508228, -0.0025938458275049925, -0.1037154495716095, -6.663577369181439e-05, -0.0002747396647464484, -0.005105434451252222, -0.1281401664018631, -0.005667450837790966, -0.0023321115877479315, -1.8976995944976807, -1.9001096487045288, -0.00039188333903439343, -7.83174327807501e-05, -0.04729809612035751, -0.1354902982711792, -0.001997858053073287, -0.07156513631343842, -4.8993817472364753e-05, -0.0018076046835631132, -0.0174829363822937, -2.536742925643921, -0.0011504229623824358, -5.173549288883805e-05, -0.006305324379354715, -0.0129007026553154, -0.01735149323940277, -3.93382906622719e-05, -4.0531076592742465e-06, -0.253657728433609, -1.5382100343704224, -1.7386586666107178, -0.8874566555023193, -2.1722726821899414, -0.05656000226736069, -0.0014613912208005786, -0.01562401931732893, -0.02222231589257717, -0.0002317160106031224, -0.007883742451667786, -0.00011073929636040702, -1.3708974620385561e-05, -0.08666975051164627, -0.006562586408108473, -1.032045602798462, -0.0021297885105013847, -0.04241028055548668, -0.9450170993804932, -0.00021181246847845614, -0.02123991772532463, -0.00020847532141488045, -3.5523738915799186e-05, -0.0023124876897782087, -0.00918921735137701, -4.458328112377785e-05, -1.4543427823809907e-05, -1.3470558769768104e-05, -2.7418097943154862e-06, -0.5002374649047852, -0.010199685581028461, -3.969275951385498, -0.025622455403208733, -0.01906931959092617, -0.00083078199531883, -0.00021300431399140507, -1.7789069414138794, -0.8452657461166382, -0.5062991976737976, -0.2872491776943207, -0.00041929035796783864, -0.011382521130144596, -0.04691757634282112, -0.04597725346684456, -0.09908557683229446, -0.002956307725980878, -0.10653392970561981, -0.10739653557538986, -0.36802563071250916, -0.25858137011528015, -0.0005772831500507891, -0.00565891619771719, -2.1258597373962402, -1.8359919786453247, -0.06702590733766556, -0.054289478808641434, -0.4140182435512543, -0.020959554240107536, -2.5920586585998535, -3.183457851409912, -0.3356352746486664, -1.9927867650985718, -0.049912892282009125, -0.07912074029445648, -0.4864862561225891, -0.805182695388794, -0.029110770672559738, -0.1908952295780182, -0.12720856070518494, -0.2237381786108017, -0.002040805760771036, -0.0010269373888149858, -0.11158778518438339, -0.005456079728901386, -0.0045184181071817875, -0.0029817428439855576, -0.5133617520332336, -0.6161923408508301, -0.10252434760332108, -0.09366278350353241, -0.07928340137004852, -0.2372686117887497, -0.09792894124984741, -1.9784904718399048, -0.11968454718589783, -0.009175160899758339, -0.007448875345289707, -0.017700212076306343, -0.4117015600204468, -0.31795692443847656, -0.058133892714977264, -0.023648235946893692, -0.037282794713974, -0.5500072836875916, -0.017468174919486046, -0.2254464030265808, -0.022425975650548935, -0.029539678245782852, -0.0013734203530475497, -0.006444150116294622], "finish_reason": "stop"}], "metrics": {"energy": 277.1566054267883, "energy_per_token": 1.099827799312652, "time": 10.916764, "time_per_token": 0.04332049206349207}}
{"outputs": [{"text": "# Checking if the source path exists\n    try:\n        source_path = pathlib.Path(source_path).resolve()\n    except FileNotFoundError:\n        print(\"File or directory not found\")\n        exit(1)\n    else:\n        source_path.is_dir()\n\n    # Checking if destination directory exists\n    try:\n        destination_path = pathlib.Path(destination_path)\n    except FileNotFoundError:\n        print(\"Destination directory not found\")\n        exit(1)\n\n    # Checking if the destination path exists and is a directory\n    destination_path.is_dir()\n\n    # Copying files and returning the result\n    filenames = list()\n    for filename in source_path.iterdir():\n        if filename.is_file():\n            shutil.copy(filename, destination_path)\n            print(f\"File {filename} copied successfully\")\n            filenames.append(filename)\n    return (source_path.name, filenames)", "tokens": ["#", " Check", "ing", " if", " the", " source", " path", " exists", "\n", "    ", "try", ":", "\n", "        ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "resolve", "()", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "\"", "File", " or", " directory", " not", " found", "\"", ")", "\n", "        ", "exit", "(", "1", ")", "\n", "    ", "else", ":", "\n", "        ", "source", "_", "path", ".", "is", "_", "dir", "()", "\n", "\n", "    ", "#", " Check", "ing", " if", " destination", " directory", " exists", "\n", "    ", "try", ":", "\n", "        ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "\"", "Dest", "ination", " directory", " not", " found", "\"", ")", "\n", "        ", "exit", "(", "1", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " the", " destination", " path", " exists", " and", " is", " a", " directory", "\n", "    ", "destination", "_", "path", ".", "is", "_", "dir", "()", "\n", "\n", "    ", "#", " Copy", "ing", " files", " and", " returning", " the", " result", "\n", "    ", "fil", "en", "ames", " =", " list", "()", "\n", "    ", "for", " filename", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " filename", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "filename", ",", " destination", "_", "path", ")", "\n", "            ", "print", "(", "f", "\"", "File", " {", "filename", "}", " copied", " successfully", "\"", ")", "\n", "            ", "fil", "en", "ames", ".", "append", "(", "filename", ")", "\n", "    ", "return", " (", "source", "_", "path", ".", "name", ",", " fil", "en", "ames", ")", "\n", "\n", "#"], "logprobs": [-2.139058828353882, -1.332573413848877, -2.2862236499786377, -1.0915601253509521, -0.7373114228248596, -0.243800088763237, -1.1724051237106323, -0.3742581903934479, -1.4241374731063843, -0.0067795258946716785, -2.549546957015991, -0.0005038899253122509, -0.0019677577074617147, -0.0032004110980778933, -0.7081390023231506, -0.06947649270296097, -0.15212677419185638, -0.2150987982749939, -0.06865721940994263, -0.00023719835735391825, -6.472854875028133e-05, -0.013875922188162804, -0.004473796579986811, -0.004129217471927404, -4.684815212385729e-05, -1.3708974620385561e-05, -0.0020975510124117136, -1.9276639223098755, -0.1342276632785797, -0.035127442330121994, -0.10420611500740051, -0.44004490971565247, -0.005138286389410496, -0.5001803040504456, -0.0003137096355203539, -2.1457441107486375e-05, -0.2823827862739563, -0.022220216691493988, -0.0012336509535089135, -1.805589199066162, -0.2959938645362854, -1.391090750694275, -3.2838618755340576, -1.9308584928512573, -0.4983181953430176, -0.42915990948677063, -0.002904009073972702, -1.1594294309616089, -0.03588171675801277, -0.0090414397418499, -0.2686985433101654, -2.3203060626983643, -0.8996049761772156, -0.16981233656406403, -0.009960353374481201, -0.011955629102885723, -0.8643951416015625, -2.4257912635803223, -0.0002619877050165087, -0.025440245866775513, -0.03007320873439312, -2.784393072128296, -0.020810354501008987, -0.2286251038312912, -0.36212044954299927, -1.8140883445739746, -0.0002611534437164664, -0.025925906375050545, -0.013665926642715931, -0.12191048264503479, -0.8588529229164124, -0.029566297307610512, -0.28136131167411804, -0.4314671456813812, -0.02360958233475685, -0.07490791380405426, -2.619673728942871, -2.450472593307495, -0.22694310545921326, -0.5169302821159363, -0.004086121916770935, -0.6422117948532104, -0.0002775999018922448, -0.0007755132392048836, -0.0012423424050211906, -0.17581059038639069, -0.014278859831392765, -0.01053097378462553, -0.02244252897799015, -0.00918153952807188, -7.986990567587782e-06, -5.400034933700226e-05, -0.0009313059854321182, -0.000612071540672332, -0.007179295644164085, -2.3245540432981215e-05, -3.2305197237292305e-05, -0.0005218812730163336, -2.5338134765625, -0.25770440697669983, -0.001690983772277832, -0.0788126289844513, -0.0014044907875359058, -5.793403761344962e-05, -0.006474826484918594, -0.005824853666126728, -0.003449206706136465, -0.5789703130722046, -0.019590230658650398, -0.021397804841399193, -2.3361783027648926, -0.010668978095054626, -0.5559933185577393, -0.2517129182815552, -0.008262026123702526, -0.10793901979923248, -0.0016627785516902804, -0.001383896335028112, -0.016422931104898453, -0.01210321206599474, -0.0027241522911936045, -0.021132076159119606, -0.0006248190766200423, -0.00034540885826572776, -1.0529230833053589, -0.005104485433548689, -0.3952115774154663, -1.5368589162826538, -0.04340406879782677, -0.24874968826770782, -1.3221838474273682, -0.5571919083595276, -1.1286511421203613, -1.1954575777053833, -1.5654594898223877, -0.6561331152915955, -0.14181476831436157, -0.036283474415540695, -0.10703275352716446, -0.003503496292978525, -0.9171709418296814, -0.0019227842567488551, -0.004364014137536287, -0.057634931057691574, -0.15671278536319733, -0.0001691436773398891, -0.0009320206008851528, -0.004338257946074009, -0.008394669741392136, -0.08358117192983627, -0.0011743560899049044, -0.3746136426925659, -1.7509061098098755, -0.07478413730859756, -0.3784148097038269, -3.3210537433624268, -1.7262582778930664, -0.9601921439170837, -2.6205742359161377, -0.12825928628444672, -0.009953389875590801, -1.7391713857650757, -0.0014428215799853206, -0.0003734129713848233, -0.07816965878009796, -2.367617607116699, -0.5532964468002319, -0.029077423736453056, -0.10318593680858612, -0.1590852588415146, -1.285393238067627, -0.007220482919365168, -0.45121070742607117, -0.0016421893378719687, -0.0001528146385680884, -0.000398198957554996, -0.2597261369228363, -0.00041571559268049896, -0.0014413930475711823, -0.017523935064673424, -0.008477415889501572, -0.424184650182724, -0.22946034371852875, -0.0025637636426836252, -0.06201041489839554, -6.318072337307967e-06, -0.0045217410661280155, -0.10195490717887878, -0.02023879624903202, -0.0020124914590269327, -0.9873710870742798, -0.00012337400403339416, -1.847726889536716e-05, -0.0012731788447126746, -0.3208020329475403, -0.3872798979282379, -0.01634553074836731, -0.025424441322684288, -4.386805812828243e-05, -2.3007127310847864e-05, -0.1683787852525711, -0.009929784573614597, -0.008532260544598103, -2.8856093883514404, -0.02436188794672489, -0.38056477904319763, -0.14116480946540833, -1.062122106552124, -1.0320358276367188, -0.06001419574022293, -0.3741791546344757, -0.4579751193523407, -1.887783408164978, -0.49747031927108765, -0.003950411919504404, -0.007824485190212727, -0.03637934848666191, -0.02910197153687477, -2.264974000354414e-06, -5.125986263010418e-06, -0.003501357976347208, -0.0007510940195061266, -0.0014848408754915, -0.38777780532836914, -2.1936676502227783, -0.007305455859750509, -0.6782049536705017, -0.16742506623268127, -1.7882065773010254, -0.08822417259216309, -7.629103492945433e-05, -0.00010358751023886725, -0.16561530530452728, -0.05437663942575455, -0.00296652945689857, -0.01701507344841957, -4.768370445162873e-07, -3.3378546504536644e-06, -0.273530513048172, -0.12004122138023376, -0.015317542478442192, -2.098541259765625], "finish_reason": "stop"}], "metrics": {"energy": 362.8528949089051, "energy_per_token": 1.4993921277227484, "time": 12.198869, "time_per_token": 0.05040854958677686}}
{"outputs": [{"text": "if not pathlib.Path(source_path).exists():\n        raise ValueError(\"Source directory does not exist\")\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"Source path is not a directory\")\n\n    dest_dir = pathlib.Path(destination_path).resolve()\n    if not dest_dir.exists():\n        dest_dir.mkdir(parents=True, exist_ok=True)\n\n    for filename in (pathlib.Path(source_path) / file).relative_to(pathlib.Path(source_path).resolve()) for file in shutil.os.listdir(source_path):\n        file_path = str(dest_dir / file)\n        shutil.copyfile(str(pathlib.Path(source_path) / file), file_path)\n\n    return (source_path, list(pathlib.Path(source_path) / file).relative_to(pathlib.Path(source_path).resolve()) for file in shutil.os.listdir(source_path))", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " directory", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "dest", "_", "dir", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", "\n", "    ", "if", " not", " dest", "_", "dir", ".", "exists", "():", "\n", "        ", "dest", "_", "dir", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "for", " filename", " in", " (", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", " /", " file", ")", ".", "relative", "_", "to", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "resolve", "())", " for", " file", " in", " shut", "il", ".", "os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "file", "_", "path", " =", " str", "(", "dest", "_", "dir", " /", " file", ")", "\n", "        ", "sh", "util", ".", "copy", "file", "(", "str", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", " /", " file", ")", ",", " file", "_", "path", ")", "\n", "\n", "    ", "return", " (", "source", "_", "path", ",", " list", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", " /", " file", ")", ".", "relative", "_", "to", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "resolve", "())", " for", " file", " in", " shut", "il", ".", "os", ".", "list", "dir", "(", "source", "_", "path", "))"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -1.4942700862884521, -0.2080790400505066, -0.023611096665263176, -0.002234345069155097, -0.0481145977973938, -0.04637543112039566, -4.5060096454108134e-05, -0.2711859345436096, -1.137969970703125, -1.0192041397094727, -1.1844701766967773, -0.45774534344673157, -0.0010515881003811955, -0.014776899479329586, -1.2449384927749634, -0.00265507772564888, -0.008576583117246628, -0.5405857563018799, -0.34494951367378235, -0.02538120746612549, -0.09613868594169617, -1.6212332411669195e-05, -0.00016783259343355894, -0.0011096993694081903, -0.001935396110638976, -0.02757144533097744, -1.0609570381348021e-05, -1.0132738680113107e-05, -0.00029392691794782877, -0.00023421882360707968, -0.0024573388509452343, -7.033323527139146e-06, -0.0008903353591449559, -0.005774364341050386, -0.0016875325236469507, -0.00045253525604493916, -0.006864181254059076, -0.0047686658799648285, -1.2040065485052764e-05, -0.01176938135176897, -0.05461280047893524, -0.17596176266670227, -0.9717523455619812, -0.3305659592151642, -0.014928882010281086, -0.03234277293086052, -0.034181151539087296, -0.07095235586166382, -0.00024375328212045133, -0.0006684214458800852, -0.7106951475143433, -0.0007976687629707158, -3.534682273864746, -0.0843982845544815, -0.48340922594070435, -0.35071080923080444, -0.05161615088582039, -0.0001289761275984347, -2.169585604860913e-05, -0.003913721069693565, -0.00328132975846529, -0.013178979977965355, -0.00012516192509792745, -6.9141146923357155e-06, -0.0012741313548758626, -1.1413638591766357, -0.8523328900337219, -0.01101131085306406, -0.12308568507432938, -0.12538379430770874, -0.5584385395050049, -0.062134888023138046, -0.018926387652754784, -8.106198947643861e-06, -6.329813186312094e-05, -0.00022182388056535274, -0.10352510958909988, -0.005274783819913864, -0.007582100108265877, -0.0011082704877480865, -0.1581781953573227, -0.0001323135511483997, -0.00028427375946193933, -0.0016405232017859817, -0.0028977093752473593, -0.00010942813969450071, -0.20035530626773834, -0.11721702665090561, -0.0057817124761641026, -0.002760649425908923, -0.9390227794647217, -0.005452167242765427, -9.536738616588991e-07, -9.250213042832911e-05, -0.0006435230607166886, -0.02503480762243271, -0.006421645637601614, -0.01671535335481167, -0.32652366161346436, -0.0006257721688598394, -2.0192666053771973, -2.22172212600708, -0.00910310447216034, -3.2614834308624268, -0.3059384524822235, -0.013141332194209099, -0.0003626880934461951, -0.0017532228957861662, -0.004662119783461094, -0.05402783304452896, -0.00015245705435518175, -0.0011861439561471343, -0.07429618388414383, -0.11723717302083969, -2.127068042755127, -0.771897554397583, -0.04923790320754051, -3.082287549972534, -0.0008935510995797813, -0.0008382858941331506, -0.008912898600101471, -2.2265725135803223, -0.0006249382277019322, -7.879423355916515e-05, -0.009051716886460781, -0.04985029250383377, -0.04295537620782852, -0.00012420836719684303, -0.0003567297535482794, -0.6836934089660645, -0.02537551335990429, -0.35976022481918335, -0.2159588634967804, -1.2287676334381104, -0.014356536790728569, -0.037631407380104065, -0.75592041015625, -0.0004880429187323898, -0.0005704921204596758, -0.14319990575313568, -0.12165497243404388, -0.05441401153802872, -5.960462772236497e-07, -0.003408220363780856, -0.05444708839058876, -0.0005158047424629331, -0.00023648326168768108, -0.6310523152351379, -0.014085874892771244, -0.017261862754821777, -3.324493408203125, -0.6914064288139343, -0.34788691997528076, -0.007342732511460781, -2.6458382606506348, -0.09202210605144501, -1.0897493362426758, -3.0874729418428615e-05, -0.0001597276859683916, -0.1529484987258911, -0.332511305809021, -0.058519162237644196, -0.033307064324617386, -0.01990065909922123, -0.5482980012893677, -8.248942322097719e-05, -4.637133679352701e-05, -0.002471370855346322, -1.6431012153625488, -0.02409927360713482, -0.6704631447792053, -0.027572372928261757, -0.18752680718898773, -0.00017021637177094817, -1.9311717551317997e-05, -0.0003831844369415194, -0.0015956539427861571, -0.008694176562130451, -0.00010013079008786008, -1.883488948806189e-05, -0.026840003207325935, -0.015145188197493553, -0.04291129484772682, -0.003434594254940748, -0.001993456156924367, -0.07329486310482025, -0.0002609150833450258, -7.510157047363464e-06, -0.09572290629148483, -0.04252144694328308, -0.5954118371009827, -0.04732208698987961, -0.12207920849323273, -1.0148600339889526, -0.5724141597747803, -0.00021646064124070108, -0.0008158930577337742, -0.11813932657241821, -2.0835771560668945, -0.13981333374977112, -1.2163854837417603, -0.0007575264316983521, -3.766942609217949e-05, -0.0007085673278197646, -0.00184925168287009, -0.18725460767745972, -0.0007668177131563425, -9.417090768693015e-05, -0.00923705380409956, -0.5821171998977661, -0.08166912198066711, -0.10713407397270203, -0.013178862631320953, -0.035668011754751205, -0.00023052419419400394, -3.325883881188929e-05, -0.0008927173912525177, -0.061743274331092834, -6.437280717364047e-06, -0.00044371772673912346, -0.0002146728802472353, -0.0015037668636068702, -0.1018776148557663, -0.0006155265145935118, -7.56950321374461e-05, -0.018644556403160095, -0.005589214153587818, -0.0031576319597661495, -0.4846784472465515, -0.06984163075685501, -0.0006257721688598394, -0.001945747178979218, -0.011516991071403027, -3.266281055402942e-05, -0.0001426833332516253, -0.00048232366680167615, -0.0014346078969538212, -0.00018142008048016578, -1.7165990357170813e-05, -0.001450320822186768, -0.017793551087379456, -0.00015853578224778175, -5.245195097813848e-06, -0.009321973659098148], "finish_reason": "length"}], "metrics": {"energy": 286.25659042644503, "energy_per_token": 1.118189806353301, "time": 11.3559065, "time_per_token": 0.044359009765625}}
{"outputs": [{"text": "if pathlib.Path(source_path).exists():\n        if pathlib.Path(source_path).is_dir():\n            filenames = [pathlib.Path(source_path) / file.name for file in pathlib.Path(source_path).iterdir()]\n\n            filenames_list = []\n\n            for filename in filenames:\n                if filename.suffix == \".txt\":\n                    shutil.copy(filename, pathlib.Path(destination_path) / filename.stem)\n                    filenames_list.append(filename.stem)\n            return source_path, filenames_list\n        else:\n            raise ValueError(\"Source directory does not exist or is not a directory.\")\n    else:\n        raise ValueError(\"Source directory does not exist.\")", "tokens": ["if", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "exists", "():", "\n", "        ", "if", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "            ", "fil", "en", "ames", " =", " [", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", " /", " file", ".", "name", " for", " file", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "()", "]", "\n", "\n", "            ", "fil", "en", "ames", "_", "list", " =", " []", "\n", "\n", "            ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "                ", "if", " filename", ".", "suff", "ix", " ==", " \"", ".", "txt", "\":", "\n", "                ", "    ", "sh", "util", ".", "copy", "(", "filename", ",", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", " /", " filename", ".", "stem", ")", "\n", "                ", "    ", "fil", "en", "ames", "_", "list", ".", "append", "(", "filename", ".", "stem", ")", "\n", "            ", "return", " source", "_", "path", ",", " fil", "en", "ames", "_", "list", "\n", "        ", "else", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Source", " directory", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "if"], "logprobs": [-1.0749242305755615, -2.8414087295532227, -0.0021398996468633413, -0.00045813556062057614, -0.015173954889178276, -0.015141196548938751, -0.02791534550487995, -8.642300235806033e-05, -2.9444261599564925e-05, -0.0022327988408505917, -0.005243951920419931, -1.7801342010498047, -1.1138794422149658, -0.024740155786275864, -0.020419150590896606, -0.41581249237060547, -0.24666371941566467, -6.3774932641536e-05, -0.00019167017308063805, -0.0023754017893224955, -0.011740162968635559, -0.06242275610566139, -1.1801649634435307e-05, -7.748573807475623e-06, -0.0005610798834823072, -0.00037901371251791716, -0.006470799446105957, -8.940656698541716e-06, -0.05388709902763367, -0.01624208688735962, -0.00945825595408678, -0.028905687853693962, -2.3362202644348145, -0.0034477810841053724, -0.0005731132114306092, -0.09923725575208664, -1.665069580078125, -3.234436511993408, -0.2144041508436203, -0.0002416080387774855, -0.007120589260011911, -0.009851998649537563, -0.1884128749370575, -0.00014244495832826942, -0.0013618728844448924, -0.20552664995193481, -0.4521588087081909, -1.5062248706817627, -1.1184532642364502, -0.03412077948451042, -0.1239362433552742, -0.005979269277304411, -0.007296343334019184, -0.5518685579299927, -2.4437606043647975e-05, -0.00011657988943625242, -0.009934741072356701, -0.00946049951016903, -0.018639758229255676, -0.0003281293320469558, -3.790783375734463e-05, -0.0025562725495547056, -0.0044119637459516525, -0.126662477850914, -0.0010855264263227582, -0.0014093714999035, -1.0010831356048584, -0.008046945556998253, -2.7402126789093018, -0.02075442671775818, -2.5362324714660645, -0.0014782940270379186, -0.0006549597019329667, -1.6818599700927734, -1.9306714534759521, -0.051105547696352005, -1.20827054977417, -0.009580704383552074, -1.6951292753219604, -0.0007382289622910321, -0.1560542732477188, -0.8070359826087952, -0.01189237181097269, -0.015551957301795483, 0.0, -1.4305104514278355e-06, -0.002241838490590453, -0.003124952083453536, -0.023841246962547302, -0.2285284399986267, -0.37470734119415283, -0.011735686101019382, -2.3950514793395996, -5.328513361746445e-05, -0.3534768521785736, -1.846928358078003, -0.010577685199677944, -0.23459826409816742, -0.14023056626319885, -0.01145370677113533, -0.008645012974739075, -0.0033705588430166245, -1.428066372871399, -0.00020644917094614357, -3.8742269680369645e-05, -0.001369610894471407, -0.2607295513153076, -0.3322417438030243, -0.03403598442673683, -2.609938383102417, -0.0013052048161625862, -3.099393507000059e-05, -0.002994579030200839, -0.002785851713269949, -0.005553650204092264, -3.242440288886428e-05, -7.152531907195225e-06, -1.0947062969207764, -0.10641518980264664, -0.3527524769306183, -0.09059815108776093, -0.5407153367996216, -0.43108153343200684, -0.010253019630908966, -0.058342739939689636, -0.009883986786007881, -0.04278646409511566, -3.576272320060525e-06, -1.5497195136049413e-06, -0.0013777059502899647, -0.0002699726028367877, -0.012227809987962246, -0.0019501493079587817, -0.01190014649182558, -0.10379206389188766, -0.014789937995374203, -0.1468920111656189, -0.014870628714561462, -0.0015729209408164024, -1.622816801071167, -0.2018122673034668, -1.0336699485778809, -0.00017307691450696439, -0.0004049911512993276, -0.09016895294189453, -0.009652726352214813, -2.3841855067985307e-07, -2.50339189733495e-06, -0.0012368656462058425, -1.3947389561508317e-05, -0.009838069789111614, -0.27706655859947205, -0.12304521352052689, -0.000303818320389837, -0.011443452909588814, -0.002111826092004776, -0.07828541100025177, -0.022330621257424355, -2.4437606043647975e-05, -0.2764104902744293, -0.4711849093437195, -1.489983081817627, -2.12636137008667, -0.5436522364616394, -0.0016739654820412397, -0.020326290279626846, -0.6333795189857483, -0.0980745255947113, -0.04099223017692566, -0.31243130564689636, -0.06810468435287476, -0.6141076683998108, -0.013124625198543072, -0.008448928594589233, -0.005544047802686691, -0.07000225782394409, -0.008481552824378014, -0.00011431517486926168, -0.0007884969236329198, -0.002493488835170865, -0.0073835584335029125, -0.015259076841175556, -2.50339189733495e-06, -0.007597716990858316, -0.0261871125549078, -0.05015713721513748, -0.06642406433820724, -0.01486029289662838, -0.00017629499780014157, -0.0007190502947196364, -2.0420002937316895, -0.0051397099159657955, -0.24682019650936127, -0.2365979552268982, -0.012538531795144081, -1.1698287725448608], "finish_reason": "stop"}], "metrics": {"energy": 245.98567713737478, "energy_per_token": 1.255028964986606, "time": 8.62282, "time_per_token": 0.04399397959183674}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path).resolve().absolute()\n    destination_path = pathlib.Path(destination_path).resolve().absolute()\n\n    if not source_path.exists():\n        raise ValueError(f\"Source path '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"'{source_path}' is not a directory\")\n\n    destination_path.mkdir(parents=True, exist_ok=True)\n\n    files = []\n    for dirpath, dirnames, filenames in os.walk(source_path):\n        for filename in filenames:\n            files.append(pathlib.Path(dirpath, filename))\n    shutil.copy2(source_path, destination_path)\n\n    return source_path.name, files", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "resolve", "()", ".", "absolute", "()", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", ".", "absolute", "()", "\n", "\n", "    ", "if", " not", " source", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " path", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "'{", "source", "_", "path", "}'", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "files", " =", " []", "\n", "    ", "for", " dir", "path", ",", " dir", "names", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "source", "_", "path", "):", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "files", ".", "append", "(", "path", "lib", ".", "Path", "(", "dir", "path", ",", " filename", "))", "\n", "    ", "sh", "util", ".", "copy", "2", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -1.7177166938781738, -0.37205806374549866, -0.012478020042181015, -2.71225643157959, -1.0337005853652954, -0.0012047183699905872, -0.09483986347913742, -0.12013404071331024, -0.7676765322685242, -0.005213949363678694, -0.002271930454298854, -0.0017185931792482734, -0.01020133774727583, -2.109982233378105e-05, -6.711257447022945e-05, -0.0008825936238281429, -0.0004396664153318852, -0.005614464171230793, -2.0265373677830212e-05, -1.168244216387393e-05, -0.000366263062460348, -0.32134947180747986, -0.026640605181455612, -0.00013362467871047556, -0.012950833886861801, -0.01051634643226862, -0.0002119316632160917, -0.04064089432358742, -0.5434839725494385, -0.0002610342635307461, -0.1540890336036682, -0.15338267385959625, -0.06286078691482544, -2.9444261599564925e-05, -4.017272294731811e-05, -0.0005508335889317095, -0.5670374631881714, -0.5263060331344604, -0.009363781660795212, -0.0008886678842827678, -0.030626920983195305, -0.03531641140580177, -2.002696055569686e-05, -0.14359766244888306, -0.4985433518886566, -0.3650229871273041, -0.8443518280982971, -0.4088517427444458, -0.9263133406639099, -0.0003044141922146082, -0.0081494664773345, -4.5298504119273275e-05, -8.606540359323844e-05, -0.03764139860868454, -0.09880558401346207, -0.0002774807217065245, -0.005018139258027077, -1.8550283908843994, -0.00039450492477044463, -0.0033597471192479134, -0.5937151312828064, -0.37789186835289, -0.018439656123518944, -0.01613323763012886, -0.00019095504831057042, -3.6954811548639555e-06, -3.838465272565372e-05, -0.0011754278093576431, -3.099436753473128e-06, -0.0030261934734880924, -0.0035399647895246744, -0.0005883631529286504, -0.00030632095877081156, -0.0066036805510520935, -0.005353282205760479, -5.364403477869928e-06, -0.002458290196955204, -0.026868784800171852, -0.0022494508884847164, -2.9212770462036133, -0.006898159626871347, -0.000105375460407231, -0.0001230164198204875, -0.028925491496920586, -0.03795970231294632, -0.006940542254596949, -0.015062875114381313, -0.06582353264093399, -0.10097337514162064, -0.00030727434204891324, -0.001177094760350883, -0.186189204454422, -0.0006602014764212072, -2.590845823287964, -0.020880287513136864, -0.06489893049001694, -0.044051751494407654, -0.004428104963153601, -5.98412734689191e-05, -9.738924563862383e-05, -0.16526563465595245, -0.0015378089156001806, -0.0024160738103091717, -0.0010881462367251515, -0.002636411227285862, -3.576278118089249e-07, -5.4596363042946905e-05, -0.00027509720530360937, -0.00285836448892951, -0.0023274733684957027, -0.021574335172772408, -0.28457072377204895, -0.00015722469834145159, -2.4399728775024414, -0.870916485786438, -0.5657117962837219, -0.006513555534183979, -0.22804580628871918, -0.043633248656988144, -3.2295408248901367, -0.898040771484375, -0.0015588762471452355, -0.8497815728187561, -0.012188124470412731, -0.0003578022588044405, -0.008385449647903442, -4.625213477993384e-05, -6.508615479106084e-05, -0.0011179156135767698, -0.02539678104221821, -0.00012540031457319856, -9.464769391342998e-05, -0.00023278864682652056, -0.015940610319375992, -6.48477507638745e-05, -1.0013530300057027e-05, -0.09831171482801437, -0.010745048522949219, -0.009785185568034649, -0.30391600728034973, -0.24849997460842133, -0.00044145373976789415, -0.01360289566218853, 0.0, -7.152555099310121e-07, -0.00029881304362788796, -0.002086130902171135, -0.0023516162764281034, -1.419199824333191, -0.0029074561316519976, -0.0008717550663277507, -0.01031307689845562, -1.9090229272842407, -0.004065701272338629, -2.062299427052494e-05, -0.042574912309646606, -0.002799165900796652, -0.17574480175971985, -0.00015662873920518905, -1.09602952003479, -0.00828886404633522, -1.0912343263626099, -0.004539897665381432, -2.0230660438537598, -1.3194653987884521, -0.0002535260282456875, -8.928377064876258e-05, -0.006158897187560797, -1.0271992683410645, -0.1487959325313568, -1.641019582748413, -0.20328675210475922, -0.006923967972397804, -0.18631042540073395, -0.009465577080845833, -7.521823135903105e-05, -3.45700973412022e-05, -0.12181149423122406, -0.029650550335645676, -0.36688780784606934, -0.0013898485340178013, -0.0782897099852562, -0.32581356167793274, -0.00011276562872808427, -0.00011157367407577112, -0.009304611943662167, -0.07409551739692688, -0.004624505061656237, -0.12477387487888336, -1.082152247428894, -1.1920922133867862e-06, -1.1920922133867862e-06, -2.4318398573086597e-05, -0.00022539935889653862, -0.09059782326221466], "finish_reason": "stop"}], "metrics": {"energy": 255.65403646087637, "energy_per_token": 1.229105944523444, "time": 9.032883, "time_per_token": 0.043427322115384616}}
{"outputs": [{"text": "# Ensure the source_path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError('Source path must be a directory!')\n\n    # Create the destination directory if it does not exist\n    pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # List all the files in the source directory\n    file_names = [file_name for file_name in pathlib.Path(source_path).iterdir() if file_name.is_file()]\n\n    # Copy each file to the destination directory\n    for file_name in file_names:\n        shutil.copy(str(file_name), destination_path)\n\n    return source_path, file_names", "tokens": ["#", " Ensure", " the", " source", "_", "path", " exists", " and", " is", " a", " directory", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "('", "Source", " path", " must", " be", " a", " directory", "!", "')", "\n", "\n", "    ", "#", " Create", " the", " destination", " directory", " if", " it", " does", " not", " exist", "\n", "    ", "path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " all", " the", " files", " in", " the", " source", " directory", "\n", "    ", "file", "_", "names", " =", " [", "file", "_", "name", " for", " file", "_", "name", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "()", " if", " file", "_", "name", ".", "is", "_", "file", "()", "]", "\n", "\n", "    ", "#", " Copy", " each", " file", " to", " the", " destination", " directory", "\n", "    ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "str", "(", "file", "_", "name", ")", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "return", " source", "_", "path", ",", " file", "_", "names"], "logprobs": [-2.139058828353882, -3.318643093109131, -1.4360066652297974, -0.08059751987457275, -0.8292946815490723, -0.008619130589067936, -0.9487772583961487, -0.18378689885139465, -0.022487638518214226, -0.039955493062734604, -0.05117712914943695, -0.21627089381217957, -0.003658983390778303, -0.1553523689508438, -0.018398577347397804, -0.6591171026229858, -0.0009742995607666671, -0.00010144196130568162, -0.005345812067389488, -0.021937213838100433, -0.0011726891389116645, -9.369411418447271e-05, -1.6569954823353328e-05, -0.0013298486592248082, -3.790783375734463e-05, -0.1833309829235077, -4.291525328881107e-06, -0.001073380233719945, -0.003607434220612049, -0.003530580550432205, -0.0014248467050492764, -0.029179662466049194, -0.00540782418102026, -1.1920858014491387e-05, -2.3529977798461914, -1.1768118143081665, -0.14038659632205963, -0.349074125289917, -0.0823516696691513, -0.31881293654441833, -0.12340638041496277, -3.6138010025024414, -0.043624117970466614, -0.0020247451029717922, -0.13408558070659637, -0.0010949337156489491, -0.20269541442394257, -1.14541494846344, -0.4099781811237335, -0.03049846552312374, -0.297838032245636, -0.10902054607868195, -0.03125184774398804, -0.9527533054351807, -0.0003488647344056517, -0.07099166512489319, -0.069898322224617, -0.0007239343249239028, -0.8509745001792908, -0.001013599568977952, -9.42901024245657e-05, -0.0006028980133123696, -0.0019701372366398573, -0.0011556621175259352, -7.402622577501461e-05, -2.3245540432981215e-05, -0.00017808281700126827, -0.28391751646995544, -0.00900481641292572, -4.184158387943171e-05, -7.60526381782256e-05, -0.10935475677251816, -0.0008400725200772285, -0.005960072390735149, -0.0015031717484816909, -0.0029221950098872185, 0.0, -3.802703940891661e-05, -0.0002983363519888371, -0.0009022455778904259, -0.00037126801908016205, -0.01639443449676037, -0.04086853191256523, -0.0003530356043484062, -0.20242087543010712, -1.360653281211853, -1.206922173500061, -2.1566922664642334, -0.08106108009815216, -0.10207580029964447, -0.017447909340262413, -0.0758938118815422, -0.034156955778598785, -0.6007857322692871, -0.0006515049026347697, -1.7876707315444946, -0.01357608288526535, -0.7491357326507568, -0.07045264542102814, -0.7411503195762634, -1.2433488368988037, -0.7945944666862488, -0.20292869210243225, -0.21040666103363037, -0.005117176100611687, -0.0007278653793036938, -0.0046497792936861515, -0.010928303003311157, -0.6292546987533569, -5.9602869441732764e-05, -7.056941103655845e-05, -0.003768724389374256, -0.0020691193640232086, -0.001971564954146743, -2.539125671319198e-05, -7.867782187531702e-06, -0.0008797351038083434, -0.001123035908676684, -0.4274686276912689, -0.0006523388437926769, -0.0002797450579237193, -0.2715319097042084, -0.19756679236888885, -1.8358061424805783e-05, -0.0003499372396618128, -0.001166854752227664, -0.017490901052951813, -1.0728830375228426e-06, -7.843663479434326e-05, -0.0018961322493851185, -0.011738159693777561, -0.001802606973797083, -0.06945936381816864, -0.00036137725692242384, -0.10996057838201523, -0.17444008588790894, -1.3318650722503662, -0.013934234157204628, -0.1059793159365654, -0.061525940895080566, -0.008244410157203674, -0.07721690833568573, -0.06574952602386475, -0.0013655632501468062, -0.22006312012672424, -0.031123243272304535, -0.05290311202406883, -0.04445890337228775, -0.0011759040644392371, -0.0010948146227747202, -1.5497195136049413e-06, -0.0002562671434134245, -0.0002536452084314078, -0.0004953111056238413, -0.0022702652495354414, -0.15935832262039185, -6.103329360485077e-05, -1.4543427823809907e-05, -0.0005696581210941076, -0.11268752068281174, -1.611079216003418, -0.00020215852418914437, -0.022037504240870476, -1.156323378381785e-05, -0.002118487609550357, -0.0411907322704792, -0.00022551853908225894, -1.0286097526550293, -0.00014959646796341985, -8.940656698541716e-06, -0.06826525181531906, -0.010475176386535168, -0.07071280479431152, -0.009166301228106022, -0.22664237022399902, -0.5364950895309448, -3.3854863431770355e-05, -0.0001896439935080707, -0.02544117532670498, -0.09352730214595795, -6.532455881824717e-05, -0.000270091783022508], "finish_reason": "stop"}], "metrics": {"energy": 189.38398046302794, "energy_per_token": 1.0405713212254282, "time": 7.998686, "time_per_token": 0.04394882417582418}}
{"outputs": [{"text": "try:\n        shutil.copytree(source_path, destination_path)\n\n    except FileNotFoundError:\n        raise ValueError(f\"{source_path} does not exist or is not accessible\")\n\n    except Exception:\n        print(\"Some unexpected error occurred.\")\n\n    file_names = []\n    for path in pathlib.Path(source_path).iterdir():\n        if path.is_file():\n            file_names.append(path.stem)\n    return (source_path, file_names)", "tokens": ["try", ":", "\n", "        ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " does", " not", " exist", " or", " is", " not", " accessible", "\"", ")", "\n", "\n", "    ", "except", " Exception", ":", "\n", "        ", "print", "(", "\"", "Some", " unexpected", " error", " occurred", ".", "\"", ")", "\n", "\n", "    ", "file", "_", "names", " =", " []", "\n", "    ", "for", " path", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " path", ".", "is", "_", "file", "():", "\n", "            ", "file", "_", "names", ".", "append", "(", "path", ".", "stem", ")", "\n", "    ", "return", " (", "source", "_", "path", ",", " file", "_", "names", ")", "\n", "\n", "if"], "logprobs": [-2.139524221420288, -0.0008517451351508498, -0.00546947680413723, -0.010864274576306343, -3.482330560684204, -0.00788054894655943, -0.004068550653755665, -0.04919489473104477, -0.016692960634827614, -0.019137153401970863, -0.04169189929962158, -0.0017723818309605122, -0.00027307120035402477, -0.0022879871539771557, -0.026003148406744003, -0.00010978573118336499, -1.6689160474925302e-05, -0.12920132279396057, -0.049589864909648895, -2.752424478530884, -0.6249288320541382, -0.030831074342131615, -0.7863851189613342, -0.5035775303840637, -7.92710343375802e-05, -0.4190506339073181, -0.03928085416555405, -0.026604389771819115, -0.9367859959602356, -0.3268911838531494, -8.153582894010469e-05, -0.4484178423881531, -0.5494179725646973, -0.4044935703277588, -1.1639634370803833, -0.07546775043010712, -0.0003212174342479557, -0.00021860594279132783, -0.057822730392217636, -0.9589911103248596, -0.003197915619239211, -0.021209105849266052, -0.902590274810791, -0.14873439073562622, -0.014659902080893517, -2.0610804557800293, -0.7906381487846375, -0.004834154155105352, -0.011168228462338448, -0.1285027414560318, -0.07612737268209457, -0.24831447005271912, -2.7157957553863525, -2.201688528060913, -0.015090235508978367, -0.004739123396575451, -2.276662826538086, -0.08926910161972046, -0.6099226474761963, -3.1910924911499023, -1.7082018852233887, -0.17817765474319458, -0.7285495400428772, -1.303589105606079, -0.693179726600647, -0.04886527359485626, -0.018940307199954987, -0.36208540201187134, -0.024519866332411766, -2.836162567138672, -0.047007203102111816, -1.098914384841919, -0.19264951348304749, -0.6115471720695496, -0.011566955596208572, -0.3529271185398102, -0.4520959258079529, -2.1091952323913574, -0.31015458703041077, -0.06654252111911774, -0.00024136967840604484, -0.00014399446081370115, -0.031038766726851463, -0.03271099552512169, -1.2362432479858398, -0.00012981049076188356, -4.0411134250462055e-05, -0.002191762439906597, -4.649054244509898e-05, -0.9509809017181396, -0.0009787060553207994, -0.0015930355293676257, -0.017790857702493668, -0.03669954836368561, -0.15880805253982544, -0.0677478238940239, -0.0024782679975032806, -0.07586231827735901, -1.2636104656849056e-05, -0.0066572073847055435, -0.12571394443511963, -0.010576623491942883, -0.0045828549191355705, -0.07439711689949036, -0.0025342749431729317, -0.08389582484960556, -0.0017664319602772593, -0.0012067424831911922, -0.0018035589018836617, -0.1142190620303154, -0.014190481044352055, -2.2775909900665283, -0.020337972790002823, -0.006556309759616852, -1.2569392919540405, -0.07607180625200272, -1.4086742401123047, -0.2222980409860611, -0.0001472126314183697, -8.105902816168964e-05, -0.11098112910985947, -0.010551380924880505, -2.50339189733495e-06, -5.972207145532593e-05, -0.3356727659702301, -0.14730289578437805, -0.011353762820363045, -1.2103065252304077], "finish_reason": "stop"}], "metrics": {"energy": 171.40693458366394, "energy_per_token": 1.3391166764348745, "time": 5.4714847, "time_per_token": 0.04274597421875}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"Source path does not exist.\")\n    elif not source_path.is_dir():\n        raise ValueError(\"Source path is not a directory.\")\n\n    files_to_copy = []\n\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            files_to_copy.append(str(entry.name))\n            shutil.copy2(str(entry), destination_path)\n\n    return source_path.name, files_to_copy", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "elif", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "files", "_", "to", "_", "copy", " =", " []", "\n", "\n", "    ", "for", " entry", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " entry", ".", "is", "_", "file", "():", "\n", "            ", "files", "_", "to", "_", "copy", ".", "append", "(", "str", "(", "entry", ".", "name", "))", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "str", "(", "entry", ")", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " files", "_", "to", "_", "copy", "\n", "\n", "def"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -1.3468053340911865, -0.0022972640581429005, -0.0022324419114738703, -0.0012310316087678075, -0.0020042823161929846, -1.966933996300213e-05, -0.00011979816190432757, -0.0007147617870941758, -0.00028427375946193933, -0.00112160702701658, -2.098061486321967e-05, -1.2993727978027891e-05, -0.0003358753747306764, -0.003859572345390916, -0.8837711811065674, -0.2935566306114197, -0.23530258238315582, -0.029505649581551552, -3.7431014789035544e-05, -2.90866428258596e-05, -0.0009662011871114373, -0.6523494124412537, -0.5902900695800781, -0.015977684408426285, -0.001702646492049098, -0.03039589896798134, -0.03591173514723778, -4.029192859889008e-05, -0.24946381151676178, -1.0479096174240112, -0.6821563839912415, -0.3717767596244812, -0.12518490850925446, -0.00037281715776771307, -0.0064373984932899475, -0.8730627298355103, -0.023875584825873375, -0.0008846183773130178, -0.005045775789767504, -0.09474184364080429, -1.7195278406143188, -0.03673700988292694, -0.03577728569507599, -3.3854863431770355e-05, -5.960446742392378e-06, -4.9232225137529895e-05, -0.0014403217937797308, -6.318072337307967e-06, -0.001622313866391778, -0.005740584805607796, -0.0009176096064038575, -0.00044848397374153137, -0.008712257258594036, -0.0035713245160877705, -1.2278481335670222e-05, -0.005555546842515469, -0.05357450246810913, -0.06209466606378555, -0.008509920910000801, -0.11517217755317688, -0.0025007424410432577, -0.009108420461416245, -0.015556300058960915, -0.022844476625323296, -0.0020015460904687643, -0.0001419681793777272, -0.0006405447493307292, -1.0170292854309082, -0.0008831891464069486, -2.104846477508545, -0.7464543581008911, -1.1343228816986084, -0.00020454221521504223, -0.022515611723065376, -0.03206827864050865, -0.16300836205482483, -0.017093945294618607, -1.26185941696167, -0.00019905969384126365, -0.12258478999137878, -3.3817481994628906, -0.012326017953455448, -0.0731310024857521, -1.1086402082582936e-05, -9.536697689327411e-06, -0.000448841426987201, -0.13216114044189453, -0.00023040501400828362, -0.00038115866482257843, -0.014772200956940651, -0.005264704581350088, -0.09310489147901535, -0.05903105437755585, -0.0002980979916173965, -0.05171690508723259, -2.7418097943154862e-06, -0.034965723752975464, -0.0572083406150341, -0.018333619460463524, -0.0007662221323698759, -0.2801893353462219, -0.00019167017308063805, -0.0001567479339428246, -5.960446742392378e-06, -2.407998726994265e-05, -0.0011794761521741748, -0.0007490689749829471, -0.0006980843027122319, -2.4938971996307373, -0.0005144941387698054, -0.006292293779551983, -0.13310670852661133, -0.34025490283966064, -0.0011831672163680196, -0.008428596891462803, -2.945802927017212, -0.6408195495605469, -5.8530047681415454e-05, -2.2053474822314456e-05, -0.0007320346776396036, -1.8526477813720703, -0.00273199868388474, -0.36124613881111145, -0.00020358874462544918, -0.028989184647798538, -0.14333729445934296, -0.00019822540343739092, -1.2260651588439941, -0.00011300401820335537, -1.2755313036905136e-05, -0.13977280259132385, -0.019651131704449654, -0.10569771379232407, -0.0030618475284427404, -0.06783905625343323, -0.4654046595096588, -3.397406908334233e-05, -4.1483970562694594e-05, -0.005525435321033001, -0.04502134770154953, -0.001408776268362999, -0.00704045407474041, -1.549708758830093e-05, -5.960446742392378e-06, -1.5258672647178173e-05, -7.629365427419543e-06, -0.6083600521087646, -0.009945835918188095, -1.1626516580581665], "finish_reason": "stop"}], "metrics": {"energy": 174.41149383354184, "energy_per_token": 1.0634847184972063, "time": 7.157408, "time_per_token": 0.04364273170731708}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\n            f\"Specified source path {source_path} is not a directory.\"\n        )\n    else:\n        src_dir_name = os.path.basename(source_path)\n        source_path = pathlib.Path(source_path)\n        if not pathlib.Path(destination_path).exists():\n            pathlib.Path(destination_path).mkdir(parents=True)\n        copy_files = shutil.copytree(source_path, pathlib.Path(destination_path) / src_dir_name,\n                                     dirs_exist_ok=True, dirs=False)\n    return src_dir_name, copy_files[1]", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "\"", "Spec", "ified", " source", " path", " {", "source", "_", "path", "}", " is", " not", " a", " directory", ".", "\"", "\n", "        ", ")", "\n", "    ", "else", ":", "\n", "        ", "src", "_", "dir", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "source", "_", "path", ")", "\n", "        ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "        ", "if", " not", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "exists", "():", "\n", "            ", "path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "        ", "copy", "_", "files", " =", " shut", "il", ".", "copy", "tree", "(", "source", "_", "path", ",", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", " /", " src", "_", "dir", "_", "name", ",", "\n", "                ", "                ", "     ", "dir", "s", "_", "exist", "_", "ok", "=", "True", ",", " d", "irs", "=", "False", ")", "\n", "    ", "return", " src", "_", "dir", "_", "name", ",", " copy", "_", "files", "[", "1", "]", "\n", "\n", "if"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -0.2582166790962219, -0.00014029949670657516, -0.003722169203683734, -0.013481409288942814, -0.017332278192043304, -0.0022701462730765343, -0.03535196930170059, -0.012435165233910084, -3.683499380713329e-05, -0.3537939190864563, -2.5210094451904297, -0.0100160613656044, -0.6080479621887207, -0.35010504722595215, -3.9714064598083496, -0.008667231537401676, -0.5042790770530701, -0.769095242023468, -1.1437573432922363, -0.01839412935078144, -8.427741704508662e-05, -5.447716102935374e-05, -0.05839952453970909, -0.2854020297527313, -0.09079619497060776, -0.12571130692958832, -0.2506032884120941, -0.8489965200424194, -0.3506276309490204, -0.9359747767448425, -0.04059178754687309, -0.00022289653134066612, -0.002074234653264284, -0.8693341016769409, -3.7087574005126953, -7.629103492945433e-05, -0.011630821973085403, -0.010939151048660278, -3.3903210163116455, -0.2551839351654053, -0.6289570331573486, -0.8446752429008484, -0.6087282299995422, -0.11337850242853165, -1.9898476600646973, -0.0009964506607502699, -0.011113056913018227, -0.000929281348362565, -0.12201009690761566, -2.3841855067985307e-07, -0.0002294515579706058, -0.09029083698987961, -4.088794958079234e-05, -2.1576648578047752e-05, -0.007324981968849897, -0.03251957520842552, -0.29058218002319336, -4.475227355957031, -0.02283480577170849, -1.4296234846115112, -0.33443090319633484, -0.5195758938789368, -0.0001627074379939586, -3.2543604902457446e-05, -0.005808261223137379, -0.006093732547014952, -0.018512211740016937, -0.00019834458362311125, -3.814624506048858e-05, -0.0011126763420179486, -0.27292296290397644, -0.19032222032546997, -3.5326790809631348, -0.33223089575767517, -0.40869975090026855, -0.0008591298246756196, -5.447716102935374e-05, -0.0015380469849333167, -0.004474983550608158, -0.014950139448046684, -0.00016080040950328112, -1.1801649634435307e-05, -0.003628814360126853, -8.248942322097719e-05, -1.019155502319336, -0.0058363499119877815, -0.009953508153557777, -0.002273952355608344, -0.707740843296051, -0.0013803249457851052, -1.8000440832111053e-05, -0.0015538772568106651, -0.0074896966107189655, -0.008084667846560478, -4.529942543740617e-06, -5.006777428206988e-06, -0.0007406114018522203, -0.007392078172415495, -0.003230117727071047, -0.00013863079948350787, -0.30342671275138855, -0.20702823996543884, -0.002713571535423398, -0.007349241059273481, -0.9538017511367798, -0.03690441697835922, -0.2520434856414795, -4.0196123123168945, -0.14016839861869812, -1.189055323600769, -0.6480965614318848, -1.4258732795715332, -0.00020990552729927003, -7.331102824537084e-05, -0.01097063347697258, -0.06554020941257477, -0.00380114559084177, -0.4195388853549957, -0.002621549181640148, -0.00038223114097490907, -0.008905218914151192, -0.8804867267608643, -0.000726197671610862, -7.855583680793643e-05, -0.0015885126776993275, -0.0018186711240559816, -0.043056320399045944, -8.797258487902582e-05, -4.887569048150908e-06, -0.3331231474876404, -0.15718872845172882, -0.04920113459229469, -9.775113539944869e-06, -1.7165990357170813e-05, -8.332382276421413e-05, -7.629365427419543e-06, -1.3925018310546875, -1.006011724472046, -0.020995741710066795, -0.02856375090777874, -0.11512638628482819, -0.8115050196647644, -0.11845874786376953, -0.004871404729783535, -0.053985364735126495, -2.3841855067985307e-07, -0.005190468393266201, -0.0014390123542398214, -0.03670552372932434, -1.5180796384811401, -0.6437318325042725, -0.011133216321468353, -0.330036997795105, -1.1531606912612915, -0.7899578213691711, -0.027482379227876663, -1.6758009195327759, -0.08225143700838089, -0.31294211745262146, -0.00012694983161054552, -0.0001102625101339072, -0.006226071622222662, -4.875540980719961e-05, -0.002186052966862917, -0.30686691403388977, -0.0003524397616274655, -7.962863310240209e-05, -2.5737509727478027, -0.5137522220611572, -0.3256763815879822, -0.1902679204940796, -0.024292664602398872, -0.8893161416053772], "finish_reason": "stop"}], "metrics": {"energy": 232.98625786113732, "energy_per_token": 1.2593851776277694, "time": 8.192475, "time_per_token": 0.04428364864864865}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"source_path must be a directory.\")\n\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.is_dir():\n        destination_path.mkdir(parents=True)\n\n    files = list(pathlib.Path(source_path).rglob(\"*\"))\n    copy_files = [f.relative_to(source_path).name for f in files]\n    shutil.copyfile(files[0], pathlib.Path(destination_path, copy_files[0]))\n    return (source_path, copy_files)", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "path", " must", " be", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "\n", "    ", "files", " =", " list", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "rg", "lob", "(", "\"", "*", "\"", "))", "\n", "    ", "copy", "_", "files", " =", " [", "f", ".", "relative", "_", "to", "(", "source", "_", "path", ")", ".", "name", " for", " f", " in", " files", "]", "\n", "    ", "sh", "util", ".", "copy", "file", "(", "files", "[", "0", "]", ",", " path", "lib", ".", "Path", "(", "destination", "_", "path", ",", " copy", "_", "files", "[", "0", "]))", "\n", "    ", "return", " (", "source", "_", "path", ",", " copy", "_", "files", ")", "\n", "\n", "#"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -0.2582166790962219, -0.00014029949670657516, -0.003722169203683734, -0.013481409288942814, -0.017332278192043304, -0.0022701462730765343, -0.03535196930170059, -0.012435165233910084, -3.683499380713329e-05, -0.3537939190864563, -0.9389418363571167, -1.531175136566162, -0.052949920296669006, -0.009172916412353516, -0.6235414743423462, -0.04966609179973602, -0.4000140130519867, -0.14640597999095917, -1.7501165866851807, -0.023886874318122864, -0.0013231817865744233, -0.0055376458913087845, -0.5093120336532593, -0.0007482351502403617, -3.6977765560150146, -0.08146113902330399, -0.33332353830337524, -0.061989352107048035, -0.10745660215616226, -0.0002586507180240005, -2.95634672511369e-05, -0.00260740052908659, -0.002476127352565527, -0.007309834472835064, -1.168244216387393e-05, -2.2053474822314456e-05, -0.001353539526462555, -0.2782179117202759, -0.17283566296100616, -0.24106772243976593, -0.03726108744740486, -0.03818795084953308, -8.4638240878121e-06, -8.583032467868179e-06, -0.0001560327800689265, -0.8476922512054443, -4.017272294731811e-05, -0.012142430059611797, -0.015125932171940804, -0.010991856455802917, -0.001829142333008349, -0.3045220971107483, -0.0005100856651552022, -0.0011211306555196643, -0.005827461369335651, -0.0008627030183561146, -9.667406266089529e-05, -0.41218069195747375, -0.06760989874601364, -0.0035473296884447336, -0.0030242919456213713, -0.2904767096042633, -0.027865728363394737, -0.1752219796180725, -0.0006550788530148566, -2.1309428215026855, -0.5502598881721497, -2.190542221069336, -0.7698574662208557, -0.36442020535469055, -0.0003526780928950757, -0.00011991735664196312, -0.0032599421683698893, -0.0037576796021312475, -0.008908763527870178, -7.879423355916515e-05, -2.0503786799963564e-05, -0.004039581399410963, -0.0012249593855813146, -0.5351152420043945, -0.0003500564198475331, -0.7237796187400818, -0.03317814692854881, -0.08407601714134216, -0.8070721626281738, -0.005876999814063311, -0.03168388083577156, -0.3084293603897095, -3.5970895290374756, -0.16750089824199677, -0.7933602333068848, -0.4685371220111847, -1.443321943283081, -1.1087114810943604, -0.09177862852811813, -2.2117726802825928, -0.000259365770034492, -0.0008417400531470776, -0.0023411503061652184, -0.17588558793067932, -0.00016366096679121256, -2.8132995794294402e-05, -0.012206495739519596, -1.2161554098129272, -2.4020490646362305, -0.018570253625512123, -0.0009291622554883361, -0.0007413261337205768, -0.007772204466164112, -0.40407463908195496, -0.008705639280378819, -0.39073777198791504, -0.5017167925834656, -0.0002004899288294837, -2.753696753643453e-05, -0.001809746609069407, -2.165950298309326, -0.38711583614349365, -0.8291382193565369, -0.41995692253112793, -0.01645517908036709, -0.0007594323833473027, -0.023501647636294365, -1.54707670211792, -0.0014450832968577743, -0.00011860620725201443, -0.010966625064611435, -0.009064711630344391, -0.04653440788388252, -6.496695277746767e-05, -2.276871418871451e-05, -0.3916222155094147, -0.13357806205749512, -0.00015877417172305286, -0.0003906917118001729, -0.0014402027009055018, -0.0005447572330012918, -0.05892462655901909, -0.01782095432281494, -0.3910607099533081, -1.1638456583023071, -0.7765272259712219, -0.2962435185909271, -7.879423355916515e-05, -0.00011789103882620111, -0.0657326728105545, -0.023565571755170822, -0.00014029949670657516, -2.8371408916427754e-05, -0.30421242117881775, -0.21421951055526733, -0.014077998697757721, -2.4966704845428467], "finish_reason": "stop"}], "metrics": {"energy": 179.37591795539856, "energy_per_token": 1.087126775487264, "time": 7.157165, "time_per_token": 0.043376757575757575}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    if source_path.is_dir():\n        destination_path = pathlib.Path(destination_path)\n        if not destination_path.exists():\n            destination_path.mkdir()\n        shutil.copytree(source_path, destination_path)\n        return (source_path.name,\n                [filename for filename in list(source_path.glob(\"**/*.*\")) if not filename.is_file()])\n    else:\n        raise ValueError('Source path must be an existing and accessible directory.')", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "        ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "            ", "destination", "_", "path", ".", "mk", "dir", "()", "\n", "        ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "        ", "return", " (", "source", "_", "path", ".", "name", ",", "\n", "                ", "[", "filename", " for", " filename", " in", " list", "(", "source", "_", "path", ".", "glob", "(", "\"", "**", "/*", ".", "*", "\"", "))", " if", " not", " filename", ".", "is", "_", "file", "()", "])", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "('", "Source", " path", " must", " be", " an", " existing", " and", " accessible", " directory", ".", "')", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -0.4539678692817688, -2.0901215076446533, -3.433168603805825e-05, -4.6132929128361866e-05, -0.006794207729399204, -0.5478131771087646, -1.1801649634435307e-05, -0.13141706585884094, -0.14317893981933594, -0.022006835788488388, -0.019096219912171364, -1.6234652996063232, -0.03984908014535904, -0.061570219695568085, -0.04922417178750038, -0.006206287071108818, -2.2411095415009186e-05, -4.446407547220588e-05, -0.0009427393670193851, -0.000766102981287986, -0.0029044845141470432, -1.7762025890988298e-05, -1.168244216387393e-05, -0.0009345216676592827, -0.01075955480337143, -0.19194018840789795, -0.6097915172576904, -0.3774780035018921, -0.019386926665902138, -2.7179348762729205e-05, -6.318072337307967e-06, -0.0003026265767402947, -0.4580634832382202, -0.0032806170638650656, -0.010258093476295471, -0.0022845377679914236, -0.19111208617687225, -0.00046921687317080796, -0.0004673104267567396, -0.005380553659051657, -0.0018021309515461326, -7.271502545336261e-05, -0.6180903315544128, -0.00621055206283927, -0.3010869324207306, -2.289802074432373, -0.002352448645979166, -0.00032360086333937943, -0.009531467221677303, -0.019458245486021042, -0.0046000611037015915, -0.04741940647363663, -4.792098479811102e-05, -0.0002843929105438292, -0.010852836072444916, -0.04060598462820053, -6.41325386823155e-05, -1.3708974620385561e-05, -0.325968474149704, -0.049196481704711914, -0.14445891976356506, -1.2607395648956299, -1.3575032949447632, -0.2936689853668213, -0.0001070442158379592, -0.00010954733443213627, -0.027509285137057304, -0.05191034451127052, -0.002656504511833191, -2.029418468475342, -0.03348911553621292, -0.36112427711486816, -2.374605655670166, -1.0597350597381592, -0.005856734234839678, -0.028419967740774155, -2.2490248680114746, -1.2009481191635132, -1.3322886228561401, -0.00045718232286162674, -9.393251093570143e-05, -0.0007017772295512259, -1.498931884765625, -1.7276986837387085, -0.06619826704263687, -1.482080101966858, -0.020666737109422684, -0.39388900995254517, -1.7456135749816895, -0.007945952005684376, -0.010869580321013927, -0.28659263253211975, -1.4260993003845215, -0.17154432833194733, -0.0035886666737496853, -0.08026092499494553, -1.6212332411669195e-05, -2.253715991973877, -0.004899519495666027, -0.11365997046232224, -0.01489846408367157, -0.044616930186748505, -0.2508279085159302, -0.000259365770034492, -0.007492536213248968, -0.0009870424401015043, -0.03570343926548958, -0.018688784912228584, -3.802703940891661e-05, -2.1905767917633057, -1.425295352935791, -0.4350007474422455, -0.9665272831916809, -0.13042083382606506, -1.0688031911849976, -0.049510225653648376, -2.242750644683838, -0.03477979823946953, -0.010553739964962006, -0.6378339529037476, -0.02347114123404026, -1.8096177577972412, -1.9073468138230965e-06, -5.960462772236497e-07, -3.373566141817719e-05, -0.00031990656862035394, -0.19012786448001862], "finish_reason": "stop"}], "metrics": {"energy": 192.37196982002249, "energy_per_token": 1.3547321818311442, "time": 6.0921926, "time_per_token": 0.042902764788732395}}
{"outputs": [{"text": "try:\n        if pathlib.Path(source_path).is_dir():\n            pass\n        else:\n            raise ValueError('This directory is not valid!')\n    except ValueError as ex:\n        raise ValueError(f'This is not a directory or path {ex}')\n    print(f'SOURCE DIRECTORY: {source_path}')\n    print(f'DESTINATION DIRECTORY: {destination_path}')\n    for f in pathlib.Path(source_path).iterdir():\n        if f.is_file():\n            if pathlib.Path(destination_path).is_dir():\n                shutil.copy(f, destination_path)\n                print(f'File {f.name} was copied to {destination_path}.')\n                print(f'Copying process was finished!')\n                return destination_path, [f.name]\n    return source_path, []", "tokens": ["try", ":", "\n", "        ", "if", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "            ", "pass", "\n", "        ", "else", ":", "\n", "            ", "raise", " Value", "Error", "('", "This", " directory", " is", " not", " valid", "!", "')", "\n", "    ", "except", " Value", "Error", " as", " ex", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "This", " is", " not", " a", " directory", " or", " path", " {", "ex", "}", "')", "\n", "    ", "print", "(", "f", "'", "S", "OURCE", " DIRECT", "ORY", ":", " {", "source", "_", "path", "}", "')", "\n", "    ", "print", "(", "f", "'", "DE", "ST", "IN", "ATION", " DIRECT", "ORY", ":", " {", "destination", "_", "path", "}", "')", "\n", "    ", "for", " f", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " f", ".", "is", "_", "file", "():", "\n", "            ", "if", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "                ", "sh", "util", ".", "copy", "(", "f", ",", " destination", "_", "path", ")", "\n", "                ", "print", "(", "f", "'", "File", " {", "f", ".", "name", "}", " was", " copied", " to", " {", "destination", "_", "path", "}", ".", "')", "\n", "                ", "print", "(", "f", "'", "Copy", "ing", " process", " was", " finished", "!", "')", "\n", "                ", "return", " destination", "_", "path", ",", " [", "f", ".", "name", "]", "\n", "    ", "return", " source", "_", "path", ",", " []", "\n", "\n", "if"], "logprobs": [-2.139524221420288, -0.0008517451351508498, -0.00546947680413723, -0.010864274576306343, -2.153290033340454, -1.8823927640914917, -0.001802606973797083, -0.0002526917669456452, -0.012503685429692268, -0.018195848912000656, -0.05714135244488716, -0.0001292145170737058, -4.494089080253616e-05, -0.005571314133703709, -0.004285082221031189, -0.15461944043636322, -0.00013195598148740828, -0.1360187977552414, -0.18898361921310425, -0.04794439673423767, -0.03575451299548149, -2.425365686416626, -0.01450047641992569, -0.05673009529709816, -0.050034455955028534, -0.00034433635300956666, -0.014861232601106167, -0.0015630420530214906, -0.03687673062086105, -0.045213013887405396, -5.6622808187967166e-05, -1.2924846410751343, -3.529855966567993, -3.3658719062805176, -1.4860620498657227, -0.1703197956085205, -1.3625521659851074, -1.9294662475585938, -0.12186932563781738, -0.0035367575474083424, -0.23859909176826477, -0.004591754637658596, -0.23854923248291016, -2.3245540432981215e-05, -0.5714349150657654, -3.1161952018737793, -0.06317418813705444, -0.009883160702884197, -0.0024154791608452797, -1.6569998264312744, -0.7543656229972839, -0.0005494038923643529, -0.25204384326934814, -0.6294565796852112, -0.4460604786872864, -1.4922972917556763, -1.9614875316619873, -0.6022108793258667, -0.35394486784935, -0.6092832088470459, -3.0549676418304443, -3.3420281410217285, -2.673421859741211, -0.1941053718328476, -0.08833920210599899, -0.13122889399528503, -0.2916935086250305, -0.860238790512085, -4.520293235778809, -0.35575053095817566, -0.7411031723022461, -0.19875961542129517, -5.182670593261719, -0.8567578792572021, -2.1524229049682617, -0.005732998717576265, -0.6852295994758606, -0.10102412849664688, -0.06985541433095932, -0.00022551853908225894, -4.160317621426657e-05, -0.09768808633089066, -0.07778041809797287, -0.00582094257697463, -0.10538094490766525, -0.46885544061660767, -0.06481636315584183, -0.015968767926096916, -0.008124753832817078, -0.049862995743751526, -0.0003813969960901886, -0.02976742759346962, -0.006967059802263975, -0.026249006390571594, -0.0006350646144710481, -0.01365604903548956, -0.01080283522605896, -0.008480606600642204, -2.145764938177308e-06, -9.298280929215252e-06, -0.026153434067964554, -0.003456809790804982, -0.003660052316263318, -0.30785611271858215, -3.5721640586853027, -3.2159616947174072, -0.15169696509838104, -0.6405237317085266, -0.00011228884250158444, -6.115249561844394e-05, -0.006790655665099621, -0.00517517002299428, -0.005404029972851276, -5.721882189391181e-05, -8.4638240878121e-06, -0.015994226559996605, -0.00011491115583339706, -0.3670910596847534, -0.0005924138822592795, -0.0029217195697128773, -0.04040324315428734, -0.009936394169926643, -0.378833532333374, -0.2488495260477066, -0.002649251837283373, -0.0580829381942749, -5.722029527532868e-06, -0.11708926409482956, -0.13836495578289032, -0.01677045039832592, -0.00511753186583519, -2.3479623794555664, -1.2775068283081055, -0.0007639588438905776, -0.0002335037279408425, -0.0027558940928429365, -0.026593826711177826, -0.21214503049850464, -6.12716976320371e-05, -4.410734163684538e-06, -0.018282821401953697, -0.006818479858338833, -0.4096718728542328, -0.00035506143467500806, -0.00813799723982811, -0.04862900450825691, -0.01216869242489338, -0.0033831524197012186, -0.5848172903060913, -0.0002549561613705009, -3.2543604902457446e-05, -0.004230597522109747, -0.2342018336057663, -0.24687691032886505, -0.07277914136648178, -0.38528212904930115, -0.0001494772732257843, -2.0265558760002023e-06, -0.017440177500247955, -0.0255258921533823, -0.48617056012153625, -0.4300711154937744, -0.07367876917123795, -0.025547971948981285, -0.8002552390098572, -1.4013185501098633, -1.1926929950714111, -0.05069882422685623, -0.9090741872787476, -0.031095508486032486, -0.014632882550358772, -1.2807753086090088, -0.23273949325084686, -0.9011757969856262, -0.4948658049106598, -0.07796403020620346, -0.000567275274079293, -7.271740287251305e-06, -0.032512880861759186, -2.5826504230499268, -0.06409221887588501, -0.0040708063170313835, -1.0054874420166016, -1.160022258758545, -0.2204025685787201, -0.0813450887799263, -0.24547776579856873, -4.625211715698242, -0.7709546089172363, -2.3905744552612305, -2.1896605491638184, -2.9365947246551514, -1.9751639366149902, -0.09928712248802185, -0.004712783731520176, -0.9882332682609558, -0.8863686919212341, -2.892807960510254, -0.0005357022164389491, -0.00024577934527769685, -0.12010063976049423, -0.32020875811576843, -0.040385954082012177, -0.023991277441382408, -0.0053587364964187145, -0.04804858937859535, -0.01997544802725315, -2.118342161178589, -1.2153103351593018, -0.8128293752670288, -0.00036590558011084795, -0.00016807096835691482, -0.015142605639994144, -0.28340664505958557, -0.18375366926193237, -0.04073108732700348, -0.9526240229606628], "finish_reason": "stop"}], "metrics": {"energy": 265.26956014251726, "energy_per_token": 1.222440369320356, "time": 9.46105, "time_per_token": 0.04359930875576037}}
{"outputs": [{"text": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} doesn't exist\")\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    file_names = []\n    for file in pathlib.Path(source_path).rglob(\"*\"):\n        file_names.append(file.name)\n\n    for file in file_names:\n        shutil.copy(os.path.join(source_path, file), os.path.join(destination_path, file))\n\n    return source_path, file_names", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " doesn", "'", "t", " exist", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "file", "_", "names", " =", " []", "\n", "    ", "for", " file", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "rg", "lob", "(", "\"", "*", "\"", "):", "\n", "        ", "file", "_", "names", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "for", " file", " in", " file", "_", "names", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "destination", "_", "path", ",", " file", "))", "\n", "\n", "    ", "return", " source", "_", "path", ",", " file", "_", "names", "\n", "\n", "if"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -1.4777073860168457, -0.0005192600074224174, -0.004519605077803135, -0.0024346255231648684, -1.0781406164169312, -0.0007420408655889332, -0.019221119582653046, -0.00036173476837575436, -4.851700214203447e-05, -0.09294456988573074, -0.017029136419296265, -0.0020086844451725483, -0.053569868206977844, -0.04169007018208504, -5.2569914259947836e-05, -0.1783532053232193, -0.571355402469635, -0.38015633821487427, -1.1626490354537964, -0.00748780369758606, -0.0001652104256208986, -0.00021646064124070108, -0.056761182844638824, -2.032435655593872, -0.010094188153743744, -3.611976353568025e-05, -0.09918327629566193, -0.7881779670715332, -0.0006231511943042278, -0.0071571627631783485, -0.6111240983009338, -0.20913444459438324, -0.04676366597414017, -0.015578364953398705, -0.0007802779437042773, -0.0001541257370263338, -0.008640876971185207, -0.004615487065166235, -0.004459674004465342, -0.0002602000313345343, -0.004269294906407595, -1.9311717551317997e-05, -6.318072337307967e-06, -0.00069165148306638, -0.0019164782715961337, -0.00043072958942502737, -0.01370955165475607, -0.011589226312935352, -1.0490362910786644e-05, -0.014417875558137894, -0.04558780416846275, -0.018147971481084824, -0.023235663771629333, -0.0017617909470573068, -0.00012587709352374077, -6.41325386823155e-05, -0.0020468730945140123, -0.12236393988132477, -0.01706230267882347, -0.04528980329632759, -0.06534246355295181, -0.07739897072315216, -0.00023195437097456306, -0.0005993238883093, -0.5571466088294983, -0.00048160876031033695, -2.960880994796753, -0.026328546926379204, -0.9433903098106384, -0.14415647089481354, -0.3425736129283905, -0.012206141836941242, -0.21833857893943787, -0.2233808934688568, -1.0179858207702637, -0.8811087012290955, -0.8313371539115906, -7.509902934543788e-05, -6.949660019017756e-05, -0.011715538799762726, -0.003513237228617072, -0.003909208811819553, -8.4638240878121e-06, -5.8412379075889476e-06, -0.0069365170784294605, -5.793403761344962e-05, -1.3091390132904053, -0.0009667966514825821, -0.8103198409080505, -0.02792021445930004, -0.05015521124005318, -0.5245124697685242, -0.002860266249626875, -0.02381470799446106, -0.0038167026359587908, -2.1714224815368652, -0.027103176340460777, -0.3455004394054413, -0.004961440805345774, -0.0015966061037033796, -0.00206055399030447, -0.1951770931482315, -0.005882570054382086, -0.0696607455611229, -0.008104533888399601, -0.03003341518342495, -0.3673538863658905, -0.0020692383404821157, -1.9977525472640991, -0.2816421687602997, -0.8880730867385864, -0.03167441114783287, -4.207999518257566e-05, -0.00021860594279132783, -0.004788360092788935, -0.002826506970450282, -0.004227511119097471, -0.41732850670814514, -0.00016342257731594145, -4.935142715112306e-05, -0.0016468308167532086, -0.37445002794265747, -1.006076693534851, -9.822363062994555e-05, -0.0013653251808136702, -0.000503770774230361, -0.005467817187309265, -0.0003666205739136785, -0.018188709393143654, -0.0001137191939051263, -1.2755313036905136e-05, -0.001644093543291092, -0.010484850034117699, -0.005935661029070616, -0.00043335105874575675, -0.976884126663208, -0.0004913791781291366, -0.0003367095487192273, -0.0002520958660170436, -0.0014350840356200933, -0.00014375607133843005, -0.009999656118452549, -9.405170567333698e-05, -7.152531907195225e-06, -0.020512118935585022, -0.009081841446459293, -0.00785133522003889, -0.007327585481107235, -0.210298091173172, -0.006988131906837225, -0.07044930756092072, -0.6203864216804504, -8.928377064876258e-05, -0.00012003655137959868, -0.04332587495446205, -0.009934977628290653, -0.00019608005823101848, -0.00011157367407577112, -0.6120354533195496, -0.007133609149605036, -0.921349823474884], "finish_reason": "stop"}], "metrics": {"energy": 177.3728186092376, "energy_per_token": 1.0881768012836663, "time": 6.9228606, "time_per_token": 0.04247153742331288}}
{"outputs": [{"text": "if not pathlib.Path(source_path).exists():\n        raise ValueError(f\"{source_path} does not exist\")\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"{source_path} is not a directory\")\n    source_files = []\n    for file_name in pathlib.Path(source_path).iterdir():\n        if file_name.is_file():\n            source_files.append(file_name.stem)\n    # shutil.copyfileobj(sys.stdin, open(destination_path, \"w\"))\n    if pathlib.Path(destination_path).exists():\n        if pathlib.Path(destination_path).is_dir():\n            shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n            return (source_path, source_files)\n        if pathlib.Path(destination_path).is_file():\n            shutil.copyfile(source_path, destination_path)\n            return (source_path,", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " directory", "\"", ")", "\n", "    ", "source", "_", "files", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " file", "_", "name", ".", "is", "_", "file", "():", "\n", "            ", "source", "_", "files", ".", "append", "(", "file", "_", "name", ".", "stem", ")", "\n", "    ", "#", " shut", "il", ".", "copy", "file", "obj", "(", "sys", ".", "std", "in", ",", " open", "(", "destination", "_", "path", ",", " \"", "w", "\"", "))", "\n", "    ", "if", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "exists", "():", "\n", "        ", "if", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "            ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " destination", "_", "path", ",", " d", "irs", "_", "exist", "_", "ok", "=", "True", ")", "\n", "            ", "return", " (", "source", "_", "path", ",", " source", "_", "files", ")", "\n", "        ", "if", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "file", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "            ", "return", " (", "source", "_", "path", ","], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -1.4942700862884521, -0.2080790400505066, -0.023611096665263176, -0.002234345069155097, -0.0481145977973938, -0.04637543112039566, -4.5060096454108134e-05, -0.2711859345436096, -0.5338363647460938, -0.4466371536254883, -1.2474490404129028, -0.007560212630778551, -0.00012432756193447858, -0.00034814971149899065, -0.09910177439451218, -0.5313523411750793, -0.0024894457310438156, -0.02278248779475689, -0.8823210597038269, -0.000560245884116739, -0.0061703892424702644, -0.4060917794704437, -0.3367040455341339, -0.025728533044457436, -0.07544829696416855, -2.13382354559144e-05, -2.074220174108632e-05, -0.0020493713673204184, -0.0023071356117725372, -0.012514634057879448, -2.0503786799963564e-05, -4.0531076592742465e-06, -0.00026246439665555954, -0.00021419614495243877, -0.002325689420104027, -1.0609570381348021e-05, -0.0017088347813114524, -0.004013341851532459, -0.0016093410085886717, -0.0004328744253143668, -0.01074787974357605, -0.007633090019226074, -9.536697689327411e-06, -0.004595077130943537, -0.029284091666340828, -0.0073422593995928764, -0.011233299039304256, -0.0017872564494609833, -0.00022754464589525014, -4.1483970562694594e-05, -0.001599105424247682, -0.02301294542849064, -0.008309908211231232, -0.02589826099574566, -0.04410102963447571, -0.056729309260845184, -0.00025138078490272164, -0.0008573431987315416, -0.8243746757507324, -2.6203019618988037, -0.08844941854476929, -1.872168779373169, -0.11682890355587006, -1.5112340450286865, -0.015183700248599052, -0.04884915426373482, -0.28835099935531616, -1.1794501543045044, -1.2528587579727173, -0.5547381043434143, -0.023037409409880638, -0.7002711892127991, -0.00011038171214750037, -4.005352093372494e-05, -0.0027718241326510906, -0.0023167694453150034, -0.00329772662371397, -3.290122185717337e-05, -1.2397689715726301e-05, -0.0019612142350524664, -3.9457496313843876e-05, -0.4944528341293335, -0.0006959400488995016, -0.001586013357155025, -0.012820794247090816, -0.0018828060710802674, -0.12014652043581009, -0.2586628198623657, -0.00011407678539399058, -0.00010251473577227443, -0.0014221088495105505, -0.07354132831096649, -6.437280717364047e-06, -0.007601384539157152, -0.1740172654390335, -0.014698432758450508, -0.0010065733222290874, -0.06314956396818161, -0.000200609109015204, -0.002709767082706094, -0.0032645761966705322, -0.0010303908493369818, -0.001312228967435658, -0.15683721005916595, -4.60137271147687e-05, -8.046303264563903e-05, -0.1080579087138176, -2.4557368755340576, -0.00815656129270792, -0.0041518923826515675, -0.22822628915309906, -3.9793691635131836, -2.1942405700683594, -0.0011553048389032483, -0.0679839625954628, -0.06354431807994843, -2.2082130908966064, -1.6222941875457764, -0.18031428754329681, -3.025749683380127, -0.0030423568096011877, -0.03863867372274399, -0.0003575639275368303, -0.1397290676832199, -1.28537917137146, -0.1362246870994568, -0.4490276277065277, -0.05933981388807297, -0.022177428007125854, -0.2340521365404129, -1.628443956375122, -0.4357467591762543, -0.14388014376163483, -0.16255879402160645, -0.0807577446103096, -0.03443813696503639, -2.9211106300354004, -1.604070782661438, -3.671578815556131e-05, -2.2172682292875834e-05, -0.0010438475292176008, -0.0028062984347343445, -0.004959305748343468, -8.40390202938579e-05, -1.3589766240329482e-05, -0.0026761216577142477, -0.0017463208641856909, -0.1926184445619583, -0.1757614016532898, -0.007473841775208712, -0.002056271303445101, -2.2972497940063477, -0.9817509651184082, -2.002696055569686e-05, -0.00014780859055463225, -0.0009558399324305356, -0.0014646052150055766, -0.013092387467622757, -4.327203714638017e-05, -1.9907753085135482e-05, -0.0014062763657420874, -0.0005240259342826903, -0.005815491080284119, -2.6225699912174605e-05, -0.2636853754520416, -0.009588733315467834, -0.0035109801683574915, -0.003574294038116932, -1.053153157234192, -0.0005415403284132481, -0.00012468514614738524, -0.05424148961901665, -0.35422298312187195, -0.00264021591283381, -0.03113306500017643, -0.0002181292074965313, -0.002099454402923584, -0.0026202413719147444, -0.10221647471189499, -0.00041130665340460837, -4.660974445869215e-05, -1.3613450527191162, -0.4298553764820099, -0.005373676773160696, -0.0014724613865837455, -0.005871430039405823, -1.4305104514278355e-06, -0.00448020501062274, -0.0032506741117686033, -0.03329484164714813, -0.0806022509932518, -0.01678498648107052, -1.7696641683578491, -0.6089220643043518, -0.9343004822731018, -0.5900142192840576, -0.0003178806509822607, -0.022672133520245552, -0.15027925372123718, -0.08724424242973328, -5.280832192511298e-05, -0.0003383779258001596, -0.005412092432379723, -0.009691804647445679, -0.20034466683864594, -3.093571186065674, -0.07319537550210953, -1.4185804502631072e-05, -1.5616295058862306e-05, -0.00022825974156148732, -0.0006319671520031989, -0.0033652123529464006, -7.30726242181845e-05, -3.325883881188929e-05, -0.0006210067658685148, -0.00037222131504677236, -0.013782335445284843, -0.0003713871701620519, -0.004373628180474043, -0.011667937971651554, -0.003591755172237754, -0.001783329644240439, -0.17015650868415833, -3.611976353568025e-05, -0.0003846143954433501, -0.01798149012029171, -0.4025398790836334, -0.13959760963916779, -0.031019121408462524, -5.411955135059543e-05, -0.0007683662115596235, -0.0006378046819008887, -0.008289100602269173, -5.3881147323409095e-05, -3.933898824470816e-06, -0.029134392738342285, -0.01062580943107605, -0.09174437075853348, -0.022880595177412033, -0.016244081780314445, -0.004956102930009365, -1.168244216387393e-05, -0.0002525725867599249, -0.0010028815595433116], "finish_reason": "length"}], "metrics": {"energy": 309.83619892311117, "energy_per_token": 1.210297652043403, "time": 11.344644, "time_per_token": 0.044315015625}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' must be a directory.\")\n\n    files = []\n\n    for file in source_path.rglob('*'):\n        if file.is_file():\n            files.append(str(file.name))\n\n    shutil.copytree(source_path, destination_path)\n    return source_path.name, files", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " path", " '", "{", "source", "_", "path", "}'", " must", " be", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "files", " =", " []", "\n", "\n", "    ", "for", " file", " in", " source", "_", "path", ".", "rg", "lob", "('", "*", "')", ":", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "files", ".", "append", "(", "str", "(", "file", ".", "name", "))", "\n", "\n", "    ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -2.196329355239868, -0.00027581225731410086, -0.14177700877189636, -0.22263731062412262, -0.027472635731101036, -2.777537883957848e-05, -3.635817120084539e-05, -0.0010837402660399675, -0.882905900478363, -3.433168603805825e-05, -0.0038202654104679823, -0.015569327399134636, -0.01066697295755148, -0.002170351566746831, -0.04481688141822815, -0.010073300451040268, -3.0040289857424796e-05, -0.29324620962142944, -0.681873619556427, -0.42124485969543457, -2.1488661766052246, -0.33296892046928406, -1.09676194190979, -0.0007758706342428923, -0.007757891900837421, -0.0001062098381225951, -0.00010942813969450071, -0.04849023371934891, -2.477337598800659, -0.0706317201256752, -0.22222177684307098, -0.09763078391551971, -0.4800127148628235, -0.005470899399369955, -0.00039939055568538606, -0.003214313881471753, -0.09692742675542831, -0.0005925330333411694, -2.915252923965454, -0.5809193253517151, -0.5848979353904724, -0.007379771675914526, -0.5909464359283447, -0.00015686711412854493, -0.10113155096769333, -0.7673167586326599, -0.37515494227409363, -0.1939845085144043, -0.00014709345123264939, -2.372236667724792e-05, -7.64102369430475e-05, -1.5980020761489868, -0.0007902836659923196, -0.8142772316932678, -0.020472761243581772, -0.4418606758117676, -0.0005016260547563434, -0.03508531674742699, -0.02030619978904724, -0.1123558059334755, -0.23903481662273407, -0.0007967158453539014, -0.030974511057138443, -7.152555099310121e-07, -0.011625872924923897, -0.14954987168312073, -0.020077219232916832, -0.002085060114040971, -0.33283790946006775, -0.002258371328935027, -0.0004213160718791187, -0.0010760000441223383, -2.087813138961792, -0.0006871246150694788, -0.00819262396544218, -0.08418023586273193, -1.2486861944198608, -0.002612869720906019, -0.005287709180265665, -0.08955755084753036, -0.007376695051789284, -1.1400598287582397, -0.00021431533969007432, -5.340433563105762e-05, -0.008236016146838665, -0.6429188251495361, -0.0044059110805392265, -0.12494885176420212, -0.00035124807618558407, -0.00010549465514486656, -0.011571315117180347, -0.06121763214468956, -0.00013028726971242577, -4.291525328881107e-06, -0.21281945705413818, -0.03077131137251854, -1.6897258758544922, -0.13832664489746094, -0.3324657678604126, -0.0010520643554627895, -5.686121585313231e-05, -0.011390771716833115, -0.07235530018806458, -0.0015893458621576428, -0.007217050530016422, -1.4626474380493164, -5.960462772236497e-07, -5.960462772236497e-07, -2.4318398573086597e-05, -0.00018606838420964777, -0.09983650594949722], "finish_reason": "stop"}], "metrics": {"energy": 141.74231428146362, "energy_per_token": 1.1339385142517089, "time": 5.2633677, "time_per_token": 0.042106941599999996}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f'The source directory {source_path} is not accessible.')\n    else:\n        source_path = pathlib.Path(source_path)\n        destination_path = pathlib.Path(destination_path)\n        if not destination_path.is_dir():\n            destination_path.mkdir()\n        else:\n            source_dir_files = []\n            for file in pathlib.Path(source_path).rglob('*'):\n                if file.is_file():\n                    source_dir_files.append(file.name)\n            shutil.copy2(source_path, destination_path)\n            return source_path.name, source_dir_files", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "The", " source", " directory", " {", "source", "_", "path", "}", " is", " not", " accessible", ".", "')", "\n", "    ", "else", ":", "\n", "        ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "        ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "        ", "if", " not", " destination", "_", "path", ".", "is", "_", "dir", "():", "\n", "            ", "destination", "_", "path", ".", "mk", "dir", "()", "\n", "        ", "else", ":", "\n", "            ", "source", "_", "dir", "_", "files", " =", " []", "\n", "            ", "for", " file", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "rg", "lob", "('", "*", "')", ":", "\n", "                ", "if", " file", ".", "is", "_", "file", "():", "\n", "                ", "    ", "source", "_", "dir", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "source", "_", "path", ",", " destination", "_", "path", ")", "\n", "            ", "return", " source", "_", "path", ".", "name", ",", " source", "_", "dir", "_", "files", "\n", "\n", "def"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -0.2582166790962219, -0.00014029949670657516, -0.003722169203683734, -0.013481409288942814, -0.017332278192043304, -0.0022701462730765343, -0.03535196930170059, -0.012435165233910084, -3.683499380713329e-05, -0.3537939190864563, -0.6604689359664917, -1.229731798171997, -1.5411204099655151, -1.0104135274887085, -1.465965747833252, -0.7950744032859802, -0.005466157104820013, -7.891343557275832e-05, -6.615896563744172e-05, -0.04996766895055771, -1.6998827457427979, -0.28005537390708923, -3.194230079650879, -1.191178560256958, -0.11969142407178879, -0.0026532942429184914, -0.9238466620445251, -3.1122918128967285, -0.0001426833332516253, -0.014186015352606773, -0.00921980943530798, -1.9808900356292725, -0.051114607602357864, -1.106996774673462, -0.12535907328128815, -0.10981938242912292, -0.00024780540843494236, -5.543078441405669e-05, -0.007072532549500465, -0.005753504112362862, -0.0069115376099944115, -4.1483970562694594e-05, -9.298280929215252e-06, -0.0008111285860650241, -0.3926544785499573, -0.23675140738487244, -1.1371153593063354, -0.022623419761657715, -0.013812905177474022, -0.0033163807820528746, -0.005152162630110979, -5.364403477869928e-06, -5.6265202147187665e-05, -0.0007101159426383674, -0.0007833749405108392, -0.002185577293857932, -1.9073468138230965e-06, -2.074220174108632e-05, -0.0006198153714649379, -0.016264958307147026, -0.4131089150905609, -0.7744978666305542, -0.1516903042793274, -0.038406167179346085, -5.61460001335945e-05, -2.4437606043647975e-05, -0.0004012971476186067, -1.170642614364624, -2.7417760065873154e-05, -0.011239664629101753, -0.013817607425153255, -0.014819889329373837, -0.0029541682451963425, -0.2087024301290512, -0.0007594323833473027, -0.0011880489764735103, -0.010145758278667927, -0.002457576571032405, -0.00021920185827184469, -0.7738162875175476, -0.006127736996859312, -0.2642752528190613, -2.1991491317749023, -0.00012694983161054552, -0.015386451967060566, -0.001678725820966065, -4.2995147705078125, -0.020485375076532364, -2.486600399017334, -0.2867008149623871, -2.4172534942626953, -0.12457624077796936, -1.268938422203064, -0.012806200422346592, -0.03051684983074665, -0.15271133184432983, -0.9208261370658875, -0.26994964480400085, -2.860682964324951, -0.0006003961316309869, -8.177422569133341e-05, -0.016226252540946007, -0.012260311283171177, -0.006429107394069433, -4.4225667807040736e-05, -0.0006235085893422365, -0.016604913398623466, -0.00019822540343739092, -1.4126263856887817, -0.0021287179552018642, -0.22693806886672974, -0.04355541616678238, -0.38451865315437317, -0.001258296542800963, -0.02081245556473732, -0.0012974663404747844, -0.22026589512825012, -0.32469552755355835, -0.004123281687498093, -0.05135855823755264, -2.9802276912960224e-06, -0.00717089232057333, -0.13665474951267242, -0.013669218868017197, -0.0003295593778602779, -0.0013187768636271358, -0.27204424142837524, -0.0006663962849415839, -0.011186501011252403, -0.000690460205078125, -0.000671042304020375, -0.0060092490166425705, -0.0017134760273620486, -0.003469758667051792, -0.1377745419740677, -0.04315668344497681, -0.10319206118583679, -0.01232578232884407, -0.003187577472999692, -0.530661404132843, -0.6785444617271423, -0.000417741306591779, -6.437094270950183e-05, -0.0028199690859764814, -1.6814594268798828, -0.04169956222176552, -0.3537624478340149, -0.00013302871957421303, -0.0264100544154644, -0.5277215838432312, -0.027166172862052917, -8.106198947643861e-06, -0.00011586471373448148, -0.07104340940713882, -0.010055833496153355, -0.42061084508895874, -0.21518512070178986, -0.5490226745605469, -0.0002849888114724308, -0.12670552730560303, -0.021966485306620598, -0.10271293669939041, -0.004276891704648733, -0.006976412143558264, -0.00017391123401466757, -0.0004120216181036085, -6.8662193370983e-05, -3.814689989667386e-06, -0.3736562728881836, -0.08426033705472946, -1.1804641485214233], "finish_reason": "stop"}], "metrics": {"energy": 232.87668881416323, "energy_per_token": 1.2725502120992527, "time": 7.9489684, "time_per_token": 0.043436985792349725}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible.\")\n\n    copied_files_list = []\n    for file in list(source_path.rglob(\"*.txt\")):\n        copied_file_path = pathlib.Path(file.parent, file.name).resolve()\n        shutil.copy2(file, copied_file_path)\n        copied_files_list.append(copied_file_path.name)\n\n    return source_path.name, copied_files_list", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " source", " directory", " does", " not", " exist", " or", " is", " not", " accessible", ".", "\"", ")", "\n", "\n", "    ", "cop", "ied", "_", "files", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " list", "(", "source", "_", "path", ".", "rg", "lob", "(", "\"", "*", ".", "txt", "\"", "))", ":", "\n", "        ", "cop", "ied", "_", "file", "_", "path", " =", " path", "lib", ".", "Path", "(", "file", ".", "parent", ",", " file", ".", "name", ")", ".", "resolve", "()", "\n", "        ", "sh", "util", ".", "copy", "2", "(", "file", ",", " copied", "_", "file", "_", "path", ")", "\n", "        ", "cop", "ied", "_", "files", "_", "list", ".", "append", "(", "cop", "ied", "_", "file", "_", "path", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " copied", "_", "files", "_", "list", "\n", "\n", "if"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -1.3468053340911865, -0.0022972640581429005, -0.0022324419114738703, -0.0012310316087678075, -0.0020042823161929846, -1.966933996300213e-05, -0.00011979816190432757, -0.0007147617870941758, -0.00028427375946193933, -0.00112160702701658, -2.098061486321967e-05, -1.2993727978027891e-05, -0.0003358753747306764, -0.003859572345390916, -0.8837711811065674, -0.2935566306114197, -0.23530258238315582, -0.029505649581551552, -3.7431014789035544e-05, -2.90866428258596e-05, -0.0009662011871114373, -0.7374152541160583, -1.9192511899746023e-05, -0.0031665442511439323, -0.020706087350845337, -0.014942505396902561, -0.0022088908590376377, -0.03551788255572319, -0.007053948473185301, -3.325883881188929e-05, -0.4098224639892578, -0.6642071008682251, -1.744716763496399, -0.4745692014694214, -1.4908831119537354, -1.2994111776351929, -0.0012246021069586277, -0.015664156526327133, -0.4542875587940216, -0.12591008841991425, -0.07998035103082657, -0.8180843591690063, -0.4763830006122589, -0.01642422005534172, -0.0007630059262737632, -0.0039377068169415, -0.8068637847900391, -0.0005744237569160759, -2.3788387775421143, -0.008702566847205162, -0.014678345061838627, -0.37716910243034363, -2.964289665222168, -0.8147978186607361, -0.03202960267663002, -0.060713812708854675, -0.018204746767878532, -0.44414079189300537, -0.09384654462337494, -0.6900096535682678, -0.719304621219635, -2.9603147506713867, -0.7492575645446777, -0.03989856317639351, -4.529942543740617e-06, -1.2159273865108844e-05, -0.00035315475543029606, -1.4182802438735962, -0.00048685140791349113, -0.5113255381584167, -0.009750950150191784, -0.049314841628074646, -1.2625045776367188, -1.261501431465149, -0.002763977972790599, -0.002873817225918174, -0.010892574675381184, -0.03302326053380966, -0.006674140691757202, -1.0462390184402466, -0.0005800233921036124, -0.0046732728369534016, -0.8812419176101685, -0.5911687612533569, -0.8352187871932983, -0.006376753095537424, -1.4843132495880127, -0.004125893581658602, -8.451581379631534e-05, -0.008838696405291557, -0.08094465732574463, -2.4985105991363525, -1.0887930393218994, -1.4407788515090942, -1.1298635005950928, -0.5840455889701843, -0.00890415534377098, -0.1260397881269455, -0.018562765792012215, -1.9447097778320312, -0.5433143377304077, -0.015530712902545929, -0.08321882039308548, -0.02743331901729107, -1.4043530225753784, -0.00013982271775603294, -3.766942609217949e-05, -0.0030878742691129446, -1.7963019609451294, -0.0006364941946230829, -0.31999367475509644, -0.06534916907548904, -0.06422805786132812, -4.625213477993384e-05, -0.0005258131423033774, -0.002474700566381216, -2.7418097943154862e-06, -0.03629002720117569, -0.029406452551484108, -0.01461784541606903, -0.04860015958547592, -1.1920928244535389e-07, -4.5298504119273275e-05, -0.005186317954212427, -0.00026556302327662706, -0.0001720042055239901, -0.0018333070911467075, -0.0006980843027122319, -0.002583739347755909, -0.7935354709625244, -0.0004196478403173387, -1.4662635294371285e-05, -0.001668252982199192, -0.0015401893761008978, -2.169585604860913e-05, -0.0276484452188015, -0.1347964107990265, -0.01718476228415966, -0.0041435821913182735, -0.2233017534017563, -0.002956664189696312, -0.11683134734630585, -0.33443960547447205, -3.0517112463712692e-05, -0.0001392267586197704, -0.006875191815197468, -0.039546385407447815, -0.0016615884378552437, -0.00344635546207428, -8.427741704508662e-05, -2.038458114839159e-05, -7.807903602952138e-05, -1.1920922133867862e-06, -0.3942907750606537, -0.010577802546322346, -1.0210607051849365], "finish_reason": "stop"}], "metrics": {"energy": 184.27731603336332, "energy_per_token": 1.0776451230021247, "time": 7.567355, "time_per_token": 0.04425353801169591}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path must be a valid directory')\n    source_path = source_path.resolve()\n    destination_path = pathlib.Path(destination_path)\n    destination_path.mkdir(exist_ok=True)\n\n    for filename in (source_path / '*').iterdir():\n        if filename.is_dir() or filename.is_symlink():\n            continue\n        destination_file = destination_path / filename.name\n        shutil.copyfile(str(filename), str(destination_file))\n    return source_path.name, [filename.name for filename in (source_path / '*').iterdir()]", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "('", "source", "_", "path", " must", " be", " a", " valid", " directory", "')", "\n", "    ", "source", "_", "path", " =", " source", "_", "path", ".", "resolve", "()", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "destination", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "for", " filename", " in", " (", "source", "_", "path", " /", " '", "*", "')", ".", "iter", "dir", "():", "\n", "        ", "if", " filename", ".", "is", "_", "dir", "()", " or", " filename", ".", "is", "_", "sym", "link", "():", "\n", "            ", "continue", "\n", "        ", "destination", "_", "file", " =", " destination", "_", "path", " /", " filename", ".", "name", "\n", "        ", "sh", "util", ".", "copy", "file", "(", "str", "(", "filename", ")", ",", " str", "(", "destination", "_", "file", "))", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " [", "filename", ".", "name", " for", " filename", " in", " (", "source", "_", "path", " /", " '", "*", "')", ".", "iter", "dir", "()", "]", "\n", "\n", "if"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -0.4539678692817688, -0.1378127634525299, -0.016891304403543472, -1.966933996300213e-05, -1.847726889536716e-05, -0.000760385300964117, -0.9400646090507507, -1.7165990357170813e-05, -0.002560553140938282, -0.01068513561040163, -0.011975770816206932, -0.0019357530400156975, -0.0371159091591835, -0.007940275594592094, -2.407998726994265e-05, -1.4753893613815308, -1.3540641069412231, -0.052171867340803146, -0.011027463711798191, -0.6094698309898376, -0.03770935907959938, -0.523796796798706, -2.552720069885254, -0.14955778419971466, -0.41421759128570557, -0.0023479294031858444, -0.7426643371582031, -2.1048474311828613, -0.024483107030391693, -1.006996750831604, -0.4562259614467621, -0.3764130771160126, -0.0004804172203876078, -0.00016926287207752466, -0.020461197942495346, -0.15517814457416534, -0.011151253245770931, -0.10695242136716843, -0.3117184340953827, -0.7684258818626404, -0.012043144553899765, -0.010788919404149055, -0.005282965954393148, -0.0129943722859025, -2.634490556374658e-05, -1.4305012882687151e-05, -0.0010006187949329615, -0.0008660380262881517, -0.0022555168252438307, -1.9430925021879375e-05, -2.1815061700181104e-05, -0.0011202972382307053, -0.05206097662448883, -0.05082165077328682, -0.8113110661506653, -0.0006348263123072684, -0.005152280908077955, -0.4614104926586151, -0.014632412232458591, -3.0040289857424796e-05, -0.000525217386893928, -1.483350157737732, -7.855583680793643e-05, -1.4066597032069694e-05, -0.00288249459117651, -0.0018618644680827856, -1.6453362703323364, -0.01940680295228958, -1.5611106157302856, -0.0004984090337529778, -2.624316692352295, -1.982873797416687, -0.0072138551622629166, -3.1963300704956055, -0.167869433760643, -0.00036614391137845814, -0.0013735393295064569, -0.45622873306274414, -0.36204275488853455, -0.35911962389945984, -0.3975383937358856, -0.0012063853209838271, -0.21435460448265076, -0.020111102610826492, -0.0013674680376425385, -0.018747985363006592, -0.005779460538178682, -0.7839486002922058, -0.3440123200416565, -0.0033092519734054804, -0.05160675197839737, -8.106198947643861e-06, -2.064937114715576, -2.920006513595581, -0.10914945602416992, -0.5472520589828491, -0.01674043945968151, -0.4607692062854767, -0.009972510859370232, -0.360868364572525, -0.0002470903273206204, -0.1389736831188202, -0.0262550450861454, -0.0009054613183252513, -0.1166544109582901, -0.041455186903476715, -0.08316430449485779, -2.1996541023254395, -0.2760876417160034, -2.2394168376922607, -0.5924959778785706, -0.49656084179878235, -0.00015341058315243572, -6.210611172718927e-05, -0.03744930773973465, -0.08532211929559708, -0.012267258949577808, -0.05686716362833977, -0.005305496044456959, -0.011614796705543995, -0.25536566972732544, -4.565611743601039e-05, -1.2397689715726301e-05, -0.003455502912402153, -1.8361040353775024, -0.015402768738567829, -3.054492235183716, -0.00025388356880284846, -0.00950182881206274, -0.04836655408143997, -0.00013886917440686375, -0.012703332118690014, -0.00012396997772157192, -4.5060096454108134e-05, -1.0132738680113107e-05, -0.0006860524881631136, -0.018040498718619347, -0.09350515156984329, -1.0447936058044434, -0.08488034456968307, -0.3437912166118622, -7.331102824537084e-05, -0.00011657988943625242, -0.010938325896859169, -0.04293116554617882, -0.0033793505281209946, -0.3437337279319763, -1.08894681930542, -0.006883123889565468, -0.11398348957300186, -0.010829722508788109, -0.0002858230145648122, -0.006520898547023535, -0.3386019170284271, -0.2786265015602112, -1.549708758830093e-05, -2.4318398573086597e-05, -0.004434513859450817, -0.002948581939563155, -0.003552081063389778, -0.0017021704697981477, -0.004245910327881575, -0.0066416943445801735, -3.1470757676288486e-05, -0.00032074074260890484, -0.4220057427883148, -0.11367423087358475, -0.01704777032136917, -0.7774202227592468], "finish_reason": "stop"}], "metrics": {"energy": 261.0702613563537, "energy_per_token": 1.4188601160671397, "time": 8.825814, "time_per_token": 0.04796638043478261}}
{"outputs": [{"text": "if pathlib.Path(source_path).is_dir():\n        for file_name in pathlib.Path(source_path).iterdir():\n            if file_name.is_file():\n                file_name.copy(destination_path)\n                print(\"{} copied\".format(file_name))\n    else:\n        raise ValueError(\"Source path is not a directory\")", "tokens": ["if", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "for", " file", "_", "name", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "            ", "if", " file", "_", "name", ".", "is", "_", "file", "():", "\n", "                ", "file", "_", "name", ".", "copy", "(", "destination", "_", "path", ")", "\n", "                ", "print", "(", "\"", "{}", " copied", "\"", ".", "format", "(", "file", "_", "name", "))", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "if"], "logprobs": [-1.0749242305755615, -2.8414087295532227, -0.0021398996468633413, -0.00045813556062057614, -0.015173954889178276, -0.015141196548938751, -0.02791534550487995, -8.642300235806033e-05, -2.9444261599564925e-05, -0.0022327988408505917, -0.005243951920419931, -0.20441243052482605, -7.176141662057489e-05, -0.1465240865945816, -0.18533582985401154, -0.040901146829128265, -0.02300630509853363, -2.516406536102295, -1.1472954750061035, -0.8420649766921997, -0.43238985538482666, -0.03290330246090889, -1.3023080825805664, -0.001149827498011291, -0.0006314906058833003, -0.005937438458204269, -0.0035898545756936073, -0.0031424211338162422, -3.421248038648628e-05, -4.7205765440594405e-05, -0.001166259404271841, -0.0015419748378917575, -0.5359355211257935, -0.001559947500936687, -0.0024266578257083893, -0.021337242797017097, -0.00998301524668932, -0.47418686747550964, -0.17146208882331848, -0.00018308870494365692, -0.00023040501400828362, -0.0032982020638883114, -0.0829968973994255, -7.271740287251305e-06, -0.01879899390041828, -0.16124223172664642, -0.012872694060206413, -0.005371186416596174, -3.3597142696380615, -0.04213544726371765, -0.5019730925559998, -0.17399732768535614, -0.08832599967718124, -0.14518138766288757, -0.3883010447025299, -0.0016914597945287824, -5.638440416078083e-05, -0.21748574078083038, -0.059260159730911255, -1.38885498046875, -1.3381974697113037, -0.11613892763853073, -2.354341506958008, -2.698198080062866, -1.3474853038787842, -1.4176048040390015, -0.004075318109244108, -0.0029005620162934065, -0.0014910305617377162, -0.05723265931010246, -6.103329360485077e-05, -0.0002779574424494058, -0.5075900554656982, -0.005774719640612602, -1.0726356506347656, -0.07613455504179001, -0.0005878866068087518, -0.005904612597078085, -0.001342110801488161, -0.19051742553710938, -0.019307533279061317, -6.544376083184034e-05, -0.23353619873523712, -0.14057128131389618, -1.8998490571975708, -0.3779188394546509, -1.158692717552185, -0.08676037192344666, -0.12323608249425888, -0.1478954255580902, -0.709430992603302, -0.011088063940405846, -0.015792300924658775, -0.4690834581851959, -1.455442190170288], "finish_reason": "stop"}], "metrics": {"energy": 109.9328202610016, "energy_per_token": 1.1571875816947537, "time": 4.4128027, "time_per_token": 0.046450554736842106}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must be a directory!\")\n\n    # check if destination path exists and create it if it does not\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    filenames = []\n    for item in source_path.iterdir():\n        if item.is_file():\n            filename = item.name\n            filenames.append(filename)\n            shutil.copy(item, destination_path)\n\n    return source_path.name, filenames", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " must", " be", " a", " directory", "!", "\"", ")", "\n", "\n", "    ", "#", " check", " if", " destination", " path", " exists", " and", " create", " it", " if", " it", " does", " not", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "    ", "for", " item", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " item", ".", "is", "_", "file", "():", "\n", "            ", "filename", " =", " item", ".", "name", "\n", "            ", "fil", "en", "ames", ".", "append", "(", "filename", ")", "\n", "            ", "sh", "util", ".", "copy", "(", "item", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " fil", "en", "ames", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -1.3468053340911865, -0.0022972640581429005, -0.0022324419114738703, -0.0012310316087678075, -0.0020042823161929846, -1.966933996300213e-05, -0.00011979816190432757, -0.0007147617870941758, -0.00028427375946193933, -0.00112160702701658, -2.098061486321967e-05, -1.2993727978027891e-05, -0.0003358753747306764, -0.003859572345390916, -0.5334904193878174, -0.0003629264247138053, -0.1735512614250183, -0.20604802668094635, -0.02557353675365448, -2.9682672902708873e-05, -3.540453326422721e-05, -0.0005712069687433541, -0.8115190267562866, -1.7404405298293568e-05, -0.003211818402633071, -0.014454065822064877, -0.0070873284712433815, -0.001019553979858756, -0.027527840808033943, -0.004201870411634445, -2.169585604860913e-05, -0.2199205756187439, -0.6371858716011047, -1.1467410326004028, -0.17051683366298676, -0.6144877076148987, -0.03334707394242287, -0.18319272994995117, -0.06555305421352386, -3.2412943840026855, -0.029521159827709198, -0.0007546676206402481, -0.004834866151213646, -0.15754398703575134, -0.0006792622152715921, -2.7289631366729736, -4.129719257354736, -0.40644198656082153, -0.633780837059021, -0.9964050054550171, -0.22800081968307495, -1.5774481296539307, -0.726178765296936, -0.20625832676887512, -0.04487649351358414, -0.46677136421203613, -1.284127950668335, -0.00315941427834332, -0.6043500304222107, -0.0017085968283936381, -0.13301341235637665, -0.038313128054142, -0.025357497856020927, -3.909988299710676e-05, -5.245195097813848e-06, -5.030505417380482e-05, -0.391748309135437, -0.0029464424587786198, -0.002437717281281948, -0.001321515068411827, -0.0976962000131607, -0.00011216964776394889, -0.00025650550378486514, -0.0010550415609031916, -0.0011884062550961971, -4.60137271147687e-05, -0.29147228598594666, -0.07400596141815186, -0.001695387065410614, -0.0019972631707787514, -0.7048382759094238, -0.0032222752925008535, -1.1920928244535389e-07, -0.0001037067049765028, -0.00039498155820183456, -0.021820351481437683, -0.0030864481814205647, -0.032137542963027954, -0.09258364140987396, -0.0023657686542719603, -1.7761965990066528, -0.0004262015863787383, -0.00011419598013162613, -0.07892455905675888, -0.17569459974765778, -0.03296547755599022, -0.4995522201061249, -0.07998673617839813, -2.7256574630737305, -0.01461420301347971, -0.055799636989831924, -1.5616295058862306e-05, -1.1205610462639015e-05, -0.000871159543748945, -0.19311967492103577, -0.0001854724541772157, -0.00043764073052443564, -0.016743019223213196, -0.005547011736780405, -0.12406914681196213, -0.0367732048034668, -0.0002774807217065245, -0.016219567507505417, -2.3841830625315197e-06, -0.011814502999186516, -0.05325525254011154, -0.021971266716718674, -0.0013809201773256063, -2.2288241386413574, -0.009997531771659851, -0.12012358009815216, -0.00015054999676067382, -0.1608254611492157, -0.023628676310181618, -0.015633994713425636, -0.8118540048599243, -0.0003939091111533344, -1.8954096958623268e-05, -0.0005247407825663686, -0.00026341783814132214, -0.00017510310863144696, -0.011456416919827461, -0.004705664701759815, -0.003315192647278309, -0.08040449023246765, -0.27333661913871765, -3.242440288886428e-05, -5.483612312673358e-06, -0.0006217215559445322, -0.2187337726354599, -0.2733871340751648, -0.009399328380823135, -0.020663466304540634, -0.0002108589978888631, -2.002696055569686e-05, -1.1671509742736816, -0.012532527558505535, -0.22028197348117828, -0.002757796086370945, -0.05248252674937248, -0.20280344784259796, -1.9550132492440753e-05, -5.745722592109814e-05, -0.005767726805061102, -0.02827952429652214, -0.0007813499541953206, -0.005922151263803244, -1.6689286894688848e-06, -4.6491513785440475e-06, -1.224105715751648, -2.3841855067985307e-07, -5.960462772236497e-07, -2.062299427052494e-05, -0.00023934361524879932, -2.3321409225463867, -0.00182819040492177], "finish_reason": "stop"}], "metrics": {"energy": 202.29864310073847, "energy_per_token": 1.1176720613300468, "time": 7.7827883, "time_per_token": 0.04299883038674033}}
{"outputs": [{"text": "try:\n        source_path = pathlib.Path(source_path)\n    except TypeError:\n        raise ValueError('source_path must be an existing, accessible directory')\n\n    if source_path.is_dir():\n        source_path = source_path.resolve()\n        destination_path = pathlib.Path(destination_path).resolve()\n    else:\n        raise ValueError('source_path must be an existing, accessible directory')\n\n    files_to_copy = []\n\n    for file in source_path.iterdir():\n        if not file.is_file():\n            continue\n\n        files_to_copy.append(str(file.name))\n        file.replace(destination_path / file.name)\n\n    return source_path.name, files_to_copy", "tokens": ["try", ":", "\n", "        ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "except", " Type", "Error", ":", "\n", "        ", "raise", " Value", "Error", "('", "source", "_", "path", " must", " be", " an", " existing", ",", " accessible", " directory", "')", "\n", "\n", "    ", "if", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "source", "_", "path", " =", " source", "_", "path", ".", "resolve", "()", "\n", "        ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "resolve", "()", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "('", "source", "_", "path", " must", " be", " an", " existing", ",", " accessible", " directory", "')", "\n", "\n", "    ", "files", "_", "to", "_", "copy", " =", " []", "\n", "\n", "    ", "for", " file", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " not", " file", ".", "is", "_", "file", "():", "\n", "            ", "continue", "\n", "\n", "        ", "files", "_", "to", "_", "copy", ".", "append", "(", "str", "(", "file", ".", "name", "))", "\n", "        ", "file", ".", "replace", "(", "destination", "_", "path", " /", " file", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " files", "_", "to", "_", "copy", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.139524221420288, -0.0008517451351508498, -0.00546947680413723, -0.010864274576306343, -0.6822549700737, -0.05424736067652702, -0.3390432298183441, -0.1287917196750641, -0.09057386964559555, -0.0004049911512993276, -8.165503095369786e-05, -0.01647382229566574, -0.005074359942227602, -0.004331017844378948, -5.6622808187967166e-05, -2.825220326485578e-05, -0.0019195717759430408, -0.27969810366630554, -1.8364031314849854, -0.001630644896067679, -1.1423166990280151, -1.9788545614574105e-05, -0.30304184556007385, -0.04744783043861389, -0.0010524216340854764, -0.3027556538581848, -0.3272237181663513, -0.00010334911348763853, -0.933310329914093, -1.1174070835113525, -0.03256746008992195, -0.008018800988793373, -0.5644617676734924, -0.00943499244749546, -2.6509909629821777, -0.12269424647092819, -0.4050588309764862, -0.044831015169620514, -0.03176691383123398, -0.55027836561203, -0.11005807667970657, -0.8321143388748169, -0.0003156163729727268, -0.23377692699432373, -2.0265350341796875, -1.3351351299206726e-05, -4.23184028477408e-05, -0.008469732478260994, -0.18948864936828613, -7.855583680793643e-05, -0.3262077271938324, -0.1619821935892105, -0.019031891599297523, -0.029785245656967163, -2.038259744644165, -0.02558678202331066, -0.8351104855537415, -0.3632725477218628, -0.4746529459953308, -0.000559173640795052, -0.00012599628826137632, -0.05012652650475502, -0.13739660382270813, -0.013990308158099651, -0.078841932117939, -0.6809932589530945, -0.8230823874473572, -0.02722707949578762, -0.0204680897295475, -0.013076149858534336, -0.03838460147380829, -9.500529267825186e-05, -7.462222856702283e-05, -0.0008783058729022741, -0.0015957729192450643, -0.005721264518797398, -2.47952248173533e-05, -1.1086402082582936e-05, -0.001618862384930253, -0.9241564273834229, -0.10737437754869461, -0.0010161004029214382, -0.03126039728522301, -1.7550756931304932, -0.03802282363176346, -9.42901024245657e-05, -0.006719611585140228, -0.0007239343249239028, -0.22309891879558563, -0.026482034474611282, -3.981510963058099e-05, -0.08710188418626785, -0.09376351535320282, -0.008594902232289314, -0.0018181951018050313, -0.07539180666208267, -0.023229723796248436, -0.04875912517309189, -0.0026788560207933187, -0.016087019816040993, -0.002400257159024477, -0.0011859057703986764, -0.010612009093165398, -0.0007026110542938113, -0.05410891771316528, -0.0007526425761170685, -2.6581385135650635, -0.8727185130119324, -1.649871826171875, -0.0004301338049117476, -0.030123528093099594, -0.037001725286245346, -0.32760900259017944, -0.008923650719225407, -0.7990092039108276, -0.0002406545972917229, -0.12708763778209686, -0.791262149810791, -0.5233671069145203, -0.09896659106016159, -0.0006765222642570734, -1.7881233361549675e-05, -0.0003703146940097213, -0.27976298332214355, -0.00048565989709459245, -0.0010783816687762737, -0.010958606377243996, -0.00757523812353611, -0.09509213268756866, -2.2544987201690674, -0.04091178998351097, -0.00026306029758416116, -0.04368094727396965, -3.576272320060525e-06, -1.1743038892745972, -0.06113667041063309, -0.03198492154479027, -0.0007886160165071487, -0.1316947638988495, -0.01783289946615696, -0.8560279607772827, -0.0002146728802472353, -1.5613617897033691, -0.00038485272671096027, -0.0007185738068073988, -1.3470558769768104e-05, -5.972207145532593e-05, -0.0025512785650789738, -0.0026846816763281822, -0.0017692878609523177, -1.7085710763931274, -0.0007622911944054067, -0.010050995275378227, -0.17770859599113464, -0.5698122382164001, -0.0023449561558663845, -0.0035397273022681475, -0.6853172183036804, -2.4981698989868164, -0.12774397432804108, -1.2086029052734375, -0.00013517419574782252, -0.09201003611087799, -0.0003736513026524335, -1.3232143828645349e-05, -0.14501775801181793, -0.04228115826845169, -0.003629408311098814, -0.0018950614612549543, -0.004318317398428917, -0.008442545309662819, -0.03115421161055565, -0.002977701835334301, -0.06352385133504868, -0.3970058560371399, -9.786603914108127e-05, -6.115249561844394e-05, -0.012997431680560112, -0.05529105290770531, -0.0018222408834844828, -0.006986237596720457, -6.556489552167477e-06, -1.0132738680113107e-05, -4.529942543740617e-06, -8.34461570775602e-06, -1.484429955482483, -4.768370445162873e-07, -7.152555099310121e-07, -5.829164365422912e-05, -0.0001392267586197704, -0.07760559767484665], "finish_reason": "stop"}], "metrics": {"energy": 239.65347680473306, "energy_per_token": 1.2547302450509585, "time": 8.404404, "time_per_token": 0.04400211518324607}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Directory '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"'{source_path}' is not a directory\")\n\n    filenames = []\n    for filename in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, filename)):\n            filenames.append(filename)\n\n    if len(filenames) > 0:\n        os.makedirs(destination_path, exist_ok=True)\n        for filename in filenames:\n            shutil.copy(source_path / filename, destination_path)\n        return source_path, filenames\n\n    return source_path, filenames", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Directory", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "'{", "source", "_", "path", "}'", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " filename", "))", ":", "\n", "            ", "fil", "en", "ames", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "if", " len", "(", "fil", "en", "ames", ")", " >", " ", "0", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "destination", "_", "path", ",", " exist", "_", "ok", "=", "True", ")", "\n", "        ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "            ", "sh", "util", ".", "copy", "(", "source", "_", "path", " /", " filename", ",", " destination", "_", "path", ")", "\n", "        ", "return", " source", "_", "path", ",", " fil", "en", "ames", "\n", "\n", "    ", "return", " source", "_", "path", ",", " fil", "en", "ames"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -0.4539678692817688, -0.1378127634525299, -0.016891304403543472, -1.966933996300213e-05, -1.847726889536716e-05, -0.000760385300964117, -0.49689215421676636, -0.5599802732467651, -0.019192935898900032, -0.001779640675522387, -0.0338585264980793, -0.03215266391634941, -4.3748852476710454e-05, -0.2555704712867737, -0.4593835771083832, -0.3585866391658783, -3.177035331726074, -1.5542176961898804, -0.0028140253853052855, -0.011922646313905716, -0.00016926287207752466, -0.00016389934171456844, -0.13841280341148376, -0.24478299915790558, -0.0012336509535089135, -0.017327239736914635, -1.3407578468322754, -0.0006019449210725725, -0.005245256703346968, -0.14544270932674408, -0.21200866997241974, -0.020615356042981148, -0.02598131261765957, -1.4066597032069694e-05, -1.0490362910786644e-05, -6.23445157543756e-05, -0.0010028815595433116, -5.483612312673358e-06, -0.0011974553344771266, -0.003499338636174798, -0.0010401559993624687, -0.00032205163734033704, -0.009370040148496628, -0.005889324937015772, -7.986990567587782e-06, -0.009248156100511551, -0.05361562967300415, -0.003306519240140915, -0.6417796015739441, -0.007627411279827356, -0.00014006110723130405, -9.154854342341423e-05, -0.022288069128990173, -0.027884971350431442, -0.010968629270792007, -0.01856100931763649, -0.04294326901435852, -0.08764554560184479, -0.00028200942324474454, -0.0008733034483157098, -0.47643059492111206, -0.0008216104470193386, -3.1647984981536865, -0.0009775151265785098, -0.0001754606782924384, -0.06338176131248474, -0.31255418062210083, -0.016881223767995834, -0.13797903060913086, -0.13028563559055328, -1.7397154569625854, -0.007932350970804691, -1.9908846616744995, -0.0003713871701620519, -0.00379853299818933, -1.8954096958623268e-05, -0.0007046362152323127, -0.019640261307358742, -2.0503786799963564e-05, -1.5735502529423684e-05, -0.007974808104336262, -0.021530235186219215, -0.004088377580046654, -1.4544296264648438, -0.8858774304389954, -9.476689592702314e-05, -0.0013180625392124057, -0.00040820849244482815, -0.030996816232800484, -0.024080073460936546, -0.0004727914638351649, -0.4636143743991852, -0.0017102628480643034, -7.366862701019272e-05, -0.0007652691565454006, -0.00034517052699811757, -6.723177648382261e-05, -0.004671137314289808, -5.638440416078083e-05, -1.7881233361549675e-05, -0.0065071601420640945, -0.007530279457569122, -0.0009302341495640576, -0.008325750008225441, -0.011572375893592834, -0.0015529250958934426, -0.11155494302511215, -4.827859811484814e-05, -7.152555099310121e-07, -0.0011335145682096481, -0.00037055302527733147, -0.0006293461774475873, -0.06342931091785431, -0.005722568370401859, -0.0030641055200248957, -0.3141070604324341, -0.002305232686921954, -2.64054536819458, -2.0267930030822754, -0.00011955977242905647, -0.012563135474920273, 0.0, -9.536738616588991e-07, -0.031857334077358246, -1.1959031820297241, -0.0009148702956736088, -0.01085590198636055, -0.006856604013592005, -0.0050865765661001205, -0.0039510056376457214, -2.195169448852539, -8.523101132595912e-05, -0.0733831524848938, -3.957670196541585e-05, -0.00017188502533826977, -0.0020256969146430492, -0.009718840010464191, -6.0794889577664435e-05, -1.823885577323381e-05, -0.001946580014191568, -0.0030121691524982452, -1.1920928244535389e-07, -3.3854863431770355e-05, -0.0036726424004882574, -0.001966211013495922, -0.004898214712738991, -0.025673462077975273, -0.09505213797092438, -0.36510124802589417, -0.08103898167610168, -0.0009673921740613878, -0.007378588430583477, 0.0, -1.9073468138230965e-06, -0.0002908283786382526, -0.0008449559682048857, -0.001077428925782442, -0.18748648464679718, -7.617183291586116e-05, -6.6756979322235566e-06, -0.001100887660868466, -0.3227781355381012, -2.1351308822631836, -0.000783613184466958, -2.8490614567999728e-05, -0.09164930880069733, -0.002788942540064454, -0.0009213017183355987, -0.02957509271800518, -6.603976362384856e-05, -1.7881377516459906e-06, -0.19644680619239807, -0.01283691730350256, -1.8697800636291504, -0.21966786682605743, -0.6282249689102173, -5.781483559985645e-05, -7.4741430580616e-05, -2.3526079654693604, -0.012350508943200111, -4.768370445162873e-07, -2.3841830625315197e-06, -0.06781298667192459, -1.47052800655365, -0.798314094543457, -0.30071988701820374, -0.14498372375965118, -0.0012047183699905872, -2.90866428258596e-05, -0.009971920400857925, -1.2898730039596558, -8.344646857949556e-07, -1.5497195136049413e-06], "finish_reason": "stop"}], "metrics": {"energy": 224.51630972671515, "energy_per_token": 1.079405335224592, "time": 9.046198, "time_per_token": 0.04349133653846154}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.exists() and source_path.is_dir():\n        destination_path.mkdir(exist_ok=True, parents=True)\n        files_copied = []\n\n        for file_path in source_path.iterdir():\n            if file_path.is_file():\n                shutil.copy2(file_path, destination_path)\n                files_copied.append(file_path.name)\n        return source_path.name, files_copied\n    raise ValueError(\"Source path does not exist or is not a directory\")", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " source", "_", "path", ".", "exists", "()", " and", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ",", " parents", "=", "True", ")", "\n", "        ", "files", "_", "cop", "ied", " =", " []", "\n", "\n", "        ", "for", " file", "_", "path", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "            ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "                ", "sh", "util", ".", "copy", "2", "(", "file", "_", "path", ",", " destination", "_", "path", ")", "\n", "                ", "files", "_", "cop", "ied", ".", "append", "(", "file", "_", "path", ".", "name", ")", "\n", "        ", "return", " source", "_", "path", ".", "name", ",", " files", "_", "cop", "ied", "\n", "    ", "raise", " Value", "Error", "(", "\"", "Source", " path", " does", " not", " exist", " or", " is", " not", " a", " directory", "\"", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.683011770248413, -0.039199698716402054, -0.14545436203479767, -0.09803691506385803, -0.16997356712818146, -0.0008393579046241939, -9.059495641849935e-05, -0.016858132556080818, -0.004726309794932604, -0.0037585110403597355, -6.329813186312094e-05, -1.6331539882230572e-05, -0.001623980118893087, -0.2231564223766327, -0.11801549047231674, -1.3468053340911865, -0.0022972640581429005, -0.0022324419114738703, -0.0012310316087678075, -0.0020042823161929846, -1.966933996300213e-05, -0.00011979816190432757, -0.0007147617870941758, -0.00028427375946193933, -0.00112160702701658, -2.098061486321967e-05, -1.2993727978027891e-05, -0.0003358753747306764, -0.003859572345390916, -0.8837711811065674, -0.2935566306114197, -1.63802969455719, -4.1126360883936286e-05, -4.637133679352701e-05, -0.006181052420288324, -0.884450376033783, -0.22426177561283112, -0.08301828801631927, -0.036103542894124985, -6.09140915912576e-05, -3.4570634852570947e-06, -0.0002520958660170436, -0.0019239740213379264, -3.814689989667386e-06, -0.005332413129508495, -0.017004290595650673, -0.013182392343878746, -0.02381342649459839, -3.0466806888580322, -0.017308728769421577, -0.030177082866430283, -0.015786902979016304, -0.0018174811266362667, -0.00017474555352237076, -0.003049249993637204, -1.0346728563308716, -0.00013839241000823677, -2.0861407392658293e-05, -0.004037562757730484, -0.0060233501717448235, -0.2669551372528076, -0.007506498135626316, -0.0002324311062693596, -0.0071164462715387344, -0.013012728653848171, -0.023497339338064194, -0.09579255431890488, -2.6426892280578613, -0.9314587116241455, -0.9257201552391052, -0.0010150285670533776, -0.057658787816762924, -0.22799208760261536, -0.006200600415468216, -2.8750557899475098, -0.0027157114818692207, -0.10530155152082443, -0.5810479521751404, -1.05898916721344, -1.0100088119506836, -0.004723936785012484, -0.11755232512950897, -0.0007267932523973286, -3.981510963058099e-05, -0.0001037067049765028, -0.6821153163909912, -0.0008983152220025659, -0.0007225048611871898, -0.010478361509740353, -0.006304258480668068, -0.19970197975635529, -0.13699544966220856, -0.00011228884250158444, -7.70062324590981e-05, -0.0005762108485214412, -0.05108458921313286, -5.602820692729438e-06, -0.006286844611167908, -0.042649395763874054, -0.011458655819296837, -0.0018548441585153341, -0.8918843269348145, -0.00019500737835187465, -3.302042750874534e-05, -0.0009243983076885343, -1.9931671619415283, -0.000692842761054635, -0.18435214459896088, -0.0051570250652730465, -0.00017712931730784476, -0.009254534728825092, -0.029116908088326454, -0.00017867876158561558, -3.135155202471651e-05, -0.3108518719673157, -0.019979771226644516, -0.0065163979306817055, -0.022926850244402885, -4.136476854910143e-05, -6.508615479106084e-05, -7.271740287251305e-06, -0.0016230279579758644, -0.00039664984797127545, -0.0007373951375484467, -0.23402035236358643, -0.00013672371278516948, -0.00027056847466155887, -0.005399880465120077, -0.04189518094062805, -0.0019425348145887256, -0.0017268045339733362, -1.427476167678833, -0.09933041036128998, -0.3251049518585205, -0.0001012035645544529, -8.67805938469246e-05, -0.00842386856675148, -0.025363773107528687, -0.0012486526975408196, -0.004708987195044756, -1.0728830375228426e-06, -3.576272320060525e-06, -8.356221951544285e-05, -0.006488447077572346, -0.10644251853227615, -2.0379812717437744, -0.012189890258014202, -4.017272294731811e-05, -0.3552732467651367, -0.8052565455436707, -1.0556436777114868, -0.27325743436813354, -0.6325932145118713, -0.0005110388156026602, -0.022516077384352684, -0.061793144792318344, -0.03713979944586754, -0.0023329441901296377, -0.00958082266151905, -0.02004578895866871, -0.7903857231140137, -1.7071914672851562, -8.344646857949556e-07, -9.536738616588991e-07, -0.00027771908207796514, -0.00033968876232393086, -0.1264563798904419], "finish_reason": "stop"}], "metrics": {"energy": 199.74974476051335, "energy_per_token": 1.196106256050978, "time": 7.138248, "time_per_token": 0.042744}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"Source path must be a directory\")\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    destination_path.mkdir(parents=True, exist_ok=True)\n    for source in source_path.iterdir():\n        if source.is_file():\n            shutil.copy(source, destination_path)\n            destination = list(destination_path.iterdir())[-1]\n            shutil.copy(destination, source)\n            yield source.name, list(source_path.iterdir())", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " must", " be", " a", " directory", "\"", ")", "\n", "    ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "for", " source", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " source", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "source", ",", " destination", "_", "path", ")", "\n", "            ", "destination", " =", " list", "(", "destination", "_", "path", ".", "iter", "dir", "())", "[-", "1", "]", "\n", "            ", "sh", "util", ".", "copy", "(", "destination", ",", " source", ")", "\n", "            ", "yield", " source", ".", "name", ",", " list", "(", "source", "_", "path", ".", "iter", "dir", "())", "\n", "\n", "#"], "logprobs": [-1.0749242305755615, -0.16409388184547424, -0.49123433232307434, -0.0016451646806672215, -0.0001382732152706012, -0.007649060804396868, -0.032764874398708344, -0.012914235703647137, -9.870042413240299e-05, -2.0861407392658293e-05, -0.0070386785082519054, -0.00013255194062367082, -0.2582166790962219, -0.00014029949670657516, -0.003722169203683734, -0.013481409288942814, -0.017332278192043304, -0.0022701462730765343, -0.03535196930170059, -0.012435165233910084, -3.683499380713329e-05, -0.3537939190864563, -0.9389418363571167, -1.363877773284912, -0.2639787495136261, -0.620705246925354, -0.08099786937236786, -0.23051245510578156, -0.10790606588125229, -0.8689412474632263, -0.0012675831094384193, -0.0057736532762646675, -0.9135020971298218, -2.112945795059204, -0.0770929753780365, -1.073150634765625, -0.1617933064699173, -0.11812470853328705, -0.00019405389321036637, -6.0794889577664435e-05, -0.005176711827516556, -0.002761481562629342, -0.0035330750979483128, -3.516612196108326e-05, -6.794906312279636e-06, -0.0008311392739415169, -0.24815189838409424, -0.10574039816856384, -0.8882800340652466, -0.01789109595119953, -0.00988056417554617, -0.00318068522028625, -0.004303836729377508, -1.3232143828645349e-05, -0.00034374051028862596, -0.0005858612130396068, -0.0005142558366060257, -0.0019377756398171186, -4.410734163684538e-06, -1.2993727978027891e-05, -0.0007790867821313441, -0.007284746039658785, -0.39875179529190063, -2.7257323265075684, -0.006572534330189228, -0.030927008017897606, -0.018471019342541695, -0.00458048190921545, -4.5060096454108134e-05, -0.0005595310358330607, -0.38213881850242615, -0.0025662605185061693, -0.004144769627600908, -0.004711122717708349, -0.0037190811708569527, -4.768370445162873e-07, -4.911301948595792e-05, -0.0006216024048626423, -0.003306400263682008, -0.001135300612077117, -0.024581631645560265, -0.2430415153503418, -1.8056098222732544, -2.731407642364502, -2.393394708633423, -0.04576091095805168, -8.523101132595912e-05, -3.6000557884108275e-05, -0.0004798214649781585, -0.3773795962333679, -0.00031323294388130307, -0.0010621865512803197, -0.010306469164788723, -0.0029210064094513655, -0.5141642689704895, -0.08812670409679413, -0.0010586139978840947, -0.03954741731286049, -2.145764938177308e-06, -0.11037464439868927, -0.05734511837363243, -0.008788359351456165, -0.0018519884906709194, -0.37306588888168335, -0.00018356545479036868, -1.3589766240329482e-05, -0.0018070096848532557, -0.1939040869474411, -0.09453167766332626, -0.01784577965736389, -0.03426075354218483, -0.0008416209602728486, -2.8609820219571702e-05, -0.1287437230348587, -0.021618898957967758, -1.6199246644973755, -2.7921509742736816, -1.208832025527954, -2.8461787700653076, -0.028928155079483986, -0.039335064589977264, -0.0006316096987575293, -2.3245540432981215e-05, -0.0005525015876628458, -0.41242167353630066, -8.034383063204587e-05, -0.0006986799417063594, -0.5525179505348206, -0.002342220861464739, -0.008790958672761917, -0.14220665395259857, -0.15210025012493134, -3.981412887573242, -0.0598021037876606, -0.0015175743028521538, -0.2830536365509033, -0.21362969279289246, -0.850564181804657, -0.04869690537452698, -0.5457452535629272, -0.4955122768878937, -0.03232003375887871, -0.7675859928131104, -2.080751895904541, -0.8035317659378052, -0.630965530872345, -0.12492339313030243, -0.34976086020469666, -2.1911206245422363, -0.016130657866597176, -1.3300894498825073, -1.0775947570800781, -0.0008942657150328159, -0.0009703694959171116, -0.029625551775097847, -6.151010165922344e-05, -0.001591488253325224, -1.699972152709961, -0.34355536103248596, -2.1294491291046143], "finish_reason": "stop"}], "metrics": {"energy": 167.09288270378116, "energy_per_token": 1.0443305168986323, "time": 6.9181156, "time_per_token": 0.0432382225}}
{"outputs": [{"text": "# If the source_path does not exist, raise an error.\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError('The source_path does not exist!')\n\n    # Get a list of filenames in the source_path without descending into subdirectories.\n    files = shutil.os.listdir(source_path)\n\n    # Create the destination path if it does not exist.\n    pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # Copy each file from the files list to the destination.\n    for f in files:\n        shutil.copy(source_path + '/' + f, destination_path)\n\n    # Return a tuple containing the source directory name and a list of filenames.\n    return source_path, files", "tokens": ["#", " If", " the", " source", "_", "path", " does", " not", " exist", ",", " raise", " an", " error", ".", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "('", "The", " source", "_", "path", " does", " not", " exist", "!", "')", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " fil", "en", "ames", " in", " the", " source", "_", "path", " without", " descending", " into", " sub", "direct", "ories", ".", "\n", "    ", "files", " =", " shut", "il", ".", "os", ".", "list", "dir", "(", "source", "_", "path", ")", "\n", "\n", "    ", "#", " Create", " the", " destination", " path", " if", " it", " does", " not", " exist", ".", "\n", "    ", "path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Copy", " each", " file", " from", " the", " files", " list", " to", " the", " destination", ".", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "source", "_", "path", " +", " '/", "'", " +", " f", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "#", " Return", " a", " tuple", " containing", " the", " source", " directory", " name", " and", " a", " list", " of", " fil", "en", "ames", ".", "\n", "    ", "return", " source", "_", "path", ",", " files"], "logprobs": [-2.139058828353882, -4.118046283721924, -0.937885046005249, -0.13249292969703674, -0.8266793489456177, -0.010275792330503464, -0.8460338115692139, -0.0018842339050024748, -0.04296679422259331, -0.6841301321983337, -0.14300277829170227, -1.0834360122680664, -0.2201424241065979, -1.1393288373947144, -0.028711915016174316, -0.00804221536964178, -0.13557597994804382, -0.03755930811166763, -0.5176470875740051, -0.0013667537132278085, -8.487341256113723e-05, -0.007351371459662914, -0.023278988897800446, -0.0016784878680482507, -0.00021217002358753234, -3.373566141817719e-05, -0.0035735813435167074, -5.745722592109814e-05, -0.5703445076942444, -8.880697714630514e-05, -0.002533918246626854, -0.008671249262988567, -0.007961444556713104, -0.0021197961177676916, -0.02909814938902855, -0.021935930475592613, -2.276871418871451e-05, -1.541111946105957, -1.1308940649032593, -0.3333921432495117, -0.7754450440406799, -0.004493734333664179, -0.9272873997688293, -0.0011010067537426949, -0.015080723911523819, -3.3251307010650635, -0.11714143306016922, -0.0026409293059259653, -0.2643382251262665, -0.0030444960575550795, -0.12041277438402176, -1.8094638586044312, -1.0208778381347656, -0.07372517138719559, -0.013133213855326176, -2.8339765071868896, -0.00028701478731818497, -1.2874520507466514e-05, -0.8029159307479858, -0.056956805288791656, -0.1311466097831726, -1.1537630558013916, -0.020793074741959572, -2.4969818592071533, -0.17663916945457458, -0.026746228337287903, -0.057697612792253494, -0.020968660712242126, -0.000514017534442246, -0.2815476953983307, -0.012698153033852577, -0.001716570113785565, -2.3599510192871094, -0.5892208814620972, -1.693572759628296, -0.0003943857445847243, -8.177422569133341e-05, -0.5799894332885742, -0.15607038140296936, -0.041701048612594604, -2.3841830625315197e-06, -0.0006884350441396236, -0.009646940976381302, -6.496695277746767e-05, -3.7788631743751466e-05, -0.0017968951724469662, -0.005321148317307234, -0.2161256968975067, -0.0004407388041727245, -0.11077050864696503, -1.2482091188430786, -0.9082971811294556, -0.046742845326662064, -2.20400071144104, -0.22152413427829742, -0.014520449563860893, -0.30384236574172974, -0.0003420721332076937, -0.060149915516376495, -0.0918302834033966, -0.013862519524991512, -0.0005644158809445798, -1.1447199583053589, -0.0008697302546352148, -0.00010406429646536708, -0.0011313711293041706, -0.0018772137118503451, -0.001589702907949686, -5.209310256759636e-05, -1.1086402082582936e-05, -0.00043084874050691724, -0.0163782499730587, -0.019320979714393616, -5.9126061387360096e-05, -0.00023409964342135936, -0.2944856584072113, -0.001378896413370967, -0.00699203833937645, -0.0032922611571848392, -0.0051820483058691025, -1.1920928244535389e-07, -7.1403817855753e-05, -0.0006249382277019322, -0.0011717366287484765, -0.0006108802044764161, -0.013974555768072605, -0.037353768944740295, -0.00036971885128878057, -0.1634071171283722, -0.6250423192977905, -1.507155179977417, -0.15009038150310516, -1.8506381511688232, -0.08648653328418732, -2.9958958625793457, -0.015783969312906265, -0.08206520229578018, -0.038009509444236755, -0.014188953675329685, -3.4690475463867188, -0.019525818526744843, -0.0016163630643859506, -0.17719629406929016, -1.9470267295837402, -0.039549823850393295, -0.001701099332422018, -0.0004503904783632606, -0.0017958242679014802, -0.005754570942372084, -0.45445236563682556, -0.00016532962035853416, -2.5748875486897305e-05, -0.0035611088387668133, -0.28675219416618347, -1.3317641019821167, -0.0021805812139064074, -0.00011491115583339706, -0.13327418267726898, -0.2780046761035919, -0.0059228623285889626, -0.00019178935326635838, -0.005919662769883871, -0.007050633896142244, -0.02116008847951889, -0.00011824862303910777, -3.933898824470816e-06, -1.3071409463882446, -0.014967167750000954, -0.05773868039250374, -0.02782515063881874, -0.7052489519119263, -0.11237658560276031, -1.145770788192749, -0.006870337296277285, -0.2389490157365799, -0.009845034219324589, -1.4466192722320557, -0.7489930391311646, -0.13997015357017517, -0.06871675699949265, -0.38103267550468445, -0.001622313866391778, -0.016916153952479362, -0.47489437460899353, -0.00013374387344811112, -1.537788011773955e-05, -0.7645832300186157, -0.0018406844465062022, -0.0017220443114638329, -0.026227407157421112, -1.5637969970703125, -0.000764673575758934, -0.0001525762490928173, -0.21729159355163574, -0.04066813737154007], "finish_reason": "stop"}], "metrics": {"energy": 239.98352738285075, "energy_per_token": 1.230684755809491, "time": 8.4019, "time_per_token": 0.04308666666666666}}
