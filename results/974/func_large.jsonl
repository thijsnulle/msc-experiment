{"outputs": [{"text": "path_obj = pathlib.Path(source_path)\n\n    if not path_obj.is_dir():\n        raise ValueError(f'Path \"{source_path}\" is not a directory or does not exist.')\n\n    source_name = path_obj.name\n\n    # Copy files to destination\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir()\n\n    copied_files = []\n    for filename in os.listdir(source_path):\n        file_path = os.path.join(source_path, filename)\n        if os.path.isfile(file_path):\n            shutil.copy2(file_path, destination_path)\n            copied_files.append(filename)\n\n    return source_name, copied_files", "tokens": ["path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "\n", "    ", "if", " not", " path", "_", "obj", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Path", " \"", "{", "source", "_", "path", "}\"", " is", " not", " a", " directory", " or", " does", " not", " exist", ".", "')", "\n", "\n", "    ", "source", "_", "name", " =", " path", "_", "obj", ".", "name", "\n", "\n", "    ", "#", " Copy", " files", " to", " destination", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "()", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " filename", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "file", "_", "path", ",", " destination", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "return", " source", "_", "name", ",", " copied", "_", "files", "\n", "\n", "if"], "logprobs": [-3.827472686767578, -1.2020279169082642, -1.7190895080566406, -0.2634117007255554, -0.019537391141057014, -0.00032586511224508286, -6.496695277746767e-05, -0.003188884584233165, -0.009619549848139286, -0.037307485938072205, -6.05564855504781e-05, -8.034383063204587e-05, -0.0027699219062924385, -0.06395222991704941, -1.6469318866729736, -0.00029702542815357447, -0.2759365737438202, -0.16270285844802856, -0.052124232053756714, -0.003386122640222311, -4.184158387943171e-05, -0.0016963391099125147, -1.6326545476913452, -8.237022848334163e-05, -0.010821468196809292, -0.09963031858205795, -0.0229584239423275, -0.003826915519312024, -0.05790058523416519, -0.010680535808205605, -3.814689989667386e-06, -0.13366472721099854, -0.43583008646965027, -1.8070478439331055, -2.8113017082214355, -1.046985149383545, -0.0039054087828844786, -0.17910164594650269, -0.0005125877796672285, -3.0517112463712692e-05, -0.01959642581641674, -0.9940139651298523, -0.12088581919670105, -0.3612428903579712, -0.2721075415611267, -0.9029776453971863, -0.1432008445262909, -0.0014179424615576863, -0.0057427179999649525, -0.3374308943748474, -0.01758882775902748, -0.003271824214607477, -0.04244021326303482, -0.0002475670480635017, -3.0517001152038574, -0.029352625831961632, -2.185910701751709, -0.03356081619858742, -0.1948338747024536, -0.04787655919790268, -0.00019059749320149422, -0.0001817776501411572, -0.08454486727714539, -0.05792589858174324, -1.126219391822815, -0.00023123928986024112, -1.76387619972229, -3.9688704013824463, -0.5420384407043457, -0.9781069755554199, -0.32703128457069397, -1.2994766235351562, -0.02204018644988537, -2.02604341506958, -0.10454301536083221, -0.24798716604709625, -1.2490816116333008, -0.3078696131706238, -0.03128824383020401, -1.4424220353248529e-05, -0.002582193585112691, -0.004467743914574385, -0.002159646013751626, -3.564294092939235e-05, -8.583032467868179e-06, -0.005092269275337458, -0.11606451869010925, -0.2550460398197174, -0.5506181120872498, -0.020310288295149803, -0.010047218762338161, -8.940656698541716e-06, -1.3708974620385561e-05, -0.0013610394671559334, -0.6762866973876953, -0.005049689672887325, -0.010796467773616314, -0.0009535771678201854, -0.09536796063184738, -2.3245540432981215e-05, -0.00015043080202303827, -0.0010835020802915096, -0.00035470392322167754, -4.6491513785440475e-06, -0.8036138415336609, -0.03305359557271004, -0.1566038280725479, -0.0022728820331394672, -0.8755513429641724, -0.0005321278586052358, -0.017245693132281303, -0.11437154561281204, -0.016670450568199158, -0.04275333881378174, -0.016748880967497826, -0.09796839207410812, -0.05504670366644859, -2.67645263671875, -0.008421503938734531, -0.49210211634635925, -1.3351351299206726e-05, -0.0014156806282699108, 0.0, -0.00024077377747744322, -0.19630369544029236, -5.722029527532868e-06, -0.0011508992174640298, -0.00026544384309090674, -0.007273976691067219, -0.0034565723035484552, -1.6845535039901733, -0.24731816351413727, -0.024503696709871292, -0.008219582028687, -0.21239925920963287, -2.3841855067985307e-07, -0.00021479207498487085, -5.483612312673358e-06, -0.0006759266252629459, -3.635817120084539e-05, -0.006838844623416662, -5.960462772236497e-07, -1.7881233361549675e-05, -3.7431014789035544e-05, -0.0003270567976869643, -4.172238186583854e-05, -0.007173614576458931, -0.05984802916646004, -0.049192626029253006, -0.05973360687494278, -2.622600959512056e-06, -5.721882189391181e-05, -5.960462772236497e-07, -0.00010001159535022452, -0.0011698314920067787, -6.305972783593461e-05, -0.0006399490521289408, -8.22540732769994e-06, 0.0, -0.020108532160520554, -0.026774084195494652, -0.001259249052964151, -0.08747364580631256, -2.622600959512056e-06, -4.0531076592742465e-06, -0.0003486264031380415, -0.6750010848045349, -1.8954096958623268e-05, -0.0026416426990181208, -3.123234637314454e-05, 0.0, -3.099393507000059e-05, -0.01722014881670475, -1.3112935448589269e-05, -8.165503095369786e-05, -0.04490749537944794, -0.012075887992978096, -0.0026430694852024317, -0.005798779893666506, 0.0, -2.50339189733495e-06, -1.4066597032069694e-05, -6.3774932641536e-05, -0.00023231192608363926, -0.0006254147156141698, -0.008208231069147587, -0.00043406602344475687, -0.009255479089915752, -0.04724271968007088, -0.0008642514003440738, -0.05056226998567581, -0.10094298422336578, -2.145764938177308e-06, -0.0008622265886515379, -0.000398198957554996, -0.00265507772564888, -9.536738616588991e-07, -3.576278118089249e-07, -0.27244147658348083, -0.009023481979966164, -0.5740712285041809], "finish_reason": "stop"}], "metrics": {"energy": 713.7867924995418, "energy_per_token": 3.5511780721370236, "time": 17.006426, "time_per_token": 0.08460908457711443}}
{"outputs": [{"text": "try:\n        if not pathlib.Path(source_path).is_dir():\n            raise ValueError(f'\"{source_path}\" does not exist or is not a directory.')\n    except Exception as e:\n        raise\n    else:\n        source_dir_path = pathlib.Path(source_path)\n        source_dir_name = source_dir_path.stem\n        dest_dir_path = pathlib.Path(destination_path).expanduser().absolute()\n\n        try:\n            # Create the destination directory if it does not exist.\n            dest_dir_path.mkdir(exist_ok=True)\n        except Exception as e:\n            raise\n\n        files = [file.name for file in source_dir_path.iterdir() if file.is_file()]\n\n        for file in files:\n            try:\n                shutil.copy(source_dir_path / file, dest_dir_path / file)\n            except Exception as e:\n                raise\n\n        return source_dir_name, files", "tokens": ["try", ":", "\n", "        ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "            ", "raise", " Value", "Error", "(", "f", "'", "\"", "{", "source", "_", "path", "}\"", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "')", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "raise", "\n", "    ", "else", ":", "\n", "        ", "source", "_", "dir", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "        ", "source", "_", "dir", "_", "name", " =", " source", "_", "dir", "_", "path", ".", "stem", "\n", "        ", "dest", "_", "dir", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "expand", "user", "()", ".", "absolute", "()", "\n", "\n", "        ", "try", ":", "\n", "            ", "#", " Create", " the", " destination", " directory", " if", " it", " does", " not", " exist", ".", "\n", "            ", "dest", "_", "dir", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ")", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "raise", "\n", "\n", "        ", "files", " =", " [", "file", ".", "name", " for", " file", " in", " source", "_", "dir", "_", "path", ".", "iter", "dir", "()", " if", " file", ".", "is", "_", "file", "()", "]", "\n", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "try", ":", "\n", "                ", "sh", "util", ".", "copy", "(", "source", "_", "dir", "_", "path", " /", " file", ",", " dest", "_", "dir", "_", "path", " /", " file", ")", "\n", "            ", "except", " Exception", " as", " e", ":", "\n", "                ", "raise", "\n", "\n", "        ", "return", " source", "_", "dir", "_", "name", ",", " files", "\n", "\n", "def"], "logprobs": [-3.0043764114379883, -0.0008646087371744215, -0.009421293623745441, -0.02816200815141201, -1.2797486782073975, -0.30351707339286804, -1.380436658859253, -0.002707508159801364, -9.655486064730212e-05, -0.0026140587870031595, -0.0034544337540864944, -0.01247378159314394, -6.97350042173639e-05, -2.8967437174287625e-05, -0.0017122859135270119, -0.0005547653418034315, -0.39815932512283325, -5.6265202147187665e-05, -0.00821106880903244, -0.021034380421042442, -0.03004903346300125, -0.0028794039972126484, -0.029752615839242935, -0.012525700032711029, -1.3112935448589269e-05, -0.18479005992412567, -0.5074341297149658, -1.6787168979644775, -2.339061975479126, -0.11624474078416824, -0.00852304045110941, -4.2199197196168825e-05, -9.775113539944869e-06, -0.03899518400430679, -1.2263789176940918, -0.0031033235136419535, -0.01718968339264393, -0.021141180768609047, -0.0303502194583416, -0.004531116224825382, -0.010273786261677742, -0.01641307957470417, -0.5914042592048645, -0.03790082409977913, -0.004471541848033667, -1.737152338027954, -0.007969486527144909, -0.35431531071662903, -0.0577041357755661, -0.4870211184024811, -0.002428203821182251, -0.011305202730000019, -0.003957061562687159, -0.8518568873405457, -2.747666358947754, -0.8029394149780273, -0.2950807213783264, -0.00010406429646536708, -0.0034608489368110895, -0.009205280803143978, -1.9138437509536743, -0.03761705756187439, -0.9043073654174805, -0.4243273138999939, -1.6380705833435059, -0.1515287607908249, -0.15786653757095337, -0.0001461399078834802, -2.2172682292875834e-05, -0.01960636116564274, -0.004468812141567469, -0.005842631217092276, -1.5616295058862306e-05, -1.0728830375228426e-06, -0.002468516817316413, -0.10818447917699814, -0.07481200993061066, -1.8677873611450195, -0.0020325970835983753, -0.11360953748226166, -0.03756137564778328, -0.07582253962755203, -0.006703744642436504, -0.08425267040729523, -1.1920922133867862e-06, -0.0029697385616600513, -1.0371154530730564e-05, -6.067568756407127e-05, -0.0002864189154934138, -2.664923906326294, -0.11748385429382324, -0.23540565371513367, -3.850350856781006, -0.02436898462474346, -0.12437530606985092, -0.05265207216143608, -0.008877452462911606, -0.015637867152690887, -0.012329667806625366, -7.366862701019272e-05, -2.682172998902388e-05, -0.0018629353726282716, -0.009511865675449371, -0.005321504082530737, -3.099393507000059e-05, -1.5497195136049413e-06, -0.008673140779137611, -2.7630786895751953, -2.1542224884033203, -0.0005703729693777859, -0.00064876489341259, -0.9632499814033508, -1.4334135055541992, -0.0005959880072623491, -0.13239498436450958, -1.7972897291183472, -0.0405692383646965, -2.4568772315979004, -0.00023505308490712196, -0.00878339633345604, -0.001671109232120216, -2.751023769378662, -1.2645131349563599, -0.5626167058944702, -0.047920648008584976, -0.05682538077235222, -0.08413201570510864, -0.017653482034802437, -0.6596042513847351, -0.0008417400531470776, -0.023581871762871742, -1.2147860527038574, -0.013651933521032333, -0.0005608416395261884, -1.2461061477661133, -3.564294092939235e-05, -0.0006075443816371262, -0.0003587556129787117, -0.00041547726141288877, -0.0010606384603306651, -0.0007347744540311396, -3.933898824470816e-06, -0.007571925409138203, -1.5036520957946777, -1.1920922133867862e-06, -2.50339189733495e-06, -0.009039312601089478, -0.008030981756746769, -0.19319681823253632, -0.006310418248176575, -0.32342058420181274, -0.0024792193435132504, -0.16591961681842804, -0.024004194885492325, -0.01349775679409504, -0.0010871936101466417, -0.0030884684529155493, -0.0005378468777053058, -0.09614204615354538, -0.027220003306865692, -2.0311574935913086, -0.03608434274792671, -1.6121834516525269, -1.9955790042877197, -1.4232559204101562, -0.8707500696182251, -0.4839925169944763, -0.16259445250034332, -0.009703846648335457, -0.000519617460668087, -0.0017116909148171544, -0.11202814429998398, -2.0265558760002023e-06, -0.0004102342063561082, -1.9073468138230965e-06, -1.7881377516459906e-06, -0.0001323135511483997, -0.10988880693912506, -4.2676016164477915e-05, -0.00012408917245920748, -0.06415975093841553, -0.025183262303471565, -0.0001382732152706012, -0.004809122066944838, -1.847726889536716e-05, -0.00025328766787424684, -0.007195510435849428, -0.00854041613638401, -0.018958203494548798, -0.5654792785644531, -0.009839958511292934, -0.6301422119140625, -0.1653236448764801, -0.21014931797981262, -0.012627998366951942, -0.0015063855098560452, -0.0013902055798098445, -0.0025329669006168842, -0.9342887997627258, -2.4318398573086597e-05, -0.0005808573332615197, -0.0006069486844353378, -0.23336780071258545, -4.029192859889008e-05, -2.098061486321967e-05, -0.0010717130498960614, -0.6120125651359558, -0.2207115888595581, -0.0024876620154827833, -0.006961851380765438, -1.1920922133867862e-06, -2.884823152271565e-05, -0.14023947715759277, -0.006305443122982979, -0.001669562072493136, -0.015321416780352592, -1.2874520507466514e-05, -3.504691630951129e-05, -1.6689286894688848e-06, -1.2278481335670222e-05, -0.36765146255493164, -0.00982508435845375, -0.030351027846336365, -0.012008163146674633, -0.029125012457370758, -0.004832256119698286, -0.13737592101097107, -0.01072629727423191, -0.004521384835243225, -0.00028772983932867646, -0.0008971241768449545, -0.00029059001826681197, -0.18103091418743134, -0.024493809789419174, -0.46385645866394043, -0.20776772499084473, -0.09859875589609146, -0.2876714766025543, -3.099436753473128e-06, -0.00020823694649152458, -1.3112935448589269e-05, -0.001984652131795883, -0.0010976725025102496, -0.02711883746087551, -0.3819083869457245, -0.03192118555307388, -1.508677363395691], "finish_reason": "stop"}], "metrics": {"energy": 888.4912640933996, "energy_per_token": 3.5971306238599174, "time": 21.62554, "time_per_token": 0.0875527935222672}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() == False:\n        raise ValueError(f'Source path is not a valid directory, \"{source_path}\"')\n\n    file_list = [i.name for i in pathlib.Path(source_path).iterdir() if i.is_file()]\n    destination_path.mkdir(exist_ok=True)\n    for file in file_list:\n        shutil.copy2(source_path/file, destination_path/file)\n\n    return source_path.name, file_list", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " source", "_", "path", ".", "is", "_", "dir", "()", " ==", " False", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Source", " path", " is", " not", " a", " valid", " directory", ",", " \"", "{", "source", "_", "path", "}\"", "')", "\n", "\n", "    ", "file", "_", "list", " =", " [", "i", ".", "name", " for", " i", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "()", " if", " i", ".", "is", "_", "file", "()", "]", "\n", "    ", "destination", "_", "path", ".", "mk", "dir", "(", "exist", "_", "ok", "=", "True", ")", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "sh", "util", ".", "copy", "2", "(", "source", "_", "path", "/", "file", ",", " destination", "_", "path", "/", "file", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " file", "_", "list", "\n", "\n", "if"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -0.23526781797409058, -0.051925625652074814, -0.00032014489988796413, -0.00010823617776622996, -0.004042074549943209, -0.002119558397680521, -0.004571819212287664, -2.2649508537142538e-05, -1.3232143828645349e-05, -0.002438192954286933, -0.0789787620306015, -0.1533668339252472, -0.5044745206832886, -0.0014073477359488606, -0.0042085181921720505, -0.001672775368206203, -0.0038461536169052124, -3.075552376685664e-05, -2.90866428258596e-05, -0.000651147507596761, -0.0002628219372127205, -0.0010246747406199574, -3.3378546504536644e-06, 0.0, -0.0006245807744562626, -0.013491759076714516, -0.9624775648117065, -0.5877822041511536, -2.2745251655578613, -7.557583012385294e-05, -2.253030106658116e-05, -0.017456108704209328, -0.6995338797569275, -4.792098479811102e-05, -0.12088751047849655, -1.6760733127593994, -2.065333843231201, -0.08393692970275879, -0.13133604824543, -0.019291747361421585, -0.01679541915655136, -0.047977007925510406, -0.02154446765780449, -1.4543427823809907e-05, -0.3738580644130707, -0.7289124131202698, -1.462336540222168, -1.9555726051330566, -0.7583612203598022, -2.4008779525756836, -0.25941163301467896, -0.5238847732543945, -1.9854035377502441, -0.11600645631551743, -3.6917924880981445, -3.1156201362609863, -0.01127573475241661, -0.03476724773645401, -0.0006177900941111147, -1.585470999998506e-05, -0.0822126716375351, -0.8054765462875366, -0.004686799366027117, -1.4614903926849365, -0.001433893688954413, -3.240482807159424, -0.09101443737745285, -0.6363992094993591, -0.029669297859072685, -0.7099013328552246, -3.4401564598083496, -0.10178620368242264, -0.019937820732593536, -0.006409327033907175, -0.0002946419408544898, -0.0002277830062666908, -2.507280111312866, -0.000607782625593245, -5.674201020156033e-05, -0.0018779276870191097, -0.1372307538986206, -0.012291045859456062, -0.00012408917245920748, -1.0371154530730564e-05, -0.004491954110562801, -0.0002834395272657275, -0.056989122182130814, -9.536738616588991e-07, -0.000426439888542518, -0.06797048449516296, -0.045553404837846756, -0.0008214913541451097, -0.0064718653447926044, -1.3351351299206726e-05, -0.015754517167806625, -0.00342996115796268, -0.15389607846736908, -0.025865385308861732, -0.2837145924568176, -1.1974849700927734, -0.0021291938610374928, -0.010364753194153309, -0.0642143115401268, -0.0023011888843029737, -3.7788631743751466e-05, -0.009863094426691532, -0.8626324534416199, -3.4570634852570947e-06, -1.0967194612021558e-05, -0.08039657026529312, -0.0047838520258665085, -0.3487144410610199, -0.02004392072558403, -0.2398219257593155, -0.41351068019866943, -0.8017622828483582, -0.25387775897979736, -0.008020102046430111, -2.1934269170742482e-05, -7.271502545336261e-05, -0.0025150116998702288, -0.003922983072698116, -0.005236955359578133, -0.2278483808040619, -3.2543604902457446e-05, -3.909988299710676e-05, -0.003325648372992873, -0.827587366104126, -0.007096797693520784, -0.6014378070831299, -0.004298732616007328, -0.00020180096908006817, -2.0312461853027344, -0.007070046849548817, -0.0035758381709456444, -0.025929158553481102, -0.00012015574611723423, -2.50339189733495e-06, -0.7577119469642639, -0.004330187104642391, -0.020655760541558266, -0.00915744248777628, -0.7928416132926941, -0.0034716594964265823, -0.0804668590426445, -0.7505582571029663, -6.985420623095706e-05, -2.610649426060263e-05, -0.0048288158141076565, -0.052216220647096634, -0.006738202180713415, -0.04488902911543846, -2.5629668016335927e-05, -1.1205610462639015e-05, -0.347316175699234, -0.01897411234676838, -0.45454084873199463], "finish_reason": "stop"}], "metrics": {"energy": 593.149533176422, "energy_per_token": 3.7071845823526375, "time": 13.674204, "time_per_token": 0.08546377499999999}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"The source directory '{source_path}' does not exist or is not a directory.\")\n\n    if not pathlib.Path(destination_path).is_dir():\n        pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # List files in the source directory without descending into subdirectories\n    files = [file.name for file in pathlib.Path(source_path).iterdir() if file.is_file()]\n\n    # Copy the files to the destination directory\n    for file in files:\n        shutil.copy2(pathlib.Path(source_path) / file, destination_path)\n\n    # Return the name of the source directory and a list of filenames that were copied\n    return (pathlib.Path(source_path).name, files)", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " source", " directory", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " files", " in", " the", " source", " directory", " without", " descending", " into", " sub", "direct", "ories", "\n", "    ", "files", " =", " [", "file", ".", "name", " for", " file", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "()", " if", " file", ".", "is", "_", "file", "()", "]", "\n", "\n", "    ", "#", " Copy", " the", " files", " to", " the", " destination", " directory", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "sh", "util", ".", "copy", "2", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", " /", " file", ",", " destination", "_", "path", ")", "\n", "\n", "    ", "#", " Return", " the", " name", " of", " the", " source", " directory", " and", " a", " list", " of", " fil", "en", "ames", " that", " were", " copied", "\n", "    ", "return", " (", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "name", ",", " files", ")", "\n", "\n", "def"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -1.1850459575653076, -0.0038569599855691195, -7.211902266135439e-05, -0.0029269494116306305, -0.0029762755148112774, -0.008395261131227016, -4.7205765440594405e-05, -9.059495641849935e-05, -0.0009297577198594809, -0.00041607304592616856, -0.25960788130760193, -4.911301948595792e-05, -0.010970515199005604, -0.015120413154363632, -0.0255056731402874, -0.004533845465630293, -0.042915407568216324, -0.013826543465256691, -7.152555099310121e-07, -0.15962481498718262, -0.46341001987457275, -0.3844926953315735, -1.730799674987793, -1.638242244720459, -1.2641127109527588, -0.8855249285697937, -0.0025347506161779165, -0.010036715306341648, -8.106198947643861e-06, -4.768370445162873e-07, -0.009147283621132374, -0.1510959267616272, -0.0007948100101202726, -0.003789507318288088, -0.10337740927934647, -0.011803428642451763, -0.0033420443069189787, -0.043258294463157654, -0.035142406821250916, -0.17105638980865479, -0.009026317857205868, -0.0022787100169807673, -0.0009246364934369922, -0.3316752314567566, -0.0005458295345306396, -2.367844343185425, -0.053228575736284256, -0.34240084886550903, -0.00025185750564560294, -3.2066785934148356e-05, -0.0006935574929229915, -0.00344825629144907, -0.04811357706785202, -3.707340147229843e-05, -1.6689286894688848e-06, -0.0004418112221173942, -2.038458114839159e-05, -0.4668101370334625, -6.794906312279636e-06, -0.0035583768039941788, -0.0018970841774716973, -0.008519021794199944, -0.0013855629367753863, -0.19321656227111816, -0.000854961050208658, -2.6940935640595853e-05, -0.00017236177518498152, -0.05881684273481369, -0.000993116176687181, -1.9430925021879375e-05, -3.099436753473128e-06, -0.00013684290752280504, -0.0003331344632897526, -0.00042882305569946766, -4.410734163684538e-06, -0.4400334656238556, -0.09415341913700104, -0.0030780103988945484, -0.005873207468539476, -0.14705759286880493, -0.00022825974156148732, -2.264974000354414e-06, -1.1086402082582936e-05, -9.417090768693015e-05, -0.00814355444163084, -0.0001685477327555418, -0.02892143838107586, -0.09279758483171463, -0.0026343900244683027, -2.760249137878418, -1.804970145225525, -0.4894814193248749, -0.21546539664268494, -0.16020998358726501, -0.1862417459487915, -0.04452834278345108, -0.19381825625896454, -0.013810083270072937, -0.003623231779783964, -0.003330638399347663, -0.012111456133425236, -5.566918844124302e-05, -0.08432531356811523, -0.0029082882683724165, -0.6627838015556335, -0.47413116693496704, -0.20443759858608246, -0.7874217629432678, -1.1615726947784424, -0.00899855513125658, -0.002566736191511154, -0.00034195298212580383, -0.000271521887043491, -0.10669316351413727, -3.3854863431770355e-05, -1.0371154530730564e-05, -0.00019858295854646713, -0.0002330270071979612, -0.001110890181735158, -1.645074735279195e-05, -2.52720492426306e-05, -0.000105375460407231, -1.9073304429184645e-05, -0.06348894536495209, -2.3841855067985307e-07, -5.1616290875244886e-05, -0.010780665092170238, -0.018351644277572632, -1.823885577323381e-05, -0.00048744716332294047, -2.145764938177308e-06, -0.0001380348257953301, -0.0017343016806989908, -0.0021302644163370132, -0.0016949110431596637, -0.09693446010351181, -0.00018523407925385982, -0.15274959802627563, -0.10396118462085724, -2.116525650024414, -0.13737821578979492, -0.19333428144454956, -0.01569349505007267, -0.002775865839794278, -0.037553220987319946, -0.052078064531087875, -0.00040665941196493804, -0.608119785785675, -0.07596386224031448, -0.10575874149799347, -0.004279265645891428, -0.00031382881570607424, -0.0001793938863556832, -0.0009535771678201854, -0.29682379961013794, -1.9073468138230965e-06, -4.887569048150908e-06, -0.0004773192631546408, -0.42208513617515564, -0.0002613918040879071, -1.0148710012435913, -0.0003904534096363932, -6.437280717364047e-06, -0.004091820679605007, -0.00036376056959852576, -0.0017271614633500576, -3.0874729418428615e-05, -4.768370445162873e-07, -0.9329290390014648, -0.08897893875837326, -0.0029643899761140347, -0.0014813889283686876, -0.9782973527908325, -6.437094270950183e-05, -8.344646857949556e-07, -0.029162989929318428, -0.012777247466146946, -0.02278318628668785, -0.000935950840357691, -1.593660831451416, -0.22663666307926178, -0.21369996666908264, -0.9694283604621887, -0.0027354462072253227, -0.005411737132817507, -0.013347674161195755, -0.007397876121103764, -0.018438134342432022, -1.3846920728683472, -0.0016500442288815975, -0.0012911563972011209, -0.4864422678947449, -1.4781842764932662e-05, -6.69933797325939e-05, -0.17010943591594696, -0.0007420408655889332, -0.0021634523291140795, -0.008551880717277527, -0.0013299677520990372, -0.027346095070242882, -2.5187907218933105, -0.286782443523407, -8.785339014139026e-05, -1.823885577323381e-05, -0.0021151569671928883, -0.0001234931987710297, -0.0028555116150528193, -2.074220174108632e-05, -3.933898824470816e-06, -0.00019333878299221396, -0.0007089247228577733, -0.05520555004477501, -0.0015376898227259517, -0.07258370518684387, -0.1833718717098236, -0.13113124668598175, -0.010836326517164707, -1.784749150276184], "finish_reason": "stop"}], "metrics": {"energy": 766.4756049909587, "energy_per_token": 3.483980022686176, "time": 18.721783, "time_per_token": 0.08509901363636363}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f'Source directory not found or invalid: {source_path}')\n\n    file_copies = []\n    for filename in pathlib.Path(source_path).iterdir():\n        if filename.is_file():\n            shutil.copy(filename, destination_path)\n            file_copies.append(filename.name)\n\n    return pathlib.Path(source_path).name, file_copies", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Source", " directory", " not", " found", " or", " invalid", ":", " {", "source", "_", "path", "}", "')", "\n", "\n", "    ", "file", "_", "cop", "ies", " =", " []", "\n", "    ", "for", " filename", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " filename", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "filename", ",", " destination", "_", "path", ")", "\n", "            ", "file", "_", "cop", "ies", ".", "append", "(", "filename", ".", "name", ")", "\n", "\n", "    ", "return", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "name", ",", " file", "_", "cop", "ies", "\n", "\n", "def"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -1.1850459575653076, -0.0038569599855691195, -7.211902266135439e-05, -0.0029269494116306305, -0.0029762755148112774, -0.008395261131227016, -4.7205765440594405e-05, -9.059495641849935e-05, -0.0009297577198594809, -0.00041607304592616856, -0.25960788130760193, -4.911301948595792e-05, -0.010970515199005604, -0.015120413154363632, -0.0255056731402874, -0.004533845465630293, -0.042915407568216324, -0.013826543465256691, -7.152555099310121e-07, -0.15962481498718262, -0.46341001987457275, -1.4849717617034912, -1.6660215854644775, -0.9694937467575073, -3.265976905822754, -0.09447701275348663, -1.5615315437316895, -3.3591978549957275, -0.2570897340774536, -0.12325168401002884, -0.01036345586180687, -1.9907753085135482e-05, -9.536738616588991e-07, -0.023083191365003586, -0.03984552621841431, -0.004208636935800314, -0.36037731170654297, -0.0003492222458589822, -2.5351381301879883, -0.05369720235466957, -3.2418060302734375, -1.514493703842163, -0.044287052005529404, -0.09687884896993637, -0.027519723400473595, -0.28309324383735657, -0.5723265409469604, -2.018782615661621, -0.004483053460717201, -2.364901542663574, -0.0002719986077863723, -6.318072337307967e-06, -0.0007853999268263578, -0.0005843124235980213, -0.0009419057168997824, -1.3589766240329482e-05, -5.483612312673358e-06, -0.00029774048016406596, -1.3351351299206726e-05, -0.27244439721107483, -1.1920928244535389e-07, -0.0010315817780792713, -0.01336037740111351, -0.0076733119785785675, -0.21495601534843445, -0.06317273527383804, -0.0015844660811126232, -0.0027890612836927176, -1.4424220353248529e-05, -0.004724292550235987, -0.04105950891971588, -0.009988797828555107, -0.0013296105898916721, -1.3208423852920532, -1.07287787614041e-05, -4.9232225137529895e-05, -0.0010848119854927063, -0.5459395051002502, -0.20215581357479095, -0.0601961612701416, -0.14038078486919403, -0.0002585315378382802, -4.95898348162882e-05, -0.020584410056471825, -0.014217277988791466, -0.004192017484456301, -0.02501562424004078, -0.00024244230007752776, -0.0004732680681627244, -3.576272320060525e-06, -0.0031918552704155445, -0.00030751267331652343, -0.0012561534531414509, -0.026371391490101814, -0.05543643608689308, -0.012260429561138153, -0.0004397855664137751, -0.013711080886423588, -0.16137798130512238, -0.0016752745723351836, -0.1417207419872284, -0.4043133556842804, -0.00013052565918769687, -1.549708758830093e-05, -0.0012811556225642562, -0.0005596501869149506, -0.0027684953529387712, -2.0146166207268834e-05, -3.099436753473128e-06, -0.00019965562387369573, -0.0009834696538746357, -0.06162548065185547, -0.0007581220706924796, -0.00664536515250802, -1.1920922133867862e-06, -4.768370445162873e-07, 0.0, -0.3407653272151947, -0.009589205496013165, -1.846240758895874], "finish_reason": "stop"}], "metrics": {"energy": 457.9814622154235, "energy_per_token": 3.753946411601832, "time": 10.309279, "time_per_token": 0.0845022868852459}}
{"outputs": [{"text": "# Raise ValueError if source_path does not exist or is not a directory.\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\n            f\"Source path '{source_path}' does not exist or is not a directory.\")\n\n    source_dir = pathlib.Path(source_path)\n    destination_dir = pathlib.Path(destination_path)\n\n    if not destination_dir.is_dir():\n        destination_dir.mkdir(parents=True, exist_ok=True)\n\n    file_names_copied = []\n\n    for file_path in source_dir.iterdir():\n        if file_path.is_file():\n            destination_file_path = destination_dir / file_path.name\n            shutil.copy2(file_path, destination_file_path)\n            file_names_copied.append(file_path.name)\n\n    return source_dir.name, file_names_copied", "tokens": ["#", " Ra", "ise", " Value", "Error", " if", " source", "_", "path", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "\"", "Source", " path", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "source", "_", "dir", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "dir", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "if", " not", " destination", "_", "dir", ".", "is", "_", "dir", "():", "\n", "        ", "destination", "_", "dir", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "file", "_", "names", "_", "cop", "ied", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " source", "_", "dir", ".", "iter", "dir", "():", "\n", "        ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "destination", "_", "file", "_", "path", " =", " destination", "_", "dir", " /", " file", "_", "path", ".", "name", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "file", "_", "path", ",", " destination", "_", "file", "_", "path", ")", "\n", "            ", "file", "_", "names", "_", "cop", "ied", ".", "append", "(", "file", "_", "path", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "dir", ".", "name", ",", " file", "_", "names", "_", "cop", "ied"], "logprobs": [-1.769902229309082, -3.849630355834961, -0.1385490894317627, -0.9742958545684814, -0.015703000128269196, -0.04597543179988861, -0.2790949046611786, -0.11037646234035492, -0.0034545527305454016, -0.5127739906311035, -0.0013304438907653093, -0.01410115510225296, -0.04920964688062668, -0.007205925416201353, -0.0027386562433093786, -0.014270397834479809, -0.005219997372478247, -1.302072525024414, -0.015833253040909767, -0.005705144722014666, -0.28479787707328796, -0.024723060429096222, -0.5263971090316772, -0.002958684926852584, -0.00010597144137136638, -0.0015298341168090701, -0.0011826909612864256, -0.0015401893761008978, -6.305972783593461e-05, -7.033323527139146e-06, -0.0007544293766841292, -0.0008037435472942889, -0.4436110258102417, -5.566918844124302e-05, -0.0019814397674053907, -0.028105100616812706, -0.009021946229040623, -0.004326388705521822, -0.043722715228796005, -0.006365026347339153, -7.986990567587782e-06, -0.10496030002832413, -3.1794111728668213, -0.011306499131023884, -0.27369147539138794, -0.17500494420528412, -1.6427583694458008, -0.3897857666015625, -0.501670241355896, -0.0027184458449482918, -0.021576901897788048, -1.8358061424805783e-05, -1.1920858014491387e-05, -0.007481769192963839, -0.1939798891544342, -0.000964414793998003, -0.010124162770807743, -0.005712849088013172, -0.005476116202771664, -0.0011865011183544993, -0.00278501957654953, -0.008821563795208931, -0.14817412197589874, -0.03189186006784439, -0.5878519415855408, -0.0015231685247272253, -0.07804948836565018, -0.0010340826120227575, -3.094078540802002, -0.030619869008660316, -0.8420810699462891, -1.0386123657226562, -0.2589459717273712, -9.679325739853084e-05, -1.5616295058862306e-05, -0.015481884591281414, -0.0007963585085235536, -0.0035893793683499098, -1.9192511899746023e-05, -4.410734163684538e-06, -0.0018546062055975199, -0.27082446217536926, -0.15275123715400696, -0.4187253713607788, -0.0312197282910347, -0.08922919631004333, -0.002599077532067895, -0.0020240312442183495, -6.472854875028133e-05, -3.015949550899677e-05, -0.005510734394192696, -0.00035339308669790626, -0.008453656919300556, -1.311301275563892e-06, -7.152555099310121e-07, -0.0010268182959407568, -0.022729700431227684, -0.20756782591342926, -0.0005276002921164036, -2.7425789833068848, -0.07014285027980804, -0.013663692399859428, -1.883488948806189e-05, -0.0013683013385161757, -0.0002157455455744639, -0.7843612432479858, -7.986990567587782e-06, -0.00046850196667946875, -0.002454365836456418, -0.01839764043688774, -0.0024120304733514786, -0.3766270875930786, -2.3483953555114567e-05, -0.0001245659514097497, -0.0014648432843387127, -7.521823135903105e-05, -3.3378546504536644e-06, -0.2450471818447113, -0.02295725792646408, -0.00096703483723104, -0.002126219915226102, -0.1109522208571434, -0.00013529339048545808, -2.3841830625315197e-06, -3.933898824470816e-06, -3.1709168979432434e-05, -0.0058751036413013935, -0.00010096516780322418, -0.015054537914693356, -0.04228881374001503, -0.007901128381490707, -2.5712811946868896, -0.015331512317061424, -0.8058758974075317, -1.8985267877578735, -0.4278112053871155, -0.0005216429708525538, -0.021574335172772408, -0.025804629549384117, -0.04397064074873924, -0.7177882790565491, -0.0002890407631639391, -0.24918101727962494, -0.2715899646282196, -0.5735980272293091, -0.4523085951805115, -0.006071694195270538, -0.032795097678899765, -1.6689286894688848e-06, -0.0019239740213379264, -5.1377883210079744e-05, -0.08992981910705566, -5.483612312673358e-06, -0.00012337400403339416, -0.007333147339522839, -0.023099616169929504, -0.06711509078741074, -0.0219980888068676, -4.172316494077677e-06, -2.0265558760002023e-06, -0.00023016665363684297, -0.001064687268808484, -2.50339189733495e-06, -0.0034329311456531286, -0.015425894409418106, -0.010190599597990513, -0.0031753377988934517, -2.6609363555908203, -0.14737409353256226, -0.2125590741634369, -0.210740327835083, -0.0013896104646846652, -0.0004687402688432485, -0.029353782534599304, -2.50339189733495e-06, -0.004149874206632376, -0.017976807430386543, -0.019246729090809822, -1.4066597032069694e-05, -0.00021181246847845614, -0.007283325772732496, -0.0010727847693488002, -0.0024075114633888006, -0.07639490067958832, -0.10442951321601868, -1.6689286894688848e-06, -3.814689989667386e-06, -0.0007509748684242368, -0.7383830547332764, -2.109982233378105e-05, -0.057828471064567566, -3.504691630951129e-05, -4.768370445162873e-07, -0.004830239340662956, -0.0014856740599498153, -1.2159273865108844e-05, -0.005959006026387215, -5.722029527532868e-06, -1.0728830375228426e-06, -0.029002156108617783, -0.008460275828838348, -0.012046677991747856, -0.007295160088688135, -3.933898824470816e-06, -2.3483953555114567e-05, -1.549708758830093e-05, -9.775113539944869e-06, 0.0, -0.00011634149996098131, -5.2927523938706145e-05, -0.0005525015876628458, -0.020363669842481613, -3.099436753473128e-06, -9.881961887003854e-05, -0.0030295210890471935, -0.001077786204405129, -0.00030155404238030314, -0.004588076379150152, -0.04405391961336136, -0.002604071283712983, -0.10611783713102341, -0.1467142403125763, -2.9802276912960224e-06, -0.024278469383716583, -0.0028287656605243683, -0.014525619335472584, -0.00044907975825481117, -0.008587219752371311, -3.576278118089249e-07, -1.9073468138230965e-06, -5.483612312673358e-06, -2.9802276912960224e-06, 0.0], "finish_reason": "stop"}], "metrics": {"energy": 821.6227671108235, "energy_per_token": 3.526277970432719, "time": 20.593473, "time_per_token": 0.0883840042918455}}
{"outputs": [{"text": "# Check that the source path is an existing directory\n    source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Source path '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' is not a directory\")\n\n    # Create the destination directory if it doesn't exist\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True)\n\n    # Loop through files in source directory\n    filenames_copied = []\n    for file in source_path.iterdir():\n        if file.is_file():\n            shutil.copy(file, destination_path)\n            filenames_copied.append(file.name)\n\n    # Return the name of the source directory and a list of filenames that were copied\n    return source_path.name, filenames_copied", "tokens": ["#", " Check", " that", " the", " source", " path", " is", " an", " existing", " directory", "\n", "    ", "source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " path", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " path", " '", "{", "source", "_", "path", "}'", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "#", " Create", " the", " destination", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "\n", "    ", "#", " Loop", " through", " files", " in", " source", " directory", "\n", "    ", "fil", "en", "ames", "_", "cop", "ied", " =", " []", "\n", "    ", "for", " file", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "file", ",", " destination", "_", "path", ")", "\n", "            ", "fil", "en", "ames", "_", "cop", "ied", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "#", " Return", " the", " name", " of", " the", " source", " directory", " and", " a", " list", " of", " fil", "en", "ames", " that", " were", " copied", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " fil", "en", "ames", "_", "cop", "ied"], "logprobs": [-1.769902229309082, -1.3020879030227661, -1.4067798852920532, -0.5517832636833191, -0.06655333936214447, -0.6489539742469788, -1.1222732067108154, -1.619030237197876, -0.12532185018062592, -0.1351323276758194, -0.21712400019168854, -0.003588904393836856, -1.551511287689209, -0.06590679287910461, -0.1596624106168747, -0.34262150526046753, -0.03443606197834015, -0.0002335037279408425, -5.352353764465079e-05, -0.0020849411375820637, -0.001002047909423709, -0.00336651923134923, -1.156323378381785e-05, -1.1920928244535389e-07, -0.0014731755945831537, -0.058401212096214294, -0.0415489636361599, -0.036508772522211075, -0.018053846433758736, -0.019107095897197723, -1.8954096958623268e-05, -1.9073468138230965e-06, -0.0033426384907215834, -1.7880785465240479, -0.5433856844902039, -0.004246860276907682, -0.0016598032088950276, -0.023278290405869484, -0.0147114722058177, -7.152555099310121e-07, -0.03334707394242287, -0.24630258977413177, -0.09067361056804657, -0.5920020937919617, -0.17500144243240356, -0.5543612241744995, -0.0003916450368706137, -0.047512855380773544, -9.619726915843785e-05, -3.2186455882765586e-06, -0.03977598994970322, -0.019346119835972786, -0.0001382732152706012, -0.0005199749139137566, -1.2727669477462769, -0.0002134810492862016, -0.0007593132322654128, -0.04728331416845322, -0.24592484533786774, -0.0019458661554381251, -0.0008169650682248175, -1.1444026313256472e-05, 0.0, -2.109982233378105e-05, -3.8742269680369645e-05, -6.6756979322235566e-06, -0.0004839917819481343, -0.000806721393018961, -0.0014447261346504092, -9.393251093570143e-05, -0.000493762141559273, -0.0008006466086953878, -4.0531076592742465e-06, -0.00011038171214750037, -0.004419797100126743, -4.494089080253616e-05, -0.004968795459717512, -0.003426872193813324, -0.0017172842053696513, -2.47952248173533e-05, -0.000259365770034492, -8.940656698541716e-06, -1.1920928244535389e-07, -0.0013397298753261566, -0.006048114970326424, -0.00021407696476671845, -0.001032296335324645, -0.0009159421897493303, -0.003164642956107855, -5.900685573578812e-05, -0.00010740180005086586, -0.07381386309862137, -0.0007159530650824308, -0.08480346947908401, -1.289230465888977, -0.1426326036453247, -0.0073421411216259, -0.17540785670280457, -0.03807446360588074, -0.010799769312143326, -0.7517410516738892, -0.0008168459753505886, -3.6954195820726454e-05, -0.011746643111109734, -0.03688959777355194, -0.00020632999076042324, -0.06632488965988159, -0.0024639980401843786, -0.0016331442166119814, -0.0037216939963400364, -0.0011655449634417892, -7.402622577501461e-05, -7.629365427419543e-06, -0.00011431517486926168, -0.0002668739762157202, -0.0006965356878936291, -2.7418097943154862e-06, 0.0, -0.0003163314249832183, -0.006511897314339876, -0.0016495682066306472, -0.5583500862121582, -0.003920133225619793, -0.0007615765207447112, -4.410734163684538e-06, 0.0, -0.00019441144831944257, -0.00683837104588747, -0.0006364941946230829, -0.00027497802511788905, -0.00042060110718011856, -0.03431927040219307, -3.6954195820726454e-05, -2.7656173188006505e-05, -0.000325388420606032, -0.00014244495832826942, -4.768370445162873e-07, -0.4849998950958252, -0.005000703036785126, -0.0018887552432715893, -0.0015589953400194645, -1.3097059726715088, -0.016187429428100586, -0.13251705467700958, -0.0007643162389285862, -0.04916027933359146, -3.6720376014709473, -0.35159212350845337, -0.9110517501831055, -0.04315280169248581, -2.376291036605835, -0.11899346858263016, -1.5522892475128174, -0.0009450022480450571, -2.0139036178588867, -0.000699156429618597, -7.712543447269127e-05, -1.07254159450531, -0.3511168658733368, -0.0002464944263920188, -0.013335558585822582, -0.01571309193968773, -0.0505354069173336, -0.01197824440896511, -0.05628666654229164, -0.6290022134780884, -0.2603760361671448, -0.04409726336598396, -6.198863957251888e-06, -1.5497195136049413e-06, -0.00012742661056108773, -0.11646705120801926, -1.5497195136049413e-06, -6.890059739816934e-05, -0.003625726094469428, -0.007914847694337368, -0.24183900654315948, -0.03153407573699951, -9.762764238985255e-05, -0.0013256819220259786, -5.364403477869928e-06, -0.00781324878334999, -0.015139199793338776, -0.047899287194013596, -0.004453740082681179, -2.0438148975372314, -4.768360213347478e-06, -1.1205610462639015e-05, -0.0002903516869992018, -0.5879192352294922, -0.09413280338048935, -0.014676465652883053, -0.001396753010340035, -0.00032062159152701497, -1.3112935448589269e-05, -0.08219785243272781, -0.026610426604747772, -0.002376947784796357, -0.03484277427196503, -1.6689286894688848e-06, 0.0, -8.308542601298541e-05, -2.0265373677830212e-05, 0.0, -0.00034671969478949904, -0.0001230164198204875, -0.0004144048143643886, -0.004952188581228256, -0.003569423919543624, -0.004063683096319437, -0.00012814177898690104, -0.016356905922293663, -0.056825604289770126, -0.0014522254932671785, -0.6884167790412903, -0.1485186219215393, -0.6483202576637268, -1.1905574798583984, -0.003735352074727416, -0.01553235575556755, -0.01809154450893402, -0.015151528641581535, -0.026229266077280045, -1.2706871032714844, -0.0033699646592140198, -0.001019673072732985, -0.2661038041114807, -2.3364747903542593e-05, -3.0040289857424796e-05, -1.3967859745025635, -0.0018679328495636582, -0.0016876515001058578, -0.013469059951603413, -0.0013365155318751931, -0.0190542321652174, -0.08476962894201279, -4.124556289752945e-05, -1.1205610462639015e-05, -0.0031835371628403664, -0.016256513074040413, -0.0007931424188427627, -0.007316224742680788, 0.0, 0.0, -6.437280717364047e-06, -1.1920922133867862e-06, 0.0], "finish_reason": "stop"}], "metrics": {"energy": 887.8664592914575, "energy_per_token": 3.594601049762986, "time": 21.02232, "time_per_token": 0.08511060728744939}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('Source path is not a directory')\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True)\n\n    # Get a list of filenames in the source directory, excluding subdirectories\n    filenames = [f.name for f in source_path.iterdir() if f.is_file()]\n    for filename in filenames:\n        source = source_path / filename\n        destination = destination_path / filename\n        shutil.copy(source, destination)\n\n    return source_path.name, filenames", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "('", "Source", " path", " is", " not", " a", " directory", "')", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " fil", "en", "ames", " in", " the", " source", " directory", ",", " excluding", " sub", "direct", "ories", "\n", "    ", "fil", "en", "ames", " =", " [", "f", ".", "name", " for", " f", " in", " source", "_", "path", ".", "iter", "dir", "()", " if", " f", ".", "is", "_", "file", "()", "]", "\n", "    ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "        ", "source", " =", " source", "_", "path", " /", " filename", "\n", "        ", "destination", " =", " destination", "_", "path", " /", " filename", "\n", "        ", "sh", "util", ".", "copy", "(", "source", ",", " destination", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " fil", "en", "ames", "\n", "\n", "print"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -0.23526781797409058, -0.051925625652074814, -0.00032014489988796413, -0.00010823617776622996, -0.004042074549943209, -0.002119558397680521, -0.004571819212287664, -2.2649508537142538e-05, -1.3232143828645349e-05, -0.002438192954286933, -0.0789787620306015, -0.1533668339252472, -0.5044745206832886, -0.0014073477359488606, -0.0042085181921720505, -0.001672775368206203, -0.0038461536169052124, -3.075552376685664e-05, -2.90866428258596e-05, -0.000651147507596761, -0.0002628219372127205, -0.0010246747406199574, -3.3378546504536644e-06, 0.0, -0.0006245807744562626, -0.013491759076714516, -0.9624775648117065, -0.5877822041511536, -0.1399884968996048, -0.018029024824500084, -1.8000440832111053e-05, -8.344646857949556e-07, -0.0033443018328398466, -0.5679287910461426, -6.949660019017756e-05, -0.007225453853607178, -0.037383049726486206, -0.018501445651054382, -0.003970834892243147, -0.02933618798851967, -0.008565118536353111, -6.437280717364047e-06, -2.277188777923584, -1.2654542922973633, -0.40908291935920715, -1.2598785161972046, -0.11763139069080353, -0.26467394828796387, -0.12756571173667908, -1.1322746276855469, -0.0050021265633404255, -0.39598047733306885, -0.828264594078064, -0.1749701201915741, -0.06076294928789139, -2.3364747903542593e-05, -3.576272320060525e-06, -0.0018757858779281378, -0.49928346276283264, -0.025007950142025948, -0.003985914401710033, -0.0015907741617411375, -0.11220834404230118, -2.992108420585282e-05, -5.721882189391181e-05, -0.0030499629210680723, -0.00047958316281437874, -1.0609570381348021e-05, -0.5309849381446838, -0.04940323531627655, -0.0075997281819581985, -0.005151451099663973, -0.6130139827728271, -0.02918464131653309, -1.6886701583862305, -0.0006910558440722525, -2.7415127754211426, -2.0756609439849854, -0.9987409710884094, -0.04001035541296005, -0.0021686863619834185, -1.771887183189392, -6.985420623095706e-05, -1.5139465176616795e-05, -0.8053365349769592, -0.02190035954117775, -0.049907222390174866, -0.02961432747542858, -2.530841827392578, -1.2678472995758057, -0.20198439061641693, -0.036711156368255615, -0.00019488819816615433, -0.1271006464958191, -0.0014254419365897775, -0.5454534292221069, -0.00011860620725201443, -7.629365427419543e-06, -0.0707845538854599, -0.026561787351965904, -1.6088577508926392, -0.18984581530094147, -0.0021224133670330048, -0.003323628567159176, -0.00016199229867197573, -6.01988795096986e-05, -0.011769852600991726, -5.125986263010418e-06, -3.576278118089249e-07, -5.4834770708112046e-05, -0.18670324981212616, -2.3841855067985307e-07, -6.365573790390044e-05, -0.013344262726604939, -0.036591753363609314, -7.712543447269127e-05, -0.0004003438516519964, -4.0531076592742465e-06, -0.0004742213059216738, -0.0028835644479840994, -0.009245085529983044, -0.003504921682178974, -1.4189834594726562, -1.3503586053848267, -0.20300908386707306, -0.0005558376433327794, -0.0004686211177613586, -4.768370445162873e-07, 0.0, -0.002244574250653386, -0.0046312687918543816, -0.0020817292388528585, -1.2581908702850342, -1.367218255996704, -0.03808628395199776, -3.6954811548639555e-06, -1.0132738680113107e-05, -0.04231886565685272, -0.001278060139156878, -0.044217370450496674, -0.000777776469476521, -0.10768665373325348, -0.0008811643347144127, -0.0010402749758213758, -1.585470999998506e-05, -5.602820692729438e-06, -0.0009005781612358987, -0.0010974343167617917, -0.006457060109823942, -0.01611224003136158, -0.1321554034948349, -6.079655122448457e-06, -4.291525328881107e-06, -0.00112791801802814, -0.24395149946212769, -0.09308566898107529, -0.005363716743886471, -0.0003040566807612777, -0.013831834308803082, -0.015851909294724464, -0.846459150314331, -0.0015729209408164024, -0.30419281125068665, -0.1823824942111969, -0.0002896366349887103, -2.52720492426306e-05, -0.00317308004014194, -0.025917310267686844, -0.000753476400859654, -0.01734481379389763, 0.0, 0.0, -0.3838390111923218, -0.009772435761988163, -3.4845070838928223], "finish_reason": "stop"}], "metrics": {"energy": 639.5704685058598, "energy_per_token": 3.593092519695842, "time": 15.128282, "time_per_token": 0.08499034831460675}}
{"outputs": [{"text": "src_path = pathlib.Path(source_path)\n    if not src_path.is_dir():\n        raise ValueError(\"Source path must be an existing, accessible directory.\")\n    src_dir_name = src_path.name\n\n    dest_path = pathlib.Path(destination_path)\n    if not dest_path.is_dir():\n        dest_path.mkdir()\n\n    copied_files = []\n    for file_path in src_path.glob('*.*'):\n        if file_path.is_file():\n            shutil.copy(file_path, dest_path)\n            copied_files.append(file_path.name)\n\n    return src_dir_name, copied_files", "tokens": ["src", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " src", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " must", " be", " an", " existing", ",", " accessible", " directory", ".", "\"", ")", "\n", "    ", "src", "_", "dir", "_", "name", " =", " src", "_", "path", ".", "name", "\n", "\n", "    ", "dest", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " dest", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "dest", "_", "path", ".", "mk", "dir", "()", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " src", "_", "path", ".", "glob", "('", "*", ".", "*", "')", ":", "\n", "        ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "file", "_", "path", ",", " dest", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", "_", "path", ".", "name", ")", "\n", "\n", "    ", "return", " src", "_", "dir", "_", "name", ",", " copied", "_", "files"], "logprobs": [-2.385692596435547, -0.25269460678100586, -0.7698197960853577, -0.14336198568344116, -0.03560853749513626, -0.00031764229061082006, -4.577531944960356e-05, -0.0057076336815953255, -0.0034362575970590115, -0.005285219289362431, -4.589452510117553e-05, -6.01988795096986e-05, -0.002512038918212056, -0.08498470485210419, -0.13977529108524323, -1.139184594154358, -0.08231621235609055, -0.13538847863674164, -2.622600959512056e-06, 0.0, -0.00394958071410656, -0.7027745842933655, -0.00011491115583339706, -0.007104018237441778, -0.04981524869799614, -0.01812245137989521, -0.004298376385122538, -0.041819725185632706, -0.00924284104257822, -1.2993727978027891e-05, -0.12696658074855804, -1.2470769882202148, -1.3916659355163574, -0.3203052580356598, -1.0553770065307617, -0.10551998019218445, -0.28017547726631165, -0.03310802951455116, -1.4905675649642944, -0.022754287347197533, -0.007158820051699877, -0.568577766418457, -0.0100391935557127, -0.0016202905680984259, -0.0010172913316637278, -1.160477876663208, -2.4230387210845947, -0.010053119622170925, -0.9792343974113464, -0.3012223541736603, -0.0651165321469307, -0.008396679535508156, -0.054893702268600464, -7.390948667307384e-06, -7.152555099310121e-07, -0.0003093002596870065, -0.1187581717967987, -0.04881191626191139, -1.017987608909607, -0.0003466005437076092, -1.8928858041763306, -0.0174972265958786, -0.017732419073581696, -0.006209840998053551, -0.0022760932333767414, -9.667406266089529e-05, -3.611976353568025e-05, -0.0005545270396396518, -0.0008355463505722582, -0.0019436056027188897, -4.291525328881107e-06, 0.0, -0.0023338955361396074, -0.028438158333301544, -0.022982655093073845, -0.17565490305423737, -0.018383830785751343, -0.0030687404796481133, -5.8412379075889476e-06, -8.702239938429557e-06, -0.0006854568491689861, -0.6979213356971741, -1.311301275563892e-06, -0.0009844223968684673, -0.005842157173901796, -0.011166342534124851, -0.0009551253751851618, -0.16510818898677826, -7.70062324590981e-05, -0.0005797850899398327, -0.002449371386319399, -0.0001699779968475923, -4.768360213347478e-06, -0.7958138585090637, -0.02749977447092533, -0.0597219280898571, -0.0006951061659492552, -1.5085221529006958, -0.000623032043222338, -0.013983960263431072, -0.166708305478096, -0.015467447228729725, -0.03971836715936661, -0.009281817823648453, -0.09427785873413086, -0.060526780784130096, -0.3522948920726776, -1.5020657777786255, -0.2507661283016205, -0.003181279404088855, -0.02282443456351757, -1.1920922133867862e-06, -1.2636104656849056e-05, -0.00034671969478949904, -2.3781557083129883, -0.7044656276702881, -0.007565299980342388, -2.7103259563446045, -0.7233959436416626, -0.00044550508027896285, -0.00018451895448379219, -0.04564019292593002, -0.002991964342072606, -0.399480402469635, -0.07197721302509308, -1.0013530300057027e-05, -7.271740287251305e-06, -0.002435457892715931, -0.02407367341220379, -3.2186455882765586e-06, -0.0024635223671793938, -0.03941735252737999, -0.011805313639342785, -0.0009637002367526293, -0.22317521274089813, -1.3947389561508317e-05, -1.597391747054644e-05, -0.000977038755081594, -0.28564807772636414, -0.121223583817482, -2.0861407392658293e-05, 0.0, -0.011847371235489845, -0.004797851666808128, -2.4437606043647975e-05, -2.2053474822314456e-05, -0.07142307609319687, -0.0028990167193114758, -0.001576134585775435, -0.021411923691630363, -5.960462772236497e-07, -5.364403477869928e-06, -0.00016950124700088054, -0.0002205128694185987, -0.00017450717859901488, -0.0005725175142288208, -0.004687392618507147, -6.079655122448457e-06, -4.529942543740617e-06, -0.00311782187782228, -0.002036522841081023, -0.00013660451804753393, -0.00417053047567606, -0.2703627347946167, -0.0006703275139443576, -0.0220139492303133, -0.08840631693601608, -1.311301275563892e-06, -0.0017080017132684588, -8.34461570775602e-06, -7.152555099310121e-07, -0.0007641970878466964, -0.003540677484124899, -5.960462772236497e-07, -1.5497195136049413e-06], "finish_reason": "stop"}], "metrics": {"energy": 624.8607574195867, "energy_per_token": 3.5706328995404952, "time": 15.140415, "time_per_token": 0.08651665714285715}}
{"outputs": [{"text": "source_path_obj = pathlib.Path(source_path)\n    if not source_path_obj.exists():\n        raise ValueError(f\"The specified source path '{source_path}' does not exist.\")\n\n    if not source_path_obj.is_dir():\n        raise ValueError(f\"The specified source path '{source_path}' is not a directory.\")\n\n    destination_path_obj = pathlib.Path(destination_path)\n    if not destination_path_obj.exists():\n        destination_path_obj.mkdir(parents=True, exist_ok=True)\n\n    file_names = []\n\n    for item in source_path_obj.iterdir():\n        if item.is_file():\n            shutil.copy2(str(item), str(destination_path))\n            file_names.append(item.name)\n\n    return source_path_obj.name, file_names", "tokens": ["source", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", "_", "obj", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " specified", " source", " path", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " source", "_", "path", "_", "obj", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " specified", " source", " path", " '", "{", "source", "_", "path", "}'", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "destination", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", "_", "obj", ".", "exists", "():", "\n", "        ", "destination", "_", "path", "_", "obj", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "file", "_", "names", " =", " []", "\n", "\n", "    ", "for", " item", " in", " source", "_", "path", "_", "obj", ".", "iter", "dir", "():", "\n", "        ", "if", " item", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "str", "(", "item", ")", ",", " str", "(", "destination", "_", "path", "))", "\n", "            ", "file", "_", "names", ".", "append", "(", "item", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "path", "_", "obj", ".", "name", ",", " file", "_", "names"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -1.6984827518463135, -0.6830689311027527, -0.018839705735445023, -0.008723601698875427, -0.00015758226800244302, -5.352353764465079e-05, -0.004647762048989534, -0.003318044124171138, -0.012271027080714703, -4.792098479811102e-05, -4.6491513785440475e-06, -0.003687845077365637, -0.06875549256801605, -0.17377392947673798, -0.8495931625366211, -0.10015837848186493, -0.05930892005562782, -9.059865078597795e-06, -2.861018856492592e-06, -0.001981677720323205, -2.4676019165781327e-05, -0.001886375597678125, -0.34347689151763916, -0.42909160256385803, -0.01041418593376875, -0.0028032076079398394, -0.036568768322467804, -0.024966906756162643, -3.6954811548639555e-06, -0.08759662508964539, -0.23034563660621643, -0.2582111656665802, -1.1602301597595215, -1.1702806949615479, -0.5162583589553833, -0.7241495251655579, -1.6015598773956299, -0.001069212332367897, -0.035159554332494736, -0.0007061848300509155, -1.9073304429184645e-05, -0.05267932638525963, -0.03376506268978119, -0.000626367807853967, -0.003241524798795581, -0.1820407211780548, -0.01757594384253025, -0.0005433275364339352, -0.0012363893911242485, -1.4396891593933105, -0.00021324267436284572, -0.11085309833288193, -0.021852541714906693, -0.006197046022862196, -3.099436753473128e-06, -3.576278118089249e-07, -0.0004127365828026086, -3.814689989667386e-06, -4.2914423829643056e-05, -0.0006816447712481022, -8.106198947643861e-06, -0.003830122062936425, -0.001675869687460363, -0.0018922057934105396, -0.00023421882360707968, -0.003185913898050785, -0.001988697098568082, -1.1920928244535389e-07, -0.0003668589051812887, -0.03278563916683197, -0.0005820487276650965, -0.004753005225211382, -0.012264433316886425, -0.06938696652650833, -0.009118342772126198, -0.004175397567451, -6.365573790390044e-05, -0.00031585473334416747, -2.95634672511369e-05, -1.1920928244535389e-07, -0.0009037939016707242, -0.014082700945436954, -0.0005965837044641376, -0.0026151288766413927, -0.010177265852689743, -0.013444477692246437, -0.0090824319049716, -0.00016032364510465413, -0.00040570611599832773, -0.016687098890542984, -0.0005933669744990766, -0.7648018598556519, -0.005066294688731432, -0.008445382118225098, -0.01783442124724388, -0.002984357764944434, -0.0005544078885577619, -0.0010277710389345884, -2.3007127310847864e-05, -2.8013790142722428e-05, -0.00024232311989180744, -0.0005785936955362558, -0.0012492479290813208, -2.861018856492592e-06, -1.1920928244535389e-07, -0.0008924792055040598, -0.013735185377299786, -0.1931905299425125, -0.17625345289707184, -0.027790483087301254, -0.0008779485360719264, -4.172316494077677e-06, -2.3841855067985307e-07, -0.00013052565918769687, -1.7165990357170813e-05, -0.00022218143567442894, -0.0819065049290657, -0.0025996719487011433, -0.001580062322318554, -0.0009968079393729568, -0.12126381695270538, -2.539125671319198e-05, -0.000200609109015204, -0.0005583396414294839, -4.076874756719917e-05, -0.0016471878625452518, -0.0002836778585333377, -1.6689286894688848e-06, -0.42657652497291565, -0.026937946677207947, -0.001794158248230815, -0.0042641907930374146, -0.5910297632217407, -0.0001565095444675535, -3.576272320060525e-06, -7.152555099310121e-07, -3.194758028257638e-05, -0.011785522103309631, -0.0002698534226510674, -0.015879716724157333, -0.19995617866516113, -0.006759752053767443, -2.3239731788635254, -0.02785506099462509, -0.8354159593582153, -0.2199041098356247, -0.5425174236297607, -0.018543807789683342, -2.0922656059265137, -0.0002225389762315899, -0.13683879375457764, -1.842597484588623, -0.020866161212325096, -0.08831988275051117, -2.50339189733495e-06, -2.3841830625315197e-06, -0.00013565097469836473, -9.417489309271332e-06, -5.054346183896996e-05, -0.029978234320878983, -9.536738616588991e-07, -9.810443589231e-05, -0.006064229179173708, -0.010398495011031628, -0.011667937971651554, -0.035710688680410385, -0.00012981049076188356, -0.0015757775399833918, -2.861018856492592e-06, -0.012073414400219917, -0.024862492457032204, -0.006553349085152149, -0.0013443727511912584, -1.2889305353164673, -5.364403477869928e-06, -1.6689160474925302e-05, -0.0012006701435893774, -0.8703135848045349, -8.630380034446716e-05, -1.9542990922927856, -3.0874729418428615e-05, -0.005120733752846718, -0.03002520278096199, -0.000161038784426637, -0.17725630104541779, -5.352353764465079e-05, -0.0008754473528824747, -7.748303323751315e-05, -2.2411095415009186e-05, -2.1591732501983643, -0.02903897874057293, -0.007358826231211424, -0.01737656444311142, -3.111314072157256e-05, -0.002688842825591564, -0.0004903068183921278, -0.00023445718397852033, -0.0008224442135542631, -0.03628726676106453, -0.00209469604305923, -0.006820019334554672, -0.00029845553217455745, -0.0046614077873528, -0.04782121628522873, -0.0016167201101779938, -0.04801086708903313, -0.09644616395235062, -8.4638240878121e-06, -2.682172998902388e-05, -0.033652111887931824, -4.577531944960356e-05, -0.0016944350209087133, -0.029485046863555908, -0.0008275659638457, -0.00955425575375557, -9.536738616588991e-07, -1.9073468138230965e-06], "finish_reason": "stop"}], "metrics": {"energy": 772.2404975595472, "energy_per_token": 3.5101840798161237, "time": 18.899288, "time_per_token": 0.08590585454545453}}
{"outputs": [{"text": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist\")\n    if os.path.isfile(source_path):\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    if not os.path.exists(destination_path):\n        os.makedirs(destination_path)\n\n    source_path_obj = pathlib.Path(source_path)\n    destination_path_obj = pathlib.Path(destination_path)\n\n    file_paths = []\n    for entry in os.listdir(source_path_obj):\n        if os.path.isfile(source_path_obj / entry):\n            file_paths.append(entry)\n\n    for file_path in file_paths:\n        shutil.copy(source_path_obj / file_path, destination_path_obj)\n\n    return source_path_obj.name, file_paths", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " os", ".", "path", ".", "is", "file", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "destination", "_", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "source", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "file", "_", "paths", " =", " []", "\n", "    ", "for", " entry", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "_", "obj", "):", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "source", "_", "path", "_", "obj", " /", " entry", "):", "\n", "            ", "file", "_", "paths", ".", "append", "(", "entry", ")", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "source", "_", "path", "_", "obj", " /", " file", "_", "path", ",", " destination", "_", "path", "_", "obj", ")", "\n", "\n", "    ", "return", " source", "_", "path", "_", "obj", ".", "name", ",", " file", "_", "paths", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -0.6570690274238586, -2.0265373677830212e-05, -0.0057183015160262585, -9.65590606938349e-06, -0.5451117753982544, -0.0006239851354621351, -0.010636778548359871, -4.470248313737102e-05, -1.2636104656849056e-05, -0.2855955958366394, -0.013670865446329117, -0.003922983072698116, -0.04203280806541443, -0.021146666258573532, -1.1920922133867862e-06, -0.07417875528335571, -0.4167369604110718, -0.14810453355312347, -2.636043071746826, -0.005333599168807268, -0.000256982195423916, -1.645074735279195e-05, -0.1310906708240509, -0.18998660147190094, -0.0018274764297530055, -0.010717451572418213, -0.8243148326873779, -0.0012435331009328365, -0.0024716088082641363, -0.31096333265304565, -0.20157267153263092, -2.741736650466919, -1.1920858014491387e-05, -0.0021378775127232075, -1.0013530300057027e-05, -0.08203412592411041, -0.1191878691315651, -0.0004552758182398975, -0.0021365690045058727, -3.85038583772257e-05, -3.814689989667386e-06, -0.023547176271677017, -0.003047704929485917, -0.0008874768391251564, -0.011990965344011784, -0.0032643387094140053, -1.5497195136049413e-06, -0.0010563514661043882, -0.03235408291220665, -0.003078129142522812, -0.024071112275123596, -0.0013185387942939997, -1.2516897186287679e-05, -9.536738616588991e-07, -0.002734733046963811, -0.0819890946149826, -1.2457094192504883, -0.011347987689077854, -0.03164057061076164, -0.06115427613258362, -0.00016068121476564556, -0.001122797722928226, -0.48773348331451416, -0.00044490929576568305, -2.0987026691436768, -0.07215645909309387, -0.03852478042244911, -3.933898824470816e-06, -0.058206211775541306, -5.125986263010418e-06, -0.08569913357496262, -0.00023982033599168062, -0.006236496847122908, -5.221230458118953e-05, -1.0728830375228426e-06, -0.01204703189432621, -0.0025688763707876205, -0.0017132379580289125, -0.2056385576725006, -1.7881233361549675e-05, -0.4386473000049591, -4.410734163684538e-06, -4.005352093372494e-05, -0.00019047829846385866, -0.007620786316692829, -3.3378044463461265e-05, -2.0265558760002023e-06, -0.0614742636680603, -0.016706442460417747, -0.14651647210121155, -0.00063744728686288, -1.6918883323669434, -0.06116122752428055, -1.1381301879882812, -0.7117176651954651, -1.1828032732009888, -0.012640710920095444, -0.006942673120647669, -3.361645576660521e-05, -3.6954195820726454e-05, -0.03164149448275566, -0.0007229813490994275, -0.003538658143952489, -6.198863957251888e-06, 0.0, -0.0011520899133756757, -0.028600241988897324, -0.1291506141424179, -1.1433597803115845, -0.0005276002921164036, -0.006255333311855793, -0.004337189719080925, -0.002784187439829111, -0.0003364712174516171, -0.0004027270770166069, -1.9192511899746023e-05, -1.8000440832111053e-05, -0.00016842853801790625, -0.00012468514614738524, -0.0033551135566085577, -1.168244216387393e-05, -1.0728830375228426e-06, -0.0005803807871416211, -0.0023105847649276257, -0.4328420162200928, -0.0001438752660760656, -1.8232754468917847, -0.03645969554781914, -2.4693541526794434, -0.20557546615600586, -1.7480430603027344, -0.01865742728114128, -0.15660646557807922, -0.21528537571430206, -3.0249385833740234, -0.027863524854183197, -1.0636286735534668, -1.2874520507466514e-05, -0.7723862528800964, 0.0, -0.0007327494095079601, -0.017480943351984024, -3.6238969187252223e-05, -3.8265450712060556e-05, -1.2747063636779785, -0.00019774865359067917, -0.008161172270774841, -0.013794798403978348, -0.004404012113809586, -0.7646799087524414, -0.0537654384970665, -2.0265558760002023e-06, -4.7801782784517854e-05, -3.576278118089249e-07, -0.0007176207727752626, -0.03949802741408348, -0.0037930700927972794, -0.7391629219055176, -3.242440288886428e-05, -2.992108420585282e-05, -0.011435792781412601, -4.9828242481453344e-05, -0.06309472769498825, -0.0003051292151212692, -0.01437439862638712, -0.035015106201171875, -0.0012504386249929667, -0.33899304270744324, -0.0045806001871824265, -0.1503114551305771, -0.002371120499446988, -0.0004884004010818899, -0.06558386236429214, -0.5898286700248718, -0.0020038066431879997, -0.01484279241412878, -1.134393334388733, -0.023772334679961205, -0.8585414290428162, -0.2524898648262024, -0.2677055597305298, -0.11771680414676666, -0.01713613234460354, -0.0025398635771125555, -1.7881377516459906e-06, -2.9802276912960224e-06, -0.0010004997020587325, -0.0006193388253450394, -0.003296776209026575, -0.36138367652893066, -1.4305012882687151e-05, -2.3841574147809297e-05, -0.002832807367667556, -0.3921319842338562, -0.17188599705696106, -5.030505417380482e-05, -4.0649541915627196e-05, -0.025055035948753357, -4.7444173105759546e-05, -0.010898235253989697, -0.004152960609644651, -1.6927575416048057e-05, -2.8490614567999728e-05, -0.0012469858629629016, -0.01511595118790865, -3.1709168979432434e-05, -8.821448318485636e-06, -0.010200157761573792, -2.9682672902708873e-05, -1.5671792030334473, -0.003381013870239258, -0.07317188382148743, -0.001401276676915586, -0.1549525409936905, -0.515527606010437, -8.940656698541716e-06, -6.925819616299123e-05, -0.02515106275677681, -2.8729025871143676e-05, -0.003766111796721816, -0.06073131412267685, -0.0013140147784724832, -0.12358780950307846, -3.2186455882765586e-06, -1.2874520507466514e-05, -1.351387619972229, -1.311301275563892e-06, -1.6689286894688848e-06, -2.145764938177308e-06, -4.434487345861271e-05, -0.26756781339645386], "finish_reason": "stop"}], "metrics": {"energy": 826.9739703874587, "energy_per_token": 3.5492445081006814, "time": 19.980972, "time_per_token": 0.08575524463519314}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"Source directory {source_path} does not exist or is not a directory.\")\n\n    copied_files = []\n\n    # List files in the source directory without descending into subdirectories\n    file_list = pathlib.Path(source_path).glob('*')\n\n    # Copy files to the destination directory\n    for file in file_list:\n        if file.is_file():\n            shutil.copy2(file, destination_path)\n            copied_files.append(file.name)\n\n    return source_path.split(\"/\")[-1], copied_files", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " directory", " {", "source", "_", "path", "}", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "\n", "    ", "#", " List", " files", " in", " the", " source", " directory", " without", " descending", " into", " sub", "direct", "ories", "\n", "    ", "file", "_", "list", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "glob", "('", "*", "')", "\n", "\n", "    ", "#", " Copy", " files", " to", " the", " destination", " directory", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "file", ",", " destination", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "split", "(", "\"", "/\"", ")", "[-", "1", "]", ",", " copied", "_", "files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -1.1850459575653076, -0.0038569599855691195, -7.211902266135439e-05, -0.0029269494116306305, -0.0029762755148112774, -0.008395261131227016, -4.7205765440594405e-05, -9.059495641849935e-05, -0.0009297577198594809, -0.00041607304592616856, -0.25960788130760193, -4.911301948595792e-05, -0.010970515199005604, -0.015120413154363632, -0.0255056731402874, -0.004533845465630293, -0.042915407568216324, -0.013826543465256691, -7.152555099310121e-07, -0.15962481498718262, -0.46341001987457275, -0.3844926953315735, -1.8424901962280273, -1.0007057189941406, -1.2603371143341064, -0.006970493122935295, -6.151010165922344e-05, -2.5510462364763953e-05, -0.06808029860258102, -0.11906649172306061, -0.0005858612130396068, -0.002505142241716385, -0.09221790730953217, -0.009274022653698921, -0.0019695423543453217, -0.033264633268117905, -0.023640668019652367, -0.39947131276130676, -0.005684757139533758, -0.001347825163975358, -0.00046266341814771295, -0.2992418706417084, -0.0004275123355910182, -3.443145751953125, -0.000596107158344239, -0.008843895979225636, -0.13969069719314575, -0.0141921266913414, -0.02553844265639782, -0.018571892753243446, -1.3851698637008667, -0.0002752163854893297, -2.123899459838867, -2.9348278045654297, -0.5114509463310242, -0.2312360256910324, -0.2804032564163208, -0.19025354087352753, -0.029507039114832878, -0.15167412161827087, -0.009665830992162228, -0.0029851896688342094, -0.0026203603483736515, -0.008939245715737343, -0.00024041623692028224, -0.0775042176246643, -0.0018287854036316276, -2.1808817386627197, -0.0517190545797348, -0.7288301587104797, -0.003177595790475607, -2.5081639289855957, -0.00019238528329879045, -3.123234637314454e-05, -0.0006367324967868626, -0.0005354639724828303, -0.0006718761869706213, -1.4662635294371285e-05, -1.07287787614041e-05, -0.0005040090763941407, -0.019282745197415352, -0.26694774627685547, -0.36396998167037964, -0.03407446667551994, -0.19064019620418549, -0.035185448825359344, -0.23753628134727478, -0.00030322244856506586, -0.3837455213069916, -1.6788991689682007, -0.515247106552124, -0.07520760595798492, -0.2493562400341034, -0.002463284647092223, -0.03653911501169205, -0.1259799748659134, -0.0024465173482894897, -0.12870264053344727, -0.11603479832410812, -0.16834867000579834, -0.0060956282541155815, -1.1086402082582936e-05, -4.410734163684538e-06, -6.508615479106084e-05, -0.0006478118011727929, -0.003859572345390916, -0.10196933895349503, -0.03525185212492943, -0.00014399446081370115, -0.001191859133541584, -2.145764938177308e-06, -0.0027977393474429846, -0.009177995845675468, -0.024480897933244705, -0.0014365125680342317, -0.4726237952709198, -3.576272320060525e-06, -1.2993727978027891e-05, -0.00040570611599832773, -0.9219673871994019, -4.434487345861271e-05, -0.09240790456533432, -0.01339025516062975, -0.026477621868252754, -4.827859811484814e-05, -8.22540732769994e-06, -0.005078392568975687, -0.03604110702872276, -0.006133187096565962, -0.02665848098695278, -3.576278118089249e-07, -2.264974000354414e-06, -1.6689286894688848e-06, -5.829164365422912e-05, -0.0001227780303452164, -0.00035637227119877934, -0.005622169468551874, -0.005108636803925037, -0.006920653395354748, -0.00014518637908622622, -0.036578308790922165, -0.02906074933707714, -0.0036577957216650248, -0.5675404071807861, -1.3887100219726562, -5.6503606174374e-05, -0.0001438752660760656, -0.1472073197364807, -0.35266944766044617, -1.4373542070388794, -0.1644057333469391, -0.009888118132948875, -0.022676095366477966, -0.02222592942416668, -0.0013703251024708152, -0.0038785722572356462, -0.005404622759670019, -0.005925114266574383, -1.1920928244535389e-07, -2.3841855067985307e-07, -2.1467366218566895, -1.311301275563892e-06, -1.9073468138230965e-06, -2.3841830625315197e-06, -2.2411095415009186e-05, -0.28428468108177185], "finish_reason": "stop"}], "metrics": {"energy": 615.0101569767003, "energy_per_token": 3.66077474390893, "time": 14.3114195, "time_per_token": 0.08518702083333334}}
{"outputs": [{"text": "src = pathlib.Path(source_path)\n\n    if not src.exists():\n        raise ValueError(\"Specified source path does not exist.\")\n    if not src.is_dir():\n        raise ValueError(\"Specified source path is not a directory.\")\n\n    dst = pathlib.Path(destination_path)\n    if not dst.exists():\n        dst.mkdir()\n\n    copied_files = []\n    for file in src.iterdir():\n        if file.is_file():\n            shutil.copy(file, dst)\n            copied_files.append(file.name)\n\n    return src.name, copied_files", "tokens": ["src", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "\n", "    ", "if", " not", " src", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " source", " path", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "if", " not", " src", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " source", " path", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "dst", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " dst", ".", "exists", "():", "\n", "        ", "dst", ".", "mk", "dir", "()", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " src", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "file", ",", " dst", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "return", " src", ".", "name", ",", " copied", "_", "files", "\n", "\n", "def"], "logprobs": [-2.385692596435547, -1.551743984222412, -0.04868021234869957, -0.0003407612966839224, -0.00010680581908673048, -0.010896819643676281, -0.002918035024777055, -0.004851949401199818, -6.41325386823155e-05, -6.389413465512916e-05, -0.0034526519011706114, -0.06321492046117783, -2.2846529483795166, -0.00032240914879366755, -0.2301725447177887, -0.0899328663945198, -0.0698155090212822, -0.0024434253573417664, -0.6189442873001099, -0.49871987104415894, -0.009290557354688644, -0.0036863009445369244, -0.04742691293358803, -0.026395076885819435, -8.22540732769994e-06, -0.12073971331119537, -1.3763550519943237, -2.9552526473999023, -0.020839542150497437, -0.37322866916656494, -0.7881901264190674, -0.1487218588590622, -0.001529596047475934, -0.007806033827364445, -0.6980985403060913, -0.03783895820379257, -0.0020738777238875628, -0.001389015233144164, -1.0685231685638428, -0.28198039531707764, -0.011394543573260307, -0.007160476874560118, -5.543078441405669e-05, -0.00038532938924618065, -3.671578815556131e-05, -0.004265852738171816, -0.0029258797876536846, -0.0026833738666027784, -0.00023052419419400394, -0.002650678623467684, -0.001829261309467256, -9.536738616588991e-07, -0.0015919642755761743, -0.008214970119297504, -0.07286171615123749, -0.0005565524916164577, -0.0462597981095314, -0.046558529138565063, -0.056899260729551315, -0.0032815674785524607, -0.007975517772138119, -0.009575036354362965, -0.023446686565876007, -0.0034197440836578608, -0.0001679517881711945, -0.0008181562297977507, -0.09171609580516815, -0.0005521441926248372, -1.043248176574707, -0.010679238475859165, -0.003633328014984727, -2.6702524337451905e-05, -7.295342220459133e-05, -0.002609897404909134, -0.0012249593855813146, -0.0019506252137944102, -1.3351351299206726e-05, -5.960462772236497e-07, -0.00213585514575243, -0.02624029852449894, -0.3937566876411438, -0.2965872287750244, -0.04987592250108719, -0.002411673776805401, -0.000929519534111023, -0.10153388977050781, -0.003751385258510709, -0.004123044200241566, -0.0013755630934610963, -0.10831081867218018, -0.0020772088319063187, -0.0007172634359449148, -8.34461570775602e-06, -0.5176708698272705, -0.02851288951933384, -0.4203302562236786, -0.0004651656490750611, -1.5046318769454956, -0.0019042231142520905, -0.0981065109372139, -0.12469169497489929, -0.028954211622476578, -0.052540555596351624, -0.011415168642997742, -0.26185718178749084, -0.08757063001394272, -0.3565680682659149, -0.19471104443073273, -0.10696334391832352, -0.0002051381452474743, -0.11491259932518005, -1.311301275563892e-06, -0.0002300474588992074, -0.013786332681775093, -0.0030662447679787874, -0.0605497844517231, -0.03355563059449196, -0.00018189683032687753, -0.0026144154835492373, -1.3232143828645349e-05, -0.007272438146173954, -0.024158040061593056, -0.006672009360045195, -0.00103265349753201, -0.3597034215927124, -2.5510462364763953e-05, -2.8729025871143676e-05, -0.0006990373367443681, -0.3198302388191223, -0.16462457180023193, -0.04532181844115257, -0.015125814825296402, -0.14912563562393188, -0.004610266070812941, -0.002313439268618822, -0.015488340519368649, -1.5497195136049413e-06, -1.5020257706055418e-05, -9.035655966727063e-05, -0.0003688847064040601, -0.0001934579631779343, -0.0007107115816324949, -0.0066027333959937096, -0.009503835812211037, -0.01215126272290945, -0.00020311199477873743, -0.009560986422002316, -0.16900436580181122, -0.0008837846689857543, -0.04741542786359787, -0.19114655256271362, -0.0038747722283005714, -0.037215836346149445, -0.0006765222642570734, -0.002379683079198003, -9.536738616588991e-07, -2.3841855067985307e-07, -0.29096731543540955, -0.010115076787769794, -1.5662906169891357], "finish_reason": "stop"}], "metrics": {"energy": 574.7383103580476, "energy_per_token": 3.5921144397377973, "time": 13.679346, "time_per_token": 0.08549591250000001}}
{"outputs": [{"text": "src_dir = pathlib.Path(source_path)\n    dest_dir = pathlib.Path(destination_path)\n    if not src_dir.is_dir():\n        raise ValueError(f\"source_path '{source_path}' does not exist or is not a directory.\")\n    if not dest_dir.exists():\n        dest_dir.mkdir(parents=True)\n    files_to_copy = [file.name for file in src_dir.iterdir() if file.is_file()]\n    copied_files = []\n    for file in files_to_copy:\n        source = src_dir / file\n        destination = dest_dir / file\n        shutil.copy(source, destination)\n        copied_files.append(file)\n    return src_dir.name, copied_files", "tokens": ["src", "_", "dir", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "dest", "_", "dir", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " src", "_", "dir", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "source", "_", "path", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "    ", "if", " not", " dest", "_", "dir", ".", "exists", "():", "\n", "        ", "dest", "_", "dir", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "    ", "files", "_", "to", "_", "copy", " =", " [", "file", ".", "name", " for", " file", " in", " src", "_", "dir", ".", "iter", "dir", "()", " if", " file", ".", "is", "_", "file", "()", "]", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " files", "_", "to", "_", "copy", ":", "\n", "        ", "source", " =", " src", "_", "dir", " /", " file", "\n", "        ", "destination", " =", " dest", "_", "dir", " /", " file", "\n", "        ", "sh", "util", ".", "copy", "(", "source", ",", " destination", ")", "\n", "        ", "cop", "ied", "_", "files", ".", "append", "(", "file", ")", "\n", "    ", "return", " src", "_", "dir", ".", "name", ",", " copied", "_", "files"], "logprobs": [-2.385692596435547, -0.25269460678100586, -0.924631655216217, -0.26027625799179077, -0.054521143436431885, -0.00019751029321923852, -5.125868119648658e-05, -0.005470899399369955, -0.0034602549858391285, -0.0037518602330237627, -4.124556289752945e-05, -6.294052582234144e-05, -0.002966885920614004, -0.07502613961696625, -0.1469641476869583, -2.20928955078125, -0.02260197512805462, -0.022225696593523026, -0.0016296928515657783, -0.002092316746711731, -9.417489309271332e-06, -1.4424220353248529e-05, -0.0016158869257196784, -0.0002602000313345343, -0.0008137490367516875, -3.933898824470816e-06, -1.1920928244535389e-07, -0.0007383481133729219, -0.023126523941755295, -0.9318395853042603, -0.5283430218696594, -0.09684129804372787, -0.06487077474594116, -3.4570634852570947e-06, -4.768370445162873e-07, -0.0028377999551594257, -0.36858054995536804, -6.651657167822123e-05, -0.0053877863101661205, -0.027367785573005676, -0.014691853895783424, -0.004201276693493128, -0.03491610661149025, -0.009720138274133205, -7.510157047363464e-06, -0.10221066325902939, -0.3723330497741699, -0.189893439412117, -2.9729695320129395, -0.03906133770942688, -0.0046514407731592655, -1.1724838018417358, -0.0008499585674144328, -0.17068397998809814, -0.00028951745480298996, -2.5510462364763953e-05, -0.01176631823182106, -0.5746800303459167, -0.0012667496921494603, -0.014578018337488174, -0.017935708165168762, -0.012425392866134644, -0.0014221088495105505, -0.005425253417342901, -0.012374999932944775, -1.2696290016174316, -0.009370513260364532, -0.0011082704877480865, -0.0011681645410135388, -0.3575516939163208, -0.5969064831733704, -0.030376585200428963, -0.021026676520705223, -4.017272294731811e-05, -5.960446742392378e-06, -0.000993830617517233, -0.5829912424087524, -0.013584432192146778, -0.005758600775152445, -0.001260439632460475, -0.09341710060834885, -5.411955135059543e-05, -0.0002903516869992018, -0.0038104087579995394, -0.0003228858404327184, -4.0531076592742465e-06, -0.3637920916080475, -0.041139595210552216, -0.004323658533394337, -0.005133423954248428, -0.7902998328208923, -0.03547726944088936, -0.21307708323001862, -1.5746530294418335, -0.3405247628688812, -1.1516714096069336, -0.0002829628065228462, -0.07439800351858139, -0.006858143024146557, -0.17693135142326355, -0.908018946647644, -0.5756145119667053, -0.0043928553350269794, -0.0019403931219130754, -0.00019131260341964662, -0.0002547178009990603, -0.020899901166558266, -1.2278481335670222e-05, -1.1920928244535389e-07, -3.9219088648678735e-05, -0.11538718640804291, -2.9802276912960224e-06, -2.2291887944447808e-05, -0.02597794309258461, -0.0048182569444179535, -4.172238186583854e-05, -0.0010202685371041298, -7.033323527139146e-06, -0.0002348147245356813, -0.004507618956267834, -0.015611814334988594, -0.005763815715909004, -0.02390351891517639, -1.552058458328247, -0.00043108707177452743, -0.014467577449977398, -0.01828153431415558, -0.007740858010947704, -0.05157437548041344, -0.002172373700886965, -0.014073532074689865, -0.025087587535381317, -0.24777661263942719, -0.22676362097263336, -0.012354394420981407, -5.018585216021165e-05, -3.576272320060525e-06, -8.344646857949556e-07, -5.125986263010418e-06, -0.00031716562807559967, -0.0005346299149096012, -0.0008463853155262768, -1.6782922744750977, -1.1732820272445679, -0.11638609319925308, -4.410734163684538e-06, -3.4570634852570947e-06, -0.06010827049612999, -0.0035145438741892576, -0.005949170328676701, -0.00021073981770314276, -0.1329033076763153, -0.0007503792876377702, -0.00735350139439106, -3.4570634852570947e-06, -3.576278118089249e-07, -0.001682177186012268, -0.0035038527566939592, -0.004281046334654093, -0.002199375070631504, -0.16934438049793243, -1.9073468138230965e-06, -6.198863957251888e-06, -0.0009453595266677439, -0.23474346101284027, -0.08440299332141876, -0.004228579346090555, -0.002661735750734806, -0.014600105583667755, -0.0024318902287632227, -0.004352738615125418, -0.0057900091633200645, -7.152555099310121e-07, -9.298280929215252e-06, -1.823885577323381e-05, -0.00021717573690693825, -0.0001971527235582471, -0.0005482124397531152, -0.033540990203619, -0.007952929474413395, -0.0008155357209034264, -0.03780578449368477, -0.0615224689245224, -0.08383640646934509, -1.6331539882230572e-05, -3.099436753473128e-06, -0.0032670714426785707, -0.03474859520792961, -0.0007114263135008514, -0.00364841241389513, -8.344646857949556e-07, -4.768370445162873e-07], "finish_reason": "stop"}], "metrics": {"energy": 725.9335877056121, "energy_per_token": 3.7809041026333965, "time": 16.41587, "time_per_token": 0.08549932291666668}}
{"outputs": [{"text": "# Check if source_path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"The specified source_path does not exist or is not a directory: {source_path}\")\n\n    # Check if destination_path exists and is a directory. Create it if it doesn't exist.\n    if not pathlib.Path(destination_path).is_dir():\n        pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # Get the source directory name\n    source_dir_name = pathlib.Path(source_path).name\n\n    # List all files in the source directory without descending into subdirectories\n    file_list = []\n    for file in pathlib.Path(source_path).iterdir():\n        if file.is_file():\n            file_list.append(file.name)\n\n    # Copy files to the destination directory\n    for filename in file_list:\n        shutil.copy2(pathlib.Path(source_path, filename), pathlib", "tokens": ["#", " Check", " if", " source", "_", "path", " exists", " and", " is", " a", " directory", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " specified", " source", "_", "path", " does", " not", " exist", " or", " is", " not", " a", " directory", ":", " {", "source", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Check", " if", " destination", "_", "path", " exists", " and", " is", " a", " directory", ".", " Create", " it", " if", " it", " doesn", "'", "t", " exist", ".", "\n", "    ", "if", " not", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "path", "lib", ".", "Path", "(", "destination", "_", "path", ")", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Get", " the", " source", " directory", " name", "\n", "    ", "source", "_", "dir", "_", "name", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "name", "\n", "\n", "    ", "#", " List", " all", " files", " in", " the", " source", " directory", " without", " descending", " into", " sub", "direct", "ories", "\n", "    ", "file", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "file", "_", "list", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "#", " Copy", " files", " to", " the", " destination", " directory", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "sh", "util", ".", "copy", "2", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ",", " filename", ")", ",", " path", "lib"], "logprobs": [-1.769902229309082, -1.3020879030227661, -0.5344520807266235, -0.7182570695877075, -0.2528841197490692, -0.0022435036953538656, -0.6010782122612, -0.050023116171360016, -0.012530644424259663, -0.02092546783387661, -0.01855749823153019, -0.15610842406749725, -0.0023154611699283123, -0.3940383195877075, -0.013546564616262913, -0.809283971786499, -0.0021990183740854263, -8.165503095369786e-05, -0.0012849654303863645, -0.0006736631621606648, -0.001142087858170271, -3.1709168979432434e-05, -2.0503786799963564e-05, -0.0006000387365929782, -8.284702198579907e-05, -0.26840853691101074, -1.4662635294371285e-05, -0.0012228161795064807, -0.005410077050328255, -0.005562896840274334, -0.002063052263110876, -0.028875576332211494, -0.00988068152219057, -1.4305104514278355e-06, -0.039116133004426956, -0.703326940536499, -0.05675036832690239, -2.292367458343506, -0.7477751970291138, -0.38768938183784485, -1.15533447265625, -0.0006834316882304847, -1.348609209060669, -0.0009373800130560994, -0.005926535930484533, -0.026339111849665642, -0.0035306992940604687, -0.000713213172275573, -0.0016430224059149623, -0.0045656487345695496, -0.09317526966333389, -0.04709477350115776, -0.004014291800558567, -3.2782016205601394e-05, -2.3841855067985307e-07, -0.014489666558802128, -0.0003251500893384218, -0.0002919009421020746, -0.048655916005373, -0.0008418591460213065, -0.16922339797019958, -2.457026720046997, -0.027106191962957382, -0.20117832720279694, -0.05522404983639717, -0.0011710221879184246, -0.19510842859745026, -1.4033710956573486, -0.7143926024436951, -0.09358321130275726, -0.008937119506299496, -1.8107454776763916, -2.278201103210449, -0.2867923676967621, -0.027562284842133522, -0.37085604667663574, -0.6237627267837524, -0.0012978235026821494, -3.290122185717337e-05, -0.2446974217891693, -0.09961866587400436, -0.005127256736159325, -0.0011313711293041706, -0.35216882824897766, -0.022869760170578957, -0.010065747424960136, -0.0005526207387447357, -1.2159273865108844e-05, -0.00021562635083682835, -0.00036745471879839897, -0.0005882440018467605, -7.271740287251305e-06, -2.3841855067985307e-07, -8.272782724816352e-05, -1.823885577323381e-05, -0.06341062486171722, -5.006777428206988e-06, -0.00014125302550382912, -0.00033909291960299015, -0.001258296542800963, -0.0013979434734210372, -0.12235170602798462, -0.0008709213580004871, -8.4638240878121e-06, -0.00010024998482549563, -0.05224134027957916, -0.0007514513563364744, -1.2516897186287679e-05, -7.152555099310121e-07, -8.010543388081715e-05, -0.00018714107864070684, -0.00016127715934999287, -2.145764938177308e-06, -0.18560399115085602, -0.03587838262319565, -0.001321634161286056, -0.002081967191770673, -0.08277897536754608, -0.00010859376925509423, -2.3841830625315197e-06, -1.0728830375228426e-06, -4.434487345861271e-05, -0.01165049895644188, -0.00026055757189169526, -0.016306359320878983, -0.04932732507586479, -0.0019622850231826305, -0.11014467477798462, -0.9875984787940979, -0.16193048655986786, -1.7146835327148438, -0.0633673295378685, -0.10584013164043427, -0.6060030460357666, -0.0004761277523357421, -0.3611967861652374, -0.0029022260569036007, -0.5172000527381897, -0.18212567269802094, -0.01324003841727972, -0.0013363964390009642, -0.08771783858537674, -5.602679812000133e-05, -3.4570634852570947e-06, -0.012699917890131474, -0.0002330270071979612, -0.0008395960903726518, -3.4570634852570947e-06, -2.50339189733495e-06, -0.0010536124464124441, -0.004435107111930847, -0.24678228795528412, -0.007452188525348902, -0.01952090859413147, -0.00012218205665703863, -0.029669644311070442, -0.9252559542655945, -1.910504698753357, -0.24623988568782806, -0.1589147299528122, -0.21371442079544067, -0.0435166098177433, -0.025221390649676323, -0.2690504789352417, -0.02021951973438263, -0.00748839508742094, -0.005153466947376728, -0.006520543247461319, -7.557583012385294e-05, -0.07746836543083191, -0.0007108307327143848, -1.0060079097747803, -0.00861854013055563, -0.46608373522758484, -0.0037637364584952593, -3.0386099815368652, -0.010372539982199669, -0.020412610843777657, -0.04171488434076309, -0.44817087054252625, -0.5102390646934509, -0.2256198525428772, -2.753696753643453e-05, -9.417489309271332e-06, -0.00014923889830242842, -0.0001770101225702092, -0.00046266341814771295, -2.861018856492592e-06, -1.7881233361549675e-05, -0.00011097769311163574, -4.529942543740617e-06, -0.32350650429725647, -2.7418097943154862e-06, -8.761498611420393e-05, -0.0030411682091653347, -0.0020732830744236708, -0.028294356539845467, -0.007317408453673124, -3.6477376852417365e-05, -0.0007291757501661777, -2.622600959512056e-06, -0.004297308158129454, -0.01580086722970009, -0.012139839120209217, -0.0009222545195370913, -0.24767248332500458, -0.0005688241217285395, -0.014711353927850723, -0.00036566724884323776, -0.00027104519540444016, -0.0016595651395618916, -0.0067705269902944565, -0.027975626289844513, -0.010715564712882042, -0.00019107422849629074, -0.018966741859912872, -0.2677971124649048, -0.14992108941078186, -0.006641339045017958, -0.12571299076080322, -0.39667046070098877, -0.2601074278354645, -0.20739732682704926, -0.0018753099720925093, -0.02918637916445732, -0.07040420174598694, -0.0004234609368722886, -0.3879806697368622, -2.2398669719696045, -0.00018952481332235038, -0.0006524579366669059, -2.8490614567999728e-05, -7.152531907195225e-06, -0.0005446380819194019, -0.0005079409456811845, -0.0009288049186579883, -1.0069541931152344, -1.1920922133867862e-06, -3.3378546504536644e-06, -0.00025054652360267937, -0.2701683044433594, -0.0002681849291548133, -0.6997902989387512, -0.00023815179883968085, -5.125986263010418e-06, -0.0011231550015509129, -0.00012730741582345217, -0.0016141016967594624, -1.0728830375228426e-06, -0.0003002431185450405, -0.8892518281936646, -0.001498410478234291, -0.00010895135346800089, -0.0039316508919000626, -0.22233422100543976, -1.2397689715726301e-05], "finish_reason": "length"}], "metrics": {"energy": 914.3354474315646, "energy_per_token": 3.5716228415295492, "time": 22.075169, "time_per_token": 0.08623112890625}}
{"outputs": [{"text": "src_path_obj = pathlib.Path(source_path)\n    if not src_path_obj.exists() or not src_path_obj.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n\n    dst_path_obj = pathlib.Path(destination_path)\n    if not dst_path_obj.exists():\n        dst_path_obj.mkdir()\n    if not dst_path_obj.is_dir():\n        raise ValueError(\"Destination path must be a directory\")\n\n    file_list = [file.name for file in src_path_obj.iterdir() if file.is_file()]\n\n    for file in file_list:\n        src_file_path = src_path_obj / file\n        dst_file_path = dst_path_obj / file\n        shutil.copy(src_file_path, dst_file_path)\n\n    return src_path_obj.name, file_list", "tokens": ["src", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " src", "_", "path", "_", "obj", ".", "exists", "()", " or", " not", " src", "_", "path", "_", "obj", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " must", " exist", " and", " be", " a", " directory", "\"", ")", "\n", "\n", "    ", "dst", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " dst", "_", "path", "_", "obj", ".", "exists", "():", "\n", "        ", "dst", "_", "path", "_", "obj", ".", "mk", "dir", "()", "\n", "    ", "if", " not", " dst", "_", "path", "_", "obj", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Dest", "ination", " path", " must", " be", " a", " directory", "\"", ")", "\n", "\n", "    ", "file", "_", "list", " =", " [", "file", ".", "name", " for", " file", " in", " src", "_", "path", "_", "obj", ".", "iter", "dir", "()", " if", " file", ".", "is", "_", "file", "()", "]", "\n", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "src", "_", "file", "_", "path", " =", " src", "_", "path", "_", "obj", " /", " file", "\n", "        ", "dst", "_", "file", "_", "path", " =", " dst", "_", "path", "_", "obj", " /", " file", "\n", "        ", "sh", "util", ".", "copy", "(", "src", "_", "file", "_", "path", ",", " dst", "_", "file", "_", "path", ")", "\n", "\n", "    ", "return", " src", "_", "path", "_", "obj", ".", "name", ",", " file", "_", "list", "\n", "\n", "def"], "logprobs": [-2.385692596435547, -0.25269460678100586, -0.7698197960853577, -2.368337631225586, -0.3169785141944885, -0.02951652929186821, -0.013501167297363281, -0.0002754547167569399, -6.103329360485077e-05, -0.004498481284826994, -0.00527146365493536, -0.0166773684322834, -4.053033626405522e-05, -4.100715523236431e-05, -0.0036270327400416136, -0.06535117328166962, -0.13444872200489044, -0.8826943039894104, -0.09371694922447205, -0.09836087375879288, -2.622600959512056e-06, 0.0, -1.156323378381785e-05, -1.680836794548668e-05, -0.0027939353603869677, -0.36294105648994446, -0.9729421138763428, -0.0636066272854805, -0.02130912058055401, -0.004923244938254356, -2.276871418871451e-05, -2.3841855067985307e-07, -5.709961988031864e-05, -5.960462772236497e-07, -4.160317621426657e-05, -8.189342770492658e-05, -1.6927575416048057e-05, -0.002967242617160082, -0.017939573153853416, -0.008602466434240341, -0.003574294038116932, -0.05198707804083824, -0.006342638749629259, -3.4570634852570947e-06, -0.10530144721269608, -1.3858604431152344, -1.5447008609771729, -0.27852797508239746, -1.078023910522461, -1.481519341468811, -0.01914908178150654, -0.1278243362903595, -0.011489414609968662, -0.013186156749725342, -0.7305333614349365, -0.0010503972880542278, -0.0024812407791614532, -0.38255831599235535, -0.000851387856528163, -1.0434573888778687, -0.024958070367574692, -0.007868011482059956, -0.020822379738092422, -0.0049236007034778595, -0.0007930232677608728, -0.0010638536186888814, -4.60137271147687e-05, -1.8000440832111053e-05, -0.00024029705673456192, -0.000560245884116739, -0.002006423892453313, -4.529942543740617e-06, 0.0, -0.001301871263422072, -0.01657337322831154, -0.10218332707881927, -0.15550492703914642, -0.0480557456612587, -0.001456510741263628, -1.1920922133867862e-06, -2.3841855067985307e-07, -4.60137271147687e-05, -2.753696753643453e-05, -0.00015472168161068112, -0.02512850984930992, -0.04162706807255745, -0.0035181075800210238, -0.0012956805294379592, -0.1032373309135437, -5.3165931603871286e-05, -0.00032860602368600667, -0.00021705655672121793, -3.433168603805825e-05, -0.0012686545960605145, -0.00043883229955099523, -1.311301275563892e-06, -0.6741417050361633, -0.021476564928889275, -1.061725378036499, -1.6240984201431274, -0.010004730895161629, -0.0032567339949309826, -2.9802276912960224e-06, -1.4305104514278355e-06, -2.109982233378105e-05, -1.168244216387393e-05, -0.0006629414856433868, -0.002095409668982029, -3.6954195820726454e-05, -0.00013171759201213717, -0.000854961050208658, -0.007017962634563446, -0.00022468426323030144, -0.01594565436244011, -0.044822465628385544, -3.576278118089249e-07, -0.0033793505281209946, -0.016840433701872826, -0.01075554545968771, -0.001046586548909545, -0.02712208591401577, -0.03501706197857857, -0.07041242718696594, -0.023953335359692574, -0.0068298461847007275, -0.03171506151556969, -0.00010513706365600228, -0.0002015625941567123, -0.03646291419863701, -0.0006959400488995016, -2.4613637924194336, -0.05616000294685364, -1.0369493961334229, -0.018989551812410355, -0.9316805601119995, -1.1152945756912231, -0.49722927808761597, -0.00787002220749855, -0.01247507706284523, -0.0003965306677855551, -0.0008551992941647768, -0.0983894020318985, -4.768360213347478e-06, -9.536738616588991e-07, -2.8132995794294402e-05, -2.50339189733495e-06, -0.00011526874004630372, -0.21731184422969818, -1.0013530300057027e-05, -0.00013541258522309363, -0.05465489998459816, -0.012414678931236267, -5.745722592109814e-05, -0.0009552444680593908, -6.794906312279636e-06, -0.0001787979417713359, -0.005926535930484533, -0.006206050049513578, -0.00869606714695692, -1.1473029851913452, -0.00032729512895457447, -0.2283356785774231, -0.22315089404582977, -0.2418530434370041, -0.02806314267218113, -1.6927575416048057e-05, -2.539125671319198e-05, -0.0012523435289040208, -0.0013152052415534854, -0.0022093667648732662, -1.747056007385254, -0.49878740310668945, -0.20028427243232727, -0.6694799661636353, -0.20792974531650543, -0.054743386805057526, -0.6234473586082458, -4.172316494077677e-06, -8.22540732769994e-06, -6.639736966462806e-05, -7.390948667307384e-06, -0.06621567159891129, -0.010626163333654404, -0.02102060616016388, -0.0010060969507321715, -0.07949911057949066, -0.0003813969960901886, -0.0011200590524822474, -0.0003197873884346336, -0.00030596344731748104, -0.00026806574896909297, -0.0035571889020502567, -9.536738616588991e-07, -1.2159273865108844e-05, -8.106198947643861e-06, -3.6954811548639555e-06, -0.0003000047872774303, -0.005790364928543568, -0.003047704929485917, -0.12719890475273132, -0.0786038264632225, -2.861018856492592e-06, -5.364403477869928e-06, -0.0017730958061292768, -0.27322062849998474, -0.14079426229000092, -0.009476322680711746, -3.659658250398934e-05, -1.2159273865108844e-05, 0.0, -0.011601598933339119, -0.0012499623699113727, -0.00011050090688513592, -0.0005760917556472123, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.011377335526049137, -0.0026857517659664154, -0.06693147867918015, -0.0021303833927959204, -0.05936003476381302, -0.34735870361328125, -3.099436753473128e-06, -0.0004969792207702994, -3.969590397900902e-05, -4.172316494077677e-06, -0.0011405398836359382, -0.04947573319077492, -0.0009301149984821677, -0.01708046719431877, -1.8000440832111053e-05, -4.172316494077677e-06, -0.24807162582874298, -0.009190398268401623, -1.7093307971954346], "finish_reason": "stop"}], "metrics": {"energy": 818.3070255165097, "energy_per_token": 3.4821575553894033, "time": 19.9707, "time_per_token": 0.08498170212765958}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Directory '{source_path}' does not exist.\")\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory '{source_path}' is not a directory.\")\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.is_dir():\n        destination_path.mkdir(parents=True, exist_ok=True)\n    file_names = []\n    for file_path in source_path.iterdir():\n        if file_path.is_file():\n            shutil.copy2(file_path, destination_path / file_path.name)\n            file_names.append(file_path.name)\n    return source_path.name, file_names", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Directory", " '", "{", "source", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Directory", " '", "{", "source", "_", "path", "}'", " is", " not", " a", " directory", ".", "\"", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "file", "_", "names", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " file", "_", "path", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "file", "_", "path", ",", " destination", "_", "path", " /", " file", "_", "path", ".", "name", ")", "\n", "            ", "file", "_", "names", ".", "append", "(", "file", "_", "path", ".", "name", ")", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " file", "_", "names", "\n", "\n", "if"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -0.23526781797409058, -0.051925625652074814, -0.00032014489988796413, -0.00010823617776622996, -0.004042074549943209, -0.002119558397680521, -0.004571819212287664, -2.2649508537142538e-05, -1.3232143828645349e-05, -0.002438192954286933, -0.0789787620306015, -0.1533668339252472, -1.105228304862976, -0.0570962056517601, -0.03497021272778511, -2.13382354559144e-05, -1.5497195136049413e-06, -0.003836297197267413, -0.8749353289604187, -0.38287797570228577, -0.011060122400522232, -0.0030099109280854464, -0.030346864834427834, -0.027165129780769348, -1.7881377516459906e-06, -0.08441712707281113, -0.28547203540802, -0.19880446791648865, -3.0968616008758545, -0.786664605140686, -0.0025830259546637535, -0.05975336953997612, -4.95898348162882e-05, -1.7881377516459906e-06, -0.07968582212924957, -0.047382231801748276, -0.0004928089329041541, -0.003777275327593088, -0.4160314202308655, -0.016042793169617653, -0.0005311747081577778, -0.0011387537233531475, -0.2191234678030014, -0.1764555275440216, -0.007418938912451267, -0.0030482991132885218, -1.764281842042692e-05, -1.1920928244535389e-07, -5.328513361746445e-05, -0.00027414379292167723, -1.3351351299206726e-05, -0.0009513143450021744, -0.0020785173401236534, -0.0030692159198224545, -0.00018273114983458072, -0.0017581019783392549, -0.002736040623858571, -5.006777428206988e-06, -0.0004152389301452786, -0.019705016165971756, -0.0002157455455744639, -3.382187843322754, -0.06068689003586769, -0.0001829695247579366, -0.0008929556352086365, -1.6927575416048057e-05, -1.1920928244535389e-07, -0.005103655159473419, -0.08579202741384506, -0.0103707704693079, -0.06897047907114029, -0.1466888189315796, -0.085164375603199, -0.007528149988502264, -0.00012265883560758084, -0.0007129749283194542, -0.9440854787826538, -1.2200368642807007, -0.007251609116792679, -0.006123827304691076, -0.009536071680486202, -0.003933550789952278, -2.3007127310847864e-05, -3.0874729418428615e-05, -0.0005498804384842515, -0.0011201781453564763, -0.0029320605099201202, -8.702239938429557e-06, 0.0, -0.0010471820132806897, -0.025668581947684288, -0.06818653643131256, -0.3237261176109314, -0.04548369720578194, -0.0025638823863118887, -3.8265450712060556e-05, -9.536738616588991e-07, -0.0012066233903169632, -2.2007458209991455, -6.556489552167477e-06, -0.0005430892342701554, -0.009797816164791584, -0.007472658529877663, -0.0008168459753505886, -0.10438773781061172, -4.124556289752945e-05, -6.544376083184034e-05, -0.0010845737997442484, -0.0005534547381103039, -6.079655122448457e-06, -0.40316784381866455, -0.0902581587433815, -0.0043722037225961685, -0.0035545756109058857, -0.32166212797164917, -0.0003040566807612777, -2.3841830625315197e-06, -2.50339189733495e-06, -7.045020902296528e-05, -0.016027074307203293, -0.0003060825983993709, -0.015928056091070175, -0.22660349309444427, -2.034484386444092, -0.03986603394150734, -0.9622246026992798, -0.09407779574394226, -0.49990496039390564, -0.01095813512802124, -0.006063044536858797, -0.0990942120552063, -0.41205668449401855, -0.9049683213233948, -0.14473992586135864, -0.0028464775532484055, -0.03059408627450466, -7.033323527139146e-06, -2.3841830625315197e-06, -9.393251093570143e-05, -0.1216781958937645, -3.814689989667386e-06, -9.60780744208023e-05, -0.006911418866366148, -0.0009538153535686433, -0.04090835526585579, -0.020890794694423676, -2.3841830625315197e-06, -2.9802276912960224e-06, -0.00028081765049137175, -0.0023454318288713694, -2.50339189733495e-06, -0.005254032090306282, -0.01774424873292446, -0.005071395076811314, -0.0006053998949937522, -0.7487876415252686, -5.245195097813848e-06, -1.2874520507466514e-05, -0.0009812070056796074, -0.9292628169059753, -6.401333666872233e-05, -0.08090035617351532, -6.258291978156194e-05, -1.883488948806189e-05, -0.008675504475831985, -0.004645982291549444, -0.00030393750057555735, -1.645074735279195e-05, -2.8289153575897217, -0.01540288608521223, -1.4543427823809907e-05, -0.00024816294899210334, -0.01278678048402071, -0.0021949741058051586, -0.005964931100606918, -0.015089413151144981, -0.0022106750402599573, -0.006437872536480427, -1.1086402082582936e-05, -0.001729303621686995, -0.00039188333903439343, -0.0001232548092957586, -0.0005322470096871257, -0.014359356835484505, -7.510157047363464e-06, -1.811964830267243e-05, -0.001924449927173555, -0.0007264359155669808, -0.00042882305569946766, -0.001923617091961205, -0.027424851432442665, -0.05531970411539078, -0.09885817766189575, -1.1205610462639015e-05, -5.602820692729438e-06, -0.004719190765172243, -0.021968234330415726, -0.0008094609947875142, -0.018808821216225624, -9.536738616588991e-07, -2.0265558760002023e-06, -0.28170666098594666, -0.013669101521372795, -0.6665521264076233], "finish_reason": "stop"}], "metrics": {"energy": 722.2443073997498, "energy_per_token": 3.4891029342983084, "time": 17.452631, "time_per_token": 0.08431222705314009}}
{"outputs": [{"text": "src_path = pathlib.Path(source_path)\n\n    if not src_path.exists():\n        raise ValueError(\"Source path does not exist.\")\n    if not src_path.is_dir():\n        raise ValueError(\"Source path is not a directory.\")\n\n    dst_path = pathlib.Path(destination_path)\n    if not dst_path.exists():\n        dst_path.mkdir(parents=True, exist_ok=True)\n    if not dst_path.is_dir():\n        raise ValueError(\"Destination path is not a directory.\")\n\n    copied_files = []\n    for item in src_path.iterdir():\n        if item.is_file():\n            shutil.copy2(item, dst_path)\n            copied_files.append(item.name)\n\n    return (src_path.name, copied_files)", "tokens": ["src", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "\n", "    ", "if", " not", " src", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "if", " not", " src", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Source", " path", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "dst", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " dst", "_", "path", ".", "exists", "():", "\n", "        ", "dst", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "if", " not", " dst", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Dest", "ination", " path", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " item", " in", " src", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " item", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "item", ",", " dst", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "item", ".", "name", ")", "\n", "\n", "    ", "return", " (", "src", "_", "path", ".", "name", ",", " copied", "_", "files", ")", "\n", "\n", "#"], "logprobs": [-2.385692596435547, -0.25269460678100586, -0.7698197960853577, -0.14336198568344116, -0.03560853749513626, -0.00031764229061082006, -4.577531944960356e-05, -0.0057076336815953255, -0.0034362575970590115, -0.005285219289362431, -4.589452510117553e-05, -6.01988795096986e-05, -0.002512038918212056, -0.08498470485210419, -2.03780460357666, -0.0003840185818262398, -0.23499737679958344, -0.06849103420972824, -0.09648437052965164, -1.7881377516459906e-06, 0.0, -0.004589856136590242, -0.5349459052085876, -0.32807984948158264, -0.012693209573626518, -0.003115088678896427, -0.05413636192679405, -0.023629840463399887, -1.537788011773955e-05, -0.06925871968269348, -1.5250900983810425, -0.9982798099517822, -0.3514368534088135, -0.20379529893398285, -0.0007465674425475299, -0.003460611216723919, -0.6568079590797424, -0.033677469938993454, -0.0019302800064906478, -0.001190787530504167, -1.0527037382125854, -0.17877140641212463, -0.00584002397954464, -0.006304850801825523, -1.0132738680113107e-05, -3.576278118089249e-07, -2.777537883957848e-05, -0.00016175392374861985, -1.4185804502631072e-05, -0.0024951535742729902, -0.002451155101880431, -0.001627550576813519, -0.0002079985715681687, -0.0024974129628390074, -0.0016645636642351747, -4.8874615458771586e-05, -0.0015625660307705402, -0.004422408062964678, -0.026928547769784927, -0.012316244654357433, -0.11248397082090378, -0.0010900514898821712, -0.002516795415431261, -0.011950328014791012, -0.011827933602035046, -0.0031601274386048317, -0.00013433984713628888, -0.0005551227368414402, -0.08385131508111954, -0.0005911033367738128, -0.882560670375824, -0.011045031249523163, -0.012764301151037216, -0.0035065847914665937, -0.0017396567855030298, -2.038458114839159e-05, -2.634490556374658e-05, -0.0013810392701998353, -0.0009515525307506323, -0.0026454473845660686, -8.940656698541716e-06, -4.768370445162873e-07, -0.0013823487097397447, -0.030498581007122993, -0.29127204418182373, -0.36314156651496887, -0.03735457360744476, -0.0020342625211924314, -5.006777428206988e-06, 0.0, -0.0005739472107961774, -0.04827522858977318, -0.0030366519931703806, -0.002591111231595278, -0.0009816833771765232, -0.09414897114038467, -6.842378934379667e-05, -0.00020382710499688983, -0.0011561383726075292, -0.0005339150666259229, -3.814689989667386e-06, -0.5952573418617249, -0.045043230056762695, -0.003085140837356448, -0.00600759033113718, -0.5683740377426147, -0.00016389934171456844, -3.6954811548639555e-06, -5.364403477869928e-06, -5.3881147323409095e-05, -0.006616589147597551, -0.0002112165529979393, -0.010790099389851093, -2.000347852706909, -0.45588794350624084, -0.0032007675617933273, -0.002205917378887534, -9.65590606938349e-06, -5.245195097813848e-06, -0.00013159839727450162, -0.0007528808200731874, -4.529942543740617e-06, -0.00014888131408952177, -0.0003607814433053136, -0.0009831124916672707, -0.00040236959466710687, -0.020571095868945122, -0.04010026156902313, -1.7881377516459906e-06, -0.0013438966125249863, -0.010954833589494228, -0.018114373087882996, -0.0003813969960901886, -0.00995138380676508, -0.01547660306096077, -0.00037925204378552735, -0.0011200590524822474, -0.0021282420493662357, -0.013929766602814198, -0.002365649910643697, -0.00010334911348763853, -0.00014482879487331957, -0.016430670395493507, -0.0008300673216581345, -1.3613502979278564, -0.000520570669323206, -0.01973622292280197, -0.08125585317611694, -0.011539734899997711, -0.04254395142197609, -0.009026317857205868, -0.18783578276634216, -0.07864657789468765, -2.28576397895813, -0.0075315809808671474, -0.07573280483484268, -6.9141146923357155e-06, -2.145764938177308e-06, -0.000350175570929423, -0.025649294257164, -1.1920928244535389e-07, -5.495397272170521e-05, -0.006399732548743486, -0.001967043848708272, -0.020293349400162697, -0.03005308099091053, -0.00011872540198964998, -0.0028572946321219206, -2.622600959512056e-06, -0.015355930663645267, -0.020173491910099983, -0.007377878297120333, -0.00087878224439919, -0.29464584589004517, -1.585470999998506e-05, -1.597391747054644e-05, -0.0004808938247151673, -0.6882624626159668, -6.818538531661034e-05, -0.09260493516921997, -0.022652437910437584, -0.006312313489615917, -3.218599158572033e-05, -1.0967194612021558e-05, -0.1551886647939682, -0.022577034309506416, -0.0014884117990732193, -0.02423611655831337, -1.311301275563892e-06, -1.2040065485052764e-05, -6.961580220377073e-05, -0.00016068121476564556, -0.00021514961554203182, -0.000692961853928864, -0.010554565116763115, -0.005800913088023663, -0.005951184779405594, -0.0001915509783430025, -0.008984614163637161, -0.16741357743740082, -0.0010451575508341193, -0.08212395012378693, -2.593395709991455, -0.06848624348640442, -1.0251946150674485e-05, -1.6093124941107817e-05, -0.002755180699750781, -0.061388615518808365, -0.0010189585154876113, -0.003916214685887098, -4.768370445162873e-07, -4.768370445162873e-07, -0.1538858711719513, -0.19775277376174927, -0.012940360233187675, -2.1423048973083496], "finish_reason": "stop"}], "metrics": {"energy": 748.42761689663, "energy_per_token": 3.4649426708177313, "time": 18.458363, "time_per_token": 0.08545538425925925}}
{"outputs": [{"text": "# Validate input parameters\n    src_path = pathlib.Path(source_path)\n    dst_path = pathlib.Path(destination_path)\n    if not src_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory\")\n    dst_path.mkdir(parents=True, exist_ok=True)\n\n    # Retrieve a list of filenames (not full paths) in the specified source directory\n    files_list = [filename.name for filename in src_path.iterdir() if filename.is_file()]\n\n    # Copy files to the destination directory\n    for file in files_list:\n        shutil.copy(src_path / file, dst_path)\n\n    return src_path.name, files_list", "tokens": ["#", " Valid", "ate", " input", " parameters", "\n", "    ", "src", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "dst", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " src", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " is", " not", " a", " valid", " directory", "\"", ")", "\n", "    ", "dst", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Ret", "rieve", " a", " list", " of", " fil", "en", "ames", " (", "not", " full", " paths", ")", " in", " the", " specified", " source", " directory", "\n", "    ", "files", "_", "list", " =", " [", "filename", ".", "name", " for", " filename", " in", " src", "_", "path", ".", "iter", "dir", "()", " if", " filename", ".", "is", "_", "file", "()", "]", "\n", "\n", "    ", "#", " Copy", " files", " to", " the", " destination", " directory", "\n", "    ", "for", " file", " in", " files", "_", "list", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "src", "_", "path", " /", " file", ",", " dst", "_", "path", ")", "\n", "\n", "    ", "return", " src", "_", "path", ".", "name", ",", " files", "_", "list", "\n", "\n", "#"], "logprobs": [-1.769902229309082, -2.3535633087158203, -0.06384285539388657, -1.9312293529510498, -1.6232211589813232, -0.12787216901779175, -0.009561222046613693, -1.9856290817260742, -0.1266166716814041, -0.3477497100830078, -0.16338787972927094, -0.016417887061834335, -0.00020704510097857565, -3.635817120084539e-05, -0.0017387047410011292, -0.0012200777418911457, -0.005378182046115398, -2.539125671319198e-05, -6.318072337307967e-06, -0.0014809127897024155, -0.07572329789400101, -0.06498494744300842, -0.9749289155006409, -0.014442668296396732, -0.0034502758644521236, -0.0008476955117657781, -0.0041783656924963, -5.1973900554003194e-05, -2.7418097943154862e-06, -0.0005399914807640016, -0.00020489977032411844, -0.0006809299811720848, -2.7418097943154862e-06, -3.576278118089249e-07, -0.0007090438157320023, -0.018970835953950882, -0.8896090388298035, -0.1260165572166443, -0.0383610837161541, -0.02477271854877472, -1.5497195136049413e-06, -8.344646857949556e-07, -0.0026208360213786364, -0.5278365015983582, -1.9788545614574105e-05, -0.00849904678761959, -0.04267566651105881, -0.012193423695862293, -0.002552467631176114, -0.023742999881505966, -0.008000588975846767, -9.536738616588991e-07, -0.033184029161930084, -0.31874361634254456, -0.07408688217401505, -2.0510802268981934, -0.3405214548110962, -0.0002261144545627758, -3.516612196108326e-05, -0.09420495480298996, -0.6276854872703552, -0.04520902410149574, -0.4810708165168762, -1.093630075454712, -0.20621302723884583, -0.7325238585472107, -0.0006569849792867899, -0.0024541281163692474, -1.6646254062652588, -2.185377359390259, -0.0013218722306191921, -0.010953890159726143, -0.07953368127346039, -0.0023080871906131506, -1.0967194612021558e-05, -0.0023357984609901905, -0.36800292134284973, -0.0033144797198474407, -0.0025517542380839586, -0.0003297977091278881, -0.00030286493711173534, -7.152555099310121e-07, -1.5020257706055418e-05, -0.0001941730733960867, -0.00023529145983047783, -0.00021419614495243877, -0.15909847617149353, -0.1034487932920456, -0.0004935238393954933, -0.1350274533033371, -4.085979461669922, -0.014068713411688805, -2.1554319858551025, -0.04324059933423996, -0.006967652123421431, -1.6853816509246826, -6.580135959666222e-05, -1.811964830267243e-05, -1.8008441925048828, -0.18486179411411285, -0.08062347024679184, -0.008203738369047642, -0.012872341088950634, -0.447857528924942, -0.036387279629707336, -2.343383312225342, -0.7211393117904663, -0.02848716825246811, -0.5438988208770752, -0.0006132629350759089, -1.69460129737854, -0.7913879752159119, -1.981177806854248, -0.018616005778312683, -0.18039022386074066, -3.327454090118408, -0.05773530527949333, -0.0073990598320961, -0.02614925429224968, -0.0004953111056238413, -0.004589025396853685, -0.09392077475786209, -4.410734163684538e-06, -2.3841855067985307e-07, -8.666139910928905e-05, -0.25472480058670044, -4.529942543740617e-06, -0.00013159839727450162, -0.05039973929524422, -0.012286453507840633, -5.590759246842936e-05, -0.0017730958061292768, -1.1086402082582936e-05, -0.0001597276859683916, -0.0036377226933836937, -0.0025044286157935858, -0.005142081528902054, -0.1450987011194229, -0.00020704510097857565, -0.021054573357105255, -0.16492848098278046, -0.7930279970169067, -0.9223363399505615, -0.13820694386959076, -0.09431973099708557, -0.04796871170401573, -0.13565029203891754, -0.0002232540718978271, -0.38620811700820923, -1.1020026206970215, -0.28911274671554565, -0.022732963785529137, -1.6569954823353328e-05, -8.344646857949556e-07, -0.0029639145359396935, -0.0010244365548714995, -0.0014969820622354746, -0.35854417085647583, -1.6331539882230572e-05, -1.1324817933200393e-05, -0.0006256530177779496, -0.49317044019699097, -0.1366117000579834, -0.019773157313466072, -7.867782187531702e-06, -0.045266903936862946, -0.002144420053809881, -0.0007140470552258193, -0.0022940528579056263, -2.884823152271565e-05, -2.9802276912960224e-06, -0.5444182753562927, -0.006446163635700941, -0.07956638187170029, -0.0009095107670873404, -0.6918416023254395, -0.16927191615104675, -1.6569954823353328e-05, -6.079655122448457e-06, -0.003077772678807378, -0.03929219767451286, -0.0008176797418855131, -0.020639412105083466, -5.483612312673358e-06, -1.5497195136049413e-06, -0.24153053760528564, -0.010605167597532272, -2.2289316654205322], "finish_reason": "stop"}], "metrics": {"energy": 701.6314401111608, "energy_per_token": 3.7320821282508554, "time": 16.187075, "time_per_token": 0.08610146276595745}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n\n    # Validate that source_path exists and is a directory\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist or is not a directory: {source_path}\")\n\n    # Create the destination directory if it doesn't exist\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    # List all files in the source directory without descending into subdirectories\n    files = [f.name for f in source_path.iterdir() if f.is_file()]\n\n    # Copy each file to the destination directory\n    copied_files = []\n    for file in files:\n        shutil.copy2(source_path / file, destination_path / file)\n        copied_files.append(file)\n\n    return source_path.name, copied_files", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "#", " Valid", "ate", " that", " source", "_", "path", " exists", " and", " is", " a", " directory", "\n", "    ", "if", " not", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Source", " directory", " does", " not", " exist", " or", " is", " not", " a", " directory", ":", " {", "source", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Create", " the", " destination", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " List", " all", " files", " in", " the", " source", " directory", " without", " descending", " into", " sub", "direct", "ories", "\n", "    ", "files", " =", " [", "f", ".", "name", " for", " f", " in", " source", "_", "path", ".", "iter", "dir", "()", " if", " f", ".", "is", "_", "file", "()", "]", "\n", "\n", "    ", "#", " Copy", " each", " file", " to", " the", " destination", " directory", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "sh", "util", ".", "copy", "2", "(", "source", "_", "path", " /", " file", ",", " destination", "_", "path", " /", " file", ")", "\n", "        ", "cop", "ied", "_", "files", ".", "append", "(", "file", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " copied", "_", "files", "\n", "\n", "def"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -0.23526781797409058, -0.051925625652074814, -0.00032014489988796413, -0.00010823617776622996, -0.004042074549943209, -0.002119558397680521, -0.004571819212287664, -2.2649508537142538e-05, -1.3232143828645349e-05, -0.002438192954286933, -0.0789787620306015, -0.1533668339252472, -0.5044745206832886, -0.0014073477359488606, -0.0042085181921720505, -0.001672775368206203, -0.0038461536169052124, -3.075552376685664e-05, -2.90866428258596e-05, -0.000651147507596761, -0.0002628219372127205, -0.0010246747406199574, -3.3378546504536644e-06, 0.0, -0.0006245807744562626, -0.013491759076714516, -0.48190775513648987, -0.0004456242313608527, -1.7285810708999634, -1.804456353187561, -0.037764690816402435, -1.576798915863037, -0.8129733800888062, -0.20045149326324463, -0.0031506207305938005, -0.460507869720459, -0.05704429745674133, -0.023155877366662025, -0.02242749184370041, -0.010549374856054783, -0.2294032871723175, -0.0011304186191409826, -0.008554007858037949, -0.009703019633889198, -0.021334325894713402, -7.629365427419543e-06, 0.0, -0.0028596720658242702, -0.5975955724716187, -1.4066597032069694e-05, -0.0007789676310494542, -0.03746802732348442, -0.002071141730993986, -0.0013077049516141415, -0.019768832251429558, -0.0072840359061956406, -3.099436753473128e-06, -0.030620215460658073, -0.48114117980003357, -0.05010294169187546, -1.294869303703308, -1.1315529346466064, -1.9201223850250244, -0.0004111875023227185, -0.0016645636642351747, -0.42609450221061707, -0.02498306892812252, -0.0043152314610779285, -0.03475654125213623, -0.014643690548837185, -0.030696401372551918, -0.03933758661150932, -0.0581064447760582, -6.711257447022945e-05, -4.768370445162873e-07, -0.02451172284781933, -0.00025185750564560294, -0.0002644904307089746, -0.019086161628365517, -0.0004934046883136034, -0.1487143635749817, -1.0850281715393066, -0.7414553761482239, -0.004335528239607811, -0.06668895483016968, -0.043852560222148895, -0.006335768382996321, -0.5295178890228271, -0.000713213172275573, -1.9430925021879375e-05, -0.00820255558937788, -0.03619322553277016, -0.00028772983932867646, -0.8262812495231628, -0.0038923469837754965, -0.0004674295778386295, -8.106198947643861e-06, -4.768370445162873e-07, -0.000321336614433676, -1.0505887269973755, -0.0010458719916641712, -0.0007552632014267147, -0.0003357561945449561, -0.048828717321157455, -3.290122185717337e-05, -8.654219709569588e-05, -0.00033098942367359996, -3.5523738915799186e-05, -1.1920928244535389e-07, -0.1229095384478569, -0.003808746114373207, -0.0003800861886702478, -0.0007495454628951848, -0.15535594522953033, -5.864924969500862e-05, -1.5497195136049413e-06, -2.3841855067985307e-07, -2.13382354559144e-05, -0.007965466007590294, -0.00010859376925509423, -0.00387061620131135, -0.037262238562107086, -0.0011844770051538944, -0.3079150915145874, -0.9141340851783752, -2.5788676738739014, -0.14304545521736145, -0.12637759745121002, -0.06197624281048775, -0.0415615439414978, -0.01283326931297779, -0.3674159646034241, -0.019035635516047478, -0.007017489522695541, -0.0036320213694125414, -0.009234573692083359, -6.735097849741578e-05, -0.06159454211592674, -0.0012325793504714966, -0.726474404335022, -0.434067040681839, -0.14544075727462769, -1.9754729270935059, -0.5633982419967651, -0.004139427095651627, -0.0005698964232578874, -8.010543388081715e-05, -1.1920858014491387e-05, -0.010596675798296928, -2.3841830625315197e-06, 0.0, -3.40932747349143e-05, -0.27240580320358276, -8.344646857949556e-07, -3.576272320060525e-06, -0.0034629872534424067, -0.005370119586586952, -2.5152843591058627e-05, -0.00014852374442853034, -2.145764938177308e-06, -0.000350175570929423, -0.0014900782844051719, -0.004383954219520092, -0.0023070168681442738, -0.04604385793209076, -0.0002580548170953989, -0.041303638368844986, -0.06941643357276917, -0.7853201031684875, -0.010850949212908745, -0.15698006749153137, -0.009925653226673603, -0.000659248442389071, -0.023051854223012924, -0.06948994845151901, -0.000251142424531281, -0.651724100112915, -0.00014685506175737828, -0.011010957881808281, -0.014866283163428307, -0.001313776709139347, -0.004465963691473007, -0.013212745077908039, -0.010152839124202728, -0.006799891125410795, -0.32987192273139954, -0.13358046114444733, -0.002200683578848839, -0.00011824862303910777, -0.00011586471373448148, -0.001001809723675251, -1.3555896282196045, -1.9073468138230965e-06, -4.172316494077677e-06, -7.521823135903105e-05, -0.48127371072769165, -9.262132516596466e-05, -0.11415291577577591, -3.6954195820726454e-05, -1.1205610462639015e-05, -0.020794007927179337, -0.0004196478403173387, -0.00025948495022021234, -8.272782724816352e-05, -1.3947389561508317e-05, -1.1920928244535389e-07, -0.3178577721118927, -0.004140733275562525, -0.011177070438861847, -0.01989259570837021, -0.00148781668394804, -0.00412779301404953, -1.1920928244535389e-07, -9.536738616588991e-07, -1.0728830375228426e-06, -7.068861305015162e-05, -5.054346183896996e-05, -0.0002460177056491375, -0.0032801416236907244, -0.008540179580450058, -0.004068313166499138, -0.017309900373220444, -0.0006902219611220062, -0.4736027121543884, -0.09019781649112701, -1.823885577323381e-05, -1.883488948806189e-05, -0.004817664157599211, -0.020517492666840553, -0.0006443570018745959, -0.0019729926716536283, -8.344646857949556e-07, -3.576278118089249e-07, -0.1715376079082489, -0.009035768918693066, -1.8225102424621582], "finish_reason": "stop"}], "metrics": {"energy": 860.0646762638092, "energy_per_token": 3.5985969718151014, "time": 21.191633, "time_per_token": 0.08866792050209205}}
{"outputs": [{"text": "source_path = pathlib.Path(source_path)\n\n    if source_path.exists():\n        if source_path.is_dir():\n            pass\n        else:\n            raise ValueError(\"The specified path exists but is not a directory.\")\n    else:\n        raise ValueError(\"The specified path does not exist.\")\n\n    destination_path = pathlib.Path(destination_path)\n    if destination_path.exists():\n        if destination_path.is_dir():\n            pass\n        else:\n            raise ValueError(\"The specified path exists but is not a directory.\")\n    else:\n        destination_path.mkdir()\n\n    copied_files = []\n    for file in source_path.iterdir():\n        if file.is_file():\n            shutil.copy(file.absolute(), destination_path.absolute())\n            copied_files.append(file.name)\n\n    return source_path.name, copied_files", "tokens": ["source", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "\n", "    ", "if", " source", "_", "path", ".", "exists", "():", "\n", "        ", "if", " source", "_", "path", ".", "is", "_", "dir", "():", "\n", "            ", "pass", "\n", "        ", "else", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " specified", " path", " exists", " but", " is", " not", " a", " directory", ".", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " specified", " path", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "if", " destination", "_", "path", ".", "is", "_", "dir", "():", "\n", "            ", "pass", "\n", "        ", "else", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " specified", " path", " exists", " but", " is", " not", " a", " directory", ".", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "()", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " source", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "file", ".", "absolute", "()", ",", " destination", "_", "path", ".", "absolute", "())", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "\n", "    ", "return", " source", "_", "path", ".", "name", ",", " copied", "_", "files", "\n", "\n", "def"], "logprobs": [-1.6754026412963867, -0.06218081712722778, -0.15413174033164978, -0.23526781797409058, -0.051925625652074814, -0.00032014489988796413, -0.00010823617776622996, -0.004042074549943209, -0.002119558397680521, -0.004571819212287664, -2.2649508537142538e-05, -1.3232143828645349e-05, -0.002438192954286933, -0.0789787620306015, -1.9515464305877686, -0.0003060825983993709, -0.25529587268829346, -3.0346179008483887, -2.9682672902708873e-05, -4.31528314948082e-05, -0.010926888324320316, -0.5247859954833984, -1.7572213411331177, -0.016766231507062912, -0.11720388382673264, -0.5145639181137085, -0.4078633487224579, -1.0132738680113107e-05, -1.2993727978027891e-05, -0.0009354744106531143, -0.008346792310476303, -0.00016127715934999287, -0.17555709183216095, -0.03464749827980995, -0.0195329487323761, -0.1224837601184845, -4.687193393707275, -0.05569388344883919, -0.11674797534942627, -0.01854497753083706, -0.00015043080202303827, -0.006340861786156893, -0.0010425376240164042, -0.05627370998263359, -0.0458512119948864, -1.5020257706055418e-05, -0.18218350410461426, -1.0955346822738647, -1.7944250106811523, -1.3124059438705444, -1.249481439590454, -2.9152562618255615, -0.29812484979629517, -0.26420632004737854, -0.063146211206913, -0.01374482735991478, -0.008958031423389912, -0.3366175591945648, -0.07756864279508591, -0.003479024861007929, -0.0028279335238039494, -0.06061519682407379, -0.005785861052572727, -2.3483953555114567e-05, -0.0016958630876615644, -0.0014938872773200274, -0.00813208520412445, -0.011723785661160946, -1.5616295058862306e-05, -0.006914378609508276, -0.01717163808643818, -0.06913802772760391, -0.01714269444346428, -0.043932195752859116, -0.06199607253074646, -0.0012390087358653545, -0.007680646609514952, -0.08052603155374527, -0.005805179942399263, -0.0004234609368722886, -0.0015844660811126232, -0.037946272641420364, -0.000636255950666964, -0.6703013777732849, -0.004627234302461147, -0.005294468253850937, -0.011455120518803596, -0.004876387305557728, -4.339123915997334e-05, -0.00011097769311163574, -0.001408776268362999, -0.0012430568458512425, -0.003039504401385784, -6.9141146923357155e-06, -2.3841855067985307e-07, -0.0008401916129514575, -0.028157025575637817, -0.8335027098655701, -0.2114449441432953, -1.0140206813812256, -2.3841574147809297e-05, -1.07287787614041e-05, -0.0021495348773896694, -0.04604955017566681, -0.0755547508597374, -0.0023289003875106573, -0.0015043619787320495, -0.20879173278808594, -0.08876428008079529, -4.935142715112306e-05, -2.0146166207268834e-05, -0.0001911934232339263, -0.0016581370728090405, -2.0861407392658293e-05, -0.07356192916631699, -0.0042646657675504684, -0.0008518642862327397, -0.0009969270322471857, -0.03139915317296982, -0.004740309901535511, -0.023764420300722122, -0.0012748456792905927, -2.2291887944447808e-05, -0.0006113567505963147, -0.00031764229061082006, -0.019802842289209366, -0.03635969012975693, -3.015949550899677e-05, -0.002774558262899518, -0.04803847894072533, -0.02691206894814968, -0.10602016746997833, -0.43544408679008484, -0.022890498861670494, -0.006570639554411173, -0.0008005275158211589, -0.0034029928501695395, -0.0011081513948738575, -0.001278536394238472, -0.004435700364410877, -0.0016640876419842243, -0.00035565727739594877, -0.00020394629973452538, -0.017491018399596214, -0.00823495164513588, -2.992108420585282e-05, -0.001683367183431983, -0.0017240673769265413, -0.16602009534835815, -0.00025006983196362853, -0.0004808938247151673, -0.007182254455983639, -0.0015756584471091628, -4.31528314948082e-05, -0.4437500834465027, -0.01598929800093174, -0.06593625992536545, -0.0022590849548578262, -2.443397283554077, -0.0029355075675994158, -0.043248020112514496, -0.26855728030204773, -0.10250627249479294, -0.11193466931581497, -0.009225478395819664, -0.3704165518283844, -0.14845070242881775, -0.4914492070674896, -0.23511403799057007, -0.12632831931114197, -1.2755313036905136e-05, -1.2040065485052764e-05, -0.0006516240537166595, -0.1527504175901413, -1.1444026313256472e-05, -0.0001958416833076626, -0.0088234543800354, -0.005505044013261795, -0.16257359087467194, -0.06587900221347809, -0.0005486889858730137, -0.005314626730978489, -2.062299427052494e-05, -0.026875050738453865, -0.020238211378455162, -0.004409115295857191, -0.0020034497138112783, -0.4292594790458679, -4.792098479811102e-05, -3.480850500636734e-05, -0.00248873233795166, -0.4328245520591736, -0.13098423182964325, -2.6767258644104004, -0.9146326184272766, -0.0005590544897131622, -0.034610651433467865, -0.012983076274394989, -0.0003937899600714445, -9.929640509653836e-05, -0.8685299754142761, -0.0285267923027277, -0.18048866093158722, -0.008524931967258453, -0.006832095794379711, -0.05026053264737129, -4.768360213347478e-06, -3.1709168979432434e-05, -0.0001984637783607468, -0.0034728473983705044, -0.0003623305819928646, -0.0033069944474846125, -0.029756665229797363, -0.005963153671473265, -0.03923271223902702, -0.0004888770054094493, -0.007636047434061766, -0.36713945865631104, -0.002228397876024246, -0.07733938843011856, -0.4683801829814911, -9.536697689327411e-06, -1.823885577323381e-05, -0.006655075587332249, -0.018039913848042488, -0.0012213874142616987, -0.0066996002569794655, -5.960462772236497e-07, -8.344646857949556e-07, -0.35931989550590515, -0.008350811898708344, -1.823503017425537], "finish_reason": "stop"}], "metrics": {"energy": 823.6618963174815, "energy_per_token": 3.550266794471903, "time": 19.74375, "time_per_token": 0.08510237068965516}}
{"outputs": [{"text": "# Validate arguments:\n    # source_path must be a directory path that exists\n    if not (pathlib.Path(source_path).is_dir() and source_path):\n        raise ValueError(\"source_path must be an existing, accessible directory.\")\n\n    # Convert source_path to a path object so that we can use its properties and methods\n    source_path_path_obj = pathlib.Path(source_path)\n    # Extract the name of the directory\n    source_dir_name = source_path_path_obj.name\n\n    # Create the destination directory if it doesn't exist\n    destination_path_path_obj = pathlib.Path(destination_path)\n    if not destination_path_path_obj.exists():\n        destination_path_path_obj.mkdir(parents=True, exist_ok=True)\n\n    # Initialize an empty list to store the filenames\n    file_names_list = []\n\n    # Iterate over each file in the source directory, excluding subdirectories\n    for file_path in source_path_path_obj.iter", "tokens": ["#", " Valid", "ate", " arguments", ":", "\n", "    ", "#", " source", "_", "path", " must", " be", " a", " directory", " path", " that", " exists", "\n", "    ", "if", " not", " (", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "()", " and", " source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "path", " must", " be", " an", " existing", ",", " accessible", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " source", "_", "path", " to", " a", " path", " object", " so", " that", " we", " can", " use", " its", " properties", " and", " methods", "\n", "    ", "source", "_", "path", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "#", " Ext", "ract", " the", " name", " of", " the", " directory", "\n", "    ", "source", "_", "dir", "_", "name", " =", " source", "_", "path", "_", "path", "_", "obj", ".", "name", "\n", "\n", "    ", "#", " Create", " the", " destination", " directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "destination", "_", "path", "_", "path", "_", "obj", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", "_", "path", "_", "obj", ".", "exists", "():", "\n", "        ", "destination", "_", "path", "_", "path", "_", "obj", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " fil", "en", "ames", "\n", "    ", "file", "_", "names", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " source", " directory", ",", " excluding", " sub", "direct", "ories", "\n", "    ", "for", " file", "_", "path", " in", " source", "_", "path", "_", "path", "_", "obj", ".", "iter"], "logprobs": [-1.769902229309082, -2.3535633087158203, -0.06384285539388657, -3.831385374069214, -2.903015375137329, -0.5047228932380676, -0.04606582969427109, -1.4601647853851318, -1.729517936706543, -0.05140555277466774, -0.003214313881471753, -0.45319420099258423, -0.35565683245658875, -1.1699409484863281, -0.9169763326644897, -3.6209452152252197, -0.6296619176864624, -0.02382797747850418, -0.8163641095161438, -0.010600095614790916, -0.650116503238678, -0.027215246111154556, -1.6634602546691895, -0.6499447822570801, -0.03925425931811333, -0.00031132620642893016, -0.008123453706502914, -0.002883683191612363, -0.00219164346344769, -4.815939246327616e-05, -1.1920922133867862e-06, -0.003142302157357335, -0.0008897398365661502, -0.8953708410263062, -0.00014709345123264939, -0.018056772649288177, -0.014452655799686909, -0.8729856610298157, -2.686579704284668, -0.00013624693383462727, -6.937739817658439e-05, -0.5509882569313049, -0.01167017687112093, -0.004401282407343388, -0.0432482473552227, -0.009513755328953266, -1.6689286894688848e-06, -0.13277418911457062, -0.8036629557609558, -0.7352813482284546, -0.008046945556998253, -0.001833664020523429, -0.19985662400722504, -0.12296614795923233, -1.1866192817687988, -0.06881023943424225, -1.9164279699325562, -0.06033803150057793, -0.013725308701395988, -1.2749615907669067, -0.02960911951959133, -0.0026396214962005615, -0.0015716117341071367, -0.26145756244659424, -0.0010836211731657386, -0.17145967483520508, -3.697597026824951, -1.112483263015747, -0.2278042435646057, -0.0019758481066673994, -0.48750340938568115, -0.45748984813690186, -1.3009510040283203, -2.7442338466644287, -3.5836384296417236, -1.5432945489883423, -0.5862998962402344, -0.03330625966191292, -0.7483667135238647, -1.4022260904312134, -1.6004209518432617, -2.158311367034912, -0.05860910564661026, -0.38061463832855225, -0.0006636562757194042, -0.339038223028183, -0.09178874641656876, -0.07618635892868042, -1.088366150856018, -1.8282787799835205, -1.868264079093933, -0.2002795934677124, -0.006206524092704058, -0.000560245884116739, -9.65590606938349e-06, -2.5987286790041253e-05, -0.0006613928126171231, -0.0005034133209846914, -0.001916716224513948, -4.7801782784517854e-05, 0.0, -0.000760385300964117, -0.02134319394826889, -2.1843841075897217, -0.7205149531364441, -3.10099458694458, -0.013955512084066868, -0.12519636750221252, -0.7999451160430908, -0.07532867789268494, -0.0076707093976438046, -1.5362136363983154, -2.4421849250793457, -0.0005583396414294839, -0.44363489747047424, -0.0006617502076551318, -0.7759910225868225, -0.07662282139062881, -0.03501119092106819, -0.020666152238845825, -0.04754377529025078, -3.3378546504536644e-06, -2.50339189733495e-06, -0.0009561972692608833, -1.6689286894688848e-06, -8.344646857949556e-07, -1.1920928244535389e-07, -0.00039772229501977563, -0.06326460838317871, -0.024302320554852486, -0.2936688959598541, -0.00036173476837575436, -0.02373298816382885, -1.3069944381713867, -0.5839521288871765, -0.01570558175444603, -0.09779057651758194, -0.0722217857837677, -0.0045609017834067345, -0.4425109028816223, -0.0012755600037053227, -3.1709168979432434e-05, -0.046800751239061356, -0.14318989217281342, -0.00039843725971877575, -1.149803638458252, -0.006751700770109892, -0.05562600493431091, -0.069994255900383, -0.038191623985767365, -0.012800198048353195, -0.001831641187891364, -0.0009648911654949188, -0.0006108802044764161, -1.6569954823353328e-05, -5.1973900554003194e-05, -6.83045873302035e-05, -0.0004551566671580076, -0.001962641952559352, -1.0371154530730564e-05, -2.3841855067985307e-07, -0.0006752118351869285, -0.014287673868238926, -0.029038632288575172, -0.4012277126312256, -0.013717195019125938, -0.006032473873347044, -7.152555099310121e-07, -8.583032467868179e-06, -0.007174916565418243, -5.125986263010418e-06, -2.50339189733495e-06, -2.3841855067985307e-07, -0.0009691785671748221, -0.37645986676216125, -0.0013462775386869907, -0.003765280358493328, -0.0012179345358163118, -0.08861133456230164, -1.8954096958623268e-05, -5.7338023907504976e-05, -0.00027640812913887203, -4.482168878894299e-05, -3.2186455882765586e-06, -1.0013530300057027e-05, -0.0003364712174516171, -9.142934868577868e-05, -1.4305104514278355e-06, -0.31490418314933777, -0.012389717623591423, -0.0017660749144852161, -0.0020366418175399303, -0.20993123948574066, -0.0001591317413840443, -3.814689989667386e-06, -3.576278118089249e-07, -2.3603161025675945e-05, -0.0024518687278032303, -0.00037853704998269677, -0.014389674179255962, -0.04088547080755234, -0.0015195977175608277, -0.04426219314336777, -1.6553351879119873, -1.0978283882141113, -0.004437480587512255, -0.0054777758195996284, -0.052755434066057205, -0.27048543095588684, -0.42750293016433716, -0.9907432198524475, -1.4066597032069694e-05, -1.3351351299206726e-05, -1.7508350610733032, -0.0002731903805397451, -1.8661712408065796, -0.006959009915590286, -0.31552252173423767, -1.7408061027526855, -0.41607797145843506, -0.018574699759483337, -0.011793768964707851, -0.0014465117128565907, -0.2774638831615448, -0.00030620177858509123, -0.024121267721056938, -0.5330653190612793, -0.0012462714221328497, -0.5600499510765076, -2.6848814487457275, -0.2454330027103424, -0.060514550656080246, -0.011000935919582844, -0.11736036092042923, -0.01465109083801508, -2.8874621391296387, -1.0489002466201782, -0.16631923615932465, -0.047843944281339645, -0.00020811776630580425, -0.06808419525623322, -0.0002585315378382802, -0.04633582755923271, -0.1990872174501419, -0.7174408435821533, -0.15607059001922607, -0.3976678252220154, -0.12128419429063797, -2.145764938177308e-06, -1.4305104514278355e-06, -7.950943836476654e-05, -3.576278118089249e-07, -2.3841855067985307e-07, 0.0, -6.568216485902667e-05, -0.09509560465812683], "finish_reason": "length"}], "metrics": {"energy": 902.174477600098, "energy_per_token": 3.524119053125383, "time": 22.047262, "time_per_token": 0.0861221171875}}
{"outputs": [{"text": "if not os.path.isdir(source_path):\n        raise ValueError(\"The directory path does not exist or is not a directory\")\n\n    if not os.access(source_path, os.R_OK):\n        raise PermissionError(\"You do not have permission to read from the specified directory\")\n\n    src_dir_name = os.path.basename(os.path.normpath(source_path))\n\n    if not os.path.exists(destination_path):\n        os.makedirs(destination_path)\n\n    copied_files = []\n    for file in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, file)):\n            shutil.copy2(os.path.join(source_path, file), destination_path)\n            copied_files.append(file)\n\n    return (src_dir_name, copied_files)", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " directory", " path", " does", " not", " exist", " or", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "access", "(", "source", "_", "path", ",", " os", ".", "R", "_", "OK", "):", "\n", "        ", "raise", " Perm", "ission", "Error", "(", "\"", "You", " do", " not", " have", " permission", " to", " read", " from", " the", " specified", " directory", "\"", ")", "\n", "\n", "    ", "src", "_", "dir", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "os", ".", "path", ".", "norm", "path", "(", "source", "_", "path", "))", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "destination", "_", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "destination", "_", "path", ")", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", "))", ":", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", ")", ",", " destination", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ")", "\n", "\n", "    ", "return", " (", "src", "_", "dir", "_", "name", ",", " copied", "_", "files", ")", "\n", "\n", "if"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -0.6570690274238586, -2.0265373677830212e-05, -0.0057183015160262585, -9.65590606938349e-06, -0.8682204484939575, -0.003172723576426506, -0.000580499938223511, -0.013192509301006794, -4.053033626405522e-05, -1.5258672647178173e-05, -0.01832975633442402, -0.018691591918468475, -0.004327575676143169, -0.029360612854361534, -0.009450815618038177, -8.344646857949556e-07, -0.12198456376791, -1.087151050567627, -1.3861143589019775, -3.4084110260009766, -1.836429238319397, -1.0637717247009277, -0.0020623384043574333, -0.014990302734076977, -0.22335943579673767, -0.021116552874445915, -0.02153933420777321, -0.04969002678990364, -0.052560798823833466, -1.442959189414978, -0.0036114726681262255, -0.0034614428877830505, -0.40466219186782837, -0.0006927236099727452, -2.8837456703186035, -0.058544572442770004, -0.043630052357912064, -1.847726889536716e-05, -2.3780975341796875, -0.00018475732940714806, -0.0036613589618355036, -1.0847986231965479e-05, -2.0265558760002023e-06, -0.00018737945356406271, -0.00048101297579705715, -1.597391747054644e-05, -0.014717932790517807, -2.0265558760002023e-06, -8.856858039507642e-05, -0.019312677904963493, -0.010906371288001537, -0.001261630211956799, -0.025669511407613754, -1.1517823934555054, -0.0011393491877242923, -2.169585604860913e-05, -0.007979894056916237, -0.049778614193201065, -1.2920283079147339, -0.368939608335495, -0.0009080815361812711, -0.0005433275364339352, -0.6438848376274109, -0.006499935407191515, -0.9771187901496887, -0.6196594834327698, -0.4527551829814911, -0.38562023639678955, -0.06915916502475739, -0.08653189986944199, -0.00036042393185198307, -0.00026806574896909297, -0.018536435440182686, -0.0008379285573028028, -3.5681371688842773, -0.1786786913871765, -0.6020839810371399, -0.5025590062141418, -0.1942957192659378, -0.016531866043806076, -0.23087014257907867, -2.3841830625315197e-06, -0.004613826051354408, -6.6756979322235566e-06, -0.12072080373764038, 0.0, -0.00011324241495458409, -0.9064584374427795, -3.576278118089249e-07, -0.0013103241799399257, -3.3378546504536644e-06, -0.11650928109884262, -0.00016151554882526398, -0.00024339574156329036, -0.0019909576512873173, -4.60137271147687e-05, -1.5497195136049413e-06, -0.0006382812280207872, -0.04429708793759346, -0.7922412753105164, -0.00022539935889653862, -1.9373586177825928, -0.17979295551776886, -0.029524516314268112, -1.311301275563892e-06, -0.009613409638404846, -2.622600959512056e-06, -0.3851248621940613, -0.0002618685248307884, -0.00347961881197989, -6.437094270950183e-05, -7.867782187531702e-06, -0.01057143323123455, -0.003764211433008313, -0.002141208155080676, -0.21847780048847198, -4.410734163684538e-06, -0.3326588571071625, -7.271740287251305e-06, -8.34461570775602e-06, -0.00020466140995267779, -0.0029090014286339283, -3.933898824470816e-06, -1.9073468138230965e-06, -0.05091070383787155, -0.007816205732524395, -0.08908548206090927, -0.004248522222042084, -1.9033006429672241, -0.000801837770268321, -0.020930487662553787, -0.1751028150320053, -0.021989108994603157, -0.03448328375816345, -0.0059676566161215305, -0.5170575976371765, -0.17218609154224396, -0.4670294225215912, -0.436994343996048, -0.03625680133700371, -1.07287787614041e-05, -0.0027183268684893847, -1.5497195136049413e-06, -0.00022635281493421644, -0.003849597414955497, -1.156323378381785e-05, -1.4305104514278355e-06, -0.000581572181545198, -0.0034098834730684757, -0.009827917441725731, -0.8655881285667419, -0.13423661887645721, -7.271740287251305e-06, -0.00016151554882526398, -4.768370445162873e-07, -0.0005641775787808001, -0.023735549300909042, -0.00039939055568538606, -0.0263255275785923, -4.410734163684538e-06, -5.1020273531321436e-05, -2.145764938177308e-06, -0.0003418338019400835, -3.8265450712060556e-05, -0.0010559941874817014, -3.6954811548639555e-06, -3.576278118089249e-07, -7.784063927829266e-05, -0.0021454906091094017, -0.00013731967192143202, -0.01065706554800272, -0.021553101018071175, -0.0035841530188918114, -0.3629915714263916, -2.6940935640595853e-05, -2.706014311115723e-05, -0.0006912940880283713, -0.6071774363517761, -8.21318244561553e-05, -0.01752932369709015, -3.3378546504536644e-06, -9.298280929215252e-06, -1.4305104514278355e-06, -0.00011002412065863609, -1.4662635294371285e-05, -0.0003381395654287189, -2.145764938177308e-06, -2.3841855067985307e-07, -7.903263758635148e-05, -0.0017047885339707136, -0.00016151554882526398, -6.19869097135961e-05, -0.335549533367157, -1.9073304429184645e-05, -5.960462772236497e-07, -0.003100590081885457, -0.009036595933139324, -0.004277959931641817, -0.015151645988225937, -2.3841855067985307e-07, -8.940656698541716e-06, -3.85038583772257e-05, -0.0005646541831083596, -0.00020072828920092434, -0.0007217901293188334, -0.04676048085093498, -0.0007764662150293589, -0.004614063072949648, -0.1483290195465088, -0.0019585967529565096, -0.0704074278473854, -2.1144065856933594, -0.009285243228077888, -5.006777428206988e-06, -8.22540732769994e-06, -1.0490362910786644e-05, -7.152531907195225e-06, -0.0006266061100177467, -0.001536499592475593, -2.7418097943154862e-06, -1.6689286894688848e-06, -0.07790250331163406, -0.07885218411684036, -0.005984602030366659, -0.9017143249511719], "finish_reason": "stop"}], "metrics": {"energy": 851.7415143480301, "energy_per_token": 3.7521652614450667, "time": 21.199106, "time_per_token": 0.0933881321585903}}
{"outputs": [{"text": "src_path = pathlib.Path(source_path)\n    dest_path = pathlib.Path(destination_path)\n    if not src_path.exists() or not src_path.is_dir():\n        raise ValueError(\"source_path must point to an existing directory\")\n    if not dest_path.exists():\n        dest_path.mkdir(parents=True)\n    if not dest_path.is_dir():\n        raise ValueError(\"destination_path must point to a directory\")\n\n    copied_files = []\n    for file in src_path.glob(\"*\"):\n        if file.is_file():\n            copied_files.append(file.name)\n            shutil.copy(file, dest_path)\n    return src_path.name, copied_files", "tokens": ["src", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "dest", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " src", "_", "path", ".", "exists", "()", " or", " not", " src", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "path", " must", " point", " to", " an", " existing", " directory", "\"", ")", "\n", "    ", "if", " not", " dest", "_", "path", ".", "exists", "():", "\n", "        ", "dest", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ")", "\n", "    ", "if", " not", " dest", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "destination", "_", "path", " must", " point", " to", " a", " directory", "\"", ")", "\n", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " src", "_", "path", ".", "glob", "(", "\"", "*", "\"", "):", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "            ", "sh", "util", ".", "copy", "(", "file", ",", " dest", "_", "path", ")", "\n", "    ", "return", " src", "_", "path", ".", "name", ",", " copied", "_", "files", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.385692596435547, -0.25269460678100586, -0.7698197960853577, -0.14336198568344116, -0.03560853749513626, -0.00031764229061082006, -4.577531944960356e-05, -0.0057076336815953255, -0.0034362575970590115, -0.005285219289362431, -4.589452510117553e-05, -6.01988795096986e-05, -0.002512038918212056, -0.08498470485210419, -0.13977529108524323, -1.5307728052139282, -0.009376181289553642, -0.00437540840357542, -0.001875904854387045, -0.002997312694787979, -8.940656698541716e-06, -1.537788011773955e-05, -0.0018103414913639426, -0.0002543602604418993, -0.0010893370490521193, -6.198863957251888e-06, 0.0, -0.0009910915978252888, -0.03302660584449768, -0.8421048521995544, -0.5058803558349609, -0.12542027235031128, -0.06763686239719391, -4.172316494077677e-06, -1.1920928244535389e-07, -0.004790377337485552, -0.7683598399162292, -1.1028915643692017, -0.04620254412293434, -0.02557760290801525, -0.0025733946822583675, -2.2172682292875834e-05, 0.0, -7.199982064776123e-05, -0.00010835537250386551, -3.397406908334233e-05, -0.002854204038158059, -0.019516466185450554, -0.010588536970317364, -0.003680124878883362, -0.024797139689326286, -0.006551454309374094, -3.576272320060525e-06, -0.08366911113262177, -1.2323298454284668, -1.2845295667648315, -0.029843216761946678, -0.0030599460005760193, -0.5999144911766052, -2.9500367641448975, -0.021057724952697754, -0.044989779591560364, -0.07749815285205841, -0.36767780780792236, -0.38894277811050415, -0.0015254301251843572, -0.0016861044568940997, -0.2796546518802643, -0.5675438642501831, -0.07331956923007965, -0.053011875599622726, -2.4318398573086597e-05, -1.3470558769768104e-05, -0.0006068295333534479, -0.054774194955825806, -0.059220727533102036, -0.0055861324071884155, -0.001374610816128552, -0.13682995736598969, -0.0001267114421352744, -0.00027736154152080417, -0.002650440903380513, -0.001016695867292583, -6.6756979322235566e-06, -0.6605541110038757, -0.1527010053396225, -0.005644929129630327, -0.010192841291427612, -0.9008436799049377, -0.033183105289936066, -0.2725188136100769, -1.4350687265396118, -0.01602683961391449, -0.014865460805594921, -1.5139465176616795e-05, -1.597391747054644e-05, -0.001213648240081966, -0.01905002072453499, -0.00013684290752280504, -0.0001436368766007945, -0.0026689881924539804, -0.0037978205364197493, -0.00045217780279926956, -0.027873262763023376, -0.19813527166843414, -3.576278118089249e-07, -0.005056924652308226, -0.06251716613769531, -0.04198262840509415, -0.03273337706923485, -0.0015448314370587468, -0.07151463627815247, -0.22221213579177856, -0.0038794034626334906, -0.15257328748703003, -0.07115810364484787, -0.17646551132202148, -0.0002980979916173965, -0.00031573555315844715, -1.3976941108703613, -0.0005165196489542723, -1.8434698581695557, -0.0014061573892831802, -0.07378906011581421, -0.21091778576374054, -0.02926371619105339, -0.044387977570295334, -0.013058265671133995, -0.08477368205785751, -0.1389363408088684, -0.5994220972061157, -0.37060511112213135, -0.15693604946136475, -1.07287787614041e-05, -8.821448318485636e-06, -0.000262106885202229, -1.957582712173462, -0.7747737169265747, -0.0057581267319619656, -0.010456183925271034, -0.03233053907752037, -0.00024184639914892614, -0.0529172457754612, -0.0020155846141278744, -0.12095542997121811, -0.05239259824156761, -0.000730128725990653, -0.0051397099159657955, -5.364403477869928e-06, -0.0049098399467766285, -0.03266334533691406, -0.007091708015650511, -0.0009502424509264529, -2.7000234127044678, -6.5205356804654e-05, -0.019649144262075424, -0.2189418077468872, -0.0014109190087765455, -0.0007828985108062625, -0.0015831567579880357, -0.1333398073911667, -0.003853278700262308, -0.020710991695523262, -0.0005507144378498197, -0.0112437903881073, -0.012923650443553925, -0.06146126240491867, -1.6689160474925302e-05, -1.3232143828645349e-05, -0.0013613966293632984, -0.22686956822872162, -0.10959270596504211, -0.03557414188981056, -0.01371895894408226, -0.00013147920253686607, -1.0609570381348021e-05, -0.2226915955543518, -0.005164259113371372, -0.7200503349304199, -0.04328694939613342, -0.1805427074432373, -1.6689160474925302e-05, -2.9802276912960224e-06, -0.0034626307897269726, -0.04028485715389252, -0.0006659197388216853, -0.004380512051284313, -7.152555099310121e-07, -1.1920928244535389e-07, -1.826323390007019, -1.4305104514278355e-06, -2.264974000354414e-06, -1.9073468138230965e-06, -4.458328112377785e-05, -1.317550778388977, -0.0012387705501168966], "finish_reason": "stop"}], "metrics": {"energy": 709.8433904991149, "energy_per_token": 3.6216499515260963, "time": 17.447271, "time_per_token": 0.08901668877551021}}
{"outputs": [{"text": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist or is not a directory\")\n    # pathlib is used to obtain the name of the folder from the provided source directory\n    dir_name = pathlib.Path(source_path).stem\n    # We list the files in the folder and filter the file names without descending to sub-directories.\n    file_names = list(file.name for file in os.scandir(source_path) if file.is_file())\n    # If destination path does not exist, we create it\n    if not os.path.exists(destination_path):\n        os.mkdir(destination_path)\n    # Finally, we copy the files from source path to destination path\n    for file in file_names:\n        shutil.copy(os.path.join(source_path, file), os.path.join(destination_path, file))\n    return dir_name, file_names", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "source", "_", "path", "}", " does", " not", " exist", " or", " is", " not", " a", " directory", "\"", ")", "\n", "    ", "#", " path", "lib", " is", " used", " to", " obtain", " the", " name", " of", " the", " folder", " from", " the", " provided", " source", " directory", "\n", "    ", "dir", "_", "name", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "stem", "\n", "    ", "#", " We", " list", " the", " files", " in", " the", " folder", " and", " filter", " the", " file", " names", " without", " descending", " to", " sub", "-", "direct", "ories", ".", "\n", "    ", "file", "_", "names", " =", " list", "(", "file", ".", "name", " for", " file", " in", " os", ".", "sc", "and", "ir", "(", "source", "_", "path", ")", " if", " file", ".", "is", "_", "file", "())", "\n", "    ", "#", " If", " destination", " path", " does", " not", " exist", ",", " we", " create", " it", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "destination", "_", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "destination", "_", "path", ")", "\n", "    ", "#", " Finally", ",", " we", " copy", " the", " files", " from", " source", " path", " to", " destination", " path", "\n", "    ", "for", " file", " in", " file", "_", "names", ":", "\n", "        ", "sh", "util", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "destination", "_", "path", ",", " file", "))", "\n", "    ", "return", " dir", "_", "name", ",", " file", "_", "names", "\n", "\n", "if"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -0.6570690274238586, -2.0265373677830212e-05, -0.0057183015160262585, -9.65590606938349e-06, -0.5451117753982544, -0.0006239851354621351, -0.010636778548359871, -4.470248313737102e-05, -1.2636104656849056e-05, -0.2855955958366394, -0.013670865446329117, -0.003922983072698116, -0.04203280806541443, -0.021146666258573532, -1.1920922133867862e-06, -0.07417875528335571, -0.4167369604110718, -0.14810453355312347, -2.636043071746826, -0.005333599168807268, -0.000256982195423916, -1.645074735279195e-05, -0.1310906708240509, -0.18998660147190094, -0.0018274764297530055, -0.010717451572418213, -2.13765025138855, -0.06281454861164093, -0.023465201258659363, -0.17346066236495972, -0.024683518335223198, -1.103200912475586, -0.0011260127648711205, -0.002237675478681922, -0.9814947843551636, -3.0213851928710938, -5.433882713317871, -0.1884620487689972, -2.538994789123535, -0.7601271867752075, -0.6926789283752441, -4.0441083908081055, -0.28998827934265137, -1.1618058681488037, -0.09724818170070648, -0.051882050931453705, -3.196040391921997, -2.6949191093444824, -0.5069423913955688, -3.433130979537964, -2.738805055618286, -2.8627731800079346, -1.691266655921936, -0.004162457771599293, -2.7233755588531494, -0.05716206878423691, -0.06419094651937485, -0.02269846946001053, -0.1256597936153412, -0.0004345426568761468, -9.870042413240299e-05, -0.27203506231307983, -0.00068926892708987, -0.00904581043869257, -1.5020257706055418e-05, -7.152555099310121e-07, -0.002083632629364729, -0.022068988531827927, -1.5656856298446655, -0.034867409616708755, -0.10627906769514084, -0.6684132218360901, -3.9699583053588867, -2.688276529312134, -0.6172232031822205, -0.32682910561561584, -0.3232603967189789, -0.05751924216747284, -2.642428398132324, -2.0230860710144043, -1.8438730239868164, -1.7014360427856445, -3.1834163665771484, -0.6169393658638, -3.983851432800293, -1.2837423086166382, -2.6727280616760254, -0.3293960988521576, -3.0001327991485596, -0.5166451334953308, -0.002195806708186865, -2.6882662773132324, -0.05656788870692253, -0.0020049961749464273, -1.0823233127593994, -0.008689330890774727, -0.44807201623916626, -0.04544200375676155, -2.540193796157837, -0.016015108674764633, -3.939408540725708, -0.8374560475349426, -0.009530994109809399, -0.005762630607932806, -0.0022513538133352995, -0.0015029336791485548, -0.34906455874443054, -5.6503606174374e-05, -9.846202738117427e-05, -5.125986263010418e-06, -2.3841830625315197e-06, -0.00020311199477873743, -0.005607588682323694, -0.00035494225448928773, -1.2755313036905136e-05, -0.036334630101919174, -0.017323022708296776, -0.07285994291305542, -0.00023767507809679955, -0.0075818635523319244, -1.3351351299206726e-05, -0.0030404552817344666, -0.016714883968234062, -0.004120076075196266, -0.04195302352309227, -0.20970681309700012, -1.6941721439361572, -2.902148485183716, -2.3142666816711426, -0.23158569633960724, -0.0021801055409014225, -0.01806695945560932, -0.15809546411037445, -0.4092559218406677, -0.09171903133392334, -0.04895177483558655, -0.7163561582565308, -0.00020752183627337217, -0.25653812289237976, -0.009730645455420017, -0.01318768598139286, -1.4305012882687151e-05, -0.00021872512297704816, -6.079655122448457e-06, -0.06696983426809311, -9.464769391342998e-05, -0.0028276958037167788, -9.63164638960734e-05, -1.7881377516459906e-06, -0.00257862638682127, -0.0017903504194691777, -0.0019443194614723325, -0.036844559013843536, -1.0251946150674485e-05, -0.9330130219459534, -7.068861305015162e-05, -0.0008086272282525897, -0.002648300724104047, -5.400034933700226e-05, -5.960462772236497e-07, -0.0013500871136784554, -0.000559173640795052, -0.047255683690309525, -0.08002392947673798, -2.7527527809143066, -0.48739805817604065, -0.11066485941410065, -0.3078594505786896, -0.4709499478340149, -0.26159512996673584, -1.687909722328186, -1.7210752964019775, -1.9750540256500244, -0.023432830348610878, -0.17676034569740295, -0.13219696283340454, -0.6074262261390686, -0.000726197671610862, -0.25735214352607727, -0.17534013092517853, -1.1557291746139526, -0.03859497606754303, -1.764281842042692e-05, -6.747018051100895e-05, -0.0010477773612365127, -0.0024519874714314938, -0.001760719926096499, -0.242425799369812, -3.5523738915799186e-05, -2.52720492426306e-05, -0.0019085064996033907, -0.3920564353466034, -0.1785290241241455, -8.583032467868179e-06, -0.0005540504935197532, -2.0265558760002023e-06, -0.0018825681181624532, -0.0002087136817863211, -0.0016295737586915493, -5.8887653722194955e-05, -7.510157047363464e-06, -0.0009495278936810791, -0.01804565079510212, -0.0008241117466241121, -0.0002356490003876388, -0.9380043745040894, -4.529942543740617e-06, -0.00010168035078095272, -3.6954811548639555e-06, -0.000763363263104111, -0.00011932138295378536, -0.002921600826084614, -2.098061486321967e-05, -3.576278118089249e-07, -0.05211450159549713, -0.01526706013828516, -0.004537168424576521, -0.001023364719003439, -0.19474753737449646, -0.23855242133140564, -0.14451587200164795, -1.0371154530730564e-05, -5.722029527532868e-06, -0.0006049233488738537, -0.007336697541177273, -5.602820692729438e-06, -1.5139465176616795e-05, -0.3692922592163086, -0.007697326131165028, -0.5760064721107483], "finish_reason": "stop"}], "metrics": {"energy": 831.4237745704652, "energy_per_token": 3.583723166252005, "time": 19.962929, "time_per_token": 0.08604710775862069}}
{"outputs": [{"text": "# Check if the source path is an existing directory\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"'{source_path}' must be an existing directory.\")\n\n    # Get the directory name from the source path\n    directory_name = os.path.basename(os.path.normpath(source_path))\n\n    # Create a list to store filenames that are copied\n    copied_files = []\n\n    # Iterate through files in the source directory\n    for filename in os.listdir(source_path):\n        # Construct the full file path in the source directory\n        file_path = os.path.join(source_path, filename)\n\n        # Check if the item is a file (not a directory)\n        if os.path.isfile(file_path):\n            # Copy the file to the destination directory\n            shutil.copy(file_path, os.path.join(destination_path, filename))\n\n            # Append the filename to the list\n            copied_files.append(filename)\n\n    return directory_name, copied_", "tokens": ["#", " Check", " if", " the", " source", " path", " is", " an", " existing", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "'{", "source", "_", "path", "}'", " must", " be", " an", " existing", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " the", " directory", " name", " from", " the", " source", " path", "\n", "    ", "directory", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "os", ".", "path", ".", "norm", "path", "(", "source", "_", "path", "))", "\n", "\n", "    ", "#", " Create", " a", " list", " to", " store", " fil", "en", "ames", " that", " are", " copied", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " files", " in", " the", " source", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "#", " Construct", " the", " full", " file", " path", " in", " the", " source", " directory", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " filename", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " item", " is", " a", " file", " (", "not", " a", " directory", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "#", " Copy", " the", " file", " to", " the", " destination", " directory", "\n", "            ", "sh", "util", ".", "copy", "(", "file", "_", "path", ",", " os", ".", "path", ".", "join", "(", "destination", "_", "path", ",", " filename", "))", "\n", "\n", "            ", "#", " App", "end", " the", " filename", " to", " the", " list", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "return", " directory", "_", "name", ",", " copied", "_"], "logprobs": [-1.769902229309082, -1.3020879030227661, -0.5344520807266235, -0.7262183427810669, -0.0899348333477974, -0.5813540816307068, -1.1767289638519287, -1.9837135076522827, -0.05932004377245903, -0.10534017533063889, -0.21594233810901642, -0.002546165604144335, -0.2518048584461212, -0.021921468898653984, -0.7733020186424255, -2.0503786799963564e-05, -0.0009756095823831856, -7.748573807475623e-06, -0.17193427681922913, -0.0002884448622353375, -0.00017557987303007394, -0.0173536017537117, -6.8662193370983e-05, -7.390948667307384e-06, -0.006191951688379049, -0.004038631450384855, -0.0015441172290593386, -0.04774223268032074, -0.0066461944952607155, -1.1920928244535389e-07, -0.025567376986145973, -0.7802596688270569, -0.06067612022161484, -2.849836826324463, -0.0021033799275755882, -8.606540359323844e-05, -1.4305104514278355e-06, -0.006968480534851551, -2.1482720375061035, -0.08809177577495575, -0.13530977070331573, -0.01808779686689377, -0.40872207283973694, -1.1697006225585938, -0.011847135610878468, -0.0004993622424080968, -0.0016035091830417514, -0.07622546702623367, -0.0006243425305001438, -0.1881958246231079, -1.0461832284927368, -0.09979173541069031, -0.7463197112083435, -0.056975722312927246, -0.5687721967697144, -0.036330606788396835, -0.2313818782567978, -0.03746630251407623, -0.16330446302890778, -0.0003060825983993709, -1.2831417322158813, -0.06197153776884079, -0.010692802257835865, -0.003837247146293521, -0.07256541401147842, -2.3841830625315197e-06, -6.401333666872233e-05, -2.7418097943154862e-06, -0.06206856295466423, -1.1444026313256472e-05, -3.802703940891661e-05, -1.0222173929214478, -1.2993727978027891e-05, -2.50339189733495e-06, -1.6689286894688848e-06, -0.07584253698587418, -5.5549986427649856e-05, -4.410646579344757e-05, -0.0006233894382603467, -1.4305104514278355e-06, -1.1920922133867862e-06, -0.0003819928097072989, -0.01251133717596531, -0.0334569476544857, -0.00019703354337252676, -0.015377530828118324, -1.0627814531326294, -1.7872449159622192, -0.5061995983123779, -1.5518460273742676, -0.2645135521888733, -1.6006839275360107, -2.169585604860913e-05, -5.602820692729438e-06, -0.7910370826721191, -1.0291708707809448, -0.3535228967666626, -0.040467698127031326, -0.0005373702733777463, -0.20574569702148438, -0.00017307691450696439, -0.0035306992940604687, -0.519742488861084, -0.01242292020469904, -0.005098673980683088, -0.0005156855913810432, -0.011883419007062912, -0.00017808281700126827, -0.016676664352416992, -1.2126981019973755, -0.002285965019837022, -0.6524447202682495, -1.102649450302124, -0.04793041944503784, -0.02228608727455139, -0.12901346385478973, -0.026732997968792915, -0.5189033150672913, -0.00017391123401466757, -0.020843161270022392, -0.5148791670799255, -0.0013504442758858204, -0.005345930811017752, -2.3841830625315197e-06, -6.961580220377073e-05, -2.3841855067985307e-07, -9.190614218823612e-05, -0.000771820661611855, -4.410734163684538e-06, -2.3841855067985307e-07, -0.00013267113536130637, -0.0006603206275030971, -0.015647726133465767, -0.3369716703891754, -1.9678354263305664, -0.34529468417167664, -0.25270986557006836, -0.832874596118927, -0.0441812127828598, -1.6466807126998901, -0.06870140135288239, -0.010367939248681068, -0.18329843878746033, -0.022423528134822845, -0.00010311071673640981, -0.8542848229408264, -0.07242172211408615, -0.0019954785238951445, -0.018946506083011627, -0.0018349728779867291, -5.960462772236497e-07, -1.3589766240329482e-05, -1.9073468138230965e-06, -0.0006379238329827785, -1.4781842764932662e-05, -0.0006803343421779573, -6.556489552167477e-06, -3.576278118089249e-07, -3.7788631743751466e-05, -5.304672595229931e-05, -3.731181277544238e-05, -0.0005974177038297057, -0.050829920917749405, -0.00043275527423247695, -0.025632912293076515, -0.08990388363599777, -0.000598251644987613, -0.9245293140411377, -3.0051422119140625, -0.03841913118958473, -0.022762445732951164, -0.04704393818974495, -1.2002789974212646, -0.06575734168291092, -0.02707068808376789, -0.3337756395339966, -0.011188740842044353, -0.06868426501750946, -4.2914423829643056e-05, -0.003814446274191141, -0.007271964568644762, -1.311301275563892e-06, -2.861018856492592e-06, -5.125986263010418e-06, -5.245195097813848e-06, -0.0008049347088672221, -2.312633478140924e-05, -0.00018523407925385982, -2.3841830625315197e-06, 0.0, -0.0021563153713941574, -0.00036971885128878057, -0.0075838747434318066, -0.015178182162344456, -1.7957435846328735, -0.014726272784173489, -0.0019792981911450624, -0.04746033623814583, -0.010923351161181927, -0.006289806216955185, -0.042983125895261765, -0.240891695022583, -0.0017507239244878292, -0.12679259479045868, -2.861018856492592e-06, -6.318072337307967e-06, -8.427741704508662e-05, -0.6032030582427979, -0.0006637753685936332, -5.483612312673358e-06, -1.1920928244535389e-07, -1.6212332411669195e-05, -2.9386563301086426, -6.318072337307967e-06, -0.00023362292267847806, -1.883488948806189e-05, -0.006993695627897978, -0.00020692592079285532, -0.008730811066925526, -5.507317473529838e-05, -1.9311717551317997e-05, -0.021538518369197845, -0.01223970390856266, -0.0024674467276781797, -0.0034442171454429626, -0.4431387782096863, -0.0008166077313944697, -0.002831143094226718, -1.1167272329330444, -0.00010740180005086586, -0.04212801903486252, -0.13739317655563354, -0.2156730443239212, -0.008687912486493587, -0.6458607316017151, -1.8824180364608765, -0.0002466136065777391, -0.00886185560375452, 0.0, -9.536738616588991e-07, -7.748573807475623e-06, -5.6265202147187665e-05, -7.366862701019272e-05, -0.00026341783814132214, -0.009461562149226665, -0.0001879753835964948, -0.0008473381749354303, -0.016042325645685196, -0.007655567489564419, -1.0516128540039062, -0.030501240864396095, -1.2278481335670222e-05, -2.861018856492592e-06, -0.0002530493075028062, -0.0012061471352353692, -1.5497195136049413e-06], "finish_reason": "length"}], "metrics": {"energy": 893.2344915304179, "energy_per_token": 3.489197232540695, "time": 21.844591, "time_per_token": 0.08533043359375}}
{"outputs": [{"text": "# Check that the source_path is an existing directory.\n    if not os.path.isdir(source_path):\n        raise ValueError(\"source_path must be an existing directory.\")\n\n    # Get the name of the directory.\n    dir_name = os.path.basename(source_path)\n\n    # Initialize a list to store the filenames.\n    filenames = []\n\n    # Iterate over the files in the source directory without descending into subdirectories.\n    for file_name in os.listdir(source_path):\n        # Get the full path of the file.\n        file_path = os.path.join(source_path, file_name)\n\n        # If the file is a regular file, append its name to the filenames list.\n        if os.path.isfile(file_path):\n            filenames.append(file_name)\n\n            # Copy the file to the destination directory.\n            shutil.copy(file_path, os.path.join(destination_path, file_name))\n\n    return (dir_name, fil", "tokens": ["#", " Check", " that", " the", " source", "_", "path", " is", " an", " existing", " directory", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "source", "_", "path", " must", " be", " an", " existing", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Get", " the", " name", " of", " the", " directory", ".", "\n", "    ", "dir", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "source", "_", "path", ")", "\n", "\n", "    ", "#", " Initialize", " a", " list", " to", " store", " the", " fil", "en", "ames", ".", "\n", "    ", "fil", "en", "ames", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " source", " directory", " without", " descending", " into", " sub", "direct", "ories", ".", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "#", " Get", " the", " full", " path", " of", " the", " file", ".", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", "_", "name", ")", "\n", "\n", "        ", "#", " If", " the", " file", " is", " a", " regular", " file", ",", " append", " its", " name", " to", " the", " fil", "en", "ames", " list", ".", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "fil", "en", "ames", ".", "append", "(", "file", "_", "name", ")", "\n", "\n", "            ", "#", " Copy", " the", " file", " to", " the", " destination", " directory", ".", "\n", "            ", "sh", "util", ".", "copy", "(", "file", "_", "path", ",", " os", ".", "path", ".", "join", "(", "destination", "_", "path", ",", " file", "_", "name", "))", "\n", "\n", "    ", "return", " (", "dir", "_", "name", ",", " fil"], "logprobs": [-1.769902229309082, -1.3020879030227661, -1.4067798852920532, -0.5517832636833191, -0.06655333936214447, -1.5171332359313965, -0.003705304116010666, -1.0919077396392822, -1.0629303455352783, -0.2096855491399765, -0.18244506418704987, -1.9439811706542969, -0.09072401374578476, -0.004156641196459532, -0.6470021605491638, -0.03450631722807884, -0.8206731677055359, -3.313963316031732e-05, -0.0019349202048033476, -4.410734163684538e-06, -0.26169532537460327, -0.0007401349139399827, -0.00026008085114881396, -0.012712041847407818, -5.113947918289341e-05, -5.364403477869928e-06, -0.010062914341688156, -0.007390894927084446, -0.0030732564628124237, -0.03516761213541031, -0.005804231856018305, -1.0728830375228426e-06, -0.0609382763504982, -1.1311081647872925, -1.8126482963562012, -0.00459305988624692, -0.0011554239317774773, -0.641274094581604, -0.14793038368225098, -0.12459740042686462, -0.009427079930901527, -0.1140122041106224, -0.6171854734420776, -0.026201047003269196, -0.002096242504194379, -0.0012661544606089592, -0.07483789324760437, -0.000479344860650599, -0.14491432905197144, -1.5642656087875366, -0.12804000079631805, -1.5999974012374878, -0.007841045036911964, -0.009755436331033707, -1.9656487703323364, -1.302245020866394, -0.07096057385206223, -0.0004228651523590088, -1.4347310066223145, -0.008656476624310017, -0.01575651206076145, -0.004477950278669596, -0.12457814067602158, -7.510157047363464e-06, -0.0004419303731992841, -9.775113539944869e-06, -0.07910190522670746, -4.768370445162873e-07, -7.438383181579411e-05, -0.616837739944458, -3.2186455882765586e-06, -3.576278118089249e-07, -0.1861620843410492, -0.005478961393237114, -0.05479146167635918, -0.00021360022947192192, -0.011403147131204605, -2.7922725677490234, -0.6882866621017456, -0.022130439057946205, -0.10925109684467316, -0.38488543033599854, -0.39387446641921997, -1.0646628141403198, -3.671578815556131e-05, -9.65590606938349e-06, -0.7949028015136719, -0.0024701817892491817, -0.00017772526189219207, -0.23524445295333862, -0.00011789103882620111, -3.766942609217949e-05, -0.05535275116562843, -0.008079702034592628, -0.000490068516228348, -0.028579505160450935, -0.00021646064124070108, -0.023413382470607758, -1.042426347732544, -0.0016583750257268548, -0.37451398372650146, -0.22395622730255127, -0.26974084973335266, -0.023159604519605637, -0.013811376877129078, -0.5558581948280334, -0.1027713492512703, -1.8287242650985718, -0.040765076875686646, -0.00989036075770855, -0.011606312356889248, -0.012740878388285637, -0.0002961912250611931, -0.027015691623091698, -0.00120936194434762, -0.0006336349761113524, -0.06186990439891815, -0.7998705506324768, -1.0036933422088623, -0.204777330160141, -0.0028757192194461823, -0.02021765150129795, -1.537788011773955e-05, -0.0007650309125892818, 0.0, -0.00010048838157672435, -0.0011486368020996451, -3.2186455882765586e-06, -3.099436753473128e-06, -0.00044312194222584367, -0.0008927173912525177, -0.03970404341816902, -0.32462021708488464, -0.6219642758369446, -0.003387310542166233, -0.08781109005212784, -0.06676913797855377, -0.34559378027915955, -0.019831709563732147, -0.04504949599504471, -0.04274306073784828, -0.003422595327720046, -0.00016306500765495002, -0.4966738820075989, -0.0026680370792746544, -0.001311038387939334, -0.00035696811391972005, -0.0031781899742782116, -7.152555099310121e-07, -1.1086402082582936e-05, -1.645074735279195e-05, -0.000753357307985425, -1.883488948806189e-05, -0.0006750926841050386, -4.0649541915627196e-05, -2.3841855067985307e-07, -7.509902934543788e-05, -0.00038723601028323174, -2.50339189733495e-06, -1.1920928244535389e-07, -4.5536911784438416e-05, -0.0008812834857963026, -0.06202251464128494, -0.0005517867393791676, -0.0059973993338644505, -2.4022810459136963, -0.3857897222042084, -0.19594606757164001, -0.1331777721643448, -0.5308004021644592, -0.6008308529853821, -0.0005488081369549036, -0.9107054471969604, -1.7431491613388062, -0.35361725091934204, -0.19087286293506622, -0.013305091299116611, -0.004614300560206175, -0.9687381982803345, -4.0531076592742465e-06, -1.1444026313256472e-05, -0.0028292411006987095, -0.04153672605752945, -0.005099860019981861, -0.00010144196130568162, -0.01137804239988327, -0.0028307863976806402, -8.22540732769994e-06, -6.794906312279636e-06, -1.4305104514278355e-06, -2.8013790142722428e-05, -0.0003668589051812887, -4.792098479811102e-05, -0.00021431533969007432, -8.106198947643861e-06, -0.00013541258522309363, -0.013792799785733223, -0.0004198861715849489, -0.0013143719406798482, -0.019918305799365044, -1.1920922133867862e-06, 0.0, -6.496695277746767e-05, -9.131014667218551e-05, -0.00024256148026324809, -0.00854727067053318, -3.2186455882765586e-06, -0.0025038341991603374, -0.000331704446580261, -0.0018553201807662845, -0.07582850009202957, -1.6660575866699219, -0.012358162552118301, -0.3772751986980438, -0.00884484127163887, -0.00664560217410326, -0.02843097411096096, -0.007079871371388435, -0.004909958690404892, -0.03538936376571655, -0.17173229157924652, -0.05951954424381256, -0.0007033258443698287, -0.11596208810806274, -7.748573807475623e-06, -2.3007127310847864e-05, -0.0001456631434848532, -0.6613473892211914, -0.002067096997052431, -6.9141146923357155e-06, -0.0005820487276650965, -4.255681051290594e-05, -1.907563328742981, -3.4570634852570947e-06, -5.066266385256313e-05, -1.764281842042692e-05, -0.0011691170511767268, -0.00010179955279454589, -0.005413159728050232, -0.00010597144137136638, -2.729855441430118e-05, -0.01584932766854763, -0.01187894307076931, -8.34461570775602e-06, -0.0038757221773266792, -0.0018941095331683755, -0.0016289787599816918, -0.015511580742895603, -0.014112439006567001, -2.582504987716675, -1.248324990272522, -0.010082741267979145, -1.7046782886609435e-05, -5.006777428206988e-06, -0.0003299168893136084, -0.003257209435105324], "finish_reason": "length"}], "metrics": {"energy": 908.3162095966327, "energy_per_token": 3.5481101937368464, "time": 22.048565, "time_per_token": 0.08612720703125}}
{"outputs": [{"text": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"The specified source path does not exist or is not a directory.\")\n\n    shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    return pathlib.Path(source_path).name, list(pathlib.Path(source_path).glob('*'))", "tokens": ["if", " not", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " specified", " source", " path", " does", " not", " exist", " or", " is", " not", " a", " directory", ".", "\"", ")", "\n", "\n", "    ", "sh", "util", ".", "copy", "tree", "(", "source", "_", "path", ",", " destination", "_", "path", ",", " d", "irs", "_", "exist", "_", "ok", "=", "True", ")", "\n", "    ", "return", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "name", ",", " list", "(", "path", "lib", ".", "Path", "(", "source", "_", "path", ")", ".", "glob", "('", "*", "'))", "\n", "\n", "if"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -1.1850459575653076, -0.0038569599855691195, -7.211902266135439e-05, -0.0029269494116306305, -0.0029762755148112774, -0.008395261131227016, -4.7205765440594405e-05, -9.059495641849935e-05, -0.0009297577198594809, -0.00041607304592616856, -0.25960788130760193, -4.911301948595792e-05, -0.010970515199005604, -0.015120413154363632, -0.0255056731402874, -0.004533845465630293, -0.042915407568216324, -0.013826543465256691, -7.152555099310121e-07, -0.15962481498718262, -1.1834837198257446, -1.4203096628189087, -0.8415494561195374, -0.2775920331478119, -0.7079334855079651, -1.140751838684082, -0.0014581772265955806, -0.026803214102983475, -0.02290692739188671, -0.009664414450526237, -0.0014179424615576863, -0.0025969373527914286, -0.008518431335687637, -0.22077372670173645, -0.013368376530706882, -0.002538555534556508, -0.0009486941853538156, -0.29336658120155334, -0.0006370898918248713, -4.089555740356445, -0.0005536930402740836, -0.00022194306075107306, -0.26137274503707886, -0.1321326196193695, -0.004936767742037773, -0.08221641182899475, -0.0025414093397557735, -0.0015400703996419907, -0.006823452655225992, -0.0253963153809309, -0.00039593485416844487, -0.00013958434283267707, -0.19233179092407227, -0.04333021491765976, -3.707340147229843e-05, -8.344646857949556e-07, -0.004730699583888054, -1.0728830375228426e-06, -1.1205610462639015e-05, -0.007854173891246319, -0.0062356675043702126, -0.0862102061510086, -0.03677332028746605, -1.0584185123443604, -1.8418160676956177, -0.9394517540931702, -0.0004353767435532063, -7.283422019099817e-05, -0.008312981575727463, -0.000985375139862299, -0.019864782691001892, -4.792098479811102e-05, -2.3603161025675945e-05, -0.0026295154821127653, -0.007949027232825756, -0.06404995918273926, -0.003006820799782872, -2.2512807846069336, -0.02463013306260109, -0.8324970602989197, -0.006049773655831814, -0.0001294529065489769, -0.0007864719373174012, -0.0018866135505959392, -0.22587153315544128, -1.8596476365928538e-05, -2.5987286790041253e-05, -0.0006562701892107725, -0.00018916724366135895, -0.4322277903556824, -1.0024574995040894, -0.040649592876434326, -0.42375317215919495, -0.5208898186683655, -0.013898495584726334, -0.591342568397522], "finish_reason": "stop"}], "metrics": {"energy": 375.18786610603337, "energy_per_token": 3.8284476133268712, "time": 8.211238, "time_per_token": 0.08378814285714285}}
{"outputs": [{"text": "if not os.path.isdir(source_path):\n        raise ValueError(f'The specified source_path is not a directory: {source_path}')\n\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    source_dir_name = os.path.basename(source_path)\n    copied_files = []\n\n    for file_path in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, file_path)):\n            shutil.copy2(os.path.join(source_path, file_path), destination_path)\n            copied_files.append(file_path)\n\n    return source_dir_name, copied_files", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "The", " specified", " source", "_", "path", " is", " not", " a", " directory", ":", " {", "source", "_", "path", "}", "')", "\n", "\n", "    ", "destination", "_", "path", " =", " path", "lib", ".", "Path", "(", "destination", "_", "path", ")", "\n", "    ", "if", " not", " destination", "_", "path", ".", "exists", "():", "\n", "        ", "destination", "_", "path", ".", "mk", "dir", "(", "parents", "=", "True", ",", " exist", "_", "ok", "=", "True", ")", "\n", "\n", "    ", "source", "_", "dir", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "source", "_", "path", ")", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " os", ".", "list", "dir", "(", "source", "_", "path", "):", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", "_", "path", "))", ":", "\n", "            ", "sh", "util", ".", "copy", "2", "(", "os", ".", "path", ".", "join", "(", "source", "_", "path", ",", " file", "_", "path", ")", ",", " destination", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " source", "_", "dir", "_", "name", ",", " copied", "_", "files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -0.6570690274238586, -2.0265373677830212e-05, -0.0057183015160262585, -9.65590606938349e-06, -0.8682204484939575, -0.003172723576426506, -0.000580499938223511, -0.013192509301006794, -4.053033626405522e-05, -1.5258672647178173e-05, -0.01832975633442402, -0.018691591918468475, -0.004327575676143169, -0.029360612854361534, -0.009450815618038177, -8.344646857949556e-07, -0.12198456376791, -0.4738317131996155, -1.9763901233673096, -1.4545187950134277, -1.1332508325576782, -0.6729824542999268, -1.1624500751495361, -0.00208208616822958, -1.56009042263031, -0.11667626351118088, -0.27249059081077576, -0.33723315596580505, -0.6724128127098083, -0.1329030990600586, -0.004994179122149944, -4.565611743601039e-05, -8.344646857949556e-07, -0.033287230879068375, -0.028743073344230652, -0.001814387273043394, -0.28056570887565613, -0.0006739014061167836, -3.5134084224700928, -0.025737712159752846, -0.04577332362532616, -0.08975176513195038, -0.6684541702270508, -0.00016616393986623734, -4.8636207793606445e-05, -0.0025100174825638533, -0.0027799077797681093, -0.0041033364832401276, -4.410734163684538e-06, -3.576278118089249e-07, -0.002397997537627816, -0.12302939593791962, -0.15378089249134064, -0.49157434701919556, -0.047424525022506714, -0.01951611414551735, -3.0517112463712692e-05, -5.960446742392378e-06, -0.0004295380203984678, -0.08054494857788086, -0.005848201457411051, -0.0057596671395003796, -0.0011700696777552366, -0.18217992782592773, -7.450303382938728e-05, -0.00011383838864276186, -0.001176380319520831, -0.00036006642039865255, -1.311301275563892e-06, -0.24928432703018188, -0.04936692491173744, -0.0031680890824645758, -0.0036174117121845484, -0.4303574562072754, -0.00038425691309385, -5.364403477869928e-06, -5.125986263010418e-06, -7.068861305015162e-05, -0.013563970103859901, -0.00014184899919200689, -0.015301341190934181, -0.22845929861068726, -0.0013915151357650757, -1.8858914375305176, -0.00786292552947998, -0.799590528011322, -0.28840890526771545, -0.1335117220878601, -0.00816862192004919, -0.070755235850811, -4.6491513785440475e-06, -0.0029951734468340874, -6.6756979322235566e-06, -0.0947275310754776, -3.3378546504536644e-06, -9.7508447652217e-05, -0.37332502007484436, -3.4570634852570947e-06, -3.576278118089249e-07, -0.04410114139318466, -0.022850418463349342, -0.10104244947433472, -1.4602645635604858, -0.0002814135223161429, -0.007533237338066101, -0.15577825903892517, -0.010639491491019726, -0.04075454920530319, -0.004994534887373447, -0.6858035326004028, -0.00013159839727450162, -0.15284056961536407, -0.5916613936424255, -0.7380313277244568, -1.8721001148223877, -0.02415582910180092, -0.07469607889652252, -3.576272320060525e-06, -0.027817150577902794, -1.1920928244535389e-07, -0.00018034738604910672, -0.001857937895692885, -4.0531076592742465e-06, -4.6132929128361866e-05, -0.00044228785554878414, -0.003962285816669464, -0.0062674167566001415, -0.7343699336051941, -0.10200313478708267, -5.722029527532868e-06, -2.455681169521995e-05, -3.576278118089249e-07, -0.000270091783022508, -0.015329986810684204, -0.000248043768806383, -0.21057529747486115, -2.539125671319198e-05, -2.5748875486897305e-05, -9.536738616588991e-07, -0.00022110878489911556, -4.565611743601039e-05, -0.0006641327636316419, -1.4305104514278355e-06, -1.4305012882687151e-05, -5.543078441405669e-05, -0.0012022180017083883, -2.2411095415009186e-05, -8.702239938429557e-06, -0.000192504478036426, -0.006327357608824968, -0.02238762564957142, -0.0016724183224141598, -0.30383744835853577, -2.622600959512056e-06, -1.1920858014491387e-05, -0.0012450808426365256, -0.7374366521835327, -0.00010382589971413836, -0.06469189375638962, -7.867782187531702e-06, -1.1205610462639015e-05, -5.960462772236497e-07, -7.390703103737906e-05, -1.8596476365928538e-05, -0.00031025364296510816, -1.9073468138230965e-06, -2.861018856492592e-06, -5.07818695041351e-05, -0.0015412606298923492, -2.622600959512056e-06, -5.960462772236497e-07, -0.00017331528943032026, -8.320462075062096e-05, -0.37348371744155884, -8.106198947643861e-06, -0.0003583981015253812, -0.041608426719903946, -0.009747998788952827, -0.004267395939677954, -0.01610391214489937, -7.152555099310121e-07, -5.364403477869928e-06, -0.00011586471373448148, -0.00020597243565134704, -0.0001776060671545565, -0.0007371568935923278, -0.14340680837631226, -6.496695277746767e-05, -3.433168603805825e-05, -0.0010184821439906955, -0.006224294658750296, -0.042714960873126984, -0.001419966109097004, -0.026776868849992752, -0.14672628045082092, -2.7418097943154862e-06, -0.00027616979787126184, -9.298280929215252e-06, -4.172316494077677e-06, -0.00041797960875555873, -0.004890741314738989, -8.344646857949556e-07, -4.410734163684538e-06, -1.7233991622924805, -2.264974000354414e-06, -3.2186455882765586e-06, -1.6689286894688848e-06, -5.364274329622276e-05, -0.2874264419078827], "finish_reason": "stop"}], "metrics": {"energy": 767.5043369731901, "energy_per_token": 3.6374613126691475, "time": 18.509645, "time_per_token": 0.08772343601895734}}
{"outputs": [{"text": "if not os.path.exists(source_path) or not os.path.isdir(source_path):\n        raise ValueError('Source directory does not exist or is not a directory')\n\n    source_dir_path = pathlib.Path(source_path)\n    source_dir_name = source_dir_path.name\n    copied_files = []\n    for file in source_dir_path.iterdir():\n        if file.is_file():\n            shutil.copy(file, destination_path)\n            copied_files.append(file.name)\n    return source_dir_name, copied_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "source", "_", "path", ")", " or", " not", " os", ".", "path", ".", "is", "dir", "(", "source", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "('", "Source", " directory", " does", " not", " exist", " or", " is", " not", " a", " directory", "')", "\n", "\n", "    ", "source", "_", "dir", "_", "path", " =", " path", "lib", ".", "Path", "(", "source", "_", "path", ")", "\n", "    ", "source", "_", "dir", "_", "name", " =", " source", "_", "dir", "_", "path", ".", "name", "\n", "    ", "cop", "ied", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " source", "_", "dir", "_", "path", ".", "iter", "dir", "():", "\n", "        ", "if", " file", ".", "is", "_", "file", "():", "\n", "            ", "sh", "util", ".", "copy", "(", "file", ",", " destination", "_", "path", ")", "\n", "            ", "cop", "ied", "_", "files", ".", "append", "(", "file", ".", "name", ")", "\n", "    ", "return", " source", "_", "dir", "_", "name", ",", " copied", "_", "files", "\n", "\n", "if"], "logprobs": [-1.2172002792358398, -0.0942995548248291, -0.6570690274238586, -2.0265373677830212e-05, -0.0057183015160262585, -9.65590606938349e-06, -0.5451117753982544, -0.0006239851354621351, -0.010636778548359871, -4.470248313737102e-05, -1.2636104656849056e-05, -1.396416425704956, -0.07893811166286469, -0.012243472039699554, -0.0028089135885238647, -6.556489552167477e-06, -0.0005882440018467605, -7.867782187531702e-06, -0.0001147919538198039, -0.0006171943969093263, -0.00012015574611723423, -0.0009257083875127137, -1.1324817933200393e-05, -4.291525328881107e-06, -0.0014815079048275948, -0.008483916521072388, -0.0026328444946557283, -0.025808462873101234, -0.0052381413988769054, -8.344646857949556e-07, -2.7866406440734863, -1.7184463739395142, -1.1934411525726318, -0.40178942680358887, -0.0006187431863509119, -0.00361218536272645, -0.08228909224271774, -0.015752170234918594, -0.012800668366253376, -0.3294062912464142, -0.05447497218847275, -0.6218725442886353, -0.004164357203990221, -0.21593542397022247, -0.0004354958946350962, -1.281277060508728, -0.0267266146838665, -0.936564564704895, -0.5317558646202087, -2.510838508605957, -0.0664241760969162, -0.2178567349910736, -0.00018690270371735096, -3.755022044060752e-05, -0.005200667306780815, -0.0019189768936485052, -0.006454335991293192, -1.680836794548668e-05, -1.311301275563892e-06, -0.0025518732145428658, -0.07131706923246384, -0.1436121165752411, -1.7622578144073486, -0.000938332756049931, -0.08747976273298264, -0.03833090886473656, -0.021989108994603157, -0.001904937089420855, -0.14805477857589722, -9.536738616588991e-07, -0.009342523291707039, -5.722029527532868e-06, -9.512448741588742e-05, -0.0003937899600714445, -0.11161017417907715, -0.04946359619498253, -0.6758447885513306, -2.4524986743927, -0.0005247407825663686, -0.003058400936424732, -0.2957930266857147, -0.02944592386484146, -0.024775508791208267, -0.009954924695193768, -2.0106201171875, -0.6564587950706482, -0.3180081844329834, -0.3654046356678009, -0.36495932936668396, -1.4305104514278355e-06, -0.0004542034293990582, -2.145764938177308e-06, -4.279521817807108e-05, -0.00037996700848452747, -0.07385826855897903, -3.576278118089249e-07, -0.00012170527770649642, -0.014951431192457676, -0.00418287655338645, -0.07499030977487564, -0.1471884846687317, -0.00018308870494365692, -0.004656661301851273, -1.549708758830093e-05, -0.006322974804788828, -0.020039480179548264, -0.009964012540876865, -0.0019001776818186045, -1.0009434223175049, -7.510157047363464e-06, -2.8729025871143676e-05, -0.0014815079048275948, -0.3128402829170227, -0.16684481501579285, -0.051243387162685394, -0.030876152217388153, -0.00015066919149830937, -6.8662193370983e-05, -0.009296108968555927, -0.009339098818600178, -0.0021734442561864853, -0.029926404356956482, -5.960462772236497e-07, -6.9141146923357155e-06, -8.892617915989831e-05, -0.00025507534155622125, -0.00024303820100612938, -0.00037329382030293345, -0.011928064748644829, -0.00964481569826603, -0.0030978568829596043, -0.0002908283786382526, -0.009550359100103378, -1.1987969875335693, -0.025849703699350357, -0.20234191417694092, -3.2186455882765586e-06, -0.00019643761334009469, -3.0636318115284666e-05, -0.00038020533975213766, -0.0005588161875493824, -0.002235058695077896, -1.4305104514278355e-06, -1.0728830375228426e-06, -0.23055808246135712, -0.008414647541940212, -0.6009798645973206], "finish_reason": "stop"}], "metrics": {"energy": 516.4241578273774, "energy_per_token": 3.5130895090297782, "time": 12.398412, "time_per_token": 0.0843429387755102}}
