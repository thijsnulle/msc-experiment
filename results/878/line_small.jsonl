{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Data is empty or target column not in DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "Data", " is", " empty", " or", " target", " column", " not", " in", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -1.7871391773223877, -0.5218878388404846, -0.06753011792898178, -0.060783591121435165, -0.1473206877708435, -0.3899517357349396, -0.46937716007232666, -0.5088157653808594, -1.4951629638671875, -0.01125840749591589, -0.6176111698150635, -0.0009470268851146102, -0.0038938906509429216], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data.values, data[target].values,", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ".", "values", ",", " data", "[", "target", "]", ".", "values", ",", "\n"], "logprobs": [-0.013518339022994041, -0.000161038784426637, -0.0024639980401843786, -0.14301590621471405, -0.0289183109998703, -0.0014281797921285033, -0.0015184074873104692, -0.00024482590379193425, -0.005026204977184534, -0.00012563870404846966, -0.0005584587925113738, -0.00240013818256557, -0.015041385777294636, -2.264974000354414e-06, -6.079655122448457e-06, -9.536738616588991e-07, -4.410734163684538e-06, -0.00036614391137845814, -0.6368570923805237, -1.744140386581421, -2.1094565391540527, -0.32674285769462585, -0.32084259390830994, -0.017602883279323578, -0.0014263942139223218, -0.0003090619284193963, -1.8161776065826416, -0.004816952161490917, -0.0006964165368117392, -1.5829418897628784], "finish_reason": "stop"}, {"text": "values,", "tokens": ["values", ",", "\n"], "logprobs": [-2.370136260986328, -0.951682448387146, -0.7880153656005859], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021942604798823595, -3.2186455882765586e-06, -0.00014983485743869096, -6.794906312279636e-06, -0.00019572250312194228, -5.960462772236497e-07, -0.013841710053384304, -0.1349552720785141, -3.3378546504536644e-06, -6.508615479106084e-05, -0.0011333954753354192, -0.0010786197381094098, -1.2397689715726301e-05, -3.0397906812140718e-05, -0.016098985448479652, -0.031202511861920357], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.8410845667822286e-05, -0.00042989550274796784, -0.0021673778537660837, -0.008233060128986835, -2.47952248173533e-05, -0.008436398580670357, -0.0013218722306191921, -0.0001481661747675389, -4.529942543740617e-06, -0.000552263343706727, -0.0047798180021345615], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003979621455073357, -8.940656698541716e-06, -0.0018662670627236366, -7.259582343976945e-05, -0.002546165604144335, -0.00017927470616996288, -0.0005489272880367935, -0.0011145814787596464, -0.0016073177102953196], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.007624572142958641, -1.1920928244535389e-07, -6.139089964563027e-05, -1.1920922133867862e-06, -8.344646857949556e-07, -0.00021789084712509066, -0.10861382633447647, -0.00030191155383363366, -0.0014060382964089513, -0.0024585279170423746, -0.001658970140852034, -0.028795890510082245, -0.011791177093982697], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09303972125053406, -2.253030106658116e-05, -0.0010794533882290125, -0.0027699219062924385, -0.0525071881711483, -0.034969981759786606, -0.5406400561332703], "finish_reason": "stop"}], "metrics": {"energy": 168.35259876537322, "energy_per_token": 1.4267169386896035, "time": 8.198606, "time_per_token": 0.06947971186440678}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid data or target\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " data", " or", " target", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -2.0452053546905518, -1.1601555347442627, -0.33656442165374756, -0.03736019879579544, -2.563218355178833, -0.0019547895062714815, -0.007525901775807142], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data, data[target], test_size=test_size,", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", "\n"], "logprobs": [-0.013561617583036423, -0.00020811776630580425, -0.0027417470701038837, -0.161648690700531, -0.030245786532759666, -0.001209719106554985, -0.0014249657979235053, -0.0002494739310350269, -0.008235661312937737, -0.00011228884250158444, -0.00064876489341259, -0.0023994247894734144, -0.014852541498839855, -2.9802276912960224e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -3.933898824470816e-06, -0.00031192204914987087, -0.7080832123756409, -1.3646752834320068, -0.2434474676847458, -0.022175561636686325, -0.0010927902767434716, -0.00015925093612167984, -0.0018423503497615457, -0.21942906081676483, -2.9802276912960224e-06, -8.308542601298541e-05, -0.0035469732247292995, -0.005254150368273258, -4.3748852476710454e-05, -7.510157047363464e-06, -0.0032891719602048397, -1.9792394638061523], "finish_reason": "stop"}, {"text": "drop(target, axis=1), data[target], test_size=test_size, random_state=random_state", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", "\n"], "logprobs": [-0.4668617844581604, -0.13582056760787964, -0.356051504611969, -0.0023354417644441128, -0.0016718233237043023, -0.005956872832030058, -0.0018267625709995627, -0.0029905380215495825, -0.024046674370765686, -0.8650699853897095, -0.013837595470249653, -0.0006551980040967464, -0.0005511910421773791, -0.002887486945837736, -0.14462366700172424, -2.264974000354414e-06, -3.1470757676288486e-05, -0.003316855989396572, -0.005259012337774038, -2.884823152271565e-05, -4.768360213347478e-06, -0.0035764321219176054, -0.08674921840429306, -1.1920928244535389e-07, -2.7418097943154862e-06, -0.0008893824997358024, -0.0003401654539629817, -2.312633478140924e-05, -1.883488948806189e-05, -0.4341306984424591], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002190929837524891, -3.2186455882765586e-06, -0.00016282663273159415, -6.9141146923357155e-06, -0.00022575691400561482, -5.960462772236497e-07, -0.015683520585298538, -0.10830611735582352, -3.576272320060525e-06, -6.758938252460212e-05, -0.0011624491307884455, -0.001434488920494914, -1.0490362910786644e-05, -3.325883881188929e-05, -0.01660080999135971, -0.0302243884652853], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.674201020156033e-05, -0.000346362212439999, -0.002142754616215825, -0.009468411095440388, -2.682172998902388e-05, -0.006070864852517843, -0.0012873465893790126, -0.00013350549852475524, -4.6491513785440475e-06, -0.0007186928996816278, -0.00413171062245965], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004684307612478733, -8.4638240878121e-06, -0.0016180293168872595, -8.821098163025454e-05, -0.0022961937356740236, -0.00020811776630580425, -0.0006092122639529407, -0.0009984752396121621, -0.0016041041817516088], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008184702135622501, -1.1920928244535389e-07, -5.23315102327615e-05, -8.344646857949556e-07, -7.152555099310121e-07, -0.00019274283840786666, -0.13854099810123444, -0.00021407696476671845, -0.0015794672071933746, -0.002512633567675948, -0.0017178792040795088, -0.027265245094895363, -0.010915332473814487], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08179061859846115, -2.169585604860913e-05, -0.0009945451747626066, -0.0032342765480279922, -0.05186348780989647, -0.02585098147392273, -0.582225501537323], "finish_reason": "stop"}], "metrics": {"energy": 192.00226924800873, "energy_per_token": 1.3426732115245366, "time": 9.259683, "time_per_token": 0.06475302797202798}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Data is empty or target column not in data.\")", "tokens": [" Value", "Error", "(", "\"", "Data", " is", " empty", " or", " target", " column", " not", " in", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -1.7871391773223877, -0.5218878388404846, -0.06753011792898178, -0.060783591121435165, -0.1473206877708435, -0.3899517357349396, -0.46937716007232666, -0.5088157653808594, -0.7137890458106995, -0.9931461811065674, -0.3145062327384949, -0.001419847016222775, -0.003821927821263671], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[['feature1', 'feature2', 'feature3']], data[target],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "['", "feature", "1", "'", ",", " '", "feature", "2", "'", ",", " '", "feature", "3", "']", "]", ",", " data", "[", "target", "]", ",", "\n"], "logprobs": [-0.013518339022994041, -0.000161038784426637, -0.0024639980401843786, -0.14301590621471405, -0.0289183109998703, -0.0014281797921285033, -0.0015184074873104692, -0.00024482590379193425, -0.005026204977184534, -0.00012563870404846966, -0.0005584587925113738, -0.00240013818256557, -0.015041385777294636, -2.264974000354414e-06, -6.079655122448457e-06, -9.536738616588991e-07, -4.410734163684538e-06, -0.00036614391137845814, -0.6368570923805237, -0.6735857129096985, -2.634263515472412, -0.003557545365765691, -0.016697533428668976, -0.004604807589203119, -0.00013433984713628888, -0.04624978080391884, -0.00013350549852475524, -0.0010146714048460126, -0.9266484975814819, -0.00041333239641971886, -0.025632331147789955, -0.010488035157322884, -0.0007932615117169917, -0.05209990218281746, -0.0014836505288258195, -0.03676791861653328, -0.8783884644508362, -0.08083691447973251, -0.05863203853368759, -0.00023982033599168062, -0.001279012649320066, -0.6287966966629028], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.45345503091812134, -0.13041789829730988, -0.297548770904541, -0.0018553201807662845, -0.002013443037867546, -0.005923218093812466, -0.001809746609069407, -0.0034722534473985434, -0.02332976832985878, -0.7404872179031372], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002184625482186675, -2.9802276912960224e-06, -0.00012754580529872328, -7.510157047363464e-06, -0.00017689094238448888, -5.960462772236497e-07, -0.016621796414256096, -0.1267053186893463, -3.3378546504536644e-06, -5.543078441405669e-05, -0.001105412608012557, -0.001378777320496738, -1.4543427823809907e-05, -3.0874729418428615e-05, -0.0139238890260458, -0.037742651998996735], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.769562994828448e-05, -0.00032395837479270995, -0.0025038341991603374, -0.009029743261635303, -2.47952248173533e-05, -0.007843528874218464, -0.0018268815474584699, -0.00016866691294126213, -4.0531076592742465e-06, -0.0007122601964510977, -0.003951718099415302], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003747109789401293, -9.417489309271332e-06, -0.001652186387218535, -7.760223525110632e-05, -0.003138143103569746, -0.00016234986833296716, -0.0004528927383944392, -0.0007809926173649728, -0.0013873485149815679], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008673849515616894, -1.1920928244535389e-07, -5.924526340095326e-05, -1.311301275563892e-06, -8.344646857949556e-07, -0.00018308870494365692, -0.15224061906337738, -0.0002526917669456452, -0.001210433547385037, -0.0028567002154886723, -0.0018106985371559858, -0.029637472704052925, -0.013352143578231335], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09882815927267075, -2.7179348762729205e-05, -0.0010240792762488127, -0.0031836561392992735, -0.054434556514024734, -0.02513769268989563, -0.5091861486434937], "finish_reason": "stop"}], "metrics": {"energy": 223.96701005935668, "energy_per_token": 1.6347956938639174, "time": 9.239859, "time_per_token": 0.06744422627737226}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data:", "tokens": [" not", " data", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -1.795154094696045, -0.015186283737421036], "finish_reason": "stop"}, {"text": " ValueError('Input data is empty or target column is not in data')", "tokens": [" Value", "Error", "('", "Input", " data", " is", " empty", " or", " target", " column", " is", " not", " in", " data", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -1.6717700958251953, -0.6662478446960449, -0.2725411653518677, -0.18415513634681702, -0.10524629801511765, -0.22651216387748718, -0.20625822246074677, -1.3523218631744385, -0.09719637036323547, -0.1640191227197647, -0.9090001583099365, -0.7593366503715515, -0.0010629009921103716], "finish_reason": "stop"}, {"text": " X_test = train_test_split(", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -1.758432149887085, -0.010282989591360092, -3.2186455882765586e-06, -5.006777428206988e-06, -1.311301275563892e-06, -4.410734163684538e-06, -0.0004400238685775548, -1.1483441591262817], "finish_reason": "stop"}, {"text": "iloc[:,:-1], data.loc[:, target], test_size=test_size, random_state=random_state)", "tokens": ["il", "oc", "[:", ",", ":-", "1", "]", ",", " data", ".", "loc", "[:", ",", " target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-1.5831698179244995, -2.6225699912174605e-05, -0.0028275768272578716, -0.003741290420293808, -2.4465861320495605, -0.001522692502476275, -0.00044383687782101333, -0.0545516200363636, -0.7954453229904175, -1.1614573001861572, -2.2725236415863037, -0.004444720223546028, -0.0004418112221173942, -1.413224458694458, -0.0020038066431879997, -0.004419322125613689, -0.24490423500537872, -1.2278481335670222e-05, -5.4596363042946905e-05, -0.012612341903150082, -0.01024558674544096, -6.0437283536884934e-05, -1.2278481335670222e-05, -0.0028338772244751453, -0.08263982087373734, -2.3841855067985307e-07, -2.9802276912960224e-06, -0.003262793878093362, -0.0006101653561927378, -2.9682672902708873e-05, -3.2543604902457446e-05, -0.9158666729927063, -0.002408819505944848], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002191167790442705, -2.9802276912960224e-06, -0.00015245705435518175, -6.794906312279636e-06, -0.00018737945356406271, -7.152555099310121e-07, -0.01654171571135521, -0.1633344292640686, -3.576272320060525e-06, -5.090107151772827e-05, -0.0009810879128053784, -0.0009815642843022943, -1.2755313036905136e-05, -2.932505594799295e-05, -0.012324722483754158, -0.032146431505680084], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.352353764465079e-05, -0.0003668589051812887, -0.002006423892453313, -0.00898827612400055, -2.2649508537142538e-05, -0.007914965972304344, -0.0016265984158962965, -0.00013386306818574667, -4.172316494077677e-06, -0.0007108307327143848, -0.003789269831031561], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004017853643745184, -8.702239938429557e-06, -0.0017216873820871115, -8.022463589441031e-05, -0.002378612756729126, -0.0002522150462027639, -0.0005256939912214875, -0.0009751332108862698, -0.0013749678619205952], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.007746180985122919, -1.1920928244535389e-07, -6.282132380874828e-05, -1.0728830375228426e-06, -7.152555099310121e-07, -0.00017987063620239496, -0.1605982780456543, -0.00020454221521504223, -0.0015829188050702214, -0.0024871863424777985, -0.0017826156690716743, -0.03538936376571655, -0.007977055385708809], "finish_reason": "stop"}, {"text": " (mse, model, data)", "tokens": [" (", "m", "se", ",", " model", ",", " data", ")", "\n"], "logprobs": [-3.038456439971924, -0.09556863456964493, -1.811964830267243e-05, -0.0013234198559075594, -0.004197952803224325, -0.046144261956214905, -0.047685857862234116, -0.32966551184654236, -0.3378095328807831], "finish_reason": "stop"}], "metrics": {"energy": 182.03666483688355, "energy_per_token": 1.4111369367200275, "time": 8.618672, "time_per_token": 0.06681141085271318}}
{"outputs": [{"text": " pd.DataFrame.from_dict(data)", "tokens": [" pd", ".", "DataFrame", ".", "from", "_", "dict", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -2.5112698078155518, -0.0006451908848248422, -0.0022406489588320255, -0.00596398301422596, -0.0012047183699905872, -0.0065477825701236725, -0.11007270961999893, -0.07084807753562927], "finish_reason": "stop"}, {"text": " not data.empty and target in data:", "tokens": [" not", " data", ".", "empty", " and", " target", " in", " data", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -1.1742782592773438, -0.06631909310817719, -0.006142073310911655, -0.0070283799432218075, -0.7743380665779114, -0.010464677587151527], "finish_reason": "stop"}, {"text": " ValueError(\"The DataFrame is empty or the target column is not in the DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "The", " Data", "Frame", " is", " empty", " or", " the", " target", " column", " is", " not", " in", " the", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.8991299867630005, -2.4008641242980957, -0.013216039165854454, -0.20832327008247375, -0.033977679908275604, -0.03153730928897858, -0.0988582894206047, -0.025215229019522667, -0.035724490880966187, -1.2020015716552734, -0.07927206158638, -0.09850996732711792, -0.03158686310052872, -0.0786011815071106, -0.0011553048389032483, -1.5149216651916504, -0.002047943649813533, -0.0031375489197671413], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -0.21113738417625427, -0.028147174045443535, -0.001213648240081966, -0.0015504255425184965, -0.0003090619284193963, -0.005533615127205849, -0.00014101465058047324, -0.0005302215577103198, -0.0022136487532407045, -0.016814058646559715, -2.264974000354414e-06, -7.271740287251305e-06, -1.311301275563892e-06, -3.576272320060525e-06, -0.00034588552080094814, -0.7100345492362976], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.46156516671180725, -0.136750727891922, -0.3171561658382416, -0.0015813715290278196, -0.0017394188325852156, -0.005794987082481384, -0.001965259201824665, -0.00437505217269063, -0.03748708590865135, -0.6948446035385132], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002185339340940118, -3.4570634852570947e-06, -0.00014351768186315894, -7.390948667307384e-06, -0.0002294515579706058, -5.960462772236497e-07, -0.01714351400732994, -0.12573349475860596, -3.3378546504536644e-06, -5.94836674281396e-05, -0.0012811556225642562, -0.0010055014863610268, -1.2636104656849056e-05, -2.753696753643453e-05, -0.014729209244251251, -0.028597230091691017], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.61460001335945e-05, -0.00039545822073705494, -0.0019213564228266478, -0.008351876400411129, -2.3364747903542593e-05, -0.008151358924806118, -0.0014490114990621805, -0.00013648532330989838, -4.768360213347478e-06, -0.0006162413046695292, -0.00397641584277153], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0033818455412983894, -9.775113539944869e-06, -0.0017963001737371087, -6.05564855504781e-05, -0.0020534161012619734, -0.0001938155182870105, -0.0003805628512054682, -0.0010108605492860079, -0.0015711355954408646], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008540061302483082, -1.1920928244535389e-07, -4.994744449504651e-05, -1.311301275563892e-06, -7.152555099310121e-07, -0.00017534149810671806, -0.10696452111005783, -0.00026794656878337264, -0.0012747265864163637, -0.0023124876897782087, -0.0019546705298125744, -0.024888422340154648, -0.009812336415052414], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.10551386326551437, -2.3841574147809297e-05, -0.0009640575153753161, -0.002886654809117317, -0.05860438197851181, -0.026885611936450005, -0.6449993848800659], "finish_reason": "stop"}], "metrics": {"energy": 177.30463245391843, "energy_per_token": 1.3851924410462377, "time": 8.607505, "time_per_token": 0.0672461328125}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) < 1:", "tokens": [" len", "(", "data", ")", " <", " ", "1", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -2.2252306938171387, -0.0025324912276118994, -0.30037274956703186, -0.06760488450527191, -0.015633994713425636], "finish_reason": "stop"}, {"text": " ValueError(", "tokens": [" Value", "Error", "(", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -2.6873316764831543], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.01353162806481123, -0.0001998939987970516, -0.0034499194007366896, -0.16803188621997833, -0.028224708512425423, -0.0013629442546516657, -0.0013473490253090858, -0.0003156163729727268, -0.007046254351735115, -0.00012444675667211413, -0.0007113072206266224, -0.0021064728498458862, -0.016598699614405632, -2.3841830625315197e-06, -6.6756979322235566e-06, -1.0728830375228426e-06, -4.172316494077677e-06, -0.0003413571394048631, -0.6988353133201599], "finish_reason": "stop"}, {"text": "drop(columns=target), data[target], random_state=random_state, test_size=test_size,", "tokens": ["drop", "(", "columns", "=", "target", ")", ",", " data", "[", "target", "]", ",", " random", "_", "state", "=", "random", "_", "state", ",", " test", "_", "size", "=", "test", "_", "size", ",", "\n"], "logprobs": [-0.37718430161476135, -0.1390477567911148, -1.2999773025512695, -0.7760322093963623, -0.007844711653888226, -0.3874562084674835, -0.024684680625796318, -0.9494249820709229, -0.011732857674360275, -0.0004545609117485583, -0.0003326578007545322, -0.0016226709121838212, -2.9848990440368652, -1.311301275563892e-06, -1.156323378381785e-05, -0.0017986800521612167, -0.0008852138998918235, -7.915183232398704e-05, -2.4437606043647975e-05, -0.059490788727998734, -0.053484104573726654, 0.0, -3.0874729418428615e-05, -0.0018093895632773638, -0.001977513777092099, -2.1219027985353023e-05, -4.887569048150908e-06, -1.9178138971328735, -1.055519938468933], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021782023832201958, -3.576272320060525e-06, -0.00012230125139467418, -7.510157047363464e-06, -0.00023624490131624043, -7.152555099310121e-07, -0.01522432453930378, -0.11928257346153259, -3.814689989667386e-06, -8.022463589441031e-05, -0.0010549224680289626, -0.0010308672208338976, -8.583032467868179e-06, -2.658331868587993e-05, -0.012625643983483315, -0.03256584703922272], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.721882189391181e-05, -0.00041237910045310855, -0.0026418804191052914, -0.009091055020689964, -2.634490556374658e-05, -0.0074423677287995815, -0.001727637485601008, -0.00015948931104503572, -4.6491513785440475e-06, -0.0007711059297434986, -0.004111528396606445], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0038880719803273678, -8.583032467868179e-06, -0.0016920547932386398, -7.676783570786938e-05, -0.0021144431084394455, -0.0001618731184862554, -0.000617432699073106, -0.0009085579658858478, -0.0014467497821897268], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008387813344597816, -3.576278118089249e-07, -6.592056161025539e-05, -1.1920922133867862e-06, -8.344646857949556e-07, -0.0002079985715681687, -0.11904066801071167, -0.0002499506517779082, -0.001392229343764484, -0.002857770072296262, -0.0017177602276206017, -0.032522574067115784, -0.010062560439109802], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09746351093053818, -2.47952248173533e-05, -0.0010868363315239549, -0.003055429784581065, -0.05439075455069542, -0.023662438616156578, -0.5530662536621094], "finish_reason": "stop"}], "metrics": {"energy": 203.8223618240357, "energy_per_token": 1.6437287243873848, "time": 8.424025, "time_per_token": 0.06793568548387097}}
{"outputs": [{"text": " pd.DataFrame.from_dict(data)", "tokens": [" pd", ".", "DataFrame", ".", "from", "_", "dict", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -2.5112698078155518, -0.0006451908848248422, -0.0022406489588320255, -0.00596398301422596, -0.0012047183699905872, -0.0065477825701236725, -0.11007270961999893, -0.07084807753562927], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(f\"Data is empty or target column not in {data.columns}\")", "tokens": [" Value", "Error", "(", "f", "\"", "Data", " is", " empty", " or", " target", " column", " not", " in", " {", "data", ".", "columns", "}\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -1.170090913772583, -0.25436121225357056, -2.198007583618164, -0.7302016615867615, -0.08352821320295334, -0.05567550286650658, -0.32277682423591614, -0.3355616331100464, -1.4058895111083984, -0.376114159822464, -3.4977071285247803, -0.07002626359462738, -0.24356482923030853, -0.04003303125500679, -0.39891189336776733, -0.0020793499425053596, -0.005038421601057053], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013559147715568542, -0.00014828535495325923, -0.002711788285523653, -0.21617189049720764, -0.02839181013405323, -0.0012685356196016073, -0.001904699020087719, -0.0002910667099058628, -0.007999525405466557, -0.0001472126314183697, -0.0006600823253393173, -0.0025713734794408083, -0.015322120860219002, -2.622600959512056e-06, -6.6756979322235566e-06, -5.960462772236497e-07, -3.576272320060525e-06, -0.0002971446083392948, -0.5650407075881958], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.41612428426742554, -0.13980120420455933, -0.29418957233428955, -0.0021821276750415564, -0.0019751342479139566, -0.006118495482951403, -0.0021999699529260397, -0.0033273117151111364, -0.028976215049624443, -0.6901755332946777], "finish_reason": "stop"}, {"text": " RandomForestRegressor(n_estimators=100, random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "n", "_", "estim", "ators", "=", "1", "0", "0", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021961636375635862, -3.2186455882765586e-06, -0.00012242044613230973, -7.867782187531702e-06, -0.00023910524032544345, -7.152555099310121e-07, -0.013229332864284515, -2.1321609020233154, -2.622600959512056e-06, -0.04312734305858612, -0.0004153581103309989, -0.001032177242450416, -0.2417880892753601, -0.021627765148878098, -0.44645172357559204, -0.10603711009025574, -0.05112729221582413, -1.311301275563892e-06, -1.5258672647178173e-05, -0.00011634149996098131, -0.007253739051520824, -1.3112935448589269e-05, -3.266281055402942e-05, -0.05527842044830322, -0.026310084387660027], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.627816765103489e-05, -0.00036554806865751743, -0.0024776733480393887, -0.011061301454901695, -2.753696753643453e-05, -0.007421897258609533, -0.0013487775577232242, -0.00015793983766343445, -4.768360213347478e-06, -0.000686767278239131, -0.004426443483680487], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0032246517948806286, -9.775113539944869e-06, -0.0016540905926376581, -7.533743337262422e-05, -0.00224374164827168, -0.00021824838768225163, -0.00042465253500267863, -0.0009203489171341062, -0.0015389991458505392], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.008857130073010921, -1.1920928244535389e-07, -5.2927523938706145e-05, -1.311301275563892e-06, -8.344646857949556e-07, -0.00019178935326635838, -2.4540035724639893, -0.0003234816831536591, -0.0007479969062842429, -0.00279357866384089, -4.3748852476710454e-05, -0.00016282663273159415, -0.043403614312410355, -0.007746062707155943], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.10513018816709518, -2.3603161025675945e-05, -0.0008903353591449559, -0.002516795415431261, -0.05315578356385231, -0.021926017478108406, -0.6369947791099548], "finish_reason": "stop"}], "metrics": {"energy": 218.39332788467397, "energy_per_token": 1.6671246403410227, "time": 8.825881, "time_per_token": 0.06737313740458016}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -0.1087067574262619, -0.01162834744900465], "finish_reason": "stop"}, {"text": " ValueError(\"No data found or target not found.\")", "tokens": [" Value", "Error", "(", "\"", "No", " data", " found", " or", " target", " not", " found", ".", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -3.9307098388671875, -0.8991206884384155, -2.17455792427063, -0.9356961846351624, -0.23765434324741364, -2.0868422985076904, -2.8207826614379883, -1.6094458103179932, -0.05597696080803871, -0.0008156548719853163, -0.0053626494482159615], "finish_reason": "stop"}, {"text": " X_test = train_test_split(", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -1.6616569757461548, -0.009792503900825977, -3.6954811548639555e-06, -5.245195097813848e-06, -1.6689286894688848e-06, -4.887569048150908e-06, -0.00034707720624282956, -1.1631383895874023], "finish_reason": "stop"}, {"text": "drop([target], axis=1),", "tokens": ["drop", "([", "target", "]", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.4563230276107788, -2.513895034790039, -0.03354606032371521, -0.026917988434433937, -0.0009569118265062571, -0.003558733267709613, -0.006582127418369055, -0.003102016169577837, -0.010124871507287025, -0.020247207954525948, -0.6223297715187073], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021998509764671326, -3.3378546504536644e-06, -0.0001560327800689265, -6.556489552167477e-06, -0.00021324267436284572, -7.152555099310121e-07, -0.0140843465924263, -0.13225963711738586, -3.576272320060525e-06, -6.186770770000294e-05, -0.0011806668480858207, -0.0009882333688437939, -9.417489309271332e-06, -2.3483953555114567e-05, -0.011130858212709427, -0.02688305824995041], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.544376083184034e-05, -0.0003695997002068907, -0.0024062031880021095, -0.007286284118890762, -3.015949550899677e-05, -0.008256588131189346, -0.0014515112852677703, -0.00014482879487331957, -4.291525328881107e-06, -0.0006198153714649379, -0.004076623823493719], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003718962427228689, -8.821448318485636e-06, -0.0017754758009687066, -5.3165931603871286e-05, -0.0026049036532640457, -0.00015722469834145159, -0.00047958316281437874, -0.000863894063513726, -0.0017838055500760674], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.007880430668592453, -2.3841855067985307e-07, -5.793403761344962e-05, -1.0728830375228426e-06, -8.344646857949556e-07, -0.0001915509783430025, -1.9835313558578491, -0.00010346830822527409, -0.0008429311565123498, -0.0028501623310148716, -3.4689302992774174e-05, -0.00014208737411536276, -0.050345782190561295, -0.0067795258946716785], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08013847470283508, -2.4318398573086597e-05, -0.0010058587649837136, -0.003136360552161932, -0.05474394932389259, -0.025852955877780914, -0.5143200159072876], "finish_reason": "stop"}], "metrics": {"energy": 167.60209864711754, "energy_per_token": 1.5236554422465232, "time": 7.987431, "time_per_token": 0.07261300909090909}}
{"outputs": [{"text": " pd.DataFrame.from_dict(data, orient=\"index\")", "tokens": [" pd", ".", "DataFrame", ".", "from", "_", "dict", "(", "data", ",", " orient", "=", "\"", "index", "\"", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -2.5112698078155518, -0.0006451908848248422, -0.0022406489588320255, -0.00596398301422596, -0.0012047183699905872, -0.0065477825701236725, -2.2877230644226074, -0.054136134684085846, -0.9636157751083374, -0.0016870565013960004, -0.37054863572120667, -1.8000440832111053e-05, -0.0768350213766098, -0.07614073902368546], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -0.1087067574262619, -0.01162834744900465], "finish_reason": "stop"}, {"text": " ValueError(\"The input data is empty or the target column name is not in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "The", " input", " data", " is", " empty", " or", " the", " target", " column", " name", " is", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.8991299867630005, -0.41079944372177124, -1.1606006622314453, -0.2517281174659729, -0.2374713271856308, -0.051472362130880356, -0.14384369552135468, -0.031336188316345215, -0.025522639974951744, -0.4687584638595581, -0.03759926185011864, -0.015764491632580757, -0.030781947076320648, -0.012355925515294075, -0.6735816597938538, -0.0013223483692854643, -0.18031468987464905, -0.013372022658586502, -0.0019791792146861553, -0.003065056400373578], "finish_reason": "stop"}, {"text": " X_test = train_test_split(", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -1.6616569757461548, -0.009792503900825977, -3.6954811548639555e-06, -5.245195097813848e-06, -1.6689286894688848e-06, -4.887569048150908e-06, -0.00034707720624282956, -1.1631383895874023], "finish_reason": "stop"}, {"text": "drop(columns=[target], axis=1),", "tokens": ["drop", "(", "columns", "=[", "target", "]", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.4563230276107788, -0.1308383345603943, -1.3512499332427979, -0.6642447710037231, -0.002380515681579709, -1.3427746295928955, -0.0002562671434134245, -0.39616066217422485, -0.002915182150900364, -0.011580388993024826, -0.008479543030261993, -0.01946759782731533, -0.4241120517253876], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021990183740854263, -3.3378546504536644e-06, -0.0001461399078834802, -7.271740287251305e-06, -0.00023195437097456306, -7.152555099310121e-07, -0.014897054992616177, -0.1050541028380394, -3.099436753473128e-06, -6.389413465512916e-05, -0.0008659188752062619, -0.0011642351746559143, -1.0251946150674485e-05, -2.6464111215318553e-05, -0.015145305544137955, -0.02961050719022751], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.007967749610543e-05, -0.00045789722935296595, -0.0024970562662929296, -0.010059728287160397, -2.682172998902388e-05, -0.007759311236441135, -0.0016399280866608024, -0.0001541257370263338, -3.933898824470816e-06, -0.0006467396160587668, -0.004753598012030125], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0030490122735500336, -1.0251946150674485e-05, -0.0017203782917931676, -6.115249561844394e-05, -0.0019455092260614038, -0.0001760566228767857, -0.0005886013968847692, -0.0008397151832468808, -0.001500314916484058], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.00710946274921298, -2.3841855067985307e-07, -5.972207145532593e-05, -1.311301275563892e-06, -8.344646857949556e-07, -0.0001829695247579366, -0.1312446892261505, -0.00023684080224484205, -0.0011137479450553656, -0.002268005395308137, -0.0016914597945287824, -0.02779952809214592, -0.010733373463153839], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09202862530946732, -2.634490556374658e-05, -0.0009940688032656908, -0.003457047278061509, -0.048628661781549454, -0.025806836783885956, -0.5311447978019714], "finish_reason": "stop"}], "metrics": {"energy": 209.74136883354194, "energy_per_token": 1.6133951448733996, "time": 8.826372, "time_per_token": 0.06789516923076923}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -0.1087067574262619, -0.01162834744900465], "finish_reason": "stop"}, {"text": " ValueError('Dataframe or target column is invalid')", "tokens": [" Value", "Error", "('", "Data", "frame", " or", " target", " column", " is", " invalid", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -1.9984569549560547, -2.782175302505493, -2.2645907402038574, -0.08728892356157303, -0.5817608833312988, -1.2732754945755005, -2.502815008163452, -0.6969479918479919, -0.0021614301949739456], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[['feature1', 'feature2', 'feature3']],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "['", "feature", "1", "'", ",", " '", "feature", "2", "'", ",", " '", "feature", "3", "']", "]", ",", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -0.18991631269454956, -0.028831565752625465, -0.0013085383689031005, -0.0016631354810670018, -0.00026723151677288115, -0.007078924216330051, -0.0001287377526750788, -0.00047052756417542696, -0.001795467222109437, -0.017162146046757698, -2.0265558760002023e-06, -7.271740287251305e-06, -2.3841855067985307e-07, -3.6954811548639555e-06, -0.0003082277253270149, -0.6288948655128479, -0.8386990427970886, -2.6390597820281982, -0.003552675014361739, -0.0166956577450037, -0.004509754944592714, -0.00012396997772157192, -0.039895471185445786, -0.00013290952483657748, -0.0010090741561725736, -0.9735714793205261, -0.0003237200144212693, -0.0257866233587265, -0.013856993988156319, -0.0008110094931907952, -0.058606408536434174, -0.0013087764382362366, -0.04452446848154068, -0.6259435415267944], "finish_reason": "stop"}, {"text": "drop(target, axis=1), data[target], test_size=test_size, random_state=random_state", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", "\n"], "logprobs": [-0.38980597257614136, -0.15018241107463837, -0.3109258711338043, -0.0019654971547424793, -0.001735967700369656, -0.005226164124906063, -0.0015548295341432095, -0.004047536291182041, -0.02480737306177616, -0.995391845703125, -0.015908697620034218, -0.0007296522380784154, -0.0006967739318497479, -0.0026666102930903435, -0.15313252806663513, -2.7418097943154862e-06, -4.255681051290594e-05, -0.003481400664895773, -0.005030356347560883, -3.313963316031732e-05, -6.079655122448457e-06, -0.0033011725172400475, -0.0920005738735199, -1.1920928244535389e-07, -2.7418097943154862e-06, -0.0007189311436377466, -0.0003649522550404072, -2.3603161025675945e-05, -1.6093124941107817e-05, -0.4395529627799988], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021721357479691505, -2.9802276912960224e-06, -0.00015746307326480746, -7.271740287251305e-06, -0.00023624490131624043, -5.960462772236497e-07, -0.01563798449933529, -0.15633448958396912, -3.2186455882765586e-06, -6.925819616299123e-05, -0.0010362261673435569, -0.0009027220075950027, -1.0847986231965479e-05, -3.242440288886428e-05, -0.01748715341091156, -0.03427146375179291], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.769562994828448e-05, -0.00036459474358707666, -0.002191762439906597, -0.009300006553530693, -2.7417760065873154e-05, -0.007002928759902716, -0.0015566148795187473, -0.00017808281700126827, -4.291525328881107e-06, -0.0007344171172007918, -0.004677781835198402], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003631665138527751, -9.536697689327411e-06, -0.0016876515001058578, -6.770858453819528e-05, -0.001956217223778367, -0.00027640812913887203, -0.0004844683862756938, -0.0008061258122324944, -0.0014037764631211758], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.009193233214318752, -2.3841855067985307e-07, -5.2569914259947836e-05, -1.0728830375228426e-06, -7.152555099310121e-07, -0.0001776060671545565, -0.09217093884944916, -0.00027891082572750747, -0.0015401893761008978, -0.002842911286279559, -0.0016674199141561985, -0.033339694142341614, -0.009840430691838264], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08607611805200577, -2.9444261599564925e-05, -0.0009099871967919171, -0.0029155388474464417, -0.049563318490982056, -0.023975331336259842, -0.5455442070960999], "finish_reason": "stop"}], "metrics": {"energy": 231.81687901115419, "energy_per_token": 1.5352111192791669, "time": 9.458982, "time_per_token": 0.06264226490066226}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid data.\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " data", ".", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -2.0452053546905518, -1.1601555347442627, -2.7465758323669434, -0.5940759778022766, -0.002398948883637786, -0.007373500149697065], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013561617583036423, -0.00020811776630580425, -0.0027417470701038837, -0.161648690700531, -0.030245786532759666, -0.001209719106554985, -0.0014249657979235053, -0.0002494739310350269, -0.008235661312937737, -0.00011228884250158444, -0.00064876489341259, -0.0023994247894734144, -0.014852541498839855, -2.9802276912960224e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -3.933898824470816e-06, -0.00031192204914987087, -0.6913843750953674], "finish_reason": "stop"}, {"text": "drop(columns=target), data[target], test_size=test_size, random_state=random_state)", "tokens": ["drop", "(", "columns", "=", "target", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.4668617844581604, -0.13582056760787964, -1.2529401779174805, -0.6955397129058838, -0.006971321534365416, -0.30695146322250366, -0.027041565626859665, -1.0014441013336182, -0.010138441808521748, -0.0004596845537889749, -0.00030298411729745567, -0.0018114125123247504, -0.19036667048931122, -4.529942543740617e-06, -2.753696753643453e-05, -0.002931585069745779, -0.0043451422825455666, -3.373566141817719e-05, -5.722029527532868e-06, -0.003304261714220047, -0.09050178527832031, -2.3841855067985307e-07, -2.622600959512056e-06, -0.0007578838267363608, -0.00031537804170511663, -2.5033637939486653e-05, -1.7881233361549675e-05, -1.1699830293655396, -0.00160089076962322], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021921193692833185, -3.2186455882765586e-06, -0.0001565095444675535, -7.033323527139146e-06, -0.0002338612830499187, -5.960462772236497e-07, -0.014984783716499805, -0.10928326100111008, -2.9802276912960224e-06, -7.748303323751315e-05, -0.0012176964664831758, -0.0008915264043025672, -8.583032467868179e-06, -2.4676019165781327e-05, -0.014441492967307568, -0.034521978348493576], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.282132380874828e-05, -0.00026901919045485556, -0.002188194077461958, -0.010996926575899124, -3.194758028257638e-05, -0.007583283353596926, -0.0014854359906166792, -0.00015817821258679032, -5.245195097813848e-06, -0.0006915323319844902, -0.004626641049981117], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004480442497879267, -9.059865078597795e-06, -0.001476984703913331, -5.98412734689191e-05, -0.002219476969912648, -0.0001722425949992612, -0.0004435985756572336, -0.0008954567601904273, -0.0014851979212835431], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.009219218976795673, -1.1920928244535389e-07, -5.364274329622276e-05, -1.311301275563892e-06, -7.152555099310121e-07, -0.0002097863471135497, -0.12733399868011475, -0.0002851079625543207, -0.0011194637045264244, -0.00319268717430532, -0.001687889569438994, -0.0278962180018425, -0.012072943150997162], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data"], "logprobs": [-0.090370774269104, -2.3245540432981215e-05, -0.000927137560211122, -0.003289290703833103, -0.06388501822948456, -0.027199236676096916], "finish_reason": "stop"}], "metrics": {"energy": 202.51750585365292, "energy_per_token": 1.6201400468292233, "time": 8.405267, "time_per_token": 0.06724213600000001}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not len(data):", "tokens": [" not", " len", "(", "data", "):", "\n"], "logprobs": [-1.1494550704956055, -2.0192275047302246, -0.00021109737281221896, -0.0023825373500585556, -0.15584130585193634, -0.015406760387122631], "finish_reason": "stop"}, {"text": " ValueError(\"Input DataFrame is empty or target column not found\")", "tokens": [" Value", "Error", "(", "\"", "Input", " Data", "Frame", " is", " empty", " or", " target", " column", " not", " found", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.6702100038528442, -0.8851857781410217, -0.013438361696898937, -0.17885175347328186, -0.02484063059091568, -0.033550672233104706, -0.25445374846458435, -0.05598349869251251, -0.586331307888031, -1.4896045923233032, -0.9528979063034058, -0.0010789770167320967, -0.003811596194282174], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -0.21113738417625427, -0.028147174045443535, -0.001213648240081966, -0.0015504255425184965, -0.0003090619284193963, -0.005533615127205849, -0.00014101465058047324, -0.0005302215577103198, -0.0022136487532407045, -0.016814058646559715, -2.264974000354414e-06, -7.271740287251305e-06, -1.311301275563892e-06, -3.576272320060525e-06, -0.00034588552080094814, -0.7100345492362976], "finish_reason": "stop"}, {"text": "drop(columns=[target]),", "tokens": ["drop", "(", "columns", "=[", "target", "])", ",", "\n"], "logprobs": [-0.46156516671180725, -0.136750727891922, -1.3579906225204468, -0.6507387757301331, -0.0024431876372545958, -0.3391915261745453, -0.01739015430212021, -0.6027105450630188], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021830792538821697, -3.3378546504536644e-06, -0.00012861855793744326, -7.510157047363464e-06, -0.00023266946664080024, -7.152555099310121e-07, -0.014314820058643818, -0.13096435368061066, -2.861018856492592e-06, -7.045020902296528e-05, -0.0009685831028036773, -0.0009147512027993798, -1.1920858014491387e-05, -2.9682672902708873e-05, -0.014128188602626324, -0.0345161035656929], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.686121585313231e-05, -0.00040141629870049655, -0.002044017892330885, -0.008354121819138527, -3.194758028257638e-05, -0.009449871256947517, -0.0014991246862336993, -0.00015043080202303827, -4.410734163684538e-06, -0.0007587176514789462, -0.0038859345950186253], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004137883894145489, -8.702239938429557e-06, -0.001893633627332747, -6.41325386823155e-05, -0.002496580593287945, -0.0001961992384167388, -0.00040892345714382827, -0.0008174415561370552, -0.0014887689612805843], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.007908105850219727, -3.576278118089249e-07, -6.711257447022945e-05, -1.1920922133867862e-06, -7.152555099310121e-07, -0.00017963226127903908, -0.1523004025220871, -0.00023815179883968085, -0.0014304416254162788, -0.002871796488761902, -0.0016018429305404425, -0.03273291513323784, -0.010605404153466225], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09603375941514969, -2.634490556374658e-05, -0.0010237219976261258, -0.003252931870520115, -0.04650573059916496, -0.02441261149942875, -0.5650987029075623], "finish_reason": "stop"}], "metrics": {"energy": 165.15810202693936, "energy_per_token": 1.4615761241322067, "time": 7.982361, "time_per_token": 0.07064036283185841}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"The input DataFrame is empty or the target column name is not in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "The", " input", " Data", "Frame", " is", " empty", " or", " the", " target", " column", " name", " is", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -1.9074699878692627, -0.4001905918121338, -0.4653671383857727, -0.0034076261799782515, -0.11170388758182526, -0.026587093248963356, -0.024636298418045044, -0.04687787592411041, -0.006586508825421333, -0.008180445991456509, -0.07804463803768158, -0.017260456457734108, -0.00547291524708271, -0.005667450837790966, -0.008398689329624176, -0.01122257299721241, -0.0006324436399154365, -0.1681012213230133, -0.013152744621038437, -0.0024780300445854664, -0.0029182727448642254], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013561617583036423, -0.00020811776630580425, -0.0027417470701038837, -0.161648690700531, -0.030245786532759666, -0.001209719106554985, -0.0014249657979235053, -0.0002494739310350269, -0.008235661312937737, -0.00011228884250158444, -0.00064876489341259, -0.0023994247894734144, -0.014852541498839855, -2.9802276912960224e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -3.933898824470816e-06, -0.00031192204914987087, -0.6913843750953674], "finish_reason": "stop"}, {"text": "iloc[:,:-1], data[target], test_size=test_size, random_state=random_state)", "tokens": ["il", "oc", "[:", ",", ":-", "1", "]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-1.656301498413086, -2.539125671319198e-05, -0.002753516426309943, -0.00397974019870162, -2.4147896766662598, -0.0013762774178758264, -0.0004563482361845672, -0.05557176470756531, -0.8354052901268005, -0.3778502941131592, -0.016082562506198883, -0.0008232779800891876, -0.007427813485264778, -0.18419232964515686, -6.9141146923357155e-06, -4.3748852476710454e-05, -0.01532270759344101, -0.011815916746854782, -5.9126061387360096e-05, -1.0013530300057027e-05, -0.0021349035669118166, -0.09146688878536224, -2.3841855067985307e-07, -2.50339189733495e-06, -0.0033176876604557037, -0.0006324436399154365, -4.7205765440594405e-05, -2.1457441107486375e-05, -0.9049177169799805, -0.0022431467659771442], "finish_reason": "stop"}, {"text": " RandomForestRegressor(n_estimators=10, random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "n", "_", "estim", "ators", "=", "1", "0", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002193665597587824, -4.0531076592742465e-06, -0.00014232576359063387, -7.033323527139146e-06, -0.0002169373765354976, -5.960462772236497e-07, -0.014017580077052116, -2.178287982940674, -2.50339189733495e-06, -0.04415304213762283, -0.0003796095261350274, -0.0011725700460374355, -0.2534152567386627, -0.024234604090452194, -0.9353769421577454, -0.072541244328022, -1.6689286894688848e-06, -1.5020257706055418e-05, -0.00015209948469419032, -0.007058446295559406, -1.2278481335670222e-05, -2.7179348762729205e-05, -0.05005396157503128, -0.02996712736785412], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.0794889577664435e-05, -0.0003890234511345625, -0.002302616136148572, -0.011089595966041088, -3.2782016205601394e-05, -0.006456349510699511, -0.001503290724940598, -0.00013136000779923052, -4.529942543740617e-06, -0.0006302992696873844, -0.0034122595097869635], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0037123113870620728, -8.4638240878121e-06, -0.001772262854501605, -8.844937838148326e-05, -0.0024597172159701586, -0.00022921319759916514, -0.000406301929615438, -0.0011204162146896124, -0.0016400470631197095], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.006946698296815157, -1.1920928244535389e-07, -5.98412734689191e-05, -9.536738616588991e-07, -8.344646857949556e-07, -0.0001565095444675535, -0.12292134761810303, -0.0002686616498976946, -0.0012013844680041075, -0.0026719605084508657, -0.001732040662318468, -0.035510290414094925, -0.008254814893007278], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data"], "logprobs": [-0.08967689424753189, -2.0503786799963564e-05, -0.0009716795175336301, -0.0031607216224074364, -0.05076998472213745, -0.0239847581833601], "finish_reason": "stop"}], "metrics": {"energy": 204.3006669740677, "energy_per_token": 1.3711454159333403, "time": 9.682443, "time_per_token": 0.06498283892617449}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty or target not in data:", "tokens": [" data", ".", "empty", " or", " target", " not", " in", " data", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -1.6274964809417725, -0.053266894072294235, -0.0016687290044501424, -8.380061626667157e-05, -0.014230088330805302, -0.3682025671005249, -0.008048364892601967], "finish_reason": "stop"}, {"text": " ValueError('invalid input data')", "tokens": [" Value", "Error", "('", "invalid", " input", " data", "')", "\n"], "logprobs": [-0.003069453639909625, -7.092700980138034e-05, -1.5847572088241577, -4.58049201965332, -0.6601919531822205, -0.8199955224990845, -0.4996434450149536, -0.0019975011236965656], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013574318960309029, -0.00019000156316906214, -0.0027443624567240477, -0.12437278032302856, -0.02790120244026184, -0.0013766345800831914, -0.0012516292044892907, -0.00027771908207796514, -0.0068100737407803535, -0.00014006110723130405, -0.0006884350441396236, -0.0025977694895118475, -0.015071447938680649, -2.7418097943154862e-06, -5.8412379075889476e-06, -8.344646857949556e-07, -3.576272320060525e-06, -0.00033825874561443925, -0.7133396863937378], "finish_reason": "stop"}, {"text": "iloc[:, 0:].values,", "tokens": ["il", "oc", "[:", ",", " ", "0", ":]", ".", "values", ",", "\n"], "logprobs": [-1.4505521059036255, -3.218599158572033e-05, -0.0029270683880895376, -0.004755377769470215, -2.5701985359191895, -1.303903341293335, -1.7787821292877197, -2.787557601928711, -0.17582379281520844, -0.006134490482509136, -0.45756202936172485], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0022031813859939575, -2.622600959512056e-06, -0.0001472126314183697, -7.986990567587782e-06, -0.00017951308109331876, -7.152555099310121e-07, -0.012915059924125671, -0.1355450600385666, -3.4570634852570947e-06, -8.11782301752828e-05, -0.0010437285527586937, -0.0010402749758213758, -1.2159273865108844e-05, -2.5510462364763953e-05, -0.012465187348425388, -0.03129517659544945], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.222531374078244e-05, -0.00033158526639454067, -0.0025623366236686707, -0.009119406342506409, -2.6464111215318553e-05, -0.0092240609228611, -0.001546973828226328, -0.0001308832288486883, -4.768360213347478e-06, -0.0007008241955190897, -0.00415129866451025], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0031894787680357695, -9.298280929215252e-06, -0.001595296896994114, -6.115249561844394e-05, -0.002216741442680359, -0.0001915509783430025, -0.00047183825518004596, -0.0010246747406199574, -0.0016926499083638191], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.007885398343205452, -3.576278118089249e-07, -6.532455881824717e-05, -1.4305104514278355e-06, -8.344646857949556e-07, -0.00020466140995267779, -0.11651543527841568, -0.0003034608089365065, -0.001456272671930492, -0.003156324615702033, -0.0013669917825609446, -0.028705542907118797, -0.011804018169641495], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08634165674448013, -2.1576648578047752e-05, -0.0009373800130560994, -0.0033664004877209663, -0.05820666253566742, -0.02204286865890026, -0.5562028884887695], "finish_reason": "stop"}], "metrics": {"energy": 185.82901769638062, "energy_per_token": 1.6741352945619876, "time": 7.793838, "time_per_token": 0.07021475675675676}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -0.1087067574262619, -0.01162834744900465], "finish_reason": "stop"}, {"text": " ValueError('The input data is empty or the target column name is not in the DataFrame.')", "tokens": [" Value", "Error", "('", "The", " input", " data", " is", " empty", " or", " the", " target", " column", " name", " is", " not", " in", " the", " Data", "Frame", ".", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -1.9867000579833984, -0.4883139729499817, -1.2034432888031006, -0.2735503911972046, -0.3713408410549164, -0.08917827904224396, -0.16467542946338654, -0.026631668210029602, -0.03920118883252144, -0.6090148687362671, -0.03799803555011749, -0.02118903212249279, -0.032898806035518646, -0.012025830335915089, -0.5934730768203735, -0.001427227514795959, -0.301532506942749, -0.021436776965856552, -0.0012309125158935785], "finish_reason": "stop"}, {"text": " X_test = train_test_split(", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -1.758432149887085, -0.010282989591360092, -3.2186455882765586e-06, -5.006777428206988e-06, -1.311301275563892e-06, -4.410734163684538e-06, -0.0004400238685775548, -1.1483441591262817], "finish_reason": "stop"}, {"text": "values[:, :-1], data.values[:, -1], test_size=test_size,", "tokens": ["values", "[:", ",", " :-", "1", "]", ",", " data", ".", "values", "[:", ",", " -", "1", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", "\n"], "logprobs": [-2.546398162841797, -0.5573853254318237, -0.022266151383519173, -0.4865017831325531, -0.000834117061458528, -0.000259723310591653, -0.0037137367762625217, -0.6838157176971436, -0.16669921576976776, -0.010236265137791634, -0.0007164295529946685, -0.001010741456411779, -0.015855547040700912, -0.0002286172821186483, -0.020560119301080704, -0.0026251161471009254, -0.26293617486953735, -9.059865078597795e-06, -8.654219709569588e-05, -0.011369910091161728, -0.006922074127942324, -5.1377883210079744e-05, -1.3589766240329482e-05, -0.004049554467201233, -2.6554882526397705], "finish_reason": "stop"}, {"text": " RandomForestRegressor(n_estimators=100, random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "n", "_", "estim", "ators", "=", "1", "0", "0", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002191167790442705, -2.9802276912960224e-06, -0.00015245705435518175, -6.794906312279636e-06, -0.00018737945356406271, -7.152555099310121e-07, -0.01654171571135521, -2.096378803253174, -2.145764938177308e-06, -0.05081893131136894, -0.00036399890086613595, -0.000987995183095336, -0.24603241682052612, -0.020098600536584854, -0.5468881130218506, -0.1177758276462555, -0.04570545256137848, -1.1920922133867862e-06, -1.2397689715726301e-05, -0.000120751719805412, -0.006702678743749857, -1.490105023549404e-05, -3.313963316031732e-05, -0.05340047925710678, -0.020795993506908417], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.544376083184034e-05, -0.0003948624071199447, -0.002312130993232131, -0.00973277073353529, -2.7656173188006505e-05, -0.007875817827880383, -0.0014646052150055766, -0.00014172980445437133, -3.933898824470816e-06, -0.0006127863889560103, -0.00362691399641335], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003951599355787039, -9.059865078597795e-06, -0.001517931348644197, -6.4490144723095e-05, -0.0025398635771125555, -0.00018308870494365692, -0.0004634975048247725, -0.0009299959056079388, -0.0017128810286521912], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008674086071550846, -1.1920928244535389e-07, -6.139089964563027e-05, -1.4305104514278355e-06, -8.344646857949556e-07, -0.00015364897262770683, -0.13042406737804413, -0.0002610342635307461, -0.001705383649095893, -0.002949414076283574, -0.0017520328983664513, -0.03214770182967186, -0.009909010492265224], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08266232162714005, -2.4437606043647975e-05, -0.0010680215200409293, -0.0037187249399721622, -0.056911420077085495, -0.027147145941853523, -0.4499334692955017], "finish_reason": "stop"}], "metrics": {"energy": 193.80783368587487, "energy_per_token": 1.394300961768884, "time": 9.245692, "time_per_token": 0.06651576978417266}}
{"outputs": [{"text": " pd.DataFrame.from_dict(data)", "tokens": [" pd", ".", "DataFrame", ".", "from", "_", "dict", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -2.5112698078155518, -0.0006451908848248422, -0.0022406489588320255, -0.00596398301422596, -0.0012047183699905872, -0.0065477825701236725, -0.11007270961999893, -0.07084807753562927], "finish_reason": "stop"}, {"text": " data.empty or target not in data:", "tokens": [" data", ".", "empty", " or", " target", " not", " in", " data", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -1.6274964809417725, -0.053266894072294235, -0.0016687290044501424, -8.380061626667157e-05, -0.014230088330805302, -0.3682025671005249, -0.008048364892601967], "finish_reason": "stop"}, {"text": " ValueError(\"Input data is empty or the target column name is not in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " data", " is", " empty", " or", " the", " target", " column", " name", " is", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.003069453639909625, -7.092700980138034e-05, -0.2764533460140228, -0.3467771112918854, -1.6461036205291748, -0.7111791372299194, -0.25777167081832886, -0.12949083745479584, -0.053200431168079376, -1.7535696029663086, -0.03223266080021858, -0.028263647109270096, -0.6076533794403076, -0.047210197895765305, -0.021597666665911674, -0.031400423496961594, -0.03154562786221504, -0.4212193489074707, -0.0010676642414182425, -0.26613256335258484, -0.011366256512701511, -0.001158996019512415, -0.0024471119977533817], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013611715286970139, -0.00016246906307060272, -0.0026622111909091473, -0.19925621151924133, -0.029192283749580383, -0.0013515156460925937, -0.0011863820254802704, -0.00020823694649152458, -0.008000234141945839, -0.00015090756642166525, -0.0007730118231847882, -0.002541171619668603, -0.016567861661314964, -2.50339189733495e-06, -6.198863957251888e-06, -1.1920922133867862e-06, -4.0531076592742465e-06, -0.00034421717282384634, -0.6776136755943298], "finish_reason": "stop"}, {"text": "loc[:, data.columns != target], data[target], test_size=test_size, random_state=random_state)", "tokens": ["loc", "[:", ",", " data", ".", "columns", " ", "!", "=", " target", "]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-2.7619149684906006, -0.002590278862044215, -0.0006500753224827349, -0.26996028423309326, -0.00825351383537054, -0.00839313305914402, -0.3786856234073639, -1.5497195136049413e-06, -1.3708974620385561e-05, -0.007746062707155943, -0.0010470629204064608, -0.026814935728907585, -2.472346544265747, -0.43798714876174927, -0.001090885023586452, -0.00027652730932459235, -0.002471965504810214, -0.3777366280555725, -7.510157047363464e-06, -7.617183291586116e-05, -0.006827833596616983, -0.005684994161128998, -3.8742269680369645e-05, -5.602820692729438e-06, -0.0031733177602291107, -0.086561419069767, 0.0, -3.2186455882765586e-06, -0.0010271755745634437, -0.0005824061809107661, -2.610649426060263e-05, -2.4914430468925275e-05, -0.9685787558555603, -0.001747867907397449], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0022003266494721174, -3.6954811548639555e-06, -0.0001294529065489769, -7.986990567587782e-06, -0.0002090712368953973, -5.960462772236497e-07, -0.014511520974338055, -0.15877021849155426, -3.3378546504536644e-06, -5.519237674889155e-05, -0.0010305099422112107, -0.0009196343016810715, -1.0609570381348021e-05, -2.729855441430118e-05, -0.012744645588099957, -0.032444216310977936], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.747018051100895e-05, -0.00047946401173248887, -0.002587663009762764, -0.010573556646704674, -2.8729025871143676e-05, -0.007545187138020992, -0.0014290130930021405, -0.00015567521040793508, -4.529942543740617e-06, -0.0006521005416288972, -0.004575141705572605], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004650253802537918, -9.179073458653875e-06, -0.0016367146745324135, -5.9602869441732764e-05, -0.0020164174493402243, -0.00023016665363684297, -0.0004807746736332774, -0.000933807052206248, -0.0014447261346504092], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.008720765821635723, -1.1920928244535389e-07, -5.590759246842936e-05, -5.960462772236497e-07, -8.344646857949556e-07, -0.00015245705435518175, -2.1942532062530518, -0.00021646064124070108, -0.0010351543314754963, -0.0026299909222871065, -3.683499380713329e-05, -0.00015400654228869826, -0.04850408807396889, -0.007764515932649374], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09099365025758743, -2.038458114839159e-05, -0.0008398343343287706, -0.002971045905724168, -0.049186497926712036, -0.024562787264585495, -0.5273618102073669], "finish_reason": "stop"}], "metrics": {"energy": 232.97482229995728, "energy_per_token": 1.5128235214282941, "time": 9.6790285, "time_per_token": 0.06285083441558441}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Input DataFrame is empty or target column not present.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " Data", "Frame", " is", " empty", " or", " target", " column", " not", " present", ".", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -1.603308916091919, -0.9122382402420044, -0.013404722325503826, -0.18022628128528595, -0.02530972845852375, -0.03266369178891182, -0.2710734009742737, -0.051557280123233795, -0.5180237293243408, -2.5905673503875732, -1.0341126918792725, -0.03079316020011902, -0.0006422125734388828, -0.0026628058403730392], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013561617583036423, -0.00020811776630580425, -0.0027417470701038837, -0.161648690700531, -0.030245786532759666, -0.001209719106554985, -0.0014249657979235053, -0.0002494739310350269, -0.008235661312937737, -0.00011228884250158444, -0.00064876489341259, -0.0023994247894734144, -0.014852541498839855, -2.9802276912960224e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -3.933898824470816e-06, -0.00031192204914987087, -0.6913843750953674], "finish_reason": "stop"}, {"text": "drop(target, axis=1),  # Target column is excluded from X_train", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "  ", "#", " Target", " column", " is", " excluded", " from", " X", "_", "train", "\n"], "logprobs": [-0.4668617844581604, -0.13582056760787964, -0.356051504611969, -0.0023354417644441128, -0.0016718233237043023, -0.005956872832030058, -0.0018267625709995627, -0.0029905380215495825, -0.024046674370765686, -2.8873610496520996, -0.034454260021448135, -4.904531478881836, -0.644375741481781, -1.1220594644546509, -2.136399745941162, -0.966857373714447, -1.2552703619003296, -0.3121860921382904, -0.021020838990807533, -0.2696719467639923], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002190929837524891, -3.2186455882765586e-06, -0.00016282663273159415, -6.9141146923357155e-06, -0.00022575691400561482, -5.960462772236497e-07, -0.015683520585298538, -0.10830611735582352, -3.576272320060525e-06, -6.758938252460212e-05, -0.0011624491307884455, -0.001434488920494914, -1.0490362910786644e-05, -3.325883881188929e-05, -0.01660080999135971, -0.0302243884652853], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.674201020156033e-05, -0.000346362212439999, -0.002142754616215825, -0.009468411095440388, -2.682172998902388e-05, -0.006070864852517843, -0.0012873465893790126, -0.00013350549852475524, -4.6491513785440475e-06, -0.0007186928996816278, -0.00413171062245965], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004684307612478733, -8.4638240878121e-06, -0.0016180293168872595, -8.821098163025454e-05, -0.0022961937356740236, -0.00020811776630580425, -0.0006092122639529407, -0.0009984752396121621, -0.0016041041817516088], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.008184702135622501, -1.1920928244535389e-07, -5.23315102327615e-05, -8.344646857949556e-07, -7.152555099310121e-07, -0.00019274283840786666, -2.0726382732391357, -0.0001264730526600033, -0.0008735416340641677, -0.002171184169128537, -3.564294092939235e-05, -0.0001267114421352744, -0.06732653081417084, -0.006143969018012285], "finish_reason": "stop"}, {"text": " mse, model, data<|endoftext|>from collections import namedtuple", "tokens": [" m", "se", ",", " model", ",", " data", "<", "|", "end", "of", "text", "|>", "from", " collections", " import", " named", "tuple", "\n"], "logprobs": [-0.08073509484529495, -2.074220174108632e-05, -0.0009545299108140171, -0.0027941730804741383, -0.05566783621907234, -0.03066183626651764, -1.5966038703918457, -3.576278118089249e-07, -1.5497195136049413e-06, -7.295342220459133e-05, -0.0001646144810365513, -0.11299282312393188, -1.052713394165039, -2.8911027908325195, -0.03559024631977081, -1.7865341901779175, -3.135155202471651e-05, -0.06640665978193283], "finish_reason": "stop"}], "metrics": {"energy": 183.4669939336777, "energy_per_token": 1.3391751382020272, "time": 9.055076, "time_per_token": 0.06609544525547445}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid input data: target not in data.columns\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " input", " data", ":", " target", " not", " in", " data", ".", "columns", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.9874078035354614, -0.6299601197242737, -0.6431517601013184, -3.3781585693359375, -1.9363305568695068, -1.7021374702453613, -0.24510137736797333, -1.6019034385681152, -1.1096510887145996, -0.140132337808609, -0.27675241231918335, -0.0012963948538526893, -0.005612448789179325], "finish_reason": "stop"}, {"text": " X_test = train_test_split(data, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -1.6616569757461548, -0.009792503900825977, -3.6954811548639555e-06, -5.245195097813848e-06, -1.6689286894688848e-06, -4.887569048150908e-06, -0.00034707720624282956, -0.37993720173835754, -0.1478653997182846, -0.05512714385986328, -7.629365427419543e-06, -0.0003400462737772614, -0.01108358334749937, -0.005668991710990667, -6.0794889577664435e-05, -6.556489552167477e-06, -0.0028436246793717146, -0.061361148953437805, 0.0, -2.7418097943154862e-06, -0.0004573014739435166, -0.0005728749092668295, -2.098061486321967e-05, -2.7417760065873154e-05, -0.08183412253856659, -0.0036064840387552977], "finish_reason": "stop"}, {"text": "iloc[:, :-1], data[target], test_size=test_size, random_state=random_state)", "tokens": ["il", "oc", "[:", ",", " :-", "1", "]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-1.6716283559799194, -2.8132995794294402e-05, -0.002558888401836157, -0.0038903281092643738, -0.4968661069869995, -0.000681883015204221, -0.00031132620642893016, -0.023873955011367798, -0.7741190791130066, -0.5751911401748657, -0.02471119724214077, -0.0004812512779608369, -0.005505636800080538, -0.12746991217136383, -3.576272320060525e-06, -4.0411134250462055e-05, -0.007499280385673046, -0.005657138302922249, -3.194758028257638e-05, -6.079655122448457e-06, -0.0017220443114638329, -0.08467740565538406, -2.3841855067985307e-07, -2.50339189733495e-06, -0.0007859955076128244, -0.0003924791526515037, -2.4676019165781327e-05, -2.0146166207268834e-05, -0.9623587131500244, -0.001662064460106194], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0022047278471291065, -2.861018856492592e-06, -0.00017450717859901488, -6.9141146923357155e-06, -0.0002335037279408425, -5.960462772236497e-07, -0.011852907948195934, -0.13076919317245483, -3.4570634852570947e-06, -6.472854875028133e-05, -0.0009734659106470644, -0.0007259594276547432, -9.65590606938349e-06, -2.90866428258596e-05, -0.01338990218937397, -0.029679711908102036], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.615896563744172e-05, -0.00036840804386883974, -0.0024097710847854614, -0.009157679043710232, -2.884823152271565e-05, -0.0087355375289917, -0.001583870965987444, -0.00013207517622504383, -4.291525328881107e-06, -0.0006575806182809174, -0.0051688845269382], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0038729910738766193, -9.775113539944869e-06, -0.0016389759257435799, -6.55629628454335e-05, -0.0018744770204648376, -0.00018606838420964777, -0.0004862556525040418, -0.0007111880695447326, -0.0016215997748076916], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.00904970895498991, -2.3841855067985307e-07, -6.508615479106084e-05, -9.536738616588991e-07, -7.152555099310121e-07, -0.00018845213344320655, -2.0094685554504395, -0.00021860594279132783, -0.0011373248416930437, -0.002388245891779661, -5.0424259825376794e-05, -0.0001429217227268964, -0.04943625256419182, -0.006831030361354351], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.07922933250665665, -2.5033637939486653e-05, -0.0009685831028036773, -0.0030036119278520346, -0.052194949239492416, -0.028697550296783447, -0.5038700103759766], "finish_reason": "stop"}], "metrics": {"energy": 208.79905895614627, "energy_per_token": 1.4301305407955225, "time": 9.47606, "time_per_token": 0.06490452054794521}}
{"outputs": [{"text": " pd.DataFrame.from_dict(data)", "tokens": [" pd", ".", "DataFrame", ".", "from", "_", "dict", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -2.5112698078155518, -0.0006451908848248422, -0.0022406489588320255, -0.00596398301422596, -0.0012047183699905872, -0.0065477825701236725, -0.11007270961999893, -0.07084807753562927], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError(f'Empty input dataframe or target not in {data}')", "tokens": [" Value", "Error", "(", "f", "'", "Empty", " input", " data", "frame", " or", " target", " not", " in", " {", "data", "}", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -1.4043821096420288, -1.6238058805465698, -2.5312328338623047, -2.646937608718872, -1.0624306201934814, -2.9394140243530273, -0.1270485818386078, -0.3353191316127777, -2.582740545272827, -0.20689313113689423, -2.5321974754333496, -0.11892890930175781, -1.2089039087295532, -0.2528942823410034, -0.0017259714659303427], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.01353162806481123, -0.0001998939987970516, -0.0034499194007366896, -0.16803188621997833, -0.028224708512425423, -0.0013629442546516657, -0.0013473490253090858, -0.0003156163729727268, -0.007046254351735115, -0.00012444675667211413, -0.0007113072206266224, -0.0021064728498458862, -0.016598699614405632, -2.3841830625315197e-06, -6.6756979322235566e-06, -1.0728830375228426e-06, -4.172316494077677e-06, -0.0003413571394048631, -0.6988353133201599], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.37718430161476135, -0.1390477567911148, -0.3377085030078888, -0.0022888195235282183, -0.0015845850575715303, -0.005988275166600943, -0.0013941340148448944, -0.004245317075401545, -0.02711164578795433, -0.715630292892456], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021772508043795824, -3.576272320060525e-06, -0.0001110968878492713, -6.794906312279636e-06, -0.0002584123576525599, -7.152555099310121e-07, -0.016462448984384537, -0.1069323867559433, -3.099436753473128e-06, -7.045020902296528e-05, -0.0009597701136954129, -0.0008299481705762446, -9.65590606938349e-06, -2.7656173188006505e-05, -0.011409039609134197, -0.029914140701293945], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.627816765103489e-05, -0.00035398892941884696, -0.0021401375997811556, -0.009201973676681519, -2.407998726994265e-05, -0.008036185055971146, -0.0015326907159760594, -0.0001299296854995191, -4.529942543740617e-06, -0.0006781900301575661, -0.0046298447996377945], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004112240858376026, -8.22540732769994e-06, -0.0017085968283936381, -6.615896563744172e-05, -0.0024091764353215694, -0.0002131234941771254, -0.0005156855913810432, -0.0009039129945449531, -0.001293299370445311], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008095192722976208, -1.1920928244535389e-07, -5.829164365422912e-05, -9.536738616588991e-07, -8.344646857949556e-07, -0.00022182388056535274, -0.16120357811450958, -0.0002637753786984831, -0.0013975863112136722, -0.002610729541629553, -0.0017266854410991073, -0.031096316874027252, -0.013806791044771671], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09261298179626465, -2.109982233378105e-05, -0.0008744944934733212, -0.0028136686887592077, -0.048342928290367126, -0.027164781466126442, -0.46778351068496704], "finish_reason": "stop"}], "metrics": {"energy": 170.46271883106226, "energy_per_token": 1.420522656925519, "time": 8.200382, "time_per_token": 0.06833651666666667}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError(\"Invalid input: the input data and the target column must be specified.\")", "tokens": [" Value", "Error", "(", "\"", "Invalid", " input", ":", " the", " input", " data", " and", " the", " target", " column", " must", " be", " specified", ".", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.9874078035354614, -0.6299601197242737, -2.3870863914489746, -2.77862811088562, -1.4190244674682617, -1.059775471687317, -3.44313383102417, -2.285820960998535, -0.06455276906490326, -0.08100304007530212, -1.4132976531982422, -0.44482362270355225, -1.2107456922531128, -0.626514196395874, -0.02654356136918068, -0.0037557794712483883, -0.002690626075491309], "finish_reason": "stop"}, {"text": " X_test = train_test_split(", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -1.6616569757461548, -0.009792503900825977, -3.6954811548639555e-06, -5.245195097813848e-06, -1.6689286894688848e-06, -4.887569048150908e-06, -0.00034707720624282956, -1.1631383895874023], "finish_reason": "stop"}, {"text": "values[:, :-1],  # features", "tokens": ["values", "[:", ",", " :-", "1", "]", ",", "  ", "#", " features", "\n"], "logprobs": [-2.601958751678467, -0.41414621472358704, -0.02076820470392704, -0.5371341705322266, -0.0009438112610951066, -0.00024029705673456192, -0.003036057809367776, -2.5804245471954346, -0.030654899775981903, -3.182812452316284, -0.3183966875076294], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0022047278471291065, -2.861018856492592e-06, -0.00017450717859901488, -6.9141146923357155e-06, -0.0002335037279408425, -5.960462772236497e-07, -0.011852907948195934, -0.13076919317245483, -3.4570634852570947e-06, -6.472854875028133e-05, -0.0009734659106470644, -0.0007259594276547432, -9.65590606938349e-06, -2.90866428258596e-05, -0.01338990218937397, -0.029679711908102036], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.615896563744172e-05, -0.00036840804386883974, -0.0024097710847854614, -0.009157679043710232, -2.884823152271565e-05, -0.0087355375289917, -0.001583870965987444, -0.00013207517622504383, -4.291525328881107e-06, -0.0006575806182809174, -0.0051688845269382], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0038729910738766193, -9.775113539944869e-06, -0.0016389759257435799, -6.55629628454335e-05, -0.0018744770204648376, -0.00018606838420964777, -0.0004862556525040418, -0.0007111880695447326, -0.0016215997748076916], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.00904970895498991, -2.3841855067985307e-07, -6.508615479106084e-05, -9.536738616588991e-07, -7.152555099310121e-07, -0.00018845213344320655, -0.14847803115844727, -0.00024720950750634074, -0.001334610627964139, -0.003232731716707349, -0.0018888743361458182, -0.028783034533262253, -0.010623921640217304], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09491977095603943, -2.0861407392658293e-05, -0.0011076750233769417, -0.003102729329839349, -0.05516866222023964, -0.029161833226680756, -0.5076981782913208], "finish_reason": "stop"}], "metrics": {"energy": 161.67546412086483, "energy_per_token": 1.443530929650579, "time": 7.9957566, "time_per_token": 0.07139068392857142}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError('Input DataFrame is empty or target column name not found in DataFrame')", "tokens": [" Value", "Error", "('", "Input", " Data", "Frame", " is", " empty", " or", " target", " column", " name", " not", " found", " in", " Data", "Frame", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -1.6717700958251953, -1.1168551445007324, -0.015988828614354134, -0.19757726788520813, -0.03775171935558319, -0.05877547711133957, -0.17795108258724213, -0.09926510602235794, -1.2876615524291992, -1.2861723899841309, -2.312147855758667, -1.524939775466919, -0.5863741636276245, -0.0016277885297313333, -0.6118943691253662, -0.001292346976697445], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data[target], test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ".", "il", "oc", "[:", ",", " :-", "1", "]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -0.18991631269454956, -0.028831565752625465, -0.0013085383689031005, -0.0016631354810670018, -0.00026723151677288115, -0.007078924216330051, -0.0001287377526750788, -0.00047052756417542696, -0.001795467222109437, -0.017162146046757698, -2.0265558760002023e-06, -7.271740287251305e-06, -2.3841855067985307e-07, -3.6954811548639555e-06, -0.0003082277253270149, -0.6288948655128479, -1.5031049251556396, -1.1745648384094238, -4.1126360883936286e-05, -0.003792951349169016, -0.004087190609425306, -0.5336723327636719, -0.0007862337515689433, -0.00032944019767455757, -0.01458823960274458, -0.20199550688266754, -0.3266608417034149, -0.01693045347929001, -0.0003723404952324927, -0.0049838596023619175, -0.33221250772476196, -4.410734163684538e-06, -6.723177648382261e-05, -0.0077932593412697315, -0.00956228468567133, -5.4596363042946905e-05, -6.794906312279636e-06, -0.0037139742635190487, -0.49078798294067383, -5.960462772236497e-07, -4.291525328881107e-06, -0.0013462775386869907, -0.0006897454150021076, -2.777537883957848e-05, -3.671578815556131e-05, -0.02827187441289425, -0.002542122732847929], "finish_reason": "stop"}, {"text": "iloc[:, :-1],", "tokens": ["il", "oc", "[:", ",", " :-", "1", "]", ",", "\n"], "logprobs": [-1.8267567157745361, -2.5748875486897305e-05, -0.0033394305501133204, -0.004126249346882105, -0.5321925282478333, -0.0006323245470412076, -0.0003303935518488288, -0.022181274369359016, -1.0253942012786865], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021780834067612886, -2.9802276912960224e-06, -0.00013386306818574667, -7.629365427419543e-06, -0.0002090712368953973, -5.960462772236497e-07, -0.01560242474079132, -0.13762933015823364, -2.9802276912960224e-06, -6.186770770000294e-05, -0.0012815127847716212, -0.0007767044589854777, -1.1324817933200393e-05, -2.5033637939486653e-05, -0.010832788422703743, -0.03324064612388611], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.0794889577664435e-05, -0.0003507714136503637, -0.0023624387104064226, -0.010148236528038979, -3.0517112463712692e-05, -0.008815300650894642, -0.0017463208641856909, -0.0001934579631779343, -4.6491513785440475e-06, -0.0008126770262606442, -0.00444970466196537], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0039406754076480865, -8.4638240878121e-06, -0.0015259062638506293, -7.772143726469949e-05, -0.0020122535061091185, -0.0001740304142003879, -0.0003281293320469558, -0.0010706413304433227, -0.0014460355741903186], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008591593243181705, -1.1920928244535389e-07, -6.353653589030728e-05, -1.0728830375228426e-06, -8.344646857949556e-07, -0.00018916724366135895, -0.0970713198184967, -0.00027295202016830444, -0.0013853248674422503, -0.002948581939563155, -0.0016569469589740038, -0.031584784388542175, -0.012772186659276485], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09383449703454971, -2.3603161025675945e-05, -0.0010633773636072874, -0.003120079869404435, -0.05570763722062111, -0.024595821276307106, -0.584083616733551], "finish_reason": "stop"}], "metrics": {"energy": 199.52200202846532, "energy_per_token": 1.3572925308058865, "time": 9.472139, "time_per_token": 0.06443631972789116}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) == 0 or target not in data:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", " or", " target", " not", " in", " data", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -2.2940781116485596, -0.04646522179245949, -0.0019596675410866737, -6.997340824455023e-05, -0.018920889124274254, -0.4836758077144623, -0.008676568046212196], "finish_reason": "stop"}, {"text": " ValueError(\"Input data is empty or target not in data.columns.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " data", " is", " empty", " or", " target", " not", " in", " data", ".", "columns", ".", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.6702100038528442, -0.7666993737220764, -0.26923245191574097, -0.13367129862308502, -0.06025318056344986, -0.26461923122406006, -3.0646438598632812, -0.14045806229114532, -1.0234463214874268, -0.9017665982246399, -0.2526121735572815, -1.6920280456542969, -0.025661960244178772, -0.0018241447396576405, -0.0045343199744820595], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[data.columns[0:2]], data[data.columns[2]], test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "data", ".", "columns", "[", "0", ":", "2", "]]", ",", " data", "[", "data", ".", "columns", "[", "2", "]]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -0.21113738417625427, -0.028147174045443535, -0.001213648240081966, -0.0015504255425184965, -0.0003090619284193963, -0.005533615127205849, -0.00014101465058047324, -0.0005302215577103198, -0.0022136487532407045, -0.016814058646559715, -2.264974000354414e-06, -7.271740287251305e-06, -1.311301275563892e-06, -3.576272320060525e-06, -0.00034588552080094814, -0.6872665286064148, -0.8692268133163452, -0.13095399737358093, -0.004076505079865456, -0.00044383687782101333, -2.017270088195801, -0.3036327064037323, -1.5452463626861572, -0.8935903906822205, -0.003927257843315601, -0.023032749071717262, -0.30610865354537964, -0.11718087643384933, -2.0140247344970703, -0.24123144149780273, -0.005602491088211536, -0.6048288345336914, -0.013546917587518692, -0.06577899307012558, -0.0010413468116894364, -0.8908479809761047, -4.31528314948082e-05, -5.924526340095326e-05, -0.010397668927907944, -0.017929738387465477, -0.00012563870404846966, -2.0861407392658293e-05, -0.007070519961416721, -0.14486409723758698, -4.768370445162873e-07, -3.3378546504536644e-06, -0.0025181034579873085, -0.0007098776986822486, -2.8729025871143676e-05, -4.8874615458771586e-05, -0.023470325395464897, -0.0031229318119585514], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.46156516671180725, -0.136750727891922, -0.3171561658382416, -0.0015813715290278196, -0.0017394188325852156, -0.005794987082481384, -0.001965259201824665, -0.00437505217269063, -0.03748708590865135, -0.6948446035385132], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002185339340940118, -3.4570634852570947e-06, -0.00014351768186315894, -7.390948667307384e-06, -0.0002294515579706058, -5.960462772236497e-07, -0.01714351400732994, -0.12573349475860596, -3.3378546504536644e-06, -5.94836674281396e-05, -0.0012811556225642562, -0.0010055014863610268, -1.2636104656849056e-05, -2.753696753643453e-05, -0.014729209244251251, -0.028597230091691017], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.61460001335945e-05, -0.00039545822073705494, -0.0019213564228266478, -0.008351876400411129, -2.3364747903542593e-05, -0.008151358924806118, -0.0014490114990621805, -0.00013648532330989838, -4.768360213347478e-06, -0.0006162413046695292, -0.00397641584277153], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0033818455412983894, -9.775113539944869e-06, -0.0017963001737371087, -6.05564855504781e-05, -0.0020534161012619734, -0.0001938155182870105, -0.0003805628512054682, -0.0010108605492860079, -0.0015711355954408646], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008540061302483082, -1.1920928244535389e-07, -4.994744449504651e-05, -1.311301275563892e-06, -7.152555099310121e-07, -0.00017534149810671806, -0.10696452111005783, -0.00026794656878337264, -0.0012747265864163637, -0.0023124876897782087, -0.0019546705298125744, -0.024888422340154648, -0.009812336415052414], "finish_reason": "stop"}, {"text": " (mse, model, data)", "tokens": [" (", "m", "se", ",", " model", ",", " data", ")", "\n"], "logprobs": [-2.9882328510284424, -0.10654518008232117, -1.6212332411669195e-05, -0.0010246747406199574, -0.0037227629218250513, -0.05055580660700798, -0.04586373642086983, -0.3498345613479614, -0.31820133328437805], "finish_reason": "stop"}], "metrics": {"energy": 220.6586767892837, "energy_per_token": 1.3537342134311883, "time": 10.304625, "time_per_token": 0.06321855828220858}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not len(data):", "tokens": [" not", " len", "(", "data", "):", "\n"], "logprobs": [-1.1494550704956055, -2.0192275047302246, -0.00021109737281221896, -0.0023825373500585556, -0.15584130585193634, -0.015406760387122631], "finish_reason": "stop"}, {"text": " ValueError('Data is empty or target column is not in data.')", "tokens": [" Value", "Error", "('", "Data", " is", " empty", " or", " target", " column", " is", " not", " in", " data", ".", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -1.9984569549560547, -0.5607731938362122, -0.14309918880462646, -0.11047445237636566, -0.19383475184440613, -0.40006202459335327, -1.4388401508331299, -0.11256737262010574, -0.1920686662197113, -1.3538378477096558, -1.189314842224121, -0.2250235676765442, -0.0019177870126441121], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -0.18991631269454956, -0.028831565752625465, -0.0013085383689031005, -0.0016631354810670018, -0.00026723151677288115, -0.007078924216330051, -0.0001287377526750788, -0.00047052756417542696, -0.001795467222109437, -0.017162146046757698, -2.0265558760002023e-06, -7.271740287251305e-06, -2.3841855067985307e-07, -3.6954811548639555e-06, -0.0003082277253270149, -0.7725430130958557], "finish_reason": "stop"}, {"text": "iloc[:, :-1],  # Features", "tokens": ["il", "oc", "[:", ",", " :-", "1", "]", ",", "  ", "#", " Features", "\n"], "logprobs": [-1.8267567157745361, -2.5748875486897305e-05, -0.0033394305501133204, -0.004126249346882105, -0.5321925282478333, -0.0006323245470412076, -0.0003303935518488288, -0.022181274369359016, -2.3432347774505615, -0.03589298948645592, -3.053698778152466, -0.3239213526248932], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021780834067612886, -2.9802276912960224e-06, -0.00013386306818574667, -7.629365427419543e-06, -0.0002090712368953973, -5.960462772236497e-07, -0.01560242474079132, -0.13762933015823364, -2.9802276912960224e-06, -6.186770770000294e-05, -0.0012815127847716212, -0.0007767044589854777, -1.1324817933200393e-05, -2.5033637939486653e-05, -0.010832788422703743, -0.03324064612388611], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.0794889577664435e-05, -0.0003507714136503637, -0.0023624387104064226, -0.010148236528038979, -3.0517112463712692e-05, -0.008815300650894642, -0.0017463208641856909, -0.0001934579631779343, -4.6491513785440475e-06, -0.0008126770262606442, -0.00444970466196537], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0039406754076480865, -8.4638240878121e-06, -0.0015259062638506293, -7.772143726469949e-05, -0.0020122535061091185, -0.0001740304142003879, -0.0003281293320469558, -0.0010706413304433227, -0.0014460355741903186], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008591593243181705, -1.1920928244535389e-07, -6.353653589030728e-05, -1.0728830375228426e-06, -8.344646857949556e-07, -0.00018916724366135895, -0.0970713198184967, -0.00027295202016830444, -0.0013853248674422503, -0.002948581939563155, -0.0016569469589740038, -0.031584784388542175, -0.012772186659276485], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09383449703454971, -2.3603161025675945e-05, -0.0010633773636072874, -0.003120079869404435, -0.05570763722062111, -0.024595821276307106, -0.584083616733551], "finish_reason": "stop"}], "metrics": {"energy": 179.29879109382628, "energy_per_token": 1.5456792335674678, "time": 8.192978, "time_per_token": 0.07062912068965517}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(", "tokens": [" Value", "Error", "(", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -2.623805284500122], "finish_reason": "stop"}, {"text": " X_test = train_test_split(data, test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.013559147715568542, -0.00014828535495325923, -0.002711788285523653, -1.6408220529556274, -0.010675346478819847, -3.2186455882765586e-06, -5.245195097813848e-06, -1.5497195136049413e-06, -5.006777428206988e-06, -0.0003829461056739092, -0.38726863265037537, -0.16119222342967987, -0.05636081099510193, -8.4638240878121e-06, -0.0003815161471720785, -0.010336792096495628, -0.006501711905002594, -6.627816765103489e-05, -7.390948667307384e-06, -0.0030540036968886852, -0.06350886076688766, 0.0, -2.9802276912960224e-06, -0.0004085659747943282, -0.0005741854547522962, -2.6940935640595853e-05, -2.6464111215318553e-05, -0.06592386960983276, -0.0033416880760341883], "finish_reason": "stop"}, {"text": "drop(target, axis=1), data[target], test_size=test_size, random_state=random_state)", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.450157105922699, -0.11242463439702988, -0.3551846742630005, -0.002413933165371418, -0.0018941095331683755, -0.005784675944596529, -0.001625765347853303, -0.004148093517869711, -0.02390770986676216, -0.7770169377326965, -0.014601398259401321, -0.0008390005677938461, -0.0006717570940963924, -0.002599909668788314, -0.15308833122253418, -2.145764938177308e-06, -3.182837463100441e-05, -0.0027136902790516615, -0.005060483235865831, -3.2305197237292305e-05, -5.245195097813848e-06, -0.002937528071925044, -0.07670088112354279, -1.1920928244535389e-07, -2.861018856492592e-06, -0.0008391196606680751, -0.00043299360550008714, -2.276871418871451e-05, -1.7881233361549675e-05, -1.1763033866882324, -0.0012359131360426545], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021997320000082254, -3.099436753473128e-06, -0.00016842853801790625, -7.033323527139146e-06, -0.0001971527235582471, -5.960462772236497e-07, -0.014972570352256298, -0.1343456506729126, -3.2186455882765586e-06, -7.509902934543788e-05, -0.0011816193582490087, -0.0008581769652664661, -9.179073458653875e-06, -2.4676019165781327e-05, -0.012784544378519058, -0.03280305862426758], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.543078441405669e-05, -0.0003474347176961601, -0.0025289240293204784, -0.008980479091405869, -2.276871418871451e-05, -0.006230099592357874, -0.0014244896592572331, -0.00017915551143232733, -4.887569048150908e-06, -0.0008002892718650401, -0.00434490479528904], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0034740353003144264, -9.894321920000948e-06, -0.0016623024130240083, -7.545663538621739e-05, -0.002205798402428627, -0.00020561488054227084, -0.000532842765096575, -0.0009308296139352024, -0.0012784174177795649], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008620312437415123, -1.1920928244535389e-07, -5.6980417866725475e-05, -9.536738616588991e-07, -7.152555099310121e-07, -0.00017391123401466757, -0.10294279456138611, -0.00024053541710600257, -0.0014129426563158631, -0.0028026134241372347, -0.0016321921721100807, -0.03139522671699524, -0.01571767032146454], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.0954652726650238, -2.47952248173533e-05, -0.001065520802512765, -0.00285705691203475, -0.047035977244377136, -0.03141139820218086, -0.525503396987915], "finish_reason": "stop"}], "metrics": {"energy": 214.97775646591194, "energy_per_token": 1.6286193671659994, "time": 8.841553, "time_per_token": 0.06698146212121212}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError(\"Empty or incorrect input data or target column not found\")", "tokens": [" Value", "Error", "(", "\"", "Empty", " or", " incorrect", " input", " data", " or", " target", " column", " not", " found", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -2.3730697631835938, -1.1743812561035156, -2.6343681812286377, -1.9153608083724976, -0.658136248588562, -1.2994378805160522, -0.22143033146858215, -0.376049280166626, -1.6641721725463867, -0.8004236817359924, -1.2128932476043701, -0.0014781750505790114, -0.005969671066850424], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data.iloc[:, : -1], data[target], test_size=test_size,", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ".", "il", "oc", "[:", ",", " :", " -", "1", "]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -0.21113738417625427, -0.028147174045443535, -0.001213648240081966, -0.0015504255425184965, -0.0003090619284193963, -0.005533615127205849, -0.00014101465058047324, -0.0005302215577103198, -0.0022136487532407045, -0.016814058646559715, -2.264974000354414e-06, -7.271740287251305e-06, -1.311301275563892e-06, -3.576272320060525e-06, -0.00034588552080094814, -0.6872665286064148, -1.45771062374115, -1.1577035188674927, -4.029192859889008e-05, -0.004040293861180544, -0.004083628766238689, -2.9213039875030518, -1.413599967956543, -0.022295180708169937, -0.0005087750032544136, -0.02859051153063774, -0.3799667954444885, -0.3188725709915161, -0.014422927983105183, -0.0006702084210701287, -0.00589714664965868, -0.42065420746803284, -8.34461570775602e-06, -5.471556869451888e-05, -0.013692854903638363, -0.013446477241814137, -5.6622808187967166e-05, -6.556489552167477e-06, -0.004564343020319939, -0.8417721390724182], "finish_reason": "stop"}, {"text": "drop(columns=target), data[target],", "tokens": ["drop", "(", "columns", "=", "target", ")", ",", " data", "[", "target", "]", ",", "\n"], "logprobs": [-0.46156516671180725, -0.136750727891922, -1.3579906225204468, -0.7635145783424377, -0.007698036264628172, -0.31114518642425537, -0.028730910271406174, -0.9496917128562927, -0.010578982532024384, -0.0005122303264215589, -0.00040546778473071754, -0.0015768486773595214, -2.135002851486206], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021871235221624374, -3.3378546504536644e-06, -0.00014161060971673578, -8.4638240878121e-06, -0.00021169328829273582, -7.152555099310121e-07, -0.013360848650336266, -0.1490040272474289, -3.4570634852570947e-06, -6.508615479106084e-05, -0.0010122895473614335, -0.0010338444262742996, -1.0847986231965479e-05, -2.6702524337451905e-05, -0.011605959385633469, -0.027797788381576538], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.151010165922344e-05, -0.00043275527423247695, -0.002686940599232912, -0.0076541476882994175, -2.634490556374658e-05, -0.0067762103863060474, -0.0013406822690740228, -0.000120751719805412, -4.6491513785440475e-06, -0.0007539528887718916, -0.003973803482949734], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0033824394922703505, -8.821448318485636e-06, -0.0016208856832236052, -7.450303382938728e-05, -0.001733230659738183, -0.0001662831346038729, -0.000498289882671088, -0.0009233264136128128, -0.0017196642002090812], "finish_reason": "stop"}, {"text": " mean_squared_error(predictions, y_test)", "tokens": [" mean", "_", "squared", "_", "error", "(", "pred", "ictions", ",", " y", "_", "test", ")", "\n"], "logprobs": [-0.008435807190835476, -1.1920928244535389e-07, -6.425174069590867e-05, -8.344646857949556e-07, -8.344646857949556e-07, -0.0001811817055568099, -1.7337931394577026, -0.00017629499780014157, -0.0010877889581024647, -0.0025679252576082945, -2.8729025871143676e-05, -0.00014733182615600526, -0.05713595077395439, -0.00632487004622817], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09200296550989151, -2.4199192921514623e-05, -0.0010345588671043515, -0.0027957186102867126, -0.06351087242364883, -0.027560891583561897, -0.5089459419250488], "finish_reason": "stop"}], "metrics": {"energy": 195.53013308048247, "energy_per_token": 1.367343587975402, "time": 9.473574, "time_per_token": 0.06624876923076922}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError(\"The data is either empty or the target column is not in the DataFrame.\")", "tokens": [" Value", "Error", "(", "\"", "The", " data", " is", " either", " empty", " or", " the", " target", " column", " is", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -0.380057692527771, -1.8991299867630005, -2.0602822303771973, -0.523963212966919, -2.7996535301208496, -0.013760935515165329, -0.02385800890624523, -0.28991371393203735, -0.03888178989291191, -0.07632917910814285, -0.8409038186073303, -0.07623673230409622, -0.127377450466156, -0.035815127193927765, -0.8317294120788574, -0.0026443772949278355, -0.3315291106700897, -0.015317307785153389, -0.002010825788602233, -0.0031480062752962112], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data.loc[:, data.columns != target],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", ".", "loc", "[:", ",", " data", ".", "columns", " ", "!", "=", " target", "]", ",", "\n"], "logprobs": [-0.013490229845046997, -0.00015722469834145159, -0.003364380681887269, -0.21113738417625427, -0.028147174045443535, -0.001213648240081966, -0.0015504255425184965, -0.0003090619284193963, -0.005533615127205849, -0.00014101465058047324, -0.0005302215577103198, -0.0022136487532407045, -0.016814058646559715, -2.264974000354414e-06, -7.271740287251305e-06, -1.311301275563892e-06, -3.576272320060525e-06, -0.00034588552080094814, -0.6872665286064148, -1.45771062374115, -2.6629295349121094, -0.0016614693449810147, -0.0008212531101889908, -0.3396739065647125, -0.0058724964037537575, -0.010768282227218151, -0.43822306394577026, -3.2186455882765586e-06, -4.8993817472364753e-05, -0.009969559498131275, -0.001379253575578332, -0.029847266152501106, -0.4486582577228546], "finish_reason": "stop"}, {"text": "drop(target, axis=1), data[target], test_size=test_size, random_state=random_state)", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.46156516671180725, -0.136750727891922, -0.3171561658382416, -0.0015813715290278196, -0.0017394188325852156, -0.005794987082481384, -0.001965259201824665, -0.00437505217269063, -0.03748708590865135, -0.8651994466781616, -0.01187069620937109, -0.0006245807744562626, -0.0006053998949937522, -0.002854560734704137, -0.17843219637870789, -2.861018856492592e-06, -3.8742269680369645e-05, -0.003181754844263196, -0.004004793241620064, -3.2543604902457446e-05, -5.006777428206988e-06, -0.0029145879670977592, -0.09934335947036743, -1.1920928244535389e-07, -2.622600959512056e-06, -0.0007223857101053, -0.0002983363519888371, -2.5748875486897305e-05, -2.0146166207268834e-05, -1.1280372142791748, -0.0014555584639310837], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002185339340940118, -3.4570634852570947e-06, -0.00014351768186315894, -7.390948667307384e-06, -0.0002294515579706058, -5.960462772236497e-07, -0.01714351400732994, -0.12573349475860596, -3.3378546504536644e-06, -5.94836674281396e-05, -0.0012811556225642562, -0.0010055014863610268, -1.2636104656849056e-05, -2.753696753643453e-05, -0.014729209244251251, -0.028597230091691017], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.61460001335945e-05, -0.00039545822073705494, -0.0019213564228266478, -0.008351876400411129, -2.3364747903542593e-05, -0.008151358924806118, -0.0014490114990621805, -0.00013648532330989838, -4.768360213347478e-06, -0.0006162413046695292, -0.00397641584277153], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0033818455412983894, -9.775113539944869e-06, -0.0017963001737371087, -6.05564855504781e-05, -0.0020534161012619734, -0.0001938155182870105, -0.0003805628512054682, -0.0010108605492860079, -0.0015711355954408646], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008540061302483082, -1.1920928244535389e-07, -4.994744449504651e-05, -1.311301275563892e-06, -7.152555099310121e-07, -0.00017534149810671806, -0.10696452111005783, -0.00026794656878337264, -0.0012747265864163637, -0.0023124876897782087, -0.0019546705298125744, -0.024888422340154648, -0.009812336415052414], "finish_reason": "stop"}, {"text": " (mse, model, data)", "tokens": [" (", "m", "se", ",", " model", ",", " data", ")", "\n"], "logprobs": [-2.9882328510284424, -0.10654518008232117, -1.6212332411669195e-05, -0.0010246747406199574, -0.0037227629218250513, -0.05055580660700798, -0.04586373642086983, -0.3498345613479614, -0.31820133328437805], "finish_reason": "stop"}], "metrics": {"energy": 202.5118722572327, "energy_per_token": 1.2817207104888146, "time": 9.879322, "time_per_token": 0.06252735443037975}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " len(data) == 0:", "tokens": [" len", "(", "data", ")", " ==", " ", "0", ":", "\n"], "logprobs": [-1.2890233993530273, -0.00025233422638848424, -0.0046147750690579414, -0.04982511326670647, -0.19525662064552307, -0.0007630059262737632, -0.00019238528329879045, -0.1087067574262619, -0.01162834744900465], "finish_reason": "stop"}, {"text": " ValueError(", "tokens": [" Value", "Error", "(", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -2.6873316764831543], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[data.columns[:-1]],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "data", ".", "columns", "[:", "-", "1", "]]", ",", "\n"], "logprobs": [-0.01353162806481123, -0.0001998939987970516, -0.0034499194007366896, -0.16803188621997833, -0.028224708512425423, -0.0013629442546516657, -0.0013473490253090858, -0.0003156163729727268, -0.007046254351735115, -0.00012444675667211413, -0.0007113072206266224, -0.0021064728498458862, -0.016598699614405632, -2.3841830625315197e-06, -6.6756979322235566e-06, -1.0728830375228426e-06, -4.172316494077677e-06, -0.0003413571394048631, -0.6972751021385193, -0.7549295425415039, -0.15815958380699158, -0.0049626268446445465, -0.0005660838796757162, -0.4606804847717285, -0.007446154020726681, -0.0029233836103230715, -0.0010158622171729803, -0.01136213168501854, -1.2784645557403564], "finish_reason": "stop"}, {"text": "iloc[:, :-1],", "tokens": ["il", "oc", "[:", ",", " :", "-", "1", "]", ",", "\n"], "logprobs": [-1.8235915899276733, -3.45700973412022e-05, -0.00282317865639925, -0.003965016920119524, -2.31732177734375, -2.813558578491211, -0.0013377059949561954, -0.00032491172896698117, -0.025408867746591568, -0.9511919617652893], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002181176096200943, -3.3378546504536644e-06, -0.00012170527770649642, -6.556489552167477e-06, -0.00023910524032544345, -7.152555099310121e-07, -0.01406154315918684, -0.13771659135818481, -3.4570634852570947e-06, -5.757642793469131e-05, -0.001065401709638536, -0.0009322587866336107, -1.0967194612021558e-05, -2.884823152271565e-05, -0.010905427858233452, -0.023565804585814476], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.924526340095326e-05, -0.0003475538978818804, -0.0020273623522371054, -0.007175271399319172, -2.539125671319198e-05, -0.008963230066001415, -0.0014590105274692178, -0.0001528146385680884, -4.768360213347478e-06, -0.0005907459417358041, -0.003416061168536544], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003983896225690842, -9.894321920000948e-06, -0.0016662298003211617, -6.890059739816934e-05, -0.002186171943321824, -0.0002641328901518136, -0.00047958316281437874, -0.0009232072625309229, -0.0014811508590355515], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008004610426723957, -2.3841855067985307e-07, -5.686121585313231e-05, -1.0728830375228426e-06, -8.344646857949556e-07, -0.0001851148990681395, -0.11397732049226761, -0.00024399164249189198, -0.00127948890440166, -0.0028713210485875607, -0.0015728019643574953, -0.03716931864619255, -0.011586516164243221], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.10007447004318237, -2.1815061700181104e-05, -0.0010642108973115683, -0.0030717116314917803, -0.04913996532559395, -0.030520666390657425, -0.45785701274871826], "finish_reason": "stop"}], "metrics": {"energy": 162.648488907814, "energy_per_token": 1.4143346861549044, "time": 7.9923134, "time_per_token": 0.06949837739130435}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " data.empty:", "tokens": [" data", ".", "empty", ":", "\n"], "logprobs": [-0.9745320677757263, -0.03715944290161133, -0.056839682161808014, -0.2217576652765274, -0.00944207701832056], "finish_reason": "stop"}, {"text": " ValueError(\"Input DataFrame is empty or target column not in the DataFrame\")", "tokens": [" Value", "Error", "(", "\"", "Input", " Data", "Frame", " is", " empty", " or", " target", " column", " not", " in", " the", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.0034821133594959974, -8.21318244561553e-05, -0.27190282940864563, -0.48718759417533875, -1.603308916091919, -0.9122382402420044, -0.013404722325503826, -0.18022628128528595, -0.02530972845852375, -0.03266369178891182, -0.2710734009742737, -0.051557280123233795, -0.5180237293243408, -0.4556242525577545, -1.761579990386963, -0.1040547639131546, -0.0010645681759342551, -0.8355302214622498, -0.0013100859941914678, -0.0021225321106612682], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[[*data]], data[[target]],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[[", "*", "data", "]]", ",", " data", "[[", "target", "]]", ",", "\n"], "logprobs": [-0.013561617583036423, -0.00020811776630580425, -0.0027417470701038837, -0.161648690700531, -0.030245786532759666, -0.001209719106554985, -0.0014249657979235053, -0.0002494739310350269, -0.008235661312937737, -0.00011228884250158444, -0.00064876489341259, -0.0023994247894734144, -0.014852541498839855, -2.9802276912960224e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -3.933898824470816e-06, -0.00031192204914987087, -0.7080832123756409, -2.7388131618499756, -3.465334177017212, -0.062195491045713425, -0.4984109103679657, -0.06963194906711578, -0.28431302309036255, -2.7639949321746826, -0.03562406823039055, -0.0010062160436064005, -0.004918974358588457, -1.4623225927352905], "finish_reason": "stop"}, {"text": "loc[:, data.columns != target],  # remove target column", "tokens": ["loc", "[:", ",", " data", ".", "columns", " ", "!", "=", " target", "]", ",", "  ", "#", " remove", " target", " column", "\n"], "logprobs": [-2.6784801483154297, -0.0022130541037768126, -0.0007653883076272905, -0.25623390078544617, -0.006742583122104406, -0.01089139562100172, -0.39056023955345154, -1.6689286894688848e-06, -1.4305012882687151e-05, -0.00974363088607788, -0.000931663322262466, -0.026477158069610596, -2.2362852096557617, -0.010640316642820835, -4.693005561828613, -0.5954931974411011, -0.29184791445732117, -0.7276331186294556], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.002193665597587824, -4.0531076592742465e-06, -0.00014232576359063387, -7.033323527139146e-06, -0.0002169373765354976, -5.960462772236497e-07, -0.014017580077052116, -0.14531953632831573, -3.2186455882765586e-06, -6.007967749610543e-05, -0.001409014337696135, -0.001058137626387179, -9.417489309271332e-06, -3.075552376685664e-05, -0.013922125101089478, -0.033337850123643875], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.8410845667822286e-05, -0.00046957432641647756, -0.0021376395598053932, -0.00810938235372305, -3.9219088648678735e-05, -0.00855956319719553, -0.0015905360924080014, -0.00014304091746453196, -5.125986263010418e-06, -0.0007472821744158864, -0.0036655159201472998], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.0033257671166211367, -7.986990567587782e-06, -0.001705264556221664, -7.664863369427621e-05, -0.002156077418476343, -0.00011920218821614981, -0.0005361788207665086, -0.0008384049870073795, -0.0015491163358092308], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008822626434266567, -2.3841855067985307e-07, -5.411955135059543e-05, -1.5497195136049413e-06, -8.344646857949556e-07, -0.00017105070583056659, -0.09381560981273651, -0.00021252757869660854, -0.001053731539286673, -0.0029181537684053183, -0.0017571499338373542, -0.026503046974539757, -0.01322145015001297], "finish_reason": "stop"}, {"text": " mse, model, data<|endoftext|>from numpy import array, asarray, sum, array_equal, asarray", "tokens": [" m", "se", ",", " model", ",", " data", "<", "|", "end", "of", "text", "|>", "from", " numpy", " import", " array", ",", " as", "array", ",", " sum", ",", " array", "_", "equal", ",", " as", "array", "\n"], "logprobs": [-0.09405457228422165, -2.038458114839159e-05, -0.001210195361636579, -0.0029867347329854965, -0.04868452623486519, -0.027964960783720016, -1.5857045650482178, -3.576278118089249e-07, -1.5497195136049413e-06, -5.23315102327615e-05, -0.00023505308490712196, -0.1407044678926468, -1.0357095003128052, -4.213161468505859, -0.08882012963294983, -1.7639896869659424, -0.78117835521698, -3.5909583568573, -0.1258709877729416, -0.46018701791763306, -4.735914707183838, -0.4500093460083008, -4.381653785705566, -0.7323192358016968, -0.1689135581254959, -0.45120769739151, -3.1925971508026123, -0.6716271638870239, -1.0489121675491333], "finish_reason": "stop"}], "metrics": {"energy": 208.66341570663454, "energy_per_token": 1.3206545297888261, "time": 9.88429, "time_per_token": 0.06255879746835442}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not data.empty:", "tokens": [" not", " data", ".", "empty", ":", "\n"], "logprobs": [-1.1494550704956055, -0.21151316165924072, -0.25225016474723816, -0.12293684482574463, -0.373100221157074, -0.01255195215344429], "finish_reason": "stop"}, {"text": " ValueError('Empty input or target not found in the DataFrame.')", "tokens": [" Value", "Error", "('", "Empty", " input", " or", " target", " not", " found", " in", " the", " Data", "Frame", ".", "')", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -1.5273051261901855, -2.5798721313476562, -2.0752458572387695, -0.7179484963417053, -0.3276885747909546, -1.1723309755325317, -1.8585355281829834, -1.2020763158798218, -1.404940128326416, -1.398712396621704, -0.008885841816663742, -0.72684645652771, -0.03555838018655777, -0.0013331820955500007], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[data.columns[:-1]], data[target],", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "data", ".", "columns", "[:", "-", "1", "]]", ",", " data", "[", "target", "]", ",", "\n"], "logprobs": [-0.013611010275781155, -0.00016902448260225356, -0.002833282807841897, -0.18991631269454956, -0.028831565752625465, -0.0013085383689031005, -0.0016631354810670018, -0.00026723151677288115, -0.007078924216330051, -0.0001287377526750788, -0.00047052756417542696, -0.001795467222109437, -0.017162146046757698, -2.0265558760002023e-06, -7.271740287251305e-06, -2.3841855067985307e-07, -3.6954811548639555e-06, -0.0003082277253270149, -0.6288948655128479, -0.8386990427970886, -0.14564399421215057, -0.0046898843720555305, -0.0004953111056238413, -0.43207401037216187, -0.006558678112924099, -0.0026995427906513214, -0.0010024051880463958, -0.012425510212779045, -0.29421213269233704, -0.10812777280807495, -0.28848913311958313, -0.0002335037279408425, -0.0013763965107500553, -1.0322349071502686], "finish_reason": "stop"}, {"text": "drop(target, axis=1), data[target], test_size=test_size, random_state=random_state)", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.38980597257614136, -0.15018241107463837, -0.3109258711338043, -0.0019654971547424793, -0.001735967700369656, -0.005226164124906063, -0.0015548295341432095, -0.004047536291182041, -0.02480737306177616, -0.995391845703125, -0.015908697620034218, -0.0007296522380784154, -0.0006967739318497479, -0.0026666102930903435, -0.15313252806663513, -2.7418097943154862e-06, -4.255681051290594e-05, -0.003481400664895773, -0.005030356347560883, -3.313963316031732e-05, -6.079655122448457e-06, -0.0033011725172400475, -0.0920005738735199, -1.1920928244535389e-07, -2.7418097943154862e-06, -0.0007189311436377466, -0.0003649522550404072, -2.3603161025675945e-05, -1.6093124941107817e-05, -1.1648585796356201, -0.0013773487880825996], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021721357479691505, -2.9802276912960224e-06, -0.00015746307326480746, -7.271740287251305e-06, -0.00023624490131624043, -5.960462772236497e-07, -0.01563798449933529, -0.15633448958396912, -3.2186455882765586e-06, -6.925819616299123e-05, -0.0010362261673435569, -0.0009027220075950027, -1.0847986231965479e-05, -3.242440288886428e-05, -0.01748715341091156, -0.03427146375179291], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-5.769562994828448e-05, -0.00036459474358707666, -0.002191762439906597, -0.009300006553530693, -2.7417760065873154e-05, -0.007002928759902716, -0.0015566148795187473, -0.00017808281700126827, -4.291525328881107e-06, -0.0007344171172007918, -0.004677781835198402], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.003631665138527751, -9.536697689327411e-06, -0.0016876515001058578, -6.770858453819528e-05, -0.001956217223778367, -0.00027640812913887203, -0.0004844683862756938, -0.0008061258122324944, -0.0014037764631211758], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.009193233214318752, -2.3841855067985307e-07, -5.2569914259947836e-05, -1.0728830375228426e-06, -7.152555099310121e-07, -0.0001776060671545565, -0.09217093884944916, -0.00027891082572750747, -0.0015401893761008978, -0.002842911286279559, -0.0016674199141561985, -0.033339694142341614, -0.009840430691838264], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.08607611805200577, -2.9444261599564925e-05, -0.0009099871967919171, -0.0029155388474464417, -0.049563318490982056, -0.023975331336259842, -0.5455442070960999], "finish_reason": "stop"}], "metrics": {"energy": 205.04837894344325, "energy_per_token": 1.3669891929562883, "time": 9.678924, "time_per_token": 0.06452616}}
{"outputs": [{"text": " pd.DataFrame(data)", "tokens": [" pd", ".", "DataFrame", "(", "data", ")", "\n"], "logprobs": [-0.10557522624731064, -0.00015960850578267127, -0.011454413644969463, -0.09915661066770554, -0.011427778750658035, -0.06722722202539444, -0.07860911637544632], "finish_reason": "stop"}, {"text": " not len(data):", "tokens": [" not", " len", "(", "data", "):", "\n"], "logprobs": [-1.1494550704956055, -2.0192275047302246, -0.00021109737281221896, -0.0023825373500585556, -0.15584130585193634, -0.015406760387122631], "finish_reason": "stop"}, {"text": " ValueError(f\"DataFrame is empty or target column {target} not in DataFrame\")", "tokens": [" Value", "Error", "(", "f", "\"", "DataFrame", " is", " empty", " or", " target", " column", " {", "target", "}", " not", " in", " Data", "Frame", "\"", ")", "\n"], "logprobs": [-0.0027585094794631004, -7.664863369427621e-05, -0.29515978693962097, -1.4043821096420288, -0.24702627956867218, -4.511332988739014, -0.34517568349838257, -0.03170212730765343, -0.03648773953318596, -0.24713243544101715, -0.2221643179655075, -1.4762499332427979, -0.008171341381967068, -0.14294326305389404, -0.332953542470932, -0.28300783038139343, -1.0908151865005493, -0.0039952946826815605, -0.728533923625946, -0.0018562719924375415, -0.003331351326778531], "finish_reason": "stop"}, {"text": " X_test, y_train, y_test = train_test_split(data[data.columns[:-1]], data[target], test_size=test_size, random_state=random_state)", "tokens": [" X", "_", "test", ",", " y", "_", "train", ",", " y", "_", "test", " =", " train", "_", "test", "_", "split", "(", "data", "[", "data", ".", "columns", "[:", "-", "1", "]]", ",", " data", "[", "target", "]", ",", " test", "_", "size", "=", "test", "_", "size", ",", " random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.01353162806481123, -0.0001998939987970516, -0.0034499194007366896, -0.16803188621997833, -0.028224708512425423, -0.0013629442546516657, -0.0013473490253090858, -0.0003156163729727268, -0.007046254351735115, -0.00012444675667211413, -0.0007113072206266224, -0.0021064728498458862, -0.016598699614405632, -2.3841830625315197e-06, -6.6756979322235566e-06, -1.0728830375228426e-06, -4.172316494077677e-06, -0.0003413571394048631, -0.6972751021385193, -0.7549295425415039, -0.15815958380699158, -0.0049626268446445465, -0.0005660838796757162, -0.4606804847717285, -0.007446154020726681, -0.0029233836103230715, -0.0010158622171729803, -0.01136213168501854, -0.3645184636116028, -0.11003436893224716, -0.3166162073612213, -0.00022098960471339524, -0.0013737775152549148, -0.5424719452857971, -9.775113539944869e-06, -3.9934315282152966e-05, -0.009838305413722992, -0.009763936512172222, -6.997340824455023e-05, -1.0371154530730564e-05, -0.004965710919350386, -0.5316901206970215, -7.152555099310121e-07, -4.291525328881107e-06, -0.0014678190927952528, -0.0009305914281867445, -2.2291887944447808e-05, -4.160317621426657e-05, -0.02291846089065075, -0.0019396792631596327], "finish_reason": "stop"}, {"text": "drop(target, axis=1),", "tokens": ["drop", "(", "target", ",", " axis", "=", "1", ")", ",", "\n"], "logprobs": [-0.37718430161476135, -0.1390477567911148, -0.3377085030078888, -0.0022888195235282183, -0.0015845850575715303, -0.005988275166600943, -0.0013941340148448944, -0.004245317075401545, -0.02711164578795433, -0.715630292892456], "finish_reason": "stop"}, {"text": " RandomForestRegressor(random_state=random_state)", "tokens": [" Random", "Fore", "st", "Reg", "ress", "or", "(", "random", "_", "state", "=", "random", "_", "state", ")", "\n"], "logprobs": [-0.0021772508043795824, -3.576272320060525e-06, -0.0001110968878492713, -6.794906312279636e-06, -0.0002584123576525599, -7.152555099310121e-07, -0.016462448984384537, -0.1069323867559433, -3.099436753473128e-06, -7.045020902296528e-05, -0.0009597701136954129, -0.0008299481705762446, -9.65590606938349e-06, -2.7656173188006505e-05, -0.011409039609134197, -0.029914140701293945], "finish_reason": "stop"}, {"text": "fit(X_train, y_train)", "tokens": ["fit", "(", "X", "_", "train", ",", " y", "_", "train", ")", "\n"], "logprobs": [-6.627816765103489e-05, -0.00035398892941884696, -0.0021401375997811556, -0.009201973676681519, -2.407998726994265e-05, -0.008036185055971146, -0.0015326907159760594, -0.0001299296854995191, -4.529942543740617e-06, -0.0006781900301575661, -0.0046298447996377945], "finish_reason": "stop"}, {"text": " model.predict(X_test)", "tokens": [" model", ".", "predict", "(", "X", "_", "test", ")", "\n"], "logprobs": [-0.004112240858376026, -8.22540732769994e-06, -0.0017085968283936381, -6.615896563744172e-05, -0.0024091764353215694, -0.0002131234941771254, -0.0005156855913810432, -0.0009039129945449531, -0.001293299370445311], "finish_reason": "stop"}, {"text": " mean_squared_error(y_test, predictions)", "tokens": [" mean", "_", "squared", "_", "error", "(", "y", "_", "test", ",", " predictions", ")", "\n"], "logprobs": [-0.008095192722976208, -1.1920928244535389e-07, -5.829164365422912e-05, -9.536738616588991e-07, -8.344646857949556e-07, -0.00022182388056535274, -0.16120357811450958, -0.0002637753786984831, -0.0013975863112136722, -0.002610729541629553, -0.0017266854410991073, -0.031096316874027252, -0.013806791044771671], "finish_reason": "stop"}, {"text": " mse, model, data", "tokens": [" m", "se", ",", " model", ",", " data", "\n"], "logprobs": [-0.09261298179626465, -2.109982233378105e-05, -0.0008744944934733212, -0.0028136686887592077, -0.048342928290367126, -0.027164781466126442, -0.46778351068496704], "finish_reason": "stop"}], "metrics": {"energy": 225.1136116313935, "energy_per_token": 1.5007574108759567, "time": 9.676371, "time_per_token": 0.06450913999999999}}
