{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input df should be a pandas DataFrame\")\n\n    if dct is not None:\n        df = df.replace(dct)\n\n    if columns is None:\n        object_cols = df.select_dtypes(include='object').columns\n    else:\n        object_cols = columns\n\n    if object_cols.tolist():\n        encoders = {}\n        for col in object_cols:\n            encoders[col] = LabelEncoder()\n            encoders[col].fit(df[col].astype(str))\n            df[col] = encoders[col].transform(df[col].astype(str))\n\n    df = df.astype(float)\n    df = df - df.mean(axis=0)\n    df = df / df.std(axis=0)\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "input", " df", " should", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " d", "ct", " is", " not", " None", ":", "\n", "        ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "object", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "else", ":", "\n", "        ", "object", "_", "cols", " =", " columns", "\n", "\n", "    ", "if", " object", "_", "cols", ".", "tol", "ist", "():", "\n", "        ", "enc", "oders", " =", " {}", "\n", "        ", "for", " col", " in", " object", "_", "cols", ":", "\n", "            ", "enc", "oders", "[", "col", "]", " =", " Label", "Encoder", "()", "\n", "            ", "enc", "oders", "[", "col", "]", ".", "fit", "(", "df", "[", "col", "]", ".", "ast", "ype", "(", "str", "))", "\n", "            ", "df", "[", "col", "]", " =", " enc", "oders", "[", "col", "]", ".", "transform", "(", "df", "[", "col", "]", ".", "ast", "ype", "(", "str", "))", "\n", "\n", "    ", "df", " =", " df", ".", "ast", "ype", "(", "float", ")", "\n", "    ", "df", " =", " df", " -", " df", ".", "mean", "(", "axis", "=", "0", ")", "\n", "    ", "df", " =", " df", " /", " df", ".", "std", "(", "axis", "=", "0", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.301834374666214, -0.03372645378112793, -0.020792139694094658, -0.00012194366718176752, -0.0014832934830337763, -0.0007812308613210917, -0.011578856967389584, -1.9430925021879375e-05, -0.0133719053119421, -0.0052597238682210445, -0.007296343334019184, -0.006351049058139324, -0.014091046527028084, -0.0071360948495566845, -4.172316494077677e-06, -0.21240206062793732, -0.060623835772275925, -2.166901111602783, -0.17705579102039337, -1.6932871341705322, -0.014843028038740158, -0.21072690188884735, -1.9874539375305176, -0.0525876060128212, -0.008860438130795956, -0.19438405334949493, -0.0008843801915645599, -0.0036593396216630936, -0.4679230749607086, -0.0008661571191623807, -1.7523820400238037, -1.1063222885131836, -1.490105023549404e-05, -0.8689295053482056, -0.0950080156326294, -0.0003492222458589822, -0.08804843574762344, -0.01470019482076168, -0.0049278708174824715, -1.5259929895401, -0.26544663310050964, -0.11172414571046829, -0.0008041008841246367, -0.2884296178817749, -0.0010064542293548584, -0.0035361635964363813, -1.311301275563892e-06, -0.03134358301758766, -0.055280789732933044, -0.13177239894866943, -0.002190573140978813, -0.5001382231712341, -0.0383807010948658, -0.006337308324873447, -0.12225866317749023, -0.011187090538442135, -0.0040773362852633, -0.0017720249015837908, -2.650979518890381, -0.0073801265098154545, -1.0839509963989258, -0.003268140833824873, -0.14595279097557068, -0.0012752028414979577, -0.037573546171188354, -2.539125671319198e-05, -1.1920928244535389e-07, -6.794906312279636e-06, -0.2663739025592804, -0.0639810785651207, -0.7083994746208191, -0.012876695021986961, -0.0078141950070858, -0.021742668002843857, -0.0017819016939029098, -0.029872603714466095, -0.6272978782653809, -0.011929831467568874, -9.798523387871683e-05, -0.00020180096908006817, -0.0003077510336879641, -0.06117468327283859, -8.106198947643861e-06, -1.9073468138230965e-06, -0.00026639728457666934, -0.09390590339899063, -0.01471816748380661, -0.10841917991638184, -0.0005155664402991533, -1.2128111124038696, -0.5250684022903442, -9.65590606938349e-06, -7.152555099310121e-07, -1.2229269742965698, -2.5956549644470215, -2.3841855067985307e-07, -0.04724067449569702, -0.008773470297455788, -0.003704591654241085, -3.090182304382324, -1.1292345523834229, -0.018507882952690125, -0.4633674919605255, -0.01138688251376152, -0.052831199020147324, -0.021551117300987244, -0.21563318371772766, -0.008606011979281902, -0.008375519886612892, -3.576278118089249e-07, -5.8412379075889476e-06, -0.0492032915353775, -0.0006700892699882388, -0.0011301804333925247, -0.2726089656352997, -0.016858601942658424, -0.0005250982358120382, -0.0006529344827868044, -0.0002967870968859643, -0.00013243274588603526, -0.006511660758405924, -4.887569048150908e-06, -0.00024184639914892614, -0.10213091224431992, -0.09626417607069016, -0.26408660411834717, -0.004656542558223009, -2.8013790142722428e-05, -5.722029527532868e-06, -1.6689286894688848e-06, -0.0005688241217285395, -0.0010545651894062757, -0.04046838730573654, -0.01908838376402855, -0.00545560522004962, -7.593343616463244e-05, -2.566513776779175, -0.0012288884026929736, -1.1093417406082153, -1.9073468138230965e-06, -0.09676263481378555, -0.008687322027981281, -0.1457900106906891, -0.031361836940050125, -0.0813891589641571, -0.02147364802658558, -0.012204493395984173, -8.67805938469246e-05, -0.00033563701435923576, -0.0003698380314745009, -0.00882688071578741, -1.9788545614574105e-05, -0.00010716341057559475, -1.4305012882687151e-05, -1.5020257706055418e-05, -7.807903602952138e-05, -0.00018714107864070684, -6.341733387671411e-05, -0.006425435654819012, -9.297892393078655e-05, -8.4638240878121e-06, -0.011869519017636776, -2.0861407392658293e-05, -0.002034976379945874, -1.1920928244535389e-07, -0.00018630675913300365, -0.0006621075444854796, -0.0007445423980243504, -0.00887260865420103, -0.10847565531730652, -0.04770529270172119, -1.3743231296539307, -0.4542771875858307, -0.900991678237915, -0.18856236338615417, -0.6249207854270935, 0.0, -0.1364535242319107, -0.18628548085689545, -0.03032870963215828, -0.08484913408756256, -0.13639351725578308, -0.5367355346679688, -0.44295650720596313, -1.2147018909454346, -1.0737590789794922, -0.02100134640932083, -0.0005144941387698054, -0.005505281034857035, -1.4891165494918823, -0.008628703653812408, -0.004370067268610001, -0.013481879606842995, -0.10940518975257874, -0.030343974009156227, -0.004087427631020546, -0.07078810781240463, -0.00754755362868309, -0.003487340407446027, -0.018586285412311554, -0.02367338351905346, -7.629365427419543e-06, -0.000912250077817589, -0.004775665700435638, -0.00036054308293387294, -0.00039009589818306267, -8.976056415122002e-05, -0.06271714717149734, -0.08242852240800858, -0.49889975786209106, -0.0005828827270306647, -0.0233248770236969, -0.0033321829978376627, -0.9931363463401794, -3.3378546504536644e-06, -1.0728830375228426e-06, -6.9141146923357155e-06, -0.00014053787162993103, -0.1948031634092331], "finish_reason": "stop"}], "metrics": {"energy": 1172.7121950168605, "energy_per_token": 5.354850205556441, "time": 27.94692, "time_per_token": 0.12761150684931508}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n\n    def _preprocess_col(col):\n        col = col.replace(dct)\n        return col\n\n    df = df.apply(_preprocess_col)\n\n    def _encode(col):\n        col = LabelEncoder().fit_transform(col)\n        return col\n\n    if columns is None:\n        columns = df.select_dtypes(include='object').columns\n    df[columns] = df[columns].apply(_encode)\n\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "def", " _", "pre", "process", "_", "col", "(", "col", "):", "\n", "        ", "col", " =", " col", ".", "replace", "(", "d", "ct", ")", "\n", "        ", "return", " col", "\n", "\n", "    ", "df", " =", " df", ".", "apply", "(_", "pre", "process", "_", "col", ")", "\n", "\n", "    ", "def", " _", "encode", "(", "col", "):", "\n", "        ", "col", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "col", ")", "\n", "        ", "return", " col", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(_", "encode", ")", "\n", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.9645822644233704, -0.0107704047113657, -0.0012959185987710953, -0.0048852842301130295, -0.26743608713150024, -0.0008834273321554065, -3.920250654220581, -1.8689022064208984, -1.9217183589935303, -0.24763330817222595, -0.3578721284866333, -1.3521586656570435, -0.0397031269967556, -0.1849571168422699, -0.36901089549064636, -0.005528873298317194, -0.01418531034141779, -1.1871814727783203, -0.11692202836275101, -0.0917842835187912, -0.00372644467279315, -0.6978286504745483, -0.004679917823523283, -0.014204584993422031, -0.00013076403411105275, -0.003979977685958147, -0.22645427286624908, -0.1113244965672493, -1.5541985034942627, -0.18526718020439148, -0.1555008590221405, -0.012682615779340267, -0.00023314618738368154, -1.098294973373413, -0.0958208292722702, -0.011432374827563763, -0.0014527016319334507, -0.19161356985569, -0.017242176458239555, -1.0967194612021558e-05, -1.1920928244535389e-07, -1.9073468138230965e-06, -2.50339189733495e-06, -0.15818095207214355, -0.027448512613773346, -0.2501123547554016, -0.0003432638186495751, -1.8782075643539429, -0.14275042712688446, -0.48127689957618713, -1.7998671531677246, -0.22674158215522766, -0.0886402502655983, -0.0014112761709839106, -0.002082205144688487, -2.4770164489746094, -0.08273936063051224, -0.4729372560977936, -4.0531076592742465e-06, -0.002041638595983386, -0.0005258131423033774, -0.00013553177996072918, -0.01725776121020317, -0.0004884004010818899, -0.00028951745480298996, -0.01095459796488285, -0.06647671014070511, -0.01954919844865799, -0.0006783091812394559, -0.09043470770120621, -0.005412092432379723, -0.022894810885190964, -0.008809038437902927, -0.00013183678674977273, -0.4893530309200287, -0.0673714429140091, -0.021545635536313057, -0.10772079974412918, -0.004180265124887228, -0.0020199865102767944, -0.0008518642862327397, -0.26328006386756897, -0.01106035802513361, -0.08775769919157028, -0.001725257490761578, -0.05188703164458275, -1.5258672647178173e-05, -4.768370445162873e-07, -2.3841855067985307e-07, -0.1521320939064026, -0.13275852799415588, -0.5633193254470825, -0.030419951304793358, -0.004035544581711292, -0.01857762597501278, -0.001116605824790895, -0.030162276700139046, -0.6036341190338135, -0.2370195984840393, -0.11309055984020233, -0.005796646233648062, -0.000811366830021143, -0.0016112453304231167, -0.001302704680711031, -0.004362471401691437, -0.0003927174839191139, -0.00010191874753218144, -0.00017391123401466757, -0.0061132824048399925, -0.009274376556277275, -1.0490362910786644e-05, -0.06577196717262268, -0.0025050232652574778, -0.024284636601805687, -0.00011336160969221964, -1.0753495693206787, -0.20813800394535065, -0.27612778544425964, -0.000532008707523346, -0.03378338739275932, -0.0034698774106800556, -0.00014447122521232814, -0.0028199690859764814, -0.029673926532268524, -0.00043096792069263756, -0.00490592559799552, -1.680836794548668e-05, -0.00019786784832831472, -0.0012730597518384457, -0.012927181087434292, -0.710317850112915, -0.03130199387669563, -0.0013805630151182413, -1.268183708190918, -2.7418097943154862e-06, -1.9073468138230965e-06, -3.4570634852570947e-06, -5.9960475482512265e-05, -0.24906782805919647], "finish_reason": "stop"}], "metrics": {"energy": 685.5735116996767, "energy_per_token": 4.205972464415194, "time": 15.452961, "time_per_token": 0.09480344171779141}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n\n    # Replace values\n    for k, v in dct.items():\n        df = df.replace({k: v})\n\n    # Encode categorical attributes\n    if columns is None:\n        columns = [c for c in df.columns if df[c].dtype == \"object\"]\n\n    for c in columns:\n        le = LabelEncoder()\n        df[c] = le.fit_transform(df[c].values)\n\n    # Standardize numerical attributes\n    df = df.apply(lambda x: (x - x.mean()) / x.std())\n\n    return df\n\ndf = pd.DataFrame({'col1': ['a', 'b', 'c'], 'col2': [1, 2, 3]})\ndct = {'a': 'x', 'b': 'y'}\nresult = task_func(df, dct)\nprint(result)", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Replace", " values", "\n", "    ", "for", " k", ",", " v", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "({", "k", ":", " v", "})", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " attributes", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " [", "c", " for", " c", " in", " df", ".", "columns", " if", " df", "[", "c", "]", ".", "d", "type", " ==", " \"", "object", "\"", "]", "\n", "\n", "    ", "for", " c", " in", " columns", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "c", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "c", "]", ".", "values", ")", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", "\n", "    ", "df", " =", " df", ".", "apply", "(", "lambda", " x", ":", " (", "x", " -", " x", ".", "mean", "())", " /", " x", ".", "std", "())", "\n", "\n", "    ", "return", " df", "\n", "\n", "df", " =", " pd", ".", "DataFrame", "({", "'", "col", "1", "':", " ['", "a", "'", ",", " '", "b", "'", ",", " '", "c", "']", ",", " '", "col", "2", "':", " [", "1", ",", " ", "2", ",", " ", "3", "]", "})", "\n", "d", "ct", " =", " {'", "a", "':", " '", "x", "'", ",", " '", "b", "':", " '", "y", "'}", "\n", "result", " =", " task", "_", "func", "(", "df", ",", " d", "ct", ")", "\n", "print", "(", "result", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.9645822644233704, -0.0107704047113657, -0.0012959185987710953, -0.0048852842301130295, -0.26743608713150024, -0.0008834273321554065, -1.0827968120574951, -0.474318265914917, -0.8854002952575684, -1.5000004768371582, -0.0007438276661559939, -0.24755272269248962, -1.7923048734664917, -0.03049176000058651, -0.03124445304274559, -0.0005357022164389491, -0.0030744450632482767, -2.169585604860913e-05, -0.0007888542604632676, -0.0011383965611457825, -0.0001510267611593008, -0.0016709902556613088, -0.0018737631617113948, -0.17450697720050812, -0.4699040949344635, -0.005500538740307093, -0.001016457681544125, -0.020792607218027115, -1.4124377965927124, -0.13686664402484894, -0.006757147144526243, -0.018482254818081856, -0.003794020274654031, -0.006739859934896231, -0.03011253848671913, -0.0009126074146479368, -0.04823251813650131, -0.20724037289619446, -0.07384387403726578, -0.12637601792812347, -0.7978022694587708, -0.07650522142648697, -0.001459724735468626, -0.8215492963790894, -0.04255480691790581, -0.03511248156428337, -0.08716230094432831, -0.0034477810841053724, -0.0072559877298772335, -0.001016457681544125, -0.2076852172613144, -0.004918025340884924, -1.4930630922317505, -1.8380799293518066, -0.013642407953739166, -0.0023706448264420033, -0.08550895005464554, -0.002214719308540225, -0.05034782364964485, -0.02067829668521881, -0.006034251302480698, -0.007850980386137962, -0.33445289731025696, -0.00013314791431184858, -1.6927575416048057e-05, -3.6477376852417365e-05, -0.00014852374442853034, -0.028304090723395348, -0.054617878049612045, -1.5513603687286377, -0.04572731629014015, -1.0967194612021558e-05, -0.01290870551019907, -0.010383511893451214, -1.3431224822998047, -0.001722401357255876, -0.662668764591217, -1.0096721649169922, -0.0021100416779518127, -0.016359955072402954, -0.0004207202873658389, -0.0007701530121266842, -0.00148781668394804, -1.1376336812973022, -0.0035194142255932093, -0.00032550760079175234, -6.556489552167477e-06, -0.0003129946126136929, -0.021639781072735786, -0.002814976265653968, -0.2422010749578476, -0.013186745345592499, -0.002479932736605406, -0.003743190551176667, -0.0010066924151033163, -0.01161998137831688, -2.4676019165781327e-05, -0.002174158114939928, -0.0003833036171272397, -2.276871418871451e-05, -0.00010239553375868127, -0.006640391889959574, -0.0022586092818528414, -9.238292841473594e-05, -2.104165554046631, -0.00448174774646759, -1.3277666568756104, -0.07675332576036453, -0.011591347865760326, -0.015473316423594952, -0.001994883641600609, -0.011286579072475433, -0.08218292146921158, -0.0730929970741272, -0.04052070155739784, -0.02434408850967884, -0.02995949238538742, -0.0011655449634417892, -0.7409372329711914, -0.23824407160282135, -1.1645843982696533, -0.1952718198299408, -1.8220434188842773, -0.0026964517310261726, -0.056002210825681686, -0.07367201149463654, -0.0011338717304170132, -0.03976888954639435, -0.0026862272061407566, -0.005737858358770609, -0.03305313363671303, -0.00013052565918769687, -0.0014868644066154957, -0.007874635048210621, -0.0004102342063561082, -0.01231377199292183, -3.611976353568025e-05, -1.5735502529423684e-05, -0.3590347170829773, -0.022408491000533104, -0.20808590948581696, -0.00037579628406092525, -0.059417326003313065, -0.0012884180760011077, -0.6003015637397766, -0.004157590679824352, -2.43993878364563, -0.02876948192715645, -0.011196756735444069, -4.184158387943171e-05, -0.029297636821866035, -0.09607772529125214, -0.08925361931324005, -0.030234219506382942, -0.004944952670484781, -0.00029583368450403214, -0.010899178683757782, -0.027804164215922356, -0.0010545651894062757, -4.684815212385729e-05, -0.0009304723353125155, -0.008717693388462067, -0.0007457336178049445, -3.0040289857424796e-05, -0.000608854868914932, -0.010135374031960964, -0.012933535501360893, -0.0014650813536718488, -0.005432248581200838, -0.00017379203927703202, -0.00018809456378221512, -4.076874756719917e-05, -0.004066532477736473, -0.00650206720456481, -0.0034048936795443296, -0.0006063529872335494, -0.004075911827385426, -0.00029976642690598965, -0.0003631647559814155, -0.0019140986260026693, -0.002587544033303857, -0.017109999433159828, -0.0034799750428646803, -0.03577360510826111, -0.0006158839096315205, -0.002466971054673195, -0.0025238110683858395, -0.016694484278559685, -0.00014900050882715732, -0.007311727851629257, -0.00692538870498538, -0.004231191240251064, -5.090107151772827e-05, -0.00031764229061082006, -0.001039203256368637, -2.0265373677830212e-05, -0.0007919512572698295, -0.001672894461080432, -0.005096657667309046, -0.004467388149350882, -0.4323303699493408, -0.0027901313733309507, -0.0016354055842384696, -9.464769391342998e-05, -0.00044848397374153137, -0.0001554368354845792, -0.00015555603022221476, -0.001795467222109437, -0.0024062031880021095, -4.172316494077677e-06, -0.059894513338804245, -0.019533416256308556, -0.5636573433876038, -0.011109873652458191, -0.09904314577579498, -0.8463528156280518, -1.311301275563892e-06, -4.291525328881107e-06, -7.271740287251305e-06, -5.864924969500862e-05, -0.12156250327825546], "finish_reason": "stop"}], "metrics": {"energy": 1099.17442312622, "energy_per_token": 4.486426216841714, "time": 23.384209, "time_per_token": 0.09544575102040816}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df must be a pandas DataFrame.')\n\n    # replace values\n    for old_value, new_value in dct.items():\n        df.replace(to_replace=old_value, value=new_value, inplace=True)\n\n    # encode categorical attributes\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns\n\n    for col in columns:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n\n    # standardize numerical attributes\n    df = (df - df.mean()) / df.std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "Input", " df", " must", " be", " a", " pandas", " Data", "Frame", ".", "')", "\n", "\n", "    ", "#", " replace", " values", "\n", "    ", "for", " old", "_", "value", ",", " new", "_", "value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", ".", "replace", "(", "to", "_", "replace", "=", "old", "_", "value", ",", " value", "=", "new", "_", "value", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "#", " encode", " categorical", " attributes", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " standard", "ize", " numerical", " attributes", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -1.6836903095245361, -1.0128837823867798, -0.49334606528282166, -0.6193537712097168, -0.001335086883045733, -0.01783289946615696, -0.9106664657592773, -0.008840586990118027, -0.00039009589818306267, -1.0327483415603638, -0.011834765784442425, -0.0032228692434728146, -0.2768045663833618, -0.0009999042376875877, -1.0597153902053833, -2.5634217262268066, -0.6539750695228577, -0.7885933518409729, -0.0010773098329082131, -0.3198027014732361, -1.6628024578094482, -0.40676450729370117, -0.6846243143081665, -0.008839759975671768, -0.0012411518255248666, -2.312633478140924e-05, -0.0011297041783109307, -7.784063927829266e-05, -0.003781431820243597, -2.5629668016335927e-05, -0.0028823756147176027, -0.0006906984490342438, -5.280832192511298e-05, -0.002351259347051382, -0.003242237726226449, -0.15052078664302826, -1.6244460344314575, -0.00972627755254507, -0.1442563682794571, -1.7251702547073364, 0.0, -2.288792165927589e-05, -0.03893579542636871, -0.0011926926672458649, -5.960462772236497e-07, -4.768370445162873e-07, -5.447716102935374e-05, -0.0017294225981459022, -0.00011801023356383666, -0.00037424711626954377, -8.344646857949556e-07, -2.861018856492592e-06, -0.0020368797704577446, -0.009325516410171986, 0.0, -0.00021073981770314276, -0.0003175231395289302, -0.03491046652197838, -0.007613806519657373, -0.024053074419498444, -0.0012405564775690436, -0.05717366561293602, -0.28519850969314575, -0.1458185464143753, -0.6960649490356445, -0.06859822571277618, -0.0027650478295981884, -0.7372850775718689, -0.039945296943187714, -0.02625957317650318, -0.05541320517659187, -0.004729869309812784, -0.013281917199492455, -0.0013149671722203493, -0.3237999379634857, -0.007500818464905024, -0.30232542753219604, -0.0008744944934733212, -0.05796876177191734, -9.894321920000948e-06, -1.1920928244535389e-07, -3.576272320060525e-06, -0.08260338008403778, -0.04105310142040253, -1.1298060417175293, -0.009921875782310963, -0.05768545717000961, -0.008116713725030422, -0.0007469248375855386, -0.06032635644078255, -1.320325255393982, -0.0023437668569386005, -0.6851722598075867, -0.5425972938537598, -0.019143233075737953, -0.008325986564159393, -0.0006273209000937641, -0.0009843033039942384, -0.0019351581577211618, -1.2368128299713135, -0.002841247245669365, -0.00025090406415984035, -2.264974000354414e-06, -0.00020644917094614357, -0.017924116924405098, -0.0025599587243050337, -0.17229978740215302, -0.009398974478244781, -0.0022656265646219254, -0.0028318562544882298, -0.0024367659352719784, -0.00757346348837018, -1.4424220353248529e-05, -0.001522692502476275, -0.00010585224663373083, -7.271740287251305e-06, -8.797258487902582e-05, -0.0016012478154152632, -0.0021688053384423256, -9.65590606938349e-06, -0.08816152065992355, -0.005733828525990248, -0.012772656977176666, -0.0017347777029499412, -0.012021118775010109, -0.10616661608219147, -0.06936227530241013, -0.058749061077833176, -0.022398699074983597, -0.024362120777368546, -0.0013917532050982118, -0.5360689163208008, -0.3120306134223938, -0.2520883083343506, -0.00022015532886143774, -0.025046898052096367, -0.0014184186002239585, -5.2927523938706145e-05, -0.002324500121176243, -0.030004611238837242, -0.00015472168161068112, -0.0024114358238875866, -5.507317473529838e-05, -5.98412734689191e-05, -0.001746677909977734, -0.012901408597826958, -0.2625901401042938, -0.0002536452084314078, -0.04542788118124008, -0.0010413468116894364, -1.3004623651504517, -3.3378546504536644e-06, -1.7881377516459906e-06, -3.6954811548639555e-06, -3.659658250398934e-05, -0.19935719668865204], "finish_reason": "stop"}], "metrics": {"energy": 727.6020597896579, "energy_per_token": 4.254982805787473, "time": 16.311535, "time_per_token": 0.09538909356725146}}
{"outputs": [{"text": "# Check if the input df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input df is not a DataFrame\")\n\n    # Replace specified values in the DataFrame using the dictionary\n    for key, val in dct.items():\n        df = df.replace({key: val})\n\n    # Encode categorical attributes using LabelEncoder\n    le = LabelEncoder()\n\n    # Encode specified columns or all object-type columns if columns is not specified\n    columns_to_encode = columns if columns is not None else df.select_dtypes(\n        include=['object']).columns\n    for col in columns_to_encode:\n        if df[col].nunique() > 10000:\n            continue\n        df[col] = le.fit_transform(df[col])\n\n    # Standardize numerical attributes\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["#", " Check", " if", " the", " input", " df", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "input", " df", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Replace", " specified", " values", " in", " the", " Data", "Frame", " using", " the", " dictionary", "\n", "    ", "for", " key", ",", " val", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "({", "key", ":", " val", "})", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " attributes", " using", " Label", "Encoder", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " Enc", "ode", " specified", " columns", " or", " all", " object", "-", "type", " columns", " if", " columns", " is", " not", " specified", "\n", "    ", "columns", "_", "to", "_", "encode", " =", " columns", " if", " columns", " is", " not", " None", " else", " df", ".", "select", "_", "d", "types", "(", "\n", "        ", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " columns", "_", "to", "_", "encode", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "nun", "ique", "()", " >", " ", "1", "0", "0", "0", "0", ":", "\n", "            ", "continue", "\n", "        ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.0162062644958496, -0.7739335298538208, -0.5083693265914917, -0.7820649147033691, -0.1077929437160492, -1.3272886276245117, -0.013659341260790825, -0.10017994791269302, -0.2905019521713257, -0.001695148996077478, -0.1555478870868683, -0.0016108882846310735, -0.01270674541592598, -0.005470069590955973, -0.007098691537976265, -4.792098479811102e-05, -0.00014530557382386178, -0.0004148814477957785, -0.004973895847797394, -1.0371154530730564e-05, -0.01147303357720375, -0.0013380631571635604, -0.0012692499440163374, -0.0024756519123911858, -0.010291720740497112, -0.004639693535864353, -3.576272320060525e-06, -0.06537283957004547, -0.029010724276304245, -2.2291393280029297, -0.1760234534740448, -0.9488925337791443, -0.006744240876287222, -0.007892967201769352, -0.03865530341863632, -0.0011940023396164179, -0.0537201352417469, -0.0011319665936753154, -0.00373832113109529, -0.05901408568024635, -0.000774917658418417, -0.1364733874797821, -0.6894450187683105, -0.9879194498062134, -0.006781064905226231, -0.2516896724700928, -0.05528327077627182, -0.07235885411500931, -0.0005629861843772233, -1.3717525005340576, -0.09986121207475662, -0.5136557221412659, -0.12045420706272125, -0.0004366874636616558, -0.24163053929805756, -0.841698408126831, -0.04483363777399063, -2.969949960708618, -0.001061352901160717, -0.00199333718046546, -7.271740287251305e-06, -0.0020573418587446213, -0.0008930747280828655, -0.00012337400403339416, -0.0006254147156141698, -0.002484808210283518, -0.10477191209793091, -0.5036472082138062, -0.005517373792827129, -0.0006750926841050386, -0.032134078443050385, -1.116133451461792, -0.05461697652935982, -0.006256991531699896, -0.04086853191256523, -0.0026634002570062876, -0.002771467436105013, -0.019117271527647972, -0.0010130041046068072, -0.02687365747988224, -0.5983094573020935, -0.0074018994346261024, -0.15298891067504883, -0.4005725681781769, -0.8257831335067749, -0.07274433225393295, -0.00493664899840951, -0.13350243866443634, -0.0013375869020819664, -1.231454610824585, -0.011917580850422382, -0.0007615765207447112, -9.179073458653875e-06, -0.0003535122668836266, -0.014967754483222961, -1.9624561071395874, -0.00030048147891648114, -0.41743335127830505, -1.4960503578186035, -0.007149469573050737, -2.123997211456299, -0.1743164211511612, -0.46785035729408264, -0.031250692903995514, -0.020094161853194237, -0.0125653725117445, -0.005326840095221996, -0.001016576774418354, -0.8564102053642273, -0.5335018038749695, -0.1336989402770996, -1.2564723491668701, -1.6837515830993652, -0.0073359874077141285, -0.00013016807497479022, -2.3995258808135986, -1.9884755611419678, -0.06306685507297516, -5.400034933700226e-05, -0.010357202962040901, -0.0002579356369096786, -0.03313294053077698, -0.23409543931484222, -0.0070028104819357395, -0.43207821249961853, -5.006664650863968e-05, -1.9788545614574105e-05, -0.0008114859228953719, -0.18006211519241333, -0.0010053823934867978, -0.04538732394576073, -1.6569954823353328e-05, -1.1920928244535389e-07, -2.9802276912960224e-06, -0.24773837625980377, -2.7552194595336914, -0.0029229081701487303, -0.16719242930412292, -0.7858596444129944, -0.005644099321216345, -0.02766978181898594, -0.001997977029532194, -0.0009868042543530464, -0.03180444613099098, -0.7969111800193787, -0.25850385427474976, -0.34342870116233826, -0.006985764019191265, -0.011218328960239887, -0.0004990047891624272, -6.198863957251888e-06, 0.0, -8.702239938429557e-06, -0.0010675451485440135, -0.00018606838420964777, -0.0012887752382084727, -3.126646041870117, -1.0283565521240234, -0.014226209372282028, -9.107174992095679e-05, -0.00012683063687290996, -0.0005926521262153983, -3.1295835971832275, -2.3841830625315197e-06, -0.00906506646424532, -0.5371811985969543, -0.008249021135270596, -2.1483004093170166, -1.2901464700698853, -1.5704147815704346, -1.3996418714523315, -1.6820651292800903, -0.3379836678504944, -0.16391834616661072, -0.001328181941062212, -0.8735063672065735, -0.01986267976462841, -0.08843119442462921, -0.2742376923561096, -0.01525168027728796, -0.001404728856869042, -0.0029785337392240763, -0.0017254954436793923, -0.007332910783588886, -4.637133679352701e-05, -0.00019870213873218745, -0.00015245705435518175, -5.125986263010418e-06, -0.0001591317413840443, -0.04220356047153473, -0.0017971331253647804, -1.2874520507466514e-05, -0.11793550848960876, -0.005796883255243301, -0.018967678770422935, -0.002162381773814559, -0.00481730792671442, -0.09604155272245407, -0.015644792467355728, -0.020254099741578102, -0.010367820970714092, -0.7169086933135986, -0.0014177043922245502, -0.6573539972305298, -0.30377376079559326, -0.563274621963501, -0.0006132629350759089, -0.11591696739196777, -0.0012242449447512627, -7.354942499659956e-05, -0.0018586517544463277, -0.02456127665936947, -0.00017271934484597296, -0.0025031205732375383, -2.9801878554280847e-05, -4.851700214203447e-05, -0.0009023646707646549, -0.012475311756134033, -1.8079506158828735, -0.10202369838953018, -0.001950387260876596, -1.3811402320861816, -7.867782187531702e-06, -1.9073468138230965e-06, -2.7418097943154862e-06, -4.2914423829643056e-05, -0.18073683977127075], "finish_reason": "stop"}], "metrics": {"energy": 960.3039940261834, "energy_per_token": 4.230414070599927, "time": 21.717697, "time_per_token": 0.09567267400881058}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a pandas DataFrame.\")\n    df = df.copy()\n    df.replace(dct, inplace=True)\n    label_encoders = {}\n    for col in df.columns:\n        if df[col].dtype == \"object\" or col in columns:\n            df[col] = df[col].astype(\"category\")\n            label_encoders[col] = LabelEncoder()\n            df[col] = label_encoders[col].fit_transform(df[col])\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "    ", "df", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "    ", "label", "_", "enc", "oders", " =", " {}", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " \"", "object", "\"", " or", " col", " in", " columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "ast", "ype", "(", "\"", "category", "\"", ")", "\n", "            ", "label", "_", "enc", "oders", "[", "col", "]", " =", " Label", "Encoder", "()", "\n", "            ", "df", "[", "col", "]", " =", " label", "_", "enc", "oders", "[", "col", "]", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -1.640852689743042, -0.013693912886083126, -0.0249498151242733, -2.3553524017333984, -0.011383935809135437, -0.0012309125158935785, -0.8185471296310425, -0.049352288246154785, -0.0012192443246021867, -0.004331492818892002, -1.2089879512786865, -1.2950866222381592, -0.26494672894477844, -0.08176887035369873, -0.0019261157140135765, -0.5619062185287476, -0.00552982185035944, -0.23470160365104675, -0.31052255630493164, -1.540477991104126, -0.6638823747634888, -0.09603462368249893, -0.0025724435690790415, -0.047003790736198425, -0.00011836781777674332, -0.0013600870734080672, -0.02071869745850563, 0.0, -0.002226256998255849, -0.00029047083808109164, -0.0041396645829081535, -0.08388880640268326, -0.19166091084480286, -3.0649380683898926, -0.1370893120765686, -2.469090700149536, -0.28021231293678284, -0.013212273828685284, -0.06989432126283646, -0.012992137111723423, -0.04552367702126503, -0.5805114507675171, -0.44893762469291687, -0.0570719949901104, -0.20360928773880005, -0.04472170025110245, -0.1345265656709671, -0.024173051118850708, -0.001482579275034368, -0.0022435036953538656, -0.10770196467638016, -0.9172505736351013, -0.0883546993136406, -8.95221673999913e-05, -1.6689160474925302e-05, -1.7046782886609435e-05, -0.00013863079948350787, -0.06562494486570358, -0.06317183375358582, -1.6232624053955078, -0.15860573947429657, -0.666183590888977, -0.09084855765104294, -0.14074331521987915, -0.003490666626021266, -0.020954418927431107, -0.012161744758486748, -0.003604820929467678, -0.0006367324967868626, -1.8609763383865356, -0.024020720273256302, -0.0028928357642143965, -0.0016920547932386398, -0.006322974804788828, -0.6399179697036743, -0.0027772923931479454, -0.00020096666412428021, -0.0001919085334520787, -0.00276445341296494, -0.233345627784729, -1.3470558769768104e-05, -0.062445156276226044, -0.23415882885456085, -0.19783279299736023, -5.245195097813848e-06, -0.013186627067625523, -0.0779835507273674, -0.03283466771245003, -0.31372612714767456, -0.0013954435708001256, -0.5387200117111206, -0.0449526272714138, -0.0017763087525963783, -0.0004077318590134382, -0.00012420836719684303, -8.582700684200972e-05, -0.005384229123592377, -2.0265558760002023e-06, -0.000774798565544188, -0.06788583844900131, -0.008273730985820293, -0.6837524175643921, -0.019156448543071747, -9.262132516596466e-05, -0.0008163695456460118, -0.0009299959056079388, -0.015998801216483116, -1.311301275563892e-06, -1.0371154530730564e-05, -1.0251946150674485e-05, -0.0002768848498817533, -6.09140915912576e-05, -1.6689286894688848e-06, -4.1126360883936286e-05, -0.0003103728231508285, -0.00024148885859176517, -9.417489309271332e-06, -3.349725011503324e-05, -0.018566157668828964, -0.0005249790847301483, -1.2516897186287679e-05, -0.07281471788883209, -0.010355904698371887, -0.5185908675193787, -0.5883834362030029, -0.44925937056541443, -0.5898956060409546, -0.0010453957365825772, -0.026177242398262024, -0.0027912012301385403, -7.521823135903105e-05, -0.0015944637125357985, -0.11023041605949402, -0.0004258441040292382, -0.00820905901491642, -0.00011264643399044871, -9.858122211880982e-05, -0.0011185110779479146, -0.025668000802397728, -0.017534829676151276, -0.042055897414684296, -0.004594840109348297, -0.6593535542488098, -0.008494436740875244, -2.194005250930786], "finish_reason": "stop"}], "metrics": {"energy": 681.9843738040923, "energy_per_token": 4.15844130368349, "time": 15.650887, "time_per_token": 0.09543223780487806}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df should be a pandas DataFrame.\")\n\n    df = df.copy()\n    df.replace(dct, inplace=True)\n    object_columns = df.select_dtypes(include=['object']).columns\n    if columns is not None:\n        object_columns = columns\n\n    # Label Encoding for Categorical Columns\n    for col in object_columns:\n        try:\n            df[col] = LabelEncoder().fit_transform(df[col])\n        except Exception as e:\n            print(f\"Error encoding column '{col}': {e}\")\n\n    # Numerical Standardization\n    numerical_columns = df.select_dtypes(include=['float', 'int']).columns\n    for col in numerical_columns:\n        mean = df[col].mean()\n        std = df[col].std()\n        df[col] = (df[col] - mean) / std\n\n    return df\n\nimport numpy as np", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " should", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "    ", "df", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "    ", "object", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "object", "_", "columns", " =", " columns", "\n", "\n", "    ", "#", " Label", " Enc", "oding", " for", " C", "ategor", "ical", " Col", "umns", "\n", "    ", "for", " col", " in", " object", "_", "columns", ":", "\n", "        ", "try", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "Error", " encoding", " column", " '", "{", "col", "}", "':", " {", "e", "}\"", ")", "\n", "\n", "    ", "#", " N", "umerical", " Standard", "ization", "\n", "    ", "n", "umerical", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "float", "'", ",", " '", "int", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " numerical", "_", "columns", ":", "\n", "        ", "mean", " =", " df", "[", "col", "]", ".", "mean", "()", "\n", "        ", "std", " =", " df", "[", "col", "]", ".", "std", "()", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " mean", ")", " /", " std", "\n", "\n", "    ", "return", " df", "\n", "\n", "import", " numpy", " as", " np", "\n", "\n", "def"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -1.6136882305145264, -0.0017827346455305815, -0.029925478622317314, -0.840162456035614, -0.010507498867809772, -0.0007163104019127786, -0.5981103777885437, -0.010626163333654404, -0.0011176775442436337, -0.004315824713557959, -0.2561371922492981, -0.0006865289760753512, -1.5026355981826782, -0.2873903214931488, -0.06484228372573853, -0.0011143434094265103, -0.38176199793815613, -0.0031673761550337076, -0.30158498883247375, -0.4923210144042969, -1.4102723598480225, -0.7083905339241028, -0.11196291446685791, -0.0019139796495437622, -0.0454917848110199, -8.570780482841656e-05, -0.00114994659088552, -0.017787812277674675, 0.0, -0.001805105828680098, -0.0001599660754436627, -0.004148805979639292, -0.07773420959711075, -0.9642956852912903, -3.4298930168151855, -0.003758392296731472, -1.0561668872833252, -0.004194153938442469, -0.17315152287483215, -0.004702105652540922, -0.10823015868663788, -3.814689989667386e-06, -2.3841855067985307e-07, -1.2159273865108844e-05, -0.20357446372509003, -0.012145609594881535, -0.6824022531509399, -0.004715394228696823, -0.03380413353443146, -0.046092353761196136, -0.0025037152227014303, -0.3828966021537781, -0.12207340449094772, -0.9145275354385376, -0.04690074175596237, -0.1589948683977127, -0.9192046523094177, -9.572047565598041e-05, -0.021175377070903778, -0.003662784118205309, -0.0012754409108310938, -0.40848392248153687, -1.2516897186287679e-05, -0.005659746006131172, -0.030402258038520813, -1.9000948667526245, -0.040649592876434326, -1.7399306297302246, -0.001397348241880536, -2.974189043045044, -2.903656482696533, -1.1882598400115967, -0.43646693229675293, -2.3135945796966553, -0.8598793148994446, -0.0033279056660830975, -0.014723571017384529, -1.2114852666854858, -0.001696577062830329, -0.03322208300232887, -0.0011607821797952056, -0.4777238667011261, -0.4543704092502594, -0.006474352441728115, -0.00644225487485528, -1.1920928244535389e-07, -1.0728830375228426e-06, -0.0017761897761374712, -0.00044383687782101333, -0.002496580593287945, -4.452088832855225, -0.00018344627460464835, -0.00748839508742094, -0.0006039702566340566, -0.9185546040534973, -0.012319541536271572, -0.0050980811938643456, -0.002838275395333767, -0.005995029583573341, -0.05309462919831276, -5.602820692729438e-06, -0.0019089824054390192, -1.168244216387393e-05, -0.00015662873920518905, -0.0024473497178405523, -2.0265373677830212e-05, -5.8053239627042785e-05, -0.026005471125245094, -0.001965140225365758, -4.732496745418757e-05, -0.06862860918045044, -0.005971329752355814, -0.02154715172946453, -0.0011373248416930437, -0.7530703544616699, -0.11341319978237152, -0.06144007295370102, -0.0009520289022475481, -0.006652944255620241, -0.0006843847222626209, -0.23204025626182556, -0.0034370890352874994, -0.04351101815700531, -0.035079218447208405, -0.482477068901062, -1.0029027462005615, -0.11831652373075485, -0.47588101029396057, -5.4834770708112046e-05, -0.0002165798214264214, -0.026003265753388405, -0.0005728749092668295, -0.006666680797934532, -0.22166025638580322, -0.011959751136600971, -0.0012956805294379592, -0.002828052267432213, -0.1317576766014099, -0.002848736010491848, -0.06286022812128067, -1.631905436515808, -0.028961623087525368, -0.09776106476783752, -0.003135290928184986, -0.29458102583885193, -0.0018139113672077656, -2.5806403160095215, -0.004774360917508602, -0.006344178691506386, -0.02658628113567829, -0.0006797387031838298, -0.10229417681694031, -0.00047994061606004834, -0.01673375815153122, 0.0, 0.0, -3.3378546504536644e-06, -0.0018897071713581681, -0.41499367356300354, -0.14911217987537384, -0.7389129400253296, -0.2562215328216553, -5.447716102935374e-05, -0.003948630765080452, -0.0013543728273361921, -0.008094719611108303, -0.002822346519678831, -0.0005204515182413161, -0.04497849941253662, -0.06549231708049774, -0.2890937328338623, -0.016238568350672722, -0.0004848258395213634, -0.0013568728463724256, 0.0, -2.3841855067985307e-07, -0.004474864806979895, -0.0003692421887535602, -0.0018221217906102538, -1.9969948530197144, -0.08566007018089294, -0.006120035890489817, -0.006720677483826876, -0.00034314466756768525, -1.4543427823809907e-05, -3.969590397900902e-05, -0.00038652101648040116, -0.0037136177998036146, -0.005707040894776583, -0.00011526874004630372, -0.013130390085279942, -0.011514398269355297, -0.002133833011612296, -2.884823152271565e-05, -8.821448318485636e-06, -6.627816765103489e-05, -1.5497195136049413e-06, -4.8993817472364753e-05, -0.004256831482052803, -0.0007656264933757484, -0.02977425418794155, -0.6097608804702759, -0.040195997804403305, -2.8490614567999728e-05, -0.0002479245886206627, -0.011645903810858727, -0.014320108108222485, -5.328513361746445e-05, -8.356221951544285e-05, -6.437280717364047e-06, -0.0004301338049117476, -0.0004742213059216738, -0.0006189814303070307, -0.005866215564310551, -0.00016592556494288146, -0.004443889483809471, -0.012456710450351238, -0.06098224222660065, -0.000760385300964117, -0.025964122265577316, -0.0011255365097895265, -0.32379457354545593, -0.006088756024837494, -3.8475677967071533, -2.004167318344116, -0.008103824220597744, -0.0015382850542664528, -0.009129093028604984, -0.8330610394477844, -0.089356429874897], "finish_reason": "stop"}], "metrics": {"energy": 1045.7320919303886, "energy_per_token": 4.19972727682887, "time": 23.757893, "time_per_token": 0.09541322489959839}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n\n    df = df.copy()\n    df.replace(dct, inplace=True)\n    df = encode_object_cols(df, columns=columns)\n    df = standardize(df)\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "    ", "df", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", " =", " encode", "_", "object", "_", "cols", "(", "df", ",", " columns", "=", "columns", ")", "\n", "    ", "df", " =", " standard", "ize", "(", "df", ")", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -2.0415492057800293, -1.744608759880066, -0.023386599496006966, -0.05658106878399849, -0.3627808392047882, -0.005142081528902054, -0.8630078434944153, -0.0012032896047458053, -0.007300130557268858, -0.32925254106521606, -0.0008803306263871491, -1.504006028175354, -0.3203151226043701, -0.08676102757453918, -0.0016191004542633891, -0.45331162214279175, -0.007017962634563446, -0.2040310651063919, -0.5122010707855225, -1.4012073278427124, -0.752409040927887, -0.12639912962913513, -0.002617625752463937, -0.0390685573220253, -0.00012587709352374077, -0.0013162767281755805, -0.01730017550289631, 0.0, -0.0022558735217899084, -0.0002616301644593477, -0.004867371171712875, -0.06608758121728897, -0.9600726366043091, -1.3539252281188965, -0.6029953956604004, -1.4859302043914795, -0.06991466879844666, -2.7137889862060547, -0.09302723407745361, -3.6004090309143066, -0.01843719743192196, -0.0029427579138427973, -0.023500600829720497, -0.016536321491003036, -1.16738760471344, -0.0022568251006305218, -0.012823030352592468, -0.014226444996893406, -0.11811242252588272, -0.15813444554805756, -0.13590215146541595, -0.3001212179660797, -0.0485757477581501, -2.6604907512664795, -0.00031871485407464206, -0.0330687016248703, -0.0029856651090085506, -0.24221885204315186, -0.02561815455555916, -0.002806060714647174, -0.015101742930710316, -0.0018340209499001503, -0.05011416971683502], "finish_reason": "stop"}], "metrics": {"energy": 348.4419652309418, "energy_per_token": 4.301752657172121, "time": 7.5101814, "time_per_token": 0.09271828888888889}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    df = df.copy()\n\n    # Replace values using dictionary\n    for key, value in dct.items():\n        df = df.replace(key, value)\n\n    # Encode categorical attributes\n    label_enc = LabelEncoder()\n    if columns is None:\n        columns = df.select_dtypes(include='object').columns\n    for col in columns:\n        df[col] = label_enc.fit_transform(df[col])\n\n    # Standardize numerical attributes\n    for col in df.select_dtypes(include=\"int64\").columns:\n        df[col] = df[col] - df[col].mean()\n        df[col] = df[col] / df[col].std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "\n", "    ", "#", " Replace", " values", " using", " dictionary", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "(", "key", ",", " value", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " attributes", "\n", "    ", "label", "_", "enc", " =", " Label", "Encoder", "()", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " label", "_", "enc", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "include", "=", "\"", "int", "6", "4", "\"", ")", ".", "columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "()", "\n", "        ", "df", "[", "col", "]", " =", " df", "[", "col", "]", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.5692804455757141, -0.0008347125840373337, -0.0070037576369941235, -0.30882516503334045, -0.0008378094644285738, -1.5221208333969116, -0.3086042106151581, -0.06637364625930786, -0.0013021094491705298, -0.44733262062072754, -0.005494610872119665, -0.23155571520328522, -0.9020096063613892, -0.00041500062798149884, -1.2010571956634521, -0.6393646597862244, -0.8065739870071411, -2.7390289306640625, -1.493290901184082, -0.12153948843479156, -0.0005246216314844787, -0.2280474156141281, -1.1258374452590942, -0.041612543165683746, -0.1066778376698494, -9.321732068201527e-05, -0.0016125545371323824, -7.867782187531702e-06, -0.00046302087139338255, -0.0002708068350329995, -7.10462118149735e-05, -0.00048744716332294047, -0.0016260033007711172, -0.14860381186008453, -0.41210877895355225, -0.006541268900036812, -0.00034957972820848227, -0.02810429036617279, -0.3177935779094696, -0.041063740849494934, -7.486063259420916e-05, -0.0006292270263656974, -0.00966748408973217, -0.002894381061196327, -0.0090800691395998, -0.0008945039589889348, -0.07287634164094925, -0.2292994111776352, -0.03220830485224724, -0.1520678997039795, -0.9063628911972046, -0.1920948326587677, -0.0017999890260398388, -3.778261661529541, -0.05021382495760918, -2.754148483276367, -0.7916460633277893, -0.01342224795371294, -3.6954811548639555e-06, -0.0002933310461230576, -0.014662603847682476, -0.19277319312095642, -0.7924293279647827, -0.04528012126684189, -0.08396531641483307, -0.2513920068740845, -0.0028079627081751823, -0.01632043346762657, -0.0011817384511232376, -0.37418726086616516, -0.01576554775238037, -0.2020193636417389, -0.0007251255447044969, -0.04902396723628044, -1.1444026313256472e-05, -2.3841855067985307e-07, -2.145764938177308e-06, -0.10290408134460449, -0.13129758834838867, -0.8849578499794006, -0.07596684247255325, -0.010745520703494549, -0.01259621512144804, -0.0010039533954113722, -0.04519546777009964, -0.16507898271083832, -0.08215118199586868, -0.3201311230659485, -0.00978990737348795, -0.010057603940367699, -0.0006792622152715921, -0.0009492897079326212, -0.0010213402565568686, -0.2004803717136383, -0.014185662381350994, -0.0005949157639406621, -0.0007981451926752925, -0.0008273277780972421, -0.012586444616317749, -1.1920922133867862e-06, -2.264974000354414e-06, -1.2278481335670222e-05, -0.00024375328212045133, -0.0001389883691444993, -6.794698856538162e-05, -6.675497570540756e-05, -0.012175993993878365, -0.0038371284026652575, -2.932505594799295e-05, -0.3026202917098999, -0.003761361353099346, -0.018365338444709778, -0.0009683449170552194, -0.0045789391733706, -0.07746803015470505, -0.05275226756930351, -0.041437115520238876, -0.02365661785006523, -0.03441556170582771, -0.0006615119054913521, -2.061359167098999, -0.03581156209111214, -0.10802163183689117, -0.008504129014909267, -0.08138640969991684, -0.35970431566238403, -4.768370445162873e-07, -2.264974000354414e-06, -2.9801878554280847e-05, -0.003469521179795265, -1.0708158016204834, -1.9765137434005737, -0.9361027479171753, -2.164325475692749, -0.25971463322639465, -3.957670196541585e-05, -0.02226405404508114, -0.7609462141990662, -0.00011622230522334576, -9.929640509653836e-05, -0.010789981111884117, -0.00273199868388474, -0.0024278471246361732, -0.1907982975244522, -0.016863642260432243, -0.00019035911827813834, -0.0007615765207447112, -0.06931211054325104, -2.357191801071167, -0.011544565670192242, -0.0002324311062693596, -0.0013986576814204454, -0.6053180694580078, -0.038076989352703094, -0.0035586145240813494, -1.5735502529423684e-05, -8.010543388081715e-05, -0.0004549183649942279, -0.004950409289449453, -0.005341543350368738, -1.3548908233642578, -0.0310557559132576, -0.0626639649271965, -0.00010799778101500124, -2.1219027985353023e-05, -0.0002087136817863211, -0.016481444239616394, -0.019689470529556274, -0.00012408917245920748, -6.437280717364047e-06, -0.010574381798505783, -0.007505196612328291, -0.027083568274974823, -0.0003980797773692757, -3.528532761265524e-05, -0.00010430268594063818, -0.00018630675913300365, -0.007837851531803608, -0.005151925142854452, -0.002593251410871744, -0.07883532345294952, -0.0009027220075950027, -0.04921940714120865, -0.0013831820106133819, -0.33047765493392944, -0.00462165754288435, -1.2923003435134888], "finish_reason": "stop"}], "metrics": {"energy": 964.7393131427764, "energy_per_token": 4.572224232904153, "time": 21.11817, "time_per_token": 0.10008611374407582}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Invalid input: df should be a pandas DataFrame.\")\n    if not isinstance(dct, dict):\n        raise ValueError(\"Invalid input: dct should be a dictionary.\")\n    if not isinstance(columns, list):\n        raise ValueError(\"Invalid input: columns should be a list.\")\n    df = df.applymap(lambda x: dct[x] if x in dct else x)\n    if columns is not None:\n        df[columns] = df[columns].apply(LabelEncoder().fit_transform)\n    else:\n        object_columns = df.select_dtypes('object').columns\n        df[object_columns] = df[object_columns].apply(LabelEncoder().fit_transform)\n    df = df.subtract(df.mean()).divide(df.std())\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " input", ":", " df", " should", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "d", "ct", ",", " dict", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " input", ":", " d", "ct", " should", " be", " a", " dictionary", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "columns", ",", " list", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " input", ":", " columns", " should", " be", " a", " list", ".", "\"", ")", "\n", "    ", "df", " =", " df", ".", "apply", "map", "(", "lambda", " x", ":", " d", "ct", "[", "x", "]", " if", " x", " in", " d", "ct", " else", " x", ")", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "else", ":", "\n", "        ", "object", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "('", "object", "')", ".", "columns", "\n", "        ", "df", "[", "object", "_", "columns", "]", " =", " df", "[", "object", "_", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "df", " =", " df", ".", "sub", "t", "ract", "(", "df", ".", "mean", "())", ".", "div", "ide", "(", "df", ".", "std", "())", "\n", "    ", "return", " df"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -3.186492681503296, -0.3184898793697357, -1.5000218152999878, -0.4153560996055603, -1.287287712097168, -0.0004189328756183386, -0.0161848496645689, -0.7988053560256958, -0.005675985477864742, -0.00023684080224484205, -0.46755319833755493, -0.002271454781293869, -0.0008031480247154832, -0.0015716117341071367, -1.6117180585861206, -1.0896883010864258, -0.6097114086151123, -0.08744753897190094, -6.41325386823155e-05, -0.09193337708711624, -5.543078441405669e-05, -0.0003262225945945829, -0.002792033366858959, -0.0194147527217865, -0.001348063233308494, -0.0010869554243981838, -0.01966094970703125, -0.013116389513015747, -2.3841830625315197e-06, -0.0014540109550580382, -0.011874937452375889, -0.006137571297585964, -0.00907569844275713, -0.0011374439345672727, -0.01607270911335945, -0.00031871485407464206, -0.003339549293741584, -0.00015484087634831667, -0.005035693757236004, -0.0549759604036808, -0.04801348224282265, -0.00026603974401950836, -8.630380034446716e-05, -0.0003091811086051166, -0.958886981010437, -0.546007513999939, -0.6385201811790466, -0.23237009346485138, -6.115249561844394e-05, -0.007322260178625584, -0.00014411364099942148, -0.5006087422370911, -1.0123831033706665, -0.004392499569803476, -0.0009302341495640576, -0.12385094165802002, -0.001396991079673171, 0.0, -0.00048160876031033695, -0.003251624759286642, -0.002373974770307541, -0.0005813338793814182, -0.001110175740905106, -0.017548182979226112, -0.005727428011596203, -0.000284154579276219, -0.00982780009508133, -0.004534913692623377, -1.0946851968765259, -0.004635065793991089, -0.0001567479339428246, -0.00023147765023168176, -1.1096487045288086, -1.4853800535202026, -0.2506621181964874, -0.04359319061040878, -0.0017719058087095618, -1.3707562685012817, -0.5177963972091675, -0.0002227773511549458, -0.06993089616298676, -0.009199493564665318, -0.0016019619069993496, -0.006307693663984537, -3.576214658096433e-05, -1.6118903160095215, -0.004731292836368084, -0.005022528115659952, -0.0018820922123268247, -0.007942876778542995, -0.0030437828972935677, -0.0009087961516343057, -2.0265558760002023e-06, -0.07185973227024078, -0.0012407946633175015, -0.002539031207561493, -0.10323646664619446, -0.06365450471639633, -1.0390737056732178, -0.0674513429403305, -0.038263678550720215, -2.400237560272217, -0.0003046525234822184, -0.021628350019454956, -0.001828071428462863, -0.0014917447697371244, -0.6863821148872375, -0.23671378195285797, -0.005082425195723772, -0.0032265528570860624, -0.0015369757311418653, -0.16236494481563568, -0.0021327624563127756, -0.0007550249574705958, -0.0008917645900510252, -0.0009093916742131114, -0.1592104136943817, -0.0010921949287876487, -0.0383022278547287, -6.198863957251888e-06, -0.0025481870397925377, -0.0008381668012589216, -0.00027450130437500775, -0.0006585336523130536, -0.002231133636087179, -0.056611258536577225, -0.011050689965486526, -0.03416133299469948, -0.10089686512947083, -0.00017998983094003052, -0.0013668728061020374, -0.0008152975351549685, -2.1700081825256348, -0.004430834669619799, -0.5771498680114746, -0.0013790155062451959, -0.02298055775463581, -0.0016913408180698752, -0.02187318541109562, -5.125986263010418e-06, -3.576278118089249e-07, -3.3378546504536644e-06, -1.2137080430984497, -0.0013988957507535815, -0.0003297977091278881, -0.01611986570060253, -0.0030030175112187862, -0.04526644945144653, -0.0012421043356880546, -0.3220269978046417, -0.005658560898154974, -0.0007136897183954716, -5.483612312673358e-06, -4.0531076592742465e-06, -0.0003250309091527015, -0.0001674750237725675, -0.0005312938592396677, -0.0016098171472549438, -0.0005105622112751007, -4.291525328881107e-06, -3.576272320060525e-06, -0.00010108436981681734, -0.00015317220822907984, -0.0007059465860947967, -0.0009472650708630681, -0.03591782972216606, -2.861018856492592e-06, -0.0005758534534834325, -1.0132738680113107e-05, -0.00031931069679558277, -1.7881233361549675e-05, -0.0009002208826132119, -0.0004888770054094493, -0.0009173714206553996, -0.05683506652712822, -0.46497732400894165, -0.1849592924118042, -1.991672396659851, -0.09810759127140045, -0.5649887919425964, -2.135491132736206, -2.145764938177308e-06, -0.00015579440514557064, -0.0005545270396396518, -0.00034350217902101576, -0.0009765623253770173, -0.20272791385650635, -0.04291437938809395, -2.3007127310847864e-05, -1.3580923080444336, -0.0007257211836986244, -0.00015472168161068112, -1.966933996300213e-05, -8.67805938469246e-05, -0.00448056124150753, -0.05358636751770973, -0.010199449956417084, -0.01664336957037449, -0.0023203373420983553], "finish_reason": "stop"}], "metrics": {"energy": 986.2077603130339, "energy_per_token": 4.565776668115897, "time": 22.740944, "time_per_token": 0.10528214814814814}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input DataFrame is not valid')\n\n    for col in df.columns:\n        if df[col].dtype == 'object':\n            if cols is None or col in cols:\n                # Encoding object types\n                le = LabelEncoder()\n                df[col] = le.fit_transform(df[col])\n\n    # Replace values in the dataframe using dictionary\n    for key, value in dct.items():\n        df[df == key] = value\n\n    # Standardize numerical attributes\n    for col in df.columns:\n        if df[col].dtype == 'int64':\n            # Standardizing int64 types\n            df[col] = (df[col] - df[col].mean()) / df[col].std()\n        elif df[col].dtype == 'float64':\n            # Standardizing float64 types\n            df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "('", "Input", " Data", "Frame", " is", " not", " valid", "')", "\n", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " '", "object", "':", "\n", "            ", "if", " col", "s", " is", " None", " or", " col", " in", " col", "s", ":", "\n", "                ", "#", " Enc", "oding", " object", " types", "\n", "                ", "le", " =", " Label", "Encoder", "()", "\n", "                ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Replace", " values", " in", " the", " data", "frame", " using", " dictionary", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "df", " ==", " key", "]", " =", " value", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " '", "int", "6", "4", "':", "\n", "            ", "#", " Standard", "izing", " int", "6", "4", " types", "\n", "            ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "        ", "elif", " df", "[", "col", "]", ".", "d", "type", " ==", " '", "float", "6", "4", "':", "\n", "            ", "#", " Standard", "izing", " float", "6", "4", " types", "\n", "            ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -1.6836903095245361, -1.0128837823867798, -3.352501630783081, -0.011578739620745182, -0.17533262073993683, -0.17267438769340515, -0.27498307824134827, -0.4978905916213989, -0.00558779202401638, -0.29522234201431274, -0.0009536962606944144, -2.2228305339813232, -2.2538208961486816, -0.44920992851257324, -0.42231279611587524, -0.3087281882762909, -0.06677404046058655, -0.013651344925165176, -0.014509523287415504, -0.016721097752451897, -1.0239546298980713, -0.4513835608959198, -0.04751887917518616, -0.0001248043408850208, -0.0006968930247239769, -6.687417771900073e-05, -0.004670544061809778, -0.03011704981327057, -0.14977146685123444, -0.3307790458202362, -0.21863089501857758, -0.1484697163105011, -0.02382367104291916, -0.005099266767501831, -0.8469374775886536, -1.89080011844635, -0.748820424079895, -0.16620375216007233, -0.42542991042137146, -0.2738080620765686, -0.04497314244508743, -0.012205435894429684, -0.3946390151977539, -0.0015136463334783912, -0.0016817011637613177, -0.02106134407222271, -0.002623927313834429, -2.8751866817474365, -1.6294593811035156, -2.2256295680999756, -2.4080066680908203, -2.9595437049865723, -0.7970297336578369, -0.001257820287719369, -1.2350139617919922, -0.005051113199442625, -0.0011331572895869613, -0.00010823617776622996, -0.0007053509471006691, -0.03337647393345833, -0.0025710167828947306, -0.30975455045700073, -0.034776460379362106, -0.0008119623525999486, -0.0030882307328283787, -0.01095542311668396, -0.5444504022598267, -0.00011431517486926168, -0.006390138063579798, -0.0005974177038297057, -1.0490362910786644e-05, -0.0060590156354010105, -0.021057141944766045, -0.0026944305282086134, -1.4781842764932662e-05, -0.37824586033821106, -0.01415263582020998, -1.8081815242767334, -0.31248772144317627, -0.5942770838737488, -1.6691718101501465, -0.7022398710250854, -1.1974050998687744, -0.5288505554199219, -1.93711519241333, -0.16770121455192566, -2.3017802238464355, -1.8691352605819702, -0.09622574597597122, -0.002742341486737132, -0.5050433874130249, -0.9034956097602844, -0.09881174564361572, -0.11456642299890518, -0.00013529339048545808, -0.011481047607958317, -0.0009480987209826708, -0.0061959801241755486, -0.0010099078062921762, -0.00011097769311163574, -0.0006909366929903626, -0.005718182772397995, -0.206719309091568, -2.5304574966430664, -0.6721571087837219, -0.13692310452461243, -0.0008677055011503398, -0.00018726025882642716, -0.0004312062228564173, -0.003343470161780715, -0.012102152220904827, -0.017002884298563004, -0.0017573880031704903, -0.09761781245470047, -0.3052290380001068, -0.4856685996055603, -0.297605961561203, -1.167266845703125, -0.1425238698720932, -0.0012978235026821494, -0.770979642868042, -0.035863086581230164, -0.03467444330453873, -0.0016013667918741703, -0.008062792010605335, -0.04498806968331337, -0.007268177345395088, -0.0008006466086953878, -0.0012461524456739426, -0.04802745580673218, -0.06617818027734756, -0.0043551125563681126, -5.245071224635467e-05, -8.34461570775602e-06, -3.755022044060752e-05, -0.000713213172275573, -0.0028292411006987095, -2.7283337116241455, -0.18086758255958557, -0.3565092980861664, -0.0801774263381958, -1.2516897186287679e-05, -1.0775136947631836, -0.007739911787211895, -0.004062733147293329, -1.0145245790481567, -0.4118761718273163, -2.2789418697357178, -1.9828287363052368, -0.6899603009223938, -0.00010597144137136638, -0.4476327896118164, -0.07039253413677216, -0.0006343498243950307, -0.24815040826797485, -0.008233060128986835, -0.0004101150552742183, -0.0003691230376716703, -0.12219230830669403, -0.17626523971557617, -0.0004800597671419382, -0.0006897454150021076, -8.475421054754406e-05, -0.004796190652996302, -0.0038918720092624426, -0.019248249009251595, -0.0008105330052785575, -1.3708974620385561e-05, -1.1086402082582936e-05, -2.2291887944447808e-05, -0.0035277295392006636, -0.01376222912222147, -0.0007493072189390659, -0.012129592709243298, -0.00018690270371735096, -2.038458114839159e-05, -0.00028546550311148167, -9.524368942948058e-05, -0.00013267113536130637, -0.005318895447999239, -0.00445528281852603, -2.6978940963745117, -0.08329395949840546, -0.026236465200781822, -0.0005364171229302883, -4.005352093372494e-05, -9.775113539944869e-06, -1.2993727978027891e-05, -0.0007039214833639562, -0.00026306029758416116, -0.007622442673891783, -0.001739775761961937, -0.08938423544168472, -0.005092980805784464, -1.0609570381348021e-05, -0.003684875788167119, -0.00021360022947192192, -0.0008648469229228795, -0.004613351076841354, -0.0047844452783465385, -0.0005214046686887741, -0.004268820397555828, -0.0014993627555668354, -4.625213477993384e-05, -0.0014054430648684502, -0.004184063524007797, -0.0004060635983478278, -0.002540101297199726, -0.000550357042811811, -3.182837463100441e-05, -0.00014065706636756659, -0.0003095386200584471, -0.006122997961938381, -0.0001486429391661659, -4.708655978902243e-05, -9.775113539944869e-06, -0.00011598391574807465, -0.0018057008273899555, -0.0009202298242598772, -0.00010215714428341016, -2.0265558760002023e-06, -2.002696055569686e-05, -7.152531907195225e-06, -0.0019639506936073303, -0.000996093382127583, -0.0005161621957086027, -0.0005025792634114623, -3.8742269680369645e-05, -2.9802276912960224e-06, -1.6689160474925302e-05, -1.2874520507466514e-05, -6.508615479106084e-05, -0.0002954761730507016, -0.00043501926120370626, -0.09851633757352829, -0.0022386270575225353, -0.09047151356935501, -0.0033280246425420046, -0.7845510840415955, -0.015672488138079643, -1.5709054470062256], "finish_reason": "stop"}], "metrics": {"energy": 1117.4753734073656, "energy_per_token": 4.365138177372522, "time": 24.627924, "time_per_token": 0.096202828125}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    for key, value in dct.items():\n        df = df.replace(to_replace={key: value})\n    if columns is None:\n        object_columns = df.select_dtypes(include='object').columns\n        df[object_columns] = df[object_columns].apply(LabelEncoder().fit_transform)\n    else:\n        df[columns] = df[columns].apply(LabelEncoder().fit_transform)\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "(", "to", "_", "replace", "={", "key", ":", " value", "})", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "object", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "        ", "df", "[", "object", "_", "columns", "]", " =", " df", "[", "object", "_", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "else", ":", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.9645822644233704, -0.0107704047113657, -0.0012959185987710953, -0.0048852842301130295, -1.452193260192871, -1.641912579536438, -0.9006493091583252, -0.15945224463939667, -0.1679162085056305, -0.00013505500101018697, -0.002295123180374503, -2.253030106658116e-05, -0.00031895318534225225, -0.000886285852175206, -0.0001299296854995191, -0.006487736478447914, -0.004800461698323488, -0.25451603531837463, -0.38157588243484497, -0.007968895137310028, -0.0007697956170886755, -0.033783502876758575, -0.6209918260574341, -2.3191380500793457, -7.152555099310121e-07, -6.782778655178845e-05, -2.9763011932373047, -0.08456907421350479, -0.005655122920870781, -0.03991895169019699, -0.019542183727025986, -0.027231834828853607, -0.18089473247528076, -0.8285843133926392, -0.05878525599837303, -0.02061477117240429, -0.11650960147380829, -0.006839199457317591, -0.005227942951023579, -0.0014586533652618527, -3.0393590927124023, -0.007310308050364256, -0.5402534604072571, -0.0022106750402599573, -0.2820872962474823, -0.0012047183699905872, -0.022925451397895813, -3.635817120084539e-05, -5.960462772236497e-07, -1.9073468138230965e-06, -0.15872475504875183, -0.0165411289781332, -0.870594322681427, -0.007501173764467239, -0.00873660109937191, -0.030685534700751305, -0.00289794709533453, -0.02591928467154503, -0.6557158827781677, -1.135479211807251, -0.17578479647636414, -0.0033141232561320066, -3.4570634852570947e-06, -1.1920922133867862e-06, -0.002415598137304187, -0.0022469530813395977, -0.0505264550447464, -0.011583570390939713, -0.0010434903670102358, -5.006777428206988e-06, -1.5497195136049413e-06, -0.0007962394156493247, -0.001001809723675251, -0.06366356462240219, -0.020747656002640724, -0.0784873366355896, -4.0531076592742465e-06, -0.002666372573003173, -0.00013350549852475524, -0.00015793983766343445, -0.0001284993631998077, -0.0008428120636381209, -0.002984951948747039, -0.007433256600052118, -0.04989565536379814, -0.02705897018313408, -0.00016711745411157608, -0.0012511529494076967, -0.0008463853155262768, -0.11859237402677536, -0.014049435965716839, -0.0016369527438655496, -0.0011549476766958833, -0.0007337023853324354, -0.002697046147659421, -0.0006836699321866035, -0.0007282227743417025, -2.2172682292875834e-05, -0.0001454247540095821, -0.003974515944719315, -0.0006659197388216853, -0.0018688846612349153, -5.006777428206988e-06, -0.00027426297310739756, -5.8412379075889476e-06, -7.998623186722398e-05, -4.7205765440594405e-05, -0.00018463814922142774, -0.00044550508027896285, -0.0007104733376763761, -0.05695410072803497, -0.6626868844032288, -0.3171725571155548, -0.1535889059305191, -0.00039772229501977563, -0.04020721837878227, -0.0041848947294056416, -0.00013648532330989838, -0.0034774804953485727, -0.059016332030296326, -0.0002456601650919765, -0.009195122867822647, -3.576214658096433e-05, -0.00015233787416946143, -0.002228397876024246, -0.016152475029230118, -0.017398355528712273, -0.01745271310210228, -0.003475698409602046], "finish_reason": "stop"}], "metrics": {"energy": 649.82596228981, "energy_per_token": 4.247228511698105, "time": 14.594423, "time_per_token": 0.09538838562091503}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a DataFrame.\")\n\n    if not isinstance(dct, dict):\n        raise ValueError(\"dct is not a dictionary.\")\n\n    if columns is None:\n        columns = df.select_dtypes('object').columns\n\n    if not isinstance(columns, (list, np.ndarray)):\n        raise ValueError(\"columns is not a list.\")\n\n    for col in columns:\n        if col in df.columns:\n            df[col] = df[col].replace(dct)\n\n    # Label encoding categorical columns\n    for col in columns:\n        if df[col].dtype == 'object':\n            encoder = LabelEncoder()\n            df[col] = encoder.fit_transform(df[col])\n\n    # Standardizing numerical columns\n    for col in df.columns:\n        if df[col].dtype != 'object':\n            df[col] = (df[col] - df[col].mean()) / df[col].", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "d", "ct", ",", " dict", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "d", "ct", " is", " not", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "('", "object", "')", ".", "columns", "\n", "\n", "    ", "if", " not", " isinstance", "(", "columns", ",", " (", "list", ",", " np", ".", "nd", "array", "))", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "columns", " is", " not", " a", " list", ".", "\"", ")", "\n", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "if", " col", " in", " df", ".", "columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "replace", "(", "d", "ct", ")", "\n", "\n", "    ", "#", " Label", " encoding", " categorical", " columns", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " '", "object", "':", "\n", "            ", "encoder", " =", " Label", "Encoder", "()", "\n", "            ", "df", "[", "col", "]", " =", " encoder", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Standard", "izing", " numerical", " columns", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ", "!", "=", " '", "object", "':", "\n", "            ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", "."], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -2.3829495906829834, -2.6991004943847656, -0.06425745785236359, -0.06125665083527565, -0.20181119441986084, -0.004413388203829527, -1.8562148809432983, -0.060901936143636703, -0.0008705640211701393, -0.008597975596785545, -0.3368479013442993, -0.00093606993323192, -1.6011089086532593, -1.0570183992385864, -0.5791861414909363, -0.00011324241495458409, -0.11744781583547592, -0.00011693747364915907, -0.00042989550274796784, -0.004764039069414139, -0.014514927752315998, -0.0021387101151049137, -0.0019022003980353475, -0.06990977376699448, -0.03760156035423279, -2.622600959512056e-06, -0.0043434808030724525, -0.013087445870041847, -0.0517050176858902, -0.0009544108179397881, -0.029270315542817116, -0.001587798586115241, -0.0057577709667384624, -0.1161075085401535, -0.03811967745423317, -0.0014650813536718488, -0.00011252723925281316, -0.000504723924677819, -0.02818460948765278, -0.0006756883230991662, -1.0255481004714966, -0.8442829847335815, -0.013270153664052486, -0.1363966315984726, -0.014155927114188671, -0.006434437353163958, -0.0026599522680044174, -0.1779359132051468, -0.005132119636982679, -0.41002604365348816, -0.003627151483669877, -0.12532278895378113, -1.07287787614041e-05, -4.768370445162873e-07, -2.264974000354414e-06, -2.0744359493255615, -0.0096515454351902, -0.006075011566281319, -0.019417207688093185, -0.0013467537937685847, -0.1528407633304596, -0.2186650037765503, -0.003029045881703496, -2.1085262298583984, -0.7832029461860657, -0.6469648480415344, -4.5060096454108134e-05, -0.005246442276984453, -0.0009608419495634735, -2.516664743423462, -0.032622385770082474, -0.0023746881633996964, -1.2114349603652954, -1.7523612768854946e-05, -0.0025568671990185976, -1.1444026313256472e-05, -0.084121935069561, -0.062104303389787674, -0.0018198610050603747, -0.0012857988476753235, -0.10592517256736755, -0.006354839541018009, -1.1920928244535389e-07, -0.0052339909598231316, -0.043662574142217636, -0.0975446105003357, -0.6679942011833191, -0.004299088381230831, -0.03572012111544609, -0.02810371108353138, -1.2175178527832031, -0.003390755970031023, -0.00018130090029444546, -0.00025459862081333995, -0.018517594784498215, -0.0005741854547522962, -1.3715263605117798, -0.9167660474777222, -0.06304951012134552, -0.04049036651849747, -0.0005298641044646502, -0.001135776867158711, -0.00419130502268672, -0.6396915316581726, -0.15999342501163483, -1.1989092826843262, -0.06502170115709305, -0.12232227623462677, -0.001620647613890469, -0.3161211907863617, -0.009073099121451378, -0.003174149664118886, -0.45225170254707336, -0.043893177062273026, -0.0011027929140254855, -0.0008937893435359001, -0.08915843069553375, -0.0426412858068943, -0.0026801638305187225, -4.708655978902243e-05, -0.00023398046323563904, -0.0004596845537889749, -0.5305633544921875, -0.0034008543007075787, -0.0029882797971367836, -3.933898824470816e-06, -0.017261510714888573, -0.07515519857406616, -1.0315361022949219, -0.12769266963005066, -3.0441994667053223, -2.4869871139526367, -1.2841167449951172, -1.4143197536468506, -0.6437016129493713, -0.0872303694486618, -0.0020753054413944483, -0.3926282227039337, -0.056916940957307816, -0.02029545232653618, -0.06822149455547333, -0.0005318895564414561, -0.00015627116954419762, -0.0013999671209603548, -0.06682220846414566, -2.992997169494629, -0.11356016248464584, -0.00021789084712509066, -5.090107151772827e-05, -0.00033241944038309157, -0.003213244490325451, -0.08478441089391708, -0.051136694848537445, -0.1930471509695053, -0.033901628106832504, -0.07620900869369507, -0.002615723293274641, -0.0011474461061879992, -1.6593265533447266, -0.002071022754535079, -0.0006850994541309774, -1.5616295058862306e-05, -0.0002177716523874551, -0.029988761991262436, -0.0010119322687387466, -0.23610328137874603, -0.0020334296859800816, -0.0004892344586551189, -0.0022768068592995405, -0.0005155664402991533, -0.0045740739442408085, -1.847726889536716e-05, -0.0006192197324708104, -8.010543388081715e-05, -0.00021431533969007432, -0.00010048838157672435, -0.002890696283429861, -0.0006001578294672072, -1.811964830267243e-05, -0.06828562915325165, -0.007370541803538799, -0.04652109369635582, -0.006522675044834614, -0.06721485406160355, -0.2912959158420563, -1.4798424243927002, -0.05147009715437889, -0.046202998608350754, -0.031119544059038162, -0.001258177449926734, -0.6908830404281616, -0.01116233505308628, -0.022014182060956955, -0.01076273899525404, -0.019841525703668594, -0.3031647503376007, -0.01711667887866497, -0.0005267662927508354, -0.0006569849792867899, -0.026045193895697594, -0.14271177351474762, -0.007601502817124128, -3.325883881188929e-05, -3.6954811548639555e-06, -3.5523738915799186e-05, -0.0012236495967954397, -0.0018573428969830275, -0.1943397969007492, -1.1920928244535389e-07, -0.0002026352594839409, -0.0028008301742374897, -0.0004401430196594447, -0.0029419257771223783, -0.002186766592785716, -0.00082923355512321, -0.3731706440448761, -0.016745716333389282, -3.576214658096433e-05, -0.00013457823661156, -0.06394004076719284, -0.04624033346772194, -0.0001656871900195256, -0.00017915551143232733, -2.145764938177308e-06, -0.0009860896971076727, -0.0020655503030866385, -0.007318828254938126, -0.0005509527400135994, -1.9073468138230965e-06, -8.702239938429557e-06, -8.940656698541716e-06, -0.0009201106731779873, -0.015876900404691696, -0.0006793813081458211, -0.014358299784362316, -3.45700973412022e-05, -1.0847986231965479e-05, -3.7431014789035544e-05, -6.0794889577664435e-05], "finish_reason": "length"}], "metrics": {"energy": 1190.2124775352477, "energy_per_token": 4.649267490372061, "time": 26.92237, "time_per_token": 0.1051655078125}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    # Replace specific values in the DataFrame\n    df = df.replace(dct)\n\n    # Encode object-type columns using LabelEncoder\n    obj_columns = df.select_dtypes(include=['object']).columns\n    if columns is not None:\n        obj_columns = obj_columns.intersection(columns)\n    if len(obj_columns) > 0:\n        le = LabelEncoder()\n        df[obj_columns] = df[obj_columns].apply(lambda col: le.fit_transform(col))\n\n    # Standardize numerical columns using mean and std\n    for col in df.columns:\n        mean = df[col].mean()\n        std = df[col].std()\n        df[col] = (df[col] - mean) / std\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Replace", " specific", " values", " in", " the", " Data", "Frame", "\n", "    ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "\n", "    ", "#", " Enc", "ode", " object", "-", "type", " columns", " using", " Label", "Encoder", "\n", "    ", "obj", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "obj", "_", "columns", " =", " obj", "_", "columns", ".", "inter", "section", "(", "columns", ")", "\n", "    ", "if", " len", "(", "obj", "_", "columns", ")", " >", " ", "0", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "obj", "_", "columns", "]", " =", " df", "[", "obj", "_", "columns", "]", ".", "apply", "(", "lambda", " col", ":", " le", ".", "fit", "_", "transform", "(", "col", "))", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", " using", " mean", " and", " std", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "mean", " =", " df", "[", "col", "]", ".", "mean", "()", "\n", "        ", "std", " =", " df", "[", "col", "]", ".", "std", "()", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " mean", ")", " /", " std", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.5692804455757141, -0.0008347125840373337, -0.0070037576369941235, -0.30882516503334045, -0.0008378094644285738, -1.1469491720199585, -0.49284547567367554, -2.1712050437927246, -0.009305911138653755, -0.7260761857032776, -0.1474008411169052, -0.08655037730932236, -0.0008335214806720614, -0.6389780044555664, -0.000621959799900651, -1.5107951164245605, -0.3351108729839325, -0.025286830961704254, -0.0003363520372658968, -0.12519963085651398, -0.0009080815361812711, -0.004366506822407246, -6.031808152329177e-05, -0.016223203390836716, -0.010928421281278133, -0.04970579594373703, -0.00037508129025809467, -0.05037083104252815, -0.3545234203338623, -0.029837431386113167, -3.02221941947937, -0.08032583445310593, -0.037946272641420364, -0.03315911814570427, -0.9771336317062378, -0.02723519876599312, -0.010354370810091496, -0.054493147879838943, -0.0004170263418927789, -2.5830249786376953, -0.003357846289873123, -1.3697407245635986, -0.0016912217251956463, -0.09333859384059906, -0.0029356263112276793, -0.022097207605838776, -6.794906312279636e-06, -1.1920928244535389e-07, -0.00020394629973452538, -0.10698188096284866, -0.0062328241765499115, -0.3505948781967163, -0.0038433035369962454, -0.06118634715676308, -0.0343962125480175, -0.0005298641044646502, -0.17335392534732819, -0.08646903932094574, -0.5135830640792847, -0.03218221664428711, -0.2338724136352539, -0.17868466675281525, -5.3881147323409095e-05, -0.0049649993889033794, -0.0030768217984586954, -0.0010065733222290874, -0.06632310897111893, -5.006777428206988e-06, -0.0007631250191479921, -0.01413700357079506, -0.49845147132873535, -2.7418097943154862e-06, -4.768370445162873e-07, -0.1500982940196991, -0.005468528252094984, -3.6238969187252223e-05, -0.0009079624433070421, -0.14335021376609802, -0.0002549561613705009, -0.013039910234510899, -0.31244710087776184, -2.569822072982788, -0.6899886727333069, -2.169585604860913e-05, -0.0034483750350773335, -5.960462772236497e-07, -1.4305104514278355e-06, -0.016545232385396957, -0.028098147362470627, -9.738924563862383e-05, -0.00040070133400149643, -0.0008610355434939265, -0.0020283141639083624, -0.0004993622424080968, -1.1443411111831665, -0.006370593793690205, -0.00037079135654494166, -1.7881377516459906e-06, -0.0001538873475510627, -0.004843763541430235, -0.0031072453130036592, -0.8117928504943848, -0.08599135279655457, -0.00468395184725523, -8.344646857949556e-07, -2.7418097943154862e-06, -0.003718368476256728, -0.0004960260121151805, -0.014363352209329605, -0.004036257043480873, -0.00022456508304458112, -1.7881377516459906e-06, -3.814689989667386e-06, -7.235741941258311e-05, -0.00029309268575161695, -0.0005664412747137249, -0.0017578639090061188, -0.7161433696746826, -0.21862246096134186, -0.0002379134384682402, -0.020664867013692856, -3.290122185717337e-05, -0.00029094755882397294, -6.496695277746767e-05, -1.5735502529423684e-05, -8.630380034446716e-05, -0.0030541226733475924, -0.023613307625055313, -0.0029845954850316048, -0.026023242622613907, -0.0033887361641973257, -0.005824024323374033, -0.06056010723114014, -0.0440220907330513, -0.13371750712394714, -0.45188799500465393, -2.1756343841552734, -0.6220371127128601, -0.045575615018606186, -1.1428894996643066, -0.1075836792588234, -0.0004297763225622475, -3.366999864578247, -0.21476542949676514, -0.104228675365448, -0.0048795901238918304, -0.13717889785766602, -0.4613470137119293, -0.05230707302689552, -0.0008744944934733212, -0.0010801678290590644, -3.1173031330108643, -0.08272267878055573, -0.007803195156157017, -0.011959162540733814, -0.00033468366018496454, -1.2755313036905136e-05, -2.8609820219571702e-05, -0.0003965306677855551, -0.0027959563303738832, -0.006803087890148163, -6.69933797325939e-05, -0.005259605124592781, -0.002896401798352599, -0.001060757553204894, -2.825220326485578e-05, -1.1920922133867862e-06, -6.079655122448457e-06, -5.364403477869928e-06, -1.490105023549404e-05, -0.006648325826972723, -0.0010675451485440135, -0.004705190192908049, -0.45875316858291626, -0.025718193501234055, -2.47952248173533e-05, -0.0002076410164590925, -0.0014034194173291326, -0.017848121002316475, -3.731181277544238e-05, -5.018585216021165e-05, -9.536738616588991e-07, -0.0017698828596621752, -0.00024959311122074723, -0.0004065402317792177, -0.009102986194193363, -0.00021300431399140507, -0.003254357725381851, -0.008790604770183563, -0.03439667075872421, -0.00045849301386624575, -0.03885438293218613, -0.0013249675976112485, -1.425267219543457, -8.702239938429557e-06, -9.536738616588991e-07, -3.6954811548639555e-06, -6.210611172718927e-05, -0.17157797515392303], "finish_reason": "stop"}], "metrics": {"energy": 942.5187602519993, "energy_per_token": 4.226541525793719, "time": 21.303036, "time_per_token": 0.09552930941704035}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n\n    if dct is not None:\n        for key, value in dct.items():\n            df = df.replace(key, value)\n\n    if columns is not None:\n        columns_to_encode = columns\n    else:\n        columns_to_encode = df.select_dtypes(include='object').columns\n\n    le = LabelEncoder()\n    for col in columns_to_encode:\n        df[col] = le.fit_transform(df[col].values)\n\n    df = (df - df.mean()) / df.std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " d", "ct", " is", " not", " None", ":", "\n", "        ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "            ", "df", " =", " df", ".", "replace", "(", "key", ",", " value", ")", "\n", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "columns", "_", "to", "_", "encode", " =", " columns", "\n", "    ", "else", ":", "\n", "        ", "columns", "_", "to", "_", "encode", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "for", " col", " in", " columns", "_", "to", "_", "encode", ":", "\n", "        ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "]", ".", "values", ")", "\n", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.9168383479118347, -0.00873660109937191, -0.00027616979787126184, -0.6926243305206299, -0.007322615012526512, -0.0016201715916395187, -0.0038902093656361103, -0.2913672626018524, -0.0008561521535739303, -1.7035512924194336, -0.9175605177879333, -1.3828182090946939e-05, -0.8564137816429138, -0.06957823783159256, -0.00014411364099942148, -0.07894163578748703, -0.015625663101673126, -0.003188884584233165, -0.4015823304653168, -0.8461282849311829, -0.1518424153327942, -0.17090828716754913, -0.00011467275908216834, -0.002155958442017436, -1.311301275563892e-06, -0.0006708040600642562, -0.0006223172531463206, -7.009260298218578e-05, -0.002842911286279559, -0.0017897554207593203, -0.2677372097969055, -0.24003377556800842, -0.01325650792568922, -0.00035958975786343217, -0.02204788289964199, -0.6835929751396179, -0.14349159598350525, -0.00014876213390380144, -0.0012443665182217956, -0.01134987361729145, -0.01534043438732624, -0.0662798210978508, -0.0028960451018065214, -0.5045708417892456, -0.050219155848026276, -0.007092773448675871, -1.6550382375717163, -2.6702524337451905e-05, -0.03295105695724487, -0.002274665981531143, -0.0012548437807708979, -2.126307725906372, -1.0988523960113525, -0.061535581946372986, -7.593343616463244e-05, -0.017114100977778435, -0.0002848696312867105, -0.52396559715271, -0.010436482727527618, -0.06868092715740204, -0.016020270064473152, -8.177422569133341e-05, -0.0008705640211701393, -0.0004637358069885522, -0.026669740676879883, -0.00029523781267926097, -0.0001137191939051263, -1.1920928244535389e-07, -2.5033637939486653e-05, -8.093983342405409e-05, -0.18538713455200195, -0.0008356655016541481, -0.05831068754196167, -1.3112935448589269e-05, -3.576278118089249e-07, -8.344646857949556e-07, -0.06274984031915665, -0.058572228997945786, -0.7785511612892151, -0.021691810339689255, -0.0068912929855287075, -0.011679720133543015, -0.0005075835506431758, -0.03398171439766884, -0.06407622992992401, -0.0006358985556289554, -1.4057289361953735, -0.008299149572849274, -0.0009035557159222662, -2.7418097943154862e-06, -0.00019536493346095085, -0.0049408008344471455, -0.17766748368740082, -0.19945524632930756, -0.4243331551551819, -0.005949525628238916, -0.008640995249152184, -0.00031585473334416747, -7.510157047363464e-06, 0.0, -2.253030106658116e-05, -0.0004325169720686972, -0.0003398079425096512, -0.0015379278920590878, -0.21041129529476166, -0.00779361417517066, -0.001001571537926793, -0.0017467968864366412, -0.0006307758158072829, -0.02362704649567604, -3.909988299710676e-05, -6.0794889577664435e-05, -0.00020287363440729678, -1.6689286894688848e-06, -0.00018094333063345402, -0.006950723007321358, -0.0031276855152100325, -3.766942609217949e-05, -1.7078338861465454, -0.003053528256714344, -0.8986921310424805, -0.29815393686294556, -0.007811711169779301, -0.042681723833084106, -0.002570065436884761, -0.7747896313667297, -0.42288708686828613, -0.5331591963768005, -0.00037174468161538243, -0.02005525305867195, -0.0029093578923493624, -9.643566590966657e-05, -0.0035268981009721756, -0.086026132106781, -0.00034707720624282956, -0.009164057672023773, -6.97350042173639e-05, -9.953480184776708e-05, -0.0006457865820266306, -0.02369503676891327, -0.6276850700378418, -0.0004180987598374486, -0.024997485801577568, -0.002126338891685009, -1.0312082767486572, -1.9073468138230965e-06, -1.4305104514278355e-06, -2.9802276912960224e-06, -3.58813522325363e-05, -0.1783253699541092], "finish_reason": "stop"}], "metrics": {"energy": 726.0556948604584, "energy_per_token": 4.221254039886386, "time": 16.498283, "time_per_token": 0.09592025}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.replace(dct)\n    df_encoded = encode_categorical_columns(df, columns)\n    df_standardized = standardize_numerical_columns(df_encoded)\n    return df_standardized", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "    ", "df", "_", "encoded", " =", " encode", "_", "c", "ategor", "ical", "_", "columns", "(", "df", ",", " columns", ")", "\n", "    ", "df", "_", "standard", "ized", " =", " standard", "ize", "_", "n", "umerical", "_", "columns", "(", "df", "_", "encoded", ")", "\n", "    ", "return", " df", "_", "standard", "ized", "\n", "\n", "def"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -1.640852689743042, -0.013693912886083126, -0.0249498151242733, -0.15104877948760986, -0.0011970981722697616, -0.6229594945907593, -0.0012698451755568385, -0.007778828497976065, -1.2125444412231445, -1.4559797048568726, -0.25521939992904663, -0.0630490630865097, -0.001751794945448637, -1.9957971572875977, -0.0038998278323560953, -0.01528701838105917, -3.2305197237292305e-05, -0.00978388637304306, -0.15644459426403046, -0.12813355028629303, -1.7514115571975708, -1.1272735595703125, -3.803830146789551, -0.030509103089571, -2.008058547973633, -0.08574377745389938, -0.7822067141532898, -0.00501991854980588, -0.034356243908405304, -0.3717798590660095, -0.31743642687797546, -0.007146747317165136, -0.002405965467914939, -0.020047424361109734, -0.011240843683481216, -0.3555058538913727, -0.010159328579902649, -0.006506804842501879, -0.2015366107225418, -0.024209123104810715, -1.0827863216400146, -0.008590766228735447, -0.007871323265135288, -0.09831269085407257, -0.002726529957726598, -0.015453479252755642, -0.7289047837257385, -0.0005100856651552022, -0.005404504481703043, -0.07535300403833389, -0.0008713977294974029, -0.0006895071710459888, -0.09888949245214462, -0.00034517052699811757, -0.03021039441227913, -0.001623861026018858, -0.025012601166963577, -0.017294317483901978, -0.0030652941204607487, -0.0005727558163926005, -0.00027414379292167723, -8.821448318485636e-06, -0.009564291685819626, -0.0018017739057540894, -0.028626887127757072], "finish_reason": "stop"}], "metrics": {"energy": 378.12402236175535, "energy_per_token": 4.501476456687564, "time": 7.936855, "time_per_token": 0.09448636904761905}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame\")\n    # Replace specified values using the dictionary\n    for k, v in dct.items():\n        df.replace(k, v, inplace=True)\n    # Encode categorical columns\n    if columns is None:\n        # If columns are not specified, we assume that we want to encode all columns with dtype object\n        columns = [col for col in df.columns if df[col].dtype == object]\n    df[columns] = df[columns].apply(LabelEncoder().fit_transform)\n    # Standardize numerical columns\n    df.loc[:, (df.dtypes.abs() != object)] = df.loc[:, (df.dtypes.abs() != object)].apply(\n        lambda x: (x - x.mean()) / x.std())\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " should", " be", " a", " Data", "Frame", "\"", ")", "\n", "    ", "#", " Replace", " specified", " values", " using", " the", " dictionary", "\n", "    ", "for", " k", ",", " v", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", ".", "replace", "(", "k", ",", " v", ",", " in", "place", "=", "True", ")", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "#", " If", " columns", " are", " not", " specified", ",", " we", " assume", " that", " we", " want", " to", " encode", " all", " columns", " with", " dtype", " object", "\n", "        ", "columns", " =", " [", "col", " for", " col", " in", " df", ".", "columns", " if", " df", "[", "col", "]", ".", "d", "type", " ==", " object", "]", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", "\n", "    ", "df", ".", "loc", "[:", ",", " (", "df", ".", "d", "types", ".", "abs", "()", " ", "!", "=", " object", ")]", " =", " df", ".", "loc", "[:", ",", " (", "df", ".", "d", "types", ".", "abs", "()", " ", "!", "=", " object", ")]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " (", "x", " -", " x", ".", "mean", "())", " /", " x", ".", "std", "())", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -2.3829495906829834, -1.7918626070022583, -0.007009084802120924, -0.10947047919034958, -0.5390320420265198, -0.006792313419282436, -0.3572973608970642, -0.0009234455064870417, -0.0056493147276341915, -1.13917076587677, -2.0158262252807617, -0.8238525986671448, -1.1163341999053955, -0.01087925024330616, -3.119715690612793, -0.7855802178382874, -0.33929044008255005, -0.1013934388756752, -0.0014778178883716464, -0.298697292804718, -1.6111811399459839, -0.03967689350247383, -0.02994965761899948, -0.0005149707430973649, -0.0033144797198474407, -2.312633478140924e-05, -0.001278893556445837, -0.0008425738196820021, -8.618460560683161e-05, -0.0013263961300253868, -0.0023646983318030834, -0.10748647153377533, -1.1766319274902344, -0.009049945510923862, -0.3665280342102051, -0.10104826837778091, -0.00010215714428341016, -0.0026688692159950733, -0.004922532942146063, -0.01604572683572769, -1.1920928244535389e-07, -0.0013387774815782905, -0.00021705655672121793, -0.01977631263434887, -0.011113646440207958, -0.7286846041679382, -0.07230672985315323, -0.23703783750534058, -0.01650184765458107, -0.11544305831193924, -1.0360933542251587, -0.8064610958099365, -0.0016781308222562075, -0.7365887761116028, -0.05318189412355423, -0.02990187704563141, -0.08530580997467041, -0.004561613779515028, -0.007734707091003656, -0.0012668687850236893, -2.758321762084961, -0.6476336121559143, -0.7233322262763977, -1.2824592590332031, -0.014389791525900364, -0.1198967918753624, -0.0061847250908613205, -3.98298978805542, -1.3362226486206055, -0.8051580786705017, -1.9367460012435913, -0.3589159846305847, -0.035706087946891785, -0.0966435894370079, -0.14903073012828827, -2.9225001335144043, -1.8278557062149048, -0.6259430050849915, -0.3790585994720459, -0.18185757100582123, -0.0006955826538614929, -0.28953468799591064, -0.014312234707176685, -2.0126845836639404, -0.31886520981788635, -0.016511229798197746, -0.0005814530304633081, -0.02658628113567829, -0.001791778369806707, -0.02894367277622223, -0.019237957894802094, -0.003274438437074423, -0.009918334893882275, -0.07393820583820343, -6.4490144723095e-05, -1.6331539882230572e-05, -1.847726889536716e-05, -4.2676016164477915e-05, -0.008136105723679066, -0.047716885805130005, -1.8936142921447754, -0.007678162306547165, -0.0030497252009809017, -0.08755839616060257, -3.0039708614349365, -0.8572214245796204, -0.0013549680588766932, -0.0005658455775119364, -0.0012436520773917437, -0.03557080402970314, -0.0027589849196374416, -0.00027247529942542315, -0.00018225439998786896, -0.0002623452164698392, -0.009677519090473652, -0.02057483419775963, -0.03372218832373619, -1.4305104514278355e-06, -0.00045134371612221, -9.989239333663136e-05, -3.576214658096433e-05, -9.786603914108127e-05, -0.00032074074260890484, -0.002731047570705414, -0.020155733451247215, -0.03221777081489563, -0.014730031602084637, -0.1402713805437088, -0.07466178387403488, -0.051734451204538345, -0.08913815021514893, -0.10983508080244064, -0.0003381395654287189, -0.35357972979545593, -2.38539719581604, -0.16155995428562164, -0.01473414245992899, -0.002642593812197447, -0.7035235166549683, -0.002432603854686022, -0.0015886317705735564, -0.055276501923799515, -0.00014935807848814875, -2.356145143508911, -1.1304221153259277, -0.00011491115583339706, -0.31267669796943665, 0.0, -1.1920928244535389e-07, -0.05470433458685875, -0.042043209075927734, -0.0810738280415535, -0.9791737198829651, -0.008896712213754654, -0.007838442921638489, -0.015191215090453625, -0.00015317220822907984, -0.16373659670352936, -0.031217994168400764, -0.00016175392374861985, -0.000226472009671852, -0.00017617580306250602, -0.0015230495482683182, -0.0003936707798857242, -0.00022313489171210676, -0.010460784658789635, -4.768370445162873e-07, -5.722029527532868e-06, -0.0043362402357161045, -0.0067192562855780125, -0.07522132247686386, -0.04226253181695938, -0.0006871246150694788, -0.42882728576660156, -0.013981609605252743, -0.013476704247295856, -0.29059940576553345, -0.0003334919747430831, -0.019583450630307198, -0.002691101748496294, -0.0012687736889347434, -0.04574337601661682, -9.452849917579442e-05, -0.005405571311712265, -0.001261987374164164, -8.880697714630514e-05, -0.010056659579277039, -5.1020273531321436e-05, -8.34461570775602e-06, -0.06211740896105766, -0.031755249947309494, -0.1115013062953949, -0.06125586852431297, -0.0027799077797681093, -1.402270793914795, -2.622600959512056e-06, -1.311301275563892e-06, -3.4570634852570947e-06, -5.638440416078083e-05, -0.206208273768425], "finish_reason": "stop"}], "metrics": {"energy": 910.0439025630953, "energy_per_token": 4.193750703055739, "time": 20.697542, "time_per_token": 0.09538037788018433}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a pandas DataFrame\")\n\n    df = df.copy()\n\n    # Replace values\n    if dct is not None:\n        for key, value in dct.items():\n            df = df.replace(key, value)\n\n    # Encode categorical columns\n    cat_cols = df.select_dtypes(include=['object']).columns\n    if columns is not None:\n        cat_cols = [col for col in columns if col in df.columns]\n\n    for col in cat_cols:\n        if df[col].nunique() > 1:\n            le = LabelEncoder()\n            df[col] = le.fit_transform(df[col])\n\n    # Standardize numerical columns\n    num_cols = df.select_dtypes(include=['int', 'float']).columns\n    for col in num_cols:\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " should", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "\n", "    ", "#", " Replace", " values", "\n", "    ", "if", " d", "ct", " is", " not", " None", ":", "\n", "        ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "            ", "df", " =", " df", ".", "replace", "(", "key", ",", " value", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", "\n", "    ", "cat", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "cat", "_", "cols", " =", " [", "col", " for", " col", " in", " columns", " if", " col", " in", " df", ".", "columns", "]", "\n", "\n", "    ", "for", " col", " in", " cat", "_", "cols", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "nun", "ique", "()", " >", " ", "1", ":", "\n", "            ", "le", " =", " Label", "Encoder", "()", "\n", "            ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", "\n", "    ", "num", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "int", "'", ",", " '", "float", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " num", "_", "cols", ":", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -2.3829495906829834, -1.7918626070022583, -0.007009084802120924, -0.10947047919034958, -1.050191879272461, -0.029510973021388054, -0.00296652945689857, -0.4626007676124573, -0.0009602464851923287, -0.005199244245886803, -0.3959839344024658, -0.0007103541865944862, -1.3161348104476929, -0.34682145714759827, -0.04989134520292282, -0.0013627061853185296, -0.34742406010627747, -0.006298572290688753, -0.2292323112487793, -1.063153862953186, -0.0004670721245929599, -1.1753816604614258, -0.6831071972846985, -0.8608497977256775, -1.2835471630096436, -0.0010408704401925206, -2.690195083618164, -0.14713610708713531, -6.90197994117625e-05, -0.8783198595046997, -0.008238617330789566, -0.00011324241495458409, -0.05101345479488373, -0.003113187151029706, -0.0018210508860647678, -0.16070640087127686, -1.2157584428787231, -0.09014715999364853, -0.21096383035182953, -0.0002548369811847806, -0.0023451941087841988, -5.376194530981593e-05, -0.0005527398898266256, -0.0005049622268415987, -9.953480184776708e-05, -0.0005695389700122178, -0.0009445258183404803, -0.18573112785816193, -0.2878933548927307, -0.0028177103959023952, -0.00038675934774801135, -0.023548921570181847, -0.3313096761703491, -0.041581783443689346, -9.190614218823612e-05, -0.0008440031087957323, -0.012268672697246075, -0.005349132232367992, -0.014564272947609425, -0.002034976379945874, -0.042459636926651, -0.16943666338920593, -0.059113532304763794, -0.13031357526779175, -0.6309729814529419, -0.11295183002948761, -0.001471390132792294, -2.950582981109619, -0.02314446121454239, -0.47090551257133484, -0.005321148317307234, -0.2990981638431549, -0.0016470688860863447, -0.10056228935718536, -4.529942543740617e-06, -1.1920928244535389e-07, -0.00010084597306558862, -0.11471789330244064, -0.06762772798538208, -1.2136015892028809, -0.016284076496958733, -0.06558330357074738, -0.043760254979133606, -0.0007689617923460901, -0.4822251796722412, -0.10701519250869751, -0.13404418528079987, -0.03436073660850525, -0.1154189482331276, -0.05148956924676895, -5.6265202147187665e-05, -0.004559359047561884, -0.005365139339119196, -0.001888517290353775, -0.07486333698034286, -2.074220174108632e-05, -0.0002397011558059603, -0.01884157769382, -1.3565170764923096, -0.08781742304563522, -0.005537882912904024, -4.076874756719917e-05, -8.928377064876258e-05, -1.0650560855865479, -0.0009033175301738083, -0.41483935713768005, -0.0023544705472886562, -0.8747838735580444, -0.0908854529261589, -0.0006675875629298389, -0.9534758925437927, -0.009295872412621975, -1.3815261125564575, -0.005104604177176952, -0.6801155805587769, -0.06479211896657944, -0.0038250156212598085, -0.006953682750463486, 0.0, -2.3841855067985307e-07, -0.0008318539476022124, -0.0005125877796672285, -0.0035236908588558435, -2.162092447280884, -1.4851107597351074, -0.017952803522348404, -0.0007192885386757553, -0.0009725131676532328, -0.001450082752853632, -1.6523619890213013, -9.536738616588991e-07, -0.005929261911660433, -0.44855374097824097, -0.01735582761466503, -1.9627052545547485, -0.48022255301475525, -0.18131476640701294, -0.0013937769690528512, -1.2914830446243286, -0.008048483170568943, -0.000408327643526718, -2.3841830625315197e-06, -0.00018034738604910672, -0.02091974765062332, -0.0036069590132683516, -0.1343836933374405, -0.016691436991095543, -0.0011367294937372208, -0.004241281189024448, -0.0007445423980243504, -0.009032106027007103, -1.811964830267243e-05, -0.0008713977294974029, -0.0002795067266561091, -5.8412379075889476e-06, -4.172238186583854e-05, -0.003586053615435958, -0.0013198483502492309, -5.364403477869928e-06, -0.05008922517299652, -0.005976543761789799, -0.0721452608704567, -0.0027224880177527666, -0.01625475473701954, -0.1128273531794548, -0.07667659223079681, -0.061121419072151184, -0.05336974188685417, -0.028180204331874847, -0.0010609956225380301, -0.3507115840911865, -0.0013583013787865639, -0.003610522486269474, -0.0002743821241892874, -0.26107925176620483, -0.00041762212640605867, -0.010702237486839294, -1.1920928244535389e-07, 0.0, -3.2066785934148356e-05, -0.00159172632265836, -0.1295699030160904, -0.1371477246284485, -0.6918582916259766, -0.20936082303524017, -6.353653589030728e-05, -0.00259301345795393, -0.004028658382594585, -0.0071527836844325066, -0.0025699466932564974, -0.0004278697888366878, -0.02617596462368965, -0.09300225228071213, -0.2499912828207016, -0.005078867077827454, -0.0001501924270996824, -0.0032550706528127193, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.0056028468534350395, -0.00014661667228210717, -0.0034895974677056074, -0.6167934536933899, -0.03846673667430878, -5.6980417866725475e-05, -0.00012420836719684303, -0.05451719090342522, -0.09671501815319061, -0.0002703301142901182, -0.0004323977918829769, -7.629365427419543e-06, -0.0011449456214904785, -0.0018341400427743793, -0.002064717700704932, -0.0008088654140010476, -1.1920922133867862e-06, -7.390948667307384e-06, -7.152531907195225e-06, -0.0031212682370096445, -0.018154878169298172, -0.00047398300375789404, -0.014269105158746243, -5.578839045483619e-05, -2.264974000354414e-06, -0.00025602878304198384, -3.576214658096433e-05, -4.0411134250462055e-05, -0.0037416466511785984, -0.003003730671480298, -0.02611522749066353, -0.0003672163875307888, -0.03802374005317688, -0.001277702976949513, -0.41551387310028076, -0.0029381224885582924, -1.098462700843811], "finish_reason": "stop"}], "metrics": {"energy": 1086.3399630947117, "energy_per_token": 4.293833846224157, "time": 24.40746, "time_per_token": 0.09647217391304348}}
{"outputs": [{"text": "# Check if input df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data must be a DataFrame\")\n\n    # Replace values in the DataFrame\n    for old_value, new_value in dct.items():\n        df = df.replace(old_value, new_value)\n\n    # Encode categorical columns\n    object_columns = df.select_dtypes(include='object').columns\n    if columns:\n        categorical_cols = [col for col in columns if col in object_columns]\n    else:\n        categorical_cols = object_columns\n\n    for col in categorical_cols:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n\n    # Standardize numerical columns\n    numerical_cols = df.select_dtypes(\n        exclude='object').columns.drop(categorical_cols)\n    if numerical_cols.size != 0:\n        df[numerical_cols] = (df[numerical_cols] -\n                               ", "tokens": ["#", " Check", " if", " input", " df", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " must", " be", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Replace", " values", " in", " the", " Data", "Frame", "\n", "    ", "for", " old", "_", "value", ",", " new", "_", "value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "(", "old", "_", "value", ",", " new", "_", "value", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", "\n", "    ", "object", "_", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "if", " columns", ":", "\n", "        ", "c", "ategor", "ical", "_", "cols", " =", " [", "col", " for", " col", " in", " columns", " if", " col", " in", " object", "_", "columns", "]", "\n", "    ", "else", ":", "\n", "        ", "c", "ategor", "ical", "_", "cols", " =", " object", "_", "columns", "\n", "\n", "    ", "for", " col", " in", " categorical", "_", "cols", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", "\n", "    ", "n", "umerical", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "\n", "        ", "exclude", "='", "object", "')", ".", "columns", ".", "drop", "(", "c", "ategor", "ical", "_", "cols", ")", "\n", "    ", "if", " numerical", "_", "cols", ".", "size", " ", "!", "=", " ", "0", ":", "\n", "        ", "df", "[", "n", "umerical", "_", "cols", "]", " =", " (", "df", "[", "n", "umerical", "_", "cols", "]", " -", "\n", "                ", "               "], "logprobs": [-2.0162062644958496, -0.7739335298538208, -0.5083693265914917, -1.323427677154541, -0.9736071825027466, -0.005609841085970402, -0.08913706243038177, -0.15869048237800598, -0.0014211564557626843, -0.12462760508060455, -0.0016690860502421856, -0.012666018679738045, -0.006229033228009939, -0.006693797651678324, -5.435795901576057e-05, -0.0002172949316445738, -0.0003381395654287189, -0.004475339315831661, -9.775113539944869e-06, -0.009231975302100182, -0.0019292092183604836, -0.0013613966293632984, -0.0028700134716928005, -0.01183606218546629, -0.004793817643076181, -3.4570634852570947e-06, -0.06087075173854828, -0.03603144735097885, -0.481405645608902, -3.145869493484497, -1.1503826379776, -0.00064876489341259, -0.04349355399608612, -0.816434919834137, -0.0014691284159198403, -0.4797338545322418, -0.0006245807744562626, -0.002644615015015006, -0.04609258100390434, -0.0008304246584884822, -0.12919241189956665, -0.6526574492454529, -0.8640989661216736, -0.5503306984901428, -0.5133751630783081, -0.08132915943861008, -0.0008800924406386912, -1.1139891147613525, -0.0004245333548169583, -0.24555069208145142, -1.2125961780548096, -0.28789764642715454, -0.6742562651634216, -0.003534262999892235, -0.0005154472892172635, -1.4781842764932662e-05, -0.0006812873762100935, -6.627816765103489e-05, -0.0017832106677815318, -6.794906312279636e-06, -0.0018925628392025828, -0.00014304091746453196, -2.276871418871451e-05, -0.000532008707523346, -0.0022136487532407045, -0.18442948162555695, -0.5795345306396484, -0.004105473402887583, -0.0005360596696846187, -0.02513071894645691, -0.07384298741817474, -0.04158647358417511, -8.344646857949556e-07, -5.113947918289341e-05, -5.0424259825376794e-05, -0.00026246439665555954, -3.576278118089249e-07, -3.814689989667386e-06, -0.006315985694527626, -0.0028054662980139256, -0.011157618835568428, -0.0009444067254662514, -0.028408611193299294, -0.380547434091568, -0.013233920559287071, -0.1239071786403656, -0.5773744583129883, -0.39352065324783325, -0.0007781338645145297, -2.9127583503723145, -0.0012025751639157534, -1.170186996459961, -0.0013465156080201268, -0.18853530287742615, -0.0024786246940493584, -0.093174509704113, -4.768360213347478e-06, -1.1920928244535389e-07, -3.0040289857424796e-05, -0.10526163876056671, -0.0054733892902731895, -1.3853001594543457, -0.007953757420182228, -0.032288871705532074, -0.04065966606140137, -0.0007086864789016545, -0.4773463010787964, -0.08424641937017441, -0.47255614399909973, -0.029468148946762085, -1.7307342290878296, -0.015115716494619846, -0.0008839037618599832, -2.274857759475708, -0.007288296241313219, -0.005959954112768173, -0.025991881266236305, -2.1075944900512695, -0.0024405713193118572, -0.31160828471183777, -0.06124936416745186, -0.002386699663475156, -4.51792984677013e-05, -0.0002971446083392948, -0.0815337672829628, -0.0009002208826132119, -0.2894785404205322, -0.007501528598368168, -0.3716805577278137, -4.0531076592742465e-06, -2.264974000354414e-06, -0.024096015840768814, -0.00676934327930212, -0.048304419964551926, -0.00497377710416913, -6.842378934379667e-05, -0.0009539344464428723, -0.00032455421751365066, -0.003708392148837447, -3.099436753473128e-06, -8.344646857949556e-07, -4.0531076592742465e-06, -1.311301275563892e-06, -0.00010501786891836673, -0.02971327118575573, -6.198863957251888e-06, -4.410734163684538e-06, -0.012515222653746605, -0.3995569944381714, -0.0006398299592547119, -0.8020444512367249, -0.0849895253777504, -0.0019656161312013865, -0.0021454906091094017, -1.1920928244535389e-07, -1.4305104514278355e-06, -0.00013124081306159496, -0.00017820201173890382, -0.0015918452991172671, -1.0630297660827637, -0.0029412126168608665, -0.00020430385484360158, -4.172316494077677e-06, -0.00018010901112575084, -0.012990725226700306, -0.000691770575940609, -0.0741773173213005, -0.0052381413988769054, -0.0005351065192371607, -0.0008351890719495714, -0.0005994430393911898, -0.003275745315477252, -1.1205610462639015e-05, -0.0018164102220907807, -7.903263758635148e-05, -6.556489552167477e-06, -5.638440416078083e-05, -0.0021820086985826492, -0.0009118927991949022, -2.074220174108632e-05, -0.04684397950768471, -0.004294103477150202, -0.016037514433264732, -0.0017212113598361611, -0.008398925885558128, -0.10733465105295181, -0.027833033353090286, -0.046694040298461914, -0.07656518369913101, -0.046879470348358154, -0.0009267802815884352, -0.9398200511932373, -0.0004994813934899867, -0.0014896021457388997, -0.08784067630767822, -0.00036435641231946647, -0.4572947919368744, -0.0013868723763152957, -0.073787622153759, -1.1920928244535389e-07, 0.0, -1.8358061424805783e-05, -0.0032491295132786036, -2.876385450363159, -0.00500817596912384, -0.8532316088676453, -0.46387168765068054, -0.0006811682251282036, -0.006322145462036133, -0.0013580633094534278, -0.013262507505714893, -0.07578573375940323, -1.8364484310150146, -0.2593052387237549, -0.31964319944381714, -3.814689989667386e-06, -3.576278118089249e-07, -9.298280929215252e-06, -8.344646857949556e-07, -0.0029265929479151964, -0.011459480971097946, -0.13271604478359222, -3.5106470584869385, -0.450971782207489, -1.9192511899746023e-05, -2.3841855067985307e-07, -0.015062992461025715, -0.9045957922935486, -2.3240787982940674, -1.1920928244535389e-07, -1.0251946150674485e-05, -0.0013704441953450441, -0.0005154472892172635, -0.0011619728757068515, -0.02099936082959175, -0.0009182051289826632, -0.38140803575515747, -0.11059485375881195, -0.0022163845133036375, -2.3841855067985307e-07, -3.576278118089249e-07, -2.3841855067985307e-07, -0.0015256681945174932, -0.01801544427871704, -0.2021200805902481, -0.10832932591438293, -0.00873471051454544, -0.00013076403411105275, -7.033323527139146e-06, -1.1920928244535389e-07, 0.0, -0.027781324461102486, -0.013402840122580528, -0.18588991463184357, -0.0016731324139982462, -0.6060295104980469], "finish_reason": "length"}], "metrics": {"energy": 1089.5045996093738, "energy_per_token": 4.2558773422241165, "time": 24.423866, "time_per_token": 0.0954057265625}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a valid DataFrame.\")\n\n    # replace values\n    for key, value in dct.items():\n        df.replace({key: value}, inplace=True)\n\n    # encode categorical attributes\n    le = LabelEncoder()\n    if columns is None:\n        columns = [col for col in df.columns if df.dtypes[col] == 'object']\n\n    df[columns] = df[columns].apply(le.fit_transform)\n\n    # standardize numerical attributes\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " is", " not", " a", " valid", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " replace", " values", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", ".", "replace", "({", "key", ":", " value", "}", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "#", " encode", " categorical", " attributes", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " [", "col", " for", " col", " in", " df", ".", "columns", " if", " df", ".", "d", "types", "[", "col", "]", " ==", " '", "object", "']", "\n", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "le", ".", "fit", "_", "transform", ")", "\n", "\n", "    ", "#", " standard", "ize", " numerical", " attributes", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -2.0415492057800293, -1.744608759880066, -0.023386599496006966, -0.05658106878399849, -2.9838898181915283, -0.42287012934684753, -0.0027185645885765553, -0.5910679697990417, -0.029955558478832245, -0.0007981451926752925, -0.0035359261091798544, -0.29747483134269714, -0.0009757286752574146, -1.1526108980178833, -2.547640800476074, -0.6930620074272156, -0.9258967041969299, -0.0010924329981207848, -0.4042593240737915, -0.9198436141014099, -0.10935058444738388, -0.1565071940422058, -0.0001938155182870105, -0.0022419574670493603, -1.6331539882230572e-05, -0.0009365463047288358, -0.00045122456504032016, -0.00014435203047469258, -0.0014722233172506094, -0.0030692159198224545, -0.18001730740070343, -1.3829102516174316, -0.014623131603002548, -1.4948443174362183, -0.016751226037740707, -0.0026247594505548477, -0.023573722690343857, -0.0209830179810524, -7.045020902296528e-05, -0.0011934071080759168, 0.0, -0.001566017628647387, -0.0002711643755901605, -0.004273687023669481, -0.009973100386559963, -0.03089580126106739, -0.0011141052236780524, -0.0668882206082344, -0.3596618175506592, -0.16063472628593445, -0.7360962629318237, -0.07652333378791809, -0.002179748611524701, -2.990596055984497, -0.012611164711415768, -0.0018872085493057966, -9.179073458653875e-06, -0.00042226933874189854, -0.01612936705350876, -0.12853313982486725, -0.5747569799423218, -0.05811094492673874, -0.07210433483123779, -0.1349463164806366, -0.004869743715971708, -0.01997334323823452, -0.001369253732264042, -0.33336880803108215, -0.016185903921723366, -2.2041873931884766, -0.33390557765960693, -0.028715504333376884, -0.0006659197388216853, -0.04187906160950661, -0.0021240785717964172, -0.043233178555965424, -0.030860086902976036, -0.006271444261074066, -0.010582049377262592, -1.8495545387268066, -5.328513361746445e-05, -5.483612312673358e-06, -0.000700466800481081, -0.00011634149996098131, -1.5139465176616795e-05, -0.10751795023679733, -0.7093080878257751, -0.06396553665399551, -0.008052976801991463, -0.015814010053873062, -1.7991313934326172, -0.002595986006781459, -2.9442245960235596, -0.4187907874584198, -0.0017212113598361611, -0.0022712168283760548, -0.0024246361572295427, -0.004826205782592297, -0.0027147603686898947, -0.00017891713650897145, -0.0005172345554456115, -0.0007488307310268283, -0.030583564192056656, -0.028366897255182266, -0.22570137679576874, -7.617183291586116e-05, -0.00030989613151177764, -5.245195097813848e-06, -0.00019441144831944257, -0.004770089406520128, -0.010573910549283028, -0.05311565473675728, -0.00043442347669042647, -0.012043851427733898, -0.12866459786891937, -0.0737566202878952, -0.09114731848239899, -0.03775481879711151, -0.02137516811490059, -0.0021228890400379896, -0.40325841307640076, -0.3746672570705414, -0.20851752161979675, -0.00039521988946944475, -0.02011963166296482, -0.002548900432884693, -9.572047565598041e-05, -0.002888675546273589, -0.042107101529836655, -0.00021264675888232887, -0.008054396137595177, -3.075552376685664e-05, -9.059495641849935e-05, -0.001207456924021244, -0.009341932833194733, -1.1326820850372314, -0.0389975942671299, -0.0019280193373560905, -1.4436516761779785, -5.006777428206988e-06, -1.9073468138230965e-06, -4.410734163684538e-06, -6.48477507638745e-05, -0.2202114760875702], "finish_reason": "stop"}], "metrics": {"energy": 719.6805209407801, "energy_per_token": 4.4424723514862965, "time": 15.676977, "time_per_token": 0.09677146296296296}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df should be a DataFrame.\")\n    df = df.applymap(lambda x: dct.get(x, x))\n    object_cols = df.select_dtypes(include=[\"O\"]).columns if columns is None else columns\n    df[object_cols] = df[object_cols].apply(LabelEncoder().fit_transform)\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " should", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "    ", "df", " =", " df", ".", "apply", "map", "(", "lambda", " x", ":", " d", "ct", ".", "get", "(", "x", ",", " x", "))", "\n", "    ", "object", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "O", "\"", "])", ".", "columns", " if", " columns", " is", " None", " else", " columns", "\n", "    ", "df", "[", "object", "_", "cols", "]", " =", " df", "[", "object", "_", "cols", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -1.6136882305145264, -0.0017827346455305815, -0.029925478622317314, -0.6977140307426453, -0.002108733169734478, -1.1473968029022217, -0.021062977612018585, -0.0012285312404856086, -0.006298098247498274, -1.398990511894226, -1.4383107423782349, -0.20720306038856506, -0.05239802971482277, -0.001416871091350913, -1.9848984479904175, -0.6771497130393982, -0.00035291642416268587, -0.06319981068372726, -0.006979253143072128, -0.0019133847672492266, -0.006874481216073036, -2.1815061700181104e-05, -0.2771777808666229, -0.0002053765201708302, -5.1616290875244886e-05, -0.0020102309063076973, -0.07903911918401718, -0.008359442465007305, -0.029019178822636604, -0.3240180015563965, -0.10524898022413254, -3.0141682624816895, -0.006558204535394907, -0.37034428119659424, -0.004300394095480442, -0.12878617644309998, -0.0025010991375893354, -0.034893084317445755, -4.172316494077677e-06, -1.1920928244535389e-07, -5.364403477869928e-06, -0.24964511394500732, -0.02077404223382473, -2.3397998809814453, -2.308265447616577, -2.989302396774292, -4.172238186583854e-05, -0.04119976982474327, -0.06420379877090454, -0.0017642899183556437, -1.9155043363571167, -0.14223851263523102, -0.002216741442680359, -0.00016246906307060272, -0.0010559941874817014, -0.017485395073890686, -0.005343085154891014, -0.01018611527979374, -1.360595703125, -0.0651482567191124, -0.0038715661503374577, -5.960462772236497e-07, -1.1920922133867862e-06, -0.0005913416389375925, -0.0018712644232437015, -0.03956884518265724, -0.0050238328985869884, -0.00035637227119877934, 0.0, -1.1920928244535389e-07, -0.00044848397374153137, -0.00019536493346095085, -0.05168045312166214, -0.006112097762525082, -0.09800146520137787, -1.0728830375228426e-06, -0.0007869484252296388, -5.400034933700226e-05, -4.207999518257566e-05, -0.0001370812824461609, -0.00013279033009894192, -0.0036143234465271235, -0.00944585632532835, -0.011796478182077408, -0.36819714307785034, -0.4088588058948517, -0.2685045003890991, -0.0007640779949724674, -0.0177505724132061, -0.001899701775982976, -0.00017236177518498152, -0.003441484645009041, -0.06262321025133133, -0.00031406714697368443, -0.0063628945499658585, -1.4781842764932662e-05, -7.366862701019272e-05, -0.0007407305529341102, -0.02944106236100197, -0.012128415517508984, -0.01562519371509552, -0.001576134585775435], "finish_reason": "stop"}], "metrics": {"energy": 542.0585702400208, "energy_per_token": 4.479822894545626, "time": 12.535763, "time_per_token": 0.10360134710743801}}
{"outputs": [{"text": "# check that input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' should be a DataFrame.\")\n\n    # replace specified values in the DataFrame\n    for k in dct:\n        df = df.replace({k: dct[k]})\n\n    # encode categorical attributes\n    le = LabelEncoder()\n    cols = columns or df.select_dtypes(['object']).columns\n    for c in cols:\n        df[c] = le.fit_transform(df[c])\n\n    # standardize numerical attributes\n    df = df.select_dtypes(['number'])\n    df = (df - df.mean()) / df.std()\n\n    # return the preprocessed DataFrame\n    return df", "tokens": ["#", " check", " that", " input", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " '", "df", "'", " should", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " replace", " specified", " values", " in", " the", " Data", "Frame", "\n", "    ", "for", " k", " in", " d", "ct", ":", "\n", "        ", "df", " =", " df", ".", "replace", "({", "k", ":", " d", "ct", "[", "k", "]", "})", "\n", "\n", "    ", "#", " encode", " categorical", " attributes", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "cols", " =", " columns", " or", " df", ".", "select", "_", "d", "types", "(['", "object", "'])", ".", "columns", "\n", "    ", "for", " c", " in", " col", "s", ":", "\n", "        ", "df", "[", "c", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "c", "])", "\n", "\n", "    ", "#", " standard", "ize", " numerical", " attributes", "\n", "    ", "df", " =", " df", ".", "select", "_", "d", "types", "(['", "number", "'])", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "\n", "    ", "#", " return", " the", " pre", "processed", " Data", "Frame", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.0162062644958496, -2.7328548431396484, -2.2976837158203125, -1.5135586261749268, -1.2737220525741577, -0.15813332796096802, -0.17410551011562347, -0.002696095034480095, -0.057207439094781876, -0.0023371067363768816, -0.026337139308452606, -0.004623911809176207, -0.00873116496950388, -8.976056415122002e-05, -0.0003274143091402948, -0.00037079135654494166, -0.007544358726590872, -2.9801878554280847e-05, -0.01380632072687149, -0.0016657537780702114, -0.0028326883912086487, -0.0033772119786590338, -0.01288528647273779, -0.008475287817418575, -7.390948667307384e-06, -0.14905354380607605, -0.04025794565677643, -0.536033570766449, -2.4767494201660156, -0.001347468001767993, -0.0001746263587847352, -2.0151522159576416, -0.00031513971043750644, -0.011702342890202999, -1.124014973640442, -0.000679500459227711, -0.47864168882369995, -0.009803482331335545, -0.0005654881824739277, -0.0008573431987315416, -0.0701252892613411, -0.0013363964390009642, -0.10385202616453171, -0.8170691132545471, -1.011672019958496, -0.006967888679355383, -0.6447468400001526, -0.1931939721107483, -0.08894763886928558, -0.0008303055074065924, -0.30397528409957886, -0.0004614718782249838, -0.20632340013980865, -1.8726143836975098, -2.9259397983551025, -0.025303684175014496, -0.0001760566228767857, -0.562149167060852, -0.0010893370490521193, -0.0038380783516913652, -0.22033944725990295, -0.4803962707519531, -0.011246501468122005, -0.0014701997861266136, -0.028535017743706703, -0.6322904229164124, -0.02920837700366974, -0.026780234649777412, -0.052648793905973434, -5.006777428206988e-06, -0.004426324740052223, -4.9828242481453344e-05, -0.0012674640165641904, -0.0005276002921164036, -0.004498243797570467, -0.02893834561109543, -0.0015355474315583706, -0.032103024423122406, -0.6691538691520691, -0.18531334400177002, -0.2684100866317749, -0.35297513008117676, -0.0021197961177676916, -2.6411430835723877, -0.017824584618210793, -0.0014217516873031855, -9.417489309271332e-06, -0.000432278640801087, -0.02012547291815281, -0.08980930596590042, -3.272850751876831, -0.3276711106300354, -1.3443220853805542, -1.9138458967208862, -0.5359533429145813, -0.006580942776054144, -0.06444446742534637, -4.732496745418757e-05, -4.768370445162873e-07, -6.794906312279636e-06, -2.86838960647583, -0.011133570224046707, -0.023006072267889977, -0.017143044620752335, -0.001260439632460475, -0.054227713495492935, -0.06448715925216675, -0.6607144474983215, -2.010605812072754, -0.0043162996880710125, -0.005377945024520159, -2.9802276912960224e-06, -0.0009943069890141487, -0.001209600013680756, -0.00243200920522213, -0.07698293775320053, -0.026210105046629906, -0.0021328814327716827, -0.0057907202281057835, -0.002157385926693678, -0.013920714147388935, -4.911301948595792e-05, -0.00030012393835932016, -0.0003716255014296621, -0.00016592556494288146, -0.00033098942367359996, -0.015610053203999996, -0.0047868178226053715, -0.0002308817347511649, -0.24397410452365875, -0.006128448061645031, -0.02536981739103794, -0.0009527434594929218, -0.004816833417862654, -0.09951809048652649, -0.019586840644478798, -0.049897585064172745, -0.018391203135252, -0.03511857986450195, -0.0009005781612358987, -0.5865877270698547, -0.16155670583248138, -1.064673900604248, -0.05631382390856743, -3.4391560554504395, -2.658331868587993e-05, -6.770858453819528e-05, -3.576272320060525e-06, -0.39070460200309753, -0.6725149750709534, -0.01729443483054638, -1.6079835891723633, -0.008978706784546375, -0.37932753562927246, -0.1879616379737854, -0.35835015773773193, -0.000316212244797498, -0.028479985892772675, -0.0024176198057830334, -0.00010430268594063818, -0.002233155770227313, -0.05297931656241417, -0.0011071987682953477, -0.008928022347390652, -5.304672595229931e-05, -0.0003871168300975114, -0.0016638495726510882, -0.03078818880021572, -0.3177342414855957, -0.00040070133400149643, -2.000335454940796, -0.3860568404197693, -0.7321366667747498, -0.0796092078089714, -0.006070390809327364, -0.0071372780948877335, -0.0002892790944315493, -0.0063742659986019135, -0.000688077649101615, -0.00508100213482976, -0.003326836507767439, -0.6314048171043396, -0.010625101625919342, -1.290205717086792], "finish_reason": "stop"}], "metrics": {"energy": 810.9897344875335, "energy_per_token": 4.407552904823552, "time": 17.5694, "time_per_token": 0.0954858695652174}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The 'df' input must be a pandas DataFrame\")\n    df_copy = df.copy()\n\n    for col_name, replace_dict in dct.items():\n        df_copy[col_name] = df_copy[col_name].replace(replace_dict)\n\n    object_columns = columns if columns is not None else df_copy.select_dtypes(include='object').columns\n    df_copy[object_columns] = df_copy[object_columns].apply(LabelEncoder().fit_transform)\n\n    df_copy = (df_copy - df_copy.mean()) / df_copy.std()\n\n    return df_copy", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " '", "df", "'", " input", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "    ", "df", "_", "copy", " =", " df", ".", "copy", "()", "\n", "\n", "    ", "for", " col", "_", "name", ",", " replace", "_", "dict", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "_", "copy", "[", "col", "_", "name", "]", " =", " df", "_", "copy", "[", "col", "_", "name", "]", ".", "replace", "(", "replace", "_", "dict", ")", "\n", "\n", "    ", "object", "_", "columns", " =", " columns", " if", " columns", " is", " not", " None", " else", " df", "_", "copy", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "df", "_", "copy", "[", "object", "_", "columns", "]", " =", " df", "_", "copy", "[", "object", "_", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "\n", "    ", "df", "_", "copy", " =", " (", "df", "_", "copy", " -", " df", "_", "copy", ".", "mean", "())", " /", " df", "_", "copy", ".", "std", "()", "\n", "\n", "    ", "return", " df", "_", "copy", "\n", "\n", "def"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -3.023641347885132, -2.5315017700195312, -0.007405567914247513, -0.0005893162451684475, -1.4912972450256348, -0.6061400771141052, -0.0029963618144392967, -0.027258284389972687, -0.9625918865203857, -0.012142077088356018, -0.0007809926173649728, -1.8407636880874634, -0.0006613928126171231, -0.00589714664965868, -1.2904387712478638, -1.441886067390442, -2.1257686614990234, -1.2477744817733765, -0.005085034761577845, -0.008421267382800579, -0.0067384387366473675, -0.011963402852416039, -0.022555705159902573, -0.08851335942745209, -1.4477710723876953, -0.0006629414856433868, -1.8848073482513428, -2.657869338989258, -3.186412811279297, -0.1426919400691986, -0.5588111281394958, -3.571929931640625, -0.020900484174489975, -0.46860694885253906, -0.001468295231461525, -0.008100631646811962, -4.768370445162873e-07, -0.0009637002367526293, -0.0007238152320496738, -0.00010549465514486656, -0.0077219316735863686, -0.006163162179291248, -0.6506308913230896, -0.004938191268593073, -0.0011685217032209039, -0.11393743008375168, -0.0018753099720925093, -8.940656698541716e-06, -1.3112935448589269e-05, -0.006426975596696138, -0.1715569794178009, -0.036152180284261703, -0.06413616240024567, -3.015949550899677e-05, -0.00887308083474636, -0.00035577642847783864, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.000846027978695929, -0.000602421467192471, -0.1347869336605072, -0.0015947017818689346, -0.05460941419005394, -8.34461570775602e-06, -5.006777428206988e-06, -0.006732518319040537, -0.01168891042470932, -0.0707096979022026, -0.004443533718585968, -2.7002546787261963, -0.0011139861308038235, -0.8368714451789856, -0.011360127478837967, -2.2256832122802734, -0.20208734273910522, -0.023441679775714874, -0.9545482397079468, -0.0006840273272246122, -8.439661905867979e-05, -0.012644478119909763, -0.3088803291320801, -0.1290416568517685, -6.198863957251888e-06, -0.015878191217780113, -0.029001692309975624, -8.976056415122002e-05, -3.576278118089249e-07, -1.5497195136049413e-06, -0.45057597756385803, -0.2800121307373047, -0.6914598941802979, -0.02158215083181858, -0.00819557998329401, -0.014202939346432686, -0.0016818201402202249, -0.0520547516644001, -0.20352448523044586, -1.2876442670822144, -0.0012344843707978725, -0.025898028165102005, -0.11363773792982101, -0.002822346519678831, -1.1920922133867862e-06, -3.099436753473128e-06, -0.00030298411729745567, -0.0009159421897493303, -0.0682579055428505, -0.00035398892941884696, -0.00010835537250386551, -0.0030333243776112795, -0.0007246490567922592, -8.344646857949556e-07, -1.1920928244535389e-07, -0.00038068200228735805, -0.0003522014303598553, -0.024241004139184952, -0.004633167292922735, -0.026702124625444412, -1.6689286894688848e-06, -0.0008880723617039621, -0.00012778419477399439, -7.295342220459133e-05, -0.00031919151660986245, -3.3854863431770355e-05, -0.006777868140488863, -0.009726868011057377, -0.15627658367156982, -9.655486064730212e-05, -0.9285162687301636, -0.0010121704544872046, -0.021090758964419365, -0.442943811416626, -0.1397123634815216, -0.000614216027315706, -0.001780949649401009, -4.291525328881107e-06, -0.10628978163003922, -0.007958251982927322, -0.011175420135259628, -5.245195097813848e-06, -0.0003093002596870065, -0.005081832408905029, -0.05006677284836769, -0.0005136600811965764, -0.0046939183957874775, -0.0002466136065777391, -2.0265558760002023e-06, -1.7762025890988298e-05, -0.00034624303225427866, -0.0003149013500660658, -0.015940258279442787, -0.5826914310455322, -0.0002420847595203668, -0.018276968970894814, -0.002842554822564125, -0.00035124807618558407, -9.298280929215252e-06, -0.9041329622268677, -0.005619917064905167, -1.1381357908248901], "finish_reason": "stop"}], "metrics": {"energy": 735.6000116004944, "energy_per_token": 4.155932268929347, "time": 16.924967, "time_per_token": 0.0956212824858757}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Please pass a pandas DataFrame as input\")\n    df = df.replace(dct)\n    df = df.astype('object')\n    df = df.fillna('missing_value')\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns\n    for col in columns:\n        df[col] = LabelEncoder().fit_transform(df[col])\n    for col in df.select_dtypes(include=['float', 'int']):\n        df[col] = df[col].astype(float)\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Please", " pass", " a", " pandas", " Data", "Frame", " as", " input", "\"", ")", "\n", "    ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "    ", "df", " =", " df", ".", "ast", "ype", "('", "object", "')", "\n", "    ", "df", " =", " df", ".", "fill", "na", "('", "missing", "_", "value", "')", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "float", "'", ",", " '", "int", "']", "):", "\n", "        ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "ast", "ype", "(", "float", ")", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "    ", "return", " df"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -3.2230470180511475, -2.4177279472351074, -0.255910724401474, -1.1830660104751587, -0.030636286363005638, -0.003250911831855774, -0.4146897494792938, -0.44457298517227173, -1.4699420928955078, -0.0011998366098850965, -0.005051824729889631, -1.143994927406311, -1.439285397529602, -0.2874523997306824, -0.08320993930101395, -0.0017088347813114524, -2.221328020095825, -0.004330068361014128, -0.01396244764328003, -4.5536911784438416e-05, -0.008401289582252502, -0.1474362164735794, -0.16155822575092316, -1.597378134727478, -0.586417555809021, -1.0064647197723389, -0.01462371926754713, -2.0442054271698, -5.960462772236497e-07, -1.066111445426941, -1.3268084526062012, -0.04876741021871567, -0.252792090177536, -0.0957079529762268, -3.0068063735961914, -0.431310772895813, -0.5771766304969788, -0.03276775777339935, -1.544477939605713, -7.152555099310121e-07, -0.33972227573394775, -2.337526321411133, -1.9569895267486572, -0.35721731185913086, -0.008627286180853844, -0.02890452928841114, -0.16379468142986298, -0.6772835850715637, -0.16647164523601532, -0.04779178276658058, -0.10895726084709167, -0.004857050254940987, -0.007883979007601738, -0.0037703870330005884, -0.21963723003864288, -0.005696017760783434, -0.23848114907741547, -0.0007658647373318672, -0.16399696469306946, -2.8729025871143676e-05, -3.576278118089249e-07, -1.5497195136049413e-06, -0.10267679393291473, -0.04137089475989342, -0.9692725539207458, -0.03069247119128704, -0.04833827167749405, -0.01069692987948656, -0.00168658047914505, -0.09859789162874222, -0.11070733517408371, -0.974035918712616, -0.7665520310401917, -0.0155132245272398, -0.015108318999409676, -0.0006239851354621351, -0.000745137978810817, -0.00416661286726594, -1.4011669158935547, -0.07686305791139603, -0.004457893781363964, -0.005307274870574474, -0.00258421478793025, -0.13912078738212585, -3.099436753473128e-06, -0.0013321106089279056, -2.777537883957848e-05, -0.0002812943421304226, -0.00939177069813013, -0.0003570872650016099, -0.00010609064338495955, -0.05977369472384453, -0.006483590696007013, -7.617183291586116e-05, -0.15200677514076233, -0.015792418271303177, -0.07403784245252609, -2.123161792755127, -0.10298430919647217, -0.03156041353940964, -0.03911659121513367, -0.17246101796627045, -0.8008280396461487, -7.271740287251305e-06, -4.768370445162873e-07, -1.1086402082582936e-05, -0.004796427674591541, -0.3041796088218689, -0.1018776148557663, -1.189246654510498, -0.44720694422721863, -0.0002766464895103127, -0.020754193887114525, -0.0017700018361210823, -0.13793978095054626, -0.004285438451915979, -0.0016949110431596637, -0.0044972943142056465, -0.16884851455688477, -0.015765665099024773, -0.00024089295766316354, -0.0009957361035048962, -0.023026341572403908, -1.8948544263839722, -0.03262607753276825, -0.00021407696476671845, -0.004156166221946478, -0.2831881642341614, -0.45497196912765503, -1.1920928244535389e-07, -0.8898259401321411, -0.2794519364833832, -0.04942116141319275, -0.12182838469743729, -0.08694059401750565, -0.4491795599460602, -0.012446703389286995, -8.296622399939224e-05, -0.0012669878778979182, -0.1837439388036728, -0.2874503433704376, -0.0009192770230583847, -0.0007365613128058612, -1.156323378381785e-05, -0.020650504156947136, -0.007369713392108679, -0.008538169786334038, -0.0020712607074528933, -3.2186455882765586e-06, -1.728519782773219e-05, -1.7046782886609435e-05, -0.004164120182394981, -0.030123990029096603, -0.0018791175680235028, -0.02010701410472393, -0.0004111875023227185, -7.390948667307384e-06, -0.0003937899600714445, -3.909988299710676e-05, -0.00016020445036701858, -0.0026629245840013027, -0.00794240366667509, -0.05517486482858658, -0.043964482843875885, -0.003958961460739374], "finish_reason": "stop"}], "metrics": {"energy": 783.5479853534699, "energy_per_token": 4.305208710733352, "time": 17.555805, "time_per_token": 0.09646046703296703}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input data is not a DataFrame\")\n    # Replace specified values\n    for old_value, new_value in dct.items():\n        df = df.replace(old_value, new_value)\n    # Encoding categorical attributes\n    cat_cols = df.select_dtypes(include=['object']).columns if columns is None else columns\n    for col in cat_cols:\n        label_encoder = LabelEncoder()\n        label_encoder.fit(df[col])\n        df[col] = label_encoder.transform(df[col])\n    # Standardize numerical attributes\n    num_cols = df.select_dtypes(exclude=['object']).columns\n    for col in num_cols:\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "input", " data", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "#", " Replace", " specified", " values", "\n", "    ", "for", " old", "_", "value", ",", " new", "_", "value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "(", "old", "_", "value", ",", " new", "_", "value", ")", "\n", "    ", "#", " Enc", "oding", " categorical", " attributes", "\n", "    ", "cat", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", " if", " columns", " is", " None", " else", " columns", "\n", "    ", "for", " col", " in", " cat", "_", "cols", ":", "\n", "        ", "label", "_", "encoder", " =", " Label", "Encoder", "()", "\n", "        ", "label", "_", "encoder", ".", "fit", "(", "df", "[", "col", "])", "\n", "        ", "df", "[", "col", "]", " =", " label", "_", "encoder", ".", "transform", "(", "df", "[", "col", "])", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", "\n", "    ", "num", "_", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "exclude", "=['", "object", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " num", "_", "cols", ":", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "    ", "return", " df", "\n", "\n", "print"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -2.072021245956421, -3.005557060241699, -2.0180325508117676, -0.04888514056801796, -0.23494762182235718, -0.33047062158584595, -0.027563558891415596, -0.14531035721302032, -0.0013378250878304243, -0.006521846167743206, -0.9677088260650635, -1.8855009078979492, -0.9674052596092224, -0.976398766040802, -0.009984549134969711, -1.2238869667053223, -0.0014577010879293084, -0.2803535461425781, -1.6718649864196777, -0.3919082283973694, -0.6721386909484863, -0.005689853802323341, -0.0015343570848926902, -2.5987286790041253e-05, -0.0017062166007235646, -8.880697714630514e-05, -0.0033534502144902945, -3.0278701160568744e-05, -0.0033478662371635437, -0.00043847484630532563, -3.361645576660521e-05, -0.0021672588773071766, -0.003018111689016223, -0.1575797200202942, -0.4239603877067566, -0.0047140889801084995, -0.0007558587822131813, -0.033535800874233246, -0.10250906646251678, -0.0443711020052433, -2.0265558760002023e-06, -0.00013648532330989838, -8.570780482841656e-05, -0.000610999355558306, -4.768370445162873e-07, -6.318072337307967e-06, -0.007458223029971123, -0.004473084583878517, -0.7178493142127991, -0.0428423136472702, -0.14190249145030975, -3.0214223861694336, -0.47472983598709106, -0.2521614134311676, -0.08832883089780807, -0.002220785478129983, -2.895885467529297, -0.034160297363996506, -0.718062698841095, -0.015063932165503502, -0.2505139410495758, -0.0035565949510782957, -0.1275322437286377, -5.960446742392378e-06, -1.1920928244535389e-07, -1.5616295058862306e-05, -0.09842666983604431, -0.06117737665772438, -0.953673779964447, -0.016087606549263, -0.059126343578100204, -0.04929294064640999, -0.0009386900928802788, -0.7028308510780334, -0.15478457510471344, -0.0031147319823503494, -0.0002908283786382526, -0.002571254502981901, -0.02543443627655506, -0.004749920219182968, -0.006224531680345535, -0.6887167096138, -0.18818773329257965, -0.01005913782864809, -0.0190473310649395, -1.1920928244535389e-07, -4.291525328881107e-06, -0.002565547125414014, -0.0005059154354967177, -0.002893073484301567, -2.897223472595215, -0.07271751016378403, -0.06302018463611603, -0.0008438840159215033, -0.0006037319544702768, -6.079655122448457e-06, -0.00033361115492880344, -0.0074472189880907536, -0.00042298430344089866, -2.0293662548065186, -0.0009221353684552014, -0.25905758142471313, -0.010767810046672821, -0.0009766814764589071, -0.03636107221245766, -0.019886402413249016, -0.0076560406014323235, -0.00015925093612167984, -0.06022770330309868, -0.03013613633811474, -0.0010091932490468025, -0.12308526784181595, -0.011042437516152859, -0.0015518538421019912, -0.004496344830840826, -0.00041214076918549836, -0.0031575129833072424, -2.3841855067985307e-07, -7.426462980220094e-05, -1.645074735279195e-05, -0.000436091679148376, -7.688703772146255e-05, -0.0003146630187984556, -6.365573790390044e-05, -1.8715683836489916e-05, -0.00784270092844963, -0.007629540748894215, -0.06557593494653702, -0.013059324584901333, -0.11063829064369202, -0.756588339805603, -0.03161042556166649, -0.01807246170938015, -0.025417467579245567, -0.0006800960982218385, -0.2865610122680664, -0.0016586130950599909, -0.008199245668947697, -0.00030882356804795563, -0.17501665651798248, -0.0005438040825538337, -0.008494318462908268, -1.1920928244535389e-07, 0.0, -5.364403477869928e-06, -0.0009590555564500391, -0.8435139656066895, -0.001967043848708272, -0.0002553137019276619, -0.007556545082479715, -0.003070166567340493, -0.00021491125517059118, -0.15491792559623718, -0.0004817279113922268, -0.1311166137456894, -0.005820824299007654, -0.0002989322238136083, -0.0023813480511307716, -1.311301275563892e-06, -1.1920928244535389e-07, -0.0017065736465156078, -0.0002037079248111695, -0.001210790709592402, -0.15795429050922394, -0.022358832880854607, -7.295342220459133e-05, -0.0001954841281985864, -0.08077368885278702, -0.03526220843195915, -7.033100700937212e-05, -0.00015376816736534238, -7.152531907195225e-06, -0.0031977968756109476, -0.0030051569920033216, -0.004108916502445936, -0.0006491222884505987, -1.1920922133867862e-06, -6.6756979322235566e-06, -7.867782187531702e-06, -0.0010002615163102746, -0.0224550012499094, -0.00033098942367359996, -0.004976742435246706, -4.076874756719917e-05, -1.1920922133867862e-06, -5.6265202147187665e-05, -5.018585216021165e-05, -3.421248038648628e-05, -0.004866778384894133, -0.003189597511664033, -0.11038724333047867, -0.05492168664932251, -0.0010893370490521193, -0.21371008455753326, -0.01457296684384346, -3.9610745906829834], "finish_reason": "stop"}], "metrics": {"energy": 908.9343387069707, "energy_per_token": 4.2672973648214585, "time": 20.454262, "time_per_token": 0.09602939906103286}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n\n    df = df.copy()\n\n    # Replace specified values in the DataFrame\n    for old_value, new_value in dct.items():\n        df = df.replace(old_value, new_value)\n\n    # Encode categorical columns\n    if columns is None:\n        columns = df.select_dtypes(include=[object]).columns\n    for column in columns:\n        le = LabelEncoder()\n        df[column] = le.fit_transform(df[column])\n\n    # Standardize numerical columns\n    for column in df.select_dtypes(include=[np.number]).columns:\n        mean = df[column].mean()\n        std = df[column].std()\n        df[column] = (df[column] - mean) / std\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "\n", "    ", "#", " Replace", " specified", " values", " in", " the", " Data", "Frame", "\n", "    ", "for", " old", "_", "value", ",", " new", "_", "value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", " =", " df", ".", "replace", "(", "old", "_", "value", ",", " new", "_", "value", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "object", "])", ".", "columns", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "column", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", "\n", "    ", "for", " column", " in", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "np", ".", "number", "])", ".", "columns", ":", "\n", "        ", "mean", " =", " df", "[", "column", "]", ".", "mean", "()", "\n", "        ", "std", " =", " df", "[", "column", "]", ".", "std", "()", "\n", "        ", "df", "[", "column", "]", " =", " (", "df", "[", "column", "]", " -", " mean", ")", " /", " std", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -0.5178287625312805, -0.00096703483723104, -0.024096714332699776, -0.6301524043083191, -0.0015773248160257936, -0.9645822644233704, -0.0107704047113657, -0.0012959185987710953, -0.0048852842301130295, -0.26743608713150024, -0.0008834273321554065, -1.5602824687957764, -0.2672615349292755, -0.04445651173591614, -0.0012537722941488028, -0.46726128458976746, -0.004137765150517225, -0.23606374859809875, -0.9572064876556396, -0.00038521020906046033, -1.2397346496582031, -0.6041775345802307, -1.0675103664398193, -0.007547316607087851, -0.9237633347511292, -0.10536196082830429, -0.05875322222709656, -0.00041309406515210867, -0.5586239695549011, -0.0006146925734356046, -0.14753486216068268, -0.7356315851211548, -0.1331627517938614, -0.593143880367279, -0.0012991330586373806, -0.0007696765242144465, -1.0490362910786644e-05, -0.000621840707026422, -4.2199197196168825e-05, -0.0020672159735113382, -8.940656698541716e-06, -0.0014672239776700735, -0.00019167017308063805, -2.074220174108632e-05, -0.0007150000892579556, -0.001840446493588388, -0.16051483154296875, -0.45899757742881775, -0.005329567473381758, -0.0003289635351393372, -0.07134848088026047, -0.14269772171974182, -0.06329090148210526, -7.152555099310121e-07, -0.00019977481861133128, -6.186770770000294e-05, -0.00036006642039865255, -1.9073468138230965e-06, -1.2755313036905136e-05, -0.007012754213064909, -0.003431743010878563, -0.009381378069519997, -0.0013459203764796257, -0.056133516132831573, -0.23795780539512634, -0.023124659433960915, -0.13989128172397614, -1.0391042232513428, -0.46590983867645264, -0.0008604400209151208, -0.5330888628959656, -0.03235292807221413, -0.01942433975636959, -0.059992190450429916, -0.003509317059069872, -0.003802689490839839, -0.0006104036583565176, -0.20784133672714233, -0.0048996382392942905, -0.1489824652671814, -0.00038246947224251926, -0.06090787798166275, -9.894321920000948e-06, -1.1920928244535389e-07, -3.2186455882765586e-06, -0.09504487365484238, -0.0753583088517189, -2.4968202114105225, -0.4690021574497223, -0.06161830574274063, -0.005326840095221996, -0.0003289635351393372, -0.04867612570524216, -0.36283963918685913, -0.452468603849411, -0.9694231152534485, -0.006937582511454821, -0.005786098074167967, -0.0004773192631546408, -0.00016080040950328112, -0.0006803343421779573, -1.6016186475753784, -0.0014056811342015862, -0.00020919041708111763, -2.0265558760002023e-06, -0.00012587709352374077, -0.013582786545157433, -0.0004024887748528272, -0.0865873321890831, -0.00582840945571661, -0.0006090931710787117, -0.0003638797497842461, -0.0007166677969507873, -0.005482281092554331, -6.556489552167477e-06, -0.0020776845049113035, -0.00010764019680209458, -6.079655122448457e-06, -5.876845170860179e-05, -0.003997787833213806, -0.002701207296922803, -8.916457591112703e-05, -0.1239435151219368, -0.004237838555127382, -0.011358005926012993, -0.0006457865820266306, -0.005592059344053268, -0.0510493628680706, -0.03073316439986229, -0.03462228178977966, -0.06760956346988678, -0.07225838303565979, -0.000406301929615438, -1.3026973009109497, -0.010728538036346436, -0.01624138467013836, -0.010036006569862366, -0.036227140575647354, -0.45552870631217957, -2.3841855067985307e-07, -3.576278118089249e-07, -6.818538531661034e-05, -0.0007711059297434986, -0.20245641469955444, -0.3671490252017975, -0.2517862319946289, -6.318072337307967e-06, -0.013640879653394222, -0.007535130251199007, -2.264974000354414e-06, -1.5258672647178173e-05, -0.003991732373833656, -0.00034528967808000743, -0.000714523543138057, -2.0180883407592773, -0.03080703131854534, -0.013382726348936558, -0.005826631560921669, -7.152301259338856e-05, -7.867782187531702e-06, -3.6954195820726454e-05, -0.0003036991402041167, -0.0017576259560883045, -0.003906002501025796, -4.3987260141875595e-05, -0.003933669533580542, -0.009883986786007881, -0.00285075674764812, -1.8000440832111053e-05, -4.887569048150908e-06, -1.6927575416048057e-05, -6.079655122448457e-06, -2.253030106658116e-05, -0.004697359632700682, -0.00044276448898017406, -0.0050361682660877705, -0.2767154276371002, -0.009203154593706131, -0.00022289653134066612, -8.391981828026474e-05, -0.005126782692968845, -0.007310071028769016, -6.90197994117625e-05, -3.325883881188929e-05, -6.794906312279636e-06, -0.0006439996068365872, -0.00017152745567727834, -0.00018249277491122484, -0.0034931611735373735, -9.393251093570143e-05, -0.0022272085770964622, -0.004028064664453268, -0.016203967854380608, -0.0005129451747052372, -0.024589773267507553, -0.0009511952521279454, -0.27035218477249146, -0.006048944313079119, -1.476878046989441], "finish_reason": "stop"}], "metrics": {"energy": 935.2247194633482, "energy_per_token": 4.290021648914441, "time": 20.895123, "time_per_token": 0.0958491880733945}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input should be a DataFrame not {type(df)}\")\n\n    df = df.applymap(lambda x: dct[x] if x in dct else x)\n    obj_col = columns if columns else df.select_dtypes('object').columns\n    le = LabelEncoder()\n    df[obj_col] = df[obj_col].apply(lambda col: le.fit_transform(col))\n\n    df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Input", " should", " be", " a", " Data", "Frame", " not", " {", "type", "(", "df", ")}", "\"", ")", "\n", "\n", "    ", "df", " =", " df", ".", "apply", "map", "(", "lambda", " x", ":", " d", "ct", "[", "x", "]", " if", " x", " in", " d", "ct", " else", " x", ")", "\n", "    ", "obj", "_", "col", " =", " columns", " if", " columns", " else", " df", ".", "select", "_", "d", "types", "('", "object", "')", ".", "columns", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "df", "[", "obj", "_", "col", "]", " =", " df", "[", "obj", "_", "col", "]", ".", "apply", "(", "lambda", " col", ":", " le", ".", "fit", "_", "transform", "(", "col", "))", "\n", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "(", "axis", "=", "0", "))", " /", " df", ".", "std", "(", "axis", "=", "0", ",", " dd", "of", "=", "1", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -2.960120677947998, -0.15808863937854767, -1.3789316415786743, -3.082313299179077, -0.008023531176149845, -0.12845325469970703, -0.46772632002830505, -0.008103587664663792, -2.9955697059631348, -0.4100722372531891, -0.07974207401275635, -0.0011029120068997145, -0.0023292573168873787, -0.09159111976623535, -0.11601462960243225, -0.0013340153964236379, -0.0066991266794502735, -0.5591772198677063, -0.0011687598889693618, -1.2357218265533447, -0.26525482535362244, -0.07529573142528534, -0.001995835453271866, -2.0027976036071777, -0.5259451866149902, -0.0004059444472659379, -0.07638716697692871, -0.01621299982070923, -0.002407154766842723, -0.005875814706087112, -3.516612196108326e-05, -1.4711617231369019, -0.002962963655591011, -0.004369236528873444, -0.00346666993573308, -0.009944065473973751, -0.00206055399030447, -0.0016020808834582567, -8.344646857949556e-07, -0.13906912505626678, -0.0013040142366662621, -0.002508352743461728, -0.12725381553173065, -0.795020341873169, -3.0345373153686523, -0.0517154335975647, -3.160689115524292, -0.16686731576919556, -1.7292811870574951, -0.2060461789369583, -0.024422500282526016, -0.43236246705055237, -0.27501732110977173, -0.0037644491530954838, -0.05962175130844116, -1.9311717551317997e-05, -4.768370445162873e-07, -3.576272320060525e-06, -1.1134757995605469, -0.010183283127844334, -0.0034451675601303577, -0.019966566935181618, -0.0018331881146878004, -0.06994979083538055, -0.1096530631184578, -1.9519301652908325, -0.020420903339982033, -0.0022261380217969418, -5.245195097813848e-06, -0.0003962923656217754, -0.007579852361232042, -0.050331611186265945, -0.4603969156742096, -0.10708052664995193, -0.0044023506343364716, -1.549708758830093e-05, -5.483612312673358e-06, -0.0020507988519966602, -0.005083611235022545, -0.014304830692708492, -0.00805368646979332, -0.0013297295663505793, -6.794906312279636e-06, -8.344646857949556e-07, -0.0006811682251282036, -0.0005246216314844787, -0.03170836344361305, -0.007315514609217644, -0.536033034324646, -0.7604883909225464, -0.003092390252277255, -0.11733343452215195, -6.663577369181439e-05, -0.00015817821258679032, -0.00035422726068645716, -1.597391747054644e-05, -0.00014304091746453196, -0.0022448119707405567, -0.024090547114610672, -0.008403772488236427, -2.190861940383911, -0.0002734287118073553, -1.0801756381988525, -0.4211369752883911, -0.4960455000400543, -0.0014197280397638679, -0.027479711920022964, -0.004442821256816387, -0.0002936885575763881, -0.005216202698647976, -2.8549861907958984, -0.005564793944358826, -0.007337407674640417, -0.006735597271472216, -0.07768633961677551, -0.009539259597659111, -0.024415520951151848, -7.855583680793643e-05, -0.0018528213258832693, -0.014254415407776833, -0.0025497328024357557, -0.000675807474181056, -0.00024828212917782366, -1.0802921056747437, -0.008737664669752121, -2.9802276912960224e-06, -0.00018308870494365692, -1.8153704404830933, -0.001655756845138967, -0.02405644953250885, -1.1765069961547852, -0.00046397410915233195, -0.020821096375584602, -0.003000640543177724, -0.7201987504959106, -0.003418912645429373, -2.2554993629455566], "finish_reason": "stop"}], "metrics": {"energy": 642.0401558170319, "energy_per_token": 4.196340887693019, "time": 14.6234, "time_per_token": 0.09557777777777778}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input data is not DataFrame\")\n    for k, v in dct.items():\n        df.replace({k: v}, inplace=True)\n    df_cat = df.select_dtypes(\"object\")\n    if columns is not None:\n        df_cat = df_cat[columns]\n    le = LabelEncoder()\n    df_cat_enc = df_cat.apply(le.fit_transform)\n    df_num = df.select_dtypes(exclude=\"object\")\n    df_num_std = (df_num - df_num.mean()) / df_num.std()\n    df_out = pd.concat([df_cat_enc, df_num_std], axis=1)\n    return df_out", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "input", " data", " is", " not", " Data", "Frame", "\"", ")", "\n", "    ", "for", " k", ",", " v", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", ".", "replace", "({", "k", ":", " v", "}", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", "_", "cat", " =", " df", ".", "select", "_", "d", "types", "(", "\"", "object", "\"", ")", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "df", "_", "cat", " =", " df", "_", "cat", "[", "columns", "]", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "df", "_", "cat", "_", "enc", " =", " df", "_", "cat", ".", "apply", "(", "le", ".", "fit", "_", "transform", ")", "\n", "    ", "df", "_", "num", " =", " df", ".", "select", "_", "d", "types", "(", "exclude", "=", "\"", "object", "\"", ")", "\n", "    ", "df", "_", "num", "_", "std", " =", " (", "df", "_", "num", " -", " df", "_", "num", ".", "mean", "())", " /", " df", "_", "num", ".", "std", "()", "\n", "    ", "df", "_", "out", " =", " pd", ".", "concat", "([", "df", "_", "cat", "_", "enc", ",", " df", "_", "num", "_", "std", "]", ",", " axis", "=", "1", ")", "\n", "    ", "return", " df", "_", "out", "\n", "\n", "if"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -2.072021245956421, -3.005557060241699, -2.0180325508117676, -0.04888514056801796, -2.586569309234619, -0.0399341881275177, -0.2245064675807953, -0.0024679224006831646, -0.009050654247403145, -0.797311544418335, -1.3130086660385132, -1.6660265922546387, -0.10907644778490067, -0.0792974978685379, -0.0005336767644621432, -0.003375429892912507, -2.8371408916427754e-05, -0.001064687268808484, -0.0019674007780849934, -0.00017915551143232733, -0.009606916457414627, -0.0038870032876729965, -0.25629857182502747, -1.111222743988037, -0.032470643520355225, -0.9213420152664185, -0.07967327535152435, -0.00801951065659523, -0.04306865110993385, -0.0368136502802372, -0.0001554368354845792, -0.003189360024407506, -1.1920928244535389e-07, -0.0029349131509661674, -0.00033968876232393086, -0.005364665295928717, -0.026791725307703018, -0.17508409917354584, -2.478881359100342, -1.20383620262146, -2.4403955936431885, -0.05099951848387718, -0.047109901905059814, -0.05579569190740585, -0.13770152628421783, -1.7165990357170813e-05, -2.3841855067985307e-07, -3.6477376852417365e-05, -0.19230788946151733, -2.160583019256592, -0.056472014635801315, -0.0005505952867679298, -0.01764165237545967, -0.16033175587654114, -0.018336310982704163, -0.505002498626709, -0.10702922195196152, -0.23075421154499054, -0.38017579913139343, -8.737658936297521e-05, -0.008640168234705925, -0.0039952946826815605, -0.000625176471658051, -0.05516775697469711, -0.003427228657528758, -0.006033777259290218, -0.017666013911366463, -0.0015608996618539095, -0.16720855236053467, -0.00031919151660986245, -0.12341523170471191, -0.014000770635902882, -0.000596107158344239, -0.004079354461282492, -0.0374138280749321, -1.3192710876464844, -0.01804073341190815, -0.0029309908859431744, -3.2186455882765586e-06, -0.0004520586517173797, -0.004650965798646212, -0.004864761605858803, -0.5736817121505737, -0.030854538083076477, -0.16727612912654877, -1.0843067169189453, -1.8905032873153687, -0.018177472054958344, -0.11338137090206146, -0.0021328814327716827, -0.001046705641783774, -0.0032272657845169306, -0.061107736080884933, -6.472854875028133e-05, -0.1524711400270462, -0.0008279233006760478, -0.0015150746330618858, -0.000586695212405175, -0.0001006075763143599, -0.0010062160436064005, -0.03429991751909256, -0.008879343047738075, -0.15647701919078827, -0.24630725383758545, -0.18677742779254913, -0.018595295026898384, -0.03928899019956589, -0.053741488605737686, -0.06707027554512024, -2.145764938177308e-06, -7.986990567587782e-06, -4.792098479811102e-05, -0.06347965449094772, -0.6810731291770935, -0.14423707127571106, -0.0010719512356445193, -0.0002727136597968638, -3.40932747349143e-05, -0.0013313962845131755, -0.052892256528139114, -0.011318403296172619, -0.19593283534049988, -0.04165416955947876, -0.1985594630241394, -0.2483523190021515, -0.6717413663864136, -0.008037485182285309, -0.04721031337976456, -0.0033886174205690622, -0.0016959820641204715, -8.070142939686775e-05, -0.00727847358211875, -0.0025634069461375475, -0.0023249757941812277, -4.649054244509898e-05, -0.0001629458274692297, -0.0023535192012786865, -0.03333819657564163, -0.0006837890832684934, -0.01253335177898407, -0.0008504349971190095, -3.6954811548639555e-06, -2.0146166207268834e-05, -0.000316927267704159, -0.0009716795175336301, -0.012508275918662548, -0.010697519406676292, -0.42829322814941406, -0.27265653014183044, -2.5277318954467773, -0.006490697152912617, -0.04108559340238571, -3.576272320060525e-06, -0.021892080083489418, -0.005189519841223955, -0.0005965837044641376, -0.0009444067254662514, -0.1759798675775528, -0.002253732644021511, -2.8729025871143676e-05, -0.005596801172941923, -0.0021540552843362093, -1.680836794548668e-05, -1.9073468138230965e-06, -0.00045313104055821896, -1.5020257706055418e-05, -0.004439260810613632, -9.179073458653875e-06, -0.002976037794724107, -0.0014848408754915, -0.010794580914080143, -0.022737741470336914, -0.02309320867061615, -0.023057445883750916, -0.05823376402258873, -0.0018642442300915718, -0.0011501847766339779, -1.3232143828645349e-05, -0.5325667262077332, -0.0065450589172542095, -1.9034879207611084], "finish_reason": "stop"}], "metrics": {"energy": 850.4144088897704, "energy_per_token": 4.295022267120053, "time": 18.999222, "time_per_token": 0.09595566666666666}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    columns = columns or df.select_dtypes(include='object').columns\n    for column in columns:\n        le = LabelEncoder()\n        df[column] = le.fit_transform(df[column])\n\n    df = df.replace(dct)\n\n    for col in df.select_dtypes(include='number').columns:\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "columns", " =", " columns", " or", " df", ".", "select", "_", "d", "types", "(", "include", "='", "object", "')", ".", "columns", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "column", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "\n", "    ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "include", "='", "number", "')", ".", "columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -0.48565438389778137, -1.640852689743042, -0.013693912886083126, -0.0249498151242733, -0.15104877948760986, -0.0011970981722697616, -0.908291220664978, -0.02879195287823677, -0.0012856797548010945, -0.0066421679221093655, -0.3578927218914032, -0.0007840896723791957, -4.036956787109375, -0.12667538225650787, -0.31806594133377075, -0.3444253206253052, -1.2428395748138428, -0.0054320115596055984, -0.07944681495428085, -3.421248038648628e-05, -1.4305104514278355e-06, -8.344646857949556e-07, -0.3310728073120117, -0.11757585406303406, -0.5904068946838379, -0.02627919800579548, -0.002099335426464677, -0.0381624773144722, -0.0008357845945283771, -0.11431136727333069, -0.4940555691719055, -1.0609495639801025, -2.0433199405670166, -0.03218868002295494, -0.04577184468507767, -0.002831618534401059, -0.002050441922619939, -0.004209942650049925, -2.9218316078186035, -0.007055250462144613, -0.0015666127437725663, -2.622600959512056e-06, -0.00034195298212580383, -0.04278429225087166, -0.003777987789362669, -0.34818774461746216, -0.02934984676539898, -0.002944540698081255, -0.0016751555958762765, -0.018630633130669594, -0.3264358639717102, -3.516612196108326e-05, -0.01804365962743759, -0.0003359945258125663, -3.4570634852570947e-06, -0.00793128740042448, -0.020751742646098137, -0.008409800939261913, -0.000865680689457804, -0.43076473474502563, -0.00949002057313919, -0.1324278712272644, -0.004905806854367256, -1.0908420085906982, -0.3010176122188568, -0.03645900636911392, -0.0037971078418195248, -0.31675267219543457, -0.002007494680583477, -0.0055698915384709835, -0.0001267114421352744, -0.008839287795126438, -0.053241122514009476, -0.6220525503158569, -0.00024434918304905295, -1.2712982892990112, -1.605022668838501, -0.06511251628398895, -0.02589314989745617, -0.148898646235466, -1.9863859415054321, -3.6954811548639555e-06, -3.576278118089249e-07, -4.0531076592742465e-06, -0.043889183551073074, -0.16397500038146973, -0.8490234613418579, -0.9809260964393616, -0.0005514293443411589, -0.5171900391578674, -0.00036423723213374615, -0.009384920820593834, -0.0016288596671074629, -0.003392894519492984, -0.24501162767410278, -0.03705020248889923, -0.00022551853908225894, -0.0005719218170270324, -0.09524235874414444, -0.22830237448215485, -0.0012462714221328497, -0.0009218971827067435, -4.207999518257566e-05, -0.011164220981299877, -0.004381936509162188, -0.0035290364176034927, -0.0011799524072557688, -8.34461570775602e-06, -2.407998726994265e-05, -1.4066597032069694e-05, -0.004574429709464312, -0.028567109256982803, -0.0009017692063935101, -0.008850394748151302, -0.00021801002731081098, -5.245195097813848e-06, -0.0007634824141860008, -4.649054244509898e-05, -0.00028010259848088026, -0.004549628589302301, -0.005261977203190327, -0.0641835629940033, -0.0007746794726699591, -0.015352408401668072, -0.0011649496154859662, -0.6952001452445984, -0.004650253802537918, -1.802111029624939], "finish_reason": "stop"}], "metrics": {"energy": 643.6088756065369, "energy_per_token": 4.408279969907787, "time": 13.781403, "time_per_token": 0.0943931712328767}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame\")\n    df = df.apply(lambda x: x.replace(dct))\n    cols = columns if columns else df.select_dtypes(include=['object']).columns\n    for col in cols:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n    df = (df - df.mean()) / df.std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "    ", "df", " =", " df", ".", "apply", "(", "lambda", " x", ":", " x", ".", "replace", "(", "d", "ct", "))", "\n", "    ", "cols", " =", " columns", " if", " columns", " else", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "for", " col", " in", " col", "s", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "df", "[", "col", "]", " =", " le", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "    ", "return", " df"], "logprobs": [-0.2643504738807678, -0.023502696305513382, -0.025817176327109337, -0.0001512651506345719, -0.001846990897320211, -0.0005544078885577619, -0.009513282217085361, -1.8358061424805783e-05, -0.010356730781495571, -0.004734140355139971, -0.007459169719368219, -0.006823097355663776, -0.016786744818091393, -0.008141781203448772, -4.291525328881107e-06, -0.21286128461360931, -0.07588917016983032, -0.6104886531829834, -3.2486300468444824, -0.002508828416466713, -0.02120712213218212, -1.1408123970031738, -0.008515121415257454, -0.0011318475008010864, -0.7779026031494141, -0.0006480501033365726, -0.007525192108005285, -1.3365789651870728, -1.3330353498458862, -0.22926054894924164, -0.07830172777175903, -0.0016687290044501424, -1.6826026439666748, -0.854256808757782, -0.072923444211483, -0.23706689476966858, -0.004483409225940704, -0.08941704779863358, -0.001086121890693903, -0.207877054810524, -0.004785156808793545, -0.004451010376214981, -0.00016449528629891574, -0.5399937033653259, -0.3153941035270691, -0.10370147228240967, -3.5049848556518555, -0.23117955029010773, -1.4202053546905518, -0.2745700180530548, -0.023477545008063316, -0.5789743661880493, -0.2624233663082123, -0.001065163523890078, -0.07069992274045944, -3.635817120084539e-05, -5.960462772236497e-07, -2.50339189733495e-06, -0.4527014195919037, -0.4109537601470947, -1.0937296152114868, -0.018614718690514565, -0.04789121821522713, -0.024009548127651215, -0.0009459549910388887, -0.04634857177734375, -0.010168297216296196, -1.1825982332229614, -0.291634202003479, -0.009599005803465843, -0.016842776909470558, -1.0847986231965479e-05, -0.0018616265151649714, -0.0020343814976513386, -0.0040666512213647366, -1.1329379081726074, -0.0032071841415017843, -0.00047291061491705477, -5.125986263010418e-06, -0.00020668754586949944, -0.026980416849255562, -0.0003047717036679387, -0.17042073607444763, -0.014729679562151432, -0.0008937893435359001, -0.003494824282824993, -0.0009257083875127137, -0.008637921884655952, -5.8530047681415454e-05, -0.001702408422715962, -0.00042834642226807773, -4.768360213347478e-06, -0.00022146634000819176, -0.014751410111784935, -0.0021967582870274782, -3.4450891689630225e-05, -0.12859489023685455, -0.005704314913600683, -0.048636384308338165, -0.5554227828979492, -0.3215622901916504, -0.3777123689651489, -0.0006262486567720771, -0.036246225237846375, -0.0030559052247554064, -9.655486064730212e-05, -0.0023516162764281034, -0.07790415734052658, -0.0005664412747137249, -0.00794890895485878, -4.2437604861333966e-05, -9.7508447652217e-05, -0.000920825288631022, -0.020180150866508484, -0.009319139644503593, -0.01383489090949297, -0.0025177467614412308], "finish_reason": "stop"}], "metrics": {"energy": 517.3365277233124, "energy_per_token": 4.421679724130875, "time": 11.474976, "time_per_token": 0.09807671794871795}}
