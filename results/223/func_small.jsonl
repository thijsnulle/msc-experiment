{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input dataframe is not a DataFrame.\")\n\n    # Standardize numerical values by subtracting the mean and dividing by the standard deviation\n    if columns is not None:\n        for column in columns:\n            df[column] -= df[column].mean()\n            df[column] /= df[column].std()\n    else:\n        for col in df.columns:\n            df[col] -= df[col].mean()\n            df[col] /= df[col].std()\n\n    # Replace values\n    for old, new in dct.items():\n        df[columns] = df[columns].replace(old, new)\n\n    # Encode categorical columns\n    for column in columns:\n        if isinstance(df[column].iloc[0], str):\n            encoder = LabelEncoder()\n            encoder.fit(df[column])\n            df[column] = encoder.transform(df[column])\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", "frame", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " values", " by", " subt", "racting", " the", " mean", " and", " dividing", " by", " the", " standard", " deviation", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "for", " column", " in", " columns", ":", "\n", "            ", "df", "[", "column", "]", " -=", " df", "[", "column", "]", ".", "mean", "()", "\n", "            ", "df", "[", "column", "]", " /", "=", " df", "[", "column", "]", ".", "std", "()", "\n", "    ", "else", ":", "\n", "        ", "for", " col", " in", " df", ".", "columns", ":", "\n", "            ", "df", "[", "col", "]", " -=", " df", "[", "col", "]", ".", "mean", "()", "\n", "            ", "df", "[", "col", "]", " /", "=", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "#", " Replace", " values", "\n", "    ", "for", " old", ",", " new", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "replace", "(", "old", ",", " new", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "if", " isinstance", "(", "df", "[", "column", "]", ".", "il", "oc", "[", "0", "]", ",", " str", "):", "\n", "            ", "encoder", " =", " Label", "Encoder", "()", "\n", "            ", "encoder", ".", "fit", "(", "df", "[", "column", "])", "\n", "            ", "df", "[", "column", "]", " =", " encoder", ".", "transform", "(", "df", "[", "column", "])", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.176228865981102, -0.2083897590637207, -0.013906371779739857, -0.0001908358681248501, -0.012429631315171719, -0.00015948931104503572, -0.019976381212472916, -2.1219027985353023e-05, -0.04778825864195824, -0.004704715684056282, -0.006462034769356251, -0.0019179059891030192, -0.019231993705034256, -0.011526653543114662, -5.745722592109814e-05, -0.14119400084018707, -0.10387254506349564, -0.4048830270767212, -1.867126703262329, -1.2976891994476318, -0.8906804919242859, -0.034736160188913345, -0.2239270657300949, -0.9281604886054993, -0.03339815139770508, -0.6901016235351562, -0.04695374518632889, -0.00168658047914505, -0.004262647591531277, -0.3808547854423523, -0.000816012208815664, -1.6370606422424316, -3.3393611907958984, -0.38709938526153564, -0.5458496809005737, -3.346937656402588, -2.152294635772705, -0.026919379830360413, -6.711257447022945e-05, -0.2602541148662567, -0.037411414086818695, -0.015495500527322292, -0.010693981312215328, -0.003575719427317381, -0.18943104147911072, -0.006856130436062813, -0.004378613084554672, -0.49646666646003723, -0.0027092916425317526, -2.346865177154541, -0.1844814270734787, -0.20112918317317963, -2.58703351020813, -7.021180499577895e-05, -0.02369631826877594, -0.01304908748716116, -0.0017335877055302262, -0.6435818672180176, -1.5249133110046387, -0.019708288833498955, -0.013357790187001228, -0.0006130246329121292, -0.0032910730224102736, -0.002356016542762518, -0.4521990716457367, -0.011306734755635262, -0.0007034449372440577, -0.0015543533954769373, -2.686035633087158, -0.044801607728004456, -0.0018497277051210403, -0.0006718761869706213, -1.6331539882230572e-05, -3.3378546504536644e-06, -0.0020818482153117657, -0.0013986576814204454, -0.012560899369418621, -0.018721193075180054, -0.007153848651796579, -0.00015698630886618048, -4.756337511935271e-05, -0.00013207517622504383, -0.010467627085745335, -1.6569954823353328e-05, -0.05083785206079483, -0.000709282117895782, -0.00012706902634818107, -4.136476854910143e-05, -1.5258672647178173e-05, -0.00013422065239865333, -0.016262613236904144, -0.005581153091043234, -0.18075893819332123, -0.005446713417768478, -5.8530047681415454e-05, -0.008633549325168133, -0.0010200303513556719, -0.5748834609985352, -1.6138697862625122, -0.09637298434972763, -0.009922229684889317, -0.018414728343486786, -0.16012883186340332, -0.008608493953943253, -0.0022430280223488808, -0.0010514690075069666, -0.8503233790397644, -0.0007367995567619801, -8.844937838148326e-05, -0.000773250067140907, -0.03016551584005356, -0.0008008848526515067, -0.0012198395561426878, -4.768258077092469e-05, -2.992108420585282e-05, -1.7404405298293568e-05, -0.0009754904895089567, -0.00010179955279454589, -0.004704596940428019, -0.0003798478574026376, -0.0028414849657565355, -7.10462118149735e-05, -1.2516897186287679e-05, -0.00013195598148740828, -0.00044252615771256387, -1.5616295058862306e-05, -0.0009296386269852519, -0.0003079893649555743, -3.2782016205601394e-05, -1.7165990357170813e-05, -2.0265558760002023e-06, -6.305972783593461e-05, -0.0004240567213855684, -0.0017099058022722602, -0.025560056790709496, -0.0023291383404284716, -0.06910231709480286, -0.19101478159427643, -0.3495062291622162, -2.7921435832977295, -0.0008423355757258832, -0.2877197563648224, -1.0462857484817505, -0.6631935834884644, -0.005434857215732336, -0.007809345610439777, -0.0029389543924480677, -2.3603161025675945e-05, -0.0009221353684552014, -0.0003987947420682758, -0.00015698630886618048, -0.0016617074143141508, -0.0007462101057171822, -0.03796417638659477, -0.5907572507858276, -0.8452219367027283, -0.056720070540905, -0.8462581038475037, -0.00819061417132616, -0.010742336511611938, -0.005041980184614658, -0.00022492263815365732, -0.0018908970523625612, -0.28694599866867065, -0.11956196278333664, -0.08899387717247009, -0.00175453198608011, -0.004009542521089315, -0.07307892292737961, -0.009480574168264866, -0.0559830479323864, -0.003780362894758582, -0.11261754482984543, -0.12428024411201477, -0.02299954742193222, -0.019814763218164444, -0.878913938999176, -0.23074379563331604, -0.0013393727131187916, -1.6255111694335938, -0.8884209394454956, -0.007144616451114416, -0.3688805103302002, -0.07328489422798157, -0.003714567981660366, -0.0015647084219381213, -1.295128345489502, -2.64963960647583, -0.00017772526189219207, -0.02271781489253044, -0.006553822662681341, -0.013221921399235725, -0.06632957607507706, -0.01937675289809704, -0.25259023904800415, -0.003765042871236801, -0.006118969526141882, -0.001450201845727861, -0.0005763299996033311, -0.00028379703871905804, -0.11187487840652466, -0.13916756212711334, -0.011661929078400135, -0.001561851822771132, -1.9099030494689941, -0.0014484162675216794, -0.005356720648705959, -3.1470757676288486e-05, -0.0020680485758930445, -0.02742960676550865, -0.0015380469849333167, -0.46004992723464966, -0.006933439057320356, -0.00023362292267847806, -0.015270230360329151, -0.014603042975068092, -0.003467976814135909, -0.004120076075196266, -0.04046747088432312, -0.002555915853008628, -0.003932482097297907, -0.043373364955186844, -0.005850689951330423, -0.0020386644173413515, -0.0012056708801537752, -0.0033005783334374428, -0.001167926355265081, -0.00024136967840604484, -0.0037271573673933744, -0.0004228651523590088, -0.004604214336723089, -0.00028784899041056633, -0.0003131137927994132, -0.0012509147636592388, -0.1455717533826828, -0.25155118107795715, -0.006102737504988909, -0.02821926213800907, -0.0015880366554483771, -0.7516553401947021, -0.01813017763197422, -1.9279872179031372], "finish_reason": "stop"}], "metrics": {"energy": 407.36498978042573, "energy_per_token": 1.683326404051346, "time": 13.79423, "time_per_token": 0.057000950413223145}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame.\")\n\n    for col in df.columns:\n        if col in columns:\n            df[col] = LabelEncoder().fit_transform(df[col])\n        else:\n            if df[col].dtype == object:\n                df[col] = LabelEncoder().fit_transform(df[col])\n\n    df.loc[:, list(map(str, df.columns))] = df[list(map(str, df.columns))].std().apply(lambda x: x - df[list(map(str, df.columns))].mean())\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " col", " in", " columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "        ", "else", ":", "\n", "            ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " object", ":", "\n", "                ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "df", ".", "loc", "[:", ",", " list", "(", "map", "(", "str", ",", " df", ".", "columns", "))", "]", " =", " df", "[", "list", "(", "map", "(", "str", ",", " df", ".", "columns", "))", "]", ".", "std", "()", ".", "apply", "(", "lambda", " x", ":", " x", " -", " df", "[", "list", "(", "map", "(", "str", ",", " df", ".", "columns", "))", "]", ".", "mean", "())", "\n", "\n", "    ", "return", " df", "\n", "\n", "print"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -2.5278892517089844, -0.5742558240890503, -0.0015861323336139321, -0.049682315438985825, -0.5473660230636597, -0.024830978363752365, -0.003641167189925909, -0.9803135395050049, -0.010463734157383442, -0.0016313589876517653, -0.003650075290352106, -0.4754030108451843, -0.0007527616689912975, -1.745955228805542, -1.0063252449035645, -0.24902573227882385, -0.5977435111999512, -0.09682701528072357, -0.027819005772471428, -0.029873529449105263, -0.012340736575424671, -0.008997373282909393, -0.18183371424674988, -1.6669591665267944, -0.42599236965179443, -0.895393967628479, -0.3416634798049927, -0.022181624546647072, -0.0023231918457895517, -0.4502254128456116, -0.04875980690121651, -0.002771942876279354, -0.003888428211212158, -0.038747623562812805, -0.8157893419265747, -8.535020606359467e-05, -0.00447842525318265, -0.0002022777043748647, -0.0016768217319622636, -0.003133151913061738, -0.00020013237372040749, -0.001908744452521205, -0.008666167967021465, -0.0032153832726180553, -0.0016677769599482417, -0.020965859293937683, -0.0240683201700449, -0.6601055264472961, -0.5658594369888306, -0.0006372089846991003, -0.004237957298755646, -0.0015445933677256107, -0.6213879585266113, -0.2618212103843689, -0.031488217413425446, -0.00022027450904715806, -0.0001774868869688362, -8.606540359323844e-05, -0.015292536467313766, -0.06496584415435791, -0.1122070699930191, -1.2824985980987549, -0.03255707770586014, -0.009203627705574036, -0.0011317284079268575, -0.07095257937908173, -0.0021128966473042965, -5.6265202147187665e-05, -0.0005891970940865576, -0.009321973659098148, -0.011068610474467278, -0.00019238528329879045, -0.0012707976857200265, -0.00022968991834204644, -0.004529573488980532, -0.0020102309063076973, -1.1444026313256472e-05, -0.0003430254873819649, -0.0011374439345672727, -0.00022504181833937764, -4.935142715112306e-05, -0.0049179065972566605, -0.052591677755117416, -0.8568263649940491, -0.024932723492383957, -1.0518708229064941, -2.9829423427581787, -1.0434167385101318, -0.06055158004164696, -0.0012419852428138256, -3.677198886871338, -0.016618512570858, -2.150324821472168, -0.00216821045614779, -0.8129714727401733, -0.09094586968421936, -1.0223076343536377, -0.015206243842840195, -0.32674500346183777, -0.022643115371465683, -0.020882973447442055, -0.10037081688642502, -0.25935232639312744, -1.736804485321045, -0.07825080305337906, -0.00019202772818971425, -0.008707175962626934, -2.455681169521995e-05, -0.002766355639323592, -3.886147169396281e-05, -0.016504427418112755, -7.748303323751315e-05, -0.0011411352315917611, -0.0005326044629327953, -0.002535582985728979, -0.08523202687501907, -0.9578237533569336, -0.3602831959724426, -1.2063740491867065, -0.7231883406639099, -0.009375945664942265, -0.2621344029903412, -0.036128610372543335, -0.006279736757278442, -0.2813979983329773, -3.4119646549224854, -0.7843234539031982, -0.06414845585823059, -0.5134522318840027, -0.0001517419150331989, -0.008566655218601227, -3.659658250398934e-05, -0.00747419660910964, -8.701899787411094e-05, -0.012184119783341885, -0.00010680581908673048, -0.00014041867689229548, -0.0002134810492862016, -0.0016271935310214758, -3.158996332786046e-05, -0.12514325976371765, -0.1038176417350769, -0.21473677456378937, -0.3757614493370056, -0.005456316750496626, -0.054591014981269836, -0.004442228004336357, -0.8218329548835754, -0.010469750501215458, -3.5947721004486084], "finish_reason": "stop"}], "metrics": {"energy": 265.9335289154053, "energy_per_token": 1.5924163408108103, "time": 8.355519, "time_per_token": 0.050033047904191615}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n\n    df.loc[:, columns].map(lambda x: LabelEncoder().fit_transform(x))\n    df.loc[:, columns].mean()\n    df.loc[:, columns].std()", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "df", ".", "loc", "[:", ",", " columns", "]", ".", "map", "(", "lambda", " x", ":", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "x", "))", "\n", "    ", "df", ".", "loc", "[:", ",", " columns", "]", ".", "mean", "()", "\n", "    ", "df", ".", "loc", "[:", ",", " columns", "]", ".", "std", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -1.8019359111785889, -0.0010790961096063256, -0.05139604210853577, -0.6796641945838928, -0.03528810292482376, -0.006554177962243557, -0.4617933928966522, -0.006941015832126141, -0.0013006808003410697, -0.0038484097458422184, -0.3285520076751709, -0.0008006466086953878, -2.562586545944214, -1.7788110971450806, -1.6247155666351318, -0.3446744978427887, -0.0021533414255827665, -0.31211933493614197, -0.21564249694347382, -1.510723352432251, -3.6826834678649902, -0.04375215247273445, -0.697482705116272, -0.3334089517593384, -0.0009791824268177152, -1.115842342376709, -0.00011932138295378536, -0.006839318200945854, -0.0008068405441008508, -0.0029513156041502953, -0.008316055871546268, -0.0004800597671419382, -0.002815095242112875, -0.023406628519296646, -1.0571136474609375, -0.13539555668830872, -0.3131924569606781, -0.28371861577033997, -0.623114824295044, -0.14202795922756195, -0.03525933250784874, -0.006958418060094118, -0.5184263586997986, -0.0075939311645925045, -0.04313796013593674, -1.4186004400253296, -0.3583616614341736, -0.39343321323394775, -0.1676681488752365, -0.16792476177215576, -0.08604428917169571, -0.013736949302256107, -0.0025362963788211346, -0.0016818201402202249, -0.014359592460095882, -0.0008765193051658571, -0.004117701668292284, -0.0395946241915226, -0.023831119760870934, -2.1167995929718018, -3.099436753473128e-06, -5.960462772236497e-07, -5.411955135059543e-05, -0.0003748429589904845, -0.18292967975139618], "finish_reason": "stop"}], "metrics": {"energy": 124.7223770122528, "energy_per_token": 1.5026792411114795, "time": 3.989314, "time_per_token": 0.04806402409638554}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    for col in df.columns:\n        if df[col].dtype == object and (columns is None or col in columns):\n            # Replace values\n            df[col] = df[col].apply(lambda x: dct.get(x, x))\n\n            # Encode categorical attributes\n            df[col] = LabelEncoder().fit_transform(df[col])\n\n        elif df[col].dtype == int or df[col].dtype == float:\n            # Standardize numerical attributes\n            df[col] = (df[col] - df[col].mean()) / df[col].std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " object", " and", " (", "columns", " is", " None", " or", " col", " in", " columns", "):", "\n", "            ", "#", " Replace", " values", "\n", "            ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "apply", "(", "lambda", " x", ":", " d", "ct", ".", "get", "(", "x", ",", " x", "))", "\n", "\n", "            ", "#", " Enc", "ode", " categorical", " attributes", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "        ", "elif", " df", "[", "col", "]", ".", "d", "type", " ==", " int", " or", " df", "[", "col", "]", ".", "d", "type", " ==", " float", ":", "\n", "            ", "#", " Standard", "ize", " numerical", " attributes", "\n", "            ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -0.9022796154022217, -0.7049325704574585, -0.009510803036391735, -0.020493200048804283, -0.26558738946914673, -0.005940163973718882, -0.3902255594730377, -0.05130363628268242, -0.0016583750257268548, -0.004974014591425657, -0.4557865858078003, -0.0006617502076551318, -1.9732660055160522, -1.0549285411834717, -0.21624870598316193, -0.6195959448814392, -0.10811461508274078, -0.025121185928583145, -0.04606013745069504, -0.016767872497439384, -0.00869311299175024, -0.171248659491539, -1.2054539918899536, -0.0185997411608696, -0.0035999510437250137, -0.0001995364436879754, -0.0001267114421352744, -0.015234773978590965, -0.09337117522954941, -0.09598859399557114, -0.8888627290725708, -0.5420365929603577, -1.1643797159194946, -0.03697461262345314, -0.018339237198233604, -0.007872742600739002, -0.0029306341893970966, -0.016332512721419334, -0.013051559217274189, -0.0011754278093576431, -0.00984798464924097, -0.014136181212961674, -0.0021075436379760504, -2.8596668243408203, -2.267493724822998, -0.5543183088302612, -1.7503677606582642, -0.0008721124031580985, -0.2071138173341751, -0.18593603372573853, -0.000251142424531281, -0.0029845954850316048, -0.47738009691238403, -0.023877795785665512, -0.0018477048724889755, -8.260862523457035e-05, -1.8596476365928538e-05, -0.00044467096449807286, -1.8728634119033813, -0.002616198966279626, -0.022453952580690384, -0.05626165121793747, -0.00027938754647038877, -0.05191725119948387, -3.766942609217949e-05, -0.7020131945610046, -0.0007868293323554099, -6.532455881824717e-05, -0.008043871261179447, -0.01141021866351366, -0.011543151922523975, -0.0072430879808962345, -0.00913346279412508, -0.5023229122161865, -0.5911518335342407, -0.02263985201716423, -0.06115640699863434, -0.04689516872167587, -0.05270104110240936, -1.558171033859253, -0.09041564911603928, -0.0009334497735835612, -1.997003197669983, -0.03302302956581116, -0.0002978596603497863, -0.0008013612823560834, -0.04421873763203621, -0.14346227049827576, -2.5033637939486653e-05, -0.0010524216340854764, -0.0003626880934461951, -0.0006596058374270797, -0.013091681525111198, -0.00016151554882526398, -0.0005641775787808001, -0.005831371992826462, -0.001086359960027039, -0.00011169286881340668, -0.02223723940551281, -0.040045518428087234, -0.1418343186378479, -1.479171633720398, -0.4775744378566742, -0.14018051326274872, -0.0024458037223666906, -0.0002964295563288033, -0.00010179955279454589, -0.0004207202873658389, -0.005144335329532623, -0.003748297458514571, -0.21263925731182098, -1.7560884952545166, -0.5416550636291504, -0.002600979758426547, -0.0006063529872335494, -4.446407547220588e-05, -1.6331539882230572e-05, -6.55629628454335e-05, -0.000301673193462193, -0.0006112375995144248, -0.0009662011871114373, -0.009082077071070671, -0.028117965906858444, -0.005039608106017113, -0.004692613612860441, -0.14394114911556244, -0.27646076679229736, -0.040518298745155334, -0.05887618660926819, -0.06154869869351387, -0.030636053532361984, -0.0009003399754874408, -0.10956001281738281, -0.0039780777879059315, -0.0003134713042527437, -0.00024196557933464646, -0.1544913500547409, -0.11111383885145187, -0.0026632812805473804, -0.00011324241495458409, -8.702239938429557e-06, -0.008237316273152828, -0.019360851496458054, -0.04407661780714989, -0.0028588399291038513, -0.00011455356434453279, -4.2676016164477915e-05, -2.264974000354414e-06, -0.001640761154703796, -0.012963307090103626, -0.0004544417606666684, -0.008462640456855297, -0.00028975578607060015, -0.0001102625101339072, -1.7165990357170813e-05, -1.1086402082582936e-05, -0.0001113352773245424, -0.0007892115972936153, -0.13557253777980804, -2.241083860397339, -0.012395487166941166, -0.00366337806917727, -1.0671477317810059, -4.768370445162873e-07, -8.344646857949556e-07, -1.9073304429184645e-05, -0.00032944019767455757, -0.07334405183792114], "finish_reason": "stop"}], "metrics": {"energy": 293.4408670291901, "energy_per_token": 1.5776390700494092, "time": 9.176601, "time_per_token": 0.04933656451612903}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df should be a DataFrame.\")\n    df = df.copy()\n    for column in df.columns:\n        if columns is not None and column not in columns:\n            continue\n        if df[column].dtype == object:\n            df[column] = LabelEncoder().fit_transform(df[column])\n    df = df.apply(lambda x: x - x.mean())\n    df /= df.std()\n    for key, value in dct.items():\n        df[columns] = df[columns].replace(key, value)\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " should", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "    ", "for", " column", " in", " df", ".", "columns", ":", "\n", "        ", "if", " columns", " is", " not", " None", " and", " column", " not", " in", " columns", ":", "\n", "            ", "continue", "\n", "        ", "if", " df", "[", "column", "]", ".", "d", "type", " ==", " object", ":", "\n", "            ", "df", "[", "column", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "    ", "df", " =", " df", ".", "apply", "(", "lambda", " x", ":", " x", " -", " x", ".", "mean", "())", "\n", "    ", "df", " /", "=", " df", ".", "std", "()", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "replace", "(", "key", ",", " value", ")", "\n", "    ", "return", " df"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -0.9022796154022217, -2.282182216644287, -0.005062855314463377, -0.13143640756607056, -0.9806979298591614, -0.007308651227504015, -0.6727272272109985, -0.028588194400072098, -0.001987745286896825, -0.004670069552958012, -0.9054101705551147, -2.570812225341797, -0.6163970232009888, -0.02284832112491131, -0.005250236950814724, -0.07743372023105621, -0.01476268656551838, -0.18733230233192444, -0.3650856912136078, -1.553999423980713, -1.7240073680877686, -0.11563772708177567, -0.64316725730896, -0.1122903898358345, -0.022777942940592766, -0.03543861210346222, -0.006515687331557274, -0.003985201939940453, -0.07315648347139359, -0.7750391960144043, -0.1055603176355362, -0.8583506941795349, -5.1377883210079744e-05, -0.16332876682281494, -0.02043643780052662, -0.10252305865287781, -1.7881233361549675e-05, -0.0036221628542989492, -0.011515223421156406, -0.011437324807047844, -0.0005100856651552022, -0.032610271126031876, -0.00796558428555727, -0.019850173965096474, -0.24236032366752625, -0.27546223998069763, -0.021990042179822922, -0.0017362057697027922, -0.0001287377526750788, -7.4741430580616e-05, -0.021091341972351074, -0.11130093038082123, -0.08825124055147171, -0.9954188466072083, -0.035711146891117096, -0.00918968953192234, -0.000856747676152736, -0.8454233407974243, -0.03286004438996315, -0.000962032878305763, -0.0008404298569075763, -0.012704979628324509, -0.18333038687705994, -6.031808152329177e-05, -0.0030844276770949364, -0.0002847504511009902, -0.0014544870937243104, -0.0044983625411987305, -0.00014876213390380144, -0.0002809368306770921, -0.004763564094901085, -0.0005981324939057231, -0.0002083561266772449, -0.034760456532239914, -0.042716674506664276, -0.42631855607032776, -0.92079097032547, -1.4564086198806763, -0.14487648010253906, -0.016455763950943947, -0.7603034973144531, -0.027307584881782532, -0.2689058184623718, -0.19809390604496002, -0.0005689432728104293, -1.591440200805664, -0.6407309770584106, -0.03528304025530815, -3.2305197237292305e-05, -0.002260988112539053, -0.3186839818954468, -0.846357524394989, -0.002650678623467684, -0.11182200908660889, -2.589653730392456, -0.0001720042055239901, -0.31406858563423157, -0.0038324969355016947, -0.006480866577476263, -0.09632740914821625, -0.02990500070154667, -0.034542594105005264, -0.9663408398628235, -1.1944679021835327, -0.15788669884204865, -0.42786917090415955, -0.00013159839727450162, -0.00233056559227407, -2.038458114839159e-05, -0.0007453762227669358, -0.00047100416850298643, -0.0005466635921038687, -0.001684914343059063, -0.0013096098555251956, -0.05927285552024841, -0.3551802337169647, -0.9076669812202454, -0.11337616294622421, -0.34817084670066833, -0.026951638981699944, -0.06085863709449768, -0.0075578466057777405, -0.0006528153317049146, -0.0013373488327488303, -0.15985099971294403, -0.21139805018901825, -0.1515110433101654, -0.003372340928763151, -0.006281750742346048, -0.015458174049854279, -0.008299622684717178, -0.03180733323097229, -0.029018251225352287, -0.0013309201458469033], "finish_reason": "stop"}], "metrics": {"energy": 243.8631663513185, "energy_per_token": 1.6043629365218324, "time": 7.5562906, "time_per_token": 0.04971243815789474}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input should be a DataFrame\")\n\n    # Initialize the output dataframe to be the same as the input dataframe\n    output_df = df.copy()\n\n    # Convert the dictionary to a LabelEncoder object\n    le = LabelEncoder()\n    le.fit(df[columns if columns else df.select_dtypes(include=['object'])].columns)\n\n    # Replace specified values in the dataframe\n    output_df[columns if columns else output_df.select_dtypes(include=['object'])] = output_df[columns if columns else output_df.select_dtypes(include=['object'])].replace(dct)\n\n    # Encode categorical data using the LabelEncoder\n    output_df[columns if columns else output_df.select_dtypes(include=['object'])] = le.transform(output_df[columns if columns else output_df.select_dtypes(include=['object'])])\n\n    # Standardize numerical data by subtracting the mean and dividing by the standard deviation\n    output_df[columns if columns else", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "input", " should", " be", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " the", " output", " data", "frame", " to", " be", " the", " same", " as", " the", " input", " data", "frame", "\n", "    ", "output", "_", "df", " =", " df", ".", "copy", "()", "\n", "\n", "    ", "#", " Convert", " the", " dictionary", " to", " a", " Label", "Encoder", " object", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "df", "[", "columns", " if", " columns", " else", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "']", ")]", ".", "columns", ")", "\n", "\n", "    ", "#", " Replace", " specified", " values", " in", " the", " data", "frame", "\n", "    ", "output", "_", "df", "[", "columns", " if", " columns", " else", " output", "_", "df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "']", ")]", " =", " output", "_", "df", "[", "columns", " if", " columns", " else", " output", "_", "df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "']", ")]", ".", "replace", "(", "d", "ct", ")", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " data", " using", " the", " Label", "Encoder", "\n", "    ", "output", "_", "df", "[", "columns", " if", " columns", " else", " output", "_", "df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "']", ")]", " =", " le", ".", "transform", "(", "output", "_", "df", "[", "columns", " if", " columns", " else", " output", "_", "df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "']", ")]", ")", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " data", " by", " subt", "racting", " the", " mean", " and", " dividing", " by", " the", " standard", " deviation", "\n", "    ", "output", "_", "df", "[", "columns", " if", " columns", " else"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -3.332792282104492, -2.919797420501709, -0.008146865293383598, -0.2651698589324951, -0.8169994950294495, -0.02195330709218979, -0.3097214102745056, -0.0009704885887913406, -0.004476407542824745, -0.5447556376457214, -0.0006540066679008305, -1.8589341640472412, -4.813332557678223, -1.5643717050552368, -3.484860420227051, -2.226841688156128, -0.12625204026699066, -3.1844382286071777, -0.716528058052063, -0.6948331594467163, -0.0958249419927597, -1.4406843185424805, -0.21529383957386017, -0.04621494933962822, -0.7015560269355774, -0.015256963670253754, -0.22843357920646667, -0.002931585069745779, -0.9851575493812561, -0.8098555207252502, -0.07476267963647842, -0.002093744231387973, -0.01728939637541771, -0.11187498271465302, -0.0012766314903274179, -0.05727825313806534, -0.00600202102214098, -0.07038120180368423, -0.0007992172613739967, -0.2799516022205353, -4.374564170837402, -0.7149608731269836, -1.6657553911209106, -0.8309234976768494, -0.09506481885910034, -3.1092803478240967, -0.05167320743203163, -0.9482589960098267, -0.3765634596347809, -0.0012871085200458765, -1.0626412630081177, -0.017919199541211128, -0.005411737132817507, -4.60137271147687e-05, -0.0013660395052284002, -0.020297905430197716, -0.5299962759017944, -0.17412744462490082, -0.0332789309322834, -0.16909697651863098, -0.010906017385423183, -1.3691627979278564, -0.16023273766040802, -0.022697653621435165, -2.599947929382324, -0.025830304250121117, -0.3154475688934326, -0.13734672963619232, -0.0221770778298378, -1.315821886062622, -9.894321920000948e-06, -9.452849917579442e-05, -0.0005440423847176135, -0.0825207307934761, -0.4943428933620453, -0.47628089785575867, -0.040206074714660645, -1.084914207458496, -0.0017588159535080194, -0.602728009223938, -0.2275765985250473, -0.09701236337423325, -0.024203304201364517, -0.07996956259012222, -0.0004864939546678215, -0.07651615142822266, -0.7195164561271667, -2.4733431339263916, -0.01402827724814415, -0.6411107778549194, -0.08372316509485245, -0.8053109049797058, -0.013698969036340714, -0.3225485682487488, -0.0007195267826318741, -0.655548632144928, -0.0003796095261350274, -0.0007364421617239714, -0.8759521245956421, -0.2698447108268738, -0.07556015998125076, -0.0009257083875127137, -0.002760411472991109, -1.9119747877120972, -0.00023398046323563904, -0.001158043509349227, -0.006163162179291248, -0.0206841342151165, -1.7762025890988298e-05, -9.798523387871683e-05, -0.0007021345663815737, -0.0018942285096272826, -0.009212368167936802, -0.012351333163678646, -0.0009433348895981908, -0.02371249906718731, -0.000990615226328373, -0.39254072308540344, -0.30928629636764526, -0.000228140561375767, -5.23315102327615e-05, -0.014616318047046661, -0.1542227864265442, -0.0072028483264148235, -0.002779789036139846, -0.009896144270896912, -0.04137546941637993, -0.00022957073815632612, -1.4781842764932662e-05, -0.0008126770262606442, -0.0006971312686800957, -0.00033480284037068486, -3.564294092939235e-05, -0.000503770774230361, -0.00048637480358593166, -0.003685944713652134, -0.0005660838796757162, -0.0001530530134914443, -0.0002849888114724308, -0.0008511496125720441, -0.0009115354623645544, -0.6032795906066895, -0.005438176915049553, -0.02229471504688263, -9.881961887003854e-05, -0.045038554817438126, -0.013272506184875965, -0.06971011310815811, -0.0014287750236690044, -0.03811577707529068, -0.21705952286720276, -0.03043139912188053, -0.10983871668577194, -3.027942419052124, -1.7124881744384766, -1.01491117477417, -0.08268756419420242, -0.012569963932037354, -0.8335954546928406, -0.0029721155297011137, -0.491692453622818, -6.711257447022945e-05, -0.001581966644152999, -0.08049875497817993, -0.07080532610416412, -0.006181525997817516, -0.0010214593494310975, -0.0003413571394048631, -0.0983092337846756, -2.8371408916427754e-05, -1.0967194612021558e-05, -0.00033182359766215086, -0.0002628219372127205, -8.583032467868179e-06, -4.458328112377785e-05, -0.00011359999916749075, -0.00029059001826681197, -0.0028558680787682533, -0.0025648337323218584, -0.0010631391778588295, -0.003096549538895488, -0.00026794656878337264, -0.0072504254058003426, -0.2866370975971222, -0.0002892790944315493, -0.004437006078660488, -0.0007108307327143848, -0.14495331048965454, -8.618460560683161e-05, -3.933898824470816e-06, -0.002857413375750184, -0.0007652691565454006, -0.00015484087634831667, -8.964136941358447e-05, -9.345571743324399e-05, -0.006115533411502838, -6.16293036728166e-05, -4.0531076592742465e-06, -0.00011169286881340668, -5.1616290875244886e-05, -3.4570634852570947e-06, -1.156323378381785e-05, -0.00024589852546341717, -3.4689302992774174e-05, -0.0001267114421352744, -0.0001517419150331989, -9.333651541965082e-05, -0.0004677870310842991, -0.00010299152199877426, -0.31436148285865784, -0.004397009499371052, -0.0315009243786335, -0.0011710221879184246, -0.026415973901748657, -0.20365256071090698, -0.019456608220934868, -0.17354866862297058, -0.11003746837377548, -1.5771474838256836, -0.01609663851559162, -8.928377064876258e-05, -0.07149688154459, -0.020898032933473587, -0.0141382971778512, -0.007033943198621273, -0.0037322642747312784, -0.07136091589927673, -0.0062983352690935135, -0.004762021824717522, -0.10151870548725128, -0.001909815357066691, -0.36606842279434204, -9.548207890475169e-05, -0.00130282377358526, -0.21725092828273773, -0.03074241243302822, -0.005526857916265726, -0.0004301338049117476, -0.0004557524516712874], "finish_reason": "length"}], "metrics": {"energy": 373.6042264804839, "energy_per_token": 1.4593915096893901, "time": 12.959567, "time_per_token": 0.05062330859375}}
{"outputs": [{"text": "# check the input data is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data must be a DataFrame.\")\n\n    # replace values in the dataframe\n    df.replace(dct, inplace=True)\n    # encoding categorical columns\n    for column in columns if columns else df.select_dtypes(\"object\"):\n        df[column] = LabelEncoder().fit_transform(df[column])\n    # numerical standardization\n    df[columns] if columns else df.std(axis=0) / df.std(axis=0), axis=0)\n    return df", "tokens": ["#", " check", " the", " input", " data", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " replace", " values", " in", " the", " data", "frame", "\n", "    ", "df", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "    ", "#", " encoding", " categorical", " columns", "\n", "    ", "for", " column", " in", " columns", " if", " columns", " else", " df", ".", "select", "_", "d", "types", "(", "\"", "object", "\"", "):", "\n", "        ", "df", "[", "column", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "    ", "#", " numerical", " standard", "ization", "\n", "    ", "df", "[", "columns", "]", " if", " columns", " else", " df", ".", "std", "(", "axis", "=", "0", ")", " /", " df", ".", "std", "(", "axis", "=", "0", ")", ",", " axis", "=", "0", ")", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.3783953189849854, -2.536365509033203, -2.696931838989258, -0.6846720576286316, -1.9574956893920898, -1.3192692995071411, -0.6351989507675171, -0.549333930015564, -0.01381231751292944, -0.21344684064388275, -0.003631902625784278, -0.019124405458569527, -0.07166989147663116, -0.005600001662969589, -0.0001935771433636546, -0.0023365120869129896, -0.00012742661056108773, -0.01511982548981905, -1.3351351299206726e-05, -0.07310451567173004, -0.0021081382874399424, -0.001716689090244472, -0.0017955861985683441, -0.01890076883137226, -0.017651256173849106, -3.2543604902457446e-05, -0.17462560534477234, -0.10633833706378937, -0.2781583368778229, -0.5050792098045349, -1.3031067848205566, -0.0008247073274105787, -0.02394123002886772, -1.1717724800109863, -0.006632931064814329, -0.44789087772369385, -0.011175301857292652, -0.0005463061388581991, -0.0020121345296502113, -0.12789903581142426, -0.0011463745031505823, -0.11444395035505295, -1.89435613155365, -0.3057909309864044, -0.367144912481308, -0.22533021867275238, -1.9359694719314575, -0.4351448714733124, -0.29778626561164856, -0.0021563153713941574, -0.984621524810791, -0.703040599822998, -0.12697172164916992, -0.0016846762737259269, -0.02376011200249195, -3.361645576660521e-05, -0.009496986865997314, -0.002857770072296262, -0.00010132275929208845, -0.006077381316572428, -0.0021381154656410217, -0.006535347551107407, -0.02079552598297596, -2.985851764678955, -0.7548918128013611, -3.4033830165863037, -0.19573457539081573, -1.0069173574447632, -0.14925655722618103, -0.005125477910041809, -3.0073277950286865, -1.4604272842407227, -0.033767253160476685, -0.7611873745918274, -0.7677665948867798, -0.037589043378829956, -0.4179890751838684, -0.03786202892661095, -0.011906390078365803, -0.18947118520736694, -2.9802276912960224e-06, -0.00011514954530866817, -0.00043084874050691724, -0.07729834318161011, -2.7796971797943115, -0.16420070827007294, -0.0041328975930809975, -0.6507619619369507, -0.009318784810602665, -0.0027246277313679457, -0.8805277943611145, -0.009417514316737652, -0.000814582861494273, -0.004687155596911907, -0.005725176073610783, -0.03884257376194, -2.13382354559144e-05, -0.0016617074143141508, -0.0004904259694740176, -0.001029438222758472, -0.0055229454301297665, -0.000271521887043491, -0.0005952732171863317, -0.006427567917853594, -0.000771820661611855, -0.0006481691962108016, -0.009979356080293655, -0.007812775671482086, -0.36367857456207275, -0.046794723719358444, -0.6386273503303528, -0.21936185657978058, -0.05260592699050903, -0.04422033578157425, -0.0014943634159862995, -0.3911844789981842, -0.7678746581077576, -0.3086550831794739, -0.3828251361846924, -1.4659860134124756, -0.011468908749520779, -0.02308284118771553, -0.057730354368686676, -0.01866292580962181, -1.4678473472595215, -0.6759632229804993, -0.11338988691568375, -0.019650546833872795, -0.0164079200476408, -0.5442421436309814, -2.2469544410705566, -0.05861877277493477, -0.015535642392933369, -1.099440336227417, -0.13830578327178955, -0.01505524292588234, -0.002016774145886302, -0.04105779156088829, -0.15128521621227264, -2.919337749481201, -1.2712956666946411, -0.024414705112576485, -0.10263311862945557, -0.3357069492340088, -0.20297512412071228, -0.5908752083778381, -0.12270437180995941, -0.010097256861627102, -0.9371169209480286, -0.04048303887248039, -1.1086114645004272], "finish_reason": "stop"}], "metrics": {"energy": 228.00322468948363, "energy_per_token": 1.5099551303939314, "time": 7.5078344, "time_per_token": 0.04972075761589404}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if not isinstance(dct, dict):\n        raise ValueError(\"dct must be a dictionary\")\n    if columns is not None:\n        if not all(isinstance(column, str) for column in columns):\n            raise ValueError(\"columns must be a list of strings\")\n        if not all(column in df.columns for column in columns):\n            raise ValueError(\"Some column names provided in columns are missing from the DataFrame.\")\n    for column in dct.keys():\n        if column not in df.columns:\n            raise ValueError(f\"Column {column} not in df columns\")\n    columns = list(dct.keys()) if columns is None else columns\n    if columns:\n        encoder = LabelEncoder()\n        encoded_columns = [column for column in columns if df[column].dtype == 'object']\n        for column in encoded_columns:\n            df[column] = encoder.fit_transform(df[column])\n    for column, new_", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "d", "ct", ",", " dict", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "d", "ct", " must", " be", " a", " dictionary", "\"", ")", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "if", " not", " all", "(", "is", "instance", "(", "column", ",", " str", ")", " for", " column", " in", " columns", "):", "\n", "            ", "raise", " Value", "Error", "(", "\"", "columns", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n", "        ", "if", " not", " all", "(", "column", " in", " df", ".", "columns", " for", " column", " in", " columns", "):", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Some", " column", " names", " provided", " in", " columns", " are", " missing", " from", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "for", " column", " in", " d", "ct", ".", "keys", "():", "\n", "        ", "if", " column", " not", " in", " df", ".", "columns", ":", "\n", "            ", "raise", " Value", "Error", "(", "f", "\"", "Column", " {", "column", "}", " not", " in", " df", " columns", "\"", ")", "\n", "    ", "columns", " =", " list", "(", "d", "ct", ".", "keys", "())", " if", " columns", " is", " None", " else", " columns", "\n", "    ", "if", " columns", ":", "\n", "        ", "encoder", " =", " Label", "Encoder", "()", "\n", "        ", "encoded", "_", "columns", " =", " [", "column", " for", " column", " in", " columns", " if", " df", "[", "column", "]", ".", "d", "type", " ==", " '", "object", "']", "\n", "        ", "for", " column", " in", " encoded", "_", "columns", ":", "\n", "            ", "df", "[", "column", "]", " =", " encoder", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "    ", "for", " column", ",", " new", "_"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -2.5278892517089844, -0.5742558240890503, -0.0015861323336139321, -0.049682315438985825, -0.5473660230636597, -0.024830978363752365, -0.003641167189925909, -0.5701267719268799, -0.0010768335778266191, -0.004156878218054771, -0.9321695566177368, -0.5657232403755188, -1.2183880805969238, -0.4543507397174835, -7.92710343375802e-05, -0.14422385394573212, -1.0013530300057027e-05, -0.0006515049026347697, -0.0084653589874506, -0.029111813753843307, -0.0017387047410011292, -0.0003780603874474764, -0.00564267672598362, -0.05772979184985161, -8.809178689261898e-05, -0.002626899629831314, -0.005485719535499811, -0.02068985626101494, -0.002557937288656831, -0.005292215384542942, -0.000972155889030546, -0.00813149381428957, -0.1515834629535675, -0.051363542675971985, -0.00015233787416946143, -0.0007098776986822486, -0.33081552386283875, -0.2146444320678711, -0.40690699219703674, -0.11871868371963501, -1.1972110271453857, -0.00014172980445437133, -0.46732673048973083, -0.004456113558262587, -0.001369610894471407, -0.8251016736030579, -0.11168523132801056, -2.3346073627471924, -0.12953607738018036, -0.03831060230731964, -0.0005657264264300466, -0.0011593532981351018, -1.6389179229736328, -0.007217760663479567, -0.0027765792328864336, -2.6702524337451905e-05, -0.005314626730978489, -0.00016056202002801, -3.242440288886428e-05, -0.0032563775312155485, -0.002959873527288437, -0.0030636300798505545, -0.0013716346584260464, -0.008121206425130367, -0.18270626664161682, -3.933898824470816e-06, -0.00723267300054431, -0.016768457368016243, -0.25236639380455017, -0.04258279502391815, -0.010981363244354725, -0.021812302991747856, -0.017533188685774803, -0.020302578806877136, -0.35218533873558044, -0.0378512404859066, -8.141662692651153e-05, -0.0009166568052023649, -0.2906929850578308, -1.6905367374420166, -0.3626423180103302, -0.21950066089630127, -0.002414408838376403, -0.020470190793275833, -0.004463115707039833, -0.009381613694131374, -0.006275827530771494, -0.00280213775113225, -0.002749593462795019, -4.8636207793606445e-05, -2.2291887944447808e-05, -0.003262912854552269, -0.0006281548412516713, -0.00445623230189085, -0.0005384425749070942, -0.019743353128433228, -0.008469141088426113, -0.0002033503697020933, -0.003110334975644946, -0.4068138003349304, -1.9564290046691895, -1.610512614250183, -0.24016936123371124, -3.5892269611358643, -1.1316196918487549, -0.1791856586933136, -0.417867511510849, -2.7373712062835693, -0.9925904273986816, -0.8610120415687561, -0.3026459217071533, -0.001961809117347002, -1.6812660694122314, -0.04410673305392265, -0.0005497612874023616, -0.002258965978398919, -0.9924396276473999, -1.6620376110076904, -1.1220686435699463, -0.3775933086872101, -0.644759476184845, -0.0014129426563158631, -1.1321905851364136, -0.011488472111523151, -0.003859097370877862, -0.008978943340480328, -0.0013141338713467121, -0.025197792798280716, -0.14283818006515503, -0.05759970843791962, -2.5987286790041253e-05, -0.012001920491456985, -0.014873212203383446, -0.0014698426239192486, -0.01194243598729372, -0.0022439793683588505, -0.001493292162194848, -0.02649933286011219, -0.02461187355220318, -1.0132738680113107e-05, -0.0045365747064352036, -0.3662685453891754, -0.026361754164099693, -0.8903483152389526, -0.584589421749115, -0.0019355150870978832, -0.013394254259765148, -0.8530919551849365, -1.4220513105392456, -1.8322057723999023, -2.5093801021575928, -0.8575302958488464, -0.00043561504571698606, -0.0018054627580568194, -0.3532828688621521, -3.4634225368499756, -0.26459571719169617, -1.9075405597686768, -0.002272525103762746, -0.6675411462783813, -0.0011982887517660856, -0.009803364053368568, -0.006194913759827614, -0.031838394701480865, -0.07053340971469879, -0.015097633004188538, -0.0021772508043795824, -0.00016008525562938303, -0.0005840741214342415, -0.029470231384038925, -0.007974334992468357, -0.09345532208681107, -3.982558250427246, -1.4974172115325928, -0.2875836491584778, -0.011496132239699364, -0.0010623055277392268, -3.691587448120117, -0.008629413321614265, -0.02912767603993416, -7.486063259420916e-05, -0.00453562568873167, -0.09886303544044495, -0.003908021375536919, -3.5494375228881836, -0.12417222559452057, -1.2339580059051514, -0.0040397001430392265, -0.7816205024719238, -1.0917788743972778, -0.015489397570490837, -0.0013155624037608504, -0.0008033862104639411, -0.1155226081609726, -0.02784961275756359, -0.13237690925598145, -0.004293153528124094, -0.002635579090565443, -6.758938252460212e-05, -0.00010907054820563644, -0.01589227095246315, -0.12227058410644531, -0.1489109843969345, -0.3915325105190277, -0.07342270016670227, -0.005801387131214142, -0.0022436226718127728, -0.00711786700412631, -1.2936973571777344, -0.15921549499034882, -0.003937350586056709, -0.06434085220098495, -1.2159273865108844e-05, -1.2040065485052764e-05, -0.00019214690837543458, -0.0018245016690343618, -0.0008470999309793115, -0.4127420485019684, -0.03373797982931137, -0.0026026444975286722, -0.0013390155509114265, -0.006248936057090759, -0.0043434808030724525, -4.2914423829643056e-05, -0.014193302020430565, -0.001788208493962884, -0.00014029949670657516, -0.0022348209749907255, -0.004033644683659077, -0.0006224363460205495, -0.00038342276820912957, -0.023726701736450195, -0.004216115456074476, -0.22825314104557037, -0.9414921402931213, -0.09841576218605042, -1.6171754598617554, -0.6647612452507019, -0.009721791371703148], "finish_reason": "length"}], "metrics": {"energy": 373.05599249458305, "energy_per_token": 1.457249970681965, "time": 12.742731, "time_per_token": 0.04977629296875}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Expected pandas.DataFrame, but got {type(df).__name__}.\")\n    df = df.copy()  # Ensure original DataFrame is not modified\n    if not dct:\n        return df\n    if not columns:  # Encode all object columns\n        columns = df.select_dtypes(include=[\"object\"]).columns\n    for col in columns:\n        if col in dct:\n            df[col] = df[col].map(dct)\n        else:\n            df[col] = LabelEncoder().fit_transform(df[col])\n    return df.select_dtypes(include=[\"number\"]).apply(lambda x: (x - x.mean()) / x.std())", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Expected", " pandas", ".", "DataFrame", ",", " but", " got", " {", "type", "(", "df", ")", ".", "__", "name", "__", "}", ".", "\"", ")", "\n", "    ", "df", " =", " df", ".", "copy", "()", "  ", "#", " Ensure", " original", " Data", "Frame", " is", " not", " modified", "\n", "    ", "if", " not", " d", "ct", ":", "\n", "        ", "return", " df", "\n", "    ", "if", " not", " columns", ":", "  ", "#", " Enc", "ode", " all", " object", " columns", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "object", "\"", "])", ".", "columns", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "if", " col", " in", " d", "ct", ":", "\n", "            ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "map", "(", "d", "ct", ")", "\n", "        ", "else", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "return", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "number", "\"", "])", ".", "apply", "(", "lambda", " x", ":", " (", "x", " -", " x", ".", "mean", "())", " /", " x", ".", "std", "())", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -2.358222007751465, -0.17250055074691772, -2.472511053085327, -2.567300319671631, -1.2363603115081787, -0.010998695157468319, -0.4007711708545685, -1.2242214679718018, -0.5082947015762329, -0.06600232422351837, -0.03094145655632019, -0.00016366096679121256, -0.002431533532217145, -2.1731789112091064, -0.0009317824151366949, -0.000454799213912338, -0.002674457151442766, -0.0003000047872774303, -0.4927501380443573, -0.30225953459739685, -0.04649503529071808, -0.0037981767673045397, -0.004734852351248264, -0.9998725652694702, -2.501638412475586, -0.5754201412200928, -0.02411847561597824, -0.005688194651156664, -0.08050711452960968, -0.014050728641450405, -2.1013100147247314, -0.0006079017766751349, -3.3082826137542725, -2.11014986038208, -0.9030295014381409, -0.001157805323600769, -0.5395841598510742, -0.08334682136774063, -0.37512341141700745, -0.1410917192697525, -0.866730272769928, -0.6447545289993286, -3.015793800354004, -1.9953012466430664, -5.5549986427649856e-05, -0.12142515182495117, -0.06964762508869171, -0.000753357307985425, -0.35498207807540894, -0.015289836563169956, -0.08157068490982056, -0.3132891058921814, -0.5762946605682373, -1.3999391794204712, -0.1348280906677246, -0.007690465077757835, -2.778611898422241, -0.00011789103882620111, -1.9133607149124146, -0.06764610856771469, -0.0619538314640522, -0.37953585386276245, -1.6187411546707153, -1.353682518005371, -0.0002786724944598973, -0.295587956905365, -0.006112808361649513, -0.7977957725524902, -0.03916989639401436, -0.07658373564481735, -8.34461570775602e-06, -0.0001677133986959234, -0.000569300667848438, -0.20759126543998718, -0.10801628232002258, -1.7257544994354248, -0.04468841105699539, -0.062200307846069336, -2.074220174108632e-05, -0.021108383312821388, -0.0025615044869482517, -0.0022971450816839933, -0.20886573195457458, -0.08112791180610657, -0.6065561175346375, -0.36324891448020935, -0.027008380740880966, -0.008108554407954216, -0.0009896624833345413, -0.05328090861439705, -0.00032908268622122705, -1.682343602180481, -0.5104552507400513, -0.3212786018848419, -0.33953994512557983, -0.0006764031131751835, -0.2543206512928009, -0.2060178518295288, -0.0004477690381463617, -0.14296847581863403, -0.049303267151117325, -0.0007800396997481585, -0.0007877822499722242, -0.23978225886821747, -0.180166557431221, -0.0024096521083265543, -8.642300235806033e-05, -1.549708758830093e-05, -8.308542601298541e-05, -0.8435835838317871, -0.012723341584205627, -0.045720599591732025, -1.9073304429184645e-05, -0.3800705075263977, -0.11349695175886154, -1.1784327030181885, -0.22864870727062225, -1.4305012882687151e-05, -0.04320235177874565, -0.00032240914879366755, -0.33658239245414734, -0.008711785078048706, -0.00010418349120300263, -0.0002728328399825841, -0.015512637794017792, -0.42920973896980286, -3.313963316031732e-05, -0.0030525776091963053, -0.00012754580529872328, -0.00040344204171560705, -0.012466481886804104, -0.00019476900342851877, -0.00028868322260677814, -0.00527632562443614, -0.0005411829333752394, -6.401333666872233e-05, -0.020898383110761642, -0.0741371363401413, -0.07858211547136307, -1.8825531005859375, -0.051668792963027954, -0.09924005717039108, -2.019987106323242, -0.0003678122302517295, -0.0007419217727147043, -0.003277646377682686, -0.06753011792898178, -0.23481547832489014, -0.26718753576278687, -0.04101557284593582, -0.4240613281726837, -3.397406908334233e-05, -0.00849597342312336, -0.024905631318688393, -0.18545308709144592, -0.0038244216702878475, -0.4379003643989563, -0.08597154915332794, -0.00023993951617740095, -0.17087242007255554, -0.0010656398953869939, -0.05292583629488945, -0.013038027100265026, -3.3854863431770355e-05, -0.0016989572905004025, -0.008427178487181664, -0.0006562701892107725, -0.02250337228178978, -2.5033637939486653e-05, -0.00014161060971673578, -0.06717149168252945, -0.8621755242347717, -3.576278118089249e-07, -7.152555099310121e-07, -5.447716102935374e-05, -0.0002548369811847806, -0.059265218675136566], "finish_reason": "stop"}], "metrics": {"energy": 304.84693979835527, "energy_per_token": 1.5795178227894056, "time": 9.625017, "time_per_token": 0.049870554404145076}}
{"outputs": [{"text": "if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame\")\n\n    # Encoding categorical columns\n    if columns is None:\n        for col in df.columns:\n            if pd.api.types.is_object_dtype(df[col]):\n                df[col] = LabelEncoder().fit_transform(df[col])\n    else:\n        for col in columns:\n            if pd.api.types.is_object_dtype(df[col]):\n                df[col] = LabelEncoder().fit_transform(df[col])\n\n    # Numerical standardization\n    df = (df - df.mean()) / df.std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "core", ".", "frame", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Enc", "oding", " categorical", " columns", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "for", " col", " in", " df", ".", "columns", ":", "\n", "            ", "if", " pd", ".", "api", ".", "types", ".", "is", "_", "object", "_", "d", "type", "(", "df", "[", "col", "]", "):", "\n", "                ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "else", ":", "\n", "        ", "for", " col", " in", " columns", ":", "\n", "            ", "if", " pd", ".", "api", ".", "types", ".", "is", "_", "object", "_", "d", "type", "(", "df", "[", "col", "]", "):", "\n", "                ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " N", "umerical", " standard", "ization", "\n", "    ", "df", " =", " (", "df", " -", " df", ".", "mean", "())", " /", " df", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -2.9282093048095703, -1.847726889536716e-05, -0.047568898648023605, -0.0016346914926543832, -0.0021145620848983526, -0.007020922377705574, -0.00805120263248682, -0.002639859216287732, -0.023115107789635658, -0.021705107763409615, -5.8410845667822286e-05, -0.1574423462152481, -0.13686394691467285, -0.3620719611644745, -2.0189223289489746, -1.263561487197876, -0.0010680215200409293, -0.07169119268655777, -0.3365727663040161, -0.03364081308245659, -0.0038526849821209908, -1.4210600852966309, -0.0012475810945034027, -0.005127375479787588, -0.39054378867149353, -0.000754786713514477, -1.5718538761138916, -2.493704080581665, -1.3610658645629883, -0.11073838919401169, -0.3152718245983124, -0.33991169929504395, -0.0025684009306132793, -0.08094696700572968, -0.042489342391490936, -0.08512473851442337, -0.11645304411649704, -0.04542901739478111, -0.017274633049964905, -0.00035339308669790626, -1.802828073501587, -0.29164987802505493, -0.09860556572675705, -0.00832314882427454, -0.026333771646022797, -0.47651204466819763, -0.014130068942904472, -0.003968222998082638, -0.000668659748043865, -0.05120929703116417, -3.0965287685394287, -7.533743337262422e-05, -0.005244663450866938, -9.179073458653875e-06, -0.0005896736984141171, -7.033323527139146e-06, -0.0010967198759317398, -0.0011859057703986764, -0.2069506049156189, -0.0332183912396431, -0.0007095203618519008, -0.00026472879108041525, -6.985420623095706e-05, -0.0020353333093225956, -0.0024597172159701586, -0.00011073929636040702, -0.022166233509778976, -0.00482917157933116, -0.006855301558971405, -0.000750736624468118, -0.3843629062175751, -0.0074321916326880455, -0.00011419598013162613, -0.0006225554971024394, -0.0034107151441276073, -0.09446009248495102, -4.565611743601039e-05, -0.0016000575851649046, -0.00013398226292338222, -0.0015687552513554692, -0.00368131254799664, -0.00017128908075392246, -0.00021407696476671845, -0.0037478222511708736, -0.0002420847595203668, -2.288792165927589e-05, -0.018028205260634422, -0.005648958962410688, -0.0576658770442009, -0.0581476129591465, -1.7404405298293568e-05, -0.0022966694086790085, -0.00027807659353129566, -0.02702520601451397, -0.021663695573806763, -0.0021287179552018642, -0.007969723083078861, -0.00029976642690598965, -0.0004998388467356563, -0.00038628268521279097, -0.18762147426605225, -0.02273191511631012, -0.00022825974156148732, -0.00029523781267926097, -1.1920928244535389e-07, -7.867782187531702e-06, -3.3378546504536644e-06, -3.71926071238704e-05, -0.00038389943074434996, -0.00034731553751043975, -7.998623186722398e-05, -5.3881147323409095e-05, -0.0017377528129145503, -2.5510462364763953e-05, -0.00032634177478030324, -0.00039915222441777587, -0.00018010901112575084, -0.0013447299133986235, -5.543078441405669e-05, -0.0009597701136954129, -0.00020239688456058502, -0.0040312702767550945, -0.0004963834653608501, -3.421248038648628e-05, -5.6622808187967166e-05, -0.001597320195287466, -0.0008717550663277507, -6.4490144723095e-05, -0.0002598424907773733, -9.262132516596466e-05, -0.0009110590908676386, -0.0006885541952215135, -1.8596476365928538e-05, -4.708655978902243e-05, -0.00024041623692028224, -9.941560711013153e-05, -7.855583680793643e-05, -0.00014494798961095512, -0.00042763148667290807, -0.03211560845375061, -0.003484370419755578, -0.016733406111598015, -0.9576225280761719, -0.0007802779437042773, -0.0429905466735363, -0.008627167902886868, -0.030879735946655273, -0.0019393223337829113, -1.3878928422927856, -0.7511025667190552, -1.33851957321167, -0.011567426845431328, -0.01866491511464119, -0.01596595160663128, -0.0004642124113161117, -0.01033561211079359, -0.04020550101995468, -0.001623861026018858, -0.025775935500860214, -8.248942322097719e-05, -0.00015066919149830937, -0.008542188443243504, -0.029851892963051796, -0.1930600255727768, -0.0004245333548169583, -1.2669605016708374, -0.004758937284350395, -0.7570524215698242, -0.008149821311235428, -0.8529252409934998], "finish_reason": "stop"}], "metrics": {"energy": 293.9734274902344, "energy_per_token": 1.651536109495699, "time": 9.399315, "time_per_token": 0.0528051404494382}}
{"outputs": [{"text": "# Checking if df is a pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n\n    # Checking if dct is a dictionary\n    if not isinstance(dct, dict):\n        raise ValueError(\"Input dct must be a dictionary.\")\n\n    # Checking if dct is empty\n    if not dct:\n        raise ValueError(\"Input dct is empty.\")\n\n    # Checking if df has columns specified by columns\n    if columns is not None:\n        for column in columns:\n            if column not in df.columns:\n                raise ValueError(f\"{column} is not a column of df.\")\n\n    # Checking if df contains categorical attributes\n    if not any(pd.api.types.is_object_dtype(column) for column in df.columns):\n        raise ValueError(\"df does not contain categorical attributes.\")\n\n    # Checking if df contains numerical attributes\n    if not all(pd.api.types.is_numeric_dtype(", "tokens": ["#", " Check", "ing", " if", " df", " is", " a", " pandas", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " d", "ct", " is", " a", " dictionary", "\n", "    ", "if", " not", " isinstance", "(", "d", "ct", ",", " dict", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " d", "ct", " must", " be", " a", " dictionary", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " d", "ct", " is", " empty", "\n", "    ", "if", " not", " d", "ct", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " d", "ct", " is", " empty", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " df", " has", " columns", " specified", " by", " columns", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "for", " column", " in", " columns", ":", "\n", "            ", "if", " column", " not", " in", " df", ".", "columns", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "{", "column", "}", " is", " not", " a", " column", " of", " df", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " df", " contains", " categorical", " attributes", "\n", "    ", "if", " not", " any", "(", "pd", ".", "api", ".", "types", ".", "is", "_", "object", "_", "d", "type", "(", "column", ")", " for", " column", " in", " df", ".", "columns", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "df", " does", " not", " contain", " categorical", " attributes", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", "ing", " if", " df", " contains", " numerical", " attributes", "\n", "    ", "if", " not", " all", "(", "pd", ".", "api", ".", "types", ".", "is", "_", "numeric", "_", "d", "type", "("], "logprobs": [-2.3783953189849854, -1.0152636766433716, -1.6499390602111816, -1.1928350925445557, -1.839065670967102, -0.030162625014781952, -0.2069006860256195, -2.037562847137451, -0.09879413992166519, -0.016128428280353546, -0.3439384698867798, -0.003067908575758338, -0.016737274825572968, -0.06215852499008179, -0.008382611908018589, -0.00012206286191940308, -0.002703465986996889, -9.83428253675811e-05, -0.009548233821988106, -1.6093124941107817e-05, -0.08098390698432922, -0.0019614521879702806, -0.0013987767742946744, -0.0020302177872508764, -0.017843320965766907, -0.012914235703647137, -3.158996332786046e-05, -0.10783232748508453, -0.10745927691459656, -0.4603962302207947, -0.7056456804275513, -0.9080900549888611, -0.0014186566695570946, -0.02129499986767769, -0.07856977730989456, -0.00991054531186819, -0.0047227502800524235, -0.3658719062805176, -0.010914036072790623, -0.0005225961795076728, -0.003416417632251978, -0.1726316660642624, -0.0009995469590649009, -0.13376463949680328, -1.0350861549377441, -0.01616244576871395, -0.09660743921995163, -0.5022202730178833, -0.003012406872585416, -0.03517267480492592, -0.04709409177303314, -0.31458473205566406, -0.12729999423027039, -0.00027450130437500775, -0.011394896544516087, -0.0023457887582480907, -0.0037638552021235228, -0.00014232576359063387, -0.00031680811662226915, -4.172316494077677e-06, -7.176141662057489e-05, -0.0010620674584060907, -0.006774079520255327, -0.001007645158097148, -0.0003457663697190583, -0.005214068107306957, -0.039837393909692764, -6.544376083184034e-05, -0.0010124086402356625, -0.0033902807626873255, -0.35931605100631714, -0.023415710777044296, -0.000661631056573242, -0.005563252605497837, -0.0007124984404072165, -0.002610729541629553, -0.009531702846288681, -0.029344290494918823, -0.003146223723888397, -0.0001134808044298552, -0.0005036516231484711, -0.011340326629579067, -0.0006771179032512009, -0.17018727958202362, -0.5390248894691467, -0.0077939690090715885, -0.056630294770002365, -3.0004994869232178, -0.003065412864089012, -1.2950257062911987, -0.5508442521095276, -0.054154202342033386, -0.00024244230007752776, -0.004141801502555609, -0.32217979431152344, -0.03006036952137947, -2.5748875486897305e-05, -0.00695676077157259, -0.0024597172159701586, -0.00020323118951637298, -0.10971256345510483, -0.00505538284778595, -4.649054244509898e-05, -0.0011031500762328506, -0.004149992950260639, -0.46400269865989685, -0.05096995085477829, -0.00011276562872808427, -2.2419629096984863, -0.01304873451590538, -0.03751453012228012, -0.05788922309875488, -0.00011538793478393927, -0.00020811776630580425, -0.0037822630256414413, -0.0005884823040105402, -0.10461334139108658, -0.36975499987602234, -0.0022807319182902575, -0.0501222163438797, -2.968804121017456, -1.0150645971298218, -1.1598434448242188, -2.1128714084625244, -1.5101542472839355, -0.4721679389476776, -0.2060062140226364, -0.0009934734553098679, -0.06242533028125763, -0.035644084215164185, -0.3412303626537323, -0.15685850381851196, -1.0371154530730564e-05, -0.06478676199913025, -0.001660517300479114, -0.0019171921303495765, -1.2986259460449219, -1.2192132472991943, -0.019306832924485207, -0.01227550208568573, -0.00019405389321036637, -0.001335682114586234, -0.0008498394163325429, -0.016227778047323227, -0.12827448546886444, -0.0019394413102418184, -7.152531907195225e-06, -0.003123882692307234, -0.12209482491016388, -0.0025417660363018513, -0.0009556017466820776, -0.0012261499650776386, -0.00033778208307921886, -0.005982350558042526, -0.03381231427192688, -1.5020257706055418e-05, -0.0037935450673103333, -0.2416548728942871, -0.018498988822102547, -1.924973964691162, -0.006755015812814236, -0.0026742194313555956, -0.218299001455307, -0.005804942920804024, -0.19516688585281372, -0.2569734752178192, -2.102926015853882, -0.24420525133609772, -0.05325287953019142, -0.017861003056168556, -0.0001746263587847352, -0.0017175221582874656, -0.10308077186346054, -0.01402592658996582, -0.12912452220916748, -1.3891417980194092, -0.007168051786720753, -0.11643214523792267, -1.022264003753662, -2.324411392211914, -1.2657935619354248, -1.761509895324707, -0.2500712275505066, -0.0020987405441701412, -0.9053941965103149, -1.233555793762207, -1.5199732780456543, -0.11322437971830368, -2.241861581802368, -0.0006479309522546828, -0.023869531229138374, -0.00022432672267314047, -0.0010096696205437183, -7.867782187531702e-06, -0.001001571537926793, -0.0007501410436816514, -1.543764352798462, -0.013210627250373363, -0.000427274004323408, -0.00018749863374978304, -0.0006463822210207582, -2.728555917739868, -0.0057900091633200645, -0.027686363086104393, -0.0006017066189087927, -0.0003358753747306764, -0.015080137178301811, -0.0266204085201025, -0.030599750578403473, -0.26907989382743835, -0.00293717160820961, -0.001354134758003056, -0.5810639262199402, -0.024843420833349228, -2.3841574147809297e-05, -0.0033648558892309666, -0.07879257947206497, -0.3257918059825897, -0.35796621441841125, -0.001061471994034946, -0.031705476343631744, -0.0664283037185669, -0.01789671741425991, -0.017818260937929153, -0.013501285575330257, -0.0003530356043484062, -0.0005614373367279768, -0.012685911729931831, -0.0007514513563364744, -0.05974382534623146, -0.44920238852500916, -0.0009763241396285594, -0.018880533054471016, -0.17956207692623138, -0.11124802380800247, -0.14787393808364868, -0.04122825339436531, -0.02483469992876053, -0.00029237763374112546, -0.03272080048918724, -0.14045371115207672, -1.8856128454208374, -0.010341629385948181, -0.0522889718413353, -0.0005276002921164036, -0.004282470792531967, -1.1920928244535389e-07, -0.0010122895473614335, -1.7881377516459906e-06, -0.0007228621980175376, -0.16662727296352386, -0.04174712672829628, -0.001600771676748991, -0.0002559096028562635, -0.00014709345123264939, -0.00016485285595990717], "finish_reason": "length"}], "metrics": {"energy": 374.1337133598326, "energy_per_token": 1.461459817811846, "time": 12.897574, "time_per_token": 0.0503811484375}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    if columns is None:\n        columns = df.select_dtypes(include=[\"object\"]).columns\n    df[columns].replace(dct, inplace=True)\n    df[columns] = df[columns].apply(LabelEncoder().fit_transform)\n    df[columns].subtract(df[columns].mean()).div(df[columns].std())\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "object", "\"", "])", ".", "columns", "\n", "    ", "df", "[", "columns", "]", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "df", "[", "columns", "]", ".", "sub", "t", "ract", "(", "df", "[", "columns", "]", ".", "mean", "())", ".", "div", "(", "df", "[", "columns", "]", ".", "std", "())", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -1.8019359111785889, -0.0010790961096063256, -0.05139604210853577, -0.6796641945838928, -0.03528810292482376, -0.006554177962243557, -0.4617933928966522, -0.006941015832126141, -0.0013006808003410697, -0.0038484097458422184, -1.2780625820159912, -0.614794135093689, -0.3524473309516907, -0.09945075213909149, -0.1817600578069687, -0.006397956050932407, -0.023205729201436043, -0.0005633435794152319, -0.31200042366981506, -0.009798052720725536, -0.2922186851501465, -0.016614291816949844, -0.0975911095738411, -8.4638240878121e-06, -0.00010525626566959545, -0.0002469711471349001, -0.10152710974216461, -0.16623666882514954, -1.6244491338729858, -0.05471460521221161, -0.08054747432470322, -0.00013267113536130637, -0.0377938486635685, -0.004195697605609894, -0.001597201102413237, -0.35000938177108765, -0.11349812150001526, -1.05747389793396, -0.5813166499137878, -0.006049062591046095, -0.0016749175265431404, -2.3713901042938232, -0.4789709150791168, -0.003546379506587982, -0.02940031699836254, -4.732496745418757e-05, -0.020365187898278236, -0.0029986200388520956, -0.0001062098381225951, -0.0028449322562664747, -0.0016777737764641643, -0.007148995995521545, -0.03090296871960163, -0.011610908433794975, -0.7447445392608643, -0.08736856281757355, -0.002983050188049674, -0.002071617403998971, -0.17410661280155182, -0.7764624357223511, -0.002273833379149437, -0.0007987407734617591, -0.0004440752090886235, -0.0016245751176029444, -0.38370418548583984, -0.0012428186601027846, -0.2875630855560303, -3.2543604902457446e-05, -0.0036196685396134853, -0.000120751719805412, -0.0030739696230739355, -0.0008875959902070463, -0.00015436411194968969, -0.012308119796216488, -0.019654521718621254, -0.00830872543156147, -0.16248168051242828, -0.2796506881713867, -0.01645072177052498, -0.00408101687207818, -0.1556776762008667, -1.0697201490402222, -0.3752969801425934, -0.031165650114417076, -0.06996691226959229, -0.03357453644275665, -0.002420830773189664, -0.00026127262390218675, -0.00017581824795342982, -9.297892393078655e-05, -0.006220503710210323, -0.316020131111145, -0.0833636000752449, -0.018575986847281456, -1.9727174043655396, -0.014785826206207275, -0.002022127853706479, -0.00014840454969089478, -0.0002733095607254654, -7.795983401592821e-05, -0.0005796659388579428, -0.10055560618638992, -0.4338163137435913, -0.031554289162158966, -0.01634037122130394, -0.0018540113233029842, -1.2337608337402344, -4.768370445162873e-07, -8.344646857949556e-07, -2.7179348762729205e-05, -0.0004601611872203648, -0.06774236261844635], "finish_reason": "stop"}], "metrics": {"energy": 191.70055212020873, "energy_per_token": 1.4746196316939133, "time": 6.2824683, "time_per_token": 0.04832667923076923}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame\")\n\n    if columns is None:\n        columns = [c for c in df.columns if df[c].dtypes == object]\n    df[columns] = df[columns].apply(lambda x: pd.Series(LabelEncoder().fit_transform(x)))\n    df[columns] = df[columns].astype(float).std()\n    return df[columns]", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " [", "c", " for", " c", " in", " df", ".", "columns", " if", " df", "[", "c", "]", ".", "d", "types", " ==", " object", "]", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "lambda", " x", ":", " pd", ".", "Series", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "x", ")))", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "ast", "ype", "(", "float", ")", ".", "std", "()", "\n", "    ", "return", " df", "[", "columns", "]", "\n", "\n", "def"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -0.9022796154022217, -0.9773439168930054, -0.0011400636285543442, -0.04461009055376053, -0.4853183925151825, -0.019024640321731567, -0.003735946025699377, -1.3033658266067505, -0.0009734659106470644, -0.006235312204807997, -0.4253455400466919, -0.0006438804557546973, -0.7884119749069214, -0.19770513474941254, -0.09178841859102249, -0.10554947704076767, -0.005315457005053759, -0.020457811653614044, -0.0006304183625616133, -0.4518221318721771, -0.0091978395357728, -1.6078016757965088, -0.9030588865280151, -0.0060748932883143425, -0.000522357877343893, -0.013465531170368195, -0.012051742523908615, -0.021310171112418175, -0.08695676922798157, -0.007787463255226612, -0.02554425224661827, -0.015287253074347973, -0.0007120219524949789, -1.7046782886609435e-05, -3.933898824470816e-06, -0.0025909922551363707, -1.2971998453140259, -0.03609469160437584, -1.4908592700958252, -0.003524997504428029, -0.012981899082660675, -1.4662389755249023, -1.7536005973815918, -0.5861827731132507, -0.0020656692795455456, -0.001408776268362999, -0.04240148141980171, -0.11026500910520554, -0.002654958749189973, -0.000310730334604159, -0.00010299152199877426, -0.0013256819220259786, -0.29372620582580566, -0.003843184793367982, -1.0492396354675293, -0.1022602766752243, -0.00031120702624320984, -1.4980626106262207, -0.0019991665612906218, -0.16916300356388092, -0.01511477679014206, -0.4467405676841736, -5.411955135059543e-05, -0.002471489831805229, -0.0003420721332076937, -0.017441818490624428, -0.007125205360352993, -0.0004895919119007885, -0.002054605633020401, -0.05040166527032852, -0.5090945363044739, -0.011151134967803955, -0.21102213859558105, -0.20444819331169128, -0.3513137996196747, -0.048425499349832535, -0.008621258661150932, -1.43049955368042, -0.34861451387405396, -0.003529392648488283, -0.0003685271949507296, -0.000910225382540375, -0.0005670370301231742, -2.422732353210449, -0.0001003691868390888, -0.32586097717285156, -0.9564405083656311, -0.007201309781521559, -2.6229655742645264, -1.4558976888656616, -0.1946156620979309, -0.5935999155044556, -0.10979310423135757, -2.6470398902893066, -0.023844972252845764, -0.8955027461051941, -0.08126761019229889, -0.2922743856906891, -0.7323405742645264, -0.019911527633666992, -0.9637596011161804], "finish_reason": "stop"}], "metrics": {"energy": 200.60513068389884, "energy_per_token": 1.6857574007050322, "time": 6.275376, "time_per_token": 0.05273425210084033}}
{"outputs": [{"text": "if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    # Convert df to a Pandas DataFrame if it's not already\n    if not isinstance(df, pd.DataFrame):\n        df = pd.DataFrame(df)\n\n    # Replace values in the DataFrame using the dictionary\n    for old, new in dct.items():\n        df.loc[df[columns].isin(old)] = new\n\n    # Encode categorical columns using the LabelEncoder\n    if columns is not None:\n        df[columns] = LabelEncoder().fit_transform(df[columns])\n    else:\n        df[df.columns] = LabelEncoder().fit_transform(df[df.dtypes == object])\n\n    # Standardize numerical attributes using the mean and standard deviation\n    for col in columns:\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "core", ".", "frame", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " Data", "Frame", "\"", ")", "\n", "    ", "#", " Convert", " df", " to", " a", " Pand", "as", " Data", "Frame", " if", " it", "'", "s", " not", " already", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "df", " =", " pd", ".", "DataFrame", "(", "df", ")", "\n", "\n", "    ", "#", " Replace", " values", " in", " the", " Data", "Frame", " using", " the", " dictionary", "\n", "    ", "for", " old", ",", " new", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", ".", "loc", "[", "df", "[", "columns", "]", ".", "isin", "(", "old", ")]", " =", " new", "\n", "\n", "    ", "#", " Enc", "ode", " categorical", " columns", " using", " the", " Label", "Encoder", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "df", "[", "columns", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "columns", "])", "\n", "    ", "else", ":", "\n", "        ", "df", "[", "df", ".", "columns", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "df", ".", "d", "types", " ==", " object", "])", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " attributes", " using", " the", " mean", " and", " standard", " deviation", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -2.9282093048095703, -1.847726889536716e-05, -0.047568898648023605, -0.0016346914926543832, -0.0021145620848983526, -0.007020922377705574, -0.00805120263248682, -0.002639859216287732, -0.023115107789635658, -0.021705107763409615, -5.8410845667822286e-05, -0.1574423462152481, -0.13686394691467285, -0.3620719611644745, -0.9443849325180054, -0.7687029242515564, -0.008615703321993351, -0.027087511494755745, -0.16563157737255096, -0.006492592394351959, -1.3202812671661377, -0.0012192443246021867, -0.004301106557250023, -0.9307147264480591, -2.4188365936279297, -4.346312522888184, -2.6854958534240723, -0.20972807705402374, -0.5509248375892639, -2.0190157890319824, -8.749579137656838e-05, -0.1865503340959549, -0.01075684279203415, -3.255052089691162, -0.39569273591041565, -0.8773695826530457, -0.0020783983636647463, -0.29305389523506165, -0.05836151912808418, -1.5861594676971436, -0.008110091090202332, -1.2375187873840332, -0.10959003120660782, -0.003316618502140045, -0.00011598391574807465, -0.005482873879373074, -0.0003010773507412523, -0.005386007949709892, -0.0003685271949507296, -2.36790132522583, -0.0025719678960740566, -0.0029145879670977592, -0.002086368855088949, -0.032172635197639465, -0.003584271762520075, -0.018790453672409058, -0.0005292683490552008, -0.0025134659372270107, -0.0037839256692677736, -0.010046628303825855, -0.024006756022572517, -0.0058569712564349174, -0.6097813844680786, -0.001049920916557312, -0.3530433773994446, -1.2526025772094727, -0.28501269221305847, -0.19185763597488403, -0.7677938938140869, -0.1528567224740982, -0.0007298904820345342, -1.2518982887268066, -0.398559033870697, -0.6144851446151733, -0.25690874457359314, -0.0014666287461295724, -0.45473089814186096, -0.986378014087677, -0.7236572504043579, -0.0040893275290727615, -0.0016972911544144154, -0.003618955845013261, -2.658331868587993e-05, -0.00037543877260759473, -0.00031728477915748954, -0.00019596086349338293, -0.004420390352606773, -0.0008233971311710775, -0.032332271337509155, -0.6966187357902527, -0.3776609003543854, -0.02083790861070156, -0.011715774424374104, -0.11976069211959839, -0.03267984464764595, -0.03149445727467537, -1.1121978759765625, -0.08772701025009155, -1.691335916519165, -0.410775750875473, -0.9588196277618408, -0.006317052058875561, -0.0603555366396904, -0.01220084261149168, -0.10330011695623398, -0.0028819001745432615, -0.05320834368467331, -0.08187641203403473, -0.027561355382204056, -0.06072850897908211, -0.1794126331806183, -0.4990136921405792, -1.394334316253662, -0.03763645887374878, -0.00699523463845253, -0.22025375068187714, -0.003328737337142229, -0.3547535240650177, -0.061590731143951416, -0.2778224050998688, -1.9273724555969238, -3.886147169396281e-05, -0.006027734372764826, -0.012356631457805634, -0.0009232072625309229, -1.567691445350647, -0.19357801973819733, -0.004238076042383909, -0.00219818577170372, -0.05063944309949875, -1.4249346256256104, -0.00010442188795423135, -0.0025613855104893446, -0.000486970558995381, -0.00222090445458889, -0.014733202755451202, -0.00010013079008786008, -0.0006749735912308097, -0.025728881359100342, -0.0024945589248090982, -0.000458254711702466, -0.013477174565196037, -0.007471475284546614, -0.7995750308036804, -0.05061904713511467, -3.755022044060752e-05, -0.004014529287815094, -0.0007205988513305783, -0.3329014182090759, -0.5418932437896729, -0.2957536578178406, -0.012323662638664246, -1.845528483390808, -1.8004469871520996, -0.021482864394783974, -0.008023767732083797, -0.0013335392577573657, -0.0003135904553346336, -0.0002454218047205359, -0.0025316590908914804, -0.015362270176410675, -2.396077979938127e-05, -0.0009759668610058725, -0.005614819936454296, -0.15238843858242035, -0.023433411493897438, -0.0002910667099058628, -1.8377399444580078, -0.006501238327473402, -0.014719577506184578, -0.8136299252510071, -0.07978390157222748, -0.007978711277246475, -0.06853422522544861, -0.002784187439829111, -0.018226049840450287, -0.14026641845703125, -0.010058548301458359, -0.07249855995178223, -2.1242454051971436, -1.5382540225982666, -0.3618853688240051, -0.5854271054267883, -0.052478231489658356, -0.04597565904259682, -0.006634352263063192, -0.2849346101284027, -0.001786899520084262, -1.6262085437774658, -0.3259597718715668, -0.017605459317564964, -1.6391007900238037, -0.13058844208717346, -0.006769816856831312, -0.0020886289421468973, -0.4558107852935791, -0.011407861486077309, -0.0032888154964894056, -0.0019232601625844836, -0.030269842594861984, -0.035824213176965714, -0.002281088614836335, -0.0011936451774090528, -0.0016149348812177777, -0.005120733752846718, -0.0015936305280774832, -0.04525710642337799, -0.008459330536425114, -0.0016509962733834982, -0.00017653337272349745, -1.0728830375228426e-06, -0.0007932615117169917, -0.009412436746060848, -0.0005589353386312723, -0.010863212868571281, -0.0004991239402443171, -0.00018559163436293602, -5.340433563105762e-05, -1.1444026313256472e-05, -0.00019000156316906214, -0.004013816826045513, -0.039653975516557693, -2.1351101398468018, -0.042216476052999496, -0.003018587129190564, -1.2023130655288696, -4.768370445162873e-07, -8.344646857949556e-07, -1.6093124941107817e-05, -0.00016962042718660086, -0.07006727904081345], "finish_reason": "stop"}], "metrics": {"energy": 367.2207141323088, "energy_per_token": 1.5364883436498276, "time": 12.509274, "time_per_token": 0.052340058577405854}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n\n    if columns is None:\n        cols = list(df.select_dtypes(\"object\"))\n    else:\n        cols = [df[col] for col in columns]\n\n    for col in cols:\n        col.replace(dct, inplace=True)\n        col = LabelEncoder().fit_transform(col)\n\n    for col in df.select_dtypes(\"number\"):\n        col = (col - col.mean()) / col.std()\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " is", " not", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "cols", " =", " list", "(", "df", ".", "select", "_", "d", "types", "(", "\"", "object", "\"", "))", "\n", "    ", "else", ":", "\n", "        ", "cols", " =", " [", "df", "[", "col", "]", " for", " col", " in", " columns", "]", "\n", "\n", "    ", "for", " col", " in", " col", "s", ":", "\n", "        ", "col", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "        ", "col", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "col", ")", "\n", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "\"", "number", "\"", "):", "\n", "        ", "col", " =", " (", "col", " -", " col", ".", "mean", "())", " /", " col", ".", "std", "()", "\n", "\n", "    ", "return", " df"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -2.368056058883667, -0.02505864016711712, -0.030710158869624138, -0.31375008821487427, -0.009452823549509048, -0.5944104194641113, -0.05746454373002052, -0.0018321170937269926, -0.004162457771599293, -0.5125762820243835, -0.0006926044588908553, -0.8359724283218384, -0.17379236221313477, -0.07619177550077438, -0.1133670061826706, -0.005368815269321203, -0.023416992276906967, -0.0005821678787469864, -2.596527576446533, -0.1386231929063797, -2.7544853687286377, -0.0071571627631783485, -0.05909150838851929, -0.022619107738137245, -0.22216317057609558, -3.266281055402942e-05, -0.0001919085334520787, -0.0004374024283606559, -0.11903051286935806, -2.5687036514282227, -0.17284759879112244, -0.008830780163407326, -0.8308376669883728, -0.051485270261764526, -0.03626691922545433, -0.011920525692403316, -1.5616295058862306e-05, -0.0018485378241166472, -0.00016878610767889768, -0.011006712913513184, -0.0005610798834823072, -0.42539119720458984, -0.20191074907779694, -0.04359935224056244, -0.3829474151134491, -0.0059246402233839035, -0.01927724853157997, -0.00047874910524114966, -0.00019000156316906214, -0.008367717266082764, -0.08333881944417953, -0.011554582044482231, -0.10427024215459824, -0.0006823595031164587, -0.36612266302108765, -0.09719225764274597, -0.012673669494688511, -0.005325772799551487, -1.0728830375228426e-06, -0.0004530118894763291, -0.002145014703273773, -0.0013654442736878991, -1.3420560359954834, -0.3233637511730194, -0.08086176216602325, -0.0054825181141495705, -0.07358939945697784, -3.6000557884108275e-05, -0.08421529829502106, -0.0032263153698295355, -0.000192504478036426, -0.0027421037666499615, -0.0010434903670102358, -0.007115026004612446, -0.022366059944033623, -1.4395779371261597, -1.0178245306015015, -0.5746427178382874, -0.14473187923431396, -2.6940935640595853e-05, -0.003170584561303258, -0.010612481273710728, -0.00032360086333937943, -0.03516576811671257, -0.000198821333469823, -0.001077190856449306, -0.01042150054126978, -0.023234032094478607, -0.026021616533398628, -0.3178277611732483, -0.007405449636280537, -1.5211035013198853, -0.10661740601062775, -0.05091455578804016, -0.2084457129240036, -0.06936538964509964, -0.34106773138046265, -1.585470999998506e-05, -0.00031394799589179456, -0.001570064458064735, -0.06412196159362793, -0.07283932715654373, -0.08723364770412445, -6.305972783593461e-05, -0.013620653189718723, -0.003227147040888667, -0.0005501187406480312, -0.13761821389198303, -0.5484394431114197, -0.1292213350534439, -0.004597331862896681, -0.041949592530727386, -0.1727609485387802, -8.05822346592322e-05, -0.001033129869028926, -0.014069653116166592, -0.0009623901569284499, -0.07092448323965073, -3.6477376852417365e-05, -0.00014447122521232814, -0.008154669776558876, -0.039969008415937424, -0.12684257328510284, -0.002279661362990737, -0.007764752488583326, -0.0022019920870661736], "finish_reason": "stop"}], "metrics": {"energy": 232.95492144966127, "energy_per_token": 1.6177425100670921, "time": 7.1099954, "time_per_token": 0.04937496805555555}}
{"outputs": [{"text": "if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a pandas DataFrame\")\n\n    df.replace(dct, inplace=True)\n\n    if columns is not None:\n        for col in columns:\n            df[col] = LabelEncoder().fit_transform(df[col])\n    else:\n        for col in df.select_dtypes(include=[\"O\"]).columns:\n            df[col] = LabelEncoder().fit_transform(df[col])\n\n    for col in df.select_dtypes(include=[\"f\"]).columns:\n        df[col] -= df[col].mean()\n        df[col] /= df[col].std()\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "core", ".", "frame", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " is", " not", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", ".", "replace", "(", "d", "ct", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "for", " col", " in", " columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "else", ":", "\n", "        ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "O", "\"", "])", ".", "columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "include", "=[", "\"", "f", "\"", "])", ".", "columns", ":", "\n", "        ", "df", "[", "col", "]", " -=", " df", "[", "col", "]", ".", "mean", "()", "\n", "        ", "df", "[", "col", "]", " /", "=", " df", "[", "col", "]", ".", "std", "()", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -2.9282093048095703, -1.847726889536716e-05, -0.047568898648023605, -0.0016346914926543832, -0.0021145620848983526, -0.007020922377705574, -0.00805120263248682, -0.002639859216287732, -0.023115107789635658, -0.021705107763409615, -5.8410845667822286e-05, -0.1574423462152481, -0.13686394691467285, -0.3620719611644745, -0.9443849325180054, -0.7687029242515564, -0.008615703321993351, -0.027087511494755745, -2.1669037342071533, -0.022892829030752182, -0.005469358526170254, -1.3383474349975586, -0.0016943159280344844, -0.005291385110467672, -0.42894110083580017, -0.0007782529573887587, -2.5344719886779785, -1.7641459703445435, -0.48191893100738525, -0.003031303873285651, -0.02459954284131527, -2.777537883957848e-05, -0.015286079607903957, -0.005404029972851276, -0.00012110930401831865, -0.002719396958127618, -0.0018621024210005999, -0.016818277537822723, -0.04480605199933052, -0.40933507680892944, -0.0002308817347511649, -0.16254591941833496, -0.07157023996114731, -0.1938723623752594, -1.4008769989013672, -2.8132995794294402e-05, -0.00946911983191967, -0.013051440939307213, -0.0020461592357605696, -0.6335633397102356, -0.41476449370384216, -0.031603723764419556, -0.01286233775317669, -0.00040534863364882767, -0.0025272592902183533, -0.0024588846135884523, -1.2605348825454712, -0.019720444455742836, -0.0004345426568761468, -0.003417011583223939, -0.024370266124606133, -0.17291589081287384, -5.006664650863968e-05, -0.0019903627689927816, -0.00021181246847845614, -0.001142206834629178, -0.005931987427175045, -0.00019274283840786666, -0.00043644916149787605, -0.006913431454449892, -0.001086598145775497, -0.0001823735801735893, -0.01481002289801836, -0.01268202718347311, -0.7087568640708923, -0.034868333488702774, -5.113947918289341e-05, -0.0026062114629894495, -0.0012753218179568648, -1.0331062078475952, -0.049525994807481766, -0.02413034439086914, -0.007038796786218882, -0.015594092197716236, -0.7636157274246216, -7.867782187531702e-06, -0.00012015574611723423, -0.0003713871701620519, -0.09281887859106064, -0.5599685907363892, -2.039400100708008, -0.1038689985871315, -1.7042412757873535, -8.34461570775602e-06, -0.3623259961605072, -0.004743750672787428, -0.005022883880883455, -0.01076462585479021, -0.02415524795651436, -0.000730247818864882, -0.015912804752588272, -0.00031716562807559967, -6.5205356804654e-05, -0.0004029654082842171, -0.004157115705311298, -0.0016991952434182167, -7.760223525110632e-05, -0.0005806190893054008, -0.00011884459672728553, -0.0010627818992361426, -0.0012005510507151484, -1.3708974620385561e-05, -0.00023147765023168176, -0.0009841842111200094, -0.00014888131408952177, -1.823885577323381e-05, -0.0007269124034792185, -0.006009841803461313, -0.10710601508617401, -0.004248759243637323, -0.9627988934516907, -0.03774081543087959, -0.01279137097299099, -0.017077302560210228, -0.023453325033187866, -0.037592947483062744, -7.748573807475623e-06, -0.00039867559098638594, -0.0016689670737832785, -0.041109275072813034, -0.04851147159934044, -0.11891493946313858, -0.004207449499517679, -1.7281240224838257, -0.004417779389768839, -0.8228846192359924, -0.0004400238685775548, -0.0035998323000967503, -0.00145329674705863, -0.004523165058344603, -0.001335682114586234, -0.1065170019865036, -0.004225611686706543, -8.11782301752828e-05, -0.000717025191988796, -1.2417241334915161, -0.04724442586302757, -0.005228535737842321, -6.770858453819528e-05, -0.00010001159535022452, -1.3351351299206726e-05, -0.0023309222888201475, -0.0011127954348921776, -0.02019638940691948, -0.005343677941709757, -0.012467777356505394, -0.0005893162451684475, -2.7417760065873154e-05, -0.0003610197745729238, -0.021080486476421356, -3.015949550899677e-05, -0.08469164371490479, -0.0005495230434462428, -4.672895011026412e-05, -5.638440416078083e-05, -7.033323527139146e-06, -0.00019226610311307013, -0.025676017627120018, -0.08481431007385254, -2.8214361667633057, -0.02649654634296894, -0.00349862570874393, -1.4025590419769287, -3.576278118089249e-07, -8.344646857949556e-07, -2.372236667724792e-05, -0.00036125810584053397, -0.07769670337438583], "finish_reason": "stop"}], "metrics": {"energy": 276.78427962875384, "energy_per_token": 1.4880875248857732, "time": 9.203816, "time_per_token": 0.049482881720430104}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n\n    # Create a new DataFrame with columns modified\n    df = df.replace(dct)\n    df = df.astype(object)\n\n    # Encode columns with categorical values\n    if columns is None:\n        cols = df.select_dtypes(include=['object']).columns\n    else:\n        cols = df[columns]\n    df[cols] = df[cols].apply(LabelEncoder().fit_transform)\n\n    # Standardize numerical columns\n    means = df.mean(numeric_only=True)\n    stds = df.std(numeric_only=True)\n    return (df - means) / stds", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " should", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " new", " Data", "Frame", " with", " columns", " modified", "\n", "    ", "df", " =", " df", ".", "replace", "(", "d", "ct", ")", "\n", "    ", "df", " =", " df", ".", "ast", "ype", "(", "object", ")", "\n", "\n", "    ", "#", " Enc", "ode", " columns", " with", " categorical", " values", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "else", ":", "\n", "        ", "cols", " =", " df", "[", "columns", "]", "\n", "    ", "df", "[", "cols", "]", " =", " df", "[", "cols", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "\n", "    ", "#", " Standard", "ize", " numerical", " columns", "\n", "    ", "means", " =", " df", ".", "mean", "(", "numeric", "_", "only", "=", "True", ")", "\n", "    ", "st", "ds", " =", " df", ".", "std", "(", "numeric", "_", "only", "=", "True", ")", "\n", "    ", "return", " (", "df", " -", " means", ")", " /", " st", "ds"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -2.9048984050750732, -0.004201751668006182, -0.14067485928535461, -0.8403535485267639, -0.015132976695895195, -0.7264130711555481, -0.04067637771368027, -0.001536618685349822, -0.004000043962150812, -0.470062792301178, -0.0006500753224827349, -1.6710739135742188, -3.105461597442627, -0.2670809328556061, -0.9311575889587402, -0.3770572543144226, -0.0016181482933461666, -0.6300316452980042, -3.7082719802856445, -3.747755527496338, -2.2089760303497314, -0.008053449913859367, -1.252952218055725, -0.8266794085502625, -0.028780022636055946, -0.01734118163585663, -2.293095111846924, -0.006533571053296328, -0.10687229037284851, -7.629103492945433e-05, -0.08434821665287018, -0.09010054171085358, -1.3045049905776978, -1.9240666627883911, -0.5181642174720764, -0.09284299612045288, -0.09406650811433792, -1.6734262704849243, -3.93382906622719e-05, -0.4498973786830902, -2.0812230110168457, -0.027786193415522575, -0.17141056060791016, -0.524001955986023, -0.0006939148879610002, -0.950404167175293, -0.6342322826385498, -0.11305990070104599, -2.5646755695343018, -2.6629648208618164, -2.1638708114624023, -1.203905463218689, -0.17651766538619995, -0.0019518149783834815, -0.14728078246116638, -0.07717695832252502, -0.3447742164134979, -0.20375660061836243, -0.017706068232655525, -0.011190745048224926, -0.001061233808286488, -2.5442371368408203, -0.17646101117134094, -0.3157004117965698, -0.008906872943043709, -0.16357091069221497, -8.702239938429557e-06, -6.842378934379667e-05, -0.00047302976599894464, -0.06524195522069931, -0.328025758266449, -0.7433874011039734, -0.03277964144945145, -0.00787806510925293, -0.1295042484998703, -0.0017949911998584867, -0.2643095850944519, -0.04666992276906967, -0.005822720471769571, -1.6689160474925302e-05, -0.0019030333496630192, -0.0001991788885788992, -0.007123785093426704, -0.000454799213912338, -3.0516088008880615, -0.09677864611148834, -0.04121875762939453, -0.0006169561529532075, -0.12177033722400665, -0.546008825302124, -1.2927581071853638, -0.16274136304855347, -0.009424364194273949, -0.004050029441714287, -0.010931722819805145, -0.7966790795326233, -0.003405368886888027, -0.0013199674431234598, -0.0001358893496217206, -0.002684206236153841, -0.19827929139137268, -0.0018462770385667682, -0.4034516215324402, -5.757642793469131e-05, -0.006220266688615084, -7.080780778778717e-05, -0.006448650732636452, -0.0007728926721028984, -0.000346362212439999, -0.008208231069147587, -0.009935449808835983, -0.09000129252672195, -0.0007363230688497424, -0.05422398820519447, -0.19396889209747314, -0.020124422386288643, -0.22953985631465912, -0.4639075994491577, -0.08941617608070374, -0.001312824198976159, -4.160284519195557, -0.07989264279603958, -0.08629244565963745, -1.2188564538955688, -0.17378154397010803, -0.7705522179603577, -1.5176175832748413, -4.768370445162873e-07, -0.00014053787162993103, -0.0005604841862805188, -0.0007566926069557667, -0.013669689185917377, -0.07473302632570267, -0.0010987442219629884, -0.5408222079277039, -0.028233399614691734, -0.0006523388437926769, -0.002789774676784873, -0.0005471401382237673, -0.0004742213059216738, -0.0022553978487849236, -0.01430224534124136, -1.2874520507466514e-05, -2.7418097943154862e-06, -4.756337511935271e-05, -0.00013350549852475524, -0.046730220317840576, -0.006669522728770971, -0.037904150784015656, -1.9826860427856445, -0.4937765300273895, -0.002630823291838169, -0.05184311419725418, -0.0021341899409890175, -0.060287076979875565, -0.009158387780189514, -0.0030276195611804724, -7.045020902296528e-05], "finish_reason": "stop"}], "metrics": {"energy": 263.32849638175963, "energy_per_token": 1.496184638532725, "time": 8.554483, "time_per_token": 0.04860501704545454}}
{"outputs": [{"text": "if isinstance(df, pd.Series):\n        return df\n    if isinstance(df, pd.DataFrame):\n        if columns is not None:\n            columns = [c for c in columns if c in df.columns]\n        else:\n            columns = [c for c in df.columns if df[c].dtype == 'object']\n    if not columns:\n        columns = [c for c in df.columns if df[c].dtype == 'object']\n\n    result = df.copy()\n    for c in columns:\n        le = LabelEncoder()\n        le.fit(result[c])\n        result[c] = le.transform(result[c])\n    result['col1'].mean()\n    result[c].std()\n    return result", "tokens": ["if", " isinstance", "(", "df", ",", " pd", ".", "Series", "):", "\n", "        ", "return", " df", "\n", "    ", "if", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "if", " columns", " is", " not", " None", ":", "\n", "            ", "columns", " =", " [", "c", " for", " c", " in", " columns", " if", " c", " in", " df", ".", "columns", "]", "\n", "        ", "else", ":", "\n", "            ", "columns", " =", " [", "c", " for", " c", " in", " df", ".", "columns", " if", " df", "[", "c", "]", ".", "d", "type", " ==", " '", "object", "']", "\n", "    ", "if", " not", " columns", ":", "\n", "        ", "columns", " =", " [", "c", " for", " c", " in", " df", ".", "columns", " if", " df", "[", "c", "]", ".", "d", "type", " ==", " '", "object", "']", "\n", "\n", "    ", "result", " =", " df", ".", "copy", "()", "\n", "    ", "for", " c", " in", " columns", ":", "\n", "        ", "le", " =", " Label", "Encoder", "()", "\n", "        ", "le", ".", "fit", "(", "result", "[", "c", "])", "\n", "        ", "result", "[", "c", "]", " =", " le", ".", "transform", "(", "result", "[", "c", "])", "\n", "    ", "result", "['", "col", "1", "']", ".", "mean", "()", "\n", "    ", "result", "[", "c", "]", ".", "std", "()", "\n", "    ", "return", " result"], "logprobs": [-0.17574520409107208, -2.4192018508911133, -0.00012563870404846966, -0.018236584961414337, -0.00019035911827813834, -0.22204221785068512, -7.319182623177767e-05, -2.634970188140869, -0.05712074786424637, -0.01816740445792675, -0.001888517290353775, -2.7736995220184326, -0.2097989320755005, -0.9206891655921936, -0.38709786534309387, -0.6374459862709045, -1.7691495418548584, -5.4596363042946905e-05, -0.11227408796548843, -0.0004287039046175778, -0.10971160233020782, -0.000920825288631022, -0.002409533131867647, -0.03334292396903038, -0.002619527978822589, -0.03916141390800476, -0.6189764142036438, -0.2164752036333084, -0.14614717662334442, -2.028930187225342, -6.55629628454335e-05, -0.030619638040661812, -0.01327415369451046, -0.0018064148025587201, -2.7800889015197754, -0.22553688287734985, -0.7967204451560974, -1.814408302307129, -0.046889934688806534, -0.002707746112719178, -0.002565190428867936, -0.15385019779205322, -0.02683025598526001, -0.15425966680049896, -0.038463983684778214, -0.01865602284669876, -0.1304861158132553, -0.011969409883022308, -0.03358917310833931, -0.008345847018063068, -0.4249957501888275, -0.47519978880882263, -0.0001102625101339072, -0.004305141977965832, -0.00037651124875992537, -0.06956267356872559, -0.0009488132782280445, -0.9815153479576111, -0.07431323081254959, -0.002669701585546136, -0.00018142008048016578, -0.01956544816493988, -0.011786346323788166, -0.020814323797822, -0.04204092547297478, -0.01194679457694292, -0.06484128534793854, -0.016562938690185547, -0.0008553183870390058, -4.8636207793606445e-05, -3.564294092939235e-05, -0.006607588846236467, -0.3574007749557495, -0.11267420649528503, -0.42831212282180786, -0.21839693188667297, -0.004736157599836588, -0.0033886174205690622, -2.3178822994232178, -1.979341745376587, -1.263466238975525, -0.6934444308280945, -0.011684904806315899, -0.014101742766797543, -0.001444130903109908, -0.7060627341270447, -0.005468765739351511, -0.7028935551643372, -0.032022904604673386, -0.0014717471785843372, -0.00019298121333122253, -0.002571730175986886, -0.003109978511929512, -0.005439006723463535, -0.0018496087286621332, -0.008664513006806374, -0.007060931995511055, -0.0022533759474754333, -0.00030489088385365903, -6.329813186312094e-05, -0.0005864569102413952, -0.00030119650182314217, -0.016470657661557198, -0.003905765013769269, -0.012082365341484547, -0.011908510699868202, -0.001404847833327949, -0.0021243165247142315, -1.3785595893859863, -0.0006058764411136508, -2.958207368850708, -0.03812770918011665, -0.08175085484981537, -0.03632532060146332, -0.016400765627622604, -0.021991441026329994, -0.011758542619645596, -0.24844808876514435, -0.36681684851646423, -0.9777752161026001, -0.01676611416041851, -0.014329744502902031, -0.0002687808300834149, -0.002661854727193713, -0.0010596857173368335, -1.807774305343628, -0.003984489478170872, -0.0022003266494721174, -5.018585216021165e-05, -0.0033102023880928755, -0.027856221422553062, -0.0008693729760125279, -0.593777596950531, -0.02225915715098381, -0.0016323111485689878, -0.029467454180121422, -0.30689024925231934, -0.005346998106688261, -0.0002053765201708302, -0.10780278593301773, -0.004141089040786028, -0.002248499309644103, -0.06349766999483109, -0.019858472049236298, -0.0002802217786666006, -0.004118651617318392, -0.002019629580900073, -0.009506551548838615, -6.389413465512916e-05, -0.001303061842918396, -0.0003773453936446458, -0.004794648382812738, -0.0002325502864550799, -3.325883881188929e-05, -0.002266102470457554, -0.006100841797888279, -0.7650872468948364, -0.9527217149734497, -1.9433578252792358, -0.035229410976171494, -1.413350224494934, -0.00792005192488432, -2.168736457824707, -0.17187847197055817, -0.0072260452434420586, -0.7480894327163696, -0.20576995611190796, -1.1019456386566162, -2.2112040519714355, -2.5477185249328613, -0.016395840793848038, -0.037363987416028976, -0.6321048140525818, -0.01899118907749653, -0.06921467185020447, -0.19553038477897644, -0.12141195684671402, -0.005603795405477285], "finish_reason": "stop"}], "metrics": {"energy": 288.9402009277345, "energy_per_token": 1.6232595557737894, "time": 8.76747, "time_per_token": 0.049255449438202245}}
{"outputs": [{"text": "if isinstance(df, pd.DataFrame):\n        for col in df.columns:\n            if df[col].dtype == object:\n                if columns is None:\n                    df[col] = LabelEncoder().fit_transform(df[col])\n                else:\n                    df[col] = LabelEncoder().fit_transform(df[columns])\n        df[columns] = (df[columns] - df[columns].mean()) / df[columns].std()\n    else:\n        raise ValueError(\"Input should be a DataFrame.\")\n\n    return df", "tokens": ["if", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "for", " col", " in", " df", ".", "columns", ":", "\n", "            ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " object", ":", "\n", "                ", "if", " columns", " is", " None", ":", "\n", "                ", "    ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "                ", "else", ":", "\n", "                ", "    ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "columns", "])", "\n", "        ", "df", "[", "columns", "]", " =", " (", "df", "[", "columns", "]", " -", " df", "[", "columns", "]", ".", "mean", "())", " /", " df", "[", "columns", "]", ".", "std", "()", "\n", "    ", "else", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " should", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.17574520409107208, -2.4192018508911133, -0.00012563870404846966, -0.018236584961414337, -0.00019035911827813834, -0.22204221785068512, -7.319182623177767e-05, -0.14903679490089417, -0.0882057249546051, -0.008790958672761917, -0.03208155184984207, -0.8661951422691345, -0.807275116443634, -0.13726069033145905, -0.519012451171875, -0.11778833717107773, -0.030663570389151573, -0.017255065962672234, -0.012272675521671772, -0.009087511338293552, -0.22280970215797424, -1.2116649150848389, -0.03697151318192482, -0.004292797762900591, -0.0005098473629914224, -0.00012444675667211413, -0.010457717813551426, -0.10399438440799713, -0.078376904129982, -0.9324097633361816, -0.8822822570800781, -0.025069916620850563, -0.0046241492964327335, -0.28702929615974426, -0.09936991333961487, -0.08065338432788849, -0.17225703597068787, -0.5826442837715149, -0.01926228031516075, -0.0007446615491062403, -0.000459565402707085, -0.35700660943984985, -0.05444911867380142, -0.0007799206068739295, -0.0021526277996599674, -0.021105932071805, -0.2431194931268692, -5.4596363042946905e-05, -0.004974251613020897, -0.00042834642226807773, -0.002381586004048586, -0.005367155186831951, -0.00021217002358753234, -0.0006014683749526739, -0.0038139712996780872, -0.000967153930105269, -0.0001147919538198039, -0.025738060474395752, -0.015756629407405853, -0.006905854679644108, -0.2443438172340393, -0.0005492847412824631, -0.002997906878590584, -0.000543446687515825, -0.0001392267586197704, -0.4893977642059326, -0.03344587981700897, -0.39025211334228516, -0.10255522280931473, -0.15790796279907227, -0.0502217635512352, -0.0003277718205936253, -0.003286914434283972, -0.00031668893643654883, -0.018036168068647385, -0.0746123269200325, -6.854299135738984e-05, -0.007541164290159941, -0.03546369448304176, -0.007736717816442251, -0.09869413077831268, -0.06795934587717056, -0.004647168796509504, -0.6247852444648743, -0.8089301586151123, -0.9037196636199951, -0.38656726479530334, -0.018470551818609238, -0.14961187541484833, -0.7333214282989502, -0.01174899935722351, -0.01285327598452568, -0.001503528794273734, -0.07568052411079407, -0.018272988498210907, -0.036236684769392014, -0.003337410744279623, -0.0008923601126298308, -7.199982064776123e-05, -5.722029527532868e-06, -0.0031923307105898857, -0.03451184555888176, -0.002677548211067915, -0.018612612038850784, -0.0013524680398404598, -0.0017924923449754715, -0.00012694983161054552, -3.2305197237292305e-05, -0.00023922442051116377, -0.0028696570079773664, -0.011596178635954857, -1.6300475597381592, -0.016196109354496002, -0.0002150304353563115, -0.003244614228606224, -0.0008681819308549166, -0.013402252458035946, -0.012830914929509163, -9.548207890475169e-05, -0.2699492871761322, -0.16565178334712982, -0.49361133575439453, -3.1640870571136475, -0.005169240292161703, -0.172503262758255, -0.584018349647522, -0.019450178369879723, -0.792772650718689, -0.029040368273854256, -0.05794468894600868, -0.028285086154937744, -1.5539976358413696, -0.07729249447584152, -0.017173394560813904, -0.004630319774150848, -0.9079097509384155, -0.008435215801000595, -1.926189661026001], "finish_reason": "stop"}], "metrics": {"energy": 214.96223063659664, "energy_per_token": 1.557697323453599, "time": 7.273664, "time_per_token": 0.05270771014492754}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n\n    if columns is None:\n        columns = [col for col in df.columns if df[col].dtypes == 'object']\n    encoder = LabelEncoder()\n    df[columns] = df[columns].replace(dct).astype('category')\n    df[columns].transform(encoder.fit_transform)\n    df[columns].transform(encoder.fit_transform).astype(np.float64)\n    df[columns].astype('object').transform(encoder.fit_transform)\n    df[columns].astype('int64')\n    df[columns].astype('float64')\n    df[columns].astype('bool')\n    df[columns].astype('category')\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " df", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " [", "col", " for", " col", " in", " df", ".", "columns", " if", " df", "[", "col", "]", ".", "d", "types", " ==", " '", "object", "']", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "replace", "(", "d", "ct", ")", ".", "ast", "ype", "('", "category", "')", "\n", "    ", "df", "[", "columns", "]", ".", "transform", "(", "encoder", ".", "fit", "_", "transform", ")", "\n", "    ", "df", "[", "columns", "]", ".", "transform", "(", "encoder", ".", "fit", "_", "transform", ")", ".", "ast", "ype", "(", "np", ".", "float", "6", "4", ")", "\n", "    ", "df", "[", "columns", "]", ".", "ast", "ype", "('", "object", "')", ".", "transform", "(", "encoder", ".", "fit", "_", "transform", ")", "\n", "    ", "df", "[", "columns", "]", ".", "ast", "ype", "('", "int", "6", "4", "')", "\n", "    ", "df", "[", "columns", "]", ".", "ast", "ype", "('", "float", "6", "4", "')", "\n", "    ", "df", "[", "columns", "]", ".", "ast", "ype", "('", "bool", "')", "\n", "    ", "df", "[", "columns", "]", ".", "ast", "ype", "('", "category", "')", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -0.9022796154022217, -0.9773439168930054, -0.0011400636285543442, -0.04461009055376053, -0.4853183925151825, -0.019024640321731567, -0.003735946025699377, -0.40076836943626404, -0.007356223184615374, -0.002032240154221654, -0.00490189203992486, -0.3814827501773834, -0.0006257721688598394, -0.8424822688102722, -0.18875090777873993, -0.07973095774650574, -0.11909591406583786, -0.0051429118029773235, -0.020671173930168152, -0.0005197366117499769, -0.44607436656951904, -0.012149025686085224, -1.4807274341583252, -0.7326946258544922, -0.00933118537068367, -0.0009003399754874408, -0.009383739903569221, -0.007051344029605389, -0.04359786957502365, -0.16598950326442719, -0.008673612959682941, -0.03644360229372978, -0.0166845191270113, -0.000176652567461133, -1.3232143828645349e-05, -4.6491513785440475e-06, -0.0017251383978873491, -1.6499550342559814, -0.03311863914132118, -0.5380642414093018, -0.5843870043754578, -0.0030276195611804724, -0.010069877840578556, -1.5335910320281982, -3.323807954788208, -0.007251135539263487, -0.008045408874750137, -4.756337511935271e-05, -0.0027164246421307325, -0.05000440776348114, -0.22353105247020721, -1.6701381206512451, -0.28723862767219543, -0.0033633115235716105, -0.0010634964564815164, -0.008949289098381996, -0.09518242627382278, -0.002802256727591157, -0.0003641180810518563, -3.9934315282152966e-05, -0.0020720933098345995, -2.1545639038085938, -0.006717953830957413, -0.02084561251103878, -5.4834770708112046e-05, -0.050045568495988846, -1.9259414672851562, -0.9582789540290833, -0.0003177614707965404, -0.9003641605377197, -1.0480284690856934, -0.003693308448418975, -0.031200431287288666, -0.04714890569448471, -0.2578604519367218, -0.28323981165885925, -0.016747592017054558, -0.004268820397555828, -1.787930965423584, -3.2791056632995605, -0.094218410551548, -0.021310754120349884, -0.0376947820186615, -0.06149175390601158, -0.010881843976676464, -0.00012373158824630082, -0.18585635721683502, -0.03587297722697258, -0.05998949706554413, -0.40352296829223633, -0.3750755786895752, -0.0519581064581871, -0.026834549382328987, -0.04972723126411438, -2.3220467567443848, -0.1668912172317505, -0.29765161871910095, -0.021751299500465393, -1.9956296682357788, -0.02826005406677723, -0.0001510267611593008, -0.03603328764438629, -2.7978603839874268, -2.249751329421997, -0.00019739109848160297, -0.7429084777832031, -1.063481092453003, -0.00030048147891648114, -0.0670187771320343, -0.5604935884475708, -3.707340147229843e-05, -0.0185999758541584, -0.10738786309957504, -0.17359647154808044, -1.1198272705078125, -0.6206189393997192, -0.014163096435368061, -0.01187281683087349, -0.007238945458084345, -2.8052871227264404, -0.00010859376925509423, -1.27682626247406, -3.3505778312683105, -0.0027764602564275265, -1.8152838945388794, -0.681711733341217, -0.04402574151754379, -0.0489770881831646, -0.003200054634362459, -0.13379739224910736, -0.0030425945296883583, -0.0003033416287507862, -0.00979510135948658, -0.7294644713401794, -0.12698012590408325, -1.0310789346694946, -0.41644686460494995, -0.015112427994608879, -0.01538140419870615, -0.015065106563270092, -1.2567429542541504, -4.1483970562694594e-05, -0.18078838288784027, -2.283686876296997, -0.5616353750228882, -4.756337511935271e-05, -0.002720704535022378, -0.7656440734863281, -0.1467801183462143, -0.4989643394947052, -0.22559911012649536, -0.013898847624659538, -0.009662761352956295, -0.003690695622935891, -0.5177698731422424, -2.9801878554280847e-05, -0.08395523577928543, -0.4176502227783203, -0.045382656157016754, -3.4689302992774174e-05, -0.0015808953903615475, -0.2857087254524231, -0.11554235965013504, -0.6681575179100037, -0.22534459829330444, -0.010436718352138996, -0.008918452076613903, -0.003991257399320602, -0.32672765851020813, -3.349725011503324e-05, -0.07473922520875931, -1.9500147104263306, -0.009018047712743282, -0.024060172960162163, -0.15592648088932037, -0.49195489287376404, -0.18629854917526245, -0.006003324408084154, -0.012292576022446156, -0.002705843886360526, -0.3031517267227173, -4.23184028477408e-05, -0.0910520926117897, -0.7825232148170471, -0.0007271506474353373, -0.06962405145168304, -1.8813745975494385, -0.09432005882263184, -0.09142826497554779, -0.005805061198771, -0.7324752807617188, -0.014074002392590046, -2.213103771209717], "finish_reason": "stop"}], "metrics": {"energy": 343.88500844001754, "energy_per_token": 1.629786769857903, "time": 11.276069, "time_per_token": 0.05344108530805687}}
{"outputs": [{"text": "# check that the input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n\n    # replace values\n    for key, val in dct.items():\n        df[key] = df[key].replace(key, val)\n\n    # encode categorical columns\n    if columns is None:\n        for col in df.select_dtypes(\"object\"):\n            df[col] = LabelEncoder().fit_transform(df[col])\n    else:\n        for col in columns:\n            df[col] = LabelEncoder().fit_transform(df[col])\n\n    # standardize numerical columns\n    for col in df.select_dtypes(\"number\"):\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    return df", "tokens": ["#", " check", " that", " the", " input", " is", " a", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " replace", " values", "\n", "    ", "for", " key", ",", " val", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "key", "]", " =", " df", "[", "key", "]", ".", "replace", "(", "key", ",", " val", ")", "\n", "\n", "    ", "#", " encode", " categorical", " columns", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "\"", "object", "\"", "):", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "    ", "else", ":", "\n", "        ", "for", " col", " in", " columns", ":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " standard", "ize", " numerical", " columns", "\n", "    ", "for", " col", " in", " df", ".", "select", "_", "d", "types", "(", "\"", "number", "\"", "):", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df"], "logprobs": [-2.3783953189849854, -2.536365509033203, -2.356975555419922, -1.3372162580490112, -0.18310092389583588, -0.5380681753158569, -0.1297338902950287, -0.39329013228416443, -0.009852588176727295, -0.12489750981330872, -0.0025242867413908243, -0.012868810445070267, -0.054973140358924866, -0.004978403449058533, -0.00013171759201213717, -0.001559709431603551, -6.949660019017756e-05, -0.013938936404883862, -9.775113539944869e-06, -0.06613411009311676, -0.0018665050156414509, -0.0012949660886079073, -0.001447583083063364, -0.016177106648683548, -0.014071064069867134, -2.9205850296420977e-05, -0.12477292865514755, -0.10049092024564743, -0.27089592814445496, -0.9564058780670166, -0.0006781900301575661, -0.01854158379137516, -0.6257960796356201, -0.02347463369369507, -0.00402675848454237, -0.38648927211761475, -0.004812444094568491, -0.00046993177966214716, -0.002215432934463024, -0.1202755868434906, -0.0009728704462759197, -0.10515014827251434, -2.033306121826172, -0.24802659451961517, -1.7262682914733887, -0.0009478605352342129, -0.5757489800453186, -1.2280362844467163, -0.07660769671201706, -0.8404967784881592, -0.0006895071710459888, -0.0026796883903443813, -1.2993727978027891e-05, -0.0003815161471720785, -0.0005078217945992947, -0.00013136000779923052, -0.002715354785323143, -0.001013480476103723, -0.05925106257200241, -0.5830530524253845, -0.4699529707431793, -0.005077206529676914, -0.04755457490682602, -0.010096549056470394, -0.010253610089421272, -0.0074525438249111176, -3.9457496313843876e-05, -0.0009723940747790039, -0.5443735122680664, -0.056157633662223816, -0.3984285891056061, -0.0005608416395261884, -0.0036322588566690683, -0.0042652590200304985, -0.006701968144625425, -0.029252255335450172, -0.001916835200972855, -0.0842277929186821, -0.20225729048252106, -0.05522359907627106, -0.1621682196855545, -0.07999993860721588, -0.0008167268824763596, -0.04462422803044319, -0.034491345286369324, -0.14073917269706726, -0.11999840289354324, -0.01046043075621128, -0.011383346281945705, -0.00039748396375216544, -2.771796703338623, -0.16090859472751617, -0.050783466547727585, -0.005784320179373026, -0.011367788538336754, -0.306222140789032, -2.264974000354414e-06, -0.00011085849109804258, -0.0006831934442743659, -0.11801739782094955, -2.720327615737915, -0.14201833307743073, -0.00129413278773427, -0.10285589098930359, -0.008386394940316677, -0.0009698931244201958, -0.4302063584327698, -0.005675511434674263, -0.0010941001819446683, -0.0028297165408730507, -0.03947923704981804, -0.053711436688899994, -3.6954195820726454e-05, -0.0013238961109891534, -0.0005570290377363563, -0.001586013357155025, -0.0023694555275142193, -0.00017069313616957515, -0.00041762212640605867, -0.005307037848979235, -0.0005404680268839002, -6.12716976320371e-05, -0.007525073830038309, -0.0045845163986086845, -0.03067108429968357, -0.03274572268128395, -1.4781842764932662e-05, -0.002790250116959214, -0.000256982195423916, -0.04069766402244568, -0.01390707679092884, -0.0023582761641591787, -0.012627762742340565, -0.00022766382608097047, -0.0004167880106251687, -0.0003946240758523345, -0.04306819662451744, -0.0006202919175848365, -8.77341881277971e-05, -0.0002531684876885265, -0.012111573480069637, -0.004729869309812784, -0.00201617949642241, -0.00028796817059628665, -3.71926071238704e-05, -0.0004159538948442787, -0.0012198395561426878, -3.5523738915799186e-05, -0.0002286172821186483, -0.00046790618216618896, -0.0003302744007669389, -0.00033623288618400693, -0.00015662873920518905, -0.0012653210433200002, -0.014816952869296074, -0.0021394239738583565, -0.010557396337389946, -0.22146405279636383, -0.009136298671364784, -0.03783562779426575, -0.1289035528898239, -0.013216745108366013, -0.001335205975919962, -0.777118444442749, -0.017131444066762924, -0.006027734372764826, -0.01731329783797264, -0.017818378284573555, -0.03715771809220314, -4.291525328881107e-06, -0.00020752183627337217, -0.0031767638865858316, -0.04545726999640465, -0.14037218689918518, -0.015737149864435196, -1.645074735279195e-05, -0.009037895128130913, -0.0007839705212973058, -0.0007544293766841292, -0.09817761927843094, -0.002204251941293478, -0.0001003691868390888, -0.00022825974156148732, -0.3586684465408325, -0.04711274430155754, -0.0017977281240746379, -0.00013195598148740828, -6.437280717364047e-06, -0.011055287905037403, -0.01062757894396782, -0.09932112693786621, -0.002678974997252226, -5.400034933700226e-05, -3.886147169396281e-05, -8.344646857949556e-07, -0.000697846058756113, -0.008083959110081196, -0.0005833592731505632, -0.015539281070232391, -0.0002244459028588608, -7.199982064776123e-05, -2.074220174108632e-05, -4.291525328881107e-06, -0.00010406429646536708, -0.0011544713051989675, -0.036493830382823944, -0.050799328833818436, -0.003331351326778531, -0.04687025770545006, -0.0014598437119275331], "finish_reason": "stop"}], "metrics": {"energy": 319.8202805671691, "energy_per_token": 1.5229537169865195, "time": 10.649091, "time_per_token": 0.05070995714285714}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'Expected type for `df` is pandas.DataFrame but got {type(df)}.')\n\n    if not isinstance(columns, (list, tuple, set, type(None))):\n        raise ValueError(\n            f'Expected type for `columns` is (list, tuple, set or None) but got {type(columns)}.')\n\n    if columns:\n        for col in columns:\n            if not isinstance(col, str):\n                raise ValueError(\n                    f'Expected type for column in `columns` is str but got {type(col)}.')\n\n    # Apply data preprocessing: replace values, encode categorical columns, and standardize numerical columns\n    df[columns] = df[columns].apply(lambda x: x.replace(**dct))\n    df[columns] = df[columns].apply(LabelEncoder().fit_transform)\n    df[columns] = df[columns].apply(lambda x: (x - x.mean()) / x.std())\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Expected", " type", " for", " `", "df", "`", " is", " pandas", ".", "DataFrame", " but", " got", " {", "type", "(", "df", ")}", ".", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "columns", ",", " (", "list", ",", " tuple", ",", " set", ",", " type", "(", "None", "))", "):", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "'", "Expected", " type", " for", " `", "columns", "`", " is", " (", "list", ",", " tuple", ",", " set", " or", " None", ")", " but", " got", " {", "type", "(", "columns", ")}", ".", "')", "\n", "\n", "    ", "if", " columns", ":", "\n", "        ", "for", " col", " in", " columns", ":", "\n", "            ", "if", " not", " isinstance", "(", "col", ",", " str", "):", "\n", "                ", "raise", " Value", "Error", "(", "\n", "                ", "    ", "f", "'", "Expected", " type", " for", " column", " in", " `", "columns", "`", " is", " str", " but", " got", " {", "type", "(", "col", ")}", ".", "')", "\n", "\n", "    ", "#", " Apply", " data", " pre", "processing", ":", " replace", " values", ",", " encode", " categorical", " columns", ",", " and", " standard", "ize", " numerical", " columns", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "lambda", " x", ":", " x", ".", "replace", "(", "**", "d", "ct", "))", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "lambda", " x", ":", " (", "x", " -", " x", ".", "mean", "())", " /", " x", ".", "std", "())", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -2.358222007751465, -1.974700927734375, -2.436117649078369, -3.366687774658203, -3.4236247539520264, -2.4038965702056885, -0.0401429757475853, -0.06741088628768921, -0.3970782458782196, -2.1640689373016357, -0.2053607553243637, -0.016980264335870743, -2.182366371154785, -0.5903262495994568, -0.10367772728204727, -0.014058486558496952, -0.0007228621980175376, -0.001834853901527822, -0.08971504122018814, -1.4796667098999023, -0.12770076096057892, -0.002169875893741846, -0.5693057775497437, -0.00046266341814771295, -0.6289514899253845, -1.726158857345581, -0.48700323700904846, -8.475421054754406e-05, -1.468226671218872, -0.00010132275929208845, -0.9404378533363342, -0.45428466796875, -0.0007166677969507873, -0.7337864637374878, -0.23672431707382202, -0.7161917090415955, -0.9339666366577148, -0.29799458384513855, -0.0005810956354252994, -0.002033191965892911, -0.013295328244566917, -0.00040928093949332833, -0.006565784104168415, -0.0010405131615698338, -0.06078381836414337, -0.2840954661369324, -8.630380034446716e-05, -0.05399394780397415, -1.416032314300537, -0.005219167564064264, -0.13578768074512482, -0.19711987674236298, -0.37397199869155884, -0.2137545645236969, -0.08219774067401886, -0.0353800430893898, -0.06306417286396027, -0.0011343479854986072, -0.1175604835152626, -3.0776925086975098, -0.02091250941157341, -0.09431647509336472, -0.030702413991093636, -0.017142577096819878, -0.010157440789043903, -1.8590342998504639, -0.03735445812344551, -0.09958618879318237, -0.1084204614162445, -0.004198071546852589, -0.007675086613744497, -0.0014240134041756392, -0.0010684978915378451, -0.028656311333179474, -0.0055889771319925785, -0.08602788299322128, -0.13536818325519562, -0.0032286918722093105, -0.10715731233358383, -0.00031549722189083695, -0.8737497925758362, -0.37779301404953003, -1.280625820159912, -0.012184709310531616, -0.0059874458238482475, -1.026342749595642, -0.6861787438392639, -0.05307292193174362, -0.038263335824012756, -0.0013802058529108763, -0.0041060671210289, -0.0036165802739560604, -0.10662566125392914, -0.4622132182121277, -0.09978914260864258, -0.00014673586701974273, -0.018405482172966003, -0.00016008525562938303, -0.02791963517665863, -0.019409140571951866, -0.001723591354675591, -0.00023266946664080024, -0.004901180509477854, -0.11155088990926743, -5.817244164063595e-05, -0.008572446182370186, -0.5406399369239807, -8.308542601298541e-05, -0.0004634975048247725, -0.012987547554075718, -0.04643438011407852, -0.10535316169261932, -0.12695366144180298, -0.0216628797352314, -2.8470587730407715, -1.30659818649292, -0.048790913075208664, -0.02584238536655903, -0.0018944665789604187, -0.055819254368543625, -0.0895170047879219, -0.04695875197649002, -0.0037146867252886295, -0.003108671400696039, -0.004501804243773222, -0.0005053196800872684, -0.009760985150933266, -0.005423475056886673, -0.03238570690155029, -0.029668256640434265, -0.0006798578542657197, -0.7049553394317627, -0.34724828600883484, -2.1942594051361084, -4.82773494720459, -3.7159030437469482, -0.5216431021690369, -0.03825736790895462, -3.427433967590332, -1.588131308555603, -0.20977506041526794, -0.3208412230014801, -0.07456441968679428, -0.07725663483142853, -1.1898770332336426, -0.06875570863485336, -0.3547193109989166, -0.06100299209356308, -0.0011832863092422485, -0.09580978006124496, -0.18740782141685486, -0.20830178260803223, -0.02897077240049839, -1.5107033252716064, -2.8054707050323486, -0.43311741948127747, -0.11615707725286484, -0.229154571890831, -0.045258473604917526, -0.09390264749526978, -0.0023334198631346226, -0.001359372865408659, -0.0014791273279115558, -0.6871063113212585, -0.09495045244693756, -0.38451120257377625, -0.17216090857982635, -0.0005896736984141171, -0.3085508942604065, -0.028343606740236282, -0.49901339411735535, -0.004870693199336529, -0.4955276548862457, -0.007261313498020172, -1.0251946150674485e-05, -0.06903200596570969, -0.05055093392729759, -0.4769594669342041, -0.757662296295166, -0.3447147011756897, -0.01838219165802002, -0.007732932455837727, -0.6427007913589478, -0.07794087380170822, -0.007388054858893156, -0.0005769256968051195, -0.0006401873542927206, -0.0006049233488738537, -0.1233752891421318, -0.006060081999748945, -0.9154640436172485, -0.00011801023356383666, -0.012445172294974327, -0.0006874820101074874, -0.002612394280731678, -0.0009569118265062571, -0.00023922442051116377, -0.009030098095536232, -0.020667552947998047, -0.06661289930343628, -0.07872547954320908, -0.6417208909988403, -0.012951775453984737, -0.007734707091003656, -0.6962589621543884, -0.23084212839603424, -0.005366087891161442, -0.00033158526639454067, -0.0005770448478870094, -0.001620528637431562, -0.271585613489151, -0.0017933252966031432, -0.300394743680954, -0.013928708620369434, -0.0014701997861266136, -0.32012221217155457, -0.005647655110806227, -0.04438968747854233, -0.09629254788160324, -2.8609820219571702e-05, -0.0009442876325920224, -0.029107991605997086, -0.0012686545960605145, -0.03405303508043289, -2.8371408916427754e-05, -0.0002516191452741623, -0.0057344213128089905, -0.01374365109950304, -0.35846203565597534, -0.0015807764139026403, -0.0375136099755764, -0.0023111794143915176, -1.2153899669647217, -2.3841855067985307e-07, -8.344646857949556e-07, -5.447716102935374e-05, -0.0002169373765354976, -0.13378946483135223], "finish_reason": "stop"}], "metrics": {"energy": 393.25821027565013, "energy_per_token": 1.5482606703765753, "time": 12.747707, "time_per_token": 0.05018782283464567}}
{"outputs": [{"text": "if isinstance(df, pd.DataFrame) is False:\n        raise ValueError\n\n    for key in dct.keys():\n        if key in df.columns:\n            df[key] = LabelEncoder().fit_transform(df[key])\n\n    for col in columns:\n        if col in df.columns and df[col].dtypes == \"object\":\n            df[col] = LabelEncoder().fit_transform(df[col])\n\n    for column in df.columns:\n        if df[column].dtypes == \"float64\" or df[column].dtypes == \"int64\":\n            df[column] = (df[column] - df[column].mean()) / df[column].std()\n\n    return df", "tokens": ["if", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", ")", " is", " False", ":", "\n", "        ", "raise", " Value", "Error", "\n", "\n", "    ", "for", " key", " in", " d", "ct", ".", "keys", "():", "\n", "        ", "if", " key", " in", " df", ".", "columns", ":", "\n", "            ", "df", "[", "key", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "key", "])", "\n", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "if", " col", " in", " df", ".", "columns", " and", " df", "[", "col", "]", ".", "d", "types", " ==", " \"", "object", "\":", "\n", "            ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "for", " column", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "column", "]", ".", "d", "types", " ==", " \"", "float", "6", "4", "\"", " or", " df", "[", "column", "]", ".", "d", "types", " ==", " \"", "int", "6", "4", "\":", "\n", "            ", "df", "[", "column", "]", " =", " (", "df", "[", "column", "]", " -", " df", "[", "column", "]", ".", "mean", "())", " /", " df", "[", "column", "]", ".", "std", "()", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.17574520409107208, -2.4192018508911133, -0.00012563870404846966, -0.018236584961414337, -0.00019035911827813834, -0.22204221785068512, -7.319182623177767e-05, -0.14903679490089417, -2.4746556282043457, -0.4870975613594055, -0.11357931792736053, -0.004633998032659292, -0.009670081548392773, -0.002896758494898677, -0.03152310103178024, -0.024367008358240128, -0.00012540031457319856, -2.772439956665039, -0.7877392768859863, -0.0006424508756026626, -1.5566846132278442, -1.5415557622909546, -1.5377827882766724, -0.08613430708646774, -2.1576648578047752e-05, -0.8401907682418823, -0.010636424645781517, -0.004855864215642214, -0.00891774334013462, -0.01031531859189272, -0.5918838381767273, -0.2701200842857361, -0.7259579300880432, -0.12371990829706192, -0.15063440799713135, -0.11325492709875107, -0.08459185808897018, -0.006274998188018799, -0.004350364673882723, -0.27334752678871155, -0.2638559937477112, -0.012238291092216969, -0.00961848720908165, -0.26046067476272583, -1.2864816188812256, -8.368142152903602e-05, -0.005822246428579092, -0.0007862337515689433, -0.003038078313693404, -0.0046432530507445335, -0.00029988560709170997, -0.002522978698834777, -0.02953331172466278, -0.0053413063287734985, -0.0004220310365781188, -0.06327087432146072, -0.01619376428425312, -0.4384479224681854, -0.024040039628744125, -1.8372682332992554, -1.1969053745269775, -0.0649324432015419, -0.5091148018836975, -0.32104599475860596, -0.0043713729828596115, -0.002156553091481328, -0.35807979106903076, -0.07109137624502182, -0.10053965449333191, -0.019267309457063675, -0.02153945155441761, -0.007893676869571209, -2.8323919773101807, -0.4154297411441803, -0.010496056638658047, -0.0010850501712411642, -0.0008680627797730267, -0.0016124354442581534, -0.052901867777109146, -0.598960280418396, -0.07719483971595764, -2.225193738937378, -0.33185696601867676, -0.019588476046919823, -0.007774924859404564, -0.003144441172480583, -0.13963814079761505, -0.020080024376511574, -0.0007358465809375048, -0.0021289559081196785, -0.03397572040557861, -0.03918376564979553, -0.0002451834443490952, -0.0022578956559300423, -0.0004493180604185909, -0.005305259022861719, -0.007169117219746113, -2.9801878554280847e-05, -0.0008091036579571664, -0.002303448738530278, -0.0010299145942553878, -0.0004391897819004953, -0.0051604644395411015, -0.0059676566161215305, -0.11788157373666763, -0.005089185666292906, -0.997318685054779, -2.624342441558838, -0.10214447230100632, -0.12208395451307297, -0.08587681502103806, -0.061048299074172974, -0.009285833686590195, -0.0020518696401268244, -0.005767371505498886, -0.27500808238983154, -0.9273226857185364, -0.008096374571323395, -0.001938013592734933, -0.0004142856632824987, -0.0003711488388944417, -0.026271650567650795, -0.03771808370947838, -0.140687495470047, -0.3496382534503937, -0.8291627764701843, -0.07653039693832397, -9.775113539944869e-06, -2.4426372051239014, -0.056614186614751816, -0.03497286140918732, -0.0018724543042480946, -0.0007354891858994961, -8.904537389753386e-05, -0.0002873722987715155, -0.0008593680104240775, -0.005568231921643019, -0.0015331668546423316, -0.011395132169127464, -0.026179680600762367, -0.01705198921263218, -5.0424259825376794e-05, -0.015441740863025188, -0.0023225971963256598, -0.003790932474657893, -0.168686181306839, -0.010775711387395859, -0.000920825288631022, -0.0013036570744588971, -0.1672251969575882, -0.15554778277873993, -0.019389498978853226, -0.0006380429258570075, -0.00036769305006600916, -0.02443099208176136, -0.04097907245159149, -0.08169317990541458, -0.0030001651030033827, -0.0006246999255381525, -0.00028355870745144784, -2.3364747903542593e-05, -0.00432852515950799, -0.03231934458017349, -0.0023987111635506153, -0.028054913505911827, -0.0004926898400299251, -0.0009779914980754256, -8.189342770492658e-05, -4.60137271147687e-05, -0.00026520551182329655, -0.0035525562707334757, -0.09166040271520615, -0.1740882843732834, -0.002762194722890854, -0.016491645947098732, -0.004163526464253664, -0.865446150302887, -0.016375552862882614, -0.9246401190757751], "finish_reason": "stop"}], "metrics": {"energy": 269.06462694549555, "energy_per_token": 1.5031543404776289, "time": 8.975099, "time_per_token": 0.050140217877094974}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The function only accepts DataFrame as input.\")\n\n    # encode columns\n    if columns is not None:\n        columns = [x for x in columns if isinstance(df[x].dtype, pd.Categorical)]\n    else:\n        columns = [x for x in df.columns if isinstance(df[x].dtype, pd.Categorical)]\n\n    for col in columns:\n        df[col] = LabelEncoder().fit_transform(df[col])\n\n    # standardize numerical columns\n    for col in df.columns:\n        if df[col].dtype == object:\n            continue\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    # replace values\n    for old_val, new_val in dct.items():\n        df[columns] = df[columns].replace(old_val, new_val)\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " function", " only", " accepts", " Data", "Frame", " as", " input", ".", "\"", ")", "\n", "\n", "    ", "#", " encode", " columns", "\n", "    ", "if", " columns", " is", " not", " None", ":", "\n", "        ", "columns", " =", " [", "x", " for", " x", " in", " columns", " if", " isinstance", "(", "df", "[", "x", "]", ".", "d", "type", ",", " pd", ".", "C", "ategor", "ical", ")]", "\n", "    ", "else", ":", "\n", "        ", "columns", " =", " [", "x", " for", " x", " in", " df", ".", "columns", " if", " isinstance", "(", "df", "[", "x", "]", ".", "d", "type", ",", " pd", ".", "C", "ategor", "ical", ")]", "\n", "\n", "    ", "for", " col", " in", " columns", ":", "\n", "        ", "df", "[", "col", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "#", " standard", "ize", " numerical", " columns", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "if", " df", "[", "col", "]", ".", "d", "type", " ==", " object", ":", "\n", "            ", "continue", "\n", "        ", "df", "[", "col", "]", " =", " (", "df", "[", "col", "]", " -", " df", "[", "col", "]", ".", "mean", "())", " /", " df", "[", "col", "]", ".", "std", "()", "\n", "\n", "    ", "#", " replace", " values", "\n", "    ", "for", " old", "_", "val", ",", " new", "_", "val", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "replace", "(", "old", "_", "val", ",", " new", "_", "val", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -2.5070018768310547, -3.057279109954834, -2.0737814903259277, -0.5162303447723389, -0.9684417247772217, -0.4809063971042633, -0.6864144206047058, -0.12124597281217575, -0.470248281955719, -0.08574366569519043, -0.002576248487457633, -0.004261223133653402, -0.48442068696022034, -0.0007613382767885923, -1.5980310440063477, -4.264270782470703, -2.2702951431274414, -0.8127942085266113, -0.003975347150117159, -0.12930984795093536, -0.07945474237203598, -0.305569052696228, -0.9878548383712769, -1.4185804502631072e-05, -0.014975271187722683, -0.007492891512811184, -0.0019152885070070624, -2.509746789932251, -0.15944929420948029, -0.8659704327583313, -3.588249921798706, -0.08887979388237, -0.003393488470464945, -0.0018299752846360207, -0.19437865912914276, -0.026698989793658257, -3.0157904624938965, -0.0006777135422453284, -0.1790183186531067, -0.02518988773226738, -0.022575868293642998, -0.011910631321370602, -0.2129446268081665, -1.2710483074188232, -0.16334161162376404, -0.0016769407084211707, -0.54976487159729, -0.0010151476599276066, -0.5599734783172607, -8.856858039507642e-05, -1.5735502529423684e-05, -2.5045790672302246, -0.01300143264234066, -1.5930986404418945, -0.296019583940506, -5.352353764465079e-05, -0.002528805285692215, -0.0005217621219344437, -0.07979843020439148, -0.0028757192194461823, -0.2876305878162384, -0.2008386254310608, -0.0067919581197202206, -0.0009014118695631623, -0.01035472471266985, -0.020100703462958336, -0.052580367773771286, -0.08243829011917114, -0.006993222050368786, -0.11512681096792221, -9.440929716220126e-05, -0.0008216104470193386, -0.00040904260822571814, -0.00018749863374978304, -3.421248038648628e-05, -1.7881377516459906e-06, -6.425174069590867e-05, -0.007451360579580069, -4.351044481154531e-05, -0.0018160531762987375, -0.00012230125139467418, -0.002771467436105013, -0.0007398966699838638, -6.556489552167477e-06, -0.002732830820605159, -0.0016683719586580992, -0.9418917298316956, -0.0006575806182809174, -0.6527708172798157, -0.43285229802131653, -0.01871265284717083, -0.005476234946399927, -0.0003196682082489133, -0.0025649527087807655, -0.00182235985994339, -0.49504587054252625, -0.05025395750999451, -0.0007563352701254189, -0.0042774854227900505, -0.035416748374700546, -0.17357861995697021, -2.90866428258596e-05, -0.003434831975027919, -0.0005863377591595054, -0.001971564954146743, -0.004926803521811962, -0.0001820160250645131, -0.0007414452848024666, -0.00429172907024622, -0.0010156240314245224, -0.0001230164198204875, -0.014139002189040184, -0.01167323999106884, -0.05700252205133438, -0.0038526849821209908, -0.10317647457122803, -0.405610054731369, -0.06603021919727325, -0.4690926969051361, -0.22472721338272095, -0.021069981157779694, -0.002333657816052437, -0.9922070503234863, -0.07354187965393066, -0.021765880286693573, -0.3563218414783478, -0.06300675123929977, -0.41052669286727905, -0.012173167429864407, -0.0007858763565309346, -0.0009777533123269677, -0.06908952444791794, -1.8019214868545532, -0.008510629646480083, -0.0001245659514097497, -5.4238757002167404e-05, -5.638440416078083e-05, -0.02683849446475506, -0.005404741503298283, -1.4168556928634644, -2.786405563354492, -0.14433932304382324, -0.043178491294384, -0.0006205302197486162, -0.11780083924531937, -0.0352388471364975, -0.06884551793336868, -0.33511486649513245, -0.002544382121413946, -0.0001515035255579278, -0.0002834395272657275, -0.3916143774986267, -0.06277088820934296, -0.002334252465516329, -0.00015567521040793508, -1.1324817933200393e-05, -0.01281726360321045, -0.0457233302295208, -0.06909241527318954, -0.0020038066431879997, -3.969590397900902e-05, -5.125868119648658e-05, -2.50339189733495e-06, -0.0015807764139026403, -0.012517105787992477, -0.00097977789118886, -0.012545477598905563, -0.00037472377880476415, -0.00010680581908673048, -3.313963316031732e-05, -9.179073458653875e-06, -0.00017891713650897145, -0.0022103183437138796, -0.08547841012477875, -0.07627130299806595, -0.0013402060139924288, -1.1587685346603394, -0.32792484760284424, -0.13737115263938904, -0.42371609807014465, -0.0007830176036804914, -0.09966614097356796, -1.1209861040115356, -1.4197990894317627, -0.6557137370109558, -0.015019543468952179, -0.0017855905462056398, -0.00029476112104021013, -0.0004012971476186067, -0.0006188622792251408, -0.0026578123215585947, -2.9205850296420977e-05, -0.0012281740782782435, -0.00038747431244701147, -0.0002809368306770921, -0.0006895071710459888, -0.0008089845650829375, -0.0764484629034996, -0.7715165615081787, -0.8941049575805664, -0.06051735579967499, -0.47762221097946167, -0.005487142130732536, -0.006750398315489292, -0.002321407664567232, -7.045020902296528e-05, -0.00015841660206206143, -0.33062615990638733, -0.10285212844610214, -0.05368229001760483, -6.556489552167477e-06, -0.00013445904187392443, -0.0007809926173649728, -0.0034627497661858797, -1.549708758830093e-05, -5.245195097813848e-06, -0.013531746342778206, -0.002895094221457839, -0.08504974097013474, -0.003106294432654977, -0.02568763680756092, -0.0013980624498799443, -1.2338095903396606, -3.576278118089249e-07, -8.344646857949556e-07, -1.7762025890988298e-05, -0.0001463782973587513, -0.10502694547176361], "finish_reason": "stop"}], "metrics": {"energy": 387.8161844158173, "energy_per_token": 1.5829232016972135, "time": 12.330811, "time_per_token": 0.050329840816326535}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input DataFrame should be a pandas DataFrame object.\")\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns.tolist()\n    else:\n        columns = [col for col in columns if col in df.columns]\n    df = df.copy()\n    for column in columns:\n        encoder = LabelEncoder()\n        encoder.fit(df[column])\n        df[column] = encoder.transform(df[column])\n    df = df.subtract(df.mean()).divide(df.std())\n    for key, value in dct.items():\n        df[columns] = df[columns].replace({key: value})\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " Data", "Frame", " should", " be", " a", " pandas", " Data", "Frame", " object", ".", "\"", ")", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", ".", "tol", "ist", "()", "\n", "    ", "else", ":", "\n", "        ", "columns", " =", " [", "col", " for", " col", " in", " columns", " if", " col", " in", " df", ".", "columns", "]", "\n", "    ", "df", " =", " df", ".", "copy", "()", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "encoder", " =", " Label", "Encoder", "()", "\n", "        ", "encoder", ".", "fit", "(", "df", "[", "column", "])", "\n", "        ", "df", "[", "column", "]", " =", " encoder", ".", "transform", "(", "df", "[", "column", "])", "\n", "    ", "df", " =", " df", ".", "sub", "t", "ract", "(", "df", ".", "mean", "())", ".", "div", "ide", "(", "df", ".", "std", "())", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "replace", "({", "key", ":", " value", "})", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -3.1998164653778076, -0.02132919244468212, -1.9522597789764404, -0.0056753926910459995, -0.38452255725860596, -0.1620853990316391, -0.09831257909536362, -0.004507144447416067, -3.3470451831817627, -0.316992849111557, -0.012894229963421822, -0.003247347194701433, -0.004502160008996725, -1.144337773323059, -0.6834518909454346, -0.5105645060539246, -0.13462252914905548, -0.18653173744678497, -0.008410628885030746, -0.023415710777044296, -0.0007003477076068521, -0.31939005851745605, -0.013962212949991226, -0.31014758348464966, -0.017348328605294228, -0.07989659905433655, -9.298280929215252e-06, -8.022463589441031e-05, -0.0002733095607254654, -0.09503110498189926, -0.20735818147659302, -0.47935017943382263, -0.01648414134979248, -0.005097606685012579, -0.0044381930492818356, -0.0018754289485514164, -1.1499496698379517, -0.14220675826072693, -0.2040112316608429, -0.00018356545479036868, -0.017582034692168236, -0.1265537589788437, -2.2002885341644287, -2.682172998902388e-05, -0.007438344415277243, -0.0003670972364488989, -0.1506456881761551, -0.007386279758065939, -0.8111857771873474, -0.7185544371604919, -0.11544337123632431, -0.000962032878305763, -0.0003810394846368581, -0.0666036382317543, -0.009859670884907246, -0.15534062683582306, -0.01889866404235363, -0.003023341065272689, -0.0315207913517952, -0.00858320202678442, -0.013929296284914017, -0.007249478716403246, -0.2364165335893631, -1.6577332019805908, -1.0506651401519775, -0.034304410219192505, -0.06425891071557999, -0.13530893623828888, -0.00824547465890646, -0.06294462829828262, -0.07653161138296127, -0.3497111201286316, -2.143160343170166, -0.007690346799790859, -0.014943445101380348, -0.000302030734019354, -0.002912448486313224, -0.0006089740199968219, -2.961190938949585, -0.0019587157294154167, -0.004160083830356598, -2.2172682292875834e-05, -0.0020435419864952564, -0.04614232853055, -0.00022063204960431904, -0.6745009422302246, -0.005911011714488268, -0.0006180283380672336, -0.013411191292107105, -0.007056670729070902, -0.006788761354982853, -0.00026901919045485556, -0.05561574175953865, -0.0030437828972935677, -0.0006105228094384074, -0.061471015214920044, -0.011287404224276543, -0.000442407006630674, -0.0016918168403208256, -0.0011470888275653124, -0.001693958998657763, -5.8887653722194955e-05, -0.0015418557450175285, -0.00021217002358753234, -0.0009029601933434606, -0.0001436368766007945, -2.4199192921514623e-05, -0.002464830409735441, -0.005143267568200827, -0.08320137858390808, -0.711308479309082, -1.6431095600128174, -0.06631507724523544, -0.019663872197270393, -3.627309799194336, -0.6595357656478882, -0.15465998649597168, -0.004717529751360416, -0.051776107400655746, -0.2491915076971054, -0.010026329196989536, -0.2662146985530853, -0.2846013903617859, -0.006874599494040012, -0.7409431338310242, -0.013983960263431072, -0.00914019625633955, -0.002477316651493311, -0.0006262486567720771, -0.0872860848903656, -0.03974024951457977, -0.020032702013850212, -0.4946747124195099, -0.8003062009811401, -0.155683696269989, -0.28187131881713867, -0.00013886917440686375, -0.001844849088229239, -1.5616295058862306e-05, -0.0003297977091278881, -0.0003182381624355912, -0.00028391621890477836, -0.001630882965400815, -0.0008298290777020156, -0.045254942029714584, -0.6062871217727661, -0.6534983515739441, -0.024372359737753868, -0.3634321093559265, -0.0062543852254748344, -0.023779552429914474, -0.0028638325165957212, -0.00025233422638848424, -0.0008093419019132853, -0.15495681762695312, -1.5759365558624268, -0.0077158985659480095, -0.006798470392823219, -0.025668000802397728, -0.0056990995071828365, -0.0029069806914776564, -0.017399292439222336, -0.018165647983551025, -0.0018722163513302803, -1.0862030982971191, -3.576278118089249e-07, -8.344646857949556e-07, -4.684815212385729e-05, -0.00012206286191940308, -0.0677993968129158], "finish_reason": "stop"}], "metrics": {"energy": 278.04956591987616, "energy_per_token": 1.4789870527652986, "time": 9.435871, "time_per_token": 0.050190803191489365}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if columns is None:\n        columns = df.select_dtypes(object).columns\n    else:\n        columns = set(columns) & set(df.columns)\n    for column in columns:\n        df[column] = LabelEncoder().fit_transform(df[column])\n    df[columns] = df[columns].apply(\n        lambda x: x - x.mean() / x.std()\n    )\n    for column in dct.keys():\n        df[column] = dct[column]\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "object", ")", ".", "columns", "\n", "    ", "else", ":", "\n", "        ", "columns", " =", " set", "(", "columns", ")", " &", " set", "(", "df", ".", "columns", ")", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "df", "[", "column", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " x", " -", " x", ".", "mean", "()", " /", " x", ".", "std", "()", "\n", "    ", ")", "\n", "    ", "for", " column", " in", " d", "ct", ".", "keys", "():", "\n", "        ", "df", "[", "column", "]", " =", " d", "ct", "[", "column", "]", "\n", "    ", "return", " df"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -1.8019359111785889, -0.0010790961096063256, -0.05139604210853577, -0.837733805179596, -0.008091527037322521, -0.6905882954597473, -0.011972944252192974, -0.0009289240115322173, -0.004171598702669144, -1.1735491752624512, -0.735027015209198, -0.36065569519996643, -0.11649920046329498, -0.18545645475387573, -0.006625115405768156, -0.01900229975581169, -0.0005840741214342415, -0.32096272706985474, -0.009688026271760464, -0.318819522857666, -0.017513509839773178, -0.09279171377420425, -1.2516897186287679e-05, -0.0001147919538198039, -0.00026127262390218675, -0.10680855065584183, -2.188119411468506, -0.006531675811856985, -0.005247035529464483, -0.003643305040895939, -0.285549521446228, -0.09497527778148651, -2.5624771118164062, -3.2543604902457446e-05, -0.007188882678747177, -0.0003480305604171008, -0.1271834820508957, -0.005451336968690157, -3.0475945472717285, -0.008495736867189407, -0.03728199005126953, -0.0014973392244428396, -1.0567766427993774, -0.5124022960662842, -0.0005389191792346537, -0.004726428538560867, -0.0035393708385527134, -0.014223506674170494, -0.0010032388381659985, -0.014475449919700623, -0.18280278146266937, -1.120002269744873, -1.444789171218872, -0.004908653907477856, -0.01193807739764452, -0.0006624649395234883, -0.0024619766045361757, -0.000902126485016197, -0.2685750424861908, -0.06317978352308273, -0.0003337303060106933, -0.0017733338754624128, -0.05901734158396721, -1.0473735332489014, -5.221230458118953e-05, -0.0026610223576426506, -0.00019047829846385866, -0.0023819427005946636, -0.004724885802716017, -0.00019274283840786666, -0.0006348263123072684, -0.008648204617202282, -0.001423894427716732, -0.00019405389321036637, -0.018971888348460197, -0.01312991976737976, -0.03803854435682297, -0.6648581027984619, -0.40932655334472656, -0.05080737546086311, -0.005796527955681086, -0.4088969826698303, -0.701675534248352, -0.003949699457734823, -0.002115037990733981, -0.0002609150833450258, -0.001700980355963111, -1.049753189086914, -0.000671042304020375, -1.4055830240249634, -0.0203858632594347, -0.09773295372724533, -0.21393263339996338, -0.0005422552349045873, -2.3235063552856445, -0.3083511292934418, -0.14158664643764496, -6.818538531661034e-05, -0.0057972390204668045, -0.10554422438144684, -0.0996064767241478, -0.02571784518659115, -5.900685573578812e-05, -0.0002320735511602834, -0.27473142743110657, -0.7474340796470642, -0.025678690522909164, -0.004422526806592941, -0.030457185581326485, -0.0222772266715765, -0.557813823223114, -1.6185781955718994, -1.1804345846176147, -0.19743695855140686, -0.00015984688070602715, -1.3154568672180176, -0.003190310439094901, -0.0016738465055823326, -0.0018565100617706776, -0.0008956949459388852, -0.11821654438972473, -0.10544005781412125, -0.020839892327785492, -0.0031974404118955135, -0.032925911247730255, -2.2051661014556885, -0.0023112983908504248, -0.021085621789097786, -0.0004640932602342218, -0.007742632180452347, -0.028227489441633224, -0.0441458560526371, -0.02450893260538578, -0.0028501623310148716], "finish_reason": "stop"}], "metrics": {"energy": 246.00806965255745, "energy_per_token": 1.6184741424510358, "time": 7.524774, "time_per_token": 0.04950509210526316}}
{"outputs": [{"text": "# Checking input\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' should be of type pandas.DataFrame\")\n\n    if columns is None:\n        cols = df.select_dtypes(object).columns.tolist()\n    else:\n        cols = columns\n\n    for col in cols:\n        df[col] = df[col].str.replace(list(dct.keys()), list(dct.values()), case=False)\n\n    if len(cols) > 0:\n        encoder = LabelEncoder()\n        for col in cols:\n            encoder.fit(df[col])\n            df[col] = encoder.transform(df[col])\n\n    df.std()\n    df.sub(df.mean(), axis=0)\n\n    return df", "tokens": ["#", " Check", "ing", " input", "\n", "    ", "if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " '", "df", "'", " should", " be", " of", " type", " pandas", ".", "DataFrame", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "cols", " =", " df", ".", "select", "_", "d", "types", "(", "object", ")", ".", "columns", ".", "tol", "ist", "()", "\n", "    ", "else", ":", "\n", "        ", "cols", " =", " columns", "\n", "\n", "    ", "for", " col", " in", " col", "s", ":", "\n", "        ", "df", "[", "col", "]", " =", " df", "[", "col", "]", ".", "str", ".", "replace", "(", "list", "(", "d", "ct", ".", "keys", "())", ",", " list", "(", "d", "ct", ".", "values", "())", ",", " case", "=", "False", ")", "\n", "\n", "    ", "if", " len", "(", "cols", ")", " >", " ", "0", ":", "\n", "        ", "encoder", " =", " Label", "Encoder", "()", "\n", "        ", "for", " col", " in", " col", "s", ":", "\n", "            ", "encoder", ".", "fit", "(", "df", "[", "col", "])", "\n", "            ", "df", "[", "col", "]", " =", " encoder", ".", "transform", "(", "df", "[", "col", "])", "\n", "\n", "    ", "df", ".", "std", "()", "\n", "    ", "df", ".", "sub", "(", "df", ".", "mean", "()", ",", " axis", "=", "0", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3783953189849854, -1.0152636766433716, -1.6499390602111816, -1.6819555759429932, -2.3645577430725098, -0.006659338716417551, -0.03466672822833061, -0.13337485492229462, -0.011953625828027725, -0.00023850933939684182, -0.012969191186130047, -0.00017963226127903908, -0.01678873784840107, -2.0146166207268834e-05, -0.05924173444509506, -0.0055564953945577145, -0.003991732373833656, -0.0015305483248084784, -0.027627339586615562, -0.031054137274622917, -5.304672595229931e-05, -0.15935832262039185, -0.20483648777008057, -0.43261009454727173, -3.172407627105713, -0.009727812372148037, -0.0013171101454645395, -2.087932586669922, -0.006030222401022911, -2.529607057571411, -0.08045871555805206, -1.4622547626495361, -0.09068373590707779, -0.0070208036340773106, -0.8218457698822021, -0.0017644088948145509, -0.003874890971928835, -0.35835233330726624, -0.0007643162389285862, -1.5713750123977661, -0.5230563879013062, -0.1384177953004837, -0.16393877565860748, -0.007151363417506218, -0.06167132034897804, -0.0010377742582932115, -2.944396495819092, -0.19503958523273468, -0.2636831998825073, -0.015474137850105762, -0.2773200571537018, -7.986990567587782e-06, -9.274052717955783e-05, -0.00020811776630580425, -0.1066778376698494, -1.767040729522705, -0.009165475144982338, -0.06564392894506454, -0.0032916669733822346, -1.3739136457443237, -0.2560370862483978, -0.06265848129987717, -0.0002857038634829223, -0.04725170508027077, -0.034226883202791214, -0.019214102998375893, -1.585470999998506e-05, -0.004345736000686884, -0.000248043768806383, -0.018948495388031006, -0.0009701313101686537, -0.12346654385328293, -0.012203904800117016, -0.13468307256698608, -0.0018364008283242583, -1.3084951639175415, -0.27364233136177063, -0.02341524511575699, -0.04072662070393562, -1.1920922133867862e-06, -0.00039152585668489337, -0.004673154558986425, -0.009668191894888878, -0.6438706517219543, -0.047784507274627686, -0.000606710382271558, -0.003979621455073357, -0.1714712232351303, -0.36415740847587585, -0.0037627865094691515, -0.00010287232726113871, -5.8410845667822286e-05, -0.0006126672378741205, -3.420905113220215, -0.0006759266252629459, -0.2570664882659912, -0.02826225757598877, -0.8705729246139526, -0.0011818574275821447, -0.0051028248853981495, -2.098061486321967e-05, -0.024911096319556236, -0.007385570090264082, -0.00021801002731081098, -0.0009377372916787863, -0.33079779148101807, -0.0003181189822498709, -0.000947622349485755, -5.817244164063595e-05, -4.124556289752945e-05, -7.402622577501461e-05, -1.3092617988586426, -0.005830779671669006, -1.2593567371368408, -0.01800631172955036, -0.010569545440375805, -0.02040093019604683, -0.02850756049156189, -0.3226991295814514, -0.023290986195206642, -2.5747485160827637, -0.5884749889373779, -0.00035506143467500806, -0.09126517176628113, -0.05324971303343773, -0.39652541279792786, -0.002539031207561493, -0.043417539447546005, -0.005338223185390234, -0.005575344432145357, -0.0020256969146430492, -1.766965389251709, -0.006395942065864801, -0.008170868270099163, -5.173549288883805e-05, -0.002928851405158639, -0.05313543602824211, -0.015455474145710468, -2.0043833255767822, -0.07246064394712448, -0.0030523398891091347, -0.023747308179736137, -1.07287787614041e-05, -0.000490068516228348, -0.002337463665753603, -0.001073142047971487, -1.030367136001587, -0.014093161560595036, -0.0002444683632347733, -0.056265030056238174, -0.016551798209547997, -0.0028864170890301466, -0.00024101213784888387, -0.06562460958957672, -0.002493369858711958, -0.02097531408071518, -0.03320939838886261, -0.004981250036507845, -0.0006895071710459888, -0.003478430677205324, -0.005453945603221655, -0.0034475435968488455, -0.0001387499796692282, -0.0020913651678711176, -0.0005248599336482584, -0.0017527469899505377, -0.00016211149340961128, -1.8000440832111053e-05, -0.0035437659826129675, -0.011481990106403828, -0.16985750198364258, -0.035019248723983765, -1.0377951860427856, -1.8044352531433105, -3.1117444038391113, -0.08884882181882858, -0.29359352588653564, -0.4314115345478058, -0.6638826131820679, -0.2893645763397217, -2.136516571044922, -0.21568477153778076, -0.005053959786891937, -0.0019378946162760258, -0.021065663546323776, -0.21878933906555176, -0.004752174485474825, -0.1824105978012085, -0.1153869777917862, -0.010697755962610245, -0.07579126209020615, -0.23679910600185394, -0.9691365957260132, -0.08428575843572617, -0.030656864866614342, -0.00688016414642334, -1.0035330057144165, -3.576278118089249e-07, -7.152555099310121e-07, -5.757642793469131e-05, -0.00016306500765495002, -0.09206515550613403], "finish_reason": "stop"}], "metrics": {"energy": 325.85836311340336, "energy_per_token": 1.61316021343269, "time": 10.051937, "time_per_token": 0.04976206435643565}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a dataframe.\")\n    for key, value in dct.items():\n        df[key] = df[columns].replace(key, value)\n    for column in columns:\n        df[column] = LabelEncoder().fit_transform(df[column])\n    df = df.std(axis=0)\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " should", " be", " a", " data", "frame", ".", "\"", ")", "\n", "    ", "for", " key", ",", " value", " in", " d", "ct", ".", "items", "():", "\n", "        ", "df", "[", "key", "]", " =", " df", "[", "columns", "]", ".", "replace", "(", "key", ",", " value", ")", "\n", "    ", "for", " column", " in", " columns", ":", "\n", "        ", "df", "[", "column", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "column", "])", "\n", "    ", "df", " =", " df", ".", "std", "(", "axis", "=", "0", ")", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -2.9048984050750732, -0.004201751668006182, -0.14067485928535461, -3.1577162742614746, -0.10785062611103058, -1.1137615442276, -0.06634541600942612, -0.0017109769396483898, -0.00498563889414072, -0.859546959400177, -1.8132150173187256, -1.5234352350234985, -0.3669867515563965, -0.49806809425354004, -0.00047088501742109656, -0.006693916395306587, -1.9550132492440753e-05, -0.0023655309341847897, -0.0013705631718039513, -0.0004906642716377974, -0.008428715169429779, -0.0032206117175519466, -0.25344300270080566, -0.41390201449394226, -0.29911521077156067, -0.010887740179896355, -0.05029590427875519, -0.05612991005182266, -0.0319194532930851, -2.4081761837005615, -0.13297344744205475, -0.0709853395819664, -1.2567338943481445, -0.08918983489274979, -0.635115921497345, -0.0021112312097102404, -0.018913988023996353, -0.037577103823423386, -0.05744495987892151, -0.14547930657863617, -1.8189270496368408, -0.9568389654159546, -0.02584133855998516, -0.8226082921028137, -0.10430300235748291, -0.007125205360352993, -0.003436732804402709, -1.595183253288269, -0.032386746257543564, -0.014410707168281078, -0.009567243978381157, -0.05057802051305771, -0.08450937271118164, -5.9126061387360096e-05, -0.002863594563677907, -0.0005433275364339352, -0.001379610737785697, -0.01579722948372364, -0.0003026265767402947, -0.0013099670177325606, -0.02175235003232956, -0.005343559198081493, -0.013177215121686459, -0.01416297908872366, -0.017094412818551064, -0.07034720480442047, -0.5346662402153015, -2.0689377784729004, -0.11856971681118011, -0.06543503701686859, -1.2126212120056152, -1.515622854232788, -0.23346219956874847, -0.0438389852643013, -0.010842340998351574, -0.17978249490261078, -0.6319496631622314, -0.026752496138215065, -0.2987472712993622, -0.007871441543102264, -0.8082317113876343, -0.024357352405786514, -1.1907850503921509], "finish_reason": "stop"}], "metrics": {"energy": 154.79083629226685, "energy_per_token": 1.5325825375471964, "time": 5.251746, "time_per_token": 0.05199748514851485}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input dataframe is not a pandas DataFrame.\")\n\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns\n    df[columns] = df[columns].apply(\n        lambda x: x.replace(**dct))\n\n    return df.apply(LabelEncoder().fit_transform)", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", "frame", " is", " not", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "columns", " =", " df", ".", "select", "_", "d", "types", "(", "include", "=['", "object", "'])", ".", "columns", "\n", "    ", "df", "[", "columns", "]", " =", " df", "[", "columns", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " x", ".", "replace", "(", "**", "d", "ct", "))", "\n", "\n", "    ", "return", " df", ".", "apply", "(", "Label", "Encoder", "()", ".", "fit", "_", "transform", ")", "\n", "\n", "if"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -1.8817508220672607, -1.4528855085372925, -0.7995194792747498, -0.032412365078926086, -0.2218121886253357, -0.8283349275588989, -0.28153908252716064, -0.03820103034377098, -0.5645239949226379, -0.03309499844908714, -0.001852583372965455, -0.005171493627130985, -0.4343755543231964, -0.0008287570672109723, -0.8785153031349182, -0.22301603853702545, -0.12062359601259232, -0.10140205919742584, -0.005401421803981066, -0.02688746713101864, -0.0007699147681705654, -0.4378125071525574, -0.015490218997001648, -0.36678826808929443, -0.019506996497511864, -0.09237551689147949, -1.645074735279195e-05, -8.082063141046092e-05, -0.0002356490003876388, -0.10900621861219406, -0.2531898319721222, -0.45901912450790405, -0.012441640719771385, -0.007210186216980219, -0.0046945116482675076, -0.0017057405784726143, -0.47451260685920715, -1.0836442708969116, -1.6683317422866821, -0.4126763939857483, -0.0037905762437731028, -0.0023503080010414124, -0.05280711501836777, -0.09106460958719254, -0.00284445658326149, -0.00039498155820183456, -9.703165414975956e-05, -0.002177488524466753, -0.49477335810661316, -0.0033625985961407423, -2.6825196743011475, -0.024439483880996704, -0.2654094994068146, -0.4472271502017975, -0.0006484074983745813, -1.301130771636963, -0.014877558685839176, -1.0344765186309814, -0.012300819158554077, -0.6305469274520874, -0.02962994948029518, -2.7894584491150454e-05, -0.9348253607749939, -0.3993719816207886, -1.3364005088806152, -0.0004731489170808345, -3.4391674995422363, -0.3890036940574646, -0.21576817333698273, -0.9220425486564636, -0.010526254773139954, -1.451377034187317, -0.0001284993631998077, -0.004980419762432575, -0.0012896086554974318, -0.005765948910266161, -0.004532183986157179, -0.0003070359816774726, -0.4151827394962311, -0.6497829556465149, -0.10364656150341034, -1.2041290998458862], "finish_reason": "stop"}], "metrics": {"energy": 162.8313073787689, "energy_per_token": 1.6283130737876892, "time": 4.81042, "time_per_token": 0.0481042}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a pandas DataFrame\")\n    if not isinstance(dct, dict):\n        raise ValueError(\"Input dictionary is not a dict\")\n    if columns is None:\n        for c in df.columns:\n            if df[c].dtype == 'object':\n                df[c] = LabelEncoder().fit_transform(df[c])\n    else:\n        for c in columns:\n            if df[c].dtype == 'object':\n                df[c] = LabelEncoder().fit_transform(df[c])\n    df[columns] = StandardScaler().fit_transform(df[columns])\n    return df", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " data", " is", " not", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "d", "ct", ",", " dict", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " dictionary", " is", " not", " a", " dict", "\"", ")", "\n", "    ", "if", " columns", " is", " None", ":", "\n", "        ", "for", " c", " in", " df", ".", "columns", ":", "\n", "            ", "if", " df", "[", "c", "]", ".", "d", "type", " ==", " '", "object", "':", "\n", "                ", "df", "[", "c", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "c", "])", "\n", "    ", "else", ":", "\n", "        ", "for", " c", " in", " columns", ":", "\n", "            ", "if", " df", "[", "c", "]", ".", "d", "type", " ==", " '", "object", "':", "\n", "                ", "df", "[", "c", "]", " =", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "df", "[", "c", "])", "\n", "    ", "df", "[", "columns", "]", " =", " Standard", "Scal", "er", "()", ".", "fit", "_", "transform", "(", "df", "[", "columns", "])", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.17574520409107208, -0.20165549218654633, -0.016349518671631813, -0.00017438798386137933, -0.014320342801511288, -0.00017271934484597296, -0.01840255595743656, -2.5152843591058627e-05, -0.05571744590997696, -0.004787292331457138, -0.006308523006737232, -0.001855796086601913, -0.018610622733831406, -0.012062578462064266, -4.8636207793606445e-05, -0.1411096304655075, -0.1289072185754776, -0.4449330270290375, -1.8817508220672607, -1.3501328229904175, -0.019327646121382713, -0.04671395197510719, -1.0490678548812866, -0.055098600685596466, -0.010094070807099342, -1.2714499235153198, -0.001277822069823742, -0.0054123299196362495, -1.1499810218811035, -0.7036392092704773, -1.4363312721252441, -0.7290753722190857, -0.00011503035057103261, -0.2505727708339691, -1.4543427823809907e-05, -0.0013493727892637253, -0.008837751112878323, -0.023473119363188744, -0.0022136487532407045, -0.00046528480015695095, -0.007200481370091438, -0.0762312114238739, -0.00011657988943625242, -0.003701859852299094, -0.009340988472104073, -0.838833212852478, -0.23527856171131134, -0.041635528206825256, -0.016802452504634857, -0.1438896358013153, -2.6907074451446533, -0.1005040779709816, -0.00019441144831944257, -0.0007580029196105897, -0.36142346262931824, -0.26022231578826904, -0.4124932587146759, -0.14189474284648895, -0.28843194246292114, -0.009895790368318558, -0.015727292746305466, -0.0008164886385202408, -3.193652868270874, -3.047464370727539, -0.10298043489456177, -0.0367150604724884, -0.06562405824661255, -0.16755956411361694, -0.029392214491963387, -0.0028398206923156977, -0.0009003399754874408, -0.08756943047046661, -0.2242969274520874, -0.014906920492649078, -0.002020343439653516, -0.00022909401741344482, -4.136476854910143e-05, -0.007758838124573231, -0.1948787122964859, -0.07185762375593185, -0.5356967449188232, -0.09957043081521988, -0.01822488009929657, -0.010676054283976555, -0.0011150578502565622, -0.3010454773902893, -0.02045617625117302, -0.0006717570940963924, -0.005217032972723246, -0.013481291010975838, -0.12274317443370819, -5.2927523938706145e-05, -0.0028505190275609493, -0.0007047553663142025, -0.0016019619069993496, -0.002520481590181589, -0.00024184639914892614, -0.0005972985527478158, -0.004743988160043955, -0.0007277462864294648, -0.0001578206429257989, -0.02342374622821808, -0.006175721064209938, -0.15036119520664215, -0.06166201829910278, -6.389413465512916e-05, -0.002236367203295231, -0.0013642538106068969, -0.08190903067588806, -0.185777947306633, -0.0028928357642143965, -0.018602197989821434, -0.0004215544031467289, -0.0008011230966076255, -0.0011360150529071689, -0.3431037664413452, -0.1196674183011055, -0.005277392920106649, -0.0010751663940027356, -0.00013958434283267707, -0.00012337400403339416, -0.0002097863471135497, -0.0010890988633036613, -0.005121327005326748, -0.0055476040579378605, -0.0030841901898384094, -0.0012762743281200528, -0.0011247029760852456, -0.00039664984797127545, -0.012319894507527351, -0.0013055619783699512, -0.00046302087139338255, -0.0004471732536330819, -0.0050195627845823765, -0.0014531777705997229, -8.749579137656838e-05, -0.0006126672378741205, -0.00011622230522334576, -0.0009515525307506323, -0.0006461439770646393, -2.1576648578047752e-05, -0.00010144196130568162, -0.00032360086333937943, -0.0001674750237725675, -0.0007894498412497342, -0.00017557987303007394, -0.001116010476835072, -0.1318238079547882, -0.926970362663269, -0.5924750566482544, -0.3978991210460663, -0.03823017701506615, -0.16837798058986664, -2.695828676223755, -0.00019691436318680644, -4.887569048150908e-06, -0.005912907887250185, -0.00013064485392533243, -0.005964457057416439, -0.07390676438808441, -0.0004020121123176068, -0.001821169862523675, -0.019293736666440964, -0.03292914107441902, -0.001335324952378869, -0.015736445784568787, -0.012933417223393917, -0.0282693263143301, -0.0359082855284214, -0.003945781383663416, -0.6657059192657471, -0.028731143102049828, -1.0703389644622803], "finish_reason": "stop"}], "metrics": {"energy": 250.08099434661867, "energy_per_token": 1.4455548806162928, "time": 8.607014, "time_per_token": 0.049751526011560694}}
