{"outputs": [{"text": "statuses = []\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            local_path = os.path.join(root, file)\n            statuses.append(upload(local_path, url, metadata))\n            time.sleep(1)\n\n    return statuses", "tokens": ["status", "es", " =", " []", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "local", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "status", "es", ".", "append", "(", "upload", "(", "local", "_", "path", ",", " url", ",", " metadata", "))", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " stat", "uses", "\n", "\n", "def"], "logprobs": [-2.5772056579589844, -1.7786930799484253, -0.021510867401957512, -0.03361695632338524, -0.045989666134119034, -0.4096793234348297, -1.3812021017074585, -0.2952285706996918, -0.036849040538072586, -3.6238969187252223e-05, -0.0008580578723922372, -0.013221685774624348, -0.4168702960014343, -0.0012062662281095982, -0.008584737777709961, -0.016650402918457985, -0.02043328434228897, -0.003381607821211219, -0.06824565678834915, -0.004037325270473957, -0.0003424296446610242, -0.0001541257370263338, -1.509556770324707, -0.9152397513389587, -0.0013368725776672363, -0.8729790449142456, -1.9224443435668945, -0.002004639245569706, -0.4832136631011963, -0.0007049936102703214, -0.00021562635083682835, -0.017905382439494133, -0.0010794533882290125, -0.0026242840103805065, -0.002779313363134861, -8.034383063204587e-05, -0.0023063032422214746, -0.003584865713492036, -0.09610089659690857, -0.009830750524997711, -0.013822780922055244, -0.17993566393852234, -0.37613070011138916, -0.26797768473625183, -0.0029218385461717844, -0.00033420699764974415, -0.003742002882063389, -0.017174098640680313, -4.306139945983887, -0.06767084449529648, -0.7646986842155457, -0.00552899157628417, -0.023367151618003845, -3.242440288886428e-05, -0.00010311071673640981, -0.005576055962592363, -0.00784210953861475, -0.00020644917094614357, -0.012632353231310844, -0.0018461579456925392, -0.002763977972790599, -0.0005131834768690169, -0.011780220083892345, -0.031718410551548004, -3.4156334400177, -0.5167785286903381, -0.03857467323541641, -0.03386671096086502, -0.05743291601538658, -0.7070780992507935, -1.41206693649292, -1.6362557411193848, -0.0011960265692323446, -0.0001879753835964948, -0.00890368316322565, -0.08256211131811142, -0.013968090526759624, -0.230039581656456, -0.12283796072006226, -0.006197875365614891, -0.24834264814853668, -0.08543846756219864, -0.0003064401389565319, -0.00020811776630580425, -0.00044967554276809096, -0.07306119054555893, -0.014025808311998844, -0.05031755566596985, -0.6219921708106995, -0.014492603950202465, -0.02796727977693081, -0.012171990238130093, -8.868777513271198e-05, -0.00783962570130825, -0.0046159615740180016, -0.05944450944662094], "finish_reason": "stop"}], "metrics": {"energy": 162.23563437843322, "energy_per_token": 1.689954524775346, "time": 5.428646, "time_per_token": 0.05654839583333333}}
{"outputs": [{"text": "try:\n        os.listdir(directory)\n    except FileNotFoundError as error:\n        raise FileNotFoundError(error)\n    try:\n        if not url.startswith(\"http\"):\n            raise TypeError(f\"url should be valid\")\n    except TypeError as error:\n        raise TypeError(error)\n    if not os.path.isdir(directory):\n        print(f\"{directory} is not a directory\")\n        raise FileNotFoundError(f\"{directory} is not a directory\")\n\n    status = []\n    for file_name in os.listdir(directory):\n        print(f\"Uploading {file_name} to {url}\")\n        with open(os.path.join(directory, file_name)) as file:\n            data = file.read()\n            response = requests.post(url, headers=HEADERS, data=data, metadata=metadata)\n            status.append(response.status_code)\n            time.sleep(1)\n\n    return status", "tokens": ["try", ":", "\n", "        ", "os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "except", " File", "NotFound", "Error", " as", " error", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "error", ")", "\n", "    ", "try", ":", "\n", "        ", "if", " not", " url", ".", "start", "sw", "ith", "(", "\"", "http", "\"", "):", "\n", "            ", "raise", " Type", "Error", "(", "f", "\"", "url", " should", " be", " valid", "\"", ")", "\n", "    ", "except", " Type", "Error", " as", " error", ":", "\n", "        ", "raise", " Type", "Error", "(", "error", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "print", "(", "f", "\"", "{", "directory", "}", " is", " not", " a", " directory", "\"", ")", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "{", "directory", "}", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "status", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "print", "(", "f", "\"", "Upload", "ing", " {", "file", "_", "name", "}", " to", " {", "url", "}\"", ")", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", "))", " as", " file", ":", "\n", "            ", "data", " =", " file", ".", "read", "()", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "data", ",", " metadata", "=", "metadata", ")", "\n", "            ", "status", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.07554292678833, -0.0006430465145967901, -0.00827727746218443, -0.026582449674606323, -2.177077054977417, -0.001683605252765119, -1.8336621522903442, -0.00015400654228869826, -0.05482497811317444, -0.01499758381396532, -0.001456272671930492, -0.09400216490030289, -0.15126800537109375, -0.002197947818785906, -0.09252767264842987, -8.070142939686775e-05, -1.0847986231965479e-05, -2.336327075958252, -2.6627750396728516, -0.011958691291511059, -0.011210313066840172, -0.004290186334401369, -0.5523505210876465, -0.2564501464366913, -0.0006347072194330394, -0.00031287543242797256, -0.12421781569719315, -0.7714166045188904, -0.17609252035617828, -0.04181378334760666, -1.1560063362121582, -1.8798470497131348, -0.00036816971260122955, -0.00148781668394804, -0.005402607377618551, -2.41964054107666, -0.3449138104915619, -0.4538678526878357, -0.11998465657234192, -0.38410916924476624, -0.0003833036171272397, -3.576278118089249e-07, -1.0450401306152344, -0.14767536520957947, -0.48582029342651367, -0.43309715390205383, -0.1433749943971634, -0.01619294285774231, -0.004349771421402693, -0.03664737567305565, -0.07605069875717163, -0.000129691296024248, -0.27164366841316223, -1.7578638792037964, -0.18114788830280304, -2.880643606185913, -2.0418624877929688, -0.9919012188911438, -2.2858986854553223, -2.684741973876953, -0.004968913737684488, -0.0023401989601552486, -0.37973615527153015, -0.005214542616158724, -0.3596484065055847, -0.00015317220822907984, -0.06694786995649338, -0.18835945427417755, -0.006732044741511345, -0.005306919105350971, -0.002486948622390628, -0.10303410142660141, -0.12414137274026871, -9.226373367710039e-05, -0.004774716682732105, -0.04234480485320091, -0.004489818122237921, -0.0015687552513554692, -0.7087771892547607, -3.2680001258850098, -0.6798441410064697, -0.2888930141925812, -0.0002898749662563205, -0.1107780858874321, -0.04031600058078766, -0.22795791923999786, -0.029174568131566048, -0.0010001424234360456, -0.006489631254225969, -0.016734696924686432, -0.017201635986566544, -0.004204125609248877, -2.886772394180298, -0.07937193661928177, -0.6543489098548889, -0.07833347469568253, -0.8865498304367065, -0.09587758779525757, -0.0246130358427763, -0.31686878204345703, -0.07082909345626831, -0.1057143360376358, -0.2754473090171814, -0.3484252095222473, -0.001884352881461382, -0.0037567296531051397, -0.5018730759620667, -2.6430137157440186, -0.3276256024837494, -0.013051440939307213, -0.00034898388548754156, -0.7564360499382019, -0.47310519218444824, -0.00929398275911808, -0.07424593716859818, -0.010003550909459591, -0.013460591435432434, -0.042055897414684296, -0.004447687417268753, -0.007046135608106852, -0.007472303695976734, -0.02255302481353283, -0.0005149707430973649, -0.0028003547340631485, -1.2468857765197754, -0.003723238129168749, -1.8003129959106445, -2.0473780632019043, -0.05060669407248497, -0.02786584384739399, -0.1515689194202423, -0.5492414236068726, -0.8797997236251831, -1.39933443069458, -0.19962602853775024, -0.0315159410238266, -0.012952716089785099, -0.00011836781777674332, -0.0024525821208953857, -9.775113539944869e-06, -0.0013956816401332617, -0.0020626953337341547, -0.0012866322649642825, -0.018189528957009315, -0.029692789539694786, -2.822478771209717, -0.021215641871094704, -0.5774136185646057, -0.042717475444078445, -0.6579082012176514, -0.02266525663435459, -0.36029183864593506, -0.07577192038297653, -0.0004832768754567951, -8.225102646974847e-05, -0.3243461549282074, -0.9040008187294006, -0.06090675666928291, -0.02502143569290638, -0.2160494327545166, -0.0065731266513466835, -0.00417480431497097, -0.027332060039043427, -1.031950831413269, -0.0273745134472847, -0.002601098734885454, -0.6957542300224304, -0.0028559870552271605, -0.0002015625941567123, -0.002807843731716275, -0.0007020154735073447, -0.00013040646445006132, -0.0013235389487817883, -0.0004994813934899867, -0.007196338847279549, -0.00014768941036891192, -2.622600959512056e-06, -2.8198349475860596, -0.0005610798834823072, -0.3940327763557434, -0.04464646056294441, -0.0067289662547409534, -0.011481047607958317, -2.324091911315918, -0.012530761770904064, -0.8788923621177673, -0.0013802058529108763, -0.0011651878012344241, -0.004697359632700682, -0.060896437615156174, -0.3448682129383087, -0.52116858959198, -0.008543725125491619, -0.006963271647691727, -0.0001811817055568099, -0.10031096637248993, -0.0010004997020587325, -0.3911714255809784, -0.2583068311214447, -2.059206485748291, -0.023588042706251144, -0.0018171241972595453, -6.758938252460212e-05, -0.0014584152959287167, -0.1322494000196457, -0.004106423351913691, -0.4903496205806732, -0.6454717516899109, -1.1024194955825806, -0.027427518740296364, -0.22647584974765778, -0.04943511635065079, -0.014796162955462933, -0.08959145098924637, -0.434067964553833, -0.017923766747117043, -0.003414635546505451, -0.006956050638109446, -0.01975901424884796, -0.004645863547921181, -0.005161412991583347, -0.004222525749355555, -3.802703940891661e-05, -0.0008935510995797813, -0.007391604594886303, -0.21361255645751953, -0.17429189383983612, -0.00023672162205912173, -0.00013445904187392443, -0.000303818320389837, -0.05952931568026543, -0.019886285066604614, -0.08219532668590546, -1.471284031867981, -0.037291523069143295, -0.0874922126531601, -0.009904288686811924, -0.9829626679420471, -1.1920922133867862e-06, -4.768370445162873e-07, -1.585470999998506e-05, -6.97350042173639e-05, -2.2739017009735107, -0.004001587629318237], "finish_reason": "stop"}], "metrics": {"energy": 364.36020177650425, "energy_per_token": 1.4932795154774765, "time": 12.325908, "time_per_token": 0.05051601639344262}}
{"outputs": [{"text": "# Check if the directory exists and raise FileNotFoundError if not.\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n\n    # Raise TypeError if URL is invalid.\n    if not url.startswith('https://'):\n        raise TypeError(url)\n\n    # Get a list of all files in the directory and its subdirectories.\n    files = []\n    for root, dirs, _ in os.walk(directory):\n        for file in files:\n            if file not in files:\n                files.append(file)\n\n    # Create a list of upload responses.\n    uploads = []\n    # Upload all files\n    for file in files:\n        with open(file, 'rb') as f:\n            r = requests.post(\n                url + '/upload',\n                data=json.dumps(metadata),\n                headers=HEADERS,\n                files={'file': ('metadata.json', f, 'application/json')})\n            uploads.append(r.status_code)\n            time.sleep(1)\n\n    return upload", "tokens": ["#", " Check", " if", " the", " directory", " exists", " and", " raise", " File", "NotFound", "Error", " if", " not", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", ")", "\n", "\n", "    ", "#", " Ra", "ise", " Type", "Error", " if", " URL", " is", " invalid", ".", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "https", "://", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "url", ")", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " all", " files", " in", " the", " directory", " and", " its", " sub", "direct", "ories", ".", "\n", "    ", "files", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " _", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " file", " not", " in", " files", ":", "\n", "                ", "files", ".", "append", "(", "file", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " upload", " responses", ".", "\n", "    ", "uploads", " =", " []", "\n", "    ", "#", " Upload", " all", " files", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "r", " =", " requests", ".", "post", "(", "\n", "                ", "url", " +", " '/", "upload", "'", ",", "\n", "                ", "data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", "\n", "                ", "headers", "=", "HEAD", "ERS", ",", "\n", "                ", "files", "={", "'", "file", "':", " ('", "metadata", ".", "json", "'", ",", " f", ",", " '", "application", "/", "json", "')", "})", "\n", "            ", "uploads", ".", "append", "(", "r", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " upload"], "logprobs": [-0.9795613884925842, -1.430532693862915, -0.5855873227119446, -0.2352607548236847, -0.1936754584312439, -0.03338154777884483, -2.929184675216675, -1.2141344547271729, -0.29868996143341064, -0.0010066924151033163, -0.010324403643608093, -0.07510897517204285, -0.9241470098495483, -1.434037685394287, -0.004023552872240543, -0.01401029247790575, -0.0631064772605896, -0.054420895874500275, -0.004188693594187498, -1.6927575416048057e-05, -0.0004027270770166069, -0.007216577418148518, -0.3744467496871948, -0.0007753941463306546, -0.0044511291198432446, -0.009351853281259537, -0.0033092519734054804, -0.0016515913885086775, -0.02597062662243843, -0.0018181951018050313, -0.00011884459672728553, -6.12716976320371e-05, -0.3393234610557556, -2.226116418838501, -0.34815821051597595, -0.0024087007623165846, -0.21879135072231293, -0.0030115749686956406, -0.17911061644554138, -3.655282497406006, -0.049924347549676895, -0.1716073900461197, -0.0018720973748713732, -0.10401351004838943, -3.10274600982666, -0.06844260543584824, -0.31307172775268555, -0.22649163007736206, -0.005749237257987261, -0.003064580960199237, -0.2519698143005371, -0.11500483751296997, -0.42215588688850403, -0.1456802636384964, -0.12383924424648285, -9.011816291604191e-05, 0.0, -0.5794544219970703, -0.9874182343482971, -0.29932963848114014, -0.02861669287085533, -0.3215627372264862, -0.006310892291367054, -0.0008741371566429734, -0.017072616145014763, -0.012427041307091713, -0.00014077626110520214, -0.20345085859298706, -0.13939303159713745, -0.0200982503592968, -0.0017556030070409179, -0.037061575800180435, -0.0012272215681150556, -0.24339456856250763, -2.209040880203247, -1.2316950559616089, -0.0437796525657177, -0.0042774854227900505, -0.41544100642204285, -0.2272951304912567, -0.12269382178783417, -0.015395491383969784, -0.13000953197479248, -2.51444149017334, -2.5002498626708984, -0.01914849691092968, -0.009264101274311543, -7.4741430580616e-05, -0.16696234047412872, -0.005060127470642328, -0.0030840712133795023, -0.6273182034492493, -0.14899705350399017, -0.6076263189315796, -0.0025403392501175404, -0.045475151389837265, -0.031623475253582, -0.29699575901031494, -0.0017341827042400837, -0.40139371156692505, -0.00033146608620882034, -9.798523387871683e-05, -2.110037326812744, -0.17355437576770782, -0.0027567262295633554, -8.22540732769994e-06, -2.3603161025675945e-05, -0.0025362963788211346, -0.0023843212984502316, -0.06747005879878998, -0.004420865327119827, -0.0010163385886698961, -0.09395897388458252, -0.7309039235115051, -0.15573979914188385, -2.6068689823150635, -0.0729677751660347, -0.006339558865875006, -0.002727481070905924, -0.548495352268219, -0.3136645555496216, -2.1392314434051514, -0.00024172721896320581, -0.2394857257604599, -0.06355930864810944, -0.01255913358181715, -0.0010350352386012673, -0.0437423400580883, -0.01905095763504505, -0.01465308852493763, -0.0035666918847709894, -0.20942676067352295, -0.005669228732585907, -0.0034243774134665728, -0.18044805526733398, -0.012390424497425556, -0.1519969403743744, -2.5433759689331055, -0.2755029797554016, -0.6699264645576477, -1.208001971244812, -2.653416156768799, -0.8762375712394714, -0.5630504488945007, -0.016794482246041298, -0.0022077015601098537, -3.670844078063965, -0.07304146885871887, -0.027863292023539543, -0.0022031813859939575, -1.4593698978424072, -1.4024111032485962, -2.4617390632629395, -1.4445490837097168, -0.09206917881965637, -3.955742597579956, -0.012821500189602375, -0.08289682865142822, -0.13551601767539978, -0.02518698200583458, -0.00816211849451065, -0.0018625784432515502, -0.0015956539427861571, -0.041326284408569336, -1.6382354497909546, -0.024463914334774017, -0.011209134012460709, -0.16444285213947296, -0.08197690546512604, -0.11721809208393097, -0.013587725348770618, -0.0032834685407578945, -0.0007877822499722242, -0.24306423962116241, -0.05009806901216507, -0.012734051793813705, -0.02035759575664997, -3.034240245819092, -0.010084747336804867, -0.011595825664699078, -0.0001538873475510627, -0.17843957245349884, -0.019092710688710213, -2.2459468841552734, -0.009536780416965485, -0.09527216106653214, -0.7422964572906494, -0.3372124135494232, -1.2443325519561768, -0.33370348811149597, -0.0034514637663960457, -0.5175310969352722, -0.0008737798780202866, -1.1850205659866333, -0.482636958360672, -0.24336157739162445, -0.000163541772053577, -0.0014857931528240442, -0.00014423283573705703, -0.5429887771606445, -0.40984606742858887, -0.062106654047966, -0.04461396858096123, -0.02606888674199581, -0.0008563903393223882, -0.8180099129676819, -0.013796914368867874, -0.002779313363134861, -3.766942609217949e-05, -0.04306260123848915, -0.021875867620110512, -0.006743293721228838, -0.018733127042651176, -0.1301981508731842, -0.3031848967075348, -0.1598082184791565, -0.027308396995067596, -2.1046361923217773, -3.4490957260131836, -0.30467724800109863, -0.10082195699214935, -0.006377819459885359, -0.0011238694423809648, -0.018159911036491394, -0.38966596126556396, -0.07458046823740005, -0.08773192763328552, -0.0030917960684746504, -0.01912732794880867, -1.401406168937683, -0.20421195030212402, -0.014888128265738487, -0.7460359334945679, -0.3885986804962158, -0.0028960451018065214, -0.003993394784629345, -0.020305732265114784, -0.03475654125213623, -0.10462955385446548, -0.04255811870098114, -0.002558531705290079, -4.3987260141875595e-05, -0.0031115233432501554, -0.010470458306372166, -0.5453999042510986, -0.26566123962402344, -0.0001333863037871197, -0.00031513971043750644, -0.000825898430775851, -0.08701501041650772, -0.030446894466876984, -0.07428257167339325, -0.358235627412796, -0.02566753700375557, -0.31765875220298767, -0.059172749519348145], "finish_reason": "length"}], "metrics": {"energy": 382.88040334892247, "energy_per_token": 1.4956265755817284, "time": 12.948977, "time_per_token": 0.05058194140625}}
{"outputs": [{"text": "# Check the validity of the url\n    if not url.startswith(('http://', 'https://')):\n        raise TypeError('Invalid URL')\n\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'{directory} does not exist')\n\n    # Open the upload queue file\n    with open('upload_queue.json', 'r+') as file:\n        queue = json.load(file)\n\n    # If there are no files to upload, return empty list\n    if not queue:\n        return []\n\n    # Get the current upload speed limit\n    try:\n        with open(\"speed_limit.txt\", \"r\") as file:\n            limit = file.readline().strip()\n    except FileNotFoundError:\n        limit = 0\n\n    # Upload all files from the queue\n    status_codes = []\n    for file_name, data in queue.items():\n        metadata = data['metadata']\n        file_path = os.path.join(directory, file_name)\n        filesize =", "tokens": ["#", " Check", " the", " validity", " of", " the", " url", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "(", "('", "http", "://", "'", ",", " '", "https", "://", "'))", ":", "\n", "        ", "raise", " Type", "Error", "('", "Invalid", " URL", "')", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "'{", "directory", "}", " does", " not", " exist", "')", "\n", "\n", "    ", "#", " Open", " the", " upload", " queue", " file", "\n", "    ", "with", " open", "('", "upload", "_", "queue", ".", "json", "'", ",", " '", "r", "+", "')", " as", " file", ":", "\n", "        ", "queue", " =", " json", ".", "load", "(", "file", ")", "\n", "\n", "    ", "#", " If", " there", " are", " no", " files", " to", " upload", ",", " return", " empty", " list", "\n", "    ", "if", " not", " queue", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "#", " Get", " the", " current", " upload", " speed", " limit", "\n", "    ", "try", ":", "\n", "        ", "with", " open", "(", "\"", "speed", "_", "limit", ".", "txt", "\"", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "limit", " =", " file", ".", "read", "line", "()", ".", "strip", "()", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "limit", " =", " ", "0", "\n", "\n", "    ", "#", " Upload", " all", " files", " from", " the", " queue", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " file", "_", "name", ",", " data", " in", " queue", ".", "items", "():", "\n", "        ", "metadata", " =", " data", "['", "metadata", "']", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "        ", "files", "ize", " ="], "logprobs": [-0.9795613884925842, -1.430532693862915, -3.173771619796753, -2.0680456161499023, -0.00497520063072443, -0.06331988424062729, -1.1695425510406494, -0.537068784236908, -0.013475293293595314, -0.33146390318870544, -0.12540870904922485, -0.5810583829879761, -0.26430800557136536, -0.08382303267717361, -8.022463589441031e-05, -2.3841855067985307e-07, -1.2991549968719482, -2.1658010482788086, -0.22352685034275055, -0.6172962784767151, -0.0062028514221310616, -0.0003387354372534901, -0.005935305263847113, -0.003177833277732134, -0.0024624522775411606, -0.03548382595181465, -0.07208702713251114, -0.004578701686114073, -0.0019464610377326608, -0.04758287966251373, -0.030398674309253693, -3.075552376685664e-05, -0.790655791759491, -0.7501616477966309, -0.39873579144477844, -0.6708499193191528, -0.0018715023761615157, -0.2401968240737915, -0.0010644490830600262, -0.14247331023216248, -0.3254314661026001, -0.7129915356636047, -0.12326506525278091, -0.16977964341640472, -0.04546068608760834, -0.172978475689888, -0.001683486276306212, -0.03365994989871979, -0.0363425612449646, -0.0024733925238251686, -8.583032467868179e-06, -0.0002646096108946949, -0.012560192495584488, -0.734398365020752, -0.0005142558366060257, -0.0002759314374998212, -0.0014325842494145036, -0.003780600382015109, -0.0006634180317632854, -0.0005783553933724761, -0.019195275381207466, -0.0022257810924202204, -0.00043704494601115584, -0.00016211149340961128, -0.763999879360199, -0.460559606552124, -1.9599015712738037, -0.008831016719341278, -0.021815219894051552, -0.7382491230964661, -0.002067572670057416, -0.026395773515105247, -0.21423347294330597, -0.00040415700641460717, -0.022934656590223312, -0.0008466235012747347, -0.2865739166736603, -3.2989957332611084, -0.46883708238601685, -3.6515045166015625, -4.294238567352295, -0.6989996433258057, -0.9787296056747437, -0.002892717020586133, -0.880066454410553, -0.00789828971028328, -1.3890080451965332, -1.3984640836715698, -0.31529703736305237, -0.011482108384370804, -0.13841405510902405, -0.2437470257282257, -0.138066366314888, -0.0004553949984256178, -0.030839858576655388, -0.12467822432518005, -1.5678460597991943, -0.009866399690508842, -0.0001525762490928173, -1.902254581451416, -0.013610304333269596, -0.0022224506828933954, -0.05270364135503769, -0.8243757486343384, -0.06245657801628113, -0.054476551711559296, -4.053033626405522e-05, -0.1178283840417862, -0.00015567521040793508, -0.0005138983833603561, -0.003717774758115411, -0.17547276616096497, -0.17232607305049896, -0.08009688556194305, -0.1929437518119812, -3.610729217529297, -1.6422533988952637, -0.28982236981391907, -0.43076184391975403, -0.5600180625915527, -1.2671269178390503, -0.42538318037986755, -0.278277724981308, -1.026230812072754, -3.145615816116333, -0.11509685218334198, -0.06522129476070404, -0.0031022538896650076, -0.021016636863350868, -0.5563640594482422, -0.15562818944454193, -0.0309748575091362, -0.004053353797644377, -0.0006958208978176117, -0.10467314720153809, -0.03187904134392738, -0.0007737264968454838, -0.016879934817552567, -0.0015842280117794871, -0.1611543744802475, -2.368483066558838, -0.23569557070732117, -2.2724649906158447, -2.6788198947906494, -1.8046060800552368, -0.2933972477912903, -0.576140820980072, -0.0020325970835983753, -3.5026731491088867, -0.00028546550311148167, -0.0021120640449225903, -0.0010476582683622837, -1.1297593116760254, -0.039284978061914444, -2.1714401245117188, -0.8388845324516296, -0.935178816318512, -0.14621052145957947, -0.020322319120168686, -0.06871386617422104, -0.4566563665866852, -0.00016473367577418685, -0.14931796491146088, -0.2771967351436615, -0.013863460160791874, -0.19777487218379974, -0.0125653725117445, -0.0007818264421075583, -0.54289311170578, -0.017839690670371056, -0.0016129115829244256, -0.0030994017142802477, -1.9377917051315308, -0.054260797798633575, -2.766162395477295, -0.0003026265767402947, -0.00037400881410576403, -1.7171399593353271, -0.0010420613689348102, -0.7916204333305359, -0.05060601234436035, -0.025101538747549057, -0.028171977028250694, -0.37132036685943604, -0.004207093268632889, -0.15383721888065338, -0.00018261195509694517, -4.410734163684538e-06, -0.009827681817114353, -0.010186705738306046, -0.0018785225693136454, -0.3988129198551178, -0.0019508631667122245, -0.4556151032447815, -0.600564181804657, -0.12004175037145615, -0.09404654055833817, -0.002302735112607479, -0.23522202670574188, -2.484118938446045, -1.476379632949829, -0.1303206980228424, -1.2412066459655762, -0.029067927971482277, -0.4019120931625366, -0.5589420795440674, -0.004375170916318893, -1.0291484594345093, -0.39233532547950745, -0.032028678804636, -0.017437834292650223, -0.008887022733688354, -0.015787020325660706, -0.06540510803461075, -0.8239255547523499, -1.0622308254241943, -0.1723019927740097, -0.5385373830795288, -0.4559488296508789, -3.4227707386016846, -0.06391845643520355, -0.007333383895456791, -0.005698862485587597, -0.043791405856609344, -0.00014685506175737828, -0.006963035091757774, -0.07214758545160294, -3.168117046356201, -0.3992561399936676, -0.14997321367263794, -0.40377575159072876, -0.052706580609083176, -0.0032563775312155485, -0.018248993903398514, -0.20925454795360565, -2.0428709983825684, -0.106930673122406, -0.46077725291252136, -0.012875047512352467, -0.5636674165725708, -3.421248038648628e-05, -0.0001510267611593008, -0.005952488165348768, -0.0033321829978376627, -0.002096837153658271, -0.015399482101202011, -0.0005249790847301483, -0.011326182633638382, -0.00019405389321036637, -0.00023624490131624043, -0.0031836561392992735, -0.0028808305505663157, -0.586329460144043, -3.0944223403930664, -1.7365684509277344, -0.008039495907723904], "finish_reason": "length"}], "metrics": {"energy": 371.0089135284423, "energy_per_token": 1.4492535684704777, "time": 12.713372, "time_per_token": 0.049661609375}}
{"outputs": [{"text": "# check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist!\")\n\n    # Check for a valid server URL\n    if not url.startswith('https://'):\n        raise TypeError(\"URL must start with 'https://'\")\n\n    # Open a connection to the server\n    session = requests.Session()\n\n    # Load the list of files in the specified directory\n    files = os.listdir(directory)\n\n    # Upload each file with associated metadata\n    status_codes = []\n    for filename in files:\n        filepath = os.path.join(directory, filename)\n        data = open(filepath, 'rb').read()\n        response = session.post(\n            url, headers=HEADERS, data=data, metadata=json.dumps(metadata))\n        status_codes.append(response.status_code)\n\n    # Close the session and return the status codes\n    session.close()\n    return status_codes", "tokens": ["#", " check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", "!", "\"", ")", "\n", "\n", "    ", "#", " Check", " for", " a", " valid", " server", " URL", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "https", "://", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " must", " start", " with", " '", "https", "://", "'", "\"", ")", "\n", "\n", "    ", "#", " Open", " a", " connection", " to", " the", " server", "\n", "    ", "session", " =", " requests", ".", "Session", "()", "\n", "\n", "    ", "#", " Load", " the", " list", " of", " files", " in", " the", " specified", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "    ", "#", " Upload", " each", " file", " with", " associated", " metadata", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "data", " =", " open", "(", "file", "path", ",", " '", "rb", "')", ".", "read", "()", "\n", "        ", "response", " =", " session", ".", "post", "(", "\n", "            ", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "data", ",", " metadata", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "        ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "    ", "#", " Close", " the", " session", " and", " return", " the", " status", " codes", "\n", "    ", "session", ".", "close", "()", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "if"], "logprobs": [-0.9795613884925842, -3.5754616260528564, -0.561130166053772, -0.5343117713928223, -0.2153923511505127, -0.08372239768505096, -0.24761059880256653, -0.009688735008239746, -0.06458652019500732, -0.09611118584871292, -0.004110697191208601, -1.6927575416048057e-05, -0.00040451448876410723, -0.009659691713750362, -0.3380294144153595, -0.0008200620068237185, -0.005874629598110914, -0.010053001344203949, -0.0027789566665887833, -0.0018253346206620336, -0.06817695498466492, -0.0034979130141437054, -0.0002195594133809209, -8.856858039507642e-05, -0.3734186589717865, -0.4870011806488037, -0.2569500505924225, -0.5877667665481567, -0.6105709075927734, -0.0026731493417173624, -0.01065211184322834, -0.5529716610908508, -0.0016052944120019674, -0.014179903082549572, -2.6631453037261963, -0.03285439312458038, -0.000256982195423916, -0.007854647003114223, -0.2479047328233719, -0.002303091809153557, -0.24514243006706238, -2.9564599990844727, -3.0622425079345703, -2.5216526985168457, -0.36387619376182556, -3.269667863845825, -0.1344422549009323, -0.17100152373313904, -0.005004142876714468, -0.24790333211421967, -0.13031630218029022, -0.2639400362968445, -0.14768759906291962, -0.14975494146347046, -7.295342220459133e-05, 0.0, -0.9134708046913147, -1.1755872964859009, -0.31289443373680115, -0.012452707625925541, -0.671847403049469, -0.008865400217473507, -0.0012436520773917437, -0.0652632862329483, -0.030015021562576294, -3.528532761265524e-05, -0.16828560829162598, -1.3014485836029053, -1.8045650720596313, -0.6877785325050354, -0.17427727580070496, -0.0020452074240893126, -0.6086815595626831, -0.006478498224169016, -0.045077644288539886, -0.015246748924255371, -0.36368680000305176, -0.0005305789527483284, -0.004578820429742336, -0.060792453587055206, -0.001157686347141862, -0.2938368618488312, -3.2919230461120605, -1.6503126621246338, -1.9391001462936401, -0.11870470643043518, -0.020418450236320496, -0.18816690146923065, -0.43395134806632996, -0.003484370419755578, -2.9836506843566895, -0.006834700703620911, -0.0131001528352499, -0.0005292683490552008, -0.1515834629535675, -0.000717025191988796, -0.007500227075070143, -0.7740069627761841, -0.00046695294440723956, -0.245941624045372, -4.668827056884766, -0.4461570084095001, -1.6958779096603394, -0.007136567961424589, -0.11004824936389923, -1.3436142206192017, -0.020751625299453735, -2.1196773052215576, -0.0052004302851855755, -0.04328968748450279, -0.0012448427733033895, -0.8157708644866943, -0.08946849405765533, -0.7355039715766907, -0.0001461399078834802, -0.002079231198877096, -3.4570634852570947e-06, -0.0004814896092284471, -0.0010736184194684029, -0.0003321811091154814, -0.004022365435957909, -0.11320117115974426, -0.0003883084573317319, -0.11824747174978256, -3.5394392013549805, -0.8375062942504883, -0.006516279652714729, -2.622769594192505, -1.6810429096221924, -0.008792140521109104, -0.4362938702106476, -0.002762194722890854, -0.8599604368209839, -0.23715971410274506, -0.030199291184544563, -0.019948570057749748, -0.028812337666749954, -0.012178938835859299, -0.04930338263511658, -0.02466548979282379, -1.3716936111450195, -0.0014381790533661842, -0.001485317014157772, -0.00013600854435935616, -0.001462224405258894, -0.021257072687149048, -1.2227513790130615, -0.8471155762672424, -0.0006885541952215135, -0.04131724685430527, -0.0005161621957086027, -1.0371154530730564e-05, -0.015501721762120724, -0.000763244170229882, -6.711257447022945e-05, -0.000587767455726862, -0.0001532914029667154, -0.0008554374799132347, -4.875540980719961e-05, -0.002794529777020216, -0.15554451942443848, -3.5338542461395264, -0.015543271787464619, -1.7690116167068481, -0.0006848612101748586, -0.0024833811912685633, -0.00011979816190432757, -0.013154509477317333, -0.15295831859111786, -0.002756131812930107, -0.0011824527755379677, -0.702351987361908, -0.00014101465058047324, -0.0033176876604557037, -0.0373605415225029, -0.1839418262243271, -0.8983046412467957, -0.006809836719185114, -0.02969614416360855, -0.00015245705435518175, -0.053408052772283554, -0.004906400106847286, -2.32585072517395, -0.008665576577186584, -0.1306667923927307, -1.1810946464538574, -1.5259439945220947, -0.00999363698065281, -0.0009469077922403812, -4.672895011026412e-05, -0.0004306104383431375, -0.13741613924503326, -0.02930574119091034, -0.17522267997264862, -0.028680521994829178, -0.890130877494812, -0.03233353793621063, -1.461503028869629, -0.0003293210465926677, -0.002786802826449275, -3.325883881188929e-05, -0.005767845548689365, -0.00727930199354887, -0.1999654471874237, -0.01023178081959486, -0.061363838613033295, -0.19891370832920074, -0.02813662774860859, -0.04176462069153786, -0.001978941261768341, -0.0015266203554347157, -0.0030441395938396454, -0.01337343454360962, -0.0016087458934634924, -0.0020957665983587503, -0.0009391664643771946, -4.827859811484814e-05, -0.0006275591440498829, -0.01429002359509468, -1.788560152053833, -1.8512687683105469, -0.34523534774780273, -1.772416114807129, -0.007147102151066065, -0.45410430431365967, -2.0660033226013184, -0.1511867344379425, -0.04704507440328598, -0.41690462827682495, -0.04876582324504852, -0.10872172564268112, -0.002314747544005513, -0.033497873693704605, -0.0002787916746456176, -7.497983460780233e-05, -0.0009482178138568997, -0.002010825788602233, -0.12161918729543686, -0.06133491173386574, -0.005053959786891937, -5.245195097813848e-06, -4.529942543740617e-06, -0.21832381188869476, -0.025281833484768867, -1.1231330633163452], "finish_reason": "stop"}], "metrics": {"energy": 355.9345228939056, "energy_per_token": 1.452793970995533, "time": 12.0897665, "time_per_token": 0.049345985714285716}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Check if the URL is valid\n    if not re.match(r'^https?://[^\\s/$.?#]+[^\\s]*$', url):\n        raise TypeError(url)\n    # Extract the files from the directory\n    files = [os.path.join(directory, file) for file in os.listdir(directory)]\n    # Filter out non-file (e.g. directories) and empty files\n    files = [file for file in files if os.path.isfile(file) and os.path.getsize(file) > 0]\n    # Upload the files\n    status_codes = []\n    for file in files:\n        with open(file, 'rb') as f:\n            response = requests.post(url, files={'file': ('filename', f, 'application/octet-stream')},\n                                     headers=HEADERS, data=json.dumps(metadata))\n            status_codes.append(response.status_code)", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", ")", "\n", "    ", "#", " Check", " if", " the", " URL", " is", " valid", "\n", "    ", "if", " not", " re", ".", "match", "(", "r", "'^", "https", "?", "://", "[", "^\\", "s", "/$", ".", "?", "#", "]+", "[", "^\\", "s", "]*", "$'", ",", " url", "):", "\n", "        ", "raise", " Type", "Error", "(", "url", ")", "\n", "    ", "#", " Ext", "ract", " the", " files", " from", " the", " directory", "\n", "    ", "files", " =", " [", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", " for", " file", " in", " os", ".", "list", "dir", "(", "directory", ")]", "\n", "    ", "#", " Filter", " out", " non", "-", "file", " (", "e", ".", "g", ".", " directories", ")", " and", " empty", " files", "\n", "    ", "files", " =", " [", "file", " for", " file", " in", " files", " if", " os", ".", "path", ".", "is", "file", "(", "file", ")", " and", " os", ".", "path", ".", "get", "size", "(", "file", ")", " >", " ", "0", "]", "\n", "    ", "#", " Upload", " the", " files", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "={", "'", "file", "':", " ('", "filename", "'", ",", " f", ",", " '", "application", "/", "oct", "et", "-", "stream", "')}", ",", "\n", "                ", "                ", "     ", "headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")"], "logprobs": [-0.9795613884925842, -1.430532693862915, -0.5855873227119446, -0.2352607548236847, -0.1936754584312439, -0.03338154777884483, -0.40584444999694824, -0.009264456108212471, -0.060360025614500046, -0.06187517195940018, -0.0032259586732834578, -1.1920858014491387e-05, -0.0002699726028367877, -0.006919942796230316, -1.3454711437225342, -0.0007457336178049445, -0.00028725311858579516, -0.0023198616690933704, -0.002750425599515438, -0.0021713031455874443, -0.0014872215688228607, -0.05844753980636597, -0.002522978698834777, -0.00022504181833937764, -7.545663538621739e-05, -0.26486265659332275, -2.4244396686553955, -0.6573865413665771, -0.0061234720051288605, -1.704775094985962, -0.24843712151050568, -0.6455315947532654, -0.14914833009243011, -0.09616987407207489, -0.8190689086914062, -0.03194381669163704, -0.07230118662118912, -0.06436008214950562, -0.0038124273996800184, -0.25348547101020813, -0.061126578599214554, -2.824659585952759, -0.0011545903980731964, -0.20477470755577087, -0.1773684173822403, -0.20644259452819824, -0.8118317723274231, -0.3523763418197632, -0.13154834508895874, -0.6492041349411011, -0.9077248573303223, -0.9727236032485962, -0.016155054792761803, -0.3319370150566101, -0.021829798817634583, -0.050507865846157074, -0.002679926110431552, -2.7892322540283203, -1.202143907546997, -0.5394431352615356, -5.328513361746445e-05, -0.10550431907176971, -0.013878273777663708, -0.00011944057769142091, -0.007782022003084421, -0.011593586765229702, -0.0033610539976507425, -0.0013504442758858204, -0.00606719171628356, -0.010688910260796547, -4.51792984677013e-05, -0.0508192703127861, -0.04915664717555046, -0.013938113115727901, -0.001692411839030683, -0.5311344861984253, -0.15471574664115906, -4.031133651733398, -0.04189014807343483, -0.7884701490402222, -1.3915021419525146, -0.381623238325119, -0.008061845786869526, -0.08033056557178497, -0.1437089741230011, -0.0032103925477713346, -0.2021234780550003, -0.06418903917074203, -0.5521683096885681, -1.0374374389648438, -2.9801878554280847e-05, -0.00035482310340739787, -0.0005616756388917565, -0.037919990718364716, -0.0011068414896726608, -0.01711234264075756, -0.0004287039046175778, -1.8484019041061401, -0.2531664967536926, -0.06454416364431381, -0.0014180614380165935, -0.0023924082051962614, -0.01662367209792137, -0.0005763299996033311, -0.0003564914222806692, -5.125986263010418e-06, -0.0007622911944054067, -0.0019509821431711316, -0.6727055311203003, -0.010565889067947865, -0.08653769642114639, -0.18761752545833588, -3.8524787425994873, -0.5754083395004272, -1.2953850030899048, -0.006650220602750778, -1.4635610580444336, -4.331809043884277, -2.8181052207946777, -0.0003723404952324927, -0.0007893307483755052, -0.0040199910290539265, -0.3243667781352997, -0.3441672921180725, -2.4973793029785156, -1.384324550628662, -0.043584972620010376, -0.08112703263759613, -0.0008841419476084411, -0.028260866180062294, -0.004293153528124094, -0.08667358011007309, -0.216989666223526, -0.0013733012601733208, -8.689979586051777e-05, -0.0001311216183239594, -0.0012641304638236761, -0.012290457263588905, -0.10012073814868927, -5.447716102935374e-05, -0.0005061537376604974, -0.0009345216676592827, -0.0005554801900871098, -6.365573790390044e-05, -6.794698856538162e-05, -0.002180462470278144, -0.5000832676887512, -0.006813152227550745, -0.9447468519210815, -0.0009199915803037584, -0.10984373837709427, -0.00306018372066319, -0.0040702130645513535, -2.658331868587993e-05, -1.585470999998506e-05, -0.00034254882484674454, -0.3759820759296417, -0.025204185396432877, -0.000602421467192471, -0.009917862713336945, -0.0016519484343007207, -0.001555662602186203, -0.10414327681064606, -0.11854388564825058, -1.7585207223892212, -0.9759653806686401, -0.011691031977534294, -1.5375953912734985, -0.003366281744092703, -0.9646545648574829, -0.4281857907772064, -0.018336428329348564, -0.009840666316449642, -0.023126058280467987, -0.009503954090178013, -0.012799609452486038, -0.12917397916316986, -0.05512737110257149, -0.02749536745250225, -0.004337664693593979, -0.00016890530241653323, -0.001122916815802455, -0.0021378775127232075, -0.9722293615341187, -0.029791725799441338, -0.00028272447525523603, -0.0008275659638457, -0.007975517772138119, -0.07150010019540787, -0.0018725732807070017, -0.0014669859083369374, -0.000416907190810889, -0.04620436578989029, -0.04323066771030426, -0.006336360704153776, -0.0017810686258599162, -0.9229289889335632, -0.004859423264861107, -0.010568012483417988, -7.450303382938728e-05, -0.23739320039749146, -0.007611085660755634, -0.17008861899375916, -0.2480544149875641, -0.8286765217781067, -0.02518640086054802, -0.02248099446296692, -0.15377189218997955, -0.01083750557154417, -2.355914831161499, -2.09444522857666, -0.0533892922103405, -0.0007746794726699591, -0.002597056096419692, -0.5871070623397827, -0.4055193066596985, -0.09129085391759872, -0.0008351890719495714, -0.889192521572113, -0.001561851822771132, -0.0004337085410952568, -0.0010088359704241157, -0.023621691390872, -0.0002714027068577707, -0.9801763296127319, -0.009670672006905079, -0.033444151282310486, -1.515409231185913, -0.1563659906387329, -0.012995432130992413, -0.0014487734297290444, -1.3708974620385561e-05, -0.039542488753795624, -0.5151206254959106, -0.04685524106025696, -0.03049233742058277, -4.875540980719961e-05, -0.00030155404238030314, -3.0278701160568744e-05, -0.04688015207648277, -0.020397426560521126, -0.07892852276563644, -0.010114840231835842, -0.264293372631073, -0.27311256527900696, -0.010018539614975452, -0.013034027069807053, -0.0019102912629023194, -0.0016645636642351747, -0.005319844000041485, -0.00875609926879406, -0.0006972504197619855, -0.0034165363758802414, -0.0004886387032456696, -1.9550132492440753e-05, -0.0010663543362170458], "finish_reason": "length"}], "metrics": {"energy": 365.40650307464614, "energy_per_token": 1.4273691526353365, "time": 12.727201, "time_per_token": 0.04971562890625}}
{"outputs": [{"text": "statuses = []\n\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n\n    for file_path in os.listdir(directory):\n        full_path = os.path.join(directory, file_path)\n        metadata['filename'] = full_path\n        metadata['filesize'] = os.path.getsize(full_path)\n        metadata['contenttype'] = file_path.split('.')[-1].lower()\n\n        # Create a POST request to the server\n        response = requests.post(url, headers=HEADERS, data=json.dumps(metadata))\n        statuses.append(response.status_code)\n\n        time.sleep(1)\n\n    return statuses", "tokens": ["status", "es", " =", " []", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "\n", "\n", "    ", "for", " file", "_", "path", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "path", ")", "\n", "        ", "metadata", "['", "filename", "']", " =", " full", "_", "path", "\n", "        ", "metadata", "['", "files", "ize", "']", " =", " os", ".", "path", ".", "get", "size", "(", "full", "_", "path", ")", "\n", "        ", "metadata", "['", "content", "type", "']", " =", " file", "_", "path", ".", "split", "('", ".", "')", "[-", "1", "]", ".", "lower", "()", "\n", "\n", "        ", "#", " Create", " a", " POST", " request", " to", " the", " server", "\n", "        ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "        ", "status", "es", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " stat", "uses", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3017964363098145, -1.864127516746521, -0.022063158452510834, -0.03167244791984558, -0.05525484308600426, -1.077630639076233, -0.001568041043356061, -1.1037262678146362, -0.24608032405376434, -0.03496042639017105, -3.9934315282152966e-05, -0.001100530382245779, -0.017942968755960464, -0.9335768818855286, -0.005915870424360037, -0.0004368066438473761, -0.003730245167389512, -0.010021372698247433, -0.015639042481780052, -0.003044614801183343, -0.06453343480825424, -0.003930700942873955, -0.0002449450839776546, -0.00011205045302631333, -1.5800929069519043, -0.10656008124351501, -0.0009516716236248612, -0.8016785383224487, -1.2951273918151855, -0.7677246928215027, -1.3396997451782227, -0.1824149787425995, -0.10296721011400223, -0.002742341486737132, -0.003033443121239543, -5.8412379075889476e-06, -0.0009646529797464609, -0.0007499027997255325, -0.00030179237364791334, -0.009644225239753723, -0.054909273982048035, -1.986551284790039, -0.0035651475191116333, -0.22755447030067444, -0.0014638908905908465, -0.025730740278959274, -0.0002060916303889826, -9.417489309271332e-06, -0.0064086164347827435, -0.0006762839620932937, -0.00011574551899684593, -0.0015312624163925648, -0.00023982033599168062, -0.0006635371246375144, -6.16293036728166e-05, -8.356221951544285e-05, -0.00015722469834145159, -0.0022952421568334103, -0.34985747933387756, -2.7729268074035645, -1.113304615020752, -2.3740737438201904, -0.0035101487301290035, -0.006822623778134584, -1.7498763799667358, -2.7417760065873154e-05, -0.00013016807497479022, -0.25943151116371155, -0.32433435320854187, -0.8142479658126831, -0.1168518140912056, -3.40055513381958, -0.009617660194635391, -0.03538418561220169, -0.003927614074200392, -0.07137978821992874, -0.0015036477707326412, -0.05975359305739403, -0.02444634772837162, -0.00013529339048545808, -1.2516897186287679e-05, -0.0004923323867842555, -0.01178670022636652, -3.1709168979432434e-05, -1.0728830375228426e-06, -0.00312958681024611, -0.046605296432971954, -0.2854471206665039, -0.5194945335388184, -0.061070505529642105, -4.111960411071777, -2.3832335472106934, -0.0003122795606032014, -0.003217284567654133, -3.675693988800049, -0.12081102281808853, -0.24389293789863586, -0.1464836299419403, -0.09643013775348663, -0.3198559582233429, -0.0009663202799856663, -0.008905100636184216, -0.09106994420289993, -0.001069093239493668, -0.00154971145093441, -1.4359474182128906, -0.24213960766792297, -0.0006425699684768915, -0.026921121403574944, -1.0826027393341064, -0.003566454164683819, -2.314112663269043, -4.255316257476807, -0.5327934622764587, -2.10129451751709, -0.019035283476114273, -0.7989882826805115, -0.1867782175540924, -0.9702515602111816, -1.070924997329712, -0.0052584195509552956, -0.504063606262207, -0.005324705969542265, -0.011667702347040176, -9.83428253675811e-05, -0.009313824586570263, -0.005739162210375071, -0.21483707427978516, -0.291155070066452, -0.7904612421989441, -0.014173321425914764, -0.001036107074469328, -3.099393507000059e-05, -0.0015812524361535907, -0.6714224815368652, -0.0032526941504329443, -0.08130014687776566, -6.651657167822123e-05, -0.0002330270071979612, -1.6927575416048057e-05, -0.003222750499844551, -0.004806156270205975, -0.05848880484700203, -0.009617896750569344, -0.7828006744384766, -0.5755298137664795, -0.20420017838478088, -0.00263795698992908, -0.0017149040941148996, -0.005152043886482716, -0.014729679562151432, -0.0017588159535080194, -0.0076653859578073025, -0.00039772229501977563, -1.0132738680113107e-05, -0.0013131813611835241, -0.02688363753259182, -0.3377985656261444, -0.027589883655309677, -1.4338412284851074, -0.00018046658078674227, -0.00016807096835691482, -0.0002592465898487717, -0.06350594758987427, -0.016438761726021767, -0.22324025630950928, -0.15957136452198029, -0.03141486272215843, -0.03087661601603031, -0.006181763019412756, -7.986703712958843e-05, -0.8889792561531067, -4.768370445162873e-07, -3.576278118089249e-07, -1.4543427823809907e-05, -0.0001971527235582471, -0.11872979998588562], "finish_reason": "stop"}], "metrics": {"energy": 245.75982417106633, "energy_per_token": 1.3884735828873804, "time": 8.558284, "time_per_token": 0.04835188700564972}}
{"outputs": [{"text": "try:\n        # Check if the directory exists\n        if not os.path.exists(directory):\n            raise FileNotFoundError\n        # Loop through all files in the directory\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                # Calculate the relative path from the directory to the file\n                relative_path = os.path.join(root, filename)\n                # Send a POST request to the server URL\n                response = requests.post(url, data={'path': relative_path,\n                                                    'metadata': json.dumps(metadata)})\n                print(response)  # Print the status of the upload request\n                time.sleep(1)  # Pause for 1 second after each upload\n    except FileNotFoundError:\n        print(f'File not found: {directory}')\n    except TypeError:\n        print(f'Invalid URL: {url}')\n    except Exception:\n        print(f'An error occurred: {url}')\n\n    return response.status_code", "tokens": ["try", ":", "\n", "        ", "#", " Check", " if", " the", " directory", " exists", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "\n", "        ", "#", " Loop", " through", " all", " files", " in", " the", " directory", "\n", "        ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "            ", "for", " filename", " in", " files", ":", "\n", "                ", "#", " Calculate", " the", " relative", " path", " from", " the", " directory", " to", " the", " file", "\n", "                ", "relative", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " filename", ")", "\n", "                ", "#", " Send", " a", " POST", " request", " to", " the", " server", " URL", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "={", "'", "path", "':", " relative", "_", "path", ",", "\n", "                ", "                ", "                ", "    ", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")})", "\n", "                ", "print", "(", "response", ")", "  ", "#", " Print", " the", " status", " of", " the", " upload", " request", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "  ", "#", " P", "ause", " for", " ", "1", " second", " after", " each", " upload", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "f", "'", "File", " not", " found", ":", " {", "directory", "}", "')", "\n", "    ", "except", " Type", "Error", ":", "\n", "        ", "print", "(", "f", "'", "Invalid", " URL", ":", " {", "url", "}", "')", "\n", "    ", "except", " Exception", ":", "\n", "        ", "print", "(", "f", "'", "An", " error", " occurred", ":", " {", "url", "}", "')", "\n", "\n", "    ", "return", " response", ".", "status", "_", "code", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.07554292678833, -0.0006430465145967901, -0.00827727746218443, -0.026582449674606323, -1.4045989513397217, -1.3214178085327148, -0.40907183289527893, -0.28113797307014465, -0.21713072061538696, -0.0419684536755085, -0.391855925321579, -0.0027141659520566463, -0.09383666515350342, -0.13141675293445587, -0.003943643998354673, -1.0609570381348021e-05, -0.0005608416395261884, -0.010734316892921925, -0.29588010907173157, -0.0007188120507635176, -0.0037054228596389294, -0.009838423691689968, -0.00301965675316751, -0.0018041539005935192, -0.10730520635843277, -0.003412853693589568, -0.00015364897262770683, -5.018585216021165e-05, -1.671722412109375, -1.0196431875228882, -0.1780543476343155, -3.92413330078125, -0.3260250985622406, -0.4884530305862427, -0.22413374483585358, -0.08680835366249084, -0.020761199295520782, -0.07329652458429337, -0.14920419454574585, -0.005040082149207592, -0.35556042194366455, -2.3223462104797363, -0.0015882747247815132, -0.5583946704864502, -0.00032431588624604046, -0.00011014331539627165, -0.022925684228539467, -0.0006277974462136626, -0.0036106412298977375, -0.0019225463038310409, -8.654219709569588e-05, -0.004205906298011541, -0.0019530047429725528, -0.06404369324445724, -0.003216333920136094, -0.0071517182514071465, -0.22163569927215576, -2.1625308990478516, -0.0002411313180346042, -0.0029205309692770243, -0.00014590153296012431, -0.0035353321582078934, -0.008522686548531055, -0.5090382099151611, -3.020449161529541, -0.10403779149055481, -2.1072475910186768, -0.10925258696079254, -2.232043981552124, -0.025462908670306206, -1.2906384468078613, -0.24021361768245697, -0.028335725888609886, -0.15027832984924316, -0.0198585893958807, -0.0007188120507635176, -0.9663282632827759, -0.021498383954167366, -0.006514029111713171, -0.0005918181850574911, -0.0060530914925038815, -9.536697689327411e-06, -5.638440416078083e-05, -0.0022737146355211735, -0.9230636358261108, -0.0044555203057825565, -0.07126367837190628, -0.05276493355631828, -0.0022047278471291065, -0.01473461277782917, -0.005749237257987261, -0.07607776671648026, -0.16235409677028656, -2.2186083793640137, -0.9809079170227051, -0.7170815467834473, -0.0034961311612278223, -0.22454628348350525, -0.05511056259274483, -0.2696477472782135, -2.9314870834350586, -1.3731002807617188, -0.0046674590557813644, -0.4510815739631653, -0.00500781973823905, -0.007168761920183897, -0.00010048838157672435, -0.011940669268369675, -0.0034910230897367, -0.27164149284362793, -0.14809076488018036, -1.464550495147705, -1.9476789236068726, -0.24039697647094727, -1.9595847129821777, -0.008059008046984673, -0.05716128274798393, -2.6225699912174605e-05, -1.1324817933200393e-05, -0.18404367566108704, -2.6578636169433594, -0.0014421073719859123, -0.1209833174943924, -0.12670573592185974, -0.7958134412765503, -0.03185606375336647, -0.1609397530555725, -0.004678612574934959, -0.18549834191799164, -9.965400386136025e-05, -0.0009482178138568997, -9.60780744208023e-05, -0.0033980030566453934, -0.006077855359762907, -0.8389391899108887, -0.008013834245502949, -0.05884651467204094, -2.7092134952545166, -0.10773707181215286, -0.9178412556648254, -1.6861202716827393, -2.951630115509033, -0.0012861560098826885, -1.1163407564163208, -0.0627366304397583, -1.4981266260147095, -3.007530689239502, -0.12015581876039505, -0.6072319149971008, -2.259192943572998, -0.08609919995069504, -0.10248249024152756, -1.058181881904602, -0.0005943200667388737, -0.000200609109015204, -0.0005696581210941076, -0.08635510504245758, -0.021042317152023315, -0.2355014532804489, -7.10462118149735e-05, -0.43957072496414185, -5.61460001335945e-05, -0.04978201538324356, -1.2401156425476074, -0.0050463685765862465, -0.006005457136780024, -0.7240791320800781, -0.027906766161322594, -0.02335049770772457, -0.05995110049843788, -1.1609728336334229, -0.019560420885682106, -1.031976342201233, -0.0004503904783632606, -2.610649426060263e-05, -0.31088924407958984, -0.014463700354099274, -0.0014278227463364601, -0.5410447716712952, -0.2744937241077423, -1.557368278503418, -1.7353684902191162, -2.436282157897949, -0.3720090985298157, -0.006069205701351166, -0.1384546309709549, -0.00760528864338994, -0.04117940738797188, -0.01567460037767887, -0.014020283706486225, -0.02334805205464363, -0.5066841244697571, -0.03553307056427002, -0.37778598070144653, -5.722029527532868e-06, -0.1195487380027771, -0.007394681219011545, -0.000722266617231071, -0.035614289343357086, -0.35907161235809326, -0.1706072986125946, -0.08541909605264664, -0.19045792520046234, -0.27164211869239807, -0.025226736441254616, -0.003536044852808118, -0.0034014484845101833, -0.00520920567214489, -0.006972386967390776, -0.07433846592903137, -0.4810021221637726, -0.8682971000671387, -0.5454832315444946, -2.902277708053589, -0.031450096517801285, -0.0013399679446592927, -0.08861929923295975, -0.6457871198654175, -0.11304722726345062, -0.055333010852336884, -1.1538233757019043, -0.9175068140029907, -0.042317040264606476, -0.9984961748123169, -0.009861796163022518, -0.635316789150238, -0.022721659392118454, -0.0453324131667614, -0.14748694002628326, -1.013503074645996, -1.2222779989242554, -0.4401191473007202, -0.3019101023674011, -0.16310174763202667, -0.09649768471717834, -0.0019613332115113735, -0.0014493685448542237, -2.1331534385681152, -1.7881377516459906e-06, -1.1920928244535389e-07, -1.2993727978027891e-05, -7.247662142617628e-05, -0.12419412285089493], "finish_reason": "stop"}], "metrics": {"energy": 373.5812576694491, "energy_per_token": 1.5373714307384736, "time": 12.112479, "time_per_token": 0.049845592592592594}}
{"outputs": [{"text": "# check whether the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found\")\n\n    status_codes = []\n\n    # get all files in the directory\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                files = {'files': (file_name, f)}\n                response = requests.post(\n                    url,\n                    files=files,\n                    headers=HEADERS,\n                    data=json.dumps(metadata),\n                    timeout=15)\n                status_codes.append(response.status_code)\n                time.sleep(1)\n    return status_codes", "tokens": ["#", " check", " whether", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " not", " found", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " get", " all", " files", " in", " the", " directory", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "files", " =", " {'", "files", "':", " (", "file", "_", "name", ",", " f", ")}", "\n", "                ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "    ", "url", ",", "\n", "                ", "    ", "files", "=", "files", ",", "\n", "                ", "    ", "headers", "=", "HEAD", "ERS", ",", "\n", "                ", "    ", "data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", "\n", "                ", "    ", "timeout", "=", "1", "5", ")", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "    ", "return", " status", "_", "codes", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.9795613884925842, -3.5754616260528564, -3.437778949737549, -0.3212205767631531, -0.32577425241470337, -0.1064172238111496, -0.4331999123096466, -0.012435046955943108, -0.09415873885154724, -0.11864086985588074, -0.0059303282760083675, -1.645074735279195e-05, -0.0005633435794152319, -0.009904171340167522, -1.2612571716308594, -0.0018456820398569107, -0.0008722314960323274, -0.0038114774506539106, -0.005521759856492281, -0.0033693707082420588, -0.0019919094629585743, -0.07241351902484894, -0.004026520997285843, -0.0002683041093405336, -0.00010382589971413836, -0.39043131470680237, -0.4922039806842804, -0.2888592481613159, -0.8709193468093872, -0.5824263691902161, -0.0027457892429083586, -0.008747000247240067, -1.117229700088501, -0.00932350941002369, -0.8278867602348328, -0.0002890407631639391, -0.0034963686484843493, -0.28701016306877136, -0.0027743205428123474, -2.5392262935638428, -0.27138108015060425, -0.0737757757306099, -0.03271261230111122, -0.025282995775341988, -0.060604874044656754, -0.8081604838371277, -0.0006921279709786177, -0.6257440447807312, -2.5260493755340576, -0.7229520082473755, -0.38630053400993347, -0.45698031783103943, -0.06301704794168472, -0.13956837356090546, -0.2059805989265442, -0.0026277319993823767, -1.6344751119613647, -1.0856314897537231, -0.5739904046058655, -0.2453460693359375, -0.006636838894337416, -0.015063932165503502, -0.001016814960166812, -0.001053374377079308, -1.07287787614041e-05, -0.0004301338049117476, -0.0004886387032456696, -0.00025996167096309364, -0.0014069906901568174, -0.0675334632396698, -0.8994902968406677, -0.021179579198360443, -0.015344895422458649, -0.0004119024670217186, -0.015245223417878151, -0.00015567521040793508, -6.318072337307967e-06, -0.015100921504199505, -0.00032228996860794723, -4.7801782784517854e-05, -0.0004631400224752724, -0.00012087091454304755, -0.00043049128726124763, -7.152531907195225e-06, -4.9828242481453344e-05, -0.00015853578224778175, -0.0022130541037768126, -0.8085271120071411, -0.6887176036834717, -0.14150956273078918, -0.0010085977846756577, -0.0005218812730163336, -0.005319251213222742, -0.00017069313616957515, -0.005471729673445225, -2.3245540432981215e-05, -0.000251142424531281, -4.887569048150908e-06, -0.00048828122089616954, -0.14277100563049316, -0.030147356912493706, -0.027387388050556183, -1.1638762950897217, -0.036983001977205276, -0.000479344860650599, -0.0015467357588931918, -8.344646857949556e-07, -0.0049859946593642235, -0.029354941099882126, -0.1848377138376236, -0.0548899807035923, -0.001713952049612999, -0.0008512687054462731, -0.8409518003463745, -0.03622829169034958, -0.009846804663538933, -0.020797161385416985, -2.6801810264587402, -0.06676400452852249, -0.625723123550415, -1.8468350172042847, -0.20314306020736694, -0.1099257618188858, -0.19142301380634308, -0.0002975021197926253, -0.1060991883277893, -0.0007281036232598126, -0.00168503331951797, -0.9446630477905273, -0.00934027973562479, -0.23772220313549042, -0.6673985719680786, -0.0038579099345952272, -0.004107373300939798, -8.892617915989831e-05, -0.07037153840065002, -0.0021084952168166637, -1.7344863414764404, -0.0005351065192371607, -0.012014287523925304, -0.13955509662628174, -0.42001545429229736, -1.727431058883667, -0.000342191313393414, -0.0002540027489885688, -0.5014480948448181, -0.014426453039050102, -0.0016656348016113043, -0.002432128181681037, -0.03883248195052147, -0.00048101297579705715, -0.00144710682798177, -0.15626852214336395, -0.005880673881620169, -0.0018745961133390665, -1.9192511899746023e-05, -0.010815218091011047, -0.001167926355265081, -0.0004731489170808345, -0.008225256577134132, -0.5462608933448792, -0.06641179323196411, -0.07256607711315155, -6.007967749610543e-05, -0.0002996472467202693, -2.7179348762729205e-05, -0.0413970872759819, -0.05117633566260338, -0.12923043966293335, -0.6079662442207336, -0.01502236258238554, -0.0022820401936769485, -0.9355974793434143, -0.3543221056461334, -0.034963879734277725, -1.2052091360092163, -3.296147346496582, -1.7412042617797852, -0.041672348976135254, -0.22266030311584473, -0.34606650471687317, -0.03426628187298775, -0.05792016163468361, -0.00227656913921237, -0.0021942604798823595, -0.003971784841269255, -0.016602803021669388, -0.0006049233488738537, -0.004269057419151068, -0.00038914260221645236, -2.4437606043647975e-05, -0.0010802869219332933, -0.008978825062513351, -0.24099455773830414, -0.247624933719635, -7.366862701019272e-05, -9.214453893946484e-05, -0.0004198861715849489, -0.09183169901371002, -0.013540566898882389, -0.11823603510856628, -1.4710822105407715, -0.03267061337828636, -0.006452441215515137, -7.92710343375802e-05, -1.3828182090946939e-05, -1.2712821960449219, -4.768370445162873e-07, -4.768370445162873e-07, -6.794906312279636e-06, -0.00017689094238448888, -0.09837038815021515], "finish_reason": "stop"}], "metrics": {"energy": 294.7754320220946, "energy_per_token": 1.3904501510476162, "time": 10.41087, "time_per_token": 0.049107877358490565}}
{"outputs": [{"text": "try:\n        response_list = []\n        # If directory doesn't exist\n        if not os.path.isdir(directory):\n            raise FileNotFoundError\n        for filename in os.listdir(directory):\n            full_filename = os.path.join(directory, filename)\n            with open(full_filename, 'rb') as file:\n                try:\n                    response = requests.post(url, files={filename: file},\n                                             headers=HEADERS, data=json.dumps(metadata))\n                except:\n                    raise TypeError\n                response_list.append(response.status_code)\n                time.sleep(1)\n            if full_filename.endswith(\".json\") and os.stat(full_filename).st_size == 0:\n                os.remove(full_filename)\n        return response_list\n    except FileNotFoundError:\n        print(f'Error: The directory {directory} does not exist.')\n        return []", "tokens": ["try", ":", "\n", "        ", "response", "_", "list", " =", " []", "\n", "        ", "#", " If", " directory", " doesn", "'", "t", " exist", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "\n", "        ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "            ", "full", "_", "filename", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "            ", "with", " open", "(", "full", "_", "filename", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "try", ":", "\n", "                ", "    ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "={", "filename", ":", " file", "}", ",", "\n", "                ", "                ", "             ", "headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "                ", "except", ":", "\n", "                ", "    ", "raise", " Type", "Error", "\n", "                ", "response", "_", "list", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "            ", "if", " full", "_", "filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", ")", " and", " os", ".", "stat", "(", "full", "_", "filename", ")", ".", "st", "_", "size", " ==", " ", "0", ":", "\n", "                ", "os", ".", "remove", "(", "full", "_", "filename", ")", "\n", "        ", "return", " response", "_", "list", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "f", "'", "Error", ":", " The", " directory", " {", "directory", "}", " does", " not", " exist", ".", "')", "\n", "        ", "return", " []", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.07554292678833, -0.0006430465145967901, -0.00827727746218443, -0.026582449674606323, -4.067091941833496, -0.6276198029518127, -0.46068790555000305, -0.011732740327715874, -0.027257008478045464, -0.05312187224626541, -0.13800540566444397, -2.0473451614379883, -3.724792003631592, -2.2286341190338135, -1.319061040878296, -0.0043686432763934135, -8.940656698541716e-06, -0.05473548546433449, -1.720824956893921, -0.006074656266719103, -0.05008196830749512, -0.08381031453609467, -0.010718277655541897, -1.2397689715726301e-05, -0.0017496529035270214, -0.006748266983777285, -0.8485216498374939, -0.002708934945985675, -0.001329253427684307, -0.005865029990673065, -0.0063361236825585365, -0.005427743308246136, -0.0037719309329986572, -0.09425778687000275, -0.007600556127727032, -0.0003830652858596295, -0.00011765264935093, -0.8459754586219788, -0.5922101736068726, -2.110321044921875, -1.3234846591949463, -0.02786538004875183, -0.0258835069835186, -0.0009216589969582856, -0.007070165127515793, -6.6756979322235566e-06, -0.0016144587425515056, -0.0014974582009017467, -0.0004385939973872155, -0.03243706375360489, -0.014159217476844788, -2.042625904083252, -0.12758250534534454, -2.291297435760498, -0.003333846339955926, -0.03896824270486832, -0.0002153879904653877, -2.13382354559144e-05, -0.005916700232774019, -0.001065282616764307, -0.0003097769513260573, -0.002734614070504904, -0.0007954055909067392, -0.004370898474007845, -0.0002040654799202457, -0.008508384227752686, -0.03541939705610275, -1.5932483673095703, -0.042526017874479294, -0.00331578659825027, -0.0027050115168094635, -1.7404405298293568e-05, -1.1086402082582936e-05, -0.05629579350352287, -0.172556534409523, -0.016772795468568802, -0.004274161532521248, -0.0007839705212973058, -0.6538105607032776, -0.09426993876695633, -0.0144676947966218, -0.008282243274152279, -3.3906524181365967, -0.0004967409186065197, -0.0052917408756911755, -0.0029369338881224394, -0.0010315817780792713, -0.8834132552146912, -0.13243120908737183, -0.02245931327342987, -0.00040844682371243834, -0.23132078349590302, -0.008530369028449059, -0.5949923992156982, -0.3216031789779663, -0.8572347164154053, -0.04363701492547989, -1.8306711912155151, -0.00390101526863873, -0.010941863059997559, -0.027627456933259964, -0.00043358939001336694, -1.6956666707992554, -0.001498410478234291, -0.09894510358572006, -0.24783504009246826, -0.20699751377105713, -0.013957510702311993, -0.0024920618161559105, -3.2066785934148356e-05, -0.013450358994305134, -1.1599576473236084, -0.03793846815824509, -0.07933615148067474, -0.00011646069469861686, -0.0005217621219344437, -8.844937838148326e-05, -0.013872748240828514, -0.021911906078457832, -0.11144489794969559, -0.012577968649566174, -0.01878167875111103, -2.37595796585083, -2.4893035888671875, -0.01718042604625225, -0.0007761088781990111, -0.0010370597010478377, -1.169581651687622, -0.0747850239276886, -5.185469490243122e-05, -0.21337692439556122, -0.1417848765850067, -0.7006146311759949, -0.07270132750272751, -0.0387064553797245, -0.004547610878944397, -0.004415405914187431, -0.009898151271045208, -0.04741133749485016, -0.030319225043058395, -0.015885232016444206, -0.0017260904423892498, -2.8490614567999728e-05, -0.0008790204883553088, -0.005971211474388838, -0.2683282494544983, -0.14399266242980957, -0.00016902448260225356, -0.0001705739414319396, -0.0003817544784396887, -0.06933669000864029, -0.015005216933786869, -0.05261294171214104, -2.6951541900634766, -2.636918544769287, -3.041858196258545, -0.00031454383861273527, -0.0005528590409085155, -0.7090339660644531, -0.22111378610134125, -0.00011205045302631333, 0.0, -1.2655659914016724, -0.0859718769788742, -0.21244041621685028, -1.2639282941818237, -0.006804627366364002, -2.377887725830078, -0.8840096592903137, -1.288813591003418, -6.925819616299123e-05, -2.45430588722229, -0.003528798697516322, -0.017583321779966354, -7.652943895664066e-05, -1.585470999998506e-05, -0.014084581285715103, -0.002348286332562566, -0.0011478032683953643, -0.0009201106731779873, -0.009959882125258446, -1.7014415264129639, -0.011144887655973434, -0.05030383914709091, -0.018992476165294647, -0.029707947745919228, -0.00279357866384089, -0.11644423753023148, -1.2993727978027891e-05, -0.10570661723613739, -0.000552263343706727, -0.007245809771120548, -4.9232225137529895e-05, -7.629365427419543e-06, -0.0004832768754567951, -0.012933888472616673, -0.45274901390075684, -0.05762334167957306, -0.009431213140487671, -0.0008436457719653845, -1.0251946150674485e-05, -0.006384571082890034, -0.1412571370601654, -0.03735135495662689, -0.2961330711841583, -0.0008662762120366096, -9.417489309271332e-06, -0.08614327758550644, -0.0054470691829919815, -0.003509673522785306, -0.6595811247825623, -0.2476424276828766, -1.4892654418945312, -1.8392070531845093, -2.244722843170166, -0.12205778807401657, -1.761451005935669, -0.2674187421798706, -0.3671887516975403, -0.005344744771718979, -0.007008847780525684, -0.16177961230278015, -0.0015182883944362402, -0.004352382384240627, -0.5745701789855957, -0.0526442676782608, -0.09590953588485718, -1.4050548076629639, -0.4790573716163635, -1.0324643850326538, -2.2856717109680176, -7.152555099310121e-07, -1.1920928244535389e-07, -6.794906312279636e-06, -7.450303382938728e-05, -0.11653102934360504], "finish_reason": "stop"}], "metrics": {"energy": 360.7333256835938, "energy_per_token": 1.5285310410321773, "time": 11.680426, "time_per_token": 0.04949333050847458}}
{"outputs": [{"text": "# Checking for valid server URL\n    if url is None:\n        raise TypeError('URL can not be None')\n    if not isinstance(url, str) or not url.startswith('http'):\n        raise TypeError('URL should be a valid string')\n\n    # Checking for valid directory\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory does not exist')\n\n    # Checking for valid metadata\n    if not isinstance(metadata, dict):\n        raise TypeError('Metadata should be a dictionary')\n\n    # Checking for valid files\n    files = []\n    for root, dirs, filenames in os.walk(directory):\n        for file in filenames:\n            if file.endswith('.json'):\n                files.append(os.path.join(root, file))\n\n    # Checking for files\n    if not files:\n        raise FileNotFoundError('No files found in directory')\n\n    # Setting up the response codes\n    response_codes = []\n\n    # Iterating over all the files\n    for file in files:\n", "tokens": ["#", " Check", "ing", " for", " valid", " server", " URL", "\n", "    ", "if", " url", " is", " None", ":", "\n", "        ", "raise", " Type", "Error", "('", "URL", " can", " not", " be", " None", "')", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", ")", " or", " not", " url", ".", "start", "sw", "ith", "('", "http", "')", ":", "\n", "        ", "raise", " Type", "Error", "('", "URL", " should", " be", " a", " valid", " string", "')", "\n", "\n", "    ", "#", " Check", "ing", " for", " valid", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " does", " not", " exist", "')", "\n", "\n", "    ", "#", " Check", "ing", " for", " valid", " metadata", "\n", "    ", "if", " not", " isinstance", "(", "metadata", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "('", "Metadata", " should", " be", " a", " dictionary", "')", "\n", "\n", "    ", "#", " Check", "ing", " for", " valid", " files", "\n", "    ", "files", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " fil", "en", "ames", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " fil", "en", "ames", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "                ", "files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " file", "))", "\n", "\n", "    ", "#", " Check", "ing", " for", " files", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "No", " files", " found", " in", " directory", "')", "\n", "\n", "    ", "#", " Setting", " up", " the", " response", " codes", "\n", "    ", "response", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Iter", "ating", " over", " all", " the", " files", "\n", "    ", "for", " file", " in", " files", ":", "\n"], "logprobs": [-0.9795613884925842, -1.430532693862915, -1.4840514659881592, -2.322110891342163, -2.1273727416992188, -3.287074565887451, -0.2086281180381775, -0.260895311832428, -0.015774700790643692, -0.2122751921415329, -2.4521231651306152, -1.1846812963485718, -0.1322687268257141, -0.8059797286987305, -0.010735968127846718, -0.0025925380177795887, -0.061766695231199265, -0.04579439014196396, -2.407998726994265e-05, -0.8776232004165649, -1.4225761890411377, -3.7970757484436035, -0.21884785592556, -0.003251624759286642, -0.43222886323928833, -0.3877769112586975, -0.0015623279614374042, -0.6018739342689514, -1.1337474584579468, -0.4363071918487549, -1.2741165161132812, -0.0003381395654287189, -0.003938538022339344, -0.0012838939437642694, -0.00797764677554369, -2.259661912918091, -0.09830988198518753, -0.815008819103241, -0.08957891911268234, -0.1518724113702774, -0.11428722739219666, -6.139089964563027e-05, -1.1920928244535389e-07, -0.24396727979183197, -0.3732110261917114, -0.10224553197622299, -0.04657468944787979, -0.006656141486018896, -0.0009968079393729568, -0.021130675449967384, -0.03307308629155159, -4.8636207793606445e-05, -0.16858990490436554, -0.31582993268966675, -1.9506618976593018, -0.2630252540111542, -0.47483691573143005, -0.6449866890907288, -1.300390601158142, -0.5355272889137268, -0.0006793813081458211, -0.286124050617218, -0.0015254301251843572, -0.10840035229921341, -0.13855749368667603, -0.012611164711415768, -0.34307363629341125, -0.2278076708316803, -0.22680287063121796, -0.5476894974708557, -0.002782047726213932, -0.06508336216211319, -0.6713719367980957, -0.2096295803785324, -5.304672595229931e-05, -0.0012037658598273993, -0.05899127200245857, -0.6968545317649841, -0.0029879233334213495, -0.0007059465860947967, -0.005870363209396601, -0.052343159914016724, -0.002710361499339342, -0.0006793813081458211, -0.015810489654541016, -0.0025982451625168324, -0.0005471401382237673, -9.30981186684221e-05, -0.617682933807373, -0.4568067491054535, -0.7528723478317261, -0.0024645926896482706, -0.03148844838142395, -0.22488781809806824, -0.0015256681945174932, -0.07790669053792953, -0.0008447177824564278, -0.28575244545936584, -1.0892530679702759, -0.01598108559846878, -0.2879300117492676, -0.17625094950199127, -0.1441558450460434, -0.10447514802217484, -0.0018502036109566689, -0.025760598480701447, -0.3230700194835663, -0.03181172162294388, -9.893881360767409e-05, -0.0010483728256076574, -0.0002299282787134871, -0.027691232040524483, -0.04758458212018013, -0.0007178590167313814, -0.00036161558819003403, -0.009440423920750618, -0.010753304697573185, -3.3854863431770355e-05, -0.025932062417268753, -0.2861342430114746, -0.3121784031391144, -0.0048789968714118, -0.14739908277988434, -0.32259130477905273, -0.051596902310848236, -0.00024244230007752776, -0.05136467516422272, -0.0019064837833866477, -0.4597119092941284, -1.4694253206253052, -0.03335779905319214, -0.3594071865081787, -0.3934606611728668, -2.285159111022949, -0.42075300216674805, -0.002360892714932561, -1.0159128904342651, -0.1763187199831009, -0.7535985708236694, -0.010384219698607922, -0.023275379091501236, -0.11764664947986603, -1.0761786699295044, -0.0022487370297312737, -0.5614017844200134, -0.0009109399979934096, -0.0001971527235582471, -1.9884490966796875, -0.012522638775408268, -0.0002650863316375762, -0.000510204816237092, -0.0035608713515102863, -0.0003002431185450405, -3.0874729418428615e-05, -0.005802098195999861, -0.006446992512792349, -0.04393276572227478, -0.008594902232289314, -0.0021168221719563007, -0.15221799910068512, -2.932039260864258, -0.15901245176792145, -0.009054552763700485, -4.053033626405522e-05, -5.364403477869928e-06, -0.00048744716332294047, -0.0015756584471091628, -0.0016752745723351836, -1.3788261413574219, -0.5212864279747009, -0.07889382541179657, -0.21263675391674042, -0.00015448330668732524, 0.0, -0.11808456480503082, -0.08704473823308945, -0.6688953638076782, -0.011798952706158161, -0.19949567317962646, -0.013108624145388603, -0.001214600750245154, -0.5345645546913147, -0.004994179122149944, -0.0029829314444214106, -0.05920589342713356, -0.16875094175338745, -0.00020418466010596603, -0.0002671123365871608, -0.006052498705685139, -0.008813646622002125, -0.000359351426595822, -0.0077044242061674595, -0.0020276003051549196, -0.003022746881470084, -0.01437005028128624, -0.002055557444691658, -0.3009933531284332, -0.00494886701926589, -0.5703480243682861, -0.9375221729278564, -0.026863910257816315, -0.2570039927959442, -3.0443778038024902, -0.8614411354064941, -0.001327943871729076, -0.023483948782086372, -0.714978039264679, -0.05864665284752846, -0.00823755282908678, -0.001208885689266026, -0.0002892790944315493, -0.5237501263618469, -0.22448265552520752, -0.003865747479721904, -5.030505417380482e-05, -0.056018441915512085, -0.26276853680610657, -0.3432244658470154, -0.3340390920639038, -0.4535622000694275, -1.3284430503845215, -0.10345212370157242, -0.00044943721150048077, -0.029755162075161934, -0.0011547094909474254, -0.27238228917121887, -4.176263809204102, -0.6883301138877869, -1.1532649993896484, -2.198077917098999, -1.7801001071929932, -1.051904320716858, -0.0026721982285380363, -0.610554575920105, -0.029554955661296844, -0.0203693937510252, -0.00458048190921545, -0.029698923230171204, -0.0023035677149891853, -0.32007816433906555, -0.0003097769513260573, -0.29967042803764343, -1.8516520261764526, -0.03895173221826553, -0.9022700786590576, -1.547149658203125, -1.8631486892700195, -0.06591036170721054, -0.5238073468208313, -0.0021177739836275578, -0.04416832700371742, -0.16721339523792267, -0.06677649170160294, -0.002128361025825143, -0.00029940891545265913, -0.000646501372102648], "finish_reason": "length"}], "metrics": {"energy": 374.2794004535676, "energy_per_token": 1.4620289080217483, "time": 12.731758, "time_per_token": 0.0497334296875}}
{"outputs": [{"text": "# Check that the url is a string\n    if not isinstance(url, str):\n        raise TypeError(\"url must be a string\")\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist!\")\n\n    # Download the files from the specified directory\n    files_list = []\n    for (dir_path, _dirs, files) in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(dir_path, file_name)\n            files_list.append((file_name, file_path))\n\n    # Calculate the total size of the files in bytes\n    file_sizes_list = [(os.path.getsize(file_path), file_path) for (_, file_path) in files_list]\n\n    file_sizes = [size for (size, _) in file_sizes_list]\n    total_size = sum(file_sizes)\n\n    # Create a list of tuples of file_sizes and the file paths\n    file_", "tokens": ["#", " Check", " that", " the", " url", " is", " a", " string", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "url", " must", " be", " a", " string", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", " +", " \"", " does", " not", " exist", "!", "\"", ")", "\n", "\n", "    ", "#", " Download", " the", " files", " from", " the", " specified", " directory", "\n", "    ", "files", "_", "list", " =", " []", "\n", "    ", "for", " (", "dir", "_", "path", ",", " _", "dir", "s", ",", " files", ")", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "dir", "_", "path", ",", " file", "_", "name", ")", "\n", "            ", "files", "_", "list", ".", "append", "((", "file", "_", "name", ",", " file", "_", "path", "))", "\n", "\n", "    ", "#", " Calculate", " the", " total", " size", " of", " the", " files", " in", " bytes", "\n", "    ", "file", "_", "s", "izes", "_", "list", " =", " [(", "os", ".", "path", ".", "get", "size", "(", "file", "_", "path", ")", ",", " file", "_", "path", ")", " for", " (_", ",", " file", "_", "path", ")", " in", " files", "_", "list", "]", "\n", "\n", "    ", "file", "_", "s", "izes", " =", " [", "size", " for", " (", "size", ",", " _", ")", " in", " file", "_", "s", "izes", "_", "list", "]", "\n", "    ", "total", "_", "size", " =", " sum", "(", "file", "_", "s", "izes", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " t", "up", "les", " of", " file", "_", "s", "izes", " and", " the", " file", " paths", "\n", "    ", "file", "_"], "logprobs": [-0.9795613884925842, -1.430532693862915, -2.7057158946990967, -0.21960842609405518, -2.404336452484131, -0.14615707099437714, -1.7772252559661865, -1.0540679693222046, -0.4333557188510895, -0.009130982682108879, -0.04783792048692703, -0.09347432106733322, -0.024682005867362022, -0.0002795067266561091, -0.004482815973460674, -0.00010644822759786621, -0.005161531735211611, -0.014136415906250477, -0.00223042001016438, -0.0018856617389246821, -0.042646195739507675, -0.005319132469594479, -4.291525328881107e-06, -0.4306384027004242, -0.3815135955810547, -0.7572640180587769, -0.41422387957572937, -0.0018402085406705737, -0.04459025338292122, -0.027225803583860397, -0.1696741133928299, -0.0007886160165071487, -0.0028427925426512957, -1.179391622543335, -3.0722906589508057, -0.1594780683517456, -0.8828455209732056, -4.792098479811102e-05, -0.0012705596163868904, -0.014289554208517075, -0.6161713600158691, -0.0010477773612365127, -0.03853211924433708, -0.015912100672721863, -0.03395175188779831, -0.0029131616465747356, -0.05304918438196182, -0.003653994994238019, -0.0006347072194330394, -0.00015579440514557064, -0.05383050814270973, -2.1833388805389404, -0.7024912238121033, -0.1586606651544571, -0.5889729857444763, -0.002941093873232603, -0.025707969442009926, -3.1987955570220947, -0.04300539195537567, -0.001277702976949513, -0.009295400232076645, -0.5942087769508362, -0.004463827703148127, -0.4849746525287628, -4.477701663970947, -1.4447275400161743, -0.632309079170227, -0.4966365098953247, -0.04273266717791557, -1.6940827369689941, -0.02793366275727749, -0.3058423101902008, -0.007730448618531227, -0.5500765442848206, -1.9777823686599731, -1.083097219467163, -0.013609834015369415, -0.7977082133293152, -0.016261791810393333, -0.04916345700621605, -0.1726839244365692, -2.84683895111084, -0.8001963496208191, -1.7646088600158691, -0.031205283477902412, -0.00044586253352463245, -1.422956943511963, -2.3197431564331055, -0.5386786460876465, -0.023201536387205124, -0.07350467145442963, -0.02132452465593815, -0.0003289635351393372, -0.002514773979783058, -2.586808113846928e-05, -6.687417771900073e-05, -0.0009168949909508228, -0.004103455226868391, -0.03256307542324066, -0.022579481825232506, -0.0033138857688754797, -0.1575697511434555, -0.5003514289855957, -1.0615777969360352, -0.3630112111568451, -0.0007440659101121128, -0.0033921815920621157, -0.00019131260341964662, -0.0049978564493358135, -0.00428164005279541, -1.259663462638855, -0.10604053735733032, -0.05082980915904045, -0.0028728663455694914, -0.05023990198969841, -0.00030083899036981165, -0.0001746263587847352, -0.005381027702242136, -0.003134578000754118, -0.0002574589161667973, -0.003612422849982977, -2.8013790142722428e-05, -2.861018856492592e-06, -0.0012178155593574047, -0.0025028828531503677, -0.00011276562872808427, -2.1815061700181104e-05, -0.00025781645672395825, -0.003768961876630783, -0.009453295730054379, -0.45940276980400085, -0.0005402297829277813, -0.0010621865512803197, -0.002828646684065461, -0.001909815357066691, -1.4890813827514648, -0.06126730516552925, -0.0008629412623122334, -1.4227961301803589, -0.005528161767870188, -0.07877307385206223, -0.001278893556445837, -0.0022518294863402843, -0.10946780443191528, -0.005626436788588762, -0.17810383439064026, -0.004755734000355005, -0.339335173368454, -4.981961250305176, -0.20515026152133942, -1.0111653804779053, -0.9856822490692139, -0.10219710320234299, -0.42582690715789795, -0.1525668352842331, -2.045975685119629, -0.621597945690155, -0.10271777957677841, -0.002260988112539053, -2.0603737831115723, -0.0024370038881897926, -1.3920073509216309, -0.0008399534272029996, -2.066134214401245, -2.536280632019043, -0.008871426805853844, -3.3582887649536133, -0.4769377112388611, -1.811964830267243e-05, -0.033761490136384964, -5.149708886165172e-05, -0.011892843060195446, -0.0007091629668138921, -0.003998975269496441, -0.37353214621543884, -0.13393159210681915, -0.07523713260889053, -0.01953248120844364, -0.003848053514957428, -0.05330193042755127, -0.0026405726093798876, -0.47994256019592285, -0.015016021206974983, -0.112118199467659, -1.019892930984497, -0.32418981194496155, -0.006162096280604601, -0.0001833270798670128, -0.001980844885110855, -0.0041007245890796185, -0.004244723357260227, -0.0019240929977968335, -0.0007413261337205768, -5.8412379075889476e-06, -0.0035137124359607697, -0.005621694959700108, -2.8392860889434814, -0.0012987758964300156, -2.3331360816955566, -0.001815577270463109, -0.19942976534366608, -0.0004471732536330819, -0.8068495392799377, -0.9437887668609619, -0.7957428693771362, -0.16066761314868927, -0.6298588514328003, -0.06174439191818237, -0.0009141556802205741, -0.10331279784440994, -0.021032746881246567, -0.0005106813623569906, -0.002777054673060775, -3.266281055402942e-05, -3.290122185717337e-05, -6.556489552167477e-06, -0.0006233894382603467, -7.152531907195225e-06, -0.00594549672678113, -0.02413092739880085, -0.11273789405822754, -0.702898383140564, -0.02493469975888729, -0.4172776937484741, -0.06635456532239914, -0.0325968861579895, -0.004270719364285469, -0.0045359814539551735, -4.303362584323622e-05, -0.00018809456378221512, -2.264974000354414e-06, -0.0013180625392124057, -0.023067930713295937, -0.3203974962234497, -0.0011838816571980715, -0.40126219391822815, -2.936983108520508, -0.46804168820381165, -2.18288254737854, -0.33880165219306946, -2.2242391109466553, -0.0009728704462759197, -0.00015567521040793508, -2.355288505554199, -1.6514562368392944, -2.642817497253418, -3.466871976852417, -0.0012436520773917437, -0.4040868282318115, -2.9682247638702393, -1.3369828462600708, -1.429661750793457, -0.2675984799861908, -0.011184850707650185, -0.750891923904419, -0.006197757087647915], "finish_reason": "length"}], "metrics": {"energy": 393.2919555225373, "energy_per_token": 1.5362967012599114, "time": 12.7310505, "time_per_token": 0.049730666015625}}
{"outputs": [{"text": "# Create the dictionary with the required parameters to pass to the API\n    data = {\"files\": [], \"metadata\": metadata}\n\n    # Check if the directory exists, else raise a FileNotFoundError\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    # Loop through each file in the directory\n    for filename in os.listdir(directory):\n        # Check if the file is a directory or not\n        if os.path.isdir(f\"{directory}/{filename}\"):\n            # If the file is a directory, upload recursively\n            files = task_func(url, f\"{directory}/{filename}\", metadata)\n            data['files'].extend(files)\n        else:\n            # If the file is not a directory, upload it\n            file_path = f\"{directory}/{filename}\"\n            # Add the metadata to the file\n            with open(file_path, 'r') as file:\n                data['files'].append({\"name\": filename, \"content\": file.read()})\n\n    # Post the", "tokens": ["#", " Create", " the", " dictionary", " with", " the", " required", " parameters", " to", " pass", " to", " the", " API", "\n", "    ", "data", " =", " ", "{\"", "files", "\":", " []", ",", " \"", "metadata", "\":", " metadata", "}", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", ",", " else", " raise", " a", " File", "NotFound", "Error", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " directory", " or", " not", "\n", "        ", "if", " os", ".", "path", ".", "is", "dir", "(", "f", "\"", "{", "directory", "}/{", "filename", "}\"", "):", "\n", "            ", "#", " If", " the", " file", " is", " a", " directory", ",", " upload", " recurs", "ively", "\n", "            ", "files", " =", " task", "_", "func", "(", "url", ",", " f", "\"", "{", "directory", "}/{", "filename", "}\"", ",", " metadata", ")", "\n", "            ", "data", "['", "files", "']", ".", "extend", "(", "files", ")", "\n", "        ", "else", ":", "\n", "            ", "#", " If", " the", " file", " is", " not", " a", " directory", ",", " upload", " it", "\n", "            ", "file", "_", "path", " =", " f", "\"", "{", "directory", "}/{", "filename", "}\"", "\n", "            ", "#", " Add", " the", " metadata", " to", " the", " file", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "data", "['", "files", "']", ".", "append", "(", "{\"", "name", "\":", " filename", ",", " \"", "content", "\":", " file", ".", "read", "()", "})", "\n", "\n", "    ", "#", " Post", " the"], "logprobs": [-0.9795613884925842, -3.6075527667999268, -2.2954304218292236, -4.4155073165893555, -2.765045642852783, -0.3881048858165741, -3.108640670776367, -2.380082607269287, -2.9249885082244873, -2.65104341506958, -0.5232989192008972, -0.18492689728736877, -1.7403016090393066, -0.4031968414783478, -0.03686443716287613, -1.73873770236969, -0.0557645745575428, -2.403449296951294, -0.00045718232286162674, -2.1457560062408447, -0.04169430211186409, -0.5620168447494507, -0.6500651836395264, -0.09145894646644592, -0.3394080400466919, -0.0021820086985826492, -0.1927860826253891, -0.09669531881809235, -0.007245691493153572, -0.41590583324432373, -0.0012500813463702798, -0.338263601064682, -1.297066330909729, -0.32180124521255493, -0.1453654021024704, -0.28906017541885376, -0.07896300405263901, -2.020272731781006, -2.3936960697174072, -0.13439880311489105, -2.07524037361145, -0.015670141205191612, -0.002502407180145383, -0.043436143547296524, -0.259481817483902, -0.0038631348870694637, -0.061245888471603394, -0.1069389209151268, -0.003998500294983387, -9.65590606938349e-06, -0.0004905451205559075, -0.00885689351707697, -0.48234668374061584, -0.0006472161621786654, -0.003613016800954938, -0.00618306640535593, -0.004465963691473007, -0.0014075858052819967, -0.028816739097237587, -0.0017338256584480405, -0.00018880968855228275, -8.248942322097719e-05, -0.40877318382263184, -0.6741459369659424, -0.1231047660112381, -1.626184344291687, -0.3065069019794464, -1.2144256830215454, -0.0006316096987575293, -0.002878334140405059, -0.0012638922780752182, -0.14780215919017792, -0.0008799732895568013, -0.004841153509914875, -0.3445846140384674, -0.0183214470744133, -0.00015186110977083445, -0.0018969652010127902, -0.03979432210326195, -0.0014619863359257579, -0.11996689438819885, -2.6971278190612793, -0.2995724380016327, -1.5510509014129639, -0.06736353039741516, -0.09637027978897095, -0.005672310944646597, -0.14854072034358978, -0.37480124831199646, -0.0015392372151836753, -0.057728104293346405, -0.9700309634208679, -0.0030718303751200438, -0.009143976494669914, -0.0024010895285755396, -0.0019264726433902979, -4.410734163684538e-06, -0.00027926836628466845, -0.000445385929197073, -0.00012611546844709665, -0.0017022894462570548, -0.07817991822957993, -0.5615120530128479, -1.350327968597412, -0.08039920777082443, -0.12104827165603638, -0.08146850019693375, -0.13554725050926208, -0.3752390742301941, -0.7244856953620911, -1.0207966566085815, -0.9626227617263794, -0.2130039632320404, -0.0013860390754416585, -0.07120683789253235, -0.2363789826631546, -0.0007239343249239028, -7.247662142617628e-05, -0.0193164199590683, -0.00013636612857226282, -0.2157689332962036, -0.00036149643710814416, -2.180163621902466, -0.08401376008987427, -0.0025032395496964455, -0.006048944313079119, -0.01973739266395569, -0.0002233732520835474, -0.0013402060139924288, -0.00606861338019371, -0.005523538216948509, -0.004119007848203182, -0.6776099801063538, -1.020573377609253, -1.058553695678711, -0.13904817402362823, -0.006690008565783501, -0.017863109707832336, -0.007218115963041782, -0.02695036306977272, -4.134051322937012, -2.3893723487854004, -0.00044955636258237064, -0.22278347611427307, -0.0019083875231444836, -3.47407603263855, -0.21911916136741638, -0.15897829830646515, -0.0022352966479957104, -0.000805053801741451, -0.005476590245962143, -0.16804146766662598, -0.047212131321430206, -0.06476664543151855, -0.0040965694934129715, -0.005922151263803244, -0.0020028548315167427, -0.0005734706646762788, -6.186770770000294e-05, -0.002379683079198003, -0.001077786204405129, -0.035203058272600174, -0.015856251120567322, -0.00783655047416687, -0.4108246862888336, -0.4058700203895569, -1.6833771467208862, -0.0075445957481861115, -0.0007110689766705036, -0.2542920708656311, -0.24737206101417542, -0.009671970270574093, -0.004755377769470215, -0.008263090625405312, -0.022561999037861824, -0.26931366324424744, -0.07971620559692383, -6.41325386823155e-05, -0.028399573639035225, -0.0024370038881897926, -0.12364616990089417, -0.5749607086181641, -0.03720952197909355, -0.00266304356046021, -0.00941881351172924, -0.29003670811653137, -0.0007117837085388601, -0.0009858515113592148, -0.01272487174719572, -0.7577751278877258, -0.07562482357025146, -0.212018221616745, -0.016586974263191223, -1.4595328569412231, -0.8426692485809326, -0.31983792781829834, -0.0015653035370633006, -0.16692420840263367, -0.004793461877852678, -0.0008198237628675997, -0.0031084336806088686, -0.0008538890979252756, -0.00022218143567442894, -0.0010237219976261258, -0.006290161516517401, -0.06258110702037811, -2.265399932861328, -3.1413118839263916, -0.18663303554058075, -2.052582025527954, -0.1462426483631134, -0.05710858851671219, -0.35704123973846436, -1.1226556301116943, -0.0023252135142683983, -0.8201944231987, -0.0012492479290813208, -0.0005233110277913511, -0.011190862394869328, -0.003962167073041201, -9.059865078597795e-06, -0.03928922116756439, -0.40511760115623474, -0.9281282424926758, -0.2230532318353653, -0.0011148196645081043, -0.6206162571907043, -0.014625011011958122, -0.0021360930986702442, -0.0011016021016985178, -0.5340195894241333, -0.18659356236457825, -0.0299402866512537, -0.00010573305189609528, -0.002058888552710414, -0.003611353924497962, -0.34881362318992615, -0.473991721868515, -1.87991464138031, -0.0007983834366314113, -0.19752991199493408, -0.009366143494844437, -0.07150942087173462, -1.675564169883728, -0.019917136058211327, -0.0821470096707344, -0.01964692398905754, -0.00044764988706447184, -0.0023660066071897745, -0.48662057518959045, -0.0021941415034234524, -0.3267602324485779, -0.10918515175580978, -0.09733287245035172, -3.486320972442627, -0.08113714307546616], "finish_reason": "length"}], "metrics": {"energy": 357.4154277000428, "energy_per_token": 1.3961540144532922, "time": 12.74446, "time_per_token": 0.049783046875}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError('directory not found')\n\n    if not url.startswith('http'):\n        raise TypeError(\"URL is invalid\")\n\n    files = []\n\n    for root, _, files_in_dir in os.walk(directory):\n        for file in files_in_dir:\n            path = os.path.join(root, file)\n            files.append((path, path))\n    response = requests.post(url, data=json.dumps(files), headers=HEADERS)\n\n    if not response.ok:\n        print(response)\n        raise RuntimeError(\"Request failed\")\n\n    codes = response.json()\n\n    for code in codes:\n        time.sleep(1)\n        if code == '200':\n            print(\"Upload successful\")\n        else:\n            print(\"Upload failed\")\n    return codes", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "directory", " not", " found", "')", "\n", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "http", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " is", " invalid", "\"", ")", "\n", "\n", "    ", "files", " =", " []", "\n", "\n", "    ", "for", " root", ",", " _", ",", " files", "_", "in", "_", "dir", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", "_", "in", "_", "dir", ":", "\n", "            ", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "files", ".", "append", "((", "path", ",", " path", "))", "\n", "    ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "=", "json", ".", "d", "umps", "(", "files", ")", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "\n", "    ", "if", " not", " response", ".", "ok", ":", "\n", "        ", "print", "(", "response", ")", "\n", "        ", "raise", " Runtime", "Error", "(", "\"", "Request", " failed", "\"", ")", "\n", "\n", "    ", "codes", " =", " response", ".", "json", "()", "\n", "\n", "    ", "for", " code", " in", " codes", ":", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "if", " code", " ==", " '", "2", "0", "0", "':", "\n", "            ", "print", "(", "\"", "Upload", " successful", "\"", ")", "\n", "        ", "else", ":", "\n", "            ", "print", "(", "\"", "Upload", " failed", "\"", ")", "\n", "    ", "return", " codes"], "logprobs": [-2.4014153480529785, -0.1701347827911377, -0.07028675824403763, -4.160317621426657e-05, -0.000938332756049931, -0.03911555930972099, -0.8484588265419006, -0.006970019545406103, -0.0007242917199619114, -0.00516342930495739, -0.010417606681585312, -0.02315727435052395, -0.003652332117781043, -0.05180870741605759, -0.004344430286437273, -0.000377583724912256, -0.00014184899919200689, -1.9929134845733643, -3.676675796508789, -0.9491872191429138, -0.04751160368323326, -0.18302209675312042, -0.002932298230007291, -0.580815851688385, -0.001468414207920432, -1.3708562850952148, -0.11355484277009964, -0.33602866530418396, -0.2069728970527649, -0.4749341905117035, -0.00027533553657121956, -1.1920928244535389e-07, -0.14364898204803467, -0.3876005709171295, -0.17246122658252716, -0.12035084515810013, -0.013985135592520237, -0.0009704885887913406, -0.016621796414256096, -0.018232371658086777, -8.225102646974847e-05, -2.4493234157562256, -0.6948280334472656, -1.517006278038025, -1.2392566204071045, -0.6030916571617126, -0.1682797521352768, -0.0008879532688297331, -0.005492477212101221, -0.05059513449668884, -0.0019232601625844836, -2.8244664669036865, -0.19163866341114044, -0.7761167287826538, -0.034865569323301315, -1.7318795919418335, -0.0011631635716184974, -0.3040316700935364, -1.3028103113174438, -0.002803564304485917, -1.1674450635910034, -0.11286845803260803, -0.16704384982585907, -0.2552424967288971, -2.168142080307007, -0.014226562343537807, -0.448785662651062, -0.024275677278637886, -0.002179153962060809, -0.0001072826053132303, -0.00011824862303910777, -0.0014002051902934909, -0.0031531162094324827, -0.03653107210993767, -0.011586516164243221, -0.015135794878005981, -0.11982572823762894, -0.4968898296356201, -0.5515053868293762, -0.007284627296030521, -0.0006480501033365726, -9.65590606938349e-06, -2.0265558760002023e-06, -3.576272320060525e-06, -0.00028772983932867646, -0.0033699646592140198, -0.014465579763054848, -2.744076728820801, -0.03973326086997986, -0.033457063138484955, -8.642300235806033e-05, -9.190614218823612e-05, -0.015477189794182777, -0.00883597880601883, -0.00021979777375236154, -0.004491597879678011, -0.0011647114297375083, -0.002422019839286804, -0.0005888396990485489, -0.005725294817239046, -0.07361110299825668, -0.5317987203598022, -0.0020499660167843103, -0.001095052808523178, -0.931313157081604, -0.11597567051649094, -0.005808972287923098, -1.3719931840896606, -0.6211473941802979, -0.014263346791267395, -3.021131753921509, -2.5996365547180176, -0.5428973436355591, -0.21234199404716492, -0.00015925093612167984, -0.08687808364629745, -0.02496900036931038, -0.16386482119560242, -0.28192734718322754, -1.8005212545394897, -0.06882114708423615, -0.10612223297357559, -0.00011336160969221964, -0.00033861625706776977, -4.2437604861333966e-05, -0.17569120228290558, -0.404508113861084, -0.04123580455780029, -0.0008588915807195008, -0.03696439042687416, -0.006803561467677355, -0.0013524680398404598, -7.855583680793643e-05, -0.39655381441116333, -0.030535118654370308, -1.4690901041030884, -0.0029621317517012358, -1.178454875946045, -1.9123743772506714, -0.022620389237999916, -0.04084106907248497, -0.09767770767211914, -0.008519968017935753, -0.00883515179157257, -0.002687416272237897, -1.8359477519989014, -0.15031227469444275, -0.5374962091445923, -2.491487503051758, -0.011011429131031036, -0.6184604167938232, -1.4693176746368408, -1.631216287612915, -0.004108679015189409, -0.3816521465778351, -0.5989981889724731, -3.6531331539154053, -0.51828533411026, -0.43156716227531433, -0.014969047158956528, -0.009279455989599228, -0.16842502355575562, -0.0050940485671162605, -3.8186514377593994, -0.02096492424607277, -2.181027412414551, -0.002459835959598422, -0.076198510825634, -0.04976432025432587, -0.22347137331962585, -0.8409180641174316, -0.0013199674431234598, -0.6738412976264954, -0.834255039691925, -0.037566542625427246, -0.00878824107348919, -0.05260355398058891, -0.0022027057129889727, -0.0075099291279911995, -1.610794186592102, -0.001111128251068294, -0.0002244459028588608, -0.0004040378553327173, -0.05561574175953865, -0.05040835216641426, -0.08693873882293701, -1.8830715417861938, -2.16129469871521, -1.0103580951690674, -1.6444405317306519, -1.1363067626953125, -1.353492259979248, -0.03070726990699768, -0.19296576082706451, -0.022829212248325348, -0.026195822283625603, -0.003277408890426159, -0.25010156631469727, -0.328035444021225, -0.7631062865257263, -1.3173600435256958, -1.7378337383270264, -0.4959982633590698, -0.05197881534695625, -0.012383359484374523, -0.26842403411865234, -0.16855072975158691, -0.00044586253352463245, -0.008546443656086922, -0.0014253228437155485, -0.04794212430715561, -0.029307015240192413, -0.3759600520133972, -0.13834024965763092, -0.14444756507873535, -0.3753095865249634, -0.1431952565908432, -0.021752700209617615, -1.3052300214767456, -0.07690953463315964, -0.05804671719670296], "finish_reason": "stop"}], "metrics": {"energy": 354.1348772830965, "energy_per_token": 1.6024202591995316, "time": 11.888393, "time_per_token": 0.0537936334841629}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: \" + directory)\n\n    # Check if the URL is valid\n    if not url.startswith(\"https\"):\n        raise TypeError(\"Invalid URL: \" + url)\n\n    # Read all files from the directory\n    files = os.listdir(directory)\n    total_files = len(files)\n\n    # Upload files one at a time\n    responses = []\n    for i, filename in enumerate(files):\n        path = os.path.join(directory, filename)\n\n        with open(path, 'rb') as f:\n            file_data = f.read()\n\n            # Send the request to the server\n            response = requests.post(url, files={\n                'file': (filename, file_data)\n            }, headers=HEADERS, metadata=json.dumps(metadata))\n            responses.append(response.status_code)\n\n        if i < total_files - 1:\n            time.sleep(1)\n", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ":", " \"", " +", " directory", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " URL", " is", " valid", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "(", "\"", "https", "\"", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " URL", ":", " \"", " +", " url", ")", "\n", "\n", "    ", "#", " Read", " all", " files", " from", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "total", "_", "files", " =", " len", "(", "files", ")", "\n", "\n", "    ", "#", " Upload", " files", " one", " at", " a", " time", "\n", "    ", "respons", "es", " =", " []", "\n", "    ", "for", " i", ",", " filename", " in", " enumerate", "(", "files", "):", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "\n", "        ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "\n", "            ", "#", " Send", " the", " request", " to", " the", " server", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "={", "\n", "                ", "'", "file", "':", " (", "filename", ",", " file", "_", "data", ")", "\n", "            ", "}", ",", " headers", "=", "HEAD", "ERS", ",", " metadata", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "            ", "respons", "es", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "        ", "if", " i", " <", " total", "_", "files", " -", " ", "1", ":", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n"], "logprobs": [-0.9795613884925842, -1.430532693862915, -0.5855873227119446, -0.2352607548236847, -0.1936754584312439, -0.03338154777884483, -0.40584444999694824, -0.009264456108212471, -0.060360025614500046, -0.06187517195940018, -0.0032259586732834578, -1.1920858014491387e-05, -0.0002699726028367877, -0.006919942796230316, -1.3454711437225342, -0.0007457336178049445, -0.00028725311858579516, -0.0023198616690933704, -0.002750425599515438, -0.0021713031455874443, -0.0014872215688228607, -0.05844753980636597, -0.002522978698834777, -0.00022504181833937764, -7.545663538621739e-05, -0.26486265659332275, -1.5946840047836304, -0.5415534973144531, -0.6231765747070312, -0.005109704099595547, -1.1611140966415405, -0.8535624742507935, -0.13525624573230743, -0.05067627504467964, -0.0036410484462976456, -0.0017498909728601575, -0.15343768894672394, -0.002700256183743477, -0.15813657641410828, -0.8189185261726379, -0.18484137952327728, -0.08961237967014313, -0.6123470067977905, -0.03032616525888443, -0.07565543800592422, -0.06580779701471329, -0.0017207353375852108, -0.45445579290390015, -0.07387033104896545, -0.3440372347831726, -0.15155212581157684, -0.13903935253620148, -0.00013398226292338222, 0.0, -0.6787211298942566, -0.06025048717856407, -0.7889496684074402, -2.1037051677703857, -0.19113020598888397, -0.007716016843914986, -0.0007241725688800216, -0.017568446695804596, -0.009738555178046227, -5.972207145532593e-05, -0.04462924599647522, -0.04688037931919098, -0.323560506105423, -0.03330545127391815, -0.1355198621749878, -0.009124604053795338, -0.007522825617343187, -0.010548903606832027, -0.004394398536533117, -0.0008360228384844959, -0.03951223939657211, -0.000985017861239612, -0.2607896029949188, -3.8736226558685303, -1.0206835269927979, -0.22922377288341522, -0.9990221261978149, -0.01773780770599842, -0.1352846771478653, -0.20079249143600464, -0.0021082572638988495, -0.3700929582118988, -0.08606529235839844, -1.1574108600616455, -6.270212179515511e-05, -0.006015647668391466, -2.861018856492592e-06, -0.00042906138696707785, -0.001189954113215208, -0.0003716255014296621, -0.002989943837746978, -1.4626871347427368, -4.2907209396362305, -0.34625640511512756, -0.8338167667388916, -0.03841350972652435, -0.020003139972686768, -0.0004354958946350962, -0.0017095488728955388, -0.00041166413575410843, -0.00854230672121048, -0.582305908203125, -0.0009420248097740114, -0.33573582768440247, -2.512134313583374, -1.8026201725006104, -1.7604485750198364, -1.81416916847229, -0.004427986219525337, -3.731181277544238e-05, -0.5114641189575195, -0.003174387151375413, -2.085843086242676, -0.0004839917819481343, -0.010292311199009418, -0.01598331518471241, -0.011725553311407566, -0.08972310274839401, -0.16297858953475952, -0.6922991871833801, -0.12189570814371109, -1.0555235147476196, -0.00029118589009158313, -0.0006311332108452916, -0.00045944625162519515, -0.0029878043569624424, -0.15220212936401367, -0.002187480451539159, -0.042727068066596985, -2.8567428588867188, -0.015719078481197357, -0.04900297150015831, -7.271740287251305e-06, -1.6569954823353328e-05, -0.011526182293891907, -0.0011481605470180511, -7.4741430580616e-05, -0.0005710878176614642, -0.0002195594133809209, -0.000791236583609134, -7.438383181579411e-05, -0.0033028358593583107, -1.7217094898223877, -0.0012413900112733245, -1.439012050628662, -0.01724604330956936, -0.0004172646440565586, -0.0008599635912105441, -0.010192841291427612, -0.4550471305847168, -0.002316531492397189, -0.001918738940730691, -0.0004536076739896089, -0.4381232261657715, -0.02586991712450981, -0.008683422580361366, -0.015915971249341965, -2.52205228805542, -0.3212471306324005, -1.1689457893371582, -0.0011961455456912518, -0.11221069097518921, -0.00013541258522309363, -0.00014053787162993103, -0.0055931261740624905, -0.014042736031115055, -0.7584955096244812, -0.7001378536224365, -0.9742919206619263, -2.7162203788757324, -0.8799053430557251, -1.098883867263794, -0.9566018581390381, -0.05308886244893074, -0.09987038373947144, -0.22199954092502594, -0.0028912907000631094, -0.4476293623447418, -0.0054222894832491875, -0.012434929609298706, -6.139089964563027e-05, -0.09752017259597778, -0.002483737887814641, -0.24527592957019806, -0.5043177008628845, -1.2717647552490234, -0.10471576452255249, -3.2601661682128906, -0.0022975020110607147, -0.406903475522995, -0.17755649983882904, -0.04893168434500694, -0.26102572679519653, -0.06199540197849274, -0.0007699147681705654, -0.017000071704387665, -0.0001463782973587513, -3.135155202471651e-05, -0.8509002923965454, -0.1611994206905365, -0.020492615178227425, -0.004984689876437187, -0.0003121604095213115, -0.17821775376796722, -0.007544240448623896, -0.0014149664202705026, -0.00010716341057559475, -0.2558872103691101, -1.0656254291534424, -0.053518231958150864, -1.3185856342315674, -0.0002829628065228462, -0.0036056526005268097, -4.351044481154531e-05, -0.006713335867971182, -0.008607075549662113, -0.07532237470149994, -0.008352821692824364, -0.6126914620399475, -0.5936604142189026, -4.768360213347478e-06, -0.001328896265476942, -0.000614335120189935, -0.022793324664235115, -0.02159941755235195, -0.07653813064098358, -0.004812444094568491, -0.0012318650260567665, -1.2874520507466514e-05, -0.0005539313424378633, -0.02416478842496872, -0.3421924412250519, -1.0800907611846924, -2.9133503437042236, -0.42788806557655334, -1.5082988739013672, -0.11218586564064026, -7.652943895664066e-05, -2.9205850296420977e-05, -0.09758332371711731, -0.003211580915376544, -0.002698948374018073, -0.007251372095197439, -0.04911624640226364, -0.0024662574287503958, -0.8957444429397583, -0.00013755806139670312, -7.557583012385294e-05, -0.0002169373765354976, -0.09593520313501358, -0.015122761018574238, -0.21968230605125427], "finish_reason": "length"}], "metrics": {"energy": 397.0035793972015, "energy_per_token": 1.5507952320203184, "time": 13.75317, "time_per_token": 0.0537233203125}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory: '{directory}' does not exist.\")\n\n    url = str(url)\n    if not url.startswith(\"https://\"):\n        raise TypeError(f\"Invalid url: '{url}'\")\n\n    try:\n        with open(os.path.join(directory, 'list.txt'), 'w') as f:\n            for filename in os.listdir(directory):\n                f.write(str(filename) + \"\\n\")\n\n    except OSError as e:\n        print(e)\n\n    status_codes = []\n\n    for file in os.listdir(directory):\n        try:\n            file = os.path.join(directory, file)\n            with open(file, 'rb') as f:\n                data = {\n                    'file': f.read(),\n                    'metadata': metadata\n                }\n                resp = requests.post(url=url, data=json.dumps(data), headers=HEADERS)\n                status_", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", ":", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "url", " =", " str", "(", "url", ")", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "(", "\"", "https", "://", "\"", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " url", ":", " '", "{", "url", "}'", "\"", ")", "\n", "\n", "    ", "try", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "list", ".", "txt", "')", ",", " '", "w", "')", " as", " f", ":", "\n", "            ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "                ", "f", ".", "write", "(", "str", "(", "filename", ")", " +", " \"", "\\", "n", "\"", ")", "\n", "\n", "    ", "except", " O", "SE", "rror", " as", " e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "try", ":", "\n", "            ", "file", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "data", " =", " {", "\n", "                ", "    ", "'", "file", "':", " f", ".", "read", "()", ",", "\n", "                ", "    ", "'", "metadata", "':", " metadata", "\n", "                ", "}", "\n", "                ", "resp", " =", " requests", ".", "post", "(", "url", "=", "url", ",", " data", "=", "json", ".", "d", "umps", "(", "data", ")", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "                ", "status", "_"], "logprobs": [-2.4014153480529785, -0.1701347827911377, -0.07028675824403763, -4.160317621426657e-05, -0.000938332756049931, -0.03911555930972099, -0.8484588265419006, -0.006970019545406103, -0.0007242917199619114, -0.00516342930495739, -0.010417606681585312, -0.02315727435052395, -0.003652332117781043, -0.05180870741605759, -0.004344430286437273, -0.000377583724912256, -0.00014184899919200689, -0.6346390247344971, -0.6195201277732849, -0.32695865631103516, -0.942919135093689, -3.421668529510498, -1.7342782020568848, -0.0035634846426546574, -0.0137686962261796, -0.010014763101935387, -0.7064575552940369, -0.0031442036852240562, -0.022078316658735275, -0.6741325855255127, -0.050467971712350845, -0.0005670370301231742, -0.007532527670264244, -0.3632868826389313, -0.0011152960360050201, -3.57647705078125, -0.36582446098327637, -2.9836325645446777, -0.006381254643201828, -0.011604545637965202, -0.023065367713570595, -0.10164621472358704, -0.25956016778945923, -0.6476036906242371, -0.31493204832077026, -0.15570512413978577, -0.06739651411771774, -0.192490816116333, -0.00011073929636040702, 0.0, -0.8814941644668579, -0.21518272161483765, -1.104348063468933, -0.15401187539100647, -0.01479275617748499, -0.5770294666290283, -0.016848286613821983, -0.0008568667690269649, -0.1253543496131897, -0.023236362263560295, -0.00010322991875000298, -0.024320702999830246, -0.3999427258968353, -0.021105932071805, -0.7872492671012878, -2.005425453186035, -0.19431044161319733, -0.15893812477588654, -0.0014418693026527762, -0.002707508159801364, -0.01267108041793108, -0.6049320697784424, -0.000624104228336364, -0.004465014673769474, -0.04425762966275215, -0.001312109874561429, -3.109260082244873, -0.0007188120507635176, -0.007028261199593544, -0.02054411917924881, -1.6753395795822144, -0.8591547608375549, -0.0526936911046505, -1.1313254833221436, -3.766942609217949e-05, -0.07045864313840866, -0.04179857671260834, -0.11271851509809494, -0.0038860533386468887, -0.03502454236149788, -0.0037181309890002012, -0.5309022068977356, -4.075007438659668, -0.22860394418239594, -0.7644761800765991, -0.48791733384132385, -0.00024434918304905295, -0.1515154391527176, -0.8992705941200256, -0.09052519500255585, -0.0033970526419579983, -0.754005491733551, -0.06099513918161392, -0.018636366352438927, -0.022333301603794098, -0.7711360454559326, -0.981162428855896, -0.017913812771439552, -0.05934419482946396, -0.00208291900344193, -0.0023913378827273846, -5.483612312673358e-06, -0.003419506596401334, -0.004314044490456581, -0.0017677409341558814, -0.008702212013304234, -0.004697122145444155, -0.9178518056869507, -0.0027186835650354624, -0.011250627227127552, -0.014957655221223831, -3.7639079093933105, -0.013662869110703468, -0.42227843403816223, -0.34214240312576294, -0.012451883405447006, -1.267927885055542, -0.05020373687148094, -0.007380718365311623, -0.0009579836623743176, -0.000526289688423276, -0.008433797396719456, -0.5010647177696228, -1.8977488279342651, -0.029226552695035934, -2.3728175163269043, -9.775113539944869e-06, -1.0013530300057027e-05, -0.5533736348152161, -0.3127635717391968, -0.0019752532243728638, -0.007827088236808777, -0.0024899214040488005, -0.45327526330947876, -0.030974626541137695, -1.755873441696167, -0.0696430653333664, -0.013740594498813152, -0.5197111964225769, -0.015312377363443375, -2.092376708984375, -0.4271557629108429, -0.113472580909729, -0.03401166945695877, -0.03006129525601864, -0.015956448391079903, -1.2705345153808594, -0.0006281548412516713, -2.2498085498809814, -1.8973835706710815, -0.5668164491653442, -0.06626710295677185, -0.00482312124222517, -0.011406092904508114, -1.5139465176616795e-05, -0.00450750021263957, -0.006705994252115488, -0.0063646710477769375, -0.005234227981418371, -0.06547299772500992, -2.4337692260742188, -0.0002559096028562635, -0.0018413984216749668, -0.01818566583096981, -2.760171413421631, -1.2483447790145874, -0.20566301047801971, -0.0005189026123844087, -0.0007014198345132172, -0.014390966854989529, -0.008642295375466347, -0.0007040405762381852, -0.0022426710929721594, -0.0003033416287507862, -0.009970268234610558, -0.0015561387408524752, -0.004948511254042387, -0.14031252264976501, -1.5080032348632812, -0.06409087777137756, -0.0024899214040488005, -0.017581917345523834, -0.14329856634140015, -0.16261796653270721, -0.08438678085803986, -0.007053356617689133, -0.000902007392141968, -0.17997798323631287, -0.0519804023206234, -0.007739675231277943, -0.020229099318385124, -2.701218366622925, -0.010853661224246025, -1.9951698780059814, -0.019641663879156113, -0.00135996809694916, -0.016448963433504105, -0.403109073638916, -0.8339726328849792, -0.09556939452886581, -0.7944384813308716, -2.261279344558716, -0.10969995707273483, -0.004615131299942732, -0.02714807540178299, -0.01234403345733881, -0.0002643712505232543, -0.007357524707913399, -0.05808642506599426, -0.5710566639900208, -0.00498563889414072, -0.7141882181167603, -0.3653457462787628, -0.0015373327769339085, -0.01556017342954874, -0.000996212475001812, -0.3007591664791107, -3.0944948196411133, -0.01341977808624506, -0.004920397885143757, -7.068861305015162e-05, -0.058180343359708786, -0.0038469848223030567, -0.20126985013484955, -2.588906764984131, -0.08299107849597931, -0.3188427686691284, -0.8626014590263367, -0.0024978886358439922, -0.4339577555656433, -3.790783375734463e-05, -0.00014530557382386178, -4.3987260141875595e-05, -0.0005198557628318667, -0.0012856797548010945, -0.014539248310029507, -0.0011606630869209766, -0.07420077919960022, -0.006293715443462133, -0.0014516302617266774, -2.5987286790041253e-05, -0.07720553874969482, -0.02904280088841915, -0.0678047463297844, -0.5114942193031311, -0.05378904938697815], "finish_reason": "length"}], "metrics": {"energy": 399.294552368164, "energy_per_token": 1.5597443451881405, "time": 12.727454, "time_per_token": 0.0497166171875}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The given directory does not exist!\")\n\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string!\")\n\n    statuses = []\n    for file in os.listdir(directory):\n        try:\n            with open(os.path.join(directory, file), 'rb') as f:\n                response = requests.post(\n                    f\"{url}/api/v1/uploads\",\n                    data=json.dumps({\n                        \"name\": file,\n                        **metadata\n                    }),\n                    headers=HEADERS)\n\n            response.raise_for_status()\n\n            statuses.append(response.status_code)\n            time.sleep(1)\n        except Exception as e:\n            print(e)\n\n    return statuses", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " given", " directory", " does", " not", " exist", "!", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " must", " be", " a", " string", "!", "\"", ")", "\n", "\n", "    ", "status", "es", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "    ", "f", "\"", "{", "url", "}/", "api", "/", "v", "1", "/", "uploads", "\"", ",", "\n", "                ", "    ", "data", "=", "json", ".", "d", "umps", "({", "\n", "                ", "        ", "\"", "name", "\":", " file", ",", "\n", "                ", "        ", "**", "metadata", "\n", "                ", "    ", "})", ",", "\n", "                ", "    ", "headers", "=", "HEAD", "ERS", ")", "\n", "\n", "            ", "response", ".", "raise", "_", "for", "_", "status", "()", "\n", "\n", "            ", "status", "es", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "    ", "return", " stat", "uses", "\n", "\n", "if"], "logprobs": [-2.4014153480529785, -0.1701347827911377, -0.07028675824403763, -4.160317621426657e-05, -0.000938332756049931, -0.03911555930972099, -0.55997234582901, -0.0018287854036316276, -0.007067561149597168, -0.015126636251807213, -0.025748400017619133, -0.003808746114373207, -0.06354555487632751, -0.0033085390459746122, -0.0003311085747554898, -0.00011693747364915907, -0.49243924021720886, -1.3737714290618896, -1.4824514389038086, -3.084407329559326, -0.09087391942739487, -0.4226836860179901, -0.002577794250100851, -0.02278435230255127, -1.9261952638626099, -0.0538192093372345, -0.001122916815802455, -0.008426113985478878, -0.4539710581302643, -0.0010146714048460126, -1.3173556327819824, -0.12288139015436172, -2.6527791023254395, -0.00034540885826572776, -0.03584560379385948, -0.0009047467028722167, -0.008455193601548672, -0.1465570330619812, -0.004490885883569717, -0.0010994586627930403, -0.011579328216612339, -0.005783253349363804, -2.7656173188006505e-05, -0.05245232582092285, -0.1221500039100647, -2.1261799335479736, -0.8722252249717712, -0.004494565073400736, -0.16762983798980713, -0.054064083844423294, -0.46150022745132446, -0.011280684731900692, -0.0005409446312114596, -0.002930040005594492, -0.07379304617643356, -0.0020569849293679, -1.7964279651641846, -1.826392412185669, -0.018472891300916672, -0.02750905230641365, -0.04064764827489853, -0.5237184166908264, -0.7061313390731812, -1.2047315835952759, -0.5927910804748535, -0.04580463841557503, -0.0011867393041029572, -0.011811204254627228, -7.271740287251305e-06, -0.0010265801101922989, -0.0013021094491705298, -0.0011268462985754013, -0.019320162013173103, -0.03707869350910187, -3.226623058319092, -0.00022825974156148732, -0.0052949427627027035, -0.005928076803684235, -0.7746466398239136, -0.016253463923931122, -0.005812646355479956, -0.38432183861732483, -0.0007986216805875301, -0.00023827097902540118, -0.0032510305754840374, -0.0006947487709112465, -0.00014697425649501383, -0.0013486584648489952, -0.0003625689132604748, -0.004302174784243107, -0.09509430080652237, -0.00025876989820972085, -0.2431105077266693, -0.01083160936832428, -0.004038750194013119, -0.0008498394163325429, -0.4179612100124359, -0.05719933658838272, -0.010404983535408974, -0.008047182112932205, -0.767988383769989, -0.007288414519280195, -0.007666687481105328, -0.00020382710499688983, -0.22228488326072693, -0.007142841350287199, -1.1366063356399536, -0.0008191090892069042, -0.021430009976029396, -2.4191434383392334, -0.39554184675216675, -0.013275211676955223, -0.002001189161092043, -0.10748711973428726, -1.992201328277588, -0.027329623699188232, -0.7153957486152649, -0.13010583817958832, -0.03910696133971214, -1.7799420356750488, -0.42606493830680847, -0.001364015624858439, -0.4901493489742279, -0.000491855782456696, -0.0008599635912105441, -1.697614312171936, -0.2318483591079712, -0.28392264246940613, -7.009260298218578e-05, -0.0008232779800891876, -4.827859811484814e-05, -1.075867772102356, -0.9542450308799744, -0.000692842761054635, -0.014536076225340366, -0.7824158072471619, -2.3382201194763184, -0.002910784212872386, -0.1325468122959137, -0.008659431710839272, -0.005077799782156944, -8.821098163025454e-05, -0.007649888750165701, -2.5428669452667236, -0.01252993755042553, -0.5602184534072876, -0.0014949585311114788, -0.014594114385545254, -0.012070705182850361, -0.01431893277913332, -0.024763762950897217, -0.0006525770877487957, -0.002961894031614065, -0.06147359311580658, -0.010120741091668606, -0.0011718557216227055, -1.5139465176616795e-05, -2.1905059814453125, -0.018095875158905983, -1.622968077659607, -1.0206226110458374, -2.7671403884887695, -0.09337616711854935, -0.011950916610658169, -1.7881377516459906e-06, -1.7523612768854946e-05, -0.00016246906307060272, -5.245195097813848e-06, -0.0011369676794856787, -0.03338662162423134, -1.3477184772491455, -0.02874411642551422, -0.8364431858062744, -0.13249272108078003, -0.004703647922724485, -0.005743666552007198, -0.00566176138818264, -0.030587265267968178, -0.0013196102809160948, -0.02042931318283081, -0.0006748544401489198, -1.5616295058862306e-05, -0.0004907834227196872, -0.0032728936057537794, -1.2797105312347412, -0.11531516909599304, -3.909988299710676e-05, -9.870042413240299e-05, -0.00014172980445437133, -0.04547036811709404, -0.01333944033831358, -0.06271255761384964, -0.28044819831848145, -0.00622014794498682, -1.1394015550613403, -0.07499706000089645, -0.233274906873703, -0.00024136967840604484, -0.005067362450063229, -0.0029173216316848993, -0.2879232168197632, -0.016259798780083656, -0.7224515080451965, -0.06525067239999771, -0.009488957934081554, -0.8479533195495605, -0.01757594384253025, -0.02836759202182293, -0.010069877840578556, -0.00014804698002990335, -0.970786452293396, -0.01772059127688408, -0.7822949290275574], "finish_reason": "stop"}], "metrics": {"energy": 300.03201030159, "energy_per_token": 1.4086009873314085, "time": 10.65376, "time_per_token": 0.05001765258215962}}
{"outputs": [{"text": "# Checks if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"File or directory not found\")\n\n    # Check if the url is valid\n    if not url.lower().startswith(\"http\"):\n        raise TypeError(\"Invalid url\")\n\n    # List all the files in the directory\n    files = [f for f in os.listdir(directory)]\n\n    # If there are no files, raise an error\n    if not files:\n        raise ValueError(\"No files to upload\")\n\n    # Remove any existing files that have the same name as a new file in the directory\n    for filename in files:\n        if os.path.isfile(os.path.join(directory, filename)) and os.path.basename(filename) in os.listdir(directory):\n            os.remove(os.path.join(directory, filename))\n\n    # Open the file to get its information\n    files_info = open(os.path.join(directory, files[0]))\n\n    # Get the size of the file to calculate the", "tokens": ["#", " Che", "cks", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "File", " or", " directory", " not", " found", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " url", " is", " valid", "\n", "    ", "if", " not", " url", ".", "lower", "()", ".", "start", "sw", "ith", "(", "\"", "http", "\"", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " url", "\"", ")", "\n", "\n", "    ", "#", " List", " all", " the", " files", " in", " the", " directory", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "directory", ")]", "\n", "\n", "    ", "#", " If", " there", " are", " no", " files", ",", " raise", " an", " error", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "No", " files", " to", " upload", "\"", ")", "\n", "\n", "    ", "#", " Remove", " any", " existing", " files", " that", " have", " the", " same", " name", " as", " a", " new", " file", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", "))", " and", " os", ".", "path", ".", "bas", "ename", "(", "filename", ")", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", "))", "\n", "\n", "    ", "#", " Open", " the", " file", " to", " get", " its", " information", "\n", "    ", "files", "_", "info", " =", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " files", "[", "0", "]))", "\n", "\n", "    ", "#", " Get", " the", " size", " of", " the", " file", " to", " calculate", " the"], "logprobs": [-0.9795613884925842, -3.8356258869171143, -0.005556021351367235, -0.5792586207389832, -0.2432837188243866, -0.38280630111694336, -0.13133668899536133, -0.7228787541389465, -0.01568973995745182, -0.10996805131435394, -0.13223697245121002, -0.005321622826159, -1.8358061424805783e-05, -0.0006243425305001438, -0.0068477243185043335, -0.3368241786956787, -0.0010837402660399675, -0.00913736131042242, -0.010238388553261757, -0.0022594418842345476, -0.002404895145446062, -0.06905703246593475, -0.003679649904370308, -0.00022456508304458112, -8.5588610090781e-05, -0.5075939297676086, -1.3518221378326416, -2.8463428020477295, -2.972104072570801, -0.5518720746040344, -0.46723422408103943, -0.0012767505832016468, -0.8217050433158875, -0.008703985251486301, -0.010324874892830849, -0.28439682722091675, -0.00485894875600934, -0.22003872692584991, -3.3140969276428223, -0.8186403512954712, -0.3576764166355133, -1.2574610710144043, -0.07513396441936493, -0.1872846633195877, -0.14428040385246277, -0.0038440159987658262, -0.4120551645755768, -0.10338708758354187, -0.3529406189918518, -0.24177807569503784, -3.1407551765441895, -0.0014627005439251661, -0.0022113888990134, -0.032179560512304306, -0.0001308832288486883, 0.0, -0.7047103643417358, -0.2154022604227066, -0.505365252494812, -0.24986593425273895, -0.04916867986321449, -0.006208182778209448, -0.0012886562617495656, -0.026639096438884735, -0.022989878430962563, -5.2927523938706145e-05, -0.05771482735872269, -0.09599271416664124, -0.5791473388671875, -1.312201738357544, -0.3755638897418976, -0.0009022455778904259, -0.0028802361339330673, -0.05324507877230644, -0.0017382287187501788, -0.3575792908668518, -3.0863993167877197, -0.8942346572875977, -1.3496079444885254, -0.050520673394203186, -0.21622739732265472, -0.02048712596297264, -0.12014228850603104, -0.1416746973991394, -0.0032910730224102736, -0.3167368471622467, -0.13842381536960602, -0.908886194229126, -0.7764598727226257, -0.032659538090229034, -0.0007190502947196364, -0.0005222387262620032, -0.02610686421394348, -5.3881147323409095e-05, -0.004483527969568968, -5.722029527532868e-06, -0.0008890252211131155, -0.0016037471359595656, -2.455457925796509, -0.007273857947438955, -0.21430544555187225, -0.000571326119825244, -0.18517695367336273, -3.1158509254455566, -0.6258195638656616, -0.06425667554140091, -0.1103435829281807, -0.006964574102312326, -0.9867271184921265, -1.9671871662139893, -0.43143901228904724, -0.27210643887519836, -0.04293173551559448, -0.0008223251206800342, -0.003685707226395607, -0.3982686698436737, -0.01826280541718006, -0.0020896997302770615, -0.0013316344702616334, -0.00078671018127352, -0.06401495635509491, -1.5626938343048096, -4.136476854910143e-05, -0.03828077390789986, -0.027888217940926552, -0.32637420296669006, -0.025189073756337166, -1.0601379871368408, -0.08341515064239502, -0.08623437583446503, -0.00018249277491122484, -0.0004058252670802176, -0.011145240627229214, -0.0013677061069756746, -0.15424658358097076, -4.847816467285156, -2.2783565521240234, -2.9474360942840576, -0.8171454668045044, -2.7840282917022705, -1.677982211112976, -0.2665390074253082, -0.025108514353632927, -0.2344861626625061, -0.33039891719818115, -1.8046684265136719, -1.3521814346313477, -0.050516482442617416, -2.009902000427246, -0.029317548498511314, -0.15651239454746246, -0.09660083800554276, -0.002257776679471135, -0.3672316074371338, -2.451049327850342, -0.0030314228497445583, -0.23381410539150238, -0.01423549372702837, -0.002193189924582839, -0.0030755146872252226, -0.5798285007476807, -0.5778917670249939, -0.0009638193296268582, -0.0005237876321189106, -0.04007598012685776, -0.5135155320167542, -0.030051346868276596, -0.0014227039646357298, -0.3863087296485901, -0.0002914242504630238, -8.439661905867979e-05, -0.009224415756762028, -0.0006017066189087927, -6.854299135738984e-05, -0.0008374521275982261, -0.0002097863471135497, -0.0034887660294771194, -0.004005743190646172, -2.507448673248291, -1.0705264806747437, -0.016620740294456482, -0.007233264856040478, -0.009052425622940063, -2.2144737243652344, -7.152555099310121e-07, -0.0010618292726576328, -0.45870646834373474, -0.00818647537380457, -0.47197943925857544, -1.234015941619873, -0.003926426637917757, -0.008035475388169289, -3.576272320060525e-06, -0.09556744247674942, -0.049340713769197464, -0.015627892687916756, -0.0021362120751291513, -0.002118725562468171, -0.14626839756965637, -8.4638240878121e-06, -0.020825065672397614, -0.00034314466756768525, -0.0153699005022645, -0.00018606838420964777, -0.0001711698860162869, -0.0001546025014249608, -0.0010528980055823922, -2.52720492426306e-05, -0.0003349220205564052, -8.725739462533966e-05, -0.023377282544970512, -0.0002865380665753037, -0.002171184169128537, -0.04287440702319145, -0.005607232917100191, -0.12179070711135864, -2.9656310081481934, -0.6295730471611023, -1.3397717475891113, -2.5435984134674072, -3.410843849182129, -1.9835309982299805, -3.612177848815918, -0.23006978631019592, -0.008908645249903202, -2.851161479949951, -0.6302666664123535, -0.8977842330932617, -0.04429982602596283, -3.1445980072021484, -0.05437031760811806, -0.985753059387207, -0.00013326710904948413, -0.002538080094382167, -6.341733387671411e-05, -0.020196039229631424, -0.002070189919322729, -0.012428101152181625, -0.0008223251206800342, -0.9289529323577881, -0.0171115230768919, -0.0019946456886827946, -1.330115556716919, -0.18639975786209106, -0.867188572883606, -0.0005413020844571292, -0.10648141801357269, -1.2641295194625854, -0.3107685148715973, -3.1597161293029785, -0.23428209125995636, -0.0968305915594101, -0.2247975766658783, -3.3503365516662598, -3.4776861667633057, -0.15336580574512482], "finish_reason": "length"}], "metrics": {"energy": 363.987414575577, "energy_per_token": 1.4218258381858477, "time": 12.721431, "time_per_token": 0.04969308984375}}
{"outputs": [{"text": "# Checking if the directory exists.\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n\n    # Checking if the URL is valid.\n    if not validate(url):\n        raise TypeError\n\n    # Creating the list of status codes.\n    status_codes = []\n\n    # Fetching all files in the directory.\n    files = os.listdir(directory)\n\n    # Iterating over the files.\n    for file in files:\n        # Combining the file name with the directory.\n        file_path = os.path.join(directory, file)\n\n        # Getting the size of the file.\n        size = os.path.getsize(file_path)\n\n        # Making sure the file is an actual file, not a directory or a symbolic link.\n        if os.path.isfile(file_path):\n\n            # Sending the file as a binary stream, and obtaining a response object.\n            with open(file_path, 'rb') as file:\n                response = requests.post(\n                    url=url,\n                    data={\"file\":", "tokens": ["#", " Check", "ing", " if", " the", " directory", " exists", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "\n", "\n", "    ", "#", " Check", "ing", " if", " the", " URL", " is", " valid", ".", "\n", "    ", "if", " not", " validate", "(", "url", "):", "\n", "        ", "raise", " Type", "Error", "\n", "\n", "    ", "#", " Creating", " the", " list", " of", " status", " codes", ".", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " F", "etch", "ing", " all", " files", " in", " the", " directory", ".", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "    ", "#", " Iter", "ating", " over", " the", " files", ".", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Comb", "ining", " the", " file", " name", " with", " the", " directory", ".", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "\n", "        ", "#", " Getting", " the", " size", " of", " the", " file", ".", "\n", "        ", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", "_", "path", ")", "\n", "\n", "        ", "#", " Making", " sure", " the", " file", " is", " an", " actual", " file", ",", " not", " a", " directory", " or", " a", " symbolic", " link", ".", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "\n", "            ", "#", " S", "ending", " the", " file", " as", " a", " binary", " stream", ",", " and", " obtaining", " a", " response", " object", ".", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "    ", "url", "=", "url", ",", "\n", "                ", "    ", "data", "=", "{\"", "file", "\":"], "logprobs": [-0.9795613884925842, -1.430532693862915, -1.4840514659881592, -0.6089112162590027, -0.10910777002573013, -0.28156712651252747, -0.06488552689552307, -2.0364561080932617, -0.1592773050069809, -0.02420167624950409, -0.12977932393550873, -0.11635054647922516, -0.0051309335976839066, -1.645074735279195e-05, -0.0005479741375893354, -0.005661168601363897, -0.23902326822280884, -0.0010288427583873272, -0.006253319326788187, -0.011099970899522305, -0.0027212989516556263, -0.002046516165137291, -0.08206728845834732, -0.0028228219598531723, -0.0002516191452741623, -7.486063259420916e-05, -1.6197950839996338, -0.30404767394065857, -0.004817664157599211, -0.16654956340789795, -0.6471467018127441, -0.008062555454671383, -0.18646357953548431, -0.04422615095973015, -0.9050499796867371, -0.04236411675810814, -0.09030041843652725, -0.136891707777977, -0.008899074979126453, -0.0017703588819131255, -0.35828328132629395, -0.08113010972738266, -3.2122957706451416, -2.664154291152954, -0.006851039361208677, -0.06554087996482849, -0.0013503251830115914, -0.0009209443815052509, -0.010961318388581276, -0.011300133541226387, -3.075552376685664e-05, -0.2601129412651062, -0.06333756446838379, -0.0017351347487419844, -0.2939615249633789, -2.2681570053100586, -1.857903242111206, -1.2742191553115845, -0.5360068678855896, -0.5562125444412231, -0.012317540124058723, -0.5764768123626709, -0.008692285045981407, -0.0024801704566925764, -0.3769223392009735, -0.1511821150779724, -0.07127510756254196, -0.04529208317399025, -0.03845549747347832, -0.00105015910230577, -0.1096179187297821, -0.00041345154750160873, -0.15111899375915527, -4.314029693603516, -0.08883387595415115, -0.026105007156729698, -0.5869264006614685, -0.44825559854507446, -0.5590174794197083, -0.006175602320581675, -0.14320124685764313, -0.18024182319641113, -0.0035961500834673643, -0.0011531615164130926, -0.6189548373222351, -0.06409512460231781, -0.5771004557609558, -0.00011932138295378536, -0.008317237719893456, -6.437280717364047e-06, -0.0010245556477457285, -0.001141968765296042, -0.0004070168943144381, -0.0019803689792752266, -0.05833666771650314, -0.000445385929197073, -0.17706407606601715, -0.8741757869720459, -0.008438998833298683, -0.7007664442062378, -0.8177927732467651, -0.13820861279964447, -0.32190829515457153, -0.0030935786198824644, -0.0008889061282388866, -0.011108812876045704, -0.1695219874382019, -0.16144543886184692, -0.0013993718894198537, -0.0002090712368953973, -0.0005691815749742091, -0.12702465057373047, -0.381975919008255, -2.6150097846984863, -0.006043967790901661, -0.02763000689446926, -1.1198086738586426, -1.409853219985962, -0.7304452657699585, -0.017482349649071693, -0.39045584201812744, -0.7556712031364441, -0.0026467551942914724, -0.00042024365393444896, -1.0164368152618408, -0.11192529648542404, -0.08490367233753204, -0.0016085079405456781, -0.0783771201968193, -0.0002615109842736274, -1.2159273865108844e-05, -0.003537589218467474, -0.0009732277248986065, -0.0001299296854995191, -0.0007020154735073447, -0.0002547178009990603, -0.0007390628452412784, -0.0002892790944315493, -0.0005360596696846187, -0.10546720027923584, -0.0007413261337205768, -0.027087047696113586, -2.5922679901123047, -0.0507945716381073, -2.485912322998047, -0.05873231217265129, -0.011715303175151348, -0.00821662601083517, -0.20059235394001007, -0.004862981848418713, -0.00020919041708111763, -0.5618166327476501, -0.017900465056300163, -0.057476360350847244, -0.0007130940794013441, -0.050756048411130905, -0.009269652888178825, -4.076874756719917e-05, -1.3470558769768104e-05, -0.00011777184408856556, -0.00039081089198589325, -0.0034450488165020943, -9.417489309271332e-06, -0.0009090343955904245, -0.01686340756714344, -0.03135952726006508, -0.0006211258587427437, -0.04000382870435715, -4.176995277404785, -1.5736902952194214, -0.4285806715488434, -0.168416365981102, -0.39398717880249023, -3.4124338626861572, -1.353522777557373, -0.011290586553514004, -2.0756731033325195, -0.17648759484291077, -0.04469456896185875, -0.07023686170578003, -1.0986768007278442, -0.9166966080665588, -0.9129177331924438, -0.004670425318181515, -0.07737623900175095, -0.002820206806063652, -0.00042524831951595843, -0.02428894117474556, -0.7429187297821045, -6.83045873302035e-05, -0.00031764229061082006, -0.001476984703913331, -0.000753476400859654, -0.012797726318240166, -0.0001842805795604363, -0.0006453100359067321, -0.002909239148721099, -3.099436753473128e-06, -0.3173051178455353, -0.0006878394051454961, -1.9315922260284424, -0.005133305676281452, -0.04079323261976242, -3.5835444927215576, -0.023058611899614334, -0.36038535833358765, -0.575828492641449, -2.791844367980957, -0.5029516816139221, -2.344355821609497, -1.3145488500595093, -3.2379534244537354, -1.6339706182479858, -4.650645732879639, -2.4718737602233887, -0.6063657999038696, -1.2443020343780518, -0.18934157490730286, -0.0033844592981040478, -0.002012015553191304, -0.6946017742156982, -0.1266285479068756, -0.000880449719261378, -0.0018530593952164054, -0.011455120518803596, -4.0531076592742465e-06, -0.0009837078396230936, -0.07480548322200775, -0.001209123758599162, -0.005066650453954935, -0.0005934861255809665, -1.5823256969451904, -0.2113487422466278, -0.0027601737529039383, -0.021221360191702843, -0.2087750881910324, -0.0064975665882229805, -0.012120288796722889, -9.7508447652217e-05, -0.0996965691447258, -0.005073885433375835, -1.5906996726989746, -0.003093816339969635, -0.03147886320948601, -0.05544602498412132, -1.7319326400756836, -0.04001069813966751, -0.2184053659439087, -0.15768775343894958, -0.0008829509024508297, -0.0003432638186495751, -0.8252973556518555, -0.17658601701259613, -2.7112791538238525, -0.6589223146438599, -0.11539866030216217], "finish_reason": "length"}], "metrics": {"energy": 381.9976068878173, "energy_per_token": 1.4921781519055364, "time": 12.519299, "time_per_token": 0.04890351171875}}
{"outputs": [{"text": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n\n    # Check if the provided URL is valid\n    if not url.startswith(\"http\") or not url.endswith(\"/upload\"):\n        raise TypeError(\"URL is invalid\")\n\n    # Create a list to store the status codes\n    status_codes = []\n\n    # Get a list of files in the directory\n    for filename in os.listdir(directory):\n        # Check if the file is a file or a directory\n        if os.path.isfile(os.path.join(directory, filename)):\n            # Open the file\n            with open(os.path.join(directory, filename), 'rb') as file:\n                # Send a POST request with the file as the data\n                response = requests.post(url, files={'file': file}, headers=HEADERS, metadata=metadata)\n                status_codes.append(response.status_code)\n\n                # Sleep for 1 second after each upload\n                time.sleep(1", "tokens": ["#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " provided", " URL", " is", " valid", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "(", "\"", "http", "\"", ")", " or", " not", " url", ".", "end", "sw", "ith", "(", "\"", "/", "upload", "\"", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " is", " invalid", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " to", " store", " the", " status", " codes", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " files", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " file", " or", " a", " directory", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", "))", ":", "\n", "            ", "#", " Open", " the", " file", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "#", " Send", " a", " POST", " request", " with", " the", " file", " as", " the", " data", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "={", "'", "file", "':", " file", "}", ",", " headers", "=", "HEAD", "ERS", ",", " metadata", "=", "metadata", ")", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "                ", "#", " Sleep", " for", " ", "1", " second", " after", " each", " upload", "\n", "                ", "time", ".", "sleep", "(", "1"], "logprobs": [-0.9795613884925842, -1.430532693862915, -0.5855873227119446, -0.2352607548236847, -3.118396282196045, -0.05410270765423775, -0.01699749380350113, -0.41632941365242004, -0.011453352868556976, -0.05014568939805031, -0.08662088960409164, -0.0030656505841761827, -1.0609570381348021e-05, -0.00040642108069732785, -0.008718756958842278, -0.3319522440433502, -0.0004925706889480352, -0.0029056731145828962, -0.006937819067388773, -0.002159764990210533, -0.0015282867243513465, -0.05220162495970726, -0.0022963127121329308, -0.00012885693286079913, -6.460934673668817e-05, -0.252448171377182, -2.5147898197174072, -0.37365084886550903, -0.005097962450236082, -0.2274557203054428, -0.0027033472433686256, -0.1532215029001236, -0.7728818655014038, -0.15959230065345764, -0.05968452990055084, -2.835740566253662, -0.3693191111087799, -0.020385628566145897, -0.16324269771575928, -0.09768570959568024, -0.0016925308154895902, -0.4939541816711426, -0.06859177350997925, -0.3748953938484192, -0.17540974915027618, -0.1485176980495453, -0.00012981049076188356, 0.0, -1.0965454578399658, -0.4375353753566742, -0.5100218057632446, -0.42077144980430603, -2.427485704421997, -0.21808181703090668, -0.25597062706947327, -0.05341460555791855, -0.02043246664106846, -0.08536743372678757, -9.715084888739511e-05, 0.0, -0.035955436527729034, -0.03236504644155502, -3.1684045791625977, -1.9735087156295776, -0.15739814937114716, -0.014499418437480927, -0.0065969303250312805, -0.0013468727702274919, -0.011206541210412979, -0.015727175399661064, -5.173549288883805e-05, -0.04942898824810982, -1.737799882888794, -2.0494370460510254, -0.9220913648605347, -0.35758721828460693, -0.24518226087093353, -0.0031052250415086746, -0.001487697591073811, -0.035350240767002106, -0.0014388932613655925, -0.2731192111968994, -2.6489765644073486, -0.24169409275054932, -0.4772169291973114, -0.1939144879579544, -0.19993841648101807, -0.19019164144992828, -0.3475205898284912, -0.03100467473268509, -0.5502771735191345, -0.0012225781101733446, -0.276426762342453, -0.14518345892429352, -0.045579943805933, -0.052798181772232056, -0.024181311950087547, -0.0004986473359167576, -0.0726238414645195, -0.0003864018653985113, -0.10696163028478622, -2.2400498390197754, -1.3699769973754883, -0.05747534707188606, -0.006345481611788273, -1.336266279220581, -0.37295663356781006, -0.007176218554377556, -0.6704905033111572, -0.10875797271728516, -0.0007616956136189401, -3.1153950691223145, -0.8464906811714172, -0.0031172276940196753, -0.01670949161052704, -6.603976362384856e-05, -0.0014081810368224978, -7.033323527139146e-06, -0.0004768426588270813, -0.0006017066189087927, -0.0003535122668836266, -0.0018575809663161635, -0.09130749851465225, -0.5829746723175049, -1.354288101196289, -0.06040513888001442, -0.12474504113197327, -0.12177518755197525, -0.12427771836519241, -0.3625768721103668, -0.8316412568092346, -2.4834158420562744, -0.3413078188896179, -0.0957726240158081, -0.09490849077701569, -0.0010089550632983446, -0.09974069893360138, -0.28419730067253113, -0.00040797016117721796, -5.543078441405669e-05, -0.012548891827464104, -0.00010823617776622996, -0.0888679102063179, -0.0002615109842736274, -0.12158793956041336, -0.0008715168805792928, -3.325883881188929e-05, -0.0011325619416311383, -0.00029297350556589663, -4.1126360883936286e-05, -0.0006984416977502406, -0.00017772526189219207, -0.003941625356674194, -0.00018773700867313892, -0.004612639080733061, -0.003892940701916814, -0.04643358662724495, -0.2668780982494354, -1.4979585409164429, -0.04181698337197304, -0.010870052501559258, -2.661635398864746, -0.0009896624833345413, -0.28429222106933594, -0.0002479245886206627, -0.0010592094622552395, -0.02867635153234005, -0.0002548369811847806, -1.966933996300213e-05, -6.782778655178845e-05, -0.00020621081057470292, -3.015949550899677e-05, -0.00024148885859176517, -5.876845170860179e-05, -0.0012181727215647697, -0.01865391619503498, -0.0001070442158379592, -0.47696954011917114, -0.015344308689236641, -0.0035729873925447464, -0.0012963948538526893, -0.6597855687141418, -0.022994188591837883, -0.0016726563917472959, -0.02661355957388878, -0.09248876571655273, -2.0169243812561035, -1.3874484300613403, -0.409180223941803, -0.0026863461825996637, -1.7042464017868042, -0.23566675186157227, -0.2729853689670563, -0.8053891062736511, -0.40732812881469727, -1.469670295715332, -0.16112260520458221, -0.0028750060591846704, -0.21842002868652344, -0.003049249993637204, -0.0017951102927327156, -3.075552376685664e-05, -0.010502190329134464, -0.003232137765735388, -0.256095290184021, -0.14767587184906006, -0.9091423749923706, -0.07254401594400406, -0.5262113213539124, -0.13933619856834412, -0.009247920475900173, -0.25457677245140076, -0.02355765551328659, -0.00013934595335740596, -0.560383141040802, -0.01366545632481575, -0.002071141730993986, -1.7165990357170813e-05, -0.08529935032129288, -2.8761587142944336, -0.01499523501843214, -0.47958502173423767, -0.03446796536445618, -0.006861102767288685, -0.22448980808258057, -1.774103045463562, -0.018705515190958977, -0.03730817511677742, -0.0034538398031145334, -0.002832807367667556, -0.0033231531269848347, -0.011082286946475506, -0.0008031480247154832, -0.004108679015189409, -0.0009727513534016907, -2.288792165927589e-05, -0.000439428084064275, -0.05098864436149597, -1.734963059425354, -0.2921035885810852, -0.10549283772706985, -2.121354103088379, -0.08020702004432678, -1.15291428565979, -0.008236370980739594, -0.006521135102957487, -0.5977124571800232, -0.10279899090528488, -0.08023111522197723, -0.11394573003053665, -0.0010556369088590145, -0.021274110302329063, -8.630380034446716e-05, -4.172238186583854e-05, -8.284702198579907e-05, -0.04229852557182312], "finish_reason": "length"}], "metrics": {"energy": 360.35543825340267, "energy_per_token": 1.4076384306773542, "time": 12.74563, "time_per_token": 0.0497876171875}}
{"outputs": [{"text": "# Create a dictionary to hold the uploaded file status codes\n    status_codes = []\n\n    # Check if the directory exists before attempting to upload the files\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n\n    # Loop through each file in the directory and upload it to the server\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        if not os.path.isfile(filepath):\n            continue  # Skip subdirectories\n        with open(filepath, \"rb\") as file:\n            data = {'file': file, 'metadata': json.dumps(metadata)}\n            response = requests.post(\n                url + \"/upload\", headers=HEADERS, data=data)\n            status_codes.append(response.status_code)\n            time.sleep(1)  # Add a small pause after each upload\n\n    return status_codes", "tokens": ["#", " Create", " a", " dictionary", " to", " hold", " the", " uploaded", " file", " status", " codes", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", " before", " attempting", " to", " upload", " the", " files", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " directory", " and", " upload", " it", " to", " the", " server", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "file", "path", "):", "\n", "            ", "continue", "  ", "#", " Skip", " sub", "direct", "ories", "\n", "        ", "with", " open", "(", "file", "path", ",", " \"", "rb", "\"", ")", " as", " file", ":", "\n", "            ", "data", " =", " {'", "file", "':", " file", ",", " '", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "url", " +", " \"/", "upload", "\"", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "data", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "  ", "#", " Add", " a", " small", " pause", " after", " each", " upload", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "def"], "logprobs": [-0.9795613884925842, -3.6075527667999268, -0.29595309495925903, -2.3881113529205322, -1.0648343563079834, -0.6630839705467224, -0.21684370934963226, -3.0264432430267334, -1.0586402416229248, -3.1928181648254395, -0.0885884240269661, -0.2691483795642853, -0.008388996124267578, -0.5425087213516235, -0.19484564661979675, -0.0582440011203289, -0.037011146545410156, -0.3115215301513672, -0.0007085673278197646, -0.2234346717596054, -0.0011523280991241336, -0.19275766611099243, -0.5127224326133728, -0.12748177349567413, -0.06434878706932068, -0.3035915195941925, -0.04029618948698044, -3.1484289169311523, -2.02717924118042, -0.03547726944088936, -0.5545371174812317, -2.438096046447754, -0.010678177699446678, -0.11940646171569824, -0.0019556223414838314, -0.07302362471818924, -0.2747935652732849, -0.0016770598012953997, -5.483612312673358e-06, -0.00023505308490712196, -0.008515357971191406, -0.29934200644493103, -0.000395815703086555, -0.002090651309117675, -0.0031894787680357695, -0.0010333680547773838, -0.0009077242575585842, -0.04528365284204483, -0.0016356435371562839, -0.0001292145170737058, -4.005352093372494e-05, -0.16922128200531006, -1.4680180549621582, -1.5274766683578491, -1.1344237327575684, -0.013611950911581516, -0.06208536773920059, -0.00019500737835187465, -0.0013903246726840734, -1.824676513671875, -0.00036459474358707666, -0.0015610187547281384, -0.036008793860673904, -0.0035927053540945053, -0.07455634325742722, -2.443120002746582, -0.22120408713817596, -1.3550678491592407, -0.029693830758333206, -0.05209741368889809, -0.0016947920667007565, -0.15202674269676208, -2.0199050903320312, -0.11602620035409927, -0.09603646397590637, -0.5975430607795715, -0.0067145200446248055, -0.19286353886127472, -0.10462075471878052, -0.0016794399125501513, -0.04678630456328392, -0.7524412870407104, -0.0025536566972732544, -0.007144853472709656, -0.002545808907598257, -0.0018106985371559858, -3.6954811548639555e-06, -0.0002740246127359569, -0.00040534863364882767, -0.00010585224663373083, -0.0020425901748239994, -0.05598056688904762, -0.8308468461036682, -0.7538322806358337, -0.00037174468161538243, -0.012551127932965755, -0.00015424491721205413, -6.079655122448457e-06, -0.006947290152311325, -0.00024911639047786593, -5.6622808187967166e-05, -0.0006571040721610188, -0.0001289761275984347, -0.0007639588438905776, -4.5536911784438416e-05, -0.0037187249399721622, -0.3706299364566803, -0.823185384273529, -2.616503953933716, -0.035265546292066574, -0.0003582789213396609, -2.1815061700181104e-05, -0.008137287572026253, -0.0005703729693777859, -0.004870693199336529, -7.390948667307384e-06, -0.0014541300479322672, -9.894321920000948e-06, -0.01280396431684494, -0.026121381670236588, -0.0007453762227669358, -0.18350602686405182, -1.094027042388916, -0.00015376816736534238, -0.2294122874736786, -2.3636274337768555, -0.06991621851921082, -6.675497570540756e-05, -0.06458428502082825, -0.6841015219688416, -1.0073418617248535, -0.06316971033811569, -0.00032014489988796413, -0.00798072200268507, -2.861018856492592e-06, -0.011461719870567322, -1.7288373708724976, -0.0014361554058268666, -0.0002896366349887103, -0.0014715091092512012, -0.00010978573118336499, -0.8239569664001465, -0.03453533723950386, -0.012646596878767014, -0.00960998609662056, -2.7438695430755615, -0.005710597150027752, -1.9048093557357788, -0.39382198452949524, -0.023330116644501686, -0.7612472176551819, -0.12246877700090408, -0.23017793893814087, -0.1876494437456131, -0.0010218166280537844, -0.9684691429138184, -6.747018051100895e-05, -0.002763621276244521, -5.280832192511298e-05, -0.0026642323937267065, -0.0044964635744690895, -0.04819128289818764, -0.031201239675283432, -0.06873590499162674, -0.40407782793045044, -0.0024591225665062666, -0.0064588370732963085, -4.136476854910143e-05, -0.057182446122169495, -0.0032191856298595667, -2.7769601345062256, -0.001321157906204462, -0.07860404253005981, -1.4417800903320312, -1.2374632358551025, -0.8757498860359192, -0.2970004379749298, -0.0012691308511421084, -1.6198863983154297, -0.003880472155287862, -0.0006572232232429087, -1.0371154530730564e-05, -0.0006749735912308097, -0.37893539667129517, -0.0004234609368722886, -0.2545548677444458, -0.18809884786605835, -0.014641223475337029, -0.08568228781223297, -0.4171822667121887, -0.04174232482910156, -0.049969255924224854, -0.0011812621960416436, -0.0018053437815979123, -0.0026458040811121464, -0.015126049518585205, -0.00042655906872823834, -0.009095662273466587, -0.00040558696491643786, -1.7404405298293568e-05, -0.00036816971260122955, -0.06652210652828217, -0.1241137906908989, -0.21859018504619598, -5.531158240046352e-05, -7.533743337262422e-05, -0.00016115797916427255, -0.044675301760435104, -0.011151017621159554, -0.6455329060554504, -0.00013195598148740828, -1.6070764064788818, -0.07310894876718521, -1.7396619319915771, -0.8286513686180115, -0.820022702217102, -0.030147356912493706, -0.02797064185142517, -0.26212239265441895, -0.2829497754573822, -0.013254037126898766, -0.17550498247146606, -0.0034401779994368553, -5.113947918289341e-05, -5.245195097813848e-06, -0.8775908350944519, -0.02207423560321331, -1.3035897016525269], "finish_reason": "stop"}], "metrics": {"energy": 320.0280813770293, "energy_per_token": 1.4036319358641636, "time": 11.2940035, "time_per_token": 0.04953510307017544}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n\n    # Check if the URL is valid\n    try:\n        requests.get(url)\n    except requests.exceptions.InvalidURL:\n        raise TypeError(\"Invalid URL.\")\n\n    status_codes = []\n\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        with open(filepath, 'rb') as f:\n            data = {'file': ('file.jpg', f, 'image/jpg')}\n            res = requests.post(url, headers=HEADERS, files=data,\n                                data=json.dumps(metadata), timeout=300)\n            status_codes.append(res.status_code)\n            time.sleep(1)\n\n    return status_codes", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " URL", " is", " valid", "\n", "    ", "try", ":", "\n", "        ", "requests", ".", "get", "(", "url", ")", "\n", "    ", "except", " requests", ".", "except", "ions", ".", "Invalid", "URL", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " URL", ".", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " {'", "file", "':", " ('", "file", ".", "jpg", "'", ",", " f", ",", " '", "image", "/", "jpg", "')}", "\n", "            ", "res", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "data", ",", "\n", "                ", "                ", "data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", " timeout", "=", "3", "0", "0", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "res", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "_", "codes"], "logprobs": [-0.9795613884925842, -1.430532693862915, -0.5855873227119446, -0.2352607548236847, -0.1936754584312439, -0.03338154777884483, -0.40584444999694824, -0.009264456108212471, -0.060360025614500046, -0.06187517195940018, -0.0032259586732834578, -1.1920858014491387e-05, -0.0002699726028367877, -0.006919942796230316, -0.30201032757759094, -0.0007184546557255089, -0.004560783039778471, -0.00804469920694828, -0.0019231411861255765, -0.0015017433324828744, -0.044087570160627365, -0.0027023961301892996, -0.00018320789968129247, -6.961580220377073e-05, -0.28558287024497986, -1.6113163232803345, -0.5214236974716187, -0.6270120143890381, -0.0035091983154416084, -1.8213741779327393, -0.03489239141345024, -0.0009345216676592827, -0.0027249844279140234, -0.1533976048231125, -0.002999570919200778, -0.1259254366159439, -0.6820342540740967, -0.14732716977596283, -0.050585728138685226, -0.5735692381858826, -0.024857956916093826, -0.07169241458177567, -0.06525804102420807, -0.0015807764139026403, -1.3822474479675293, -8.976056415122002e-05, -0.0007150000892579556, -0.0009436921682208776, -0.8438291549682617, -0.0006551980040967464, -0.13839848339557648, -0.0008150592911988497, -0.003918708302080631, -0.2316402643918991, -0.010301277972757816, -0.01160301361232996, -0.0002747396647464484, -0.18181771039962769, -0.0003077510336879641, -0.16938331723213196, 0.0, -0.000380324519937858, -0.455721914768219, -0.06205186992883682, -0.0912892147898674, -0.0033128163777291775, -0.0006064721383154392, -0.016343537718057632, -0.013080032542347908, -3.0636318115284666e-05, -0.046262528747320175, -0.03104477748274803, -0.29267141222953796, -0.029923973605036736, -0.16219133138656616, -0.04434635490179062, -0.0007266741595230997, -0.002881781430914998, -0.042009033262729645, -0.0018079616129398346, -2.7536239624023438, -0.27156326174736023, -0.050816550850868225, -0.020520644262433052, -0.017883485183119774, -0.06928519159555435, -0.6230236291885376, -0.00045372682507149875, -0.9130774736404419, -0.9075411558151245, -0.011767025105655193, -0.012734051793813705, -0.00011920218821614981, -0.002398592187091708, -5.722029527532868e-06, -0.0007601470570079982, -0.0005839549703523517, -0.00015841660206206143, -0.017983246594667435, -0.0276484452188015, -1.084682583808899, -0.898946225643158, -0.0006061147432774305, -0.008845904842019081, -0.00014256415306590497, -5.722029527532868e-06, -0.0021709464490413666, -0.00014590153296012431, -6.723177648382261e-05, -0.0006375664379447699, -0.00014506718434859067, -0.0008534126682206988, -5.400034933700226e-05, -0.0017705968348309398, -0.46990901231765747, -1.5674488544464111, -0.01761799305677414, -0.0006943913758732378, -0.0016794399125501513, -4.5298504119273275e-05, -0.06083182990550995, -0.16925279796123505, -0.006737846881151199, -0.0016726563917472959, -0.0005803807871416211, -0.49312710762023926, -0.017438068985939026, -0.009552366100251675, -0.014205290004611015, -2.395235061645508, -0.007816442288458347, -1.335719108581543, -0.5154798626899719, -0.04040827974677086, -2.94482421875, -1.1080677509307861, -0.5745004415512085, -1.7947170734405518, -0.0016305259196087718, -0.0008428120636381209, -0.003511692862957716, -0.6828375458717346, -0.16109247505664825, -0.500594973564148, -0.00711786700412631, -1.5443499088287354, -0.17124976217746735, -0.02627931348979473, -0.16392886638641357, -3.419046640396118, -0.010219509713351727, -0.002267648698762059, -3.2066785934148356e-05, -0.06955978274345398, -0.008462640456855297, -0.08347261697053909, -0.15070946514606476, -1.0702710151672363, -0.012934830039739609, -0.0010750473011285067, -9.941560711013153e-05, -0.0009127265075221658, -0.6430515050888062, -0.0031545422971248627, -0.0008347125840373337, -0.4685293436050415, -2.0942187309265137, -0.01268037874251604, -0.4672311544418335, -0.4823671281337738, -0.15296977758407593, -0.0974670797586441, -6.83045873302035e-05, -0.0003296785580459982, -4.2437604861333966e-05, -0.09481731057167053, -0.03340691328048706, -1.9516618251800537, -0.14327293634414673, -0.876479983329773, -0.029646730050444603, -1.7186520099639893, -0.47299230098724365, -0.9849579930305481, -0.16208286583423615, -0.035143326967954636, -0.12454646080732346, -0.38587385416030884, -0.04267566651105881, -0.029009219259023666, -0.0033636679872870445, -0.00298269372433424, -0.00514943478628993, -0.030054470524191856, -0.003774781245738268, -0.0049314298667013645, -0.0003483880718704313, -5.1616290875244886e-05, -0.001019911258481443, -0.011507798917591572, -0.190272256731987, -0.16646155714988708, -9.42901024245657e-05, -0.0001248043408850208, -0.00020037073409184813, -0.05010725185275078, -0.01792154088616371, -0.10127495229244232, -0.2785654067993164, -0.02472771145403385, -0.047817353159189224, -0.00481730792671442, -0.0003522014303598553, -1.07287787614041e-05], "finish_reason": "stop"}], "metrics": {"energy": 335.3341671085358, "energy_per_token": 1.5669820892922233, "time": 10.64502, "time_per_token": 0.04974308411214953}}
{"outputs": [{"text": "files = []\n    status_codes = []\n\n    for root, _, files_list in os.walk(directory):\n        for file in files_list:\n            full_path = os.path.join(root, file)\n            with open(full_path, 'rb') as f:\n                files.append((file, f))\n\n    for file, content in files:\n        status_code = 0\n        try:\n            response = requests.post(\n                url,\n                data=json.dumps(metadata),\n                files=[\n                    (\n                        'file',\n                        content,\n                        content,\n                    )\n                ],\n                headers=HEADERS,\n            )\n\n            if response.ok:\n                print(f\"Uploaded successfully: {file}\")\n                status_code = 200\n\n        except Exception as e:\n            print(f\"Failed to upload {file}: {e}\")\n            status_code = 500\n        finally:\n            # Add the status code to the list\n            status_codes.append(", "tokens": ["files", " =", " []", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "for", " root", ",", " _", ",", " files", "_", "list", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", "_", "list", ":", "\n", "            ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "with", " open", "(", "full", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "files", ".", "append", "((", "file", ",", " f", "))", "\n", "\n", "    ", "for", " file", ",", " content", " in", " files", ":", "\n", "        ", "status", "_", "code", " =", " ", "0", "\n", "        ", "try", ":", "\n", "            ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "url", ",", "\n", "                ", "data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", "\n", "                ", "files", "=[", "\n", "                ", "    ", "(", "\n", "                ", "        ", "'", "file", "'", ",", "\n", "                ", "        ", "content", ",", "\n", "                ", "        ", "content", ",", "\n", "                ", "    ", ")", "\n", "                ", "]", ",", "\n", "                ", "headers", "=", "HEAD", "ERS", ",", "\n", "            ", ")", "\n", "\n", "            ", "if", " response", ".", "ok", ":", "\n", "                ", "print", "(", "f", "\"", "Upload", "ed", " successfully", ":", " {", "file", "}\"", ")", "\n", "                ", "status", "_", "code", " =", " ", "2", "0", "0", "\n", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "Failed", " to", " upload", " {", "file", "}:", " {", "e", "}\"", ")", "\n", "            ", "status", "_", "code", " =", " ", "5", "0", "0", "\n", "        ", "f", "inally", ":", "\n", "            ", "#", " Add", " the", " status", " code", " to", " the", " list", "\n", "            ", "status", "_", "codes", ".", "append", "("], "logprobs": [-3.618826389312744, -0.20359450578689575, -0.46957477927207947, -0.04737722873687744, -0.17644153535366058, -1.952029824256897, -0.4425695836544037, -0.11477050930261612, -0.01619810238480568, -0.006523503921926022, -0.010754602029919624, -0.9248729348182678, -0.0016235039802268147, -1.64048433303833, -1.3555372953414917, -0.002818067092448473, -1.082479476928711, -0.052644722163677216, -0.19169722497463226, -0.5615198016166687, -1.4993277788162231, -0.0025357017293572426, -0.005160701461136341, -2.0861407392658293e-05, -5.125868119648658e-05, -0.0010873125866055489, -0.006305798422545195, -0.02783929370343685, -0.015147654339671135, -0.012993784621357918, -0.136694997549057, -0.3631950318813324, -0.47862860560417175, -0.003753522876650095, -0.0008916454971767962, -2.861018856492592e-06, -0.0003632839070633054, -0.004025689791887999, -0.010391888208687305, -1.9584453105926514, -0.045532677322626114, -0.15997615456581116, -0.003978908993303776, -0.02188706398010254, -0.00033539868309162557, -4.9470632802695036e-05, -0.011370028369128704, -0.004906044341623783, -0.00014959646796341985, -0.006447347812354565, -0.000717025191988796, -0.0018334260676056147, -0.00035637227119877934, -0.006546716671437025, -0.0907033309340477, -2.705904960632324, -0.027138445526361465, -0.0012696071062237024, -0.0033307571429759264, -7.152531907195225e-06, -1.311301275563892e-06, -0.12489677220582962, -0.12350331246852875, -0.015001107007265091, -0.0027995225973427296, -0.0005689432728104293, -0.3642268180847168, -0.05907701328396797, -0.010186233557760715, -0.003789032343775034, -0.5162113308906555, -0.0030830015894025564, -0.0013449679827317595, -0.3056645095348358, -0.5415546298027039, -0.0037788189947605133, -0.019085459411144257, -0.3675714135169983, -0.012376412749290466, -0.25863125920295715, -0.058954186737537384, -1.2381820678710938, -0.49141523241996765, -0.35655996203422546, -3.175891876220703, -0.04182292893528938, -0.0050870506092906, -0.0002914242504630238, -0.0021065918263047934, -0.01381596177816391, -3.5645270347595215, -0.0830715000629425, -0.9832702875137329, -0.023731358349323273, -1.7220542430877686, -0.6861470341682434, -0.01600067876279354, -0.17031697928905487, -0.7864818572998047, -0.0002441108226776123, -0.0010145523119717836, -0.005113262217491865, -0.6059820055961609, -0.0054320115596055984, -0.005910774692893028, -0.00022706791060045362, -0.09842407703399658, -0.0050664134323596954, -1.8946504592895508, -0.004073418211191893, -0.0714452713727951, -0.5613812804222107, -1.065926432609558, -0.0003432638186495751, -1.3699339628219604, -0.16987761855125427, -0.16436316072940826, -0.00012778419477399439, -0.0008952185744419694, -6.258291978156194e-05, -0.22326065599918365, -0.19766424596309662, -0.023543566465377808, -0.06772297620773315, -0.02436886914074421, -0.00033468366018496454, -0.19824302196502686, -1.504734992980957, -2.1976478099823, -0.0005974177038297057, -0.0053718979470431805, -0.8331438899040222, -0.5714811682701111, -0.0005193791585043073, -0.004152604844421148, -0.6190133094787598, -0.41125333309173584, -0.1254095584154129, -0.0035628906916826963, -0.10175228118896484, -0.00045980370487086475, -0.0004942387458868325, -1.0972834825515747, -0.05009239912033081, -0.009143858216702938, -0.0010725465836003423, -0.13462033867835999, -2.6349411010742188, -2.822542190551758, -0.011906390078365803, -0.001258058357052505, -0.2780574858188629, -0.0018762619001790881, -0.2819267213344574, -0.0027004939038306475, -0.008871308527886868, -0.039717450737953186, -0.005257826764136553, -0.0479048527777195, -0.02868330292403698, -0.012233580462634563, -0.0017423938261345029, -2.6225699912174605e-05, -0.3622051775455475, -0.009387282654643059, -0.21063922345638275, -0.00011181206355104223, -0.012958364561200142, -1.647566556930542, -0.02555459551513195, -1.145226240158081, -0.13064493238925934, -0.015283378772437572, -1.675715446472168, -0.026748666539788246, -0.009362718090415001, -0.002795005217194557, -2.351076602935791, -0.17110471427440643, -0.5334300994873047, -0.4564262628555298, -0.931864321231842, -0.13881079852581024, -2.62896466255188, -0.43924468755722046, -0.029650665819644928, -0.24255095422267914, -0.15807591378688812, -0.0027348517905920744, -0.0026704147458076477, -0.5305405259132385, -0.2750284671783447, -0.0016268364852294326, -0.16636991500854492, -0.008881588466465473, -0.7652572989463806, -0.6739703416824341, -0.006122286897152662, -0.0928625538945198, -0.019749430939555168, -2.58614444732666, -1.566087245941162, -0.012811967171728611, -1.1455485820770264, -0.04478074610233307, -0.1931769698858261, -0.00028308198670856655, -0.006035080645233393, -0.003655301406979561, -0.07313930988311768, -0.01179011631757021, -0.16542740166187286, -0.027912216261029243, -2.1336400508880615, -0.01351410523056984, -0.024022117257118225, -2.034358024597168, -0.017291856929659843, -0.2360936850309372, -0.034234486520290375, -0.20442622900009155, -0.05500371754169464, -0.0026386703830212355, -0.0019180249655619264, -0.23930425941944122, -0.07910565286874771, -0.00031859567388892174, -0.02524208091199398, -0.000990734319202602, -0.057149458676576614, -0.28992754220962524, -0.0007871866691857576, -0.01200663112103939, -0.0052259271033108234, -1.8255175352096558, -0.20915697515010834, -4.589452510117553e-05, -6.782778655178845e-05, -0.0016251702327281237, -0.005244189407676458, -2.550772190093994, -2.3871254920959473, -0.6004089117050171, -0.10647273808717728, -0.028225867077708244, -0.1558065265417099, -0.019698938354849815, -0.5076080560684204, -0.5219346880912781, -0.0010832638945430517, -0.02548208273947239, -0.0006439996068365872, -0.0003351603518240154, -0.0015475689433515072, -0.0007017772295512259, -0.007171365898102522], "finish_reason": "length"}], "metrics": {"energy": 392.9346380004883, "energy_per_token": 1.5349009296894074, "time": 12.747443, "time_per_token": 0.04979469921875}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files_list = [\n        (fname, open(fname, 'rb'), None, HEADERS)\n        for fname in os.listdir(directory)\n        if fname.endswith('.jpg')\n    ]\n\n    with requests.Session() as s:\n        status_codes = []\n        while files_list:\n            for i in range(0, len(files_list), 5):  # uploads up to 5 files at a time\n                batch = files_list[i:i+5]\n                if not batch:\n                    break\n                s.post(url, files=batch, data=json.dumps(metadata))\n                # time.sleep(1)\n                print(batch)\n                for response in s.response.iter_content(1024):  # iter_content is not yet implemented for requests\n                    time.sleep(1)\n                    if response:\n                        print(response)\n", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "files", "_", "list", " =", " [", "\n", "        ", "(", "f", "name", ",", " open", "(", "f", "name", ",", " '", "rb", "')", ",", " None", ",", " HEAD", "ERS", ")", "\n", "        ", "for", " f", "name", " in", " os", ".", "list", "dir", "(", "directory", ")", "\n", "        ", "if", " f", "name", ".", "end", "sw", "ith", "('", ".", "jpg", "')", "\n", "    ", "]", "\n", "\n", "    ", "with", " requests", ".", "Session", "()", " as", " s", ":", "\n", "        ", "status", "_", "codes", " =", " []", "\n", "        ", "while", " files", "_", "list", ":", "\n", "            ", "for", " i", " in", " range", "(", "0", ",", " len", "(", "files", "_", "list", ")", ",", " ", "5", "):", "  ", "#", " upload", "s", " up", " to", " ", "5", " files", " at", " a", " time", "\n", "                ", "batch", " =", " files", "_", "list", "[", "i", ":", "i", "+", "5", "]", "\n", "                ", "if", " not", " batch", ":", "\n", "                ", "    ", "break", "\n", "                ", "s", ".", "post", "(", "url", ",", " files", "=", "batch", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "                ", "#", " time", ".", "sleep", "(", "1", ")", "\n", "                ", "print", "(", "batch", ")", "\n", "                ", "for", " response", " in", " s", ".", "response", ".", "iter", "_", "content", "(", "1", "0", "2", "4", "):", "  ", "#", " iter", "_", "content", " is", " not", " yet", " implemented", " for", " requests", "\n", "                ", "    ", "time", ".", "sleep", "(", "1", ")", "\n", "                ", "    ", "if", " response", ":", "\n", "                ", "        ", "print", "(", "response", ")", "\n"], "logprobs": [-2.4014153480529785, -0.1701347827911377, -0.07028675824403763, -4.160317621426657e-05, -0.000938332756049931, -0.03911555930972099, -0.55997234582901, -0.0018287854036316276, -0.007067561149597168, -0.015126636251807213, -0.025748400017619133, -0.003808746114373207, -0.06354555487632751, -0.0033085390459746122, -0.0003311085747554898, -0.00011693747364915907, -0.49243924021720886, -0.5946976542472839, -0.2958294749259949, -1.6500805616378784, -0.3928701877593994, -1.465630054473877, -0.0018762619001790881, -0.0036795311607420444, -0.002136806957423687, -0.15906523168087006, -0.0013496108585968614, -0.005654885899275541, -0.2656582295894623, -0.025822171941399574, -0.00023195437097456306, -0.004304311238229275, -0.32400447130203247, -0.0017105009173974395, -2.992231845855713, -2.1028220653533936, -1.1750457286834717, -0.01987600140273571, -2.1898200511932373, -1.095207929611206, -0.01003966573625803, -0.5934913754463196, -1.5710610151290894, -1.697317123413086, -0.018894335255026817, -2.225724220275879, -0.003882253309711814, -0.1586022824048996, -0.2608494758605957, -0.005793090909719467, -0.26091450452804565, -0.0008978387922979891, -1.6730842590332031, -0.003329687984660268, -2.2346410751342773, -0.5135992765426636, -1.1189277172088623, -0.0006444760947488248, -0.18917356431484222, -0.2434590458869934, -0.007868839427828789, -0.007507444359362125, -0.04592067003250122, -0.0023768290411680937, -0.0289580337703228, -0.10060250014066696, -0.011911572888493538, -0.0026264239568263292, -2.0503786799963564e-05, -0.0014546061865985394, -0.002950127236545086, -0.04847683385014534, -0.11719879508018494, -0.47480309009552, -0.0388619527220726, -1.3504654169082642, -0.010648809373378754, -0.24919717013835907, -0.3033241629600525, -0.00011872540198964998, -2.3841855067985307e-07, -0.24663186073303223, -0.046188998967409134, -1.629425048828125, -0.004276654217392206, -0.818301796913147, -0.05217243358492851, -0.0003800861886702478, -0.00666750967502594, -0.3003082275390625, -0.0011023165425285697, -1.9803166389465332, -0.12394003570079803, -0.0002337421028641984, -0.28952717781066895, -0.0006915323319844902, -0.0007005859515629709, -1.2972376346588135, -0.05071038007736206, -0.012948480434715748, -0.02499295212328434, -2.6678483486175537, -0.27638253569602966, -0.07650423049926758, -0.07202945649623871, -0.11407463997602463, -0.005585302598774433, -0.17947719991207123, -2.743964195251465, -0.3648148477077484, -9.619726915843785e-05, -7.784063927829266e-05, -0.012117462232708931, -0.01139607559889555, -0.011692563071846962, -3.3608808517456055, -1.5434008836746216, -0.3603563606739044, -0.025472087785601616, -0.002139067044481635, -0.7395588159561157, -0.000766102981287986, -0.3476088345050812, -0.0001668790791882202, -0.0012472239322960377, -0.00020287363440729678, -1.4305104514278355e-06, -0.021281229332089424, -0.005525435321033001, -0.11529413610696793, -1.5230493545532227, -0.2574571967124939, -2.3573741912841797, -0.00032205163734033704, -3.1875991821289062, -1.166265606880188, -2.1848955154418945, -0.07218130677938461, -0.15802350640296936, -0.02550334855914116, -0.4677113890647888, -0.35787928104400635, -0.16221170127391815, -0.0007238152320496738, -0.17482291162014008, -0.004255407024174929, -3.270102024078369, -0.3478269875049591, -0.011268191039562225, -1.0967194612021558e-05, -2.861018856492592e-06, -0.0030303532257676125, -0.003682975424453616, -0.04663635790348053, -0.05197010189294815, -1.0030255317687988, -0.0022573007736355066, -0.000409161759307608, -0.07928549498319626, -0.03670460358262062, -1.8135243654251099, -0.5537571310997009, -0.0182829387485981, -0.002829835517331958, -0.24282844364643097, -2.3483953555114567e-05, -0.0006185048841871321, -0.20883236825466156, -0.02150561660528183, -0.20294339954853058, -2.7125749588012695, -0.022455349564552307, -0.0938718318939209, -0.03583088517189026, -0.12644366919994354, -0.15147845447063446, -0.5166596174240112, -0.01854369044303894, -0.025000160560011864, -0.04240662232041359, -0.660350501537323, -0.02489784173667431, -0.23521119356155396, -0.00011777184408856556, -0.000406301929615438, -0.00013279033009894192, -0.02023213729262352, -0.010537461377680302, -0.22662211954593658, -0.060710225254297256, -0.17984554171562195, -3.342064380645752, -1.9718470573425293, -0.004671374801546335, -0.0006766413571313024, -0.008090225979685783, -0.14718139171600342, -0.028838282451033592, -0.6900882720947266, -0.49021652340888977, -2.8864338397979736, -0.11192198842763901, -1.9025248289108276, -0.30283182859420776, -0.036626577377319336, -0.3777587115764618, -2.4211437702178955, -2.3335304260253906, -0.025751885026693344, -0.03400591015815735, -0.009870766662061214, -0.7914606332778931, -0.7907268404960632, -0.035859521478414536, -1.0490362910786644e-05, -0.06391017884016037, -0.1218811497092247, -1.8224191665649414, -0.06515607237815857, -0.5088210701942444, -0.0009031984372995794, -0.22136880457401276, -1.9917421340942383, -0.00012158608296886086, -3.8054916858673096, -1.4652140140533447, -0.013820194639265537, -2.083794116973877, -2.8999719619750977, -5.153507232666016, -0.9479601979255676, -1.3901300430297852, -1.121371865272522, -2.485635280609131, -0.0027957186102867126, -0.00687909871339798, -3.04862642288208, -0.0012949660886079073, -0.00038413776201196015, -0.0013423488708212972, -0.28120753169059753, -0.05979020148515701, -0.12421434372663498, -0.2006542980670929, -0.3584633767604828, -1.2061512470245361, -0.17895901203155518, -0.12529565393924713, -0.17962682247161865, -0.0005171154043637216, -0.002278472064062953, -0.83442223072052, -0.0659690648317337, -0.21846860647201538, -0.14423541724681854, -0.0537334680557251], "finish_reason": "length"}], "metrics": {"energy": 397.3833412456512, "energy_per_token": 1.552278676740825, "time": 12.762269, "time_per_token": 0.04985261328125}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n\n    if not isValidURL(url):\n        raise TypeError(url)\n\n    status = []\n    for file in os.listdir(directory):\n        # Check if file is directory or not\n        if os.path.isdir(os.path.join(directory, file)):\n            continue\n\n        file_path = os.path.join(directory, file)\n        response = upload_file(url, file_path, metadata)\n        status.append(response.status_code)\n        time.sleep(1)\n\n    return status", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "directory", ")", "\n", "\n", "    ", "if", " not", " is", "Valid", "URL", "(", "url", "):", "\n", "        ", "raise", " Type", "Error", "(", "url", ")", "\n", "\n", "    ", "status", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "#", " Check", " if", " file", " is", " directory", " or", " not", "\n", "        ", "if", " os", ".", "path", ".", "is", "dir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "))", ":", "\n", "            ", "continue", "\n", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "response", " =", " upload", "_", "file", "(", "url", ",", " file", "_", "path", ",", " metadata", ")", "\n", "        ", "status", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "\n", "\n", "def"], "logprobs": [-2.4014153480529785, -0.1701347827911377, -0.07028675824403763, -4.160317621426657e-05, -0.000938332756049931, -0.03911555930972099, -0.55997234582901, -0.0018287854036316276, -0.007067561149597168, -0.015126636251807213, -0.025748400017619133, -0.003808746114373207, -0.06354555487632751, -0.0033085390459746122, -0.0003311085747554898, -0.00011693747364915907, -0.49243924021720886, -2.06620192527771, -0.29498496651649475, -0.005021934863179922, -0.4992014765739441, -0.0012453190283849835, -1.171043872833252, -0.10019655525684357, -2.8016748428344727, -2.849630117416382, -0.38665878772735596, -0.003368182573467493, -0.0031822300516068935, -0.01609288528561592, -0.00424353638663888, -0.0015428080223500729, -0.009121295996010303, -0.012261842377483845, -6.603976362384856e-05, -0.11553683876991272, -0.10957806557416916, -0.03762498125433922, -0.002463760320097208, -0.04418828710913658, -0.0017492959741503, -1.6493278741836548, -2.349651575088501, -0.043055519461631775, -0.03192465007305145, -0.5457947254180908, -0.6581569910049438, -1.1295057535171509, -0.47188812494277954, -0.09643425792455673, -0.002271454781293869, -0.018106646835803986, -6.6756979322235566e-06, -0.0013802058529108763, -0.0014976962702348828, -0.0011844770051538944, -0.019335947930812836, -0.03962292522192001, -2.9085652828216553, -3.4947712421417236, -0.8821866512298584, -1.2032032012939453, -0.32984304428100586, -3.373788356781006, -0.40451154112815857, -0.25550520420074463, -0.14611689746379852, -0.009808676317334175, -0.3181360960006714, -0.39325109124183655, -3.1470757676288486e-05, -0.003142302157357335, -0.025321584194898605, -0.0006369707407429814, -0.2518216371536255, -0.0029627259355038404, -0.2775048017501831, -0.00044967554276809096, -0.00043132537393830717, -0.0011604249011725187, -0.00243200920522213, -0.00023052419419400394, -0.0016643255949020386, -0.0008811643347144127, -0.015356517396867275, -0.0009005781612358987, -0.007304982282221317, -0.0059555694460868835, -0.008801593445241451, -0.7187544107437134, -0.024342576041817665, -0.846350908279419, -0.0013362773461267352, -2.665864944458008, -0.2575162649154663, -0.5065873861312866, -0.005267668981105089, -0.020715778693556786, -4.649054244509898e-05, -0.0001567479339428246, -0.0006983225466683507, -0.0067205592058598995, -0.00042763148667290807, -0.002069357316941023, -0.00029690624796785414, -0.001978703308850527, -0.0007088055717758834, -0.0045041777193546295, -0.2228398621082306, -2.2550055980682373, -0.044994112104177475, -2.295013666152954, -0.5653356313705444, -0.17240825295448303, -0.17006056010723114, -0.2822574973106384, -0.0413454994559288, -0.0397159606218338, -0.04842288792133331, -0.00022659118985757232, -0.040651995688676834, -0.3126332759857178, -0.15922953188419342, -0.010735731571912766, -0.15591607987880707, -0.3056921660900116, -0.01691603660583496, -0.007083067204803228, -0.004272262565791607, -0.04308623820543289, -0.146920308470726, -0.02688816376030445, -0.019475897774100304, -7.366862701019272e-05, -0.0014884117990732193, -0.008206812664866447, -0.2658527195453644, -0.25693291425704956, -0.0005967028555460274, -0.00013362467871047556, -0.0002252801787108183, -0.0676407590508461, -0.01618168130517006, -0.06763073056936264, -0.3610199987888336, -0.011199350468814373, -0.031074823811650276, -0.005383162293583155, -0.011760544963181019, -0.006185672711580992, -0.14335660636425018], "finish_reason": "stop"}], "metrics": {"energy": 235.35246155929568, "energy_per_token": 1.5586255732403687, "time": 7.7303176, "time_per_token": 0.05119415629139073}}
{"outputs": [{"text": "try:\n        # Check if the directory exists\n        if not os.path.exists(directory):\n            raise FileNotFoundError('Directory not found.')\n    except FileNotFoundError as e:\n        print(e)\n\n    if not url.endswith('/'):\n        url = url + '/'\n    # Get the files to be uploaded\n    files = []\n    for root, dirs, files_ in os.walk(directory):\n        for f in files_:\n            files.append(os.path.join(root, f))\n\n    try:\n        # Make the POST request to the server\n        response = requests.post(url + 'uploadFiles', data=json.dumps(metadata), files=files, headers=HEADERS)\n        status = response.status_code\n        print(f'status: {status}')\n        if status == 200:\n            response = response.json()\n            # pause the upload for 1 second after each upload\n            time.sleep(1)\n        # print(response)\n    except TypeError as e:\n        print(e)\n", "tokens": ["try", ":", "\n", "        ", "#", " Check", " if", " the", " directory", " exists", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "('", "Directory", " not", " found", ".", "')", "\n", "    ", "except", " File", "NotFound", "Error", " as", " e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n", "    ", "if", " not", " url", ".", "end", "sw", "ith", "('/", "')", ":", "\n", "        ", "url", " =", " url", " +", " '/", "'", "\n", "    ", "#", " Get", " the", " files", " to", " be", " uploaded", "\n", "    ", "files", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", "_", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " f", " in", " files", "_", ":", "\n", "            ", "files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " f", "))", "\n", "\n", "    ", "try", ":", "\n", "        ", "#", " Make", " the", " POST", " request", " to", " the", " server", "\n", "        ", "response", " =", " requests", ".", "post", "(", "url", " +", " '", "upload", "Files", "'", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", " files", "=", "files", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "        ", "status", " =", " response", ".", "status", "_", "code", "\n", "        ", "print", "(", "f", "'", "status", ":", " {", "status", "}", "')", "\n", "        ", "if", " status", " ==", " ", "2", "0", "0", ":", "\n", "            ", "response", " =", " response", ".", "json", "()", "\n", "            ", "#", " pause", " the", " upload", " for", " ", "1", " second", " after", " each", " upload", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "#", " print", "(", "response", ")", "\n", "    ", "except", " Type", "Error", " as", " e", ":", "\n", "        ", "print", "(", "e", ")", "\n"], "logprobs": [-2.07554292678833, -0.0006430465145967901, -0.00827727746218443, -0.026582449674606323, -1.4045989513397217, -1.3214178085327148, -0.40907183289527893, -0.28113797307014465, -0.21713072061538696, -0.0419684536755085, -0.391855925321579, -0.0027141659520566463, -0.09383666515350342, -0.13141675293445587, -0.003943643998354673, -1.0609570381348021e-05, -0.0005608416395261884, -0.010734316892921925, -0.29588010907173157, -0.0007188120507635176, -0.0037054228596389294, -0.009838423691689968, -0.00301965675316751, -0.0018041539005935192, -0.10730520635843277, -0.003412853693589568, -0.00015364897262770683, -5.018585216021165e-05, -1.9978981018066406, -0.5929169654846191, -0.5587103962898254, -0.006598588544875383, -1.739112377166748, -0.04208081588149071, -0.0009438112610951066, -2.3672239780426025, -0.015819406136870384, -0.11488358676433563, -0.0002150304353563115, -2.90866428258596e-05, -0.13174502551555634, -0.24279852211475372, -0.002271930454298854, -0.006330793257802725, -0.002044255845248699, -0.47456929087638855, -0.13429801166057587, -0.6260061860084534, -0.032047610729932785, -0.016793660819530487, -1.872039794921875, -0.029151296243071556, -3.605966091156006, -0.4848649203777313, -0.2760007083415985, -0.19981825351715088, -0.9172258973121643, -0.00016246906307060272, -2.3841855067985307e-07, -0.12618868052959442, -0.03261984512209892, -0.009439007379114628, -0.026556679978966713, -0.002535464009270072, -0.5244124531745911, -0.7970629334449768, -0.08806688338518143, -0.04302971437573433, -0.008703630417585373, -0.002737942850217223, -0.010269656777381897, -1.8846994638442993, -1.5597271919250488, -3.1651268005371094, -1.3722048997879028, -1.8018275499343872, -2.6113228797912598, -0.4060649573802948, -0.014708182774484158, -0.3202211558818817, -0.02214139886200428, -0.44261765480041504, -0.1415695697069168, -1.26327383518219, -0.0040123919025063515, -0.058453161269426346, -0.17020928859710693, -1.010200023651123, -0.0018693606834858656, -0.3841840922832489, -0.0005068686441518366, -0.00011586471373448148, -0.19177241623401642, -0.3913983106613159, -0.8059906959533691, -0.002102666301652789, -7.92710343375802e-05, -8.880697714630514e-05, -0.0032851321157068014, -0.0035514873452484608, -0.04509781301021576, -0.008186830207705498, -0.003491260576993227, -0.1252785176038742, -1.9243634939193726, -0.10372952371835709, -0.003569661406800151, -0.02427474595606327, -0.00020823694649152458, -0.002156077418476343, -0.002360179089009762, -0.6681311130523682, -0.0018546062055975199, -0.0008175606490112841, -0.05679384618997574, -0.09085029363632202, -0.00047255316167138517, -0.00013481661153491586, -0.0037176560144871473, -0.005227112676948309, -0.00045098623377270997, -0.005010666791349649, -0.0013913960428908467, -0.005329330451786518, -0.005730983801186085, -0.0027249844279140234, -0.34783935546875, -0.005318539682775736, -3.012342929840088, -0.0004828002711292356, -0.007134911138564348, -0.010489686392247677, -0.5200701355934143, -2.9642202854156494, -0.9341154098510742, -2.829322099685669, -0.02808470092713833, -0.6877217888832092, -0.15125180780887604, -0.26548126339912415, -0.33367788791656494, -0.007128401193767786, -0.7860041856765747, -0.006095035932958126, -0.005584354046732187, -9.83428253675811e-05, -0.009908892214298248, -0.004562444519251585, -0.21935726702213287, -0.3889336585998535, -0.22624628245830536, -1.1330742835998535, -3.395759105682373, -0.12722820043563843, -0.0015699454816058278, -1.8761436939239502, -0.07962505519390106, -0.05556567385792732, -0.00019727191829588264, -0.00026675479602999985, -2.1576648578047752e-05, -0.18856048583984375, -0.7225913405418396, -0.01099079567939043, -0.005369882099330425, -1.2348401546478271, -0.1000780239701271, -0.025349128991365433, -0.045669008046388626, -0.12121597677469254, -0.006101078819483519, -0.0007965967524796724, -5.006664650863968e-05, -0.04951181262731552, -0.015949292108416557, -0.5773197412490845, -1.8649842739105225, -2.2230751514434814, -0.21209391951560974, -0.0007712250226177275, -0.24628321826457977, -0.0003137096355203539, -6.19869097135961e-05, -0.042235102504491806, -0.5067309737205505, -1.480715274810791, -0.151272714138031, -1.450718641281128, -0.45393380522727966, -2.888153076171875, -0.9304969310760498, -0.09002820402383804, -0.03880622237920761, -0.04438695311546326, -0.12964236736297607, -0.014579076319932938, -0.4242974519729614, -2.080742120742798, -0.15777724981307983, -0.6876139640808105, -0.012459771707654, -0.13965411484241486, -0.0009639384225010872, -0.14674851298332214, -0.023373788222670555, -0.03238028287887573, -0.009743395261466503, -2.8944602012634277, -0.8783590197563171, -0.43792858719825745, -0.002697165124118328, -0.09687549620866776, -0.004728682804852724, -0.04982919618487358, -0.12252910435199738, -2.4975533485412598, -4.060816764831543, -3.3082263469696045, -1.7505029439926147, -1.0192384719848633, -0.8458794355392456, -0.03030662052333355, -0.12978467345237732, -0.9249210357666016, -0.0989617332816124, -0.1592002511024475, -0.10722596198320389, -0.00731669832020998, -0.5604426264762878, -0.0010519453790038824, -0.00010871296399272978, -0.0004680253332480788, -0.06676679104566574, -0.022918345406651497, -0.00452518230304122, -1.0050398111343384, -2.3896541595458984, -2.599247932434082, -0.7714356780052185, -0.47115156054496765, -0.09621112793684006, -0.02239147201180458, -1.0058841705322266, -0.039468005299568176, -2.3860607147216797, -1.5735502529423684e-05, -0.17201678454875946, -0.058655645698308945, -0.0017522709676995873, -0.0024409282486885786, -0.0018692417070269585, -0.1257382184267044, -0.06534536927938461, -0.2688094973564148, -0.031084876507520676, -0.009559687227010727], "finish_reason": "length"}], "metrics": {"energy": 381.81076327705364, "energy_per_token": 1.4914482940509908, "time": 12.936768, "time_per_token": 0.05053425}}
{"outputs": [{"text": "# Validate that the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n\n    # Validate that the url is a string\n    if not isinstance(url, str):\n        raise TypeError\n\n    # Create an empty list to store the status codes for the upload responses\n    status_codes = []\n\n    # List all files in the directory\n    files = os.listdir(directory)\n\n    # Iterate through each file\n    for file in files:\n        # Construct the file path and URL\n        file_path = os.path.join(directory, file)\n\n        # Check if the file is a directory\n        if os.path.isdir(file_path):\n            # Recursively call the function for each subdirectory\n            status_codes.extend(task_func(url, file_path, metadata))\n        else:\n            # Construct the upload URL and payload\n            upload_url = f'{url}/{file}'\n\n            # Construct the upload payload\n            upload_payload = json.dumps({\n                'name': file,\n                'metadata': metadata\n            })", "tokens": ["#", " Valid", "ate", " that", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "\n", "\n", "    ", "#", " Valid", "ate", " that", " the", " url", " is", " a", " string", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " the", " status", " codes", " for", " the", " upload", " responses", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " List", " all", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " file", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Construct", " the", " file", " path", " and", " URL", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " directory", "\n", "        ", "if", " os", ".", "path", ".", "is", "dir", "(", "file", "_", "path", "):", "\n", "            ", "#", " Rec", "urs", "ively", " call", " the", " function", " for", " each", " sub", "directory", "\n", "            ", "status", "_", "codes", ".", "extend", "(", "task", "_", "func", "(", "url", ",", " file", "_", "path", ",", " metadata", "))", "\n", "        ", "else", ":", "\n", "            ", "#", " Construct", " the", " upload", " URL", " and", " payload", "\n", "            ", "upload", "_", "url", " =", " f", "'{", "url", "}/{", "file", "}'", "\n", "\n", "            ", "#", " Construct", " the", " upload", " payload", "\n", "            ", "upload", "_", "payload", " =", " json", ".", "d", "umps", "({", "\n", "                ", "'", "name", "':", " file", ",", "\n", "                ", "'", "metadata", "':", " metadata", "\n", "            ", "})"], "logprobs": [-0.9795613884925842, -3.2821056842803955, -0.5614961385726929, -3.008925199508667, -0.21274623274803162, -0.9497814774513245, -0.09252278506755829, -0.4507763087749481, -0.011436264030635357, -0.07407160103321075, -0.0811871588230133, -0.005722450092434883, -1.5616295058862306e-05, -0.0003781795676331967, -0.007548972964286804, -0.370038777589798, -0.0005703729693777859, -0.004984215367585421, -0.010211131535470486, -0.002179034985601902, -0.001440678839571774, -0.0389695018529892, -0.003947562538087368, -0.00021801002731081098, -8.761498611420393e-05, -2.252333641052246, -0.20655904710292816, -0.002814263105392456, -0.14017969369888306, -0.7597059011459351, -0.010972048155963421, -0.4645099341869354, -0.05472657084465027, -0.8485687375068665, -0.05160494148731232, -1.1022738218307495, -1.183327555656433, -0.2274785041809082, -0.0014006814453750849, -0.03173169121146202, -0.05626007169485092, -0.028491340577602386, -0.00019727191829588264, -0.004212079104036093, -0.00013279033009894192, -0.0022198338992893696, -0.007243442814797163, -0.0008553183870390058, -0.0006822404102422297, -0.005778512451797724, -0.0014965059235692024, -8.4638240878121e-06, -0.290506511926651, -0.03506448492407799, -0.002098502591252327, -0.23035217821598053, -2.5620670318603516, -2.813237190246582, -0.12815944850444794, -0.09404318034648895, -0.12882830202579498, -0.09885235130786896, -0.18499436974525452, -0.27155327796936035, -0.022788546979427338, -2.4251303672790527, -0.4438795745372772, -0.05726868286728859, -0.5113665461540222, -0.0818864032626152, -0.0017049076268449426, -0.2349652349948883, -0.13143190741539001, -0.028885304927825928, -0.06306887418031693, -0.015997158363461494, -0.0005859803641214967, -0.055067237466573715, -0.0004909025738015771, -0.10831370949745178, -4.005910873413086, -0.26936641335487366, -0.373320996761322, -0.11661813408136368, -0.009880445897579193, -0.21348044276237488, -0.3209652304649353, -0.0009600082994438708, -0.42149999737739563, -0.07831175625324249, -0.3237704336643219, -3.862306402879767e-05, -0.002281683497130871, -5.722029527532868e-06, -0.0009218971827067435, -0.0007644353318028152, -0.0001599660754436627, -0.0021376395598053932, -0.056275174021720886, -0.00043561504571698606, -0.1434774547815323, -0.9571143388748169, -0.003320420393720269, -0.8045316934585571, -0.8823297023773193, -0.0073356325738132, -1.6625405550003052, -0.001303776167333126, -0.006530846934765577, -0.21416042745113373, -0.21035537123680115, -0.0006871246150694788, -0.00014256415306590497, -0.0005914607318118215, -0.10819678008556366, -0.25802725553512573, -1.740457534790039, -0.06284186989068985, -1.2373207807540894, -0.14975976943969727, -2.364614963531494, -2.8333210945129395, -0.34916672110557556, -0.0004256058018654585, -0.26159098744392395, -0.061089906841516495, -0.0043580797500908375, -0.0012459142599254847, -0.053638115525245667, -0.0003363520372658968, -8.583032467868179e-06, -0.006296795327216387, -0.0007381098694168031, -6.806619057897478e-05, -0.000608854868914932, -0.0002196785935666412, -0.00043299360550008714, -0.00014911970356479287, -0.0013169910525903106, -2.2926058769226074, -0.0014121094718575478, -0.11564112454652786, -2.110682487487793, -0.10063710808753967, -0.10490008443593979, -0.026834549382328987, -0.27402979135513306, -0.13467556238174438, -0.14103157818317413, -0.20627209544181824, -0.00036566724884323776, -0.030288463458418846, -0.019972175359725952, -0.0007493072189390659, -2.169585604860913e-05, -0.005314982496201992, -1.5735502529423684e-05, -0.018091192469000816, -4.303362584323622e-05, -0.0010885033989325166, -0.002819731365889311, -1.1920922133867862e-06, -0.00488386070355773, -0.0015462597366422415, -0.009006824344396591, -0.39707133173942566, -0.4892795979976654, -0.019073763862252235, -0.09093204140663147, -0.44328346848487854, -0.3324373662471771, -0.5065129995346069, -0.757519006729126, -1.2842735052108765, -0.5285654664039612, -0.02943330816924572, -0.044944535940885544, -0.0006778326351195574, -0.1883942186832428, -0.01676458865404129, -0.004923956468701363, -0.27388909459114075, -0.27594760060310364, -0.0018322361866012216, -0.04357561469078064, -0.0005839549703523517, -0.000726197671610862, -0.0011605439940467477, -0.011613854207098484, -0.031190263107419014, -0.01422961801290512, -0.0022159088402986526, -2.145764938177308e-06, -0.0022446929942816496, -0.0026624491438269615, -0.0055698915384709835, -0.0021275284234434366, -0.46136564016342163, -0.047147996723651886, -2.0861407392658293e-05, -0.016241617500782013, -0.009018165990710258, -0.07288055866956711, -1.2231584787368774, -0.017127694562077522, -2.770906686782837, -0.20113961398601532, -1.7645559310913086, -0.9404674768447876, -0.06849916279315948, -0.003579995594918728, -0.7191138863563538, -0.0016401661559939384, -0.01602156087756157, -0.0014315128792077303, -0.9123741388320923, -0.8378700613975525, -0.0008176797418855131, -1.904874324798584, -0.4223279654979706, -0.17336836457252502, -0.020144516602158546, -1.6415886878967285, -0.0015927974600344896, -0.22352303564548492, -1.731189489364624, -0.03710959106683731, -2.7541542053222656, -0.1594444215297699, -0.17772167921066284, -0.0013755630934610963, -0.8745263814926147, -0.0024073924869298935, -0.2325701117515564, -0.0009810879128053784, -2.2185797691345215, -0.00019536493346095085, -0.006158778909593821, -1.7762025890988298e-05, -0.15765242278575897, -0.2966731786727905, -0.003184250323101878, -0.10048133134841919, -3.0265729427337646, -0.001416871091350913, -0.0553663969039917, -0.011758778244256973, -0.004556748550385237, -0.0010091932490468025, -0.042494941502809525, -0.17854896187782288, -0.002539031207561493, -0.06631574779748917, -0.3477219343185425, -0.010012520477175713, -0.0016526625258848071], "finish_reason": "length"}], "metrics": {"energy": 394.3154333934784, "energy_per_token": 1.540294661693275, "time": 12.738628, "time_per_token": 0.049760265625}}
{"outputs": [{"text": "# Checking the validity of the input url\n    if not url:\n        raise TypeError(\"URL cannot be empty\")\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string\")\n\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n\n    if not os.path.isdir(directory):\n        raise NotADirectoryError(\"Path is not a directory\")\n\n    # Iterating over all files and subdirectories in the specified directory\n    files_list = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            # Only include files with the specified file extension\n            if file.endswith('.jpg') or file.endswith('.jpeg') or file.endswith('.png') or file.endswith('.gif'):\n                files_list.append(os.path.join(root, file))\n\n    # Initializing the response list\n    response_list = []\n\n    for file in files_list:\n        ", "tokens": ["#", " Check", "ing", " the", " validity", " of", " the", " input", " url", "\n", "    ", "if", " not", " url", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " cannot", " be", " empty", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " must", " be", " a", " string", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", "\"", ")", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " Not", "AD", "irect", "ory", "Error", "(", "\"", "Path", " is", " not", " a", " directory", "\"", ")", "\n", "\n", "    ", "#", " Iter", "ating", " over", " all", " files", " and", " sub", "direct", "ories", " in", " the", " specified", " directory", "\n", "    ", "files", "_", "list", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "#", " Only", " include", " files", " with", " the", " specified", " file", " extension", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "('", ".", "jpg", "')", " or", " file", ".", "end", "sw", "ith", "('", ".", "jpeg", "')", " or", " file", ".", "end", "sw", "ith", "('", ".", "png", "')", " or", " file", ".", "end", "sw", "ith", "('", ".", "gif", "')", ":", "\n", "                ", "files", "_", "list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " file", "))", "\n", "\n", "    ", "#", " Initial", "izing", " the", " response", " list", "\n", "    ", "response", "_", "list", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", "_", "list", ":", "\n", "        "], "logprobs": [-0.9795613884925842, -1.430532693862915, -1.4840514659881592, -2.00577712059021, -1.5158631801605225, -0.004800817463546991, -0.061179619282484055, -3.0669758319854736, -1.1734869480133057, -0.3128640055656433, -0.020696045830845833, -0.2693459093570709, -0.10692692548036575, -0.5681993365287781, -1.4943054914474487, -0.013790682889521122, -0.00201177760027349, -0.06777133047580719, -0.056534092873334885, -2.109982233378105e-05, -0.5751428008079529, -0.12240855395793915, -2.086346387863159, -0.817713737487793, -0.0018745961133390665, -0.17389926314353943, -0.6869880557060242, -0.0008030288736335933, -0.0030567371286451817, -0.537683367729187, -0.8470149636268616, -0.10902898758649826, -1.6493319272994995, -0.00030417583184316754, -0.016951315104961395, -0.0007607426377944648, -0.008987567387521267, -0.04873743653297424, -0.0044094715267419815, -0.0005675135762430727, -0.009227014146745205, -0.0026556721422821283, -1.9430925021879375e-05, -0.023647770285606384, -0.10712122172117233, -0.1564251184463501, -0.332496702671051, -0.0027787189465016127, -0.11270467191934586, -0.04423470422625542, -0.04343488812446594, -0.00020001317898277193, -0.0007103541865944862, -0.591376543045044, -0.002879641717299819, -2.6659860610961914, -0.19077624380588531, -0.23574040830135345, -8.165503095369786e-05, -0.0016444505890831351, -0.05294494703412056, -0.5205715298652649, -0.000993711524643004, -0.017890043556690216, -0.024251708760857582, -0.01596900261938572, -0.002090770285576582, -0.03933483734726906, -0.003750078845769167, -0.0006200536736287177, -0.00016008525562938303, -0.04666127264499664, -0.47444185614585876, -0.33324700593948364, -0.9499991536140442, -0.016590960323810577, -0.23908840119838715, -0.0018985120113939047, -0.003157394239678979, -0.1759752631187439, -0.0017575069796293974, -2.1360387802124023, -0.23915185034275055, -0.5621910691261292, -0.0015299530932679772, -0.01883186772465706, -0.021994590759277344, -0.0068502104841172695, -0.020062264055013657, -0.0002989322238136083, -0.0020367607939988375, -0.007326993625611067, -0.0027487610932439566, -0.0008320921915583313, -0.02327747642993927, -2.1535239219665527, -0.0008231588872149587, -0.00018142008048016578, -0.00016437610611319542, -0.0022871545515954494, -0.03372944891452789, -0.0351044237613678, -2.628903388977051, -0.4196057915687561, -0.04707726091146469, -0.045292653143405914, -0.06628618389368057, -0.0530330166220665, -0.0004720765573438257, -0.001553639187477529, -0.03194982185959816, -0.0025000290479511023, -0.7491989731788635, -4.520623207092285, -0.15069541335105896, -0.7792395353317261, -0.7247601747512817, -0.24333390593528748, -2.9052786827087402, -2.7394847869873047, -0.13135038316249847, -0.0005409446312114596, -0.702153742313385, -0.04946507140994072, -1.6956037282943726, -0.013823957182466984, -0.10750092566013336, -0.010742218233644962, -1.829542875289917, -0.9573572278022766, -1.1771777868270874, -0.01768088899552822, -0.19371424615383148, -0.037814050912857056, -0.08981355279684067, -0.14529840648174286, -0.3940174877643585, -0.004602078348398209, -0.33854150772094727, -0.00031192204914987087, -0.0003067976504098624, -0.02733716368675232, -0.011763490736484528, -0.0036206187214702368, -6.9141146923357155e-06, -5.471556869451888e-05, -0.0018519884906709194, -0.0024340308737009764, -0.08912135660648346, -0.006104040890932083, -0.007488868664950132, -0.16906657814979553, -0.3218078017234802, -0.20291253924369812, -0.002348880982026458, -0.00025722055579535663, -0.0034020424354821444, -0.0066122072748839855, -1.9827160835266113, -3.9521849155426025, -1.6533459424972534, -0.7133815288543701, -1.1513535976409912, -1.2898433208465576, -1.5128697156906128, -2.2028214931488037, -0.16906023025512695, -0.17816099524497986, -0.0009835887467488647, -0.06256654858589172, -0.298551470041275, -0.02101348526775837, -0.0554681271314621, -6.0794889577664435e-05, -2.3841855067985307e-07, -1.1510006189346313, -0.09817632287740707, -1.9210606813430786, -0.009907830506563187, -0.807063102722168, -0.0025550834834575653, -0.00016592556494288146, -0.0004814896092284471, -7.903263758635148e-05, -3.576278118089249e-07, -0.013075209222733974, -0.008479188196361065, -0.4944547414779663, -0.00036769305006600916, -0.36820563673973083, -0.014714526012539864, -0.0001627074379939586, -0.0004017737810499966, -9.512448741588742e-05, -2.145764938177308e-06, -0.015858713537454605, -0.0024512740783393383, -0.23035870492458344, -0.0010677833342924714, -0.7114055752754211, -0.010905900038778782, -0.0005410637822933495, -0.00044526674901135266, -0.00010132275929208845, -8.344646857949556e-07, -0.02484470047056675, -0.0036556576378643513, -0.7387089133262634, -0.0010920758359134197, -0.4819982945919037, -0.003922389354556799, -0.003937944304198027, -0.6224257349967957, -0.0005323661607690156, -0.0009573881980031729, -0.0014573440421372652, -0.0013860390754416585, -0.09118018299341202, -0.05596129223704338, -6.782778655178845e-05, -0.00012146688823122531, -1.9073468138230965e-06, -0.004935937467962503, -0.0002051381452474743, -0.005876999814063311, -0.0011643542675301433, -0.0010490872664377093, -0.00939401425421238, -0.013701909221708775, -0.07742710411548615, -0.006999732926487923, -0.522123396396637, -3.8317716121673584, -0.07548875361680984, -0.88875412940979, -1.654516577720642, -0.4599362015724182, -0.2954380512237549, -0.0015893458621576428, -0.3605564534664154, -0.035457711666822433, -0.08682125061750412, -0.0016363576287403703, -0.01139878574758768, -0.0008063640561886132, -0.20291614532470703, -0.0004469349514693022, -2.381338119506836, -0.37595006823539734, -0.324371337890625, -0.0025100174825638533, -0.0002466136065777391, -3.2186455882765586e-06, -0.0004621868138201535, -0.005964457057416439, -0.06861503422260284], "finish_reason": "length"}], "metrics": {"energy": 360.5770915412899, "energy_per_token": 1.4085042638331637, "time": 12.704194, "time_per_token": 0.0496257578125}}
{"outputs": [{"text": "try:\n        directory_path = os.path.expanduser(directory)\n    except FileNotFoundError as e:\n        print(f\"Error: {e.msg}\")\n        raise e\n\n    # if the file path is invalid or there are no files found, return an empty list\n    if not os.path.isdir(directory_path) or not os.listdir(directory_path):\n        return []\n\n    files = os.listdir(directory_path)\n\n    # creating a list with the uploaded files\n    uploaded_files = []\n\n    try:\n        for file in files:\n            # if the file name is a file, upload it\n            file_path = os.path.join(directory_path, file)\n            if os.path.isfile(file_path):\n                with open(file_path, 'rb') as file_obj:\n                    response = requests.post(url, data={'file': file_obj,\n                                                         **metadata,\n                                                         **HEADERS,\n                                                         **{'Content-Type': 'multipart/form-", "tokens": ["try", ":", "\n", "        ", "directory", "_", "path", " =", " os", ".", "path", ".", "expand", "user", "(", "directory", ")", "\n", "    ", "except", " File", "NotFound", "Error", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", ":", " {", "e", ".", "msg", "}\"", ")", "\n", "        ", "raise", " e", "\n", "\n", "    ", "#", " if", " the", " file", " path", " is", " invalid", " or", " there", " are", " no", " files", " found", ",", " return", " an", " empty", " list", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", ")", " or", " not", " os", ".", "list", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "return", " []", "\n", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "#", " creating", " a", " list", " with", " the", " uploaded", " files", "\n", "    ", "up", "loaded", "_", "files", " =", " []", "\n", "\n", "    ", "try", ":", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "#", " if", " the", " file", " name", " is", " a", " file", ",", " upload", " it", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " file", ")", "\n", "            ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", "_", "obj", ":", "\n", "                ", "    ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "={", "'", "file", "':", " file", "_", "obj", ",", "\n", "                ", "                ", "                ", "         ", "**", "metadata", ",", "\n", "                ", "                ", "                ", "         ", "**", "HEAD", "ERS", ",", "\n", "                ", "                ", "                ", "         ", "**", "{'", "Content", "-", "Type", "':", " '", "mult", "ipart", "/", "form", "-"], "logprobs": [-2.07554292678833, -0.0006430465145967901, -0.00827727746218443, -0.026582449674606323, -3.621319532394409, -1.1202392578125, -0.38993212580680847, -0.003563959849998355, -0.05913061276078224, -1.5139465176616795e-05, -0.0132136857137084, -0.010937146842479706, -2.0317351818084717, -0.06507107615470886, -0.0085023557767272, -0.03296997398138046, -0.003484726883471012, -0.042522132396698, -2.6462478637695312, -0.0034669076558202505, -0.3210994601249695, -8.868777513271198e-05, -2.8013790142722428e-05, -1.6985173225402832, -0.42560768127441406, -0.0021274094469845295, -0.009429087862372398, -0.0016824151389300823, -1.0270426273345947, -0.09344848245382309, -0.7653904557228088, -0.274777352809906, -1.0370646715164185, -0.1526462584733963, -0.2950648367404938, -0.07997022569179535, -2.7809982299804688, -3.4225287437438965, -0.133722722530365, -0.006045863498002291, -0.018712885677814484, -0.1873248964548111, -0.9842504858970642, -1.5044441223144531, -0.03308092802762985, -0.4572508633136749, -0.0022637236397713423, -1.896986722946167, -4.077773571014404, -1.0325669050216675, -3.3494653701782227, -2.391843557357788, -1.0847110748291016, -1.5072513818740845, -3.4173836708068848, -4.0679779052734375, -0.7886900305747986, -0.13792970776557922, -0.0863838642835617, -3.8859612941741943, -1.133257508277893, -1.4794080257415771, -0.8514868021011353, -0.15330301225185394, -0.03940165042877197, -0.10229084640741348, -0.012800315394997597, -0.14917276799678802, -0.13297970592975616, -0.09214583039283752, -7.86750388215296e-05, -0.011142883449792862, -0.012507452629506588, -1.003114938735962, -0.023294946178793907, -0.0003518439189065248, -0.00322370114736259, -0.045961201190948486, -1.9550132492440753e-05, -0.8717628717422485, -0.014109030365943909, -0.43060392141342163, -0.14020714163780212, -0.001946698990650475, -0.05755964294075966, -2.861018856492592e-06, -0.0005404680268839002, -0.011000699363648891, -0.006755608133971691, -9.536738616588991e-07, -0.018766937777400017, -0.004617266822606325, -0.0014247277285903692, -0.2637750506401062, -0.030730273574590683, -0.002976988675072789, -0.07706218212842941, -0.001833664020523429, -2.9231882095336914, -0.18326766788959503, -1.6607708930969238, -0.00012540031457319856, -0.024079490453004837, -5.722029527532868e-06, -0.00042691652197390795, -0.002715354785323143, -0.007057026028633118, -1.1920922133867862e-06, -0.00029976642690598965, -0.02089616470038891, -1.2787305116653442, -0.0015125750796869397, -1.1777573823928833, -4.767162322998047, -0.521965742111206, -0.6563004851341248, -3.3693628311157227, -0.9851122498512268, -3.9009652137756348, -0.6032463908195496, -1.0097689628601074, -0.008006501942873001, -0.596122145652771, -0.005663183517754078, -0.09168542176485062, -0.033467669039964676, -0.026159241795539856, -0.013109211809933186, -0.0014871024759486318, -0.28931817412376404, -0.0004544417606666684, -2.506464958190918, -0.0002113357331836596, -0.002994222566485405, -0.02397230640053749, -0.8884745836257935, -0.3073526918888092, -0.25395968556404114, -0.0030870423652231693, -0.0002611534437164664, -0.011395132169127464, -0.07089849561452866, -1.811772346496582, -2.796118974685669, -0.38787850737571716, -0.17607733607292175, -3.212003231048584, -1.1148730516433716, -1.604184627532959, -3.2656092643737793, -0.8090177774429321, -1.2096573114395142, -0.2064129114151001, -0.7427209615707397, -0.005500775761902332, -2.843834161758423, -0.06351803243160248, -0.03338800370693207, -0.0038018582854419947, -0.04546922817826271, -6.19869097135961e-05, -0.00011812942830147222, -0.011443099938333035, -0.002663519000634551, -0.0002489972102921456, -0.0046514407731592655, -0.015574256889522076, -1.311301275563892e-06, -0.0004904259694740176, -0.002172730630263686, -0.0012653210433200002, -0.00292397802695632, -0.1472986787557602, -0.5291096568107605, -0.12192283570766449, -0.0006898645660839975, -0.0003680505615193397, -0.006072997581213713, -0.0007900454220362008, -0.0012447236804291606, -7.652943895664066e-05, -0.001176975667476654, -0.0009365463047288358, -1.5497195136049413e-06, -0.029826322570443153, -0.0039364006370306015, -0.030214326456189156, -1.3949905633926392, -0.043775659054517746, -0.0007697956170886755, -0.006316340994089842, -0.00726474542170763, -2.145764938177308e-06, -0.02730526402592659, -0.19471044838428497, -0.013669689185917377, -0.004791682120412588, -0.0007401349139399827, -1.5031118392944336, -1.003015160560608, -1.6293026208877563, -0.0013942531077191234, -0.004656780045479536, -0.01663375459611416, -0.000993116176687181, -0.8500458598136902, -0.03486637398600578, -0.03045845776796341, -0.00040165462996810675, -0.07483601570129395, -0.0016901507042348385, -0.4520260691642761, -0.2468285709619522, -0.9538941979408264, -1.8917262554168701, -0.3578703701496124, -0.5987841486930847, -0.07520738989114761, -0.1216157078742981, -0.053074732422828674, -0.0025466412771493196, -0.6018788814544678, -3.0469894409179688, -0.0015739921946078539, -0.061649687588214874, -0.07090049982070923, -2.1424922943115234, -2.40814471244812, -0.10486981272697449, -1.23959219455719, -0.2992556691169739, -0.0011245838832110167, -1.5258672647178173e-05, -7.164221460698172e-05, -0.032745376229286194, -0.8262922167778015, -0.5224928259849548, -0.001065163523890078, -2.2005133628845215, -0.09366506338119507, -0.0038699035067111254, -7.271502545336261e-05, -0.0003587556129787117, -0.056121569126844406, -0.8039016723632812, -0.4627267122268677, -2.435274839401245, -0.0026121563278138638, -0.9178357720375061, -0.0017702399054542184, -0.21675896644592285, -0.630937397480011, -0.00022480344341602176, -0.0027980960439890623, -0.0020105878356844187, -0.0006503135664388537], "finish_reason": "length"}], "metrics": {"energy": 397.52501059722886, "energy_per_token": 1.5528320726454252, "time": 12.758552, "time_per_token": 0.04983809375}}
{"outputs": [{"text": "response_list = []\n    for file in os.listdir(directory):\n        print(\"uploading\", file)\n        response = requests.post(\n            url, files={'file': (file, open(file, 'rb'))}, headers=HEADERS, json=metadata)\n        # Pause after each upload to emulate network throttling\n        time.sleep(1)\n        response_list.append(response.status_code)\n    return response_list", "tokens": ["response", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "print", "(", "\"", "up", "loading", "\"", ",", " file", ")", "\n", "        ", "response", " =", " requests", ".", "post", "(", "\n", "            ", "url", ",", " files", "={", "'", "file", "':", " (", "file", ",", " open", "(", "file", ",", " '", "rb", "'))", "}", ",", " headers", "=", "HEAD", "ERS", ",", " json", "=", "metadata", ")", "\n", "        ", "#", " P", "ause", " after", " each", " upload", " to", " emulate", " network", " thrott", "ling", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "response", "_", "list", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "    ", "return", " response", "_", "list", "\n", "\n", "def"], "logprobs": [-3.8311657905578613, -0.254984050989151, -1.0522350072860718, -0.011646375060081482, -0.035889655351638794, -0.039308130741119385, -0.4369391202926636, -2.255779266357422, -1.513840675354004, -0.8892613053321838, -0.046476032584905624, -2.8967437174287625e-05, -0.01695307344198227, -2.0146166207268834e-05, -0.00443427637219429, -0.004489580634981394, -0.0014552014181390405, -0.03834066167473793, -0.0240266565233469, -4.052567481994629, -0.16795188188552856, -1.6749181747436523, -3.4166018962860107, -0.016969598829746246, -2.2920384407043457, -0.17213280498981476, -0.058316875249147415, -0.20922128856182098, -0.011274791322648525, -0.039710115641355515, -1.581809401512146, -0.12889768183231354, -0.0838942900300026, -0.00030357998912222683, -0.18749350309371948, -0.017021752893924713, -1.4669665098190308, -0.01625252701342106, -0.16556400060653687, -0.7683745622634888, -1.3949178457260132, -0.06578937917947769, -0.7187512516975403, -0.11056133359670639, -0.02624250389635563, -0.6905706524848938, -0.08949977904558182, -0.001156852813437581, -0.2852287292480469, -0.02114911749958992, -2.057431221008301, -0.008327286690473557, -0.13982483744621277, -0.0005663221818394959, -0.09571445733308792, -0.027825266122817993, -0.0006250573205761611, -0.49215391278266907, -0.00803157314658165, -0.0017383478116244078, -0.0001829695247579366, -0.09682604670524597, -1.4948796033859253, -0.19076795876026154, -0.0738535076379776, -0.16824762523174286, -0.016536438837647438, -0.0442398376762867, -3.0707180500030518, -3.825892210006714, -0.004045398905873299, -1.5970278978347778, -0.27743199467658997, -0.11729229986667633, -1.6508450508117676, -3.8116908073425293, -2.6488165855407715, -3.087010145187378, -0.0024375985376536846, -0.26678287982940674, -0.0033591531682759523, -0.10360840708017349, -0.0003327769518364221, -0.0001438752660760656, -0.00016830935783218592, -0.0948777049779892, -0.010778424330055714, -0.01219530776143074, -0.06626297533512115, -0.30665963888168335, -0.03380009904503822, -0.03690970316529274, -0.004382648505270481, -0.0018490137299522758, -0.006693679373711348, -0.03328458219766617, -0.0579942986369133, -0.026732416823506355, -0.0008095800876617432, -1.7404405298293568e-05, -0.0016719423001632094, -0.018215514719486237, -0.3353983461856842, -0.04565226659178734, -0.009802302345633507, -0.0005088941543363035, -7.390948667307384e-06, -0.4549850523471832, -0.017932312563061714, -0.999459981918335], "finish_reason": "stop"}], "metrics": {"energy": 151.4796217117309, "energy_per_token": 1.3770874701066447, "time": 5.2148566, "time_per_token": 0.04740778727272727}}
