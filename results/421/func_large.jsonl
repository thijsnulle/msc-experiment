{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n\n    if not isinstance(url, str):\n        raise TypeError(\"Invalid URL\")\n\n    try:\n        files = os.listdir(directory)\n    except FileNotFoundError:\n        return []\n\n    response_status = []\n\n    for file_name in files:\n        if not file_name.endswith(('.py', '.txt', '.docx', '.pdf', '.png', '.jpeg')):\n            print(f\"{file_name} is not a valid file type\")\n            continue\n\n        file_path = os.path.join(directory, file_name)\n\n        with open(file_path, 'rb') as f:\n            data = {\n                'file': (file_name, f, \"multipart/form-data\"),\n                'metadata': (None, json.dumps(metadata), \"application/json\")\n            }\n\n            response = requests.post(url, data=", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Invalid", " URL", "\"", ")", "\n", "\n", "    ", "try", ":", "\n", "        ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "response", "_", "status", " =", " []", "\n", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "if", " not", " file", "_", "name", ".", "end", "sw", "ith", "(", "('", ".", "py", "'", ",", " '", ".", "txt", "'", ",", " '", ".", "doc", "x", "'", ",", " '", ".", "pdf", "'", ",", " '", ".", "png", "'", ",", " '", ".", "jpeg", "'))", ":", "\n", "            ", "print", "(", "f", "\"", "{", "file", "_", "name", "}", " is", " not", " a", " valid", " file", " type", "\"", ")", "\n", "            ", "continue", "\n", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " {", "\n", "                ", "'", "file", "':", " (", "file", "_", "name", ",", " f", ",", " \"", "mult", "ipart", "/", "form", "-", "data", "\"", ")", ",", "\n", "                ", "'", "metadata", "':", " (", "None", ",", " json", ".", "d", "umps", "(", "metadata", ")", ",", " \"", "application", "/", "json", "\"", ")", "\n", "            ", "}", "\n", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "="], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -1.3024324178695679, -0.701324999332428, -0.5368722677230835, -0.0010021670022979379, -0.009223943576216698, -0.3953467011451721, -0.007436688058078289, -0.0032292858231812716, -0.4906509518623352, -0.0013172292383387685, -0.9288274049758911, -0.1127893328666687, -0.7555476427078247, -0.00013791563105769455, -0.05790204927325249, -0.001035749795846641, -0.0067257690243422985, -0.4269518256187439, -0.0020256969146430492, -0.0015398323303088546, -0.005343559198081493, -0.0028810682706534863, -2.610649426060263e-05, -0.04253344237804413, -0.023631354793906212, -1.5443956851959229, -0.4898148477077484, -0.28646552562713623, -0.0007956438348628581, -0.0004287039046175778, -0.03391902893781662, -0.0015343570848926902, -3.502192497253418, -0.0012728216825053096, -0.0020848223939538, -0.021046753972768784, -1.6235991716384888, -0.0579342246055603, -0.5669168829917908, -1.8596476365928538e-05, -0.009674686007201672, -4.768370445162873e-07, -0.0004932855372317135, -0.0017108578467741609, -0.0002821285743266344, -0.008661322295665741, -1.432163953781128, -0.00039891392225399613, -0.7411520481109619, -0.00048637480358593166, -9.894321920000948e-06, -0.40544000267982483, -0.004444364458322525, -0.0004668337933253497, -1.3706934452056885, -0.6426380276679993, -0.014072592370212078, -0.10177155584096909, -0.0006070678355172276, -3.674983263015747, -0.08554210513830185, -0.8787897229194641, -1.8311501741409302, -0.01899540051817894, -0.0032484165858477354, -0.903546929359436, -0.00025769727653823793, -0.09877016395330429, -0.21448273956775665, -1.3494038581848145, -0.07389114797115326, -0.0003971264814026654, -0.003640810726210475, -0.0005349873681552708, -0.00037353215157054365, -0.039923880249261856, -2.3486881256103516, -1.3415133953094482, -0.48632141947746277, -0.00011038171214750037, -0.00015221867943182588, -0.08127244561910629, -0.2493603229522705, -2.8490614567999728e-05, -2.3841855067985307e-07, -1.4391618967056274, -2.288546323776245, -0.10302216559648514, -3.454826593399048, -0.03699690103530884, -0.0005737089086323977, -0.022585075348615646, -0.02329028770327568, -1.0889688730239868, -0.5308201313018799, -0.0004190520558040589, -0.007061760872602463, -0.008791313506662846, -2.0895729064941406, -0.33292293548583984, -0.42341944575309753, -0.00025340684805996716, -0.0041862004436552525, -0.01875886507332325, -1.1943106651306152, -0.5695366859436035, -0.00020930961181875318, -0.005184776149690151, -0.011314867064356804, -1.9234610795974731, -0.14982247352600098, -0.00022289653134066612, -0.011684433557093143, -0.01167017687112093, -1.747846245765686, -1.1541950702667236, -0.009550359100103378, -0.007308177649974823, -0.0023335388395935297, -2.927708864212036, -0.08331775665283203, -0.3692971169948578, -0.1366381198167801, -1.6314570903778076, -0.00818564835935831, -0.0008968859910964966, -0.00022873646230436862, -0.04947437345981598, -0.5334482192993164, -0.16005782783031464, -0.5024721026420593, -0.5242102146148682, -0.06167008727788925, -0.4000915288925171, -0.5028391480445862, -0.001774523756466806, -0.002170351566746831, -0.057850632816553116, -0.05238954350352287, -0.00936980452388525, -0.18509869277477264, -0.0016487350221723318, -0.5821064114570618, -0.03684065118432045, -0.01176242996007204, -0.00045849301386624575, -0.008655177429318428, -3.4570634852570947e-06, -3.981510963058099e-05, -5.960446742392378e-06, -0.0023377013858407736, -0.00022754464589525014, -0.0012553200358524919, -6.568216485902667e-05, -0.0005398723296821117, -2.9802276912960224e-06, -8.344646857949556e-07, -8.725739462533966e-05, -0.000695344409905374, -0.5772233009338379, -0.0007653883076272905, -0.5806112289428711, -0.003330994863063097, -0.00020132421923335642, -0.001190192298963666, -7.629365427419543e-06, -4.637133679352701e-05, -0.00037102968781255186, -0.0883040577173233, -0.018797824159264565, -0.0007479969062842429, -0.0005878866068087518, -0.6167802810668945, -0.022371072322130203, -0.0023865809198468924, -0.017377736046910286, -0.8495389819145203, -0.008450465276837349, -1.0824780464172363, -0.17982572317123413, -0.004311076831072569, -0.16372960805892944, -0.6537474989891052, -0.05680567026138306, -1.7369942665100098, -0.04837438836693764, -0.00014995403762441128, -0.013290269300341606, -0.001447345013730228, -0.0029000865761190653, -0.8553030490875244, -3.4608280658721924, -0.6418340802192688, -0.0002244459028588608, -0.007888000458478928, -0.008464295417070389, -0.0002681849291548133, -6.5205356804654e-05, -0.0034008543007075787, -0.016300495713949203, -0.08575504273176193, -0.0055541242472827435, -0.02533750794827938, -0.02996053360402584, -0.25854480266571045, -0.0017560789128765464, -1.109173059463501, -0.011468320153653622, -4.31528314948082e-05, -0.015877487137913704, -1.7165990357170813e-05, -3.099393507000059e-05, -1.1920928244535389e-07, -0.02298964560031891, -0.010984782129526138, -0.7455682158470154, -0.08228733390569687, -0.09047281742095947, -0.04399893432855606, -0.0006463822210207582, -0.002777173649519682, -0.0010636154329404235, -0.011802957393229008, -0.10916057229042053, -0.005617308896034956, -1.8715683836489916e-05, -0.00023636408150196075, -0.31775304675102234, -0.01714187301695347, -0.3803273141384125, -0.005159989930689335, -0.010193550027906895, -0.0001454247540095821, -0.014393316581845284, -0.0002579356369096786, -0.015932632610201836, -0.022866614162921906, -2.36492919921875, -0.005571432411670685], "finish_reason": "length"}], "metrics": {"energy": 1085.7321996898654, "energy_per_token": 4.241141405038537, "time": 23.830027, "time_per_token": 0.09308604296875}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist\")\n\n    # Check if the URL is valid\n    if not isinstance(url, str):\n        raise TypeError(f\"URL {url} is not valid\")\n\n    # Retrieve all files in the directory\n    files = os.listdir(directory)\n\n    # Initialize an empty list to store the status codes\n    status_codes = []\n\n    # Iterate over each file in the directory\n    for file in files:\n        # Build the full path to the file\n        file_path = os.path.join(directory, file)\n\n        # Read the file content in binary mode\n        with open(file_path, 'rb') as f:\n            # Create the data payload with the file and metadata\n            data = {\n                'file': f,\n                'metadata': json.dumps(metadata).encode('utf-8')\n            }\n\n            # Send a POST request to the server with the data payload and headers\n            response = requests.post", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " URL", " is", " valid", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "URL", " {", "url", "}", " is", " not", " valid", "\"", ")", "\n", "\n", "    ", "#", " Ret", "rieve", " all", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " status", " codes", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " directory", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Build", " the", " full", " path", " to", " the", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "\n", "        ", "#", " Read", " the", " file", " content", " in", " binary", " mode", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "#", " Create", " the", " data", " payload", " with", " the", " file", " and", " metadata", "\n", "            ", "data", " =", " {", "\n", "                ", "'", "file", "':", " f", ",", "\n", "                ", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")", ".", "encode", "('", "utf", "-", "8", "')", "\n", "            ", "}", "\n", "\n", "            ", "#", " Send", " a", " POST", " request", " to", " the", " server", " with", " the", " data", " payload", " and", " headers", "\n", "            ", "response", " =", " requests", ".", "post"], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -0.21879440546035767, -0.1481090635061264, -0.09559723734855652, -0.2728474736213684, -0.004981961566954851, -0.02613125368952751, -0.03662266954779625, -0.003636416047811508, -2.50339189733495e-06, -0.0008780676289461553, -1.8000440832111053e-05, -0.27229949831962585, -0.0002261144545627758, -0.0016702761640772223, -0.012630940414965153, -0.001261273049749434, -0.002712501445785165, -0.06376524269580841, -0.004439617041498423, -0.00021991695393808186, -1.7881233361549675e-05, -0.12851227819919586, -0.3060014843940735, -0.13695824146270752, -0.3378855586051941, -0.9174214601516724, -0.000945240433793515, -0.0014911495381966233, -0.2665678560733795, -0.0005820487276650965, -0.003089775564149022, -0.4609792232513428, -0.0003332536434754729, -0.0005749003030359745, -0.07888710498809814, -0.0013504442758858204, -0.06555204838514328, -0.4816109240055084, -0.06880155950784683, -0.09338485449552536, -1.2447774410247803, -0.06252645701169968, -0.12786902487277985, -0.04370445758104324, -0.0011013639159500599, -0.36980530619621277, -0.05892001837491989, -0.5810266733169556, -7.343022298300639e-05, -0.000645429186988622, -0.000553335587028414, -0.003461561631411314, -0.777952253818512, -0.0009918061550706625, -0.0012273406609892845, -0.0011750705307349563, -0.002044731518253684, -7.390948667307384e-06, -0.019125575199723244, -0.5062501430511475, -0.00463993102312088, -0.5451655983924866, -1.3043673038482666, -0.004680866841226816, -0.0010677833342924714, -0.17304575443267822, -0.46179190278053284, -1.6715167760849, -0.0354422926902771, -0.0001652104256208986, -0.0001479277852922678, -0.030650043860077858, -0.0012456761905923486, -0.16420070827007294, -3.9312050342559814, -0.05846047028899193, -1.275669813156128, -0.5766276121139526, -0.31686660647392273, -0.007567193359136581, -0.15176457166671753, -0.14157795906066895, -0.001190549461171031, -0.17106734216213226, -0.010484023950994015, -0.33013835549354553, -5.960462772236497e-07, -0.0006849803612567484, -1.9073468138230965e-06, -8.153582894010469e-05, -0.0011962646385654807, -7.879423355916515e-05, -0.0004848258395213634, -0.173822820186615, -0.0003685271949507296, -0.04344595968723297, -1.586121916770935, -1.2719595432281494, -0.008290164172649384, -0.030280712991952896, -0.1039871871471405, -0.13898509740829468, -0.4019951820373535, -0.566361129283905, -0.012376883998513222, -0.11977677047252655, -0.0005749003030359745, -0.01987740397453308, -0.007597835268825293, -0.0065269386395812035, -0.0012702024541795254, -0.004435225855559111, -0.0002603192115202546, -0.015569092705845833, -0.0005108005134388804, -0.10586490482091904, -1.422178864479065, -0.0016215997748076916, -0.5520960688591003, -0.8154804110527039, -0.002144657773897052, -1.3985271453857422, -0.003020726377144456, -0.07623198628425598, -0.06908228993415833, -0.0003238391946069896, -0.0035058720968663692, -0.21660125255584717, -0.14206333458423615, -0.0010243174619972706, -0.00011693747364915907, -0.00013147920253686607, -0.05623122304677963, -0.26969751715660095, -3.104419469833374, -0.019376402720808983, -0.890152096748352, -0.5197235941886902, -0.3030438721179962, -0.0026643513701856136, -0.002119439421221614, -0.010737854987382889, -0.0003670972364488989, -0.06330813467502594, -0.014269105158746243, -0.0005505952867679298, -4.9828242481453344e-05, -0.0028765511233359575, -2.3841830625315197e-06, -1.2040065485052764e-05, -6.079655122448457e-06, -0.0017381097422912717, -8.964136941358447e-05, -0.0008179179858416319, -5.578839045483619e-05, -0.0002628219372127205, -0.000161038784426637, -0.0001793938863556832, -0.044313397258520126, -0.0006500753224827349, -0.006810310296714306, -1.8935915231704712, -0.019835449755191803, -0.6147558093070984, -0.5937071442604065, -2.3694255352020264, -0.09840906411409378, -0.14483553171157837, -0.03295521065592766, -0.0001445904199499637, -0.01975094899535179, -2.1815061700181104e-05, -6.41325386823155e-05, -0.00023719835735391825, -0.0003748429589904845, -1.1920928244535389e-07, -6.949660019017756e-05, -0.28650104999542236, -0.00023409964342135936, -0.00012242044613230973, -4.911301948595792e-05, -0.17637307941913605, -0.016037749126553535, -0.00038652101648040116, -0.016100743785500526, -0.10377325862646103, -1.6571323871612549, -0.6766434907913208, -2.006305694580078, -0.7939435839653015, -1.349549412727356, -0.17022044956684113, -0.29455846548080444, -1.0840845108032227, -0.2028505504131317, -0.00836984533816576, -0.0005838358192704618, -0.19919241964817047, -0.007318236865103245, -0.9932757616043091, -0.10556492954492569, -0.002658882411196828, -0.18456239998340607, -0.3190704882144928, -0.013968443498015404, -0.1609107255935669, -0.01675732061266899, -0.01818636804819107, -0.016510525718331337, -0.4134736955165863, -0.17797742784023285, -0.001857937895692885, -0.15622824430465698, -2.5033637939486653e-05, -0.00026925752172246575, -3.576278118089249e-07, -0.01244799792766571, -0.00177714170422405, -0.0147604551166296, -2.5637001991271973, -0.005498167593032122, -0.3214108645915985, -0.009992220439016819, -0.016590608283877373, -5.936446541454643e-05, -0.001658732071518898, -0.11664263904094696, -0.003193043638020754, -1.4781842764932662e-05, -0.0001006075763143599, -0.029574861750006676, -0.004847678355872631, -0.009402989409863949, -0.7751115560531616, -0.525666356086731, -0.07784625887870789, -0.00021896349790040404, -0.185700923204422, -0.029170285910367966, -0.03211653232574463, -0.5499741435050964, -0.02560851164162159, -0.8713909387588501, -0.3530382812023163, -0.7616185545921326, -0.20865346491336823, -0.008359442465007305, -0.0009601273923180997, -0.10252499580383301, -0.00033408781746402383, -0.0008054111385717988, -6.0794889577664435e-05, -0.0015785150462761521], "finish_reason": "length"}], "metrics": {"energy": 1048.27580547905, "energy_per_token": 4.094827365152539, "time": 24.020256, "time_per_token": 0.093829125}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    if not url:\n        raise TypeError('Please enter a valid URL.')\n\n    metadata_dict = {}\n\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        if os.path.isfile(file_path):\n            if file_name.endswith('.json'):\n                with open(file_path, 'r') as json_file:\n                    try:\n                        data = json.load(json_file)\n                        metadata_dict.update(data)\n                    except json.JSONDecodeError:\n                        print(f\"Invalid JSON file: {file_name}\")\n                        continue\n            else:\n                with open(file_path, 'rb') as binary_file:\n                    response = requests.put(url, data=binary_file,\n                                            headers=HEADERS,\n                                            params=metadata)\n                ", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " url", ":", "\n", "        ", "raise", " Type", "Error", "('", "Please", " enter", " a", " valid", " URL", ".", "')", "\n", "\n", "    ", "metadata", "_", "dict", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "if", " file", "_", "name", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " json", "_", "file", ":", "\n", "                ", "    ", "try", ":", "\n", "                ", "        ", "data", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "                ", "        ", "metadata", "_", "dict", ".", "update", "(", "data", ")", "\n", "                ", "    ", "except", " json", ".", "JSON", "Dec", "ode", "Error", ":", "\n", "                ", "        ", "print", "(", "f", "\"", "Invalid", " JSON", " file", ":", " {", "file", "_", "name", "}\"", ")", "\n", "                ", "        ", "continue", "\n", "            ", "else", ":", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " binary", "_", "file", ":", "\n", "                ", "    ", "response", " =", " requests", ".", "put", "(", "url", ",", " data", "=", "binary", "_", "file", ",", "\n", "                ", "                ", "            ", "headers", "=", "HEAD", "ERS", ",", "\n", "                ", "                ", "            ", "params", "=", "metadata", ")", "\n", "                "], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -0.4638574421405792, -0.2077873945236206, -0.5080741047859192, -1.2875611782073975, -0.0004231034545227885, -0.0011318475008010864, -0.0018791175680235028, -0.5231797099113464, -0.0008515069494023919, -0.003661715192720294, -0.751625657081604, -0.011709529906511307, -0.0015637562610208988, -0.0013362773461267352, -0.43021076917648315, -0.000814582861494273, -0.8688490986824036, -0.0806356817483902, -1.6675323247909546, -1.1594781875610352, -0.003477599238976836, -0.0011951930355280638, -0.01299354899674654, -0.09055459499359131, -7.390948667307384e-06, -1.5433679819107056, -3.811126232147217, -1.2555103302001953, -0.36721789836883545, -0.1716410219669342, -0.6368541121482849, -0.9862957000732422, -0.018437432125210762, -0.0008771148277446628, -0.03935810178518295, -0.0005216429708525538, -4.318675518035889, -1.7484875917434692, -2.561601161956787, -0.013634058646857738, -2.42423152923584, -0.15179181098937988, -1.350752830505371, -0.000609927112236619, -1.0077130794525146, -1.0516390800476074, -1.030765175819397, -0.11576759070158005, -0.01499171182513237, -0.014949317090213299, -6.6756979322235566e-06, -0.002231609309092164, -1.1920928244535389e-07, -0.000739658426027745, -0.002362082013860345, -0.0007195267826318741, -0.0018650771817192435, -0.07123114913702011, -0.9085120558738708, -0.033787768334150314, -0.017337199300527573, -0.0010827876394614577, -0.009200792759656906, -1.7881377516459906e-06, -5.125868119648658e-05, -3.6954811548639555e-06, -0.002030455507338047, -0.00020180096908006817, -0.0014327033422887325, -8.999896090244874e-05, -0.0013550871517509222, -2.264974000354414e-06, -3.814689989667386e-06, -0.00021395778458099812, -0.0012440093560144305, -0.5797918438911438, -0.764872670173645, -0.10064432770013809, -1.0967194612021558e-05, -0.0027946485206484795, -2.264974000354414e-06, -0.004931311123073101, -0.022188503295183182, -0.00019560330838430673, -0.0001705739414319396, -1.0728830375228426e-06, -0.000985017861239612, -0.0828484371304512, -0.0008085080771706998, -0.04866783693432808, -2.7436013221740723, -0.8538460731506348, -0.00015484087634831667, -0.3231896162033081, -0.44395995140075684, -0.22649049758911133, -1.597391747054644e-05, 0.0, -0.1746656596660614, -0.027204688638448715, -1.042177438735962, -0.001262463629245758, -0.0883227214217186, -0.020533842965960503, -0.00488445395603776, -0.4228755235671997, -0.0002522150462027639, -0.0003970073303207755, -0.004104405175894499, -3.933898824470816e-06, -0.00048375347978435457, -0.11492970585823059, -0.03289176896214485, -0.014730031602084637, -0.06637821346521378, -0.0018487757770344615, -1.6808052062988281, -0.018551062792539597, -0.014849252998828888, -0.0010088359704241157, -0.0006567466771230102, -0.0015309053706005216, -0.00034540885826572776, -1.8560690879821777, -7.891343557275832e-05, -0.0004337085410952568, -0.0007681279676035047, -0.0005327236140146852, -2.267179489135742, -0.04565761983394623, -0.0030885871965438128, -0.0010548033751547337, -0.02495562843978405, -7.271502545336261e-05, -0.00021360022947192192, -2.52720492426306e-05, -6.198863957251888e-06, -0.0022436226718127728, -0.0023436478804796934, -0.010603634640574455, -0.16261138021945953, -0.3025793433189392, -0.01253841444849968, -0.004696528892964125, -0.4910840094089508, -0.0012198395561426878, -0.005059059709310532, -0.005949999671429396, -0.008105125278234482, -0.004906518384814262, -0.0053442707285285, -0.041350990533828735, -0.0006681832019239664, -0.1571035534143448, -9.297892393078655e-05, -0.11947543174028397, -0.00025340684805996716, -4.410734163684538e-06, -2.264974000354414e-06, -0.787335216999054, -0.002787159290164709, -0.00023910524032544345, -0.0003492222458589822, -0.4888671040534973, -0.008911481127142906, -0.10354466736316681, -0.09502308070659637, -1.6166387796401978, -0.021775327622890472, -0.2839908301830292, -0.039129890501499176, -0.0560661181807518, -0.003920964431017637, -0.00020811776630580425, -0.12144056707620621, -0.028027325868606567, -0.0009071287349797785, -0.0012650828575715423, -1.1735708713531494, -1.5952041149139404, -0.07171260565519333, -0.008537461049854755, -0.20310531556606293, -0.058355335146188736, -1.0132738680113107e-05, -0.002698948374018073, -0.001969780307263136, -0.4336097240447998, -0.0006515049026347697, -9.619726915843785e-05, -0.00034445550409145653, -3.6954811548639555e-06, -0.0005629861843772233, -0.00031764229061082006, -0.008840823546051979, -0.015754634514451027, -0.0004435985756572336, -9.011816291604191e-05, -2.9182522296905518, -0.003333133412525058, -0.002833758248016238, -0.00045110538485459983, -0.0003588747640606016, -0.0033833899069577456, -0.0005942009738646448, -2.021815776824951, -0.006780710071325302, -0.006416196934878826, -0.00029392691794782877, -1.526153326034546, -0.0025688763707876205, -0.21036387979984283, -0.16034768521785736, -1.0553309917449951, -0.03122388757765293, -0.0033312325831502676, -7.271740287251305e-06, -1.4305104514278355e-06, -0.021606534719467163, -2.1418817043304443, -0.0009940688032656908, -0.013789154589176178, -0.025867709890007973, -0.20688652992248535, -0.0028525397647172213, -0.008445736952126026, -5.722029527532868e-06, -0.4079324007034302, -0.7033840417861938, -0.0003461238811723888, -0.00020954797219019383, -0.0007769426447339356, -0.1005227267742157, -0.18072888255119324, -0.06712177395820618, -1.0024107694625854, -0.017403744161128998, -0.1306949257850647], "finish_reason": "length"}], "metrics": {"energy": 1078.8855193939212, "energy_per_token": 4.214396560132505, "time": 23.800692, "time_per_token": 0.092971453125}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f'No such directory: {directory}')\n\n    if not isinstance(url, str):\n        raise TypeError('url must be a string')\n\n    status_codes = []\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        with open(filepath, 'rb') as f:\n            r = requests.post(url, headers=HEADERS,\n                              files={'file': (filename, f, 'application/json')}, data={'metadata': json.dumps(metadata)})\n            status_codes.append(r.status_code)\n            print(f\"Uploaded {filename} with status code {r.status_code}\")\n\n        # Pauses for one second after each upload\n        time.sleep(1)\n\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "'", "No", " such", " directory", ":", " {", "directory", "}", "')", "\n", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "('", "url", " must", " be", " a", " string", "')", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "r", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", "\n", "                ", "              ", "files", "={", "'", "file", "':", " (", "filename", ",", " f", ",", " '", "application", "/", "json", "')}", ",", " data", "={", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")})", "\n", "            ", "status", "_", "codes", ".", "append", "(", "r", ".", "status", "_", "code", ")", "\n", "            ", "print", "(", "f", "\"", "Upload", "ed", " {", "filename", "}", " with", " status", " code", " {", "r", ".", "status", "_", "code", "}\"", ")", "\n", "\n", "        ", "#", " Pa", "uses", " for", " one", " second", " after", " each", " upload", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "#"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -0.4638574421405792, -1.9448822736740112, -2.6688239574432373, -0.04941423982381821, -0.04337884113192558, -0.1585044115781784, -0.03679434955120087, -0.0019369428046047688, -0.0186171755194664, -0.0059204925782978535, -0.002723557874560356, -0.4423803389072418, -0.0007198841194622219, -0.9093721508979797, -0.11637230217456818, -0.7588256001472473, -0.0001597276859683916, -0.06003855913877487, -0.0010126468259841204, -0.008359442465007305, -0.5144189596176147, -0.0023265217896550894, -0.0017606009496375918, -0.0059434822760522366, -0.0035027835983783007, -3.075552376685664e-05, -0.49942895770072937, -1.2307811975479126, -0.23124387860298157, -0.00300444383174181, -0.15438194572925568, -0.23279237747192383, -0.04079689458012581, -0.000278195773717016, -0.06020659953355789, -0.000788258679676801, -1.4748212099075317, -0.1031193733215332, -0.029893429949879646, -0.004480917472392321, -0.011017088778316975, -0.016562703996896744, -0.3766115605831146, -0.30265411734580994, -1.3482375144958496, -0.004428223706781864, -0.02825843170285225, -5.006777428206988e-06, -0.0005135409301146865, -1.1920928244535389e-07, -0.0003987947420682758, -0.0004864939546678215, -0.0004932855372317135, -0.001791778369806707, -0.01941674016416073, -0.6699873805046082, -0.41508039832115173, -0.0003420721332076937, -0.0031632171012461185, -7.152555099310121e-07, -3.540453326422721e-05, -5.483612312673358e-06, -0.001972635742276907, -0.00016926287207752466, -0.00045718232286162674, -5.936446541454643e-05, -0.0005451146862469614, -0.0001770101225702092, -0.0011794761521741748, -0.24561810493469238, -0.5553345680236816, -0.0006597249885089695, -0.0001932195882545784, -0.0005109196645207703, -2.706014311115723e-05, -0.0005526207387447357, -0.015538576990365982, -0.01787259615957737, -0.0004204819560982287, -9.905801562126726e-05, -0.5276601910591125, -0.018877841532230377, -0.0027184458449482918, -0.007249952293932438, -3.6910691261291504, -0.007761676795780659, -0.002681947313249111, -0.0001711698860162869, -0.12598292529582977, -0.0018127213697880507, -0.1743611842393875, -0.04286115989089012, -0.5037866830825806, -0.008190141059458256, -0.011339501477777958, -1.3351351299206726e-05, -0.000508417550008744, -1.6080299615859985, -0.002163333585485816, -0.058528833091259, -0.7637562155723572, -0.03457333892583847, -0.2627236247062683, -0.2857046127319336, -0.006199534051120281, -0.358210027217865, -0.0825720950961113, -0.0009211826254613698, -0.003158463630825281, -1.6313855648040771, -0.28622978925704956, -0.5588537454605103, -0.000871040450874716, -1.4454576969146729, -0.03514942526817322, -0.0001618731184862554, -1.106879472732544, -2.995422124862671, -0.04521084949374199, -0.2145450860261917, -0.0006724718841724098, -0.0086426492780447, -4.756337511935271e-05, -0.00046492734691128135, -2.264974000354414e-06, -0.003469521179795265, -0.014943679794669151, -0.0396689847111702, -0.003080387134104967, -0.1444491147994995, -0.09998828172683716, -0.0009255892946384847, -0.0023457887582480907, -0.0010115751065313816, -0.00048530244384892285, -0.004853254184126854, -0.0033486979082226753, -0.006029156036674976, -0.002550802892073989, -0.0002588890492916107, -4.875540980719961e-05, -0.0006129055400379002, -0.0015253110323101282, -0.5235700011253357, -2.688605546951294, -0.06514982134103775, -0.31342634558677673, -0.9257233142852783, -0.8437619209289551, -0.24548093974590302, -0.42854395508766174, -0.2752775251865387, -0.16860662400722504, -0.382612943649292, -0.17737241089344025, -0.02470538206398487, -0.07879400998353958, -0.008988040499389172, -7.331102824537084e-05, -7.748303323751315e-05, -5.94836674281396e-05, -7.152531907195225e-06, -0.07232070714235306, -0.003935094457119703, -0.006868324708193541, -1.7713159322738647, -0.3632383942604065, -0.32081857323646545, -3.224917411804199, -1.0111403465270996, -0.047981780022382736, -0.12537674605846405, -0.0023436478804796934, -0.11921760439872742, -0.023866156116127968, -0.018448900431394577, -0.5549285411834717, -0.00435629952698946, -0.01924731396138668, -0.0002177716523874551, -0.00010358751023886725, -0.0004325169720686972, -0.008004373870790005, -0.00778568908572197, -0.0015509016811847687, -0.13779790699481964, -0.00786292552947998, -0.024092640727758408, -0.0036669413093477488, -2.634490556374658e-05, -5.280832192511298e-05, -0.19524210691452026, -0.014538191258907318, -1.0978364944458008], "finish_reason": "stop"}], "metrics": {"energy": 852.6085207118987, "energy_per_token": 4.0217383052448055, "time": 19.437376, "time_per_token": 0.09168573584905661}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n\n    status_codes = []\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        with open(file_path, 'rb') as f:\n            files = {'file': f}\n            response = requests.post(url, headers=HEADERS, files=files, json=metadata)\n            status_codes.append(response.status_code)\n        time.sleep(1)\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ":", " {", "}\"", ".", "format", "(", "directory", "))", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "file", "':", " f", "}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "files", ",", " json", "=", "metadata", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "if"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -1.3024324178695679, -0.701324999332428, -1.1947377920150757, -0.015103857032954693, -2.0872933864593506, -0.4983699917793274, -0.03690476343035698, -0.0026472308672964573, -0.0005285535007715225, -0.000348268891684711, -0.007003402337431908, -0.0008747326792217791, -0.0021918814163655043, -0.42380356788635254, -0.0008880723617039621, -1.6674593687057495, -0.06305398792028427, -0.03462815284729004, -0.004631980787962675, -0.009940052404999733, -0.015489397570490837, -0.3913816511631012, -0.3866337537765503, -1.1786073446273804, -0.7971581816673279, -0.010529439896345139, -9.059865078597795e-06, -0.0025618611834943295, -4.291525328881107e-06, -0.0004807746736332774, -0.0006130246329121292, -0.00035982808913104236, -0.0016139827203005552, -0.022281773388385773, -1.0321452617645264, -0.085834801197052, -0.019825514405965805, -0.0003856868715956807, -0.0022884628269821405, -7.152555099310121e-07, -2.2172682292875834e-05, -1.7881377516459906e-06, -0.0014298463938757777, -0.00024434918304905295, -0.0009459549910388887, -6.949660019017756e-05, -0.0012511529494076967, -0.0002836778585333377, -0.0009080815361812711, -0.1613663136959076, -1.055680513381958, -0.0007740838918834925, -0.00018535325943958014, -0.0008917645900510252, -0.00023505308490712196, -1.1920928244535389e-07, -0.0005738280597142875, -0.125326469540596, -0.018666669726371765, -0.00025900822947733104, -0.0004979324294254184, -0.1495058387517929, -0.02222464792430401, -0.0029878043569624424, -0.007922298274934292, -1.6851377487182617, -0.013934704475104809, -0.19047023355960846, -0.15486901998519897, -0.0025137036573141813, -0.48367840051651, -0.007243798114359379, -0.007514425087720156, -0.06296432763338089, -0.8392160534858704, -0.0016831292305141687, -0.005469121038913727, -0.00017093151109293103, -0.014326571486890316, -0.000704278820194304, -0.04102644324302673, -0.01914440281689167, -0.5486600995063782, -0.009104403667151928, -0.0073859249241650105, -1.9073304429184645e-05, -0.0007706294418312609, -0.3250986635684967, -0.0020374746527522802, -0.0003784178989008069, -0.015173133462667465, -2.263184070587158, -0.022493116557598114, -0.015690209344029427, -0.02166101336479187, -0.003211937379091978, -0.044917069375514984, -0.09128247201442719, -0.0018331881146878004, -0.0054781315848231316, -0.000610999355558306, -0.0002449450839776546, -0.005159515421837568, -0.002514773979783058, -0.0026247594505548477, -0.0023642226587980986, -0.0003026265767402947, -4.529942543740617e-06, -0.00023278864682652056, -0.0018518695142120123, -1.5041546821594238, -0.09425095468759537, -0.00010609064338495955, -0.0001426833332516253, -0.0004164305282756686, -0.024733759462833405, -0.01203065924346447, -0.22575244307518005, -0.3664496839046478, -0.013300621882081032, -0.006352707277983427, -5.400034933700226e-05, -8.785339014139026e-05, -0.11657410860061646, -0.018674509599804878, -1.7381322383880615], "finish_reason": "stop"}], "metrics": {"energy": 576.6723588256832, "energy_per_token": 4.03267383794184, "time": 13.144466, "time_per_token": 0.09191934265734265}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string\")\n    if not os.path.isdir(directory):\n        raise ValueError(\"directory must be a directory path\")\n\n    status_codes = []\n    files = os.listdir(directory)\n    for file in files:\n        path = os.path.join(directory, file)\n        with open(path, \"rb\") as f:\n            data = {\"file\": f}\n            metadata.update({\"file\": os.path.basename(file)})\n            response = requests.post(url, headers=HEADERS, files=data, data=json.dumps(metadata))\n            status_codes.append(response.status_code)\n            time.sleep(1)\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " must", " be", " a", " string", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "directory", " must", " be", " a", " directory", " path", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "with", " open", "(", "path", ",", " \"", "rb", "\"", ")", " as", " f", ":", "\n", "            ", "data", " =", " ", "{\"", "file", "\":", " f", "}", "\n", "            ", "metadata", ".", "update", "(", "{\"", "file", "\":", " os", ".", "path", ".", "bas", "ename", "(", "file", ")})", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "data", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "#"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -0.46100175380706787, -0.263683557510376, -0.36993706226348877, -0.7684483528137207, -0.001611840445548296, -0.0034313867799937725, -0.22351273894309998, -0.0007223857101053, -0.005383280571550131, -1.1388177871704102, -0.013966327533125877, -0.0013104431563988328, -0.0009638193296268582, -1.0954550504684448, -0.48652368783950806, -0.08669773489236832, -0.6650054454803467, -0.00019071667338721454, -0.04152815043926239, -0.0007802779437042773, -0.008306479081511497, -0.4292040765285492, -0.0023258081637322903, -0.0014810318825766444, -0.00321122445166111, -0.0028250806499272585, -1.8358061424805783e-05, -0.038005951792001724, -0.6737020611763, -0.7965317964553833, -0.11411186307668686, -0.0007955246837809682, -0.019889090210199356, -0.1502191424369812, -1.5294747352600098, -0.0009004590683616698, -0.00021038226259406656, -0.701266884803772, -1.471640944480896, -0.12042693793773651, -2.1248230934143066, -0.00011681827891152352, -0.01462489366531372, -0.0004297763225622475, -0.08660547435283661, -0.025648482143878937, -0.0006074252305552363, -0.006026904564350843, -0.007183319889008999, -0.005001296289265156, -0.0012281740782782435, -0.07489264756441116, -1.3998686075210571, -3.838465272565372e-05, -0.012555483728647232, -0.8172567486763, -2.806231737136841, -0.5600879788398743, -0.01968643069267273, -0.034696437418460846, -0.90581876039505, -1.9711309671401978, -0.09149473905563354, -0.00014518637908622622, -0.000380324519937858, -1.0812623500823975, -0.0013227055314928293, -1.1625392436981201, -0.07160630077123642, -0.05498058721423149, -0.006098590325564146, -0.010152013041079044, -0.027707349509000778, -0.2219247817993164, -1.8812413215637207, -0.17618489265441895, -0.7610674500465393, -4.768360213347478e-06, -0.006128329783678055, -3.576278118089249e-07, -0.00018714107864070684, -0.0011314902221783996, -0.00012289722508285195, -0.0035695426631718874, -0.20755872130393982, -0.38416215777397156, -0.35566258430480957, -0.23874548077583313, -0.0020651936065405607, -0.0005482124397531152, -0.0007445423980243504, -0.014719929546117783, -2.6615452766418457, -0.026832228526473045, -0.009558860212564468, -1.4305104514278355e-06, -0.0001627074379939586, -6.198863957251888e-06, -0.007893203757703304, -0.0002834395272657275, -0.0015306673012673855, -8.940297266235575e-05, -0.002473511267453432, -0.00025090406415984035, -0.0020166554022580385, -0.07109969854354858, -0.7295858263969421, -0.0009440494468435645, -0.0001578206429257989, -0.0012962757609784603, -0.001278893556445837, -1.2645479440689087, -0.04455205798149109, -0.00017474555352237076, -0.0002889215829782188, -0.0005881248507648706, -0.2643754780292511, -0.05402105301618576, -0.004162339493632317, -0.006989078596234322, -0.9766161441802979, -0.008501292206346989, -2.035651922225952, -0.0004524161049630493, -0.6608659029006958, -0.027672795578837395, -0.06915949285030365, -2.017753839492798, -0.003853041213005781, -0.03382810577750206, -2.3363609313964844, -1.0603963136672974, -0.006533926352858543, -0.14845995604991913, -0.07685091346502304, -1.760170340538025, -1.340968132019043, -2.0460591316223145, -3.182837463100441e-05, -0.0011481605470180511, -2.0146166207268834e-05, -0.10746955871582031, -1.1920928244535389e-07, -7.056941103655845e-05, -1.4510350227355957, -0.040685877203941345, -0.018310679122805595, -0.07538948208093643, -0.707013726234436, -0.0013088955311104655, -0.00375708588398993, -0.00018654513405635953, -0.02319280058145523, -0.0002044230350293219, -0.04303530976176262, -0.024611523374915123, -0.9160453081130981, -0.005815372336655855, -0.006203562021255493, -1.0132738680113107e-05, -0.0004657614335883409, -0.31207284331321716, -0.0012179345358163118, -0.000501983508002013, -0.0028775022365152836, -0.33227089047431946, -0.003841403406113386, -0.08685097843408585, -3.790783375734463e-05, -0.00023636408150196075, -5.960462772236497e-07, -0.008912189863622189, -0.039975766092538834, -0.033863943070173264, -0.0035247597843408585, -0.08170702308416367, -0.15998977422714233, -0.004544762894511223, -0.004540253430604935, -0.0015375708462670445, -0.0011383965611457825, -0.00416269525885582, -0.005487379152327776, -0.008345965296030045, -0.0022394596599042416, -0.00030763185350224376, -1.2278481335670222e-05, -0.0003494605771265924, -0.001517812255769968, -0.5542628765106201, -0.2776399850845337, -0.00013958434283267707, -0.00020037073409184813, -0.0003780603874474764, -0.03280998021364212, -0.014513048343360424, -0.21683833003044128, -0.3503681719303131, -0.015201429836452007, -0.004989671986550093, -3.981510963058099e-05, -2.1576648578047752e-05, -0.18348340690135956, -0.015355578623712063, -1.082917332649231], "finish_reason": "stop"}], "metrics": {"energy": 910.067018836975, "energy_per_token": 4.09940098575214, "time": 20.65401, "time_per_token": 0.09303608108108108}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist\")\n\n    # Check if the url is valid\n    if not url or not isinstance(url, str) or not url.startswith('http'):\n        raise TypeError(f\"Invalid URL: {url}\")\n\n    # Iterate over all the files in the directory\n    status_codes = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n\n            # Read the contents of the file and create the payload\n            with open(file_path, 'rb') as f:\n                file_data = f.read()\n                payload = {\n                    'fileName': os.path.basename(file_path),\n                    'fileContent': file_data,\n                    'metadata': metadata\n                }\n\n                # Make the POST request to the server\n                response = requests.post(url, json=payload, headers=HEAD", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " url", " is", " valid", "\n", "    ", "if", " not", " url", " or", " not", " isinstance", "(", "url", ",", " str", ")", " or", " not", " url", ".", "start", "sw", "ith", "('", "http", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " URL", ":", " {", "url", "}\"", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " the", " files", " in", " the", " directory", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "\n", "            ", "#", " Read", " the", " contents", " of", " the", " file", " and", " create", " the", " payload", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "                ", "payload", " =", " {", "\n", "                ", "    ", "'", "fileName", "':", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", "\n", "                ", "    ", "'", "file", "Content", "':", " file", "_", "data", ",", "\n", "                ", "    ", "'", "metadata", "':", " metadata", "\n", "                ", "}", "\n", "\n", "                ", "#", " Make", " the", " POST", " request", " to", " the", " server", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " json", "=", "payload", ",", " headers", "=", "HEAD"], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -0.21879440546035767, -0.1481090635061264, -0.09559723734855652, -0.2728474736213684, -0.004981961566954851, -0.02613125368952751, -0.03662266954779625, -0.003636416047811508, -2.50339189733495e-06, -0.0008780676289461553, -1.8000440832111053e-05, -0.27229949831962585, -0.0002261144545627758, -0.0016702761640772223, -0.012630940414965153, -0.001261273049749434, -0.002712501445785165, -0.06376524269580841, -0.004439617041498423, -0.00021991695393808186, -1.7881233361549675e-05, -0.12851227819919586, -0.3060014843940735, -0.13695824146270752, -0.3378855586051941, -0.9272748231887817, -0.00035494225448928773, -0.0008560330606997013, -0.0015669699059799314, -0.254533976316452, -0.0005228344234637916, -0.0022753796074539423, -0.7127335667610168, -0.00030560590676032007, -0.0005858612130396068, -0.08824512362480164, -0.001620766706764698, -0.05935419350862503, -0.4489838182926178, -0.05842909961938858, -0.09824547916650772, -0.49372121691703796, -0.07769891619682312, -0.20340465009212494, -0.03337336331605911, -0.0011326810345053673, -0.24849988520145416, -0.06525804102420807, -1.466761589050293, -1.8318833112716675, -0.03385910391807556, -0.5170962810516357, -4.541770613286644e-05, -0.0016722993459552526, -0.0003887851198669523, -0.003607077756896615, -1.2894090414047241, -0.0024833811912685633, -0.05803918093442917, -0.07728852331638336, -0.0028483793139457703, -0.010341038927435875, -3.3378546504536644e-06, -1.1920928244535389e-07, -0.35706108808517456, -0.29801538586616516, -0.04673215374350548, -0.022407442331314087, -0.0013484203955158591, -0.0015910121146589518, -0.0026406915858387947, -0.008867882192134857, -2.0265558760002023e-06, -0.1433083713054657, -0.489484578371048, -0.008966892026364803, -0.14171287417411804, -0.8015742301940918, -0.2659400701522827, -0.2753719389438629, -0.0020655503030866385, -0.026002103462815285, -0.00024172721896320581, -0.00022980909852776676, -0.018048109486699104, -0.001404728856869042, -0.19701611995697021, -3.261312484741211, -0.028658049181103706, -0.5567206740379333, -1.1168169975280762, -1.8222095966339111, -0.05069984495639801, -0.05115504562854767, -0.009017812088131905, -0.12862391769886017, -0.21066713333129883, -0.0015193596482276917, -0.8325521349906921, -0.05273688957095146, -0.03214181587100029, -0.005207071080803871, -0.006950486451387405, -0.05268453061580658, -0.0469018779695034, -0.07090193778276443, -1.334657907485962, -0.0019177870126441121, -0.27293330430984497, -0.00026055757189169526, -8.11782301752828e-05, -0.006981147453188896, -0.0007770617958158255, -0.000481132126878947, -1.1920922133867862e-06, -2.4914430468925275e-05, -0.00029774048016406596, -0.0018490137299522758, -0.010500185191631317, -0.0015142414486035705, -0.003935213200747967, -0.02894703298807144, -0.11879342049360275, -0.15521305799484253, -0.0012318650260567665, -9.42901024245657e-05, -0.0002236116270069033, -0.02299453876912594, -0.9027301669120789, -0.13767316937446594, -0.007893676869571209, -0.0002674698771443218, -0.0005354639724828303, -3.6954811548639555e-06, -6.556489552167477e-06, -5.960462772236497e-07, -0.0017928492743521929, -5.6622808187967166e-05, -0.002747810212895274, -2.706014311115723e-05, -0.00045265440712682903, -0.00014304091746453196, -0.0018831630004569888, -0.8318079113960266, -0.002847428433597088, -0.07044197618961334, -0.9452328085899353, -0.12569060921669006, -2.2327229976654053, -0.0035010017454624176, -0.01909809000790119, -0.004905806854367256, -2.1209464073181152, -1.6551963090896606, -0.6789918541908264, -0.7753968834877014, -0.0937567800283432, -0.00154292699880898, -0.03512882441282272, -0.0001255195093108341, -0.00022516099852509797, -0.000846266164444387, -0.0011149387573823333, -1.7881377516459906e-06, -0.0016218378441408277, -0.07561741769313812, -0.04082310199737549, -0.00015567521040793508, -0.00014006110723130405, -0.07990089058876038, -0.02266152761876583, -0.0009526243666186929, -0.001278893556445837, -1.7934551239013672, -0.002369098598137498, -1.2032415866851807, -0.0008104139124043286, -0.031010916456580162, -8.415821503149346e-05, -1.156323378381785e-05, -0.00021300431399140507, -0.003401329508051276, -1.0032116174697876, -0.2190263718366623, -0.0028405338525772095, -0.8242488503456116, -0.141235813498497, -0.0002153879904653877, -0.0034797375556081533, -0.16346411406993866, -2.9331016540527344, -0.0011637589195743203, -1.707946538925171, -1.645074735279195e-05, -4.410646579344757e-05, -6.079655122448457e-06, -0.035679399967193604, -1.1920928244535389e-07, -3.683499380713329e-05, -0.008910535834729671, -0.031969912350177765, -0.00019214690837543458, -0.0009037939016707242, -0.0063386112451553345, -0.007273148279637098, -7.033100700937212e-05, -0.0002076410164590925, -0.004811613354831934, -0.44090506434440613, -2.0597081184387207, -0.01857353001832962, -0.08763113617897034, -1.2278481335670222e-05, -2.288792165927589e-05, -0.5209137201309204, -0.015479772351682186, -0.00015114595589693636, -0.01609734259545803, -0.05805819109082222, -0.20482853055000305, -0.0025537756737321615, -0.2507796585559845, -0.0769222304224968, -0.0006972504197619855, -0.0011255365097895265, -0.0003275334893260151, -0.09069603681564331, -0.9639763832092285, -0.030084198340773582, -1.4614369869232178, -0.428072988986969, -0.6911866664886475, -0.0016724183224141598, -0.8363448977470398, -0.18188688158988953, -0.044913992285728455, -0.42413365840911865, -0.0036699105985462666, -0.20999781787395477, -0.0009302341495640576, -0.003517632372677326, -0.0001551984460093081, -0.016288883984088898, -0.0003022690652869642, -0.016739971935749054, -0.01094292476773262, -2.061123847961426, -0.021580751985311508, -0.0027669500559568405, -0.01644931547343731, -0.01391871552914381, -0.0009814451914280653, -0.00707620196044445], "finish_reason": "length"}], "metrics": {"energy": 1083.8527455177302, "energy_per_token": 4.233799787178634, "time": 23.638086, "time_per_token": 0.0923362734375}}
{"outputs": [{"text": "# Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n\n    # Check if url is valid\n    if not isinstance(url, str):\n        raise TypeError('Url is invalid.')\n\n    # Get a list of all the files in the specified directory\n    files = os.listdir(directory)\n    status_codes = []\n\n    # Iterate over each file and upload it to the server\n    for file in files:\n        file_path = os.path.join(directory, file)\n        with open(file_path, 'rb') as f:\n            data = {\n                'file': f,\n                'metadata': json.dumps(metadata)\n            }\n            # Send a POST request to the server and get the response\n            response = requests.post(url, data=data, headers=HEADERS)\n            # Pause for one second before uploading the next file\n            time.sleep(1)\n            status_codes.append(response.status_code)\n\n    return status_codes", "tokens": ["#", " Check", " if", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " not", " found", ".", "')", "\n", "\n", "    ", "#", " Check", " if", " url", " is", " valid", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "('", "Url", " is", " invalid", ".", "')", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " all", " the", " files", " in", " the", " specified", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " and", " upload", " it", " to", " the", " server", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " {", "\n", "                ", "'", "file", "':", " f", ",", "\n", "                ", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")", "\n", "            ", "}", "\n", "            ", "#", " Send", " a", " POST", " request", " to", " the", " server", " and", " get", " the", " response", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "=", "data", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "            ", "#", " P", "ause", " for", " one", " second", " before", " uploading", " the", " next", " file", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "#"], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -1.9606232643127441, -0.1584937423467636, -0.18759164214134216, -0.005783135071396828, -0.021924151107668877, -0.041981372982263565, -0.003475104458630085, -3.814689989667386e-06, -0.0009709649602882564, -1.2636104656849056e-05, -0.2544286847114563, -0.00023326536756940186, -0.0024502037558704615, -0.010362865403294563, -0.0018537732539698482, -0.0024018031544983387, -0.06676589697599411, -0.00435060216113925, -0.00024685196694917977, -1.8596476365928538e-05, -2.2413389682769775, -0.3568333387374878, -1.5436757802963257, -0.018443869426846504, -1.9572713375091553, -0.0337321013212204, -0.0015378089156001806, -0.1125081479549408, -0.0016473069554194808, -0.09354108572006226, -0.4779958128929138, -0.045060209929943085, -0.5364006757736206, -0.07480604201555252, -0.2099536508321762, -0.046580832451581955, -0.0008080316474661231, -0.23498870432376862, -0.10384192317724228, -0.609023928642273, -0.000125281119835563, -0.0011211306555196643, -0.0007637205999344587, -0.004643016029149294, -0.7409954071044922, -0.0009263038518838584, -0.0013012760318815708, -0.0020389023702591658, -0.0021701136138290167, -9.894321920000948e-06, -0.02222336456179619, -2.3414855003356934, -2.033949613571167, -0.6386876106262207, -0.058745238929986954, -0.010068107396364212, -0.0002454218047205359, -0.0225574541836977, -0.0013917532050982118, -0.2815452814102173, -1.6683650016784668, -1.9497183561325073, -0.014783360064029694, -0.001440797932446003, -0.6034389734268188, -2.3770697116851807, -0.25943151116371155, -0.03423656150698662, -0.014530671760439873, -2.5259475708007812, -0.01073974184691906, -0.11888381838798523, -0.0017913023475557566, -0.46700790524482727, -0.030203107744455338, -0.12323039770126343, -1.5497195136049413e-06, -0.0009382136631757021, -6.556489552167477e-06, -0.00047505536349490285, -0.0016838433220982552, -0.00025042734341695905, -0.0009789442410692573, -1.7896844148635864, -1.143006443977356, -0.09537836164236069, -0.057502586394548416, -0.007348413113504648, -0.00744011951610446, -0.05706816911697388, -0.19385381042957306, -0.0006504327175207436, -0.2486979067325592, -1.5800182819366455, -0.024856561794877052, -0.8284674286842346, -0.7229670286178589, -0.012443759478628635, -1.2948203086853027, -0.3457719683647156, -0.07652708888053894, -0.3795908987522125, -0.013922595418989658, -0.41172927618026733, -0.6096272468566895, -0.0011714984430000186, -0.011819333769381046, -0.2302073985338211, -0.1372356414794922, -0.001485317014157772, -0.00035363141796551645, -0.00023362292267847806, -0.03263473138213158, -0.8073084950447083, -0.0649871826171875, -0.026413187384605408, -0.00038961926475167274, -0.015290775336325169, -5.364403477869928e-06, -6.389413465512916e-05, -5.722029527532868e-06, -0.002930396469309926, -0.0003438596613705158, -0.002457576571032405, -0.00014065706636756659, -0.0012235306203365326, -0.00020251607929822057, -0.002809151541441679, -0.28071507811546326, -0.40943443775177, -0.0005285535007715225, -0.00019727191829588264, -0.0006556744920089841, -0.0006744970451109111, -5.960462772236497e-07, -0.0008023141999728978, -0.032264865934848785, -0.023121515288949013, -0.0002928543253801763, -0.000291662581730634, -0.1308736801147461, -0.0158547256141901, -0.004425019025802612, -0.022421080619096756, -1.1411844491958618, -0.0056894985027611256, -1.5446399450302124, -0.09354141354560852, -0.006176076363772154, -0.12350742518901825, -0.6497651934623718, -0.026443257927894592, -0.14612585306167603, -0.042770132422447205, -0.009519068524241447, -0.03028973564505577, -0.12184759229421616, -0.155472993850708, -0.0021664262749254704, -0.07456652820110321, -3.4689302992774174e-05, -0.00017212340026162565, -3.576278118089249e-07, -0.012933417223393917, -0.0019042231142520905, -0.014739193953573704, -0.2703373432159424, -0.006447466555982828, -2.0861407392658293e-05, -0.0007314390386454761, -0.16222436726093292, -2.609708070755005, -1.0336575508117676, -0.9898455142974854, -0.13276061415672302, -0.0009064141195267439, -0.07698768377304077, -0.06378022581338882, -0.06072133034467697, -2.6033823490142822, -1.3468868732452393, -0.03450723737478256, -0.37011829018592834, -0.7727291584014893, -0.003844965947791934, -0.1699492335319519, -0.0007539528887718916, -0.0018134353449568152, -0.00010013079008786008, -0.0011457790387794375, -0.00046171018038876355, -0.010259037837386131, -0.00944207701832056, -2.7549026012420654, -0.014316112734377384, -0.0022266136948019266, -0.03840479254722595, -0.13863906264305115, -0.002827339107170701, -0.007314213085919619, -2.098061486321967e-05, -0.01605464331805706, -0.0015717307105660439, -0.11297206580638885, -1.4252843856811523, -3.1818015575408936, -0.0016575419576838613, -0.025645343586802483, -0.19888176023960114, -0.0021256250329315662, -2.609973907470703, -1.9007983207702637, -0.07365750521421432, -0.00029213930247351527, -0.008927195332944393, -0.13153433799743652, -0.0019100533099845052, -0.07773839682340622, -0.0002224197960458696, -0.0002714027068577707, -0.00037305548903532326, -0.019064875319600105, -0.012934594415128231, -0.003749009920284152, -0.14087088406085968, -1.0036832094192505, -0.0017050266033038497, -0.005264111328870058, -0.000780754373408854, -0.0003570872650016099, -0.003018111689016223, -0.004329949617385864, -0.00422133831307292, -0.00158946483861655, -0.000491855782456696, -2.288792165927589e-05, -0.001013361383229494, -0.002473511267453432, -0.44147589802742004, -0.017003001645207405, -0.24300338327884674, -0.004987773951143026, -5.543078441405669e-05, -7.533743337262422e-05, -0.17527300119400024, -0.011067785322666168, -0.9403952360153198], "finish_reason": "stop"}], "metrics": {"energy": 1026.626372133255, "energy_per_token": 4.10650548853302, "time": 23.182035, "time_per_token": 0.09272814}}
{"outputs": [{"text": "if os.path.exists(directory):\n        if isinstance(url, str):\n            os.chdir(directory)\n            file_list = []\n            for file in os.listdir('./'):\n                if os.path.isfile(file):\n                    file_list.append(file)\n            status_codes = []\n            for file in file_list:\n                with open(file, \"rb\") as image_file:\n                    payload = {**{\"file\": file}, **metadata}\n                    payload_str = json.dumps(payload)\n                    response = requests.post(url, headers=HEADERS, data=payload_str, files={'image': image_file})\n                    status_codes.append(response.status_code)\n                    time.sleep(1)\n            return status_codes\n        else:\n            raise TypeError('url is invalid')\n    else:\n        raise FileNotFoundError('directory does not exist')", "tokens": ["if", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "if", " isinstance", "(", "url", ",", " str", "):", "\n", "            ", "os", ".", "ch", "dir", "(", "directory", ")", "\n", "            ", "file", "_", "list", " =", " []", "\n", "            ", "for", " file", " in", " os", ".", "list", "dir", "('", ".", "/", "')", ":", "\n", "                ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "                ", "    ", "file", "_", "list", ".", "append", "(", "file", ")", "\n", "            ", "status", "_", "codes", " =", " []", "\n", "            ", "for", " file", " in", " file", "_", "list", ":", "\n", "                ", "with", " open", "(", "file", ",", " \"", "rb", "\"", ")", " as", " image", "_", "file", ":", "\n", "                ", "    ", "payload", " =", " {", "**", "{\"", "file", "\":", " file", "}", ",", " **", "metadata", "}", "\n", "                ", "    ", "payload", "_", "str", " =", " json", ".", "d", "umps", "(", "payload", ")", "\n", "                ", "    ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "payload", "_", "str", ",", " files", "={", "'", "image", "':", " image", "_", "file", "})", "\n", "                ", "    ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "    ", "time", ".", "sleep", "(", "1", ")", "\n", "            ", "return", " status", "_", "codes", "\n", "        ", "else", ":", "\n", "            ", "raise", " Type", "Error", "('", "url", " is", " invalid", "')", "\n", "    ", "else", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "directory", " does", " not", " exist", "')", "\n", "\n", "if"], "logprobs": [-1.1811845302581787, -2.2832438945770264, -7.652943895664066e-05, -0.016304248943924904, -3.731181277544238e-05, -0.5777010321617126, -0.0012392468051984906, -0.01265177596360445, -0.2508571147918701, -0.012515340000391006, -0.07794374227523804, -1.4994614124298096, -1.8638134002685547, -0.0009398810216225684, -0.0649135634303093, -0.0027877537067979574, -0.02346799708902836, -0.21866758167743683, -0.009305675514042377, -0.02076224982738495, -4.262528896331787, -0.022819308564066887, -0.01810477301478386, -0.0022067499812692404, -0.009656268171966076, -0.050328776240348816, -0.0010091932490468025, -0.03034316562116146, -0.08379168063402176, -2.4170761108398438, -0.20045071840286255, -0.694007158279419, -0.003761598840355873, -2.572188138961792, -0.010319212451577187, -0.07128432393074036, -0.4291960895061493, -0.9015960097312927, -0.2434643805027008, -0.0237090066075325, -3.218599158572033e-05, -0.030654551461338997, -5.8412379075889476e-06, -1.9312546253204346, -0.0008679436868987978, -1.2957749366760254, -0.005339053459465504, -0.0005828827270306647, -0.00650479132309556, -0.003384815761819482, -1.1080113649368286, -0.22793447971343994, -7.557583012385294e-05, -0.00511693861335516, -5.125986263010418e-06, -0.015823865309357643, -0.060518816113471985, -0.009329886175692081, -0.09804988652467728, -0.04563085734844208, -0.002455079462379217, -0.0004742213059216738, -0.0012190061388537288, -0.3985145390033722, -0.007391368038952351, -0.05389590933918953, -0.012477431446313858, -0.0013403251068666577, -0.02470363862812519, -0.053307920694351196, -0.0034451675601303577, -0.0026782616041600704, -0.40904664993286133, -1.2352300882339478, -0.159230038523674, -0.7745279669761658, -0.019302038475871086, -0.016413314267992973, -0.0025417660363018513, -0.018274160102009773, -0.12993982434272766, -0.2458517700433731, -0.07787416130304337, -0.009900984354317188, -2.145764938177308e-06, -9.536738616588991e-07, -0.0017572689102962613, -0.000910344475414604, -0.0036778682842850685, -1.0706655979156494, -0.008439235389232635, -0.0025983641389757395, -0.026573164388537407, -0.006225953344255686, -2.321861743927002, -0.10620317608118057, -0.0005626287311315536, -0.000720956246368587, -0.0014548442559316754, -3.506648540496826, -0.21163944900035858, -0.15341028571128845, -0.0025597207713872194, -0.005020867567509413, -0.0017272805562242866, -0.00157423026394099, -2.3577160835266113, -0.04419398680329323, -0.840351939201355, -2.027512788772583, -2.5289361476898193, -0.7394806146621704, -0.04502841457724571, -0.7135616540908813, -0.22704190015792847, -0.0003392120997887105, -0.0065217274241149426, -0.032676614820957184, -0.00284707173705101, -0.01256290078163147, -0.006907275412231684, -0.0006101653561927378, -2.6427977085113525, -1.6182727813720703, -2.981200933456421, -0.003582608886063099, -0.017749283462762833, -5.6622808187967166e-05, -0.000382707774406299, -1.5497195136049413e-06, -0.006066125351935625, -0.008685549721121788, -0.022303340956568718, -0.08401080220937729, -0.027560660615563393, -8.320462075062096e-05, -0.5723944306373596, -0.0045763286761939526, -0.005014580674469471, -0.00020930961181875318, -0.09617680311203003, -0.0005125877796672285, -0.0990145355463028, -0.0814352035522461, -1.1196954250335693, -0.011491064913570881, -0.003440059022977948, -7.510157047363464e-06, -0.0005863377591595054, -0.3533673584461212, -0.01578432135283947, -0.06294664740562439, -0.0009585791267454624, -0.00010597144137136638, -0.10083585977554321, -0.05762626603245735, -0.20699140429496765, -0.5146470665931702, -1.2620718479156494, -0.05425199121236801, -0.048059381544589996, -9.059865078597795e-06, -5.960446742392378e-06, -0.01565640978515148, -0.01047034002840519, -0.0032126503065228462, -0.07784945517778397, -0.1602942794561386, -0.002226851647719741, -0.015394434332847595, -0.003202668856829405, -0.0007794441189616919, -0.008017381653189659, -0.00632487004622817, -0.022039486095309258, -0.010376551188528538, -0.0027835930231958628, -2.0861407392658293e-05, -0.0010589712765067816, -0.001963593764230609, -0.010343517176806927, -0.3622536361217499, -0.07932260632514954, -0.00022468426323030144, -0.00015138434537220746, -0.0002411313180346042, -0.021388936787843704, -0.017862524837255478, -0.07528412342071533, -0.11317753791809082, -0.07626301795244217, -0.012080127373337746, -1.0967194612021558e-05, -2.706014311115723e-05, -0.004324727226048708, -0.07102452963590622, -0.06430754065513611, -6.365573790390044e-05, -0.0017742858035489917, -0.0011619728757068515, -0.031043967232108116, -0.004876980558037758, -3.135155202471651e-05, -0.8261967301368713, -1.766955852508545, -1.3264787197113037, -0.46761205792427063, -0.2171245664358139, -0.004071756266057491, -0.01210450753569603, -0.006832806393504143, -2.1576648578047752e-05, -0.00011216964776394889, -0.001364134717732668, -0.0023419829085469246, -0.003983539994806051, -0.00013171759201213717, -2.5987286790041253e-05, -0.15452894568443298, -1.1258294582366943, -0.2025546431541443, -0.0014921018155291677, -0.021569902077317238, -0.012669314630329609, -0.16755039989948273, -0.020541900768876076, -1.4193874597549438], "finish_reason": "stop"}], "metrics": {"energy": 930.8577075901028, "energy_per_token": 4.100694747092964, "time": 20.918001, "time_per_token": 0.09214978414096917}}
{"outputs": [{"text": "try:\n        if not os.path.exists(directory):\n            raise FileNotFoundError\n        if not os.path.isdir(directory):\n            raise FileNotFoundError\n        status_codes = []\n        for filename in os.listdir(directory):\n            file_path = os.path.join(directory, filename)\n            with open(file_path, 'rb') as file:\n                files = {'file': file}\n                response = requests.post(url, headers=HEADERS, files=files, json=metadata)\n                status_codes.append(response.status_code)\n                time.sleep(1)\n        return status_codes\n    except FileNotFoundError:\n        print(\"Error: Directory not found.\")\n    except TypeError:\n        print(\"Error: Invalid URL.\")", "tokens": ["try", ":", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "\n", "        ", "status", "_", "codes", " =", " []", "\n", "        ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "files", " =", " {'", "file", "':", " file", "}", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "files", ",", " json", "=", "metadata", ")", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "return", " status", "_", "codes", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "\"", "Error", ":", " Directory", " not", " found", ".", "\"", ")", "\n", "    ", "except", " Type", "Error", ":", "\n", "        ", "print", "(", "\"", "Error", ":", " Invalid", " URL", ".", "\"", ")", "\n", "\n", "if"], "logprobs": [-2.2288663387298584, -0.0003830652858596295, -0.0036199060268700123, -0.041065458208322525, -0.9371567964553833, -0.27050989866256714, -0.09385023266077042, -4.649054244509898e-05, -0.008286972530186176, -6.0794889577664435e-05, -0.5525659322738647, -0.0010187203297391534, -0.009626043029129505, -0.016913574188947678, -0.01578443869948387, -0.0036050586495548487, -0.05214143171906471, -0.009276148863136768, -0.0006516240537166595, -4.7205765440594405e-05, -2.6614291667938232, -0.5874298214912415, -0.7012605667114258, -0.23615768551826477, -2.840038776397705, -0.00027640812913887203, -0.007850270718336105, -0.00017987063620239496, -0.025564473122358322, -0.00527229392901063, -0.0005745429079979658, -0.0007986216805875301, -0.0021287179552018642, -0.002356254495680332, -0.0006958208978176117, -0.024749109521508217, -0.34842708706855774, -0.021429777145385742, -6.6756979322235566e-06, -0.04651916027069092, -0.6112889051437378, -1.732560634613037, -0.11706964671611786, -0.18923601508140564, -0.012565608136355877, -0.022620156407356262, -0.0027954806573688984, -0.033626753836870193, -0.29412826895713806, -1.2819488048553467, -0.004372084978967905, -0.011494600214064121, -1.7881377516459906e-06, -0.0004732680681627244, -3.576278118089249e-07, -0.0004354958946350962, -0.0007666985620744526, -0.0008680627797730267, -0.001978465588763356, -0.005537764634937048, -0.7700750231742859, -0.6300910115242004, -0.029025662690401077, -0.0006668727728538215, -0.006152617745101452, -1.9073468138230965e-06, -6.603976362384856e-05, -6.198863957251888e-06, -0.0014924588613212109, -0.0001811817055568099, -0.001553520211018622, -0.00011300401820335537, -0.002272644080221653, -0.00019488819816615433, -0.001578157884068787, -0.01112979743629694, -0.7987710237503052, -0.0009310677996836603, -0.0002503081923350692, -0.0007049936102703214, -7.64102369430475e-05, -7.152555099310121e-07, -0.00093606993323192, -0.09607122838497162, -0.034279875457286835, -0.00028534632292576134, -0.00034874555421993136, -0.9349663257598877, -0.037568263709545135, -0.0018052248051390052, -0.0030925089959055185, -1.2522157430648804, -0.01954849623143673, -0.18289780616760254, -0.15022385120391846, -0.0040553719736635685, -0.212120920419693, -0.01143308263272047, -0.004376239143311977, -0.007136567961424589, -0.6159432530403137, -0.0016025570221245289, -0.002965340856462717, -0.00027295202016830444, -0.01717234030365944, -0.0003979606262873858, -0.07788706570863724, -0.02943909540772438, -0.5209071636199951, -0.006001309957355261, -0.010042970068752766, -1.8358061424805783e-05, -0.0009080815361812711, -0.3362566828727722, -0.0017228773795068264, -0.0004757702990900725, -0.011381696909666061, -2.0999739170074463, -0.018703525885939598, -0.010605285875499249, -0.026585236191749573, -0.002441998338326812, -0.05842842534184456, -0.15390333533287048, -0.0017742858035489917, -0.0041320668533444405, -0.0014840076910331845, -0.0004633783537428826, -0.005042691715061665, -0.004106304608285427, -0.004885521717369556, -0.0037203875835984945, -0.0005367745761759579, -7.390948667307384e-06, -0.00027426297310739756, -0.0016055324813351035, -0.4367670714855194, -0.0972728431224823, -0.000164018536452204, -0.00019870213873218745, -0.0007516896002925932, -0.02635478787124157, -0.008946689777076244, -0.18901696801185608, -0.18566924333572388, -0.01827673427760601, -0.007905622944235802, -2.8371408916427754e-05, -4.136476854910143e-05, -0.003378875320777297, -0.054372575134038925, -0.002188669750466943, -0.16474276781082153, -0.0003123987407889217, -3.158996332786046e-05, -0.17872674763202667, -0.003540202509611845, -0.002115632640197873, -0.6654574275016785, -0.4977348744869232, -0.4433082044124603, -2.187307834625244, -0.045878540724515915, -0.6055053472518921, -1.0054519176483154, -0.0016108882846310735, -0.504596471786499, -0.047339823096990585, -0.00411627721041441, -0.0012010273057967424, -0.1466815024614334, -0.00208125333301723, -0.027735061943531036, -1.1920922133867862e-06, -0.06537004560232162, -0.0005763299996033311, -0.0008504349971190095, -0.004023671615868807, -0.014938394539058208, -0.009424954652786255, -0.01706300675868988, -0.0007487116381525993, -0.1457534283399582, -0.2810596525669098, -0.1783084273338318, -0.01827661693096161, -0.08824534714221954, -0.015563811175525188, -0.38929814100265503, -1.7233126163482666], "finish_reason": "stop"}], "metrics": {"energy": 776.5895154228207, "energy_per_token": 4.087313239067477, "time": 17.510597, "time_per_token": 0.09216103684210526}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    if not url:\n        raise TypeError(\"URL is invalid\")\n\n    file_list = [os.path.join(directory, file) for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file))]\n    responses = []\n\n    for file in file_list:\n        file_size = os.path.getsize(file)\n        with open(file, 'rb') as f:\n            files = {'file': (os.path.basename(file), f, file_size, {'Content-Type': 'application/octet-stream'})}\n            response = requests.post(url, files=files, data=metadata, headers=HEADERS)\n            responses.append(response.status_code)\n        time.sleep(1)\n\n    return responses", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " url", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " is", " invalid", "\"", ")", "\n", "\n", "    ", "file", "_", "list", " =", " [", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", " for", " file", " in", " os", ".", "list", "dir", "(", "directory", ")", " if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "))", "]", "\n", "    ", "respons", "es", " =", " []", "\n", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "file", "_", "size", " =", " os", ".", "path", ".", "get", "size", "(", "file", ")", "\n", "        ", "with", " open", "(", "file", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "file", "':", " (", "os", ".", "path", ".", "bas", "ename", "(", "file", ")", ",", " f", ",", " file", "_", "size", ",", " {'", "Content", "-", "Type", "':", " '", "application", "/", "oct", "et", "-", "stream", "'", "})}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "=", "files", ",", " data", "=", "metadata", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "            ", "respons", "es", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " responses", "\n", "\n", "#"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -1.2996270656585693, -0.675657331943512, -0.7020065784454346, -0.0014017528155818582, -0.011448638513684273, -0.4105726480484009, -0.006416789256036282, -0.003859809832647443, -1.0814430713653564, -0.7321800589561462, -0.11692319065332413, -1.5296450853347778, -1.140568733215332, -0.004050266928970814, -0.0009872806258499622, -0.01743478886783123, -0.04962298646569252, -1.4305012882687151e-05, -0.137876957654953, -0.01910826563835144, -0.9769948124885559, -0.6083722710609436, -0.3814513385295868, -0.033028796315193176, -0.001073856488801539, -0.0005491655902005732, -0.5027483105659485, -0.0015124559868127108, -2.8408379554748535, -0.07696350663900375, -0.6514164209365845, -0.0049462574534118176, -1.2478621006011963, -1.164672613143921, -1.585470999998506e-05, -0.0009966888464987278, -6.556489552167477e-06, -0.009011668153107166, -0.0008132726070471108, -0.04289062321186066, -0.0011453027836978436, -1.0844640731811523, -0.20207712054252625, -0.17692285776138306, -0.0018221217906102538, -0.0013622299302369356, -0.009576217271387577, -3.3378044463461265e-05, -4.5536911784438416e-05, -1.7523612768854946e-05, -0.0011606630869209766, -0.07986116409301758, -1.620126724243164, -0.2857154607772827, -0.30748820304870605, -3.683499380713329e-05, -0.0002803409588523209, -1.5616295058862306e-05, -0.0020738777238875628, -0.0008867622236721218, -0.0010284854797646403, -0.06693994998931885, -3.504691630951129e-05, -8.380061626667157e-05, -1.3232143828645349e-05, -7.545663538621739e-05, -4.2437604861333966e-05, -0.0006993946735747159, -8.451581379631534e-05, -0.002186766592785716, -0.0001227780303452164, -0.013619476929306984, -0.007838679477572441, -0.6987935304641724, -2.9751205444335938, -0.00043394684325903654, -0.035035595297813416, -0.03237370401620865, -0.0034395840484648943, -0.9856342077255249, -0.0007134514744393528, -0.11410463601350784, -0.13621221482753754, -0.36652958393096924, -0.0019752532243728638, -2.7418097943154862e-06, -5.8412379075889476e-06, -0.0006182666402310133, -0.0010211020708084106, -0.021878201514482498, -2.1852521896362305, -0.03509728983044624, -2.989584445953369, -0.037651728838682175, -0.011205362156033516, -4.172316494077677e-06, -0.09930288046598434, -2.50339189733495e-06, -4.51792984677013e-05, -1.0490362910786644e-05, -0.00013255194062367082, -0.0018518695142120123, -0.004188931081444025, -0.0526236854493618, -0.0962783619761467, -1.1587846279144287, -0.002897590398788452, -0.0004663571889977902, -0.0015268584247678518, -0.0012475810945034027, -0.2317385971546173, -0.014808026142418385, -0.0014209183864295483, -0.00045170116936787963, -0.21283487975597382, -0.03462619706988335, -0.0016720612766221166, -0.0071553876623511314, -2.1999967098236084, -0.033848848193883896, -0.10855735838413239, -0.2017461061477661, -0.003978434018790722, -0.1899571269750595, -0.13811422884464264, -1.1920858014491387e-05, -3.576214658096433e-05, -4.529942543740617e-06, -0.0052945869974792, -1.1920928244535389e-07, -6.139089964563027e-05, -0.007439882960170507, -0.0010668307077139616, -0.0016811060486361384, -0.0058477274142205715, -0.03980417177081108, -1.3529826402664185, -0.005835164804011583, -0.0008800924406386912, -1.160717248916626, -0.5738018155097961, -0.7293696999549866, -0.0008274468709714711, -0.12891381978988647, -0.00045110538485459983, -0.07526598870754242, -0.25090229511260986, -0.0004646890447475016, -0.043209660798311234, -0.00017796363681554794, -0.0012162677012383938, -0.00024005869636312127, -0.04198399931192398, -0.0027331875171512365, -0.005082188174128532, -0.0575098991394043, -1.125258445739746, -0.00442027160897851, -0.00456802174448967, -0.0003352795320097357, -0.036301176995038986, -0.0012840130366384983, -0.02079564332962036, -0.02712046168744564, -0.9744247198104858, -0.0025433117989450693, -0.0004801789182238281, -0.002048181602731347, -0.2904356122016907, -0.03982948884367943, -0.566297173500061, -0.053633254021406174, -0.021075701341032982, -0.0013804440386593342, -0.003388023469597101, -1.3470558769768104e-05, -0.02956097386777401, -0.005760852713137865, -0.12412010878324509, -0.24658304452896118, -2.396077979938127e-05, -0.0016596842324361205, -0.0013546108966693282, -0.01581623964011669, -0.010978061705827713, -0.141584575176239, -0.016847582533955574, -0.0009332115878351033, -2.50339189733495e-06, -0.0015948207583278418, -0.0025533000007271767, -1.2314701080322266, -0.051835644990205765, -7.402622577501461e-05, -0.00017653337272349745, -0.0003632839070633054, -0.023287026211619377, -0.013833715580403805, -0.16110536456108093, -0.33871644735336304, -0.011415050365030766, -0.036640364676713943, -0.010395782068371773, -0.21001848578453064, -0.02008913643658161, -1.1784673929214478], "finish_reason": "stop"}], "metrics": {"energy": 906.2808867034908, "energy_per_token": 4.0458968156405835, "time": 20.640865, "time_per_token": 0.09214671875000001}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    if not url.startswith('http') or not url.endswith('/upload'):\n        raise TypeError(f\"Invalid url: {url}\")\n\n    status_codes = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            full_path = os.path.join(root, file)\n            with open(full_path, 'rb') as f:\n                file_data = f.read()\n            payload = {'fileName': file, 'userId': metadata.get('userId')}\n            response = requests.post(url, json=payload, data=file_data, headers=HEADERS)\n            status_codes.append(response.status_code)\n            print(f\"File: {file}, Status Code: {response.status_code}\")\n            time.sleep(1)  # Add a second sleep after each upload\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "http", "')", " or", " not", " url", ".", "end", "sw", "ith", "('/", "upload", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " url", ":", " {", "url", "}\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "full", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "with", " open", "(", "full", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "            ", "payload", " =", " {'", "fileName", "':", " file", ",", " '", "userId", "':", " metadata", ".", "get", "('", "userId", "')}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " json", "=", "payload", ",", " data", "=", "file", "_", "data", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "print", "(", "f", "\"", "File", ":", " {", "file", "}", ",", " Status", " Code", ":", " {", "response", ".", "status", "_", "code", "}\"", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "  ", "#", " Add", " a", " second", " sleep", " after", " each", " upload", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "#"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -0.46100175380706787, -0.263683557510376, -0.36993706226348877, -0.7684483528137207, -0.001611840445548296, -0.0034313867799937725, -0.22351273894309998, -0.0007223857101053, -0.005383280571550131, -1.1388177871704102, -0.013966327533125877, -0.0013104431563988328, -0.0009638193296268582, -0.41067779064178467, -0.001039322349242866, -0.7885556817054749, -0.07011418044567108, -1.602297306060791, -0.7609223127365112, -0.03713463246822357, -2.4199192921514623e-05, -4.768370445162873e-07, -0.4981343746185303, -0.1550678014755249, -0.9214828014373779, -2.272294282913208, -0.12403439730405807, -0.1717614084482193, -0.012312240898609161, -0.28340989351272583, -5.030505417380482e-05, -2.3841855067985307e-07, -1.4749348163604736, -0.8145988583564758, -0.16750432550907135, -0.03701849654316902, -0.004125893581658602, -0.0023501890245825052, -0.0096679562702775, -0.015482472255825996, -5.602820692729438e-06, -0.08260799199342728, -0.777228832244873, -0.018023287877440453, -0.3645568788051605, -1.3166542053222656, -0.6975923776626587, -0.014369698241353035, -0.0012969900853931904, -0.19455237686634064, -0.0012049565557390451, -0.0011375630274415016, -0.02987237274646759, -0.0009096298599615693, -0.9895918369293213, -0.07944285124540329, -0.0412876233458519, -0.004282827023416758, -0.010595731437206268, -0.01566227898001671, -0.3223128318786621, -0.3492240309715271, -1.3349698781967163, -0.0019133847672492266, -0.2451820820569992, -0.00023862851958256215, -0.00010954733443213627, -0.008885250426828861, -0.0006177900941111147, -0.001158400671556592, -1.549708758830093e-05, -1.8596476365928538e-05, -0.00044979469384998083, -0.001821407931856811, -0.013693089596927166, -0.005983653943985701, -0.0046892911195755005, -0.03887101262807846, -0.20629945397377014, -0.10128141194581985, -0.0018180761253461242, -0.00019500737835187465, -0.00039104922325350344, -0.011761841364204884, -3.603468656539917, -0.035283271223306656, -0.09088099002838135, -0.00047100416850298643, -0.0008457897347398102, -3.576278118089249e-07, -9.179073458653875e-06, -2.3841855067985307e-07, -0.0009496469865553081, -8.427741704508662e-05, -0.003118653781712055, -0.00015507926582358778, -0.0006525770877487957, -0.0002374367177253589, -0.0011068414896726608, -0.09792450815439224, -0.2945280969142914, -0.0003873551613651216, -0.0003184764937032014, -0.0007758706342428923, -7.068861305015162e-05, 0.0, -0.0007948100101202726, -0.08328573405742645, -0.014656729996204376, -0.0002683041093405336, -0.0009384519071318209, -0.17611101269721985, -0.03189082071185112, -0.002368147252127528, -0.005759311839938164, -2.897864818572998, -0.023790961131453514, -0.3152692914009094, -0.000671042304020375, -0.35395166277885437, -3.2066785934148356e-05, -1.6569954823353328e-05, -0.00031323294388130307, -0.003889140672981739, -1.521079421043396, -2.431406021118164, -0.020040765404701233, -1.7794463634490967, -2.9248268604278564, -0.0024852838832885027, -0.18316523730754852, -0.06669832020998001, -0.09650353342294693, -2.9391541481018066, -0.0016348104691132903, -0.08469580858945847, -2.1915159225463867, -0.008516067638993263, -0.06056291237473488, -0.01182651985436678, -1.1832594871520996, -0.012725342065095901, -0.07039342820644379, -0.4358588457107544, -0.0021636902820318937, -0.0023663633037358522, -0.00011598391574807465, -0.10828857123851776, -0.0005891970940865576, -0.038786958903074265, -0.029143771156668663, -2.9881796836853027, -0.012609163299202919, -0.01118661928921938, -0.002935983007773757, -0.7163461446762085, -0.014605979435145855, -0.002139780670404434, -4.7801782784517854e-05, -1.1920922133867862e-06, -0.24222858250141144, -0.038169361650943756, -0.0012504386249929667, -0.00622393935918808, -9.417489309271332e-06, -0.01393117755651474, -0.0024299875367432833, -0.01243269257247448, -0.20484231412410736, -0.0011734035797417164, -0.006759989075362682, -0.0004295380203984678, -0.0004970983718521893, -0.006179274991154671, -0.0032851321157068014, -0.003330281935632229, -0.00215798057615757, -0.00020382710499688983, -7.152555099310121e-07, -0.0003449321957305074, -0.0031436095014214516, -0.13446341454982758, -2.905094623565674, -0.03897695615887642, -0.30960142612457275, -0.09857553243637085, -2.6043872833251953, -1.802574872970581, -0.027525752782821655, -0.08215305209159851, -0.13751006126403809, -0.4305405914783478, -0.24813339114189148, -0.9306521415710449, -0.0025688763707876205, -0.001110890181735158, -0.013856406323611736, -0.0021146810613572598, -0.0005153281381353736, -8.237022848334163e-05, -3.576278118089249e-07, -0.07155758887529373, -0.0033205393701791763, -0.01277889497578144, -0.14585894346237183, -0.07749705016613007, -0.00017987063620239496, -7.366862701019272e-05, -0.00016378014697693288, -0.03266207501292229, -0.012147730216383934, -1.8654842376708984, -0.0002811751910485327, -2.3698110580444336, -0.13926225900650024, -2.965219736099243, -2.113037586212158, -0.5394282937049866, -0.04327016696333885, -0.07133660465478897, -0.19221623241901398, -0.9417437314987183, -0.023221220821142197, -0.00853143259882927, -4.2199197196168825e-05, -2.5510462364763953e-05, -0.09957485646009445, -0.016105670481920242, -1.0986508131027222], "finish_reason": "stop"}], "metrics": {"energy": 1025.8190531139376, "energy_per_token": 4.169996150869665, "time": 22.972424, "time_per_token": 0.09338383739837398}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    if not isinstance(url, str) or not url.startswith('http'):\n        raise TypeError(\"The specified URL is invalid.\")\n\n    response_status_codes = []\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        with open(file_path, 'rb') as f:\n            files = {'files': f}\n            response = requests.post(url, headers=HEADERS, data=json.dumps(metadata), files=files)\n            response_status_codes.append(response.status_code)\n\n    return response_status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", ")", " or", " not", " url", ".", "start", "sw", "ith", "('", "http", "')", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " specified", " URL", " is", " invalid", ".", "\"", ")", "\n", "\n", "    ", "response", "_", "status", "_", "codes", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "files", "':", " f", "}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", " files", "=", "files", ")", "\n", "            ", "response", "_", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "    ", "return", " response", "_", "status", "_", "codes", "\n", "\n", "if"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -1.3024324178695679, -1.4262089729309082, -1.3503131866455078, -0.011607020162045956, -0.04591383785009384, -0.0005061537376604974, -0.004418847616761923, -0.5809639692306519, -0.010945990681648254, -0.0020880342926830053, -0.0015444743912667036, -0.45750129222869873, -0.0009492897079326212, -1.0114973783493042, -0.12479092180728912, -0.6519412398338318, -0.00014876213390380144, -0.05160641297698021, -0.0008537700050510466, -0.006858498323708773, -0.7855097055435181, -0.03392455726861954, -0.04541660100221634, -0.06866200268268585, -0.05994582548737526, -0.0318501740694046, -2.622600959512056e-06, -1.1920928244535389e-07, -0.3646416664123535, -0.18220843374729156, -0.04727831110358238, -0.025501374155282974, -0.0032567339949309826, -0.0018346159486100078, -0.00399220734834671, -0.008290045894682407, -5.364403477869928e-06, -0.029823198914527893, -0.03904058411717415, -1.051494836807251, -2.3134047985076904, -0.23336564004421234, -0.02883666194975376, -0.13924524188041687, -0.027738887816667557, -0.03959599882364273, -0.0006475735572166741, -0.000339569611242041, -0.01763884164392948, -0.0013824678026139736, -3.9349327087402344, -0.14955705404281616, -0.7226817607879639, -0.5771689414978027, -0.37198370695114136, -0.005789179354906082, -0.011426953598856926, -0.018944166600704193, -0.8088492751121521, -0.3726685047149658, -0.7970285415649414, -0.6229798793792725, -0.01481155026704073, -2.50339189733495e-06, -0.005175762809813023, -8.344646857949556e-07, -0.0007200032705441117, -0.0015369757311418653, -0.0004954302567057312, -0.0016832482069730759, -0.026310432702302933, -0.9802474975585938, -0.07762346416711807, -0.0419439934194088, -0.0007259594276547432, -0.006608299445360899, -1.1920922133867862e-06, -3.9457496313843876e-05, -3.6954811548639555e-06, -0.0031248333398252726, -0.0002557904226705432, -0.0012772268382832408, -0.0001081169830285944, -0.001618624315597117, -0.00032908268622122705, -0.00115697190631181, -0.20970633625984192, -0.8239460587501526, -0.0012485336046665907, -0.00017951308109331876, -0.0005870526074431837, -0.0009120118920691311, -8.344646857949556e-07, -0.0005739472107961774, -0.08447979390621185, -0.02111491933465004, -0.00034648136352188885, -0.0004406196530908346, -0.33299940824508667, -0.027536075562238693, -0.004178603179752827, -0.008736010640859604, -1.3617931604385376, -0.02685520611703396, -0.1830691546201706, -2.7131614685058594, -0.023358067497611046, -0.18453405797481537, -0.006428515538573265, -0.0098367715254426, -0.057489752769470215, -0.7031934261322021, -0.009018284268677235, -0.004128267522901297, -0.0001919085334520787, -0.04110252484679222, -0.0003195490571670234, -0.06230470538139343, -0.016067897900938988, -0.46306872367858887, -0.007532764226198196, -0.005717708729207516, -9.775113539944869e-06, -0.0005763299996033311, -1.5326019525527954, -0.004444720223546028, -0.2734306752681732, -6.16293036728166e-05, -0.0006224363460205495, -1.2040065485052764e-05, -0.016299674287438393, -0.1334116905927658, -0.010396371595561504, -0.0031175841577351093, -0.013046029023826122, -0.001709667849354446, -0.00017641419253777713, -0.01269591599702835, -0.002207106677815318, -0.04122951254248619, -0.14104534685611725, -0.011109520681202412, -0.004787885583937168, -7.164221460698172e-05, -0.0006065912893973291, -0.0011441120877861977, -0.0004189328756183386, -0.0029886364936828613, -0.003928089048713446, -0.008979415521025658, -0.002301545813679695, -0.0013992529129609466, -3.6954811548639555e-06, -0.0004148814477957785, -0.0022749039344489574, -2.038088083267212, -2.63257098197937, -0.73314368724823, -0.01737304963171482, -0.0012324602575972676, -5.638440416078083e-05, -6.627816765103489e-05, -0.00018249277491122484, -0.06198050081729889, -0.016725551337003708, -1.730677604675293], "finish_reason": "stop"}], "metrics": {"energy": 751.6698801517483, "energy_per_token": 4.107485683889335, "time": 16.905348, "time_per_token": 0.09237895081967214}}
{"outputs": [{"text": "try:\n        # Check if the directory exists\n        if not os.path.isdir(directory):\n            raise FileNotFoundError(f\"Directory '{directory}' not found\")\n\n        # List all files in the directory\n        files = os.listdir(directory)\n\n        # Create an empty list to hold the status codes\n        status_codes = []\n\n        # Iterate over the files\n        for file_name in files:\n            # Get the file path\n            file_path = os.path.join(directory, file_name)\n\n            # Read the file data\n            with open(file_path, 'rb') as f:\n                file_data = f.read()\n\n            # Create a file dictionary\n            file = {\n                'file': (file_name, file_data),\n                'metadata': json.dumps(metadata).encode('utf-8')\n            }\n\n            # Make a POST request to the server with the file and metadata\n            response = requests.post(url, headers=HEADERS, files=file)\n\n            # Add the status code to the list\n            ", "tokens": ["try", ":", "\n", "        ", "#", " Check", " if", " the", " directory", " exists", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", "\"", ")", "\n", "\n", "        ", "#", " List", " all", " files", " in", " the", " directory", "\n", "        ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "        ", "#", " Create", " an", " empty", " list", " to", " hold", " the", " status", " codes", "\n", "        ", "status", "_", "codes", " =", " []", "\n", "\n", "        ", "#", " Iter", "ate", " over", " the", " files", "\n", "        ", "for", " file", "_", "name", " in", " files", ":", "\n", "            ", "#", " Get", " the", " file", " path", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "\n", "            ", "#", " Read", " the", " file", " data", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "file", "_", "data", " =", " f", ".", "read", "()", "\n", "\n", "            ", "#", " Create", " a", " file", " dictionary", "\n", "            ", "file", " =", " {", "\n", "                ", "'", "file", "':", " (", "file", "_", "name", ",", " file", "_", "data", ")", ",", "\n", "                ", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")", ".", "encode", "('", "utf", "-", "8", "')", "\n", "            ", "}", "\n", "\n", "            ", "#", " Make", " a", " POST", " request", " to", " the", " server", " with", " the", " file", " and", " metadata", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "file", ")", "\n", "\n", "            ", "#", " Add", " the", " status", " code", " to", " the", " list", "\n", "            "], "logprobs": [-2.2288663387298584, -0.0003830652858596295, -0.0036199060268700123, -0.041065458208322525, -1.6576176881790161, -0.5201368927955627, -0.25750768184661865, -0.25185295939445496, -0.1513179987668991, -0.051216430962085724, -0.2339177131652832, -0.002292744582518935, -0.030197324231266975, -0.13274088501930237, -0.0030397421214729548, -9.65590606938349e-06, -0.0010702840518206358, -5.066266385256313e-05, -1.3638949394226074, -0.00022420754248742014, -0.0004520586517173797, -0.0026051413733512163, -0.003216333920136094, -0.0021228890400379896, -0.0017992750508710742, -0.07990067452192307, -0.007518802769482136, -0.0004580163804348558, -9.775113539944869e-06, -0.1635831594467163, -0.3153887093067169, -0.11110115051269531, -0.3709883391857147, -0.6856854557991028, -0.00031573555315844715, -0.0008313775178976357, -0.0018341400427743793, -0.7234755754470825, -0.0002965487365145236, -0.8571433424949646, -0.00036125810584053397, -0.0005998004344291985, -0.1860397607088089, -0.009420939721167088, -0.06644369661808014, -2.595424175262451, -0.42781516909599304, -0.175056591629982, -0.05670531466603279, -0.011296951211988926, -0.07087051123380661, -0.08837292343378067, -0.0010246747406199574, -0.23565883934497833, -0.018095407634973526, -0.0682193785905838, -2.7418097943154862e-06, -0.00022480344341602176, -2.145764938177308e-06, -9.047575440490618e-05, -0.00027414379292167723, -0.00010775939153973013, -0.000454799213912338, -0.12737859785556793, -0.0016842002514749765, -0.056412529200315475, -1.6300727128982544, -2.9576761722564697, -0.0432719923555851, -0.025037365034222603, -0.06863617897033691, -2.286839485168457, -0.11668146401643753, -0.4618988633155823, -0.023280387744307518, -0.28275278210639954, -0.0008819981012493372, -0.03379802405834198, -0.019454853609204292, -0.019876234233379364, -0.002507758093997836, -0.006392744369804859, -0.00042524831951595843, -0.01395645271986723, -0.0006495987763628364, -0.08219730108976364, -1.3883144855499268, -0.0019349202048033476, -0.4674440026283264, -0.8263787627220154, -0.31018194556236267, -0.8837264180183411, -0.0003507714136503637, -0.004211010877043009, -0.24704313278198242, -1.7028322219848633, -0.024557089433073997, -0.00011455356434453279, -0.001211147871799767, -0.00011336160969221964, -9.953480184776708e-05, -0.05563987419009209, -0.27340221405029297, -2.363196849822998, -0.021950509399175644, -0.7591384053230286, -0.18016187846660614, -0.043196529150009155, -0.0002802217786666006, -0.017754320055246353, -0.004321403335779905, -0.00022933237778488547, -0.0001292145170737058, -0.004809596575796604, -5.722029527532868e-06, -1.6689160474925302e-05, -2.3841830625315197e-06, -0.0012898467248305678, -0.00014351768186315894, -0.0013404440833255649, -5.1020273531321436e-05, -0.00046266341814771295, -5.364403477869928e-06, -4.768370445162873e-07, -0.0001137191939051263, -0.0001481661747675389, -0.05541974678635597, -0.0009279712685383856, -0.006737136282026768, -1.692988395690918, -0.030566800385713577, -0.09175459295511246, -2.7784430980682373, -0.17776508629322052, -0.00039402826223522425, -0.03157681226730347, -3.635817120084539e-05, -0.0001212284987559542, -0.0003997480380348861, -4.0531076592742465e-06, -1.0728830375228426e-06, -0.00014029949670657516, -0.06505376100540161, -0.008465122431516647, -8.809178689261898e-05, -0.0001113352773245424, -0.2708858549594879, -0.014447367750108242, -0.0006523388437926769, -0.0011328000109642744, -0.572921633720398, -0.013740947470068932, -0.005227468442171812, -0.00027176024741493165, -0.00910180527716875, -0.00012706902634818107, -1.5020257706055418e-05, -4.434487345861271e-05, -0.0010439666220918298, -0.011815681122243404, -0.03851422667503357, -0.0054723224602639675, -0.891713559627533, -0.9010602831840515, -3.0949959754943848, -2.8939085006713867, -0.4874145984649658, -0.0006796196103096008, -0.21095900237560272, -0.4615059494972229, -2.2973146438598633, -1.5418150424957275, -0.001482341205701232, -0.3099985420703888, -0.27811571955680847, -0.06145285442471504, -0.7384250164031982, -0.019673457369208336, -6.937739817658439e-05, -0.03596256673336029, -0.0004702892620116472, -0.009682832285761833, -5.125986263010418e-06, -9.035655966727063e-05, -0.2219422459602356, -1.509459376335144, -0.008106780238449574, -0.8390544056892395, -0.06212413311004639, -0.2671775817871094, -0.0031036799773573875, -0.20512405037879944, -3.564294092939235e-05, -0.00015233787416946143, -1.0728830375228426e-06, -0.017304744571447372, -0.0016282646683976054, -0.016789909452199936, -1.0367369651794434, -0.0009626284008845687, -0.3801715672016144, -0.009052898734807968, -0.04060632735490799, -7.390948667307384e-06, -0.0023928838782012463, -0.1708865761756897, -0.0034578789491206408, -2.4199192921514623e-05, -0.00012087091454304755, -0.01011649239808321, -0.0015626850072294474, -0.022079017013311386, -1.0932601690292358, -1.0354727506637573, -0.14413458108901978, -0.0005893162451684475, -0.09856592118740082, -0.08566433936357498, -0.05518456548452377, -1.6973505020141602, -0.040258292108774185, -0.03289903700351715, -0.296553373336792, -0.00925713311880827, -0.03902740031480789, -0.0020930306054651737, -0.13977964222431183, -0.0005486889858730137, -0.002297026105225086, -9.798523387871683e-05, -0.0020776845049113035, -0.00032658010604791343, -0.017537875100970268, -0.013362730853259563, -1.2679264545440674, -0.004585465416312218, -0.008954014629125595, -1.5616295058862306e-05, -0.0008063640561886132, -0.009143386036157608, -0.0026889618020504713, -9.798523387871683e-05, -0.05325660854578018, -0.0005596501869149506, -0.07501331716775894, -0.0011437548091635108, -0.004453383851796389, -1.0945219993591309, -0.0039343819953501225, -0.09925711899995804, -0.0005240259342826903, -0.012251008301973343, -0.0007855190197005868, -0.020042400807142258, -0.062289584428071976, -0.00044705410255119205], "finish_reason": "length"}], "metrics": {"energy": 1160.0770771789544, "energy_per_token": 4.5315510827302905, "time": 26.317656, "time_per_token": 0.10280334375}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\n            f\"Directory '{directory}' does not exist\")\n\n    def get_files(directory):\n        \"\"\"\n        Get all files in a directory and its subdirectories.\n\n        Parameters:\n        directory (str): The directory to search for files.\n\n        Returns:\n        list: A list of file paths.\n\n        Requirements:\n        - os\n\n        Raises:\n        - The function will raise FileNotFoundError if the directory does not exist.\n\n        Example:\n        >>> get_files('./uploads')\n        ['/path/to/file1.txt', '/path/to/file2.txt', '/path/to/subdir/file3.txt']\n        \"\"\"\n        files = []\n        for root, dirs, file_names in os.walk(directory):\n            for file_name in file_names:\n                files.append(os.path.join(root, file_name))\n        return files\n\n    def speed_limit():\n        \"\"\"\n", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\n", "            ", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "def", " get", "_", "files", "(", "directory", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Get", " all", " files", " in", " a", " directory", " and", " its", " sub", "direct", "ories", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "directory", " (", "str", "):", " The", " directory", " to", " search", " for", " files", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "list", ":", " A", " list", " of", " file", " paths", ".", "\n", "\n", "        ", "Requ", "irements", ":", "\n", "        ", "-", " os", "\n", "\n", "        ", "Ra", "ises", ":", "\n", "        ", "-", " The", " function", " will", " raise", " File", "NotFound", "Error", " if", " the", " directory", " does", " not", " exist", ".", "\n", "\n", "        ", "Example", ":", "\n", "        ", ">>>", " get", "_", "files", "('", ".", "/", "uploads", "')", "\n", "        ", "['", "/", "path", "/", "to", "/", "file", "1", ".", "txt", "'", ",", " '/", "path", "/", "to", "/", "file", "2", ".", "txt", "'", ",", " '/", "path", "/", "to", "/", "sub", "dir", "/", "file", "3", ".", "txt", "']", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "files", " =", " []", "\n", "        ", "for", " root", ",", " d", "irs", ",", " file", "_", "names", " in", " os", ".", "walk", "(", "directory", "):", "\n", "            ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "                ", "files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " file", "_", "name", "))", "\n", "        ", "return", " files", "\n", "\n", "    ", "def", " speed", "_", "limit", "():", "\n", "        ", "\"", "\"", "\"", "\n"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -2.846769094467163, -0.0029820995405316353, -0.3532355725765228, -0.2662854790687561, -0.8357541561126709, -0.8868549466133118, -0.0010324153117835522, -0.003186864545568824, -0.0035936555359512568, -0.20323315262794495, -0.0012419852428138256, -0.007031931076198816, -1.1099530458450317, -0.10545593500137329, -0.008161053992807865, -0.3321041464805603, -0.0011525661684572697, -4.01374626159668, -2.640665054321289, -0.02887742966413498, -1.4955610036849976, -0.6527988314628601, -0.6303398609161377, -0.10958480089902878, -0.011850669980049133, -0.011327361688017845, -0.8500782251358032, -0.005404741503298283, -5.173549288883805e-05, -0.11064650863409042, -0.013607246801257133, -2.8622653484344482, -0.9364010095596313, -0.305027037858963, -0.6406711339950562, -0.5426521301269531, -0.3195340931415558, -0.38235369324684143, -0.15232405066490173, -0.005646351259201765, -0.03470541909337044, -6.41325386823155e-05, -0.29271215200424194, -0.07951562851667404, -0.17826862633228302, -0.0028933114372193813, -0.2215777337551117, -0.017151834443211555, -0.0024414039216935635, -0.03545425832271576, -0.0639490932226181, -0.004046705085784197, -0.001327824778854847, -0.0012716311030089855, -0.05129740759730339, -0.05982208997011185, -1.2315982580184937, -0.28152549266815186, -0.12410378456115723, -0.0008486483711749315, -0.06002025678753853, -0.0016487350221723318, -0.003653163556009531, -0.0001436368766007945, -0.15587741136550903, -0.0006450717919506133, -0.0004944770480506122, -0.0014386551920324564, -0.06968265026807785, -0.013072032481431961, -0.00963832251727581, -0.004364370368421078, -0.00695439288392663, -0.37655577063560486, -0.0923323705792427, -0.3575596809387207, -0.0021598839666694403, -0.909685492515564, -0.0009098681039176881, -0.5373879671096802, -0.024756552651524544, -0.000547378440387547, -0.006478261202573776, -0.002701088320463896, -0.017526278272271156, -0.023391956463456154, -0.022999897599220276, -0.4104933440685272, -0.00027450130437500775, -0.4410271644592285, -0.0002992897352669388, -0.00020787939138244838, -0.0028024944476783276, -0.0023648173082619905, -0.08131926506757736, -0.4219731390476227, -0.005981165450066328, -0.06921166926622391, -0.08847756683826447, -0.33302104473114014, -0.0026309420354664326, -4.017272294731811e-05, -0.0012023370945826173, -0.0036564890760928392, -0.006963389925658703, -0.0037019785959273577, -0.000961913785431534, -0.000654602306894958, -0.006165768951177597, -0.0017269235104322433, -0.6184719204902649, -0.00020525732543319464, -0.032503072172403336, -0.0004047528200317174, -0.0001734344696160406, -0.0012554391287267208, -0.001646116841584444, -0.021707674488425255, -0.0003474347176961601, -0.00033456450910307467, -0.08560415357351303, -0.046642500907182693, -0.036812618374824524, -0.15429379045963287, -0.009217801503837109, -0.002148107625544071, -0.010557396337389946, -0.8743165731430054, -2.8628854751586914, -0.7800588011741638, -0.0035350944381207228, -0.015201547183096409, -0.00013636612857226282, -0.1270645409822464, -0.0490768626332283, -0.4198758602142334, -0.04780564829707146, -0.0021792729385197163, -7.533743337262422e-05, -0.0020402108784765005, -0.00021801002731081098, -7.021180499577895e-05, -1.8954096958623268e-05, -4.172238186583854e-05, -0.03607456758618355, -0.0009965697536244988, -8.129743218887597e-05, -0.13360695540905, -0.9084911346435547, -0.001677416730672121, -0.2614181637763977, -0.004201514180749655, -0.00014959646796341985, -0.0013977054040879011, -0.00035529976594261825, -0.7444614768028259, -0.13776946067810059, -0.02809026464819908, -0.01147998683154583, -0.019732482731342316, -0.0002195594133809209, -0.02633783593773842, -0.0206611305475235, -0.0005536930402740836, -0.016292754560709, -0.002574702724814415, -1.9073468138230965e-06, -2.0503786799963564e-05, -0.00023529145983047783, -0.04532546550035477, -0.35862380266189575, -0.007722404785454273, -0.014868631958961487, -0.001975372200831771, -0.052586812525987625, -0.03907933458685875, -0.6998343467712402, -0.0013161577517166734, -0.48534339666366577, -0.0008000510279089212, -4.637133679352701e-05, -1.6729744672775269, -0.726324737071991, -0.20910166203975677, -0.0006224363460205495, -0.0018272384768351912, -4.124556289752945e-05, -0.0002840353990904987, -0.00016330339713022113, -0.002249807585030794, -0.023550668731331825, -0.00399458222091198, -0.002449014689773321, -0.11151207983493805, -0.14180339872837067, -0.029434118419885635, -0.0009364272118546069, -6.90197994117625e-05, -0.0010062160436064005, -5.960462772236497e-07, -7.152555099310121e-07, -2.47952248173533e-05, -0.0002562671434134245, -0.00027938754647038877, -0.24328652024269104, -0.0012954423436895013, -0.0014772227732464671, -0.004972116556018591, -0.037093281745910645, -5.960446742392378e-06, -0.00016675988445058465, -1.1920922133867862e-06, -0.006444031372666359, -0.0001627074379939586, -0.0031432530377060175, -0.000961913785431534, -0.0009944260818883777, -1.2278481335670222e-05, -7.629365427419543e-06, -0.005769030656665564, -0.0006749735912308097, -0.04672316461801529, -0.004136340692639351, -0.009089992381632328, -0.0005035324720665812, -0.015072152018547058, -0.0012474621180444956, -0.46945810317993164, -2.707911968231201, -0.018239043653011322, -0.08633563667535782, -0.3093828856945038, -0.0016640876419842243, -0.001988935051485896, -0.1530701220035553, -0.0001209901092806831, -2.861018856492592e-06, -0.011126261204481125], "finish_reason": "length"}], "metrics": {"energy": 1081.2710997734075, "energy_per_token": 4.223715233489873, "time": 25.051764, "time_per_token": 0.097858453125}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    # Check if the metadata is a dictionary\n    if not isinstance(metadata, dict):\n        raise TypeError(f\"Metadata should be a dictionary, but received {type(metadata)}\")\n\n    # Define the headers and the metadata\n    headers = HEADERS\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n\n    # Send the requests to the server\n    status_codes = []\n\n    # Check if the url is valid\n    try:\n        requests.head(url)\n    except requests.exceptions.MissingSchema:\n        raise TypeError(f\"Invalid URL: {url}\")\n\n    for file in files:\n        with open(os.path.join(directory, file), 'rb') as f:\n            # Speed limit function pauses for one second after each upload.\n            time.sleep(1)\n            response = requests.post", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "}\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " metadata", " is", " a", " dictionary", "\n", "    ", "if", " not", " isinstance", "(", "metadata", ",", " dict", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Metadata", " should", " be", " a", " dictionary", ",", " but", " received", " {", "type", "(", "metadata", ")}", "\"", ")", "\n", "\n", "    ", "#", " Define", " the", " headers", " and", " the", " metadata", "\n", "    ", "headers", " =", " HEAD", "ERS", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "directory", ")", " if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " f", "))", "]", "\n", "\n", "    ", "#", " Send", " the", " requests", " to", " the", " server", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Check", " if", " the", " url", " is", " valid", "\n", "    ", "try", ":", "\n", "        ", "requests", ".", "head", "(", "url", ")", "\n", "    ", "except", " requests", ".", "except", "ions", ".", "Missing", "Schema", ":", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " URL", ":", " {", "url", "}\"", ")", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "#", " Speed", " limit", " function", " pa", "uses", " for", " one", " second", " after", " each", " upload", ".", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "            ", "response", " =", " requests", ".", "post"], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -0.21879440546035767, -0.1481090635061264, -0.09559723734855652, -0.2728474736213684, -0.004981961566954851, -0.02613125368952751, -0.03662266954779625, -0.003636416047811508, -2.50339189733495e-06, -0.0008780676289461553, -1.8000440832111053e-05, -1.4346988201141357, -0.00016485285595990717, -0.0006030171643942595, -0.0022963127121329308, -0.001860198681242764, -0.0019785843323916197, -0.0026698203291743994, -0.07738716155290604, -0.005392884835600853, -0.00032062159152701497, -1.3232143828645349e-05, -0.15398776531219482, -0.38454440236091614, -0.13694503903388977, -0.29489246010780334, -1.7862703800201416, -0.006168494001030922, -0.02434653230011463, -0.010999874211847782, -0.00064876489341259, -0.005249288398772478, -0.00037043384509161115, -0.0005976559477858245, -0.07956451177597046, -0.001490554423071444, -0.06716056913137436, -0.5377669334411621, -0.07835088670253754, -0.06685934215784073, -2.885700225830078, -0.07638506591320038, -0.4582202434539795, -0.11392136663198471, -0.0700511634349823, -0.0006168370018713176, -0.006453033071011305, -0.011807198636233807, -0.002049133414402604, -1.2636104656849056e-05, -0.0003968881501350552, -9.679325739853084e-05, -0.0008571050129830837, -0.0044088782742619514, -0.0002108589978888631, -0.0004916174802929163, -0.007745471317321062, -0.040642496198415756, -1.0371154530730564e-05, -0.025200001895427704, -1.2734631299972534, -0.004584872163832188, -0.7467284798622131, -1.9104275703430176, -0.0017926113214343786, -0.0812024399638176, -0.01884567178785801, -0.9143983125686646, -1.1585068702697754, -1.5956366062164307, -0.3041299283504486, -0.04089588299393654, -0.00021443451987579465, -0.0006098079611547291, -0.10418818145990372, -0.2626851201057434, -0.0001984637783607468, -0.00018559163436293602, -0.011021922342479229, -0.0009037939016707242, -0.08973825722932816, -2.9501492977142334, -0.5341340899467468, -2.8273510932922363, -2.0406129360198975, -1.5895713567733765, -2.0951390266418457, -1.480986475944519, -0.03498471528291702, -0.6350494623184204, -0.004322472028434277, -0.4171765148639679, -3.611976353568025e-05, -0.058147162199020386, -0.3976576626300812, -3.2943825721740723, -0.1856006234884262, -1.6503162384033203, -1.1727542877197266, -0.06888958066701889, -0.0003471963864285499, -3.862306402879767e-05, -0.004057983867824078, -5.8412379075889476e-06, -0.00437540840357542, -0.00011574551899684593, -0.0004015354788862169, -0.001035987981595099, -0.01922614686191082, -0.008441008627414703, -0.030319804325699806, -9.417489309271332e-06, -5.2927523938706145e-05, -6.079655122448457e-06, -0.0007634824141860008, -0.0004640932602342218, -0.0004301338049117476, -0.015697836875915527, -7.152555099310121e-07, -2.729855441430118e-05, -5.483612312673358e-06, -7.86750388215296e-05, -2.992108420585282e-05, -9.786603914108127e-05, -0.00025233422638848424, -0.0016365956980735064, -6.210611172718927e-05, -0.012800786644220352, -0.011031119152903557, -0.5370258688926697, -0.0005878866068087518, -0.09574023634195328, -2.5572566986083984, -0.6055822372436523, -1.1910607814788818, -1.2145147323608398, -0.175374835729599, -0.09736001491546631, -0.5499483942985535, -0.0041219755075871944, -0.7466506958007812, -0.06629633158445358, -0.03186991810798645, -0.003346678102388978, -0.016043145209550858, -0.01180790551006794, -2.646890640258789, -0.0003641180810518563, -1.9767184257507324, -1.8195024728775024, -0.16642451286315918, -0.07415617257356644, -0.7905078530311584, -0.19394002854824066, -0.37900492548942566, -0.10786668211221695, -0.002451511798426509, -2.2073311805725098, -0.000286657246761024, -0.0006515049026347697, -0.0036485311575233936, -1.1452351808547974, -0.0017936823423951864, -1.7433221340179443, -0.0007104733376763761, -0.005108043551445007, -0.1941567212343216, -0.03923901543021202, -0.026408543810248375, -0.005521522834897041, -0.17086346447467804, -5.9960475482512265e-05, -0.13677464425563812, -1.4305104514278355e-06, -0.0003349220205564052, -1.4871513843536377, -0.0002602000313345343, -0.24685856699943542, -0.0050466060638427734, -0.0016445695655420423, -0.07124358415603638, -0.08507328480482101, -1.1086402082582936e-05, -0.012068349868059158, -0.13562500476837158, -0.011101503856480122, -0.3706510066986084, -0.6148540377616882, -0.16616569459438324, -0.011371796019375324, -0.0032208492048084736, -0.04400475323200226, -0.0007002285565249622, -0.007387344725430012, -0.05916668102145195, -0.0005175919504836202, -0.29384368658065796, -0.4930283725261688, -0.20054593682289124, -0.002312012016773224, -0.0010855264263227582, -0.0004657614335883409, -0.031012071296572685, -1.4682868719100952, -0.0005585778853856027, -0.0004923323867842555, -0.03911945968866348, -2.0265558760002023e-06, -1.0251946150674485e-05, -4.768370445162873e-07, -0.00018261195509694517, -5.0424259825376794e-05, -0.00021669900161214173, -7.974783511599526e-05, -0.001958834705874324, -0.004354993812739849, -0.0001006075763143599, -0.12232765555381775, -0.02331148274242878, -0.0006606780225411057, -0.0003668589051812887, -0.1594785749912262, -0.03179832547903061, -0.0012169820256531239, -0.013790448196232319, -2.968942880630493, -4.389174461364746, -0.05687358230352402, -0.6007544994354248, -1.6088414192199707, -0.06579127162694931, -0.00891478918492794, -0.030048223212361336, -0.001484959851950407, -0.08405289053916931, -0.004107254557311535, -0.022509900853037834, -1.7978712320327759, -0.02168247662484646, -0.004797258414328098, -0.33047354221343994, -0.0012969900853931904, -0.00011979816190432757, -0.0004287039046175778, -0.038382649421691895, -0.01710062474012375, -0.0047604795545339584, -0.20329122245311737, -0.5442889928817749, -0.0013467537937685847, -0.0006287504802457988, -7.748303323751315e-05, -0.060371361672878265], "finish_reason": "length"}], "metrics": {"energy": 1103.1624799823755, "energy_per_token": 4.3092284374311545, "time": 24.881248, "time_per_token": 0.097192375}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a valid string\")\n\n    if not url.startswith('http://') and not url.startswith('https://'):\n        raise ValueError(\"URL must start with http:// or https://\")\n\n    metadata = {k: v for k, v in metadata.items() if v is not None and v != 'null'}\n    status_codes = []\n    for path in os.listdir(directory):\n        path = os.path.join(directory, path)\n        if os.path.isfile(path):\n            with open(path, 'rb') as f:\n                file_name = os.path.basename(path)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                response = requests.post(url, files={'file': (file_name, data)}, data=metadata, headers=HEADERS)", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "}\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " must", " be", " a", " valid", " string", "\"", ")", "\n", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "http", "://", "')", " and", " not", " url", ".", "start", "sw", "ith", "('", "https", "://", "')", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "URL", " must", " start", " with", " http", "://", " or", " https", "://", "\"", ")", "\n", "\n", "    ", "metadata", " =", " {", "k", ":", " v", " for", " k", ",", " v", " in", " metadata", ".", "items", "()", " if", " v", " is", " not", " None", " and", " v", " ", "!", "=", " '", "null", "'}", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " path", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " path", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "path", "):", "\n", "            ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "path", ")", "\n", "                ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "data", " =", " f", ".", "read", "()", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " files", "={", "'", "file", "':", " (", "file", "_", "name", ",", " data", ")}", ",", " data", "=", "metadata", ",", " headers", "=", "HEAD", "ERS", ")"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -0.4638574421405792, -0.2077873945236206, -0.5080741047859192, -1.6757314205169678, -0.01397055946290493, -0.04499570652842522, -0.018534446135163307, -0.0012138864258304238, -0.008323385380208492, -0.0005492847412824631, -0.0022807319182902575, -0.3747207820415497, -0.0008274468709714711, -0.9532040953636169, -0.07101154327392578, -0.5653411746025085, -0.0001110968878492713, -0.06666675955057144, -0.0008095800876617432, -0.007085552904754877, -0.596778154373169, -0.002172017004340887, -0.0013812773395329714, -0.004651084542274475, -0.0036874888464808464, -1.7762025890988298e-05, -0.03981654718518257, -0.5998095273971558, -0.9773083329200745, -0.10733218491077423, -0.0006871246150694788, -0.022947005927562714, -1.9341591596603394, -0.22660739719867706, -0.20932967960834503, -0.0003904534096363932, -0.00012468514614738524, -0.02873554453253746, -0.0010967198759317398, -2.348137378692627, -0.22470179200172424, -1.0248737335205078, -0.07749021053314209, -0.032649729400873184, -3.933898824470816e-06, -8.344646857949556e-07, -0.7138785123825073, -0.2374759316444397, -0.3926437795162201, -0.0013606823049485683, -0.05369211733341217, -0.0016401661559939384, -0.00014506718434859067, -2.9801878554280847e-05, -5.090107151772827e-05, -2.0265558760002023e-06, -1.0728830375228426e-06, -0.0028531341813504696, -0.00026806574896909297, -9.60780744208023e-05, -7.533743337262422e-05, -0.004003012087196112, -0.0009579836623743176, -0.0015725638950243592, -0.09763921797275543, -0.33908936381340027, -1.1324817933200393e-05, -0.01504514366388321, -0.03539212420582771, -0.13273462653160095, -0.011562359519302845, -0.07493877410888672, -0.000387831823900342, -0.5637544393539429, -0.01639150269329548, -0.0002571013756096363, -2.682172998902388e-05, -4.23184028477408e-05, -0.004162457771599293, -0.00039498155820183456, -8.964136941358447e-05, -0.012882697395980358, -0.0011066034203395247, -3.8967647552490234, -0.7182615995407104, -2.993638038635254, -1.5132207870483398, -0.02533332258462906, -0.39071202278137207, -0.04986322298645973, -0.0021892646327614784, -9.440929716220126e-05, -0.011274084448814392, -0.00019536493346095085, -0.003746634814888239, -0.0030288081616163254, -0.00036352223833091557, -0.052796371281147, -0.013147920370101929, -0.3397573232650757, -0.08082778751850128, -0.0006705658161081374, -0.0008172033121809363, -3.0044116973876953, -0.13002994656562805, -0.22539882361888885, -1.0728830375228426e-06, -1.490105023549404e-05, -1.535377025604248, -0.5870715975761414, -0.11493916809558868, -0.04141675680875778, -1.2299233675003052, -1.629593014717102, -0.08552733063697815, -0.034323301166296005, -0.002919580088928342, -0.01115820836275816, -0.004812444094568491, -0.8446897864341736, -0.2939245402812958, -3.8091158866882324, -1.6938414573669434, -0.18751385807991028, -1.0013530300057027e-05, -0.025161292403936386, -7.033323527139146e-06, -0.0006741396500729024, -0.0008815216715447605, -0.0004993622424080968, -0.0015132891712710261, -0.01132960058748722, -3.2546637058258057, -0.0543699786067009, -0.015215049497783184, -4.172316494077677e-06, -6.782778655178845e-05, -1.4305104514278355e-06, -0.009075343608856201, -0.000251142424531281, -0.0009844223968684673, -0.0001245659514097497, -0.0010240792762488127, -0.0020712607074528933, -0.004721682518720627, -0.10697416216135025, -0.41305243968963623, -0.14518551528453827, -1.0490362910786644e-05, -0.0017641709418967366, -2.50339189733495e-06, -0.010217503644526005, -0.06533174216747284, -0.0003968881501350552, -0.0001429217227268964, -0.03144501522183418, -0.0010890988633036613, -0.00614527240395546, -0.29918336868286133, -0.0013825867790728807, -0.00024291902082040906, -0.0014687713701277971, -0.00030989613151177764, -0.0784580260515213, -0.007952219806611538, -0.00033158526639454067, -0.0001161031104857102, -0.4465908706188202, -0.020382825285196304, -0.0012416280806064606, -0.0026057357899844646, -3.071784019470215, -0.38651609420776367, -1.8191266059875488, -0.0451919324696064, -0.02792021445930004, -1.3708974620385561e-05, -3.814689989667386e-06, -5.006777428206988e-06, -0.024460656568408012, -7.510157047363464e-06, -1.6093124941107817e-05, -0.019642481580376625, -0.0016828911611810327, -0.005091320723295212, -0.016839612275362015, -4.37420129776001, -0.3499573767185211, -0.054645419120788574, -0.6270014643669128, -0.03360946103930473, -0.13605469465255737, -0.015347947366535664, -0.0004741021548397839, -0.00047267231275327504, -0.3588077425956726, -0.04453723877668381, -0.008422567509114742, -0.0015457835979759693, -0.0018774517811834812, -1.6202601194381714, -0.014796045608818531, -1.8157085180282593, -0.0025378421414643526, -2.169585604860913e-05, -0.008943026885390282, -0.010190363973379135, -0.05244825407862663, -3.2110283374786377, -0.004088140092790127, -0.00682534696534276, -0.00016842853801790625, -0.21025384962558746, -0.0015582811320200562, -0.2743191421031952, -0.0916658416390419, -2.5130932331085205, -0.1112547442317009, -0.7965732216835022, -0.18513722717761993, -0.0086548225954175, -0.02163884788751602, -0.01427086815237999, -2.6225699912174605e-05, -8.344646857949556e-07, -0.0007873057620599866, -0.012146552093327045, -0.19750095903873444, -0.00021586472576018423, -0.6244810819625854, -0.06661992520093918, -0.4397982060909271, -0.025389574468135834, -0.04824978485703468, -0.001729303621686995, -0.0072548044845461845, -8.4638240878121e-06, -0.012022885493934155], "finish_reason": "length"}], "metrics": {"energy": 1083.1932515354163, "energy_per_token": 4.23122363881022, "time": 24.030464, "time_per_token": 0.093869}}
{"outputs": [{"text": "try:\n        if os.path.exists(directory):\n            files = os.listdir(directory)\n        else:\n            raise FileNotFoundError(f\"The {directory} directory does not exist\")\n    except TypeError:\n        raise TypeError(\"The directory name is not a valid string\")\n\n    status_codes = []\n    for file in files:\n        path = os.path.join(directory, file)\n        data = metadata.copy()\n        data['name'] = file\n        data['data'] = {\"name\":file, \"size\":\"10mb\",\"type\":\"txt\"}\n        with open(path, 'rb') as f:\n            files = {'file': f}\n            try:\n                response = requests.post(url, headers=HEADERS, data=json.dumps(data), files=files)\n                response.raise_for_status()\n                status_codes.append(response.status_code)\n                time.sleep(1)\n            except requests.HTTPError as e:\n                status_codes.append(response.status_code)\n                print(", "tokens": ["try", ":", "\n", "        ", "if", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "            ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "        ", "else", ":", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " {", "directory", "}", " directory", " does", " not", " exist", "\"", ")", "\n", "    ", "except", " Type", "Error", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " directory", " name", " is", " not", " a", " valid", " string", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "        ", "data", " =", " metadata", ".", "copy", "()", "\n", "        ", "data", "['", "name", "']", " =", " file", "\n", "        ", "data", "['", "data", "']", " =", " ", "{\"", "name", "\":", "file", ",", " \"", "size", "\":\"", "1", "0", "mb", "\"", ",", "\"", "type", "\":\"", "txt", "\"}", "\n", "        ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "file", "':", " f", "}", "\n", "            ", "try", ":", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "data", ")", ",", " files", "=", "files", ")", "\n", "                ", "response", ".", "raise", "_", "for", "_", "status", "()", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "            ", "except", " requests", ".", "HTTP", "Error", " as", " e", ":", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "print", "("], "logprobs": [-2.2288663387298584, -0.0003830652858596295, -0.0036199060268700123, -0.041065458208322525, -0.9371567964553833, -1.7278578281402588, -0.000144709600135684, -0.012577497400343418, -0.0002884448622353375, -0.6617298126220703, -0.0014879356604069471, -0.014591646380722523, -0.26937031745910645, -0.010839038528501987, -0.06311509758234024, -1.7798473834991455, -0.060417819768190384, -0.4018978178501129, -1.1801649634435307e-05, -0.008685785345733166, -3.4570634852570947e-06, -0.00048601735034026206, -0.0021944984328001738, -0.0006121906917542219, -0.007888355292379856, -2.7306950092315674, -0.06915304064750671, -0.0001616347290109843, -0.0021621440537273884, -0.001453653909265995, -0.06521783769130707, -0.01468445360660553, -0.001064806361682713, -7.331102824537084e-05, -0.27199873328208923, -0.6073623895645142, -0.16443416476249695, -2.149059534072876, -2.914975881576538, -0.006803680211305618, -0.012270556762814522, -0.2976342737674713, -0.16076578199863434, -0.003140519605949521, -0.021144447848200798, -1.4278444051742554, -0.0012687736889347434, -0.002721774624660611, -0.7345038652420044, -0.003347391029819846, -0.9504656791687012, -4.0531076592742465e-06, -0.4129857122898102, -0.009184728376567364, -0.002378731733188033, -0.23766975104808807, -0.03453729674220085, -2.038458114839159e-05, -0.0650678351521492, -0.5635419487953186, -0.44451504945755005, -0.3591421842575073, -3.328892707824707, -1.294012427330017, -1.3918017148971558, -0.9112842679023743, -1.0664341449737549, -0.07392004877328873, -0.08131179213523865, -0.0007614573696628213, -0.0034740353003144264, -0.511275589466095, -0.0025022882036864758, -0.9978542923927307, -0.15500296652317047, -0.1629858762025833, -0.011187326163053513, -0.01587056554853916, -0.014133007265627384, -0.37358662486076355, -0.11653728783130646, -0.22719113528728485, -0.24039313197135925, -0.003117465414106846, -0.00048673225683160126, -0.0009862087899819016, -0.017040973529219627, -2.763305425643921, -0.06073310971260071, -0.04261855036020279, -5.006777428206988e-06, -0.000325388420606032, -5.602820692729438e-06, -0.015771297737956047, -0.0007588367443531752, -0.0027882291469722986, -0.0002004899288294837, -0.005009362008422613, -0.0003337303060106933, -0.0031399254221469164, -0.1429298371076584, -2.935683012008667, -0.012660015374422073, -1.8324902057647705, -0.7537301778793335, -0.013412956148386002, -8.260862523457035e-05, -0.05071661248803139, -0.03974815458059311, -0.3622274100780487, -0.2718132734298706, -2.416886329650879, -0.001683486276306212, -0.0008185135084204376, -0.12024334818124771, -0.009491201490163803, -0.28313615918159485, -2.225459098815918, -0.04567652568221092, -4.219789981842041, -0.20949560403823853, -0.0007454953738488257, -3.7775373458862305, -0.09396613389253616, -3.2210988998413086, -0.016242321580648422, -2.8028433322906494, -1.0849034786224365, -0.6679476499557495, -2.199950933456421, -2.8749992847442627, -1.0390528440475464, -0.6755115985870361, -3.3597779273986816, -1.097102403640747, -0.029543381184339523, -1.9208014011383057, -1.3734525442123413, -0.16660335659980774, -3.943962335586548, -0.3637010455131531, -0.05057008937001228, -0.40806469321250916, -0.4076997637748718, -0.002458171220496297, -0.0011131525970995426, -0.008022584952414036, -0.0027783624827861786, -0.21099133789539337, -0.053874336183071136, -0.0011711412807926536, -0.0005042473785579205, -0.17782975733280182, -0.02834407053887844, -0.003473916556686163, -0.008733173832297325, -1.6037358045578003, -0.05154142901301384, -0.18097729980945587, -0.23308901488780975, -0.003239148296415806, -0.09372476488351822, -0.0129132941365242, -0.01167147234082222, -0.028020834550261497, -1.97580885887146, -0.0002740246127359569, -0.0009030792862176895, -0.004770208150148392, -0.2966848909854889, -0.002498839981853962, -0.0018023689044639468, -0.00016020445036701858, -0.012663899920880795, -0.0012817509705200791, -0.014723571017384529, -0.028009707108139992, -0.44114404916763306, -0.014611853286623955, -0.009238943457603455, -1.537788011773955e-05, -0.0016143397660925984, -1.2076799869537354, -0.00906943716108799, -0.13115665316581726, -3.182837463100441e-05, -0.0009690594743005931, -1.4305104514278355e-06, -0.003287508385255933, -0.005895605776458979, -0.029030989855527878, -0.008019628934562206, -0.019592801108956337, -0.00296652945689857, -0.0012032896047458053, -0.0281102005392313, -0.00371029251255095, -0.2723437249660492, -2.6267805099487305, -0.058261655271053314, -0.018543105572462082, -3.576278118089249e-07, -8.22540732769994e-06, -4.768370445162873e-07, -2.8967437174287625e-05, -0.000730128725990653, -0.03292914107441902, -0.3405922055244446, -0.16362343728542328, -0.007655212190002203, -0.03452785313129425, -0.0008989107445813715, -0.0005137792322784662, -0.009634190239012241, -0.014966110698878765, -0.0012247211998328567, -0.0013366345083341002, -0.00020692592079285532, -1.7881377516459906e-06, -0.0003718638326972723, -0.0021076626144349575, -0.808036744594574, -0.3407915234565735, -0.0003810394846368581, -0.00014304091746453196, -0.0006470970110967755, -0.031136877834796906, -0.01240467093884945, -0.3391258716583252, -0.040537185966968536, -0.001257820287719369, -0.13319237530231476, -4.255681051290594e-05, -0.9644070267677307, -5.8410845667822286e-05, -0.17813067138195038, -0.4665733277797699, -0.0010854073334485292, -0.0009827552130445838, -0.0014044907875359058, -1.7689900398254395, -0.007595232222229242, -0.008788359351456165, -0.0013824678026139736, -0.0014477020595222712, -0.02443878725171089, -0.6432353854179382, -0.000436091679148376, -0.0002840353990904987, -0.00022182388056535274, -2.288792165927589e-05, -0.0018266435945406556, -0.0034698774106800556, -0.23788131773471832, -0.6490954160690308, -0.007681711111217737], "finish_reason": "length"}], "metrics": {"energy": 1093.3012240772243, "energy_per_token": 4.2707079065516576, "time": 23.819193, "time_per_token": 0.09304372265625}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    status_codes = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            with open(file_path, 'rb') as f:\n                data = {'file': f, 'metadata': json.dumps(metadata)}\n                response = requests.post(url, headers=HEADERS, files=data)\n                status_codes.append(response.status_code)\n                time.sleep(1)\n\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "data", " =", " {'", "file", "':", " f", ",", " '", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")}", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "data", ")", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "def"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -0.4638574421405792, -0.2077873945236206, -0.5080741047859192, -1.2875611782073975, -0.0004231034545227885, -0.0011318475008010864, -0.0018791175680235028, -0.5231797099113464, -0.0008515069494023919, -0.003661715192720294, -0.751625657081604, -0.011709529906511307, -0.0015637562610208988, -0.0013362773461267352, -0.43021076917648315, -0.000814582861494273, -2.3450815677642822, -0.06924581527709961, -0.033069856464862823, -0.004958475474268198, -0.010557042434811592, -0.021193234249949455, -0.36642977595329285, -0.43346622586250305, -1.4877315759658813, -0.0019349202048033476, -0.3390887677669525, -0.00035232058144174516, -0.0001113352773245424, -0.008939600549638271, -0.0006249382277019322, -0.0014947204617783427, -8.22540732769994e-06, -3.2543604902457446e-05, -0.0004301338049117476, -0.0030265499372035265, -0.015274339355528355, -0.006579048000276089, -0.004506194964051247, -0.06029986962676048, -0.26696282625198364, -0.08310023695230484, -0.0018052248051390052, -0.00018451895448379219, -0.00036745471879839897, -0.01780818961560726, -0.5197237133979797, -0.14684836566448212, -0.010192015208303928, -0.00031013446277938783, -0.0005684667266905308, -4.768370445162873e-07, -9.536697689327411e-06, -5.960462772236497e-07, -0.002678499324247241, -6.651657167822123e-05, -0.003722169203683734, -5.2569914259947836e-05, -0.0004745787591673434, -0.00019333878299221396, -0.0012743694242089987, -0.14743539690971375, -0.29195475578308105, -0.0008183944155462086, -0.00024863966973498464, -0.001666586846113205, -0.000161038784426637, -1.4305104514278355e-06, -0.0005206898204050958, -0.1845189929008484, -0.01120441872626543, -0.00021395778458099812, -0.00021884430316276848, -0.13442130386829376, -0.020529521629214287, -0.0034166553523391485, -0.006996536627411842, -0.9687727093696594, -0.015799811109900475, -0.9095296263694763, -0.5316803455352783, -0.03222677484154701, -0.15000492334365845, -0.27831149101257324, -0.100472591817379, -0.15567073225975037, -0.0009230881696566939, -0.12422981858253479, -2.074220174108632e-05, -0.0001232548092957586, -3.576278118089249e-07, -0.006320605520159006, -0.005857919342815876, -0.013291916809976101, -0.006512134335935116, -0.029464328661561012, -0.26722878217697144, -0.0006760457181371748, -0.003564553800970316, -0.00012575789878610522, -0.0053787752985954285, -0.00023588736075907946, -0.009709867648780346, -0.009302014485001564, -0.6869013905525208, -0.005594904534518719, -0.005863015539944172, -3.6954195820726454e-05, -0.0007398966699838638, -0.04741054028272629, -0.0006576997111551464, -8.320462075062096e-05, -0.02860221266746521, -0.0019694233778864145, -0.04700743034482002, -0.10281728208065033, -0.0009984752396121621, -0.006827241275459528, -0.0006777135422453284, -0.0004950728034600616, -0.0042472160421311855, -0.002518697874620557, -0.001597320195287466, -0.000813034363090992, -0.0001908358681248501, -5.364403477869928e-06, -0.00025388356880284846, -0.002815808402374387, -0.5284976959228516, -0.1688523292541504, -0.0002547178009990603, -0.00024327656137757003, -0.0005987281911075115, -0.030778709799051285, -0.013350732624530792, -0.2911011576652527, -0.662990391254425, -0.01596161164343357, -0.021772412583231926, -0.0038194339722394943, -6.437094270950183e-05, -6.90197994117625e-05, -0.15686054527759552, -0.020076869055628777, -1.4886605739593506], "finish_reason": "stop"}], "metrics": {"energy": 664.6547511596677, "energy_per_token": 4.0776365101820105, "time": 15.443608, "time_per_token": 0.09474606134969325}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: %s\" % directory)\n\n    files = os.listdir(directory)\n    filepaths = [os.path.join(directory, file) for file in files]\n\n    status_codes = []\n\n    for filepath in filepaths:\n        if os.path.isfile(filepath):\n            with open(filepath, 'rb') as f:\n                metadata['filepath'] = filepath\n                payload = json.dumps(metadata)\n                response = requests.post(url, headers=HEADERS, data=payload, files={'file': f})\n                status_codes.append(response.status_code)\n            time.sleep(1)\n\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ":", " %", "s", "\"", " %", " directory", ")", "\n", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "file", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", " for", " file", " in", " files", "]", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "for", " file", "path", " in", " file", "paths", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "path", "):", "\n", "            ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "metadata", "['", "file", "path", "']", " =", " file", "path", "\n", "                ", "payload", " =", " json", ".", "d", "umps", "(", "metadata", ")", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "payload", ",", " files", "={", "'", "file", "':", " f", "})", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "def"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -0.2515036463737488, -1.2996270656585693, -0.675657331943512, -0.9534237384796143, -0.01632113754749298, -1.8592747449874878, -1.846407413482666, -0.009277566336095333, -0.003753285389393568, -0.008663804270327091, -0.04816719889640808, -0.0008996253600344062, -0.0031655936036258936, -0.416646271944046, -0.0008233971311710775, -2.6040825843811035, -0.07940034568309784, -0.8322164416313171, -7.867782187531702e-06, -0.004881725646555424, -1.1920928244535389e-07, -0.0003296785580459982, -0.0018265245016664267, -0.0005875291535630822, -0.0034867464564740658, -0.2638742923736572, -2.1617770195007324, -2.071589231491089, -0.0027270056307315826, -0.13323651254177094, -0.027639400213956833, -2.50339189733495e-06, -0.00016640232934150845, -1.1801649634435307e-05, -0.00924142450094223, -0.00020132421923335642, -0.001807366730645299, -0.0001382732152706012, -0.4654316008090973, -0.027936212718486786, -0.002719396958127618, -0.00018952481332235038, -0.0001586549769854173, -0.002300356514751911, -0.06433682888746262, -0.0033734100870788097, -0.43587496876716614, -0.0005559567362070084, -1.091793417930603, -0.10743358731269836, -0.034620095044374466, -0.0029593980871140957, -0.01740175299346447, -0.009253471158444881, -0.9167448282241821, -0.00033539868309162557, -0.08448812365531921, -0.06447955965995789, -0.04861685261130333, -0.0021651177667081356, -0.003424139926210046, -0.00028308198670856655, -0.000416907190810889, -0.000694153131917119, -0.043484997004270554, -1.6371288299560547, -0.3165051341056824, -4.8636207793606445e-05, -0.017937349155545235, -4.172316494077677e-06, -0.060651883482933044, -0.11209272593259811, -0.0009542917250655591, -0.0005258131423033774, -0.00026353701832704246, -0.01951810158789158, -0.0011126763420179486, -0.015886757522821426, -0.4330628514289856, -0.0014249657979235053, -0.0003195490571670234, -0.0012636542087420821, -1.1920922133867862e-06, -0.00037472377880476415, -0.12323176115751266, -0.010830548591911793, -0.0002602000313345343, -0.0002456601650919765, -0.3045276403427124, -0.028859013691544533, -0.0027173757553100586, -0.007557964883744717, -3.4853367805480957, -0.2224738448858261, -0.9241772294044495, -1.3695381879806519, -0.002003092784434557, -0.003713499056175351, -0.07168620079755783, -0.00040356122190132737, -0.07632388174533844, -0.12599332630634308, -1.9261542558670044, -0.010219627059996128, -0.26068195700645447, -1.8715683836489916e-05, -0.0009017692063935101, 0.0, -0.19209857285022736, -0.022348690778017044, -0.026608800515532494, -0.03617517650127411, -0.17252041399478912, -0.5891252756118774, -0.0015453074593096972, -0.003050200641155243, -0.00015198028995655477, -0.17095781862735748, -0.0003700763627421111, -0.041794802993535995, -0.02309251017868519, -0.29717519879341125, -0.005393714644014835, -0.005765593610703945, -1.2278481335670222e-05, -0.00032491172896698117, -0.23724764585494995, -0.001652186387218535, -0.046316251158714294, -0.09356703609228134, -0.03417769446969032, -0.01728295162320137, -0.11300113052129745, -0.15078860521316528, -0.005667806603014469, -0.21774408221244812, -0.003721575252711773, -0.002947036875411868, -0.07309143990278244, -0.11159706115722656, -0.004671968054026365, -0.006593969650566578, -0.0009134411229752004, -0.0004914983292110264, -0.004586059134453535, -0.003970834892243147, -0.005136745050549507, -0.0018982740584760904, -0.0008911690674722195, -1.2636104656849056e-05, -0.00038068200228735805, -0.0014043716946616769, -1.5801944732666016, -0.15095868706703186, -6.437094270950183e-05, -0.00010406429646536708, -0.0003936707798857242, -0.023882800713181496, -0.014654145576059818, -0.2892915606498718, -0.22273768484592438, -0.008517958223819733, -0.02680356241762638, -0.0062425388023257256, -3.707340147229843e-05, -4.1483970562694594e-05, -0.17234644293785095, -0.011554110795259476, -1.4838505983352661], "finish_reason": "stop"}], "metrics": {"energy": 766.4574488525394, "energy_per_token": 4.120738972325481, "time": 17.341854, "time_per_token": 0.09323577419354839}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist\")\n\n    files = os.listdir(directory)\n    responses = []\n\n    for file in files:\n        file_path = os.path.join(directory, file)\n\n        with open(file_path, 'rb') as f:\n            data = {\n                'file': f,\n                'metadata': json.dumps(metadata)\n            }\n\n            response = requests.post(url, data=data, headers=HEADERS)\n\n        responses.append(response)\n\n        time.sleep(1)\n\n    return [response.status_code for response in responses]\n\nclass Task:\n    \"\"\"\n    Represents a task that can be added to the task queue.\n\n    Attributes:\n    - func (function): The function to be executed by the task.\n    - url (str): The server URL.\n    - metadata (dict): The metadata to be associated with the files.\n    - directory (str): The directory containing the files to be uploaded", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "respons", "es", " =", " []", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " {", "\n", "                ", "'", "file", "':", " f", ",", "\n", "                ", "'", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")", "\n", "            ", "}", "\n", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "=", "data", ",", " headers", "=", "HEAD", "ERS", ")", "\n", "\n", "        ", "respons", "es", ".", "append", "(", "response", ")", "\n", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " [", "response", ".", "status", "_", "code", " for", " response", " in", " responses", "]", "\n", "\n", "class", " Task", ":", "\n", "    ", "\"", "\"", "\"", "\n", "    ", "Rep", "resents", " a", " task", " that", " can", " be", " added", " to", " the", " task", " queue", ".", "\n", "\n", "    ", "Attributes", ":", "\n", "    ", "-", " func", " (", "function", "):", " The", " function", " to", " be", " executed", " by", " the", " task", ".", "\n", "    ", "-", " url", " (", "str", "):", " The", " server", " URL", ".", "\n", "    ", "-", " metadata", " (", "dict", "):", " The", " metadata", " to", " be", " associated", " with", " the", " files", ".", "\n", "    ", "-", " directory", " (", "str", "):", " The", " directory", " containing", " the", " files", " to", " be", " uploaded"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -0.46100175380706787, -0.263683557510376, -0.36993706226348877, -1.1355175971984863, -0.0003784178989008069, -0.0010979106882587075, -0.0019828674849122763, -0.2437928020954132, -0.0007823029300197959, -0.0031587013509124517, -0.7500008940696716, -0.000518664310220629, -0.0013165149139240384, -0.40986528992652893, -0.0010977915953844786, -2.233722686767578, -0.058610230684280396, -0.9774916768074036, -1.1444026313256472e-05, -0.0060971686616539955, -5.960462772236497e-07, -0.00025948495022021234, -0.001611721352674067, -0.00030501006403937936, -0.003246871754527092, -0.3283843696117401, -3.7434678077697754, -0.0001472126314183697, -0.029349036514759064, -0.0105827571824193, -0.004211841616779566, -0.4383382797241211, -0.0003289635351393372, -0.1257261335849762, -0.27477896213531494, -0.23316605389118195, -0.001960024470463395, -0.00043883229955099523, -0.0004258441040292382, -0.018344854936003685, -0.6272261738777161, -0.06091741472482681, -0.024452513083815575, -0.0003077510336879641, -0.004393449053168297, -1.311301275563892e-06, -2.7179348762729205e-05, -5.006777428206988e-06, -0.003008722560480237, -0.0003455280384514481, -0.0012196014868095517, -7.784063927829266e-05, -0.0010557560017332435, -0.00014995403762441128, -0.00078671018127352, -0.9741376638412476, -0.0019085064996033907, -0.36284270882606506, -0.001989886863157153, -0.00016199229867197573, -0.0007297713309526443, -0.0010412277188152075, -1.1920922133867862e-06, -0.0003178806509822607, -0.10209603607654572, -0.016368048265576363, -0.0004651656490750611, -0.00020489977032411844, -0.17638537287712097, -0.028468282893300056, -0.0026838495396077633, -0.012421154417097569, -0.9364373683929443, -0.012603984214365482, -1.366081714630127, -0.16789503395557404, -0.0032027876004576683, -0.1438964605331421, -0.6176764965057373, -0.0325845405459404, -0.17457154393196106, -0.04293013736605644, -0.0026982349809259176, -0.04877183958888054, -0.15990880131721497, -0.1756799966096878, -0.0022113888990134, -0.08391774445772171, -2.0861407392658293e-05, -0.0001896439935080707, -1.7881377516459906e-06, -0.013474234379827976, -0.002407154766842723, -0.018120577558875084, -0.2831162214279175, -0.0033833899069577456, -1.156323378381785e-05, -0.00045134371612221, -0.4968917667865753, -0.02068355120718479, -0.46781009435653687, -0.0016031521372497082, -0.005643743555992842, -0.00019643761334009469, -0.00454618688672781, -0.00036566724884323776, -0.012269261293113232, -0.011893078684806824, -2.5423972606658936, -0.008717220276594162, -0.0014246086357161403, -0.024472521618008614, -0.1681288331747055, -0.002347097033634782, -0.00727149099111557, -1.8715683836489916e-05, -0.019109435379505157, -0.001620766706764698, -1.3927115201950073, -1.3885388374328613, -0.10130651295185089, -1.9073468138230965e-06, -0.000747758662328124, -0.00029738296871073544, -0.01273911353200674, -0.007136686705052853, -2.451751232147217, -0.0023539948742836714, -0.8041223883628845, -0.15959392488002777, -0.9152004718780518, -0.0004001055203843862, -0.00017998983094003052, -0.0006098079611547291, -0.03166031837463379, -0.01466283854097128, -0.24639344215393066, -0.02332010120153427, -0.010293962433934212, -0.07079999148845673, -1.1312508583068848, -0.12449025362730026, -0.008914316073060036, -0.03452681377530098, -0.002762194722890854, -0.00014518637908622622, -0.0017269235104322433, -0.000514017534442246, -6.806619057897478e-05, -0.0002090712368953973, -0.15765446424484253, -0.01991923898458481, -0.016478514298796654, -3.293944835662842, -2.709794521331787, -0.5887088775634766, -0.0029608244076371193, -0.03646153584122658, -0.18744567036628723, -0.00036566724884323776, -3.0517112463712692e-05, -0.09970984607934952, -0.018884509801864624, -2.2899913787841797, -0.02486470155417919, -0.10781317204236984, -0.3249692916870117, -0.6491429805755615, -0.3094924986362457, -0.06892842054367065, -2.745699167251587, -0.01735934242606163, -1.0345487594604492, -0.7456006407737732, -0.6677193641662598, -0.3436174988746643, -0.29356348514556885, -0.24340671300888062, -0.003070404287427664, -0.21515484154224396, -0.05014750361442566, -0.0008060067193582654, -0.22165805101394653, -0.5494277477264404, -1.0231202840805054, -0.27623578906059265, -0.9987771511077881, -0.011209016665816307, -0.08168109506368637, -0.04841073602437973, -0.17664796113967896, -0.07280019670724869, -0.42741575837135315, -0.44250768423080444, -0.0077435788698494434, -0.011739573441445827, -0.007869194261729717, -0.03703848645091057, -0.0062498836778104305, -0.0009589364635758102, -1.3016126155853271, -0.007555835414677858, -0.022776193916797638, -0.009347483515739441, -0.00805120263248682, -0.24675612151622772, -0.0026843249797821045, -0.2992577850818634, -0.007396338041871786, -0.0012866322649642825, -0.0003965306677855551, -2.4997832775115967, -0.012097440659999847, -0.016838908195495605, -0.021292898803949356, -0.038847848773002625, -0.007416454143822193, -0.06328172981739044, -0.0050878808833658695, -0.018217505887150764, -0.00022027450904715806, -0.013109094463288784, -0.17502737045288086, -0.07425058633089066, -0.00504672434180975, -0.1359805166721344, -0.019784726202487946, -0.33118924498558044, -0.0032683785539120436, -0.0034614428877830505, -0.03917218744754791, -0.008607903495430946, -0.006444386672228575, -0.017514564096927643, -0.0005812147865071893, -0.002403705846518278, -0.011189919896423817, -0.0005370128201320767, -0.002358514117076993], "finish_reason": "length"}], "metrics": {"energy": 1079.0889176254273, "energy_per_token": 4.215191084474325, "time": 23.802814, "time_per_token": 0.0929797421875}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    if not url:\n        raise TypeError(\"URL is invalid\")\n\n    status_codes = []\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        data = metadata.copy()\n        data['filename'] = filename\n\n        with open(file_path, 'rb') as file:\n            files = {'file': file}\n            response = requests.post(url, headers=HEADERS, json=data, files=files)\n            status_codes.append(response.status_code)\n\n        time.sleep(1)\n    return status_codes", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", "\"", ")", "\n", "    ", "if", " not", " url", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " is", " invalid", "\"", ")", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "data", " =", " metadata", ".", "copy", "()", "\n", "        ", "data", "['", "filename", "']", " =", " filename", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "            ", "files", " =", " {'", "file", "':", " file", "}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " json", "=", "data", ",", " files", "=", "files", ")", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "if"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -0.24567918479442596, -1.3024324178695679, -0.701324999332428, -0.5368722677230835, -0.0010021670022979379, -0.009223943576216698, -0.3953467011451721, -0.007436688058078289, -0.0032292858231812716, -0.9597976803779602, -0.8951622843742371, -0.14371949434280396, -1.7230854034423828, -1.019240140914917, -0.004055965691804886, -0.0011854295153170824, -0.015864228829741478, -0.04979993402957916, -1.5020257706055418e-05, -0.11164653301239014, -0.017794020473957062, -0.9139642119407654, -0.6713860630989075, -0.434406042098999, -0.034641049802303314, -0.0008373330347239971, -0.00041869457345455885, -0.5297445058822632, -0.0014580582501366735, -1.31336510181427, -0.11801909655332565, -0.05686919018626213, -0.008359324187040329, -0.0129257682710886, -0.01640123501420021, -0.2899218201637268, -0.38104188442230225, -1.1933506727218628, -0.005676578264683485, -0.02324940636754036, -4.887569048150908e-06, -0.0003840185818262398, -9.536738616588991e-07, -0.00047565114800818264, -0.0008438840159215033, -0.000390215078368783, -0.0022426710929721594, -0.014297074638307095, -0.6847286820411682, -0.8353160619735718, -0.019644469022750854, -0.00037424711626954377, -0.004153554327785969, -1.5497195136049413e-06, -2.586808113846928e-05, -1.7881377516459906e-06, -0.0014736517332494259, -0.00013696208770852536, -0.0011104138102382421, -5.745722592109814e-05, -0.0009913297835737467, -0.00020251607929822057, -0.0012546057114377618, -0.15469001233577728, -3.375202178955078, -0.026965796947479248, -1.8753637075424194, -0.560331404209137, -0.005617901682853699, -6.890059739816934e-05, -0.03175767511129379, -0.028126312419772148, -0.29798218607902527, -0.21340052783489227, -1.4936500787734985, -0.0006455483380705118, -0.0004203628050163388, -0.020740065723657608, -0.0062674167566001415, -1.3893067836761475, -0.002107900334522128, -0.1802028864622116, -0.003623469267040491, -0.0004077318590134382, -0.0008231588872149587, -2.002696055569686e-05, 0.0, -0.00017855956684798002, -0.09287145733833313, -0.013017671182751656, -0.00019202772818971425, -0.0003522014303598553, -0.9110038876533508, -0.020707137882709503, -0.0010888606775552034, -0.005438887979835272, -0.7165651917457581, -0.005129391793161631, -0.12075038254261017, -0.08842147886753082, -0.002211745595559478, -0.12052849680185318, -0.010230600833892822, -0.0047271400690078735, -0.08133761584758759, -0.11637601256370544, -0.0006949870148673654, -0.00261869584210217, -0.0001586549769854173, -0.018551882356405258, -0.000388665939681232, -0.018442580476403236, -0.009055733680725098, -0.30958864092826843, -0.0036418798845261335, -0.011585927568376064, -1.8000440832111053e-05, -0.0004059444472659379, -2.5501580238342285, -0.0021157516166567802, -0.0013962768716737628, -0.01052767038345337, -0.020368341356515884, -0.0010140759404748678, -0.00024196557933464646, -0.024408889934420586, -0.0018737631617113948, -0.21394187211990356, -0.10699944198131561, -0.001650877296924591, -0.006736780982464552, -0.00040749352774582803, -0.00019667598826345056, -0.004792156629264355, -0.0026937173679471016, -0.002947393339127302, -0.0011623300379142165, -0.00031251792097464204, -2.145764938177308e-06, -0.000251142424531281, -0.001128989621065557, -1.0265824794769287, -0.320118248462677, -0.8206241130828857, -0.0001685477327555418, -0.00013159839727450162, -0.000291662581730634, -0.02383926883339882, -0.014337382279336452, -0.36771708726882935, -2.381165027618408, -0.02561536617577076, -0.009181066416203976, -6.139089964563027e-05, -0.00018690270371735096, -0.12445741146802902, -0.017661796882748604, -1.6551133394241333], "finish_reason": "stop"}], "metrics": {"energy": 716.8633571472164, "energy_per_token": 4.119904351420784, "time": 16.124783, "time_per_token": 0.09267116666666667}}
{"outputs": [{"text": "status_codes = []\n    if os.path.isdir(directory):\n        for file in os.listdir(directory):\n            file_path = os.path.join(directory, file)\n            with open(file_path, 'rb') as f:\n                data = {'file': f, 'metadata': json.dumps(metadata)}\n                response = requests.post(url, headers=HEADERS, files=data)\n                status_codes.append(response.status_code)\n            time.sleep(1)\n        return status_codes\n    else:\n        raise FileNotFoundError(\"The directory does not exist.\")", "tokens": ["status", "_", "codes", " =", " []", "\n", "    ", "if", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "for", " file", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "data", " =", " {'", "file", "':", " f", ",", " '", "metadata", "':", " json", ".", "d", "umps", "(", "metadata", ")}", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "data", ")", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "        ", "return", " status", "_", "codes", "\n", "    ", "else", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "print"], "logprobs": [-3.1943414211273193, -0.14540252089500427, -0.18292799592018127, -0.020847365260124207, -0.017420144751667976, -0.03397376090288162, -0.37906521558761597, -1.2170865535736084, -1.4507015943527222, -6.496695277746767e-05, -0.011844543740153313, -2.7179348762729205e-05, -0.8108301162719727, -0.0015430459752678871, -0.0010701649589464068, -0.0065477825701236725, -0.06554947793483734, -0.012471544556319714, -0.0287456214427948, -0.6862642765045166, -0.7561493515968323, -0.39948010444641113, -0.009758741594851017, -1.9550132492440753e-05, -0.011705995537340641, -5.960462772236497e-07, -0.0005726366653107107, -0.0008542464347556233, -0.0008201810996979475, -0.0024317714851349592, -0.0124259814620018, -1.231104850769043, -0.08345858007669449, -0.05490216612815857, -0.0009016501135192811, -0.014085874892771244, -1.4305104514278355e-06, -5.340433563105762e-05, -1.07287787614041e-05, -0.0051873852498829365, -0.0003326578007545322, -0.0015170981641858816, -0.00013815402053296566, -0.002830310957506299, -0.000403084559366107, -0.001963831717148423, -0.08449381589889526, -0.8801575899124146, -0.0018261675722897053, -0.000291662581730634, -0.0008660380262881517, -0.0006176709430292249, -1.5497195136049413e-06, -0.0009403574513271451, -0.12091824412345886, -0.03404957801103592, -0.000310730334604159, -0.00040046300273388624, -0.31879734992980957, -0.04458022117614746, -0.005811817012727261, -0.005836112890392542, -0.8575689196586609, -0.02216075360774994, -1.1154019832611084, -0.49038165807724, -0.018549775704741478, -0.06260596215724945, -0.21727260947227478, -0.12110751867294312, -0.1786627322435379, -0.001192097319290042, -0.0843590646982193, -2.47952248173533e-05, -0.00023135847004596144, -8.344646857949556e-07, -0.005314270965754986, -0.009772317484021187, -0.022872205823659897, -0.006665851920843124, -0.01440412737429142, -0.3404124081134796, -0.0011320855701342225, -0.0030095544643700123, -0.00011979816190432757, -0.005001177545636892, -0.00032443503732793033, -0.029101161286234856, -0.02349466271698475, -0.7570825219154358, -0.008050612173974514, -0.009390588849782944, -3.528532761265524e-05, -0.0006839081761427224, -0.039150867611169815, -0.0014247277285903692, -0.00011646069469861686, -0.021052706986665726, -0.0022474287543445826, -0.04587307572364807, -0.124473936855793, -0.0013799677835777402, -0.006226663943380117, -0.0013998481445014477, -0.0005831210291944444, -0.005946207791566849, -0.004077811259776354, -0.0036574392579495907, -0.0023424585815519094, -0.00033563701435923576, -5.2689116273541003e-05, -0.00025900822947733104, -0.002274071332067251, -1.1741830110549927, -0.1250910758972168, -0.00011288482346571982, -0.00011586471373448148, -0.00032658010604791343, -0.02067432552576065, -0.01309062261134386, -0.2057018280029297, -0.4329911768436432, -0.032279178500175476, -0.006549440789967775, -3.480850500636734e-05, -7.855583680793643e-05, -0.003534025512635708, -0.022547313943505287, -0.07361874729394913, -5.364274329622276e-05, -0.0005964645533822477, -0.0017541749402880669, -0.025616643950343132, -0.0068395547568798065, -0.00030155404238030314, -2.455681169521995e-05, -0.279420405626297, -0.5345359444618225, -1.3346270322799683, -0.4582630693912506, -0.37508270144462585, -0.0007277462864294648, -0.007453135214745998, -0.5338799357414246, -0.013630177825689316, -0.030914295464754105, -0.006409208290278912, -0.022916831076145172, -3.7074928283691406], "finish_reason": "stop"}], "metrics": {"energy": 616.994871757507, "energy_per_token": 4.140905179580583, "time": 13.830234, "time_per_token": 0.09282036241610739}}
{"outputs": [{"text": "try:\n        # Check if the directory exists\n        if os.path.exists(directory):\n            # Get a list of all files in the directory\n            file_list = os.listdir(directory)\n            # Create a list to store the status codes of the upload responses\n            response_status_codes = []\n            # Loop through each file in the list\n            for file_name in file_list:\n                # Open each file\n                file_path = os.path.join(directory, file_name)\n                # Read the file as binary\n                with open(file_path, \"rb\") as file:\n                    # Create a dictionary containing the metadata and the binary file\n                    data = {\"metadata\": json.dumps(metadata), \"file\": file}\n                    # Send a POST request to the server URL with the metadata and file data\n                    response = requests.post(url, headers=HEADERS, data=data)\n                    # Get the status code of the upload response and append it to the list\n                    response_status_codes.append(response.status_code)\n                    # Pause for one", "tokens": ["try", ":", "\n", "        ", "#", " Check", " if", " the", " directory", " exists", "\n", "        ", "if", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "            ", "#", " Get", " a", " list", " of", " all", " files", " in", " the", " directory", "\n", "            ", "file", "_", "list", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "            ", "#", " Create", " a", " list", " to", " store", " the", " status", " codes", " of", " the", " upload", " responses", "\n", "            ", "response", "_", "status", "_", "codes", " =", " []", "\n", "            ", "#", " Loop", " through", " each", " file", " in", " the", " list", "\n", "            ", "for", " file", "_", "name", " in", " file", "_", "list", ":", "\n", "                ", "#", " Open", " each", " file", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "                ", "#", " Read", " the", " file", " as", " binary", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " \"", "rb", "\"", ")", " as", " file", ":", "\n", "                ", "    ", "#", " Create", " a", " dictionary", " containing", " the", " metadata", " and", " the", " binary", " file", "\n", "                ", "    ", "data", " =", " ", "{\"", "metadata", "\":", " json", ".", "d", "umps", "(", "metadata", ")", ",", " \"", "file", "\":", " file", "}", "\n", "                ", "    ", "#", " Send", " a", " POST", " request", " to", " the", " server", " URL", " with", " the", " metadata", " and", " file", " data", "\n", "                ", "    ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "data", ")", "\n", "                ", "    ", "#", " Get", " the", " status", " code", " of", " the", " upload", " response", " and", " append", " it", " to", " the", " list", "\n", "                ", "    ", "response", "_", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "    ", "#", " P", "ause", " for", " one"], "logprobs": [-2.2288663387298584, -0.0003830652858596295, -0.0036199060268700123, -0.041065458208322525, -1.6576176881790161, -0.5201368927955627, -0.25750768184661865, -0.25185295939445496, -0.1513179987668991, -0.051216430962085724, -0.2339177131652832, -0.002292744582518935, -0.030197324231266975, -2.128537178039551, -4.470248313737102e-05, -0.009747998788952827, -0.00035446559195406735, -0.3477934002876282, -0.0005429700831882656, -0.005925943609327078, -0.16893379390239716, -0.0011491130571812391, -0.09688804298639297, -0.3384852409362793, -1.5336766242980957, -0.7034504413604736, -0.00458166841417551, -0.0002919009421020746, -0.522372305393219, -0.4414461553096771, -0.012016878463327885, -0.0010305099422112107, -0.020632872357964516, -0.060420289635658264, -0.0014498446835204959, -2.1535959243774414, -0.047301504760980606, -0.11770599335432053, -0.00045503751607611775, -0.0702589750289917, -1.0728830375228426e-06, -0.00018189683032687753, -2.729855441430118e-05, -0.00023755589791107923, -0.0003106111544184387, -0.00037520044133998454, -0.0007570500019937754, -0.5371609926223755, -0.25151485204696655, -1.151850938796997, -0.3136022686958313, -0.07155625522136688, -0.08198415488004684, -0.13618016242980957, -0.07760725170373917, -0.39373713731765747, -0.017550641670823097, -1.7410366535186768, -0.3398270010948181, -0.12799522280693054, -0.221261128783226, -0.006469378247857094, -0.001862221397459507, -2.6103615760803223, -0.017085624858736992, -0.7387035489082336, -0.37921714782714844, -0.4917198717594147, -0.013876157812774181, -0.0037129053380340338, -0.0005354639724828303, -0.17122656106948853, -0.1554289162158966, -0.36709535121917725, -0.09970197081565857, -0.5114824771881104, -0.008099685423076153, -0.2523523271083832, -0.0006834316882304847, -1.5909268856048584, -0.08062446117401123, -0.0007160721579566598, -0.0037589860148727894, -0.18609707057476044, -1.4130795001983643, -0.02444925718009472, -0.00023827097902540118, -0.00045753977610729635, -4.768370445162873e-07, -5.960462772236497e-07, -0.00017820201173890382, -0.00012337400403339416, -0.004840204492211342, -0.0732257291674614, -1.2407654523849487, -3.0208687782287598, -0.008682004176080227, -2.763911724090576, -0.0006168370018713176, -1.913464069366455, -0.3603849411010742, -0.047646645456552505, -0.00279227108694613, -0.061929743736982346, -1.2636104656849056e-05, -0.00023958197562023997, -1.7046782886609435e-05, -0.004045161418616772, -0.0005227153305895627, -0.005723872222006321, -0.00018356545479036868, -0.003662309143692255, -1.1205610462639015e-05, -6.318072337307967e-06, -0.0001280225842492655, -0.0017769037513062358, -0.028602097183465958, -1.1899290084838867, -1.9265567064285278, -0.3400346636772156, -0.40335941314697266, -2.007993698120117, -0.5259479284286499, -1.1032309532165527, -0.0012694880133494735, -0.1406252533197403, -0.00016544880054425448, -0.0003383779258001596, -0.0013498490443453193, -4.8397800128441304e-05, -0.0001308832288486883, -0.00034231049357913435, -2.122936487197876, -0.004485070705413818, -0.000454799213912338, -0.0004297763225622475, -0.00041416651220060885, -0.5990204811096191, -0.07096324115991592, -0.0009146321099251509, -0.002479932736605406, -0.003671573242172599, -0.22006167471408844, -1.0316545963287354, -0.2922057807445526, -0.3438287377357483, -1.7063740491867065, -0.01901937648653984, -2.069415807723999, -0.24486728012561798, -0.21970652043819427, -2.0238585472106934, -0.5770764350891113, -0.3926706612110138, -0.0004563482361845672, -0.0001357701694360003, -1.1212036609649658, -0.07478457689285278, -1.7904672622680664, -0.0015881556319072843, -0.637886106967926, -0.004028895869851112, -0.5134668946266174, -3.528532761265524e-05, -0.0003968881501350552, -2.3841855067985307e-07, -0.0015864893794059753, -0.029382027685642242, -0.02029498480260372, -0.009160749614238739, -0.3088749051094055, -0.17445531487464905, -0.005477894563227892, -0.010368647053837776, -0.05163109302520752, -0.0008132726070471108, -0.003663021605461836, -0.006301059853285551, -0.035086698830127716, -1.0757499933242798, -0.22013121843338013, -0.08530154079198837, -0.001353063271380961, -0.04815458878874779, -0.02309134416282177, -0.10613595694303513, -0.9974631071090698, -0.3642343580722809, -0.022086363285779953, -1.2388697862625122, -0.016377897933125496, -1.2431004047393799, -1.0229579210281372, -0.11509717255830765, -0.0011331572895869613, -0.0007605044520460069, -0.2069758027791977, -0.008694648742675781, -0.0016018429305404425, -0.000226472009671852, -0.002702158410102129, -0.0001864259538706392, -0.030134979635477066, -0.02772984467446804, -1.0455900430679321, -0.008177844807505608, -0.006843580398708582, -1.811964830267243e-05, -0.0008990298374556005, -1.290426254272461, -0.003800551872700453, -0.003587953979149461, -0.041355110704898834, -0.0016693241195753217, -0.0024431876372545958, -0.037075359374284744, -0.016842307522892952, -2.84466814994812, -0.0046363710425794125, -0.13081301748752594, -0.002012015553191304, -0.1422516405582428, -0.0012784174177795649, -0.9502459168434143, -0.005799372214823961, -1.0701781511306763, -0.5752903819084167, -0.021470148116350174, -0.0007992172613739967, -0.004820392467081547, -0.16626957058906555, -0.17846360802650452, -0.0005031750188209116, -0.0007071378640830517, -0.05268317088484764, -0.0020576987881213427, -0.006393573246896267, -0.00045098623377270997, -0.005576767027378082, -0.0012186489766463637, -0.00027450130437500775, -0.001928495243191719, -0.02087491750717163, -0.00626291474327445, -0.003196489764377475, -0.0005603650351986289, -3.099436753473128e-06, -0.0003289635351393372, -0.00040987672400660813, -0.009859907440841198, -0.45504042506217957, -0.05897441506385803, -0.4255959093570709, -0.0006375664379447699, -0.0201778132468462, -0.07408466935157776], "finish_reason": "length"}], "metrics": {"energy": 1101.174400623321, "energy_per_token": 4.301462502434847, "time": 24.653093, "time_per_token": 0.09630114453125}}
{"outputs": [{"text": "try:\n        files = os.listdir(directory)\n\n        if len(files) == 0:\n            raise FileNotFoundError(\n                f\"Directory not found or empty: {directory}\")\n\n        if not url:\n            raise TypeError(\"URL not provided or invalid.\")\n\n        status_codes = []\n        for file in files:\n            file_path = os.path.join(directory, file)\n            with open(file_path, 'rb') as f:\n                response = requests.post(\n                    url, headers=HEADERS, data=json.dumps(metadata), files={file: f})\n                status_codes.append(response.status_code)\n                print(response.status_code)\n\n            # Pause for one second before the next upload\n            time.sleep(1)\n\n        return status_codes\n\n    except FileNotFoundError as e:\n        print(str(e))\n    except TypeError as e:\n        print(str(e))", "tokens": ["try", ":", "\n", "        ", "files", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "        ", "if", " len", "(", "files", ")", " ==", " ", "0", ":", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "\n", "                ", "f", "\"", "Directory", " not", " found", " or", " empty", ":", " {", "directory", "}\"", ")", "\n", "\n", "        ", "if", " not", " url", ":", "\n", "            ", "raise", " Type", "Error", "(", "\"", "URL", " not", " provided", " or", " invalid", ".", "\"", ")", "\n", "\n", "        ", "status", "_", "codes", " =", " []", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "response", " =", " requests", ".", "post", "(", "\n", "                ", "    ", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", ")", ",", " files", "={", "file", ":", " f", "})", "\n", "                ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "                ", "print", "(", "response", ".", "status", "_", "code", ")", "\n", "\n", "            ", "#", " P", "ause", " for", " one", " second", " before", " the", " next", " upload", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "        ", "return", " status", "_", "codes", "\n", "\n", "    ", "except", " File", "NotFound", "Error", " as", " e", ":", "\n", "        ", "print", "(", "str", "(", "e", "))", "\n", "    ", "except", " Type", "Error", " as", " e", ":", "\n", "        ", "print", "(", "str", "(", "e", "))", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.2288663387298584, -0.0003830652858596295, -0.0036199060268700123, -0.041065458208322525, -2.8161277770996094, -0.10331806540489197, -0.5576722025871277, -4.8397800128441304e-05, -0.01168678980320692, -2.7418097943154862e-06, -0.0012281740782782435, -0.01432880386710167, -0.0019125519320368767, -0.024763066321611404, -2.6811251640319824, -0.12962080538272858, -1.0691505670547485, -1.5064365863800049, -0.0008797351038083434, -0.007414679042994976, -0.006931900046765804, -0.24911744892597198, -0.0012942517641931772, -0.004587957635521889, -0.008898601867258549, -0.024477990344166756, -0.006505738943815231, -0.8998172283172607, -0.9779236912727356, -0.0036588646471500397, -0.00010632903286023065, -0.4665070176124573, -2.2946317195892334, -0.0018311651656404138, -0.8645152449607849, -0.2226700335741043, -1.7466837167739868, -2.9139132499694824, -0.03241398185491562, -1.2217648029327393, -0.8447775840759277, -0.22173933684825897, -0.04446597397327423, -0.00636336812749505, -0.031077712774276733, -0.045907117426395416, -0.00522011611610651, -0.11330612748861313, -0.04039362818002701, -1.7480604648590088, -0.17764392495155334, -1.4569393396377563, -1.171168565750122, -0.0018410414922982454, -0.000573351513594389, -0.014961647801101208, -0.21807050704956055, -1.1920858014491387e-05, -0.16301535069942474, -0.31916508078575134, -0.8644822239875793, -1.9002593755722046, -0.7828492522239685, -2.2088165283203125, -0.6082895994186401, -1.4024722576141357, -0.03306339681148529, -0.000847933697514236, -0.000566203030757606, -0.03965684026479721, -0.027394115924835205, -1.0292396545410156, -0.06834553182125092, -0.0732598528265953, -0.006671535782516003, -0.014872860163450241, -0.008833852596580982, -0.8673785924911499, -0.1312619298696518, -0.1403302401304245, -0.2419692873954773, -0.0155552439391613, -0.00047803416964598, -0.000402250443585217, -0.030600907281041145, -0.7185888290405273, -0.07749826461076736, -0.03471255674958229, -0.00034254882484674454, -0.012368641793727875, -5.125986263010418e-06, -5.495397272170521e-05, -1.1324817933200393e-05, -0.0041848947294056416, -0.0004107108688913286, -0.0022475477308034897, -0.00010942813969450071, -0.000442407006630674, -0.00035315475543029606, -0.0008249455713666975, -0.2827843129634857, -0.2937126159667969, -0.0007135705673135817, -0.0002361257211305201, -0.0008922410197556019, -0.0010065733222290874, -5.960462772236497e-07, -0.00020096666412428021, -0.1696087270975113, -0.02874515764415264, -0.0003103728231508285, -0.00032610344351269305, -0.31105050444602966, -0.026121266186237335, -0.001878284616395831, -0.01569279097020626, -2.074704885482788, -0.00268503837287426, -0.005447898991405964, -0.00028832571115344763, -0.13614937663078308, -0.0006387577159330249, -1.0671195983886719, -0.00014518637908622622, -0.0022652698680758476, -0.021995173767209053, -0.03980967029929161, -0.5167229175567627, -0.0014854359906166792, -0.006352114956825972, -1.0132738680113107e-05, -0.00035696811391972005, -1.1868839263916016, -0.1269562989473343, -0.6588294506072998, -2.753696753643453e-05, -0.0015731590101495385, -2.3841830625315197e-06, -0.1413303166627884, -0.042566001415252686, -0.07048641890287399, -0.00930402148514986, -0.035799138247966766, -0.022792158648371696, -0.7950937747955322, -0.005748644471168518, -0.00279845274053514, -0.042496539652347565, -0.002671603811904788, -0.44976767897605896, -0.10759973526000977, -0.002610372845083475, -0.0054283360950648785, -0.0011844770051538944, -0.0003743662964552641, -0.007945124059915543, -0.009347955696284771, -0.010048634372651577, -0.0032367717940360308, -0.0011881680693477392, -6.794906312279636e-06, -0.00040904260822571814, -0.001649330137297511, -0.7011560201644897, -2.5949268341064453, -0.024762600660324097, -2.359731435775757, -0.1425151824951172, -0.47107893228530884, -0.0002840353990904987, -0.00017295771976932883, -0.1302829086780548, -0.020194871351122856, -1.343428373336792, -0.2406207025051117, -0.7288071513175964, -1.2741748094558716, -0.00430229352787137, -0.05014137923717499, -0.20799897611141205, -0.0019693044014275074, -2.4153037071228027, -0.6893555521965027, -0.013601837679743767, -0.31316646933555603, -0.23882640898227692, -0.0030317793134599924, -0.017048826441168785, -0.00012289722508285195, -0.00012516192509792745, -0.00022742546570952982, -0.017250731587409973, -0.00843769870698452, -0.0022567061241716146, -0.12006490677595139, -0.044522758573293686, -0.05119774490594864, -0.010869580321013927, -1.883488948806189e-05, -3.0636318115284666e-05, -0.00399493845179677, -0.5146734714508057, -0.0033233908470720053, -0.006944685708731413, -0.17497402429580688, -0.001261987374164164, -1.585470999998506e-05, -0.02755126729607582, -0.4735836386680603, -0.0017285895301029086, -0.0010649253381416202, -0.0018507986096665263, -0.3027155101299286, -0.005910537671297789, -1.805405855178833, -0.0004220310365781188, -0.00042024365393444896, -0.0056443363428115845, -0.006559981033205986, -0.5872584581375122, -0.000720956246368587, -0.010596911422908306, -6.198863957251888e-06, -0.0017751187551766634, -0.005440548062324524, -0.0034076261799782515, -0.00013410145766101778, -0.0002469711471349001, -0.0068812295794487, -0.0007071378640830517, -0.009343350306153297, -4.053033626405522e-05, -0.00010668662434909493, -0.0023179587442427874, -1.8098448514938354, -2.622600959512056e-06, -2.264974000354414e-06, -6.318072337307967e-06, -1.4543427823809907e-05, -0.1283574253320694], "finish_reason": "stop"}], "metrics": {"energy": 988.112687335968, "energy_per_token": 4.1171361972332, "time": 22.347815, "time_per_token": 0.09311589583333334}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Check if the url is valid\n    if not isinstance(url, str):\n        raise TypeError(f\"Invalid URL: {url}\")\n    status_codes = []\n    # Iterate over the files in the directory\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        # Read the file content\n        with open(filepath, 'rb') as f:\n            data = f.read()\n        # Construct the request data\n        file_data = {\n            'filename': filename,\n            'file': data\n        }\n        # Make the POST request\n        response = requests.post(url, headers=HEADERS, data=json.dumps(file_data),\n                                 files={'file': data}, params=metadata)\n        # Append the status code to the list\n        status_codes.append(response.status_code)\n        # Pause for one second before", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "}\"", ")", "\n", "    ", "#", " Check", " if", " the", " url", " is", " valid", "\n", "    ", "if", " not", " isinstance", "(", "url", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "Invalid", " URL", ":", " {", "url", "}\"", ")", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "        ", "#", " Read", " the", " file", " content", "\n", "        ", "with", " open", "(", "file", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "        ", "#", " Construct", " the", " request", " data", "\n", "        ", "file", "_", "data", " =", " {", "\n", "            ", "'", "filename", "':", " filename", ",", "\n", "            ", "'", "file", "':", " data", "\n", "        ", "}", "\n", "        ", "#", " Make", " the", " POST", " request", "\n", "        ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " data", "=", "json", ".", "d", "umps", "(", "file", "_", "data", ")", ",", "\n", "                ", "                ", " files", "={", "'", "file", "':", " data", "}", ",", " params", "=", "metadata", ")", "\n", "        ", "#", " App", "end", " the", " status", " code", " to", " the", " list", "\n", "        ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "        ", "#", " P", "ause", " for", " one", " second", " before"], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -0.21879440546035767, -0.1481090635061264, -0.09559723734855652, -0.2728474736213684, -0.004981961566954851, -0.02613125368952751, -0.03662266954779625, -0.003636416047811508, -2.50339189733495e-06, -0.0008780676289461553, -1.8000440832111053e-05, -0.27229949831962585, -0.0002261144545627758, -0.0016702761640772223, -0.012630940414965153, -0.001261273049749434, -0.002712501445785165, -0.06376524269580841, -0.004439617041498423, -0.00021991695393808186, -1.7881233361549675e-05, -0.12851227819919586, -0.3060014843940735, -0.13695824146270752, -0.3378855586051941, -2.1409130096435547, -0.006739741191267967, -0.029488518834114075, -0.009799586609005928, -0.0007699147681705654, -0.004337427206337452, -0.0003430254873819649, -0.0006479309522546828, -2.45526123046875, -0.23124709725379944, -0.4017309546470642, -0.05463198944926262, -0.07182012498378754, -0.36015912890434265, -0.07733916491270065, -0.21395304799079895, -0.052262723445892334, -0.0028808305505663157, -0.18967020511627197, -0.06766070425510406, -0.4910522699356079, -0.00011181206355104223, -0.0009265420376323164, -0.000639710808172822, -0.005413871258497238, -0.5880787372589111, -0.0007011815905570984, -0.001388658070936799, -0.002135379472747445, -0.0020354522857815027, -7.867782187531702e-06, -0.041973941028118134, -0.44947969913482666, -0.007036665920168161, -0.6047213077545166, -1.0022042989730835, -0.20043256878852844, -0.008023886010050774, -0.0101179089397192, -0.05079729110002518, -0.0004800597671419382, -0.0002748588449321687, -0.3886747360229492, -3.034104347229004, -0.07744916528463364, -0.06678162515163422, -0.007954703643918037, -0.008059008046984673, -0.04254692420363426, -0.06761246174573898, -0.8705214858055115, -1.4763926267623901, -0.04619195684790611, -0.4682818353176117, -0.9594563245773315, -0.1249004527926445, -0.025128161534667015, -0.004995365627110004, -0.030646344646811485, -0.11802311986684799, -0.0008925982983782887, -0.04032905399799347, -0.8941603899002075, -0.0025054989382624626, -0.00874640978872776, -7.152555099310121e-07, -0.0001851148990681395, -7.033323527139146e-06, -0.0001854724541772157, -0.0002674698771443218, -0.0002535260282456875, -0.00038818930624984205, -0.007780011277645826, -0.9901204109191895, -0.42331311106681824, -0.0002739054325502366, -0.0021115881390869617, -2.7418097943154862e-06, -1.883488948806189e-05, -4.529942543740617e-06, -0.0023290193639695644, -9.119095193454996e-05, -0.0006771179032512009, -6.687417771900073e-05, -0.0008948612376116216, -0.0001267114421352744, -0.0014373458689078689, -0.016169482842087746, -0.34325236082077026, -2.3617382049560547, -0.04603611305356026, -0.15175053477287292, -0.9530340433120728, -0.40850526094436646, -0.0014754373114556074, -0.03200085461139679, -6.317892984952778e-05, -0.00014923889830242842, -0.0004505096294451505, -1.597391747054644e-05, -0.00033682872890494764, -0.154347226023674, -0.023218192160129547, -0.0001984637783607468, -0.0004065402317792177, -0.36498159170150757, -0.01642281375825405, -0.00045849301386624575, -0.0014263942139223218, -0.959047794342041, -0.008407673798501492, -0.4681362807750702, -0.00010716341057559475, -1.0967194612021558e-05, -0.00013529339048545808, -0.003186626825481653, -0.20597167313098907, -0.0769236609339714, -3.6522841453552246, -0.029230952262878418, -0.8423960208892822, -1.9229199886322021, -0.1822984516620636, -0.0029779395554214716, -3.4995298385620117, -0.25465235114097595, -0.3953712582588196, -0.0003543464408721775, -1.1953465938568115, -0.2827962636947632, -0.009244848974049091, -0.30569058656692505, -3.0369186401367188, -0.0021699946373701096, -0.051003143191337585, -0.01738874800503254, -0.006031288765370846, -0.0029879233334213495, -0.012683321721851826, -1.1251230239868164, -0.3390892744064331, -0.16161684691905975, -1.3289355039596558, -0.003997194115072489, -3.707340147229843e-05, -0.0004919749335385859, -0.016954949125647545, -0.2991087734699249, -1.5748018026351929, -0.048712458461523056, -1.4381743669509888, -0.0008266131044365466, -0.3940889537334442, -0.0047140889801084995, -0.25894036889076233, -0.0015769677702337503, -0.0025178655050694942, -0.00019500737835187465, -0.0070094396360218525, -0.000646501372102648, -0.053069982677698135, -0.009229022078216076, -0.43974873423576355, -0.0033852909691631794, -0.016975458711385727, -1.823885577323381e-05, -0.0015301911626011133, -1.1806073188781738, -0.009972864761948586, -0.16258949041366577, -5.781483559985645e-05, -0.00034433635300956666, -1.1920922133867862e-06, -0.0814092680811882, -0.47023501992225647, -0.00012909532233607024, -2.2411095415009186e-05, -0.07851577550172806, -0.003921201918274164, -2.7970166206359863, -0.015473785810172558, -0.0186899546533823, -1.7172255516052246, -0.02850373648107052, -0.16415518522262573, -0.16641774773597717, -0.0032067089341580868, -1.078783631324768, -0.8705747723579407, -0.0016827721847221255, -0.9300729036331177, -0.0184122696518898, -0.008675504475831985, -0.03275887295603752, -0.0025301130954176188, -0.014390731230378151, -0.4773479104042053, -0.9151297211647034, -0.003192449454218149, -0.01516538392752409, -0.40182483196258545, -0.005766660440713167, -0.02469468303024769, -0.004925617016851902, -0.0608760230243206, -0.12647266685962677, -0.001650877296924591, -0.020003724843263626, -0.00021479207498487085, -0.000952267087996006, -0.0004059444472659379, -0.0004801789182238281, -0.003006345359608531, -0.0039107524789869785, -0.0032238198909908533, -0.0012982996413484216, -0.00016437610611319542, -1.0728830375228426e-06, -0.000409161759307608, -0.0006671110168099403, -0.04758060351014137, -0.0852019190788269, -0.7573820352554321, -0.0008990298374556005, -0.02975284680724144, -0.10381194204092026, -0.001437702914699912, -2.2643043994903564], "finish_reason": "length"}], "metrics": {"energy": 1088.811738534928, "energy_per_token": 4.253170853652063, "time": 24.00097, "time_per_token": 0.0937537890625}}
{"outputs": [{"text": "if not os.path.isdir(directory):\n        raise FileNotFoundError('The directory specified does not exist')\n\n    if not requests.get(url, timeout=10):\n        raise TypeError('The URL specified is invalid')\n\n    files_path = os.listdir(directory)\n    responses = []\n\n    for file_path in files_path:\n        filename = os.path.join(directory, file_path)\n        with open(filename, 'rb') as f:\n            files = {'file': f}\n            data = {\n                'file': json.dumps(metadata, separators=(',', ':')),\n            }\n            try:\n                response = requests.post(url, data=data, files=files, headers=HEADERS, timeout=10)\n                responses.append(response.status_code)\n            except requests.exceptions.RequestException as e:\n                print('Error in the server request: ' + str(e))\n            except requests.exceptions.ConnectionError as e:\n                print('Connection error: ' + str(e))\n            except", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "The", " directory", " specified", " does", " not", " exist", "')", "\n", "\n", "    ", "if", " not", " requests", ".", "get", "(", "url", ",", " timeout", "=", "1", "0", "):", "\n", "        ", "raise", " Type", "Error", "('", "The", " URL", " specified", " is", " invalid", "')", "\n", "\n", "    ", "files", "_", "path", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "respons", "es", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " files", "_", "path", ":", "\n", "        ", "filename", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "path", ")", "\n", "        ", "with", " open", "(", "filename", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "file", "':", " f", "}", "\n", "            ", "data", " =", " {", "\n", "                ", "'", "file", "':", " json", ".", "d", "umps", "(", "metadata", ",", " separ", "ators", "=", "('", ",", "'", ",", " ':", "'))", ",", "\n", "            ", "}", "\n", "            ", "try", ":", "\n", "                ", "response", " =", " requests", ".", "post", "(", "url", ",", " data", "=", "data", ",", " files", "=", "files", ",", " headers", "=", "HEAD", "ERS", ",", " timeout", "=", "1", "0", ")", "\n", "                ", "respons", "es", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "except", " requests", ".", "except", "ions", ".", "Request", "Exception", " as", " e", ":", "\n", "                ", "print", "('", "Error", " in", " the", " server", " request", ":", " '", " +", " str", "(", "e", "))", "\n", "            ", "except", " requests", ".", "except", "ions", ".", "Connection", "Error", " as", " e", ":", "\n", "                ", "print", "('", "Connection", " error", ":", " '", " +", " str", "(", "e", "))", "\n", "            ", "except"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.8712463974952698, -0.00036840804386883974, -0.000977157847955823, -0.006423422135412693, -0.01043801661580801, -0.018905097618699074, -0.005002719350159168, -0.04919194430112839, -0.009812453761696815, -0.0004961451631970704, -1.8715683836489916e-05, -1.791264295578003, -1.3835681676864624, -0.38977569341659546, -3.3408801555633545, -0.11050102859735489, -0.0012259118957445025, -0.005426438990980387, -0.8191392421722412, -0.002755299676209688, -0.4431668519973755, -0.0012871085200458765, -1.0587760210037231, -0.11761263012886047, -3.0700342655181885, -0.011844308115541935, -0.8386115431785583, -0.005632719490677118, -0.007755525875836611, -2.4404635429382324, -2.088423252105713, -0.053102992475032806, -1.232023000717163, -0.7753841876983643, -1.8101623058319092, -0.011445457115769386, -0.0021203910000622272, -0.019141480326652527, -0.05651944503188133, -1.4781842764932662e-05, -0.06867969781160355, -0.586920976638794, -1.0666284561157227, -0.7323681712150574, -0.07779641449451447, -0.17313307523727417, -0.0873730406165123, -0.0008797351038083434, -0.01660948619246483, -0.0013568728463724256, -1.9099557399749756, -2.446873903274536, -3.25494122505188, -0.05446435883641243, -0.41288334131240845, -2.47952248173533e-05, -0.5648501515388489, -6.9141146923357155e-06, -0.0018240257631987333, -0.01888345740735531, -0.001958120847120881, -0.012484024278819561, -0.31954655051231384, -2.845899820327759, -0.0008885487914085388, -0.15574266016483307, -0.034136105328798294, -0.00880052987486124, -0.5021013617515564, -0.0007745603215880692, -0.15596391260623932, -0.39965981245040894, -1.1455925703048706, -0.5779731273651123, -0.0038479347713291645, -0.0033211333211511374, -3.4570634852570947e-06, 0.0, -0.0008267321973107755, -0.0015260252403095365, -0.06409792602062225, -3.82171630859375, -0.13216479122638702, -0.11470769345760345, -3.0517112463712692e-05, -0.006981975864619017, -5.125986263010418e-06, -0.3986646831035614, -0.0007289375062100589, -0.006815401837229729, -0.0013815154088661075, -0.005769623443484306, -6.556489552167477e-06, -2.3841855067985307e-07, -0.0003967689990531653, -0.002663519000634551, -0.4269687831401825, -0.6157670021057129, -0.0016235039802268147, -0.00029845553217455745, -0.0053544677793979645, -0.002226970624178648, -0.0933278501033783, -0.018190348520874977, -0.0018042728770524263, -0.00075049843871966, -1.0032206773757935, -0.0657954066991806, -0.0029206499457359314, -0.010931958444416523, -0.6921896934509277, -0.049982182681560516, -0.21324893832206726, -0.19399963319301605, -0.009562993422150612, -0.29524123668670654, -0.010929246433079243, -0.006712151691317558, -0.13257279992103577, -1.6381514072418213, -0.02526579238474369, -2.7211172580718994, -0.31796810030937195, -0.008191323839128017, -0.2289687544107437, -2.09365177154541, -0.49892017245292664, -2.7263290882110596, -5.340433563105762e-05, -0.009466049261391163, -6.6756979322235566e-06, -0.16493666172027588, -0.20035940408706665, -2.2429306507110596, -2.2811732292175293, -1.6689286894688848e-06, -0.03929116949439049, -0.0005255748401395977, -0.0011242267210036516, -0.0032256022095680237, -0.0002926159941125661, -0.001312467036768794, -0.03628358989953995, -1.5579783916473389, -0.018015092238783836, -0.6105536222457886, -0.0002547178009990603, -0.0008266131044365466, -0.18879719078540802, -2.3202998638153076, -0.0017953482456505299, -0.001839375589042902, -0.0037157556507736444, -0.29503145813941956, -0.004315350204706192, -0.0016195764765143394, -0.00014888131408952177, -0.02108725719153881, -0.0009910915978252888, -0.12464465200901031, -0.021390452980995178, -1.7337965965270996, -0.01441987231373787, -0.0015336429933086038, -0.00026246439665555954, -0.14122949540615082, -0.000977276940830052, -0.0004233417857903987, -0.03650049865245819, -0.10910402983427048, -0.0018637683242559433, -0.002597650745883584, -1.2636104656849056e-05, -0.9746167063713074, -0.05506780371069908, -0.0013365155318751931, -0.21069224178791046, -0.03149734437465668, -0.04438421502709389, -0.02664617821574211, -0.17631341516971588, -0.5025814175605774, -1.0847986231965479e-05, -0.00647245766595006, -0.0013567537534981966, -0.01867041550576687, -0.012410204857587814, -0.09254669398069382, -0.02925584465265274, -0.000680691737215966, -9.083335316972807e-05, -0.001636119675822556, -0.0023382960353046656, -0.45199814438819885, -0.013568203896284103, -0.37984704971313477, -0.00015770144818816334, -0.12566106021404266, -4.768370445162873e-07, -0.0021296695340424776, -0.8128449320793152, -9.65590606938349e-06, -0.25363025069236755, -0.08851531893014908, -0.0005179494037292898, -0.004743513651192188, -0.000933926145080477, -0.46813979744911194, -1.7675623893737793, -1.014418125152588, -3.051586151123047, -2.519834041595459, -4.077040195465088, -3.0029914379119873, -0.8963103890419006, -1.0452954769134521, -1.4790151119232178, -0.07620900869369507, -0.0004047528200317174, -0.002952741924673319, -0.03414681926369667, -0.0029374093282967806, -1.0029093027114868, -1.0290350914001465, -0.6991573572158813, -0.00014447122521232814, -0.01815265417098999, -6.794906312279636e-06, -0.000595034915022552, -2.100271224975586, -8.308542601298541e-05, -0.021226845681667328, -0.032036181539297104, -0.002903652610257268, -0.0008459088858217001, -0.0002195594133809209, -0.0032232257071882486, -0.016446853056550026, -1.253158688545227, -0.17777426540851593, -0.3102932274341583, -0.0063267657533288, -0.002987566636875272, -0.001211147871799767, -4.660974445869215e-05, -0.00010990492592100054, -0.0019722788129001856, -0.00044800734031014144, -0.2306191474199295, -0.10697534680366516], "finish_reason": "length"}], "metrics": {"energy": 1046.782840167999, "energy_per_token": 4.088995469406246, "time": 24.021677, "time_per_token": 0.09383467578125}}
{"outputs": [{"text": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory does not exist')\n\n    filenames = os.listdir(directory)\n    paths = [os.path.join(directory, filename) for filename in filenames]\n\n    status_codes = []\n\n    for path in paths:\n        with open(path, 'rb') as f:\n            files = {'file': f}\n            response = requests.post(url, headers=HEADERS, files=files, data=json.dumps(metadata))\n            status_codes.append(response.status_code)\n            time.sleep(1)\n\n    return status_codes\n\n\"\"\"\n    The function first checks if the specified directory exists by using the os.path.exists() method. If the directory\n    does not exist, it raises a FileNotFoundError with the message \"Directory does not exist\".\n\n    If the directory exists, it creates a list of filenames using os.listdir() and then joins each filename with the\n    directory name to create a list of full paths to the files in the directory.\n\n    It", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "Directory", " does", " not", " exist", "')", "\n", "\n", "    ", "fil", "en", "ames", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "    ", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", " for", " filename", " in", " fil", "en", "ames", "]", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "for", " path", " in", " paths", ":", "\n", "        ", "with", " open", "(", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "files", " =", " {'", "file", "':", " f", "}", "\n", "            ", "response", " =", " requests", ".", "post", "(", "url", ",", " headers", "=", "HEAD", "ERS", ",", " files", "=", "files", ",", " data", "=", "json", ".", "d", "umps", "(", "metadata", "))", "\n", "            ", "status", "_", "codes", ".", "append", "(", "response", ".", "status", "_", "code", ")", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "    ", "return", " status", "_", "codes", "\n", "\n", "\"", "\"", "\"", "\n", "    ", "The", " function", " first", " checks", " if", " the", " specified", " directory", " exists", " by", " using", " the", " os", ".", "path", ".", "exists", "()", " method", ".", " If", " the", " directory", "\n", "    ", "does", " not", " exist", ",", " it", " raises", " a", " File", "NotFound", "Error", " with", " the", " message", " \"", "Directory", " does", " not", " exist", "\"", ".", "\n", "\n", "    ", "If", " the", " directory", " exists", ",", " it", " creates", " a", " list", " of", " fil", "en", "ames", " using", " os", ".", "list", "dir", "()", " and", " then", " joins", " each", " filename", " with", " the", "\n", "    ", "directory", " name", " to", " create", " a", " list", " of", " full", " paths", " to", " the", " files", " in", " the", " directory", ".", "\n", "\n", "    ", "It"], "logprobs": [-1.1811845302581787, -0.16605634987354279, -0.08255749940872192, -7.748573807475623e-06, -0.004972709808498621, -1.966933996300213e-05, -0.5429115891456604, -0.0008985534077510238, -0.006745543330907822, -0.012831739149987698, -0.013150038197636604, -0.0053327688947319984, -0.04691188782453537, -0.0065513355657458305, -0.00039283663500100374, -3.2782016205601394e-05, -1.7714054584503174, -0.951805591583252, -0.511760413646698, -0.0013649680186063051, -0.0157033521682024, -0.3401463031768799, -0.004618928302079439, -0.5376506447792053, -0.000985375139862299, -3.862656593322754, -0.0012886562617495656, -0.00019822540343739092, -0.007577486336231232, -0.36611977219581604, -7.390948667307384e-06, -0.002352567622438073, -3.576278118089249e-07, -0.0004805363714694977, -0.0014523444697260857, -0.0004751745145767927, -0.008082776330411434, -0.3304200768470764, -3.489966869354248, -0.007640188094228506, -0.13266561925411224, -0.03227975219488144, -4.410734163684538e-06, -0.00022671037004329264, -3.4570634852570947e-06, -0.008240627124905586, -0.0006529344827868044, -0.002578150946646929, -0.00020013237372040749, -0.18149901926517487, -0.000800408364739269, -0.023157857358455658, -0.0018072477541863918, -0.0007266741595230997, -0.0021738011855632067, -1.1920928244535389e-07, -9.536738616588991e-07, -0.02809721976518631, -0.003262556390836835, -0.5686770081520081, -0.00047708096099086106, -0.7151250839233398, -0.195771723985672, -0.052154555916786194, -0.005347946658730507, -0.03463851660490036, -0.006467601750046015, -0.9755511283874512, -0.00018559163436293602, -0.06655055284500122, -0.1887436956167221, -0.020342061296105385, -0.0012987758964300156, -0.0007120219524949789, -0.0011361341457813978, -0.06440098583698273, -0.751658022403717, -0.004488393664360046, -0.00031025364296510816, -0.0014936492079868913, -0.001595177804119885, -0.04521278664469719, -0.034710370004177094, -0.0009460740839131176, -0.00028308198670856655, -0.9858346581459045, -0.029062949120998383, -0.003740696469321847, -0.01334473304450512, -1.3044837713241577, -0.010492399334907532, -0.24239662289619446, -0.1832124888896942, -0.0036992470268160105, -0.16984966397285461, -0.010406045243144035, -0.008867763914167881, -0.1652034968137741, -1.2478262186050415, -0.00231284461915493, -0.00406308937817812, -0.00021252757869660854, -0.018979843705892563, -0.0005099665140733123, -0.06207696720957756, -0.022100472822785378, -0.41079598665237427, -0.010288652963936329, -0.010291839018464088, -1.2874520507466514e-05, -0.0007211944903247058, -0.26199251413345337, -0.0018429452320560813, -0.00029666791670024395, -0.012190479785203934, -0.22400358319282532, -0.01756458170711994, -0.6485722064971924, -5.769562994828448e-05, -0.00039843725971877575, -6.318072337307967e-06, -0.016895290464162827, -0.03880782797932625, -0.018597986549139023, -0.0038647972978651524, -0.11972177773714066, -0.19532310962677002, -0.0035839155316352844, -0.01368039008229971, -0.002206393051892519, -0.0005915798828937113, -0.0036357033532112837, -0.0036322588566690683, -0.006924915127456188, -0.0013673489447683096, -0.0007017772295512259, -1.847726889536716e-05, -0.00033087024348787963, -0.0016896746819838881, -0.5128995776176453, -0.08720720559358597, -0.0001752223033690825, -0.00023934361524879932, -0.0006901028100401163, -0.027541177347302437, -0.013957275077700615, -0.17658831179141998, -0.18886598944664001, -0.012278798967599869, -0.022432271391153336, -0.014243603684008121, -3.683499380713329e-05, -3.862306402879767e-05, -0.14763720333576202, -0.014424102380871773, -3.1265435218811035, -0.004942343104630709, -0.00023421882360707968, -0.15719656646251678, -3.3113579750061035, -1.3544471263885498, -0.7562443614006042, -2.8103878498077393, -0.10166172683238983, -0.059301167726516724, -0.0036041084676980972, -1.437880039215088, -0.004445432219654322, -0.005189756862819195, -2.351327419281006, -0.2419639527797699, -0.18033339083194733, -0.048507269471883774, -0.24914681911468506, -0.0007857572636567056, -0.003861234989017248, -0.006156290881335735, -0.3978995978832245, -1.2126200199127197, -0.06526128202676773, -0.6524724364280701, -0.34817731380462646, -0.02915685437619686, -1.6983096599578857, -0.10653243213891983, -0.00562228774651885, -0.004766767844557762, -0.00045015214709565043, -0.0018433022778481245, -1.0142779350280762, -0.03311610221862793, -0.07557176798582077, -0.017539983615279198, -0.0004974558250978589, -0.0026915771886706352, -0.29923558235168457, -1.2474721670150757, -0.14583049714565277, -0.4887966215610504, -0.0008023141999728978, -0.0005222387262620032, -0.00026306029758416116, -0.0010806442005559802, -0.021550068631768227, -0.009942295029759407, -0.19591011106967926, -0.15640637278556824, -0.02245674841105938, -0.9861503839492798, -0.0005178302526473999, -0.087642602622509, -0.011550458148121834, -0.00023541064001619816, -2.0368590354919434, -1.9194191694259644, -0.0998399555683136, -0.0004502712981775403, -0.02845831960439682, -1.133212685585022, -9.536697689327411e-06, -2.3841830625315197e-06, -2.0109596252441406, -0.5058826208114624, -4.625213477993384e-05, -0.0016718233237043023, -4.4225667807040736e-05, -0.010461256839334965, -0.42266955971717834, -2.711425542831421, -2.8018929958343506, -0.6957721710205078, -0.03563879430294037, -0.04461681842803955, -0.024504046887159348, -0.17683866620063782, -0.0017417988274246454, -0.20608100295066833, -1.9711041450500488, -0.14191418886184692, -0.2287837564945221, -0.08901776373386383, -0.20817594230175018, -0.0010175295174121857, -1.5369266271591187, -0.67002934217453, -0.41387176513671875, -0.27555131912231445, -0.004173498135060072, -0.38885897397994995, -0.02680019661784172, -0.03798724710941315, -0.17486613988876343, -0.30251219868659973, -0.00871651154011488, -0.0015862513100728393, -1.8915672302246094], "finish_reason": "length"}], "metrics": {"energy": 1061.7961657581336, "energy_per_token": 4.147641272492709, "time": 24.054897, "time_per_token": 0.09396444140625}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The specified directory does not exist')\n\n    # Check if the URL is valid\n    if not url.startswith('http://') and not url.startswith('https://'):\n        raise TypeError('The specified URL is invalid')\n\n    # Initialize an empty list to store the status codes\n    status_codes = []\n\n    # Get all the file names in the directory\n    file_names = os.listdir(directory)\n\n    # Loop through all the file names and upload each file\n    for file_name in file_names:\n\n        # Build the full path for the file\n        file_path = os.path.join(directory, file_name)\n\n        # Open the file and upload it to the server\n        with open(file_path, 'rb') as f:\n            # Add the file to the metadata\n            metadata['file'] = f\n\n            # Upload the file to the server and append the response status code to the list\n            status_codes.append(requests.post(url,", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "('", "The", " specified", " directory", " does", " not", " exist", "')", "\n", "\n", "    ", "#", " Check", " if", " the", " URL", " is", " valid", "\n", "    ", "if", " not", " url", ".", "start", "sw", "ith", "('", "http", "://", "')", " and", " not", " url", ".", "start", "sw", "ith", "('", "https", "://", "')", ":", "\n", "        ", "raise", " Type", "Error", "('", "The", " specified", " URL", " is", " invalid", "')", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " status", " codes", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "#", " Get", " all", " the", " file", " names", " in", " the", " directory", "\n", "    ", "file", "_", "names", " =", " os", ".", "list", "dir", "(", "directory", ")", "\n", "\n", "    ", "#", " Loop", " through", " all", " the", " file", " names", " and", " upload", " each", " file", "\n", "    ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "\n", "        ", "#", " Build", " the", " full", " path", " for", " the", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " file", "_", "name", ")", "\n", "\n", "        ", "#", " Open", " the", " file", " and", " upload", " it", " to", " the", " server", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "#", " Add", " the", " file", " to", " the", " metadata", "\n", "            ", "metadata", "['", "file", "']", " =", " f", "\n", "\n", "            ", "#", " Upload", " the", " file", " to", " the", " server", " and", " append", " the", " response", " status", " code", " to", " the", " list", "\n", "            ", "status", "_", "codes", ".", "append", "(", "requests", ".", "post", "(", "url", ","], "logprobs": [-1.387237310409546, -0.7418907284736633, -0.4910348355770111, -0.21879440546035767, -0.1481090635061264, -0.09559723734855652, -0.2728474736213684, -0.004981961566954851, -0.02613125368952751, -0.03662266954779625, -0.003636416047811508, -2.50339189733495e-06, -0.0008780676289461553, -1.8000440832111053e-05, -0.27229949831962585, -0.0002261144545627758, -0.0016702761640772223, -0.012630940414965153, -0.001261273049749434, -0.002712501445785165, -0.06376524269580841, -0.004439617041498423, -0.00021991695393808186, -1.7881233361549675e-05, -2.317141532897949, -1.0856878757476807, -1.4519267082214355, -0.012733464129269123, -0.017870020121335983, -0.0005501187406480312, -0.0026643513701856136, -0.6100780367851257, -0.0011120808776468039, -0.08991750329732895, -0.002304638037458062, -0.06371233612298965, -0.49207842350006104, -0.051649998873472214, -0.05343517288565636, -1.0284154415130615, -0.05288863927125931, -0.11518843472003937, -0.052430156618356705, -0.0012759171659126878, -0.34627893567085266, -0.07725144922733307, -0.9341498613357544, -1.0871684551239014, -0.014944854192435741, -4.446407547220588e-05, -7.152555099310121e-07, -0.04208984598517418, -0.2074311375617981, -0.2178221195936203, -0.0007968349382281303, -0.0443415641784668, -0.0012310316087678075, -0.00011979816190432757, -1.537788011773955e-05, -5.185469490243122e-05, -1.1920922133867862e-06, -3.576278118089249e-07, -0.003149432362988591, -0.0002445875434204936, -6.01988795096986e-05, -4.541770613286644e-05, -0.004163288976997137, -0.0004839917819481343, -0.0012692499440163374, -0.0033833899069577456, -0.006243486423045397, -3.576272320060525e-06, -0.03109111823141575, -0.6079179048538208, -0.5392235517501831, -0.056599657982587814, -0.015201429836452007, -0.123848095536232, -0.023724839091300964, -0.00032217081752605736, -0.017682645469903946, -0.0013319915160536766, -0.1530989706516266, -1.9051803350448608, -1.3934686183929443, -0.012975545600056648, -0.031805370002985, -0.12650249898433685, -0.1730310171842575, -0.17659281194210052, -0.38291019201278687, -0.01361512579023838, -0.18942739069461823, -0.001490554423071444, -0.056586701422929764, -0.018537722527980804, -0.023054534569382668, -0.005469121038913727, -0.006658746860921383, -0.0006607971154153347, -0.0240266565233469, -0.0004483648226596415, -0.012002037838101387, -2.6219332218170166, -1.8082062005996704, -0.7176727652549744, -1.17832350730896, -0.6410261392593384, -0.10749322175979614, -0.002889507682994008, -0.19476333260536194, -0.07135380804538727, -0.0005289109540171921, -0.2929483950138092, -0.0018146253423765302, -0.03933575376868248, -0.000644237850792706, -0.07127166539430618, -1.9073468138230965e-06, -0.00013410145766101778, -3.576278118089249e-07, -0.00019834458362311125, -0.0007298904820345342, -0.00013314791431184858, -0.0005173536483198404, -0.03667541593313217, -0.00035613393993116915, -0.03248518332839012, -0.48371490836143494, -0.11440365761518478, -1.7664598226547241, -0.05246838927268982, -0.5432549118995667, -0.0022278032265603542, -1.731011152267456, -0.2896026074886322, -0.40437325835227966, -0.17024298012256622, -0.9025735855102539, -0.0005915798828937113, -0.009717777371406555, -0.14448285102844238, -0.03127229958772659, -0.00043525759247131646, -0.00011753345461329445, -0.0004972175229340792, -2.3841855067985307e-07, -3.4570634852570947e-06, -0.0002008474839385599, -9.738924563862383e-05, -2.6046674251556396, -0.004517943598330021, -0.08674583584070206, -3.4934096336364746, -0.028739135712385178, -1.2706828117370605, -0.706278920173645, -2.8989226818084717, -0.031729843467473984, -0.10741838067770004, -0.05946562811732292, -0.0005752577562816441, -0.12244641780853271, -0.008058534935116768, -0.0007780147134326398, -0.00025555206229910254, -0.014800744131207466, -6.318072337307967e-06, -4.088794958079234e-05, -2.7418097943154862e-06, -0.001843778183683753, -0.00017736769223120064, -0.0014646052150055766, -0.00010144196130568162, -0.0008127961773425341, -8.22540732769994e-06, -7.629365427419543e-06, -0.0001380348257953301, -0.00019274283840786666, -0.015235948376357555, -0.0006100462633185089, -0.0071647376753389835, -0.5238544940948486, -0.01521857175976038, -0.0014663906767964363, -1.1103849411010742, -2.822219133377075, -0.014890947379171848, -1.056527853012085, -0.00199524057097733, -0.06527400761842728, -0.21323101222515106, -0.0035159694962203503, -0.027171509340405464, -0.0007460909546352923, -0.0001919085334520787, -0.0005949157639406621, -3.802703940891661e-05, -5.352353764465079e-05, -0.0006258912617340684, -0.01822148635983467, -0.006318829022347927, -0.0005267662927508354, -0.0003782987187150866, -0.6539788246154785, -0.0174255333840847, -0.0005728749092668295, -0.3582876920700073, -1.3654489517211914, -1.6706211566925049, -0.030056089162826538, -0.22553622722625732, -1.3817048072814941, -0.0020666210912168026, -0.48504626750946045, -0.2205915004014969, -0.0026167933829128742, -0.2956085503101349, -0.02533402107656002, -0.0969698429107666, -0.0367082804441452, -0.0003256267518736422, -0.061483122408390045, -0.01919422298669815, -0.5394628643989563, -0.0030228656250983477, -0.014838799834251404, -2.937467098236084, -0.0034380394499748945, -0.051406458020210266, -0.30503642559051514, -0.0005227153305895627, -0.0071196421049535275, -0.7907094359397888, -1.6847227811813354, -0.005999887827783823, -1.5947961807250977, -0.06345739215612411, -0.014953662641346455, -0.01735278032720089, -0.002648895373567939, -0.03984873369336128, -0.01856580749154091, -0.003696396481245756, -0.7087491154670715, -0.0014000862138345838, -0.01766999624669552, -0.002049847040325403, -0.0008007657015696168, -0.006593259517103434, -0.07215235382318497, -0.0019729926716536283, -0.012150674127042294, -0.0005763299996033311, -0.012970720417797565, -0.010063623078167439], "finish_reason": "length"}], "metrics": {"energy": 1064.12600358963, "energy_per_token": 4.156742201521992, "time": 24.040424, "time_per_token": 0.09390790625}}
{"outputs": [{"text": "files = [file for file in os.listdir(directory) if os.path.isfile(\n        os.path.join(directory, file))]\n\n    status_codes = []\n\n    if not files:\n        print(\"There is no file to upload\")\n        return status_codes\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist.\")\n    elif url is None:\n        raise TypeError(\"URL cannot be empty.\")\n\n    for file in files:\n        with open(os.path.join(directory, file), 'rb') as f:\n            file_name = os.path.basename(file)\n            file_type = file_name.split(\".\")[-1]\n            if file_type == \"png\":\n                file_type = \"image/png\"\n            elif file_type == \"jpeg\":\n                file_type = \"image/jpeg\"\n            elif file_type == \"jpg\":\n                file_type = \"image/jpg\"\n            else:\n                file_type = \"", "tokens": ["files", " =", " [", "file", " for", " file", " in", " os", ".", "list", "dir", "(", "directory", ")", " if", " os", ".", "path", ".", "is", "file", "(", "\n", "        ", "os", ".", "path", ".", "join", "(", "directory", ",", " file", "))", "]", "\n", "\n", "    ", "status", "_", "codes", " =", " []", "\n", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "print", "(", "\"", "There", " is", " no", " file", " to", " upload", "\"", ")", "\n", "        ", "return", " status", "_", "codes", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "elif", " url", " is", " None", ":", "\n", "        ", "raise", " Type", "Error", "(", "\"", "URL", " cannot", " be", " empty", ".", "\"", ")", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " file", ")", ",", " '", "rb", "')", " as", " f", ":", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "            ", "file", "_", "type", " =", " file", "_", "name", ".", "split", "(", "\"", ".", "\"", ")", "[-", "1", "]", "\n", "            ", "if", " file", "_", "type", " ==", " \"", "png", "\":", "\n", "                ", "file", "_", "type", " =", " \"", "image", "/", "png", "\"", "\n", "            ", "elif", " file", "_", "type", " ==", " \"", "jpeg", "\":", "\n", "                ", "file", "_", "type", " =", " \"", "image", "/", "jpeg", "\"", "\n", "            ", "elif", " file", "_", "type", " ==", " \"", "jpg", "\":", "\n", "                ", "file", "_", "type", " =", " \"", "image", "/", "jpg", "\"", "\n", "            ", "else", ":", "\n", "                ", "file", "_", "type", " =", " \""], "logprobs": [-3.3017594814300537, -0.13438139855861664, -1.2870244979858398, -2.015019178390503, -0.037996888160705566, -0.005351859610527754, -0.0004101150552742183, -0.007605406921356916, -2.5033637939486653e-05, -0.009981952607631683, -2.9801878554280847e-05, -0.0026026444975286722, -0.06171660125255585, -0.11344129592180252, -0.07934287190437317, -0.3819160461425781, -3.1470757676288486e-05, -0.00020239688456058502, -3.4689302992774174e-05, -0.002727124374359846, -0.0007861146004870534, -0.001824739621952176, -1.8010869026184082, -0.0060554612427949905, -0.02289201319217682, -2.038458114839159e-05, -1.7762025890988298e-05, -1.1920922133867862e-06, -0.00024291902082040906, -0.00012158608296886086, -0.0004418112221173942, -0.000532842765096575, -0.0006771179032512009, -0.0013941340148448944, -0.07282546907663345, -0.02079681120812893, -1.1341907978057861, -0.0007503792876377702, -0.9833599328994751, -0.13393127918243408, -0.07081487774848938, -0.006211144383996725, -0.016275865957140923, -0.008332961238920689, -0.8274050354957581, -0.0004368066438473761, -2.5078165531158447, -0.5481274724006653, -0.45644432306289673, -0.012911058962345123, -0.005129984579980373, -0.004640998784452677, -1.448445200920105, -0.2597639262676239, -0.5477859973907471, -2.1164019107818604, -1.9662922620773315, -0.10036930441856384, -0.6669608354568481, -1.015794038772583, -0.20527085661888123, -0.9333206415176392, -0.005039963871240616, -0.0021504866890609264, -0.47250235080718994, -0.07093081623315811, -0.6568828821182251, -7.426462980220094e-05, -3.1470757676288486e-05, -0.0057817124761641026, -2.964477300643921, -2.827713966369629, -0.3082757294178009, -0.32398712635040283, -9.464769391342998e-05, -0.004130998160690069, -3.5523738915799186e-05, -0.9575119018554688, -0.005382569506764412, -0.0006567466771230102, -0.004804851021617651, -0.006167545914649963, -0.001679201959632337, -0.001490554423071444, -0.15399214625358582, -0.011435085907578468, -0.00045277358731254935, -3.194758028257638e-05, -0.13175036013126373, -0.9577183127403259, -0.8922083973884583, -0.7352629899978638, -0.0038647972978651524, -0.03606019541621208, -2.0642669200897217, -0.026028236374258995, -0.004775903187692165, -0.0008441222598776221, -0.5866150259971619, -3.01723051071167, -2.9972009658813477, -1.1718496084213257, -0.0799701139330864, -0.5579891204833984, -0.0033642619382590055, -0.0006326819420792162, -0.030181709676980972, -0.041739922016859055, -1.4662635294371285e-05, -0.1064944937825203, -0.043207261711359024, -0.8929557800292969, -2.052647590637207, -0.0016421893378719687, -1.7210637331008911, -0.4495891332626343, -0.04343568533658981, -0.001348063233308494, -0.0012478192802518606, -0.47808724641799927, -0.0008347125840373337, -0.22086338698863983, -0.15213854610919952, -0.1440182626247406, -0.012473192997276783, -0.0011312521528452635, -0.0009195152088068426, -0.0656454861164093, -1.534942388534546, -0.0017935632495209575, -0.001121845212765038, -0.05471280217170715, -2.3841830625315197e-06, -2.4199192921514623e-05, -2.0265558760002023e-06, -0.0006613928126171231, -0.00016199229867197573, -0.001369848963804543, -0.00015400654228869826, -0.0007488307310268283, -0.007521169260144234, -0.00011979816190432757, -0.21382001042366028, -0.049064263701438904, -0.0019833433907479048, -0.0005092516075819731, -0.2895166575908661, -0.04547162353992462, -0.0033460839185863733, -0.03714520111680031, -2.8007020950317383, -0.050626300275325775, -2.6713199615478516, -0.07754305005073547, -0.10306066274642944, -1.6093124941107817e-05, -6.282132380874828e-05, -1.7404405298293568e-05, -0.25676167011260986, -9.536738616588991e-07, -4.2676016164477915e-05, -1.8666191101074219, -0.016227660700678825, -0.017699509859085083, -0.12588812410831451, -1.3655999898910522, -0.01897001825273037, -2.3871994018554688, -0.02718009427189827, -0.7901862859725952, -0.1688828468322754, -0.011638481169939041, -0.028704963624477386, -0.02177194505929947, -1.4309815168380737, -0.004324252251535654, -0.007080107927322388, -0.0002648479712661356, -0.33860117197036743, -0.041865572333335876, -0.000779205875005573, -0.0027800267562270164, -0.11157435178756714, -0.2216510772705078, -2.816206932067871, -0.20543403923511505, -0.012277503497898579, -0.05176852270960808, -0.8562626838684082, -0.253347784280777, -2.353322982788086, -0.2687646746635437, -0.004350245930254459, -0.004136340692639351, -0.7484810948371887, -0.014094337821006775, -0.14880065619945526, -0.048861075192689896, -0.04774041101336479, -0.03524932265281677, -0.2503843903541565, -0.0018682897789403796, -0.0009652484441176057, -0.002415241440758109, -0.04874243214726448, -0.13212092220783234, -0.0006473353132605553, -0.00017295771976932883, -0.00048232366680167615, -0.001479246304370463, -0.0018636492313817143, -1.287761926651001, -0.28636282682418823, -0.0005490464391186833, -5.745722592109814e-05, -0.0011967408936470747, -3.218599158572033e-05, -6.878139538457617e-05, -0.002788942540064454, -0.0027027528267353773, -0.0019151695305481553, -0.0004552758182398975, -0.018757812678813934, -0.0003081085451412946, -0.00041333239641971886, -0.014138649217784405, -0.051334552466869354, -0.00028427375946193933, -0.0003014348621945828, -0.00010179955279454589, -0.001416513929143548, -0.0010090741561725736, -0.3144133687019348, -0.0031222188845276833, -0.0001389883691444993, -5.471556869451888e-05, -0.0008952185744419694, -3.135155202471651e-05, -8.272782724816352e-05, -0.0007035640883259475, -0.0007462101057171822, -0.0010795724811032414, -0.0006079017766751349, -0.3631918728351593, -0.00010775939153973013, -0.0001805857609724626, -0.04452435299754143, -1.7447768449783325, -0.00021491125517059118, -0.0006958208978176117, -0.0005820487276650965, -0.32102784514427185, -0.0008362610242329538, -0.000942977552767843, -0.009236699901521206, -0.11608320474624634], "finish_reason": "length"}], "metrics": {"energy": 1056.9267220439915, "energy_per_token": 4.128620007984342, "time": 23.99437, "time_per_token": 0.0937280078125}}
