{"outputs": [{"text": "# Create a Python zipfile.ZipFile object to contain the ZIP contents\n    zipfile = zipfile.ZipFile(io.BytesIO())\n\n    for file_path in file_paths:\n        # If the file_path is a string, open it as a file-like object. Otherwise, assume it's already a file-like object\n        if isinstance(file_path, str):\n            file = open(file_path, 'rb')\n        else:\n            file = file_path\n\n        # Add the file contents to the zipfile\n        zipfile.write(file, arcname=os.path.basename(file.name))\n\n    return FileResponse(zipfile, as_attachment=True, filename='files.zip')", "tokens": ["#", " Create", " a", " Python", " zip", "file", ".", "Z", "ip", "File", " object", " to", " contain", " the", " Z", "IP", " contents", "\n", "    ", "zip", "file", " =", " zip", "file", ".", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "())", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "#", " If", " the", " file", "_", "path", " is", " a", " string", ",", " open", " it", " as", " a", " file", "-", "like", " object", ".", " Otherwise", ",", " assume", " it", "'", "s", " already", " a", " file", "-", "like", " object", "\n", "        ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "            ", "file", " =", " open", "(", "file", "_", "path", ",", " '", "rb", "')", "\n", "        ", "else", ":", "\n", "            ", "file", " =", " file", "_", "path", "\n", "\n", "        ", "#", " Add", " the", " file", " contents", " to", " the", " zip", "file", "\n", "        ", "zip", "file", ".", "write", "(", "file", ",", " arc", "name", "=", "os", ".", "path", ".", "bas", "ename", "(", "file", ".", "name", "))", "\n", "\n", "    ", "return", " File", "Response", "(", "zip", "file", ",", " as", "_", "att", "achment", "=", "True", ",", " filename", "='", "files", ".", "zip", "')", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.3781299591064453, -1.326112151145935, -0.3962860405445099, -4.393616676330566, -0.9596457481384277, -0.09408636391162872, -0.6313126087188721, -0.10367202758789062, -0.011287875473499298, -0.003744971938431263, -0.3442527949810028, -1.7178339958190918, -3.603052854537964, -0.18632744252681732, -1.658158540725708, -0.0006859333370812237, -3.32426381111145, -0.39260923862457275, -0.001544950413517654, -0.5589126944541931, -1.8124420642852783, -1.9295966625213623, -0.840447187423706, -0.0006588910473510623, -0.00024339574156329036, -0.002518935827538371, -0.0002256377338198945, -9.131014667218551e-05, -0.10038213431835175, -0.1686970591545105, -3.421248038648628e-05, -0.00920551735907793, -0.0003381395654287189, -0.9991632699966431, -0.024582678452134132, -0.39883092045783997, -0.00034195298212580383, -1.9537245035171509, -0.32996687293052673, -0.11523039638996124, -0.013312502764165401, -0.014068360440433025, -0.0013291343348100781, -1.4066597032069694e-05, -4.303362584323622e-05, -0.0009754904895089567, -0.01237123180180788, -0.014691149815917015, -0.6914992928504944, -1.223352074623108, -0.3695699870586395, -0.21001723408699036, -0.6641555428504944, -0.011611025780439377, -0.14841391146183014, -0.1913241744041443, -0.63435959815979, -0.10149404406547546, -2.6708803176879883, -0.39210638403892517, -0.3309396803379059, -0.06598345935344696, -0.14527375996112823, -1.85013747215271, -0.007229477632790804, -0.0034596610348671675, -3.264692544937134, -1.2176886796951294, -0.11174013465642929, -0.7895722389221191, -0.12497231364250183, -0.5882004499435425, -0.00016008525562938303, -0.5521647930145264, -0.15551921725273132, -0.06949372589588165, -0.02396858111023903, -0.0007546676206402481, -0.05078006908297539, -0.6087142825126648, -0.002574108075350523, -0.5098625421524048, -0.03968559950590134, -2.2172682292875834e-05, -9.655486064730212e-05, -3.981510963058099e-05, -0.0002623452164698392, -6.174850568640977e-05, -0.008188722655177116, -0.0016237420495599508, -0.002927187131717801, -0.0004325169720686972, -0.5205983519554138, -0.9677683115005493, -0.047234080731868744, -0.002902939449995756, -0.003379588248208165, -0.0007977878558449447, -9.727005090098828e-05, -0.011900029145181179, -0.21742022037506104, -0.009510212577879429, -0.0006629414856433868, -0.023149937391281128, -0.028417881578207016, -0.01010209508240223, -5.483612312673358e-06, -0.000858415151014924, -0.0001528146385680884, -0.01061307080090046, -0.0010219357209280133, -0.0057588377967476845, -0.0006019449210725725, -9.989239333663136e-05, -0.023722976446151733, -0.21701404452323914, -0.0013618728844448924, -0.18673184514045715, -0.7410272359848022, -0.09504172950983047, -0.142971470952034, -2.2271928787231445, -0.08675370365381241, -0.004846966825425625, -0.5873838067054749, -0.2638571858406067, -0.7122294902801514, -0.00033778208307921886, -0.09156816452741623, -0.00685127591714263, -0.0017993940273299813, -1.0625615119934082, -0.011649910360574722, -0.05233558267354965, -0.1283850073814392, -0.5408071875572205, -0.0015310243470594287, -0.0033906372264027596, -0.28305983543395996, -0.0003924791526515037, -0.0020366418175399303, -0.0014016337227076292, -0.013099093921482563, -2.3841855067985307e-07, -0.00016699827392585576, -0.010377849452197552, -0.434492826461792, -0.002149416133761406, -0.2727636992931366, -0.012977546080946922, -0.8971369862556458, -1.1710255146026611, -2.577082872390747, -0.005983535200357437, -6.9141146923357155e-06, -0.0002766464895103127, -0.039370134472846985, -6.437094270950183e-05, -0.7929569482803345, -0.6243578195571899, -0.003498388221487403, -0.002767187776044011, -1.2516897186287679e-05, -0.001994883641600609, -0.019112592563033104, -0.5630197525024414, -0.10046084225177765, -0.5270755887031555, -0.05164535716176033, -0.0029601112473756075, -0.00016437610611319542, -0.029208723455667496, -0.7154303789138794, -4.768370445162873e-07, -2.3841855067985307e-07, -0.00020823694649152458, -8.332382276421413e-05, -1.9655787944793701, -0.003479856299236417], "finish_reason": "stop"}], "metrics": {"energy": 179.6755310440064, "energy_per_token": 1.003773916446963, "time": 7.792591, "time_per_token": 0.04353402793296089}}
{"outputs": [{"text": "response = FileResponse(content_type='application/zip')\n    response['Content-Disposition'] = f'attachment; filename=\"files.zip\"'\n    zip_buffer = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED)\n    for path in file_paths:\n        if isinstance(path, str):\n            path = os.path.realpath(os.path.expanduser(path))\n            zip_file.write(path, os.path.basename(path))\n        elif isinstance(path, io.BytesIO):\n            zip_file.writestr('test.zip', path.getvalue())\n    zip_file.close()\n    response.content = zip_buffer.getvalue()\n    return response", "tokens": ["response", " =", " File", "Response", "(", "content", "_", "type", "='", "application", "/", "zip", "')", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "'", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "file", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "'", ",", " zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", "\n", "    ", "for", " path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "path", ",", " str", "):", "\n", "            ", "path", " =", " os", ".", "path", ".", "real", "path", "(", "os", ".", "path", ".", "expand", "user", "(", "path", "))", "\n", "            ", "zip", "_", "file", ".", "write", "(", "path", ",", " os", ".", "path", ".", "bas", "ename", "(", "path", "))", "\n", "        ", "elif", " isinstance", "(", "path", ",", " io", ".", "Bytes", "IO", "):", "\n", "            ", "zip", "_", "file", ".", "w", "rit", "est", "r", "('", "test", ".", "zip", "'", ",", " path", ".", "get", "value", "())", "\n", "    ", "zip", "_", "file", ".", "close", "()", "\n", "    ", "response", ".", "content", " =", " zip", "_", "buffer", ".", "get", "value", "()", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.8485674858093262, -1.7838964462280273, -1.3820632696151733, -0.1227726936340332, -0.39108699560165405, -0.008225847966969013, -0.0006000387365929782, -0.01401499379426241, -0.22712644934654236, -0.038416147232055664, -0.1648513525724411, -0.7661433219909668, -0.13869644701480865, -0.008538051508367062, -0.00036221143091097474, -0.14894302189350128, -0.00011872540198964998, -2.777537883957848e-05, -0.047954168170690536, -1.6081486940383911, -0.19869443774223328, -0.0019508631667122245, -0.0003599472693167627, -0.001918857917189598, -0.006078684702515602, -0.04064764827489853, -0.0761532187461853, -0.39238959550857544, -0.012638945132493973, -0.00038366109947673976, -0.002322002314031124, -0.007656868547201157, -0.018127601593732834, -0.432343453168869, -2.097956657409668, -0.20579993724822998, -1.2709732055664062, -0.004975912161171436, -0.012597862631082535, -3.325883881188929e-05, -0.037895429879426956, -0.0003477922291494906, -0.003411784302443266, -0.010522126220166683, -0.07470780611038208, -0.9811128377914429, -0.12857434153556824, -0.5979263186454773, -0.008387104608118534, -0.05867340788245201, -0.00037102968781255186, -4.5060096454108134e-05, -0.002167615806683898, -0.001930517959408462, -6.19869097135961e-05, -0.0012822272256016731, -0.0064897495321929455, -0.00019095504831057042, -3.0874729418428615e-05, -0.01439507957547903, -0.3704644441604614, -0.055876411497592926, -1.316882610321045, -0.0020293849520385265, -0.4751650393009186, -0.000200609109015204, -3.111314072157256e-05, -0.0012698451755568385, -0.022575868293642998, -0.0012462714221328497, -0.0014224658953025937, -0.00032205163734033704, -0.0005446380819194019, -0.05218103155493736, -0.010752124711871147, -0.18245728313922882, -0.13863377273082733, -1.4555668830871582, -0.041326627135276794, -0.00456624198704958, -6.341733387671411e-05, -5.030505417380482e-05, -0.0016811060486361384, -0.00530905369669199, -0.001352706109173596, -0.35833343863487244, -0.6622300148010254, -8.141662692651153e-05, -0.0003594706067815423, -0.0010773098329082131, -0.1696052998304367, -0.08113956451416016, -0.0448189340531826, -0.00044955636258237064, -2.9026315212249756, -0.1776382327079773, -2.4660632610321045, -0.0006509092636406422, -0.02351468987762928, -0.0007813499541953206, -1.9071521759033203, -2.753696753643453e-05, -0.00030298411729745567, -2.472194194793701, -0.0004949536523781717, -0.0038459161296486855, -0.0017488199518993497, -0.235704705119133, -0.05236635357141495, -0.00025817399728111923, -0.07524564862251282, -0.00589690962806344, -0.05925825238227844, -0.11302604526281357, -1.2781342267990112, -0.006011263467371464, -0.007392078172415495, -0.0007742029847577214, -0.0033509552013128996, -0.0007453762227669358, -0.02838277257978916, -0.08528949320316315, -0.39638322591781616, -6.735097849741578e-05, -0.0008486483711749315, -0.003302004188299179, -0.09609829634428024, -2.3841855067985307e-07, -8.999896090244874e-05, -0.0018560340395197272, -0.04328843206167221, -0.008247129619121552, -0.033923059701919556, -1.1653602123260498, -0.18349124491214752, -8.296622399939224e-05, -0.0003815161471720785, -0.0003678122302517295, -0.5667268633842468, -0.00016509123088326305, -0.9656013250350952, -0.0007047553663142025, -0.07695887237787247, -0.007620431482791901, -0.00030155404238030314, -0.0822153091430664, -0.0017500099493190646, -0.006472102366387844, -0.00021884430316276848, -0.06662482768297195, -9.202533692587167e-05, -0.00012242044613230973, -0.0019336113473400474, -2.19441819190979, -3.061532497406006, -0.0981106236577034, -1.3411005735397339, -0.00664560217410326, -0.0003408804477658123, -0.03047788329422474, -0.12768900394439697, -0.15448246896266937, -0.14974714815616608, -0.016328759491443634, -0.011386411264538765, -0.9531803727149963, -0.07764497399330139, -0.004072468727827072, -0.3503912687301636, -0.000576449150685221, -0.006859208457171917, -0.0003516055876389146, -0.0029645089525729418, -0.01830201782286167, -0.7688488960266113, -0.05818641558289528, -0.4467516243457794, -0.0703008696436882, -0.00906553864479065, -0.0005501187406480312, -7.366862701019272e-05, -0.0020105878356844187, -0.006098116282373667, -0.10519371926784515, -0.005335377529263496, -0.009732061997056007, -0.018621739000082016, -0.714943528175354, -0.0008933129138313234, -0.6305913329124451, -5.960462772236497e-07, -2.3841855067985307e-07, -7.068861305015162e-05, -7.033100700937212e-05, -0.11415483057498932], "finish_reason": "stop"}], "metrics": {"energy": 202.17669456291196, "energy_per_token": 1.015963289260864, "time": 8.625961, "time_per_token": 0.04334653768844221}}
{"outputs": [{"text": "if len(file_paths) < 1:\n        return FileResponse(b'')  # No need to create a zip\n\n    request = HttpRequest() if request is None else request\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as myZip:\n        for file_path in file_paths:\n            if isinstance(file_path, str):\n                try:\n                    with open(file_path, 'rb') as file:\n                        myZip.writestr(os.path.basename(file_path), file.read())\n                except FileNotFoundError:\n                    continue\n            else:\n                myZip.writestr(os.path.basename(file_path), file_path.read())\n\n    zip_file.seek(0)\n    return FileResponse(zip_file, as_attachment=True, filename='files.zip')", "tokens": ["if", " len", "(", "file", "_", "paths", ")", " <", " ", "1", ":", "\n", "        ", "return", " File", "Response", "(", "b", "'')", "  ", "#", " No", " need", " to", " create", " a", " zip", "\n", "\n", "    ", "request", " =", " Http", "Request", "()", " if", " request", " is", " None", " else", " request", "\n", "    ", "zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "file", ",", " '", "w", "')", " as", " my", "Z", "ip", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "try", ":", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "        ", "my", "Z", "ip", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " file", ".", "read", "())", "\n", "                ", "except", " File", "NotFound", "Error", ":", "\n", "                ", "    ", "continue", "\n", "            ", "else", ":", "\n", "                ", "my", "Z", "ip", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " file", "_", "path", ".", "read", "())", "\n", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "\n", "    ", "return", " File", "Response", "(", "zip", "_", "file", ",", " as", "_", "att", "achment", "=", "True", ",", " filename", "='", "files", ".", "zip", "')", "\n", "\n", "def"], "logprobs": [-2.610950469970703, -2.273587703704834, -0.00096703483723104, -0.014157219789922237, -9.179073458653875e-06, -4.6967357775429264e-05, -0.005165445152670145, -2.1284732818603516, -0.0037719309329986572, -0.19245374202728271, -0.021511917933821678, -0.015240761451423168, -0.0009273757459595799, -0.8273231387138367, -0.638769268989563, -0.00162743148393929, -0.34722670912742615, -1.5674893856048584, -2.014610767364502, -1.9267326593399048, -0.0005353448214009404, -2.303100109100342, -2.821640968322754, -0.2030361294746399, -1.7689177989959717, -0.4865313768386841, -0.9138035178184509, -3.196211338043213, -0.4461205303668976, -0.00015472168161068112, -3.0357491970062256, -0.7171062231063843, -0.2252034693956375, -0.0001867835089797154, -0.014270045794546604, -2.6121063232421875, -0.19998829066753387, -0.05552665889263153, -0.011680780909955502, -0.006091125775128603, -0.001733230659738183, -0.18364255130290985, -0.5143886804580688, -1.2636594772338867, -0.2287834733724594, -1.1539216041564941, -0.057110730558633804, -0.10255242884159088, -3.9457496313843876e-05, -0.026841280981898308, -0.0009459549910388887, -0.01469584833830595, -0.03821640834212303, -0.22013400495052338, -0.6616801023483276, -0.8404736518859863, -0.0009076051646843553, -6.222531374078244e-05, -0.0019929802510887384, -0.0026922905817627907, -0.00013171759201213717, -0.004268345423042774, -0.009358230978250504, -0.0004887578543275595, -3.349725011503324e-05, -0.016966786235570908, -0.38501885533332825, -0.050379447638988495, -0.5005515217781067, -8.391981828026474e-05, -3.2752633094787598, -3.0134689807891846, -0.0020122535061091185, -0.058142777532339096, -0.019312795251607895, -0.006268601398915052, -0.08316254615783691, -0.48764485120773315, -0.1978091150522232, -0.024484504014253616, -0.011808612383902073, -0.0018567480146884918, -1.3470558769768104e-05, -3.564294092939235e-05, -0.0010874316794797778, -0.005265890154987574, -0.0033502422738820314, -0.3937426209449768, -0.7106384038925171, -5.8530047681415454e-05, -0.001538880169391632, -4.8636207793606445e-05, -0.0009286858257837594, -0.0006015875260345638, -0.2020319253206253, -0.0872715562582016, -0.08844298124313354, -0.0008074360666796565, -2.8422112464904785, -0.00022313489171210676, -0.021968001499772072, -0.0002627027570270002, -0.00039426659350283444, -0.9160552620887756, -0.06735004484653473, -0.0019512200960889459, -0.03343008831143379, -7.629365427419543e-06, -0.00024673278676345944, -0.03497055917978287, -0.0914326161146164, -0.013143802992999554, -0.0017203782917931676, -0.0004144048143643886, -0.8082394599914551, -0.25248104333877563, -0.02372879721224308, -0.00024971229140646756, -0.0007827793597243726, -0.24178855121135712, -0.0004215544031467289, -3.3378546504536644e-06, -3.9219088648678735e-05, -0.40202438831329346, -0.0006342306733131409, -0.00013612773909699172, -0.0010617101797834039, -0.043079499155282974, -1.0141210556030273, -0.0005455912905745208, -0.0015534012345597148, -0.0019135037437081337, -0.025307869538664818, -7.152555099310121e-07, -7.974783511599526e-05, -0.003917402122169733, -0.06597832590341568, -0.0006613928126171231, -0.0035475671757012606, -0.006008419673889875, -0.007497742306441069, -0.003418080974370241, -0.0005193791585043073, -0.011881769634783268, -0.02253006398677826, -0.004472016356885433, -0.07692123204469681, -0.5368665456771851, -0.004722157027572393, -7.354942499659956e-05, -0.09777890145778656, -0.07045997679233551, -0.0002699726028367877, -0.000192504478036426, -1.9418365955352783, -0.24308723211288452, -0.07336731255054474, -0.39863961935043335, -2.0265373677830212e-05, -0.08031967282295227, -0.00026258357684127986, -0.25278347730636597, -0.0014022289542481303, -2.0861407392658293e-05, -3.0040289857424796e-05, -0.003189953975379467, -3.099436753473128e-06, -1.7046782886609435e-05, -0.00010775939153973013, -0.025088751688599586, -0.2062794715166092, -0.0006887924391776323, -0.0019792981911450624, -0.0005899119423702359, -0.012029953300952911, -8.654219709569588e-05, -0.001158400671556592, -0.07181157916784286, -0.017208782956004143, -0.05865823104977608, -1.2287485599517822, -0.006582956295460463, -0.012083660811185837, -0.0034730848856270313, -0.00016699827392585576, -0.804151713848114, -0.06421498209238052, -0.023753592744469643, -0.016170069575309753, -0.5360773205757141, -0.016144264489412308, -1.279223918914795, -0.010229893028736115, -0.11615580320358276, -0.049812864512205124, -0.011787171475589275, -0.00035172473872080445, -0.004524114541709423, -0.002091603120788932, -0.09153737872838974, -0.2031971514225006, -1.3509864807128906, -0.002756131812930107, -1.1324817933200393e-05, -0.00041559641249477863, -0.04235486313700676, -0.00043585337698459625, -6.6756979322235566e-06, -0.10669165849685669, -0.4750918745994568, -0.003157037775963545, -0.0049392590299248695, -1.1324817933200393e-05, -0.008104060776531696, -0.04379585385322571, -0.15189801156520844, -0.07793712615966797, -0.713689386844635, -0.050880566239356995, -0.0035991196054965258, -0.00021371940965764225, -0.250779926776886, -1.1185275316238403, -0.03076888434588909, -0.45160093903541565], "finish_reason": "stop"}], "metrics": {"energy": 236.61281695842735, "energy_per_token": 1.0516125198152326, "time": 9.88742, "time_per_token": 0.04394408888888889}}
{"outputs": [{"text": "files_to_zip = []\n    for file_path in file_paths:\n        if isinstance(file_path, str):\n            try:\n                with open(file_path, 'rb') as f:\n                    files_to_zip.append(io.BytesIO(f.read()))\n            except FileNotFoundError:\n                print(f\"File {file_path} not found.\")\n        else:\n            files_to_zip.append(file_path)\n    response = FileResponse(io.BytesIO(zipfile.ZipFile(io.BytesIO(zipfile.ZipFile(files_to_zip).read())).read()))\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\n    return response", "tokens": ["files", "_", "to", "_", "zip", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "            ", "try", ":", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "files", "_", "to", "_", "zip", ".", "append", "(", "io", ".", "Bytes", "IO", "(", "f", ".", "read", "()))", "\n", "            ", "except", " File", "NotFound", "Error", ":", "\n", "                ", "print", "(", "f", "\"", "File", " {", "file", "_", "path", "}", " not", " found", ".", "\"", ")", "\n", "        ", "else", ":", "\n", "            ", "files", "_", "to", "_", "zip", ".", "append", "(", "file", "_", "path", ")", "\n", "    ", "response", " =", " File", "Response", "(", "io", ".", "Bytes", "IO", "(", "zip", "file", ".", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "(", "zip", "file", ".", "Z", "ip", "File", "(", "files", "_", "to", "_", "zip", ")", ".", "read", "()))", ".", "read", "()))", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-3.5346145629882812, -1.6995652914047241, -1.5075911283493042, -0.000458254711702466, -0.16363315284252167, -0.02795765921473503, -0.44680097699165344, -0.01291658915579319, -0.3978993594646454, -0.3475189805030823, -0.4810400903224945, -0.1277381032705307, -0.02591591700911522, -0.012537590228021145, -0.0021142051555216312, -1.9311717551317997e-05, -2.038458114839159e-05, -0.0025046665687114, -0.003784044412896037, -0.004884572699666023, -0.1954670399427414, -0.6711353659629822, -9.142934868577868e-05, -0.0012704405235126615, -6.508615479106084e-05, -0.00021360022947192192, -0.0007951673469506204, -0.390759140253067, -0.15905068814754486, -0.038773540407419205, -0.0008819981012493372, -1.947206974029541, -5.2689116273541003e-05, -0.011057410389184952, -0.00043883229955099523, -0.5972487330436707, -0.1437627673149109, -0.0026884861290454865, -0.02484295703470707, -4.6491513785440475e-06, -0.0001161031104857102, -0.031797170639038086, -0.2363034039735794, -0.010190481320023537, -0.001923617091961205, -0.0004456242313608527, -0.581118643283844, -0.053888000547885895, -0.009409720078110695, -0.00013183678674977273, -0.0005317704635672271, -0.2979143261909485, -0.00041976699139922857, -6.961580220377073e-05, -1.2397689715726301e-05, -0.000311802898067981, -0.001347468001767993, -0.0010764762992039323, -1.1126713752746582, -1.6499254703521729, -4.339123915997334e-05, -0.1705746352672577, -0.00025328766787424684, -0.001498410478234291, -0.01922614686191082, -4.8874615458771586e-05, -0.0002834395272657275, -0.008023886010050774, -0.012446467764675617, -0.09178820252418518, -0.0010162194957956672, -0.6209547519683838, -0.004885758738964796, -7.116541382856667e-05, -0.09370815753936768, -0.02372751757502556, -0.0004175029753241688, -2.5092933177948, -0.17102141678333282, -0.2783789038658142, -0.35831525921821594, -0.46770235896110535, -2.1803481578826904, -0.0028317375108599663, -0.00027414379292167723, -0.0013043713988736272, -0.01797165535390377, -0.1378573179244995, -0.0010206258157268167, -0.5584263801574707, -0.18874508142471313, -0.00269205286167562, -0.01890147104859352, -0.28578174114227295, -0.4683745801448822, -3.123234637314454e-05, -0.022341346368193626, -0.00047231485950760543, -0.17560449242591858, -0.00010394509445177391, -8.77341881277971e-05, -1.7404405298293568e-05, -1.8954096958623268e-05, -0.0005138983833603561, -0.0007271506474353373, -0.0012372228084132075, -0.33664360642433167, -4.7205765440594405e-05, -4.3748852476710454e-05, -0.01995791867375374, -0.010569309815764427, -0.6472686529159546, -1.448492407798767, -0.007277408614754677, -0.04656444862484932, -8.654219709569588e-05, -0.00747881131246686, -0.8297813534736633, -0.0002901133266277611, -0.007687389384955168, -0.0002554328821133822, -0.017003236338496208, -0.2864229083061218, -0.04535360261797905, -0.0013397298753261566, -0.05507694184780121, -0.018905682489275932, -0.0011261318577453494, -0.13539139926433563, -0.5853411555290222, -0.0002557904226705432, -0.0026076382491737604, -5.376194530981593e-05, -1.362775444984436, -0.7153222560882568, -0.09008365124464035, -0.0016669438919052482, -0.074027881026268, -0.013293327763676643, -0.009365788660943508, -0.4722512662410736, -0.8263047933578491, -0.003262556390836835, -0.0012274596374481916, -4.649054244509898e-05, -0.0008942657150328159, -0.5689790844917297, -0.0007337023853324354, -0.42552316188812256, -0.33268630504608154, -0.02065400779247284, -0.13862599432468414, -0.43051525950431824, -0.008844368159770966, -0.011019682511687279, -0.08441635966300964, -0.1154242530465126, -0.019537273794412613, -0.0002858230145648122, -0.5672520399093628, -2.062299427052494e-05, -0.004033525940030813, -0.07930553704500198, -0.0015237637562677264, -0.0004215544031467289, -0.009343704208731651, -0.003201955696567893, -0.037084780633449554, -0.00997510738670826, -0.11725106090307236, -0.03183458372950554, -0.00883066188544035, -0.0005797850899398327, -0.005387312266975641, -5.340433563105762e-05, -2.0146166207268834e-05, -0.005327907390892506, -0.29608190059661865, -0.0019496734021231532, -0.00029583368450403214, -0.02144622802734375, -0.0038213341031223536, -0.00764006981626153, -0.050665054470300674, -0.16719283163547516, -0.004085053224116564, -0.00020251607929822057, -0.002068524481728673, -0.003594011999666691, -0.013154273852705956, -0.0295499786734581, -0.08204389363527298, -0.0009513143450021744, -0.8443825840950012, -8.344646857949556e-07, -2.3841855067985307e-07, -0.0001573438785271719, -0.00011514954530866817, -2.1677815914154053, -0.003502308391034603], "finish_reason": "stop"}], "metrics": {"energy": 199.46427975082395, "energy_per_token": 0.9973213987541197, "time": 8.840437, "time_per_token": 0.044202185}}
{"outputs": [{"text": "zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in file_paths:\n            if os.path.isfile(file_path):\n                zip_file.write(file_path, os.path.basename(file_path))\n            else:\n                zip_file.writestr(os.path.basename(file_path), file_path)\n    zip_buffer.seek(0)\n\n    response = FileResponse(zip_buffer, as_attachment=True)\n    response['Content-Disposition'] = f'attachment; filename=\"files.zip\"'\n    return response", "tokens": ["zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "'", ",", " zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "                ", "zip", "_", "file", ".", "write", "(", "file", "_", "path", ",", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", "\n", "            ", "else", ":", "\n", "                ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " file", "_", "path", ")", "\n", "    ", "zip", "_", "buffer", ".", "seek", "(", "0", ")", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "_", "buffer", ",", " as", "_", "att", "achment", "=", "True", ")", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "'", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.5390186309814453, -0.16460354626178741, -0.9761742949485779, -0.004129811190068722, -0.010017359629273415, -3.540453326422721e-05, -0.01855281926691532, -0.00037996700848452747, -0.002871915465220809, -0.014420459978282452, -0.08506321161985397, -0.8785428404808044, -0.6388904452323914, -0.0005851463647559285, -6.270212179515511e-05, -0.00199524057097733, -0.001487578614614904, -0.0004146431456319988, -0.00366587215103209, -0.004940919578075409, -0.00018761781393550336, -0.00023064337437972426, -0.004671018570661545, -0.2967691421508789, -0.08745081722736359, -0.9534406661987305, -0.0006257721688598394, -0.5071927309036255, -0.00018654513405635953, -2.8729025871143676e-05, -0.0015488782664760947, -0.013567380607128143, -0.005371305160224438, -0.0015549485106021166, -0.00021884430316276848, -0.0005138983833603561, -0.03705456852912903, -5.7338023907504976e-05, -0.23599106073379517, -0.06551855057477951, -0.2102952003479004, -0.002336274366825819, -0.0058698891662061214, -0.0024756519123911858, -0.037103503942489624, -0.2863122522830963, -0.10264354944229126, -0.017149606719613075, -0.01410350576043129, -0.0015307862777262926, -1.680836794548668e-05, -2.9205850296420977e-05, -0.0008472190820612013, -0.0025027638766914606, -0.002659714547917247, -0.2332591414451599, -1.9868719577789307, -0.00037722624256275594, -0.0008236353169195354, -8.67805938469246e-05, -0.07352914661169052, -0.016359135508537292, -9.548207890475169e-05, -0.0018266435945406556, -2.9802276912960224e-06, -0.0001380348257953301, -0.03396892175078392, -0.03627427667379379, -0.0006165986997075379, -0.2897103726863861, -0.0024175008293241262, -0.005502317100763321, -0.00029380773776210845, -0.0019183820113539696, -0.00025090406415984035, -0.033694759011268616, -4.8993817472364753e-05, -9.405170567333698e-05, -0.24998311698436737, -0.09866086393594742, -0.0003781795676331967, -0.00011062010162277147, -0.0037680119276046753, -0.011186382733285427, -1.1920928244535389e-07, -5.6265202147187665e-05, -0.0019358720164746046, -3.707340147229843e-05, -6.282132380874828e-05, -0.02204659953713417, -0.00950182881206274, -0.06714931130409241, -0.44481194019317627, -3.218599158572033e-05, -0.05143272876739502, -0.00051115796668455, -0.2216036170721054, -0.0011310139670968056, -0.005120022222399712, -8.272782724816352e-05, -0.08314269781112671, -0.00020692592079285532, -4.7205765440594405e-05, -0.007486620452255011, -0.008487817831337452, -0.17902877926826477, -0.0001323135511483997, -0.000179036331246607, -0.000377583724912256, -0.012893995270133018, -2.50339189733495e-06, -3.707340147229843e-05, -0.0014942444395273924, -1.883488948806189e-05, -7.939023635117337e-05, -0.0029487009160220623, -0.0016856284346431494, -0.021583668887615204, -0.0012530578533187509, -0.0004949536523781717, -0.025990720838308334, -0.011461484245955944, -0.3071175515651703, -1.2740659713745117, -0.010174669325351715, -0.17959554493427277, -0.01715066283941269, -0.003017992712557316, -0.00047672350774519145, -0.0013436584267765284, -0.0021222943905740976, -0.06351489573717117, -2.7686171531677246, -0.00014304091746453196, -0.5316689014434814, -0.00764929736033082, -0.043039992451667786, -1.1920858014491387e-05, -0.0017149040941148996, -0.07933494448661804, -0.0003045333724003285, -4.076874756719917e-05, -0.6937947273254395, -0.590503454208374, -0.0017987991450354457, -0.005447661969810724, -8.106198947643861e-06, -0.0031655936036258936, -0.012708981521427631, -0.733477771282196, -0.012375706806778908, -0.04174712672829628, -0.0678994283080101, -0.06439830362796783, -0.015222211368381977, -0.00024673278676345944, -0.7117543816566467, -0.00013624693383462727, -5.9126061387360096e-05, -0.0012206730898469687, -1.5575995445251465, -0.19383642077445984, -0.0035902110394090414, -0.0002517383254598826, -0.0016379047883674502, -0.004812206607311964, -0.05882954224944115, -0.0657738596200943, -0.8598946928977966, -0.01402874756604433, -0.0005466635921038687, -0.0016581370728090405, -0.01080920360982418, -0.013596074655652046, -0.0991768017411232, -1.0381593704223633, -0.0003912875254172832, -0.6619733572006226, -8.344646857949556e-07, -2.3841855067985307e-07, -4.851700214203447e-05, -6.270212179515511e-05, -2.5130622386932373, -0.002878928557038307], "finish_reason": "stop"}], "metrics": {"energy": 191.39703201484673, "energy_per_token": 1.040201260950254, "time": 8.20442, "time_per_token": 0.044589239130434784}}
{"outputs": [{"text": "response = FileResponse()\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition']\n    response['Content-Disposition']\n    with zipfile.ZipFile(io.BytesIO()) as zip_buffer:\n        for file_path in file_paths:\n            if isinstance(file_path, str):\n                zip_buffer.write(file_path, arcname=os.path.basename(file_path))\n            else:\n                zip_buffer.writestr(os.path.basename(file_path.name), file_path.read())\n    response.content = zip_buffer.getbuffer()\n    return response", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "())", " as", " zip", "_", "buffer", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "zip", "_", "buffer", ".", "write", "(", "file", "_", "path", ",", " arc", "name", "=", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", "\n", "            ", "else", ":", "\n", "                ", "zip", "_", "buffer", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ".", "name", ")", ",", " file", "_", "path", ".", "read", "())", "\n", "    ", "response", ".", "content", " =", " zip", "_", "buffer", ".", "get", "buffer", "()", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -1.006925344467163, -0.7357729077339172, -0.018847426399588585, -0.0006009918288327754, -0.2313227653503418, -4.100715523236431e-05, -0.1292273998260498, -0.1650012582540512, -0.0021344278939068317, -0.0003943857445847243, -0.00956712570041418, -0.0029561889823526144, -0.05579264834523201, -0.1638103723526001, -0.4321432113647461, -0.08154936879873276, -0.0067861564457416534, -0.00026675479602999985, -0.0055792564526200294, -0.00025519452174194157, -2.002696055569686e-05, -2.880732297897339, -0.04611045494675636, -0.1095261424779892, -0.18335887789726257, -0.09000488370656967, -0.0005586970364674926, -0.00654754601418972, -0.0005685858195647597, -0.0002406545972917229, -0.5948275327682495, -0.10987246781587601, -1.5165214538574219, -0.950735330581665, -0.001872811233624816, -0.00016127715934999287, -0.0042291730642318726, -0.0006573423161171377, -0.0003711488388944417, -0.034337930381298065, -0.3311879634857178, -0.00012706902634818107, -0.026809249073266983, -0.0005644158809445798, -1.9239258766174316, -0.00013350549852475524, -0.8162857890129089, -0.15064875781536102, -2.240680456161499, -0.0034828262869268656, -0.009481046348810196, -0.006396534387022257, -0.10916794091463089, -0.41252022981643677, -0.13503985106945038, -0.018197137862443924, -0.009536543861031532, -0.002500861417502165, -5.781483559985645e-05, -7.462222856702283e-05, -0.0013723488664254546, -0.002312606666237116, -0.003382558235898614, -0.41202840209007263, -0.5668172240257263, -9.476689592702314e-05, -0.002098026918247342, -0.00013302871957421303, -0.0007905219099484384, -0.0007914748275652528, -0.18050061166286469, -0.0685613825917244, -0.030085355043411255, -0.0006108802044764161, -0.733967661857605, -0.0026232139207422733, -0.0025664984714239836, -0.0001429217227268964, -0.033493150025606155, -0.0009285667329095304, -0.06806626915931702, -3.8265450712060556e-05, -0.00028832571115344763, -0.9452407360076904, -0.3906888961791992, -0.0008665143977850676, -0.0015126940561458468, -0.18132589757442474, -0.0008641323074698448, -0.0014898402150720358, -0.0007404923089779913, -0.013581257313489914, -4.768370445162873e-07, -0.0001931004080688581, -0.007979302667081356, -9.333651541965082e-05, -0.00013314791431184858, -0.022157255560159683, -0.014945088885724545, -0.02974509447813034, -0.22200268507003784, -1.823885577323381e-05, -0.04525665193796158, -0.0003182381624355912, -0.10906415432691574, -0.00045980370487086475, -0.0005491655902005732, -0.00016366096679121256, -0.037340790033340454, -0.0003271759778726846, -0.00016652150952722877, -0.0030744450632482767, -0.06465479731559753, -0.47187191247940063, -0.0007213136414065957, -0.0010495636379346251, -0.000286657246761024, -0.01569889299571514, -4.529942543740617e-06, -0.0021360930986702442, -0.1878829151391983, -0.0006173135479912162, -0.018778637051582336, -0.9758925437927246, -0.07043009251356125, -0.0033292127773165703, -0.0016194575000554323, -0.021725870668888092, -0.0032086102291941643, -0.000416907190810889, -0.2840317487716675, -0.07961393892765045, -0.14937996864318848, -0.015107027254998684, -0.30732718110084534, -0.1633392870426178, -0.054137490689754486, -0.9755375981330872, -0.036182302981615067, -0.0038862908259034157, -0.024751901626586914, -8.761498611420393e-05, -0.0007620529504492879, -0.8170758485794067, -0.9720841646194458, -0.001111009274609387, -0.03873959556221962, -0.03159044310450554, -0.2953440845012665, -0.0010403940686956048, -0.8547524809837341, -8.344646857949556e-07, -2.3841855067985307e-07, -0.00010227633902104571, -7.939023635117337e-05, -0.15774090588092804], "finish_reason": "stop"}], "metrics": {"energy": 202.308171606064, "energy_per_token": 1.2411544270310675, "time": 6.937137, "time_per_token": 0.042559122699386505}}
{"outputs": [{"text": "with ZipFile(io.BytesIO()) as zipfile:\n        for file_path in file_paths:\n            if hasattr(file_path, 'read'):\n                zipfile.writestr(os.path.basename(file_path.name), file_path.read())\n            else:\n                zipfile.write(file_path, os.path.basename(file_path))\n\n    response = FileResponse(zipfile.open())\n    response['Content-Type'] = 'application/zip'\n    if hasattr(settings, 'DOWNLOAD_FILENAME'):\n        response['Content-Disposition'] = f'attachment; filename=\"{settings.DOWNLOAD_FILENAME}\"'\n    return response", "tokens": ["with", " Zip", "File", "(", "io", ".", "Bytes", "IO", "())", " as", " zip", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " has", "attr", "(", "file", "_", "path", ",", " '", "read", "')", ":", "\n", "                ", "zip", "file", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ".", "name", ")", ",", " file", "_", "path", ".", "read", "())", "\n", "            ", "else", ":", "\n", "                ", "zip", "file", ".", "write", "(", "file", "_", "path", ",", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "file", ".", "open", "())", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "if", " has", "attr", "(", "settings", ",", " '", "DOWN", "LOAD", "_", "FIL", "EN", "AME", "')", ":", "\n", "        ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "'", "att", "achment", ";", " filename", "=", "\"", "{", "settings", ".", "DOWN", "LOAD", "_", "FIL", "EN", "AME", "}\"", "'", "\n", "    ", "return", " response"], "logprobs": [-2.5511531829833984, -0.7381881475448608, -0.010116138495504856, -0.05669292435050011, -0.06717639416456223, -5.221230458118953e-05, -0.015203308314085007, -0.0011654258705675602, -1.2095353603363037, -7.021180499577895e-05, -0.6661415696144104, -2.7324981689453125, -0.2362501323223114, -0.018937500193715096, -0.007172549609094858, -0.07530159503221512, -0.3979078531265259, -0.21327272057533264, -0.01296942587941885, -0.009129801765084267, -0.0015323336701840162, -1.7523612768854946e-05, -5.245071224635467e-05, -0.000760385300964117, -0.003230474190786481, -0.0037367772310972214, -0.36941543221473694, -3.2642602920532227, -0.004331374075263739, -0.00013279033009894192, -0.02130596898496151, -0.00026043839170597494, -0.000427274004323408, -0.0005769256968051195, -0.2752269208431244, -0.5819699168205261, -0.008609794080257416, -0.07054641097784042, -0.1395236849784851, -0.0007110689766705036, -0.13180354237556458, -0.006052735727280378, -8.415821503149346e-05, -0.028148911893367767, -0.000931544229388237, -9.583967766957358e-05, -0.001967876683920622, -0.1672600954771042, -0.8685278296470642, -0.0004674295778386295, -0.003103442257270217, -0.0031054625287652016, -0.028586920350790024, -2.3841855067985307e-07, -0.0002012050390476361, -0.08262862265110016, -0.0003364712174516171, -0.184346005320549, -0.07157700508832932, -0.06228555366396904, -0.005999058485031128, -0.005386600736528635, -0.01605827920138836, -0.0012267453130334616, -0.00010168035078095272, -0.08759203553199768, -0.029517803341150284, -0.06818564236164093, -0.019228368997573853, -0.015845689922571182, -0.06506694108247757, -2.098061486321967e-05, -0.00637853005900979, -0.00038187362952157855, -0.1608002930879593, -0.0014304416254162788, -8.976056415122002e-05, -0.04114314168691635, -0.0003415954706724733, -0.030096344649791718, -3.111314072157256e-05, -0.0005465444410219789, -0.6854230165481567, -0.5596089363098145, -0.00039772229501977563, -0.0015501875896006823, -0.003983658738434315, -0.0011206544004380703, -0.00018666432879399508, -6.0794889577664435e-05, -0.00464052427560091, -5.435795901576057e-05, -0.00011336160969221964, -0.02772984467446804, -0.006193847395479679, -1.1998252868652344, -0.13777048885822296, -1.0678014755249023, -0.004774242173880339, -0.012209792621433735, -1.811964830267243e-05, -0.004215521737933159, -0.11958438903093338, -0.0015486401971429586, -0.07155747711658478, -2.581603527069092, -0.44960299134254456, -0.017298301681876183, -0.0783882588148117, -0.09310043603181839, -0.07225283980369568, -0.013280740939080715, -0.00026663561584427953, -0.7626451849937439, -2.0265373677830212e-05, -0.004689172375947237, -0.06940042227506638, -0.001586013357155025, -0.0003716255014296621, -0.011078985407948494, -0.0017708349041640759, -0.06315740197896957, -0.1212921142578125, -2.610273838043213, -2.369905948638916, -0.0013106813421472907, -0.00027044929447583854, -2.098609685897827, -0.030690044164657593, -0.04630156606435776, -4.357905387878418, -0.0023645793553441763, -0.2846531569957733, -1.0414310693740845, -0.11829831451177597, -0.13040021061897278, -0.04102529585361481, -0.11771002411842346, -0.016270939260721207, -0.0009575072908774018, -0.046909499913454056, -0.012207908555865288, -0.018163541331887245, -0.0017679788870736957, -0.0026956195943057537, -0.0001618731184862554, -4.9232225137529895e-05, -0.0029495328199118376, -0.7227715849876404, -0.09775231033563614, -0.0018319981172680855, -0.0003719830128829926, -0.000714523543138057, -0.00643953075632453, -0.5630782246589661, -0.0017867805436253548, -0.0021408514585345984, -0.013265330344438553, -0.00037508129025809467, -0.0029274248518049717, -2.8371408916427754e-05, -0.0007099968497641385, -0.0007874249131418765, -3.099393507000059e-05, -9.357491217087954e-05, -0.10647895187139511, -0.016918379813432693, -0.007753042038530111, -0.2324184775352478, -0.3919420540332794, -0.0005022218101657927], "finish_reason": "stop"}], "metrics": {"energy": 174.12146347522727, "energy_per_token": 1.0182541723697502, "time": 7.370671, "time_per_token": 0.043103339181286546}}
{"outputs": [{"text": "if file_paths == []:\n        return FileResponse()\n    if len(file_paths) == 1:\n        if file_paths[0].endswith(\".zip\"):\n            return FileResponse(\n                File(\n                    io.StringIO(\n                        zipfile.ZipFile(file_paths[0]).read(file_paths[0].name).decode(\"utf-8\")\n                    ),\n                    as_attachment=True,\n                    content_type=\"application/zip\",\n                )\n            )\n\n    response = FileResponse(\n        io.StringIO(\n            zipfile.ZipFile(io.BytesIO(b''.join(file_paths))).read(file_paths[0].name).decode(\"utf-8\")\n        ),\n        as_attachment=True,\n        content_type=\"application/zip\",\n    )\n    response[\"Content-Disposition\"] = \"attachment; filename=\" + (\n        request.POST[\"filename\"] if \"filename\"", "tokens": ["if", " file", "_", "paths", " ==", " []", ":", "\n", "        ", "return", " File", "Response", "()", "\n", "    ", "if", " len", "(", "file", "_", "paths", ")", " ==", " ", "1", ":", "\n", "        ", "if", " file", "_", "paths", "[", "0", "]", ".", "end", "sw", "ith", "(", "\"", ".", "zip", "\"", "):", "\n", "            ", "return", " File", "Response", "(", "\n", "                ", "File", "(", "\n", "                ", "    ", "io", ".", "String", "IO", "(", "\n", "                ", "        ", "zip", "file", ".", "Z", "ip", "File", "(", "file", "_", "paths", "[", "0", "])", ".", "read", "(", "file", "_", "paths", "[", "0", "]", ".", "name", ")", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "                ", "    ", ")", ",", "\n", "                ", "    ", "as", "_", "att", "achment", "=", "True", ",", "\n", "                ", "    ", "content", "_", "type", "=", "\"", "application", "/", "zip", "\"", ",", "\n", "                ", ")", "\n", "            ", ")", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "\n", "        ", "io", ".", "String", "IO", "(", "\n", "            ", "zip", "file", ".", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "(", "b", "''", ".", "join", "(", "file", "_", "paths", ")))", ".", "read", "(", "file", "_", "paths", "[", "0", "]", ".", "name", ")", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "        ", ")", ",", "\n", "        ", "as", "_", "att", "achment", "=", "True", ",", "\n", "        ", "content", "_", "type", "=", "\"", "application", "/", "zip", "\"", ",", "\n", "    ", ")", "\n", "    ", "response", "[", "\"", "Content", "-", "Dis", "position", "\"", "]", " =", " \"", "att", "achment", ";", " filename", "=", "\"", " +", " (", "\n", "        ", "request", ".", "POST", "[", "\"", "filename", "\"", "]", " if", " \"", "filename", "\""], "logprobs": [-2.610950469970703, -2.8563647270202637, -0.00026973424246534705, -0.0002640137099660933, -3.478652000427246, -0.3295425474643707, -0.06754382699728012, -0.046529971063137054, -0.003069453639909625, -0.6547637581825256, -0.45404645800590515, -0.0009889479260891676, -2.3949902057647705, -0.07824352383613586, -0.54140305519104, -2.297743558883667, -2.860745906829834, -0.0030285704415291548, -0.011706584133207798, -5.2927523938706145e-05, -3.707340147229843e-05, -0.0066576809622347355, -0.17400243878364563, -0.0011995985405519605, -0.03603696823120117, -0.12646278738975525, -0.021377384662628174, -0.003056142944842577, -1.7196687459945679, -1.8713289499282837, -0.0015955348499119282, -0.001525192055851221, -0.009038722142577171, -0.00040642108069732785, -0.05202499032020569, -0.32669249176979065, -0.6204051375389099, -0.00032181330607272685, -2.264974000354414e-06, -0.8060343265533447, -0.10369352251291275, -0.13592296838760376, -0.24809041619300842, -0.0012363893911242485, -0.18226347863674164, -0.022004153579473495, -0.0021437061950564384, -1.1479427814483643, -0.04785837605595589, -0.0018924438627436757, -0.003095242427662015, -3.5413386821746826, -0.004189524333924055, -3.3527374267578125, -0.4646097421646118, -0.7880685925483704, -0.00011503035057103261, -0.0008945039589889348, -1.3309009075164795, -0.0007420408655889332, -1.771743655204773, -0.00017641419253777713, -0.009794510900974274, -0.3478916585445404, -0.00022968991834204644, -0.0022527810651808977, -0.8267189860343933, -0.07671468704938889, -0.0019693044014275074, -0.11372508853673935, -0.004153079353272915, -0.00045253525604493916, -0.003285607323050499, -0.5016345977783203, -0.012321307323873043, -0.0022038952447474003, -0.003866816172376275, -0.0002849888114724308, -0.24973593652248383, -0.018458614125847816, -0.10049986839294434, -0.7877683043479919, -2.8684964179992676, -0.0025439064484089613, -0.0026329634711146355, -0.0015197168104350567, -0.0020682865288108587, -0.750103771686554, -0.033920641988515854, -3.368823766708374, -0.42270228266716003, -0.14010176062583923, -0.0146487420424819, -0.7865286469459534, -0.26569855213165283, -0.1318269520998001, -0.08549953252077103, -0.0026535321958363056, -0.0009008163469843566, -0.018388276919722557, -0.06168544292449951, -0.0003691230376716703, -0.04812482371926308, -0.003944356460124254, -0.42446237802505493, -0.05199126526713371, -0.00039748396375216544, -0.019801907241344452, -0.11881903558969498, -0.0033027171157300472, -0.1955156773328781, -4.649054244509898e-05, -0.01536144781857729, -0.1326771080493927, -0.10042429715394974, -0.04810959845781326, -0.0008015995263122022, -0.18684616684913635, -1.189426064491272, -0.0007252446957863867, -0.274485319852829, -0.25951215624809265, -0.058041319251060486, -0.024721432477235794, -0.0011961455456912518, -0.09869294613599777, -0.0070585645735263824, -0.16367729008197784, -0.009221226908266544, -0.0009026029147207737, -1.2181673049926758, -0.18658238649368286, -0.005779579281806946, -0.0004820853646378964, -0.0030347504653036594, -2.4682233333587646, -0.3651086986064911, -2.210092544555664, -0.02021823450922966, -0.18524083495140076, -0.0004406196530908346, -0.5929571390151978, -0.34512704610824585, -0.010780428536236286, -0.4990678131580353, -0.00034231049357913435, -0.8316504955291748, -4.875540980719961e-05, -0.026036133989691734, -0.07894483208656311, -0.004255762789398432, -0.18671542406082153, -0.003299390198662877, -0.0006322053959593177, -0.008437816984951496, -0.0001245659514097497, -0.0006775943911634386, -0.012983782216906548, -1.6743189096450806, -0.0022244728170335293, -0.4096316695213318, -0.0002611534437164664, -0.07384563982486725, -0.20317856967449188, -0.8942819237709045, -0.001416751998476684, -0.00017617580306250602, -0.30229300260543823, -0.41811197996139526, -0.017738157883286476, -0.00468098558485508, -0.046552497893571854, -0.006952143739908934, -0.02719343639910221, -0.13020546734333038, -0.4855399429798126, -0.0012880609137937427, -0.0007876630988903344, -0.007494666147977114, -0.0014572249492630363, -0.21759113669395447, -0.0010375360725447536, -0.003715636907145381, -0.0018847098108381033, -0.017463020980358124, -0.0014174662064760923, -0.05301029235124588, -0.02217264659702778, -0.0032763394992798567, -0.00270845927298069, -1.5735502529423684e-05, -0.00010430268594063818, -0.003968579228967428, -0.028015386313199997, -0.005975833162665367, -0.0007780147134326398, -0.10394249111413956, -0.01757008582353592, -0.018046822398900986, -0.04224675893783569, -4.351044481154531e-05, -0.00014530557382386178, -1.3708974620385561e-05, -0.0031617910135537386, -0.015470264479517937, -0.004096213262528181, -0.002995767630636692, -0.019174925982952118, -0.0177755169570446, -8.821098163025454e-05, -0.0023487620055675507, -0.016067663207650185, -0.0025870685931295156, -0.0024785057175904512, -0.00016699827392585576, -0.002859909785911441, -0.000609927112236619, -0.1013808399438858, -0.001814387273043394, -0.0416986458003521, -0.0007189311436377466, -0.0024442579597234726, -0.23980532586574554, -0.37571847438812256, -1.0044364929199219, -0.0363539420068264, -0.04851635545492172, -0.0004717191040981561, -0.053157705813646317, -0.00017617580306250602, -4.470248313737102e-05, -0.0011389919091016054, -0.004344786051660776, -0.8812152147293091, -0.04575829207897186, -0.00030882356804795563, -0.034465085715055466, -0.00708981417119503, -0.29762932658195496, -1.2006667852401733, -0.09602931886911392, -2.7965269088745117, -0.35748031735420227, -0.1859353482723236, -3.3080248832702637, -0.011075920425355434, -1.7280890941619873, -1.2973520755767822, -0.030637094751000404, -1.151520848274231, -0.03207762911915779, -0.011978951282799244, -0.5345074534416199, -0.7581518292427063, -0.0073510161601006985, -0.0003995097358711064], "finish_reason": "length"}], "metrics": {"energy": 269.3330344057083, "energy_per_token": 1.052082165647298, "time": 11.358616, "time_per_token": 0.04436959375}}
{"outputs": [{"text": "zip_bytes = io.BytesIO()\n    with zipfile.ZipFile(zip_bytes, 'w') as zip_file:\n        for file_path in file_paths:\n            if isinstance(file_path, str):\n                with open(file_path, 'rb') as f:\n                    zip_file.writestr(file_path, f.read())\n            else:\n                zip_file.writestr(file_path.name, file_path.read())\n    zip_bytes = zip_bytes.getvalue()\n    response = FileResponse(zip_bytes, filename='files.zip')\n    response['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\n    return response", "tokens": ["zip", "_", "bytes", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "bytes", ",", " '", "w", "')", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "file", "_", "path", ",", " f", ".", "read", "())", "\n", "            ", "else", ":", "\n", "                ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "file", "_", "path", ".", "name", ",", " file", "_", "path", ".", "read", "())", "\n", "    ", "zip", "_", "bytes", " =", " zip", "_", "bytes", ".", "get", "value", "()", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "_", "bytes", ",", " filename", "='", "files", ".", "zip", "')", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -2.8677358627319336, -0.0385437048971653, -0.19661153852939606, -7.593343616463244e-05, -0.001518169417977333, -0.0003146630187984556, -0.004586296156048775, -0.019691573455929756, -0.07853759080171585, -0.5051747560501099, -0.6111124753952026, -0.00034362133010290563, -5.721882189391181e-05, -0.002590159885585308, -0.0015231685247272253, -0.00020561488054227084, -0.0025309454649686813, -0.0038349907845258713, -7.998623186722398e-05, -0.00016759421851020306, -0.0016162439715117216, -0.30605167150497437, -0.1600077599287033, -0.7279613018035889, -5.674201020156033e-05, -0.20802143216133118, -0.05205373466014862, -0.16070771217346191, -0.0006323245470412076, -0.005662946496158838, -0.0022130541037768126, -0.033727604895830154, -0.31683751940727234, -0.09064649790525436, -0.01978367567062378, -0.018180280923843384, -0.0017508429009467363, -1.8596476365928538e-05, -4.5298504119273275e-05, -0.0007051127031445503, -0.0021836739033460617, -0.002174871740862727, -0.2850413918495178, -0.4427725672721863, -5.590759246842936e-05, -0.0008734225411899388, -5.9126061387360096e-05, -0.0003871168300975114, -0.000418575422372669, -0.1490827053785324, -0.05948180332779884, -0.03909687325358391, -0.0004359725280664861, -1.6753400564193726, -0.06752020120620728, -0.0009482178138568997, -0.011267954483628273, -6.437280717364047e-06, -9.822363062994555e-05, -0.015870682895183563, -0.03055523708462715, -0.0020182018633931875, -0.0005340342177078128, -0.00018165845540352166, -1.440290093421936, -0.03876597434282303, -0.008025778457522392, -0.00014304091746453196, -0.0003480305604171008, -0.05028887465596199, -0.0020898187067359686, -0.002300832187756896, -7.70062324590981e-05, -0.11053956300020218, -0.00029416524921543896, -8.189342770492658e-05, -0.0006001578294672072, -0.022979626432061195, -1.1926281452178955, -0.006279381457716227, -0.017315523698925972, -0.22023002803325653, -0.004240687470883131, -0.00046075694262981415, -0.00010358751023886725, -0.010497472248971462, -0.009583655744791031, -0.055477261543273926, -0.26024216413497925, -1.0251946150674485e-05, -0.0718933492898941, -0.00016199229867197573, -0.14525417983531952, -0.0010486110113561153, -0.005016359966248274, -5.364274329622276e-05, -0.0008779485360719264, -7.867782187531702e-06, -4.291525328881107e-06, -0.0009517907164990902, -0.022043218836188316, -0.10207299888134003, -0.0007150000892579556, -0.0014998388942331076, -0.24475893378257751, -0.21895281970500946, -0.008308961987495422, -0.012595979496836662, -0.00023505308490712196, -7.390948667307384e-06, -0.05426452308893204, -0.06090305745601654, -0.04234926402568817, -0.009937574155628681, -0.4571256637573242, -1.0186361074447632, -0.007733997423201799, -0.596748411655426, -2.5805184841156006, -0.13409672677516937, -0.0418950654566288, -0.00048565989709459245, -0.00021026308240834624, -0.0016738465055823326, -0.0883704125881195, -0.0025515162851661444, -0.013601955026388168, -0.07685643434524536, -0.6084120869636536, -0.0023346091620624065, -0.03656106814742088, -1.1801649634435307e-05, -0.00031573555315844715, -0.23670484125614166, -0.00047350639943033457, -7.795983401592821e-05, -0.39772412180900574, -1.6403350830078125, -0.13223551213741302, -0.05240357294678688, -0.00289794709533453, -7.199982064776123e-05, -0.09367721527814865, -0.009820835664868355, -0.010363573208451271, -0.29647210240364075, -0.02401280775666237, -0.013168391771614552, -0.00019131260341964662, -0.6957916617393494, -0.00035851728171110153, -3.2066785934148356e-05, -0.004792394116520882, -0.307847797870636, -0.0016437364974990487, -0.0003281293320469558, -0.08603028953075409, -0.005822839215397835, -0.005131170619279146, -0.12011808156967163, -0.059050604701042175, -0.0016768217319622636, -0.00013016807497479022, -0.0028023754712194204, -0.004552239086478949, -0.01001558918505907, -0.01812022551894188, -0.4119521379470825, -0.00036435641231946647, -0.592685341835022, -1.0728830375228426e-06, -2.3841855067985307e-07, -0.0010594476480036974, -4.207999518257566e-05, -0.12002769112586975], "finish_reason": "stop"}], "metrics": {"energy": 217.52726277542112, "energy_per_token": 1.2289675863018144, "time": 7.5721064, "time_per_token": 0.04278026214689266}}
{"outputs": [{"text": "response = FileResponse()\n    try:\n        # Create an in-memory file-like object for the ZIP file\n        buffer = io.BytesIO()\n        # Create a new ZIP file with compression level 9 (maximum compression)\n        with zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED, compresslevel=9) as zip_file:\n            for file_path in file_paths:\n                # If the file path is not a string, assume it's a file-like object\n                if not isinstance(file_path, str):\n                    if hasattr(file_path, 'read'):\n                        file_path.seek(0)\n                        zip_file.writestr(str(uuid.uuid4()), file_path.read())\n                        continue\n                    else:\n                        raise ValueError(\n                            f\"Invalid file path: {file_path}. File paths must be strings or file-like objects.\")\n                # If the file path is a string, open it as a file object\n                with open(file_", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "try", ":", "\n", "        ", "#", " Create", " an", " in", "-", "memory", " file", "-", "like", " object", " for", " the", " Z", "IP", " file", "\n", "        ", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "        ", "#", " Create", " a", " new", " Z", "IP", " file", " with", " compression", " level", " ", "9", " (", "maximum", " compression", ")", "\n", "        ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "buffer", ",", " mode", "='", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ",", " compress", "level", "=", "9", ")", " as", " zip", "_", "file", ":", "\n", "            ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "                ", "#", " If", " the", " file", " path", " is", " not", " a", " string", ",", " assume", " it", "'", "s", " a", " file", "-", "like", " object", "\n", "                ", "if", " not", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "    ", "if", " has", "attr", "(", "file", "_", "path", ",", " '", "read", "')", ":", "\n", "                ", "        ", "file", "_", "path", ".", "seek", "(", "0", ")", "\n", "                ", "        ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "str", "(", "uuid", ".", "uuid", "4", "())", ",", " file", "_", "path", ".", "read", "())", "\n", "                ", "        ", "continue", "\n", "                ", "    ", "else", ":", "\n", "                ", "        ", "raise", " Value", "Error", "(", "\n", "                ", "            ", "f", "\"", "Invalid", " file", " path", ":", " {", "file", "_", "path", "}", ".", " File", " paths", " must", " be", " strings", " or", " file", "-", "like", " objects", ".", "\"", ")", "\n", "                ", "#", " If", " the", " file", " path", " is", " a", " string", ",", " open", " it", " as", " a", " file", " object", "\n", "                ", "with", " open", "(", "file", "_"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -3.3392465114593506, -0.0002562671434134245, -0.005471966695040464, -0.005456435494124889, -2.517535924911499, -1.4227977991104126, -2.6898159980773926, -0.6948442459106445, -0.017727266997098923, -0.0005231918767094612, -1.3138824701309204, -0.882529616355896, -0.008929676376283169, -0.026377080008387566, -1.7110224962234497, -0.32458969950675964, -0.7846656441688538, -0.0002157455455744639, -0.4159695506095886, -0.5068432688713074, -0.0008437649230472744, -1.9812251329421997, -0.02789471112191677, -0.0096443435177207, -2.8132995794294402e-05, -0.035349782556295395, -0.0003401654539629817, -0.00881270132958889, -0.0024580522440373898, -0.4475383758544922, -1.4507660865783691, -0.2526930272579193, -0.3710757791996002, -3.4187004566192627, -0.6013110280036926, -0.00036137725692242384, -0.21521751582622528, -2.609313726425171, -2.1383368968963623, -0.8282028436660767, -0.8736517429351807, -2.1715564727783203, -1.2291815280914307, -0.42381447553634644, -0.068793885409832, -0.035644084215164185, -0.061383794993162155, -0.0006783091812394559, -0.8283842206001282, -0.10477051883935928, -0.00037377048283815384, -6.174850568640977e-05, -0.001420561340637505, -0.011820511892437935, -0.00023803261865396053, -0.007750912569463253, -0.029465949162840843, -0.0017337066819891334, -1.140315294265747, -0.12513020634651184, -0.01861776039004326, -0.03777020052075386, -0.00024351492174901068, -0.051306579262018204, -0.0031683268025517464, -0.0022889384999871254, -5.3881147323409095e-05, -1.7762025890988298e-05, -0.0019014865392819047, -0.0215323343873024, -0.0022060361225157976, -0.01145842019468546, -0.00019858295854646713, -0.0009024838218465447, -0.10402962565422058, -0.6208511590957642, -0.01628243364393711, -0.0011938833631575108, -0.0036551826633512974, -0.03177084028720856, -7.271502545336261e-05, -0.1371985375881195, -0.09601642936468124, -0.04691200330853462, -0.0004213160718791187, -0.000959412835072726, -0.004491716623306274, -0.6097578406333923, -0.3499542772769928, -0.11571470648050308, -0.012904939241707325, -0.0078066252171993256, -0.0014219897566363215, -2.074220174108632e-05, -3.135155202471651e-05, -0.0008204193436540663, -0.005136033054441214, -0.0014221088495105505, -0.869665801525116, -1.272402286529541, -0.45841532945632935, -0.18312256038188934, -0.7323148846626282, -0.287590354681015, -3.1620562076568604, -0.5946341753005981, -1.289520263671875, -0.3875824511051178, -0.5779171586036682, -0.05966431647539139, -0.8014078736305237, -0.00016616393986623734, -0.4994107186794281, -0.22998616099357605, -0.16393108665943146, -0.0013159195659682155, -0.001963831717148423, -0.5718401670455933, -0.00034374051028862596, -0.03482481464743614, -0.4087628722190857, -0.00700813764706254, -9.775113539944869e-06, -0.00013755806139670312, -7.033100700937212e-05, -0.00011181206355104223, -6.735097849741578e-05, -0.009937220253050327, -0.003338717622682452, -0.0028634758200496435, -0.0002366024418734014, -0.00021407696476671845, -3.637394666671753, -0.4347570240497589, -0.0001497156627010554, -0.00017987063620239496, -0.0037220504600554705, -0.0004318020073696971, -0.0001358893496217206, -0.0009625093080103397, -0.05626041069626808, -0.3846592903137207, -0.003969528712332249, -0.07771148532629013, -0.18230798840522766, -0.00022623363474849612, -0.0004326361231505871, -1.3966941833496094, -0.06569650769233704, -0.31972435116767883, -1.041459560394287, -0.030613625422120094, -0.0005732323625124991, -0.0007864719373174012, -0.011570608243346214, -0.24698996543884277, -0.009756145067512989, -0.28071191906929016, -0.10504594445228577, -0.0037352333310991526, -0.0014525825390592217, -0.0002051381452474743, -0.07047297805547714, -0.00034028460504487157, -8.34430247778073e-05, -0.0012667496921494603, -0.08527208864688873, -3.0427253246307373, -0.004121026024222374, -2.7943873405456543, -0.24149543046951294, -0.001604580320417881, -0.054550718516111374, -0.008889504708349705, -0.08041097968816757, -0.008002481423318386, -0.0028071305714547634, -6.842378934379667e-05, -0.10652793198823929, -0.004472491331398487, -0.1528855860233307, -0.015418381430208683, -0.034730978310108185, -1.663434624671936, -0.3583829998970032, -0.02385975420475006, -0.05483637750148773, -0.3826325535774231, -0.6784966588020325, -2.8371408916427754e-05, -0.08366922289133072, -9.262132516596466e-05, -0.00027891082572750747, -0.23172762989997864, -0.8395395874977112, -9.083335316972807e-05, -0.42896997928619385, -1.5957365036010742, -0.0003700763627421111, -0.006749805994331837, -1.248089075088501, -0.30435338616371155, -1.3932613134384155, -0.12234389781951904, -0.18705391883850098, -0.5697462558746338, -0.11006832867860794, -0.05140793323516846, -9.77468371274881e-05, -0.0009742995607666671, -0.04721474647521973, -0.045348819345235825, -2.224872589111328, -0.40227699279785156, -0.23034441471099854, -0.043935392051935196, -0.5691196322441101, -0.016432898119091988, -0.13976700603961945, -0.011974475346505642, -0.0005417786305770278, -0.007161423563957214, -0.09705271571874619, -0.007362139876931906, -0.2279100865125656, -0.001862221397459507, -0.1152045801281929, -0.44684648513793945, -1.0125247240066528, -0.056167665868997574, -0.030818937346339226, -0.20984049141407013, -0.5579333901405334, -0.10459079593420029, -0.07375750690698624, -0.03614838421344757, -2.9020166397094727, -0.776430070400238, -0.8022226691246033, -0.08599255234003067, -0.17422059178352356, -2.525200128555298, -0.40478411316871643, -0.000727508042473346, -0.17954683303833008, -0.02079681120812893, -0.0008810452418401837, -0.014947320334613323, -1.5616295058862306e-05], "finish_reason": "length"}], "metrics": {"energy": 258.9989509038926, "energy_per_token": 1.0117146519683304, "time": 11.144909, "time_per_token": 0.04353480078125}}
{"outputs": [{"text": "zip_buffer = io.BytesIO()\n    with ZipFile(zip_buffer, 'w') as zip_file:\n        for file_path in file_paths:\n            if isinstance(file_path, str):\n                zip_file.write(file_path)\n            elif isinstance(file_path, io.BytesIO):\n                zip_file.writestr(file_path.name, file_path.getvalue())\n\n    response = FileResponse(zip_buffer)\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = 'attachment; filename=files.zip'\n\n    return response", "tokens": ["zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " Zip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "')", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "zip", "_", "file", ".", "write", "(", "file", "_", "path", ")", "\n", "            ", "elif", " isinstance", "(", "file", "_", "path", ",", " io", ".", "Bytes", "IO", "):", "\n", "                ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "file", "_", "path", ".", "name", ",", " file", "_", "path", ".", "get", "value", "())", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "_", "buffer", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "files", ".", "zip", "'", "\n", "\n", "    ", "return", " response", "\n", "\n", "def"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -0.9761742949485779, -0.004129811190068722, -0.010017359629273415, -3.540453326422721e-05, -0.01855281926691532, -0.00037996700848452747, -0.002871915465220809, -0.014420459978282452, -0.08506321161985397, -0.8785428404808044, -0.7622787356376648, -0.00942400936037302, -0.0014886498684063554, -0.0018703126115724444, -0.0008752091089263558, -0.00015054999676067382, -0.0025705411098897457, -0.3677011728286743, -0.04679495096206665, -0.11900479346513748, -0.00011240804451517761, -0.2368164211511612, -0.10171868652105331, -0.17370879650115967, -0.0010149095905944705, -0.009164175018668175, -0.002834947081282735, -0.032048650085926056, -0.3549400269985199, -0.13226380944252014, -0.028622832149267197, -0.01354233082383871, -0.0014991246862336993, -2.169585604860913e-05, -2.5152843591058627e-05, -0.0010419422760605812, -0.002254208317026496, -0.002372071845456958, -0.22042915225028992, -0.5866913199424744, -7.462222856702283e-05, -0.0010617101797834039, -8.546940807718784e-05, -0.00039319414645433426, -0.00046433156239800155, -0.14984124898910522, -0.06422749906778336, -0.04151488468050957, -0.00045015214709565043, -0.9013535380363464, -0.005781594198197126, -0.002806060714647174, -0.00024923557066358626, -0.0078141950070858, -0.00022754464589525014, -0.02883388102054596, -7.855583680793643e-05, -0.00010311071673640981, -0.26493996381759644, -0.034974355250597, -0.020811522379517555, -1.6687122583389282, -0.3034481704235077, -5.543078441405669e-05, -0.00043358939001336694, -1.9073304429184645e-05, -9.822363062994555e-05, -0.00036864637513644993, -0.5595680475234985, -0.000198821333469823, -0.7034580111503601, -0.0015067425556480885, -0.05981198698282242, -0.008526468649506569, -0.0001292145170737058, -0.030581137165427208, -0.0011654258705675602, -0.002509423065930605, -6.329813186312094e-05, -0.04016473516821861, -0.00015293381875380874, -0.0002177716523874551, -0.0033554700203239918, -0.20449861884117126, -0.8167427778244019, -0.00047958316281437874, -0.005991355981677771, -0.031875576823949814, -0.11980881541967392, -0.026630274951457977, -0.007935544475913048, -0.00022825974156148732, -3.504691630951129e-05, -0.010555745102465153, -0.10633727163076401, -0.33919814229011536, -0.003058400936424732, -0.014438320882618427, -1.5105409622192383, -0.015524844639003277, -0.6888513565063477, -0.008220882155001163, -0.01948712207376957, -1.1444026313256472e-05, -0.001444607158191502, -0.1890498250722885, -0.0003808011533692479, -0.00018857131362892687, -0.836394727230072, -0.006782486103475094, -0.03425315022468567, -0.0721663311123848, -0.06371177732944489, -0.01307061966508627, -0.00025722055579535663, -0.383352667093277, -1.645074735279195e-05, -0.01759866625070572, -0.05289305001497269, -0.0007089247228577733, -0.00026520551182329655, -0.008282124996185303, -0.0014463926199823618, -0.05829460918903351, -0.09565530717372894, -0.15848295390605927, -0.02999882586300373, -0.00423392141237855, -0.0005727558163926005, -0.003142302157357335, -0.00019786784832831472, -1.4781842764932662e-05, -0.050714462995529175, -0.3546227514743805, -0.0008597253472544253, -0.0001934579631779343, -0.033002499490976334, -0.0028032076079398394, -0.00699499761685729, -2.9507012367248535, -0.004567547235637903, -0.0002053765201708302, -0.0020950529724359512, -0.016126198694109917, -0.9321008324623108, -0.003371628001332283, -0.0391758568584919, -0.0006947487709112465, -1.1161577701568604, -0.009675748646259308, -0.28833383321762085], "finish_reason": "stop"}], "metrics": {"energy": 153.55680049896247, "energy_per_token": 1.0036392189474672, "time": 6.5296993, "time_per_token": 0.04267777320261438}}
{"outputs": [{"text": "response = FileResponse()\n    response.set_file(\n        io.BytesIO(\n            zipfile.ZipFile(\n                io.BytesIO(), 'wb', compression=zipfile.ZIP_DEFLATED\n            ).writestr(\n                'files.zip', b''\n            ).getbuffer()\n        )\n    )\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition']\n    response['Content-Disposition'] = \"attachment; filename=files.zip\"\n    files_list = []\n\n    for file_path in file_paths:\n        try:\n            if file_path.startswith(\"http://\") or file_path.startswith(\"https://\"):\n                response.set_file(\n                    io.BytesIO(\n                        request_urlopen(url=file_path).read()\n                    )\n                )\n            elif file_path.startswith(\"/\") or file_path.startswith(\"\\\\\"):\n                with open(file_path,", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "response", ".", "set", "_", "file", "(", "\n", "        ", "io", ".", "Bytes", "IO", "(", "\n", "            ", "zip", "file", ".", "Z", "ip", "File", "(", "\n", "                ", "io", ".", "Bytes", "IO", "()", ",", " '", "wb", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", "\n", "            ", ")", ".", "w", "rit", "est", "r", "(", "\n", "                ", "'", "files", ".", "zip", "'", ",", " b", "''", "\n", "            ", ")", ".", "get", "buffer", "()", "\n", "        ", ")", "\n", "    ", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " \"", "att", "achment", ";", " filename", "=", "files", ".", "zip", "\"", "\n", "    ", "files", "_", "list", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "try", ":", "\n", "            ", "if", " file", "_", "path", ".", "start", "sw", "ith", "(", "\"", "http", "://", "\"", ")", " or", " file", "_", "path", ".", "start", "sw", "ith", "(", "\"", "https", "://", "\"", "):", "\n", "                ", "response", ".", "set", "_", "file", "(", "\n", "                ", "    ", "io", ".", "Bytes", "IO", "(", "\n", "                ", "        ", "request", "_", "url", "open", "(", "url", "=", "file", "_", "path", ")", ".", "read", "()", "\n", "                ", "    ", ")", "\n", "                ", ")", "\n", "            ", "elif", " file", "_", "path", ".", "start", "sw", "ith", "(", "\"", "/\"", ")", " or", " file", "_", "path", ".", "start", "sw", "ith", "(", "\"", "\\\\", "\"", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ","], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -1.006925344467163, -0.9079340100288391, -1.565821647644043, -0.0031749813351780176, -1.8180090188980103, -0.6485484838485718, -1.8664007186889648, -0.011187207885086536, -0.29084113240242004, -0.0014856740599498153, -0.04253904148936272, -0.00017724849749356508, -0.0306827612221241, -0.5264895558357239, -0.003841165918856859, -0.29243341088294983, -0.013462590985000134, -0.002261582762002945, -0.07230783998966217, -0.014181196689605713, -0.000476246903417632, -0.034511614590883255, -0.21082240343093872, -0.001538642100058496, -0.10000521689653397, -0.00016950124700088054, -0.017713330686092377, -0.0001915509783430025, -0.10731173306703568, -0.025323908776044846, -2.135357141494751, -2.879608631134033, -0.06350728869438171, -0.3565065562725067, -0.9855831861495972, -0.08094289898872375, -0.019752586260437965, -7.819823804311454e-05, -3.683499380713329e-05, -0.0017357297474518418, -0.10188267379999161, -0.0031023728661239147, -0.005316523835062981, -0.00018880968855228275, -0.0013213959755375981, -0.7315452098846436, -0.007429351564496756, -0.0020368797704577446, -0.10140594094991684, -0.30355870723724365, -6.937739817658439e-05, -0.0012713929172605276, -0.0008623456815257668, -0.24112653732299805, -0.20725858211517334, -0.0043354094959795475, -0.45838066935539246, -0.14564378559589386, -0.016380244866013527, -0.0032212056685239077, -0.00135996809694916, -0.005006752442568541, -1.6430429220199585, -0.1762157678604126, -1.4265034198760986, -0.03379790857434273, -0.0045568672940135, -0.4757447838783264, -0.06953687220811844, -1.0546164512634277, -0.03574208915233612, -0.03224420174956322, -0.006231284234672785, -0.00692562572658062, -0.1793229579925537, -0.005730628501623869, -0.002752208849415183, -0.004637557547539473, -0.07938658446073532, -0.18640293180942535, -0.29433006048202515, -0.009192169643938541, -0.000974537746515125, -0.26771286129951477, -4.303362584323622e-05, -0.04887855798006058, -0.09769392758607864, -0.001955146435648203, -0.00032574593205936253, -0.009278510697185993, -0.0021891456563025713, -0.027587100863456726, -0.042766932398080826, -0.1614425927400589, -0.037160247564315796, -0.008975517004728317, -0.0007686044555157423, -0.006135082803666592, -0.00044967554276809096, -2.825220326485578e-05, -1.9777569770812988, -0.00924083311110735, -0.03741393983364105, -0.23579615354537964, -0.2737760543823242, -0.000805053801741451, -0.007995858788490295, -0.00044252615771256387, -0.00039867559098638594, -0.9157172441482544, -3.2877237796783447, -0.005478843115270138, -0.0007086864789016545, -0.03379525989294052, -0.012212500907480717, -0.8698557615280151, -0.053058791905641556, -0.005842868238687515, -0.00015722469834145159, -0.005443156231194735, -0.009569605812430382, -0.14094357192516327, -4.405148506164551, -1.6695852279663086, -2.629493236541748, -0.02050020731985569, -0.3609229624271393, -0.010619675740599632, -2.05855131149292, -0.0004033228906337172, -0.24990400671958923, -0.4689343571662903, -0.1991589218378067, -0.04279046133160591, -0.013991366140544415, -0.00301133724860847, -2.825220326485578e-05, -3.9219088648678735e-05, -0.0032594669610261917, -0.003333489876240492, -0.017410656437277794, -2.36076283454895, -8.785339014139026e-05, -0.01062038354575634, -0.00227074115537107, -1.2393255233764648, -1.9519866704940796, -0.0023023784160614014, -0.003322083968669176, -0.1141527071595192, -0.3981502056121826, -0.00010168035078095272, -2.3841855067985307e-07, -0.725814938545227, -0.6062389016151428, -0.3215823471546173, -1.07112717628479, -0.019012710079550743, -0.13718773424625397, -0.012155856005847454, -0.008012651465833187, -8.463501580990851e-05, -2.2411095415009186e-05, -0.0006847421173006296, -0.002260988112539053, -9.417489309271332e-06, -1.1920928244535389e-07, -0.0049413940869271755, -0.02363472990691662, -0.014129716902971268, -0.006010197103023529, -8.260862523457035e-05, -0.06613611429929733, -0.027615975588560104, -0.0030518644489347935, -0.9919254183769226, -0.17499403655529022, -0.41461220383644104, -0.004087071865797043, -0.09871724247932434, -0.010794933885335922, -1.0402817726135254, -0.00017236177518498152, -0.0037608861457556486, -0.08220937848091125, -5.9602869441732764e-05, -0.01664196141064167, -1.0967194612021558e-05, -0.005596090108156204, -0.05747365951538086, -0.0002366024418734014, -0.003254001261666417, -2.6591691970825195, -2.093820571899414, -1.830299973487854, -0.46827608346939087, -0.029768699780106544, -3.022594451904297, -0.20707979798316956, -0.024095317348837852, -0.00011920218821614981, -0.00026806574896909297, -0.17228282988071442, -0.07805632054805756, -0.23690277338027954, -0.015790658071637154, -0.038622044026851654, -0.0008440031087957323, -0.00879521295428276, -0.0032743194606155157, -0.021953774616122246, -0.0012906801421195269, -0.0007560970261693001, -0.004223712719976902, -0.7669891119003296, -1.3569902181625366, -0.3398454189300537, -0.0010726656764745712, -0.0008563903393223882, -0.03331109881401062, -0.09547512978315353, -0.00017724849749356508, 0.0, -0.08373226225376129, -0.10406679660081863, -0.7800530195236206, -1.7718331813812256, -0.11881808191537857, -0.05652947351336479, -4.31528314948082e-05, -0.0004395472351461649, -0.012541946023702621, -0.03860266134142876, -3.6238969187252223e-05, -5.960462772236497e-07, -0.02390584722161293, -0.19168147444725037, -0.4147487282752991, -0.0006606780225411057, -0.0602007657289505, -0.009741624817252159, -0.0011828100541606545, -2.0441110134124756, -0.1047501191496849, -0.003451345022767782, -0.29307281970977783, -0.026251910254359245, -0.0006572232232429087, -0.13485829532146454], "finish_reason": "length"}], "metrics": {"energy": 256.0156312637329, "energy_per_token": 1.0000610596239567, "time": 11.132628, "time_per_token": 0.043486828125}}
{"outputs": [{"text": "zip_output = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_output, 'w')\n\n    for file_path in file_paths:\n        if isinstance(file_path, str):\n            zip_file.write(file_path, file_path)\n        else:\n            zip_file.writestr(file_path.name, file_path.read())\n\n    zip_file.close()\n\n    response = FileResponse(zip_output)\n    response['Content-Type'] = 'application/zip'  # Specify the MIME type for ZIP files\n\n    # Set the appropriate Content-Disposition header based on the request\n    response['Content-Disposition'] = 'attachment; filename=\"{filename}.zip\"'.format(filename=settings.APP_NAME)\n\n    return response", "tokens": ["zip", "_", "output", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "file", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "output", ",", " '", "w", "')", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "            ", "zip", "_", "file", ".", "write", "(", "file", "_", "path", ",", " file", "_", "path", ")", "\n", "        ", "else", ":", "\n", "            ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "file", "_", "path", ".", "name", ",", " file", "_", "path", ".", "read", "())", "\n", "\n", "    ", "zip", "_", "file", ".", "close", "()", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "_", "output", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "  ", "#", " Spec", "ify", " the", " M", "IME", " type", " for", " Z", "IP", " files", "\n", "\n", "    ", "#", " Set", " the", " appropriate", " Content", "-", "Dis", "position", " header", " based", " on", " the", " request", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "{", "filename", "}", ".", "zip", "\"", "'", ".", "format", "(", "filename", "=", "settings", ".", "APP", "_", "NAME", ")", "\n", "\n", "    ", "return", " response", "\n", "\n", "def"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -3.67911434173584, -0.030498119071125984, -0.014015229418873787, -3.755022044060752e-05, -0.045956533402204514, -0.0007493072189390659, -0.0023947865702211857, -0.021310754120349884, -0.11073774844408035, -1.0014607906341553, -0.1046922579407692, -0.5144423246383667, -0.008520795032382011, -0.09828945994377136, -0.0001510267611593008, -4.672895011026412e-05, -0.0026184578891843557, -0.0024574578274041414, -7.807903602952138e-05, -0.0012731788447126746, -0.008012769743800163, -9.97731985989958e-05, -4.2199197196168825e-05, -0.00798675324767828, -0.2818746566772461, -0.04447543993592262, -0.5361745953559875, -0.019983159378170967, -0.7945558428764343, -0.00018523407925385982, -0.1429406851530075, -0.32650914788246155, -0.13257959485054016, -0.03243129327893257, -0.026379169896245003, -0.0014218707801774144, -1.5258672647178173e-05, -2.90866428258596e-05, -0.0007983834366314113, -0.0026614980306476355, -0.006479564122855663, -0.3164178133010864, -0.508683979511261, -6.818538531661034e-05, -0.0010271755745634437, -5.07818695041351e-05, -0.00034338299883529544, -0.0005115154199302197, -0.15330536663532257, -0.0822632908821106, -0.034793153405189514, -0.0009489324293099344, -1.061379313468933, -0.008136932738125324, -0.003878809744492173, -0.0003657863999251276, -0.005855075083673, -0.0003156163729727268, -0.038609884679317474, -6.97350042173639e-05, -8.451581379631534e-05, -0.6094748377799988, -1.8178648948669434, -0.03049730882048607, -0.018289728090167046, -0.27550461888313293, -0.031032295897603035, -0.02760043740272522, -0.2749864459037781, -8.583032467868179e-06, -0.06765390932559967, -0.0004363300104159862, -0.24376440048217773, -0.0017560789128765464, -0.006126670632511377, -0.0002575780963525176, -0.01664114184677601, -0.00012599628826137632, -0.00013136000779923052, -0.0031368357595056295, -0.022924870252609253, -0.42551857233047485, -0.0004985281848348677, -0.0023347281385213137, -0.14123353362083435, -0.24977058172225952, -0.006945632863789797, -0.012106274254620075, -0.00013290952483657748, -6.294052582234144e-05, -0.21644026041030884, -0.11326344311237335, -0.17861837148666382, -0.015018017031252384, -0.0487305112183094, -0.0015209070406854153, -0.3850192725658417, -0.004995839670300484, -0.4356071949005127, -0.0015001959400251508, -0.007448283955454826, -0.000633992429357022, -0.009666657075285912, -0.9033201932907104, -9.202533692587167e-05, -1.0544703006744385, -0.006946934852749109, -0.015923716127872467, -7.510157047363464e-06, -0.0011560192797333002, -0.11387477070093155, -0.0011650687083601952, -0.0003093002596870065, -0.6913235783576965, -0.012008044868707657, -0.0994390919804573, -0.07436048239469528, -0.06242779642343521, -0.019995078444480896, -0.0002644904307089746, -0.6018349528312683, -1.7523612768854946e-05, -0.0169843677431345, -0.052551526576280594, -0.001207933179102838, -0.0002637753786984831, -0.011196402832865715, -0.0016558758215978742, -2.8650832176208496, -0.0006797387031838298, -3.869473695755005, -0.18074043095111847, -0.29003289341926575, -1.521243691444397, -0.0010805251076817513, -0.04203155264258385, -1.8174952268600464, -2.700253486633301, -0.00017486473370809108, -0.06114698573946953, -0.0723283588886261, -2.15376615524292, -0.000339569611242041, -1.279567837715149, -1.8762009143829346, -0.3320869505405426, -2.394012928009033, -1.1511086225509644, -0.00285206432454288, -0.009100859984755516, -0.00047064671525731683, -0.18867993354797363, -1.9130570888519287, -0.001392705482430756, -0.3629258871078491, -1.5466772317886353, -0.7626858353614807, -0.0017431078013032675, -2.4789249897003174, -0.12216298282146454, -0.002864070236682892, -7.116541382856667e-05, -0.0026995427906513214, -7.664863369427621e-05, -2.753696753643453e-05, -0.0014516302617266774, -0.5817288160324097, -0.01904405653476715, -0.00011395759065635502, -1.023680329322815, -0.007133845705538988, -0.03996729105710983, -0.1641150265932083, -2.6978344917297363, -0.8623189330101013, -0.3468173146247864, -0.000562271336093545, -0.0012729407753795385, -0.003320420393720269, -0.001895775320008397, -0.02404993213713169, -0.002120985882356763, -0.0012502004392445087, -0.3974604308605194, -0.25789961218833923, -1.721177577972412, -0.0011801904765889049, -1.5325552225112915, -0.08059960603713989, -0.06625337898731232, -0.05122005566954613, -0.07136502116918564, -0.20225787162780762, -0.00029416524921543896, -0.31218215823173523, -0.00039104922325350344, -1.1275832653045654, -0.012668373063206673, -0.32122907042503357], "finish_reason": "stop"}], "metrics": {"energy": 248.43902422332772, "energy_per_token": 1.2360150458872026, "time": 8.835231, "time_per_token": 0.04395637313432836}}
{"outputs": [{"text": "zip_buffer = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED)\n\n    for file_path in file_paths:\n        if isinstance(file_path, str):\n            zip_file.write(file_path)\n        else:\n            zip_file.writestr(zipfile.ZipInfo(os.path.basename(file_path)), file_path)\n\n    zip_buffer.seek(0)\n\n    return FileResponse(zip_buffer)", "tokens": ["zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "file", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "'", ",", " zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "            ", "zip", "_", "file", ".", "write", "(", "file", "_", "path", ")", "\n", "        ", "else", ":", "\n", "            ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "zip", "file", ".", "Z", "ip", "Info", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", ",", " file", "_", "path", ")", "\n", "\n", "    ", "zip", "_", "buffer", ".", "seek", "(", "0", ")", "\n", "\n", "    ", "return", " File", "Response", "(", "zip", "_", "buffer", ")", "\n", "\n", "def"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -0.9761742949485779, -0.004129811190068722, -0.010017359629273415, -3.540453326422721e-05, -0.01855281926691532, -0.00037996700848452747, -0.002871915465220809, -0.014420459978282452, -0.08506321161985397, -0.7042531371116638, -0.08407842367887497, -0.6317298412322998, -0.012501801364123821, -0.1161556988954544, -0.00023815179883968085, -5.066266385256313e-05, -0.002934081247076392, -0.00208850996568799, -7.164221460698172e-05, -0.0014396075857803226, -0.006637431215494871, -0.00010394509445177391, -3.0040289857424796e-05, -0.014011114835739136, -0.5256598591804504, -0.06555986404418945, -1.003480076789856, -0.001874001114629209, -0.4816158711910248, -0.00012373158824630082, -2.706014311115723e-05, -0.0014844838296994567, -0.03471820056438446, -0.0037776315584778786, -0.0013719918206334114, -0.0001935771433636546, -0.0009179668850265443, -0.05767645686864853, -0.015519092790782452, -0.8496133685112, -0.0002302858338225633, -0.11018482595682144, -0.2679454982280731, -0.08784057199954987, -0.017840392887592316, -0.016993625089526176, -0.0015348332235589623, -1.2993727978027891e-05, -2.1815061700181104e-05, -0.0007905219099484384, -0.00296248821541667, -0.006792668718844652, -0.2695506811141968, -0.5201230645179749, -6.723177648382261e-05, -0.0011029120068997145, -9.297892393078655e-05, -0.00029774048016406596, -0.0006824786541983485, -0.148813396692276, -0.06127448007464409, -0.03539903089404106, -0.0008880723617039621, -1.0398764610290527, -0.009554374031722546, -0.0037068482488393784, -0.0003768687602132559, -0.004887538496404886, -0.0003328961320221424, -0.031968872994184494, -2.1934269170742482e-05, -8.272782724816352e-05, -0.8146407604217529, -0.03737558797001839, -0.056885406374931335, -0.23190593719482422, -1.2516897186287679e-05, -0.06160328537225723, -0.00037293630884960294, -0.20068959891796112, -0.002072450239211321, -0.019492849707603455, -0.00044109628652222455, -0.007199652958661318, -0.00010430268594063818, -9.905801562126726e-05, -0.0032699231524020433, -0.04516128450632095, -2.7348058223724365, -0.007172667887061834, -0.0001532914029667154, -0.18419639766216278, -0.7406152486801147, -0.011449109762907028, -0.3280191421508789, -0.5688846707344055, -0.0003718638326972723, -0.012936830520629883, -0.00039748396375216544, -0.02416839636862278, -4.768370445162873e-07, -0.001211386057548225, -0.049726326018571854, -0.00025781645672395825, -0.06359085440635681, -0.7128564119338989, -0.00038378025055862963, -0.016353974118828773, -0.0011445883428677917, -0.00021431533969007432, -0.07825090736150742, -0.016533154994249344, -0.03159783408045769, -0.0017926113214343786, -0.4477011263370514, -0.002823059679940343, -0.8419748544692993, -0.015518388710916042, -0.0024016841780394316, -0.0006244616815820336, -0.0011767374817281961, -0.0019528857665136456, -0.021577367559075356, -1.313317060470581, -8.535020606359467e-05, -1.1579434871673584, -0.0034343567676842213, -8.583032467868179e-06, -0.00032300499151460826, -0.09522350132465363, -0.0006301801186054945, -0.00036113892565481365, -1.8902974128723145, -0.4440173804759979, -0.012780542485415936, -0.3656274676322937], "finish_reason": "stop"}], "metrics": {"energy": 151.0366386642456, "energy_per_token": 1.0944683961177217, "time": 5.8987174, "time_per_token": 0.04274432898550724}}
{"outputs": [{"text": "response = FileResponse(FileWrapper(ZipFile(io.BytesIO(compress_files(file_paths)))))\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = f'attachment; filename=\"{response.filename}\"'\n    return response", "tokens": ["response", " =", " File", "Response", "(", "File", "Wrapper", "(", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "(", "compress", "_", "files", "(", "file", "_", "paths", "))", ")))", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "'", "att", "achment", ";", " filename", "=", "\"", "{", "response", ".", "filename", "}\"", "'", "\n", "    ", "return", " response", "\n", "\n", "def"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.8485674858093262, -1.8843927383422852, -2.815377712249756, -0.009140314534306526, -1.4309574365615845, -0.03340195491909981, -0.12094539403915405, -0.6380788087844849, -0.6947413086891174, -0.00028689560713246465, -0.07558326423168182, -0.00015293381875380874, -0.5442655086517334, -2.0893609523773193, -0.4340958595275879, -2.278106212615967, -0.2504603862762451, -0.15425659716129303, -0.0002683041093405336, -0.0003554189461283386, -0.19148512184619904, -0.9010956883430481, -0.019825981929898262, -0.01890065334737301, -0.08261655271053314, -0.09073425084352493, -0.01125392783433199, -0.0003667397249955684, -0.29782935976982117, -2.098061486321967e-05, -0.03264719247817993, -0.16799460351467133, -0.0012741313548758626, -0.0004415729199536145, -0.018827421590685844, -0.004006574396044016, -0.04642197862267494, -0.04845321178436279, -0.2253989279270172, -0.03392651677131653, -0.006115178111940622, -0.00018130090029444546, -0.00840743724256754, -0.0004568248405121267, -1.7762025890988298e-05, -0.11734551936388016, -1.718827486038208, -0.2099909484386444, -0.0005097282119095325, -0.00019333878299221396, -0.0011401826050132513, -0.004579413682222366, -0.044056542217731476, -0.07262638956308365, -0.724030613899231, -2.332717180252075, -0.10867969691753387, -0.9966074228286743, -0.0604090690612793, -0.004949222784489393, -0.010007799603044987, -0.08034486323595047, -0.12071298062801361, -0.0008809261489659548, -0.012391484342515469, -0.00227074115537107, -0.19720521569252014], "finish_reason": "stop"}], "metrics": {"energy": 76.57337392044066, "energy_per_token": 1.0784982242315586, "time": 2.9562187, "time_per_token": 0.04163688309859155}}
{"outputs": [{"text": "response = HttpResponse(content_type='application/zip')\n    response['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in file_paths:\n            if isinstance(file_path, str):\n                with io.open(file_path, 'rb') as f:\n                    zip_file.writestr(os.path.basename(file_path), f.read())\n            elif isinstance(file_path, io.IOBase):\n                zip_file.writestr(os.path.basename(file_path.name), file_path.read())\n    response.streaming = True\n    response.set_content(zip_buffer.getvalue())\n    return response", "tokens": ["response", " =", " Http", "Response", "(", "content", "_", "type", "='", "application", "/", "zip", "')", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "'", ",", " zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "file", "_", "path", ",", " str", "):", "\n", "                ", "with", " io", ".", "open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "    ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " f", ".", "read", "())", "\n", "            ", "elif", " isinstance", "(", "file", "_", "path", ",", " io", ".", "IO", "Base", "):", "\n", "                ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ".", "name", ")", ",", " file", "_", "path", ".", "read", "())", "\n", "    ", "response", ".", "stream", "ing", " =", " True", "\n", "    ", "response", ".", "set", "_", "content", "(", "zip", "_", "buffer", ".", "get", "value", "())", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -2.3416497707366943, -0.007070875260978937, -0.2531101405620575, -0.2387896180152893, -0.008323621936142445, -0.0008099374244920909, -0.2566126585006714, -0.003919658251106739, -0.0005957497633062303, -0.0318029448390007, -0.0440809540450573, -0.016415894031524658, -0.12040410935878754, -0.5950620770454407, -0.027002695947885513, -0.0036332090385258198, -0.0002775999018922448, -0.025279972702264786, -0.00015579440514557064, -2.884823152271565e-05, -0.15067675709724426, -0.21141976118087769, -0.0017387047410011292, -0.0003629264247138053, -0.025456981733441353, -0.004279859364032745, -0.01242727693170309, -0.13469994068145752, -0.15224860608577728, -0.002526308177039027, -0.00014649749209638685, -0.0031434905249625444, -0.0035527939908206463, -0.021648531779646873, -0.37679606676101685, -1.7538546323776245, -0.18103908002376556, -1.1568819284439087, -0.00454500038176775, -0.019243454560637474, -3.2305197237292305e-05, -0.02683466486632824, -0.00034457468427717686, -0.00275113875977695, -0.009432275779545307, -0.06081578880548477, -0.5565142631530762, -1.0615307092666626, -0.0011211306555196643, -7.56950321374461e-05, -0.002176774898543954, -0.0012218636693432927, -0.00040344204171560705, -0.0014453213661909103, -0.006115533411502838, -0.0002053765201708302, -0.00017248096992261708, -0.005119191948324442, -0.23700276017189026, -0.04558313265442848, -0.9924367666244507, -0.000362807244528085, -0.5343503952026367, -0.0004117832868359983, -3.6477376852417365e-05, -0.001540784491226077, -0.014174379408359528, -0.005416123662143946, -0.0013177053770050406, -0.00022837892174720764, -0.0003275334893260151, -0.036014314740896225, -5.1020273531321436e-05, -0.2614758014678955, -0.07928957045078278, -0.1402304619550705, -0.0013556823832914233, -0.005081476178020239, -0.0017494149506092072, -0.04056374356150627, -0.3110310137271881, -0.09620809555053711, -0.016380127519369125, -0.011127793230116367, -0.0016532575245946646, -3.015949550899677e-05, -2.4437606043647975e-05, -0.0007460909546352923, -0.00162588432431221, -0.001427227514795959, -0.2321190983057022, -0.6305180788040161, -6.151010165922344e-05, -0.0010848119854927063, -0.00011622230522334576, -0.0004543225804809481, -0.0004993622424080968, -0.1564401090145111, -0.07366415113210678, -0.043205320835113525, -0.00047267231275327504, -1.3380379676818848, -2.932187557220459, -7.950943836476654e-05, -0.14591848850250244, -0.0009588173124939203, -0.01395892072468996, -0.0003079893649555743, -0.00018261195509694517, -0.028480101376771927, -0.11989689618349075, -0.016815582290291786, -0.003237484721466899, -0.00023112009512260556, -1.3612115383148193, -0.13803251087665558, -0.015484467148780823, -0.00014220656885299832, -0.000510204816237092, -0.04632671922445297, -0.003295112634077668, -0.003752216463908553, -0.00013982271775603294, -0.062243323773145676, -0.0004670721245929599, -4.2199197196168825e-05, -0.000750736624468118, -0.05432402715086937, -0.7440072298049927, -0.0006002769805490971, -0.001320562674663961, -0.0007304860628210008, -0.00912861991673708, -7.152555099310121e-07, -5.23315102327615e-05, -0.008975989185273647, -0.00020597243565134704, -9.965400386136025e-05, -0.0017169271595776081, -0.0023770667612552643, -0.006776802707463503, -0.0025170331355184317, -0.0006104036583565176, -0.009837361052632332, -0.009272841736674309, -0.05693529546260834, -1.2497737407684326, -0.19238942861557007, -8.594620157964528e-05, -0.00032586511224508286, -3.85038583772257e-05, -4.100715523236431e-05, -0.0003666205739136785, -0.6583778262138367, -0.0006935574929229915, -0.39647376537323, -0.0002543602604418993, -0.01399747934192419, -0.011595471762120724, -0.00016068121476564556, -0.3681475520133972, -0.0024986020289361477, -0.004407335072755814, -5.829164365422912e-05, -0.003898996626958251, -2.3841830625315197e-06, -1.5497195136049413e-06, -6.067568756407127e-05, -0.013675804249942303, -0.16415226459503174, -0.0014424644177779555, -0.0008355463505722582, -0.0005832401220686734, -0.0032719431910663843, -7.784063927829266e-05, -0.0013615157222375274, -0.06781800091266632, -0.00011765264935093, -0.006885491777211428, -0.010664967820048332, -0.005857682321220636, -0.0013342535821720958, -0.0006139777251519263, -0.016578063368797302, -0.0004711233195848763, -5.817244164063595e-05, -0.003230474190786481, -0.04194719344377518, -0.008482971228659153, -0.003906952682882547, -0.8389859199523926, -0.3827558159828186, -0.02480144239962101, -2.291429281234741, -0.017202220857143402, -0.10505688935518265, -0.03346940129995346, -0.04733811691403389, -0.003972022328525782, -0.05237958952784538, -0.03884188458323479, -1.2803363800048828, -0.004082678817212582, -0.8216458559036255, -0.10365720093250275, -0.016862235963344574, -0.000987756997346878, -4.0649541915627196e-05, -0.008710011839866638, -0.008497510105371475, -0.09842764586210251, -0.014337852597236633, -0.004470473621040583, -0.02257668413221836, -0.20502160489559174, -0.0030971437226980925, -0.9239574074745178, -1.0728830375228426e-06, -2.3841855067985307e-07, -7.998623186722398e-05, -7.378782902378589e-05, -0.13886423408985138], "finish_reason": "stop"}], "metrics": {"energy": 221.2834770164491, "energy_per_token": 0.9878726652520049, "time": 9.665209, "time_per_token": 0.04314825446428572}}
{"outputs": [{"text": "# Create an in-memory file to hold the zip contents\n    zip_file = io.BytesIO()\n    zip_writer = zipfile.ZipFile(zip_file, 'w')\n\n    # Add each file to the zip\n    for file_path in file_paths:\n        if isinstance(file_path, str) and os.path.exists(file_path):\n            zip_writer.write(file_path, os.path.basename(file_path))\n        elif isinstance(file_path, (io.BytesIO, io.StringIO)):\n            zip_writer.writestr(os.path.basename(file_path.name), file_path.read())\n        else:\n            raise TypeError(\"file_path must be a string or file-like object\")\n\n    zip_writer.close()\n    zip_file.seek(0)  # Move file pointer to the start of the ZIP file\n\n    # Create a FileResponse object for the ZIP file and return it\n    response = FileResponse(\n        zip_file,\n        content_type='application/", "tokens": ["#", " Create", " an", " in", "-", "memory", " file", " to", " hold", " the", " zip", " contents", "\n", "    ", "zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "writer", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "file", ",", " '", "w", "')", "\n", "\n", "    ", "#", " Add", " each", " file", " to", " the", " zip", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "file", "_", "path", ",", " str", ")", " and", " os", ".", "path", ".", "exists", "(", "file", "_", "path", "):", "\n", "            ", "zip", "_", "writer", ".", "write", "(", "file", "_", "path", ",", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", "\n", "        ", "elif", " isinstance", "(", "file", "_", "path", ",", " (", "io", ".", "Bytes", "IO", ",", " io", ".", "String", "IO", "))", ":", "\n", "            ", "zip", "_", "writer", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ".", "name", ")", ",", " file", "_", "path", ".", "read", "())", "\n", "        ", "else", ":", "\n", "            ", "raise", " Type", "Error", "(", "\"", "file", "_", "path", " must", " be", " a", " string", " or", " file", "-", "like", " object", "\"", ")", "\n", "\n", "    ", "zip", "_", "writer", ".", "close", "()", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "  ", "#", " Move", " file", " pointer", " to", " the", " start", " of", " the", " Z", "IP", " file", "\n", "\n", "    ", "#", " Create", " a", " File", "Response", " object", " for", " the", " Z", "IP", " file", " and", " return", " it", "\n", "    ", "response", " =", " File", "Response", "(", "\n", "        ", "zip", "_", "file", ",", "\n", "        ", "content", "_", "type", "='", "application", "/"], "logprobs": [-2.3781299591064453, -1.326112151145935, -2.258169174194336, -1.1605969667434692, -0.011766435578465462, -0.0004741021548397839, -1.224639654159546, -2.9170708656311035, -1.3980393409729004, -0.07632631063461304, -2.052802324295044, -1.0445082187652588, -0.2206987738609314, -0.003067908575758338, -0.9128161072731018, -0.15337194502353668, -0.8677351474761963, -0.0500137060880661, -0.0043152314610779285, -1.2874520507466514e-05, -0.018299441784620285, -0.0008036244544200599, -0.0028292411006987095, -0.000985494232736528, -0.9216610193252563, -1.5129287242889404, -0.05516437441110611, -0.514204740524292, -0.0003507714136503637, -0.059736188501119614, -0.00010358751023886725, -2.5629668016335927e-05, -0.001116367639042437, -0.002955238102003932, -0.035940371453762054, -0.00025650550378486514, -0.006035554688423872, -0.00015293381875380874, -9.894321920000948e-06, -0.005004736129194498, -0.5585833191871643, -0.025077009573578835, -0.5228345394134521, -0.01889854669570923, -0.24003303050994873, -0.00030894274823367596, -0.20014210045337677, -1.36231529712677, -0.6037180423736572, -0.060501083731651306, -0.37961381673812866, -0.0034635812044143677, -0.15309078991413116, -0.45111724734306335, -0.0005712069687433541, -0.012956364080309868, -0.31630998849868774, -0.08078633248806, -0.023896420374512672, -0.03480029106140137, -0.0011992413783445954, -1.4543427823809907e-05, -3.135155202471651e-05, -0.0005237876321189106, -0.0008411445305682719, -0.0032673091627657413, -0.3338790237903595, -0.4944950044155121, -5.173549288883805e-05, -0.0007051127031445503, -8.010543388081715e-05, -0.00037448544753715396, -0.0004969792207702994, -0.09674293547868729, -2.7170019149780273, -0.05417780205607414, -0.5077410340309143, -0.00040975757292471826, -0.00020883286197204143, -0.0020957665983587503, -0.9108622670173645, -7.497983460780233e-05, -0.00582094257697463, -4.529942543740617e-06, -2.3245540432981215e-05, -0.012458711862564087, -0.039817117154598236, -0.0008442413527518511, -0.5172794461250305, -0.0021294315811246634, -0.013303209096193314, -0.00010740180005086586, -0.0008278042078018188, -0.00019894051365554333, -0.0388682596385479, -5.9126061387360096e-05, -4.8993817472364753e-05, -0.47668197751045227, -0.24955278635025024, -0.0020808966364711523, -0.0002294515579706058, -0.013836654834449291, -0.012239586561918259, -1.1920928244535389e-07, -3.909988299710676e-05, -0.0024429496843367815, -2.288792165927589e-05, -2.706014311115723e-05, -0.02287313900887966, -0.017757248133420944, -0.15066854655742645, -0.464786559343338, -0.040434498339891434, -3.71926071238704e-05, -0.0002019201492657885, -7.510157047363464e-06, -4.088794958079234e-05, -0.0001854724541772157, -2.414884567260742, -1.3480430841445923, -0.00042548662167973816, -0.709026575088501, -0.001029319129884243, -0.004916246049106121, -0.042190875858068466, -0.00027211778797209263, -0.3424537479877472, -2.169585604860913e-05, -0.19604386389255524, -0.02996990457177162, -0.01730743981897831, -0.0002181292074965313, -0.049361251294612885, -0.0005254556890577078, -0.004157946910709143, -6.01988795096986e-05, -0.008798285387456417, -7.557583012385294e-05, -0.0002441108226776123, -0.006618246901780367, -0.047984395176172256, -0.46249791979789734, -0.0005247407825663686, -0.0016202905680984259, -0.00011717586312443018, -0.005741177126765251, -1.0728830375228426e-06, -0.00029404606902971864, -0.020713677629828453, -0.0001728385395836085, -0.00433897040784359, -0.05557864531874657, -0.019945181906223297, -0.0027214179281145334, -0.0019163592951372266, -0.011579446494579315, -0.00043215948971919715, -7.70062324590981e-05, -0.008710484951734543, -2.7083046436309814, -0.0328478179872036, -0.006616825703531504, -0.4883553087711334, -0.3720717132091522, -3.4450891689630225e-05, -0.025319375097751617, -0.00030191155383363366, -0.32300469279289246, -1.0992872714996338, -2.0861407392658293e-05, -0.39655131101608276, -0.687069833278656, -1.2145158052444458, -0.021278545260429382, -1.016681432723999, -0.16417279839515686, -0.003391112433746457, -0.09940434247255325, -0.3258649408817291, -0.19615262746810913, -1.3540712594985962, -0.07684054225683212, -0.0076112039387226105, -0.002074234653264284, -0.1987125128507614, -0.0031579884234815836, -0.0022374375257641077, -0.04071426019072533, -0.0010696887038648129, -0.9397013187408447, -0.0015829188050702214, -0.9244997501373291, -0.00027855331427417696, -0.0019867937080562115, -8.666139910928905e-05, -0.023011313751339912, -0.7329286336898804, -0.11388562619686127, -0.0018330690218135715, -0.010244996286928654, -0.009953508153557777, -0.0036118291318416595, -0.00011634149996098131, -0.0005228344234637916, -0.0016761076403781772, -1.482746958732605, -6.305972783593461e-05, -1.9789189100265503, -2.317200183868408, -0.09324140846729279, -0.05369291082024574, -1.0562509298324585, -0.8182961940765381, -0.14133486151695251, -0.030647961422801018, -3.974242925643921, -0.00012659224739763886, -0.3306833803653717, -0.15438655018806458, -0.3970487415790558, -0.0001586549769854173, -0.48325416445732117, -0.47534215450286865, -0.22978392243385315, -0.5496315956115723, -0.0015968440566211939, -0.5087071061134338, -2.581265449523926, -0.040798380970954895, -0.20221103727817535, -3.349725011503324e-05, -0.011902502737939358, -1.748450517654419, -1.8202720880508423, -0.03096272237598896, -0.11309141665697098, -0.000491855782456696, -0.8924753665924072, -0.0018817351665347815, -0.005954621359705925, -9.298280929215252e-06, -0.00020382710499688983, -2.8880715370178223, -0.013994187116622925, -0.05893350765109062, -0.00156816013623029, -0.00020549570035655051, -0.004593653604388237, -0.19977344572544098, -0.002454484812915325, -1.252535343170166, -7.009260298218578e-05, -0.11221101135015488, -0.4310746192932129, -0.0016783688915893435, -0.0002012050390476361], "finish_reason": "length"}], "metrics": {"energy": 293.6874210290907, "energy_per_token": 1.1472164883948854, "time": 11.352207, "time_per_token": 0.04434455859375}}
{"outputs": [{"text": "response = FileResponse()\n    response.set_content_disposition('attachment')\n    response.set_content_type('application/zip')\n    with ZipFile(io.BytesIO(), mode='w') as zip_file:\n        for file_path in file_paths:\n            with io.open(file_path, mode='rb') as file:\n                zip_file.writestr(os.path.basename(file_path), file.read())\n    response['Content-Disposition'] = response.content_disposition.replace('attachment', 'inline')\n    response.file.seek(0)\n    return response", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "response", ".", "set", "_", "content", "_", "dis", "position", "('", "att", "achment", "')", "\n", "    ", "response", ".", "set", "_", "content", "_", "type", "('", "application", "/", "zip", "')", "\n", "    ", "with", " Zip", "File", "(", "io", ".", "Bytes", "IO", "()", ",", " mode", "='", "w", "')", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "with", " io", ".", "open", "(", "file", "_", "path", ",", " mode", "='", "rb", "')", " as", " file", ":", "\n", "                ", "zip", "_", "file", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " file", ".", "read", "())", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " response", ".", "content", "_", "dis", "position", ".", "replace", "('", "att", "achment", "'", ",", " '", "inline", "')", "\n", "    ", "response", ".", "file", ".", "seek", "(", "0", ")", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -1.006925344467163, -0.9079340100288391, -1.565821647644043, -0.0031749813351780176, -1.2674928903579712, -0.23402440547943115, -0.06730189919471741, -0.00037448544753715396, -1.3262434005737305, -0.005817505531013012, -0.0004567056894302368, -1.424712061882019, -0.0281074196100235, -0.14391565322875977, -0.43537551164627075, -1.370809555053711, -0.46217837929725647, -0.013332147151231766, -0.1948605626821518, -0.00302797625772655, -0.03624818101525307, -0.07208991050720215, -0.015547966584563255, -0.0017553649377077818, -0.009505253285169601, -0.016198454424738884, -0.030051231384277344, -0.3285863399505615, -1.270621657371521, -0.7580110430717468, -0.015445848926901817, -0.026724757626652718, -0.30508941411972046, -0.0001230164198204875, -0.02645660936832428, -0.00103265349753201, -0.5411180853843689, -0.0037746625021100044, -1.0136876106262207, -0.060305483639240265, -0.04754013940691948, -0.18683241307735443, -0.00011002412065863609, -0.528348445892334, -0.25433671474456787, -0.1175476610660553, -0.003951243124902248, -0.013194980099797249, -0.004542745649814606, -0.05769367143511772, -0.41560763120651245, -0.10996698588132858, -0.013492346741259098, -0.009515644051134586, -0.002273833379149437, -2.6225699912174605e-05, -2.7417760065873154e-05, -0.0008750900160521269, -0.002003092784434557, -0.001831522211432457, -3.1586785316467285, -2.8745367527008057, -0.00011121608258690685, -0.22203285992145538, -0.012641416862607002, -0.030088478699326515, -0.0019539566710591316, -0.0006637753685936332, -0.031064307317137718, -1.2488245964050293, -0.010371713899075985, -0.015430706553161144, -0.014879672788083553, -0.0026021688245236874, -0.3862857222557068, -0.22558093070983887, -0.011910866014659405, -0.0009402383584529161, -0.08377107232809067, -0.0038630161434412003, -0.0039339070208370686, -0.00012396997772157192, -0.11327951401472092, -0.0005080600967630744, -9.727005090098828e-05, -0.0011148196645081043, -0.05932285264134407, -0.6431336998939514, -0.0007310817018151283, -0.002571611199527979, -0.0019182630348950624, -0.024415403604507446, -3.576278118089249e-07, -9.369411418447271e-05, -0.002359822392463684, -0.028010401874780655, -0.0007391819381155074, -0.004632574040442705, -0.0034332876093685627, -0.008817309513688087, -0.011057056486606598, -0.0034477810841053724, -0.01715511456131935, -0.005897857714444399, -0.3802371919155121, -0.21555179357528687, -2.411724805831909, -0.025103282183408737, -0.00014220656885299832, -0.8188900351524353, -0.000653411028906703, -5.018585216021165e-05, -0.006264336407184601, -1.98388671875, -0.2835899889469147, -1.8660178184509277, -0.04574394226074219, -0.002155958442017436, -0.004878404084593058, -0.873080849647522, -0.164356991648674, -0.5677660703659058, -1.459732174873352, -0.00689602829515934, -0.6435940861701965, -0.00019167017308063805, -0.10960573703050613, -0.07122482359409332, -0.039796728640794754, -0.047661419957876205, -0.017569266259670258, -0.5781455039978027, -0.31888797879219055, -3.640730381011963, -1.698093056678772, -0.4418089985847473, -0.004295883700251579, -0.007186634000390768, -0.03048008121550083, -0.045904841274023056, -0.014230557717382908, -0.46122127771377563, -0.008210359141230583, -0.6647253632545471, -9.536738616588991e-07, -2.3841855067985307e-07, -0.00028975578607060015, -6.09140915912576e-05, -0.12768490612506866], "finish_reason": "stop"}], "metrics": {"energy": 162.2987253150939, "energy_per_token": 1.040376444327525, "time": 6.94809, "time_per_token": 0.044539038461538456}}
{"outputs": [{"text": "response = FileResponse()  # Create an empty FileResponse object\n    response['Content-Type'] = 'application/zip'  # Set the Content-Type to 'application/zip'\n\n    # Determine whether the response needs to be returned immediately or is instead set to the client via a view\n    response.headers['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\n    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'\n    response.headers['Pragma'] = 'no-cache'\n    response._headers['Content-Length'] = 0  # Set the Content-Length to 0 to avoid triggering caching\n    # response.headers['Expires'] = 'Thu, 01 Jan 1970 00:00:00 GMT'  # Set the Expires header to zero to prevent caching\n\n    with ZipFile(io.BytesIO(), 'w') as zip_file:  # Create a ZipFile object and open it in write mode\n        for path in file_paths:\n            if os.path", "tokens": ["response", " =", " File", "Response", "()", "  ", "#", " Create", " an", " empty", " File", "Response", " object", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "  ", "#", " Set", " the", " Content", "-", "Type", " to", " '", "application", "/", "zip", "'", "\n", "\n", "    ", "#", " Determine", " whether", " the", " response", " needs", " to", " be", " returned", " immediately", " or", " is", " instead", " set", " to", " the", " client", " via", " a", " view", "\n", "    ", "response", ".", "headers", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "response", ".", "headers", "['", "Cache", "-", "Control", "']", " =", " '", "no", "-", "store", ",", " no", "-", "cache", ",", " must", "-", "re", "validate", ",", " max", "-", "age", "=", "0", "'", "\n", "    ", "response", ".", "headers", "['", "P", "ragma", "']", " =", " '", "no", "-", "cache", "'", "\n", "    ", "response", ".", "_", "headers", "['", "Content", "-", "Length", "']", " =", " ", "0", "  ", "#", " Set", " the", " Content", "-", "Length", " to", " ", "0", " to", " avoid", " triggering", " caching", "\n", "    ", "#", " response", ".", "headers", "['", "Ex", "pires", "']", " =", " '", "Thu", ",", " ", "0", "1", " Jan", " ", "1", "9", "7", "0", " ", "0", "0", ":", "0", "0", ":", "0", "0", " GMT", "'", "  ", "#", " Set", " the", " Ex", "pires", " header", " to", " zero", " to", " prevent", " caching", "\n", "\n", "    ", "with", " Zip", "File", "(", "io", ".", "Bytes", "IO", "()", ",", " '", "w", "')", " as", " zip", "_", "file", ":", "  ", "#", " Create", " a", " Zip", "File", " object", " and", " open", " it", " in", " write", " mode", "\n", "        ", "for", " path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " os", ".", "path"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -2.764328718185425, -0.0004700509598478675, -1.239652395248413, -2.4044930934906006, -0.25468552112579346, -0.2656008303165436, -0.0009105826611630619, -0.6358042359352112, -0.15618735551834106, -0.47352683544158936, -1.3646785020828247, -0.4944342374801636, -0.013036380521953106, -0.0005802616360597312, -0.2081259936094284, -3.015949550899677e-05, -0.009519658982753754, -0.09853675216436386, -0.0018509175861254334, -0.00033206192892976105, -0.0069641005247831345, -0.003286914434283972, -1.230315923690796, -0.0008135108510032296, -0.1391771137714386, -0.1793140023946762, -1.0992152690887451, -0.002290128031745553, -0.0012376990634948015, -0.7074181437492371, -1.1482975482940674, -0.010903069749474525, -0.0005236684810370207, -0.0029110219329595566, -0.002155958442017436, -0.056491170078516006, -1.8134171962738037, -0.0005346299149096012, -0.9935125112533569, -3.8614702224731445, -2.1880154609680176, -0.7050023078918457, -3.123196840286255, -2.9032273292541504, -0.3786574602127075, -0.3410501778125763, -4.539515495300293, -3.3285012245178223, -0.7172228097915649, -3.9815423488616943, -3.908287763595581, -3.4237060546875, -0.3722822070121765, -2.57899808883667, -4.658786296844482, -3.2517013549804688, -0.9502097964286804, -4.356807231903076, -0.5035988688468933, -0.01829148270189762, -2.394880533218384, -0.4009135365486145, -3.6901655197143555, -0.33976930379867554, -0.13658134639263153, -0.0002836778585333377, -0.05512579157948494, -0.00033468366018496454, -0.00013612773909699172, -0.005001296289265156, -0.3685908615589142, -0.04296976327896118, -0.00039962888695299625, -0.14171256124973297, -0.005872852168977261, -0.012308119796216488, -0.12647224962711334, -0.19019952416419983, -0.00468751136213541, -0.00033206192892976105, -0.004354637581855059, -0.005481214262545109, -0.4064323902130127, -1.0656238794326782, -1.137614130973816, -0.23699842393398285, -2.4117727279663086, -0.07892114669084549, -2.290100574493408, -0.0015541153261438012, -0.008627521805465221, -0.0001311216183239594, -0.02613903395831585, -0.029901528730988503, -0.7203009128570557, -0.00019798702851403505, -0.7970640063285828, -0.256358802318573, -0.07286892086267471, -5.578839045483619e-05, -0.001725257490761578, -0.12915103137493134, -0.003531411988660693, -1.5735502529423684e-05, -0.00037555795279331505, -0.002179153962060809, -0.04275105521082878, -0.3062465488910675, -3.7788631743751466e-05, -0.0004009396652691066, -0.00031585473334416747, -0.00298816105350852, -0.20528356730937958, -0.29404696822166443, -0.0756409615278244, -0.020571913570165634, -0.024469729512929916, -0.12237248569726944, -0.02716408483684063, -1.560481309890747, -6.103329360485077e-05, -9.357491217087954e-05, -0.0002978596603497863, -0.003759936196729541, -0.0051177688874304295, -4.7444173105759546e-05, -0.0012176964664831758, -0.002894381061196327, -0.012602689675986767, -0.40590155124664307, -0.09138604998588562, -0.24307125806808472, -3.2645678520202637, -0.19330519437789917, -0.6525031328201294, -1.9507261514663696, -0.0003667397249955684, -1.346354603767395, -0.012344150803983212, -0.04989100620150566, -1.32956063747406, -0.03129817917943001, -0.3533470928668976, -0.0002087136817863211, -1.3474140167236328, -0.5892542600631714, -0.08594836294651031, -0.0034230705350637436, -0.0018048678757622838, -0.0587075836956501, -0.1834108680486679, -0.00015400654228869826, -1.190070629119873, -2.1250672340393066, -3.0327465534210205, -2.9097001552581787, -0.5405381321907043, -1.318589448928833, -2.7710838317871094, -1.1649274826049805, -0.19649715721607208, -2.7535147666931152, -0.09580837190151215, -1.0883116722106934, -0.00012730741582345217, -0.0013063953956589103, -0.01031814981251955, -0.36836153268814087, -1.5574215650558472, -0.0028122421354055405, -0.0008029097807593644, -0.10350532829761505, -0.009133935905992985, -0.17003120481967926, -0.0006935574929229915, -0.0014319891342893243, -0.00013016807497479022, -0.044084031134843826, -0.0018951804377138615, -0.000773369160015136, -0.0019545515533536673, -0.0023902675602585077, -0.0002456601650919765, -0.0005000770906917751, -0.000747758662328124, -0.00019703354337252676, -0.0033835088834166527, -0.03899277746677399, -0.04217018932104111, -0.004237838555127382, -0.08965858817100525, -0.0028802361339330673, -0.6606855392456055, -0.2950752079486847, -0.31339767575263977, -0.001896727248094976, -0.5703789591789246, -0.03733126074075699, -3.041120767593384, -0.7148298621177673, -1.4337778091430664, -0.02648075670003891, -0.03569722920656204, -0.3981141746044159, -0.0005770448478870094, -1.851771593093872, -0.777795672416687, -0.010283815674483776, -0.02018050104379654, -0.30703380703926086, -8.05822346592322e-05, -0.02843097411096096, -0.0010645681759342551, -0.46073272824287415, -0.0019035092554986477, -0.53862065076828, -0.0828951820731163, -0.14186328649520874, -8.976056415122002e-05, -0.2536298632621765, -0.1264573335647583, -0.11220493912696838, -0.0034191501326858997, -0.6977874636650085, -2.3841574147809297e-05, -0.10272133350372314, -0.06971689313650131, -0.9783262610435486, -0.004910196177661419, -0.211457297205925, -3.204878330230713, -1.3539493083953857, -0.3805382251739502, -0.10415853559970856, -0.2318097949028015, -0.06986497342586517, -0.053087394684553146, -0.02280963771045208, -0.048091989010572433, -1.5781748294830322, -0.022624118253588676, -0.0017402517842128873, -7.962863310240209e-05, -6.067568756407127e-05, -0.00108159682713449, -1.3337385654449463, -0.0029484631959348917, -0.3167286217212677, -1.2732951641082764, -0.00023910524032544345, -0.0006675875629298389], "finish_reason": "length"}], "metrics": {"energy": 259.74073972415914, "energy_per_token": 1.0146122645474966, "time": 11.340925, "time_per_token": 0.04430048828125}}
{"outputs": [{"text": "response = FileResponse()\n    zip_buffer = io.BytesIO()\n    zip_writer = zipfile.ZipFile(zip_buffer, 'w', compression=zipfile.ZIP_DEFLATED, compresslevel=6)\n    for file in file_paths:\n        if isinstance(file, (str, pathlib.PurePosixPath)):\n            zip_writer.write(file.as_posix())\n        else:\n            zip_writer.writestr(file.name, file.read())\n    zip_writer.close()\n    zip_buffer.seek(0)\n    response.content = zip_buffer.read()\n    return response", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "writer", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " '", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ",", " compress", "level", "=", "6", ")", "\n", "    ", "for", " file", " in", " file", "_", "paths", ":", "\n", "        ", "if", " isinstance", "(", "file", ",", " (", "str", ",", " path", "lib", ".", "P", "ure", "Pos", "ix", "Path", "))", ":", "\n", "            ", "zip", "_", "writer", ".", "write", "(", "file", ".", "as", "_", "pos", "ix", "())", "\n", "        ", "else", ":", "\n", "            ", "zip", "_", "writer", ".", "w", "rit", "est", "r", "(", "file", ".", "name", ",", " file", ".", "read", "())", "\n", "    ", "zip", "_", "writer", ".", "close", "()", "\n", "    ", "zip", "_", "buffer", ".", "seek", "(", "0", ")", "\n", "    ", "response", ".", "content", " =", " zip", "_", "buffer", ".", "read", "()", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -1.708249807357788, -0.22780700027942657, -1.0665850639343262, -0.00458131218329072, -0.007511940784752369, -3.755022044060752e-05, -0.019806114956736565, -0.00036423723213374615, -0.003814208786934614, -0.01097876951098442, -0.11560756713151932, -0.864007830619812, -0.10839200764894485, -1.7367427349090576, -0.0007194076315499842, -0.08964202553033829, -0.00021169328829273582, -4.31528314948082e-05, -0.0013953244779258966, -0.002559483051300049, -0.04566115140914917, -0.000871040450874716, -0.011347162537276745, -0.00012575789878610522, -1.9311717551317997e-05, -0.007817625068128109, -0.5351079106330872, -0.0271016675978899, -0.7671341896057129, -0.002179034985601902, -1.140602469444275, -0.0078902468085289, -0.005127019714564085, -0.00010001159535022452, -1.6689160474925302e-05, -0.001178523525595665, -0.02276594005525112, -0.001515550771728158, -0.002054129960015416, -0.00019226610311307013, -0.00726474542170763, -2.114853858947754, -1.0433980226516724, -0.04127584025263786, -0.001948483637534082, -1.3242576122283936, -0.04112357646226883, -0.011405857279896736, -0.36263561248779297, -0.21956899762153625, -0.43336552381515503, -2.270510196685791, -0.008282361552119255, -3.957670196541585e-05, -4.815939246327616e-05, -0.002302497159689665, -0.00575670413672924, -0.0029081692919135094, -0.3069476783275604, -0.34746602177619934, -8.916457591112703e-05, -0.001149470335803926, -0.005686535034328699, -3.3208093643188477, -0.4303933382034302, -0.05592172592878342, -3.4374501705169678, -0.0019382515456527472, -0.0005351065192371607, -2.459188938140869, -8.821448318485636e-06, -1.716602087020874, -5.507317473529838e-05, -7.462222856702283e-05, -0.3397703170776367, -0.016895173117518425, -0.0296283308416605, -0.0007211944903247058, -0.6109576225280762, -0.007124021649360657, -0.009418223053216934, -0.0002444683632347733, -0.013826190494000912, -0.001100887660868466, -0.33286407589912415, -3.499191999435425, -1.0618383884429932, -1.4185804502631072e-05, -0.0027751526795327663, -9.369411418447271e-05, -0.6344268321990967, -0.06765346229076385, -0.021341094747185707, -0.5548158288002014, -1.4185804502631072e-05, -0.08981464058160782, -0.0003156163729727268, -0.1874750256538391, -0.0006151691195555031, -0.007846485823392868, -0.00021217002358753234, -0.026211963966488838, -6.842378934379667e-05, -0.00020823694649152458, -0.004249115474522114, -0.04056912288069725, -0.444791316986084, -0.04476376250386238, -0.23451916873455048, -0.03981906548142433, -0.01998608000576496, -0.7300003170967102, -0.26957035064697266, -0.2349487543106079, -0.011697276495397091, -0.09422263503074646, -0.09769392758607864, -0.0026430694852024317, -0.25755810737609863, -0.0010001424234360456, -0.007319420110434294, -0.000366263062460348, -0.006516753230243921, -0.05425266921520233, -0.4060685932636261, -0.007610138971358538, -0.012249595485627651, -0.008124280720949173, -0.013247096911072731, -0.0013513966696336865, -0.0011486368020996451, -0.004735564347356558, -0.029977770522236824, -0.03703848645091057, -0.05838119611144066, -0.32043126225471497, -0.6706807613372803, -0.06142561137676239, -0.0046306755393743515, -0.0003364712174516171, -2.4676019165781327e-05, -0.05402128025889397, -0.4083021581172943, -0.0008853329927660525, -0.008324685506522655, -0.013835008256137371, -1.2530124187469482, -0.0010600429959595203, -0.6021324396133423, -1.0728830375228426e-06, -2.3841855067985307e-07, -0.0005484507419168949, -3.6477376852417365e-05, -0.09684152156114578], "finish_reason": "stop"}], "metrics": {"energy": 161.3421842107773, "energy_per_token": 1.0021253677688031, "time": 6.942145, "time_per_token": 0.04311891304347826}}
{"outputs": [{"text": "files = []\n\n    for file_path in file_paths:\n        try:\n            with open(file_path, 'rb') as f:\n                content = f.read()\n                if file_path.endswith(\".json\"):\n                    file_content = json.dumps(content)\n                else:\n                    file_content = content\n                files.append((file_path, io.BytesIO(file_content)))\n        except (FileNotFoundError, OSError) as e:\n            print(\"ERROR: {}\".format(e))\n\n    zipped_file = io.BytesIO()\n    with zipfile.ZipFile(zipped_file, 'w') as zf:\n        for filename, content in files:\n            zf.writestr(filename, content)\n\n    response = FileResponse(zipped_file)\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(\"files.zip\")\n\n    return response", "tokens": ["files", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "if", " file", "_", "path", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "                ", "    ", "file", "_", "content", " =", " json", ".", "d", "umps", "(", "content", ")", "\n", "                ", "else", ":", "\n", "                ", "    ", "file", "_", "content", " =", " content", "\n", "                ", "files", ".", "append", "((", "file", "_", "path", ",", " io", ".", "Bytes", "IO", "(", "file", "_", "content", ")))", "\n", "        ", "except", " (", "File", "NotFound", "Error", ",", " O", "SE", "rror", ")", " as", " e", ":", "\n", "            ", "print", "(", "\"", "ERROR", ":", " {", "}\"", ".", "format", "(", "e", "))", "\n", "\n", "    ", "z", "ipped", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "z", "ipped", "_", "file", ",", " '", "w", "')", " as", " z", "f", ":", "\n", "        ", "for", " filename", ",", " content", " in", " files", ":", "\n", "            ", "z", "f", ".", "w", "rit", "est", "r", "(", "filename", ",", " content", ")", "\n", "\n", "    ", "response", " =", " File", "Response", "(", "z", "ipped", "_", "file", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "{}", "\"", "'", ".", "format", "(", "\"", "files", ".", "zip", "\"", ")", "\n", "\n", "    ", "return", " response"], "logprobs": [-3.5346145629882812, -0.2195008546113968, -0.511657178401947, -0.012717338278889656, -1.9024531841278076, -0.0001784403866622597, -0.34087979793548584, -0.5007647275924683, -0.14474116265773773, -0.018207790330052376, -0.01567143201828003, -0.0022341071162372828, -2.2172682292875834e-05, -2.2411095415009186e-05, -0.0027122637256979942, -0.002896758494898677, -0.016852155327796936, -2.450863838195801, -6.329813186312094e-05, -0.013640997000038624, -0.0013690156629309058, -1.4089603424072266, -0.2138112634420395, -0.008218517526984215, -0.014346548356115818, -0.00010251473577227443, -0.00036376056959852576, -0.03037751093506813, -0.21181762218475342, -0.008154078386723995, -0.002212102524936199, -0.00036530973738990724, -0.7179440855979919, -0.06746426969766617, -0.017554858699440956, -0.0011951930355280638, -2.841946840286255, -0.10399428009986877, -0.16076546907424927, -0.000346362212439999, -0.0003321811091154814, -0.0028666851576417685, -0.012320130132138729, -0.7875721454620361, -1.513777494430542, -3.711472988128662, -0.0027422227431088686, -0.0070642465725541115, -0.03817349299788475, -0.2249753177165985, -0.00019941726350225508, -2.3841855067985307e-07, -1.2372022867202759, -0.7490818500518799, -0.034780487418174744, -2.243649482727051, -0.005282847676426172, -0.2161402851343155, -0.024221455678343773, -0.002209128811955452, -0.0014156806282699108, -3.4734723567962646, -0.2940800189971924, -2.4888176918029785, -0.07017651945352554, -0.6089318990707397, -0.013812199234962463, -0.24645186960697174, -0.0002809368306770921, -0.00865884032100439, -0.165840744972229, -0.5708802342414856, -0.30879393219947815, -0.012427041307091713, -0.5855830311775208, -0.00020096666412428021, -0.005133542697876692, -0.0002329078270122409, -7.176141662057489e-05, -0.032150935381650925, -0.0003040566807612777, -0.0016230279579758644, -0.0004990047891624272, -0.10083478689193726, -0.02117234282195568, -0.17145094275474548, -0.26632365584373474, -0.0019434866262599826, -0.0008338788175024092, -0.4528992474079132, -0.11895547062158585, -0.0003091811086051166, -0.005678593181073666, -0.43922725319862366, -0.776121199131012, -2.0503786799963564e-05, -0.04013461619615555, -0.00013696208770852536, -0.0006224363460205495, -0.032247550785541534, -3.0397906812140718e-05, -0.00015198028995655477, -0.06075240671634674, -0.008300567977130413, -0.0961015447974205, -0.0014546061865985394, -1.731034278869629, -0.46288421750068665, -0.006996299605816603, -5.686121585313231e-05, -0.02680959738790989, -2.550947666168213, -6.437280717364047e-06, -1.2993727978027891e-05, -1.379454493522644, -0.0006255338666960597, -0.22968320548534393, -0.0003067976504098624, -0.006747556384652853, -0.0007313199457712471, -0.9570527076721191, -0.042760077863931656, -1.8565747737884521, -3.3696634769439697, -0.6619974374771118, -1.990037441253662, -0.310719758272171, -0.008505783975124359, -0.002026291796937585, -0.0006231511943042278, -0.16521228849887848, -0.03194520249962807, -0.02353343553841114, -0.6693037152290344, -0.011432728730142117, -3.314866304397583, -0.32345086336135864, -0.1726885437965393, -0.5310660600662231, -0.05544060841202736, -1.1708227396011353, -1.9550132492440753e-05, -0.00617453595623374, -0.00046266341814771295, -0.018425259739160538, -0.012050565332174301, -0.06855303794145584, -0.5896837115287781, -0.15760956704616547, -0.0002181292074965313, -5.8887653722194955e-05, -0.004245079588145018, -0.0010502781951799989, -0.00018988236843142658, -0.008067167364060879, -0.008274795487523079, -6.568216485902667e-05, -7.080780778778717e-05, -3.3378546504536644e-06, -0.004793698899447918, -0.20305977761745453, -0.1360596865415573, -0.7447068095207214, -6.627816765103489e-05, -1.6248276233673096, -0.31647783517837524, -0.0004962643142789602, -0.004891690332442522, -0.0026953816413879395, -0.056374333798885345, -2.422250747680664, -0.0018236687174066901, -1.5013432502746582, -0.03917241841554642, -0.0025643580593168736, -7.950943836476654e-05, -0.002284181071445346, -0.001520430902019143, -0.10144621878862381, -0.032086171209812164, -7.045020902296528e-05, -0.02910185605287552, -0.00016234986833296716, -0.00020311199477873743, -0.0016957441112026572, -0.004030914045870304, -0.05483028292655945, -0.010472463443875313, -0.005844527389854193, -0.16828379034996033, -0.011342448182404041, -0.31856295466423035, -0.004763920325785875, -0.972607433795929, -0.005031067878007889, -0.03692417964339256, -1.2755313036905136e-05, -0.0004963834653608501, -0.056429993361234665, -0.00012611546844709665, -0.00011395759065635502, -3.2186455882765586e-06, -0.5886238813400269, -0.008282716386020184, -0.06601303815841675, -0.11549000442028046, -0.09282159060239792, -0.022213570773601532, -0.00027998341829515994, -0.6259574890136719, -2.002696055569686e-05, -0.018330693244934082, -0.10922309011220932, -0.0013177053770050406, -0.0003274143091402948, -0.015829967334866524, -0.0021377585362643003, -0.07966986298561096, -0.1588619500398636, -0.17381900548934937, -0.058213185518980026, -0.008023294620215893, -0.00037150635034777224, -0.0063557871617376804, -0.00024196557933464646, -1.7165990357170813e-05, -0.03562165051698685, -0.13868752121925354, -0.0020224847830832005, -0.00026592056383378804, -0.01775982417166233, -0.004073774442076683, -0.020649921149015427, -0.04892101511359215, -1.2790708541870117, -0.9750289916992188, -0.008324448950588703, -0.002468041144311428, -0.0017137139802798629, -0.252070814371109, -0.798784077167511, -0.12888866662979126, -0.03756975755095482, -0.000654602306894958, -0.00015627116954419762, -0.004298257641494274, -0.01626965031027794, -0.7218337655067444, -0.003430792596191168, -0.0440082885324955, -0.0008149401983246207], "finish_reason": "stop"}], "metrics": {"energy": 276.07791734313963, "energy_per_token": 1.099912021287409, "time": 11.146212, "time_per_token": 0.044407219123505974}}
{"outputs": [{"text": "response = FileResponse()\n\n    # Open zip file in binary mode and create the zip file from the input data.\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', compression=zipfile.ZIP_DEFLATED) as myzip:\n        for path in file_paths:\n            if isinstance(path, str):\n                # Check if the path is a file or a directory and add it to the zip.\n                if os.path.isdir(path):\n                    myzip.write(path)\n                    myzip.namelist()[-1]\n                else:\n                    myzip.write(path)\n            else:\n                # Check if the path is an in-memory buffer and add it to the zip.\n                if hasattr(path, \"seekable\") and path.seekable() and path.tell():\n                    myzip.write(path)\n\n    zip_file.seek(0)  # Go to the start of the zip file.\n    response.set_content(zip_file)  # Set the response content as the", "tokens": ["response", " =", " File", "Response", "()", "\n", "\n", "    ", "#", " Open", " zip", " file", " in", " binary", " mode", " and", " create", " the", " zip", " file", " from", " the", " input", " data", ".", "\n", "    ", "zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "file", ",", " '", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", " as", " my", "zip", ":", "\n", "        ", "for", " path", " in", " file", "_", "paths", ":", "\n", "            ", "if", " isinstance", "(", "path", ",", " str", "):", "\n", "                ", "#", " Check", " if", " the", " path", " is", " a", " file", " or", " a", " directory", " and", " add", " it", " to", " the", " zip", ".", "\n", "                ", "if", " os", ".", "path", ".", "is", "dir", "(", "path", "):", "\n", "                ", "    ", "my", "zip", ".", "write", "(", "path", ")", "\n", "                ", "    ", "my", "zip", ".", "nam", "elist", "()", "[-", "1", "]", "\n", "                ", "else", ":", "\n", "                ", "    ", "my", "zip", ".", "write", "(", "path", ")", "\n", "            ", "else", ":", "\n", "                ", "#", " Check", " if", " the", " path", " is", " an", " in", "-", "memory", " buffer", " and", " add", " it", " to", " the", " zip", ".", "\n", "                ", "if", " has", "attr", "(", "path", ",", " \"", "seek", "able", "\"", ")", " and", " path", ".", "seek", "able", "()", " and", " path", ".", "tell", "():", "\n", "                ", "    ", "my", "zip", ".", "write", "(", "path", ")", "\n", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "  ", "#", " Go", " to", " the", " start", " of", " the", " zip", " file", ".", "\n", "    ", "response", ".", "set", "_", "content", "(", "zip", "_", "file", ")", "  ", "#", " Set", " the", " response", " content", " as", " the"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -1.7330259084701538, -0.0004943578969687223, -1.4210563898086548, -2.9646098613739014, -2.839820146560669, -0.4285745620727539, -0.8960610032081604, -0.680169939994812, -0.2586171627044678, -2.2821524143218994, -1.9987733364105225, -3.7609379291534424, -1.3193840980529785, -0.9875374436378479, -3.379140853881836, -0.2763687074184418, -3.271388053894043, -2.953665018081665, -1.722161054611206, -0.045720599591732025, -0.0021569100208580494, -1.1745219230651855, -0.24920201301574707, -0.4799599051475525, -0.037733811885118484, -0.46591395139694214, -3.8742269680369645e-05, -0.015682464465498924, -0.0005976559477858245, -0.018960777670145035, -0.0073464009910821915, -0.019826801493763924, -0.4103148281574249, -0.2527207136154175, -0.0005945583689026535, -5.4596363042946905e-05, -0.0026177444960922003, -0.0017407278064638376, -0.00013672371278516948, -0.004152960609644651, -0.015665682032704353, -0.00040928093949332833, -4.732496745418757e-05, -0.007111948449164629, -0.38374602794647217, -0.027275916188955307, -0.9386701583862305, -0.0010025242809206247, -0.4136437475681305, -0.006454810034483671, -0.005291622597724199, -6.246371776796877e-05, -1.6212332411669195e-05, -0.001158043509349227, -0.02771407552063465, -0.0035187015309929848, -0.0027480479329824448, -0.00014590153296012431, -0.002040686784312129, -0.1107223853468895, -0.0001394651480950415, -2.9849488735198975, -0.13908551633358002, -0.035445746034383774, -0.006310892291367054, -0.023900028318166733, -0.07823062688112259, -1.353912591934204, -0.03322715684771538, -0.0031091466080397367, -5.066266385256313e-05, -5.745722592109814e-05, -0.0016415942227467895, -0.005283084698021412, -0.012344622053205967, -0.5249893665313721, -0.9150571823120117, -0.00010358751023886725, -0.000691770575940609, -0.0011934071080759168, -0.20106367766857147, -0.09514958411455154, -0.06655367463827133, -0.001036583329550922, -2.0990562438964844, -2.6776490211486816, -0.3067326247692108, -0.6536725163459778, -0.6168509125709534, -0.4606877565383911, -0.4073628783226013, -0.36085522174835205, -0.46143463253974915, -0.6759635210037231, -0.11171764135360718, -2.383732795715332, -1.4198813438415527, -0.631114661693573, -0.23271861672401428, -0.030217912048101425, -0.07502702623605728, -2.565042734146118, -0.016562586650252342, -0.001699671265669167, -0.1346236765384674, -0.13605999946594238, -0.00025876989820972085, -0.0001147919538198039, -0.00011848701251437888, -0.018454870209097862, -2.2703731060028076, -0.00011491115583339706, -0.0018053437815979123, -0.008634022437036037, -0.008002481423318386, -0.0004866131057497114, -0.00023338454775512218, -1.504638910293579, -0.001440678839571774, -0.00018845213344320655, -0.020365072414278984, -0.015345364809036255, -0.02624587155878544, -1.0237081050872803, -0.04854985326528549, -0.006905381102114916, -1.9870784282684326, -1.280157446861267, -0.001135300612077117, -0.0007839705212973058, -2.2777910232543945, -0.0017527469899505377, -0.05256306380033493, -2.643617868423462, -0.0022157898638397455, -0.022936986759305, -0.718044102191925, -0.017402103170752525, -0.3819368779659271, -6.747018051100895e-05, -0.006538900546729565, -0.000691770575940609, -5.9602869441732764e-05, -0.1776878386735916, -1.6927575416048057e-05, -3.218599158572033e-05, -0.0013173482147976756, -0.0009197533945553005, -0.01894674077630043, -0.4623985290527344, -0.004298495128750801, -0.5008764266967773, -0.33201828598976135, -4.0411134250462055e-05, -0.07157023996114731, -0.0006096888100728393, -0.1482183337211609, -1.1153231859207153, -0.024796441197395325, -0.039694879204034805, -0.1662542223930359, -0.07265133410692215, -2.7894697189331055, -2.675382614135742, -0.26847362518310547, -0.003203262807801366, -1.5207359790802002, -0.35476699471473694, -0.4096846282482147, -0.02476329915225506, -0.02271653153002262, -0.0013404440833255649, -0.004812562372535467, -0.03987038508057594, -0.0048963166773319244, -0.0006515049026347697, -0.29280200600624084, -0.6853436231613159, -8.463501580990851e-05, -8.940297266235575e-05, -0.0014888879377394915, -0.004867964424192905, -1.4822461605072021, -2.128755569458008, -0.9281964302062988, -0.0005940818227827549, -0.1588292121887207, -0.0026209547650069, -0.14583627879619598, -0.00026794656878337264, -0.004402587655931711, -0.00011336160969221964, -1.4653820991516113, -0.03181738033890724, -1.6454384326934814, -0.0006883158930577338, -2.819486379623413, -0.8072011470794678, -0.008207639679312706, -0.0003784178989008069, -0.0002996472467202693, -0.4626528322696686, -0.00011896379146492109, -0.00013124081306159496, -1.5645867586135864, -0.10974728316068649, -0.1543371081352234, -0.3920624852180481, -0.005152518395334482, -1.4409863948822021, -0.08275175839662552, -2.3740835189819336, -0.009441959671676159, -0.1423833668231964, -0.029050791636109352, -0.008260134607553482, -0.0033004595898091793, -0.0032025498803704977, -0.005148604512214661, -1.3375202417373657, -0.00019631843315437436, -3.788832426071167, -1.092808485031128, -0.18480293452739716, -0.9400893449783325, -0.008856302127242088, -0.006931308191269636, -0.5944210886955261, -0.12711955606937408, -0.4998355209827423, -0.003922508098185062, -0.14725351333618164, -0.06498807668685913, -0.5880672335624695, -0.8769847750663757, -0.004111172165721655, -0.8163672685623169, -0.002834590384736657, -0.011811322532594204, -0.002030574483796954, -7.390948667307384e-06, -0.4872756004333496, -0.538520872592926, -0.0002972637885250151, -0.14835132658481598, -0.05944731831550598, -1.329491376876831, -0.8364959359169006, -1.0366283655166626, -0.2761344909667969], "finish_reason": "length"}], "metrics": {"energy": 255.52433451747896, "energy_per_token": 0.9981419317089022, "time": 11.151346, "time_per_token": 0.0435599453125}}
{"outputs": [{"text": "file_paths = [\n        file_path for file_path in file_paths if os.path.exists(file_path)\n    ]\n\n    if not file_paths:\n        return FileResponse(b'No files found.', content_type='text/plain', status=404)\n\n    with ZipFile(io.BytesIO(), 'w', ZIP_DEFLATED) as archive:\n        for file_path in file_paths:\n            archive.write(file_path, arcname=os.path.basename(file_path))\n\n        response = FileResponse(archive.getbuffer())\n\n    response['Content-Disposition'] = f\"attachment; filename=\\\"{response['filename']}\\\";\"\n    response['Content-Type'] = 'application/zip'\n    return response", "tokens": ["file", "_", "paths", " =", " [", "\n", "        ", "file", "_", "path", " for", " file", "_", "path", " in", " file", "_", "paths", " if", " os", ".", "path", ".", "exists", "(", "file", "_", "path", ")", "\n", "    ", "]", "\n", "\n", "    ", "if", " not", " file", "_", "paths", ":", "\n", "        ", "return", " File", "Response", "(", "b", "'", "No", " files", " found", ".", "'", ",", " content", "_", "type", "='", "text", "/", "plain", "'", ",", " status", "=", "4", "0", "4", ")", "\n", "\n", "    ", "with", " Zip", "File", "(", "io", ".", "Bytes", "IO", "()", ",", " '", "w", "'", ",", " Z", "IP", "_", "DE", "FL", "ATED", ")", " as", " archive", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "archive", ".", "write", "(", "file", "_", "path", ",", " arc", "name", "=", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", "))", "\n", "\n", "        ", "response", " =", " File", "Response", "(", "archive", ".", "get", "buffer", "())", "\n", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "\"", "att", "achment", ";", " filename", "=\\\"", "{", "response", "['", "filename", "']", "}\\\"", ";", "\"", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.522176742553711, -0.04792303591966629, -0.9448009729385376, -0.2158808559179306, -0.49372419714927673, -1.8139737844467163, -0.010968275368213654, -1.1910629272460938, -0.05225955694913864, -0.21318507194519043, -1.6541950702667236, -0.03304978832602501, -0.004616555292159319, -0.005985312629491091, -0.013102623634040356, -0.025471391156315804, -8.475421054754406e-05, -0.00019798702851403505, -0.434975802898407, -1.5779852867126465, -0.0006111184484325349, -0.005132000893354416, -0.006775973830372095, -0.577521800994873, -0.00026782741770148277, -0.04620800539851189, -1.883488948806189e-05, -0.000556314189452678, -0.04374450817704201, -0.3552643060684204, -0.033716656267642975, -0.0005850272136740386, -0.03457771614193916, -0.9950530529022217, -0.00022456508304458112, -0.9641826748847961, -0.5487290024757385, -0.021720854565501213, -3.814689989667386e-06, -0.0001934579631779343, -0.006578219123184681, -0.01882157288491726, -0.0005417786305770278, -0.8244679570198059, -0.5731224417686462, -0.0010128850117325783, -0.20443390309810638, -1.5327630043029785, -2.0276896953582764, -0.420001745223999, -0.1610797941684723, -0.9807100296020508, -1.2449259757995605, -1.7894409894943237, -0.0003420721332076937, -0.3747049570083618, -2.13382354559144e-05, -0.01159476488828659, -0.05930251628160477, -0.07896146178245544, -0.0012323412811383605, -0.08192528784275055, -2.5080389976501465, -0.009623563848435879, -0.1757843941450119, -0.0013871104456484318, -0.17607003450393677, -0.01105764601379633, -0.11063434183597565, -0.042265959084033966, -0.012451530434191227, -0.055958814918994904, -0.00019000156316906214, -2.1395301818847656, -0.8441321849822998, -0.005428691860288382, -0.07389923185110092, -0.13080915808677673, -4.339123915997334e-05, -0.01683128997683525, -0.0013674680376425385, -0.4624887704849243, -0.002816402819007635, -0.5035560131072998, -0.08278490602970123, -2.2225656509399414, -0.0028439811430871487, -0.8132927417755127, -0.0005902693956159055, -0.010583111084997654, -0.013629707507789135, -0.00042882305569946766, -0.0005286726518534124, -0.03002312034368515, -6.55629628454335e-05, -2.706206798553467, -0.022689612582325935, -0.009675630368292332, -0.005551634822040796, -0.042709022760391235, -0.11729442328214645, -0.019925199449062347, -0.006078803446143866, -0.004235702101141214, -0.002473630243912339, -9.536738616588991e-07, -3.302042750874534e-05, -0.00023421882360707968, -0.003512643277645111, -0.007013346068561077, -1.1150280237197876, -0.0024102467577904463, -0.015145658515393734, -0.001122321467846632, -0.05419350042939186, -0.0007752750534564257, -0.00014232576359063387, -0.3250557780265808, -1.8954747915267944, -0.003067908575758338, -0.0015048381173983216, -0.05791420117020607, -0.00014780859055463225, -0.000856628583278507, -0.010981244966387749, -0.03309730440378189, -1.1920928244535389e-07, -0.00013493580627255142, -0.009416097775101662, -7.283422019099817e-05, -0.00011073929636040702, -0.05920690670609474, -0.005456909537315369, -0.2816756069660187, -1.8830900192260742, -1.088899850845337, -0.011860094033181667, -0.05345890671014786, -1.5616295058862306e-05, -0.001214005402289331, -0.3826918303966522, -0.13637198507785797, -2.4671151638031006, -0.3080698847770691, -1.5095338821411133, -0.015783265233039856, -1.9099371433258057, -1.5010141134262085, -0.6953697204589844, -0.17996463179588318, -0.01283150352537632, -0.00019012074335478246, -0.5168184638023376, -9.560128091834486e-05, -4.625213477993384e-05, -0.0010384886991232634, -1.4417201280593872, -1.984538197517395, -0.008824753575026989, -0.0001538873475510627, -0.001262463629245758, -0.004043855704367161, -2.4550724029541016, -0.4441426992416382, -3.8080315589904785, -1.2543216943740845, -0.8030717372894287, -0.01316133327782154, -1.3469932079315186, -0.22385349869728088, -0.1590132713317871, -0.03560209646821022, -0.38279539346694946, -0.2366970330476761, -0.05621567368507385, -0.03616563230752945, -0.0002308817347511649, -0.2027750313282013, -5.3881147323409095e-05, -0.050124600529670715, -0.17602625489234924, -0.0034048936795443296, -0.000447530735982582, -0.0298807043582201, -0.007382611744105816, -0.03206435218453407, -1.1788102388381958, -0.5537806153297424, -0.00076908094342798, -0.7335498332977295, -9.536738616588991e-07, -2.3841855067985307e-07, -0.0002653246629051864, -6.69933797325939e-05, -0.12027695775032043], "finish_reason": "stop"}], "metrics": {"energy": 196.6906602554321, "energy_per_token": 1.0086700525919596, "time": 8.632954, "time_per_token": 0.04427155897435897}}
{"outputs": [{"text": "zip_file = io.BytesIO()\n    zip_file.write(zipfile.ZIP_STORED)  # We want the ZIP file stored in memory\n\n    # Create a ZIP archive with the specified files\n    archive_iter = (\n        zipfile.ZipInfo.from_file(file_path)\n        for file_path in file_paths\n    )\n    archive = zipfile.ZipFile(zip_file, \"w\")\n    for zipinfo in archive_iter:\n        archive.writestr(zipinfo, io.BytesIO(file_paths[zipinfo]))\n    zip_file.seek(0)  # Reset the buffer pointer to the beginning of the ZIP file\n\n    return FileResponse(zip_file, as_attachment=True, filename=\"files.zip\")", "tokens": ["zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "file", ".", "write", "(", "zip", "file", ".", "Z", "IP", "_", "ST", "ORE", "D", ")", "  ", "#", " We", " want", " the", " Z", "IP", " file", " stored", " in", " memory", "\n", "\n", "    ", "#", " Create", " a", " Z", "IP", " archive", " with", " the", " specified", " files", "\n", "    ", "archive", "_", "iter", " =", " (", "\n", "        ", "zip", "file", ".", "Z", "ip", "Info", ".", "from", "_", "file", "(", "file", "_", "path", ")", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", "\n", "    ", ")", "\n", "    ", "archive", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "file", ",", " \"", "w", "\"", ")", "\n", "    ", "for", " zip", "info", " in", " archive", "_", "iter", ":", "\n", "        ", "archive", ".", "w", "rit", "est", "r", "(", "zip", "info", ",", " io", ".", "Bytes", "IO", "(", "file", "_", "paths", "[", "zip", "info", "]))", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "  ", "#", " Reset", " the", " buffer", " pointer", " to", " the", " beginning", " of", " the", " Z", "IP", " file", "\n", "\n", "    ", "return", " File", "Response", "(", "zip", "_", "file", ",", " as", "_", "att", "achment", "=", "True", ",", " filename", "=", "\"", "files", ".", "zip", "\"", ")", "\n", "\n", "def"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -1.1639280319213867, -0.05566851422190666, -0.15041802823543549, -4.351044481154531e-05, -0.016345765441656113, -0.000532008707523346, -0.006956642493605614, -0.01573069579899311, -0.08278929442167282, -1.0680131912231445, -0.06119677424430847, -1.6247663497924805, -0.8108258247375488, -0.5893867611885071, -0.019561823457479477, -2.5348639488220215, -0.013833950273692608, -0.0007902836659923196, -0.27606844902038574, -1.1572933197021484, -0.0559212751686573, -0.6205243468284607, -1.8095693588256836, -0.010944575071334839, -0.1499491035938263, -2.407399892807007, -0.0006865289760753512, -4.991074085235596, -2.897189140319824, -1.8584346771240234, -1.9929707050323486, -0.0034846081398427486, -0.6209871768951416, -2.604363203048706, -2.895237445831299, -0.7069798111915588, -1.0537866353988647, -1.490771770477295, -0.00015805903240107, -2.283033609390259, -2.0551929473876953, -0.6808081865310669, -1.7478431463241577, -0.0004881620698142797, -0.8913390636444092, -1.9212150573730469, -0.40960612893104553, -0.574925422668457, -0.5890743136405945, -0.39333829283714294, -0.0010508735431358218, -3.264312505722046, -2.48995304107666, -3.6932578086853027, -0.06712812930345535, -2.748666524887085, -0.7298544049263, -0.04753797873854637, -0.704838216304779, -0.013708846643567085, -0.0012342463014647365, -0.4330795407295227, -0.10423458367586136, -0.04709966480731964, -2.104069948196411, -0.04453108087182045, -0.028610900044441223, -0.13485808670520782, -0.16174878180027008, -0.9452436566352844, -0.22720500826835632, -0.03730897977948189, -0.1150408536195755, -0.7097135186195374, -0.006337071303278208, -0.2579154372215271, -0.004375527147203684, -0.00035315475543029606, -0.0019154074834659696, -0.012213914655148983, -0.018452763557434082, -7.760223525110632e-05, -0.00013696208770852536, -0.036740802228450775, -0.35586729645729065, -0.00010573305189609528, -0.038762304931879044, -0.25262534618377686, -1.982897400856018, -0.4341271221637726, -0.006579285021871328, -0.0012196014868095517, -0.00011824862303910777, -0.005089660175144672, -0.004122331738471985, -0.0077975173480808735, -0.001396991079673171, -0.072821706533432, -0.0030854973010718822, -0.00014995403762441128, -0.018756292760372162, -1.0740584135055542, -0.31217318773269653, -0.00016044282529037446, -1.2604871988296509, -0.04286755248904228, -0.09670484066009521, -0.5505608320236206, -0.5401992797851562, -0.8022021651268005, -0.021019088104367256, -0.005139828193932772, -0.0004808938247151673, -2.622600959512056e-06, -0.00011884459672728553, -0.02026975341141224, -0.000486970558995381, -0.36318325996398926, -0.00096941675292328, -0.4408528208732605, -0.00041321321623399854, -0.00018761781393550336, -0.0013906818348914385, -0.0004259632551111281, -0.03157635033130646, -0.0008420973899774253, -0.043552905321121216, -2.1431970596313477, -0.0015522110043093562, -0.0746009349822998, -8.05822346592322e-05, -0.08072321861982346, -0.39172419905662537, -0.04995587468147278, -0.9500151872634888, -0.03170062601566315, -0.18908140063285828, -0.00782637856900692, -2.0200388431549072, -0.11071096360683441, -0.5962581038475037, -1.6881450414657593, -0.04529299587011337, -0.08147948235273361, -0.05576694384217262, -0.015163622796535492, -0.0013398488517850637, -0.0033841028343886137, -0.005671125371009111, -1.5613874197006226, -9.083335316972807e-05, -1.536436676979065, -0.14231523871421814, -1.8424599170684814, -1.2718886137008667, -0.6825180053710938, -0.30500611662864685, -0.45143836736679077, -0.9424055218696594, -0.03482803702354431, -1.7633506059646606, -0.0002728328399825841, -0.08927804231643677, -0.15446601808071136, -0.42814111709594727, -0.00020549570035655051, -1.3806633949279785, -0.0056686364114284515, -2.407998726994265e-05, -0.0004146431456319988, -0.2998978793621063, -0.0010530170984566212, -1.7046782886609435e-05, -0.5171223878860474, -0.8307137489318848, -0.0022230453323572874, -0.00428187707439065, -8.821448318485636e-06, -0.0031022538896650076, -0.03846685215830803, -0.7375586628913879, -0.055831994861364365, -0.04137809947133064, -0.07904639095067978, -0.05378599837422371, -0.006548137869685888, -0.0002774807217065245, -0.00012540031457319856, -0.5268696546554565, -0.34766846895217896, -0.04398912191390991, -0.43830811977386475], "finish_reason": "stop"}], "metrics": {"energy": 232.78531836318953, "energy_per_token": 1.19992432145974, "time": 8.420541, "time_per_token": 0.043404850515463916}}
{"outputs": [{"text": "with ZipFile(io.BytesIO(), mode='w') as output_zip:\n        for file in file_paths:\n            if os.path.isfile(file):\n                # Extract file to zip\n                output_zip.write(file)\n            else:\n                # Extract file content\n                output_zip.writestr(file.name, file.read())\n    response = FileResponse(output_zip, as_attachment=True, filename=\"files.zip\")\n    response['Content-Type'] = \"application/zip\"\n    response['Content-Disposition'] = \"attachment; filename=files.zip\"\n    response['Content-Encoding'] = \"identity\"\n    response['Access-Control-Allow-Origin'] = '*'\n    response.header['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'\n    return response", "tokens": ["with", " Zip", "File", "(", "io", ".", "Bytes", "IO", "()", ",", " mode", "='", "w", "')", " as", " output", "_", "zip", ":", "\n", "        ", "for", " file", " in", " file", "_", "paths", ":", "\n", "            ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "                ", "#", " Ext", "ract", " file", " to", " zip", "\n", "                ", "output", "_", "zip", ".", "write", "(", "file", ")", "\n", "            ", "else", ":", "\n", "                ", "#", " Ext", "ract", " file", " content", "\n", "                ", "output", "_", "zip", ".", "w", "rit", "est", "r", "(", "file", ".", "name", ",", " file", ".", "read", "())", "\n", "    ", "response", " =", " File", "Response", "(", "output", "_", "zip", ",", " as", "_", "att", "achment", "=", "True", ",", " filename", "=", "\"", "files", ".", "zip", "\"", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " \"", "application", "/", "zip", "\"", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " \"", "att", "achment", ";", " filename", "=", "files", ".", "zip", "\"", "\n", "    ", "response", "['", "Content", "-", "Encoding", "']", " =", " \"", "identity", "\"", "\n", "    ", "response", "['", "Access", "-", "Control", "-", "Allow", "-", "Origin", "']", " =", " '", "*", "'", "\n", "    ", "response", ".", "header", "['", "Cache", "-", "Control", "']", " =", " '", "no", "-", "cache", ",", " no", "-", "store", ",", " must", "-", "re", "validate", ",", " max", "-", "age", "=", "0", "'", "\n", "    ", "return", " response"], "logprobs": [-2.5511531829833984, -0.7381881475448608, -0.010116138495504856, -0.05669292435050011, -0.06717639416456223, -5.221230458118953e-05, -0.015203308314085007, -0.0011654258705675602, -0.36370253562927246, -0.0014042527182027698, -1.070683240890503, -0.35430896282196045, -0.036320608109235764, -0.2100721150636673, -8.463501580990851e-05, -2.7512354850769043, -0.3700040280818939, -0.17367182672023773, -0.12179935723543167, -0.01830751821398735, -0.011548572219908237, -0.07168231904506683, -0.4242773950099945, -2.373316526412964, -0.005599883385002613, -2.47952248173533e-05, -5.1616290875244886e-05, -0.0016373097896575928, -0.005097369197756052, -0.004138477612286806, -0.25504040718078613, -2.485614776611328, -0.0006387577159330249, -0.003128873882815242, -0.0004951919545419514, -0.12260830402374268, -0.05334092304110527, -0.00020072828920092434, -0.003520483383908868, -0.052687130868434906, -0.033005960285663605, -0.0006358985556289554, -2.921710729598999, -4.601169586181641, -0.05535557121038437, -1.7306550741195679, -2.5765745639801025, -1.1217539310455322, -0.4635189175605774, -0.00039545822073705494, -0.23947672545909882, -0.0004012971476186067, -0.0006967739318497479, -0.00023922442051116377, -0.016307063400745392, -0.0005241450853645802, -0.10278511792421341, -1.0379595756530762, -0.012635413557291031, -0.05467408895492554, -0.23792284727096558, -4.851700214203447e-05, -0.10197041183710098, -0.00035661060246638954, -0.24238380789756775, -1.058336615562439, -0.0010593285551294684, -0.6435431241989136, -1.978255033493042, -2.137875556945801, -0.0003999863693024963, -0.304056316614151, -0.0008137490367516875, -0.00021050144277978688, -0.0001935771433636546, -0.007027196232229471, -0.00022587609419133514, -5.4834770708112046e-05, -0.00516805425286293, -0.01468715537339449, -0.8782154321670532, -1.3320664167404175, -2.234187602996826, -0.013876628130674362, -0.01896721124649048, -1.6286978721618652, -0.5673123598098755, -0.07559896260499954, -0.007399887777864933, -0.8425087332725525, -1.0986135005950928, -0.00693225534632802, -0.010434005409479141, -1.4543427823809907e-05, -0.0021237218752503395, -0.14315372705459595, -6.365573790390044e-05, -1.3708974620385561e-05, -0.440321147441864, -1.1821999549865723, -0.0016017238376662135, -0.007997396402060986, -7.867782187531702e-06, -0.0020170120988041162, -0.014387441799044609, -0.760619044303894, -0.11451762914657593, -1.0184249877929688, -0.287078857421875, -0.07856084406375885, -0.006025482900440693, -0.00015937011630740017, -0.00015078838623594493, -0.07691439241170883, -0.01677197404205799, -0.026972293853759766, -0.2636335492134094, -0.30078017711639404, -0.023364821448922157, -0.000259723310591653, -0.29030266404151917, -2.9444261599564925e-05, -0.015261776745319366, -1.0185391902923584, -0.0013444918440654874, -0.00029952809563837945, -0.013165097683668137, -0.002280493965372443, -0.03353257477283478, -0.018526723608374596, -0.6239376068115234, -0.08995117247104645, -0.016141682863235474, -0.0003610197745729238, -0.008397389203310013, -0.00048232366680167615, -3.290122185717337e-05, -0.048430949449539185, -0.68163001537323, -0.003634990891441703, -0.0003641180810518563, -0.04903270676732063, -0.0071485224179923534, -0.16466714441776276, -0.06522364169359207, -0.003185913898050785, -0.00011097769311163574, -0.0031596519984304905, -0.011472326703369617, -0.03370248153805733, -2.834838628768921, -0.4415290057659149, -0.8376290798187256, -0.0006027788622304797, -2.9461874961853027, -4.386805812828243e-05, -0.04260941222310066, -0.3244647681713104, -2.7246079444885254, -0.0017701209289953113, -0.14075180888175964, -0.04689653217792511, -2.1197478771209717, -0.39919790625572205, -2.7393860816955566, -0.016777249053120613, -0.0006237468332983553, -0.0002450642641633749, -0.37450677156448364, -6.782778655178845e-05, -0.0576372966170311, -0.0004379982128739357, -0.015860825777053833, -1.2487919330596924, -0.019303323701024055, -0.0008071978809311986, -0.06602743268013, -0.04662839323282242, -1.125647783279419, -2.0139403343200684, -3.2334890365600586, -1.3267978429794312, -1.9175245761871338, -0.0032991524785757065, -0.012848568148911, -0.0012807984603568912, -0.015063228085637093, -0.177952378988266, -0.3305661380290985, -0.0009732277248986065, -0.6784843802452087, -0.32722365856170654, -0.4138455092906952, -0.0004615910293068737, -0.009914321824908257, -0.12479376792907715, -0.22244445979595184, -0.0002165798214264214, -0.001039560534991324, -0.0035990008618682623, -0.3782474994659424, -0.7738490700721741, -0.003077059518545866, -0.00017534149810671806, -0.009163230657577515, -0.006350456736981869, -2.1225745677948, -0.03658761829137802, -0.02002452313899994, -1.975003957748413, -0.0008168459753505886], "finish_reason": "stop"}], "metrics": {"energy": 221.4219439640044, "energy_per_token": 1.0493930993554712, "time": 9.249693, "time_per_token": 0.043837407582938394}}
{"outputs": [{"text": "zf = zipfile.ZipFile(io.BytesIO(), 'w', compression=zipfile.ZIP_DEFLATED, compresslevel=6)\n    for path in file_paths:\n        if os.path.exists(path):\n            zf.write(path, os.path.basename(path), zipfile.ZIP_DEFLATED)\n    response = FileResponse(zf)\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = 'attachment; filename=\"{}.zip\"'.format(os.path.splitext(os.path.basename(file_paths[0]))[0])\n    return response", "tokens": ["z", "f", " =", " zip", "file", ".", "Z", "ip", "File", "(", "io", ".", "Bytes", "IO", "()", ",", " '", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ",", " compress", "level", "=", "6", ")", "\n", "    ", "for", " path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "            ", "z", "f", ".", "write", "(", "path", ",", " os", ".", "path", ".", "bas", "ename", "(", "path", ")", ",", " zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", "\n", "    ", "response", " =", " File", "Response", "(", "z", "f", ")", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "{}", ".", "zip", "\"", "'", ".", "format", "(", "os", ".", "path", ".", "spl", "ite", "xt", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "paths", "[", "0", "]))", "[", "0", "])", "\n", "    ", "return", " response", "\n", "\n", "def"], "logprobs": [-3.964580535888672, -1.546525478363037, -0.009545871987938881, -0.357509583234787, -0.000459565402707085, -0.00017331528943032026, -0.00409158319234848, -0.0027041793800890446, -7.819823804311454e-05, -0.08315464854240417, -0.08816163241863251, -7.915183232398704e-05, -0.024067388847470284, -0.00031406714697368443, -0.2963251769542694, -0.0008364992681890726, -0.7345600724220276, -0.04946507140994072, -1.1433796882629395, -0.0028455264400690794, -1.2324888706207275, -0.008407555520534515, -0.012762182392179966, -2.777537883957848e-05, -1.8715683836489916e-05, -0.0022527810651808977, -0.011970588006079197, -0.0033931320067495108, -0.001807485707104206, -0.00011824862303910777, -0.00304758595302701, -2.0376949310302734, -0.9572930335998535, -0.04040851071476936, -0.0029325359500944614, -1.2709054946899414, -0.05924297124147415, -0.04673533886671066, -0.23734749853610992, -0.16708439588546753, -1.3540300130844116, -0.04812129959464073, -0.0033551135566085577, -2.9205850296420977e-05, -5.280832192511298e-05, -0.001712523982860148, -0.005297551397234201, -0.003053647233173251, -0.30898046493530273, -1.5230286121368408, -0.000649956171400845, -0.0026884861290454865, -0.00010024998482549563, -2.287998914718628, -0.0002699726028367877, -0.004063208121806383, -0.03319452330470085, -0.03373014181852341, -0.0014524635626003146, -0.5770983099937439, -0.006720203906297684, -0.0004914983292110264, -0.006115415133535862, -0.0018252156442031264, -0.0441635362803936, -0.5543484091758728, -0.4106633961200714, -0.0007267932523973286, -0.0005453529884107411, -0.0060508400201797485, -0.037465497851371765, -1.1920928244535389e-07, -0.00015853578224778175, -0.0027608871459960938, -2.2486581802368164, -0.01127573475241661, -1.992467999458313, -0.007241194136440754, -0.00031382881570607424, -0.013347791507840157, -0.006426856853067875, -0.000406301929615438, -0.017055505886673927, -3.7431014789035544e-05, -0.0013179434463381767, -0.28144678473472595, -0.023356670513749123, -0.7885207533836365, -0.7007226347923279, -0.003510861424729228, -0.010381034575402737, -1.1444026313256472e-05, -0.0009308296139352024, -0.05812365561723709, -0.00036030475166626275, -1.2336921691894531, -0.011241668835282326, -0.017269477248191833, -0.15162393450737, -0.09074154496192932, -0.014922775328159332, -0.0002475670480635017, -0.6220917105674744, -2.777537883957848e-05, -0.013874512165784836, -0.08461607247591019, -0.001212576637044549, -0.00041154498467221856, -0.012187888845801353, -0.002459954936057329, -0.06331697851419449, -0.015463221818208694, -0.23051710426807404, -0.04577264189720154, -0.007287112530320883, -0.0004599228559527546, -0.005510734394192696, -0.00011038171214750037, -3.1709168979432434e-05, -0.02623135596513748, -0.24486204981803894, -0.0014175852993503213, -0.00028868322260677814, -0.02316216751933098, -0.005716049112379551, -0.013765874318778515, -0.12825655937194824, -1.9616873264312744, -0.34869828820228577, -0.006681364495307207, -0.004922058433294296, -0.0033694894518703222, -0.004430359695106745, -0.0015100754098966718, -0.4594528377056122, -1.3992921113967896, -0.000886285852175206, -0.0021918814163655043, -0.008896357379853725, -2.0159127712249756, -5.817244164063595e-05, -8.344646857949556e-07, -0.0010337253334000707, -0.4766733944416046, -0.0005709686665795743, -0.0035915174521505833, -0.0004901876673102379, -0.017231397330760956, -3.576278118089249e-07, -0.0035537441726773977, -0.4015856683254242, -0.003749009920284152, -0.001778450678102672, -0.017339659854769707, -0.0016356435371562839, -0.041393425315618515, -0.0005889588501304388, -0.0017234723782166839, -0.01456074882298708, -0.020004425197839737, -0.02973352186381817, -0.16504836082458496, -0.0004366874636616558, -1.030129313468933, -0.016455646604299545, -0.2776390016078949], "finish_reason": "stop"}], "metrics": {"energy": 181.85289537429813, "energy_per_token": 1.0954993697246875, "time": 7.157785, "time_per_token": 0.04311918674698795}}
{"outputs": [{"text": "# Create a list to store file paths and contents, in the order that they should appear in the zip file\n    file_paths_and_contents = []\n\n    # Iterate through each file path and get the contents if it exists as a file.\n    # Otherwise, it should just be an uploaded file so use a temp file for it\n    for file_path in file_paths:\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                file_paths_and_contents.append((file_path, f.read()))\n        else:\n            with open(io.BytesIO(file_path)) as f:\n                file_paths_and_contents.append((file_path, f.read()))\n\n    # Create a ZipFile instance using the BytesIO buffer, which allows for direct streaming of data to the client.\n    # Add each file path and contents pair to the zip file as a new archive member, along with its associated path and data.\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, mode='", "tokens": ["#", " Create", " a", " list", " to", " store", " file", " paths", " and", " contents", ",", " in", " the", " order", " that", " they", " should", " appear", " in", " the", " zip", " file", "\n", "    ", "file", "_", "paths", "_", "and", "_", "contents", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " file", " path", " and", " get", " the", " contents", " if", " it", " exists", " as", " a", " file", ".", "\n", "    ", "#", " Otherwise", ",", " it", " should", " just", " be", " an", " uploaded", " file", " so", " use", " a", " temp", " file", " for", " it", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " f", ":", "\n", "                ", "file", "_", "paths", "_", "and", "_", "contents", ".", "append", "((", "file", "_", "path", ",", " f", ".", "read", "()))", "\n", "        ", "else", ":", "\n", "            ", "with", " open", "(", "io", ".", "Bytes", "IO", "(", "file", "_", "path", "))", " as", " f", ":", "\n", "                ", "file", "_", "paths", "_", "and", "_", "contents", ".", "append", "((", "file", "_", "path", ",", " f", ".", "read", "()))", "\n", "\n", "    ", "#", " Create", " a", " Zip", "File", " instance", " using", " the", " By", "tes", "IO", " buffer", ",", " which", " allows", " for", " direct", " streaming", " of", " data", " to", " the", " client", ".", "\n", "    ", "#", " Add", " each", " file", " path", " and", " contents", " pair", " to", " the", " zip", " file", " as", " a", " new", " archive", " member", ",", " along", " with", " its", " associated", " path", " and", " data", ".", "\n", "    ", "zip", "_", "buffer", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "buffer", ",", " mode", "='"], "logprobs": [-2.3781299591064453, -1.326112151145935, -0.3962860405445099, -3.8871774673461914, -1.6567866802215576, -0.6461341381072998, -1.2779085636138916, -1.3021612167358398, -1.3395488262176514, -0.8748669624328613, -3.123950719833374, -3.604585647583008, -2.416754722595215, -1.3516935110092163, -2.8505263328552246, -0.23635120689868927, -0.9150967597961426, -1.4734145402908325, -0.09631019085645676, -0.00803417433053255, -0.988569974899292, -0.8174317479133606, -0.39724475145339966, -0.0035018331836909056, -0.6292272806167603, -0.013982431963086128, -0.9503612518310547, -0.09197763353586197, -0.5812211632728577, -2.074220174108632e-05, -0.01584463380277157, -0.043042734265327454, -0.04306842386722565, -0.0013021094491705298, -0.15170301496982574, -0.00031096869497559965, -0.20662963390350342, -0.7441391348838806, -0.004140614531934261, -0.721227765083313, -1.0596723556518555, -0.258710116147995, -0.11879320442676544, -1.1134995222091675, -3.303335428237915, -0.8110759854316711, -1.8530789613723755, -1.3188059329986572, -0.548645555973053, -2.767414093017578, -1.9943360090255737, -0.13051091134548187, -0.13349711894989014, -2.5154829025268555, -0.6373161673545837, -0.0008574623498134315, -1.7669118642807007, -1.4403750896453857, -0.16640321910381317, -3.0161399841308594, -2.9200515747070312, -2.673210382461548, -0.05506204813718796, -3.8329620361328125, -4.264004707336426, -0.25130802392959595, -3.8997910022735596, -2.790835380554199, -3.1308817863464355, -4.096360683441162, -0.39780670404434204, -2.3470046520233154, -1.4331505298614502, -1.6237428188323975, -0.00411722669377923, -0.05794581398367882, -0.5093268752098083, -0.025519734248518944, -0.00500841299071908, -0.006907986011356115, -0.0030643432401120663, -3.099436753473128e-06, -0.00013934595335740596, -0.005957228597253561, -0.0010765953920781612, -0.008935702033340931, -0.49741050601005554, -0.6336106061935425, -0.0003567297535482794, -0.0005824061809107661, -0.0007503792876377702, -0.3784579336643219, -0.007149351295083761, -0.00017152745567727834, -0.00858509261161089, -1.645074735279195e-05, -0.00022492263815365732, -0.030542749911546707, -0.04126371443271637, -0.0006999903125688434, -0.5213779807090759, -0.0507611446082592, -0.0005105622112751007, -0.0038036394398659468, -3.3378546504536644e-06, -1.0609570381348021e-05, -0.02858877368271351, -0.2773738205432892, -0.03412642702460289, -0.002394310897216201, -0.00034540885826572776, -0.8521548509597778, -0.055188290774822235, -0.009367796592414379, -0.00035529976594261825, -0.16428983211517334, -0.004018803592771292, -0.2361660748720169, -0.00024387246230617166, -7.986703712958843e-05, -1.1801649634435307e-05, -9.894321920000948e-06, -0.0011945976875722408, -0.0018929197685793042, -0.09804145246744156, -0.15222956240177155, -0.00039295581518672407, -0.0013392536202445626, -0.005821890663355589, -0.07924992591142654, -0.02727545239031315, -0.0006375664379447699, -0.017164606600999832, -0.005615531001240015, -0.02725689299404621, -0.059533920139074326, -4.792098479811102e-05, -0.0160126443952322, -0.0007068996201269329, -0.7180519700050354, -1.1842663288116455, -0.0056602200493216515, -2.9674019813537598, -0.000286657246761024, -0.3167233169078827, -0.00010168035078095272, -0.014754346571862698, -0.041555024683475494, -0.0004135706985834986, -0.002124911407008767, -0.6638160347938538, -0.0006660388899035752, -0.08129453659057617, -0.013034850358963013, -0.0070909978821873665, -0.00023505308490712196, -0.016432780772447586, -9.345571743324399e-05, -0.002695262897759676, -0.0001250427303602919, -1.1444026313256472e-05, -3.2186455882765586e-06, -1.5497195136049413e-06, -3.862306402879767e-05, -0.0001668790791882202, -0.002843267982825637, -0.6501103043556213, -0.000593962671700865, -0.0012328175362199545, -0.018102314323186874, -0.008767680265009403, -0.001970613142475486, -0.00684310682117939, -0.0033918251283466816, -0.006877204403281212, -0.020340891554951668, -0.0017081208061426878, -0.12146495282649994, -0.6352168917655945, -0.3180718421936035, -1.6397770643234253, -0.06561579555273056, -1.8407255411148071, -2.9275577068328857, -0.3785565495491028, -2.6075549125671387, -0.0016495682066306472, -0.011196285486221313, -1.4623041152954102, -2.986487865447998, -1.3030039072036743, -1.5444585084915161, -2.058170795440674, -4.996947765350342, -3.7609922885894775, -0.834587812423706, -1.237178087234497, -1.1739230155944824, -0.20024338364601135, -0.8128238916397095, -1.3602466583251953, -0.020383993163704872, -0.00041940953815355897, -0.9124513268470764, -4.385065078735352, -1.566779375076294, -0.21945270895957947, -0.4855310618877411, -0.12362372875213623, -0.3044496476650238, -1.7937397956848145, -0.15483348071575165, -0.03879624605178833, -1.0672690868377686, -0.5678759813308716, -2.4878928661346436, -1.4569997787475586, -2.110692024230957, -3.023158550262451, -0.5797239542007446, -2.163215398788452, -4.173183917999268, -0.0022710978519171476, -2.7845664024353027, -2.1311721801757812, -3.743225574493408, -2.742675304412842, -2.283236026763916, -0.2697174549102783, -0.004726903047412634, -0.0020641228184103966, -1.2460392713546753, -0.16638877987861633, -0.6613014340400696, -0.0019091013818979263, -0.0490567721426487, -9.775113539944869e-06, -0.0007614573696628213, -0.0006258912617340684, -0.0015015052631497383, -0.005521997343748808, -0.01072216872125864, -0.5445572733879089, -0.0452016182243824, -0.00010501786891836673, -3.755022044060752e-05, -0.001907911617308855, -0.00010525626566959545, -0.0001546025014249608, -0.0038167026359587908, -0.0023611304350197315, -0.0002317160106031224, -0.00013267113536130637, -0.003859334858134389, -1.569242000579834, -0.05095567926764488], "finish_reason": "length"}], "metrics": {"energy": 276.85600418281575, "energy_per_token": 1.081468766339124, "time": 11.350803, "time_per_token": 0.04433907421875}}
{"outputs": [{"text": "zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w', compression=zipfile.ZIP_DEFLATED) as zipf:\n        for path in file_paths:\n            zipf.write(path)\n    zip_file.seek(0)\n    return FileResponse(zip_file, as_attachment=True)", "tokens": ["zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " Zip", "File", "(", "zip", "_", "file", ",", " '", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", " as", " zip", "f", ":", "\n", "        ", "for", " path", " in", " file", "_", "paths", ":", "\n", "            ", "zip", "f", ".", "write", "(", "path", ")", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "\n", "    ", "return", " File", "Response", "(", "zip", "_", "file", ",", " as", "_", "att", "achment", "=", "True", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5390186309814453, -0.16460354626178741, -1.1639280319213867, -0.05566851422190666, -0.15041802823543549, -4.351044481154531e-05, -0.016345765441656113, -0.000532008707523346, -0.006956642493605614, -0.01573069579899311, -0.08278929442167282, -0.5729359984397888, -0.7649837732315063, -0.002813787665218115, -0.0012829415500164032, -0.0012946089264005423, -0.0014553203945979476, -4.7444173105759546e-05, -0.005493781063705683, -0.2505190372467041, -0.04038389399647713, -2.428454637527466, -0.011644961312413216, -1.2266185283660889, -0.010152130387723446, -0.6589351892471313, -0.0006162413046695292, -4.327203714638017e-05, -0.0011813811725005507, -0.006718427408486605, -0.0009843033039942384, -0.0030947669874876738, -0.00015424491721205413, -0.0024131007958203554, -0.027513807639479637, -7.879423355916515e-05, -0.34997206926345825, -2.929276704788208, -0.0019024383509531617, -0.006545177195221186, -0.002962607191875577, -0.038744185119867325, -1.4513121843338013, -0.026699453592300415, -0.002741390373557806, -4.660974445869215e-05, -3.766942609217949e-05, -0.0007463291985914111, -0.0032778840977698565, -0.0023347281385213137, -2.1322128772735596, -0.05515162646770477, -8.892617915989831e-05, -0.0066991266794502735, -0.0018938715802505612, -0.02322203665971756, -1.0090898275375366, -0.03908506780862808, -0.44863030314445496, -1.1018730401992798, -0.014602807350456715, -0.08405256271362305, -0.02262073941528797, -0.008872726000845432, -0.0002494739310350269, -0.001431155833415687, -0.0014871024759486318, -0.12187882512807846, -0.041626039892435074, -0.7104455828666687, -0.003148719435557723, -7.629365427419543e-06, -0.00018285033002030104, -0.06287141889333725, -0.0005816913326270878, -7.748573807475623e-06, -0.35230720043182373, -0.5365126132965088, -0.00389246572740376, -0.006853880826383829, -9.417489309271332e-06, -0.001848061801865697, -0.01438556145876646, -1.8308513164520264, -5.960462772236497e-07, -3.576278118089249e-07, -0.0003182381624355912, -4.482168878894299e-05, -0.11741792410612106], "finish_reason": "stop"}], "metrics": {"energy": 85.663986618042, "energy_per_token": 0.9625167035735056, "time": 3.7949176, "time_per_token": 0.042639523595505616}}
{"outputs": [{"text": "if isinstance(file_paths, list):\n        paths = file_paths\n    else:\n        paths = [file_paths]\n    zip_file = io.BytesIO()\n    zip_archive = zipfile.ZipFile(zip_file, 'w', compression=zipfile.ZIP_DEFLATED)\n    for file_path in paths:\n        if hasattr(file_path, 'seek'):\n            file_path.seek(0)\n            file_content = file_path.read()\n        else:\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n        zip_archive.writestr(os.path.basename(file_path), file_content)\n    zip_archive.close()\n    zip_file.seek(0)\n    response = FileResponse(zip_file)\n    response['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(\n        os.path.basename(os.path.join(settings.MEDIA_ROOT, paths[0])))\n    response", "tokens": ["if", " isinstance", "(", "file", "_", "paths", ",", " list", "):", "\n", "        ", "paths", " =", " file", "_", "paths", "\n", "    ", "else", ":", "\n", "        ", "paths", " =", " [", "file", "_", "paths", "]", "\n", "    ", "zip", "_", "file", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "zip", "_", "archive", " =", " zip", "file", ".", "Z", "ip", "File", "(", "zip", "_", "file", ",", " '", "w", "'", ",", " compression", "=", "zip", "file", ".", "Z", "IP", "_", "DE", "FL", "ATED", ")", "\n", "    ", "for", " file", "_", "path", " in", " paths", ":", "\n", "        ", "if", " has", "attr", "(", "file", "_", "path", ",", " '", "seek", "')", ":", "\n", "            ", "file", "_", "path", ".", "seek", "(", "0", ")", "\n", "            ", "file", "_", "content", " =", " file", "_", "path", ".", "read", "()", "\n", "        ", "else", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "rb", "')", " as", " file", ":", "\n", "                ", "file", "_", "content", " =", " file", ".", "read", "()", "\n", "        ", "zip", "_", "archive", ".", "w", "rit", "est", "r", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ",", " file", "_", "content", ")", "\n", "    ", "zip", "_", "archive", ".", "close", "()", "\n", "    ", "zip", "_", "file", ".", "seek", "(", "0", ")", "\n", "    ", "response", " =", " File", "Response", "(", "zip", "_", "file", ")", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " '", "att", "achment", ";", " filename", "=", "\"", "{}", "\"", "'", ".", "format", "(", "\n", "        ", "os", ".", "path", ".", "bas", "ename", "(", "os", ".", "path", ".", "join", "(", "settings", ".", "MED", "IA", "_", "ROOT", ",", " paths", "[", "0", "]", ")))", "\n", "    ", "response"], "logprobs": [-2.610950469970703, -2.3987956047058105, -0.0005165196489542723, -0.24085815250873566, -0.0001454247540095821, -0.00025340684805996716, -0.03746217116713524, -1.3095743656158447, -0.13923507928848267, -0.026440471410751343, -0.0030332054011523724, -3.6700758934020996, -0.17847168445587158, -0.17092828452587128, -3.862306402879767e-05, -0.00013886917440686375, -0.03647337481379509, -0.06622549146413803, -0.31715744733810425, -7.045020902296528e-05, -0.017052575945854187, -0.00031549722189083695, -0.07388162612915039, -0.002961775055155158, -0.053001247346401215, -0.015347008593380451, -0.0003741279651876539, -0.0003146630187984556, -0.010222931392490864, -0.01581752859055996, -0.7663491368293762, -1.5541011095046997, -0.1982155442237854, -1.263478398323059, -0.04815936088562012, -0.055955205112695694, -3.635817120084539e-05, -0.02193313278257847, -0.0006276782951317728, -0.009113263338804245, -0.016131829470396042, -0.04366645589470863, -1.1428859233856201, -0.07437210530042648, -2.8811094760894775, -0.0019367048516869545, -0.05558236315846443, -0.00029797881143167615, -5.3881147323409095e-05, -0.0021589321549981833, -0.0013680632691830397, -0.0019143365789204836, -0.000982397934421897, -0.004784919787198305, -0.00022885564249008894, -1.8954096958623268e-05, -0.008110919035971165, -0.4291154444217682, -0.04457714036107063, -0.8053097724914551, -0.0009972843108698726, -0.9861583113670349, -0.0036802436225116253, -0.0027700408827513456, -7.891343557275832e-05, -1.1324817933200393e-05, -0.0011317284079268575, -0.020474161952733994, -0.001328777172602713, -0.0013806821079924703, -0.0001618731184862554, -0.003196133067831397, -0.06129813939332962, -0.010549965314567089, -0.08305920660495758, -0.09359786659479141, -1.9645541906356812, -0.2005244642496109, -0.02697032131254673, -0.00622228067368269, -0.005217862781137228, -0.00031573555315844715, -0.0025311834178864956, -0.002648895373567939, -0.3386211395263672, -3.254227876663208, -0.005365969613194466, -0.00023421882360707968, -0.06319432705640793, -0.0002862997353076935, -0.00024911639047786593, -0.000663894519675523, -0.16876624524593353, -3.034238815307617, -0.3337051272392273, -0.33523261547088623, -0.1433616727590561, -0.0006283930852077901, -0.8516191244125366, -0.060650091618299484, -0.19228291511535645, -0.017871307209134102, -0.0027456702664494514, -0.0004631400224752724, -0.0037659930530935526, -0.022897839546203613, -0.07910443842411041, -1.0966517925262451, -2.694939136505127, -0.04500824213027954, -1.8940678834915161, -0.008645249530673027, -0.04834531247615814, -0.00010287232726113871, -8.189342770492658e-05, -0.07270819693803787, -0.0070089660584926605, -0.012328960932791233, -0.013781512156128883, -0.6910043954849243, -0.11967978626489639, -2.1219027985353023e-05, -0.009367678314447403, -0.00021896349790040404, -0.9832033514976501, -0.02349722385406494, -0.0011470888275653124, -0.02506863884627819, -1.1205610462639015e-05, -0.0003438596613705158, -0.03526083007454872, -0.07372096180915833, -0.003524047089740634, -0.0016707521863281727, -0.0003387354372534901, -0.3890908658504486, -0.6240082383155823, -0.0058158463798463345, -0.00014351768186315894, -0.016074584797024727, -0.001438060076907277, -0.0033936072140932083, -0.00024780540843494236, -0.001510551548562944, -0.0009385710000060499, -9.142934868577868e-05, -0.0007552632014267147, -0.0016445695655420423, -0.03287042677402496, -0.17973428964614868, -0.0018899451242759824, -0.015410516411066055, -0.00045908879837952554, -0.009269771166145802, -0.00029905137489549816, -9.715084888739511e-05, -0.0017065736465156078, -0.050368111580610275, -0.8344208598136902, -0.0007421599584631622, -0.0008416209602728486, -0.0019891730044037104, -0.01645166054368019, -4.768370445162873e-07, -8.34430247778073e-05, -0.003288934240117669, -0.004536100197583437, -0.00027211778797209263, -0.008797458373010159, -0.0072988285683095455, -0.0065839034505188465, -0.0003071551618631929, -0.00045193947153165936, -0.025111768394708633, -0.003058638656511903, -0.06640688329935074, -0.2355436533689499, -0.0009615565068088472, -0.2843703627586365, -0.0003670972364488989, -0.0034899539314210415, -0.00026055757189169526, -0.004066532477736473, -0.030978670343756676, -0.15532216429710388, -0.0027998790610581636, -0.01465896237641573, -0.013683917932212353, -0.004513552878051996, -0.00018690270371735096, -0.002066978020593524, -0.003407507436349988, -0.05268147587776184, -0.026590460911393166, -0.8915172219276428, -0.004649304784834385, -0.02404806949198246, -9.894321920000948e-06, -0.0005664412747137249, -0.10882437229156494, -0.0010281282011419535, -0.00011085849109804258, -1.0684651136398315, -0.007267585955560207, -0.008919160813093185, -0.18663035333156586, -0.061837296932935715, -0.016504544764757156, -0.0003197873884346336, -0.9618635177612305, -0.00020990552729927003, -3.8265450712060556e-05, -0.005041980184614658, -0.33278971910476685, -0.0018306892598047853, -0.0002723561483435333, -0.034412682056427, -0.007702886126935482, -0.02476748451590538, -0.10509198158979416, -2.2251415252685547, -1.3858426809310913, -0.015102330595254898, -0.0022708598989993334, -0.001278893556445837, -0.46224725246429443, -0.5552017092704773, -0.03705836087465286, -1.0613644123077393, -0.0004167880106251687, -0.001192454481497407, -0.007938737981021404, -0.12718693912029266, -0.00016962042718660086, -0.0359514094889164, -2.269453287124634, -0.013254507444798946, -0.002238389104604721, -0.00584002397954464, -0.16720806062221527, -0.4050930142402649, -0.37639057636260986, -0.00458012567833066, -0.5781769156455994, -0.0024579332675784826, -0.0011073178611695766, -0.09190183877944946, -0.008192269131541252, -2.8194098472595215, -0.01962658390402794, -0.000977157847955823, -0.6521308422088623, -0.026500841602683067, -0.014239490032196045, -0.013288740068674088, -0.8418651223182678], "finish_reason": "length"}], "metrics": {"energy": 258.38136862278, "energy_per_token": 1.0093022211827343, "time": 11.148437, "time_per_token": 0.04354858203125}}
{"outputs": [{"text": "response = FileResponse()\n    file_response = io.BytesIO()\n    with ZipFile(file_response, 'w') as zip_file:\n        for file_path in file_paths:\n            zip_file.write(file_path)\n    response.content = file_response.getvalue()\n    response['Content-Type'] = 'application/zip'\n    response['Content-Disposition'] = f'attachment; filename=\"files.zip\"'\n    response.file_name = 'files.zip'\n    return response", "tokens": ["response", " =", " File", "Response", "()", "\n", "    ", "file", "_", "response", " =", " io", ".", "Bytes", "IO", "()", "\n", "    ", "with", " Zip", "File", "(", "file", "_", "response", ",", " '", "w", "')", " as", " zip", "_", "file", ":", "\n", "        ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "            ", "zip", "_", "file", ".", "write", "(", "file", "_", "path", ")", "\n", "    ", "response", ".", "content", " =", " file", "_", "response", ".", "get", "value", "()", "\n", "    ", "response", "['", "Content", "-", "Type", "']", " =", " '", "application", "/", "zip", "'", "\n", "    ", "response", "['", "Content", "-", "Dis", "position", "']", " =", " f", "'", "att", "achment", ";", " filename", "=", "\"", "files", ".", "zip", "\"", "'", "\n", "    ", "response", ".", "file", "_", "name", " =", " '", "files", ".", "zip", "'", "\n", "    ", "return", " response", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6459312438964844, -0.0066139837726950645, -0.1187436655163765, -4.053033626405522e-05, -0.5830702781677246, -0.06748265027999878, -0.19466914236545563, -3.848592519760132, -0.15458787977695465, -3.4515790939331055, -0.12847182154655457, -1.112316370010376, -4.410646579344757e-05, -0.3621346354484558, -0.0002444683632347733, -0.021364081650972366, -0.013830423355102539, -0.14974765479564667, -0.6253741383552551, -0.66008061170578, -0.006308878306299448, -0.00684310682117939, -0.03643567115068436, -0.008805492892861366, -9.238292841473594e-05, -0.002986497012898326, -0.3875451385974884, -0.04375089704990387, -0.12024884670972824, -6.890059739816934e-05, -0.3716663420200348, -0.2625218331813812, -0.12834861874580383, -0.0016962201334536076, -0.012737112119793892, -0.0031784274615347385, -0.058511290699243546, -0.25234341621398926, -0.11231394112110138, -0.013211097568273544, -0.00854337029159069, -0.001759529928676784, -3.2186455882765586e-06, -6.472854875028133e-05, -0.0011570908827707171, -0.0023970461916178465, -0.0018137923907488585, -2.358757257461548, -0.004403537139296532, -0.03802316635847092, -0.0005397531786002219, -0.029910901561379433, -0.002339128637686372, -0.0766475573182106, -0.0003631647559814155, -0.0032900036312639713, -0.9725301265716553, -0.039138030260801315, -0.4514424800872803, -0.2662699520587921, -0.15520651638507843, -0.6451236009597778, -0.03836578503251076, -0.00672778207808733, -5.9126061387360096e-05, -5.245071224635467e-05, -0.001602675998583436, -0.006623575929552317, -0.06024947762489319, -0.000773488252889365, -0.01628994010388851, -0.042183104902505875, -0.33371007442474365, -0.29861462116241455, -0.013135096058249474, -0.00038068200228735805, -0.28127455711364746, -2.0503786799963564e-05, -0.031447093933820724, -0.0728934109210968, -0.0011124381562694907, -0.00029738296871073544, -0.01470994483679533, -0.00194193993229419, -0.04331240430474281, -0.011257464066147804, -0.17234323918819427, -0.017306385561823845, -0.0034035868011415005, -0.0003904534096363932, -0.006925270427018404, -0.0009514334378764033, -1.5139465176616795e-05, -0.0973154604434967, -1.399678349494934, -0.19857744872570038, -0.0005265279905870557, -0.00021407696476671845, -0.0008093419019132853, -0.004176940768957138, -0.03309326991438866, -0.10981041193008423, -0.5359891057014465, -0.007768892217427492, -0.000169382052263245, -0.0017055026255548, -0.003924170508980751, -0.009271660819649696, -0.027444569393992424, -1.722978115081787, -1.1858789920806885, -2.0386321544647217, -0.39138808846473694, -1.253307819366455, -0.011802604421973228, -0.2519761919975281, -0.042127903550863266, -0.01042338740080595, -0.00012981049076188356, -0.004889080300927162, -0.04800848290324211, -0.031229201704263687, -0.1966543346643448, -0.0010825494537129998, -0.8789424300193787, -9.536738616588991e-07, -2.3841855067985307e-07, -0.0003307510633021593, -7.223821739898995e-05, -0.10755135118961334], "finish_reason": "stop"}], "metrics": {"energy": 142.11867512130735, "energy_per_token": 1.0932205778562103, "time": 5.6933093, "time_per_token": 0.04379468692307693}}
