{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError('The input must be a Pandas DataFrame')\n    if 'UnicodeString' not in dataframe:\n        raise KeyError('The DataFrame must contain the column \"UnicodeString\"')\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda s: codecs.decode(s, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "('", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", "')", "\n", "    ", "if", " '", "Un", "icode", "String", "'", " not", " in", " data", "frame", ":", "\n", "        ", "raise", " Key", "Error", "('", "The", " Data", "Frame", " must", " contain", " the", " column", " \"", "Un", "icode", "String", "\"", "')", "\n", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " s", ":", " codec", "s", ".", "decode", "(", "s", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -1.5915287733078003, -1.220953106880188, -0.10039377957582474, -0.6406355500221252, -0.0037230004090815783, -0.02353576570749283, -0.5091710090637207, -5.960446742392378e-06, -0.003758392296731472, -0.004002893343567848, -0.7942405939102173, -0.0008615119731985033, -0.9689843058586121, -0.8311223983764648, -0.23019158840179443, -0.001065520802512765, -3.6954811548639555e-06, -0.00011181206355104223, -5.6265202147187665e-05, -0.007217405829578638, -8.106198947643861e-06, -0.005105552729219198, -1.6689286894688848e-06, -2.1559643745422363, -0.0015789910685271025, -0.0012261499650776386, -0.0020205811597406864, -0.005198295693844557, -7.986990567587782e-06, -0.11080284416675568, -0.11873795092105865, -0.7725549936294556, -0.01002113614231348, -0.34678006172180176, -0.17264339327812195, -0.6487235426902771, -0.05830090492963791, -0.0397053062915802, -0.0014788892585784197, -1.1205610462639015e-05, -0.00033146608620882034, -0.0013272295473143458, -0.01709042862057686, -0.00027533553657121956, -1.1744985580444336, -0.0013636585790663958, -0.8422271013259888, -0.002955238102003932, -0.0653347596526146, -0.0023838456254452467, -5.149708886165172e-05, -0.0006789048202335835, -0.0021421597339212894, -0.004275348503142595, -0.0781436413526535, -1.4543427823809907e-05, -0.03104223497211933, -1.4424220353248529e-05, -4.768370445162873e-07, -9.417489309271332e-06, -0.0021344278939068317, -0.0033075883984565735, -0.07857638597488403, -0.0017589349299669266, -0.37302231788635254, -2.188920021057129, -0.006086149252951145, -0.08072167634963989, -1.9311717551317997e-05, -7.092700980138034e-05, -0.013262860476970673, -0.0019867937080562115, -0.0373360812664032, -0.025808580219745636, -0.03176645189523697, -0.00023195437097456306, -1.0490362910786644e-05, -0.06624267250299454, -0.0001110968878492713, -0.056534543633461, -0.0055434550158679485, -0.42578360438346863, -0.01878296583890915, -0.0027934599202126265, -1.1920858014491387e-05, -0.8526633381843567, -0.00451640086248517, -1.1364257335662842], "finish_reason": "stop"}], "metrics": {"energy": 430.36336249065397, "energy_per_token": 4.138109254717826, "time": 12.8822, "time_per_token": 0.12386730769230768}}
{"outputs": [{"text": "if isinstance(dataframe, pd.DataFrame):\n        try:\n            dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(\n                lambda x: codecs.decode(x, \"unicode_escape\")\n            )\n            return dataframe\n        except KeyError:\n            raise KeyError(\n                \"The column 'UnicodeString' does not exist in the DataFrame.\"\n            )\n    else:\n        raise TypeError(\n            \"The input is not a valid Pandas DataFrame. Please provide a valid DataFrame.\"\n        )", "tokens": ["if", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "try", ":", "\n", "            ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "\n", "                ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "            ", ")", "\n", "            ", "return", " data", "frame", "\n", "        ", "except", " Key", "Error", ":", "\n", "            ", "raise", " Key", "Error", "(", "\n", "                ", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", ".", "\"", "\n", "            ", ")", "\n", "    ", "else", ":", "\n", "        ", "raise", " Type", "Error", "(", "\n", "            ", "\"", "The", " input", " is", " not", " a", " valid", " Pand", "as", " Data", "Frame", ".", " Please", " provide", " a", " valid", " Data", "Frame", ".", "\"", "\n", "        ", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -2.432476282119751, -0.000102037942269817, -0.0013943722005933523, -0.00020990552729927003, -0.0014542490243911743, -0.0026619734708219767, -6.496695277746767e-05, -0.0018156962469220161, -0.13406004011631012, -0.008686613291501999, -0.038775719702243805, -0.8536152243614197, -0.0002810560108628124, -0.0011832863092422485, -0.003339311806485057, -0.5674305558204651, -0.0036153923720121384, -1.489869236946106, -0.0026820660568773746, -0.00709502212703228, -5.578839045483619e-05, -0.0006555553991347551, -0.0010253892978653312, -0.0016601602546870708, -0.005276088137179613, -0.1266055405139923, -1.4424220353248529e-05, -0.022927898913621902, -0.012870576232671738, -6.0437283536884934e-05, -1.1920928244535389e-07, -3.40932747349143e-05, -5.8412379075889476e-06, -0.0010942192748188972, -0.0029021073132753372, -0.10195749253034592, -0.0017467968864366412, -0.8618144989013672, -0.0041555725038051605, -0.02932102233171463, -0.13190771639347076, -0.0016481400234624743, -0.07631007581949234, -1.156323378381785e-05, -2.95634672511369e-05, -0.00830033142119646, -0.0015823236899450421, -0.07267937809228897, -0.022816510871052742, -0.06696202605962753, -0.00010561384988250211, -1.9073468138230965e-06, -0.11026553809642792, -6.639736966462806e-05, -9.894321920000948e-06, -0.1007808968424797, -0.053717199712991714, -0.013617713004350662, -2.4199192921514623e-05, -0.004417304880917072, -0.9871023893356323, -0.031547244638204575, -0.004106185864657164, -2.145764938177308e-06, -0.012737230397760868, -0.054531529545784, -0.002102666301652789, -0.03802282363176346, -2.50339189733495e-06, -0.6381232738494873, -0.005580442026257515, -0.00026603974401950836, -0.2447982132434845, -0.07370556890964508, -2.264974000354414e-06, -0.08618023991584778, -1.0050835609436035, -0.00036554806865751743, -0.27778664231300354, -0.41734617948532104, -0.8275183439254761, -0.20399489998817444, -0.0037130240816622972, -0.0002548369811847806, -0.0011966219171881676, -0.0016230279579758644, -0.13696624338626862, -0.0008662762120366096, -0.006844882853329182, -0.0078108832240104675, -0.020170804113149643, -0.41424059867858887, -0.0032808545511215925, -0.5817573666572571, -0.07374565303325653, -0.013515280559659004, -0.005458095110952854, -7.795983401592821e-05, -0.04036637768149376, -0.06097506359219551, -0.030609115958213806, -2.861018856492592e-06, -0.00018761781393550336, -0.00014208737411536276, -0.0027917956467717886, -0.002671128138899803, -2.9802276912960224e-06, -0.002159646013751626, -2.038823127746582, -0.0008180370787158608, -0.11316870152950287, -0.5867748856544495, -0.29046618938446045, -1.2691514492034912, -0.012055275961756706, -0.009804898872971535, -2.618119955062866, -0.5529301166534424, -1.168244216387393e-05, -0.005000466015189886, -0.003537826705724001, -0.2666625678539276, -0.2876124382019043, -0.20116126537322998, -0.015261659398674965, -0.09414387494325638, -0.21180517971515656, -0.0010944573441520333, -0.1464974284172058, -0.000918681500479579, -0.002179629635065794, -0.001715261023491621, -0.8977195620536804, -3.6954811548639555e-06, -3.4570634852570947e-06, -1.6689286894688848e-06, -2.9444261599564925e-05, -0.1571677327156067], "finish_reason": "stop"}], "metrics": {"energy": 472.1122691040039, "energy_per_token": 3.396491144633121, "time": 11.987439, "time_per_token": 0.08624056834532375}}
{"outputs": [{"text": "if 'UnicodeString' not in dataframe.columns:\n        raise KeyError('The DataFrame does not contain a column named \"UnicodeString\".')\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " '", "Un", "icode", "String", "'", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "('", "The", " Data", "Frame", " does", " not", " contain", " a", " column", " named", " \"", "Un", "icode", "String", "\"", ".", "')", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -1.9194414615631104, -0.00237171514891088, -6.9141146923357155e-06, -9.989239333663136e-05, -2.5987286790041253e-05, -0.059861838817596436, -1.5258672647178173e-05, -0.006883005611598492, -0.0002029928145930171, -0.11283320933580399, -0.002536058658733964, -0.002452225424349308, -0.004784564021974802, -0.006374502554535866, -0.012319541536271572, -0.010656828992068768, -4.410734163684538e-06, -1.0207760334014893, -0.7143805623054504, -1.6441470384597778, -0.015977097675204277, -0.6911100745201111, -0.0019936938770115376, -0.2038978785276413, -0.9305121302604675, -0.1608191728591919, -0.6932095289230347, -0.037415891885757446, -0.001379372552037239, -2.3603161025675945e-05, -0.0005138983833603561, -0.0031998169142752886, -0.732364296913147, -0.029070939868688583, -0.0013060382334515452, -0.6874688863754272, -1.520434856414795, -0.0013723488664254546, -0.042637284845113754, -0.0026052603498101234, -6.341733387671411e-05, -0.000894146622158587, -0.0036743050441145897, -0.005518084857612848, -0.06234368309378624, -1.3947389561508317e-05, -0.016656147316098213, -1.5735502529423684e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -0.0004409771354403347, -0.000993592431768775, -0.06926316767930984, -0.0016494491137564182, -0.17384976148605347, -0.09635945409536362, -0.0035976942162960768, -0.04738416522741318, -1.0132738680113107e-05, -6.103329360485077e-05, -0.007989472709596157, -0.0025972940493375063, -0.09869035333395004, -0.01302308402955532, -0.0416925884783268, -0.0003357561945449561, -7.986990567587782e-06, -0.12366976588964462, -9.583967766957358e-05, -0.04398935288190842, -0.0073784696869552135, -0.01819128356873989, -0.012295284308493137, -0.0031004713382571936, -1.597391747054644e-05, -0.7519399523735046, -1.311301275563892e-06, -1.311301275563892e-06, -1.4305104514278355e-06, -1.585470999998506e-05, -0.18396344780921936], "finish_reason": "stop"}], "metrics": {"energy": 308.8540117797852, "energy_per_token": 3.766512338777868, "time": 7.1515756, "time_per_token": 0.08721433658536586}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError('The input must be a Pandas DataFrame.')\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "('", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "')", "\n", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -1.5915287733078003, -1.220953106880188, -0.10039377957582474, -0.6406355500221252, -0.0037230004090815783, -0.02353576570749283, -0.5091710090637207, -5.960446742392378e-06, -0.003758392296731472, -0.004002893343567848, -0.7156769037246704, -0.00550646660849452, -0.0008740180637687445, -0.4001915454864502, -0.0005578630371019244, -2.5855345726013184, -0.009994935244321823, -0.17139650881290436, -0.006562941707670689, -9.703165414975956e-05, -0.0005936052766628563, -0.004617623053491116, -0.006071694195270538, -0.07842165231704712, -1.2040065485052764e-05, -0.04712093248963356, -9.023735765367746e-05, 0.0, -5.173549288883805e-05, -0.003926070407032967, -0.001796538126654923, -0.09439360350370407, -0.0016021999763324857, -0.4476923644542694, -0.09237203747034073, -0.0021658313926309347, -0.04368893802165985, -1.9788545614574105e-05, -7.366862701019272e-05, -0.010552441701292992, -0.0024873053189367056, -0.171966090798378, -0.02279600314795971, -0.03168584406375885, -0.00034731553751043975, -1.1920858014491387e-05, -0.09676598757505417, -0.00016211149340961128, -0.045330021530389786, -0.006894608028233051, -0.6582048535346985, -0.020524265244603157, -0.00436318339779973, -1.9311717551317997e-05, -0.9259986281394958, -9.536738616588991e-07, -1.1920922133867862e-06, -1.4305104514278355e-06, -1.2397689715726301e-05, -0.1303545981645584], "finish_reason": "stop"}], "metrics": {"energy": 331.47823420524594, "energy_per_token": 4.36155571322692, "time": 10.580703, "time_per_token": 0.13921977631578947}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"dataframe must be a Pandas DataFrame\")\n\n    if \"UnicodeString\" not in dataframe:\n        raise KeyError(\"dataframe must contain the column 'UnicodeString'\")\n\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda s: codecs.decode(s, \"unicode_escape\"))\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "data", "frame", " must", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "data", "frame", " must", " contain", " the", " column", " '", "Un", "icode", "String", "'", "\"", ")", "\n", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " s", ":", " codec", "s", ".", "decode", "(", "s", ",", " \"", "un", "icode", "_", "escape", "\"", "))", "\n", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -3.5064945220947266, -0.006251305341720581, -0.29000282287597656, -0.0023137959651649, -0.07753124833106995, -0.7710213661193848, -2.264974000354414e-06, -0.0021808191668242216, -0.002247666707262397, -0.2546845078468323, -0.00024303820100612938, -0.0008435266790911555, -0.43359366059303284, -0.0007289375062100589, -0.9579771161079407, -0.28127816319465637, -0.0013443727511912584, -3.814689989667386e-06, -0.00015901254664640874, -3.4927710657939315e-05, -0.009614944458007812, -3.6954811548639555e-06, -0.006149182096123695, -1.5497195136049413e-06, -2.121717929840088, -0.0015870844945311546, -0.0013386583887040615, -0.0052418177947402, -0.007510402239859104, -5.722029527532868e-06, -0.054221052676439285, -0.0486668162047863, -0.5660770535469055, -0.0016038662288337946, -0.08479361236095428, -0.20690999925136566, -0.9716354608535767, -0.1225198283791542, -0.16863159835338593, -0.0014638908905908465, -3.933898824470816e-06, -0.00023338454775512218, -0.0036873698700219393, -0.011688674800097942, -0.00014435203047469258, -0.00012134769349358976, -0.01973879523575306, -0.0009507188224233687, -0.5893436074256897, -0.0021213425789028406, -0.11080668121576309, -0.00034814971149899065, -0.0019126709084957838, -2.276871418871451e-05, -0.001104817260056734, -0.0014559156261384487, -0.0007385863573290408, -0.004593653604388237, -0.08175129443407059, -2.13382354559144e-05, -0.012773128226399422, -0.013000138103961945, -2.8967437174287625e-05, -5.960462772236497e-07, -3.838465272565372e-05, -5.960446742392378e-06, -0.0013669917825609446, -0.003793782787397504, -0.0908726155757904, -0.0012696071062237024, -0.6964908838272095, -2.466092109680176, -0.003976178355515003, -0.0620737187564373, -3.0278701160568744e-05, -4.446407547220588e-05, -0.012239115312695503, -0.000942858459893614, -0.03385968133807182, -0.014248891733586788, -0.3439359962940216, -0.00013052565918769687, -3.4570634852570947e-06, -0.07033098489046097, -5.6980417866725475e-05, -1.3947389561508317e-05, -0.06187517195940018, -0.003319826442748308, -0.4846087694168091, -0.0014616292901337147, -0.00882050022482872, -0.002622975967824459, -1.1801649634435307e-05, -1.0627411603927612, -0.007235158234834671, -1.030426025390625], "finish_reason": "stop"}], "metrics": {"energy": 504.34955600738544, "energy_per_token": 4.424118912345486, "time": 14.516263, "time_per_token": 0.1273356403508772}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame\")\n\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Column 'UnicodeString' does not exist in the DataFrame\")\n\n    # Replace each Unicode escape string with the corresponding character\n    def decode_unicode_string(unicode_string: str) -> str:\n        return codecs.decode(unicode_string, 'unicode_escape')\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(decode_unicode_string)\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "Column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Replace", " each", " Un", "icode", " escape", " string", " with", " the", " corresponding", " character", "\n", "    ", "def", " decode", "_", "un", "icode", "_", "string", "(", "un", "icode", "_", "string", ":", " str", ")", " ->", " str", ":", "\n", "        ", "return", " codec", "s", ".", "decode", "(", "un", "icode", "_", "string", ",", " '", "un", "icode", "_", "escape", "')", "\n", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "decode", "_", "un", "icode", "_", "string", ")", "\n", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -0.8655566573143005, -0.7450159788131714, -0.0009422629955224693, -0.012143018655478954, -0.4981011152267456, -1.6689286894688848e-06, -0.0017378717893734574, -0.0020856549963355064, -0.5941173434257507, -0.00024077377747744322, -0.0012874656822532415, -0.4367801547050476, -0.0007382289622910321, -0.837594747543335, -0.38157743215560913, -0.0008199428557418287, -3.933898824470816e-06, -0.00015293381875380874, -2.5152843591058627e-05, -0.012708628550171852, -6.6756979322235566e-06, -0.006094798911362886, -3.2186455882765586e-06, -0.11377381533384323, -0.0006655623437836766, -0.0018030828796327114, -0.0008005275158211589, -0.0012513910187408328, -0.004133491311222315, -0.0077118766494095325, -3.099436753473128e-06, -0.029042569920420647, -0.08631573617458344, -1.154974341392517, -0.11656763404607773, -0.003022152464836836, -7.867782187531702e-06, -0.00029309268575161695, -0.00043704494601115584, -0.5035364627838135, -0.0003780603874474764, -0.001751794945448637, -0.06015227362513542, -0.0879255160689354, -0.16746631264686584, -0.0012665116228163242, -0.09162265807390213, -0.00018594920402392745, -0.00010883215873036534, -0.01657653972506523, -0.001313776709139347, -1.6367361545562744, -3.8845698833465576, -2.0615320205688477, -0.8348485827445984, -0.0009910915978252888, -0.2253347933292389, -0.0875825360417366, -0.39918655157089233, -1.3543365001678467, -1.2665221691131592, -2.2465643882751465, -0.3785031735897064, -0.003623469267040491, -2.010573387145996, -0.7135362029075623, -0.054214391857385635, -0.8136226534843445, -0.0037794129457324743, -0.4030396640300751, -0.9115462899208069, -0.002557104919105768, -1.7343127727508545, -0.0015238827327266335, -0.0012550819665193558, -0.21371442079544067, -0.8709364533424377, -0.004096094518899918, -0.05085371434688568, -1.156323378381785e-05, -0.0024667331017553806, -0.000579546787776053, -0.0006355411605909467, -0.0036437802482396364, -0.35119885206222534, -0.04992740973830223, -1.6689286894688848e-06, -6.437280717364047e-06, -0.021739168092608452, -0.0003483880718704313, -0.02245313487946987, -3.2186455882765586e-06, -5.483612312673358e-06, -4.6132929128361866e-05, -0.011848903261125088, -0.678000807762146, -0.0002865380665753037, -1.0728830375228426e-06, -0.010207355953752995, -4.017272294731811e-05, -0.0015021003782749176, -0.013583609834313393, -0.004833917133510113, -0.000446696620201692, -0.6044831871986389, -9.738924563862383e-05, -2.2720420360565186, -0.0013048476539552212, -2.4318398573086597e-05, -0.00016640232934150845, -0.0013892533024773002, -0.0019073167350143194, -0.004597094841301441, -1.311301275563892e-06, -0.01197694893926382, -1.4305012882687151e-05, -1.1920928244535389e-07, -1.2874520507466514e-05, -8.689979586051777e-05, -0.0004961451631970704, -0.007171839475631714, -2.3603161025675945e-05, -0.018301665782928467, -1.680836794548668e-05, -3.099436753473128e-06, 0.0, -1.5139465176616795e-05, -7.986990567587782e-06, -0.0006982034537941217, -0.001099935034289956, -0.3712722659111023, -0.0005349873681552708, -0.04938768967986107, -0.002124911407008767, -5.602820692729438e-06, -1.201782464981079, -1.4305104514278355e-06, -8.344646857949556e-07, -1.7881377516459906e-06, -2.074220174108632e-05, -0.21141600608825684], "finish_reason": "stop"}], "metrics": {"energy": 642.7548093948358, "energy_per_token": 4.042483077954942, "time": 18.732914, "time_per_token": 0.11781706918238995}}
{"outputs": [{"text": "if isinstance(dataframe, pd.DataFrame):\n        try:\n            if dataframe.columns.to_list().__contains__(\"UnicodeString\"):\n                dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].str.encode(\"ascii\").apply(lambda x: codecs.decode(x, \"unicode_escape\"))\n            else:\n                raise KeyError(f'There is no column \"UnicodeString\" in the input DataFrame. Columns in DataFrame: {dataframe.columns.to_list()}')\n            return dataframe\n        except KeyError as key_err:\n            raise key_err\n    else:\n        raise TypeError(f\"The input is not a pandas DataFrame. Instead, it is: {type(dataframe)}\")", "tokens": ["if", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "try", ":", "\n", "            ", "if", " data", "frame", ".", "columns", ".", "to", "_", "list", "()", ".", "__", "contains", "__(", "\"", "Un", "icode", "String", "\"", "):", "\n", "                ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "str", ".", "encode", "(", "\"", "ascii", "\"", ")", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", "))", "\n", "            ", "else", ":", "\n", "                ", "raise", " Key", "Error", "(", "f", "'", "There", " is", " no", " column", " \"", "Un", "icode", "String", "\"", " in", " the", " input", " Data", "Frame", ".", " Col", "umns", " in", " Data", "Frame", ":", " {", "data", "frame", ".", "columns", ".", "to", "_", "list", "()}", "')", "\n", "            ", "return", " data", "frame", "\n", "        ", "except", " Key", "Error", " as", " key", "_", "err", ":", "\n", "            ", "raise", " key", "_", "err", "\n", "    ", "else", ":", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "The", " input", " is", " not", " a", " pandas", " Data", "Frame", ".", " Instead", ",", " it", " is", ":", " {", "type", "(", "data", "frame", ")}", "\"", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -2.432476282119751, -0.000102037942269817, -0.0013943722005933523, -0.00020990552729927003, -0.0014542490243911743, -0.0026619734708219767, -6.496695277746767e-05, -0.0018156962469220161, -0.13406004011631012, -0.008686613291501999, -0.038775719702243805, -0.8536152243614197, -0.0002810560108628124, -0.0011832863092422485, -0.003339311806485057, -3.1159439086914062, -2.265789270401001, -0.0007246490567922592, -0.6827381253242493, -0.5960654616355896, -0.08254103362560272, -1.9311318397521973, -2.5510462364763953e-05, -0.0028872492257505655, -0.02236780896782875, -0.005140540190041065, -2.0002973079681396, -0.002200088929384947, -0.6248465776443481, -0.005626318044960499, -0.0034713030327111483, -8.34461570775602e-06, -0.00016258825780823827, -3.0874729418428615e-05, -0.027934009209275246, -0.014608094468712807, -0.008504010736942291, -0.4544140100479126, -0.003986983094364405, -0.31600847840309143, -0.004255407024174929, -0.003628220409154892, -3.4927710657939315e-05, -0.0006578188622370362, -0.0013404440833255649, -0.003682143986225128, -0.011496132239699364, -0.06642395257949829, -2.4199192921514623e-05, -0.029353320598602295, -0.0449853353202343, -5.709961988031864e-05, 0.0, -2.825220326485578e-05, -7.748573807475623e-06, -0.004707088693976402, -0.005470662377774715, -2.110410451889038, -0.003069453639909625, -0.5216466188430786, -0.49126964807510376, -0.5483316779136658, -0.7580288052558899, -0.0009017692063935101, -0.19153305888175964, -0.026801589876413345, -1.1707959175109863, -0.000704278820194304, -0.6425148844718933, -0.12327360361814499, -0.01446851808577776, -0.3351856470108032, -1.1920922133867862e-06, -8.332382276421413e-05, -0.016013583168387413, -0.0006803343421779573, -0.010587946511805058, -0.0019809638615697622, -0.06827227026224136, -0.00021205084340181202, -2.7418097943154862e-06, -0.09341807663440704, -2.90866428258596e-05, -4.291525328881107e-06, -0.36486533284187317, -0.04822956398129463, -1.366713285446167, -0.5434889197349548, -0.00037448544753715396, -0.009212368167936802, -0.0012063853209838271, -0.030168985947966576, -0.04374028742313385, -4.6491513785440475e-06, -0.12666279077529907, -2.0121071338653564, -1.6906648874282837, -2.592946767807007, -0.05125131458044052, -0.04134447127580643, -0.402000367641449, -0.6332067847251892, -0.01876448094844818, -0.0002774807217065245, -0.001086598145775497, -0.0024418795946985483, -0.13839390873908997, -0.275020569562912, -2.086911201477051, -0.4894079864025116, -0.02229098416864872, -1.0999914407730103, -3.2647435665130615, -0.0024133387487381697, -1.0126688480377197, -1.431123971939087, -0.021890096366405487, -0.34492358565330505, -0.15843330323696136, -0.04157675430178642, -4.31528314948082e-05, -0.003088349476456642, -0.003480450250208378, -0.47814658284187317, -0.14235235750675201, -1.9073304429184645e-05, -0.0002466136065777391, -0.00990676786750555, -0.06365573406219482, -0.005091320723295212, -2.2500369548797607, -0.023541703820228577, -0.0068502104841172695, -2.861018856492592e-06, -0.008690040558576584, -0.05902779474854469, -0.001392229343764484, -1.3488194942474365, -6.9141146923357155e-06, -0.13458283245563507, -1.8912018537521362, -0.21149994432926178, -1.7225650548934937, -0.007471475284546614, -0.0033091329969465733, -0.003026431193575263, -0.1614149957895279, -0.35385483503341675, -6.9141146923357155e-06, -6.6756979322235566e-06, -0.018968848511576653, -0.20214325189590454, -0.018260113894939423, -4.5298504119273275e-05, -0.000285227142740041, -0.0015866083558648825, -0.005289962515234947, -0.0035223839804530144, -4.291525328881107e-06, -0.1691206395626068, -0.41665011644363403, -0.5672759413719177, -0.9082321524620056, -0.19850990176200867, -1.0565993785858154, -0.15203338861465454, -0.06036069989204407, -1.5190722942352295, -0.03487547114491463, -0.005509904585778713, -0.5260960459709167, -3.59847092628479, -0.5688064694404602, -0.24458354711532593, -0.5600089430809021, -1.340106725692749, -0.013583844527602196, -0.08317308127880096, -0.00032860602368600667, -0.00130425242241472, -1.156323378381785e-05, -0.2534562349319458, -0.08401200920343399, -0.5966983437538147, -3.576272320060525e-06, -2.50339189733495e-06, -1.0728830375228426e-06, -1.2516897186287679e-05, -0.1292709857225418], "finish_reason": "stop"}], "metrics": {"energy": 779.1690560274128, "energy_per_token": 4.100889768565331, "time": 21.861235, "time_per_token": 0.11505913157894737}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame\")\n\n    if 'UnicodeString' not in dataframe.columns:\n        raise KeyError('UnicodeString column does not exist in the DataFrame')\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " '", "Un", "icode", "String", "'", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "('", "Un", "icode", "String", " column", " does", " not", " exist", " in", " the", " Data", "Frame", "')", "\n", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "\n", "\n", "#"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -0.8655566573143005, -0.7450159788131714, -0.0009422629955224693, -0.012143018655478954, -0.4981011152267456, -1.6689286894688848e-06, -0.0017378717893734574, -0.0020856549963355064, -0.5941173434257507, -0.00024077377747744322, -0.0012874656822532415, -0.4367801547050476, -0.0007382289622910321, -0.837594747543335, -1.2799310684204102, -0.0011619728757068515, -5.602820692729438e-06, -0.00010096516780322418, -3.9219088648678735e-05, -0.008657541126012802, -9.298280929215252e-06, -0.006357564125210047, -2.9802276912960224e-06, -0.12563583254814148, -0.00032634177478030324, -0.0017037175130099058, -0.0010671879863366485, -0.001986198825761676, -0.0031609591096639633, -0.008345373906195164, -5.364403477869928e-06, -1.9873062372207642, -2.441641330718994, -0.0007894498412497342, -0.010529321618378162, -0.2694038152694702, -0.6439499258995056, -0.0011210116790607572, -0.010853071697056293, -0.35054853558540344, -0.3225492537021637, -0.29384759068489075, -0.005265178624540567, -0.09003473818302155, -0.0002708068350329995, -0.020990606397390366, -0.0013383012264966965, -0.6225605010986328, -0.0022113888990134, -0.04051348939538002, -0.0023186723701655865, -6.818538531661034e-05, -0.00026127262390218675, -0.0023902675602585077, -0.004085646942257881, -0.04592898115515709, -1.1801649634435307e-05, -0.021312037482857704, -1.9192511899746023e-05, -4.768370445162873e-07, -1.2874520507466514e-05, -0.0009148702956736088, -0.0023987111635506153, -0.06225990131497383, -0.0012400802224874496, -0.3790881335735321, -0.07761310040950775, -0.0033789940644055605, -0.06575745344161987, -1.7165990357170813e-05, -5.757642793469131e-05, -0.011382756754755974, -0.0022205475252121687, -0.10104287415742874, -0.015512637794017792, -0.05627889186143875, -0.0003077510336879641, -6.198863957251888e-06, -0.04153101146221161, -8.05822346592322e-05, -0.05417385324835777, -0.007100230548530817, -0.8991702198982239, -0.022635189816355705, -0.0027646913658827543, -1.8358061424805783e-05, -0.648363471031189, -0.005024900194257498, -1.736804723739624], "finish_reason": "stop"}], "metrics": {"energy": 461.3920824222563, "energy_per_token": 4.312075536656601, "time": 13.324168, "time_per_token": 0.12452493457943925}}
{"outputs": [{"text": "if 'UnicodeString' not in dataframe.columns:\n        raise KeyError(f'The column \"UnicodeString\" does not exist in the DataFrame')\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError('The input must be a Pandas DataFrame')\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n\n    return dataframe", "tokens": ["if", " '", "Un", "icode", "String", "'", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "f", "'", "The", " column", " \"", "Un", "icode", "String", "\"", " does", " not", " exist", " in", " the", " Data", "Frame", "')", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "('", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", "')", "\n", "\n", "    ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -1.9194414615631104, -0.00237171514891088, -6.9141146923357155e-06, -9.989239333663136e-05, -2.5987286790041253e-05, -0.059861838817596436, -1.5258672647178173e-05, -0.006883005611598492, -0.0002029928145930171, -0.11283320933580399, -0.002536058658733964, -0.002452225424349308, -0.004784564021974802, -0.006374502554535866, -0.012319541536271572, -0.010656828992068768, -4.410734163684538e-06, -0.4598056972026825, -1.8685334920883179, -1.140429973602295, -0.9503538012504578, -0.5904824733734131, -0.1077423170208931, -0.011162098497152328, -2.5152843591058627e-05, -0.00047064671525731683, -0.002026529749855399, -0.22015905380249023, -0.0010397987207397819, -0.007711285259574652, -0.0221395343542099, -0.03948645666241646, -0.36197808384895325, -0.0023035677149891853, -1.1069931983947754, -0.0020035686902701855, -0.8123179078102112, -0.38952264189720154, -0.15649251639842987, -0.004575853701680899, -0.00017629499780014157, -0.0008118432597257197, -1.4185804502631072e-05, -0.00847824290394783, -0.0016653967322781682, -8.22540732769994e-06, -0.0021347845904529095, -0.003131844801828265, -0.0007626485894434154, -0.0017432268941774964, -0.0016738465055823326, -0.0014704378554597497, -5.602820692729438e-06, -1.0454010963439941, -0.42794331908226013, -0.055479519069194794, -0.7750534415245056, -0.004416948650032282, -0.01626437157392502, -0.31252583861351013, -8.940656698541716e-06, -0.001784638618119061, -0.000704278820194304, -0.051998622715473175, -0.00037651124875992537, -0.5271611213684082, -0.000987756997346878, -0.621768057346344, -0.001998809864744544, -0.05373109504580498, -0.002394905546680093, -6.48477507638745e-05, -0.0005802616360597312, -0.0035776200238615274, -0.004866066388785839, -0.07484398037195206, -5.245195097813848e-06, -0.025530075654387474, -1.4185804502631072e-05, 0.0, -1.3589766240329482e-05, -0.0007960011716932058, -0.002566736191511154, -0.06986786425113678, -0.0015691122971475124, -0.362456351518631, -0.13331884145736694, -0.0024453280493617058, -0.0627245381474495, -1.0251946150674485e-05, -5.3165931603871286e-05, -0.009699123911559582, -0.0023072545882314444, -0.079224593937397, -0.012917883694171906, -0.054687634110450745, -0.0003359945258125663, -9.059865078597795e-06, -0.07875599712133408, -8.201262971851975e-05, -0.04702403396368027, -0.0064485324546694756, -1.0453145503997803, -0.0012272215681150556, -0.016138751059770584, -0.0035361635964363813, -9.536697689327411e-06, -0.8468450903892517, -7.152555099310121e-07, -1.0728830375228426e-06, -2.145764938177308e-06, -2.1576648578047752e-05, -0.15193979442119598], "finish_reason": "stop"}], "metrics": {"energy": 477.4952183837889, "energy_per_token": 4.188554547226218, "time": 13.304966, "time_per_token": 0.11671022807017545}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a pandas DataFrame\")\n\n    def decode_string(s):\n        # Use codecs module to handle both Python 2 and Python 3\n        # Use s.encode('utf-8') if you want to support Python 2\n        return s.decode('unicode_escape')\n\n    try:\n        dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(decode_string)\n    except KeyError:\n        raise KeyError('The DataFrame must contain a column named \"UnicodeString\"')\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " must", " be", " a", " pandas", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "def", " decode", "_", "string", "(", "s", "):", "\n", "        ", "#", " Use", " codec", "s", " module", " to", " handle", " both", " Python", " ", "2", " and", " Python", " ", "3", "\n", "        ", "#", " Use", " s", ".", "encode", "('", "utf", "-", "8", "')", " if", " you", " want", " to", " support", " Python", " ", "2", "\n", "        ", "return", " s", ".", "decode", "('", "un", "icode", "_", "escape", "')", "\n", "\n", "    ", "try", ":", "\n", "        ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "decode", "_", "string", ")", "\n", "    ", "except", " Key", "Error", ":", "\n", "        ", "raise", " Key", "Error", "('", "The", " Data", "Frame", " must", " contain", " a", " column", " named", " \"", "Un", "icode", "String", "\"", "')", "\n", "\n", "    ", "return", " data", "frame", "\n", "\n", "if"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -0.5809040069580078, -0.002403705846518278, -0.012877519242465496, -1.185874342918396, -0.006952380761504173, -0.0011519708205014467, -1.2119258642196655, -0.0003077510336879641, -0.0007813499541953206, -0.4443255662918091, -0.0007489498239010572, -3.805964946746826, -0.4131278395652771, -0.06182003766298294, -1.2241073846817017, -0.04462970048189163, -1.6040117740631104, -0.7409747242927551, -0.0032162151765078306, -0.005158092360943556, -2.807372570037842, -2.1163132190704346, -0.8158466815948486, -0.0043901256285607815, -1.7681066989898682, -0.0718441978096962, -3.187575340270996, -4.243229866027832, -0.6992070078849792, -0.14652882516384125, -0.027784571051597595, -0.023982198908925056, -0.5659387111663818, -0.0014215136179700494, -4.9470632802695036e-05, -0.29494553804397583, -0.0015334049239754677, -2.1295485496520996, -2.9691896438598633, -4.4213762283325195, -0.10339794307947159, -0.3602994680404663, -1.0339065790176392, -0.5124067068099976, -0.0638408437371254, -0.042002975940704346, -0.007416572421789169, -2.8206663131713867, -1.016278862953186, -1.8209624290466309, -0.12545782327651978, -2.622145652770996, -0.14086860418319702, -0.011598417535424232, -0.2215627282857895, -0.468513548374176, -0.003139450214803219, -0.38698557019233704, -2.6826331615448, -0.05576908588409424, -0.9577142000198364, -0.07672683149576187, -0.06758705526590347, -5.722029527532868e-06, -0.05796223506331444, -7.974783511599526e-05, -0.002198661444708705, -0.2234462946653366, -0.02514583058655262, -0.0006380429258570075, -1.7102859020233154, -0.00011526874004630372, -0.000673424918204546, -0.0021422787103801966, -0.487236350774765, -0.000709401210770011, -0.14931508898735046, -0.0026046657003462315, -1.9430925021879375e-05, -0.00025006983196362853, -0.0010877889581024647, -0.0035065847914665937, -0.008229040540754795, -8.583032467868179e-06, -0.010193077847361565, -8.821098163025454e-05, 0.0, -2.1934269170742482e-05, -0.0005801424849778414, -0.0008305437513627112, -0.030911868438124657, -6.8662193370983e-05, -0.0473218597471714, -9.333651541965082e-05, -0.00010954733443213627, -0.0008642514003440738, -0.0017688118387013674, -0.2134355753660202, -0.0005312938592396677, -0.0071138422936201096, -7.152555099310121e-07, -0.4070775806903839, -0.0016502822982147336, -0.00058466981863603, -0.054831862449645996, -0.025085147470235825, -1.1920922133867862e-06, -1.6812305450439453, -0.2847072184085846, -0.9136301279067993, -0.006292412057518959, -0.3662262260913849, -0.2061202973127365, -0.7298585176467896, -0.14033013582229614, -0.45273295044898987, -0.0053400020115077496, -0.0013946102699264884, -2.145764938177308e-06, -0.000634111522231251, -0.0013909199042245746, -0.1116618812084198, -0.01676388643682003, -0.1059691309928894, -0.0005637010326609015, -0.01865953393280506, -0.0018102225149050355, -9.65590606938349e-06, -0.6441894769668579, -0.006537242326885462, -0.9337188601493835], "finish_reason": "stop"}], "metrics": {"energy": 555.925180749893, "energy_per_token": 3.6816237135754504, "time": 13.022567, "time_per_token": 0.0862421655629139}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input data must be a Pandas DataFrame\")\n\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Column 'UnicodeString' not found in DataFrame\")\n\n    # Use the decode_unicode function to decode all Unicode escape strings\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(codecs.decode, args=((\"unicode_escape\",),))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " data", " must", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "Column", " '", "Un", "icode", "String", "'", " not", " found", " in", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Use", " the", " decode", "_", "un", "icode", " function", " to", " decode", " all", " Un", "icode", " escape", " strings", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "codec", "s", ".", "decode", ",", " args", "=", "((", "\"", "un", "icode", "_", "escape", "\"", ",", ")", ",", "))", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -0.8655566573143005, -1.3492258787155151, -0.8192294239997864, -0.001982629531994462, -0.03995503485202789, -0.5606184601783752, -2.7418097943154862e-06, -0.004546305630356073, -0.0043909563682973385, -0.7590776681900024, -0.0002466136065777391, -0.001086002797819674, -0.3572063744068146, -0.0007803970365785062, -0.83783358335495, -0.43249887228012085, -0.0010715939570218325, -3.933898824470816e-06, -0.00014590153296012431, -2.7894584491150454e-05, -0.012631764635443687, -5.245195097813848e-06, -0.009896853007376194, -3.4570634852570947e-06, -0.12183492630720139, -0.0006594866863451898, -0.0021685673855245113, -0.0012761552352458239, -0.0014405598631128669, -0.004060596227645874, -0.008959685452282429, -4.529942543740617e-06, -0.03857926279306412, -0.10267388820648193, -1.2630714178085327, -0.11204839497804642, -0.004873065743595362, -1.7881233361549675e-05, -0.00045372682507149875, -0.0006810491322539747, -0.9482001662254333, -0.09092344343662262, -0.020889626815915108, -1.3207571506500244, -0.0015520919114351273, -0.06102990731596947, -0.0001656871900195256, -9.643566590966657e-05, -0.0154235465452075, -0.001134943449869752, -1.690598726272583, -2.2258949279785156, -0.8898893594741821, -3.1999659538269043, -0.9062739014625549, -1.3399089574813843, -0.0021870045457035303, -1.7715630531311035, -0.1921069324016571, -0.19562409818172455, -1.4592819213867188, -0.3090125024318695, -0.0004737447015941143, -0.15682640671730042, -0.01609276793897152, -1.7284464836120605, -0.002402041107416153, -0.3904918134212494, -0.0007992172613739967, -0.07566030323505402, -0.0001820160250645131, -0.0038956718053668737, -2.9444261599564925e-05, -0.0004686211177613586, -0.0013823487097397447, -0.00033063191222026944, -0.0019282572902739048, -0.02883388102054596, -1.6689160474925302e-05, -0.004480917472392321, -0.009517415426671505, -1.9550132492440753e-05, -2.3841855067985307e-07, -5.8410845667822286e-05, -4.172316494077677e-06, -0.0006380429258570075, -0.002794054336845875, -0.027915114536881447, -0.002380991354584694, -2.9951984882354736, -0.00012146688823122531, -0.00018320789968129247, -0.001506028464064002, -0.056956689804792404, -0.002978890435770154, -0.7809704542160034, -0.6697271466255188, -0.008367953822016716, -0.004690003115683794, -7.152531907195225e-06, -0.05798439681529999, -1.8358061424805783e-05, -3.1709168979432434e-05, -0.0982370525598526, -0.4599486291408539, -8.284702198579907e-05, -0.012022885493934155, -0.004322946537286043, -1.5843424797058105, -0.03550327196717262, -0.0024479443673044443, -2.1457441107486375e-05, -0.6464241147041321, -0.007194682024419308, -1.4438292980194092], "finish_reason": "stop"}], "metrics": {"energy": 536.3208817615508, "energy_per_token": 4.032487832793615, "time": 15.207886, "time_per_token": 0.11434500751879699}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input is not a Pandas DataFrame.\")\n\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' does not exist in the given DataFrame.\")\n\n    # Function to decode Unicode escape strings using codecs\n    def decode_unicode(s):\n        return codecs.decode(s, 'unicode_escape')\n\n    # Apply the decoding function on the \"UnicodeString\" column\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(decode_unicode)\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " is", " not", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " given", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Function", " to", " decode", " Un", "icode", " escape", " strings", " using", " codec", "s", "\n", "    ", "def", " decode", "_", "un", "icode", "(", "s", "):", "\n", "        ", "return", " codec", "s", ".", "decode", "(", "s", ",", " '", "un", "icode", "_", "escape", "')", "\n", "\n", "    ", "#", " Apply", " the", " decoding", " function", " on", " the", " \"", "Un", "icode", "String", "\"", " column", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "decode", "_", "un", "icode", ")", "\n", "\n", "    ", "return", " data", "frame"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -2.2719478607177734, -0.006506567820906639, -0.008730101399123669, -0.3296242654323578, -2.264974000354414e-06, -0.001116486731916666, -0.0013185387942939997, -0.3122575283050537, -0.03220784291625023, -0.0003532739356160164, -0.0014490114990621805, -0.41664373874664307, -0.0005086558521725237, -0.9766482710838318, -0.40365347266197205, -0.0012468667700886726, -4.291525328881107e-06, -0.00012718822108581662, -3.0636318115284666e-05, -0.012192245572805405, -5.245195097813848e-06, -0.009971920400857925, -2.50339189733495e-06, -0.1139150932431221, -0.0006550788530148566, -0.0017363247461616993, -0.0008734225411899388, -0.0010619483655318618, -0.0030017101671546698, -0.006285541690886021, -3.3378546504536644e-06, -0.04755900800228119, -0.09021306782960892, -0.13982629776000977, -0.38988298177719116, -0.1340559720993042, -0.0015927974600344896, -1.6689160474925302e-05, -0.0003524397616274655, -0.001167092937976122, -0.055449068546295166, -0.00019643761334009469, -0.0015726829878985882, -0.017494533210992813, -0.007391604594886303, -2.4526844024658203, -0.058389630168676376, -0.004766886122524738, -0.03680825233459473, -0.006337663624435663, -0.00047541281674057245, -0.00013445904187392443, -0.019526051357388496, -0.0010796914575621486, -1.8745840787887573, -3.9531021118164062, -0.4353259205818176, -0.23621906340122223, -1.058810830116272, -0.0031241201795637608, -0.27383026480674744, -0.2508189082145691, -2.1246564388275146, -0.389521986246109, -0.002518222201615572, -0.9761078357696533, -0.003180447733029723, -0.13024942576885223, -0.15294471383094788, -0.02832089364528656, -0.7818745970726013, -0.0058988058008253574, -1.592832326889038, -1.696401834487915, -0.3479638695716858, -0.0013444918440654874, -0.001973587553948164, -0.2890230119228363, -0.05023457109928131, -2.3841855067985307e-07, -9.775113539944869e-06, -0.03883844614028931, -0.0003516055876389146, -0.050072215497493744, -0.03492727503180504, -0.9345796704292297, -0.00011264643399044871, -1.6689286894688848e-06, -0.0034454050473868847, -2.1457441107486375e-05, -0.004414812196046114, -0.030856041237711906, -0.005256047938019037, -0.0004471732536330819, -0.19925200939178467, -0.20159712433815002, -0.08679501712322235, -0.297637015581131, -0.01876506581902504, -3.0374279022216797, -0.19819286465644836, -0.7860797047615051, -0.003259585704654455, -0.00020787939138244838, -0.0014838885981589556, -0.0002814135223161429, -0.0023474537301808596, -0.16143590211868286, -0.00020382710499688983, -0.018892932683229446, -8.821098163025454e-05, -0.10600773245096207, -5.23315102327615e-05, -0.0021251493599265814, -1.0490362910786644e-05, -0.000336590368533507, -0.001420323271304369, -0.00017915551143232733, -0.0016546857077628374, -0.0006870055221952498, -4.768370445162873e-07, -0.0036466307938098907, -0.0002890407631639391, -1.3112935448589269e-05, -1.1920928244535389e-07, -1.9311717551317997e-05, -2.145764938177308e-06, -1.645074735279195e-05, -0.00019691436318680644, -0.015533178113400936, -1.7404405298293568e-05, -0.03075050376355648, -2.288792165927589e-05, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.0006125480867922306, -0.0005728749092668295, -0.2130585014820099, -0.0003296785580459982, -0.09357800334692001, -0.0014704378554597497, -4.410734163684538e-06], "finish_reason": "stop"}], "metrics": {"energy": 633.8255930404664, "energy_per_token": 3.91250366074362, "time": 17.74671, "time_per_token": 0.1095475925925926}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a Pandas DataFrame.\")\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "\n", "\n", "if"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -0.5809040069580078, -0.002403705846518278, -0.012877519242465496, -0.4778684675693512, -3.933898824470816e-06, -0.0021892646327614784, -0.002295717829838395, -0.33469390869140625, -0.004291017074137926, -0.00043156370520591736, -0.0006071869283914566, -1.1257996559143066, -2.9764583110809326, -0.007367228157818317, -1.1078441143035889, -0.001730612595565617, -0.007607891224324703, -5.07818695041351e-05, -0.0008080316474661231, -0.0013959197094663978, -0.000992997083812952, -0.003225127002224326, -0.09565898776054382, -1.847726889536716e-05, -0.026115110144019127, -0.004114971030503511, -0.00015948931104503572, -2.3841855067985307e-07, -6.925819616299123e-05, -1.0490362910786644e-05, -0.0008773530134931207, -0.001890659099444747, -0.10390746593475342, -0.0021820086985826492, -0.5039489269256592, -0.09235801547765732, -0.003153829136863351, -0.030979827046394348, -1.9311717551317997e-05, -4.970903682988137e-05, -0.007958251982927322, -0.0014366315444931388, -0.05965106189250946, -0.0130317909643054, -1.5124316215515137, -0.0002324311062693596, -7.152531907195225e-06, -0.0698210671544075, -0.00010573305189609528, -0.035396039485931396, -0.008566418662667274, -0.017760878428816795, -0.011991319246590137, -0.0027563695330172777, -1.8715683836489916e-05, -0.6623777747154236, -0.008547743782401085, -0.8346661329269409], "finish_reason": "stop"}], "metrics": {"energy": 347.34010310745253, "energy_per_token": 4.45307824496734, "time": 10.997436, "time_per_token": 0.14099276923076923}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a Pandas DataFrame.\")\n    try:\n        decoded_strings = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n        dataframe['UnicodeString'] = decoded_strings\n        return dataframe\n    except KeyError as e:\n        raise KeyError(\"The column 'UnicodeString' does not exist in the DataFrame.\") from e", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "    ", "try", ":", "\n", "        ", "dec", "oded", "_", "strings", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "        ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " dec", "oded", "_", "strings", "\n", "        ", "return", " data", "frame", "\n", "    ", "except", " Key", "Error", " as", " e", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", " from", " e", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -0.5809040069580078, -0.002403705846518278, -0.012877519242465496, -0.4778684675693512, -3.933898824470816e-06, -0.0021892646327614784, -0.002295717829838395, -0.33469390869140625, -0.004291017074137926, -0.00043156370520591736, -0.0006071869283914566, -1.1257996559143066, -1.1939189434051514, -0.0002616301644593477, -0.0010128850117325783, -0.003098807530477643, -2.9457738399505615, -0.009406650438904762, -0.08073146641254425, -0.41755276918411255, -0.035457249730825424, -0.4924888014793396, -5.4238757002167404e-05, -0.6875156164169312, -0.0005202132160775363, -5.364403477869928e-06, -0.00011705666838679463, -0.00033098942367359996, -0.002065312582999468, -0.06260126084089279, -0.0008071978809311986, -0.25494682788848877, -0.0872001051902771, -0.0024757706560194492, -0.05235786736011505, -3.814689989667386e-06, -4.0411134250462055e-05, -0.009054906666278839, -0.0008738989708945155, -0.1524631679058075, -0.025602120906114578, -0.07333596795797348, -0.0001820160250645131, -8.821448318485636e-06, -0.05397282913327217, -0.00010466027742950246, -0.030157534405589104, -0.006642286200076342, -0.07350654900074005, -0.01650184765458107, -6.818538531661034e-05, -0.013282976113259792, -0.003012406872585416, -2.5152843591058627e-05, -0.0005455912905745208, -0.0017074067145586014, -0.0006586528033949435, -0.001262939884327352, -1.1920928244535389e-07, -5.364403477869928e-06, -2.861018856492592e-06, -0.006689061410725117, -0.7328065037727356, -0.018017318099737167, -0.0018960132729262114, -3.6954811548639555e-06, -0.0046614077873528, -0.002969144145026803, -0.0007247682078741491, -0.005438887979835272, -3.576278118089249e-07, -0.8989595770835876, -0.3484570384025574, -0.0004673104267567396, -0.0026529375463724136, -0.0009646529797464609, -0.12136022001504898, -0.24304638803005219, -7.152555099310121e-07, -0.04141904413700104, -0.4508779048919678, -0.12235064804553986, -0.5011070370674133, -0.03407861292362213, -0.0027492367662489414, -1.597391747054644e-05, -0.0004207202873658389, -0.0004748170613311231, -0.09524159878492355, -0.00013076403411105275, -0.0008644896443001926, -0.01622883416712284, -0.0025692330673336983, -0.17180629074573517, -0.0006098079611547291, -0.021336309611797333, -0.010175849311053753, -0.0014177043922245502, -0.019934315234422684, -0.0004592079494614154, -1.3460092544555664, -1.1920922133867862e-06, -7.152555099310121e-07, -3.6954811548639555e-06, -3.0397906812140718e-05, -0.15404826402664185], "finish_reason": "stop"}], "metrics": {"energy": 530.0959207553865, "energy_per_token": 4.207110482185607, "time": 15.578215, "time_per_token": 0.12363662698412699}}
{"outputs": [{"text": "try:\n        dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(\n            lambda x: codecs.decode(x, 'unicode_escape')\n        )\n\n        return dataframe\n\n    except KeyError:\n        print('Input DataFrame does not contain \"UnicodeString\" column')\n    except TypeError:\n        print('Input data is not DataFrame')", "tokens": ["try", ":", "\n", "        ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "\n", "            ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "')", "\n", "        ", ")", "\n", "\n", "        ", "return", " data", "frame", "\n", "\n", "    ", "except", " Key", "Error", ":", "\n", "        ", "print", "('", "Input", " Data", "Frame", " does", " not", " contain", " \"", "Un", "icode", "String", "\"", " column", "')", "\n", "    ", "except", " Type", "Error", ":", "\n", "        ", "print", "('", "Input", " data", " is", " not", " Data", "Frame", "')", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.137291431427002, -0.0002531684876885265, -0.0025379611179232597, -0.01710578054189682, -1.9080671072006226, -0.017611317336559296, -0.47931715846061707, -0.0051649706438183784, -8.594620157964528e-05, -0.0006563892820850015, -0.004487681668251753, -0.01115372870117426, -0.09310239553451538, -1.0490362910786644e-05, -0.04510670155286789, -8.046303264563903e-05, -1.1920928244535389e-07, -3.313963316031732e-05, -0.002037236699834466, -0.0015414986992254853, -0.053552016615867615, -0.001682177186012268, -1.297405481338501, -0.021274695172905922, -0.01525942888110876, -0.15599174797534943, -0.0012463905150070786, -0.08750531822443008, -7.629365427419543e-06, -3.8265450712060556e-05, -0.01360171940177679, -0.0019231411861255765, -0.09258309751749039, -0.019479289650917053, -0.07527262717485428, -0.00014149141497910023, -7.271740287251305e-06, -0.07983177900314331, -0.00018463814922142774, -0.5016524195671082, -0.1715192198753357, -0.04918434098362923, -0.0001616347290109843, -0.004083866253495216, -2.825511932373047, -0.39267653226852417, -0.06534145772457123, -0.0076450384221971035, -1.2397689715726301e-05, -0.01694721356034279, -0.6259365677833557, -0.00046850196667946875, -0.009932027198374271, -0.10313722491264343, -1.1324817933200393e-05, -0.7288697957992554, -0.004237126559019089, -0.0016987192211672664, -0.4328504502773285, -0.7046186327934265, -3.887258529663086, -0.32049232721328735, -0.025805095210671425, -0.5906422734260559, -0.0029147067107260227, -0.3170158565044403, -2.8934104442596436, -0.006018610205501318, -0.00037555795279331505, -0.0020428281277418137, -0.001745368936099112, -0.041216928511857986, -0.5471760034561157, -0.018144575878977776, -1.2904319763183594, -0.0009091534884646535, -0.11469908058643341, -1.1920858014491387e-05, -0.025005392730236053, -0.00043525759247131646, -0.0004159538948442787, -0.012704391032457352, -0.08014947921037674, -0.32244622707366943, -2.2747139930725098, -0.2804751992225647, -0.01719987764954567, -3.097940444946289, -0.009762047789990902, -0.10571584105491638, -0.9358953833580017, -8.344646857949556e-07, -1.9073468138230965e-06, -2.622600959512056e-06, -3.0636318115284666e-05, -0.11959147453308105], "finish_reason": "stop"}], "metrics": {"energy": 422.6179509754183, "energy_per_token": 4.402270322660607, "time": 13.054388, "time_per_token": 0.13598320833333333}}
{"outputs": [{"text": "if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Column 'UnicodeString' does not exist in the DataFrame.\")\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame.\")\n\n    # Decode the Unicode escape strings\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, \"unicode_escape\"))\n\n    return dataframe", "tokens": ["if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "Column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Dec", "ode", " the", " Un", "icode", " escape", " strings", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", "))", "\n", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -2.1684153079986572, -0.0017185931792482734, -9.179073458653875e-06, -0.00021526881027966738, -4.172238186583854e-05, -0.04025141894817352, -1.823885577323381e-05, -0.010232017375528812, -0.00017808281700126827, -0.15777522325515747, -0.005130814854055643, -0.004184775985777378, -0.003402161179110408, -0.005726361181586981, -0.015293005853891373, -0.012101680971682072, -6.318072337307967e-06, -0.06135767325758934, -0.12806884944438934, -1.7260005474090576, -0.2521452009677887, -0.0033702023793011904, -8.892617915989831e-05, -0.00029237763374112546, -0.0010194348869845271, -0.5557963848114014, -0.0013054428854957223, -0.00607050908729434, -0.06326091289520264, -0.10484909266233444, -0.45586270093917847, -0.0032181162387132645, -0.7429081201553345, -0.011639894917607307, -0.0009508379152975976, -0.0006696127820760012, -0.723235547542572, -0.3551826775074005, -0.06619826704263687, -0.002742817159742117, -7.879423355916515e-05, -0.0004741021548397839, -1.7881377516459906e-06, -0.008820735849440098, -0.0010319390567019582, -4.291525328881107e-06, -0.001157567254267633, -0.0018374717328697443, -0.000847814604640007, -0.0011636398267000914, -0.00116637849714607, -0.001058137626387179, -3.099436753473128e-06, -0.005275377072393894, -0.023724140599370003, -0.3557449281215668, -0.8098125457763672, -0.00039009589818306267, -0.007479520980268717, -0.26431506872177124, -2.3841830625315197e-06, -0.000910106289666146, -0.0006079017766751349, -0.06611458212137222, -0.0008057684754021466, -0.0002444683632347733, -0.00021598390594590455, -0.41152146458625793, -0.0010043105576187372, -1.6222069263458252, -1.0896387100219727, -0.16548146307468414, -1.4524877071380615, -0.18522904813289642, -0.0005054388311691582, -0.47051453590393066, -0.2041628658771515, -1.3861823081970215, -0.001328896265476942, -0.189004048705101, -0.000979658798314631, -0.2748768627643585, -0.00021240839851088822, -0.002096480457112193, -2.95634672511369e-05, -0.000715714821126312, -0.0014296083245426416, -0.0003026265767402947, -0.0024597172159701586, -0.06345168501138687, -6.794906312279636e-06, -0.004212435334920883, -0.0073965745978057384, -1.811964830267243e-05, -4.768370445162873e-07, -2.4914430468925275e-05, -3.814689989667386e-06, -0.0006469779182225466, -0.0029572586063295603, -0.08042791485786438, -0.0005224770284257829, -0.7330195307731628, -0.05489415302872658, -0.0016837242292240262, -0.0422208197414875, -6.794906312279636e-06, -2.3007127310847864e-05, -0.02118506468832493, -0.000636255950666964, -0.03010166622698307, -0.007618302013725042, -0.23881712555885315, -0.00022957073815632612, -5.006777428206988e-06, -0.012833739630877972, -2.932505594799295e-05, -1.1324817933200393e-05, -0.02834186889231205, -0.001768454909324646, -0.3706718385219574, -0.0005253365379758179, -0.10167744755744934, -0.0026280886959284544, -5.245195097813848e-06, -0.8292205929756165, -9.536738616588991e-07, -1.0728830375228426e-06, -1.9073468138230965e-06, -3.0040289857424796e-05, -0.21179312467575073], "finish_reason": "stop"}], "metrics": {"energy": 549.8418335599898, "energy_per_token": 4.1972659050380905, "time": 16.20181, "time_per_token": 0.12367793893129769}}
{"outputs": [{"text": "if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' must exist in the DataFrame.\")\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a Pandas DataFrame.\")\n\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(\n        lambda x: codecs.decode(x, \"unicode_escape\")\n    )\n\n    return dataframe", "tokens": ["if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " must", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "    ", ")", "\n", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -2.1684153079986572, -0.0017185931792482734, -9.179073458653875e-06, -0.00021526881027966738, -4.172238186583854e-05, -0.04025141894817352, -1.823885577323381e-05, -0.010232017375528812, -0.00017808281700126827, -0.15777522325515747, -0.005130814854055643, -0.004184775985777378, -0.003402161179110408, -0.005726361181586981, -0.015293005853891373, -0.012101680971682072, -6.318072337307967e-06, -0.06135767325758934, -0.12806884944438934, -0.597790539264679, -0.660803496837616, -0.3352820575237274, -0.002729383297264576, -3.6000557884108275e-05, -0.00038413776201196015, -0.0015063855098560452, -2.8147454261779785, -0.16393978893756866, -0.061284348368644714, -0.023868950083851814, -0.6633253693580627, -0.005824498366564512, -0.432213693857193, -0.008323267102241516, -0.0006132629350759089, -0.0010901705827564, -0.8518864512443542, -0.3578709661960602, -0.09520377218723297, -0.0028156896587461233, -9.369411418447271e-05, -0.0004440752090886235, -3.576272320060525e-06, -0.00672032218426466, -0.0011104138102382421, -5.602820692729438e-06, -0.001001809723675251, -0.002145014703273773, -0.000894027529284358, -0.0013368725776672363, -0.0016395710408687592, -0.0014793653972446918, -3.6954811548639555e-06, -0.008505665697157383, -0.024746784940361977, -0.41171127557754517, -0.10432125627994537, -0.25726044178009033, -0.001561970915645361, -0.008580010384321213, -0.31806680560112, -7.748573807475623e-06, -0.0014023480471223593, -0.0009291622554883361, -0.06758338212966919, -0.0007628867751918733, -0.00020621081057470292, -0.0003493413969408721, -0.4244549572467804, -0.0008108903421089053, -0.629076361656189, -0.002023079665377736, -0.14634862542152405, -0.000479344860650599, -0.001963593764230609, -2.4914430468925275e-05, -0.0009514334378764033, -0.0015861323336139321, -0.000635183765552938, -0.0039854394271969795, -0.09217464178800583, -1.2874520507466514e-05, -0.00856157299131155, -0.008684603497385979, -2.634490556374658e-05, 0.0, -1.9192511899746023e-05, -3.6954811548639555e-06, -0.001352706109173596, -0.0032895284239202738, -0.11194287985563278, -0.0015957729192450643, -1.0509729385375977, -0.007153375539928675, -0.018289728090167046, -0.23421230912208557, -0.0006106419023126364, -0.09302821010351181, -1.0967194612021558e-05, -1.823885577323381e-05, -0.008962639607489109, -0.0009912106906995177, -0.06755006313323975, -0.012678731232881546, -0.04952724277973175, -0.0001734344696160406, -3.4570634852570947e-06, -0.09344696253538132, -5.495397272170521e-05, -1.0132738680113107e-05, -0.02627130225300789, -0.11153905838727951, -0.009444203227758408, -8.83301836438477e-05, -0.0022293494548648596, -0.8147561550140381, -0.0007109498255886137, -0.013336969539523125, -0.0017723818309605122, -3.4570634852570947e-06, -1.0119655132293701, -0.0034303173888474703, -1.1247855424880981], "finish_reason": "stop"}], "metrics": {"energy": 433.7697236137392, "energy_per_token": 3.4981429323688644, "time": 10.724598, "time_per_token": 0.0864886935483871}}
{"outputs": [{"text": "# Check if input is a Pandas DataFrame\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame.\")\n\n    # Check if the column \"UnicodeString\" exists in the DataFrame\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' does not exist in the given DataFrame.\")\n\n    # Decode Unicode escape strings in the \"UnicodeString\" column\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, \"unicode_escape\"))\n\n    # Return the DataFrame with decoded strings in the \"UnicodeString\" column\n    return dataframe", "tokens": ["#", " Check", " if", " input", " is", " a", " Pand", "as", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " column", " \"", "Un", "icode", "String", "\"", " exists", " in", " the", " Data", "Frame", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " given", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Dec", "ode", " Un", "icode", " escape", " strings", " in", " the", " \"", "Un", "icode", "String", "\"", " column", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", "))", "\n", "\n", "    ", "#", " Return", " the", " Data", "Frame", " with", " dec", "oded", " strings", " in", " the", " \"", "Un", "icode", "String", "\"", " column", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.8339648246765137, -0.46814417839050293, -0.6018247008323669, -2.167168378829956, -0.15974563360214233, -0.14538447558879852, -0.9638593792915344, -5.722029527532868e-06, -0.0024694681633263826, -0.0025116822216659784, -0.14507807791233063, -0.0012132910778746009, -0.009520839899778366, -0.01294789183884859, -0.0032928551081568003, -5.1020273531321436e-05, -0.0003883084573317319, -7.92710343375802e-05, -8.582700684200972e-05, -0.0008187517523765564, -1.0967194612021558e-05, -0.0015706595731899142, -0.0014940063701942563, -0.0007033258443698287, -0.0018124834168702364, -0.010216795839369297, -0.0017541749402880669, -2.50339189733495e-06, -0.18761426210403442, -0.05076749250292778, -0.2660287916660309, -0.3138945996761322, -0.00044264530879445374, -0.005026679486036301, -0.2992958724498749, -9.536738616588991e-07, -0.0010702840518206358, -0.0008039817912504077, -0.8243160843849182, -0.004070331808179617, -0.000284154579276219, -0.00021753329201601446, -0.09056831896305084, -0.0015485212206840515, -0.02518698200583458, -0.0787908136844635, -0.016710076481103897, -0.7463690638542175, -0.5143294930458069, -0.20844590663909912, -0.010137969627976418, -0.00030429501202888787, -0.0008336406317539513, -0.0005756151513196528, -0.025108397006988525, -0.19410379230976105, -0.002753873122856021, -0.04806528985500336, -0.0012429377529770136, -0.018306933343410492, -0.00012063252506777644, -0.019128264859318733, -0.12111227214336395, -0.00011193125828867778, -2.0265558760002023e-06, -7.497983460780233e-05, -1.0371154530730564e-05, -0.0023304466158151627, -7.510157047363464e-06, -0.0043901256285607815, -1.9073468138230965e-06, -0.07941972464323044, -0.0004236992390360683, -0.001111961784772575, -0.00021801002731081098, -0.000756216119043529, -0.001279846066609025, -0.0037585110403597355, -9.536738616588991e-07, -0.09286928921937943, -0.01930566318333149, -1.128127098083496, -0.310177743434906, -0.04054783284664154, -0.0009578645695000887, -8.583032467868179e-06, -0.0002562671434134245, -0.0007524043321609497, -0.07155492156744003, -0.00017915551143232733, -0.0009222545195370913, -0.018341930583119392, -0.003744021989405155, -2.3156511783599854, -0.0414586178958416, -0.0022077015601098537, -0.014308121055364609, -0.00502857705578208, -0.0004646890447475016, -4.7205765440594405e-05, -0.005662472452968359, -0.0011174393584951758, -0.05122005566954613, -0.9035773277282715, -0.03577728569507599, -1.606623888015747, -0.0009575072908774018, -0.11183735728263855, -0.058342739939689636, -0.5720294117927551, -0.13409380614757538, -0.4216705560684204, -0.0008848565630614758, -6.711257447022945e-05, -0.0004170263418927789, -0.0003256267518736422, -0.0012323412811383605, -0.4345369040966034, -0.0016709902556613088, -0.1522473841905594, -0.00019500737835187465, -0.0660414919257164, -0.0001578206429257989, -0.0009171332349069417, -3.2186455882765586e-06, -0.00039843725971877575, -0.0005316513124853373, -0.0002849888114724308, -0.001649092067964375, -0.03869808092713356, -5.8412379075889476e-06, -0.0027877537067979574, -0.0016352864913642406, -1.2755313036905136e-05, -3.576278118089249e-07, -4.1960789531003684e-05, -2.9802276912960224e-06, -0.0005489272880367935, -0.0014987675240263343, -0.06028101593255997, -0.0005931286723352969, -0.284236878156662, -0.035558611154556274, -0.0013762774178758264, -0.03931271657347679, -3.4570634852570947e-06, -1.7404405298293568e-05, -0.03375791758298874, -0.0006665153778158128, -0.033299800008535385, -0.006923494394868612, -0.33382943272590637, -0.0002196785935666412, -5.8412379075889476e-06, -0.02039450593292713, -5.1020273531321436e-05, -1.7762025890988298e-05, -0.033588021993637085, -0.00125698687043041, -0.06626030057668686, -0.0006211258587427437, -1.7839080095291138, -0.11699742823839188, -0.07619575411081314, -1.872131586074829, -0.0020552005153149366, -0.14438162744045258, -0.034095779061317444, -0.0001284993631998077, -0.049548570066690445, -0.6955682039260864, -0.007545068860054016, -0.004569326993077993, -0.0004596845537889749, -1.6689286894688848e-06, -0.00038652101648040116, -8.391981828026474e-05, -0.0005367745761759579, -0.006084253545850515, -0.00048268112004734576, -0.00349660636857152, -0.0020499660167843103, -1.4781842764932662e-05, -0.9751791954040527, -3.2186455882765586e-06, -1.5497195136049413e-06, -1.9073468138230965e-06, -4.732496745418757e-05, -0.13819438219070435], "finish_reason": "stop"}], "metrics": {"energy": 757.9434636201855, "energy_per_token": 4.0102828762972775, "time": 21.458572, "time_per_token": 0.113537417989418}}
{"outputs": [{"text": "if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Input DataFrame should contain the column 'UnicodeString'\")\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input data should be a DataFrame\")\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "Input", " Data", "Frame", " should", " contain", " the", " column", " '", "Un", "icode", "String", "'", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " data", " should", " be", " a", " Data", "Frame", "\"", ")", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -2.1684153079986572, -0.0017185931792482734, -9.179073458653875e-06, -0.00021526881027966738, -4.172238186583854e-05, -0.04025141894817352, -1.823885577323381e-05, -0.010232017375528812, -0.00017808281700126827, -0.15777522325515747, -0.005130814854055643, -0.004184775985777378, -0.003402161179110408, -0.005726361181586981, -0.015293005853891373, -0.012101680971682072, -6.318072337307967e-06, -0.06135767325758934, -0.12806884944438934, -3.3844878673553467, -0.2901522219181061, -0.01841706782579422, -2.914553642272949, -0.22799673676490784, -1.0139708518981934, -0.24115192890167236, -0.34223848581314087, -0.0025800534058362246, -3.766942609217949e-05, -0.00042906138696707785, -0.006584851071238518, -0.48369094729423523, -0.0006478118011727929, -0.0012732979375869036, -0.5261309146881104, -0.3011055588722229, -0.11592291295528412, -0.0031802100129425526, -0.00010239553375868127, -0.000601349223870784, -3.576272320060525e-06, -0.010134783573448658, -0.0017840436194092035, -6.318072337307967e-06, -0.0013867533998563886, -0.002137520583346486, -0.0007649118197150528, -0.0013533014571294188, -0.0018573428969830275, -0.0014178233686834574, -5.8412379075889476e-06, -0.016897516325116158, -0.03342951089143753, -0.16157719492912292, -2.1468234062194824, -0.5176658034324646, -0.010175849311053753, -0.1537245661020279, -2.3524935245513916, -0.01476973481476307, -0.08181511610746384, -0.00021205084340181202, -0.00038580605178140104, -0.8663749694824219, -0.47653111815452576, -0.004034475889056921, -0.18754054605960846, -0.0007155956700444221, -0.0017144280718639493, -2.6464111215318553e-05, -0.0007528808200731874, -0.0011442311806604266, -0.0012748456792905927, -0.006826531141996384, -0.09519878774881363, -3.957670196541585e-05, -0.012977546080946922, -0.010109294205904007, -4.088794958079234e-05, 0.0, -2.7417760065873154e-05, -7.033323527139146e-06, -0.0016887226374819875, -0.0026846816763281822, -0.12856636941432953, -0.0018305702833458781, -0.45377659797668457, -0.1447238326072693, -0.004101674538105726, -0.04929237440228462, -1.156323378381785e-05, -4.732496745418757e-05, -0.008975871838629246, -0.0014142522122710943, -0.0445525161921978, -0.007919342257082462, -1.4209117889404297, -0.0001308832288486883, -6.198863957251888e-06, -0.05983152240514755, -6.41325386823155e-05, -0.04331982508301735, -0.007848733104765415, -0.030961912125349045, -0.011329364962875843, -0.0030573313124477863, -1.2159273865108844e-05, -0.959771454334259, -0.008119196631014347, -1.0474846363067627], "finish_reason": "stop"}], "metrics": {"energy": 450.3444875726701, "energy_per_token": 4.057157545699731, "time": 12.086312, "time_per_token": 0.10888569369369369}}
{"outputs": [{"text": "try:\n        if isinstance(dataframe, pd.DataFrame):\n            dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(\n                lambda s: codecs.decode(s, 'unicode_escape')\n            )\n            return dataframe\n        else:\n            raise TypeError(\"Input data is not a Pandas DataFrame.\")\n    except KeyError as e:\n        raise e\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return dataframe", "tokens": ["try", ":", "\n", "        ", "if", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "            ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "\n", "                ", "lambda", " s", ":", " codec", "s", ".", "decode", "(", "s", ",", " '", "un", "icode", "_", "escape", "')", "\n", "            ", ")", "\n", "            ", "return", " data", "frame", "\n", "        ", "else", ":", "\n", "            ", "raise", " Type", "Error", "(", "\"", "Input", " data", " is", " not", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "    ", "except", " Key", "Error", " as", " e", ":", "\n", "        ", "raise", " e", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "Error", ":", " {", "e", "}\"", ")", "\n", "        ", "return", " data", "frame"], "logprobs": [-2.137291431427002, -0.0002531684876885265, -0.0025379611179232597, -0.01710578054189682, -1.0443538427352905, -1.8268120288848877, -0.00012611546844709665, -0.001178999780677259, -0.00025948495022021234, -0.0032269093208014965, -0.0020007132552564144, -1.9430925021879375e-05, -0.001858056872151792, -0.07914651185274124, -0.007757063489407301, -0.02236163057386875, -1.004961371421814, -0.007681711111217737, -0.4072909951210022, -0.00807189755141735, -0.00010764019680209458, -0.0004439560289029032, -0.0029570208862423897, -0.006333991419523954, -0.08414242416620255, -1.4662635294371285e-05, -0.0474313460290432, -3.349725011503324e-05, 0.0, -1.3112935448589269e-05, -0.0015574480639770627, -0.0015335239004343748, -0.07421671599149704, -0.001532214693725109, -1.3676923513412476, -0.012624231167137623, -0.030223000794649124, -2.6439576148986816, -0.0015281677478924394, -0.08541975170373917, -1.7165990357170813e-05, -3.3854863431770355e-05, -0.008910417556762695, -0.002063646912574768, -0.05705983564257622, -0.029840786010026932, -0.05435485020279884, -0.00011836781777674332, -4.529942543740617e-06, -0.07401547580957413, -0.00017450717859901488, -0.4461749494075775, -0.4041392505168915, -0.07264024764299393, -0.00013767725613433868, -0.0031264969147741795, -0.20600350201129913, -0.019737625494599342, -0.006208182778209448, -3.814689989667386e-06, -0.01829558052122593, -0.0641326978802681, -0.08669904619455338, -2.1934269170742482e-05, -0.0006711614551022649, -0.0005266471416689456, -0.01858055219054222, -0.01612655073404312, -4.410734163684538e-06, -0.5436734557151794, -0.14351235330104828, -0.8127509355545044, -1.4540259838104248, -0.9111984968185425, -0.013390842825174332, -0.05474349856376648, -0.7457556128501892, -4.410734163684538e-06, -0.0073039173148572445, -0.0037899825256317854, -0.6844155192375183, -0.023712383583188057, -0.00045110538485459983, -0.0011787617113441229, -0.050715140998363495, -0.00024089295766316354, -0.06777433305978775, -4.768370445162873e-07, -0.710207462310791, -0.5693078637123108, -0.00379116996191442, -0.0025138226337730885, -0.001520311925560236, -0.4917926788330078, -0.9103246331214905, -0.16217803955078125, -0.2575879395008087, -0.02117934636771679, -0.21530325710773468, -0.010376551188528538, -0.02030024118721485, -0.0023847969714552164, -0.000860201776959002, -0.0005561950383707881, -1.8824923038482666, -0.009305438958108425, -0.4822983145713806, -0.023791775107383728, -1.5824722051620483, -0.3812033534049988, -0.03635969012975693, -0.2837769687175751, -0.009891423396766186, -0.17787794768810272, -0.19990767538547516, -0.7537240982055664, -1.0818431377410889, -0.7908104062080383, -5.3165931603871286e-05], "finish_reason": "stop"}], "metrics": {"energy": 516.8504309692385, "energy_per_token": 4.343280932514609, "time": 15.134588, "time_per_token": 0.12718141176470588}}
{"outputs": [{"text": "if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' does not exist in the input DataFrame.\")\n\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input is not a Pandas DataFrame.\")\n\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, \"unicode-escape\"))\n\n    return dataframe", "tokens": ["if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " input", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " is", " not", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "-", "escape", "\"", "))", "\n", "\n", "    ", "return", " data", "frame", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.41780707240104675, -2.1684153079986572, -0.0017185931792482734, -9.179073458653875e-06, -0.00021526881027966738, -4.172238186583854e-05, -0.04025141894817352, -1.823885577323381e-05, -0.010232017375528812, -0.00017808281700126827, -0.15777522325515747, -0.005130814854055643, -0.004184775985777378, -0.003402161179110408, -0.005726361181586981, -0.015293005853891373, -0.012101680971682072, -6.318072337307967e-06, -0.06135767325758934, -0.12806884944438934, -0.597790539264679, -0.660803496837616, -0.3352820575237274, -0.002729383297264576, -3.6000557884108275e-05, -0.00038413776201196015, -0.0015063855098560452, -0.21185167133808136, -0.0007217901293188334, -0.005258775316178799, -0.03341636806726456, -0.019400253891944885, -2.6214308738708496, -0.20677466690540314, -0.00440602982416749, -0.4017823040485382, -0.021374234929680824, -0.0013863962376490235, -0.0004914983292110264, -0.6804683804512024, -0.0005440423847176135, -0.6573018431663513, -0.05550162121653557, -0.0026324877981096506, -6.997340824455023e-05, -0.0005149707430973649, -3.576272320060525e-06, -0.01343248039484024, -0.0009384519071318209, -3.576272320060525e-06, -0.0008403107640333474, -0.001696577062830329, -0.0006635371246375144, -0.0011385156540200114, -0.002050679875537753, -0.001615291927009821, -3.099436753473128e-06, -0.008581901900470257, -0.02542792819440365, -0.4075106978416443, -0.03135040029883385, -1.6665713787078857, -0.005149316042661667, -0.004262291360646486, -0.46447786688804626, -4.768360213347478e-06, -0.0008854520856402814, -0.00037424711626954377, -0.05672626569867134, -0.01772855408489704, -0.00023576818057335913, -0.00034767304896377027, -0.01003081351518631, -0.0013163958210498095, -0.5629213452339172, -0.0013769917422905564, -0.19621983170509338, -0.0004158347437623888, -0.0020783983636647463, -2.5748875486897305e-05, -0.0006859333370812237, -0.0012453190283849835, -0.0007876630988903344, -0.0036520943976938725, -0.06295157223939896, -1.811964830267243e-05, -0.007533947471529245, -0.0029560700058937073, -3.671578815556131e-05, 0.0, -1.5258672647178173e-05, -4.172316494077677e-06, -0.0010415849974378943, -0.0022354156244546175, -0.14361634850502014, -0.0017283515771850944, -0.4908931255340576, -0.06938852369785309, -0.003676324151456356, -0.06823831051588058, -1.2397689715726301e-05, -2.9801878554280847e-05, -0.01003966573625803, -0.0008992680232040584, -0.05546373128890991, -0.009060577489435673, -0.24829140305519104, -0.0002087136817863211, -5.125986263010418e-06, -2.978332757949829, -0.000900101731531322, -1.3470558769768104e-05, -0.02753804624080658, -0.0031607216224074364, -0.5026417970657349, -0.0010521834483370185, -0.015660753473639488, -0.0023344901856034994, -7.748573807475623e-06, -0.8282412886619568, -5.960462772236497e-07, -1.4305104514278355e-06, -1.7881377516459906e-06, -1.728519782773219e-05, -0.1611781120300293], "finish_reason": "stop"}], "metrics": {"energy": 445.3730959434507, "energy_per_token": 3.5629847675476056, "time": 10.931473, "time_per_token": 0.087451784}}
{"outputs": [{"text": "try:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise TypeError('Input must be a Pandas DataFrame')\n        if not 'UnicodeString' in dataframe.columns:\n            raise KeyError('DataFrame must contain column \"UnicodeString\"')\n        dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n        return dataframe\n    except Exception as e:\n        raise e", "tokens": ["try", ":", "\n", "        ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "            ", "raise", " Type", "Error", "('", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", "')", "\n", "        ", "if", " not", " '", "Un", "icode", "String", "'", " in", " data", "frame", ".", "columns", ":", "\n", "            ", "raise", " Key", "Error", "('", "DataFrame", " must", " contain", " column", " \"", "Un", "icode", "String", "\"", "')", "\n", "        ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "        ", "return", " data", "frame", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "raise", " e", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.137291431427002, -0.0002531684876885265, -0.0025379611179232597, -0.01710578054189682, -1.0443538427352905, -0.5128281116485596, -0.015096576884388924, -0.00014041867689229548, -0.0007009433466009796, -0.0002917817619163543, -0.0024703005328774452, -0.0014207994099706411, -1.4662635294371285e-05, -0.0010927902767434716, -0.006303310859948397, -0.011966818943619728, -0.0016330252401530743, -0.010764036327600479, -0.015367435291409492, -6.079655122448457e-06, -1.8568353652954102, -0.6985886693000793, -0.9158812165260315, -0.0017375147435814142, -0.022344494238495827, -0.48354601860046387, -8.344646857949556e-07, -0.002765285549685359, -0.00229119835421443, -0.3692503869533539, -0.0008866431307978928, -0.9182000160217285, -0.8192641139030457, -3.097651958465576, -0.4175436794757843, -0.0016289787599816918, -5.245195097813848e-06, -0.00010835537250386551, -3.9457496313843876e-05, -0.00038556772051379085, -0.02073702961206436, -2.7418097943154862e-06, -0.1431305855512619, -0.0009326160652562976, -0.003404418472200632, -0.001767145935446024, -0.0023808723781257868, -0.0022747849579900503, -0.01062580943107605, -2.861018856492592e-06, -0.0945407897233963, -1.308243989944458, -0.2122671902179718, -0.16059736907482147, -1.319913387298584, -0.1362314522266388, -0.0011064843274652958, -6.6756979322235566e-06, -0.0004153581103309989, -0.0017820206703618169, -0.01085731666535139, -0.00036435641231946647, -0.40416592359542847, -0.3788440525531769, -0.001341991825029254, -0.04956524819135666, -0.0017526278970763087, -3.8980677345534787e-05, -0.0007063039811328053, -0.0028225842397660017, -0.004519605077803135, -0.06617070734500885, -1.585470999998506e-05, -0.022884324193000793, -1.6927575416048057e-05, -2.3841855067985307e-07, -7.271740287251305e-06, -0.0012066233903169632, -0.0016091029392555356, -0.07805489003658295, -0.0016377858119085431, -0.24834144115447998, -0.06683848798274994, -0.004467269405722618, -0.06579194217920303, -1.4305012882687151e-05, -7.92710343375802e-05, -0.007921588607132435, -0.0025724435690790415, -0.08747855573892593, -0.014241370372474194, -0.04187002778053284, -0.00023123928986024112, -9.059865078597795e-06, -0.05206787958741188, -0.00010871296399272978, -0.04078785330057144, -0.008298204280436039, -0.15655000507831573, -0.01311168260872364, -0.0038602848071604967, -3.814689989667386e-06, -0.014169326052069664, -0.03399945795536041, -0.0006560318870469928, -0.7393580079078674, -0.009056088514626026, -0.09519022703170776, -0.00030048147891648114, -0.0015444743912667036, -0.0025053799618035555, -0.8326645493507385, -0.09037937968969345, -1.015799641609192, -1.0013530300057027e-05, -1.1920922133867862e-06, -2.264974000354414e-06, -2.586808113846928e-05, -1.8406774997711182, -0.004210892133414745], "finish_reason": "stop"}], "metrics": {"energy": 434.65994877624513, "energy_per_token": 3.6221662398020427, "time": 10.297909, "time_per_token": 0.08581590833333334}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input argument must be a Pandas DataFrame\")\n\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Input DataFrame must contain a column named 'UnicodeString'\")\n\n    # Decode all Unicode escape strings in the \"UnicodeString\" column\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " argument", " must", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "Input", " Data", "Frame", " must", " contain", " a", " column", " named", " '", "Un", "icode", "String", "'", "\"", ")", "\n", "\n", "    ", "#", " Dec", "ode", " all", " Un", "icode", " escape", " strings", " in", " the", " \"", "Un", "icode", "String", "\"", " column", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -0.8655566573143005, -2.9079551696777344, -0.2828817069530487, -0.0009162995265796781, -0.014281915500760078, -0.5830931067466736, -1.311301275563892e-06, -0.0021002870053052902, -0.002237675478681922, -0.8744087815284729, -0.00021920185827184469, -0.0008847374701872468, -0.47206658124923706, -0.0007347744540311396, -0.8133763670921326, -0.4058370590209961, -0.001328777172602713, -3.4570634852570947e-06, -0.00011955977242905647, -2.4318398573086597e-05, -0.013761994428932667, -7.152531907195225e-06, -0.00706779770553112, -3.576272320060525e-06, -0.11855372786521912, -0.0005193791585043073, -0.0015523299807682633, -0.0009969270322471857, -0.0013392536202445626, -0.003655301406979561, -0.008721829392015934, -3.814689989667386e-06, -0.03360600396990776, -0.09577305614948273, -1.8373595476150513, -0.040570154786109924, -0.005773416254669428, -0.12086258083581924, -0.22654476761817932, -0.6819040775299072, -0.17938962578773499, -0.31917157769203186, -0.02468596026301384, -0.002298810286447406, -5.364403477869928e-06, -0.0002848696312867105, -0.0019809638615697622, -0.01860535889863968, -0.00013684290752280504, -9.142934868577868e-05, -0.015065223909914494, -0.0011121999705210328, -1.6429712772369385, -1.5471277236938477, -0.17144551873207092, -1.1498216390609741, -0.16958647966384888, -0.0007503792876377702, -0.0746108889579773, -0.009610576555132866, -0.20107868313789368, -0.12974907457828522, -0.49172672629356384, -0.004977810196578503, -0.00022492263815365732, -0.002383369952440262, -0.0006798578542657197, -0.003153829136863351, -0.4799579679965973, -0.0027787189465016127, -0.1376679688692093, -0.00017426878912374377, -0.07402677088975906, -0.00016139635408762842, -0.0010786197381094098, -1.1324817933200393e-05, -0.0004292996891308576, -0.0007009433466009796, -0.00034707720624282956, -0.0024033491499722004, -0.03664082661271095, -4.6491513785440475e-06, -0.00403008284047246, -0.004254101309925318, -2.4318398573086597e-05, -7.152555099310121e-07, -4.756337511935271e-05, -4.172316494077677e-06, -0.0008233971311710775, -0.0026102541014552116, -0.05097278580069542, -0.0007001094636507332, -0.4290226995944977, -0.08078039437532425, -0.0022231643088161945, -0.05404488369822502, -4.529942543740617e-06, -1.9550132492440753e-05, -0.02061687409877777, -0.0006728292210027575, -0.04416387900710106, -0.007693659048527479, -1.8058679103851318, -0.00013839241000823677, -1.2636104656849056e-05, -0.022487521171569824, -6.997340824455023e-05, -0.04174952581524849, -0.0030427132733166218, -0.2198890894651413, -0.0007058274932205677, -0.08893203735351562, -0.002852421021088958, -8.34461570775602e-06, -0.6041035652160645, -0.007327822037041187, -1.4155254364013672], "finish_reason": "stop"}], "metrics": {"energy": 527.5581922721865, "energy_per_token": 3.9078384612754555, "time": 14.621832, "time_per_token": 0.10830986666666666}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input should be a Pandas DataFrame.\")\n    if not \"UnicodeString\" in dataframe.columns:\n        raise KeyError(\"The DataFrame does not have a column called 'UnicodeString'.\")\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " should", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " not", " \"", "Un", "icode", "String", "\"", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " Data", "Frame", " does", " not", " have", " a", " column", " called", " '", "Un", "icode", "String", "'", ".", "\"", ")", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "'))", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -2.286447525024414, -0.0016307639889419079, -0.026774896308779716, -0.47407639026641846, -6.437280717364047e-06, -0.0031974404118955135, -0.0038821345660835505, -0.4520014226436615, -0.004610621836036444, -0.00032944019767455757, -0.00045885046711191535, -1.1818190813064575, -0.6955950260162354, -2.8453550338745117, -0.708251953125, -0.0006376855308189988, -5.602820692729438e-06, -0.0001411338453181088, -2.4914430468925275e-05, -0.0004170263418927789, -0.01997462846338749, -1.7881377516459906e-06, -0.14122526347637177, -0.0011812621960416436, -0.003643305040895939, -0.001053969725035131, -0.0028320939745754004, -0.002132286550477147, -0.005851401016116142, -5.483612312673358e-06, -0.017958657816052437, -0.06052352860569954, -0.1827518492937088, -0.6193928718566895, -0.014317757450044155, -1.258713722229004, -0.001763337990269065, -1.4662814140319824, -0.29083096981048584, -0.18913163244724274, -1.5751879215240479, -0.07543060928583145, -0.0009659630013629794, -1.9073304429184645e-05, -0.00029762129997834563, -0.0032680220901966095, -0.08659552782773972, -0.006481932941824198, -0.00031728477915748954, -0.00012587709352374077, -0.43739545345306396, -0.3735995888710022, -0.0016318351263180375, -0.18818891048431396, -0.0006997520686127245, -0.001915764412842691, -1.9430925021879375e-05, -0.0009058186551555991, -0.0009551253751851618, -0.0019895299337804317, -0.004475933033972979, -0.06003608927130699, -1.5735502529423684e-05, -0.012012756429612637, -0.0056563084945082664, -2.4437606043647975e-05, -3.576278118089249e-07, -2.002696055569686e-05, -5.602820692729438e-06, -0.0011844770051538944, -0.002497175009921193, -0.10216653347015381, -0.0013092526933178306, -0.37800687551498413, -0.11389689892530441, -0.0048345099203288555, -0.07474011182785034, -1.883488948806189e-05, -3.683499380713329e-05, -0.011055760085582733, -0.0012446045875549316, -0.0453844778239727, -0.007797872181981802, -1.0090076923370361, -0.00020716428116429597, -1.1444026313256472e-05, -0.02612045221030712, -5.280832192511298e-05, -0.04363027960062027, -0.007693540770560503, -0.02057763561606407, -0.010737501084804535, -0.003376023843884468, -1.07287787614041e-05, -0.7432112097740173, -0.014720398932695389, -1.3066272735595703], "finish_reason": "stop"}], "metrics": {"energy": 485.3075837097169, "energy_per_token": 4.147928065895016, "time": 14.750206, "time_per_token": 0.12607013675213677}}
{"outputs": [{"text": "if 'UnicodeString' not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' must exist in the DataFrame.\")\n\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame.\")\n\n    # Decoding strings\n    decoded_strings = dataframe[\"UnicodeString\"].apply(lambda s: codecs.decode(s, \"unicode_escape\"))\n    dataframe[\"UnicodeString\"] = decoded_strings\n    return dataframe", "tokens": ["if", " '", "Un", "icode", "String", "'", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " must", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Dec", "oding", " strings", "\n", "    ", "dec", "oded", "_", "strings", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "lambda", " s", ":", " codec", "s", ".", "decode", "(", "s", ",", " \"", "un", "icode", "_", "escape", "\"", "))", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " dec", "oded", "_", "strings", "\n", "    ", "return", " data", "frame", "\n", "\n", "#"], "logprobs": [-0.41780707240104675, -1.9194414615631104, -0.00237171514891088, -6.9141146923357155e-06, -9.989239333663136e-05, -2.5987286790041253e-05, -0.059861838817596436, -1.5258672647178173e-05, -0.006883005611598492, -0.0002029928145930171, -0.11283320933580399, -0.002536058658733964, -0.002452225424349308, -0.004784564021974802, -0.006374502554535866, -0.012319541536271572, -0.010656828992068768, -4.410734163684538e-06, -0.4598056972026825, -0.19146287441253662, -0.6494401693344116, -0.6661326289176941, -0.1631442755460739, -0.0019911956042051315, -2.062299427052494e-05, -0.00024172721896320581, -0.001878165639936924, -2.4985880851745605, -0.13687944412231445, -0.03774907812476158, -0.013686858117580414, -0.5832296013832092, -0.005113380495458841, -0.48875391483306885, -0.00898307841271162, -0.0005096090608276427, -0.0013158005895093083, -0.6273479461669922, -0.0006553170969709754, -0.9560555815696716, -0.055872801691293716, -0.0035385394003242254, -0.00010632903286023065, -0.0005293875001370907, -4.0531076592742465e-06, -0.007516081444919109, -0.0011093420907855034, -4.410734163684538e-06, -0.0008525789016857743, -0.002333063166588545, -0.0008266131044365466, -0.001427584677003324, -0.002442236291244626, -0.002035809215158224, -3.933898824470816e-06, -0.05805223062634468, -0.01978437602519989, -1.2472989559173584, -0.5355506539344788, -0.0007924277451820672, -0.011056231334805489, -0.3786463737487793, -3.4570634852570947e-06, -0.0014749611727893353, -0.0010830257087945938, -0.08471957594156265, -0.0007540719816461205, -0.0002915434306487441, -0.00019631843315437436, -0.011435674503445625, -0.001471032970584929, -1.6397883892059326, -1.2220555543899536, -2.3098528385162354, -3.0830278396606445, -1.382652759552002, -0.004860253538936377, -3.0404000282287598, -0.031389910727739334, -0.06258435547351837, -0.1927400678396225, -0.03125103935599327, -0.42988625168800354, -1.966933996300213e-05, -2.125889301300049, -0.01680268719792366, -0.0001716466504149139, -5.960462772236497e-07, -6.675497570540756e-05, -6.318072337307967e-06, -0.0004459816846065223, -0.005084916017949581, -0.07480084151029587, -0.001192454481497407, -0.2209102213382721, -2.3213179111480713, -0.004717411007732153, -0.060415126383304596, -5.125986263010418e-06, -2.13382354559144e-05, -0.006117784883826971, -0.0007638397510163486, -0.04514886438846588, -0.01701284572482109, -0.6725666522979736, -0.00021050144277978688, -8.22540732769994e-06, -0.03367643058300018, -5.507317473529838e-05, -2.1815061700181104e-05, -0.0276348777115345, -0.0038338033482432365, -1.118237853050232, -0.21536995470523834, -0.0001292145170737058, -0.04389180988073349, -4.1126360883936286e-05, -0.0033033110667020082, -4.649054244509898e-05, -0.0008815216715447605, -0.0014524635626003146, -0.00018130090029444546, -0.0003120412293355912, -0.0017301365733146667, -1.1920928244535389e-07, -6.6756979322235566e-06, -6.556489552167477e-06, -0.00872927438467741, -1.1724845170974731, -0.032769832760095596, -0.0031409950461238623, -2.2291887944447808e-05, -0.4494266211986542, -0.004715631250292063, -1.6893764734268188], "finish_reason": "stop"}], "metrics": {"energy": 552.399137325287, "energy_per_token": 4.091845461668793, "time": 15.824961, "time_per_token": 0.11722193333333333}}
{"outputs": [{"text": "# Check if the input is a Pandas DataFrame\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame.\")\n\n    # Check if the DataFrame contains the column \"UnicodeString\"\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError('Input DataFrame must contain a column \"UnicodeString\".')\n\n    # Convert the Unicode escape string in the \"UnicodeString\" column to decoded string using codecs library\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(\n        lambda x: codecs.decode(x, \"unicode_escape\")\n    )\n\n    # Return the modified DataFrame\n    return dataframe", "tokens": ["#", " Check", " if", " the", " input", " is", " a", " Pand", "as", " Data", "Frame", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " Data", "Frame", " contains", " the", " column", " \"", "Un", "icode", "String", "\"", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "('", "Input", " Data", "Frame", " must", " contain", " a", " column", " \"", "Un", "icode", "String", "\"", ".", "')", "\n", "\n", "    ", "#", " Convert", " the", " Un", "icode", " escape", " string", " in", " the", " \"", "Un", "icode", "String", "\"", " column", " to", " dec", "oded", " string", " using", " codec", "s", " library", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "    ", ")", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " data", "frame", "\n", "\n", "#"], "logprobs": [-1.8339648246765137, -0.46814417839050293, -0.6018247008323669, -0.2690550982952118, -0.22799769043922424, -0.17673377692699432, -0.11237690597772598, -0.6533905863761902, -2.7418097943154862e-06, -0.0021196771413087845, -0.0017484629061073065, -0.18961694836616516, -0.0010969580616801977, -0.009920814074575901, -0.011866220273077488, -0.003063154872506857, -5.757642793469131e-05, -0.000506511190906167, -6.818538531661034e-05, -0.00011765264935093, -0.0007653883076272905, -9.894321920000948e-06, -0.0012353177880868316, -0.001111247343942523, -0.0006001578294672072, -0.0018109364900738, -0.012216504663228989, -0.002552348654717207, -3.2186455882765586e-06, -0.15515395998954773, -0.04704439267516136, -0.5545757412910461, -0.4080912470817566, -0.0004104725376237184, -0.0036030393093824387, -1.3947726488113403, -0.0059661162085831165, -0.000538680877070874, -0.7886718511581421, -0.003689032746478915, -0.00025662468397058547, -0.00025006983196362853, -0.07962626963853836, -0.0013634203933179379, -0.02542176842689514, -0.11231830716133118, -0.015158691443502903, -0.04504801332950592, -2.7515132427215576, -0.003438633633777499, -0.45275062322616577, -0.23633399605751038, -0.22030481696128845, -0.07528412342071533, -0.009809266775846481, -0.0002889215829782188, -0.0008526980527676642, -0.0020063049159944057, -0.026141822338104248, -0.0002516191452741623, -0.019309287890791893, -0.14886075258255005, -0.0001134808044298552, -4.291525328881107e-06, -8.749579137656838e-05, -1.1920858014491387e-05, -0.002233750419691205, -5.960446742392378e-06, -0.005908049177378416, -1.0728830375228426e-06, -0.10810445249080658, -0.00029940891545265913, -0.0012463905150070786, -0.00023779425828251988, -0.0007466865936294198, -0.0023993058130145073, -0.00318068522028625, -8.344646857949556e-07, -2.5128700733184814, -2.6896724700927734, -0.043936531990766525, -0.005691750440746546, -0.3659255802631378, -0.11281222850084305, -1.065018653869629, -0.12462413311004639, -1.239715814590454, -0.0010601620888337493, -8.702239938429557e-06, -0.0004122599493712187, -0.002992677502334118, -0.08711761981248856, -0.000655793643090874, -0.00013195598148740828, -0.005139591172337532, -0.0012076949933543801, -0.042342863976955414, -3.682359218597412, -0.9659457206726074, -0.7717928886413574, -0.0006820021662861109, -0.5321717858314514, -2.2522945404052734, -1.500575304031372, -0.17699047923088074, -0.3179050385951996, -0.0022421954199671745, -5.519237674889155e-05, -0.0010268182959407568, -0.0003409996279515326, -0.0059619685634970665, -0.28322678804397583, -2.0692224502563477, -0.007973980158567429, -1.227830410003662, -1.8431458473205566, -0.5461883544921875, -0.0023443615064024925, -2.2684059143066406, -0.1014256477355957, -0.0013163958210498095, -0.1392543762922287, -0.00023326536756940186, -0.1207045316696167, -0.00018773700867313892, -0.0021679725032299757, -5.125986263010418e-06, -0.00034683887497521937, -0.0018682897789403796, -0.0008434075862169266, -0.002568281954154372, -0.04943772777915001, -5.602820692729438e-06, -0.007061169017106295, -0.00369010167196393, -1.5139465176616795e-05, 0.0, -1.5020257706055418e-05, -5.245195097813848e-06, -0.001036107074469328, -0.002378018107265234, -0.02490249276161194, -0.0006379238329827785, -1.766417384147644, -0.008613694459199905, -0.021570835262537003, -0.0685904324054718, -0.0012432949151843786, -0.047496259212493896, -2.861018856492592e-06, -2.1815061700181104e-05, -0.012220862321555614, -0.0007921895012259483, -0.10611944645643234, -0.012323545292019844, -0.06914971023797989, -0.00017069313616957515, -2.861018856492592e-06, -0.05109807103872299, -4.1960789531003684e-05, -7.748573807475623e-06, -0.06159207597374916, -0.1292094886302948, -0.018390735611319542, -6.747018051100895e-05, -0.0016990762669593096, -0.16288723051548004, -0.0005054388311691582, -1.233619213104248, -0.12095637619495392, -0.04393664747476578, -0.8973056674003601, -0.045226115733385086, -0.0024540091399103403, -0.11200064420700073, -0.00022921319759916514, -0.002041519619524479, -0.001625646254979074, -5.8412379075889476e-06, -0.45751842856407166, -0.004797020927071571, -1.4023289680480957], "finish_reason": "stop"}], "metrics": {"energy": 711.4408809337615, "energy_per_token": 3.909015829306382, "time": 19.191002, "time_per_token": 0.10544506593406594}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input is not a Pandas DataFrame.\")\n\n    try:\n        # Iterate over all rows of the DataFrame and replace the UnicodeString column with the decoded values\n        dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(\n            lambda x: codecs.decode(x, 'unicode_escape')\n        )\n    except KeyError:\n        # If the column \"UnicodeString\" does not exist in the DataFrame, raise an exception\n        raise KeyError(\"The column 'UnicodeString' does not exist in the DataFrame.\")\n\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " is", " not", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "try", ":", "\n", "        ", "#", " Iter", "ate", " over", " all", " rows", " of", " the", " Data", "Frame", " and", " replace", " the", " Un", "icode", "String", " column", " with", " the", " dec", "oded", " values", "\n", "        ", "data", "frame", "['", "Un", "icode", "String", "']", " =", " data", "frame", "['", "Un", "icode", "String", "']", ".", "apply", "(", "\n", "            ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " '", "un", "icode", "_", "escape", "')", "\n", "        ", ")", "\n", "    ", "except", " Key", "Error", ":", "\n", "        ", "#", " If", " the", " column", " \"", "Un", "icode", "String", "\"", " does", " not", " exist", " in", " the", " Data", "Frame", ",", " raise", " an", " exception", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "return", " data", "frame", "\n", "\n", "#"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -2.2719478607177734, -0.006506567820906639, -0.008730101399123669, -0.3296242654323578, -2.264974000354414e-06, -0.001116486731916666, -0.0013185387942939997, -0.3122575283050537, -0.03220784291625023, -0.0003532739356160164, -0.0014490114990621805, -0.41664373874664307, -0.0005086558521725237, -1.0803089141845703, -0.00017426878912374377, -0.0009483369067311287, -0.005775905214250088, -1.915311336517334, -3.0665581226348877, -0.086460180580616, -0.2989586591720581, -2.209742546081543, -0.3853554427623749, -2.3374080657958984, -0.07010706514120102, -0.5968592166900635, -0.00918768160045147, -1.8062328100204468, -2.5557241439819336, -0.776626467704773, -1.1802090406417847, -0.0005962263094261289, -1.224622368812561, -0.25315502285957336, -0.27055394649505615, -0.69879150390625, -0.03348173573613167, -0.0005249790847301483, -2.8632595539093018, -0.3726036250591278, -0.001064806361682713, -0.7242273092269897, -0.0005851463647559285, -0.5521078109741211, -0.0009698931244201958, -3.3854863431770355e-05, -0.00014053787162993103, -0.00039450492477044463, -0.001754413009621203, -0.08394788950681686, -6.318072337307967e-06, -0.12508392333984375, -5.23315102327615e-05, -2.3841855067985307e-07, -1.585470999998506e-05, -0.0019694233778864145, -0.0015038858400657773, -0.01385476067662239, -0.0011035073548555374, -1.8023368120193481, -0.02048572525382042, -0.00994996726512909, -0.18478837609291077, -0.0009765623253770173, -0.09852918982505798, -4.0531076592742465e-06, -4.60137271147687e-05, -0.016656147316098213, -0.0018700745422393084, -0.07323470711708069, -0.026454634964466095, -0.08923541009426117, -0.00021884430316276848, -9.059865078597795e-06, -0.08602503687143326, -0.00013195598148740828, -0.4052755534648895, -0.1945204734802246, -0.04434681311249733, -9.941560711013153e-05, -0.0012757980730384588, -0.5895060300827026, -0.0014968630857765675, -0.010179625824093819, -5.960462772236497e-07, -0.4813956320285797, -0.011319699697196484, -0.000660439720377326, -2.6468827724456787, -1.0517160892486572, -0.09054762870073318, -0.2760317325592041, -0.5860961079597473, -0.003509911010041833, -0.00020454221521504223, -0.0007045170641504228, -0.0009777533123269677, -0.16757752001285553, -0.00025686301523819566, -0.001983700320124626, -0.2373945116996765, -0.001536261523142457, -0.022142332047224045, -0.0007996936910785735, -0.331115186214447, -0.15632276237010956, -0.7904334664344788, -1.5758684873580933, -0.040693774819374084, -0.00010644822759786621, -0.02067829668521881, -0.03798655793070793, -1.7881377516459906e-06, -0.08233422040939331, -0.07339046895503998, -0.10434810817241669, -0.5140570402145386, -0.14005513489246368, -0.0006289887824095786, -2.145764938177308e-06, -0.00026592056383378804, -0.0007394201820716262, -0.022690312936902046, -0.0002734287118073553, -0.000976919662207365, -0.01113121211528778, -0.0042199138551950455, -0.17237533628940582, -0.002508709440007806, -0.03499760851264, -0.0033776871860027313, -0.0007832558476366103, -0.08250074833631516, -0.2776976227760315, -0.0008561521535739303, -0.44223687052726746, -0.002449014689773321, -8.4638240878121e-06, -0.7358267307281494, -0.004807698540389538, -1.5141575336456299], "finish_reason": "stop"}], "metrics": {"energy": 640.192069143295, "energy_per_token": 3.9763482555484164, "time": 18.115677, "time_per_token": 0.11251973291925467}}
{"outputs": [{"text": "try:\n        if isinstance(dataframe, pd.DataFrame):\n            if \"UnicodeString\" in dataframe.columns:\n                dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(\n                    lambda x: codecs.decode(x, \"unicode_escape\")\n                )\n                return dataframe\n            else:\n                raise KeyError(\"The column 'UnicodeString' does not exist in the DataFrame\")\n        else:\n            raise TypeError(\"The input should be a Pandas DataFrame\")\n    except Exception as e:\n        raise e", "tokens": ["try", ":", "\n", "        ", "if", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "            ", "if", " \"", "Un", "icode", "String", "\"", " in", " data", "frame", ".", "columns", ":", "\n", "                ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "\n", "                ", "    ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "                ", ")", "\n", "                ", "return", " data", "frame", "\n", "            ", "else", ":", "\n", "                ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", "\"", ")", "\n", "        ", "else", ":", "\n", "            ", "raise", " Type", "Error", "(", "\"", "The", " input", " should", " be", " a", " Pand", "as", " Data", "Frame", "\"", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "raise", " e", "\n", "\n", "#"], "logprobs": [-2.137291431427002, -0.0002531684876885265, -0.0025379611179232597, -0.01710578054189682, -1.0443538427352905, -1.8268120288848877, -0.00012611546844709665, -0.001178999780677259, -0.00025948495022021234, -0.0032269093208014965, -0.0020007132552564144, -1.9430925021879375e-05, -0.001858056872151792, -0.07914651185274124, -0.007757063489407301, -0.02236163057386875, -1.5009959936141968, -0.564241886138916, -0.0021120640449225903, -7.390948667307384e-06, -0.00020883286197204143, -4.100715523236431e-05, -0.2647327780723572, -0.011964109726250172, -1.2397689715726301e-05, -0.14241696894168854, -0.00045599075383506715, -0.003821452846750617, -0.009793330915272236, -0.005358499474823475, -0.3108634948730469, -0.001750604948028922, -0.10612674057483673, -0.0014288941165432334, -0.003921795636415482, -2.0265373677830212e-05, -0.00025078488397412, -0.0010406322544440627, -0.002148345345631242, -0.006302955094724894, -0.07792896777391434, -1.7881233361549675e-05, -0.01704566180706024, -0.03655831143260002, -4.7205765440594405e-05, -1.1920928244535389e-07, -2.8013790142722428e-05, -1.2159273865108844e-05, -0.0028716777451336384, -0.0036855884827673435, -0.12704521417617798, -0.0016377858119085431, -1.0317225456237793, -0.0005393957253545523, -0.005309171974658966, -0.020882973447442055, -0.13511087000370026, -0.001292346976697445, -0.13565467298030853, -9.298280929215252e-06, -3.9934315282152966e-05, -0.007549919653683901, -0.0013616346986964345, -0.10768301784992218, -0.0211575198918581, -0.0634893923997879, -0.00012373158824630082, -2.9802276912960224e-06, -0.13908520340919495, -8.21318244561553e-05, -1.0967194612021558e-05, -0.08421782404184341, -0.103970967233181, -0.0006393534131348133, -0.017303690314292908, -0.0054444605484604836, -0.360564261674881, -0.030408618971705437, -0.0047651068307459354, -2.264974000354414e-06, -0.009808086790144444, -0.024340715259313583, -0.08512867987155914, -4.100715523236431e-05, -0.0005191409145481884, -0.00029094755882397294, -0.019732365384697914, -0.023768145591020584, -2.7418097943154862e-06, -0.08886300027370453, -0.4757281243801117, -0.7084267735481262, -0.5921233296394348, -0.2914484143257141, -0.0032561400439590216, -0.0006373281357809901, -0.001392943668179214, -0.0013077049516141415, -0.14535881578922272, -0.0005268854438327253, -0.005752793047577143, -0.10888434946537018, -0.018555158749222755, -0.27661481499671936, -0.0038237092085182667, -1.5737671852111816, -0.00040844682371243834, -0.003539014607667923, -0.01625487208366394, -0.009849991649389267, -8.4638240878121e-06, -0.00016592556494288146, -0.0004287039046175778, -0.0018355678766965866, -0.007863753475248814, -4.0531076592742465e-06, -0.006561639253050089, -0.050681713968515396, -0.327898234128952, -0.11907866597175598, -2.8855233192443848, -0.00438668392598629, -0.06137022748589516, -0.4004512429237366, -1.4185804502631072e-05, -0.004366625566035509, -0.008677276782691479, -0.09268002212047577, -0.00010644822759786621, -0.0003781795676331967, -0.11690102517604828, -0.0007537146448157728, -0.4700872302055359, -0.01045028492808342, -0.27099722623825073, -0.000284154579276219, -0.0018650771817192435, -0.0005413020844571292, -1.3866240978240967, -0.11413218080997467, -0.812666118144989, -0.0144815593957901, -2.0858004093170166], "finish_reason": "stop"}], "metrics": {"energy": 550.3380705566407, "energy_per_token": 3.848517975920564, "time": 15.639276, "time_per_token": 0.10936556643356644}}
{"outputs": [{"text": "if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The input DataFrame must have a column named 'UnicodeString'.\")\n\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a Pandas DataFrame.\")\n\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(\n        lambda x: codecs.decode(x, \"unicode_escape\")\n    )\n    return dataframe", "tokens": ["if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " input", " Data", "Frame", " must", " have", " a", " column", " named", " '", "Un", "icode", "String", "'", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " must", " be", " a", " Pand", "as", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " codec", "s", ".", "decode", "(", "x", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "    ", ")", "\n", "    ", "return", " data", "frame"], "logprobs": [-0.41780707240104675, -2.1684153079986572, -0.0017185931792482734, -9.179073458653875e-06, -0.00021526881027966738, -4.172238186583854e-05, -0.04025141894817352, -1.823885577323381e-05, -0.010232017375528812, -0.00017808281700126827, -0.15777522325515747, -0.005130814854055643, -0.004184775985777378, -0.003402161179110408, -0.005726361181586981, -0.015293005853891373, -0.012101680971682072, -6.318072337307967e-06, -0.06135767325758934, -0.12806884944438934, -0.597790539264679, -2.368131399154663, -0.3228191137313843, -0.01694440096616745, -0.6552965044975281, -1.8861072063446045, -0.23319296538829803, -0.21731461584568024, -0.4875323176383972, -0.09002417325973511, -0.0022845377679914236, -1.4305012882687151e-05, -0.000348268891684711, -0.004136696457862854, -0.3807379901409149, -0.006771829444915056, -0.0008360228384844959, -0.0008298290777020156, -0.7335155606269836, -0.0005646541831083596, -0.8459280729293823, -0.05910566821694374, -0.002629753202199936, -8.725739462533966e-05, -0.0006456674309447408, -2.264974000354414e-06, -0.012203669175505638, -0.0009379754774272442, -4.529942543740617e-06, -0.0011825718684121966, -0.0021548878867179155, -0.000736918649636209, -0.0012965138303115964, -0.002590635558590293, -0.0014525825390592217, -5.602820692729438e-06, -0.011300251819193363, -0.03240763396024704, -0.15889959037303925, -0.021632665768265724, -0.31010398268699646, -0.000860201776959002, -0.004925024230033159, -0.39459002017974854, -2.0265558760002023e-06, -0.0012516292044892907, -0.0007975496700964868, -0.03565132990479469, -0.001293775625526905, -0.00022659118985757232, -0.00019941726350225508, -0.011237307451665401, -0.0013063953956589103, -0.5753450989723206, -0.0014209183864295483, -0.16547055542469025, -0.0005584587925113738, -0.0018892312655225396, -2.109982233378105e-05, -0.0009357126546092331, -0.0013231817865744233, -0.0006149308173917234, -0.003560158656910062, -0.06032523512840271, -2.098061486321967e-05, -0.0092982342466712, -0.00684547470882535, -2.1934269170742482e-05, 0.0, -1.4781842764932662e-05, -3.814689989667386e-06, -0.0008441222598776221, -0.002459360286593437, -0.10753229260444641, -0.0018730491865426302, -0.8684986233711243, -0.008179736323654652, -0.013792564161121845, -0.25642135739326477, -0.0005236684810370207, -0.10753743350505829, -1.168244216387393e-05, -2.1815061700181104e-05, -0.008822035975754261, -0.0008493629866279662, -0.06340950727462769, -0.013757878914475441, -0.04693838953971863, -0.00015233787416946143, -3.2186455882765586e-06, -0.10483578592538834, -4.768258077092469e-05, -1.3232143828645349e-05, -0.02771790139377117, -0.17573979496955872, -0.009315123781561852, -8.11782301752828e-05, -0.0022499265614897013, -1.150478720664978, -0.0210864394903183, -0.001993456156924367, -6.6756979322235566e-06], "finish_reason": "stop"}], "metrics": {"energy": 420.9664871845247, "energy_per_token": 3.4505449769223335, "time": 10.929977, "time_per_token": 0.08958997540983606}}
{"outputs": [{"text": "if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input data must be a pandas DataFrame.\")\n\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"The column 'UnicodeString' does not exist in the DataFrame.\")\n\n    def decode_unicode_escape_string(string):\n        return codecs.decode(string, \"unicode_escape\")\n\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(decode_unicode_escape_string)\n    return dataframe", "tokens": ["if", " not", " isinstance", "(", "data", "frame", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "The", " input", " data", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "if", " \"", "Un", "icode", "String", "\"", " not", " in", " data", "frame", ".", "columns", ":", "\n", "        ", "raise", " Key", "Error", "(", "\"", "The", " column", " '", "Un", "icode", "String", "'", " does", " not", " exist", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "def", " decode", "_", "un", "icode", "_", "escape", "_", "string", "(", "string", "):", "\n", "        ", "return", " codec", "s", ".", "decode", "(", "string", ",", " \"", "un", "icode", "_", "escape", "\"", ")", "\n", "\n", "    ", "data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", " =", " data", "frame", "[", "\"", "Un", "icode", "String", "\"", "]", ".", "apply", "(", "decode", "_", "un", "icode", "_", "escape", "_", "string", ")", "\n", "    ", "return", " data", "frame", "\n", "\n", "def"], "logprobs": [-0.41780707240104675, -0.5118945240974426, -0.012776658870279789, -7.581423415103927e-05, -0.0003461238811723888, -0.00013982271775603294, -0.0004772001120727509, -0.0017614339012652636, -1.2755313036905136e-05, -0.0006286313873715699, -0.002877620980143547, -0.007505669724196196, -0.00446453969925642, -0.006759041920304298, -0.0032107490114867687, -6.079655122448457e-06, -0.23884472250938416, -0.10534307360649109, -1.1788787841796875, -0.11195961385965347, -2.110208511352539, -0.9529632925987244, -0.005789653863757849, -0.05843663215637207, -1.1535301208496094, -0.01944468356668949, -0.0020673349499702454, -0.37791556119918823, -0.004338851664215326, -0.00033742457162588835, -0.000502817565575242, -0.3777846693992615, -0.0006816447712481022, -0.8438017964363098, -0.42009782791137695, -0.0009216589969582856, -4.887569048150908e-06, -0.00016151554882526398, -3.2543604902457446e-05, -0.011441449634730816, -6.079655122448457e-06, -0.0071723125874996185, -2.50339189733495e-06, -0.14091965556144714, -0.0006080209277570248, -0.0021213425789028406, -0.0010033579310402274, -0.001158996019512415, -0.002259679604321718, -0.007628239691257477, -4.172316494077677e-06, -0.03469943255186081, -0.08619949221611023, -0.16116319596767426, -1.2975924015045166, -0.14534108340740204, -0.003030947409570217, -2.2291887944447808e-05, -0.0004962643142789602, -0.0010025242809206247, -0.3905547559261322, -0.0003303935518488288, -0.0021167034283280373, -0.02714749425649643, -0.01009064819663763, -0.43517518043518066, -0.0011720937909558415, -0.02395019307732582, -0.006012211553752422, -0.00045134371612221, -0.00011276562872808427, -0.01680995523929596, -0.001122321467846632, -2.5656628608703613, -0.2910460829734802, -0.06109360605478287, -0.7190997004508972, -0.008753972128033638, -0.2984165847301483, -1.2858072519302368, -2.221191167831421, -0.3970462679862976, -0.010523777455091476, -1.133432149887085, -0.870893120765686, -0.0005231918767094612, -0.0056493147276341915, -0.5789840817451477, -0.07225949317216873, -1.0728830375228426e-06, -8.22540732769994e-06, -0.04448148235678673, -0.0005476167425513268, -0.10457780212163925, -0.022860554978251457, -0.35893264412879944, -0.00016759421851020306, -9.536738616588991e-07, -0.015239940024912357, -1.6927575416048057e-05, -1.645074735279195e-05, -0.00501991854980588, -0.031005021184682846, -0.005497812293469906, -0.0003924791526515037, -0.07192196696996689, -0.0003554189461283386, -0.05541297793388367, -0.0001174142598756589, -0.002267529722303152, -1.3232143828645349e-05, -0.00027771908207796514, -0.0018310461891815066, -0.000270091783022508, -0.0021589321549981833, -0.003957061562687159, -9.536738616588991e-07, -0.001790588372386992, -0.0015653035370633006, -1.3947389561508317e-05, 0.0, -1.680836794548668e-05, -1.7881377516459906e-06, -0.00016783259343355894, -0.0008232779800891876, -0.02512443996965885, -2.777537883957848e-05, -0.028920743614435196, -9.417489309271332e-06, -7.629365427419543e-06, -2.3841855067985307e-07, -1.2755313036905136e-05, -2.2411095415009186e-05, -5.221230458118953e-05, -1.1801649634435307e-05, -0.0006079017766751349, -0.0008031480247154832, -0.9508489370346069, -0.016387632116675377, -0.002299404935911298, -9.417489309271332e-06, -0.6116644740104675, -0.005743192508816719, -1.3288465738296509], "finish_reason": "stop"}], "metrics": {"energy": 563.9946267299656, "energy_per_token": 3.916629352291428, "time": 16.24282, "time_per_token": 0.1127973611111111}}
