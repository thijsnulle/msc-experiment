{"outputs": [{"text": "matches = {}\n\n    try:\n        # os.walk returns the three tuples: dirpath, dirs, files.\n        for (dirpath, dirs, files) in os.walk(directory_path):\n            # Loop over files and open each file to read.\n            for file in files:\n                # Filter out non-text files.\n                if not file.endswith('.txt'):\n                    continue\n\n                file_path = os.path.join(dirpath, file)\n\n                # Try to read the text file. If it cannot be opened, continue to next file.\n                try:\n                    with open(file_path, 'r') as f:\n                        text = f.read()\n                except:\n                    continue\n\n                # Extract matches using regex and store them in the dictionary.\n                matches[Path(file).stem] = re.findall(regex_pattern, text)\n\n    except:\n        pass\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "try", ":", "\n", "        ", "#", " os", ".", "walk", " returns", " the", " three", " t", "up", "les", ":", " dir", "path", ",", " d", "irs", ",", " files", ".", "\n", "        ", "for", " (", "dir", "path", ",", " d", "irs", ",", " files", ")", " in", " os", ".", "walk", "(", "directory", "_", "path", "):", "\n", "            ", "#", " Loop", " over", " files", " and", " open", " each", " file", " to", " read", ".", "\n", "            ", "for", " file", " in", " files", ":", "\n", "                ", "#", " Filter", " out", " non", "-", "text", " files", ".", "\n", "                ", "if", " not", " file", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "                ", "    ", "continue", "\n", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "dir", "path", ",", " file", ")", "\n", "\n", "                ", "#", " Try", " to", " read", " the", " text", " file", ".", " If", " it", " cannot", " be", " opened", ",", " continue", " to", " next", " file", ".", "\n", "                ", "try", ":", "\n", "                ", "    ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "        ", "text", " =", " f", ".", "read", "()", "\n", "                ", "except", ":", "\n", "                ", "    ", "continue", "\n", "\n", "                ", "#", " Ext", "ract", " matches", " using", " regex", " and", " store", " them", " in", " the", " dictionary", ".", "\n", "                ", "matches", "[", "Path", "(", "file", ")", ".", "stem", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "\n", "    ", "except", ":", "\n", "        ", "pass", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5061129331588745, -0.3356272578239441, -0.11702340841293335, -0.031408511102199554, -1.075693130493164, -0.0008010039455257356, -3.5894079208374023, -0.000679500459227711, -0.007836077362298965, -0.03447268530726433, -1.666348934173584, -5.003676891326904, -0.14260324835777283, -1.3925793170928955, -1.7434314489364624, -3.2776827812194824, -4.51975679397583, -2.793551445007324, -0.0013269914779812098, -0.002039853949099779, -0.9589203000068665, -1.617702841758728, -0.4772200882434845, -0.08457235991954803, -2.608752489089966, -0.007825668901205063, -0.16552692651748657, -0.43553075194358826, -1.9761805534362793, -0.5288881063461304, -0.005950473714619875, -0.5583783984184265, -3.154541492462158, -0.22982598841190338, -0.10251918435096741, -0.0018816161900758743, -1.107658863067627, -0.0013775869738310575, -0.0032467530108988285, -0.08082515001296997, -0.0037410527002066374, -0.0005494038923643529, -0.020991073921322823, -0.0006189814303070307, -0.000754786713514477, -0.002938360208645463, -0.01820673607289791, -0.0010662352433428168, -1.5258672647178173e-05, -0.043282266706228256, -0.0363018698990345, -0.09633336216211319, -0.9678105115890503, -3.836782693862915, -1.1205376386642456, -1.9172101020812988, -2.498180866241455, -4.396309852600098, -0.9867404103279114, -0.7599896788597107, -3.0201072692871094, -0.6689919233322144, -2.671206474304199, -0.048486147075891495, -0.005150739569216967, -0.09147221595048904, -0.5405362248420715, -0.5303025841712952, -0.0479104220867157, -0.00017951308109331876, -0.014288261532783508, -0.02997962199151516, -1.0269489288330078, -5.311304569244385, -0.9460585117340088, -1.7203254699707031, -0.08388715982437134, -0.17563629150390625, -0.0312096755951643, -0.6039320230484009, -0.03585825487971306, -0.001374491723254323, -0.07529805600643158, -0.831305742263794, -0.17793422937393188, -0.003577976254746318, -0.06489021331071854, -0.00018142008048016578, -1.1920928244535389e-07, -0.2765795588493347, -0.04061960428953171, -0.014276626519858837, -0.0014477020595222712, -0.02713972143828869, -0.016293810680508614, -0.00014745102089364082, -0.00041762212640605867, -0.02251467853784561, -0.00387061620131135, -0.7940973043441772, -0.0006767605082131922, -1.8330655097961426, -0.2703720033168793, -0.04384605959057808, -0.009992220439016819, -0.25888028740882874, -1.1920858014491387e-05, -0.00048685140791349113, -0.006296440027654171, -0.005770334508270025, -0.0002755738969426602, -0.004821578972041607, -0.00011288482346571982, -0.0002699726028367877, -0.0016746795736253262, -0.00017379203927703202, -0.06383872032165527, -1.3135058879852295, -0.0008026715368032455, -0.4379073679447174, -3.771942138671875, -0.308920681476593, -1.0191599130630493, -0.2184104472398758, -3.088254690170288, -0.5020150542259216, -0.7170032262802124, -2.9309957027435303, -0.7893711924552917, -3.3169219493865967, -0.033627212047576904, -1.752772569656372, -0.23188334703445435, -2.037191867828369, -0.38637951016426086, -1.8014049530029297, -0.07498566806316376, -0.02251467853784561, -0.0023641036823391914, -0.0005871717585250735, -0.13723501563072205, -5.471556869451888e-05, -0.0003691230376716703, -0.0014906733995303512, -0.0002256377338198945, -0.1360786259174347, -0.0032051641028374434, -0.00044264530879445374, -0.005512157455086708, -0.0012430568458512425, -6.794906312279636e-06, -0.07398735731840134, -0.21243058145046234, -0.03394506871700287, -0.3354480266571045, -0.000715714821126312, -0.4768124520778656, -0.028429700061678886, -0.0008486483711749315, -0.005602728575468063, -0.0008768765837885439, -0.874476969242096, -0.14112091064453125, -0.006548137869685888, -1.4662635294371285e-05, -2.455681169521995e-05, -0.004571819212287664, -0.012874930165708065, -0.12098310142755508, -0.09754417836666107, -1.2557343244552612, -0.010715210810303688, -0.0004151197790633887, -0.004188574850559235, -0.10137125104665756, -0.0021941415034234524, -0.037206534296274185, -0.0018394945655018091, -0.24403098225593567, -2.0309195518493652, -0.0017861855449154973, -0.17545856535434723, -1.143385648727417, -1.2701483964920044, -1.852994441986084, -0.9769001603126526, -0.5199345350265503, -0.09852800518274307, -1.72174072265625, -1.038466215133667, -0.09976756572723389, -0.014928529970347881, -0.004015479236841202, -0.5397940874099731, -0.41673269867897034, -2.2020418643951416, -0.0011536378879100084, -0.02557237446308136, -0.9115859866142273, -0.00022504181833937764, -0.17574799060821533, -0.00860577542334795, -0.0006089740199968219, -0.17077142000198364, -0.00011228884250158444, -0.0022044898942112923, -0.00013517419574782252, -0.0004213160718791187, -0.012295638211071491, -0.00048375347978435457, -8.105902816168964e-05, -0.002046516165137291, -0.002980079036206007, -0.04825364798307419, -0.01281691063195467, -0.3546079397201538, -0.18619504570960999, -0.05452170595526695, -0.570755124092102, -0.023728681728243828, -0.003142302157357335, -1.93985915184021, -0.034403007477521896, -0.08017313480377197, -0.001990719698369503, -0.06004989519715309, -0.006076670717447996, -2.0309903621673584, -2.264974000354414e-06, -1.1920922133867862e-06, -0.0002240883477497846, -0.00013064485392533243, -0.102692611515522], "finish_reason": "stop"}], "metrics": {"energy": 305.4894517250062, "energy_per_token": 1.3111135267167646, "time": 11.911016, "time_per_token": 0.05112024034334764}}
{"outputs": [{"text": "# Checking input arguments\n    if not directory_path:\n        raise ValueError('Directory path must not be empty.')\n    if regex_pattern is None:\n        regex_pattern = REGEX_PATTERN\n\n    # Processing arguments\n    directory_path = Path(directory_path)\n\n    # Checking existence and readability\n    if not directory_path.exists():\n        raise IOError('Directory does not exist.')\n    if not directory_path.is_dir():\n        raise IOError('Path is not a directory.')\n\n    # Collecting text files\n    text_files = glob.glob(f'{directory_path}/*.txt')\n\n    # If there are no text files, return an empty dict\n    if not text_files:\n        return {}\n\n    # Extracting matches from all text files in the directory\n    matches = {}\n    for file_path in text_files:\n        matches[Path(file_path).stem] = extract_matches(file_path, regex_pattern)\n\n    # Returning a dictionary containing the matches\n    return matches", "tokens": ["#", " Check", "ing", " input", " arguments", "\n", "    ", "if", " not", " directory", "_", "path", ":", "\n", "        ", "raise", " Value", "Error", "('", "Directory", " path", " must", " not", " be", " empty", ".", "')", "\n", "    ", "if", " regex", "_", "pattern", " is", " None", ":", "\n", "        ", "regex", "_", "pattern", " =", " REG", "EX", "_", "P", "AT", "TERN", "\n", "\n", "    ", "#", " Processing", " arguments", "\n", "    ", "directory", "_", "path", " =", " Path", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "#", " Check", "ing", " existence", " and", " read", "ability", "\n", "    ", "if", " not", " directory", "_", "path", ".", "exists", "():", "\n", "        ", "raise", " IO", "Error", "('", "Directory", " does", " not", " exist", ".", "')", "\n", "    ", "if", " not", " directory", "_", "path", ".", "is", "_", "dir", "():", "\n", "        ", "raise", " IO", "Error", "('", "Path", " is", " not", " a", " directory", ".", "')", "\n", "\n", "    ", "#", " Collect", "ing", " text", " files", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}", "/*", ".", "txt", "')", "\n", "\n", "    ", "#", " If", " there", " are", " no", " text", " files", ",", " return", " an", " empty", " dict", "\n", "    ", "if", " not", " text", "_", "files", ":", "\n", "        ", "return", " {}", "\n", "\n", "    ", "#", " Ext", "racting", " matches", " from", " all", " text", " files", " in", " the", " directory", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "        ", "matches", "[", "Path", "(", "file", "_", "path", ")", ".", "stem", "]", " =", " extract", "_", "matches", "(", "file", "_", "path", ",", " regex", "_", "pattern", ")", "\n", "\n", "    ", "#", " Return", "ing", " a", " dictionary", " containing", " the", " matches", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-2.5149855613708496, -2.9584474563598633, -3.2144689559936523, -2.857402801513672, -2.5482497215270996, -0.45467814803123474, -0.011909334920346737, -0.4074360132217407, -0.1787080019712448, -2.110572338104248, -0.00034338299883529544, -4.565611743601039e-05, -0.5751791596412659, -0.033406682312488556, -0.0016648017335683107, -0.49582308530807495, -0.6160511374473572, -8.463501580990851e-05, -1.2088077068328857, -1.3940385580062866, -0.11842475831508636, -1.6790282726287842, -1.87727689743042, -0.0011982887517660856, -0.20849855244159698, -0.8701090812683105, -0.051735468208789825, -0.0056941211223602295, -0.49086350202560425, -0.4360543489456177, -2.9794182777404785, -0.000342191313393414, -0.00027164106722921133, -1.2611660957336426, -0.07174256443977356, -0.178327277302742, -0.019182994961738586, -0.0008350699208676815, -0.6884927153587341, -0.0011096993694081903, -0.000819466426037252, -0.004443889483809471, -0.48121118545532227, -0.00011240804451517761, -0.0006505518686026335, -0.0008331642020493746, -0.004286269191652536, -0.002153579378500581, -0.015688331797719002, -0.5140793919563293, -0.0007204797584563494, -0.823893666267395, -4.560070514678955, -3.2536251544952393, -0.2574460506439209, -0.00655962573364377, -1.7902772426605225, -0.13122053444385529, -0.024450303986668587, -0.03256503865122795, -0.32067567110061646, -0.00420388812199235, -0.007393971551209688, -1.0132738680113107e-05, -1.5497195136049413e-06, -0.0059351869858801365, -0.4243897795677185, -1.3079642057418823, -0.0004568248405121267, -0.6048817038536072, -1.8876988887786865, -0.08221136033535004, -2.8639347553253174, -2.1698663234710693, -1.8374295234680176, -0.18765033781528473, -1.9834977388381958, -0.0013999671209603548, -0.09440423548221588, -0.04055000841617584, -0.3013686537742615, -5.900685573578812e-05, -6.01988795096986e-05, -0.0009195152088068426, -0.3234173059463501, -0.285106360912323, -0.005638290662318468, -0.000715833914000541, -0.0570705346763134, -2.877899169921875, -0.00021586472576018423, -0.4279341399669647, -0.4553335905075073, -0.8196892738342285, -0.0011017211945727468, -0.024760041385889053, -0.32902634143829346, -0.024148032069206238, -0.0011392300948500633, -0.11822745203971863, -0.13400821387767792, -0.010267650708556175, -0.4832759201526642, -1.645074735279195e-05, -1.0490362910786644e-05, -3.433168603805825e-05, -0.010328060947358608, -1.3589766240329482e-05, -0.0487249493598938, -0.014654380269348621, -0.001279726973734796, -0.0002426806604489684, -0.005594904534518719, -0.15127895772457123, -1.728519782773219e-05, -0.021343311294913292, -1.3438292741775513, -0.3833616077899933, -0.025758275762200356, -0.05618738755583763, -0.046627141535282135, -0.06690483540296555, -0.00500698946416378, -0.0017723818309605122, -1.0919010639190674, -0.0007102350937202573, -0.6131982803344727, -3.8186819553375244, -0.19336561858654022, -2.7532448768615723, -0.06879844516515732, -0.7587124109268188, -0.0011794761521741748, -1.289933204650879, -0.0376838743686676, -0.0700296014547348, -0.11957793682813644, -0.5030769109725952, -0.0010707604233175516, -0.009430032223463058, -0.03897397592663765, -1.4096208810806274, -0.29495611786842346, -0.03655922785401344, -8.010543388081715e-05, -1.4781842764932662e-05, -1.1395385265350342, -0.11607906222343445, -0.09639571607112885, -0.10753807425498962, -0.2779349088668823, -0.02895745448768139, -0.5375134944915771, -0.00021205084340181202, -0.37914395332336426, -4.035480976104736, -1.4760490655899048, -0.16555622220039368, -0.08266747742891312, -0.30385178327560425, -0.007178703788667917, -0.5680102109909058, -0.7354859113693237, -0.5211986899375916, -0.003281092271208763, -1.9127120971679688, -0.2329157292842865, -0.0005600076401606202, -0.011432021856307983, -0.21914233267307281, -0.016500676050782204, -3.099393507000059e-05, -4.410734163684538e-06, -0.0029530986212193966, -0.0018413984216749668, -0.0004689785710070282, -0.08228733390569687, -0.18183480203151703, -0.0014976962702348828, -0.022196315228939056, -0.0004994813934899867, -0.22447560727596283, -1.6903817653656006, -0.22104059159755707, -0.15833410620689392, -0.21435095369815826, -1.459867000579834, -0.1941276490688324, -0.0019094583112746477, -2.991712808609009, -0.3524054288864136, -0.11219917982816696, -0.18640223145484924, -0.0017008613795042038, -0.22308756411075592, -0.4489760398864746, -0.09523054212331772, -0.0254682544618845, -0.06932634860277176, -0.04691984876990318, -0.8452950716018677, -0.5245462656021118, -0.25374919176101685, -0.00668645603582263, -0.005896079819649458, -8.22540732769994e-06, -1.9073468138230965e-06, -0.0001720042055239901, -0.005608892533928156, -0.023287491872906685, -3.4591329097747803, -0.34765034914016724, -1.7095162868499756, -0.0017623859457671642, -0.00454500038176775, -1.0013530300057027e-05, -0.00011777184408856556, -0.003828221932053566, -8.999896090244874e-05, -0.29474547505378723, -0.010177737101912498, -0.0003513672563713044, -3.081930637359619, -0.024782370775938034, -0.08295300602912903, -0.34993746876716614, -0.18505747616291046, -0.006216712296009064, -0.002423684811219573, -0.03841786831617355, -0.05053608864545822, -0.005565505009144545, -0.00037722624256275594, -0.06590478122234344, -0.005069615785032511, -0.12333957105875015, -0.0009941878961399198, -1.7569403648376465, -0.319271981716156, -0.342494398355484, -3.1622653007507324, -0.42746996879577637, -2.257673740386963, -1.3421728610992432, -0.5811135768890381, -0.4682628810405731, -0.0006611545104533434, -0.007342022843658924, -0.004878641106188297, -0.008201846852898598, -0.00396727304905653, -0.11227867007255554], "finish_reason": "stop"}], "metrics": {"energy": 344.8463643341064, "energy_per_token": 1.3684379537067715, "time": 14.296597, "time_per_token": 0.05673252777777778}}
{"outputs": [{"text": "matches = {}\n\n    for file in glob.glob(f'{directory_path}/*'):\n        with open(file, 'r', encoding='utf8') as file:\n            contents = file.read()\n            matches[file.name[:-4]] = re.findall(regex_pattern, contents)\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}", "/*", "')", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "8", "')", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "file", ".", "name", "[:", "-", "4", "]]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " contents", ")", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.087275505065918, -0.72499018907547, -1.080151081085205, -0.4825916290283203, -0.00041166413575410843, -0.03431351110339165, -0.031023859977722168, -1.4824870824813843, -0.8836351633071899, -0.026403900235891342, -0.0018549631349742413, -2.0503786799963564e-05, -0.42649218440055847, -0.059603556990623474, -1.3625903129577637, -0.0007076143519952893, -0.08828845620155334, -0.06616602092981339, -1.310085415840149, -0.02898293174803257, -0.001511027687229216, -0.021598950028419495, -0.229869082570076, -0.30330032110214233, -0.05573717877268791, -0.9072825312614441, -0.0036645657382905483, -0.04815197363495827, -0.09118334203958511, -0.11923326551914215, -1.767177700996399, -0.013193921186029911, -0.0013533014571294188, -1.473087191581726, -0.33761775493621826, -0.010200157761573792, -0.018411099910736084, -2.4333996772766113, -0.011332547292113304, -0.027470780536532402, -0.00013863079948350787, -0.0001820160250645131, -0.06741033494472504, -0.02667914144694805, -0.611771285533905, -0.4583550989627838, -0.30800849199295044, -1.9382425546646118, -0.09719117730855942, -0.3466910719871521, -2.0093064308166504, -0.0846496969461441, -0.07644668966531754, -0.007325455546379089, -0.00396727304905653, -0.21786919236183167, -0.00020919041708111763, -0.0039132460951805115, -0.0002388668799540028, -0.0007128558354452252, -0.020744502544403076, -0.00022027450904715806, -0.0001652104256208986, -0.0025032395496964455, -0.006770172156393528, -0.05308400094509125, -0.03274895250797272, -0.20679590106010437, -0.006049418356269598, -0.032353851944208145, -0.009216619655489922, -0.13548687100410461, -0.010425982996821404, -0.9214297533035278], "finish_reason": "stop"}], "metrics": {"energy": 94.47286243247984, "energy_per_token": 1.180910780405998, "time": 4.224804, "time_per_token": 0.05281005}}
{"outputs": [{"text": "regex = re.compile(regex_pattern)\n    matches: dict = {}\n\n    for file_path in glob.glob(f'{directory_path}/*.txt'):\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches[Path(file_path).stem] = [match[0] for match in re.finditer(regex, content) if match]\n    return matches", "tokens": ["regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "matches", ":", " dict", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}", "/*", ".", "txt", "')", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "Path", "(", "file", "_", "path", ")", ".", "stem", "]", " =", " [", "match", "[", "0", "]", " for", " match", " in", " re", ".", "find", "iter", "(", "regex", ",", " content", ")", " if", " match", "]", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-3.0778212547302246, -0.33011385798454285, -0.00538434786722064, -0.00018702188390307128, -0.0005197366117499769, -0.0014841266674920917, -0.01098808366805315, -0.0001479277852922678, -9.905801562126726e-05, -0.036047544330358505, -0.05121167376637459, -0.3252623677253723, -0.26522353291511536, -2.1511669158935547, -0.08186180144548416, -0.510305643081665, -0.08134487271308899, -0.02612161450088024, -0.9285099506378174, -0.00048637480358593166, -0.47519436478614807, -0.7469074130058289, -0.5024415254592896, -0.6495944857597351, -0.02986091934144497, -0.2600451111793518, -0.0005527398898266256, -0.03088967688381672, -0.021550768986344337, -1.2083759307861328, -0.7101988196372986, -0.01754232496023178, -0.0008498394163325429, -1.2159273865108844e-05, -0.2919248342514038, -0.06810925155878067, -0.46407562494277954, -0.11273778975009918, -0.3044481575489044, -0.0008771148277446628, -0.05010192096233368, -0.03960287570953369, -0.603605329990387, -0.018925685435533524, -0.0008781867218203843, -0.01958426833152771, -1.7046782886609435e-05, -1.9311717551317997e-05, -0.24260061979293823, -0.23280352354049683, -0.04777848348021507, -0.39803484082221985, -0.001259844284504652, -0.3532530665397644, -0.012970603071153164, -0.007157518062740564, -0.008128182962536812, -2.158306360244751, -0.117250956594944, -0.008968664333224297, -0.00010907054820563644, -9.285972191719338e-05, -0.019710158929228783, -0.022616542875766754, -0.25479474663734436, -0.5697023868560791, -0.5554206967353821, -0.8327053785324097, -0.0008164886385202408, -0.007557964883744717, -0.009064002893865108, -8.689979586051777e-05, -0.002848736010491848, -0.00014888131408952177, -0.3069176971912384, -0.00803606677800417, -0.0007989790174178779, -1.9943944215774536, -0.6181338429450989, -2.4889039993286133, -0.22691155970096588, -0.003609928535297513, -0.06944801658391953, -0.0007844470092095435, -0.0017886845162138343, -2.9039604663848877, -0.005991474725306034, -8.642300235806033e-05, -1.5588592290878296, -0.0006065912893973291, -0.004086715634912252, -0.0015311434399336576, -0.0032501989044249058, -2.604856252670288, -0.09901680052280426, -0.24611957371234894, -0.4637603461742401, -0.02067175693809986, -1.6309595108032227, -0.043236032128334045, -0.005335021764039993, -0.36622440814971924, -0.010674521327018738, -1.2302768230438232], "finish_reason": "stop"}], "metrics": {"energy": 129.33945766830448, "energy_per_token": 1.2436486314260047, "time": 5.4816923, "time_per_token": 0.05270857980769231}}
{"outputs": [{"text": "matches = {}\n    directory = Path(directory_path)\n    for file_path in glob.glob(directory.joinpath(\"**/*.txt\"), recursive=True):\n        if file_path.name.startswith(\".\") or file_path.name.startswith(\"_\"):\n            continue\n\n        with open(file_path, \"r\") as f:\n            text = f.read()\n            matches[file_path.name] = re.findall(regex_pattern, text)\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "directory", " =", " Path", "(", "directory", "_", "path", ")", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "directory", ".", "join", "path", "(", "\"", "**", "/*", ".", "txt", "\"", ")", ",", " recursive", "=", "True", "):", "\n", "        ", "if", " file", "_", "path", ".", "name", ".", "start", "sw", "ith", "(", "\"", ".", "\"", ")", " or", " file", "_", "path", ".", "name", ".", "start", "sw", "ith", "(", "\"", "_", "\"", "):", "\n", "            ", "continue", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "text", " =", " f", ".", "read", "()", "\n", "            ", "matches", "[", "file", "_", "path", ".", "name", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "\n", "    ", "return", " matches"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -3.470694065093994, -1.8197557926177979, -0.1655040830373764, -0.005133898463100195, -0.005785861052572727, -0.00024577934527769685, -2.145764938177308e-06, -0.001529715140350163, -0.13745249807834625, -0.29763728380203247, -0.9732615947723389, -0.6260196566581726, -1.0143518447875977, -0.7852069139480591, -0.011530188843607903, -0.3209932744503021, -0.00035696811391972005, -0.0319642536342144, -0.02769598737359047, -0.8951274752616882, -0.22483345866203308, -0.21991033852100372, -0.0005428509321063757, -0.6565210223197937, -0.3916260004043579, -1.308233380317688, -0.5268557071685791, -0.08925667405128479, -0.05592082440853119, -0.00108624086715281, -0.07705191522836685, -0.04813697934150696, -0.009579995647072792, -0.01928192563354969, -0.005372016690671444, -0.009796753525733948, -0.06410820782184601, -0.019977901130914688, -2.4647469520568848, -0.8341498970985413, -0.0012735360069200397, -0.0014230611268430948, -0.03247295320034027, -2.3141679763793945, -1.0090852975845337, -1.2667819261550903, -5.793403761344962e-05, 0.0, -0.4954269826412201, -0.02825518697500229, -0.6356506943702698, -0.03206423670053482, -1.7047840356826782, -0.06071089580655098, -0.524767279624939, -6.818538531661034e-05, -0.00012373158824630082, -0.007727846037596464, -0.4019550085067749, -0.0919506624341011, -1.0765254497528076, -5.8530047681415454e-05, -5.960462772236497e-07, -0.024408657103776932, -0.007021158933639526, -1.219446063041687, -0.004059290047734976, -0.0601193830370903, -0.10327667742967606, -0.0026241650339215994, -0.04726489260792732, -0.10086604207754135, -2.157863140106201, -0.0009559590835124254, -0.8542289733886719, -0.061566855758428574, -0.0005194983095861971, -0.031671177595853806, -0.00029869386344216764, -6.09140915912576e-05, -0.2275976687669754, -0.4648597538471222, -0.07373945415019989, -0.01767655462026596, -0.4704575836658478, -0.0004285847535356879, -1.0559704303741455, -0.03603305667638779, -0.0026707714423537254, -0.004115564748644829, -1.3554437160491943, -0.1083405613899231, -0.017669176682829857, -8.260862523457035e-05, -3.480850500636734e-05, -0.008792140521109104, -0.016769982874393463, -0.6119117736816406, -0.6178261637687683, -0.3789454996585846, -0.1598576009273529, -5.245071224635467e-05, -4.386805812828243e-05, -0.01896042563021183, -0.4826836585998535, -0.09848608821630478, -0.0007737264968454838, -0.17854855954647064, -0.0001851148990681395, -0.0038224030286073685, -0.0002547178009990603, -0.0003933132975362241, -0.013000844977796078, -0.00026544384309090674, -5.1616290875244886e-05, -0.0024825488217175007, -0.007396338041871786, -0.08512977510690689, -0.02545035630464554, -0.41960275173187256, -0.0279396902769804, -0.03652038052678108, -0.009672560729086399], "finish_reason": "stop"}], "metrics": {"energy": 165.94151662445068, "energy_per_token": 1.296418098628521, "time": 6.740737, "time_per_token": 0.0526620078125}}
{"outputs": [{"text": "matches = {}\n    file_paths = glob.glob(os.path.join(directory_path, '**', '*.txt'), recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            text_content = f.read()\n            matches[os.path.basename(file_path)[:-4]] = re.findall(regex_pattern, text_content)\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "file", "_", "paths", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "**", "'", ",", " '", "*", ".", "txt", "')", ",", " recursive", "=", "True", ")", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "text", "_", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "[:", "-", "4", "]]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", "_", "content", ")", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -2.5944924354553223, -0.04959462955594063, -0.6492750644683838, -0.04030832648277283, -0.2839406728744507, -0.0007993363542482257, -0.006127736996859312, -0.027002232149243355, -0.8747588396072388, -3.4689302992774174e-05, -0.00047219570842571557, -0.0031052250415086746, -0.0073983496986329556, -0.008485334925353527, -0.012271851301193237, -0.0005615564878098667, -1.0371154530730564e-05, -0.0027119070291519165, -0.22862651944160461, -0.9694958329200745, -1.1719720363616943, -0.0029419257771223783, -0.022644629701972008, -0.01319427415728569, -0.06230660900473595, -0.07419978827238083, -0.2582193613052368, -0.0007750368095003068, -0.011321821250021458, -0.019965864717960358, -0.004123874939978123, -0.0018851857166737318, -0.04362206533551216, -0.3545023202896118, -0.2982490658760071, -0.25562596321105957, -0.06801013648509979, -0.011288700625300407, -0.00119138287845999, -0.00440662307664752, -9.179073458653875e-06, -1.2159273865108844e-05, -0.00029476112104021013, -0.00687649380415678, -0.010783141478896141, -0.7814611792564392, -0.01755790412425995, -0.0004058252670802176, -0.004527912009507418, -1.2278481335670222e-05, -5.8887653722194955e-05, -0.11871444433927536, -0.24387425184249878, -0.0607769750058651, -1.1912765502929688, -0.00043072958942502737, -0.03340460732579231, -0.060190439224243164, -0.07951485365629196, -0.1591603010892868, -0.0019584777764976025, -0.05159645155072212, -0.0007018963224254549, -0.9411496520042419, -0.025307519361376762, -0.0053953747265040874, -0.0031368357595056295, -1.1060864925384521, -2.2952897548675537, -0.8254572749137878, -0.0020017840433865786, -0.014181196689605713, -2.4676019165781327e-05, -3.6000557884108275e-05, -0.008675976656377316, -0.017516907304525375, -0.27886950969696045, -0.33327990770339966, -0.5366678833961487, -0.33774662017822266, -4.9828242481453344e-05, -0.0007256020326167345, -0.007338236086070538, -0.15211643278598785, -1.1920922133867862e-06, -7.331102824537084e-05, -0.014557811431586742, -3.0517112463712692e-05, -0.00014506718434859067, -0.7152588367462158, -0.8661798238754272, -0.013040851801633835, -0.015325995162129402, -0.0006386386230587959, -0.004005386959761381, -0.19379763305187225, -0.00025519452174194157, -0.0020971940830349922, -0.00014900050882715732, -0.00042715485324151814, -0.015296058729290962, -0.00026472879108041525, -5.6622808187967166e-05, -0.001846990897320211, -0.006056408863514662, -2.8609820219571702e-05, -3.0874729418428615e-05, -0.06339988857507706, -0.025364471599459648, -0.3157152831554413, -0.03171379119157791, -0.0040062181651592255, -0.3660423755645752, -0.01126807276159525, -1.0075595378875732], "finish_reason": "stop"}], "metrics": {"energy": 172.68967568111427, "energy_per_token": 1.4390806306759523, "time": 6.0971537, "time_per_token": 0.05080961416666666}}
{"outputs": [{"text": "matches = {}\n    if not os.path.isdir(directory_path):\n        print(f\"{directory_path} is not a directory!\")\n        return matches\n\n    for file in glob.glob(os.path.join(directory_path, '*')):\n        if os.path.isdir(file):\n            continue\n\n        with open(file, 'r') as file_stream:\n            file_text = file_stream.read()\n            matches_ = re.findall(regex_pattern, file_text)\n            file_name = Path(file).stem\n\n            # If regex matches were found\n            if matches_:\n                matches[file_name] = matches_\n            else:\n                matches[file_name] = []\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "print", "(", "f", "\"", "{", "directory", "_", "path", "}", " is", " not", " a", " directory", "!", "\"", ")", "\n", "        ", "return", " matches", "\n", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", "'))", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "dir", "(", "file", "):", "\n", "            ", "continue", "\n", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " file", "_", "stream", ":", "\n", "            ", "file", "_", "text", " =", " file", "_", "stream", ".", "read", "()", "\n", "            ", "matches", "_", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", "_", "text", ")", "\n", "            ", "file", "_", "name", " =", " Path", "(", "file", ")", ".", "stem", "\n", "\n", "            ", "#", " If", " regex", " matches", " were", " found", "\n", "            ", "if", " matches", "_", ":", "\n", "                ", "matches", "[", "file", "_", "name", "]", " =", " matches", "_", "\n", "            ", "else", ":", "\n", "                ", "matches", "[", "file", "_", "name", "]", " =", " []", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -2.8223042488098145, -0.4271017014980316, -0.7944822311401367, -0.0002343380037928, -0.002451155101880431, -0.0069732158444821835, -0.33522656559944153, -0.005305614788085222, -0.0003010773507412523, -0.003473560092970729, -0.0003364712174516171, -1.585470999998506e-05, -0.025907088071107864, -0.06012825295329094, -0.002961775055155158, -1.2967475652694702, -0.29509323835372925, -0.5591795444488525, -0.4989217519760132, -1.3338996171951294, -0.034109145402908325, -0.0001284993631998077, -4.088794958079234e-05, -0.05625038221478462, -0.1385565549135208, -0.03753795102238655, -0.04193393141031265, -0.4606100916862488, -2.0084824562072754, -0.12554015219211578, -0.0023222402669489384, -0.014151813462376595, -0.1909361034631729, -0.09277629107236862, -0.22094577550888062, -0.013458238914608955, -0.8702170848846436, -0.0005127069307491183, -0.7469466328620911, -0.7949385643005371, -0.9295207262039185, -0.3508465588092804, -0.00015090756642166525, -0.020973796024918556, -0.01744708977639675, -0.7803820371627808, -0.000996212475001812, -0.0005715643637813628, -0.003309727180749178, -0.003979027736932039, -0.0038352282717823982, -0.006782012525945902, -2.706014311115723e-05, -9.536738616588991e-07, -0.002215313958004117, -0.46412262320518494, -0.5439701080322266, -0.997905969619751, -0.0009234455064870417, -0.03673241287469864, -0.026902321726083755, -0.856753945350647, -0.8654605150222778, -0.00020072828920092434, -0.0018059387803077698, -0.0023298519663512707, -0.026200931519269943, -1.7638635635375977, -0.00048387263086624444, -0.006343941669911146, -0.07670032978057861, -0.05759475752711296, -0.0021146810613572598, -0.46395692229270935, -0.07585955411195755, -1.7007578611373901, -0.0009920443408191204, -0.9893378019332886, -0.013772105798125267, -0.0007313199457712471, -0.005841564387083054, -0.19269514083862305, -0.25187623500823975, -0.07620812207460403, -0.4154933989048004, -0.0006405447493307292, -1.7560405731201172, -0.9263229966163635, -4.246838569641113, -0.0018586517544463277, -0.005676815286278725, -0.010942216962575912, -1.284818410873413, -0.008584974333643913, -1.8934319019317627, -0.05498814582824707, -0.020805567502975464, -0.0010351543314754963, -4.756337511935271e-05, -6.770858453819528e-05, -0.00010358751023886725, -0.009106294251978397, -0.022890150547027588, -0.5926626324653625, -0.4493710398674011, -1.9385535717010498, -4.266167640686035, -0.20229117572307587, -0.00016985881666187197, -0.0054777758195996284, -0.008031100034713745, -0.0008861667010933161, -0.01875898241996765, -0.0002803409588523209, -0.00013243274588603526, -0.003196252044290304, -0.004786699544638395, -0.01069551520049572, -0.00021050144277978688, -0.08228185027837753, -0.02977888286113739, -0.3830374777317047, -2.7787370681762695, -0.01991923898458481, -0.23785480856895447, -0.09931259602308273, -0.8430585265159607, -0.0007757514831610024, -0.014985722489655018, -0.015767425298690796, -0.0037534041330218315, -0.33161288499832153, -0.14873243868350983, -1.9121299982070923, -0.1027030423283577, -3.3218414783477783, -2.6484062671661377, -3.837801694869995, -2.0154480934143066, -2.559359550476074, -0.14953827857971191, -1.8346363306045532, -0.0008560330606997013, -0.02295527793467045, -0.3605288565158844, -0.012438815087080002, -0.044636085629463196, -0.0032756265718489885, -0.011220097541809082, -0.0919911116361618, -0.10058428347110748, -0.008656713180243969, -0.0005820487276650965, -9.07141511561349e-05, -0.0048996382392942905, -0.0010525407269597054, -0.04706759378314018, -0.008433797396719456, -0.02448531799018383, -2.089205741882324, -0.15827304124832153, -0.0004078510100953281, -0.06415047496557236, -0.0012381753185763955, -0.7592519521713257, -0.06847711652517319, -0.013598191551864147, -0.004803190007805824, -0.00013731967192143202, -0.0035594459623098373, -0.006531675811856985, -1.5179038047790527, -0.027060246095061302, -2.1742348670959473, -0.07396621257066727, -0.0022025867365300655, -0.32636550068855286, -0.012199782766401768, -0.9668678641319275], "finish_reason": "stop"}], "metrics": {"energy": 240.27214984607699, "energy_per_token": 1.305826901337375, "time": 10.306995, "time_per_token": 0.05601627717391305}}
{"outputs": [{"text": "matches = {}\n\n    # Check that the given directory path exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: '{directory_path}'\")\n\n    # Check that the given regex pattern is a valid regular expression\n    regex = re.compile(regex_pattern)\n    if not regex:\n        raise ValueError(f\"Invalid regex pattern: '{regex_pattern}'\")\n\n    # Iterate over all files in the directory\n    for file in glob.glob(f'{directory_path}/**/*.txt'):\n        # Check if the file exists\n        if not os.path.exists(file):\n            raise FileNotFoundError(f\"File not found: '{file}'\")\n\n        # Read the file contents\n        with open(file, 'r') as f:\n            content = f.read()\n\n        # Extract matches from the content using the regular expression\n        matches_dict = regex.findall(content)\n        matches_dict = {os.path.basename(file): matches_dict}\n\n        # Update the", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "#", " Check", " that", " the", " given", " directory", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " '", "{", "directory", "_", "path", "}'", "\"", ")", "\n", "\n", "    ", "#", " Check", " that", " the", " given", " regex", " pattern", " is", " a", " valid", " regular", " expression", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "if", " not", " regex", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " regex", " pattern", ":", " '", "{", "regex", "_", "pattern", "}'", "\"", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " files", " in", " the", " directory", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}/", "**", "/*", ".", "txt", "')", ":", "\n", "        ", "#", " Check", " if", " the", " file", " exists", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "file", "):", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "File", " not", " found", ":", " '", "{", "file", "}'", "\"", ")", "\n", "\n", "        ", "#", " Read", " the", " file", " contents", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "\n", "        ", "#", " Ext", "ract", " matches", " from", " the", " content", " using", " the", " regular", " expression", "\n", "        ", "matches", "_", "dict", " =", " regex", ".", "find", "all", "(", "content", ")", "\n", "        ", "matches", "_", "dict", " =", " {", "os", ".", "path", ".", "bas", "ename", "(", "file", "):", " matches", "_", "dict", "}", "\n", "\n", "        ", "#", " Update", " the"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.3831682205200195, -2.5882530212402344, -2.4062604904174805, -0.8971281051635742, -2.985886573791504, -0.18114610016345978, -0.8043327927589417, -0.4409928023815155, -0.8021899461746216, -0.0028802361339330673, -0.19523701071739197, -0.09223116934299469, -0.11706709861755371, -1.8715683836489916e-05, -0.00018904806347563863, -0.006868206430226564, -0.5543684363365173, -0.00023326536756940186, -0.002642593812197447, -0.00027307120035402477, -7.867782187531702e-06, -0.01258055865764618, -0.0074089993722736835, -0.0015087660867720842, -0.8602880835533142, -0.6371070742607117, -0.005542151164263487, -0.0002675890573300421, -0.13217002153396606, -0.4252541661262512, -0.32763299345970154, -0.5490453839302063, -1.16379714012146, -0.002400376135483384, -0.21657860279083252, -2.9515931606292725, -0.0007312007946893573, -0.007301905658096075, -0.0002217047003796324, -0.00015567521040793508, -0.006160674151033163, -0.15168046951293945, -0.0002650863316375762, -0.0026038335636258125, -0.044037263840436935, -0.0011979315895587206, -0.3929252326488495, -1.5786981582641602, -0.3919113576412201, -0.12475945800542831, -0.47644510865211487, -0.6479107141494751, -0.09416958689689636, -0.3387790620326996, -1.4251316785812378, -0.14657443761825562, -0.5689430236816406, -0.0005308172549121082, -0.3219435513019562, -0.0017102628480643034, -2.6682944297790527, -0.9131203889846802, -0.009396257810294628, -0.0001426833332516253, -0.0011884062550961971, -0.0008270895341411233, -0.0038865283131599426, -8.999896090244874e-05, -2.2053474822314456e-05, -0.04547879844903946, -0.010844463482499123, -0.229169562458992, -0.057211607694625854, -0.11645697057247162, -0.024698171764612198, -0.8660242557525635, -0.005126070696860552, -0.0008870004676282406, -0.020167415961623192, -0.1534728705883026, -3.3854863431770355e-05, -0.019952895119786263, -0.23749952018260956, -0.015431763604283333, -0.14170439541339874, -1.0385792255401611, -0.05824613571166992, -0.026628069579601288, -0.042462609708309174, -0.0012461524456739426, -0.002118725562468171, -0.02227920852601528, -0.0030824074055999517, -0.0042177774012088776, -0.024456119164824486, -8.582700684200972e-05, -0.0012541294563561678, -0.009034468792378902, -0.0012711548479273915, -0.3629904091358185, -1.4232319593429565, -0.0041518923826515675, -0.5836479067802429, -0.32588285207748413, -0.8832778334617615, -0.10710547864437103, -0.020748121663928032, -0.283508837223053, -0.6350756287574768, -0.0008538890979252756, -0.06603792309761047, -0.5509973168373108, -1.5622189044952393, -0.8723828196525574, -0.00015925093612167984, -0.035927146673202515, -0.0142776845023036, -1.1727139949798584, -1.685550570487976, -0.009971566498279572, -2.2172682292875834e-05, -4.172316494077677e-06, -1.8249183893203735, -0.04384149610996246, -0.0692811906337738, -0.11862403154373169, -0.12634523212909698, -2.0500388145446777, -0.0012880609137937427, -0.05191521346569061, -0.11787384003400803, -0.9678187966346741, -1.5968595743179321, -0.9055236577987671, -0.20173616707324982, -0.08254893869161606, -0.7064676880836487, -0.25032442808151245, -0.0006281548412516713, -0.028827974572777748, -0.10824888199567795, -0.04116670787334442, -5.4834770708112046e-05, -0.000120751719805412, -0.0006468587671406567, -0.09615796059370041, -0.00018892886873800308, -0.0028509944677352905, -0.003998975269496441, -0.004665679298341274, -0.0007678897818550467, -0.5194023251533508, -0.02701464667916298, -0.0009242791566066444, -7.795983401592821e-05, -0.001926591619849205, -0.01343495026230812, -0.008635086007416248, -0.04114474356174469, -0.03525703027844429, -0.000303818320389837, -0.010408523492515087, -0.013551268726587296, -0.00021062063751742244, -0.007125087082386017, -0.002140613505616784, -0.00496333884075284, -9.035655966727063e-05, -0.0015927974600344896, -0.06859054416418076, -0.0012263881508260965, -0.14296621084213257, -1.5001405477523804, -0.05794806405901909, -0.6017703413963318, -0.739905834197998, -0.27070152759552, -0.00024029705673456192, -0.13000869750976562, -0.0030790797900408506, -0.00016366096679121256, -0.006471983622759581, -0.0773749127984047, -0.19610922038555145, -0.04476991668343544, -0.41492122411727905, -0.0004190520558040589, -0.09966614097356796, -0.015107027254998684, -0.00046969347749836743, -0.0008457897347398102, -2.031125068664551, -0.006371541414409876, -0.007204623892903328, -2.658331868587993e-05, -2.6225699912174605e-05, -0.007428168319165707, -0.010901655070483685, -0.03943053260445595, -0.05712750554084778, -0.033105261623859406, -0.7733321785926819, -0.0004587313160300255, -0.16599798202514648, -0.5074151754379272, -0.02561710961163044, -1.9119797945022583, -0.7353877425193787, -0.12683932483196259, -0.9731701016426086, -0.0008769956766627729, -0.7639739513397217, -0.000303818320389837, -0.3364391028881073, -0.7419308423995972, -2.4132304191589355, -0.015284670516848564, -0.5528374910354614, -0.0011761421337723732, -0.0030121691524982452, -0.01721511036157608, -0.001007645158097148, -0.003321727504953742, -0.008973981253802776, -0.008114821277558804, -1.4066860675811768, -0.39143991470336914, -1.739851951599121, -0.22993339598178864, -0.12173634767532349, -0.33636602759361267, -1.8672181367874146, -4.935142715112306e-05, -0.0017020514933392406, -0.0004907834227196872, -0.1323907971382141, -9.536738616588991e-07, -0.000700466800481081, -0.8782282471656799, -0.5542399287223816, -0.08018556237220764, -0.0698046088218689, -0.004009780008345842, -0.13688598573207855, -0.07217875123023987, -0.21964910626411438, -0.01333038229495287, -0.2955882251262665, -1.1415719985961914, -0.13724978268146515], "finish_reason": "length"}], "metrics": {"energy": 342.38651076793695, "energy_per_token": 1.3374473076872537, "time": 14.934066, "time_per_token": 0.0583361953125}}
{"outputs": [{"text": "matches = {}\n    text_file_paths = glob.glob(os.path.join(directory_path, '*.txt'))\n    for text_file_path in text_file_paths:\n        with open(text_file_path, 'r', encoding='utf-8') as file:\n            matches[os.path.basename(text_file_path)] = [match for match in re.findall(regex_pattern, file.read())]\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "text", "_", "file", "_", "paths", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "for", " text", "_", "file", "_", "path", " in", " text", "_", "file", "_", "paths", ":", "\n", "        ", "with", " open", "(", "text", "_", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "text", "_", "file", "_", "path", ")]", " =", " [", "match", " for", " match", " in", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", ".", "read", "()", ")]", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -4.215528964996338, -0.05302295461297035, -3.062091112136841, -0.015883589163422585, -0.32454049587249756, -0.033360909670591354, -0.36527758836746216, -0.0007574073388241231, -0.005829712841659784, -0.03705284744501114, -0.8984295725822449, -3.540453326422721e-05, -0.0006551980040967464, -0.003159889718517661, -0.004428698215633631, -0.008730219677090645, -0.010195791721343994, -0.000533795915544033, -1.4424220353248529e-05, -0.0024182144552469254, -0.21717244386672974, -0.46468299627304077, -0.07960612326860428, -0.05745970457792282, -0.04974299669265747, -0.05310208722949028, -0.20381124317646027, -0.2576477527618408, -0.8372132182121277, -0.0031431340612471104, -0.013414132408797741, -0.07221856713294983, -0.002599077532067895, -0.0020960045512765646, -0.0035608713515102863, -1.4305104514278355e-06, -2.3603161025675945e-05, -1.1086402082582936e-05, -1.4662635294371285e-05, -0.00023052419419400394, -0.006619312800467014, -0.010539702139794827, -0.5678489804267883, -0.007698272820562124, -0.0005664412747137249, -0.0027368729934096336, -5.245195097813848e-06, -3.302042750874534e-05, -1.8000440832111053e-05, -4.1483970562694594e-05, -0.19857539236545563, -0.1617240458726883, -0.03879452869296074, -1.2103688716888428, -0.0004942387458868325, -0.03059096448123455, -0.0661877766251564, -0.07532259821891785, -0.1696873903274536, -0.003493992844596505, -0.03244825825095177, -0.0004312062228564173, -0.9090838432312012, -0.01656024158000946, -0.005338460672646761, -0.004578108433634043, -2.9244532585144043, -0.47024813294410706, -0.22926415503025055, -3.2782016205601394e-05, -0.0005989664932712913, -0.008228094317018986, -0.13022232055664062, -9.536738616588991e-07, -9.202533692587167e-05, -0.05626852437853813, -3.6954811548639555e-06, -6.794906312279636e-06, -4.2437604861333966e-05, -1.811964830267243e-05, -0.22556324303150177, -0.00396145461127162, -2.025604009628296, -0.6178156733512878, -0.8474377393722534, -0.07476787269115448, -0.0033115092664957047, -0.007977055385708809, -8.976056415122002e-05, -0.006238155532628298, -0.01761447824537754, -0.0007584794075228274, -0.014718519523739815, -0.00012933371181134135, -5.781483559985645e-05, -0.002242433140054345, -0.029240330681204796, -0.0014659145381301641, -0.00012337400403339416, -0.14049866795539856, -0.01965229958295822, -0.015669554471969604, -0.28172266483306885, -0.029015008360147476, -0.004958831239491701, -0.17908570170402527, -0.014576021581888199, -0.8388740420341492], "finish_reason": "stop"}], "metrics": {"energy": 173.58896033287044, "energy_per_token": 1.5361854896714198, "time": 6.1122336, "time_per_token": 0.0540905628318584}}
{"outputs": [{"text": "regex = re.compile(regex_pattern)\n    matches_dict = dict()\n\n    for file_path in glob.glob(directory_path + '/**/*.txt', recursive=True):\n        with open(file_path, 'r') as file:\n            file_contents = file.read()\n\n            matches = regex.findall(file_contents)\n\n            if matches:\n                matches_dict[os.path.basename(file_path)] = matches\n\n    return matches_dict", "tokens": ["regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "matches", "_", "dict", " =", " dict", "()", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "directory", "_", "path", " +", " '", "/**", "/*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "file", "_", "contents", " =", " file", ".", "read", "()", "\n", "\n", "            ", "matches", " =", " regex", ".", "find", "all", "(", "file", "_", "contents", ")", "\n", "\n", "            ", "if", " matches", ":", "\n", "                ", "matches", "_", "dict", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")]", " =", " matches", "\n", "\n", "    ", "return", " matches", "_", "dict", "\n", "\n", "def"], "logprobs": [-3.0778212547302246, -0.33011385798454285, -0.00538434786722064, -0.00018702188390307128, -0.0005197366117499769, -0.0014841266674920917, -0.01098808366805315, -0.0001479277852922678, -9.905801562126726e-05, -0.036047544330358505, -0.05121167376637459, -0.3252623677253723, -0.26522353291511536, -2.117551803588867, -0.4006476402282715, -0.07570450752973557, -2.6129984855651855, -0.015777869150042534, -0.028453104197978973, -0.8202608227729797, -0.000557267339900136, -0.4111560583114624, -0.7379416227340698, -0.5620372295379639, -0.7784605026245117, -0.02406424656510353, -0.2515105903148651, -0.0003904534096363932, -0.02749583125114441, -0.02071344293653965, -1.1010793447494507, -0.0006188622792251408, -2.992108420585282e-05, -0.14490123093128204, -0.390182226896286, -1.2885615825653076, -0.36431726813316345, -0.08122342824935913, -0.044310204684734344, -0.1605110764503479, -0.000832449528388679, -0.003891753265634179, -0.024401908740401268, -0.006688824389129877, -0.004735682625323534, -0.047882579267024994, -0.04880204051733017, -0.6470204591751099, -0.027747584506869316, -0.0007400158210657537, -0.01111647579818964, -1.2516897186287679e-05, -1.1086402082582936e-05, -0.1813531517982483, -0.23226170241832733, -0.056520912796258926, -0.3794882893562317, -0.0005932478234171867, -0.40646135807037354, -0.011978362686932087, -0.005226994398981333, -0.007381665054708719, -1.292513132095337, -0.007879247888922691, -1.6709861755371094, -0.010356966406106949, -0.010511391796171665, -0.00013195598148740828, -6.937739817658439e-05, -0.01889176294207573, -0.017463020980358124, -1.8093769550323486, -0.8872731924057007, -0.4638468623161316, -0.038147903978824615, -0.14235348999500275, -0.0007003477076068521, -0.005418258253484964, -0.015722833573818207, -0.0005414212355390191, -0.0021398996468633413, -0.00014578233822248876, -0.0004152389301452786, -0.006000954657793045, -0.012099207378923893, -0.6303064823150635, -0.035899773240089417, -0.4786725640296936, -0.37228333950042725, -0.013342263177037239, -0.02314935438334942, -0.00414643157273531, -0.5555393099784851, -0.050855640321969986, -0.026766540482640266, -0.05484100431203842, -0.5822251439094543, -1.6689160474925302e-05, -0.000982278841547668, -0.002571730175986886, -0.11709605157375336, -1.5735502529423684e-05, -9.655486064730212e-05, -0.016715938225388527, -0.005001533310860395, -0.00018344627460464835, -0.4562203586101532, -0.0024119114968925714, -0.024606522172689438, -0.008511457592248917, -0.06825490295886993, -0.013357672840356827, -0.03022693283855915, -0.004866659641265869, -0.0017446548445150256, -1.3351351299206726e-05, -0.5400654673576355, -0.00902702659368515, -1.3526225090026855], "finish_reason": "stop"}], "metrics": {"energy": 151.3588886070252, "energy_per_token": 1.2719234336724805, "time": 6.3216205, "time_per_token": 0.053122861344537815}}
{"outputs": [{"text": "matches_dict = {}\n    # Create a dictionary to store the matches for each file\n\n    for filename in glob.glob(os.path.join(directory_path, '*.txt')):\n        with open(filename, 'r', encoding=\"utf8\") as file:\n            text = file.read()\n        matches = re.findall(regex_pattern, text)\n        matches_dict[filename.split(\"\\\\\")[-1]] = matches\n    # Read text files from the specified directory\n    # and match them with the regex pattern\n\n    return matches_dict\n    # Return the dictionary of matches", "tokens": ["matches", "_", "dict", " =", " {}", "\n", "    ", "#", " Create", " a", " dictionary", " to", " store", " the", " matches", " for", " each", " file", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "        ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "        ", "matches", "_", "dict", "[", "filename", ".", "split", "(", "\"", "\\\\", "\"", ")", "[-", "1", "]]", " =", " matches", "\n", "    ", "#", " Read", " text", " files", " from", " the", " specified", " directory", "\n", "    ", "#", " and", " match", " them", " with", " the", " regex", " pattern", "\n", "\n", "    ", "return", " matches", "_", "dict", "\n", "    ", "#", " Return", " the", " dictionary", " of", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -2.9170405864715576, -0.2698928713798523, -0.15602225065231323, -0.17732718586921692, -0.04858710244297981, -0.5141656994819641, -2.3093302249908447, -3.8665947914123535, -0.3695202171802521, -2.3586361408233643, -0.9013819694519043, -0.2019471824169159, -1.0117709636688232, -0.49985912442207336, -1.471132516860962, -0.05487508326768875, -0.09477415680885315, -0.3040952682495117, -1.33009934425354, -0.0009380945703014731, -1.2842833995819092, -1.6716089248657227, -0.039401765912771225, -0.3778027296066284, -0.00029094755882397294, -0.01726479083299637, -0.042504310607910156, -0.8289350867271423, -5.113947918289341e-05, -0.0007325111655518413, -0.005415293853729963, -0.005106738768517971, -0.010757667943835258, -0.011843248270452023, -0.0013379440642893314, -1.680836794548668e-05, -0.003838909789919853, -0.2601284682750702, -0.33386725187301636, -0.4940037131309509, -0.11862996220588684, -0.053613483905792236, -0.0014830554137006402, -0.15339627861976624, -0.07239244878292084, -1.399651050567627, -0.027558572590351105, -0.0007563352701254189, -0.015154581516981125, -0.2138253152370453, -0.15181393921375275, -0.05271449685096741, -1.092771053314209, -0.0016462358180433512, -0.03126513585448265, -2.3252243995666504, -0.02018926292657852, -0.15986238420009613, -0.8879782557487488, -0.000402250443585217, -0.0238020196557045, -0.0007894498412497342, -0.5653948783874512, -0.01955258846282959, -0.017622442916035652, -0.01504514366388321, -1.3430395126342773, -0.14717233180999756, -0.01152040809392929, -4.970903682988137e-05, -5.543078441405669e-05, -0.012600217014551163, -0.045105788856744766, -1.939355731010437, -0.36560893058776855, -0.08765057474374771, -0.07427415996789932, -0.0001817776501411572, -0.002943352097645402, -0.0068603926338255405, -0.0009176096064038575, -0.010857670567929745, -0.00010573305189609528, -8.296622399939224e-05, -0.002099454402923584, -0.007721103262156248, -0.04585155472159386, -0.05304047837853432, -0.10447879880666733, -0.3490072786808014, -0.026773735880851746, -0.004744106903672218, -0.023447850719094276, -0.9310135245323181, -0.4947163760662079, -0.35900700092315674, -1.226745843887329, -0.4889841377735138, -0.3983769714832306, -0.0023768290411680937, -0.07218507677316666, -0.001091004116460681, -0.0024397389497607946, -0.13161450624465942, -0.003955874126404524, -0.023721231147646904, -0.035457711666822433, -1.195183515548706, -2.220653772354126, -2.9705371856689453, -2.937255859375, -0.6690088510513306, -3.258924961090088, -0.19165953993797302, -0.9278035163879395, -0.0310836061835289, -1.277482032775879, -0.39503902196884155, -0.02752006985247135, -1.4179332256317139, -2.946164131164551, -1.9732494354248047, -2.1061599254608154, -0.11413877457380295, -1.5923352241516113, -0.12790459394454956, -0.22039242088794708, -0.8876746296882629, -0.0038754846900701523, -0.19674794375896454, -0.014421517960727215, -0.0006361367995850742, -1.1324817933200393e-05, -0.22804200649261475, -2.82594633102417, -0.03029378317296505, -0.42007002234458923, -0.4769110679626465, -0.29807978868484497, -0.5158706307411194, -0.11286111176013947, -0.7427176237106323, -0.04951499029994011, -0.9031646251678467], "finish_reason": "stop"}], "metrics": {"energy": 207.10250337982174, "energy_per_token": 1.4282931267573913, "time": 7.791936, "time_per_token": 0.05373748965517241}}
{"outputs": [{"text": "matches: dict = {}\n    regex_pattern: str = r'(?:(?:\\\\)?)(.+?)(?:\\\\)?'\n    regex_obj: re.Pattern = re.compile(regex_pattern)\n\n    path: Path = Path(directory_path)\n\n    for file in sorted(glob.glob(path.joinpath('**/*.txt'), recursive=True)):\n        with open(file, 'r', encoding='utf-8') as text_file:\n            text: str = text_file.read()\n            matches.update({file.name: list(regex_obj.findall(text))})\n\n    return matches", "tokens": ["matches", ":", " dict", " =", " {}", "\n", "    ", "regex", "_", "pattern", ":", " str", " =", " r", "'(", "?", ":(", "?", ":\\\\", ")", "?", ")(", ".", "+", "?", ")(", "?", ":\\\\", ")", "?", "'", "\n", "    ", "regex", "_", "obj", ":", " re", ".", "Pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "\n", "    ", "path", ":", " Path", " =", " Path", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "for", " file", " in", " sorted", "(", "glob", ".", "glob", "(", "path", ".", "join", "path", "('", "**", "/*", ".", "txt", "')", ",", " recursive", "=", "True", "))", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " text", "_", "file", ":", "\n", "            ", "text", ":", " str", " =", " text", "_", "file", ".", "read", "()", "\n", "            ", "matches", ".", "update", "({", "file", ".", "name", ":", " list", "(", "regex", "_", "obj", ".", "find", "all", "(", "text", "))", "})", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5273642539978027, -1.6774585247039795, -0.054468877613544464, -0.4905143678188324, -0.1326528787612915, -0.036598995327949524, -0.5048800110816956, -2.150264024734497, -1.874276876449585, -0.2533835172653198, -1.3698091506958008, -0.2949352562427521, -0.021884381771087646, -0.8646700978279114, -2.5868980884552, -0.8656116724014282, -3.3306281566619873, -0.08181808143854141, -1.4220027923583984, -1.9135856628417969, -0.1329258531332016, -2.9554150104522705, -0.693374752998352, -0.16116298735141754, -0.16940848529338837, -1.085770845413208, -0.033015187829732895, -0.3207806646823883, -0.3109300434589386, -0.004559952765703201, -0.13598914444446564, -0.2674669027328491, -0.3515404462814331, -1.461079716682434, -1.9664573669433594, -1.167525291442871, -0.5676128268241882, -0.10026395320892334, -0.06437550485134125, -0.032042764127254486, -0.17433114349842072, -0.001994050806388259, -0.0006581762572750449, -0.00027211778797209263, -0.0020759000908583403, -0.015251093544065952, -5.94836674281396e-05, -7.64102369430475e-05, -0.09490686655044556, -0.015457235276699066, -0.849260151386261, -0.0008829509024508297, -3.554628372192383, -0.9431547522544861, -0.1002267524600029, -0.03228390961885452, -0.01846727542579174, -0.01239289715886116, -0.009739735163748264, -0.00020215852418914437, -7.152531907195225e-06, -0.002931585069745779, -0.0846954807639122, -1.1565520763397217, -0.0003768687602132559, -0.650570809841156, -0.6839119791984558, -1.0473474264144897, -2.999000072479248, -0.008442072197794914, -0.08061456680297852, -0.0006180283380672336, -0.02624424546957016, -0.03490885719656944, -1.5011085271835327, -0.2915365993976593, -0.24626876413822174, -0.0012056708801537752, -0.9637001156806946, -0.6039611101150513, -1.066599726676941, -0.35203108191490173, -0.10769982635974884, -0.15162311494350433, -0.030187029391527176, -0.009847276844084263, -0.019179370254278183, -0.005546892993152142, -0.1685817539691925, -0.0021470370702445507, -0.04044239968061447, -0.09123709797859192, -1.0646058320999146, -0.21634742617607117, -0.002170232590287924, -0.04305848851799965, -0.2925630509853363, -0.5080049633979797, -0.09653600305318832, -0.7356250882148743, -0.0016813441179692745, -0.03439367935061455, -0.07140497863292694, -0.10948511213064194, -0.17580179870128632, -0.005829949863255024, -0.07192563265562057, -0.0010087168775498867, -2.679431676864624, -0.17657841742038727, -0.014429742470383644, -0.003722406690940261, -0.005695543251931667, -0.03040006197988987, -1.6511410474777222, -0.3832680284976959, -0.02806093916296959, -0.005539542995393276, -0.033469054847955704, -0.0003133521240670234, -2.3007127310847864e-05, -0.00014506718434859067, -0.0002019201492657885, -0.019480925053358078, -0.027872798964381218, -0.40299665927886963, -0.38741520047187805, -1.3338255882263184, -0.3423354923725128, -0.5407640337944031, -0.36579981446266174, -0.025760715827345848, -1.1552491188049316, -0.25241947174072266, -2.3634276390075684, -0.00795186497271061, -0.057543665170669556, -0.0009410720085725188, -0.0003507714136503637, -5.2689116273541003e-05, -0.0005708495154976845, -0.09243258088827133, -0.000959531927946955, -0.005464260466396809, -0.008679995313286781, -0.006210670340806246, -0.014989950694143772, -0.27051663398742676, -0.009768304415047169, -0.05753522366285324, -0.017289279028773308, -1.8631811141967773, -3.099436753473128e-06, -1.1920922133867862e-06, -6.353653589030728e-05, -0.0001510267611593008, -0.12189370393753052], "finish_reason": "stop"}], "metrics": {"energy": 195.23354639053343, "energy_per_token": 1.243525773188111, "time": 8.415242, "time_per_token": 0.05360026751592356}}
{"outputs": [{"text": "matches = {}\n    # Extract the filenames and paths of all text files in the directory\n    filenames = [f.name for f in Path(directory_path).glob(\"**/*.txt\")]\n\n    for filename in filenames:\n        with open(os.path.join(directory_path, filename), \"r\") as file:\n            contents = file.read()\n\n            pattern = re.compile(regex_pattern)\n            matches_in_file = pattern.findall(contents)\n            matches[filename] = matches_in_file\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "#", " Ext", "ract", " the", " fil", "en", "ames", " and", " paths", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "fil", "en", "ames", " =", " [", "f", ".", "name", " for", " f", " in", " Path", "(", "directory", "_", "path", ")", ".", "glob", "(", "\"", "**", "/*", ".", "txt", "\"", ")]", "\n", "\n", "    ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " filename", ")", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "\n", "            ", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "            ", "matches", "_", "in", "_", "file", " =", " pattern", ".", "find", "all", "(", "contents", ")", "\n", "            ", "matches", "[", "filename", "]", " =", " matches", "_", "in", "_", "file", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -2.603407382965088, -3.4138736724853516, -0.06855392456054688, -2.9023056030273438, -4.104939937591553, -0.0010780243901535869, -9.77468371274881e-05, -1.9819368124008179, -1.3459898233413696, -1.464808702468872, -0.22525104880332947, -0.4284834563732147, -0.004424544516950846, -0.2234315127134323, -0.10914720594882965, -0.4858672022819519, -0.30274394154548645, -0.003352024592459202, -1.5161386728286743, -0.00022623363474849612, -3.45700973412022e-05, -0.20541685819625854, -0.7547503709793091, -1.2114073038101196, -0.9805048108100891, -0.28692302107810974, -0.021847642958164215, -0.0004378790326882154, -0.00029416524921543896, -0.09920832514762878, -0.006279618479311466, -0.0022753796074539423, -0.0004107108688913286, -5.483612312673358e-06, -0.00045980370487086475, -0.00022599527437705547, -0.6136938333511353, -1.6150168180465698, -0.06030009686946869, -0.5380750894546509, -0.01055598072707653, -0.02651790715754032, -0.052241113036870956, -0.0023409125860780478, -0.13115090131759644, -0.02477632276713848, -1.8689680099487305, -0.0006376855308189988, -0.6192504167556763, -0.17387832701206207, -0.005158211104571819, -0.005206597037613392, -4.0531076592742465e-06, -3.3378546504536644e-06, -0.0003389737685211003, -0.012035724706947803, -0.02035888098180294, -1.4705073833465576, -0.02911621332168579, -0.003146223723888397, -0.6252331733703613, -1.9430925021879375e-05, -0.00025555206229910254, -0.0025659038219600916, -0.0008781867218203843, -0.00022551853908225894, -0.0032854885794222355, -4.0531076592742465e-06, -2.3841830625315197e-06, -0.00037520044133998454, -0.018295111134648323, -0.16126374900341034, -0.00025340684805996716, -1.067635416984558, -0.08990933746099472, -0.032616499811410904, -0.16446702182292938, -0.0002719986077863723, -0.6152032017707825, -0.010045683942735195, -0.007473486941307783, -0.008744282647967339, -2.3928897380828857, -0.0018473479431122541, -0.015104561112821102, -2.47952248173533e-05, -3.480850500636734e-05, -0.025150248780846596, -0.029640018939971924, -0.7541185617446899, -0.7250489592552185, -3.669022560119629, -0.02784358337521553, -0.04161769151687622, -5.781483559985645e-05, -0.23215320706367493, -0.0006847421173006296, -0.009051362983882427, -4.565611743601039e-05, -5.519237674889155e-05, -0.0404057614505291, -0.025215113535523415, -0.0880376324057579, -0.2155582308769226, -0.6804943680763245, -1.4328513145446777, -0.0019114810274913907, -0.12494643032550812, -0.007005651481449604, -0.24420768022537231, -2.098061486321967e-05, -0.0019403931219130754, -0.018342163413763046, -0.0001333863037871197, -0.0024070357903838158, -0.004453621339052916, -0.015042208135128021, -1.2346687316894531, -0.44075632095336914, -0.21252967417240143, -0.009256187826395035, -0.056839797645807266, -0.0004233417857903987, -0.02384182997047901, -0.00025519452174194157, -2.6225699912174605e-05, -1.1920922133867862e-06, -5.483612312673358e-06, -0.027714770287275314, -0.24407356977462769, -0.01749008148908615, -0.03334811329841614, -0.00867834035307169, -1.9360847473144531, -1.5497195136049413e-06, -9.536738616588991e-07, -7.354942499659956e-05, -0.00011789103882620111, -0.23381873965263367], "finish_reason": "stop"}], "metrics": {"energy": 198.3104545574189, "energy_per_token": 1.37715593442652, "time": 7.775189, "time_per_token": 0.053994368055555554}}
{"outputs": [{"text": "matches = {}\n    matches = {}\n    for filename in glob.glob(os.path.join(directory_path, '*.txt')):\n        with open(filename, 'r') as file:\n            text = file.read()\n            matches[os.path.basename(filename).rsplit('.', 1)[0]] = re.findall(regex_pattern, text)\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")", ".", "r", "split", "('", ".", "'", ",", " ", "1", ")[", "0", "]]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -3.8961281776428223, -1.4751677513122559, -1.3771679401397705, -0.04059808328747749, -0.2735578119754791, -0.9745017290115356, -1.7018253803253174, -0.06647928059101105, -0.31350937485694885, -0.0005137792322784662, -0.02168375998735428, -0.032490722835063934, -1.0430060625076294, -6.782778655178845e-05, -0.0010618292726576328, -0.002828052267432213, -0.008013715967535973, -0.009056088514626026, -0.017498867586255074, -0.0016313589876517653, -3.576214658096433e-05, -0.004957526456564665, -0.35174474120140076, -0.35700419545173645, -0.37436577677726746, -0.12902122735977173, -0.0892239660024643, -0.0020428281277418137, -0.05455195903778076, -0.03274722024798393, -0.5645498037338257, -0.020054085180163383, -0.0014672239776700735, -0.02191423811018467, -0.2500954568386078, -0.2135615199804306, -0.06365450471639633, -0.35609859228134155, -0.0014211564557626843, -0.5821499228477478, -0.017445800825953484, -0.005399168934673071, -0.007261431775987148, -1.004826545715332, -0.09193000197410583, -0.010255616158246994, -6.5205356804654e-05, -5.876845170860179e-05, -0.011238839477300644, -0.013750706799328327, -0.36956512928009033, -0.29247987270355225, -0.17610062658786774, -1.3524370193481445, -0.0005415403284132481, -0.0003766304289456457, -0.004799749702215195, -0.15567797422409058, -9.536697689327411e-06, -0.00016878610767889768, -0.019182059913873672, -0.8309555053710938, -0.3936712145805359, -2.784254550933838, -1.0108195543289185, -0.14543086290359497, -0.0034705903381109238, -0.2652412950992584, -0.00018869050836656243, -0.2946886420249939, -0.005002956837415695, -0.0022753796074539423, -0.0010667116148397326, -0.0028827323112636805, -0.009161222726106644, -0.18667101860046387, -0.00021979777375236154, -0.0021121830213814974, -0.0002060916303889826, -0.0008060067193582654, -0.015206830576062202, -0.0001436368766007945, -0.00016211149340961128, -0.002298334613442421, -0.010292074643075466, -0.07014373689889908, -0.02201768010854721, -0.3924119174480438, -0.03310064971446991, -0.005871430039405823, -0.382619708776474, -0.023176727816462517, -1.0669180154800415], "finish_reason": "stop"}], "metrics": {"energy": 146.0436115036011, "energy_per_token": 1.4902409337102154, "time": 5.060307, "time_per_token": 0.05163578571428571}}
{"outputs": [{"text": "# Create a dictionary to store the matches\n    matches = {}\n\n    # Create a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, '**/*.txt'), recursive=True)\n\n    # Iterate through all text files\n    for text_file in text_files:\n        # Get the relative path of the text file\n        relative_path = os.path.relpath(text_file, directory_path)\n        relative_path = relative_path.replace(os.path.sep, os.path.altsep or os.path.sep)\n\n        # Read the contents of the file\n        with open(text_file, 'r', encoding='utf-8') as f:\n            contents = f.read()\n\n        # Use re to find matches based on the regex pattern\n        matches[relative_path] = re.findall(regex_pattern, contents)\n\n    return matches", "tokens": ["#", " Create", " a", " dictionary", " to", " store", " the", " matches", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "**", "/*", ".", "txt", "')", ",", " recursive", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " text", " files", "\n", "    ", "for", " text", "_", "file", " in", " text", "_", "files", ":", "\n", "        ", "#", " Get", " the", " relative", " path", " of", " the", " text", " file", "\n", "        ", "relative", "_", "path", " =", " os", ".", "path", ".", "rel", "path", "(", "text", "_", "file", ",", " directory", "_", "path", ")", "\n", "        ", "relative", "_", "path", " =", " relative", "_", "path", ".", "replace", "(", "os", ".", "path", ".", "sep", ",", " os", ".", "path", ".", "alt", "sep", " or", " os", ".", "path", ".", "sep", ")", "\n", "\n", "        ", "#", " Read", " the", " contents", " of", " the", " file", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "contents", " =", " f", ".", "read", "()", "\n", "\n", "        ", "#", " Use", " re", " to", " find", " matches", " based", " on", " the", " regex", " pattern", "\n", "        ", "matches", "[", "relative", "_", "path", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " contents", ")", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-2.5149855613708496, -2.542799949645996, -0.38412466645240784, -0.6367080807685852, -0.1794786900281906, -0.16003650426864624, -0.8465568423271179, -0.7284778356552124, -0.8364197015762329, -0.0029786527156829834, -0.06042455509305, -0.26740002632141113, -0.1029992550611496, -0.0027777680661529303, -0.2089013308286667, -0.0006858142442069948, -0.08697130531072617, -2.7040586471557617, -0.09614388644695282, -0.6545522809028625, -0.12258204817771912, -1.0895310640335083, -1.0000379085540771, -0.05031891539692879, -0.09926974773406982, -0.03264303877949715, -0.3496066629886627, -0.2641524076461792, -0.0009155849111266434, -1.1957604885101318, -0.015870213508605957, -0.010033292695879936, -0.012650245800614357, -0.5270109176635742, -0.0004396664153318852, -0.0025257135275751352, -0.029921429231762886, -0.5367882251739502, -2.407998726994265e-05, -0.0002512616047170013, -0.0024486577603965998, -0.001979655120521784, -0.006107595283538103, -0.0087501909583807, -0.00048339602653868496, -5.006777428206988e-06, -0.00213668798096478, -0.18388330936431885, -1.0504484176635742, -0.2262072116136551, -0.008976462297141552, -0.03765597566962242, -0.15451321005821228, -0.0006456674309447408, -0.008220882155001163, -0.010306705720722675, -0.003695802530273795, -0.0007606235449202359, -0.009533237665891647, -0.05662624165415764, -0.000581572181545198, -0.16564390063285828, -0.49773427844047546, -0.0007443041540682316, -1.0006264448165894, -1.6203693151474, -0.13649824261665344, -0.0013452060520648956, -0.3100486397743225, -0.0006127863889560103, -0.004413150716573, -0.8910434246063232, -0.0054270317777991295, -0.008314046077430248, -0.037099942564964294, -0.0019903627689927816, -1.0967194612021558e-05, -2.50339189733495e-06, -9.810443589231e-05, -0.000840906286612153, -0.12872254848480225, -0.30977973341941833, -1.2938241958618164, -0.04938598722219467, -2.1634631156921387, -0.23939669132232666, -0.9040442705154419, -0.010977353900671005, -0.3910220265388489, -0.02663886547088623, -0.5288423895835876, -0.0007360848248936236, -0.2922271192073822, -0.0010517071932554245, -0.0328407809138298, -0.005076850764453411, -0.3160954713821411, -2.47952248173533e-05, -0.0007640779949724674, -0.0018148632952943444, -0.005665198899805546, -3.123234637314454e-05, -0.0001616347290109843, -0.010209361091256142, -3.3378546504536644e-06, -9.047575440490618e-05, -0.0051687657833099365, -0.18076202273368835, -0.00011693747364915907, -1.4305104514278355e-06, -0.0018256916664540768, -0.010961907915771008, -1.312999963760376, -3.1728875637054443, -0.000596107158344239, -0.18854951858520508, -0.10873327404260635, -0.5664286613464355, -0.00010573305189609528, -3.194758028257638e-05, -0.03166124224662781, -0.04060369357466698, -0.7773178219795227, -0.18870104849338531, -0.0009047467028722167, -1.4557610750198364, -0.019721612334251404, -0.002623570617288351, -0.002035690238699317, -2.805365800857544, -0.00011014331539627165, -0.03325702250003815, -0.0014776989119127393, -0.23891325294971466, -0.0005857420619577169, -1.026017427444458, -0.027552425861358643, -6.389413465512916e-05, -0.011999682523310184, -5.722029527532868e-06, -0.00014768941036891192, -0.0026163177099078894, -0.1073547825217247, -0.49022790789604187, -0.0006866481271572411, -0.04942626878619194, -1.6944618225097656, -0.0192758459597826, -0.683606743812561, -0.0031943507492542267, -0.004585702903568745, -2.7788190841674805, -0.28879210352897644, -0.00028153270250186324, -0.0813344344496727, -0.002256944077089429, -0.00021824838768225163, -0.008465713821351528, -1.490105023549404e-05, -3.7431014789035544e-05, -0.1295630931854248, -0.20837388932704926, -0.054861992597579956, -0.8819853067398071, -5.674201020156033e-05, -0.01621604897081852, -0.04219841957092285, -0.038598645478487015, -0.10388017445802689, -0.0006560318870469928, -0.05868903547525406, -0.0001541257370263338, -0.64013671875, -0.010365107096731663, -0.0002811751910485327, -0.0009548871894367039, -0.2790742516517639, -0.0011610202491283417, -0.00829583965241909, -6.198863957251888e-06, -1.3112935448589269e-05, -0.0223833117634058, -0.007782613392919302, -0.033713314682245255, -0.05081428587436676, -0.03182223066687584, -1.377084493637085, -2.1690773963928223, -1.2736753225326538, -0.8450077176094055, -0.5757579803466797, -3.365629196166992, -0.0004430027911439538, -0.052571769803762436, -1.6451090574264526, -0.04587876796722412, -0.11811390519142151, -0.0004583738627843559, -0.3395654261112213, -1.1291553974151611, -0.01394481398165226, -2.7418097943154862e-06, -4.0531076592742465e-06, -0.022569458931684494, -0.00010466027742950246, -0.13908261060714722, -0.00012110930401831865, -0.0008191090892069042, -0.00016175392374861985, -0.00035851728171110153, -0.005232567898929119, -0.0001292145170737058, -2.753696753643453e-05, -0.0015066235791891813, -0.002241719514131546, -0.04765607789158821, -0.009424599818885326, -0.02524847351014614, -0.016275396570563316, -0.2232181280851364, -0.004231547005474567, -0.2755621671676636, -0.010005793534219265, -0.960692286491394], "finish_reason": "stop"}], "metrics": {"energy": 322.02221226310746, "energy_per_token": 1.4375991618888726, "time": 12.398504, "time_per_token": 0.05535046428571429}}
{"outputs": [{"text": "matches = {}\n\n    for filename in glob.glob(directory_path):\n\n        with open(filename, 'r', encoding=\"utf8\") as f:\n            text = f.read()\n            match = re.search(regex_pattern, text, re.I)\n\n            if match:\n                matches[Path(filename).stem] = match.groups()\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "directory", "_", "path", "):", "\n", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " f", ":", "\n", "            ", "text", " =", " f", ".", "read", "()", "\n", "            ", "match", " =", " re", ".", "search", "(", "regex", "_", "pattern", ",", " text", ",", " re", ".", "I", ")", "\n", "\n", "            ", "if", " match", ":", "\n", "                ", "matches", "[", "Path", "(", "filename", ")", ".", "stem", "]", " =", " match", ".", "groups", "()", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.087275505065918, -1.5804836750030518, -0.04354240372776985, -0.30595818161964417, -0.00031609306461177766, -0.025875376537442207, -0.029654715210199356, -1.2545218467712402, -0.0006522196927107871, -6.627816765103489e-05, -2.5725584030151367, -0.08185169100761414, -2.859755277633667, -0.006689061410725117, -1.6406289339065552, -0.061449602246284485, -0.0017641709418967366, -0.03520846739411354, -0.23207230865955353, -0.4069744944572449, -0.07277171313762665, -1.1497340202331543, -0.006363486871123314, -0.049395520240068436, -2.1488866806030273, -0.03550223633646965, -0.205084428191185, -0.8827731013298035, -0.0006177900941111147, -0.044955477118492126, -0.0008063640561886132, -1.122291922569275, -0.04232778027653694, -0.02219270169734955, -0.13775750994682312, -1.276534914970398, -0.12618069350719452, -0.03156641870737076, -8.49926145747304e-05, -0.00011932138295378536, -0.017260806635022163, -0.025666259229183197, -1.1132915019989014, -2.6274430751800537, -0.3784950077533722, -0.016004901379346848, -0.00017581824795342982, -2.1165571212768555, -0.0016041041817516088, -0.011576500721275806, -8.821098163025454e-05, -0.00011836781777674332, -0.003353568958118558, -0.03019235096871853, -1.8392384052276611, -0.1374102234840393, -0.0001110968878492713, -2.236203670501709, -0.09341753274202347, -0.03547381982207298, -0.6250277757644653, -0.14097008109092712, -0.17178992927074432, -0.06463088095188141, -0.19017310440540314, -0.01790444552898407, -0.051184605807065964, -0.854046642780304, -0.13182297348976135, -1.2680671215057373, -0.0008536509121768177, -0.04052722826600075, -0.003907308913767338, -0.00019167017308063805, -0.2733800709247589, -0.021847177296876907, -0.007281195372343063, -0.45464569330215454, -0.02409694716334343, -0.8101720809936523, -0.1716262698173523, -0.04854939877986908, -0.14254030585289001, -0.029278535395860672, -0.031048936769366264, -0.005764763802289963, -2.085583209991455, -6.079655122448457e-06, -1.1920922133867862e-06, -0.00011455356434453279, -0.00018189683032687753, -0.10148316621780396], "finish_reason": "stop"}], "metrics": {"energy": 124.30352239322667, "energy_per_token": 1.2684032897268027, "time": 5.4784703, "time_per_token": 0.0559027581632653}}
{"outputs": [{"text": "matches = {}\n\n    regex_pattern = REGEX_PATTERN if regex_pattern is None else regex_pattern\n    regex = re.compile(regex_pattern)\n\n    for file_path in Path(directory_path).glob('**/*.txt'):\n        try:\n            with open(file_path, 'r') as f:\n                content = f.read()\n                matches[file_path.stem] = regex.findall(content)\n        except (FileNotFoundError, UnicodeDecodeError):\n            continue\n\n    return matches\n\nREGEX_PATTERN = '((?:[^\\]\\\\]|(\\\\.))+)'\nREGEX_PATTERN = r'((?:[^]\\\\]|(\\\\.))+)'", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "regex", "_", "pattern", " =", " REG", "EX", "_", "P", "AT", "TERN", " if", " regex", "_", "pattern", " is", " None", " else", " regex", "_", "pattern", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "\n", "    ", "for", " file", "_", "path", " in", " Path", "(", "directory", "_", "path", ")", ".", "glob", "('", "**", "/*", ".", "txt", "')", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "matches", "[", "file", "_", "path", ".", "stem", "]", " =", " regex", ".", "find", "all", "(", "content", ")", "\n", "        ", "except", " (", "File", "NotFound", "Error", ",", " Un", "icode", "Dec", "ode", "Error", "):", "\n", "            ", "continue", "\n", "\n", "    ", "return", " matches", "\n", "\n", "REG", "EX", "_", "P", "AT", "TERN", " =", " '", "((", "?", ":[", "^\\", "]\\\\", "]", "|", "(\\\\", ".", "))", "+", ")'", "\n", "REG", "EX", "_", "P", "AT", "TERN", " =", " r", "'", "((", "?", ":[", "^", "]\\\\", "]", "|", "(\\\\", ".", "))", "+", ")'", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -2.9276208877563477, -1.5569419860839844, -0.19306021928787231, -0.04831112176179886, -1.9758923053741455, -0.00015627116954419762, -0.0008764001540839672, -0.001405086019076407, -0.004550103098154068, -0.0022834674455225468, -0.4962999224662781, -0.23035909235477448, -3.099393507000059e-05, -4.31528314948082e-05, -0.04535713419318199, -0.010833850130438805, -0.030256425961852074, -0.042444441467523575, -6.318072337307967e-06, -8.702239938429557e-06, -0.015674717724323273, -0.843283474445343, -1.0022850036621094, -0.21594415605068207, -0.0011601868318393826, -8.964136941358447e-05, -0.000655793643090874, -0.002719396958127618, -0.02006974257528782, -0.0006739014061167836, -9.179073458653875e-06, -0.05866587907075882, -0.015026120468974113, -0.1747058928012848, -0.00035482310340739787, -0.5355641841888428, -0.6976258158683777, -0.44494542479515076, -0.7118053436279297, -0.018080422654747963, -1.4522401094436646, -0.006033303216099739, -0.0020999303087592125, -0.00048530244384892285, -7.390948667307384e-06, -0.0005936052766628563, -0.00016211149340961128, -0.46883657574653625, -0.2236258089542389, -0.6229456067085266, -0.02083580568432808, -0.1640317738056183, -0.0509263351559639, -0.0018454440869390965, -0.0008411445305682719, -0.050566915422677994, -0.04913826286792755, -2.65097713470459, -0.0001262346631847322, -0.004937123507261276, -0.0024737492203712463, -0.30770689249038696, -0.11646366119384766, -0.0004223884898237884, -0.026542749255895615, -4.529942543740617e-06, -2.1219027985353023e-05, -0.20574647188186646, -0.1925368309020996, -0.04946279898285866, -0.5003410577774048, -0.0005429700831882656, -1.1706252098083496, -0.023059425875544548, -0.004730225075036287, -0.0025864739436656237, -1.7221901416778564, -0.005284270271658897, -0.011333136819303036, -2.8967437174287625e-05, -3.302042750874534e-05, -0.010661900974810123, -0.018279660493135452, -0.43692994117736816, -0.3756597638130188, -0.485491544008255, -0.2614555358886719, -3.015949550899677e-05, -7.760223525110632e-05, -0.018054665997624397, -0.5576634407043457, -0.004422764293849468, -0.0005816913326270878, -0.5787044167518616, -0.000692842761054635, -0.000894027529284358, -0.0014354411978274584, -0.0003575639275368303, -0.001953480765223503, -0.004887301009148359, -0.022684136405587196, -0.07621486485004425, -0.0030039683915674686, -2.5109663009643555, -1.2154384851455688, -0.0017243054462596774, -0.0002083561266772449, -0.01802738569676876, -1.9784393310546875, -0.007483780849725008, -0.04444944113492966, -0.019756793975830078, -5.113947918289341e-05, -0.45488089323043823, -0.03858098387718201, -0.0020996923558413982, -1.1099644899368286, -0.03899724781513214, -0.1461743712425232, -0.004459792748093605, -0.030991269275546074, -0.00826143566519022, -0.15325872600078583, -0.006108542904257774, -1.112748622894287, -7.772143726469949e-05, -0.0007078525959514081, -0.0043069226667284966, -5.566918844124302e-05, -0.0012212683213874698, -0.017055271193385124, -2.941612482070923, -3.673488140106201, -0.5548246502876282, -2.1352686882019043, -2.792983293533325, -4.134283065795898, -1.6329565048217773, -2.1188082695007324, -2.631993293762207, -2.093475818634033, -0.6657304167747498, -0.6900757551193237, -0.18404199182987213, -0.40593594312667847, -3.0877294540405273, -0.0003983181086368859, -0.05470704659819603, -0.14267487823963165, -0.014306828379631042, -0.003098451066762209, -1.0645747184753418, -0.9293442368507385, -1.0486432313919067, -0.6711694598197937, -0.03551466017961502, -0.14803484082221985, -2.746269941329956, -3.928527593612671, -0.22643955051898956, -0.18887437880039215, -0.10947389900684357, -0.07993126660585403, -0.03931787237524986, -0.09105971455574036, -0.019093645736575127, -0.33380910754203796, -0.5643664002418518, -0.5688355565071106], "finish_reason": "stop"}], "metrics": {"energy": 235.24734923934943, "energy_per_token": 1.3442705670819968, "time": 9.463123, "time_per_token": 0.05407498857142857}}
{"outputs": [{"text": "matches: dict[str, list[str]] = {}\n\n    if not os.path.isdir(directory_path):\n        raise RuntimeError(\"Invalid directory path\")\n\n    for file_name in Path(directory_path).glob('*'):\n        file_name: Path = file_name\n        if not file_name.is_file() or not file_name.suffix.lower() == '.txt':\n            continue\n\n        with open(file_name, 'r', encoding='utf8') as file:\n            lines = file.readlines()\n\n            pattern = re.compile(regex_pattern)\n            matches_in_file = {file_name: pattern.findall(\"\\n\".join(lines))}\n\n            for file_name, file_matches in matches_in_file.items():\n                matches[file_name] = file_matches\n\n    return matches", "tokens": ["matches", ":", " dict", "[", "str", ",", " list", "[", "str", "]]", " =", " {}", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Runtime", "Error", "(", "\"", "Invalid", " directory", " path", "\"", ")", "\n", "\n", "    ", "for", " file", "_", "name", " in", " Path", "(", "directory", "_", "path", ")", ".", "glob", "('", "*", "')", ":", "\n", "        ", "file", "_", "name", ":", " Path", " =", " file", "_", "name", "\n", "        ", "if", " not", " file", "_", "name", ".", "is", "_", "file", "()", " or", " not", " file", "_", "name", ".", "suff", "ix", ".", "lower", "()", " ==", " '", ".", "txt", "':", "\n", "            ", "continue", "\n", "\n", "        ", "with", " open", "(", "file", "_", "name", ",", " '", "r", "'", ",", " encoding", "='", "utf", "8", "')", " as", " file", ":", "\n", "            ", "lines", " =", " file", ".", "read", "lines", "()", "\n", "\n", "            ", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "            ", "matches", "_", "in", "_", "file", " =", " {", "file", "_", "name", ":", " pattern", ".", "find", "all", "(", "\"", "\\", "n", "\"", ".", "join", "(", "lines", "))", "}", "\n", "\n", "            ", "for", " file", "_", "name", ",", " file", "_", "matches", " in", " matches", "_", "in", "_", "file", ".", "items", "():", "\n", "                ", "matches", "[", "file", "_", "name", "]", " =", " file", "_", "matches", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5273642539978027, -1.6774585247039795, -0.054468877613544464, -0.9940716028213501, -0.08607961982488632, -0.06355617940425873, -0.06575533002614975, -0.22099711000919342, -0.11969364434480667, -0.04597087949514389, -0.022067122161388397, -0.16201362013816833, -0.037807393819093704, -0.7735493779182434, -0.000865680689457804, -3.1409828662872314, -0.4055362343788147, -0.8211056590080261, -0.00026174934464506805, -0.0030125256162136793, -0.008801593445241451, -0.34196600317955017, -0.00485835550352931, -0.0003079893649555743, -0.006093732547014952, -0.0007689617923460901, -1.5735502529423684e-05, -0.024601520970463753, -0.037623487412929535, -0.002148345345631242, -0.8220545053482056, -3.6394944190979004, -0.016429614275693893, -0.20413243770599365, -1.5641579627990723, -2.5038347244262695, -0.34708747267723083, -0.3526589870452881, -1.0416358709335327, -0.005932935513556004, -0.01950535923242569, -0.11194469034671783, -0.00068926892708987, -0.8577293157577515, -0.7746533751487732, -0.4740271270275116, -0.8975062370300293, -0.07424892485141754, -2.7426702976226807, -0.0034165363758802414, -0.0031436095014214516, -4.327203714638017e-05, -9.059865078597795e-06, -0.0005932478234171867, -0.00024434918304905295, -0.41536852717399597, -0.5243726372718811, -0.6485061049461365, -0.4104035794734955, -0.013027319684624672, -0.040266647934913635, -0.0495452806353569, -2.293196201324463, -0.07300622761249542, -0.642071545124054, -2.0296995639801025, -0.356668621301651, -0.38324224948883057, -0.4977222681045532, -0.0003301552205812186, -0.00020144341397099197, -0.6326494812965393, -0.37301918864250183, -0.3398604393005371, -0.9672242403030396, -0.07051752507686615, -0.0004532501916401088, -0.00022349244682118297, -0.00052998325554654, -0.141798734664917, -1.8715683836489916e-05, -0.013449182733893394, -1.4372378587722778, -0.028411507606506348, -0.4593644440174103, -0.13405711948871613, -0.00026675479602999985, -0.0018369958270341158, -0.00038187362952157855, -0.43249747157096863, -6.437094270950183e-05, -1.4295151233673096, -0.16800418496131897, -0.0016726563917472959, -0.38169047236442566, -0.24998877942562103, -0.011345394887030125, -0.033370595425367355, -0.010432117618620396, -0.03214804828166962, -0.0012240068754181266, -0.029034579172730446, -0.026959413662552834, -0.6544002294540405, -0.0005749003030359745, -0.7473244071006775, -0.285643607378006, -0.001077071763575077, -0.08090683817863464, -0.00011264643399044871, -0.008549635298550129, -0.17124474048614502, -0.35429275035858154, -0.058452825993299484, -1.0431164503097534, -0.0008978387922979891, -0.04087105020880699, -0.10115784406661987, -0.10609264671802521, -1.7468763589859009, -0.013144037686288357, -0.0005071069463156164, -0.402612566947937, -0.02810208685696125, -0.004162814002484083, -0.017054801806807518, -3.1836977005004883, -0.6883062124252319, -0.14141207933425903, -0.00020132421923335642, -0.00025733973598107696, -0.21067795157432556, -0.004103217739611864, -0.006287792231887579, -0.9564489722251892, -0.7210997939109802, -3.1601555347442627, -0.24477890133857727, -0.03186541423201561, -6.41325386823155e-05, -0.007846840657293797, -0.0016158869257196784, -0.014062953181564808, -7.521823135903105e-05, -8.618460560683161e-05, -0.10220937430858612, -0.018401268869638443, -0.20963819324970245, -0.5055134892463684, -0.45718860626220703, -1.8570098876953125, -0.001600771676748991, -0.16779041290283203, -0.6921113133430481, -2.587857723236084, -0.8937177658081055, -0.05449935421347618, -0.001660517300479114, -1.5888662338256836, -0.825871467590332, -0.00023231192608363926, -0.004269532393664122, -0.0009366653976030648, -0.6712627410888672, -0.5751909613609314, -0.6175264716148376, -0.005142081528902054, -0.0010584949050098658, -0.00022027450904715806, -0.00014220656885299832, -0.013365671038627625, -0.008695948868989944, -0.012652011588215828, -0.007404266390949488, -0.020666969940066338, -0.6272078156471252, -0.1349068433046341, -1.58237624168396, -2.6740500926971436, -0.09953935444355011, -0.29841411113739014, -0.3900614380836487, -2.4532885551452637, -0.000824230897706002, -0.0941329151391983, -0.014029922895133495, -0.01218883041292429, -0.0026510353200137615, -1.9430925021879375e-05, -3.814689989667386e-06, -7.152531907195225e-06, -0.0006448334897868335, -0.01270050648599863, -0.0006032554083503783, -0.007575474679470062, -0.018185431137681007, -0.8619698286056519, -0.4036385118961334, -0.02732625976204872, -3.0040289857424796e-05, -0.0007827793597243726, -0.05159679055213928, -0.04832736775279045, -0.49435025453567505, -0.00014494798961095512, -0.0005676327273249626, -0.13368485867977142, -0.11747410148382187, -0.038777440786361694, -0.034053727984428406, -0.007615581154823303, -2.2193920612335205, -4.887569048150908e-06, -1.5497195136049413e-06, -6.794698856538162e-05, -0.00019274283840786666, -0.11191228777170181], "finish_reason": "stop"}], "metrics": {"energy": 281.0834672584535, "energy_per_token": 1.2953155173200621, "time": 11.562999, "time_per_token": 0.05328570967741935}}
{"outputs": [{"text": "matches = {}\n\n    for file_path in glob.glob(os.path.join(directory_path, '**/*.txt'), recursive=True):\n        with open(file_path) as f:\n            for line in f:\n                match = re.search(regex_pattern, line)\n                if match:\n                    if match.group(1) is not None:\n                        name = match.group(1)\n                        matches[os.path.basename(file_path).split('.')[0]] = matches.get(os.path.basename(file_path).split('.')[0], []) + [name.strip()]\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "**", "/*", ".", "txt", "')", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", "_", "path", ")", " as", " f", ":", "\n", "            ", "for", " line", " in", " f", ":", "\n", "                ", "match", " =", " re", ".", "search", "(", "regex", "_", "pattern", ",", " line", ")", "\n", "                ", "if", " match", ":", "\n", "                ", "    ", "if", " match", ".", "group", "(", "1", ")", " is", " not", " None", ":", "\n", "                ", "        ", "name", " =", " match", ".", "group", "(", "1", ")", "\n", "                ", "        ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ".", "split", "('", ".", "')", "[", "0", "]]", " =", " matches", ".", "get", "(", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", ".", "split", "('", ".", "')", "[", "0", "]", ",", " [", "])", " +", " [", "name", ".", "strip", "()", "]", "\n", "    ", "return", " matches"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.087275505065918, -0.72499018907547, -0.5187134146690369, -0.6327535510063171, -0.03229198977351189, -0.2556520104408264, -0.0005490464391186833, -0.03302649036049843, -0.021490449085831642, -0.8949419260025024, -4.649054244509898e-05, -0.0007045170641504228, -0.002955119125545025, -0.006516753230243921, -0.00630153389647603, -0.010144224390387535, -0.0006671110168099403, -9.536697689327411e-06, -0.00290971458889544, -0.22418928146362305, -1.0896328687667847, -0.39777955412864685, -0.11766646802425385, -0.045968830585479736, -0.18807968497276306, -0.0007927850820124149, -0.005533259827643633, -0.020387031137943268, -0.004288880620151758, -0.00830068625509739, -0.02781912125647068, -0.05514361709356308, -0.7520533800125122, -0.009747644886374474, -0.0004483648226596415, -0.005108873825520277, -7.271740287251305e-06, -4.0531076592742465e-06, -1.9828121662139893, -7.176141662057489e-05, -0.8943946957588196, -0.0146997245028615, -0.006355194840580225, -0.006557020358741283, -2.952263832092285, -0.25996673107147217, -0.006887622643262148, -0.0028901018667966127, -0.09650840610265732, -0.00846890453249216, -0.00740994606167078, -0.9082719087600708, -0.05206584185361862, -0.008501647040247917, -0.00013565097469836473, -1.3415067195892334, -0.0009483369067311287, -0.009755082428455353, -0.0001250427303602919, -6.758938252460212e-05, -0.002260869136080146, -0.0038733473047614098, -0.05393261834979057, -0.0135149285197258, -0.08405409753322601, -0.034982990473508835, -0.012970367446541786, -0.12938924133777618, -0.012523581273853779, -0.004202344920486212, -0.00028880240279249847, -3.468625545501709, -0.8863170742988586, -0.04000279679894447, -0.03602857142686844, -0.12479818612337112, -0.05985678732395172, -0.3095288872718811, -2.6257190704345703, -0.5625683665275574, -0.0016451646806672215, -0.026415742933750153, -0.1294105052947998, -0.0013823487097397447, -0.00259301345795393, -2.668276309967041, -0.06535743176937103, -0.14130133390426636, -0.0002044230350293219, -0.0019516960019245744, -0.0011689979583024979, -0.0033056873362511396, -0.015653593465685844, -0.19071565568447113, -0.015479068271815777, -1.3170722723007202, -0.9286743402481079, -0.926120936870575, -0.6834631562232971, -2.5033637939486653e-05, -0.0008749709231778979, -0.0014229421503841877, -0.15037083625793457, -5.960462772236497e-07, -0.00016807096835691482, -0.042649395763874054, -3.349725011503324e-05, -5.4238757002167404e-05, -0.9694789052009583, -0.3001502752304077, -0.6423527002334595, -0.21391810476779938, -0.008521740324795246, -0.18599849939346313, -0.0006779517862014472, -0.0011812621960416436, -0.021400021389126778, -0.08893116563558578, -2.012335777282715, -0.012144668027758598, -0.040242716670036316, -0.0013060382334515452, -1.288275957107544, -0.00199250434525311, -0.0007180972606875002, -0.0001358893496217206, -0.004255644045770168, -0.00023123928986024112, -0.0005286726518534124, -0.008834797888994217, -4.6491513785440475e-06, -1.1920928244535389e-07, -0.005450033117085695, -0.026690633967518806, -0.0024781490210443735, -0.0017130000051110983, -0.0001102625101339072, -0.00043108707177452743, -0.00021395778458099812, -0.0020266487263143063, -0.12253575026988983, -0.0011342290090397, -0.049623213708400726, -0.003791407449170947, -0.12802615761756897, -0.09088828414678574, -0.258732408285141, -2.41191029548645, -0.5727927088737488, -0.12613540887832642, -0.04921078309416771, -0.04027958959341049, -1.8291352987289429, -0.043918050825595856, -0.0062678903341293335], "finish_reason": "stop"}], "metrics": {"energy": 205.77958328819267, "energy_per_token": 1.2781340576906377, "time": 8.84366, "time_per_token": 0.054929565217391306}}
{"outputs": [{"text": "matches = {}\n    regex = re.compile(regex_pattern)\n    for file in glob.iglob(directory_path + '/*.txt'):\n        with open(file, 'r', encoding='utf-8') as file:\n            for line in file:\n                match = regex.findall(line)\n                if match:\n                    matches[Path(file).name] = match\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "for", " file", " in", " glob", ".", "ig", "lob", "(", "directory", "_", "path", " +", " '", "/*", ".", "txt", "')", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "for", " line", " in", " file", ":", "\n", "                ", "match", " =", " regex", ".", "find", "all", "(", "line", ")", "\n", "                ", "if", " match", ":", "\n", "                ", "    ", "matches", "[", "Path", "(", "file", ")", ".", "name", "]", " =", " match", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -1.8610520362854004, -0.16642381250858307, -0.001555662602186203, -7.915183232398704e-05, -0.000605638197157532, -0.002059483202174306, -0.012222864665091038, -0.00010013079008786008, -0.00010418349120300263, -0.04200434684753418, -0.02306758053600788, -0.4488600790500641, -0.5789515972137451, -0.7375314831733704, -1.1205476522445679, -0.5513098835945129, -0.000259365770034492, -2.9035298824310303, -0.00016926287207752466, -0.02857127971947193, -0.6396625638008118, -0.0004687402688432485, -2.539125671319198e-05, -0.3767127990722656, -0.36124521493911743, -0.7691385746002197, -0.45224982500076294, -0.10034989565610886, -0.7539633512496948, -0.0006069486844353378, -0.07817065715789795, -0.01219990011304617, -0.37605246901512146, -0.026560163125395775, -0.001157448161393404, -0.017991676926612854, -0.25943803787231445, -0.23851974308490753, -0.046383168548345566, -1.1012392044067383, -0.004916838835924864, -0.03157450258731842, -0.07475371658802032, -0.12023943662643433, -0.23654234409332275, -0.005118005909025669, -0.05235130712389946, -0.0007347744540311396, -1.3309266567230225, -0.2112009972333908, -0.0075118220411241055, -0.003347272053360939, -3.097006320953369, -0.23623280227184296, -0.00891715195029974, -0.0032916669733822346, -0.16037115454673767, -0.009525562636554241, -0.002692884998396039, -0.7343898415565491, -0.10458188503980637, -0.11490494757890701, -0.0005588161875493824, -0.3795422911643982, -0.008599275723099709, -0.00024244230007752776, -0.0019947646651417017, -0.02321411669254303, -0.02047124318778515, -0.01591632328927517, -0.18739941716194153, -0.2367991954088211, -0.05032390356063843, -0.028517523780465126, -0.001618743408471346, -0.0006484074983745813, -0.7015813589096069, -0.4690987467765808, -0.96282958984375, -0.000779205875005573, -0.020673859864473343, -0.22060948610305786, -0.00011181206355104223, -1.8370096683502197, -0.505049467086792, -0.04520583525300026, -0.07837062329053879, -0.06587063521146774, -0.3796367347240448, -0.019971122965216637, -0.003896977985277772, -0.3066276013851166, -0.01537987869232893, -0.9760165810585022], "finish_reason": "stop"}], "metrics": {"energy": 121.6949708890915, "energy_per_token": 1.2292421301928433, "time": 5.2673035, "time_per_token": 0.053205085858585854}}
{"outputs": [{"text": "matches = {}\n\n    for file in glob.glob(os.path.join(directory_path, '*')):\n        # Get the file name without path\n        name = Path(file).name\n\n        if not name.startswith('.'):\n            with open(file, 'r') as f:\n                for line in f:\n                    matches.setdefault(name, []).append(\n                        re.findall(regex_pattern, line)[0])\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", "'))", ":", "\n", "        ", "#", " Get", " the", " file", " name", " without", " path", "\n", "        ", "name", " =", " Path", "(", "file", ")", ".", "name", "\n", "\n", "        ", "if", " not", " name", ".", "start", "sw", "ith", "('", ".", "')", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "for", " line", " in", " f", ":", "\n", "                ", "    ", "matches", ".", "set", "default", "(", "name", ",", " [", "])", ".", "append", "(", "\n", "                ", "        ", "re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " line", ")[", "0", "])", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.087275505065918, -0.72499018907547, -1.080151081085205, -0.4825916290283203, -0.00041166413575410843, -0.03431351110339165, -0.031023859977722168, -1.0901893377304077, -3.671578815556131e-05, -0.000914393924176693, -0.0032021934166550636, -0.007925964891910553, -0.009898859076201916, -0.011671001091599464, -0.0008299481705762446, -1.4781842764932662e-05, -0.003418080974370241, -0.25998151302337646, -0.46347278356552124, -0.9999778270721436, -0.0014790082350373268, -0.0697937160730362, -0.0634322240948677, -2.7213058471679688, -2.750352144241333, -0.7992764711380005, -0.9553913474082947, -0.17577029764652252, -0.6373358964920044, -0.7044863104820251, -0.3982331454753876, -0.0008968859910964966, -2.3954639434814453, -0.11469238996505737, -0.9132869243621826, -0.0007354891858994961, -0.007082238793373108, -0.0010893370490521193, -0.0005517867393791676, -0.8246482610702515, -0.28654518723487854, -0.8514056205749512, -0.001091599464416504, -2.2408673763275146, -1.6817671060562134, -0.5122963786125183, -0.009934977628290653, -1.9262694120407104, -2.586808113846928e-05, 0.0, -0.15961749851703644, -0.15522244572639465, -0.01756153628230095, -1.075478434562683, -0.2977398931980133, -0.03496215492486954, -1.3601268529891968, -0.003708629636093974, -0.0006474544061347842, -0.014553699642419815, -0.16798442602157593, -0.24293288588523865, -0.04434167966246605, -0.59206223487854, -0.00047958316281437874, -0.3905157148838043, -0.025310425087809563, -0.00791508425027132, -0.011053873226046562, -3.482715368270874, -0.23386996984481812, -0.009906059131026268, -0.0029308719094842672, -0.10054288804531097, -0.010223757475614548, -0.01615270972251892, -0.0013140147784724832, -1.2681248188018799, -0.7152395844459534, -0.12416549026966095, -5.113947918289341e-05, -0.005303480662405491, -0.023067232221364975, -0.007464139256626368, -0.04424576833844185, -0.003210511291399598, -0.2675122618675232, -1.7203189134597778, -0.056601572781801224, -1.7181389331817627, -0.00044264530879445374, -0.010980773717164993, -0.10890637338161469, -0.00022468426323030144, -0.0941881388425827, -6.151010165922344e-05, -0.0013087764382362366, -0.02174605056643486, -0.0002826052950695157, -0.00014625910262111574, -0.004539185669273138, -0.009329413995146751, -1.5431230068206787, -0.004381105303764343, -0.42006367444992065, -0.044631410390138626, -0.1290198564529419, -0.020215431228280067, -0.029863812029361725, -0.011986607685685158, -0.4153243899345398, -0.009912669658660889, -1.0103174448013306], "finish_reason": "stop"}], "metrics": {"energy": 148.74325547790525, "energy_per_token": 1.2499433233437416, "time": 6.3186636, "time_per_token": 0.05309801344537815}}
{"outputs": [{"text": "matches = {}\n    regex = re.compile(regex_pattern)\n    for filename in os.listdir(directory_path):\n        path = Path(directory_path) / filename\n        if path.is_file() and path.suffix == '.txt':\n            with open(path, 'r', encoding='utf-8') as file:\n                text = file.read()\n                match = regex.findall(text)\n                if match:\n                    matches[filename[:-4]] = match\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "path", " =", " Path", "(", "directory", "_", "path", ")", " /", " filename", "\n", "        ", "if", " path", ".", "is", "_", "file", "()", " and", " path", ".", "suff", "ix", " ==", " '", ".", "txt", "':", "\n", "            ", "with", " open", "(", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "                ", "text", " =", " file", ".", "read", "()", "\n", "                ", "match", " =", " regex", ".", "find", "all", "(", "text", ")", "\n", "                ", "if", " match", ":", "\n", "                ", "    ", "matches", "[", "filename", "[:", "-", "4", "]]", " =", " match", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -1.8610520362854004, -0.16642381250858307, -0.001555662602186203, -7.915183232398704e-05, -0.000605638197157532, -0.002059483202174306, -0.012222864665091038, -0.00010013079008786008, -0.00010418349120300263, -0.04200434684753418, -0.02306758053600788, -0.4488600790500641, -0.5789515972137451, -1.358489751815796, -0.018354805186390877, -2.037876844406128, -9.643566590966657e-05, -0.002899967832490802, -1.07287787614041e-05, -0.002442355267703533, -0.0062295072712004185, -0.0007242917199619114, -1.3589766240329482e-05, -0.0024804084096103907, -0.045777082443237305, -0.0067929052747786045, -2.4564740657806396, -0.020556731149554253, -1.02235746383667, -0.011643193662166595, -0.11626341938972473, -0.00015746307326480746, -3.3378546504536644e-06, -0.4996028542518616, -0.17804446816444397, -0.19887901842594147, -0.021756315603852272, -0.016221679747104645, -0.1290772706270218, -0.16171258687973022, -7.426462980220094e-05, -0.07547051459550858, -2.622600959512056e-06, -0.031213834881782532, -0.44008782505989075, -0.0038283406756818295, -0.37348273396492004, -0.00042167355422861874, -0.027477506548166275, -0.00024971229140646756, -0.4504842162132263, -0.11097484081983566, -0.006129632703959942, -0.029153265058994293, -0.009637259878218174, -0.041059162467718124, -0.004719309508800507, -0.3411068022251129, -0.20886719226837158, -0.0004934046883136034, -0.037876375019550323, -0.22799018025398254, -0.12812022864818573, -0.0533098429441452, -1.279901385307312, -0.002470895182341337, -0.031084414571523666, -0.06644771248102188, -0.08121397346258163, -0.1594771444797516, -0.002763621276244521, -0.03642302751541138, -0.0003400462737772614, -0.48920029401779175, -0.004318673629313707, -0.0021296695340424776, -0.0010594476480036974, -1.3559739589691162, -0.046147678047418594, -0.0054468316957354546, -2.288792165927589e-05, -3.969590397900902e-05, -0.0049562216736376286, -0.013867693021893501, -0.04890897870063782, -1.4977326393127441, -0.7576970458030701, -0.10350769758224487, -0.000789688085205853, -0.2046857327222824, -0.004266090225428343, -0.00038580605178140104, -0.002962607191875577, -0.01960519328713417, -0.010746345855295658, -0.02646845206618309, -0.4888973534107208, -0.14994992315769196, -0.021513434126973152, -0.01717093400657177, -0.000617551791947335, -0.00045003299601376057, -0.10912401229143143, -0.03853946179151535, -0.48115304112434387, -1.3664302825927734, -0.06456126272678375, -0.018258240073919296, -0.001453534816391766, -0.002709767082706094, -0.03699265047907829, -0.05100337043404579, -0.37208327651023865, -0.025074219331145287, -0.003998856525868177, -0.19483868777751923, -0.01766437478363514, -1.198028326034546], "finish_reason": "stop"}], "metrics": {"energy": 159.11495611572275, "energy_per_token": 1.2936175293961198, "time": 6.7406783, "time_per_token": 0.05480226260162602}}
{"outputs": [{"text": "matches = {}\n    if not os.path.exists(directory_path):\n        raise ValueError(\"Directory path not found!\")\n    regex = re.compile(regex_pattern)\n\n    for filename in glob.glob(f'{directory_path}\\\\**\\\\*.txt', recursive=True):\n        with open(filename, \"r\", encoding='UTF8') as file:\n            text = file.read()\n            matches[Path(filename).stem] = [match.group(0) for match in re.finditer(regex, text)]\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Directory", " path", " not", " found", "!", "\"", ")", "\n", "    ", "regex", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}\\\\", "**", "\\\\*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ",", " encoding", "='", "UTF", "8", "')", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "Path", "(", "filename", ")", ".", "stem", "]", " =", " [", "match", ".", "group", "(", "0", ")", " for", " match", " in", " re", ".", "find", "iter", "(", "regex", ",", " text", ")]", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -2.8223042488098145, -0.4271017014980316, -0.7944822311401367, -0.0002343380037928, -0.002451155101880431, -0.0069732158444821835, -1.2580838203430176, -0.0009290431626141071, -0.006108661647886038, -0.00042715485324151814, -1.6689160474925302e-05, -0.04086235165596008, -0.0622858889400959, -0.0029856651090085506, -1.0391746759414673, -1.5916826725006104, -0.00013541258522309363, -0.14034773409366608, -1.4085485935211182, -0.6459952592849731, -1.3449373245239258, -2.2278847694396973, -0.10510754585266113, -1.9024178981781006, -0.07299049198627472, -0.0012396040838211775, -0.008234124630689621, -0.6859819889068604, -2.783461570739746, -0.21201030910015106, -0.004530878737568855, -6.782778655178845e-05, -0.00044228785554878414, -0.0010174104245379567, -0.007108042482286692, -6.508615479106084e-05, -7.235741941258311e-05, -0.044144030660390854, -0.02007102780044079, -1.6957753896713257, -0.0006335158832371235, -0.3130652904510498, -1.5561563968658447, -0.02782781608402729, -0.2262369692325592, -0.00014506718434859067, -0.02942069061100483, -0.024539873003959656, -1.479721188545227, -1.4419890642166138, -0.014711353927850723, -1.3708974620385561e-05, -2.7418097943154862e-06, -2.739206314086914, -0.19717097282409668, -0.41441452503204346, -0.05466393008828163, -0.07229021191596985, -0.3931643068790436, -0.0013104431563988328, -0.00609468063339591, -0.018189646303653717, -0.0063256993889808655, -0.005201497580856085, -0.04080948233604431, -0.028259938582777977, -0.5688167214393616, -0.018982065841555595, -0.0006640136707574129, -0.015840059146285057, -0.14472196996212006, -1.994574785232544, -0.1545991152524948, -0.04329904913902283, -0.9671503305435181, -0.04422729089856148, -1.3701884746551514, -2.720913887023926, -1.5214097499847412, -0.01044167298823595, -0.0011338717304170132, -0.538181722164154, -0.018825434148311615, -0.007215038873255253, -0.009480691514909267, -1.3295847177505493, -0.11127906292676926, -0.015639277175068855, -8.105902816168964e-05, -9.762764238985255e-05, -0.012992254458367825, -0.025265559554100037, -0.26724064350128174, -0.5416651964187622, -0.3335176110267639, -1.5902795791625977, -0.0006582954083569348, -0.02237398736178875, -0.0034033493138849735, -0.00012373158824630082, -0.17017722129821777, -0.02115226909518242, -0.0003922408213838935, -1.9308242797851562, -1.0009340047836304, -0.5420066118240356, -0.09175394475460052, -0.7677682042121887, -1.2731194496154785, -0.01106884703040123, -0.07827890664339066, -0.0017485818825662136, -0.0028414849657565355, -2.641705274581909, -0.010569428093731403, -0.00021443451987579465, -0.005534089636057615, -0.0005458295345306396, -0.0030725435353815556, -0.0016025570221245289, -0.005636986810714006, -0.10288966447114944, -0.012651657685637474, -1.006697177886963, -0.04099268838763237, -0.005074597429484129, -1.7291409969329834, -4.887569048150908e-06, -1.1920922133867862e-06, -4.017272294731811e-05, -0.00019107422849629074, -0.10972976684570312], "finish_reason": "stop"}], "metrics": {"energy": 206.34733889961245, "energy_per_token": 1.5061849554716238, "time": 7.361042, "time_per_token": 0.05373023357664234}}
{"outputs": [{"text": "matches = {}\n    for file_path in Path(directory_path).rglob(\"*.txt\"):\n        file_name = file_path.name\n        if not file_name.startswith(\".\") and not file_name.endswith(\".txt\"):\n            # skip hidden files and text files\n            continue\n\n        matches[file_name] = []\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as file:\n                text = file.read()\n        except UnicodeDecodeError:\n            continue\n\n        matches[file_name].extend(re.findall(regex_pattern, text))\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " Path", "(", "directory", "_", "path", ")", ".", "rg", "lob", "(", "\"", "*", ".", "txt", "\"", "):", "\n", "        ", "file", "_", "name", " =", " file", "_", "path", ".", "name", "\n", "        ", "if", " not", " file", "_", "name", ".", "start", "sw", "ith", "(", "\"", ".", "\"", ")", " and", " not", " file", "_", "name", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "            ", "#", " skip", " hidden", " files", " and", " text", " files", "\n", "            ", "continue", "\n", "\n", "        ", "matches", "[", "file", "_", "name", "]", " =", " []", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "                ", "text", " =", " file", ".", "read", "()", "\n", "        ", "except", " Un", "icode", "Dec", "ode", "Error", ":", "\n", "            ", "continue", "\n", "\n", "        ", "matches", "[", "file", "_", "name", "]", ".", "extend", "(", "re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", "))", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -1.3950161933898926, -0.7143984436988831, -0.4401344954967499, -0.590938925743103, -0.03639785572886467, -1.8477624654769897, -0.005031661130487919, -0.0028505190275609493, -0.00030489088385365903, -5.722029527532868e-06, -0.0008889061282388866, -0.00024089295766316354, -1.0185908079147339, -0.004567665979266167, -0.9573866724967957, -0.12465096265077591, -0.14023801684379578, -0.21205708384513855, -0.07344729453325272, -0.0016091029392555356, -0.0026320121251046658, -0.11163725703954697, -0.020477082580327988, -1.8163652420043945, -0.02686634659767151, -0.23013684153556824, -0.07255954295396805, -0.419014036655426, -0.0006393534131348133, -0.00016282663273159415, -0.0004614718782249838, -0.6459245681762695, -0.10970541089773178, -0.0531470812857151, -2.9780373573303223, -1.3658933639526367, -0.3520233631134033, -0.0008586533949710429, -0.22357814013957977, -0.038367968052625656, -0.46097108721733093, -7.676783570786938e-05, 0.0, -0.513732373714447, -0.037298642098903656, -0.5129883885383606, -0.02225157804787159, -2.2814478874206543, -0.07202513515949249, -1.024571180343628, -0.19038687646389008, -4.8874615458771586e-05, -0.16628189384937286, -0.02404562570154667, -0.6630581021308899, -1.0132738680113107e-05, 0.0, -0.03662266954779625, -0.010361921973526478, -0.6138123273849487, -1.1994922161102295, -0.01199579518288374, -0.02208298072218895, -0.07456254214048386, -0.011564127169549465, -3.5284245014190674, -2.879286050796509, -1.2778770923614502, -0.10941875725984573, -0.3505884110927582, -1.1817442178726196, -0.02517477609217167, -0.503374457359314, -0.002186052966862917, -0.08048390597105026, -0.0015417367685586214, -1.2522940635681152, -0.0013143719406798482, -2.594090461730957, -0.14506973326206207, -0.01253464724868536, -3.099436753473128e-06, -0.04188763350248337, -0.06306473165750504, -0.00041059168870560825, -0.8822078704833984, -0.029203861951828003, -0.20911161601543427, -2.755518913269043, -0.00011169286881340668, -0.0040893275290727615, -0.002341031562536955, -0.19051575660705566, -0.0435977540910244, -0.0002641328901518136, -0.013032968156039715, -5.602820692729438e-06, -0.00037996700848452747, -0.07866927981376648, -0.7497373819351196, -0.056962210685014725, -0.009393305517733097, -0.3954586982727051, -0.028878239914774895, -0.1622534543275833, -0.003552081063389778, -0.08731689304113388, -0.23367369174957275, -0.0017539369873702526, -0.011928888969123363, -0.013668278232216835, -0.0001419681793777272, -0.5206876993179321, -0.00862645823508501, -0.0069365170784294605, -0.002574821701273322, -1.7375891208648682, -0.11079857498407364, -0.017133787274360657, -7.70062324590981e-05, -3.6477376852417365e-05, -0.007802722044289112, -0.015632234513759613, -1.9315052032470703, -0.0032643387094140053, -0.29969435930252075, -8.546940807718784e-05, -0.03397802636027336, -0.013581963256001472, -0.0001770101225702092, -0.12869183719158173, -0.06903979182243347, -0.0012138864258304238, -1.1518890857696533, -0.09424520283937454, -0.543745219707489, -0.0019436056027188897, -0.52276211977005, -0.05520453304052353, -0.0012203158112242818, -2.8609820219571702e-05, -0.0021347845904529095, -0.0025440254248678684, -0.9434118270874023, -0.13013336062431335, -0.044960834085941315, -0.13523344695568085, -0.0001658063702052459, -0.0011516136582940817, -0.0008858094224706292, -0.00047267231275327504, -0.016596589237451553, -0.0003700763627421111, -7.283422019099817e-05, -0.003682143986225128, -0.006183421704918146, -0.08616974204778671, -0.011161037720739841, -2.0136260986328125, -0.060241058468818665, -0.008138115517795086, -0.1720050424337387, -0.009771019220352173, -0.8139237761497498], "finish_reason": "stop"}], "metrics": {"energy": 241.99466421794898, "energy_per_token": 1.4319210900470354, "time": 9.046178, "time_per_token": 0.05352768047337278}}
{"outputs": [{"text": "matches: dict[Path, list[str]] = {}\n    for path in glob.glob(os.path.join(directory_path, '**'), recursive=True):\n        if Path(path).is_file():\n            if re.search(regex_pattern, os.path.basename(path)):\n                matches[Path(path).stem] = re.findall(regex_pattern, os.path.basename(path))\n    return matches", "tokens": ["matches", ":", " dict", "[", "Path", ",", " list", "[", "str", "]]", " =", " {}", "\n", "    ", "for", " path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "**", "')", ",", " recursive", "=", "True", "):", "\n", "        ", "if", " Path", "(", "path", ")", ".", "is", "_", "file", "():", "\n", "            ", "if", " re", ".", "search", "(", "regex", "_", "pattern", ",", " os", ".", "path", ".", "bas", "ename", "(", "path", "))", ":", "\n", "                ", "matches", "[", "Path", "(", "path", ")", ".", "stem", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " os", ".", "path", ".", "bas", "ename", "(", "path", "))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -1.6774585247039795, -0.054468877613544464, -0.9940716028213501, -2.80568790435791, -0.10063376277685165, -0.12472115457057953, -0.18816205859184265, -0.174176424741745, -0.05161626264452934, -0.02251398004591465, -0.10602853447198868, -0.03238005191087723, -0.6374070048332214, -1.0915559530258179, -1.9464328289031982, -0.14130930602550507, -0.4493020474910736, -0.0007929041748866439, -0.039924681186676025, -0.028784193098545074, -0.9391862154006958, -7.950943836476654e-05, -0.0011392300948500633, -0.011176716536283493, -0.011784108355641365, -0.012585031799972057, -0.012182706966996193, -0.0007898071780800819, -1.07287787614041e-05, -0.003628814360126853, -0.23410940170288086, -0.733016312122345, -2.845078468322754, -0.005523182917386293, -0.010083802975714207, -0.011604191735386848, -0.007926792837679386, -0.11302050948143005, -0.040047578513622284, -0.011366374790668488, -0.47013962268829346, -3.125199794769287, -0.010328179225325584, -0.0017019324004650116, -0.00028772983932867646, -0.001312586129643023, -0.30845746397972107, -3.755022044060752e-05, -0.05429568886756897, -1.0935912132263184, -0.06557236611843109, -0.005686890333890915, -2.847560405731201, -0.9651033282279968, -0.0001397035230183974, -0.36574655771255493, -0.006336716003715992, -0.025251030921936035, -9.131014667218551e-05, -0.00011538793478393927, -0.0031693964265286922, -2.630333423614502, -0.0002426806604489684, -0.006752766203135252, -0.006014463026076555, -0.0501079335808754, -1.6689286894688848e-06, -0.00011073929636040702, -0.007602212484925985, -0.06434062868356705, -0.15877215564250946, -0.04754343628883362, -0.004849576391279697, -1.7027301788330078, -0.24947059154510498, -0.610602855682373, -0.0059171742759644985, -0.08640146255493164, -0.0323687419295311, -0.0012326984433457255, -0.7047611474990845, -0.01601100154221058, -0.0018532973481342196, -0.3379514515399933, -0.0007857572636567056, -0.0632273405790329, -0.00017998983094003052, -0.011816506274044514, -0.03128859028220177, -1.6689160474925302e-05, -5.173549288883805e-05, -0.0031684457790106535, -0.2495521456003189, -0.0003914067056030035, -0.0011714984430000186, -0.0004741021548397839, -0.008063501678407192, -0.00031120702624320984, -8.928377064876258e-05, -0.0013150862650945783, -0.016785338521003723, -0.0976344645023346, -0.34109222888946533, -0.03641509637236595, -0.009581648744642735, -0.37816908955574036, -0.01876986399292946, -1.1698083877563477], "finish_reason": "stop"}], "metrics": {"energy": 174.76908791732788, "energy_per_token": 1.6033861276819072, "time": 5.9037704, "time_per_token": 0.05416303119266055}}
{"outputs": [{"text": "matches = {}\n    for filename in glob.glob(directory_path + r'\\\\*.txt'):\n        with open(filename, encoding='utf-8') as file:\n            file_content = file.read()\n            matches[Path(filename).stem] = re.findall(regex_pattern, file_content)\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "directory", "_", "path", " +", " r", "'\\\\", "*", ".", "txt", "')", ":", "\n", "        ", "with", " open", "(", "filename", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "file", "_", "content", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "Path", "(", "filename", ")", ".", "stem", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", "_", "content", ")", "\n", "\n", "    ", "return", " matches", "\n", "\n", "#"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -0.4420291781425476, -1.3950161933898926, -1.6721200942993164, -0.04875844344496727, -0.2934141457080841, -0.0003084660565946251, -0.02294793725013733, -0.02611348405480385, -1.3217543363571167, -0.0007825411157682538, -6.23445157543756e-05, -0.17069312930107117, -2.6204030513763428, -3.200289726257324, -0.6677606701850891, -0.22410859167575836, -0.11840718239545822, -0.21369390189647675, -0.0030172797851264477, -0.14615263044834137, -0.021192068234086037, -0.758435845375061, -0.02382308803498745, -0.0019112430745735765, -0.018710196018218994, -0.20223985612392426, -1.9928535223007202, -0.13693547248840332, -0.1397150605916977, -0.18488220870494843, -0.01315709762275219, -0.04931166395545006, -0.0005888396990485489, -0.6244067549705505, -0.01813146471977234, -0.007106030359864235, -0.00520896865054965, -1.961864709854126, -0.05071083456277847, -0.8892097473144531, -0.00836440734565258, -0.024895399808883667, -0.00012718822108581662, -0.00010084597306558862, -0.014237609691917896, -0.02401059679687023, -0.28981298208236694, -0.3610677719116211, -0.24690811336040497, -1.2890019416809082, -0.0011404207907617092, -0.027887290343642235, -0.0045609017834067345, -0.0001896439935080707, -0.28823742270469666, -0.020983602851629257, -0.0005247407825663686, -0.12881918251514435, -0.00020275443966966122, -0.0027377051301300526, -0.0002585315378382802, -0.0006275591440498829, -0.01686926744878292, -0.00011848701251437888, -0.0001037067049765028, -0.0032550706528127193, -0.008747473359107971, -0.0008386432309634984, -4.0649541915627196e-05, -0.045436423271894455, -0.02636721171438694, -1.1506576538085938, -0.008737428113818169, -0.045513883233070374, -0.006696166004985571, -0.3522747755050659, -0.009318548254668713, -2.392348289489746], "finish_reason": "stop"}], "metrics": {"energy": 109.54094122123718, "energy_per_token": 1.3358651368443557, "time": 4.2216115, "time_per_token": 0.05148306707317073}}
{"outputs": [{"text": "matches = {}\n\n    # Check for invalid input and raise exceptions\n    if not os.path.isdir(directory_path):\n        raise IOError('Directory path is not valid')\n\n    # Iterate through all text files in the directory\n    for file_path in Path(directory_path).rglob(\"*.txt\"):\n        # Check if file is a text file (e.g., not a log file)\n        if Path(file_path).suffix.lower() == '.txt':\n            with open(file_path, 'r') as file:\n                matches[file_path.stem] = [m.group() for m in re.finditer(regex_pattern, file.read())]\n\n    return matches\n\nREGEX_PATTERN = r\"(\\(.+\\))\"", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "#", " Check", " for", " invalid", " input", " and", " raise", " exceptions", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " IO", "Error", "('", "Directory", " path", " is", " not", " valid", "')", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " text", " files", " in", " the", " directory", "\n", "    ", "for", " file", "_", "path", " in", " Path", "(", "directory", "_", "path", ")", ".", "rg", "lob", "(", "\"", "*", ".", "txt", "\"", "):", "\n", "        ", "#", " Check", " if", " file", " is", " a", " text", " file", " (", "e", ".", "g", ".", ",", " not", " a", " log", " file", ")", "\n", "        ", "if", " Path", "(", "file", "_", "path", ")", ".", "suff", "ix", ".", "lower", "()", " ==", " '", ".", "txt", "':", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "matches", "[", "file", "_", "path", ".", "stem", "]", " =", " [", "m", ".", "group", "()", " for", " m", " in", " re", ".", "find", "iter", "(", "regex", "_", "pattern", ",", " file", ".", "read", "()", ")]", "\n", "\n", "    ", "return", " matches", "\n", "\n", "REG", "EX", "_", "P", "AT", "TERN", " =", " r", "\"", "(\\", "(", ".", "+\\", "))", "\"", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.3831682205200195, -2.5882530212402344, -3.037348747253418, -2.5219221115112305, -1.926008939743042, -2.9484446048736572, -2.086005449295044, -2.015929937362671, -1.2177424430847168, -0.006074656266719103, -0.13530538976192474, -0.0990404486656189, -1.2980074882507324, -0.0002580548170953989, -0.000840906286612153, -0.014035683125257492, -0.3415169417858124, -0.0028990167193114758, -0.00019524575327523053, -0.0022730010095983744, -0.0004065402317792177, -1.823885577323381e-05, -0.03617437183856964, -0.013178274035453796, -0.0017611959483474493, -0.053375616669654846, -3.8793749809265137, -0.0002162222663173452, -1.8380365371704102, -1.9819279909133911, -1.23814857006073, -0.8531512022018433, -0.9342747330665588, -0.5415648818016052, -0.8531883358955383, -0.0059578209184110165, -0.3725515604019165, -0.0014643670292571187, -0.829452395439148, -2.0189149379730225, -0.015020953491330147, -0.7563630938529968, -0.5791152715682983, -1.0730693340301514, -0.012197191826999187, -0.18117424845695496, -0.12356346845626831, -0.22986292839050293, -0.36726364493370056, -0.001206504413858056, -0.08125925809144974, -0.6130450963973999, -0.31537574529647827, -0.6672317385673523, -0.013877803459763527, -1.130265235900879, -0.002392645925283432, -0.0010670688934624195, -3.421248038648628e-05, -9.059865078597795e-06, -0.00040713604539632797, -0.0002115741081070155, -1.0256116390228271, -0.0010794533882290125, -2.1507668495178223, -0.1337970793247223, -0.08872981369495392, -0.04327758774161339, -0.07349658012390137, -0.001905888901092112, -0.002043898915871978, -0.030758827924728394, -0.18252184987068176, -0.9697699546813965, -2.051757335662842, -0.508685827255249, -0.9528065323829651, -1.49163019657135, -1.8671294450759888, -0.3290351927280426, -0.011480811983346939, -2.2027394771575928, -3.8149266242980957, -0.001374610816128552, -0.0014100857079029083, -0.01164625771343708, -0.5244796276092529, -2.2490179538726807, -0.7641014456748962, -2.7557716369628906, -0.16697989404201508, -0.7073598504066467, -0.06554065644741058, -0.002742341486737132, -0.05019625276327133, -3.3729443550109863, -0.01534231286495924, -0.0085911201313138, -0.00013076403411105275, -0.0004120216181036085, -0.016253698617219925, -0.0009856133256107569, -0.15107296407222748, -0.00012659224739763886, -1.284156322479248, -0.055881936103105545, -0.0020730451215058565, -1.3217427730560303, -0.4256614148616791, -0.005661523900926113, -0.0017187122721225023, -0.07309000194072723, -0.006156172137707472, -0.132592111825943, -1.869292140007019, -0.01794051006436348, -0.0008575814426876605, -0.028252869844436646, -5.483612312673358e-06, -1.0728830375228426e-06, -0.16064630448818207, -0.19491833448410034, -0.04656217247247696, -0.4480355381965637, -0.0005418977816589177, -0.5446033477783203, -0.010859675705432892, -0.008443490602076054, -0.01743759959936142, -2.1570475101470947, -0.3675139546394348, -0.372016966342926, -0.2936946749687195, -0.00317308004014194, -0.17421098053455353, -0.7559396028518677, -0.01333202887326479, -0.00047195740626193583, -2.11904239654541, -2.1022253036499023, -0.17011627554893494, -0.10896666347980499, -0.9265170097351074, -0.07900938391685486, -0.0032968949526548386, -0.0008481719414703548, -0.010297974571585655, -3.8980677345534787e-05, -0.0010677833342924714, -0.0001711698860162869, -0.001211028778925538, -0.016647707670927048, -0.00020203932945150882, -6.210611172718927e-05, -0.002008327515795827, -0.02036483772099018, -0.0021798675879836082, -0.0001394651480950415, -0.052366238087415695, -0.08072398602962494, -0.010834322310984135, -0.22791197896003723, -0.009997296147048473, -0.11171860247850418, -0.00645658653229475, -0.3588990867137909, -0.009254653006792068, -3.3290114402770996, -0.00043847484630532563, -0.002675883937627077, -0.004286506678909063, -0.00013457823661156, -0.0033330146688967943, -0.019487004727125168, -0.10978861898183823, -1.9139409065246582, -3.074512004852295, -0.8927069902420044, -0.03487927094101906, -3.1918435096740723, -0.15943649411201477, -0.7070884704589844, -0.4249210059642792, -0.23811659216880798, -0.7789403200149536], "finish_reason": "stop"}], "metrics": {"energy": 263.6005176124573, "energy_per_token": 1.3801074220547502, "time": 10.713109, "time_per_token": 0.056089575916230365}}
{"outputs": [{"text": "matches = {}\n\n    # Path object to the directory\n    directory_path_obj = Path(directory_path)\n\n    # Check if the directory exists\n    if not directory_path_obj.exists():\n        raise FileNotFoundError(f'Directory: {directory_path_obj.name} does not exist')\n\n    # If it exists, process each text file in the directory\n    for file in glob.glob(directory_path_obj / '*.txt'):\n\n        # Get the file name without path\n        file_name = file.name.split('.')[0]\n        # Get the contents of the file\n        file_contents = file.read_text()\n        # Check if the file contents are empty or None\n        if not file_contents:\n            raise FileNotFoundError(f'File: {file_name} is empty')\n\n        # Define the pattern to match\n        pattern = re.compile(regex_pattern)\n        # Match the contents of the file with the pattern\n        matches_in_file = pattern.findall(file_contents)\n        # If there are no matches, raise an error", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "#", " Path", " object", " to", " the", " directory", "\n", "    ", "directory", "_", "path", "_", "obj", " =", " Path", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " directory", "_", "path", "_", "obj", ".", "exists", "():", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "'", "Directory", ":", " {", "directory", "_", "path", "_", "obj", ".", "name", "}", " does", " not", " exist", "')", "\n", "\n", "    ", "#", " If", " it", " exists", ",", " process", " each", " text", " file", " in", " the", " directory", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "directory", "_", "path", "_", "obj", " /", " '", "*", ".", "txt", "')", ":", "\n", "\n", "        ", "#", " Get", " the", " file", " name", " without", " path", "\n", "        ", "file", "_", "name", " =", " file", ".", "name", ".", "split", "('", ".", "')", "[", "0", "]", "\n", "        ", "#", " Get", " the", " contents", " of", " the", " file", "\n", "        ", "file", "_", "contents", " =", " file", ".", "read", "_", "text", "()", "\n", "        ", "#", " Check", " if", " the", " file", " contents", " are", " empty", " or", " None", "\n", "        ", "if", " not", " file", "_", "contents", ":", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "'", "File", ":", " {", "file", "_", "name", "}", " is", " empty", "')", "\n", "\n", "        ", "#", " Define", " the", " pattern", " to", " match", "\n", "        ", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "        ", "#", " Match", " the", " contents", " of", " the", " file", " with", " the", " pattern", "\n", "        ", "matches", "_", "in", "_", "file", " =", " pattern", ".", "find", "all", "(", "file", "_", "contents", ")", "\n", "        ", "#", " If", " there", " are", " no", " matches", ",", " raise", " an", " error"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -1.3831682205200195, -4.725044250488281, -1.6907286643981934, -1.7265945672988892, -0.6812565326690674, -0.3489145338535309, -1.060194969177246, -0.0010170531459152699, -0.5479725003242493, -0.48537224531173706, -0.02795383334159851, -1.3343149423599243, -0.271423876285553, -0.033753424882888794, -0.009132163599133492, -0.003566454164683819, -0.003176169702783227, -0.0001754606782924384, -1.1920922133867862e-06, -0.0020386644173413515, -0.030083967372775078, -0.14690837264060974, -0.000641974329482764, -0.12766298651695251, -2.9061837196350098, -0.3086640238761902, -0.7141954302787781, -0.21075770258903503, -0.13937529921531677, -0.3619864881038666, -0.0009114163694903255, -0.038704849779605865, -0.19013378024101257, -0.25678500533103943, -1.0967194612021558e-05, -8.415821503149346e-05, -0.0018804263090714812, -2.1219027985353023e-05, -0.0005097282119095325, -0.28200963139533997, -0.01834111101925373, -0.007302852347493172, -0.0055599333718419075, -1.2007529735565186, -0.3880566954612732, -0.01060044951736927, -0.00031680811662226915, -0.18041540682315826, -0.48955580592155457, -1.2010455131530762, -0.4841662049293518, -3.3940823078155518, -0.21064771711826324, -0.01883958838880062, -0.00017724849749356508, -0.00027450130437500775, -1.0490669012069702, -0.0008416209602728486, -1.1864392757415771, -0.6974745392799377, -0.03763209655880928, -0.9802353382110596, -0.0032795476727187634, -0.04232355207204819, -0.8055077791213989, -0.0058996351435780525, -0.059734392911195755, -0.004502872005105019, -0.18457944691181183, -4.189248561859131, -2.212378978729248, -0.6340389251708984, -0.11491461843252182, -4.266280174255371, -1.735416054725647, -1.7123810052871704, -0.015526956878602505, -0.5125459432601929, -0.08849196881055832, -0.017242763191461563, -0.2216162234544754, -0.011896141804754734, -0.13493162393569946, -0.6385695338249207, -1.1365703344345093, -0.7428535223007202, -0.00024816294899210334, -0.07110336422920227, -0.03389298543334007, -0.8024358749389648, -3.766942609217949e-05, -7.343022298300639e-05, -0.10036703944206238, -7.152301259338856e-05, -0.4132290184497833, -0.10833735018968582, -0.38198795914649963, -0.20963606238365173, -0.05925038829445839, -0.12924699485301971, -0.0016715852543711662, -0.04190821200609207, -1.527086615562439, -0.001795467222109437, -0.23564010858535767, -1.707364559173584, -0.4632143974304199, -0.9012012481689453, -0.1574903130531311, -0.8964998126029968, -0.8553946018218994, -0.2885530889034271, -0.0002790300059132278, -0.33882662653923035, -0.011858091689646244, -0.06851374357938766, -0.1383000761270523, -0.4392305612564087, -0.00083078199531883, -0.32161208987236023, -0.4420113265514374, -0.7620005011558533, -0.13589122891426086, -0.0033448957838118076, -0.343005895614624, -0.0034185561817139387, -0.0006040894077159464, -0.0013760393485426903, -0.04847138002514839, -2.157541275024414, -1.3684200048446655, -1.2809265851974487, -0.28327932953834534, -2.0689234733581543, -0.07214104384183884, -0.03927076607942581, -0.1999683827161789, -0.4053276777267456, -0.0042248996905982494, -1.61763596534729, -0.00976936612278223, -0.6282058358192444, -0.018516190350055695, -0.3021886944770813, -0.0032902411185204983, -0.008775951340794563, -0.004210773389786482, -0.0038883094675838947, -0.10187803953886032, -0.020188210532069206, -1.2642046213150024, -0.16944168508052826, -2.6898655891418457, -0.20123456418514252, -0.6998781561851501, -0.24342502653598785, -1.7635071277618408, -1.5710574388504028, -1.2857109308242798, -2.4880642890930176, -1.911722183227539, -0.07862090319395065, -0.006128329783678055, -0.020479535683989525, -0.47859013080596924, -0.014146641828119755, -0.00039962888695299625, -0.0020655503030866385, -0.47140300273895264, -0.014843732118606567, -0.0028708456084132195, -1.0870985984802246, -1.2958476543426514, -0.0782431960105896, -0.00022015532886143774, -0.04268651828169823, -0.05123579874634743, -0.10333000123500824, -0.45353320240974426, -0.3998105525970459, -0.022860554978251457, -0.008908290416002274, -0.5522993803024292, -0.019549548625946045, -0.0147760771214962, -0.6876516938209534, -0.05402229726314545, -0.5081008672714233, -0.0023713582195341587, -0.24480465054512024, -0.0017586969770491123, -0.18702900409698486, -4.7933125495910645, -0.680199384689331, -2.028927803039551, -0.7430698275566101, -1.0080856084823608, -1.190664291381836, -0.0021642851643264294, -0.16194336116313934, -0.012426217086613178, -0.2119126170873642, -0.00012003655137959868, -0.02298428677022457, -0.002147988649085164, -0.014664248563349247, -5.435795901576057e-05, -8.463501580990851e-05, -0.044276103377342224, -0.008852521888911724, -0.7822765111923218, -0.09328614920377731, -1.5485252141952515, -0.2777992784976959, -1.6815202236175537, -1.0774279832839966, -0.014210696332156658, -0.01659693941473961, -1.6047089099884033, -0.0095830662176013, -0.04911579191684723, -0.14345864951610565, -0.002245049923658371, -0.5917305946350098, -0.19479051232337952, -2.2580044269561768, -0.0025919433683156967, -0.05871308967471123, -0.06087692081928253, -0.3094090521335602, -3.85038583772257e-05, -0.004156284965574741, -0.031567804515361786, -0.0002991705550812185, -0.002386223990470171, -0.0006473353132605553, -0.00015555603022221476, -0.004223950207233429, -0.010799769312143326, -0.6804620623588562, -0.17023442685604095, -2.152899742126465, -0.7334780693054199, -0.14206291735172272, -0.5472789406776428, -0.007220838218927383, -0.22874952852725983, -0.5616099834442139, -0.37593263387680054, -0.25318557024002075], "finish_reason": "length"}], "metrics": {"energy": 352.1866932010653, "energy_per_token": 1.3757292703166613, "time": 14.721001, "time_per_token": 0.05750391015625}}
{"outputs": [{"text": "matches: dict = {}\n\n    # TODO: Make sure that the directory passed exists\n    for file_path in glob.glob(directory_path + '\\\\**\\\\*.txt', recursive=True):\n        with open(file_path, 'r', encoding='utf-8') as file:\n            file_name = os.path.basename(file_path)\n            file_name, extension = os.path.splitext(file_name)\n            matches[file_name] = [match.group() for match in re.finditer(regex_pattern, file.read())]\n    return matches", "tokens": ["matches", ":", " dict", " =", " {}", "\n", "\n", "    ", "#", " TODO", ":", " Make", " sure", " that", " the", " directory", " passed", " exists", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "directory", "_", "path", " +", " '\\\\", "**", "\\\\*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "            ", "file", "_", "name", ",", " extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " [", "match", ".", "group", "()", " for", " match", " in", " re", ".", "find", "iter", "(", "regex", "_", "pattern", ",", " file", ".", "read", "()", ")]", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-0.5273642539978027, -1.6774585247039795, -0.054468877613544464, -0.4905143678188324, -0.1326528787612915, -0.036598995327949524, -0.9261179566383362, -0.0009196343016810715, -1.5575262308120728, -3.8086998462677, -0.2742970287799835, -4.9222822189331055, -1.722530484199524, -2.3717613220214844, -1.264629602432251, -1.8453863859176636, -4.032437801361084, -2.41662859916687, -1.0326842069625854, -0.399654358625412, -2.0346689224243164, -0.7029833793640137, -0.4967067539691925, -0.5255787372589111, -0.03043082170188427, -0.2827404737472534, -0.0008236353169195354, -0.02719610370695591, -0.029529839754104614, -1.0985270738601685, -0.0011260127648711205, -0.00013422065239865333, -0.28936100006103516, -3.1726951599121094, -0.6723189949989319, -0.4284898340702057, -0.07287335395812988, -0.0607510581612587, -0.2465871423482895, -0.0019903627689927816, -0.007269242778420448, -0.05594528838992119, -0.004347990732640028, -0.00827846024185419, -0.06467490643262863, -0.11391828209161758, -1.404539704322815, -0.018611092120409012, -0.0015892268856987357, -0.020152928307652473, -2.0503786799963564e-05, -3.302042750874534e-05, -0.15475444495677948, -0.3103897273540497, -0.06694407761096954, -0.9098238348960876, -0.0024440200068056583, -0.05379853770136833, -0.08896050602197647, -0.09287059307098389, -0.1907370388507843, -0.011364370584487915, -0.06549443304538727, -0.0011183919850736856, -0.4538649916648865, -0.023347819223999977, -0.011639423668384552, -0.021186815574765205, -1.4292179346084595, -0.02365533821284771, -1.1371047496795654, -0.20023109018802643, -1.309173345565796, -2.7179348762729205e-05, -0.0013546108966693282, -0.006666325498372316, -0.21485784649848938, -4.768370445162873e-07, -0.00014602071314584464, -0.005704433191567659, -0.1552189737558365, -0.00014244495832826942, -0.008701384998857975, -0.05726068839430809, -0.1341952383518219, -1.7854673862457275, -0.023837754502892494, -0.5678663849830627, -1.6191105842590332, -1.2926170825958252, -0.010475176386535168, -0.07608020305633545, -4.2437604861333966e-05, -0.00036864637513644993, -0.019365528598427773, -1.9430925021879375e-05, -6.0437283536884934e-05, -3.576278118089249e-07, -0.00015054999676067382, -0.00629987521097064, -0.0024781490210443735, -0.033174339681863785, -0.0016656348016113043, -0.02284599095582962, -0.35856175422668457, -0.5581071376800537, -0.22621433436870575, -0.007330780383199453, -0.00011586471373448148, -0.00818009115755558, -0.01871897093951702, -0.002288700779899955, -2.0988106727600098, -0.6556839942932129, -0.6635143756866455, -0.25313401222229004, -0.7541959285736084, -0.06872677803039551, -0.014159217476844788, -0.003420100547373295, -0.018157921731472015, -7.748303323751315e-05, -0.001479722443036735, -0.003941506613045931, -0.001423537265509367, -0.019040547311306, -0.0002053765201708302, -0.00012396997772157192, -0.002981148660182953, -0.043128710240125656, -0.019101599231362343, -0.0004764852055814117, -0.0570913627743721, -0.09388061612844467, -0.0197079386562109, -1.4720401763916016, -0.05502718687057495, -0.005691987462341785, -0.30726826190948486, -0.01570182666182518, -0.9878981709480286], "finish_reason": "stop"}], "metrics": {"energy": 216.54190976905835, "energy_per_token": 1.5357582253124706, "time": 8.003883, "time_per_token": 0.05676512765957447}}
{"outputs": [{"text": "matches = {}\n\n    if not os.path.isdir(directory_path):\n        return matches\n    for file_path in glob.glob(os.path.join(directory_path, '*')):\n        if not file_path.endswith(\".txt\"):\n            continue\n        matches[os.path.basename(file_path)[:-4]] = list(re.findall(regex_pattern, Path(file_path).read_text()))\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "return", " matches", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", "'))", ":", "\n", "        ", "if", " not", " file", "_", "path", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "            ", "continue", "\n", "        ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "[:", "-", "4", "]]", " =", " list", "(", "re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " Path", "(", "file", "_", "path", ")", ".", "read", "_", "text", "()))", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-0.5273642539978027, -0.28252866864204407, -0.12997698783874512, -0.03317929804325104, -1.029984712600708, -0.0010001424234360456, -2.91268253326416, -0.44626399874687195, -0.8389723300933838, -0.0002212279650848359, -0.0018731682794168591, -0.005931750405579805, -0.37607669830322266, -0.006503133103251457, -0.0003106111544184387, -0.0033738852944225073, -0.00038818930624984205, -1.7046782886609435e-05, -0.021639198064804077, -0.04237417131662369, -0.0026720792520791292, -1.3801250457763672, -0.16639302670955658, -0.026307065039873123, -2.867926597595215, -1.2824815511703491, -0.813046932220459, -0.4804683327674866, -0.6207414269447327, -0.01571767032146454, -0.254238098859787, -0.00023600654094479978, -0.025497538968920708, -0.012442699633538723, -0.8688398599624634, -0.001258058357052505, -0.00026556302327662706, -0.004138002637773752, -0.0021608355455100536, -0.002904722234234214, -0.007148404140025377, -2.7179348762729205e-05, -2.861018856492592e-06, -0.0016149348812177777, -0.2494308352470398, -0.6091614961624146, -0.6144521236419678, -0.0005931286723352969, -0.023252667859196663, -0.023847416043281555, -0.8889591097831726, -1.1434341669082642, -1.542938470840454, -0.0008715168805792928, -0.0012423424050211906, -0.003395151812583208, -0.09355802834033966, -7.509902934543788e-05, 0.0, -2.071641683578491, -0.25404393672943115, -0.0475778765976429, -0.11565715819597244, -0.00019238528329879045, -0.08527318388223648, -0.035665709525346756, -0.0018283093813806772, -0.009827327914536, -0.034906208515167236, -0.08088815212249756, -3.1075191497802734, -0.24881373345851898, -0.6221401691436768, -4.23184028477408e-05, -0.00026353701832704246, -0.0034944680519402027, -0.2342052310705185, -5.960462772236497e-07, -0.00013267113536130637, -0.020311105996370316, -9.179073458653875e-06, -4.291525328881107e-06, -0.7592951059341431, -0.9277200698852539, -0.019113294780254364, -0.01737867295742035, -0.0009882333688437939, -0.006912603043019772, -2.409630298614502, -0.049799710512161255, -0.25174739956855774, -0.00024077377747744322, -0.008217926137149334, -0.037679627537727356, -0.0014719852479174733, -0.009943593293428421, -6.97350042173639e-05, -7.688703772146255e-05, -0.003098094603046775, -0.6595064401626587, -0.0013991338200867176, -0.007077148649841547, -1.3589766240329482e-05, -1.2755313036905136e-05, -0.0035562387201935053, -0.00044550508027896285, -0.0021305023692548275, -2.145764938177308e-06, -0.0010371787939220667, -0.4245474636554718, -0.019105808809399605, -0.890386164188385, -0.020657043904066086, -0.0027973828837275505, -0.38270482420921326, -0.022905761376023293, -1.083966851234436], "finish_reason": "stop"}], "metrics": {"energy": 161.3727777881622, "energy_per_token": 1.3792545110099335, "time": 6.3209605, "time_per_token": 0.05402530341880342}}
