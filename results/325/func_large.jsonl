{"outputs": [{"text": "matches = {}  # Initialize an empty dictionary to store the matches\n\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):  # Iterate over all text files in the specified directory\n        file_name = os.path.basename(file_path)  # Get the file name without the path\n\n        try:\n            with open(file_path, 'r', encoding='utf-8') as file:  # Open the file in read mode with UTF-8 encoding\n                text = file.read()  # Read the file contents\n\n            # Extract matches from the text using the regex pattern\n            matches[file_name] = re.findall(regex_pattern, text)\n\n        except Exception as e:\n            print(f\"Error reading or processing file: {file_name}. Error: {e}\")\n\n    return matches", "tokens": ["matches", " =", " {}", "  ", "#", " Initialize", " an", " empty", " dictionary", " to", " store", " the", " matches", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "  ", "#", " Iter", "ate", " over", " all", " text", " files", " in", " the", " specified", " directory", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "  ", "#", " Get", " the", " file", " name", " without", " the", " path", "\n", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "  ", "#", " Open", " the", " file", " in", " read", " mode", " with", " U", "TF", "-", "8", " encoding", "\n", "                ", "text", " =", " file", ".", "read", "()", "  ", "#", " Read", " the", " file", " contents", "\n", "\n", "            ", "#", " Ext", "ract", " matches", " from", " the", " text", " using", " the", " regex", " pattern", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "Error", " reading", " or", " processing", " file", ":", " {", "file", "_", "name", "}", ".", " Error", ":", " {", "e", "}\"", ")", "\n", "\n", "    ", "return", " matches", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.4203320741653442, -0.13799554109573364, -0.03440335392951965, -2.6340181827545166, -0.0003457663697190583, -0.9181243181228638, -0.1806667000055313, -0.0005090133054181933, -0.010232842527329922, -0.1907622516155243, -0.037213653326034546, -0.9330283999443054, -0.14377938210964203, -0.13069336116313934, -0.6729363203048706, -0.0015948207583278418, -2.8012607097625732, -0.4691888093948364, -0.3503230810165405, -0.0680975615978241, -0.0022078203037381172, -0.035429637879133224, -0.0005315321614034474, -0.028014343231916428, -0.005912196822464466, -0.4777345657348633, -9.536697689327411e-06, -0.0002184867626056075, -1.1444026313256472e-05, -0.0021347845904529095, -0.0006372089846991003, -0.004083866253495216, -7.378782902378589e-05, -4.291525328881107e-06, -0.003063154872506857, -0.1898731291294098, -0.09334337711334229, -0.036501187831163406, -0.009203391149640083, -0.04841073602437973, -0.0016025570221245289, -0.37617358565330505, -5.602679812000133e-05, -0.3238275349140167, -0.016380127519369125, -0.21029992401599884, -0.3105616271495819, -0.28080034255981445, -0.006672009360045195, -0.03978687524795532, -0.04892873391509056, -1.69535493850708, -0.013810788281261921, -0.028096986934542656, -0.034196242690086365, -0.34510087966918945, -0.007048148196190596, -0.016205141320824623, -0.005788231268525124, -0.037355031818151474, -6.437280717364047e-06, -4.0531076592742465e-06, -1.6689286894688848e-06, -0.0795387476682663, -5.960462772236497e-07, -9.298280929215252e-06, -0.011955157853662968, -3.933898824470816e-06, -7.021180499577895e-05, -0.0005893162451684475, -0.14168763160705566, -8.821448318485636e-06, -0.5279638171195984, -0.032194800674915314, -0.23674972355365753, -0.003167851595208049, -0.570826530456543, -0.5612927675247192, -0.20691628754138947, -0.02229541353881359, -1.2961211204528809, -0.0015356664080172777, -2.9242615699768066, -9.142934868577868e-05, -0.10076645016670227, -0.0024468740448355675, -0.06878142058849335, -0.006775618530809879, -0.00027378625236451626, -0.026307879015803337, -2.074220174108632e-05, -0.00013648532330989838, -0.005130103323608637, -0.06995046138763428, -0.0027725372929126024, -0.8253781199455261, -0.00020239688456058502, -0.026466013863682747, -0.10587842017412186, -0.09590379893779755, -0.03949573636054993, -0.0013898485340178013, -0.03541939705610275, -0.00012838016846217215, -0.13624300062656403, -0.003412497229874134, -0.3073427975177765, -1.168244216387393e-05, -0.0637122243642807, -0.10323270410299301, -0.08927586674690247, -0.26462242007255554, -0.0446285605430603, -0.00600782735273242, -0.2383490949869156, -0.521845817565918, -2.098061486321967e-05, -0.002617625752463937, -5.566918844124302e-05, -0.0016702761640772223, -0.022731680423021317, -0.002590159885585308, -1.3043923377990723, -0.009805135428905487, -0.0027733694296330214, -3.349725011503324e-05, -4.0531076592742465e-06, -0.0025597207713872194, -0.03139984607696533, -3.2186455882765586e-06, -0.0008905735448934138, -0.0011089849285781384, -1.046740174293518, -1.435189127922058, -0.33489876985549927, -1.1770431995391846, -2.300173044204712, -0.7310377955436707, -1.6561603546142578, -0.004699020646512508, -0.4887388348579407, -0.981001079082489, -0.020132483914494514, -0.7082292437553406, -0.323973685503006, -0.17085202038288116, -1.9885468482971191, -0.03015880659222603, -0.2986835837364197, -0.00454440712928772, -2.5844075679779053, -0.2829487919807434, -0.0018331881146878004, -8.49926145747304e-05, -0.0014635338447988033, -0.002179748611524701, -0.00010799778101500124, -0.07701274007558823, -0.00018976318824570626, -0.004846729338169098, -0.0012742503313347697, -0.0011121999705210328, -0.06760209798812866, -0.0001802282058633864, -2.169585604860913e-05, -0.0023137959651649, -0.002597175072878599, -0.1266099512577057, -0.08262061327695847, -0.37534087896347046, -0.021729370579123497, -0.0029513156041502953, -0.5902769565582275, -0.024834351614117622, -0.11050765216350555, -0.00026854246971197426, -0.17741574347019196, -0.0013984196120873094, -0.19129295647144318, -0.002199375070631504, -0.022085780277848244, -0.1386522501707077, -0.11034667491912842, -1.5885372161865234, -2.557027816772461, -0.31133100390434265, -0.16174320876598358, -1.6208477020263672, -0.003525828942656517, -0.003994819708168507, -0.000990615226328373, -0.8282226324081421, -0.267742395401001, -0.38231539726257324, -0.7315354347229004, -0.08585427701473236, -0.00034445550409145653, -0.2773166298866272, -0.012583501636981964, -0.0005862186080776155, -0.2397766262292862, -0.09391871094703674, -0.0026019311044365168, -0.02901419810950756, -0.0018314032349735498, -2.1841695308685303, -9.536738616588991e-07, -2.861018856492592e-06, -1.7881377516459906e-06, -6.198863957251888e-06, -0.20877616107463837], "finish_reason": "stop"}], "metrics": {"energy": 845.5974660453799, "energy_per_token": 4.007570929125023, "time": 22.388939, "time_per_token": 0.10610871563981043}}
{"outputs": [{"text": "# Check that directory_path is a valid directory\n    if not os.path.isdir(directory_path):\n        raise ValueError(f\"The provided directory path '{directory_path}' is not a valid directory.\")\n\n    # Check that regex_pattern is a valid regular expression\n    try:\n        re.compile(regex_pattern)\n    except re.error as e:\n        raise ValueError(f\"Invalid regular expression pattern: {e}\")\n\n    # Find all text files in the specified directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Initialize a dictionary to store the extracted matches\n    matches = {}\n\n    # Iterate over each text file\n    for file in text_files:\n        # Extract the file name (without the path)\n        file_name = os.path.basename(file)\n\n        # Read the text file and find all matches using the regular expression pattern\n        with open(file, 'r', encoding='utf-8') as f:\n            # Read the entire file as a single string\n            ", "tokens": ["#", " Check", " that", " directory", "_", "path", " is", " a", " valid", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " provided", " directory", " path", " '", "{", "directory", "_", "path", "}'", " is", " not", " a", " valid", " directory", ".", "\"", ")", "\n", "\n", "    ", "#", " Check", " that", " regex", "_", "pattern", " is", " a", " valid", " regular", " expression", "\n", "    ", "try", ":", "\n", "        ", "re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "except", " re", ".", "error", " as", " e", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " regular", " expression", " pattern", ":", " {", "e", "}\"", ")", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Initialize", " a", " dictionary", " to", " store", " the", " extracted", " matches", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "#", " Ext", "ract", " the", " file", " name", " (", "without", " the", " path", ")", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "\n", "        ", "#", " Read", " the", " text", " file", " and", " find", " all", " matches", " using", " the", " regular", " expression", " pattern", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "#", " Read", " the", " entire", " file", " as", " a", " single", " string", "\n", "            "], "logprobs": [-1.2958691120147705, -2.354766368865967, -2.1281661987304688, -0.7190496325492859, -0.18006360530853271, -0.00033682872890494764, -0.5403193831443787, -0.12542995810508728, -0.6564876437187195, -0.45831355452537537, -0.34045955538749695, -0.004211248364299536, -0.08957793563604355, -0.049235749989748, -0.06322958320379257, -7.986990567587782e-06, -0.0020378315821290016, -2.706014311115723e-05, -0.015781857073307037, -0.0003432638186495751, -0.00016962042718660086, -0.00561387138441205, -4.51792984677013e-05, -4.768370445162873e-07, -0.0023042813409119844, -0.0037186061963438988, -0.00318068522028625, -0.14753209054470062, -0.24135759472846985, -6.6756979322235566e-06, -0.0836108922958374, -0.4439345598220825, -0.10595326125621796, -2.8868749141693115, -1.7815049886703491, -0.1851995289325714, -0.3052681088447571, -0.4722157418727875, -0.0007783720502629876, -0.001572444918565452, -9.059865078597795e-06, -0.0001280225842492655, -0.0025729192420840263, -0.13382355868816376, -0.054105304181575775, -0.2469237595796585, -0.023549970239400864, -0.007761913351714611, -0.12176357954740524, -0.03040884993970394, -0.000494715350214392, -0.0012442474253475666, -0.08403228223323822, -0.0012430568458512425, -0.16590549051761627, -1.7019073963165283, -0.039762359112501144, -0.28515028953552246, -0.024051910266280174, -0.0015779199311509728, -0.025402359664440155, -0.08051370829343796, -0.15321271121501923, -0.21555553376674652, -0.00022599527437705547, -0.26920148730278015, -0.0006028980133123696, -0.14159522950649261, -7.319182623177767e-05, -0.0004592079494614154, -0.0017761897761374712, -0.3115174174308777, -0.02209685742855072, -0.0005752577562816441, -0.0003634030872490257, -0.013439890928566456, -8.582700684200972e-05, -3.814689989667386e-06, -0.0015303102554753423, -0.0024667331017553806, -0.0036554201506078243, -0.00012718822108581662, -0.06530516594648361, -1.0371154530730564e-05, -8.22540732769994e-06, -0.6571199297904968, -0.13668563961982727, -0.0001754606782924384, -0.0023193859960883856, -0.0005926521262153983, -0.009327879175543785, -0.0966688022017479, -1.0728830375228426e-06, -0.0013513966696336865, -0.018204044550657272, -0.01031956635415554, -1.6287285089492798, -0.01842198334634304, -0.00017796363681554794, -0.20479772984981537, -0.049430012702941895, -0.02772659808397293, -0.187367781996727, -0.025530774146318436, -0.00021145492792129517, -0.04998660460114479, -0.012771126814186573, -0.0013559204526245594, -0.16940948367118835, -2.163691282272339, -0.08726587891578674, -0.25544455647468567, -0.018588507547974586, -0.11031784862279892, -0.1256169080734253, -1.5763463973999023, -0.003398240776732564, -0.4126022160053253, -0.0012256737099960446, -0.5599673986434937, -0.0037781065329909325, -0.04526622220873833, -0.022227561101317406, -0.042945895344018936, -0.00046433156239800155, -0.000614335120189935, -0.0012949660886079073, -0.24547654390335083, -1.6569954823353328e-05, -1.7523612768854946e-05, -1.5139465176616795e-05, -0.00044919890933670104, -0.0001308832288486883, -0.0010208638850599527, -4.410734163684538e-06, -9.536738616588991e-07, -0.000528076896443963, -0.3914695680141449, -0.11172862350940704, -0.0020754244178533554, -0.004663780797272921, -0.014080350287258625, -0.01292282622307539, -0.06677158921957016, -0.00039176418795250356, -0.09805474430322647, -1.4773677587509155, -1.216038703918457, -0.017854327335953712, -0.05191679671406746, -0.0679590180516243, -0.5534215569496155, -1.88973069190979, -0.06129421293735504, -0.29558369517326355, -0.00027295202016830444, -0.2509823441505432, -0.3548791706562042, -0.033543527126312256, -0.0028071305714547634, -0.08053922653198242, -0.00022682955022901297, -0.0657782107591629, -0.991434633731842, -0.000532008707523346, -0.20680084824562073, -0.35950979590415955, -0.07445133477449417, -0.000448841426987201, -0.9031342267990112, -0.00016318420239258558, -0.0020613865926861763, -0.2813479006290436, -0.9838219285011292, -0.0021752286702394485, -9.536738616588991e-07, 0.0, -0.0001308832288486883, -0.0003296785580459982, -0.02533680945634842, -0.5450865030288696, -0.5679963827133179, -0.0006130246329121292, -0.271809458732605, -0.17464342713356018, -0.0040635643526911736, -2.1151442527770996, -0.007411484140902758, -2.114779472351074, -0.11528510600328445, -0.010962851345539093, -0.10766524821519852, -0.00020144341397099197, -0.048982538282871246, -0.0002444683632347733, -0.003667535027489066, -0.0029717590659856796, -0.03667541593313217, -7.390948667307384e-06, -5.960462772236497e-07, -3.576278118089249e-07, -0.05527368187904358, 0.0, -4.768360213347478e-06, -0.0014248467050492764, -0.00031609306461177766, -0.004346091765910387, -0.16039277613162994, -0.0006962973857298493, -0.031833428889513016, -0.8106135725975037, -0.02015806920826435, -1.9655749797821045, -0.07445565611124039, -1.098118782043457, -2.6046438217163086, -0.8987712860107422, -0.028582055121660233, -0.7913179993629456, -0.10384729504585266, -0.6590180993080139, -0.0005243833875283599, -0.2391560822725296, -0.0062543852254748344, -0.0008791395812295377, -0.029644416645169258, -0.0018424693262204528, -0.00035279724397696555, -0.004964406136423349, -0.003577382303774357, -0.054348528385162354, -0.001400562352500856, -1.5483695268630981, -0.00012742661056108773, -0.018380319699645042, -0.0766160860657692, -0.047089431434869766, -0.02312256395816803, -0.00047052756417542696, -0.029461203143000603, -5.149708886165172e-05, -0.04544952139258385, -0.0033109153155237436, -0.008959922008216381, -0.0008531744824722409, -2.4001998901367188, -0.9761680364608765, -0.12838542461395264, -1.5419009923934937, -0.3159254789352417, -1.065679907798767, -0.11295044422149658, -0.14291691780090332, -0.0021261009387671947, -0.056239452213048935, -0.0005845506675541401], "finish_reason": "length"}], "metrics": {"energy": 898.3254803543099, "energy_per_token": 3.509083907634023, "time": 22.283995, "time_per_token": 0.08704685546875}}
{"outputs": [{"text": "file_matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = Path(file_path).stem\n        with open(file_path, 'r') as file:\n            file_content = file.read()\n            file_matches[file_name] = re.findall(regex_pattern, file_content)\n    return file_matches", "tokens": ["file", "_", "matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "file", "_", "name", " =", " Path", "(", "file", "_", "path", ")", ".", "stem", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "file", "_", "content", " =", " file", ".", "read", "()", "\n", "            ", "file", "_", "matches", "[", "file", "_", "name", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", "_", "content", ")", "\n", "    ", "return", " file", "_", "matches", "\n", "\n", "print"], "logprobs": [-2.6729633808135986, -0.04693213477730751, -1.298927664756775, -0.0516512468457222, -0.029170053079724312, -0.13759514689445496, -0.33522963523864746, -0.7399645447731018, -0.3483557105064392, -0.3485388159751892, -0.06389810144901276, -0.0027800267562270164, -0.03325575217604637, -0.0007292948430404067, -0.006785919889807701, -0.004107373300939798, -0.2940462827682495, -7.629365427419543e-06, -0.00040713604539632797, -6.437280717364047e-06, -0.0031009467784315348, -0.0004987664869986475, -0.006652351934462786, -4.60137271147687e-05, -2.3841830625315197e-06, -0.0034746292512863874, -0.31867799162864685, -0.1474059820175171, -0.03537716716527939, -0.008772051893174648, -0.053905848413705826, -0.0010795724811032414, -0.0969850942492485, -0.015576018020510674, -0.5583136081695557, -0.020901767536997795, -0.0406380333006382, -0.008399752900004387, -2.4726085662841797, -0.0014432977186515927, -0.005376996472477913, -1.645074735279195e-05, -0.00021669900161214173, -0.0015588762471452355, -0.0033030735794454813, -0.8395286798477173, -0.17945846915245056, -0.03069593943655491, -0.2873500883579254, -0.0026736250147223473, -0.0008314966107718647, -0.015178299508988857, -2.5987286790041253e-05, -5.507317473529838e-05, -0.05972990021109581, -0.11785031855106354, -0.0046775443479418755, -0.36334168910980225, -0.00011050090688513592, -0.3271307349205017, -0.004956458695232868, -0.002232917817309499, -0.0021641661878675222, -1.2703986167907715, -0.0003507714136503637, -0.5872554779052734, -0.0009048658539541066, -0.010056659579277039, -6.580135959666222e-05, -1.3828182090946939e-05, -0.009911134839057922, -0.01714410074055195, -0.10615214705467224, -1.4178977012634277, -0.00013648532330989838, -0.02251153253018856, -0.0066099571995437145, -0.0021635713055729866, -6.05564855504781e-05, -0.0015720878727734089, -0.0011975744273513556, -0.00022420754248742014, -0.08118759840726852, -0.00022623363474849612, -0.0043443115428090096, -0.0005841932725161314, -0.000732868502382189, -0.11163341999053955, -0.00014304091746453196, -6.556489552167477e-06, -0.001595415873453021, -0.004225493408739567, -1.156323378381785e-05, -1.585470999998506e-05, -0.028248002752661705, -0.014993473887443542, -0.11948728561401367, -0.012256307527422905, -0.006261374801397324, -8.344646857949556e-07, -4.529942543740617e-06, -0.2297704666852951, -0.009974281303584576, -3.599226236343384], "finish_reason": "stop"}], "metrics": {"energy": 363.09165836238844, "energy_per_token": 3.4912659457921964, "time": 8.842138, "time_per_token": 0.0850205576923077}}
{"outputs": [{"text": "pattern = re.compile(regex_pattern)\n    matches_dict = {}\n\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r') as file:\n            contents = file.read()\n            matches_dict[file_name] = pattern.findall(contents)\n    return matches_dict", "tokens": ["pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "    ", "matches", "_", "dict", " =", " {}", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "            ", "matches", "_", "dict", "[", "file", "_", "name", "]", " =", " pattern", ".", "find", "all", "(", "contents", ")", "\n", "    ", "return", " matches", "_", "dict", "\n", "\n", "def"], "logprobs": [-3.9977657794952393, -0.05061167851090431, -0.21153371036052704, -0.00012981049076188356, -0.0003369478799868375, -0.003421407425776124, -0.04815288260579109, -0.00010299152199877426, -2.145764938177308e-06, -0.0427699014544487, -0.1376989185810089, -0.17425674200057983, -0.7212452292442322, -2.121861457824707, -0.6040474772453308, -0.016916973516345024, -0.028045639395713806, -0.01469855010509491, -0.9216938018798828, -0.0007768235518597066, -0.7668911814689636, -0.260881632566452, -0.41501665115356445, -0.081557497382164, -0.005777920130640268, -0.037185054272413254, -0.00034707720624282956, -0.015287723392248154, -0.005522708408534527, -0.4583156108856201, -1.1205610462639015e-05, -0.0005576247931458056, -1.2993727978027891e-05, -0.003375786356627941, -0.000860201776959002, -0.007099401671439409, -4.589452510117553e-05, -1.9073468138230965e-06, -0.004254932049661875, -0.2544165849685669, -0.12979136407375336, -0.03744839131832123, -0.007213026750832796, -0.07372528314590454, -0.0009238027851097286, -0.05037038028240204, -0.01937090791761875, -0.39329656958580017, -0.04345828667283058, -0.04401695728302002, -0.01198295596987009, -0.1110265776515007, -1.1205610462639015e-05, -1.2993727978027891e-05, -5.722029527532868e-06, -0.11264268308877945, -1.1920928244535389e-07, -1.1086402082582936e-05, -0.002540101297199726, -5.8412379075889476e-06, -0.0001736728590913117, -0.0004219118563923985, -0.029549863189458847, -0.11083997786045074, -0.6612231731414795, -0.056610357016325, -0.0008486483711749315, -0.05536177381873131, -8.868777513271198e-05, -0.0015191215788945556, -0.04427781701087952, -0.13238756358623505, -0.003539608558639884, -0.4738044738769531, -0.00019596086349338293, -0.3195101022720337, -0.0044590807519853115, -0.0024622143246233463, -0.00319446949288249, -3.58632755279541, -0.0005013877525925636, -0.007416217587888241, -0.00011491115583339706, -1.3112935448589269e-05, -0.008878161199390888, -0.016910996288061142, -0.0808856189250946, -0.13751620054244995, -1.9901190996170044, -0.1247367337346077, -0.004836408421397209, -0.007170655764639378, -0.0003406421164982021, -0.0017313265707343817, -0.008578355424106121, -0.00029237763374112546, -0.12352069467306137, -8.594620157964528e-05, -0.004206262528896332, -0.0003334919747430831, -0.00020382710499688983, -0.002006661845371127, -0.004693443886935711, -0.016792958602309227, -1.947805404663086, -0.01804365962743759, -0.003245327156037092, -0.0003389737685211003, -6.687417771900073e-05, -0.21899104118347168, -0.008068704046308994, -1.2833688259124756], "finish_reason": "stop"}], "metrics": {"energy": 379.2280187225341, "energy_per_token": 3.3859644528797688, "time": 9.471889, "time_per_token": 0.0845704375}}
{"outputs": [{"text": "try:\n        # Compile the regex pattern\n        pattern = re.compile(regex_pattern)\n\n        # Find all text files in the directory and its subdirectories\n        text_files = glob.glob(os.path.join(directory_path, '**/*.txt'), recursive=True)\n\n        # Initialize a dictionary to store the matches\n        matches = {}\n\n        # Loop through each file and extract matches\n        for file_path in text_files:\n            file_name = os.path.basename(file_path)\n            with open(file_path, 'r') as file:\n                text = file.read()\n                found = pattern.findall(text)\n                if found:\n                    matches[file_name] = found\n        return matches\n\n    except Exception as e:\n        # Log the exception message\n        raise e", "tokens": ["try", ":", "\n", "        ", "#", " Com", "pile", " the", " regex", " pattern", "\n", "        ", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "\n", "        ", "#", " Find", " all", " text", " files", " in", " the", " directory", " and", " its", " sub", "direct", "ories", "\n", "        ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "**", "/*", ".", "txt", "')", ",", " recursive", "=", "True", ")", "\n", "\n", "        ", "#", " Initialize", " a", " dictionary", " to", " store", " the", " matches", "\n", "        ", "matches", " =", " {}", "\n", "\n", "        ", "#", " Loop", " through", " each", " file", " and", " extract", " matches", "\n", "        ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "text", " =", " file", ".", "read", "()", "\n", "                ", "found", " =", " pattern", ".", "find", "all", "(", "text", ")", "\n", "                ", "if", " found", ":", "\n", "                ", "    ", "matches", "[", "file", "_", "name", "]", " =", " found", "\n", "        ", "return", " matches", "\n", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "#", " Log", " the", " exception", " message", "\n", "        ", "raise", " e"], "logprobs": [-4.283102989196777, -0.0008650851668789983, -0.015516276471316814, -0.033380165696144104, -1.4136805534362793, -4.078131198883057, -0.0039018464740365744, -0.23339273035526276, -1.331516981124878, -0.03131343051791191, -0.9706701040267944, -0.0026680370792746544, -0.4984530508518219, -0.004413269460201263, -0.0007976687629707158, -4.637133679352701e-05, -1.6093124941107817e-05, -0.0012172202114015818, -0.03352104499936104, -9.548207890475169e-05, -1.4543427823809907e-05, -0.04577776417136192, -0.018164126202464104, -0.28008970618247986, -0.003015972441062331, -0.031409088522195816, -2.597245693206787, -0.12599679827690125, -0.2865590453147888, -0.01604326255619526, -0.08587604761123657, -0.03617459908127785, -0.3762988746166229, -1.6479147672653198, -0.17915186285972595, -0.0032987960148602724, -0.040188781917095184, -1.966933996300213e-05, -0.11894509941339493, -0.00119066855404526, -0.7895622849464417, -0.0057599046267569065, -0.02213020622730255, -0.008087861351668835, -0.06983396410942078, -0.0002661589242052287, -0.0013243722496554255, -0.004145719110965729, -0.3707917332649231, -1.7881233361549675e-05, -0.00014852374442853034, -1.645074735279195e-05, -0.0022109129931777716, -0.0007688426994718611, -0.003902558935806155, -4.637133679352701e-05, -2.50339189733495e-06, -0.0011444692499935627, -0.12213312089443207, -0.0021679725032299757, -0.27332648634910583, -0.0015730400336906314, -0.00538458488881588, -0.00650905491784215, -0.0001528146385680884, -0.0011181537993252277, -0.0019069596892222762, -0.001348539488390088, -0.002536534098908305, -0.010523306205868721, -0.05570414289832115, -0.001437107683159411, -0.15066157281398773, -1.672433853149414, -0.9158656001091003, -0.02335713617503643, -0.06708130985498428, -0.04571160301566124, -0.5718322992324829, -0.20689448714256287, -0.1907099485397339, -0.0005422552349045873, -0.09936235845088959, -0.2023661583662033, -0.01794051006436348, -0.0027177324518561363, -0.03307366371154785, -0.0005071069463156164, -0.06900618970394135, -1.648407220840454, -0.13718253374099731, -0.17979972064495087, -1.2494280338287354, -0.29250577092170715, -0.24180960655212402, -0.1980638951063156, -0.30888643860816956, -0.0002611534437164664, -0.003115682862699032, -0.164579376578331, -0.9999833106994629, -0.01113121211528778, -0.00011264643399044871, -0.001292227883823216, -1.1920928244535389e-07, 0.0, -8.546940807718784e-05, -0.0006878394051454961, -0.008833852596580982, -2.044865846633911, -0.024266833439469337, -0.026515120640397072, -0.004758106544613838, -0.037929289042949677, -4.291525328881107e-06, -2.9802276912960224e-06, -3.099436753473128e-06, -0.05173558369278908, 0.0, -8.583032467868179e-06, -0.0014478211523965001, -5.125986263010418e-06, -4.9470632802695036e-05, -0.000715714821126312, -0.21809178590774536, -0.19248589873313904, -0.2186526507139206, -0.0158206969499588, -0.000348268891684711, -0.012038551270961761, -4.0649541915627196e-05, -4.136476854910143e-05, -0.00840306282043457, -0.06375730037689209, -0.0014396075857803226, -0.511694073677063, -4.005352093372494e-05, -0.08989440649747849, -0.0006086166249588132, -0.0014113951474428177, -0.001192454481497407, -1.8693643808364868, -0.005001177545636892, -0.0035617027897387743, -5.864924969500862e-05, -5.8412379075889476e-06, -0.0005241450853645802, -0.014376513659954071, -0.08895036578178406, -3.3113083839416504, -1.8491194248199463, -0.13552871346473694, -2.0265373677830212e-05, -0.020155498757958412, -0.008462049067020416, -0.00017248096992261708, -0.0013871104456484318, -0.003554694587364793, -0.05468402057886124, -0.26043686270713806, -0.8997796177864075, -0.032874349504709244, -0.012708275578916073, -0.030849222093820572, -0.0001716466504149139, -0.0005887205479666591, -0.32414308190345764, -0.006954274605959654, -0.0027267676778137684, -0.00014673586701974273, -0.0024623333010822535, -0.0023110604379326105, -9.333651541965082e-05, -0.09767652302980423, -0.02671152539551258, -3.0313334465026855, -0.04578493908047676, -0.0024804084096103907, -0.013550445437431335, -1.3384140729904175, -0.006004864815622568, -0.08041054010391235, -0.18805785477161407, -0.011467023752629757, -0.21685436367988586, -0.000576449150685221, -0.0163076501339674, -0.0076004378497600555, -2.0374677181243896, -0.9809994697570801, -1.0066030025482178, -1.584775447845459, -2.2488648891448975, -0.36992496252059937, -0.0016639686655253172, -3.0868430137634277, -0.6566566824913025], "finish_reason": "stop"}], "metrics": {"energy": 697.8533651294705, "energy_per_token": 3.5424028686775153, "time": 17.242706, "time_per_token": 0.08752642639593908}}
{"outputs": [{"text": "# Initialize an empty dictionary to store the matches\n    matches = {}\n\n    # Use glob to get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Iterate through each text file\n    for file_path in text_files:\n        # Get the file name without path using Path\n        file_name = Path(file_path).stem\n        # Initialize an empty list to store the matches for this file\n        matches[file_name] = []\n\n        # Read the file contents and split into lines\n        with open(file_path, 'r', encoding='utf-8') as file:\n            lines = file.readlines()\n\n        # Iterate through each line\n        for line in lines:\n            # Find all matches in the line\n            line_matches = re.findall(regex_pattern, line.strip())\n            # If there are any matches, add them to the list of matches for this file\n            if line_matches:\n                matches[file_name] += line_matches\n\n    return matches", "tokens": ["#", " Initialize", " an", " empty", " dictionary", " to", " store", " the", " matches", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "#", " Use", " glob", " to", " get", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " text", " file", "\n", "    ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "        ", "#", " Get", " the", " file", " name", " without", " path", " using", " Path", "\n", "        ", "file", "_", "name", " =", " Path", "(", "file", "_", "path", ")", ".", "stem", "\n", "        ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " matches", " for", " this", " file", "\n", "        ", "matches", "[", "file", "_", "name", "]", " =", " []", "\n", "\n", "        ", "#", " Read", " the", " file", " contents", " and", " split", " into", " lines", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "lines", " =", " file", ".", "read", "lines", "()", "\n", "\n", "        ", "#", " Iter", "ate", " through", " each", " line", "\n", "        ", "for", " line", " in", " lines", ":", "\n", "            ", "#", " Find", " all", " matches", " in", " the", " line", "\n", "            ", "line", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " line", ".", "strip", "())", "\n", "            ", "#", " If", " there", " are", " any", " matches", ",", " add", " them", " to", " the", " list", " of", " matches", " for", " this", " file", "\n", "            ", "if", " line", "_", "matches", ":", "\n", "                ", "matches", "[", "file", "_", "name", "]", " +=", " line", "_", "matches", "\n", "\n", "    ", "return", " matches"], "logprobs": [-1.2958691120147705, -1.5617157220840454, -0.633597195148468, -0.0015038858400657773, -0.020495768636465073, -0.13149870932102203, -0.1320999264717102, -0.49705350399017334, -0.3468566834926605, -0.4384509325027466, -0.0034633437171578407, -0.21289683878421783, -0.20399606227874756, -0.03405545651912689, -0.0065340446308255196, -0.22549626231193542, -0.0009017692063935101, -0.02049226500093937, -1.5702967643737793, -0.5706685185432434, -0.28740283846855164, -1.0309410095214844, -0.37991365790367126, -0.002679807133972645, -0.0002783149539027363, -0.22149071097373962, -0.36243194341659546, -0.012648597359657288, -0.09190836548805237, -0.012721458449959755, -0.3861336410045624, -0.145639568567276, -0.0014229421503841877, -0.5849666595458984, -0.007895569317042828, -0.01754525490105152, -0.0056923432275652885, -0.012051035650074482, -0.0007606235449202359, -0.0005143749876879156, -0.0026594768278300762, -0.3315993547439575, -2.4199192921514623e-05, -0.00010096516780322418, -1.6212332411669195e-05, -0.001784400548785925, -0.0004659997357521206, -0.004957882221788168, -9.905801562126726e-05, -1.3708974620385561e-05, -0.0008789013954810798, -0.2219008058309555, -0.0648689866065979, -0.003302360652014613, -0.00495088379830122, -0.012354748323559761, -0.01898019388318062, -0.04520697519183159, -0.0006398299592547119, -0.05493026226758957, -0.7222850322723389, -0.0002836778585333377, -1.2550649642944336, -0.2704334259033203, -0.20904846489429474, -0.0007524043321609497, -0.3415825068950653, -0.00033718624035827816, -0.003306400263682008, -0.4202286899089813, -0.46049636602401733, -0.012620463967323303, -0.00016318420239258558, -0.002654958749189973, -4.0531076592742465e-06, -2.3841855067985307e-07, -8.296622399939224e-05, -0.0006048041977919638, -0.05889349430799484, -0.3436131775379181, -1.9588823318481445, -0.04990677163004875, -0.15391050279140472, -0.011119659058749676, -0.2552123963832855, -1.063445806503296, -2.8339223861694336, -0.3907465636730194, -0.787724494934082, -0.0003120412293355912, -0.022964946925640106, -0.008664040826261044, -0.010074716061353683, -0.0047982074320316315, -0.23087412118911743, -0.0003152588615193963, -0.0007221474661491811, -1.4066597032069694e-05, -1.728519782773219e-05, -0.00018606838420964777, -0.00063744728686288, -1.9346351623535156, -0.04059304669499397, -1.495429515838623, -0.14737831056118011, -1.6301594972610474, -0.10240426659584045, -0.00011228884250158444, -0.009167836979031563, -0.09553418308496475, -0.0039431690238416195, -0.11593575775623322, -0.03851193189620972, -0.4179179072380066, -0.16156411170959473, -0.002629277529194951, -0.001134586171247065, -0.001611959422007203, -2.1834006309509277, -0.20715296268463135, -0.0007532381569035351, -7.867782187531702e-06, -0.0017897554207593203, -0.0004378790326882154, -5.400034933700226e-05, -0.004119482357054949, -0.00830328743904829, -0.8400930762290955, -0.0057990169152617455, -0.06006213277578354, -1.4833112955093384, -0.04840164631605148, -0.5007343888282776, -2.0741162300109863, -2.1998519897460938, -1.8463613986968994, -1.7594751119613647, -0.11635086685419083, -0.15849485993385315, -0.0005245024804025888, -0.014261702075600624, -0.0005482124397531152, -0.0004580163804348558, -0.0027533976826816797, -7.152531907195225e-06, -2.098061486321967e-05, -0.010579099878668785, -0.053458113223314285, -0.0010701649589464068, -1.4928834438323975, -0.00012396997772157192, -0.014431975781917572, -0.11933610588312149, -0.07625694572925568, -0.02577976882457733, -0.0005869334563612938, -0.02561141550540924, -9.715084888739511e-05, -0.13185139000415802, -0.002073521027341485, -0.0025455711875110865, -0.0020793499425053596, -0.3836182653903961, -0.0006158839096315205, -0.0029805542435497046, -5.864924969500862e-05, -5.006777428206988e-06, -0.1340920478105545, -9.476689592702314e-05, -0.004861914087086916, -0.14328348636627197, -0.05670666694641113, -0.008671249262988567, -0.1793987900018692, -6.294052582234144e-05, -0.005473745055496693, -0.003932007122784853, -0.0009816833771765232, -0.8878580927848816, -0.0009984752396121621, -0.0012134101707488298, -0.0018747150897979736, -0.005695424973964691, -0.0001134808044298552, -0.00015829740732442588, -0.0008534126682206988, -0.004140258301049471, -0.010644680820405483, -1.7494834661483765, -0.1536756008863449, -0.07113489508628845, -0.5436984300613403, -0.004613114055246115, -0.006400680169463158, -2.0214955806732178, -0.0008387623238377273, -0.5864521861076355, -0.009062940254807472, -0.0029269494116306305, -0.00043418517452664673, -0.01023862510919571, -5.328513361746445e-05, -0.003443385474383831, -0.01078974548727274, -0.0005769256968051195, -0.040218785405159, -0.00010168035078095272, -5.483612312673358e-06, -0.000979420612566173, -0.0012963948538526893, -3.0686607360839844, -0.0838608518242836, -0.02891460619866848, -0.01041701715439558, -0.48006898164749146, -0.050841476768255234, -3.249861240386963, -0.4629022181034088, -0.05123443901538849, -1.5380018949508667, -0.03176402673125267, -0.1366705596446991, -0.3873392939567566, -0.031337346881628036, -0.0033353909384459257, -0.004543576389551163, -0.2886919677257538, -0.6046594381332397, -0.05580764263868332, -0.01807737909257412, -0.025251494720578194, -0.005792142357677221, -0.013170039281249046, -0.0005382042727433145, -0.03631129488348961, -0.03377451375126839, -2.253030106658116e-05, -1.6689286894688848e-06, -0.014754229225218296, -0.0014231802197173238, -0.00047100416850298643, -0.1266040802001953, -0.000697846058756113, -6.687417771900073e-05, -6.6756979322235566e-06, -8.356221951544285e-05, -0.00024089295766316354, -1.6643539667129517, -0.11319627612829208, -3.1470757676288486e-05, -1.1920928244535389e-07, -0.01776193268597126, -0.04100058227777481, -0.009891659021377563, -0.7864151000976562, -0.001716570113785565], "finish_reason": "length"}], "metrics": {"energy": 895.6012959194181, "energy_per_token": 3.498442562185227, "time": 22.70066, "time_per_token": 0.088674453125}}
{"outputs": [{"text": "matches = {}\n\n    # Iterate through the text files in the given directory\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file)\n        matches[file_name] = []\n\n        # Read each line from the file\n        with open(file, 'r') as f:\n            for line in f:\n                # Extract the matches from the line based on the provided regular expression pattern\n                results = re.findall(regex_pattern, line)\n\n                # Check if results are valid and add them to the dictionary\n                if results:\n                    for result in results:\n                        matches[file_name].append(result)\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " through", " the", " text", " files", " in", " the", " given", " directory", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "        ", "matches", "[", "file", "_", "name", "]", " =", " []", "\n", "\n", "        ", "#", " Read", " each", " line", " from", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "for", " line", " in", " f", ":", "\n", "                ", "#", " Ext", "ract", " the", " matches", " from", " the", " line", " based", " on", " the", " provided", " regular", " expression", " pattern", "\n", "                ", "results", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " line", ")", "\n", "\n", "                ", "#", " Check", " if", " results", " are", " valid", " and", " add", " them", " to", " the", " dictionary", "\n", "                ", "if", " results", ":", "\n", "                ", "    ", "for", " result", " in", " results", ":", "\n", "                ", "        ", "matches", "[", "file", "_", "name", "]", ".", "append", "(", "result", ")", "\n", "\n", "    ", "return", " matches", "\n", "\n", "#"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -0.11873657256364822, -1.519421100616455, -0.0021771318279206753, -0.7386462688446045, -2.2672200202941895, -0.049547433853149414, -1.5301353931427002, -2.537681818008423, -0.8583083748817444, -0.008783751167356968, -0.06882648915052414, -0.024028867483139038, -3.131230354309082, -0.015606063418090343, -0.2266659289598465, -0.003613016800954938, -0.11777795106172562, -0.3857004940509796, -1.3510103225708008, -0.16743141412734985, -0.0006048041977919638, -0.014736962504684925, -0.005170782096683979, -0.46422094106674194, -1.5616295058862306e-05, -0.0005422552349045873, -1.585470999998506e-05, -0.003072781255468726, -0.0005983707960695028, -0.00422620540484786, -0.00013398226292338222, -4.529942543740617e-06, -0.0024138144217431545, -0.28121230006217957, -0.051711130887269974, -0.013748236931860447, -0.004950409289449453, -0.04123282805085182, -0.0006606780225411057, -0.015492800623178482, -0.09768517315387726, -1.2227661609649658, -0.013702614232897758, -0.39230263233184814, -0.006586627569049597, -0.10972463339567184, -1.0132738680113107e-05, -1.6093124941107817e-05, -6.556489552167477e-06, -0.1939062476158142, -1.4305104514278355e-06, -1.8358061424805783e-05, -0.003569661406800151, -0.0013867533998563886, -0.24673916399478912, -0.34235405921936035, -1.8686306476593018, -0.03207601234316826, -0.0017389428103342652, -0.002312249969691038, -0.00011324241495458409, -0.0021510813385248184, -0.00015472168161068112, -0.08185543119907379, -0.10766353458166122, -0.32134395837783813, -0.012165865860879421, -0.4233841598033905, -0.7118964791297913, -2.470707893371582, -1.1958403587341309, -0.9460282921791077, -0.020959554240107536, -0.28519895672798157, -0.5468358993530273, -0.0003418338019400835, -0.07019118964672089, -0.01995791867375374, -0.0009627474937587976, -0.03515506535768509, -0.026860311627388, -0.13003769516944885, -0.0038246591575443745, -0.3349705934524536, -6.97350042173639e-05, -0.06256890296936035, -0.010082504712045193, -0.0011800715001299977, -0.0028889132663607597, -0.15150541067123413, -0.0029646276962012053, -0.00197001826018095, -0.0007331067463383079, -0.08591116219758987, -0.0016439745668321848, -0.03245241194963455, -0.0995015799999237, -2.127836227416992, -0.006610904820263386, -1.5891789197921753, -0.23423126339912415, -0.8476036787033081, -0.3247045576572418, -0.08187959343194962, -2.312408447265625, -0.000704159727320075, -0.01706218533217907, -2.4589409828186035, -1.2561933994293213, -0.0021648798137903214, -0.10901755094528198, -0.02645092085003853, -0.0009539344464428723, -3.431398391723633, -0.003050676081329584, -0.04674205183982849, -6.651657167822123e-05, -0.04013358801603317, -0.058342400938272476, -0.0005335576133802533, -0.04159756377339363, -0.0002899941464420408, -1.1920858014491387e-05, -0.001511027687229216, -0.004235108382999897, -0.08377359062433243, -0.004559952765703201, -0.8307832479476929, -0.001347468001767993, -0.05734309181571007, -3.1495273113250732, -0.08808784186840057, -2.2428226470947266, -0.8907318115234375, -2.3647749423980713, -0.8714153170585632, -0.8656430244445801, -0.24123425781726837, -0.013741769827902317, -0.04478348419070244, -0.7659174799919128, -0.19418233633041382, -0.0004711233195848763, -0.08466382324695587, -0.18930912017822266, -0.5682390332221985, -0.0036699105985462666, -0.0011319665936753154, -0.001958834705874324, -1.6253526210784912, -0.6175909638404846, -0.002232323167845607, -0.0031722483690828085, -0.00867585837841034, -0.004038037732243538, -0.0025069257244467735, -0.0018117694417014718, -1.6221226453781128, -0.003218353958800435, -0.0005874100024811924, -0.0013065143721178174, -3.135155202471651e-05, -0.0004539651272352785, -0.059077464044094086, -0.06052723154425621, -0.04205029830336571, -0.04287269338965416, -0.0833960697054863, -0.008221946656703949, -0.07941510528326035, -0.03321792930364609, -0.1907888501882553, -0.0026824227534234524, -0.2802410423755646, -0.007635810878127813, -1.705721378326416], "finish_reason": "stop"}], "metrics": {"energy": 646.3713259162895, "energy_per_token": 3.611012993945751, "time": 15.352494, "time_per_token": 0.08576812290502793}}
{"outputs": [{"text": "# Get all .txt files in the directory and its subdirectories\n    files = glob.glob(f\"{directory_path}/**/*.txt\", recursive=True)\n    matches = {}\n    for file in files:\n        with open(file, \"r\") as f:\n            # Extract matches from the file\n            matches[file] = re.findall(regex_pattern, f.read())\n\n    return matches", "tokens": ["#", " Get", " all", " ", ".", "txt", " files", " in", " the", " directory", " and", " its", " sub", "direct", "ories", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}/", "**", "/*", ".", "txt", "\"", ",", " recursive", "=", "True", ")", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "#", " Ext", "ract", " matches", " from", " the", " file", "\n", "            ", "matches", "[", "file", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " f", ".", "read", "())", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -3.0968375205993652, -0.8999066352844238, -2.426398515701294, -0.0002836778585333377, -0.004312857519835234, -0.0417131669819355, -0.08826040476560593, -0.214873805642128, -0.362270325422287, -2.503429651260376, -0.1295005828142166, -0.004200801718980074, -0.06178148835897446, -4.8993817472364753e-05, -0.13045231997966766, -0.005950829479843378, -1.3768086433410645, -0.09480419009923935, -0.05108923465013504, -0.00034481301554478705, -0.0035324811469763517, -0.002986615989357233, -1.5601853132247925, -0.3965549170970917, -0.007883742451667786, -0.010662490501999855, -5.924526340095326e-05, -1.1920858014491387e-05, -0.3239572048187256, -0.014963175170123577, -0.0029805542435497046, -0.0014972201315686107, -0.0012373419012874365, -0.0005554801900871098, -0.006153091788291931, -0.0013563965912908316, -0.004926210269331932, -0.0027323553804308176, -0.0020400919020175934, -0.028362378478050232, -1.4120213985443115, -1.2248821258544922, -0.09347757697105408, -0.044725801795721054, -0.32602155208587646, -0.6045916080474854, -0.32564935088157654, -0.12574611604213715, -0.0960903912782669, -0.0025552024599164724, -0.0003022690652869642, -0.011618213728070259, -0.013006492517888546, -0.7325796484947205, -0.007508864160627127, -0.0005790702416561544, -0.011426600627601147, -0.03773633763194084, -0.7094327807426453, -0.00510922959074378, -0.0007800396997481585, -0.5042076110839844, -6.222531374078244e-05, -0.028213119134306908, -0.011886482127010822, -0.027387388050556183, -0.0033707963302731514, -0.8321505188941956, -1.3409981727600098, -0.0023223592434078455, -0.35109981894493103, -0.2325771003961563, -0.35462334752082825, -0.08986368030309677, -0.6733351945877075, -0.002064479747787118, -1.490911841392517, -0.13466504216194153, -1.055222749710083, -0.37648138403892517, -0.0003149013500660658, -0.08861013501882553, -0.00022373080719262362, -0.002836611121892929, -0.0021005249582231045, -0.0004135706985834986, -0.06937695294618607, -0.00015376816736534238, -9.775113539944869e-06, -0.0011481605470180511, -0.014276391826570034, -0.0011306566884741187, -2.52720492426306e-05, -0.03153592348098755, -0.009793566539883614, -2.018832206726074, -0.014452420175075531, -0.5699877738952637, -0.014472747221589088, -0.2268371731042862, -0.010162397287786007, -0.8598222732543945], "finish_reason": "stop"}], "metrics": {"energy": 356.4323263978958, "energy_per_token": 3.460508023280542, "time": 8.840549, "time_per_token": 0.08583057281553397}}
{"outputs": [{"text": "# Initialize an empty dictionary\n    results = {}\n\n    # Convert the directory path to a Path object for ease of use\n    path = Path(directory_path)\n\n    # Find all text files in the directory\n    file_list = glob.glob(f'{path}/**/*.txt', recursive=True)\n\n    # Iterate over each file and extract matches\n    for file_path in file_list:\n        # Open each file in read mode\n        with open(file_path, 'r') as file:\n            # Extract the file name without the path\n            file_name = os.path.basename(file_path)\n            # Read the contents of the file\n            file_contents = file.read()\n            # Use the regular expression pattern to find matches in the file contents\n            matches = re.findall(regex_pattern, file_contents)\n            # Add the file name and extracted matches to the dictionary\n            results[file_name] = matches\n\n    return results", "tokens": ["#", " Initialize", " an", " empty", " dictionary", "\n", "    ", "results", " =", " {}", "\n", "\n", "    ", "#", " Convert", " the", " directory", " path", " to", " a", " Path", " object", " for", " ease", " of", " use", "\n", "    ", "path", " =", " Path", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " in", " the", " directory", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "f", "'{", "path", "}/", "**", "/*", ".", "txt", "'", ",", " recursive", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " and", " extract", " matches", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "list", ":", "\n", "        ", "#", " Open", " each", " file", " in", " read", " mode", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " Ext", "ract", " the", " file", " name", " without", " the", " path", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "            ", "#", " Read", " the", " contents", " of", " the", " file", "\n", "            ", "file", "_", "contents", " =", " file", ".", "read", "()", "\n", "            ", "#", " Use", " the", " regular", " expression", " pattern", " to", " find", " matches", " in", " the", " file", " contents", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", "_", "contents", ")", "\n", "            ", "#", " Add", " the", " file", " name", " and", " extracted", " matches", " to", " the", " dictionary", "\n", "            ", "results", "[", "file", "_", "name", "]", " =", " matches", "\n", "\n", "    ", "return", " results", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -1.5617157220840454, -0.633597195148468, -0.0015038858400657773, -0.020495768636465073, -2.593557834625244, -0.0020038066431879997, -3.302893877029419, -0.14391648769378662, -0.03201320767402649, -0.010550673119723797, -0.3906053304672241, -0.0011235122801735997, -0.021571651101112366, -4.574125289916992, -0.7826324701309204, -0.24299216270446777, -0.10563421994447708, -0.0953342616558075, -0.22934918105602264, -0.39732080698013306, -0.01904943585395813, -1.7772413492202759, -4.007303714752197, -0.004205313045531511, -0.17581279575824738, -0.11509228497743607, -0.00026663561584427953, -1.3424453735351562, -0.11321894824504852, -0.0014572249492630363, -0.0016005337238311768, -0.0036891514901071787, -4.207999518257566e-05, -3.4570634852570947e-06, -0.0007485924870707095, -0.01831582933664322, -0.039753079414367676, -0.0004002247005701065, -0.014252652414143085, -2.878016233444214, -0.04838813096284866, -0.26905009150505066, -0.01593755930662155, -0.3695599436759949, -0.005263518542051315, -0.3833058774471283, -1.211948275566101, -0.0003123987407889217, -2.5135958194732666, -0.06653270870447159, -1.0018455982208252, -0.001980012049898505, -0.11871539801359177, -0.0007769426447339356, -0.0018755479250103235, -0.013296151533722878, -1.3907936811447144, -0.9951963424682617, -0.5522803068161011, -1.0756995677947998, -0.007901601493358612, -0.012311769649386406, -0.007291846442967653, -0.00701133394613862, -0.04948095232248306, -0.0010449193650856614, -0.00320504535920918, -0.025444429367780685, -0.01049593836069107, -0.0034344755113124847, -0.02495748922228813, -0.03388987481594086, -0.000867467257194221, -0.07716713845729828, -0.8047935962677002, -0.0017973711946979165, -0.2084016650915146, -0.42540615797042847, -0.2322399765253067, -1.2149579524993896, -0.26691296696662903, -0.11744707077741623, -1.089940071105957, -0.0004278697888366878, -0.005635682959109545, -0.20452824234962463, -1.1154561042785645, -0.1288568079471588, -0.0015710166189819574, -0.001470794901251793, -2.9802276912960224e-06, -2.3841855067985307e-07, -0.0003095386200584471, -0.002412862842902541, -0.06582241505384445, -0.4956909120082855, -1.5915697813034058, -2.0258874893188477, -0.28421837091445923, -0.4917498230934143, -0.4746301770210266, -0.010484731756150723, -0.7386367917060852, -0.00047124247066676617, -0.04762345924973488, -0.004180502146482468, -0.0007884969236329198, -0.011977891437709332, -0.00037424711626954377, -1.585470999998506e-05, -0.002666966989636421, -0.16732755303382874, -0.005382924806326628, -0.3256244659423828, -0.0001734344696160406, -0.40240222215652466, -0.003522027749568224, -0.000750617531593889, -0.014663895592093468, -0.08285567909479141, -2.119166374206543, -0.0013388964580371976, -0.5445894598960876, -0.2588682174682617, -0.01971530169248581, -0.25297918915748596, -0.8355269432067871, -0.20262570679187775, -0.2742312550544739, -0.00024589852546341717, -0.05021155998110771, -0.00035553809721022844, -0.004332204815000296, -0.0063267657533288, -0.14547517895698547, -7.629365427419543e-06, -3.0278701160568744e-05, -1.4305104514278355e-06, -0.022984636947512627, -1.1920928244535389e-07, -2.4676019165781327e-05, -0.0031159203499555588, -0.004213978536427021, -4.1483970562694594e-05, -0.000957150012254715, -0.0030845466535538435, -1.0537203550338745, -0.0421617329120636, -0.7242389917373657, -0.07932954281568527, -1.6318185329437256, -0.0028493304271250963, -0.12011215835809708, -0.006621088832616806, -0.16510476171970367, -0.00021431533969007432, -0.8449864387512207, -0.00012981049076188356, -0.2281648963689804, -0.00033623288618400693, -0.0014642480527982116, -5.304672595229931e-05, -3.4570634852570947e-06, -0.004897621460258961, -0.005843460559844971, -0.09391968697309494, -0.0043356469832360744, -0.8891210556030273, -0.3650124669075012, -0.7757475972175598, -0.0015044810716062784, -0.32526323199272156, -0.01948852464556694, -0.6500897407531738, -0.391828715801239, -0.6426507234573364, -0.01916206255555153, -0.02552356943488121, -0.08440496772527695, -0.040282223373651505, -0.0009454786195419729, -0.25618472695350647, -0.006460494827479124, -0.020185524597764015, -1.764281842042692e-05, -0.002554013393819332, -0.012421743012964725, -0.0006681832019239664, -0.04540430009365082, -0.00012182447244413197, -1.4185804502631072e-05, -0.0012842511059716344, -0.0017120479606091976, -2.777537883957848e-05, -4.887569048150908e-06, -0.03445391356945038, -0.0035816587042063475, -0.06517305225133896, -0.019537508487701416, -0.38731467723846436, -0.0670749619603157, -1.0584468841552734, -0.01173380110412836, -0.4227847754955292, -3.599337577819824, -0.003474273020401597, -0.03818703442811966, -0.0012702024541795254, -1.0559002161026, -0.043468788266181946, -0.0005679901223629713, -0.039493560791015625, -0.014150990173220634, -0.00223708082921803, -3.0040289857424796e-05, -0.0006158839096315205, -0.0008437649230472744, -0.00011657988943625242, -0.036940839141607285, -0.013579728081822395, -0.07008405774831772, -0.00167598866391927, -0.978213906288147, -0.0026780238840729, -0.2469705045223236, -0.009391534142196178, -0.8301855325698853], "finish_reason": "stop"}], "metrics": {"energy": 789.5421236667635, "energy_per_token": 3.4629040511700153, "time": 20.80646, "time_per_token": 0.09125640350877194}}
{"outputs": [{"text": "files = glob.glob(f\"{directory_path}*.txt\")\n    file_name_matches_dict = {}\n\n    for file in files:\n        file_name = os.path.basename(file)\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex_pattern, content)\n            file_name_matches_dict[file_name] = matches\n\n    return file_name_matches_dict", "tokens": ["files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}", "*", ".", "txt", "\"", ")", "\n", "    ", "file", "_", "name", "_", "matches", "_", "dict", " =", " {}", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "\n", "            ", "file", "_", "name", "_", "matches", "_", "dict", "[", "file", "_", "name", "]", " =", " matches", "\n", "\n", "    ", "return", " file", "_", "name", "_", "matches", "_", "dict", "\n", "\n", "if"], "logprobs": [-3.2276031970977783, -0.24031129479408264, -0.11504829674959183, -0.0008420973899774253, -0.0019584777764976025, -0.003767299233004451, -1.6303954124450684, -0.6735880970954895, -0.005249999929219484, -0.013712609186768532, -4.362964682513848e-05, -1.6689286894688848e-06, -0.4768730401992798, -1.5403574705123901, -0.04258884862065315, -0.013893792405724525, -0.0006554362480528653, -0.0385458841919899, -0.209936261177063, -0.17484812438488007, -2.7458386421203613, -0.015640215948224068, -3.5121188163757324, -0.3385632634162903, -1.5836615562438965, -1.4163808822631836, -0.35186901688575745, -0.014339379966259003, -0.05958614870905876, -0.014835863374173641, -1.1576290130615234, -0.00042572495294734836, -0.1283620446920395, -0.15040387213230133, -0.22345030307769775, -0.0038650347851216793, -0.0005722792120650411, -0.00576168205589056, -0.027384141460061073, -1.462490200996399, -0.00749478442594409, -0.13784486055374146, -0.1567343920469284, -0.2585829198360443, -3.8265450712060556e-05, -0.00034397884155623615, -2.253030106658116e-05, -0.1295357644557953, 0.0, -3.790783375734463e-05, -0.00952827837318182, -0.0013821106404066086, -0.06973034888505936, -0.07168719917535782, -0.787822425365448, -0.00787002220749855, -0.001689317636191845, -0.04110630229115486, -0.11576949805021286, -0.8002927899360657, -0.01068195141851902, -0.3781643807888031, -0.0003122795606032014, -0.35210126638412476, -0.030797090381383896, -0.006230099592357874, -0.0046947491355240345, -1.2892110347747803, -0.006859090179204941, -0.029398001730442047, -5.3881147323409095e-05, -1.728519782773219e-05, -0.012914471328258514, -0.021121688187122345, -0.2234524041414261, -0.34143829345703125, -0.016132885590195656, -0.042261846363544464, -0.0001677133986959234, -0.010986787267029285, -0.010558458045125008, -0.0005806190893054008, -0.08418407291173935, -0.00018130090029444546, -1.1801649634435307e-05, -0.0014511541230604053, -0.0067280190996825695, -0.07038231194019318, -0.008855711668729782, -0.13788753747940063, -0.3554404377937317, -3.7788631743751466e-05, -0.0031312506180256605, -0.0035260666627436876, -0.003457641461864114, -0.0050710393115878105, -0.0009958551963791251, -0.015898725017905235, -0.004533252213150263, -0.0023048759903758764, -1.2993727978027891e-05, -0.004232259467244148, -0.00021717573690693825, -0.13311442732810974, -0.023654406890273094, -0.21542561054229736, -0.002653650939464569, -0.03572460636496544, -0.006776329129934311, -1.0728830375228426e-06, -4.768370445162873e-07, -5.960462772236497e-07, -4.768370445162873e-07, -2.3841574147809297e-05, -6.556489552167477e-06, -0.3999272286891937, -0.007873570546507835, -0.7091271877288818], "finish_reason": "stop"}], "metrics": {"energy": 441.90418775558464, "energy_per_token": 3.7449507436913954, "time": 10.09237, "time_per_token": 0.0855285593220339}}
{"outputs": [{"text": "if Path(directory_path).is_dir():\n        files = glob.glob(directory_path + \"/**/*.txt\", recursive=True)\n        files_dict = {os.path.basename(file): re.findall(\n            regex_pattern, file) for file in files}\n        return files_dict\n    else:\n        return 'No directory found'", "tokens": ["if", " Path", "(", "directory", "_", "path", ")", ".", "is", "_", "dir", "():", "\n", "        ", "files", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " \"", "/**", "/*", ".", "txt", "\"", ",", " recursive", "=", "True", ")", "\n", "        ", "files", "_", "dict", " =", " {", "os", ".", "path", ".", "bas", "ename", "(", "file", "):", " re", ".", "find", "all", "(", "\n", "            ", "regex", "_", "pattern", ",", " file", ")", " for", " file", " in", " files", "}", "\n", "        ", "return", " files", "_", "dict", "\n", "    ", "else", ":", "\n", "        ", "return", " '", "No", " directory", " found", "'", "\n", "\n", "if"], "logprobs": [-3.074580430984497, -3.291853666305542, -0.028279755264520645, -0.01444760337471962, -0.00021514961554203182, -1.549708758830093e-05, -0.03397088125348091, -0.01797294244170189, -0.3367648422718048, -0.00027307120035402477, -0.07501718401908875, -0.10640307515859604, -0.11697950959205627, -0.03685501590371132, -1.6831958293914795, -0.2539556324481964, -0.13255609571933746, -0.0019080305937677622, -0.0020548435859382153, -0.005874748341739178, -1.3721458911895752, -2.4914430468925275e-05, -1.8358061424805783e-05, -0.12885764241218567, -0.8521043062210083, -1.4025055170059204, -0.050464797765016556, -0.01836276240646839, -0.00924898311495781, -0.0012728216825053096, -0.1027735024690628, -0.004534438718110323, -0.051149722188711166, -0.016089601442217827, -0.0021199150942265987, -0.07850894331932068, -0.35333362221717834, -3.3863167762756348, -0.6558014750480652, -1.260335087776184, -0.02735757827758789, -1.9817886352539062, -0.5913365483283997, -3.099393507000059e-05, -0.0002787916746456176, -1.3828182090946939e-05, -0.08501284569501877, 0.0, -0.005849504843354225, -0.6058210134506226, -0.17321839928627014, -0.3204430341720581, -0.00030989613151177764, -0.009404524229466915, -0.010199331678450108, -0.001991790486499667, -1.6353100538253784, -0.002091722097247839, -0.062168605625629425, -0.00047267231275327504, -1.8715683836489916e-05, -0.0028334015514701605, -0.9330357909202576, -0.21363864839076996, -0.005740466061979532, -0.0005334384622983634, -0.00011801023356383666, -0.0027466213796287775, -0.03814515098929405, -0.010280275717377663, -0.24529393017292023, -0.12912651896476746, -0.03114369511604309, -2.455681169521995e-05, -0.00015054999676067382, -0.019083119928836823, -0.14713333547115326, -0.23049446940422058, -5.745722592109814e-05, -0.0018685277318581939, -0.0005709686665795743, -0.7495379447937012, -3.2775964736938477, -2.5189740657806396, -1.8009861707687378, -0.5978389978408813, -0.8921915888786316, -0.10578254610300064, -0.023480338975787163, -0.7339308261871338], "finish_reason": "stop"}], "metrics": {"energy": 304.66111267185215, "energy_per_token": 3.3851234741316905, "time": 7.5728455, "time_per_token": 0.08414272777777777}}
{"outputs": [{"text": "if os.path.isdir(directory_path):\n        results = dict()\n        files_list = glob.glob(os.path.join(directory_path, '*.txt'))\n        for file in files_list:\n            with open(file, 'r', encoding='utf-8') as f:\n                filename = os.path.basename(file)\n                results[filename] = re.findall(regex_pattern, f.read())\n    return results", "tokens": ["if", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "results", " =", " dict", "()", "\n", "        ", "files", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "        ", "for", " file", " in", " files", "_", "list", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "filename", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "                ", "results", "[", "filename", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " f", ".", "read", "())", "\n", "    ", "return", " results", "\n", "\n", "if"], "logprobs": [-3.074580430984497, -2.0821921825408936, -0.001321038813330233, -0.05150474235415459, -0.000228140561375767, -0.41646188497543335, -0.04695351794362068, -0.00097977789118886, -0.014187190681695938, -0.00020382710499688983, -1.2516897186287679e-05, -0.08029063045978546, -0.10809770971536636, -0.04297890141606331, -3.9576919078826904, -0.14049619436264038, -3.026507616043091, -0.017738040536642075, -0.038405366241931915, -0.10655450820922852, -2.1013741493225098, -1.3919801712036133, -0.9514317512512207, -0.01247378159314394, -0.1595328450202942, -0.0006244616815820336, -0.006070153787732124, -0.004646219778805971, -0.8657633066177368, -4.386805812828243e-05, -0.0004631400224752724, -3.242440288886428e-05, -0.01748071052134037, -0.0009723940747790039, -0.011865749023854733, -2.825220326485578e-05, -1.3589766240329482e-05, -0.011440507136285305, -0.5985257029533386, -0.19146257638931274, -0.05485748127102852, -0.010299271903932095, -0.062424659729003906, -0.06629789620637894, -0.1860668808221817, -0.20565243065357208, -0.18789614737033844, -0.4305040240287781, -0.007526020053774118, -7.116541382856667e-05, -2.3841855067985307e-07, -0.0008038626983761787, -0.006539137102663517, -0.00501825800165534, -0.7037357091903687, -0.029124317690730095, -0.0018806643784046173, -0.04009716957807541, -0.13604283332824707, -0.1712767779827118, -0.019392186775803566, -1.1174108982086182, -0.0003880701260641217, -0.016528699547052383, -0.14250412583351135, -0.11568253487348557, -0.07693525403738022, -0.005009599030017853, -0.024426687508821487, -0.00023040501400828362, -0.5305521488189697, -0.1034487932920456, -0.014591294340789318, -0.0011064843274652958, -4.3987016677856445, -0.04571706801652908, -0.35749000310897827, -2.4676019165781327e-05, -7.724463648628443e-05, -2.0265558760002023e-06, -0.1316339373588562, -2.3841855067985307e-07, -7.414542778860778e-05, -0.10040930658578873, -0.001604342251084745, -0.04487238824367523, -0.003974872175604105, -0.8673748970031738, -0.042056698352098465, -0.006513200234621763, -0.005697558633983135, -0.0008871195605024695, -0.24826815724372864, -0.00021789084712509066, -0.004828934092074633, -0.0021407324820756912, -0.0009495278936810791, -0.13273076713085175, -0.00022587609419133514, -3.361645576660521e-05, -0.0026416426990181208, -0.047095004469156265, -0.0023167694453150034, -4.076874756719917e-05, -0.09764321893453598, -0.01763860695064068, -2.3706722259521484, -1.4437869787216187, -0.01087205670773983, -0.39985474944114685, -0.011804606765508652, -0.5706496238708496], "finish_reason": "stop"}], "metrics": {"energy": 380.9640479812622, "energy_per_token": 3.4014647141184122, "time": 9.461401, "time_per_token": 0.08447679464285715}}
{"outputs": [{"text": "# Get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, \"*.txt\"))\n\n    # Create a dictionary to store the matches for each file\n    matches = {}\n\n    # Loop over each file and extract matches using regex pattern\n    for file in text_files:\n        with open(file, \"r\", encoding='utf-8') as f:\n            # Use re.findall() to find all matches in the file\n            file_matches = re.findall(regex_pattern, f.read())\n\n            # Use Path to get the file name without path\n            file_name = Path(file).name\n\n            # Add the file name and its matches to the dictionary\n            matches[file_name] = file_matches\n\n    return matches", "tokens": ["#", " Get", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "\n", "    ", "#", " Create", " a", " dictionary", " to", " store", " the", " matches", " for", " each", " file", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "#", " Loop", " over", " each", " file", " and", " extract", " matches", " using", " regex", " pattern", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "#", " Use", " re", ".", "find", "all", "()", " to", " find", " all", " matches", " in", " the", " file", "\n", "            ", "file", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " f", ".", "read", "())", "\n", "\n", "            ", "#", " Use", " Path", " to", " get", " the", " file", " name", " without", " path", "\n", "            ", "file", "_", "name", " =", " Path", "(", "file", ")", ".", "name", "\n", "\n", "            ", "#", " Add", " the", " file", " name", " and", " its", " matches", " to", " the", " dictionary", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " file", "_", "matches", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -3.0968375205993652, -1.4152417182922363, -0.02731466107070446, -0.0010141950333490968, -0.38782617449760437, -0.3265165388584137, -0.015068629756569862, -0.048413459211587906, -0.01549186185002327, -0.2798483371734619, -0.14363358914852142, -0.00695782620459795, -0.7918738126754761, -0.005165919661521912, -0.019188376143574715, -0.012712747789919376, -0.07369039952754974, -0.0011204162146896124, -0.0004188137245364487, -0.004048842005431652, -0.2866291403770447, -1.4185804502631072e-05, -0.00016532962035853416, -2.038458114839159e-05, -0.0021013577934354544, -0.0004612335760612041, -0.004005743190646172, -5.185469490243122e-05, -3.099436753473128e-06, -0.000910225382540375, -1.4275625944137573, -0.07484807074069977, -0.002791082253679633, -0.007101650815457106, -0.0007438276661559939, -0.009077942930161953, -0.0369303822517395, -0.24512386322021484, -0.000498289882671088, -0.08092223107814789, -0.8185902833938599, -0.7713376879692078, -0.0515105165541172, -0.05322326347231865, -0.05068953335285187, -0.22398576140403748, -0.21536602079868317, -0.953498125076294, -0.0005258131423033774, -0.03997610881924629, -0.0047830212861299515, -0.000651147507596761, -0.0793544352054596, -0.26545989513397217, -0.01926964707672596, -0.0038950780872255564, -0.1232590600848198, -0.00021944021864328533, -0.052024535834789276, -0.8452929258346558, -1.6507350206375122, -0.2824769914150238, -1.413916826248169, -0.263054221868515, -0.10275457054376602, -0.46949246525764465, -0.6632917523384094, -1.4501299858093262, -1.185415506362915, -0.0295866671949625, -0.0011928117601200938, -0.012980487197637558, -0.1937793642282486, -0.6043490171432495, -0.002137401606887579, -8.344646857949556e-07, 0.0, -0.000205018965061754, -0.0007608617888763547, -0.01313650794327259, -0.3591471016407013, -0.0031211492605507374, -0.0004481264913920313, -0.006815046537667513, -0.015097633004188538, -0.2445671260356903, -0.004269888624548912, -0.0005679901223629713, -0.7876129746437073, -0.025684267282485962, -1.3969773054122925, -0.15010136365890503, -0.10542933642864227, -0.008447745814919472, -0.04149704426527023, -0.00017867876158561558, -0.012602454051375389, -0.0066838511265814304, -0.04788314923644066, -0.0036860634572803974, -1.058579444885254, -2.391613006591797, -0.9764195084571838, -0.009073926135897636, -0.04012511298060417, -0.046821229159832, -0.6120139360427856, -0.09293761849403381, -0.628954291343689, -0.011135810054838657, -0.028121327981352806, -0.20212309062480927, -0.010924176312983036, -0.020280150696635246, -0.47197431325912476, -0.0013062763027846813, -0.42997729778289795, -0.0016124354442581534, -0.01968234032392502, -0.0007637205999344587, -0.013818901032209396, -2.90866428258596e-05, -0.001215077005326748, -0.0013233008794486523, -0.0002300474588992074, -0.07017074525356293, -8.868777513271198e-05, -3.218599158572033e-05, -0.0007831366965547204, -0.0058492678217589855, -0.0004698126285802573, -7.629365427419543e-06, -0.040350232273340225, -0.006809363141655922, -1.2576775550842285, -0.02960529923439026, -0.006341335829347372, -3.415238380432129, -1.37317955493927, -2.182102680206299, -0.5315897464752197, -0.4251044690608978, -0.22358852624893188, -0.01556240301579237, -0.21818600594997406, -0.42022430896759033, -0.24639847874641418, -0.0008224442135542631, -0.07529927045106888, -0.0016518294578418136, -0.043020009994506836, -0.016389157623052597, -0.5933211445808411, -0.0002924968139268458, -0.010374427773058414, -0.0007898071780800819, -0.0002286172821186483, -0.09684789925813675, -0.004085765685886145, -0.052655238658189774, -0.0036336842458695173, -0.011803311295807362, -0.39874163269996643, -0.12077922374010086, -1.1387239694595337, -0.1787845641374588, -0.22142259776592255, -1.5523220300674438, -0.0056545305997133255, -0.0033418068196624517, -0.0012473430251702666, -0.07567455619573593, -0.020280616357922554, -0.00032205163734033704, -0.03226024657487869, -0.0017508429009467363, -0.0015280486550182104, -0.000271879427600652, -6.842378934379667e-05, -0.0006996329175308347, -6.317892984952778e-05, -0.03225516900420189, -6.079655122448457e-06, -3.576272320060525e-06, -0.011238249950110912, -0.024145007133483887, -0.004971167538315058, -0.29220977425575256, -0.0006809299811720848, -0.20170441269874573, -0.010091709904372692, -0.7804654836654663], "finish_reason": "stop"}], "metrics": {"energy": 693.7015089817046, "energy_per_token": 3.59430833669277, "time": 16.811687, "time_per_token": 0.0871071865284974}}
{"outputs": [{"text": "matches = {}\n    regex_pattern = re.compile(regex_pattern)\n\n    files = glob.glob(os.path.join(directory_path, \"*.txt\"))\n    for file in files:\n        with open(file, 'r', encoding='utf-8') as f:\n            matches[os.path.basename(file)] = [m.group(1) or m.group(0) for m in regex_pattern.finditer(f.read())]\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "regex", "_", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", ")]", " =", " [", "m", ".", "group", "(", "1", ")", " or", " m", ".", "group", "(", "0", ")", " for", " m", " in", " regex", "_", "pattern", ".", "find", "iter", "(", "f", ".", "read", "()", ")]", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -0.11873657256364822, -0.24785858392715454, -3.3920671939849854, -0.8759616017341614, -0.13622042536735535, -0.04723737761378288, -0.8026187419891357, -0.0013774678809568286, -0.0025991962756961584, -0.003874415997415781, -0.057714153081178665, -0.00011419598013162613, -2.2649508537142538e-05, -0.04280336946249008, -0.09908363223075867, -1.246352195739746, -0.001342587056569755, -3.3146238327026367, -0.19015388190746307, -0.06713894009590149, -0.0005839549703523517, -0.007263680454343557, -0.003302004188299179, -0.3811149299144745, -2.2291887944447808e-05, -0.0003134713042527437, -1.2159273865108844e-05, -0.0037967516109347343, -0.0007945717661641538, -0.005975951440632343, -4.875540980719961e-05, -5.006777428206988e-06, -0.003908852580934763, -1.4620040655136108, -0.28508099913597107, -0.021207356825470924, -0.009711874648928642, -0.000624104228336364, -0.031320709735155106, -0.05521863326430321, -0.6184511184692383, -0.2920711934566498, -0.1096695140004158, -0.3688015341758728, -0.005499471910297871, -0.00046969347749836743, -0.0024497280828654766, -0.012467424385249615, -0.8628689646720886, -0.02496144361793995, -0.00048756631440483034, -0.019113177433609962, -0.03897695615887642, -1.2554175853729248, -0.008201728574931622, -1.3773430585861206, -0.00044431351125240326, -0.027268260717391968, -0.17290236055850983, -0.08007707446813583, -0.04694566875696182, -0.005272649694234133, -0.038618601858615875, -0.00012587709352374077, -0.11668210476636887, -0.01611963100731373, -0.014470280148088932, -0.0026139398105442524, -3.451374053955078, -0.1548786163330078, -0.4063335955142975, -1.2636104656849056e-05, -2.8967437174287625e-05, -8.106198947643861e-06, -0.07088295370340347, -7.152555099310121e-07, -2.9682672902708873e-05, -0.03844815492630005, -0.010671926662325859, -0.002833282807841897, -1.7691948413848877, -1.613058090209961, -0.29855695366859436, -0.05678686127066612, -0.3327137231826782, -0.42869406938552856, -0.002347097033634782, -2.3062326908111572, -0.03592726215720177, -0.021361399441957474, -0.001353063271380961, -0.1610424518585205, -0.0696757584810257, -0.004895960912108421, -0.2617371678352356, -0.061740584671497345, -0.0008842610404826701, -0.07092548161745071, -0.0004353767435532063, -3.099393507000059e-05, -0.00013457823661156, -3.957670196541585e-05, -1.0847986231965479e-05, -0.011836179532110691, -0.012193423695862293, -0.00018559163436293602, -1.0967194612021558e-05, -0.042920202016830444, -0.008006501942873001, -0.01441164780408144, -1.3429570198059082, -0.01497386209666729, -0.004490411374717951, -0.3951030373573303, -0.010682659223675728, -1.5424926280975342], "finish_reason": "stop"}], "metrics": {"energy": 407.6646539974214, "energy_per_token": 3.425753394936314, "time": 10.101748, "time_per_token": 0.08488863865546219}}
{"outputs": [{"text": "matches = {}  # Empty dictionary to store the matches for each file\n\n    # Use Path.glob to get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Iterate through the text files\n    for file in text_files:\n        file_name = os.path.basename(file)  # Get the file name without the path\n        with open(file, 'r', encoding='utf-8') as f:\n            content = f.read()\n            file_matches = re.findall(regex_pattern, content)  # Find all matches in the file\n            matches[file_name] = file_matches  # Add the matches to the dictionary with file name as the key\n\n    return matches  # Return the dictionary of matches", "tokens": ["matches", " =", " {}", "  ", "#", " Em", "pty", " dictionary", " to", " store", " the", " matches", " for", " each", " file", "\n", "\n", "    ", "#", " Use", " Path", ".", "glob", " to", " get", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Iter", "ate", " through", " the", " text", " files", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "  ", "#", " Get", " the", " file", " name", " without", " the", " path", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "file", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "  ", "#", " Find", " all", " matches", " in", " the", " file", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " file", "_", "matches", "  ", "#", " Add", " the", " matches", " to", " the", " dictionary", " with", " file", " name", " as", " the", " key", "\n", "\n", "    ", "return", " matches", "  ", "#", " Return", " the", " dictionary", " of", " matches", "\n", "\n", "#"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -2.5638163089752197, -0.0004021312633994967, -3.2160518169403076, -0.00301965675316751, -0.11543392390012741, -0.2767569124698639, -0.15331733226776123, -1.2923495769500732, -0.5357365608215332, -2.222402334213257, -0.014117610640823841, -0.05527740344405174, -0.06317161023616791, -0.5825216770172119, -0.0016107691917568445, -0.35185542702674866, -2.033365249633789, -3.012777805328369, -2.431966781616211, -0.5160288214683533, -0.7325786352157593, -1.1145894527435303, -1.1290086507797241, -0.46388643980026245, -0.0011997176334261894, -0.2890632152557373, -0.26774996519088745, -0.014990772120654583, -0.18826723098754883, -0.02381715178489685, -0.31804314255714417, -0.2845698297023773, -0.0018578189192339778, -0.7040796279907227, -0.01577294059097767, -0.03485451638698578, -0.022855544462800026, -1.0397716760635376, -0.0010781434830278158, -0.0010954099707305431, -0.009317485615611076, -0.4292898178100586, -2.7179348762729205e-05, -0.00043418517452664673, -1.5616295058862306e-05, -0.002733781933784485, -0.0008404298569075763, -0.01592089980840683, -5.972207145532593e-05, -2.1576648578047752e-05, -0.0018099845619872212, -0.2867867350578308, -0.13121049106121063, -0.005609841085970402, -0.006822623778134584, -0.033578455448150635, -0.08373807370662689, -0.1014140173792839, -0.0010478964541107416, -0.4480367600917816, -0.6379512548446655, -0.0035586145240813494, -1.4167187213897705, -1.3430078029632568, -0.32915398478507996, -0.00801052339375019, -0.4548083543777466, -0.0005659647285938263, -0.003793782787397504, -0.48089519143104553, -0.9221434593200684, -0.001999523490667343, -4.768370445162873e-07, 0.0, -0.00019822540343739092, -0.0020437799394130707, -0.032912302762269974, -1.8918743133544922, -0.0058070761151611805, -0.3954871892929077, -0.006710967514663935, -0.0713188499212265, -6.079655122448457e-06, -1.1920858014491387e-05, -2.7418097943154862e-06, -0.14715339243412018, -2.3841855067985307e-07, -1.9907753085135482e-05, -0.020330963656306267, -0.0013860390754416585, -0.28503474593162537, -1.2278481335670222e-05, -0.22463388741016388, -0.10616522282361984, -0.09358613938093185, -0.003075276967138052, -0.25663506984710693, -0.35071441531181335, -0.17163440585136414, -0.009152953512966633, -0.2577309310436249, -0.7404147982597351, -0.014090340584516525, -0.0008470999309793115, -0.05096428841352463, -0.01869954913854599, -0.08302794396877289, -0.002977701835334301, -1.2805228233337402, -9.83428253675811e-05, -0.022344959899783134, -0.12712395191192627, -0.07725497335195541, -0.054735373705625534, -0.002865734277293086, -0.03219295293092728, -0.0002208704245276749, -0.08049512654542923, -0.008100749924778938, -0.30974677205085754, -0.003037959337234497, -0.8564403057098389, -0.0006206493126228452, -0.004929176066070795, -1.549708758830093e-05, -4.768360213347478e-06, -0.007278118748217821, -1.046341896057129, -0.19599555432796478, -1.7549138069152832, -0.0021290748845785856, -0.04220173507928848, -0.0011255365097895265, -0.0845060870051384, -0.00010466027742950246, -0.006776329129934311, -0.007667160592973232, -0.0013331820955500007, -0.08077038824558258, -0.00011336160969221964, -1.0132738680113107e-05, -0.0014396075857803226, -0.0033073509112000465, -0.11273694038391113, -0.8048648834228516, -2.002696055569686e-05, -0.6434369683265686, -0.30808234214782715, -0.030158575624227524, -0.22726655006408691, -0.012821853160858154, -0.06866111606359482, -0.5002497434616089, -0.17106150090694427, -0.301435261964798, -0.005465683061629534, -0.001261034864000976, -0.0015541153261438012, -0.00010048838157672435, -0.0014774608425796032, -4.756337511935271e-05, -0.10126299411058426, -1.311301275563892e-06, -8.4638240878121e-06, -0.583842933177948, -9.65590606938349e-06, -0.2873702943325043, -0.17736293375492096, -0.34674325585365295, -0.17458276450634003, -0.0032007675617933273, -0.050251126289367676, -2.1136868000030518, -2.656236171722412, -0.02688363753259182, -0.014764918014407158, -1.4360475540161133, -0.0003014348621945828, -0.0026737437583506107, -0.07203933596611023, -0.0026037145871669054, -0.05672311410307884, -0.0017727388767525554, -2.171687364578247, -0.0002169373765354976, -0.10486315935850143, -0.02480318583548069, -0.21591773629188538, -0.3806925117969513, -0.027969829738140106, -0.3473418653011322, -0.007621378172188997, -1.5192053318023682], "finish_reason": "stop"}], "metrics": {"energy": 681.2111043376918, "energy_per_token": 3.4755668588657747, "time": 16.822752, "time_per_token": 0.08583036734693879}}
{"outputs": [{"text": "matches_per_file = {}\n    file_pattern = f\"{directory_path}*.txt\"\n    text_files = glob.glob(file_pattern)\n\n    for file_path in text_files:\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            matches = re.findall(regex_pattern, content)\n            if matches:\n                matches_per_file[file_name] = matches\n\n    return matches_per_file", "tokens": ["matches", "_", "per", "_", "file", " =", " {}", "\n", "    ", "file", "_", "pattern", " =", " f", "\"", "{", "directory", "_", "path", "}", "*", ".", "txt", "\"", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "file", "_", "pattern", ")", "\n", "\n", "    ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "\n", "            ", "if", " matches", ":", "\n", "                ", "matches", "_", "per", "_", "file", "[", "file", "_", "name", "]", " =", " matches", "\n", "\n", "    ", "return", " matches", "_", "per", "_", "file", "\n", "\n", "#"], "logprobs": [-1.4907753467559814, -2.305180311203003, -2.1816422939300537, -0.0004465774691198021, -0.02295958809554577, -0.09402690082788467, -0.029615020379424095, -0.09934724867343903, -0.3745909333229065, -2.4295601844787598, -0.0447605699300766, -2.0720033645629883, -0.007632735185325146, -2.168302297592163, -0.630834698677063, -0.01478265505284071, -0.018151365220546722, -4.589452510117553e-05, -7.510157047363464e-06, -0.5246591567993164, -2.129549980163574, -0.057035740464925766, -0.01971004158258438, -0.0006607971154153347, -0.15022344887256622, -0.14243805408477783, -2.550098419189453, -0.01657700724899769, -0.06409703195095062, -0.06588279455900192, -0.04486270248889923, -0.00120936194434762, -0.0023676715791225433, -0.0002908283786382526, -0.012862102128565311, -2.8132995794294402e-05, -4.0531076592742465e-06, -0.062174320220947266, -0.06164318695664406, -0.8473164439201355, -0.000690460205078125, -0.16197307407855988, -0.3055802881717682, -0.8720305562019348, -0.07299891859292984, -0.003927376586943865, -0.007670354563742876, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0005323661607690156, -0.00322073046118021, -0.015452423132956028, -0.5821154713630676, -0.05062391981482506, -0.057317089289426804, -0.028593987226486206, -0.18956783413887024, -4.768360213347478e-06, -0.00018273114983458072, -4.768360213347478e-06, -0.06527378410100937, 0.0, -1.966933996300213e-05, -0.002031288342550397, -2.2649508537142538e-05, -0.0003939091111533344, -0.0003182381624355912, -0.05179976299405098, -0.06202778220176697, -0.53688645362854, -0.015099394135177135, -0.0007952864980325103, -0.02058989740908146, -0.00010001159535022452, -0.0003796095261350274, -0.058346785604953766, -0.6237502694129944, -0.007384978234767914, -1.1191538572311401, -0.0003349220205564052, -0.018534213304519653, -0.1477774828672409, -0.11603798717260361, -0.049421388655900955, -0.0025027638766914606, -0.03458243981003761, -0.00015615197480656207, -1.8756669759750366, -0.011892018839716911, -0.015321886166930199, -0.0033996663987636566, -0.9896159172058105, -0.00248754327185452, -0.012558426707983017, -2.539125671319198e-05, -8.702239938429557e-06, -0.00613626791164279, -0.021246569231152534, -0.1953626275062561, -0.2572063207626343, -0.09033603221178055, -0.03096226043999195, -0.00010334911348763853, -0.004766411613672972, -0.007569559384137392, -0.0007223857101053, -0.07204887270927429, -0.00016437610611319542, -1.3470558769768104e-05, -0.0017799977213144302, -0.0035821336787194014, -0.09311618655920029, -0.007953047752380371, -0.08966654539108276, -2.101576328277588, -0.19975645840168, -0.014244308695197105, -0.014060132205486298, -0.0013449679827317595, -0.08254905045032501, -0.0411967933177948, -0.006827004719525576, -1.311301275563892e-06, -5.090107151772827e-05, -0.007542110979557037, -0.003062798175960779, -4.1126360883936286e-05, -0.003060896648094058, -0.004018447361886501, -0.00041738382424227893, -0.1413124054670334, -0.022053945809602737, -0.3163110315799713, -0.002624521730467677, -0.02388361655175686, -0.0038456786423921585, -0.00010740180005086586, -5.960446742392378e-06, -1.311301275563892e-06, -6.079655122448457e-06, -0.3719863295555115, -0.007673666812479496, -2.064018726348877], "finish_reason": "stop"}], "metrics": {"energy": 523.0185313987729, "energy_per_token": 3.6574722475438666, "time": 12.409841, "time_per_token": 0.08678210489510489}}
{"outputs": [{"text": "# Check if directory path is a string\n    if not isinstance(directory_path, str):\n        raise TypeError(\"directory_path must be a string\")\n    # Check if regex_pattern is a string\n    if not isinstance(regex_pattern, str):\n        raise TypeError(\"regex_pattern must be a string\")\n    # Check if directory path exists\n    if not os.path.exists(directory_path):\n        raise ValueError(\"directory_path must be a valid directory\")\n    # Check if directory path is a valid directory\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"directory_path must be a valid directory\")\n    # Check if regex pattern is valid\n    if re.compile(regex_pattern) is None:\n        raise ValueError(\"regex_pattern must be a valid regex pattern\")\n\n    matches = {}\n    for file in glob.glob(f'{directory_path}**/*.txt', recursive=True):\n        with open(file, 'r') as f:\n            matches[os.path.basename(file)] =", "tokens": ["#", " Check", " if", " directory", " path", " is", " a", " string", "\n", "    ", "if", " not", " isinstance", "(", "directory", "_", "path", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "directory", "_", "path", " must", " be", " a", " string", "\"", ")", "\n", "    ", "#", " Check", " if", " regex", "_", "pattern", " is", " a", " string", "\n", "    ", "if", " not", " isinstance", "(", "regex", "_", "pattern", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "regex", "_", "pattern", " must", " be", " a", " string", "\"", ")", "\n", "    ", "#", " Check", " if", " directory", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "directory", "_", "path", " must", " be", " a", " valid", " directory", "\"", ")", "\n", "    ", "#", " Check", " if", " directory", " path", " is", " a", " valid", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "directory", "_", "path", " must", " be", " a", " valid", " directory", "\"", ")", "\n", "    ", "#", " Check", " if", " regex", " pattern", " is", " valid", "\n", "    ", "if", " re", ".", "compile", "(", "regex", "_", "pattern", ")", " is", " None", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "regex", "_", "pattern", " must", " be", " a", " valid", " regex", " pattern", "\"", ")", "\n", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}", "**", "/*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", ")]", " ="], "logprobs": [-1.2958691120147705, -2.354766368865967, -0.3562164902687073, -0.5388556122779846, -1.566321611404419, -0.40768858790397644, -1.8275179862976074, -1.3435273170471191, -0.35736048221588135, -0.002042947104200721, -0.030793622136116028, -0.03683479130268097, -0.003967510536313057, -4.2914423829643056e-05, -0.0008738989708945155, -6.472854875028133e-05, -9.298280929215252e-06, -0.00012027494085486978, -0.004336121492087841, -0.006272865924984217, -0.0022247105371207, -0.0030013537034392357, -0.03703262656927109, -0.539705216884613, -2.5629668016335927e-05, -0.23819062113761902, -0.1600421816110611, -1.2973084449768066, -0.011667348444461823, -0.00041416651220060885, -0.18828678131103516, -0.0002992897352669388, -0.0143926115706563, -0.029218101873993874, -0.15938332676887512, -0.00016389934171456844, -0.0021751096937805414, -1.6190590858459473, -0.1045779138803482, -0.12210431694984436, -0.019467247650027275, -0.53508460521698, -0.4131401479244232, -0.001209600013680756, -0.0021114691626280546, -0.0043434808030724525, -0.021611783653497696, -0.032066430896520615, -0.0006176709430292249, -0.006288621574640274, -0.007369949948042631, -0.0014837696217000484, -2.098061486321967e-05, -0.0017661938909441233, -9.417489309271332e-06, -3.3378546504536644e-06, -2.610649426060263e-05, -0.0002821285743266344, -0.0009398810216225684, -0.0002975021197926253, -0.0006937957368791103, -0.00021240839851088822, -0.0011506610317155719, 0.0, -0.0011031500762328506, -0.0004153581103309989, -0.011871756985783577, -0.0016264794394373894, -0.0006169561529532075, -0.0009098681039176881, -3.6000557884108275e-05, -0.0001892864383989945, -0.0028026134241372347, -0.0015025765169411898, -3.862306402879767e-05, -0.0009465504554100335, -0.457109659910202, -0.06018965318799019, -0.306966632604599, -0.05497032031416893, -0.134774848818779, -0.5618460774421692, -0.46634191274642944, -0.0627913773059845, -0.0005725175142288208, -0.01384899951517582, -0.004939851816743612, -0.04167017713189125, -7.510157047363464e-06, -0.0022851326502859592, -6.9141146923357155e-06, -0.32865652441978455, -0.00013624693383462727, -0.0021031422074884176, -1.5139465176616795e-05, -5.960462772236497e-07, -0.009981480427086353, -0.0002366024418734014, -0.0010937429033219814, -0.011099735274910927, -0.3493883013725281, -2.264974000354414e-06, -0.001727875554934144, -0.2025742083787918, -0.22037875652313232, -0.04703575000166893, -8.737658936297521e-05, -0.7060390710830688, -0.21182957291603088, -0.26049354672431946, -0.00471883499994874, -0.3924392759799957, -0.5564947724342346, -8.189342770492658e-05, -0.0006475735572166741, -0.6087983846664429, -0.14377959072589874, -0.5104350447654724, -0.013511046767234802, -0.2573924958705902, -0.21362805366516113, -0.5011462569236755, -0.16811099648475647, -2.716352939605713, -0.3286433219909668, -0.04025096073746681, -0.0002924968139268458, -0.004407928790897131, -0.023193499073386192, -0.0037193186581134796, -2.9802276912960224e-06, -0.00043275527423247695, -4.291525328881107e-06, -0.0002686616498976946, -8.689979586051777e-05, -5.602679812000133e-05, -0.00015436411194968969, -4.172316494077677e-06, -4.768370445162873e-07, -0.0002329078270122409, -0.00014006110723130405, -0.00021407696476671845, -0.00041333239641971886, -0.007327467203140259, 0.0, -0.0003212174342479557, -0.006454454734921455, -0.0016193384071812034, -0.0006095697171986103, -0.00010656742961145937, -0.0008598444401286542, -0.008784813806414604, -0.0009472650708630681, -0.020909005776047707, -0.0006267252028919756, -0.0075166733004152775, -6.031808152329177e-05, -0.000440262199845165, -0.3138302266597748, -0.11563283950090408, -0.4382433593273163, -0.007869312539696693, -0.5248063802719116, -2.446653366088867, -0.1258983165025711, -0.6260911822319031, -0.11388615518808365, -0.0011731653939932585, -2.054213047027588, -2.3290724754333496, -0.0021540552843362093, -0.5881167054176331, -0.0008487674640491605, -0.010186351835727692, -0.00018904806347563863, -6.115249561844394e-05, -0.009529223665595055, -0.5021544694900513, -0.014372870326042175, -0.005762274842709303, -0.0007887351675890386, -0.0008515069494023919, -0.0010434903670102358, -0.005693173035979271, -1.5497195136049413e-06, -0.0033293315209448338, -0.004058577585965395, -0.049339354038238525, -0.013346732594072819, -0.0007220283732749522, -0.10502834618091583, -0.0008962904685176909, -0.0017193072708323598, -0.00046075694262981415, -1.2989308834075928, -0.0522373802959919, -0.009943122044205666, -0.00025769727653823793, -0.000532842765096575, -0.5312021374702454, -0.002613226417452097, -1.6308104991912842, -0.14529767632484436, -0.03321966156363487, -0.15730687975883484, -0.30366605520248413, -1.4288082122802734, -0.30827879905700684, -1.027491569519043, -0.09311401844024658, -0.0002964295563288033, -0.0070377313531935215, -0.004284013994038105, -1.5146300792694092, -0.8767504692077637, -0.015109140425920486, -4.851700214203447e-05, -1.5497195136049413e-06, -0.41161593794822693, -3.1038806438446045, -0.11780539155006409, -0.006450190674513578, -0.008090817369520664, -0.007804851047694683, -0.0010141950333490968, -0.0026192902587354183, -0.015478716231882572, -0.002601574407890439, -0.0043608094565570354, -0.04164513573050499, -0.02450765296816826, -1.1370574235916138, -0.02334607206285, -0.0012486526975408196, -0.013913542963564396, -0.034855782985687256, -0.14287981390953064, -0.005402132868766785, -0.30604255199432373, -0.00014494798961095512, -0.12362615764141083, -0.013081209734082222, -0.014982434920966625, -0.0040578655898571014, -2.6982674598693848, -0.1113835796713829, -0.6545791029930115, -1.2040065485052764e-05, -3.0636318115284666e-05, -3.814689989667386e-06, -0.0757230743765831, -2.3841855067985307e-07, -6.55629628454335e-05, -0.04127652570605278, -0.01351328194141388, -0.0034730848856270313], "finish_reason": "length"}], "metrics": {"energy": 882.8561595020296, "energy_per_token": 3.4486568730548033, "time": 22.081837, "time_per_token": 0.08625717578125}}
{"outputs": [{"text": "# create a list of text files in the directory\n    file_list = glob.glob(directory_path + '\\\\*.txt')\n\n    # create a dictionary to store the matches for each file\n    matches_dict = {}\n\n    # iterate over each file in the list\n    for file_path in file_list:\n        file_name = os.path.basename(file_path)\n\n        with open(file_path, 'r') as file:\n            # read the file contents and remove non-word characters\n            content = file.read().replace('\\n', ' ').replace('\\t', '')\n            content = re.sub(r\"[^\\w'\\s]+\", '', content)\n\n            # extract matches from the file contents\n            matches = re.findall(regex_pattern, content)\n            matches_dict[file_name] = matches\n\n    return matches_dict", "tokens": ["#", " create", " a", " list", " of", " text", " files", " in", " the", " directory", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " '\\\\", "*", ".", "txt", "')", "\n", "\n", "    ", "#", " create", " a", " dictionary", " to", " store", " the", " matches", " for", " each", " file", "\n", "    ", "matches", "_", "dict", " =", " {}", "\n", "\n", "    ", "#", " iterate", " over", " each", " file", " in", " the", " list", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "list", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " read", " the", " file", " contents", " and", " remove", " non", "-", "word", " characters", "\n", "            ", "content", " =", " file", ".", "read", "()", ".", "replace", "('", "\\", "n", "'", ",", " '", " '", ")", ".", "replace", "('", "\\", "t", "'", ",", " '", "')", "\n", "            ", "content", " =", " re", ".", "sub", "(", "r", "\"", "[", "^\\", "w", "'\\", "s", "]+", "\"", ",", " ''", ",", " content", ")", "\n", "\n", "            ", "#", " extract", " matches", " from", " the", " file", " contents", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "\n", "            ", "matches", "_", "dict", "[", "file", "_", "name", "]", " =", " matches", "\n", "\n", "    ", "return", " matches", "_", "dict", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2958691120147705, -4.345813274383545, -1.3571559190750122, -1.5555226802825928, -0.1538885235786438, -2.2144737243652344, -0.31055715680122375, -0.14541736245155334, -0.07400529086589813, -0.3986473083496094, -0.19280710816383362, -0.004894774407148361, -2.3354008197784424, -0.018793027848005295, -0.2711074948310852, -0.007460944354534149, -0.16270580887794495, -0.0008574623498134315, -0.0014553203945979476, -0.006234601605683565, -1.7399767637252808, -6.103329360485077e-05, -1.1205610462639015e-05, -0.10632247477769852, -2.367493152618408, -0.17724750936031342, -0.020828217267990112, -0.009332248941063881, -0.04061605781316757, -0.04072021320462227, -0.46128296852111816, -0.0006839081761427224, -0.16515903174877167, -0.5978631377220154, -0.9010540246963501, -0.1567213386297226, -0.14981180429458618, -0.11612704396247864, -0.4104039669036865, -0.3365996778011322, -1.1461718082427979, -0.0018333070911467075, -0.029656684026122093, -0.009409838356077671, -0.0010843356139957905, -0.09947460144758224, -1.048057198524475, -0.12863095104694366, -0.004669357556849718, -0.024160251021385193, -0.0029750869143754244, -0.10065791010856628, -0.00030751267331652343, -0.11855923384428024, -0.9021856188774109, -0.3526862859725952, -0.6394848227500916, -0.3087450861930847, -0.6503770351409912, -0.0045617325231432915, -0.32180702686309814, -0.19049279391765594, -0.0005399914807640016, -0.004111528396606445, -0.11706306785345078, -1.3668241500854492, -0.22897188365459442, -0.001825929619371891, -0.0005451146862469614, -4.6491513785440475e-06, -1.6689286894688848e-06, -0.00026174934464506805, -0.0010624246206134558, -0.110224649310112, -2.3897995948791504, -0.030226008966565132, -0.0496654137969017, -0.012747117318212986, -0.21400828659534454, -2.4676019165781327e-05, -4.351044481154531e-05, -1.2397689715726301e-05, -0.0730811357498169, 0.0, -2.5033637939486653e-05, -0.005235769785940647, -2.062299427052494e-05, -0.0002485204895492643, -0.000614335120189935, -0.2197783887386322, -1.606459617614746, -0.008212368935346603, -2.536094903945923, -0.03713509067893028, -0.0013450870756059885, -0.02318616211414337, -0.00022742546570952982, -0.0002636561985127628, -0.04226378723978996, -0.07131507247686386, -0.0063482061959803104, -0.5077919960021973, -9.727005090098828e-05, -0.581780731678009, -0.003596625057980418, -0.010813448578119278, -0.016404518857598305, -0.3545583486557007, -0.1108507513999939, -0.05645477771759033, -1.1522036790847778, -1.7681175470352173, -1.0371832847595215, -2.7505369186401367, -3.6483006477355957, -0.02162344940006733, -3.215904712677002, -0.06438813358545303, -0.5059520602226257, -0.002574821701273322, -2.5495429039001465, -0.0024273712188005447, -0.24159926176071167, -0.00015436411194968969, -1.3232143828645349e-05, -0.004106542095541954, -1.458510398864746, -0.6669143438339233, -0.42593881487846375, -0.2711613178253174, -0.06509575992822647, -0.004231784492731094, -0.0005583396414294839, -0.050802163779735565, -0.9177091121673584, -0.001122440560720861, -1.379686713218689, -0.16481667757034302, -0.08742962777614594, -0.35665076971054077, -0.42574217915534973, -0.0006139777251519263, -0.00020287363440729678, -0.009466639719903469, -2.120620012283325, -0.7546606063842773, -0.5847675204277039, -0.7537534236907959, -0.026257483288645744, -0.13433532416820526, -0.00017069313616957515, -0.010723348706960678, -0.04659391567111015, -0.06930644065141678, -1.9931862354278564, -0.4996008276939392, -0.239213228225708, -0.01560653280466795, -3.0406155586242676, -0.415123850107193, -0.7174885869026184, -0.016112826764583588, -0.00010466027742950246, -0.18061624467372894, -0.0005092516075819731, -0.002183198230341077, -0.010694689117372036, -0.078750379383564, -0.14174462854862213, -0.014425982721149921, -0.028884725645184517, -2.1728668212890625, -0.5336160063743591, -1.2974177598953247, -0.02135019563138485, -0.2767654061317444, -1.2834919691085815, -1.0558180809020996, -0.002582312561571598, -0.06625382602214813, -0.056453313678503036, -0.05085020139813423, -8.237022848334163e-05, -0.0032342765480279922, -0.017162615433335304, -0.0006887924391776323, -0.03706444799900055, -5.61460001335945e-05, -2.3245540432981215e-05, -0.0020286710932850838, -0.0027593416161835194, -0.10887376219034195, -0.003087993012741208, -1.7419689893722534, -0.560610830783844, -0.6436022520065308, -0.03203664347529411, -0.005962916649878025, -0.0035947246942669153, -7.283422019099817e-05, -0.0020042823161929846, -0.004466676153242588, -6.627816765103489e-05, -0.1265849620103836, -0.01677349954843521, -0.04078167304396629, -0.016146844252943993, -0.19279491901397705, -0.0019694233778864145, -0.0001746263587847352, -2.1457441107486375e-05, -2.2357985973358154, -1.6689286894688848e-06, -2.7418097943154862e-06, -1.311301275563892e-06, -5.960446742392378e-06, -0.2166811227798462], "finish_reason": "stop"}], "metrics": {"energy": 782.7140183458326, "energy_per_token": 3.606977043068353, "time": 18.706173, "time_per_token": 0.08620356221198157}}
{"outputs": [{"text": "matches = {}  # Empty dictionary to store matches\n\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):  # Iterate through all text files in the directory\n        filename = os.path.basename(file)\n        if not filename:\n            continue  # Skip if the file name is empty\n        matches[filename] = []  # Create a list for the file's matches\n\n        # Read the file\n        with open(file, 'r') as f:\n            content = f.read()\n        matches[filename] = re.findall(regex_pattern, content)  # Extract matches for the file\n    return matches", "tokens": ["matches", " =", " {}", "  ", "#", " Em", "pty", " dictionary", " to", " store", " matches", "\n", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "  ", "#", " Iter", "ate", " through", " all", " text", " files", " in", " the", " directory", "\n", "        ", "filename", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "        ", "if", " not", " filename", ":", "\n", "            ", "continue", "  ", "#", " Skip", " if", " the", " file", " name", " is", " empty", "\n", "        ", "matches", "[", "filename", "]", " =", " []", "  ", "#", " Create", " a", " list", " for", " the", " file", "'", "s", " matches", "\n", "\n", "        ", "#", " Read", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "        ", "matches", "[", "filename", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "  ", "#", " Ext", "ract", " matches", " for", " the", " file", "\n", "    ", "return", " matches"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -2.5638163089752197, -0.0004021312633994967, -3.2160518169403076, -0.00301965675316751, -0.11543392390012741, -0.2767569124698639, -0.15331733226776123, -0.5916659832000732, -0.5330102443695068, -0.7740844488143921, -0.0017016944475471973, -2.2567660808563232, -0.36880606412887573, -1.25567626953125, -0.14138931035995483, -0.0006678258068859577, -0.007298946846276522, -0.009859907440841198, -0.5727434754371643, -3.5523738915799186e-05, -0.000717025191988796, -2.0861407392658293e-05, -0.0029463237151503563, -0.000667468411847949, -0.005633667577058077, -0.00011205045302631333, -5.483612312673358e-06, -0.0037542355712503195, -0.25072741508483887, -0.09388702362775803, -0.027836279943585396, -0.011719073168933392, -0.059776727110147476, -0.002182603348046541, -0.5696132183074951, -0.00011216964776394889, -0.43473464250564575, -0.13641858100891113, -1.4892364740371704, -0.5891267657279968, -0.23965993523597717, -0.009015094488859177, -0.07390066981315613, -0.3091280162334442, -0.18215081095695496, -0.05369946360588074, -0.021181680262088776, -2.2268316745758057, -0.012177996337413788, -0.08215777575969696, -1.0013530300057027e-05, -8.702239938429557e-06, -3.6954811548639555e-06, -0.18473218381404877, -1.1920928244535389e-07, -1.5735502529423684e-05, -0.010046864859759808, -0.0007694382802583277, -2.1760785579681396, -0.11729516834020615, -3.379427433013916, -1.4837234020233154, -0.7395500540733337, -2.1098663806915283, -0.28966620564460754, -0.0029122107662260532, -0.20013701915740967, -1.586650013923645, -5.030505417380482e-05, -0.2990795969963074, -0.7617306113243103, -0.9864998459815979, -0.790127158164978, -0.5466193556785583, -0.02239636890590191, -0.21413253247737885, -0.16945910453796387, -1.1150500774383545, -2.6865432262420654, -0.06855148077011108, -0.01730673760175705, -0.01776626519858837, -0.00018106251081917435, -0.46139901876449585, -0.13480037450790405, -1.3112935448589269e-05, -1.7326695919036865, -0.9399380087852478, -1.259704828262329, -0.5785406231880188, -1.5667829513549805, -0.39979177713394165, -0.8013398051261902, -6.508615479106084e-05, -0.009263510815799236, -0.06934414058923721, -0.8103168606758118, -0.00843970850110054, -2.6721537113189697, -0.4809345602989197, -0.31400710344314575, -0.19546744227409363, -3.068359613418579, -0.001604818389751017, -0.057844895869493484, -0.04498692974448204, -0.0009344025747850537, -0.11981251090765, -0.020471826195716858, -0.14921168982982635, -0.010186824016273022, -0.7353463768959045, -6.401333666872233e-05, -0.14646323025226593, -0.02536912076175213, -0.005213000811636448, -0.0035361635964363813, -1.7090026140213013, -0.0017090728506445885, -0.005591229535639286, -3.671578815556131e-05, -7.033323527139146e-06, -0.021343544125556946, -0.10561426728963852, -2.934065341949463, -2.5342135429382324, -0.43440574407577515, -0.001725019421428442, -0.001966092037037015, -0.2516443431377411, -0.13188514113426208, -0.00042655906872823834, -0.012043733149766922, -0.0020317642483860254, -0.0011264891363680363, -0.08772635459899902, -0.00023123928986024112, -2.3364747903542593e-05, -0.001658732071518898, -0.006539966445416212, -0.05931060388684273, -0.4358896017074585, -1.8715683836489916e-05, -0.9907225966453552, -0.0018866135505959392, -0.2011394202709198, -2.4521870613098145, -0.16132228076457977, -0.08479251712560654, -0.16378101706504822, -2.0257816314697266, -0.027736801654100418, -0.0030806248541921377], "finish_reason": "stop"}], "metrics": {"energy": 547.7190537528988, "energy_per_token": 3.511019575339095, "time": 13.458819, "time_per_token": 0.08627448076923076}}
{"outputs": [{"text": "matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, \"*.txt\")):\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            matches[os.path.basename(file_path)] = [match for match in re.findall(regex_pattern, f.read()) if match]\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "txt", "\"", "))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " f", ":", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")]", " =", " [", "match", " for", " match", " in", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " f", ".", "read", "())", " if", " match", "]", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -0.11873657256364822, -0.24785858392715454, -0.801586389541626, -0.34973397850990295, -0.37776458263397217, -0.039443597197532654, -0.0030687404796481133, -0.023320917040109634, -0.000510204816237092, -0.00418323278427124, -0.0045041777193546295, -0.3689391016960144, -1.2874520507466514e-05, -0.00030524839530698955, -1.1086402082582936e-05, -0.003064937423914671, -0.000614335120189935, -0.006265521049499512, -5.5549986427649856e-05, -3.933898824470816e-06, -0.003184487810358405, -1.5693597793579102, -0.3341172933578491, -0.016567861661314964, -0.01022116094827652, -0.0004379982128739357, -0.02633446827530861, -0.0005943200667388737, -0.07936830818653107, -0.015478716231882572, -1.687166690826416, -0.031168077141046524, -0.0004928089329041541, -0.010333370417356491, -0.0001538873475510627, -9.775113539944869e-06, -0.028892021626234055, -0.4469257891178131, -0.008308370597660542, -0.0007352509419433773, -0.9076976776123047, -0.02928629145026207, -0.310497909784317, -0.0028544417582452297, -0.0638466626405716, -0.07173668593168259, -0.0018343779956921935, -0.00408066064119339, -0.029346490278840065, -0.00018165845540352166, -1.201119065284729, -0.021439343690872192, -0.016583925113081932, -0.0024500847794115543, -2.669327974319458, -0.16345712542533875, -0.5050978660583496, -1.6093124941107817e-05, -2.992108420585282e-05, -6.079655122448457e-06, -0.0866626501083374, -1.311301275563892e-06, -7.56950321374461e-05, -0.037220776081085205, -6.83045873302035e-05, -8.583032467868179e-06, -0.01335826050490141, -0.0030812190379947424, -2.0789451599121094, -1.2102413177490234, -0.585673987865448, -0.057894960045814514, -0.007362139876931906, -0.012032661586999893, -0.00027426297310739756, -0.013323912397027016, -0.08635751157999039, -0.000621959799900651, -0.19303515553474426, -0.00015293381875380874, -1.1086402082582936e-05, -0.001920642564073205, -0.019913045689463615, -0.00029666791670024395, -1.8954096958623268e-05, -1.6452910900115967, -0.056482721120119095, -0.14781655371189117, -0.43075937032699585, -0.02665778435766697, -0.13879233598709106, -0.01724768429994583, -0.0071473391726613045, -0.3134916126728058, -0.010901772417128086, -0.7182517647743225], "finish_reason": "stop"}], "metrics": {"energy": 370.36879004955284, "energy_per_token": 3.7410988893894226, "time": 8.203225, "time_per_token": 0.08286085858585858}}
{"outputs": [{"text": "matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r') as file:\n            content = file.read()\n            extracted_content = re.findall(regex_pattern, content)\n            matches[file_name] = extracted_content\n    return matches", "tokens": ["matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "ext", "racted", "_", "content", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " content", ")", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " extracted", "_", "content", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -0.11873657256364822, -0.24785858392715454, -0.801586389541626, -0.34973397850990295, -0.37776458263397217, -0.039443597197532654, -0.0030687404796481133, -0.023320917040109634, -0.000510204816237092, -0.00418323278427124, -0.0045041777193546295, -0.3689391016960144, -1.2874520507466514e-05, -0.00030524839530698955, -1.1086402082582936e-05, -0.003064937423914671, -0.000614335120189935, -0.006265521049499512, -5.5549986427649856e-05, -3.933898824470816e-06, -0.003184487810358405, -0.24548429250717163, -0.1455330103635788, -0.026766540482640266, -0.009369686245918274, -0.055005524307489395, -0.0008989107445813715, -0.0923364982008934, -0.01477208361029625, -0.5272350907325745, -0.02501271665096283, -0.026151692494750023, -0.008322439156472683, -0.0944356918334961, -8.106198947643861e-06, -7.033323527139146e-06, -3.4570634852570947e-06, -0.10511044412851334, -1.1920928244535389e-07, -1.2874520507466514e-05, -0.0016543286619707942, -8.702239938429557e-06, -6.878139538457617e-05, -0.00034791138023138046, -0.03176656737923622, -0.01775900460779667, -0.2605496048927307, -0.02283620275557041, -0.0007360848248936236, -0.02370237186551094, -9.119095193454996e-05, -0.00010668662434909493, -0.03852042183279991, -0.10935646295547485, -0.0036468682810664177, -0.3477606475353241, -0.00011562632425921038, -0.45246124267578125, -0.0035137124359607697, -0.004947562236338854, -0.0029191046487540007, -0.769062340259552, -0.0006700892699882388, -0.009368505328893661, -0.0001401803019689396, -1.3947389561508317e-05, -0.0031627416610717773, -0.01446452271193266, -0.09616727381944656, -3.488152503967285, -0.02057039551436901, -0.06660988926887512, -3.058166742324829, -0.005631415639072657, -0.12253501266241074, -0.00023576818057335913, -0.05102512240409851, -0.00647518178448081, -0.0016156489728018641, -0.1304636299610138, -0.00015770144818816334, -1.5735502529423684e-05, -0.0011853104224428535, -0.005607707425951958, -0.10937248915433884, -0.011810380034148693, -0.03840743005275726, -0.3229147791862488, -0.0072320811450481415, -0.003235583659261465, -0.00025960413040593266, -0.0022493319120258093, -0.004412319976836443, -0.00022206225548870862, -0.05326361581683159, -6.556489552167477e-06, -6.9141146923357155e-06, -0.069795161485672, -0.07658671587705612, -0.016805384308099747, -0.004841153509914875, -0.24443306028842926, -0.0167799461632967, -0.9072285890579224], "finish_reason": "stop"}], "metrics": {"energy": 376.80631518840784, "energy_per_token": 3.5215543475552136, "time": 9.05218, "time_per_token": 0.08459981308411214}}
{"outputs": [{"text": "# Extract matches from all text files in directory\n    matches = {}\n    for file in glob.glob(f'{directory_path}\\*.txt', recursive=True):\n        with open(file, 'r') as f:\n            file_name = os.path.basename(file) # Extract file name without path\n            matches[file_name] = re.findall(regex_pattern, f.read()) # Add matches for each file\n\n    return matches # Return the dictionary", "tokens": ["#", " Ext", "ract", " matches", " from", " all", " text", " files", " in", " directory", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}\\", "*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", " #", " Ext", "ract", " file", " name", " without", " path", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " f", ".", "read", "())", " #", " Add", " matches", " for", " each", " file", "\n", "\n", "    ", "return", " matches", " #", " Return", " the", " dictionary", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -3.667724132537842, -0.0914144515991211, -0.7224221229553223, -0.08874104917049408, -0.3839162290096283, -0.1873577982187271, -0.004023196641355753, -0.07859258353710175, -1.929739236831665, -0.6264174580574036, -0.019743820652365685, -0.7602574825286865, -0.12109463661909103, -0.07940959930419922, -0.04149830341339111, -0.1115201860666275, -0.37605851888656616, -0.35665762424468994, -1.141002893447876, -0.09444892406463623, -0.0005322470096871257, -0.010131243616342545, -0.007069928105920553, -1.1882870197296143, -0.79493647813797, -0.011218918487429619, -0.0001294529065489769, -1.7404405298293568e-05, -2.977976083755493, -0.33309221267700195, -0.12346348911523819, -0.009247330017387867, -2.6957430839538574, -0.008752908557653427, -0.0070434133522212505, -0.025038642808794975, -0.1468214988708496, -0.0026456851046532393, -0.061167843639850616, -0.03491288423538208, -0.5150299668312073, -0.009003044106066227, -0.0016869375249370933, -0.02236221358180046, -0.06305577605962753, -0.11074383556842804, -0.010895876213908195, -0.32636377215385437, -0.00024637524620629847, -0.10060401260852814, -0.017488442361354828, -0.016123149544000626, -0.004460860975086689, -1.5632972717285156, -0.005074953194707632, -0.8599002957344055, -0.02197616547346115, -0.23978319764137268, -2.1934269170742482e-05, -0.00019143179815728217, -8.34461570775602e-06, -0.20502160489559174, -1.1920928244535389e-07, -6.90197994117625e-05, -0.11862678825855255, -0.004904383327811956, -3.033581018447876, -1.3150676488876343, -0.03154805302619934, -0.4252571165561676, -0.018960192799568176, -0.7678730487823486, -0.10883302986621857, -0.09182897955179214, -0.01009702030569315, -0.5717790722846985, -0.03755379840731621, -0.004416355397552252, -0.0020512747578322887, -5.221230458118953e-05, -0.0037199126090854406, -0.0003953390696551651, -0.16576944291591644, -0.00016175392374861985, -0.003663021605461836, -0.0035527939908206463, -0.0011831672163680196, -0.07659488916397095, -0.0002575780963525176, -2.52720492426306e-05, -0.002131453948095441, -0.023898746818304062, -0.0022883438505232334, -3.135155202471651e-05, -0.08578228950500488, -1.221238374710083, -1.5500000715255737, -1.210542917251587, -2.663019895553589, -0.5643014311790466, -0.07545393705368042, -0.9786822199821472, -1.319648265838623, -0.007469227071851492, -0.23373626172542572, -0.0057736532762646675, -2.2548279762268066, -0.21181829273700714, -2.268256425857544, -0.3673307001590729, -2.209419012069702, -0.010391298681497574, -0.8176759481430054], "finish_reason": "stop"}], "metrics": {"energy": 398.17580525398245, "energy_per_token": 3.492770221526162, "time": 9.68252, "time_per_token": 0.08493438596491228}}
{"outputs": [{"text": "text_files = glob.glob(f'{directory_path}\\\\**\\\\*.txt', recursive=True) # Get all .txt files in the directory.\n    text_files = [text_file for text_file in text_files if not re.search(r'\\\\__MACOSX\\\\', text_file)] # Filter out files in __MACOSX folder (MacOS specific).\n    matches = {} # Create empty dictionary to store matches.\n    for text_file in text_files: # Loop through each text file.\n        file_path = Path(text_file) # Convert file path string to Path object.\n        file_name = str(file_path.name) # Extract file name as a string.\n        with open(text_file, mode=\"r\", encoding=\"utf8\") as file: # Open each text file in read mode, specifying encoding.\n            data = file.read() # Read all file contents as a single string.\n            matches[file_name] = re.findall(regex_pattern, data) # Extract matches from file contents, and add them as a list to the dictionary.\n", "tokens": ["text", "_", "files", " =", " glob", ".", "glob", "(", "f", "'{", "directory", "_", "path", "}\\\\", "**", "\\\\*", ".", "txt", "'", ",", " recursive", "=", "True", ")", " #", " Get", " all", " ", ".", "txt", " files", " in", " the", " directory", ".", "\n", "    ", "text", "_", "files", " =", " [", "text", "_", "file", " for", " text", "_", "file", " in", " text", "_", "files", " if", " not", " re", ".", "search", "(", "r", "'\\\\", "__", "MAC", "OS", "X", "\\\\'", ",", " text", "_", "file", ")]", " #", " Filter", " out", " files", " in", " __", "MAC", "OS", "X", " folder", " (", "Mac", "OS", " specific", ")", ".", "\n", "    ", "matches", " =", " {}", " #", " Create", " empty", " dictionary", " to", " store", " matches", ".", "\n", "    ", "for", " text", "_", "file", " in", " text", "_", "files", ":", " #", " Loop", " through", " each", " text", " file", ".", "\n", "        ", "file", "_", "path", " =", " Path", "(", "text", "_", "file", ")", " #", " Convert", " file", " path", " string", " to", " Path", " object", ".", "\n", "        ", "file", "_", "name", " =", " str", "(", "file", "_", "path", ".", "name", ")", " #", " Ext", "ract", " file", " name", " as", " a", " string", ".", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " mode", "=", "\"", "r", "\"", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " file", ":", " #", " Open", " each", " text", " file", " in", " read", " mode", ",", " specifying", " encoding", ".", "\n", "            ", "data", " =", " file", ".", "read", "()", " #", " Read", " all", " file", " contents", " as", " a", " single", " string", ".", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " data", ")", " #", " Ext", "ract", " matches", " from", " file", " contents", ",", " and", " add", " them", " as", " a", " list", " to", " the", " dictionary", ".", "\n"], "logprobs": [-3.781743288040161, -0.0725582093000412, -0.15647150576114655, -0.0655398741364479, -0.12135430425405502, -0.0005164004978723824, -0.001966329989954829, -0.0049077048897743225, -1.6605749130249023, -0.7314288020133972, -0.007548145018517971, -5.8410845667822286e-05, -6.198863957251888e-06, -1.7094368934631348, -0.7012338638305664, -0.04881373420357704, -0.014614790678024292, -0.009173034690320492, -0.11047445237636566, -0.007035482209175825, -0.0066399178467690945, -0.027776570990681648, -0.007213973440229893, -0.006143731996417046, -2.2435498237609863, -2.5947861671447754, -0.40805718302726746, -2.2355756759643555, -0.0003328961320221424, -0.0030827641021460295, -0.07041265070438385, -0.5393000841140747, -0.7842271327972412, -0.4605047106742859, -3.271791934967041, -0.13626651465892792, -0.27398809790611267, -3.0014142990112305, -0.03762911260128021, -0.293790727853775, -0.4327874183654785, -0.3361344635486603, -2.7021143436431885, -0.06974413245916367, -0.061265844851732254, -0.3194544017314911, -0.010548313148319721, -3.969590397900902e-05, -0.0004850641416851431, -0.001992385368794203, -0.011178366839885712, -4.172316494077677e-06, -6.6756979322235566e-06, -0.06894822418689728, -0.6853819489479065, -1.6463446617126465, -0.00016783259343355894, -0.5791007280349731, -0.20132648944854736, -0.07708778977394104, -2.570876359939575, -1.3476300239562988, -0.6890330910682678, -0.05836668983101845, -0.00037377048283815384, -0.28951790928840637, -0.0021363310515880585, -0.037648629397153854, -4.529942543740617e-06, -0.00017653337272349745, -0.04562436416745186, -0.05787414684891701, -1.7474807500839233, -0.1429610401391983, -1.2498068809509277, -0.7101044654846191, -0.6664023995399475, -0.0010258655529469252, -0.00040737437666393816, -0.00034707720624282956, -1.4960150718688965, -2.4492833614349365, -3.152686834335327, -0.14550404250621796, -2.0288453102111816, -0.14858131110668182, -0.31013184785842896, -0.018999844789505005, -0.30163338780403137, -0.7839637398719788, -0.17878256738185883, -0.19232137501239777, -0.7211516499519348, -1.1225123405456543, -1.2770522832870483, -0.18569567799568176, -0.5931727290153503, -0.17654594779014587, -0.237107053399086, -0.22395718097686768, -0.00536419078707695, -0.3596569895744324, -0.08614349365234375, -0.31007590889930725, -0.006091007497161627, -0.0031043931376188993, -0.011041022837162018, -0.004777801223099232, -8.344646857949556e-07, -1.0728830375228426e-06, -0.0027887048199772835, -0.2299921214580536, -1.165750503540039, -0.3732534646987915, -0.6350719928741455, -0.44852086901664734, -0.010319212451577187, -0.33656588196754456, -0.004056321922689676, -0.0072111329063773155, -1.283473014831543, -0.025518687441945076, -2.954861879348755, -0.05860820412635803, -0.07972754538059235, -0.001927424455061555, -0.00329249887727201, -5.8412379075889476e-06, -1.537788011773955e-05, -0.0007781338645145297, -0.14331911504268646, -1.4428021907806396, -1.8628743886947632, -0.1243065670132637, -2.1272923946380615, -0.05501658096909523, -0.6260493397712708, -0.07268480956554413, -0.2791912853717804, -0.011880945414304733, -0.00518121849745512, -0.6960345506668091, -0.008130074478685856, -0.06275565922260284, -0.027698306366801262, -2.9727556705474854, -0.002817591419443488, -0.004649660550057888, -8.34461570775602e-06, -7.378782902378589e-05, -0.027082987129688263, -0.19536586105823517, -0.004139427095651627, -0.01419247966259718, -0.9284859299659729, -0.002144420053809881, -0.3046398162841797, -0.0024418795946985483, -3.183739185333252, -0.44351959228515625, -0.006845001131296158, -0.19716793298721313, -0.007630960550159216, -0.013620182871818542, -0.6221410036087036, -0.01577376201748848, -0.0019822726026177406, -0.16683068871498108, -3.2186455882765586e-06, -0.00017248096992261708, -0.03180340677499771, -2.765667676925659, -2.8157081604003906, -0.014453360810875893, -0.0260624997317791, -0.0036487688776105642, -0.15960967540740967, -0.015134737826883793, -0.35169023275375366, -0.00508740684017539, -0.08097269386053085, -2.02072811126709, -6.19869097135961e-05, -0.08172910660505295, -0.0003295593778602779, -0.42411524057388306, -0.04261626675724983, -0.0341104120016098, -0.04243655875325203, -2.1317100524902344, -0.6405112147331238, -0.007059985306113958, -0.6399518847465515, -0.0688089057803154, -0.06749959290027618, -2.640660524368286, -1.7848957777023315, -1.3083178997039795, -0.7120012640953064, -0.009256424382328987, -0.007400006055831909, -3.700714111328125, -0.013135096058249474, -0.04089370742440224, -7.724463648628443e-05, -2.0265373677830212e-05, -0.09609678387641907, -0.023674780502915382, -0.04192650318145752, -3.4586310386657715, -2.252779006958008, -0.9639936685562134, -1.229506492614746, -0.19405314326286316, -0.5628662109375, -0.004805207252502441, -0.031285934150218964, -0.006492000073194504, -0.21722771227359772, -2.1683175563812256, -0.1634083390235901, -0.010695278644561768, -2.8729025871143676e-05, -0.0006176709430292249, -0.00272260676138103, -0.0005972985527478158, -0.1179284080862999, -0.00015007323236204684, -0.005409840028733015, -0.0007937379996292293, -0.0007331067463383079, -0.13420765101909637, -0.00021002470748499036, -2.0265373677830212e-05, -0.0022195959463715553, -0.01034564059227705, -0.04608825594186783, -0.009213312529027462, -1.2051169872283936, -0.0016433794517070055, -0.2530958950519562, -0.8936582803726196, -0.7555412650108337, -0.5480018854141235, -1.6282895803451538, -1.3490742444992065, -0.5563288927078247, -1.2705048322677612, -2.0655055046081543, -0.3747280538082123, -0.28221631050109863, -0.2213709056377411, -0.2863682210445404, -0.4070270359516144, -0.9504587650299072, -0.10064422339200974], "finish_reason": "length"}], "metrics": {"energy": 896.5253214302061, "energy_per_token": 3.5020520368367425, "time": 22.278358, "time_per_token": 0.0870248359375}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise ValueError('The specified directory does not exist.')\n\n    matches = {}\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_path = Path(file)\n        file_name = file_path.name\n        with file_path.open(encoding='utf-8') as text_file:\n            content = text_file.read()\n            result = re.findall(pattern=regex_pattern, string=content)\n            matches[file_name] = result\n    return matches", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "('", "The", " specified", " directory", " does", " not", " exist", ".", "')", "\n", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "file", "_", "path", " =", " Path", "(", "file", ")", "\n", "        ", "file", "_", "name", " =", " file", "_", "path", ".", "name", "\n", "        ", "with", " file", "_", "path", ".", "open", "(", "encoding", "='", "utf", "-", "8", "')", " as", " text", "_", "file", ":", "\n", "            ", "content", " =", " text", "_", "file", ".", "read", "()", "\n", "            ", "result", " =", " re", ".", "find", "all", "(", "pattern", "=", "regex", "_", "pattern", ",", " string", "=", "content", ")", "\n", "            ", "matches", "[", "file", "_", "name", "]", " =", " result", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-3.074580430984497, -0.4008300304412842, -0.6511911153793335, -0.0001958416833076626, -0.02146221324801445, -3.7431014789035544e-05, -0.8170481324195862, -0.001211862312629819, -0.006922547705471516, -0.00014423283573705703, -1.2755313036905136e-05, -0.07401226460933685, -0.04460621625185013, -0.00801135040819645, -0.4868188500404358, -1.3162567615509033, -1.5616295058862306e-05, -2.5670859813690186, -1.546339750289917, -0.4576345980167389, -0.09560493379831314, -0.13464868068695068, -0.00039962888695299625, -0.00274269818328321, -0.5191259384155273, -0.045129720121622086, -0.00823294185101986, -0.35856714844703674, -0.0012855607783421874, -1.4496434926986694, -0.11769794672727585, -0.03339480608701706, -0.05958547443151474, -0.3334324359893799, -0.6575046181678772, -0.25272542238235474, -1.2305119037628174, -0.08670976012945175, -0.0006051616510376334, -0.009321501478552818, -0.008004965260624886, -0.45360296964645386, -1.4662635294371285e-05, -0.00020239688456058502, -1.3828182090946939e-05, -0.0020375936292111874, -0.00040344204171560705, -0.002755180699750781, -2.372236667724792e-05, -6.437280717364047e-06, -0.0037322642747312784, -0.13267825543880463, -0.0490369088947773, -0.026065867394208908, -0.0047608353197574615, -0.05685590207576752, -0.0006957017467357218, -0.045544978231191635, -0.00933449249714613, -1.113343358039856, -0.01019083522260189, -1.6050328016281128, -0.0037303639110177755, -0.09710020571947098, -0.00143722677603364, -0.01219236385077238, -0.0003844952443614602, -0.06495746970176697, -0.033663637936115265, -1.1515332460403442, -0.0018828060710802674, -0.08161649852991104, -0.01436053216457367, -0.052529580891132355, -0.0007602662080898881, -0.0004266782198101282, -0.0007201223634183407, -0.43300145864486694, -0.020947180688381195, -0.1717115193605423, -0.4260358214378357, -2.598416566848755, -0.0019682336132973433, -0.0010319390567019582, -0.0023084438871592283, -0.0001072826053132303, -0.836841881275177, -0.7576245665550232, -0.05261225998401642, -0.12054391950368881, -0.08047818392515182, -0.002612869720906019, -0.026876095682382584, -0.00014029949670657516, -2.650439977645874, -0.13894060254096985, -0.007002573926001787, -0.001905769924633205, -0.006315985694527626, -0.004036019556224346, -1.8186129331588745, -0.007596297189593315, -0.08742132037878036, -1.1801649634435307e-05, -2.3841830625315197e-06, -0.0001289761275984347, -1.9788545614574105e-05, -0.021545400843024254, -0.013025554828345776, -0.17630702257156372, -2.9605159759521484, -0.06634832173585892, -0.04551729932427406, -0.00010775939153973013, -0.04282701015472412, -0.01269838772714138, -0.0006030171643942595, -2.891641616821289, -0.020359113812446594, -0.011435085907578468, -1.4781842764932662e-05, -2.3841830625315197e-06, -0.0012975853169336915, -0.022458381950855255, -0.0010471820132806897, -0.002478862414136529, -0.04208904504776001, -0.0080968476831913, -0.07672318816184998, -0.41337648034095764, -0.06060611084103584, -0.007570506073534489, -0.0007559779332950711, -0.00087878224439919, -0.0026899129152297974, -0.0001728385395836085, -0.10814595967531204, -0.04398033767938614, -0.4577432870864868, -0.027064191177487373, -0.004955984186381102, -0.4043773412704468, -0.009102041833102703, -0.6083805561065674], "finish_reason": "stop"}], "metrics": {"energy": 492.8837026576997, "energy_per_token": 3.4228034906784703, "time": 12.407182, "time_per_token": 0.08616098611111112}}
{"outputs": [{"text": "matches = {}\n\n    # Get the absolute path of the directory\n    dir_path = os.path.abspath(directory_path)\n    print(\"Directory Path:\", dir_path)\n\n    # Search for all text files in the directory\n    for file in Path(dir_path).rglob('*.txt'):\n        print(\"File:\", file)\n\n        # Extract the file name without the path\n        file_name = os.path.basename(file)\n        print(\"File Name:\", file_name)\n\n        # Read the file contents\n        with open(file, 'r') as f:\n            file_content = f.read()\n\n        # Extract matches using regex pattern\n        file_matches = re.findall(regex_pattern, file_content)\n        matches[file_name] = file_matches\n\n    return matches", "tokens": ["matches", " =", " {}", "\n", "\n", "    ", "#", " Get", " the", " absolute", " path", " of", " the", " directory", "\n", "    ", "dir", "_", "path", " =", " os", ".", "path", ".", "ab", "sp", "ath", "(", "directory", "_", "path", ")", "\n", "    ", "print", "(", "\"", "Directory", " Path", ":\"", ",", " dir", "_", "path", ")", "\n", "\n", "    ", "#", " Search", " for", " all", " text", " files", " in", " the", " directory", "\n", "    ", "for", " file", " in", " Path", "(", "dir", "_", "path", ")", ".", "rg", "lob", "('", "*", ".", "txt", "')", ":", "\n", "        ", "print", "(", "\"", "File", ":\"", ",", " file", ")", "\n", "\n", "        ", "#", " Ext", "ract", " the", " file", " name", " without", " the", " path", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", ")", "\n", "        ", "print", "(", "\"", "File", " Name", ":\"", ",", " file", "_", "name", ")", "\n", "\n", "        ", "#", " Read", " the", " file", " contents", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "file", "_", "content", " =", " f", ".", "read", "()", "\n", "\n", "        ", "#", " Ext", "ract", " matches", " using", " regex", " pattern", "\n", "        ", "file", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", "_", "content", ")", "\n", "        ", "matches", "[", "file", "_", "name", "]", " =", " file", "_", "matches", "\n", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-1.4907753467559814, -0.13349607586860657, -0.03461894392967224, -0.11873657256364822, -1.519421100616455, -0.0021771318279206753, -0.7386462688446045, -1.9855008125305176, -1.632349967956543, -1.318719744682312, -0.19457249343395233, -0.24714230000972748, -0.014043675735592842, -0.28042072057724, -0.32151293754577637, -0.0018112935358658433, -2.2177066802978516, -0.011740987189114094, -0.07339068502187729, -0.006489512976258993, -0.18962286412715912, -9.417489309271332e-06, -0.0013377059949561954, -8.642300235806033e-05, -0.020171621814370155, -1.1920928244535389e-07, -5.245195097813848e-06, -0.0004924515378661454, -0.006993813905864954, -6.05564855504781e-05, -6.318072337307967e-06, -0.0006412595394067466, -0.0028974716551601887, -2.960846424102783, -1.5276963710784912, -0.06315851956605911, -1.7580220699310303, -1.3307877779006958, -1.8385157585144043, -0.20309042930603027, -0.0022625343408435583, -0.01533691305667162, -9.7508447652217e-05, -8.4638240878121e-06, -0.006464640609920025, -0.02651337906718254, -0.06498405337333679, -0.0010508735431358218, -0.04041389003396034, -3.2006452083587646, -0.19598467648029327, -0.8335585594177246, -0.2900032699108124, -0.020871298387646675, -0.38030117750167847, -0.01558294240385294, -0.1658521592617035, -0.593685507774353, -0.0012975853169336915, -1.5636155605316162, -0.23978160321712494, -0.745682418346405, -2.9123647212982178, -0.0011793570592999458, -0.06875237077474594, -9.083335316972807e-05, -2.3841855067985307e-07, -0.0015804193681105971, -6.603976362384856e-05, -0.33666208386421204, -4.768360213347478e-06, -0.5279790163040161, -0.030375314876437187, -0.06366144120693207, -0.01021101325750351, -0.0015285247936844826, -0.000490068516228348, -0.03095405362546444, -0.08219005912542343, -2.1761226654052734, -0.04304490238428116, -0.30873239040374756, -0.8194904327392578, -1.1963776350021362, -0.0012250783620402217, -0.11781959235668182, -0.06509531289339066, -0.04351352900266647, -0.7028847932815552, -0.027720453217625618, -0.2439282387495041, -1.3054591417312622, -0.015261659398674965, -0.6050512194633484, -0.22483517229557037, -0.02210688591003418, -0.2659635543823242, -1.2665942907333374, -0.14536705613136292, -0.13930073380470276, -0.0006654431927017868, -0.08420467376708984, -0.0033576085697859526, -0.010050286538898945, -0.024732712656259537, -0.2235000729560852, -1.3947389561508317e-05, -6.556489552167477e-06, -5.8412379075889476e-06, -0.049225762486457825, 0.0, -2.7656173188006505e-05, -0.040533293038606644, -0.00868082232773304, -0.008328113704919815, -0.1801345944404602, -0.04222264885902405, -0.003333252388983965, -0.006896383594721556, -0.06671137362718582, -0.11106221377849579, -0.05576919764280319, -7.116541382856667e-05, -0.0011426832061260939, -0.00035375059815123677, -4.95898348162882e-05, -0.00229119835421443, -0.0016696811653673649, -0.02551950141787529, -0.0028071305714547634, -0.09811688959598541, -0.9466952681541443, -0.07585491240024567, -0.4828574061393738, -2.028336763381958, -0.2596542239189148, -0.0007389436941593885, -0.044594358652830124, -0.010752478614449501, -0.0012477001873776317, -0.0936017706990242, -0.01592172123491764, -0.09766354411840439, -0.0027560130693018436, -0.3554246723651886, -0.00011932138295378536, -0.08036445081233978, -0.00718000577762723, -0.0018550821114331484, -0.0015285247936844826, -1.2086260318756104, -0.0001512651506345719, -1.6852043867111206, -0.000747758662328124, -0.004697596654295921, -2.109982233378105e-05, -5.245195097813848e-06, -0.006854946259409189, -0.010705893859267235, -0.616270124912262, -0.0470365472137928, -0.01563880778849125, -1.628752589225769, -0.009862622246146202, -0.2616467773914337, -0.8228922486305237, -2.0905416011810303, -0.2852969169616699, -0.10549970716238022, -0.0018093895632773638, -1.2041294574737549, -0.0002884448622353375, -0.014759632758796215, -0.0010028815595433116, -0.05108583718538284, -8.654219709569588e-05, -0.0025366530753672123, -0.01050407811999321, -0.0009215399040840566, -0.036419350653886795, -0.00020549570035655051, -4.95898348162882e-05, -0.000788258679676801, -0.0021240785717964172, -3.123234637314454e-05, -2.5748875486897305e-05, -0.04666081815958023, -0.0037195561453700066, -0.38968953490257263, -2.542785167694092, -0.009371812455356121, -0.0022548031993210316, -0.0034123784862458706, -0.0001429217227268964, -0.0010761191369965672, -0.00015639036428183317, -0.046143919229507446, -3.4570634852570947e-06, -3.635817120084539e-05, -0.024496369063854218, -0.1364230513572693, -0.09541228413581848, -0.1290578991174698, -0.003132082289084792, -0.12478797882795334, -0.008878516033291817, -1.4363431930541992], "finish_reason": "stop"}], "metrics": {"energy": 707.2640553245551, "energy_per_token": 3.41673456678529, "time": 17.86733, "time_per_token": 0.08631560386473429}}
{"outputs": [{"text": "# Get all files in the directory\n    file_paths = glob.glob(directory_path + \"/*.txt\")\n    matches_dict = {}\n\n    # Iterate over each file\n    for file_path in file_paths:\n        # Open the file and extract all matches\n        with open(file_path, \"r\") as f:\n            text = f.read()\n            matches = re.findall(regex_pattern, text)\n            # Store the matches in the dictionary, keyed by the file name\n            matches_dict[os.path.basename(file_path)] = matches\n\n    return matches_dict", "tokens": ["#", " Get", " all", " files", " in", " the", " directory", "\n", "    ", "file", "_", "paths", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " \"", "/*", ".", "txt", "\"", ")", "\n", "    ", "matches", "_", "dict", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "#", " Open", " the", " file", " and", " extract", " all", " matches", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "text", " =", " f", ".", "read", "()", "\n", "            ", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "            ", "#", " Store", " the", " matches", " in", " the", " dictionary", ",", " key", "ed", " by", " the", " file", " name", "\n", "            ", "matches", "_", "dict", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")]", " =", " matches", "\n", "\n", "    ", "return", " matches", "_", "dict", "\n", "\n", "#"], "logprobs": [-1.2958691120147705, -3.0968375205993652, -0.8999066352844238, -3.0730717182159424, -0.5395246148109436, -0.1476334035396576, -0.20914702117443085, -1.2406909465789795, -0.004278672393411398, -1.911836862564087, -0.0377763994038105, -0.4356890618801117, -0.0038353470154106617, -0.04757935553789139, -0.0010188394226133823, -0.0010508735431358218, -0.004525776021182537, -2.7326245307922363, -4.732496745418757e-05, -2.1815061700181104e-05, -0.14257575571537018, -0.7743117213249207, -0.8445854783058167, -0.23008428514003754, -0.022253794595599174, -0.00036614391137845814, -0.01972874253988266, -0.04903804510831833, -1.123203992843628, -1.49802565574646, -2.016451597213745, -0.5860003232955933, -0.009907475672662258, -0.033998191356658936, -0.09384925663471222, -0.5307003855705261, -0.0010190776083618402, -0.45114269852638245, -0.8942909836769104, -0.009120115078985691, -0.4536837041378021, -0.4300335943698883, -0.044182468205690384, -0.6545873880386353, -0.0004217927053105086, -0.004474271554499865, -0.0868859514594078, -0.08601432293653488, -0.0024409282486885786, -0.0019328974885866046, -0.0007155956700444221, -1.7881377516459906e-06, -1.6927575416048057e-05, -0.00024959311122074723, -0.0007425173535011709, -0.053157590329647064, -0.7964746952056885, -1.3810533285140991, -0.2937644422054291, -0.0230840053409338, -1.1159998178482056, -0.7733410596847534, -2.526394844055176, -0.09675029665231705, -0.6153997182846069, -0.002457814523950219, -0.07479608058929443, -0.009839249774813652, -0.0006958208978176117, -0.007958488538861275, -0.0001134808044298552, -2.706014311115723e-05, -0.06166381016373634, -0.5078214406967163, -0.007201901637017727, -0.001636119675822556, -0.4619894325733185, -5.8410845667822286e-05, -0.7954183220863342, -0.015144484117627144, -0.0017873755423352122, -0.003258516313508153, -2.088249444961548, -0.011079457588493824, -0.011203593574464321, -2.2053474822314456e-05, -1.156323378381785e-05, -0.0020534161012619734, -0.02179982326924801, -0.11887672543525696, -0.3212589621543884, -0.08704320341348648, -0.034572187811136246, -0.000105375460407231, -0.005194026045501232, -0.009348900988698006, -0.00039915222441777587, -0.04561286047101021, -0.00011860620725201443, -1.3351351299206726e-05, -0.0014509160537272692, -0.004014291800558567, -0.03464554250240326, -0.007654975634068251, -0.8400797843933105, -0.4926679730415344, -2.612544059753418, -0.4148801565170288, -0.10467733442783356, -0.15608547627925873, -0.17822283506393433, -0.04164799302816391, -2.2439591884613037, -2.024566173553467, -0.1433091014623642, -0.011915107257664204, -0.2524580955505371, -0.13708515465259552, -0.04402003809809685, -0.6508449912071228, -0.005717827472835779, -0.44100117683410645, -0.003358677960932255, -0.0015943447360768914, -0.004121382255107164, -0.504199743270874, -1.728519782773219e-05, -6.568216485902667e-05, -6.437280717364047e-06, -0.026130324229598045, -4.768370445162873e-07, -3.8742269680369645e-05, -0.006253792904317379, -3.361645576660521e-05, -0.00011491115583339706, -0.0018176001030951738, -0.0006540066679008305, -0.06714819371700287, -0.012040906585752964, -0.1159406453371048, -0.0023451941087841988, -0.10615482181310654, -0.0015513778198510408, -0.00023278864682652056, -2.6225699912174605e-05, -0.25654125213623047, -0.008908881805837154, -1.7092561721801758], "finish_reason": "stop"}], "metrics": {"energy": 533.9684459838867, "energy_per_token": 3.6078949052965315, "time": 12.621808, "time_per_token": 0.08528248648648648}}
{"outputs": [{"text": "# Create an empty dictionary to store the matches for each file\n    matches = {}\n\n    # Iterate through all text files in the directory\n    for file_path in glob.glob(os.path.join(directory_path, \"*.txt\")):\n        with open(file_path, \"r\") as file:\n            # Use regex to find matches based on the provided pattern\n            file_matches = re.findall(regex_pattern, file.read())\n\n            # Add the matches to the dictionary with the file name as the key\n            matches[os.path.basename(file_path)] = file_matches\n\n    return matches", "tokens": ["#", " Create", " an", " empty", " dictionary", " to", " store", " the", " matches", " for", " each", " file", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " text", " files", " in", " the", " directory", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "txt", "\"", "))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "#", " Use", " regex", " to", " find", " matches", " based", " on", " the", " provided", " pattern", "\n", "            ", "file", "_", "matches", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " file", ".", "read", "())", "\n", "\n", "            ", "#", " Add", " the", " matches", " to", " the", " dictionary", " with", " the", " file", " name", " as", " the", " key", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")]", " =", " file", "_", "matches", "\n", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -2.3542418479919434, -0.5754883885383606, -0.004487444646656513, -0.03370547667145729, -0.130131796002388, -0.09823327511548996, -0.36353984475135803, -0.3474021852016449, -1.6654001474380493, -0.006427330896258354, -0.05161048844456673, -0.0749422013759613, -0.003299390198662877, -0.3009702265262604, -0.31517544388771057, -0.02737138234078884, -0.006491171196103096, -0.22270438075065613, -0.0008428120636381209, -0.018104422837495804, -2.411058187484741, -0.0014402027009055018, -1.4074417352676392, -0.3486865162849426, -0.6267724633216858, -0.006311958190053701, -0.044810838997364044, -0.011619510129094124, -0.567955493927002, -0.27349433302879333, -0.001453653909265995, -0.08339332789182663, -0.24952836334705353, -0.5258961319923401, -0.024886678904294968, -0.0011302995262667537, -0.0204581618309021, -0.0009725131676532328, -0.011771148070693016, -0.00583753501996398, -0.38710546493530273, -1.4305012882687151e-05, -0.0002531684876885265, -2.8609820219571702e-05, -0.0012897277483716607, -0.0003911683743353933, -0.0037139742635190487, -0.00010358751023886725, -1.7046782886609435e-05, -0.0016994333127513528, -1.3687719106674194, -0.05902015417814255, -0.004310721065849066, -0.0049483925104141235, -0.00040880427695810795, -0.013217685744166374, -0.000336590368533507, -0.0201646126806736, -0.1027415543794632, -2.1592040061950684, -0.022182907909154892, -0.00041500062798149884, -0.006395586766302586, -0.00011073929636040702, -4.887569048150908e-06, -0.015856603160500526, -0.24266843497753143, -0.003621212672442198, -0.0006156456656754017, -0.6724159121513367, -0.00011503035057103261, -0.5030830502510071, -0.0019890540279448032, -0.011109991930425167, -0.012791959568858147, -0.19156436622142792, -2.896623373031616, -1.527632236480713, -0.3817119598388672, -0.7014450430870056, -1.3746414184570312, -3.1558573246002197, -0.0004894727608188987, -0.045241840183734894, -1.8382625579833984, -0.04447486996650696, -0.08425354212522507, -0.0013335392577573657, -0.4632483124732971, -0.0011508992174640298, -0.06052049621939659, -0.000747877755202353, -0.045062486082315445, -6.687417771900073e-05, -0.0015575670404359698, -0.0067795258946716785, -0.00041261743172071874, -0.06492819637060165, -0.00013743886665906757, -1.0847986231965479e-05, -0.0010006187949329615, -0.009458019398152828, -0.0006582954083569348, -1.3589766240329482e-05, -0.059475626796483994, -0.006486788857728243, -0.5726503133773804, -0.016137342900037766, -0.014672236517071724, -1.1758544445037842, -0.21666230261325836, -0.7019467949867249, -0.32198309898376465, -0.0007078525959514081, -0.019166739657521248, -1.7871150970458984, -0.1983836144208908, -0.03771774098277092, -0.06375438719987869, -0.053890373557806015, -0.42209866642951965, -0.00031895318534225225, -0.023568250238895416, -0.0007989790174178779, -0.3377116620540619, -0.002277877414599061, -0.0819619670510292, -7.152531907195225e-06, -3.933898824470816e-06, -1.1920922133867862e-06, -0.029330283403396606, -2.3841855067985307e-07, -1.6569954823353328e-05, -0.002283110748976469, -0.0015816095983609557, -0.00011812942830147222, -0.0029460859950631857, -0.00024816294899210334, -0.027196452021598816, -1.490105023549404e-05, -1.6689286894688848e-06, -0.01543493289500475, -0.028393084183335304, -0.004547255113720894, -0.19985359907150269, -0.001177571015432477, -0.1393403559923172, -0.006514858454465866, -1.0477653741836548], "finish_reason": "stop"}], "metrics": {"energy": 512.4056627426147, "energy_per_token": 3.416037751617431, "time": 13.042135, "time_per_token": 0.08694756666666667}}
{"outputs": [{"text": "# Use a regular expression to extract matches from the text\n    matches = {}\n\n    for filename in glob.glob(os.path.join(directory_path, '*.txt')):\n        with open(filename, 'r') as file:\n            # Read the content of the file\n            text = file.read()\n            # Use the regex pattern to extract the desired matches from the text\n            pattern = re.compile(regex_pattern)\n            extracted_matches = pattern.findall(text)\n            # Add the matches to the dictionary\n            matches[os.path.basename(filename)] = extracted_matches\n    return matches", "tokens": ["#", " Use", " a", " regular", " expression", " to", " extract", " matches", " from", " the", " text", "\n", "    ", "matches", " =", " {}", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " Read", " the", " content", " of", " the", " file", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "#", " Use", " the", " regex", " pattern", " to", " extract", " the", " desired", " matches", " from", " the", " text", "\n", "            ", "pattern", " =", " re", ".", "compile", "(", "regex", "_", "pattern", ")", "\n", "            ", "ext", "racted", "_", "matches", " =", " pattern", ".", "find", "all", "(", "text", ")", "\n", "            ", "#", " Add", " the", " matches", " to", " the", " dictionary", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "filename", ")]", " =", " extracted", "_", "matches", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-1.2958691120147705, -3.485194683074951, -2.9268853664398193, -0.8197788000106812, -0.003018468152731657, -0.8253924250602722, -2.13004732131958, -0.6774044036865234, -0.20354227721691132, -1.0845059156417847, -0.8658546805381775, -1.6392087936401367, -0.015366964973509312, -0.9215791821479797, -0.07824385166168213, -0.11362219601869583, -0.03975628688931465, -2.232079267501831, -0.0018983930349349976, -1.4464808702468872, -1.3219795227050781, -0.01670527085661888, -0.05775252357125282, -0.0004275123355910182, -0.016028130427002907, -0.006526701617985964, -0.553945004940033, -2.1815061700181104e-05, -0.0005416594794951379, -8.4638240878121e-06, -0.003171060001477599, -0.0013150862650945783, -0.005580916069447994, -0.00025555206229910254, -7.867782187531702e-06, -0.003661715192720294, -0.24806064367294312, -0.0696488469839096, -0.028050623834133148, -0.012278681620955467, -0.12165064364671707, -0.00101383775472641, -0.07310640066862106, -0.06116380915045738, -0.5119724273681641, -0.011921115219593048, -0.0007051127031445503, -0.07417067140340805, -0.023807955905795097, -0.10295838862657547, -0.006640983745455742, -0.22190825641155243, -0.00012754580529872328, -0.9051656126976013, -0.002291317330673337, -0.004221813287585974, -0.01013997569680214, -2.1151010990142822, -0.6568171381950378, -0.20254802703857422, -2.280892848968506, -0.03512813523411751, -0.06254907697439194, -0.05160992220044136, -0.15026365220546722, -0.0012530578533187509, -2.000621795654297, -0.008808211423456669, -0.003146461443975568, -7.235741941258311e-05, -1.4066597032069694e-05, -0.0015672078588977456, -0.005553768947720528, -0.483583003282547, -0.07973767071962357, -1.0487256050109863, -0.6523253917694092, -1.7375911474227905, -0.06943890452384949, -0.039555322378873825, -0.4720914363861084, -2.0427699089050293, -3.037883996963501, -0.3513524532318115, -2.2729392051696777, -0.008088570088148117, -0.10537976771593094, -0.033375900238752365, -0.008481789380311966, -2.758051872253418, -0.14603757858276367, -0.2469562590122223, -0.00038413776201196015, -0.012452354654669762, -0.0037123113870620728, -0.07080243527889252, -0.00012063252506777644, -1.5139465176616795e-05, -0.06740955263376236, -0.03622817620635033, -0.02856479212641716, -2.537548542022705, -0.007026840932667255, -0.02850373648107052, -0.04198525846004486, -0.0014572249492630363, -0.2054482102394104, -1.7046782886609435e-05, -0.001829261309467256, -0.004213147796690464, -0.00019095504831057042, -0.0019248068565502763, -0.0024038248229771852, -0.006398548372089863, -0.22259674966335297, -0.3701605498790741, -1.0438494682312012, -0.04880612716078758, -0.9572544097900391, -0.11288485676050186, -0.005186554975807667, -0.09989756345748901, -0.8093760013580322, -0.004088021349161863, -0.0742543488740921, -0.011403735727071762, -0.23862595856189728, -1.0967194612021558e-05, -1.0013530300057027e-05, -2.622600959512056e-06, -0.04187597334384918, 0.0, -2.9682672902708873e-05, -0.005799253936856985, -0.006481222342699766, -0.001043133088387549, -0.03000553511083126, -3.6954811548639555e-06, -6.318072337307967e-06, -0.009152953512966633, -1.7745505571365356, -0.2102302759885788, -0.0027196346782147884, -0.30678096413612366, -0.015112310647964478, -0.9283521771430969], "finish_reason": "stop"}], "metrics": {"energy": 523.2720413341519, "energy_per_token": 3.5840550776311777, "time": 12.405008, "time_per_token": 0.08496580821917808}}
{"outputs": [{"text": "all_files = glob.glob(os.path.join(directory_path, '*.txt'))\n    matches = {}\n    for file_path in all_files:\n        with open(file_path, 'r') as file:\n            text = file.read()\n            matches[os.path.basename(file_path)] = re.findall(regex_pattern, text)\n    return matches", "tokens": ["all", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", "_", "path", " in", " all", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "matches", "[", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")]", " =", " re", ".", "find", "all", "(", "regex", "_", "pattern", ",", " text", ")", "\n", "    ", "return", " matches", "\n", "\n", "def"], "logprobs": [-3.988419771194458, -0.028116922825574875, -1.571351408958435, -0.13987812399864197, -0.1275952011346817, -0.0006042085005901754, -0.0022551598958671093, -0.010655531659722328, -0.49357175827026367, -5.4596363042946905e-05, -0.0012261499650776386, -2.5629668016335927e-05, -0.007704542484134436, -0.001149232150055468, -0.01163141056895256, -4.9232225137529895e-05, -8.821448318485636e-06, -0.007263206876814365, -0.5343484878540039, -0.17461910843849182, -0.10908842086791992, -0.01325027272105217, -0.04861605912446976, -0.13917730748653412, -0.2363152652978897, -1.0346598625183105, -0.17950409650802612, -0.11386105418205261, -0.014068477787077427, -0.3282172381877899, -0.11215005815029144, -0.34709301590919495, -0.7502585649490356, -0.07864360511302948, -0.0007846852531656623, -0.0066384971141815186, -2.3841830625315197e-06, -2.861018856492592e-06, -0.0005329619161784649, -0.005445883143693209, -0.007894504815340042, -0.9290049076080322, -0.018440475687384605, -0.000644237850792706, -0.009774088859558105, -0.00015007323236204684, -1.9907753085135482e-05, -0.03844952955842018, -0.10567101091146469, -0.0024779110681265593, -0.4978114664554596, -0.00019035911827813834, -0.38357293605804443, -0.005649788770824671, -0.0031140190549194813, -0.002188907703384757, -1.8613510131835938, -0.0161883682012558, -0.00825351383537054, -0.0003051292151212692, -1.3947389561508317e-05, -0.001364491879940033, -0.01831863820552826, -0.11083570867776871, -1.75576913356781, -0.2835390865802765, -0.4191940128803253, -9.536697689327411e-06, -3.3378044463461265e-05, -5.722029527532868e-06, -0.05268928036093712, -1.1920928244535389e-07, -5.9602869441732764e-05, -0.01180142629891634, -0.0010470629204064608, -7.748573807475623e-06, -0.006955931894481182, -0.0018482997547835112, -0.07139088213443756, -0.00015698630886618048, -0.004746953956782818, -0.0010456338059157133, -0.0008148210472427309, -0.15144024789333344, -0.00018416139937471598, -1.7404405298293568e-05, -0.0016330252401530743, -0.012111809104681015, -0.02311522513628006, -0.026839423924684525, -0.10465285181999207, -0.020006997510790825, -0.005329923238605261, -0.21274873614311218, -0.013695676811039448, -1.0376337766647339], "finish_reason": "stop"}], "metrics": {"energy": 341.4044361858368, "energy_per_token": 3.5562962102691333, "time": 8.210123, "time_per_token": 0.08552211458333332}}
{"outputs": [{"text": "file_names = [os.path.basename(file_name) for file_name in glob.glob(os.path.join(directory_path, '*.txt'))]\n    matches = {}\n    for file_name in file_names:\n        text = Path(file_name).read_text()\n        match_objects = re.finditer(regex_pattern, text, re.MULTILINE | re.DOTALL)\n        matches[file_name] = [match.group() for match in match_objects]\n    return matches", "tokens": ["file", "_", "names", " =", " [", "os", ".", "path", ".", "bas", "ename", "(", "file", "_", "name", ")", " for", " file", "_", "name", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "txt", "'))", "]", "\n", "    ", "matches", " =", " {}", "\n", "    ", "for", " file", "_", "name", " in", " file", "_", "names", ":", "\n", "        ", "text", " =", " Path", "(", "file", "_", "name", ")", ".", "read", "_", "text", "()", "\n", "        ", "match", "_", "objects", " =", " re", ".", "find", "iter", "(", "regex", "_", "pattern", ",", " text", ",", " re", ".", "M", "ULT", "IL", "INE", " |", " re", ".", "D", "OT", "ALL", ")", "\n", "        ", "matches", "[", "file", "_", "name", "]", " =", " [", "match", ".", "group", "()", " for", " match", " in", " match", "_", "objects", "]", "\n", "    ", "return", " matches", "\n", "\n", "if"], "logprobs": [-2.6729633808135986, -0.04693213477730751, -1.5067371129989624, -0.12695786356925964, -1.1586778163909912, -0.8412391543388367, -5.23315102327615e-05, -0.001698124222457409, -7.629365427419543e-06, -0.42744842171669006, 0.0, -0.0019392033573240042, -0.6638095378875732, -1.28750741481781, -1.1851533651351929, -0.0143154077231884, -0.06366625428199768, -0.0013712774962186813, -0.00016175392374861985, -0.00018785618885885924, -0.005013394635170698, -0.06918786466121674, -0.0003156163729727268, -0.0012988949893042445, -0.0062376814894378185, -0.7368595004081726, -4.660974445869215e-05, -0.00024375328212045133, -1.966933996300213e-05, -0.005417665466666222, -0.0007794441189616919, -0.011519819498062134, -6.496695277746767e-05, -6.556489552167477e-06, -0.007544714026153088, -0.326349675655365, -0.049916524440050125, -0.049556851387023926, -0.006995944771915674, -0.0275911595672369, -0.012883638963103294, -0.09980791807174683, -0.20873919129371643, -0.6022074818611145, -0.1112719178199768, -0.3242262005805969, -0.010268241167068481, -0.2513764500617981, -0.14999671280384064, -0.05906645208597183, -0.045962341129779816, -0.00828141625970602, -0.0009432157967239618, -0.003870259737595916, -3.3378546504536644e-06, -1.4543427823809907e-05, -0.0006436422117985785, -0.004387514665722847, -0.00857185572385788, -3.8367862701416016, -0.4652137756347656, -0.14778262376785278, -0.012217682786285877, -2.914510488510132, -0.0013558013597503304, -0.00028391621890477836, -0.002518341178074479, -0.0037979392800480127, -0.009088101796805859, -0.00022194306075107306, -0.0018456820398569107, -0.14133217930793762, -0.0699753537774086, -0.01004379615187645, -2.252289056777954, -1.1498136520385742, -2.854274272918701, -0.0032759830355644226, -0.018559372052550316, -5.23315102327615e-05, -0.0069189961068332195, -0.21423615515232086, -0.0004621868138201535, -0.0442613922059536, -0.0002286172821186483, -3.397406908334233e-05, -0.004097044467926025, -0.007670472841709852, -1.9635456800460815, -0.15957187116146088, -2.0503786799963564e-05, -0.304053395986557, -0.012073296122252941, -4.768370445162873e-07, -1.764281842042692e-05, -1.8853346109390259, -0.0010352734243497252, -3.242440288886428e-05, -0.12002779543399811, -4.529942543740617e-06, -7.152555099310121e-07, -0.07957684248685837, -0.023351311683654785, -0.022907858714461327, -0.9079224467277527, -0.21177083253860474, -0.020847830921411514, -8.83301836438477e-05, -0.00010168035078095272, -0.008968664333224297, -0.0005277194431982934, -0.13345372676849365, -0.14616571366786957, -1.2405052185058594, -0.011028525419533253, -0.3430821895599365, -0.04480103775858879, -0.001608031801879406, -0.005735132377594709, -0.0009685831028036773, -7.033100700937212e-05, -3.3854863431770355e-05, -0.1006709560751915, -0.015666386112570763, -0.2255123406648636, -0.01685684360563755, -0.00803157314658165, -0.41859346628189087, -0.02502678520977497, -0.7804290056228638], "finish_reason": "stop"}], "metrics": {"energy": 474.18939468765245, "energy_per_token": 3.6476107283665575, "time": 11.148464, "time_per_token": 0.08575741538461538}}
