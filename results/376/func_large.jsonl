{"outputs": [{"text": "# Split the text into words, convert to lowercase, remove punctuation marks, and remove stopwords\n    words = [\n        word.lower() for word in re.findall(r'\\b\\w+\\b', text)\n        if word.lower() not in STOPWORDS\n    ]\n    return dict(Counter(words))", "tokens": ["#", " Split", " the", " text", " into", " words", ",", " convert", " to", " lower", "case", ",", " remove", " punct", "uation", " marks", ",", " and", " remove", " stop", "words", "\n", "    ", "words", " =", " [", "\n", "        ", "word", ".", "lower", "()", " for", " word", " in", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", "\n", "        ", "if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "\n", "    ", "]", "\n", "    ", "return", " dict", "(", "Counter", "(", "words", "))"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -1.7182493209838867, -0.1874823421239853, -0.31517377495765686, -0.0003883084573317319, -0.004025808535516262, -0.05141245946288109, -0.5027861595153809, -0.04286538437008858, -0.0028740549460053444, -1.6029884815216064, -1.2751514911651611, -0.13732802867889404, -0.6729311943054199, -0.45923784375190735, -0.04633491486310959, -0.06488586217164993, -0.0008498394163325429, -0.052690524607896805, -0.004730225075036287, -1.0325813293457031, -2.4697213172912598, -0.009203036315739155, -0.29475754499435425, -0.1017097532749176, -0.02855679951608181, -8.83301836438477e-05, -0.8362934589385986, -0.0006874820101074874, -0.000601349223870784, -0.08425749093294144, -1.1920858014491387e-05, -0.4704088866710663, -1.1920928244535389e-07, -0.006987894885241985, -0.0344877727329731, -0.058231402188539505, -0.07448054850101471, -0.1138511598110199, -0.006365145090967417, -0.0006239851354621351, -1.5497195136049413e-06, -9.619726915843785e-05, -2.884823152271565e-05, -0.0018795934738591313, -0.04949785768985748, -0.3385079503059387, -0.003402280155569315, -0.0005222387262620032, -0.009710812009871006, -0.10866494476795197, -0.18926768004894257, -0.00015043080202303827, -0.00553290406242013, -2.145764938177308e-06, -0.005559459328651428, 0.0, -2.8132995794294402e-05, 0.0, -1.1920928244535389e-07, -0.03870977833867073, -0.016718048602342606, -4.184158387943171e-05, -0.0015398323303088546, -2.636007785797119, -2.6290946006774902, -0.8394647240638733, -0.006453862413764, -0.002970332745462656, -0.0012323412811383605, -0.01516115665435791, -0.01617065630853176], "finish_reason": "stop"}], "metrics": {"energy": 294.6989950027467, "energy_per_token": 3.827259675360347, "time": 6.2740173, "time_per_token": 0.08148074415584415}}
{"outputs": [{"text": "# Split text into words and remove punctuation\n    words = [word.lower().rstrip('.,') for word in text.split()]\n\n    # Remove stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count word frequencies using Counter\n    word_counts = Counter(words)\n\n    # Return the word counts dictionary\n    return dict(word_counts)", "tokens": ["#", " Split", " text", " into", " words", " and", " remove", " punct", "uation", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", ".", "r", "strip", "('", ".", ",", "')", " for", " word", " in", " text", ".", "split", "()", "]", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " word", " frequencies", " using", " Counter", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " word", " counts", " dictionary", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")", "\n", "\n", "if"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -1.7192671298980713, -0.04202400892972946, -0.03642084449529648, -1.5969046354293823, -2.2242863178253174, -0.39202776551246643, -0.0023807534016668797, -1.9150598049163818, -0.0009584600338712335, -0.05170241370797157, -0.006026786286383867, -2.106144428253174, -1.2630815505981445, -0.21124161779880524, -0.45084115862846375, -5.411955135059543e-05, -0.7324464321136475, -2.3273725509643555, -0.000164018536452204, -0.5534687638282776, -0.09553255885839462, -0.07084164023399353, -1.3888202905654907, -0.0526355616748333, -0.000569300667848438, -0.00023016665363684297, -0.21586549282073975, -0.00023731753753963858, -0.004066769964993, -0.018049396574497223, -0.09413020312786102, -0.0025445008650422096, -0.11610008031129837, -0.0002548369811847806, -0.0009841842111200094, -0.11652572453022003, -0.5712845921516418, -0.045262232422828674, -0.5717528462409973, -0.0001538873475510627, -0.1057414710521698, -0.018911181017756462, -0.0018979170126840472, -0.0010157431242987514, -0.0013628251617774367, -5.245195097813848e-06, -8.22540732769994e-06, -4.851700214203447e-05, -0.000348268891684711, -0.009426252916455269, -0.22671592235565186, -4.172316494077677e-06, -0.0011744751827791333, 0.0, -2.8967437174287625e-05, 0.0, 0.0, -0.02387581765651703, -0.00033408781746402383, -0.00662985211238265, -0.00018487652414478362, -0.025821590796113014, -0.2469538301229477, -0.599937915802002, -0.6082765460014343, -2.437718152999878, -0.055866263806819916, -0.1555066704750061, -0.0002711643755901605, -0.14873017370700836, -0.0006425699684768915, -0.694065272808075, -0.00018225439998786896, -0.017170816659927368, -0.001209838199429214, -0.0055014872923493385, -5.07818695041351e-05, -0.0010442048078402877, -0.026209525763988495, -0.00024005869636312127, -0.5602675080299377, -1.1505497694015503, -0.6049577593803406, -0.9666942358016968, -1.3143222332000732, -1.674692988395691, -0.0067512271925807, -0.0005650115781463683, -0.004976742435246706, -0.1283716857433319, -0.00099871342536062, -0.004268464166671038, -1.5497195136049413e-06, -5.960446742392378e-06, -0.3848401606082916, -0.2688866853713989, -0.009337917901575565, -1.1533805131912231], "finish_reason": "stop"}], "metrics": {"energy": 370.44272534561185, "energy_per_token": 3.7044272534561187, "time": 8.213198, "time_per_token": 0.08213198000000001}}
{"outputs": [{"text": "words = re.findall(r'\\b\\w+\\b', text.lower())  # find all words with word boundaries ('\\b') and convert to lowercase\n    words = [word for word in words if word not in STOPWORDS]  # remove stopwords\n    word_count = Counter(words)  # count occurrences using Counter\n    return dict(word_count)", "tokens": ["words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ".", "lower", "())", "  ", "#", " find", " all", " words", " with", " word", " boundaries", " (", "'\\", "b", "')", " and", " convert", " to", " lower", "case", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "  ", "#", " remove", " stop", "words", "\n", "    ", "word", "_", "count", " =", " Counter", "(", "words", ")", "  ", "#", " count", " occurrences", " using", " Counter", "\n", "    ", "return", " dict", "(", "word", "_", "count", ")", "\n", "\n", "def"], "logprobs": [-1.3705222606658936, -0.010236619040369987, -0.3767866790294647, -2.6940935640595853e-05, -0.14833590388298035, -2.3841830625315197e-06, -0.0098274452611804, -0.0010643299901857972, -0.04708385840058327, -0.11623253673315048, -0.191720649600029, -0.0032987960148602724, -0.012105567380785942, -4.339123915997334e-05, -0.0001262346631847322, -2.038458114839159e-05, -0.04569622874259949, -0.27582213282585144, -0.0008875959902070463, -0.024555226787924767, -1.5069143772125244, -2.5987286790041253e-05, -2.2550606727600098, -1.045572280883789, -0.19357596337795258, -3.744953155517578, -1.868497371673584, -0.016622617840766907, -3.401332139968872, -4.329199314117432, -4.577531944960356e-05, -0.02223409153521061, -1.3042933940887451, -0.6313444972038269, -0.13807892799377441, -0.0002097863471135497, -0.0059661162085831165, -0.005774008575826883, -0.0342688150703907, -0.23097650706768036, -0.03394368663430214, -0.006573837250471115, -0.0961996465921402, -0.012880578637123108, -1.490105023549404e-05, -1.728519782773219e-05, -0.0003768687602132559, -0.0045738364569842815, -0.18933100998401642, -0.017629822716116905, -2.5033637939486653e-05, -0.0028526587411761284, 0.0, -6.318072337307967e-06, 0.0, 0.0, -0.6519185304641724, -0.061380207538604736, -6.318072337307967e-06, -0.09039615094661713, -0.05526161193847656, -0.016822615638375282, -0.0947522521018982, -0.034251999109983444, -0.5646910071372986, -0.0021280040964484215, -2.0394234657287598, -0.004968083463609219, -0.01774834655225277, -0.00221804971806705, -0.0052323308773338795, -5.173549288883805e-05, -0.2657158076763153, -2.7418097943154862e-06, -0.04707009717822075, -0.6298075318336487, -1.9200146198272705, -0.019899606704711914, -0.16346563398838043, -0.1298137754201889, -0.10166043043136597, -0.33045271039009094, -0.0032709925435483456, -0.005507296416908503, -7.390948667307384e-06, -4.291525328881107e-06, -0.3068923354148865, -0.7030349373817444, -0.012277268804609776, -1.5723029375076294], "finish_reason": "stop"}], "metrics": {"energy": 292.6491200675963, "energy_per_token": 3.2516568896399587, "time": 7.3633447, "time_per_token": 0.08181494111111111}}
{"outputs": [{"text": "# Clean the text by removing punctuation, common stopwords, and converting to lowercase\n    words = re.findall(r'\\b\\w+\\b', text)\n    words = [word.lower() for word in words if word.lower() not in STOPWORDS]\n\n    # Calculate word frequency using Counter\n    word_freq = Counter(words)\n\n    return word_freq", "tokens": ["#", " Clean", " the", " text", " by", " removing", " punct", "uation", ",", " common", " stop", "words", ",", " and", " converting", " to", " lower", "case", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Calculate", " word", " frequency", " using", " Counter", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " word", "_", "freq"], "logprobs": [-0.6367194056510925, -2.9775733947753906, -0.6539631485939026, -0.12207477539777756, -0.2371816337108612, -0.5065285563468933, -0.14218690991401672, -0.002949770539999008, -1.6403635740280151, -2.8684234619140625, -0.37485769391059875, -0.02036670595407486, -0.20042632520198822, -0.024427153170108795, -0.5922554135322571, -0.04126669093966484, -0.0003793711948674172, -0.002964984392747283, -0.01797235757112503, -0.00134222989436239, -1.5104048252105713, -0.009553428739309311, -0.28031498193740845, -4.0531076592742465e-06, -0.564616322517395, -1.7881377516459906e-06, -0.011003057472407818, -0.0007358465809375048, -0.0316508486866951, -0.1899709403514862, -0.11008007079362869, -0.0012771077454090118, -0.0035127620212733746, -6.079655122448457e-06, -8.999896090244874e-05, -4.768360213347478e-06, -0.35832226276397705, -1.0115063190460205, -0.16050761938095093, -0.009733832441270351, -0.54901522397995, -0.014888128265738487, -0.012431515380740166, -0.11412589997053146, -0.22927524149417877, -0.0027322364039719105, -2.3841574147809297e-05, -0.010302811861038208, -1.537788011773955e-05, -2.9444261599564925e-05, -0.00011550712952157483, -0.02287977933883667, -0.06734469532966614, -0.5022907853126526, -0.8637973070144653, -0.0004032037395518273, -0.0037344018928706646, -1.1086402082582936e-05, -0.001939084380865097, 0.0, -2.4318398573086597e-05, 0.0, -1.1920928244535389e-07, -0.07230384647846222, -0.005608181469142437, -0.06028483062982559, -0.000358159770257771, -0.023068279027938843, -2.515103816986084, -2.117866039276123, -1.1043310165405273, -0.3212317228317261, -0.09749573469161987, -0.09023267030715942, -0.000243634101934731, -0.09419139474630356, -0.0005364171229302883, -0.4333648383617401, -0.009619549848139286, -0.05148787423968315, -0.0021509623620659113, -0.0031207927968353033, -4.95898348162882e-05, -0.0026931229513138533, -0.042603474110364914, -0.00019739109848160297, -0.6242272853851318, -1.1093032360076904, -8.22540732769994e-06, -6.818538531661034e-05], "finish_reason": "stop"}], "metrics": {"energy": 342.2555794620513, "energy_per_token": 3.8028397718005698, "time": 7.363005, "time_per_token": 0.08181116666666667}}
{"outputs": [{"text": "text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    words = nltk.word_tokenize(text)\n    words = [word for word in words if word not in STOPWORDS]\n    word_counts = Counter(words)\n    return {word: count for word, count in word_counts.items()}", "tokens": ["text", " =", " text", ".", "lower", "()", ".", "strip", "()", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "    ", "words", " =", " n", "lt", "k", ".", "word", "_", "token", "ize", "(", "text", ")", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "    ", "return", " {", "word", ":", " count", " for", " word", ",", " count", " in", " word", "_", "counts", ".", "items", "()}", "\n", "\n", "if"], "logprobs": [-2.5938384532928467, -0.07707454264163971, -0.5874692797660828, -0.002255040919408202, -0.09214756637811661, -7.486063259420916e-05, -2.591921091079712, -0.8799198269844055, -0.010569545440375805, -0.22437818348407745, -0.1205461397767067, -0.4181484580039978, -0.023535065352916718, -0.016283724457025528, -7.629365427419543e-06, -0.00313564739190042, -0.08520739525556564, -0.09759770333766937, -0.6382556557655334, -0.04062773287296295, -0.012683439068496227, -0.00039521988946944475, -0.01693127304315567, -0.00016759421851020306, -0.021073132753372192, -0.000301673193462193, -3.158996332786046e-05, -0.05429692938923836, -7.426462980220094e-05, -0.0015568528324365616, -0.002617269055917859, -0.14523974061012268, -0.047427479177713394, -0.431217759847641, -0.0070873284712433815, -2.4778950214385986, -2.3364747903542593e-05, -2.9802276912960224e-06, -5.304672595229931e-05, -0.066531702876091, -0.006116481497883797, -0.0005871717585250735, -3.3378546504536644e-06, -0.0009737040963955224, -0.0010413468116894364, -0.010974995791912079, -0.006993813905864954, -0.029535511508584023, -0.27163195610046387, -0.03356346860527992, -0.005775668192654848, -0.12878449261188507, -0.009372284635901451, -3.373566141817719e-05, -2.169585604860913e-05, -0.0004573014739435166, -0.0024644737131893635, -0.018892347812652588, -0.10679291188716888, -7.390948667307384e-06, -0.002637481316924095, 0.0, -5.94836674281396e-05, 0.0, -1.1920928244535389e-07, -0.05778886377811432, -0.004912568721920252, -0.07044686377048492, -0.49499276280403137, -0.003789269831031561, -0.4966522455215454, -0.0003591130953282118, -0.012834681198000908, -0.003713499056175351, -0.005685349460691214, -0.00013255194062367082, -0.0025694710202515125, -0.12439025938510895, -0.15528276562690735, -2.967219114303589, -0.11544305831193924, -0.005650974344462156, -0.03312302380800247, -0.003360697766765952, -0.0009640575153753161, -1.4662635294371285e-05, -0.0003432638186495751, -6.949660019017756e-05, -0.14139655232429504, -2.50339189733495e-06, -2.109982233378105e-05, -0.0003367095487192273, -0.0404769703745842, -1.7118866443634033, -0.3824992775917053, -0.012296226806938648, -0.9903286695480347], "finish_reason": "stop"}], "metrics": {"energy": 357.1344994735718, "energy_per_token": 3.68179896364507, "time": 7.9837008, "time_per_token": 0.08230619381443299}}
{"outputs": [{"text": "words = re.findall(r'\\b\\w+\\b', text.lower())  # Find words and convert to lowercase\n    words = [w for w in words if w not in STOPWORDS and re.match(r'^[a-z]+$', w)]  # Remove stopwords and non-alphabetic characters\n    word_counts = Counter(words)  # Count word occurrences\n    return dict(word_counts)", "tokens": ["words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ".", "lower", "())", "  ", "#", " Find", " words", " and", " convert", " to", " lower", "case", "\n", "    ", "words", " =", " [", "w", " for", " w", " in", " words", " if", " w", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " re", ".", "match", "(", "r", "'^", "[", "a", "-", "z", "]+", "$'", ",", " w", ")]", "  ", "#", " Remove", " stop", "words", " and", " non", "-", "alph", "abetic", " characters", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "  ", "#", " Count", " word", " occurrences", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.3705222606658936, -0.010236619040369987, -0.3767866790294647, -2.6940935640595853e-05, -0.14833590388298035, -2.3841830625315197e-06, -0.0098274452611804, -0.0010643299901857972, -0.04708385840058327, -0.11623253673315048, -0.191720649600029, -0.0032987960148602724, -0.012105567380785942, -4.339123915997334e-05, -0.0001262346631847322, -2.038458114839159e-05, -0.04569622874259949, -0.27582213282585144, -0.0008875959902070463, -0.024555226787924767, -1.5069143772125244, -2.5987286790041253e-05, -0.9127126336097717, -0.32891085743904114, -2.5234413146972656, -0.6039718985557556, -0.2011849582195282, -0.00016306500765495002, -0.004319148138165474, -0.01464098785072565, -0.05497686192393303, -0.18239560723304749, -0.022883275523781776, -0.007203440181910992, -1.9800605773925781, -0.027060478925704956, -7.486063259420916e-05, -4.887569048150908e-06, -0.00016080040950328112, -0.0015090041561052203, -0.03943488746881485, -0.01954861357808113, -6.794906312279636e-06, -0.0035242848098278046, 0.0, -9.179073458653875e-06, 0.0, 0.0, -0.7022071480751038, -2.1425185203552246, -1.966933996300213e-05, -0.10316561162471771, -0.06081881746649742, -0.0034290107432752848, -0.20363806188106537, -0.015149063430726528, -0.22374828159809113, -1.2516897186287679e-05, -4.184158387943171e-05, -0.25132766366004944, -0.00156816013623029, -3.4570634852570947e-06, -0.0037751374766230583, -0.0069616143591701984, -0.08151069283485413, -9.298280929215252e-06, -0.10084103792905807, -0.040816690772771835, -0.010829486884176731, -0.02707057259976864, -0.11316082626581192, -0.00038020533975213766, -0.40616366267204285, -0.028097568079829216, -1.979359745979309, -0.0029519100207835436, -0.0819394513964653, -0.6073698997497559, -0.0010412277188152075, -0.4236874580383301, -9.524368942948058e-05, -0.01705433428287506, -0.0006257721688598394, -0.004250421188771725, -9.524368942948058e-05, -0.25116902589797974, -2.3841830625315197e-06, -0.014336559921503067, -0.37049293518066406, -0.2523324191570282, -0.13751670718193054, -0.12911918759346008, -0.09310315549373627, -0.19824469089508057, -0.005723872222006321, -0.006904552690684795, -1.6689286894688848e-06, -4.172316494077677e-06, -1.434476375579834, -4.172316494077677e-06, -1.6689286894688848e-06, -7.867782187531702e-06, -4.410734163684538e-06, -2.3598341941833496, -0.0034135663881897926], "finish_reason": "stop"}], "metrics": {"energy": 352.0477737245559, "energy_per_token": 3.3528359402338657, "time": 8.6305, "time_per_token": 0.08219523809523809}}
{"outputs": [{"text": "text = re.sub(r\"[^a-zA-Z ]\", \"\", text)\n    text = text.lower()\n    words = text.split()\n    cleaned_words = [word for word in words if word not in STOPWORDS]\n    freq_counter = Counter(cleaned_words)\n    return dict(freq_counter)", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", " ]", "\"", ",", " \"", "\"", ",", " text", ")", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "    ", "cleaned", "_", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "freq", "_", "counter", " =", " Counter", "(", "cleaned", "_", "words", ")", "\n", "    ", "return", " dict", "(", "freq", "_", "counter", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.5938384532928467, -0.07707454264163971, -0.920393168926239, -3.0278701160568744e-05, -0.022211356088519096, -0.06584161520004272, -0.016709959134459496, -1.882861852645874, -0.3637675642967224, -1.6554032564163208, -0.12005496770143509, -5.960446742392378e-06, -8.999896090244874e-05, -0.03007020242512226, -7.867782187531702e-06, -0.00504648732021451, -2.481738328933716, -0.07995811849832535, -0.00014649749209638685, -0.019792908802628517, -0.13881516456604004, -7.915183232398704e-05, -0.009014267474412918, -0.48397767543792725, -1.0634593963623047, -0.052974000573158264, -1.811267375946045, -0.07050085812807083, -0.3530493378639221, -0.00018761781393550336, -0.04693201929330826, -9.929640509653836e-05, -0.3625393807888031, -0.0878901407122612, -0.1778714656829834, -0.006655667908489704, -0.9209418296813965, -8.284702198579907e-05, -0.0034398215357214212, -0.02501632086932659, -0.005076257977634668, -0.08151893317699432, -3.234066963195801, -0.020499039441347122, -0.013064148835837841, -0.0002632986579556018, -0.039620522409677505, -0.07089394330978394, -0.00783347524702549, -2.396077979938127e-05, -2.5152843591058627e-05, -0.0006783091812394559, -0.004037325270473957, -0.01871393993496895, -0.05712311342358589, -2.396077979938127e-05, -0.0026657781563699245, 0.0, -5.1020273531321436e-05, 0.0, 0.0, -0.050655536353588104, -0.0017147850012406707, -0.10353843867778778, -2.9627952575683594, -0.4763164520263672, -1.0212736129760742, -0.0004011779965367168, -0.0030618475284427404, -0.004524826537817717, -0.006063399836421013, -3.3378546504536644e-06, -3.6954811548639555e-06, -0.0008499585674144328, -0.005100809037685394, -0.08949095010757446, -0.3628801107406616, -0.2729228734970093, -0.001529357978142798, -0.005183590110391378, -3.576272320060525e-06, -2.7418097943154862e-06, -1.1764781475067139, -2.7418097943154862e-06, -1.311301275563892e-06, -5.8412379075889476e-06, -5.8412379075889476e-06, -0.12937280535697937], "finish_reason": "stop"}], "metrics": {"energy": 328.69250136947625, "energy_per_token": 3.7351420610167754, "time": 7.163503, "time_per_token": 0.08140344318181819}}
{"outputs": [{"text": "# Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split text into words\n    words = text.split()\n\n    # Remove common stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count word frequencies\n    word_freq = Counter(words)\n\n    # Return word frequencies as a dictionary\n    return dict(word_freq)", "tokens": ["#", " Convert", " text", " to", " lower", "case", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Split", " text", " into", " words", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "\n", "    ", "#", " Remove", " common", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " word", " frequencies", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Return", " word", " frequencies", " as", " a", " dictionary", "\n", "    ", "return", " dict", "(", "word", "_", "freq", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -1.0355935096740723, -0.016039391979575157, -0.009474197402596474, -0.007764279376715422, -1.0371893644332886, -0.0006715188501402736, -0.11570186167955399, -0.03260299935936928, -0.00827183946967125, -6.174850568640977e-05, -0.0011601868318393826, -2.8967437174287625e-05, -0.002352567622438073, -0.17049039900302887, -0.0002335037279408425, -0.0008219677838496864, -0.3348725140094757, -0.07238247245550156, -0.0018331881146878004, -0.5370485782623291, -0.5395068526268005, -0.000205018965061754, -0.06322287023067474, -0.006622510030865669, -0.0069063282571733, -5.960462772236497e-07, -0.00015793983766343445, -0.01793992519378662, -0.00336152920499444, -0.08327925950288773, -0.0025719678960740566, -0.0040741306729614735, -4.017272294731811e-05, -0.0004919749335385859, -4.0531076592742465e-06, -0.004726903047412634, -9.178694017464295e-05, -6.079655122448457e-06, -0.058758728206157684, -2.47952248173533e-05, -0.0002461368858348578, -0.0009053422254510224, -0.002356254495680332, -0.0027286699041724205, -0.00011145447206217796, -0.0019622850231826305, -0.2727937400341034, -0.537839949131012, -0.0038294093683362007, -0.016925647854804993, -0.11543679237365723, -0.00016127715934999287, -0.007382730022072792, -0.003084665397182107, -0.17235949635505676, -1.0251946150674485e-05, -0.001026341924443841, -0.002717970171943307, -0.0003013156820088625, -0.00206055399030447, -0.00010072677832795307, -0.0008092227508313954, -0.15702684223651886, -0.8555077314376831, -0.0054343827068805695, -0.012107922695577145, -0.15269199013710022, -0.00014447122521232814, -0.0484863743185997, -0.004628658294677734, -0.00045885046711191535, -0.029855944216251373, -0.0007545484695583582, -2.3841830625315197e-06, -2.9802276912960224e-06, -2.6702524337451905e-05, -0.00047088501742109656, -0.0022157898638397455, -0.004182520322501659, -2.9802276912960224e-06, -0.0005470209871418774, 0.0, -2.610649426060263e-05, 0.0, 0.0, -0.007724297232925892, -0.00025138078490272164, -0.002096361480653286, -7.70062324590981e-05, -0.003233920084312558, -0.16606563329696655, -0.5968073010444641, -0.4612686038017273, -0.1997378170490265, -0.000179036331246607, -0.14839674532413483, -0.0003854485403280705, -0.6464393734931946, -0.03185040503740311, -0.03531733155250549, -0.0007495454628951848, -0.002086011925712228, -2.8371408916427754e-05, -0.0014327033422887325, -0.011912044137716293, -0.0001497156627010554, -0.6634210348129272, -0.7716280221939087, -1.8279852867126465, -0.05886517092585564, -0.314089834690094, -0.16091619431972504, -0.0047496831975877285, -0.002672911621630192, -0.0005665604257956147, -0.007680291775614023, -0.11384551972150803, -0.00020668754586949944, -0.001536380616016686, -3.6954811548639555e-06, -1.0490362910786644e-05, -1.2444920539855957, -1.2516897186287679e-05, -1.4305104514278355e-06, -9.65590606938349e-06, -1.0847986231965479e-05, -0.13468608260154724], "finish_reason": "stop"}], "metrics": {"energy": 444.04917058849344, "energy_per_token": 3.4422416324689413, "time": 10.516459, "time_per_token": 0.08152293798449611}}
{"outputs": [{"text": "# Convert the text to lowercase, remove punctuation, and remove common stopwords\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count the frequency of each word using Counter\n    word_counts = Counter(words)\n\n    # Return the word frequencies\n    return dict(word_counts)", "tokens": ["#", " Convert", " the", " text", " to", " lower", "case", ",", " remove", " punct", "uation", ",", " and", " remove", " common", " stop", "words", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Filter", " out", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", " using", " Counter", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " word", " frequencies", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -0.9547982811927795, -0.11385700851678848, -0.04777314513921738, -0.005025967489928007, -0.0036655159201472998, -1.824964165687561, -0.5997210741043091, -0.05931510031223297, -0.0013311582151800394, -0.8840298652648926, -0.13170824944972992, -1.7545868158340454, -0.6598124504089355, -0.015821870416402817, -0.02284354344010353, -0.09322837740182877, -0.0012692499440163374, -0.8662816882133484, -0.0432123988866806, -1.0278873443603516, -0.00038985759601928294, -0.012897524982690811, -0.00031573555315844715, -0.07212307304143906, -0.005509074777364731, -2.3348655700683594, -0.008233769796788692, -0.03579143434762955, -2.861018856492592e-06, -0.14353662729263306, -2.3841855067985307e-07, -0.042503394186496735, -0.00024732868769206107, -0.031755827367305756, -0.09587639570236206, -0.11280765384435654, -0.0012484145117923617, -0.004788597580045462, -8.4638240878121e-06, -9.035655966727063e-05, -7.748573807475623e-06, -0.003630002262070775, -0.027697494253516197, -0.2106083184480667, -2.6904587745666504, -0.0005726366653107107, -0.3345194458961487, -2.1836111545562744, -0.23333929479122162, -0.3206636309623718, -0.052600160241127014, -0.3632860481739044, -0.0002536452084314078, -0.3477872610092163, -0.011256874538958073, -0.004309652838855982, -0.08522316068410873, -0.0019449143437668681, -5.006777428206988e-06, -3.6954811548639555e-06, -7.045020902296528e-05, -0.00020716428116429597, -0.003735114587470889, -0.008454247377812862, -2.622600959512056e-06, -0.0008330450509674847, 0.0, -4.0649541915627196e-05, 0.0, -2.3841855067985307e-07, -0.009461089968681335, -0.00040928093949332833, -0.022556405514478683, -0.00021884430316276848, -0.03224766626954079, -0.14603222906589508, -0.06794988363981247, -0.17237383127212524, -0.0012354368809610605, -0.06458830833435059, -0.026378588750958443, -1.6061397790908813, -0.16825376451015472, -0.13323359191417694, -0.00032908268622122705, -0.18076032400131226, -0.0004328744253143668, -0.6590904593467712, -0.00010907054820563644, -0.004925142508000135, -0.00035613393993116915, -0.0008797351038083434, -5.61460001335945e-05, -0.0009183242218568921, -0.04616236314177513, -0.00018499570433050394, -0.243403822183609, -0.6680485010147095, -0.06411469727754593, -1.2876670360565186, -0.9049776196479797, -1.9946483373641968, -0.0005575056420639157, -0.009499703533947468, -0.24566902220249176, -0.0009657248156145215, -0.004319623112678528, -1.1920922133867862e-06, -4.887569048150908e-06, -1.2498600482940674, -7.033323527139146e-06, -2.3841830625315197e-06, -1.6093124941107817e-05, -7.510157047363464e-06, -0.14367200434207916], "finish_reason": "stop"}], "metrics": {"energy": 389.524503616333, "energy_per_token": 3.3292692616780597, "time": 9.683304, "time_per_token": 0.08276328205128206}}
{"outputs": [{"text": "# Split the text into words\n    words = re.sub(r'[^\\w\\s]', '', text.lower()).split()\n\n    # Remove stopwords and punctuation\n    words = [word for word in words if word not in STOPWORDS and word.isalnum()]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Return the frequency dictionary\n    return dict(word_counts)", "tokens": ["#", " Split", " the", " text", " into", " words", "\n", "    ", "words", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ".", "lower", "())", ".", "split", "()", "\n", "\n", "    ", "#", " Remove", " stop", "words", " and", " punct", "uation", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " word", ".", "isal", "num", "()", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " frequency", " dictionary", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -0.5564355254173279, -0.000417741306591779, -0.024593262001872063, -0.005275377072393894, -0.8939618468284607, -1.2040065485052764e-05, -2.962782382965088, -0.040123049169778824, -0.017857607454061508, -0.24040916562080383, -0.006245855707675219, -0.011120484210550785, -9.226373367710039e-05, -0.016457054764032364, -2.3483953555114567e-05, -0.020406536757946014, -0.00039009589818306267, -2.4914430468925275e-05, -0.030329864472150803, -9.07141511561349e-05, -0.008485098369419575, -0.9680400490760803, -0.003971191123127937, -0.00643337145447731, -0.002211269922554493, -0.007905031554400921, -0.0014577010879293084, -0.012019234709441662, -0.16246840357780457, -0.00025054652360267937, -0.002067572670057416, -0.289150595664978, -0.30050453543663025, -0.04293356463313103, -0.720784604549408, -0.3961119055747986, -0.006389427464455366, -1.5291311740875244, -0.00018916724366135895, -0.271284282207489, -0.014711589552462101, -0.0021870045457035303, -0.032981276512145996, -0.005302887409925461, -5.960446742392378e-06, -1.2397689715726301e-05, -0.00016640232934150845, -0.0013166338903829455, -0.015297232195734978, -0.07807274907827377, -1.0013530300057027e-05, -0.0024536524433642626, 0.0, -2.396077979938127e-05, 0.0, 0.0, -0.903883695602417, -0.3556223213672638, -0.9686331748962402, -0.4841495156288147, -7.343022298300639e-05, -8.5588610090781e-05, -0.018276149407029152, -0.0011804286623373628, -0.008612512610852718, -0.00010311071673640981, -0.010253491811454296, -0.13103075325489044, -0.14208783209323883, -0.10892080515623093, -0.002363865962252021, -0.07778075337409973, -0.008201846852898598, -0.06792671233415604, -0.0001740304142003879, -0.16429509222507477, -0.00039188333903439343, -1.0540974140167236, -0.00010215714428341016, -0.014179198071360588, -0.0008717550663277507, -0.004094788804650307, -4.7444173105759546e-05, -0.002244455274194479, -0.03668426349759102, -0.00018749863374978304, -0.5747787952423096, -0.7555364370346069, -0.0658535584807396, -1.691332221031189, -0.21504563093185425, -0.01920158974826336, -0.0004159538948442787, -0.005561237223446369, -0.27383536100387573, -0.0015135272406041622, -0.010744812898337841, -1.4305104514278355e-06, -9.179073458653875e-06, -1.1951006650924683, -3.576272320060525e-06, -2.0265558760002023e-06, -8.702239938429557e-06, -3.814689989667386e-06, -0.1299002468585968], "finish_reason": "stop"}], "metrics": {"energy": 397.016962299347, "energy_per_token": 3.5767293900842074, "time": 9.043992, "time_per_token": 0.0814774054054054}}
{"outputs": [{"text": "# Tokenization: Split the text into words\n    words = nltk.word_tokenize(text)\n\n    # Convert words to lowercase\n    lower_words = [word.lower() for word in words]\n\n    # Remove punctuation marks\n    pattern = r\"\\b[^\\w\\s]+\\b\"\n    words_without_punct = [re.sub(pattern, \"\", word) for word in lower_words]\n\n    # Remove stopwords\n    filtered_words = [word for word in words_without_punct if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(filtered_words)\n\n    # Return the dictionary with words as keys and their frequencies as values\n    return dict(word_counts)", "tokens": ["#", " Token", "ization", ":", " Split", " the", " text", " into", " words", "\n", "    ", "words", " =", " n", "lt", "k", ".", "word", "_", "token", "ize", "(", "text", ")", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", "\n", "    ", "lower", "_", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", "\n", "    ", "pattern", " =", " r", "\"", "\\", "b", "[", "^\\", "w", "\\", "s", "]", "+\\", "b", "\"", "\n", "    ", "words", "_", "without", "_", "punct", " =", " [", "re", ".", "sub", "(", "pattern", ",", " \"", "\"", ",", " word", ")", " for", " word", " in", " lower", "_", "words", "]", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " words", "_", "without", "_", "punct", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "filtered", "_", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " dictionary", " with", " words", " as", " keys", " and", " their", " frequencies", " as", " values", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -3.006519317626953, -2.4885027408599854, -1.7713308334350586, -0.5434547066688538, -0.16815835237503052, -0.03773633763194084, -0.015818819403648376, -0.09923941642045975, -0.3589203357696533, -0.0008007657015696168, -0.06969510018825531, -0.004910907708108425, -0.7750457525253296, -3.6954811548639555e-06, -4.0531076592742465e-06, -1.585470999998506e-05, -0.30671069025993347, -0.0026439016219228506, -3.540453326422721e-05, -3.2186455882765586e-06, -0.00018940561858471483, -0.0012184107908979058, -0.061664484441280365, -0.0012627016985788941, -0.07911479473114014, -0.00012063252506777644, -0.002055557444691658, -1.2778105735778809, -0.536546528339386, -0.0023341334890574217, -0.0007185738068073988, -0.006571468897163868, -0.2802290618419647, -0.00010716341057559475, -3.044081211090088, -0.01446299534291029, -0.06265948712825775, -0.0003830652858596295, -0.013196744956076145, -0.12250716984272003, -0.00048160876031033695, -0.0001908358681248501, -4.768360213347478e-06, -0.002242433140054345, -7.152531907195225e-06, -4.6491513785440475e-06, -4.017272294731811e-05, -0.006471036467701197, -0.00013136000779923052, -0.004446856677532196, -7.509902934543788e-05, -0.0011191064259037375, -0.06611458212137222, -0.12072576582431793, -0.0052503556944429874, -0.5610413551330566, -0.7057969570159912, -0.00013076403411105275, -2.1305623054504395, -0.0289872158318758, -0.6633350849151611, -0.6246777176856995, -0.5389118194580078, -0.1465914249420166, -0.06152549386024475, -0.686708390712738, -0.07697940617799759, -0.15728040039539337, -0.08560404181480408, -0.05797821283340454, -0.0002681849291548133, -7.652943895664066e-05, -0.0004881620698142797, -0.08067802339792252, -0.001547330990433693, -1.6246870756149292, -0.04882383719086647, -0.4697721302509308, -0.00032217081752605736, -0.10171771794557571, -0.3976069390773773, -0.35784271359443665, -0.01969928853213787, -5.364403477869928e-06, -7.593343616463244e-05, -0.0001037067049765028, -0.0009324969723820686, -0.0005349873681552708, -0.6760374307632446, -0.011320643126964569, -5.245195097813848e-06, -0.01086934469640255, -0.004795834422111511, -0.0024775543715804815, -2.4199192921514623e-05, -5.364403477869928e-06, -0.0005246216314844787, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0010619483655318618, -0.0014510351466014981, -0.0024266578257083893, -5.328513361746445e-05, -0.0009600082994438708, -0.050020962953567505, -0.6401399970054626, -0.055630289018154144, -0.11315400898456573, -0.00013648532330989838, -0.9074052572250366, -0.02042067050933838, -0.006740451790392399, -0.0006799769471399486, -0.006838252302259207, -0.045135073363780975, -0.0012384133879095316, -5.483612312673358e-06, -3.9934315282152966e-05, -0.00030393750057555735, -3.9934315282152966e-05, -5.960462772236497e-07, 0.0, -3.576278118089249e-07, -0.00263569806702435, -0.006917575374245644, -0.0953909382224083, -1.4543427823809907e-05, -0.0007758706342428923, 0.0, -1.811964830267243e-05, 0.0, 0.0, -0.027368133887648582, -0.00047839165199548006, -0.00344825629144907, -8.237022848334163e-05, -0.010514812543988228, -0.36203113198280334, -0.4871693551540375, -0.13732501864433289, -0.00721764238551259, -0.37594637274742126, -0.03431408479809761, -0.2091301828622818, -0.0002261144545627758, -0.14598184823989868, -0.0010699268896132708, -0.7525224685668945, -0.00037889453233219683, -0.009239652194082737, -0.001128513365983963, -0.002424160484224558, -2.145764938177308e-06, -3.933898824470816e-06, -4.124556289752945e-05, -0.0009400001727044582, -0.04022405296564102, -0.00012516192509792745, -0.9020895957946777, -0.9164709448814392, -0.05351348593831062, -0.848414421081543, -0.5838686227798462, -0.658495306968689, -0.822547197341919, -0.0003178806509822607, -0.001832593115977943, -0.5001338720321655, -0.07048042118549347, -0.0034661947283893824, -0.0003082277253270149, -0.0034316242672502995, -0.000513064325787127, -0.0073701865039765835, -0.21490958333015442, -0.0003970073303207755, -0.004128030501306057, -9.536738616588991e-07, -4.172316494077677e-06, -1.3809442520141602, -7.510157047363464e-06, -2.264974000354414e-06, -5.960446742392378e-06, -1.0967194612021558e-05, -0.12150581181049347], "finish_reason": "stop"}], "metrics": {"energy": 636.5490799789429, "energy_per_token": 3.42230688160722, "time": 15.341668, "time_per_token": 0.08248208602150538}}
{"outputs": [{"text": "# Convert the text to lowercase, split into words, and remove punctuation\n    words = re.findall(r'\\w+', text.lower())\n\n    # Remove common stopwords (provided as a constant)\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Calculate the frequency of each word\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "tokens": ["#", " Convert", " the", " text", " to", " lower", "case", ",", " split", " into", " words", ",", " and", " remove", " punct", "uation", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " text", ".", "lower", "())", "\n", "\n", "    ", "#", " Remove", " common", " stop", "words", " (", "provided", " as", " a", " constant", ")", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Calculate", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")", "\n", "\n", "#"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -0.9547982811927795, -0.11385700851678848, -0.04777314513921738, -0.005025967489928007, -0.0036655159201472998, -1.824964165687561, -1.1292868852615356, -1.0618345737457275, -0.07859423756599426, -0.2789064049720764, -0.4400821328163147, -0.1476534605026245, -0.34797802567481995, -0.0014537728857249022, -1.192588448524475, -0.0007491880678571761, -0.08711575716733932, -0.005092032253742218, -0.23407986760139465, -1.4305104514278355e-06, -0.2925969660282135, -4.291525328881107e-06, -0.008054987527430058, -0.0003321811091154814, -0.057711001485586166, -1.0098029375076294, -0.0026996617671102285, -7.271740287251305e-06, -0.0026749325916171074, -0.010168887674808502, -0.00030298411729745567, -0.00464135454967618, -0.001419966109097004, -0.08879798650741577, -0.00029762129997834563, -0.0017051455797627568, -0.10832686722278595, -0.4808093309402466, -0.004324133507907391, -0.013144508935511112, -2.418886184692383, -0.3729127049446106, -0.020351288840174675, -0.02474236488342285, -0.009564056061208248, -0.052140187472105026, -0.16768376529216766, -0.0001677133986959234, -0.16896791756153107, -0.016209011897444725, -0.0018191470298916101, -0.16067351400852203, -0.0016408802475780249, -5.960446742392378e-06, -3.4570634852570947e-06, -3.7431014789035544e-05, -0.00021062063751742244, -0.0027713484596461058, -0.0077484287321567535, -3.4570634852570947e-06, -0.001347944256849587, 0.0, -5.2569914259947836e-05, 0.0, 0.0, -0.003200054634362459, -0.00010895135346800089, -0.005376284942030907, -0.0001811817055568099, -0.01907329633831978, -1.9741480350494385, -0.20519842207431793, -0.01800607703626156, -0.010415837168693542, -0.026722552254796028, -0.018859826028347015, -0.6603842973709106, -0.00018010901112575084, -0.18785278499126434, -0.0006998711614869535, -1.102100133895874, -0.0001538873475510627, -0.013712726533412933, -0.0008395960903726518, -0.0014265133067965508, -3.218599158572033e-05, -0.002157623879611492, -0.0510702058672905, -0.00018654513405635953, -0.5556014776229858, -0.23775388300418854, -0.0007943335804156959, -0.005876644514501095, -1.4305104514278355e-06, -4.172316494077677e-06, -0.5024828314781189, -0.3623853027820587, -0.009744693525135517, -1.5242974758148193], "finish_reason": "stop"}], "metrics": {"energy": 367.30684825515743, "energy_per_token": 3.6367014678728458, "time": 8.212086, "time_per_token": 0.08130778217821781}}
{"outputs": [{"text": "# Split text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Convert words to lowercase and remove stopwords and punctuation marks\n    words = [word.lower() for word in words if word.isalpha() and word.lower() not in STOPWORDS]\n\n    # Count frequency of each word\n    word_freq = Counter(words)\n\n    # Remove words with frequency 1\n    word_freq = {word: freq for word, freq in word_freq.items() if freq != 1}\n\n    return word_freq", "tokens": ["#", " Split", " text", " into", " words", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", " and", " remove", " stop", "words", " and", " punct", "uation", " marks", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", " if", " word", ".", "is", "alpha", "()", " and", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Remove", " words", " with", " frequency", " ", "1", "\n", "    ", "word", "_", "freq", " =", " {", "word", ":", " fre", "q", " for", " word", ",", " fre", "q", " in", " word", "_", "freq", ".", "items", "()", " if", " fre", "q", " ", "!", "=", " ", "1", "}", "\n", "\n", "    ", "return", " word", "_", "freq", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -1.7192671298980713, -0.04202400892972946, -0.03642084449529648, -0.6406687498092651, -0.0004433602443896234, -0.03359632194042206, -0.004126961808651686, -1.2265232801437378, -1.156323378381785e-05, -0.09009738266468048, -1.4305104514278355e-06, -0.016376139596104622, -0.0004599228559527546, -0.03677148371934891, -0.06860735267400742, -0.10661129653453827, -0.00451545137912035, -0.002854204038158059, -5.722029527532868e-06, -0.00011002412065863609, -7.152531907195225e-06, -0.00249610492028296, -0.23640947043895721, -0.0177932009100914, -0.11175794154405594, -0.000161038784426637, -0.0008468617452308536, -0.06123826280236244, -0.3096607029438019, -0.0006096888100728393, -0.00033087024348787963, -0.004462166223675013, -1.4576611518859863, -0.07422712445259094, -0.5578543543815613, -0.02937357872724533, -1.1676162481307983, -0.06914536654949188, -0.004784207791090012, -0.4508115351200104, -0.006117666140198708, -0.0002232540718978271, -0.5679411292076111, -0.025457678362727165, -0.00954575464129448, -0.09049732238054276, -0.022999314591288567, -0.0007273888913914561, -1.2397689715726301e-05, -0.017033707350492477, -7.510157047363464e-06, -2.1934269170742482e-05, -8.95221673999913e-05, -0.01144097838550806, -0.03465268015861511, -0.08936929702758789, -2.455399513244629, -0.0004587313160300255, -0.0002954761730507016, -0.0071830833330750465, -0.015128514729440212, -0.8067169189453125, -0.0009135602158494294, -0.00018523407925385982, -0.00039033422945067286, -2.90866428258596e-05, -0.001278655487112701, 0.0, -2.455681169521995e-05, 0.0, -1.1920928244535389e-07, -0.009264691732823849, -0.0005355831235647202, -0.007125087082386017, -0.00015746307326480746, -0.01373353973031044, -0.13556109368801117, -2.2579190731048584, -0.018402907997369766, -0.1439875066280365, -0.011127321980893612, -0.14504024386405945, -0.00017653337272349745, -0.1030271127820015, -0.00046826363541185856, -0.8078933358192444, -0.011302019469439983, -0.042802225798368454, -0.0008741371566429734, -0.0030410494655370712, -2.3364747903542593e-05, -0.006257110275328159, -0.028242556378245354, -0.00015078838623594493, -0.8872416019439697, -1.9451186656951904, -0.34019872546195984, -0.23395195603370667, -0.1610693335533142, -0.41829347610473633, -0.015622141771018505, -0.10267281532287598, -0.0006417360855266452, -0.19387345016002655, -1.6212332411669195e-05, -0.000758955895435065, -0.0052339909598231316, -0.013821722939610481, -0.13077369332313538, -0.0005558376433327794, -0.0739089772105217, -2.3841855067985307e-07, -0.00016699827392585576, -0.00015436411194968969, -1.7881377516459906e-06, -0.0004966217675246298, 0.0, -8.201262971851975e-05, -0.000409161759307608, -2.861018856492592e-06, -4.6491513785440475e-06, -1.4066597032069694e-05, -0.0006910558440722525, -0.00019047829846385866, -3.540453326422721e-05, -0.0032215621322393417, -5.960462772236497e-07, -2.6442394256591797, -1.6689286894688848e-06, -4.887569048150908e-06, -0.000331704446580261, -0.0013584204716607928, -0.0005613181856460869, -0.00036221143091097474, -0.0058407350443303585, -8.523101132595912e-05, -0.07074679434299469, -0.5250641107559204, -3.3378546504536644e-06, -0.0001935771433636546, -1.064091682434082, -5.125986263010418e-06, -3.4570634852570947e-06, -9.775113539944869e-06, -5.483612312673358e-06, -0.10730606317520142], "finish_reason": "stop"}], "metrics": {"energy": 488.1122339153287, "energy_per_token": 3.298055634563032, "time": 12.197861, "time_per_token": 0.08241797972972972}}
{"outputs": [{"text": "# Tokenize the input text into words\n    words = nltk.word_tokenize(text)\n\n    # Convert the words to lowercase\n    lower_words = [word.lower() for word in words]\n\n    # Remove punctuation marks\n    cleaned_words = [re.sub(r'[^\\w\\s]', '', word) for word in lower_words]\n\n    # Remove common stopwords\n    filtered_words = [word for word in cleaned_words if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counter = Counter(filtered_words)\n\n    # Return the frequency dictionary\n    return dict(word_counter)", "tokens": ["#", " Token", "ize", " the", " input", " text", " into", " words", "\n", "    ", "words", " =", " n", "lt", "k", ".", "word", "_", "token", "ize", "(", "text", ")", "\n", "\n", "    ", "#", " Convert", " the", " words", " to", " lower", "case", "\n", "    ", "lower", "_", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", "\n", "    ", "cleaned", "_", "words", " =", " [", "re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " word", ")", " for", " word", " in", " lower", "_", "words", "]", "\n", "\n", "    ", "#", " Remove", " common", " stop", "words", "\n", "    ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " cleaned", "_", "words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counter", " =", " Counter", "(", "filtered", "_", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " frequency", " dictionary", "\n", "    ", "return", " dict", "(", "word", "_", "counter", ")", "\n", "\n", "print"], "logprobs": [-0.6367194056510925, -3.006519317626953, -0.10452476143836975, -0.2496051788330078, -2.3855748176574707, -0.06349878758192062, -0.5047343373298645, -0.09525275975465775, -0.14736421406269073, -0.0007870675181038678, -0.07235031574964523, -0.004436056595295668, -0.6082587242126465, -5.006777428206988e-06, -9.417489309271332e-06, -1.2397689715726301e-05, -0.11436144262552261, -0.002634627977386117, -6.735097849741578e-05, -1.0728830375228426e-06, -0.00020823694649152458, -0.0022890574764460325, -0.1319568157196045, -0.0004397855664137751, -0.12721486389636993, -0.00015114595589693636, -0.0016455217264592648, -0.04740576446056366, -2.3705320358276367, -0.009511983953416348, -0.004182045813649893, -0.0005746620590798557, -0.004813986364752054, -0.8922745585441589, -4.160317621426657e-05, -2.932285785675049, -0.027811121195554733, -0.047719839960336685, -0.0003355178632773459, -0.01503199152648449, -0.1979503482580185, -0.0009319015080109239, -0.00027926836628466845, -7.271740287251305e-06, -0.0008507922757416964, -8.106198947643861e-06, -6.079655122448457e-06, -9.846202738117427e-05, -0.007538679987192154, -9.238292841473594e-05, -0.00428128382191062, -9.560128091834486e-05, -0.0007294139941222966, -0.03062264248728752, -0.1911499947309494, -0.002430819906294346, -0.09943261742591858, -1.3603804111480713, -0.0001212284987559542, -2.0258727073669434, -0.010507027618587017, -0.009780817665159702, -0.0005136600811965764, -0.029588518664240837, -0.43878188729286194, -9.894321920000948e-06, -0.0024115548003464937, -0.13363856077194214, -0.0030824074055999517, -0.16171278059482574, -0.0033696084283292294, -0.0055086007341742516, -1.5616295058862306e-05, -0.03181969001889229, -9.16677454370074e-05, -0.00753359217196703, -0.00018451895448379219, -7.510157047363464e-06, -0.010821939446032047, -7.033323527139146e-06, -0.004980182740837336, -0.004788597580045462, -0.008015371859073639, -5.8412379075889476e-06, -6.6756979322235566e-06, -0.0007410878897644579, -4.768370445162873e-07, 0.0, -0.004887419752776623, -0.0010706413304433227, -0.002943827537819743, -0.00010489867418073118, -0.00025293012731708586, -0.02163558267056942, -0.6904247403144836, -0.005078630056232214, -0.015299110673367977, -0.13565924763679504, -9.178694017464295e-05, -0.30403026938438416, -0.0014160377904772758, -0.0006635371246375144, -7.676783570786938e-05, -0.0018964892951771617, -0.0181321669369936, -0.001192097319290042, -3.576272320060525e-06, -2.7894584491150454e-05, -0.001674560597166419, -4.768370445162873e-07, -8.344646857949556e-07, -0.004731055814772844, -0.005174221470952034, -0.1450144648551941, -9.894321920000948e-06, -0.0005942009738646448, 0.0, -2.95634672511369e-05, 0.0, 0.0, -0.022588806226849556, -0.0002795067266561091, -0.0018384236609563231, -0.00015317220822907984, -0.0029674803372472525, -0.1425498127937317, -0.06203921139240265, -0.18557687103748322, -0.001353539526462555, -0.1663980782032013, -0.04921259731054306, -0.34611475467681885, -0.00012396997772157192, -0.09582895040512085, -0.00017629499780014157, -2.890733242034912, -0.00029881304362788796, -0.0012363893911242485, -0.0017782127251848578, -0.0008779485360719264, -1.1920922133867862e-06, -1.4305104514278355e-06, -4.410646579344757e-05, -0.0008973624208010733, -0.05396763235330582, -0.0001411338453181088, -0.33982470631599426, -0.6343393921852112, -0.04337244853377342, -1.9060311317443848, -0.23587845265865326, -0.022258341312408447, -0.0004932855372317135, -0.008861501701176167, -0.14163093268871307, -0.0005315321614034474, -0.0012181727215647697, -1.311301275563892e-06, -2.9802276912960224e-06, -0.5954992175102234, -0.3676195442676544, -0.008031336590647697, -3.163203477859497], "finish_reason": "stop"}], "metrics": {"energy": 555.3032914619448, "energy_per_token": 3.406768659275735, "time": 13.452249, "time_per_token": 0.08252913496932515}}
{"outputs": [{"text": "# Split the text into words, convert to lowercase, remove punctuation, and filter out stopwords\n    words = [re.sub(r'[^\\w\\s]', '', word.lower()) for word in text.split() if word.lower() not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "tokens": ["#", " Split", " the", " text", " into", " words", ",", " convert", " to", " lower", "case", ",", " remove", " punct", "uation", ",", " and", " filter", " out", " stop", "words", "\n", "    ", "words", " =", " [", "re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " word", ".", "lower", "())", " for", " word", " in", " text", ".", "split", "()", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -1.7182493209838867, -0.1874823421239853, -0.31517377495765686, -0.0003883084573317319, -0.004025808535516262, -0.05141245946288109, -0.5027861595153809, -0.04286538437008858, -0.0028740549460053444, -1.8691856861114502, -0.14065590500831604, -3.0604896545410156, -0.7808710932731628, -0.10762917250394821, -0.04129711538553238, -0.05992067605257034, -0.0007357274298556149, -0.04135487973690033, -0.0053426106460392475, -0.8218045830726624, -0.8189845085144043, -3.85038583772257e-05, -0.0012190061388537288, -0.1112101599574089, -0.00286846817471087, -0.5929366946220398, -0.004445669706910849, -0.010355078615248203, -1.2874520507466514e-05, -0.07936599105596542, -9.762764238985255e-05, -0.012609045952558517, -0.00038675934774801135, -4.291525328881107e-06, -0.01198507659137249, -5.245195097813848e-06, -0.0875111073255539, -0.542667031288147, -0.005823313258588314, -0.004427986219525337, -0.08453577756881714, -0.00014590153296012431, -0.00028951745480298996, -0.11750950664281845, -0.00016509123088326305, -0.0027184458449482918, -0.009571848437190056, -0.15182161331176758, -0.06553965061903, -0.06474106013774872, -0.002734614070504904, -0.0003632839070633054, -0.0014369887067005038, -5.8412379075889476e-06, -0.0012856797548010945, 0.0, -1.811964830267243e-05, 0.0, 0.0, -0.026986682787537575, -0.0009015309624373913, -0.18511691689491272, -0.00029118589009158313, -0.004936056211590767, -0.1083645224571228, -0.061966605484485626, -0.22549673914909363, -0.0012493670219555497, -0.04478849843144417, -0.019034583121538162, -0.7583882212638855, -0.00013374387344811112, -0.1463453322649002, -0.0003885467885993421, -0.9967828392982483, -0.0001538873475510627, -0.017310719937086105, -0.0012998473830521107, -0.0042257304303348064, -5.602679812000133e-05, -0.0022264947183430195, -0.030705882236361504, -0.0001778444420779124, -0.8254117369651794, -0.17643623054027557, -0.0013455632142722607, -0.0062727476470172405, -1.6689286894688848e-06, -3.2186455882765586e-06, -1.1930010318756104, -2.50339189733495e-06, -1.311301275563892e-06, -5.602820692729438e-06, -3.933898824470816e-06, -0.16223876178264618], "finish_reason": "stop"}], "metrics": {"energy": 378.50240766334514, "energy_per_token": 3.7475485907261894, "time": 8.208354, "time_per_token": 0.08127083168316832}}
{"outputs": [{"text": "# Convert text to lowercase and tokenize it into words\n    words = text.lower().split()\n\n    # Remove punctuation and stopwords from words\n    words = [word.strip(\",.;:-!?()[]'\") for word in words]\n    words = [word for word in words if word and word not in STOPWORDS]\n\n    # Count the frequency of each word using Counter\n    word_freq = Counter(words)\n\n    return word_freq", "tokens": ["#", " Convert", " text", " to", " lower", "case", " and", " token", "ize", " it", " into", " words", "\n", "    ", "words", " =", " text", ".", "lower", "()", ".", "split", "()", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " and", " stop", "words", " from", " words", "\n", "    ", "words", " =", " [", "word", ".", "strip", "(", "\"", ",", ".", ";", ":-", "!", "?", "()", "[]", "'", "\"", ")", " for", " word", " in", " words", "]", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " and", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", " using", " Counter", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " word", "_", "freq", "\n", "\n", "if"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -1.0355935096740723, -0.016039391979575157, -0.009474197402596474, -0.007764279376715422, -0.9834364652633667, -1.9154582023620605, -0.00037329382030293345, -1.3599226474761963, -0.21112000942230225, -0.04879147931933403, -0.05621533468365669, -0.0007979070069268346, -0.08823443204164505, -0.0029840010683983564, -1.4518141746520996, -0.00011216964776394889, -0.0026737437583506107, -3.158996332786046e-05, -0.0029576150700449944, -0.019114229828119278, -0.00774369714781642, -0.0018891122890636325, -0.05050412937998772, -0.00020716428116429597, -0.0038036394398659468, -0.12163924425840378, -0.30252349376678467, -0.0009467886411584914, -1.3541837930679321, -0.46567502617836, -0.01310627069324255, -0.5299946665763855, -0.5757161974906921, -0.039963968098163605, -0.0003321811091154814, -0.41020095348358154, -0.010006147436797619, -0.002039734972640872, -0.6536991596221924, -0.14294832944869995, -0.03183954954147339, -0.13902463018894196, -0.06595054268836975, -2.8709022998809814, -0.20610351860523224, -0.47562047839164734, -3.5825040340423584, -1.7049620151519775, -0.08060741424560547, -1.8690749406814575, -1.8214354515075684, -1.7249476909637451, -0.3849954903125763, -0.009900039993226528, -0.007118221838027239, -2.6940935640595853e-05, -1.7881233361549675e-05, -0.00019727191829588264, -0.4323279857635498, -0.03037080354988575, -0.0022902467753738165, -0.029265569522976875, -0.0014250847743824124, -0.0006430465145967901, -0.002203657291829586, -0.011027463711798191, -1.645074735279195e-05, -9.059865078597795e-06, -0.0001037067049765028, -0.0005820487276650965, -0.05208202451467514, -1.5603294372558594, -0.02567555382847786, -0.0684318095445633, -5.125986263010418e-06, -0.001328539103269577, 0.0, -3.0397906812140718e-05, -1.1920928244535389e-07, 0.0, -0.004462047480046749, -0.005062262061983347, -0.009339689277112484, -0.00012540031457319856, -0.00901001412421465, -0.17240774631500244, -0.4943268299102783, -0.08105041831731796, -0.0003833036171272397, -0.11965926736593246, -0.04763323441147804, -1.42435622215271, -0.0866624265909195, -0.12922342121601105, -0.00017963226127903908, -0.26291289925575256, -0.0005625095800496638, -0.8459746241569519, -0.016857312992215157, -0.02929624728858471, -0.0014366315444931388, -0.01138028223067522, -0.0001012035645544529, -0.0030364145059138536, -0.029793577268719673, -0.0001823735801735893, -0.7683177590370178, -1.3758678436279297, -5.245195097813848e-06, -6.603976362384856e-05, -0.5322290062904358, -0.010622624307870865, -1.0808403491973877], "finish_reason": "stop"}], "metrics": {"energy": 426.9854043941498, "energy_per_token": 3.7129165599491287, "time": 9.473915, "time_per_token": 0.08238186956521738}}
{"outputs": [{"text": "# Split the text into words\n    words = text.split()\n\n    # Convert words to lowercase, remove punctuation, and remove stopwords\n    cleaned_words = [\n        word.lower() for word in words if word.isalpha() and word.lower() not in STOPWORDS\n    ]\n\n    # Count the frequency of each word\n    word_count = Counter(cleaned_words)\n\n    # Return the dictionary of word frequencies\n    return dict(word_count)", "tokens": ["#", " Split", " the", " text", " into", " words", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", ",", " remove", " punct", "uation", ",", " and", " remove", " stop", "words", "\n", "    ", "cleaned", "_", "words", " =", " [", "\n", "        ", "word", ".", "lower", "()", " for", " word", " in", " words", " if", " word", ".", "is", "alpha", "()", " and", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "\n", "    ", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "count", " =", " Counter", "(", "cleaned", "_", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " dictionary", " of", " word", " frequencies", "\n", "    ", "return", " dict", "(", "word", "_", "count", ")", "\n", "\n", "def"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -0.5564355254173279, -0.000417741306591779, -0.024593262001872063, -0.005275377072393894, -0.7249822020530701, -9.083335316972807e-05, -0.11840273439884186, -0.009276502765715122, -0.0008355463505722582, -0.10348910093307495, -0.00012659224739763886, -0.0018297373317182064, -0.05917375907301903, -0.3062896132469177, -0.00046492734691128135, -0.00024685196694917977, -0.0028775022365152836, -1.7296148538589478, -0.022213570773601532, -0.02786201797425747, -0.0018760239472612739, -1.0690970420837402, -0.013694853521883488, -0.4373548924922943, -0.3328757584095001, -0.02910926565527916, -0.019386574625968933, -0.00027247529942542315, -0.9666640758514404, -0.004295646212995052, -0.001544950413517654, -0.00015233787416946143, -0.5066091418266296, -1.3612744808197021, -0.0051143295131623745, -1.3923921585083008, -0.03205742686986923, -0.02747553586959839, -8.880697714630514e-05, -1.6660250425338745, -7.116541382856667e-05, -0.000144709600135684, -0.003920845687389374, -0.32311058044433594, -0.13379989564418793, -0.06747518479824066, -1.698927879333496, -0.0005694198189303279, -0.000311802898067981, -0.010043088346719742, -0.01871195062994957, -0.3116152584552765, -0.0002848696312867105, -0.0001736728590913117, -0.0003164505760651082, -2.455681169521995e-05, -0.0007845661020837724, 0.0, -3.40932747349143e-05, -1.1920928244535389e-07, 0.0, -0.11870037019252777, -0.001723829424008727, -6.9141146923357155e-06, -0.0007026110542938113, -0.0068824137561023235, -0.00013267113536130637, -0.009624389931559563, -0.14948377013206482, -0.11377434432506561, -0.0945853665471077, -0.0010202685371041298, -0.07698360085487366, -0.040783390402793884, -0.3140489161014557, -0.00017426878912374377, -0.061893660575151443, -5.125868119648658e-05, -2.9948160648345947, -0.006611259654164314, -0.01785549893975258, -0.001191144809126854, -0.004842933267354965, -4.768370445162873e-07, -1.1920922133867862e-06, -3.9219088648678735e-05, -0.0012690117582678795, -0.029489098116755486, -0.00014983485743869096, -0.7421734929084778, -0.8191928267478943, -0.034367069602012634, -0.9452528357505798, -1.17166006565094, -0.22918519377708435, -0.10616050660610199, -0.0035747692454606295, -0.0004520586517173797, -0.004405436106026173, -0.2195913940668106, -0.0009965697536244988, -0.0040121544152498245, -2.622600959512056e-06, -5.245195097813848e-06, -0.31376978754997253, -0.22822609543800354, -0.008975044824182987, -1.3319940567016602], "finish_reason": "stop"}], "metrics": {"energy": 391.28050910758975, "energy_per_token": 3.4322851676104364, "time": 9.25342, "time_per_token": 0.08117035087719299}}
{"outputs": [{"text": "# Convert text to lowercase and split into words\n    words = text.lower().split()\n    # Remove non-alphanumeric characters and stopwords\n    cleaned_words = [re.sub(r'\\W+', '', word) for word in words if word not in STOPWORDS]\n    # Count word frequencies using Counter\n    word_counts = Counter(cleaned_words)\n    # Remove empty keys\n    word_counts = {k: v for k, v in word_counts.items() if k}\n    return word_counts", "tokens": ["#", " Convert", " text", " to", " lower", "case", " and", " split", " into", " words", "\n", "    ", "words", " =", " text", ".", "lower", "()", ".", "split", "()", "\n", "    ", "#", " Remove", " non", "-", "al", "phan", "umeric", " characters", " and", " stop", "words", "\n", "    ", "cleaned", "_", "words", " =", " [", "re", ".", "sub", "(", "r", "'\\", "W", "+'", ",", " ''", ",", " word", ")", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "#", " Count", " word", " frequencies", " using", " Counter", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "cleaned", "_", "words", ")", "\n", "    ", "#", " Remove", " empty", " keys", "\n", "    ", "word", "_", "counts", " =", " {", "k", ":", " v", " for", " k", ",", " v", " in", " word", "_", "counts", ".", "items", "()", " if", " k", "}", "\n", "    ", "return", " word", "_", "counts", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -1.0355935096740723, -0.016039391979575157, -0.009474197402596474, -0.007764279376715422, -0.9834364652633667, -0.35324427485466003, -0.07040031254291534, -0.03703756630420685, -0.02690649963915348, -0.0006873629172332585, -0.05061417445540428, -0.004119363613426685, -0.37849918007850647, -4.768258077092469e-05, -0.003404062008485198, -2.2411095415009186e-05, -0.0006214833119884133, -0.005921677220612764, -0.0036770368460565805, -0.0009307105210609734, -2.6259965896606445, -0.0944284200668335, -0.066496342420578, -2.9335453510284424, -0.001456510741263628, -0.7507161498069763, -0.0003275334893260151, -0.0001454247540095821, -0.01170116476714611, -0.48193880915641785, -0.418702095746994, -0.012170341797173023, -0.311617374420166, -0.0007606235449202359, -2.2417807579040527, -0.024300692602992058, -0.002402041107416153, -8.880697714630514e-05, -0.027581417933106422, -0.14448150992393494, -6.318072337307967e-06, -0.0006753309280611575, -0.4757654666900635, -0.008140480145812035, -0.30521708726882935, -8.105902816168964e-05, -0.04548540338873863, -4.291525328881107e-06, -0.003824065439403057, -3.290122185717337e-05, -0.1321013867855072, -0.004443770740181208, -0.029370684176683426, -7.939023635117337e-05, -0.000192504478036426, -0.00018726025882642716, -0.046919964253902435, -0.020771358162164688, -0.012846567668020725, -1.1444026313256472e-05, -0.001116844010539353, 0.0, -2.6225699912174605e-05, 0.0, 0.0, -0.039784811437129974, -0.0005623904871754348, -0.026675311848521233, -0.0346638523042202, -0.08781512826681137, -1.1160999536514282, -0.43859708309173584, -1.2035107612609863, -0.03555044159293175, -0.18894897401332855, -0.00011359999916749075, -0.08787540346384048, -0.0002859421947505325, -1.275824785232544, -0.00015758226800244302, -0.014722866006195545, -0.0006629414856433868, -0.0011612584348767996, -3.2186455882765586e-06, -2.7418097943154862e-06, -6.603976362384856e-05, -0.0008912881603464484, -0.06222080811858177, -0.34073516726493835, -1.9461795091629028, -0.37172940373420715, -0.9360197186470032, -1.4730654954910278, -0.0003763920976780355, -0.24233683943748474, -1.9550132492440753e-05, -0.010969454422593117, -0.018855029717087746, -0.014049200341105461, -0.3802177906036377, -0.00046790618216618896, -0.025190819054841995, -0.00011181206355104223, -0.0005716835148632526, -4.172316494077677e-06, -0.00015484087634831667, -7.867782187531702e-06, -0.00037055302527733147, -4.768370445162873e-07, -2.3841855067985307e-07, -0.00010287232726113871, -0.0011884062550961971, -5.507317473529838e-05, -6.794906312279636e-06, -0.005122038535773754, -0.04777655377984047, -0.00031895318534225225, -0.06428752839565277, -0.3327053487300873, -0.3014180660247803, -1.311301275563892e-06, -5.722029527532868e-06, -1.0329625606536865, -6.794906312279636e-06, -1.9073468138230965e-06, -4.887569048150908e-06, -9.059865078597795e-06, -0.13015419244766235], "finish_reason": "stop"}], "metrics": {"energy": 433.6726373672485, "energy_per_token": 3.33594336436345, "time": 10.733179, "time_per_token": 0.08256291538461538}}
{"outputs": [{"text": "# Split text into words\n    words = text.split()\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation marks and common stopwords\n    words = [word for word in words if word not in STOPWORDS and re.match(r'\\w+', word)]\n\n    # Calculate word frequencies\n    word_freq = Counter(words)\n\n    return dict(word_freq)", "tokens": ["#", " Split", " text", " into", " words", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", " and", " common", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " re", ".", "match", "(", "r", "'\\", "w", "+'", ",", " word", ")]", "\n", "\n", "    ", "#", " Calculate", " word", " frequencies", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "freq", ")", "\n", "\n", "#"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -1.7192671298980713, -0.04202400892972946, -0.03642084449529648, -0.6406687498092651, -0.0004433602443896234, -0.03359632194042206, -0.004126961808651686, -0.5285977125167847, -9.285972191719338e-05, -0.11726813018321991, -0.009940996766090393, -0.0008700875914655626, -0.10790830850601196, -0.00012683063687290996, -0.0018891122890636325, -0.04952758178114891, -0.3661816716194153, -0.0005243833875283599, -0.0002632986579556018, -0.003918589558452368, -0.4130735993385315, -5.209310256759636e-05, -0.10911107808351517, -0.017391208559274673, -0.0013983005192130804, -0.05950281023979187, -0.00014351768186315894, -0.00022456508304458112, -5.364403477869928e-06, -0.0003978414461016655, -6.437280717364047e-06, -1.311301275563892e-06, -2.634490556374658e-05, -0.001293061301112175, -4.9232225137529895e-05, -0.0020404488313943148, -8.105902816168964e-05, -0.00033206192892976105, -0.014686920680105686, -0.035987403243780136, -0.0016367146745324135, -0.36251240968704224, -0.9384746551513672, -0.7623184323310852, -0.0044521973468363285, -0.006575495470315218, -0.08200392127037048, -0.000388665939681232, -0.36475756764411926, -0.003489478724077344, -0.0010936238104477525, -0.34590792655944824, -0.3108825385570526, -6.437280717364047e-06, -6.878139538457617e-05, -0.00012444675667211413, -0.012619758024811745, -0.14743375778198242, -0.11321000754833221, -2.2411095415009186e-05, -0.12488898634910583, -2.3841855067985307e-07, -5.018585216021165e-05, 0.0, 0.0, -0.0966721624135971, -0.3090945780277252, -1.597391747054644e-05, -0.06050433963537216, -0.03770281746983528, -0.02103683166205883, -0.9704448580741882, -0.10560514777898788, -0.009314651601016521, -8.22540732769994e-06, -0.0004068977141287178, -0.024550573900341988, -0.0008880723617039621, -0.0034104774240404367, -0.00010084597306558862, -0.003425327828153968, -1.6628460884094238, -0.9826462268829346, -0.9211418032646179, -0.16836337745189667, -0.0002101439022226259, -0.14862056076526642, -0.0005600076401606202, -0.8686051368713379, -0.05067582055926323, -0.059881266206502914, -0.0011711412807926536, -0.00530905369669199, -3.671578815556131e-05, -0.0030311851296573877, -0.024323031306266785, -0.0001839230244513601, -0.4502425789833069, -0.3752216398715973, -0.0006260104128159583, -0.003241881262511015, -5.602820692729438e-06, -8.702239938429557e-06, -0.3991376757621765, -0.2622097134590149, -0.008585329167544842, -1.6485742330551147], "finish_reason": "stop"}], "metrics": {"energy": 403.2648269815445, "energy_per_token": 3.699677311757289, "time": 8.837507, "time_per_token": 0.08107804587155963}}
{"outputs": [{"text": "# Convert text to lowercase, remove punctuation, and remove stopwords\n    cleaned_text = ' '.join(re.findall(r'\\b[a-zA-Z]+\\b', text.lower()))\n    words = [word for word in cleaned_text.split() if word not in STOPWORDS]\n\n    # Count word frequencies using Counter\n    word_counts = Counter(words)\n\n    # Convert word_counts to a dictionary and return it\n    return dict(word_counts)", "tokens": ["#", " Convert", " text", " to", " lower", "case", ",", " remove", " punct", "uation", ",", " and", " remove", " stop", "words", "\n", "    ", "cleaned", "_", "text", " =", " '", " '", ".", "join", "(", "re", ".", "find", "all", "(", "r", "'\\", "b", "[", "a", "-", "z", "A", "-", "Z", "]", "+\\", "b", "'", ",", " text", ".", "lower", "()))", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " cleaned", "_", "text", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " word", " frequencies", " using", " Counter", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Convert", " word", "_", "counts", " to", " a", " dictionary", " and", " return", " it", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")", "\n", "\n", "if"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -1.0355935096740723, -0.016039391979575157, -0.009474197402596474, -0.007764279376715422, -1.4326094388961792, -0.7531691193580627, -0.058210596442222595, -0.002312130993232131, -0.8072656393051147, -0.2201920598745346, -1.4860867261886597, -0.7536669969558716, -0.042188361287117004, -0.06612283736467361, -0.0010269373888149858, -2.5625457763671875, -0.02183399721980095, -0.37604281306266785, -0.0014390123542398214, -2.5792062282562256, -0.0001389883691444993, -0.00010918975021922961, -4.076874756719917e-05, -0.6892153024673462, -0.7076886892318726, -0.0001517419150331989, -0.3984278738498688, 0.0, -0.0039023214485496283, -0.002293814904987812, -0.014318227767944336, -0.023710986599326134, -0.07415894418954849, -0.5291951894760132, -7.271740287251305e-06, -4.529942543740617e-06, -0.5350235104560852, -6.83045873302035e-05, -0.013304385356605053, -0.3413253426551819, -0.0006621075444854796, -4.172316494077677e-06, -0.0001530530134914443, -1.7404405298293568e-05, -0.07502061128616333, -0.07309199869632721, -0.0020992164500057697, -0.03037346340715885, -0.11469727754592896, -0.09783943742513657, -1.620429277420044, -0.014054255560040474, -1.5590778589248657, -0.0639372393488884, -0.0019480077316984534, -1.645074735279195e-05, -2.098061486321967e-05, -0.10928090661764145, -2.3841830625315197e-06, -4.172316494077677e-06, -0.0002087136817863211, -0.0010605193674564362, -0.01329226978123188, -0.00422620540484786, -0.0024328415747731924, -0.018159208819270134, -3.933898824470816e-06, -0.0022021110635250807, 0.0, -9.321732068201527e-05, 0.0, 0.0, -0.005000821780413389, -0.00259420252405107, -0.1427346169948578, -0.0003094194398727268, -0.02354368194937706, -0.09336259216070175, -1.6239575147628784, -0.45212414860725403, -0.9000486135482788, -0.10289116948843002, -0.1324118971824646, -0.00019369633810129017, -0.09343783557415009, -0.0003631647559814155, -1.2714157104492188, -0.00018523407925385982, -0.02589082531630993, -0.0008142255246639252, -0.0017526278970763087, -5.7338023907504976e-05, -0.0017203782917931676, -0.06467311829328537, -0.00013028726971242577, -0.32050031423568726, -1.3218321800231934, -1.553501009941101, -0.07891574501991272, -0.0047233435325324535, -0.06029986962676048, -0.08722053468227386, -0.10947592556476593, -1.640242338180542, -0.0809403732419014, -1.1411361694335938, -0.004376714117825031, -0.00014149141497910023, -0.3867887556552887, -0.012725930660963058, -0.00017271934484597296, -0.0007874249131418765, -5.960462772236497e-07, -1.5497195136049413e-06, -0.36387959122657776, -0.37553465366363525, -0.009188862517476082, -0.9296751022338867], "finish_reason": "stop"}], "metrics": {"energy": 394.56909670448294, "energy_per_token": 3.288075805870691, "time": 9.878057, "time_per_token": 0.08231714166666666}}
{"outputs": [{"text": "# Convert the text to lowercase\n    lower_text = text.lower()\n\n    # Remove punctuation marks and common stopwords\n    tokens = [token for token in nltk.word_tokenize(lower_text) if token not in STOPWORDS and re.match('[a-z]+$', token)]\n\n    # Count the frequency of each word using Counter\n    word_frequencies = Counter(tokens)\n\n    # Return the frequency of each word\n    return dict(word_frequencies)", "tokens": ["#", " Convert", " the", " text", " to", " lower", "case", "\n", "    ", "lower", "_", "text", " =", " text", ".", "lower", "()", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", " and", " common", " stop", "words", "\n", "    ", "tokens", " =", " [", "token", " for", " token", " in", " n", "lt", "k", ".", "word", "_", "token", "ize", "(", "lower", "_", "text", ")", " if", " token", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " re", ".", "match", "('", "[", "a", "-", "z", "]+", "$'", ",", " token", ")]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", " using", " Counter", "\n", "    ", "word", "_", "f", "requ", "encies", " =", " Counter", "(", "tokens", ")", "\n", "\n", "    ", "#", " Return", " the", " frequency", " of", " each", " word", "\n", "    ", "return", " dict", "(", "word", "_", "f", "requ", "encies", ")", "\n", "\n", "if"], "logprobs": [-0.6367194056510925, -1.3988704681396484, -0.9547982811927795, -0.11385700851678848, -0.04777314513921738, -0.005025967489928007, -0.0036655159201472998, -0.7430130243301392, -0.0005106813623569906, -2.476160764694214, -0.11860391497612, -0.22202636301517487, -0.001653971616178751, -0.03166874870657921, -0.00017677174764685333, -0.0019374187104403973, -4.31528314948082e-05, -0.0022280411794781685, -0.21816721558570862, -0.00022825974156148732, -0.0012378181563690305, -0.7290846705436707, -0.18741166591644287, -0.003367826109752059, -0.4737507998943329, -1.0615311861038208, -0.6021010279655457, -0.00659337779507041, -0.009896262548863888, -0.3947938084602356, -0.0004058252670802176, -3.0490059852600098, -0.009224887937307358, -1.3015385866165161, -1.2352421283721924, -0.08021758496761322, -0.0005728749092668295, -0.0002535260282456875, -1.7098959684371948, -2.264974000354414e-06, -4.0531076592742465e-06, -1.6569954823353328e-05, -0.028254956007003784, -0.01857142336666584, -0.0025613855104893446, 0.0, -0.00013004888023715466, -0.012816556729376316, -1.5497195136049413e-06, -7.033323527139146e-06, -0.0034451675601303577, -0.097287118434906, -0.06913857907056808, -0.3518100678920746, -4.362964682513848e-05, -0.16124852001667023, -1.1920928244535389e-07, -4.136476854910143e-05, 0.0, 0.0, -0.4060043394565582, -0.6747825145721436, -2.1576648578047752e-05, -0.09455478191375732, -2.607949733734131, -0.835331380367279, -0.24517638981342316, -1.6569954823353328e-05, -5.817244164063595e-05, -0.35974234342575073, -1.1420657634735107, -2.5152843591058627e-05, -0.015267529524862766, -0.008998082019388676, -0.0012865131720900536, -0.019530611112713814, -0.00022182388056535274, -0.014824469573795795, -0.22513246536254883, -0.06485357135534286, -0.14660069346427917, -0.00312673463486135, -0.19426921010017395, -0.12276194244623184, -2.7436110973358154, -0.15944014489650726, -0.1544526368379593, -0.00020680672605521977, -0.5017499327659607, -0.0023529245518147945, -2.881124496459961, -7.891343557275832e-05, -0.0024808840826153755, -0.0009520289022475481, -0.0774482861161232, -0.00169955228921026, -0.0051649706438183784, -0.000161038784426637, -0.003102135146036744, -0.025099096819758415, -0.00021181246847845614, -0.5984609723091125, -0.858198881149292, -0.0382237508893013, -2.395460605621338, -1.4637067317962646, -0.612917959690094, -0.07641853392124176, -0.4999960660934448, -0.0003828269545920193, -0.005660575814545155, -0.43111661076545715, -0.0015656605828553438, -0.005657731089740992, -3.6954811548639555e-06, -2.145764938177308e-06, 0.0, -1.9073468138230965e-06, -0.356042742729187, -0.2779122292995453, -0.007290663197636604, -1.0172548294067383], "finish_reason": "stop"}], "metrics": {"energy": 437.5776739692687, "energy_per_token": 3.5867022456497435, "time": 10.104165, "time_per_token": 0.08282102459016394}}
{"outputs": [{"text": "text = re.sub(r'[^\\w\\s]', '', text)\n    words = [word for word in re.split(r'\\s+', text) if word not in STOPWORDS]\n    return Counter(words)", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " re", ".", "split", "(", "r", "'\\", "s", "+'", ",", " text", ")", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "return", " Counter", "(", "words", ")"], "logprobs": [-2.5938384532928467, -0.07707454264163971, -0.920393168926239, -3.0278701160568744e-05, -0.022211356088519096, -0.06584161520004272, -0.016709959134459496, -0.3275907039642334, -0.023076318204402924, -0.01650102809071541, -0.0002978596603497863, -0.005282728932797909, -2.634490556374658e-05, -0.020928852260112762, -0.00040737437666393816, -3.3854863431770355e-05, -0.13856714963912964, -4.1960789531003684e-05, -0.004314163234084845, -0.2918495237827301, -0.8450430631637573, -0.02591254748404026, -0.2058825045824051, -0.0032001733779907227, -0.7074705958366394, -0.08490980416536331, -0.9676147699356079, -0.00011073929636040702, -9.083335316972807e-05, -1.6214418411254883, -6.437280717364047e-06, -0.609062910079956, -0.11523061245679855, -0.014229735359549522, -0.059746742248535156, -1.6907212734222412, -0.25930964946746826, -4.708655978902243e-05, -0.004866066388785839, -0.3988278806209564, -0.04429013282060623, -0.047862011939287186, -1.439936876296997, -2.8013790142722428e-05, -0.0022467151284217834, 0.0, -3.790783375734463e-05, 0.0, -1.1920928244535389e-07, -0.10141585022211075, -0.004046586342155933, -0.06444457918405533, -1.7027654647827148, -0.44630298018455505, -0.06362295895814896, -0.10045599192380905, -0.3438103199005127], "finish_reason": "stop"}], "metrics": {"energy": 225.19891410827643, "energy_per_token": 3.9508581422504636, "time": 4.6400013, "time_per_token": 0.08140353157894736}}
{"outputs": [{"text": "# Remove punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Convert to lowercase, split into words, and remove stopwords\n    words = [word for word in text.lower().split() if word not in STOPWORDS]\n\n    # Count word frequencies\n    word_count = Counter(words)\n\n    return dict(word_count)", "tokens": ["#", " Remove", " punct", "uation", " marks", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Convert", " to", " lower", "case", ",", " split", " into", " words", ",", " and", " remove", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " text", ".", "lower", "()", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " word", " frequencies", "\n", "    ", "word", "_", "count", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "count", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -2.1665802001953125, -0.6233093738555908, -0.004242230672389269, -1.856992244720459, -1.2270680665969849, -0.0007329876534640789, -0.23691143095493317, -0.028451019898056984, -0.009866044856607914, -2.145764938177308e-06, -0.0006030171643942595, -0.03146291896700859, -0.0035343817435204983, -0.08087188005447388, -0.0023029730655252934, -0.005409602541476488, -2.372236667724792e-05, -0.000493762141559273, -1.0967194612021558e-05, -0.007998106069862843, -9.083335316972807e-05, -6.6756979322235566e-06, -0.06993322819471359, -3.3378044463461265e-05, -0.0027541108429431915, -0.060452159494161606, -0.00589074706658721, -0.20532822608947754, -0.0002859421947505325, -0.0033135293051600456, -0.4083593785762787, -0.3097323477268219, -0.0013165149139240384, -0.0033475097734481096, -2.8946118354797363, -0.4153144061565399, -0.1221148744225502, -0.0314006544649601, -0.21664896607398987, -0.3374716341495514, -0.133010596036911, -0.21115456521511078, -0.02629278413951397, -0.008556254208087921, -0.00013445904187392443, -0.021082937717437744, -0.004050979390740395, -0.05607175454497337, -0.035371873527765274, -0.0819665789604187, -1.7881233361549675e-05, -7.712543447269127e-05, -0.16857551038265228, -1.0967194612021558e-05, -0.008945271372795105, -8.583032467868179e-06, -0.0010144332190975547, -0.0009554826538078487, -0.0014749611727893353, -0.004543576389551163, -0.002382180653512478, -0.012687206268310547, -1.0013530300057027e-05, -0.00114292127545923, 0.0, -2.8729025871143676e-05, 0.0, 0.0, -0.012118757702410221, -0.0004782725009135902, -0.006645246874541044, -9.941560711013153e-05, -0.021866537630558014, -0.10701111704111099, -0.9237605929374695, -0.4014194905757904, -0.3705795109272003, -0.0001967951684491709, -0.15447083115577698, -0.0005016260547563434, -3.149339199066162, -0.0077946786768734455, -0.028468282893300056, -0.0014356792671605945, -0.004474271554499865, -0.00010275312524754554, -0.0017579830018803477, -0.047831784933805466, -0.00017629499780014157, -0.643369197845459, -0.20464862883090973, -0.0012337700463831425, -0.004017853643745184, -5.245195097813848e-06, -4.291525328881107e-06, -1.1073191165924072, -3.2186455882765586e-06, -2.0265558760002023e-06, -6.318072337307967e-06, -5.364403477869928e-06, -0.16265159845352173], "finish_reason": "stop"}], "metrics": {"energy": 337.8980204687119, "energy_per_token": 3.3127256908697245, "time": 8.422159, "time_per_token": 0.08257018627450981}}
{"outputs": [{"text": "text = re.sub(r'[^\\w\\s]', '', text.lower())\n    words = [word for word in text.split() if word.lower() not in STOPWORDS]\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ".", "lower", "())", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.5938384532928467, -0.07707454264163971, -0.920393168926239, -3.0278701160568744e-05, -0.022211356088519096, -0.06584161520004272, -0.016709959134459496, -0.3275907039642334, -0.023076318204402924, -0.01650102809071541, -0.0002978596603497863, -0.005282728932797909, -2.634490556374658e-05, -0.020928852260112762, -0.00040737437666393816, -3.3854863431770355e-05, -0.13856714963912964, -4.1960789531003684e-05, -0.004314163234084845, -1.3787730932235718, -0.004111765883862972, -0.009484588168561459, -0.6236290335655212, -0.017653949558734894, -0.14093032479286194, -0.003510267473757267, -0.7175285220146179, -0.06504906713962555, -0.007537615019828081, -3.6238969187252223e-05, -2.47952248173533e-05, -0.0885179415345192, -0.00012015574611723423, -0.001722282380796969, -0.012997549958527088, -0.019734352827072144, -0.014112086035311222, -2.1403021812438965, -0.14572839438915253, -0.0004773192631546408, -0.014302127994596958, -1.6569954823353328e-05, -0.004733428359031677, 0.0, -3.838465272565372e-05, 0.0, -5.960462772236497e-07, -0.032009974122047424, -0.0014879356604069471, -0.04228949919342995, -0.5411711931228638, -0.002515130676329136, -0.49159643054008484, -0.000228140561375767, -0.013485054485499859, -0.0029078128281980753, -0.013467883691191673, -0.00015269544383045286, -0.007002455648034811, -2.0124800205230713, -0.0005445189890451729, -0.2687388062477112, -0.5340418815612793, -0.004474271554499865, -0.012836211360991001, -5.483612312673358e-06, -4.6491513785440475e-06, -0.8836686611175537, -1.9073468138230965e-06, -1.5497195136049413e-06, -5.006777428206988e-06, -2.861018856492592e-06, -0.12558315694332123], "finish_reason": "stop"}], "metrics": {"energy": 252.51167032814024, "energy_per_token": 3.4590639770978115, "time": 5.917857, "time_per_token": 0.08106653424657534}}
{"outputs": [{"text": "# Split the text into words\n    words = text.split()\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation marks from the words\n    words = [re.sub(r'[^\\w\\s]', '', word) for word in words]\n\n    # Remove common stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_count = Counter(words)\n\n    return word_count", "tokens": ["#", " Split", " the", " text", " into", " words", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " marks", " from", " the", " words", "\n", "    ", "words", " =", " [", "re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " word", ")", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " common", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "count", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " word", "_", "count", "\n", "\n", "#"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -0.5564355254173279, -0.000417741306591779, -0.024593262001872063, -0.005275377072393894, -0.7249822020530701, -9.083335316972807e-05, -0.11840273439884186, -0.009276502765715122, -0.0008355463505722582, -0.10348910093307495, -0.00012659224739763886, -0.0018297373317182064, -0.05917375907301903, -0.3062896132469177, -0.00046492734691128135, -0.00024685196694917977, -0.0028775022365152836, -0.46323832869529724, -5.447716102935374e-05, -0.1487509310245514, -0.016576772555708885, -0.00112255965359509, -0.06963872909545898, -0.00016032364510465413, -0.00018726025882642716, -5.125986263010418e-06, -0.0005150898941792548, -5.245195097813848e-06, -9.536738616588991e-07, -2.8967437174287625e-05, -0.0011144625023007393, -7.116541382856667e-05, -0.0015863704029470682, -8.296622399939224e-05, -0.00031740395934320986, -0.012306117452681065, -0.033620644360780716, -0.0015551865799352527, -0.15437163412570953, -2.9708340167999268, -2.7140467166900635, -0.13519169390201569, -0.03214562311768532, -0.00025459862081333995, -0.057338815182447433, -0.0025247621815651655, -0.0019232601625844836, -0.03753795102238655, -4.291525328881107e-06, -0.0018391376361250877, -0.10162661969661713, -0.004497175570577383, -0.1586400270462036, -0.0010034770239144564, -0.003750316333025694, -6.794906312279636e-06, -0.0072677042335271835, -0.00010156115604331717, -0.004411489237099886, -9.142934868577868e-05, -3.814689989667386e-06, -0.006043493747711182, -8.34461570775602e-06, -0.0004503904783632606, -0.0018992258701473475, -0.0020155846141278744, -4.0531076592742465e-06, -4.768360213347478e-06, -1.823885577323381e-05, -0.0026532942429184914, -0.0014906733995303512, -0.0014527016319334507, -8.880697714630514e-05, -0.00011681827891152352, -0.015941079705953598, -0.3837262690067291, -0.002970451721921563, -0.01643758825957775, -0.3577466905117035, -6.16293036728166e-05, -0.022516077384352684, -0.0022744282614439726, -0.00021705655672121793, -0.0022333934903144836, -0.0008884296985343099, -1.311301275563892e-06, -3.576272320060525e-06, -1.156323378381785e-05, -0.00041654970846138895, -0.0017354916781187057, -0.07079288363456726, -3.576272320060525e-06, -0.0007962394156493247, 0.0, -2.586808113846928e-05, 0.0, 0.0, -0.01989727094769478, -0.0004757702990900725, -0.002038188511505723, -8.844937838148326e-05, -0.0020999303087592125, -0.178305521607399, -0.09254223853349686, -0.06281913816928864, -0.0006118332967162132, -0.12748681008815765, -0.015406056307256222, -0.1591525673866272, -0.00016175392374861985, -0.16763155162334442, -0.00023493390472140163, -2.612189769744873, -0.005608181469142437, -0.01698659360408783, -0.0011331572895869613, -0.001016576774418354, -1.549708758830093e-05, -0.0009652484441176057, -0.019886167719960213, -0.00017248096992261708, -1.0501480102539062, -1.4849401712417603, -7.271740287251305e-06, -3.659658250398934e-05, -0.5945497751235962, -0.008381311781704426, -1.2815330028533936], "finish_reason": "stop"}], "metrics": {"energy": 445.1708257894517, "energy_per_token": 3.3221703417123263, "time": 10.924141, "time_per_token": 0.08152344029850747}}
{"outputs": [{"text": "# Split text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation and stopwords\n    words = [word for word in words if word not in STOPWORDS and re.match(r'\\w+', word)]\n\n    # Count the frequency of words\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "tokens": ["#", " Split", " text", " into", " words", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Convert", " words", " to", " lower", "case", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " Remove", " punct", "uation", " and", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " re", ".", "match", "(", "r", "'\\", "w", "+'", ",", " word", ")]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " words", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "return", " dict", "(", "word", "_", "counts", ")", "\n", "\n", "if"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -1.7192671298980713, -0.04202400892972946, -0.03642084449529648, -0.6406687498092651, -0.0004433602443896234, -0.03359632194042206, -0.004126961808651686, -1.2265232801437378, -1.156323378381785e-05, -0.09009738266468048, -1.4305104514278355e-06, -0.016376139596104622, -0.0004599228559527546, -0.03677148371934891, -0.06860735267400742, -0.10661129653453827, -0.00451545137912035, -0.002854204038158059, -5.722029527532868e-06, -0.00011002412065863609, -7.152531907195225e-06, -0.00249610492028296, -0.23640947043895721, -0.0177932009100914, -0.11175794154405594, -0.000161038784426637, -0.0008468617452308536, -0.06123826280236244, -0.3096607029438019, -0.0006096888100728393, -0.00033087024348787963, -0.004462166223675013, -0.6027378439903259, -4.1960789531003684e-05, -0.11423511803150177, -0.021052706986665726, -0.003066126024350524, -0.03729255869984627, -0.0001829695247579366, -0.0002256377338198945, -9.298280929215252e-06, -0.00031716562807559967, -4.887569048150908e-06, -2.50339189733495e-06, -2.3603161025675945e-05, -0.004241755697876215, -7.414542778860778e-05, -0.0014640099834650755, -7.331102824537084e-05, -0.0001102625101339072, -0.006238155532628298, -0.22362342476844788, -0.0014893640764057636, -0.812994122505188, -0.22916680574417114, -0.019347406923770905, -0.032291412353515625, -0.00016759421851020306, -0.19481788575649261, -0.005536697804927826, -0.0006898645660839975, -0.0268852636218071, -0.0057062110863626, -2.145764938177308e-06, -7.509902934543788e-05, -2.8490614567999728e-05, -0.007300012279301882, -0.10634230822324753, -0.04373309761285782, -1.3112935448589269e-05, -0.1218951866030693, 0.0, -2.610649426060263e-05, 0.0, -2.3841855067985307e-07, -0.28267234563827515, -1.422356367111206, -7.748573807475623e-06, -0.050219833850860596, -0.045138150453567505, -0.007675086613744497, -1.1356680393218994, -0.03645153343677521, -0.021739285439252853, -2.861018856492592e-06, -0.0003289635351393372, -0.01440965011715889, -0.0008286379743367434, -0.0028859416488558054, -0.00010263393050990999, -0.005972396582365036, -0.18702533841133118, -1.7660232782363892, -0.043900709599256516, -0.001889588194899261, -1.7026993036270142, -0.1204490214586258, -0.00017128908075392246, -0.20496390759944916, -0.0004589696181938052, -0.9715047478675842, -9.464769391342998e-05, -0.012533587403595448, -0.0007923085941001773, -0.0019999993965029716, -3.611976353568025e-05, -0.0010083595989271998, -0.023177076131105423, -0.00013720047718379647, -0.8365882635116577, -0.24480727314949036, -0.0005314130103215575, -0.002548781456425786, -8.344646857949556e-07, -2.861018856492592e-06, -0.29787325859069824, -0.28623849153518677, -0.00803713034838438, -0.9165008068084717], "finish_reason": "stop"}], "metrics": {"energy": 399.38044721412695, "energy_per_token": 3.3006648530093137, "time": 9.893341, "time_per_token": 0.08176314876033057}}
{"outputs": [{"text": "# Split the text into words\n    words = text.split()\n    # Convert the words to lowercase\n    words = [word.lower() for word in words]\n    # Remove punctuation marks and stopwords\n    words = [word for word in words if word not in STOPWORDS and word not in string.punctuation]\n    # Count the frequency of each word\n    freq = Counter(words)\n    # Return the frequency as a dictionary\n    return dict(freq)", "tokens": ["#", " Split", " the", " text", " into", " words", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "    ", "#", " Convert", " the", " words", " to", " lower", "case", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " words", "]", "\n", "    ", "#", " Remove", " punct", "uation", " marks", " and", " stop", "words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " word", " not", " in", " string", ".", "punct", "uation", "]", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "freq", " =", " Counter", "(", "words", ")", "\n", "    ", "#", " Return", " the", " frequency", " as", " a", " dictionary", "\n", "    ", "return", " dict", "(", "freq", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6367194056510925, -1.2730121612548828, -0.3211348056793213, -0.03408414497971535, -0.020063666626811028, -0.03482331708073616, -0.5564355254173279, -0.000417741306591779, -0.024593262001872063, -0.005275377072393894, -0.7249822020530701, -9.083335316972807e-05, -0.11840273439884186, -0.009276502765715122, -0.0008355463505722582, -2.3201181888580322, -0.08303210884332657, -0.10431738942861557, -2.7313222885131836, -0.009549533016979694, -0.004708393942564726, -0.0006656814948655665, -0.007164145819842815, -0.11335263401269913, -0.00019298121333122253, -0.09657377749681473, -0.019864197820425034, -0.0037493661511689425, -0.14930912852287292, -0.00029094755882397294, -0.00031668893643654883, -6.6756979322235566e-06, -0.0005707303644157946, -8.34461570775602e-06, -1.7881377516459906e-06, -4.970903682988137e-05, -0.00227276305668056, -8.082063141046092e-05, -0.023514339700341225, -0.0012281740782782435, -0.012361223809421062, -0.08067966997623444, -0.0018640062771737576, -0.0622873455286026, -1.244986891746521, -1.0946063995361328, -0.007442012894898653, -0.11296152323484421, -0.0003682888636831194, -0.15174080431461334, -0.003979858942329884, -0.0015926783671602607, -0.2147066742181778, -0.5178592801094055, -1.0132738680113107e-05, -8.630380034446716e-05, -0.00024589852546341717, -0.008733055554330349, -0.08393758535385132, -0.1418038010597229, -5.113947918289341e-05, -0.2506164610385895, -2.3841855067985307e-07, -8.082063141046092e-05, 0.0, 0.0, -0.07256197929382324, -1.519357681274414, -0.35008111596107483, -0.00021324267436284572, -0.11354686319828033, -6.282132380874828e-05, -9.894321920000948e-06, -3.576278118089249e-07, -0.012977663427591324, -0.0002975021197926253, -0.052860938012599945, -0.0072598932310938835, -0.19472761452198029, -0.02557469718158245, -0.06948082894086838, -0.001520311925560236, -0.05777570232748985, -0.006292886100709438, -0.06210923194885254, -0.00038580605178140104, -2.4916093349456787, -0.7462526559829712, -0.05280439928174019, -0.0016248131869360805, -0.00646925950422883, -5.185469490243122e-05, -0.007982258684933186, -0.048759009689092636, -0.45042678713798523, -0.3545021712779999, -0.041564516723155975, -0.720378577709198, -2.96846342086792, -0.0254827793687582, -0.006864062510430813, -0.01269085519015789, -0.000715714821126312, -0.00861960370093584, -0.11456674337387085, -0.0007210753974504769, -0.003949818201363087, -1.161126732826233, -8.106198947643861e-06, -2.0265558760002023e-06, -6.794906312279636e-06, -5.125986263010418e-06, -0.13405106961727142], "finish_reason": "stop"}], "metrics": {"energy": 394.664623802185, "energy_per_token": 3.4926072902848233, "time": 9.263649, "time_per_token": 0.08197919469026548}}
{"outputs": [{"text": "# Clean and process the text\n    words = re.findall(r'\\b\\w+\\b', text.lower())  # Find words using regular expressions and convert to lowercase\n    cleaned_words = [word for word in words if word not in STOPWORDS and len(word) > 1]  # Remove stopwords and short words\n\n    # Count the frequency of each word\n    word_freq = Counter(cleaned_words)\n    word_freq.update(re.findall(r'[a-zA-Z]{2}', text.lower()))  # Update the counter with two-letter sequences\n\n    # Return the resulting dictionary\n    return dict(word_freq)", "tokens": ["#", " Clean", " and", " process", " the", " text", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ".", "lower", "())", "  ", "#", " Find", " words", " using", " regular", " expressions", " and", " convert", " to", " lower", "case", "\n", "    ", "cleaned", "_", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", " and", " len", "(", "word", ")", " >", " ", "1", "]", "  ", "#", " Remove", " stop", "words", " and", " short", " words", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "cleaned", "_", "words", ")", "\n", "    ", "word", "_", "freq", ".", "update", "(", "re", ".", "find", "all", "(", "r", "'", "[", "a", "-", "z", "A", "-", "Z", "]{", "2", "}'", ",", " text", ".", "lower", "()))", "  ", "#", " Update", " the", " counter", " with", " two", "-", "letter", " sequences", "\n", "\n", "    ", "#", " Return", " the", " resulting", " dictionary", "\n", "    ", "return", " dict", "(", "word", "_", "freq", ")"], "logprobs": [-0.6367194056510925, -2.9775733947753906, -1.0639934539794922, -2.1840810775756836, -0.3700825572013855, -0.16357414424419403, -0.2712702751159668, -0.0010961245279759169, -0.9121551513671875, -0.005100571550428867, -0.27194488048553467, -8.583032467868179e-06, -0.2292344868183136, -3.3378546504536644e-06, -0.007507444359362125, -0.0005809764843434095, -0.039154764264822006, -0.11989837884902954, -0.1790200173854828, -0.002781096613034606, -0.004267989192157984, -8.821448318485636e-06, -9.131014667218551e-05, -7.986990567587782e-06, -0.17074066400527954, -0.1492326259613037, -0.0008036244544200599, -0.046390339732170105, -1.145695686340332, -1.0371154530730564e-05, -0.7281918525695801, -0.3393396735191345, -0.283564031124115, -0.27283141016960144, -0.036311063915491104, -2.4676902294158936, -0.22292475402355194, -0.07005105167627335, -9.345571743324399e-05, -0.0018366387812420726, -0.006144679617136717, -0.041684698313474655, -2.3750765323638916, -0.016603155061602592, -0.01886228285729885, -9.035655966727063e-05, -0.017433030530810356, -0.09179755300283432, -0.005426913499832153, -5.364403477869928e-06, -3.93382906622719e-05, -0.00013028726971242577, -0.011402911506593227, -0.2203579992055893, -0.012576908804476261, -1.3112935448589269e-05, -0.003165118396282196, 0.0, -7.152531907195225e-06, 0.0, 0.0, -0.6149698495864868, -0.4712964594364166, -2.2649508537142538e-05, -0.0025471169501543045, -0.00632025022059679, -0.047772690653800964, -0.0001746263587847352, -0.551985502243042, -0.007460707798600197, -0.09298443794250488, -3.933898824470816e-06, -0.06337986141443253, -0.03324456885457039, -0.014597873203456402, -0.10241448879241943, -0.25691521167755127, -0.002746859099715948, -0.0046631875447928905, -0.022032257169485092, -0.00015925093612167984, -0.025217205286026, -0.17315573990345, -0.71446293592453, -0.26593732833862305, -0.010386815294623375, -0.2406836748123169, -0.06176557391881943, -0.12414590269327164, -0.00011991735664196312, -0.0645308643579483, -5.972207145532593e-05, -1.0914459228515625, -0.03382660448551178, -0.04515581205487251, -0.0012904420727863908, -0.0021891456563025713, -1.5497195136049413e-06, -8.344646857949556e-07, -0.0004936429904773831, -0.03445529565215111, -2.8760509490966797, -2.4382686614990234, -0.00040951924165710807, -0.04317963495850563, -2.489039182662964, -0.8160362243652344, -0.15951932966709137, -2.744210720062256, -0.0015248350100591779, -0.02831556275486946, -0.0008629412623122334, -0.018305176869034767, -0.002126338891685009, -0.9774355888366699, -1.379511833190918, -0.4523942768573761, -0.0005214046686887741, -0.00047291061491705477, -1.8515691757202148, -0.00014280252798926085, -0.0037785815075039864, -0.3236721158027649, -0.21100446581840515, -1.2227227687835693, -9.965400386136025e-05, -0.040355730801820755, -0.5826159119606018, -0.004324014764279127, -0.004674578085541725, -0.08416960388422012, -3.075552376685664e-05, -2.3660829067230225, -0.6403083205223083, -1.6465816497802734, -0.10074219852685928, -1.635579228401184, -0.01109372265636921, -0.47235748171806335, -0.6354461312294006, -0.04184865206480026, -0.19870460033416748, -0.00017915551143232733, -0.873575747013092, -1.1031486988067627, -0.03035183809697628, -2.4197638034820557, -0.026570959016680717, -0.11426308751106262, -0.0005782362422905862, -0.015976862981915474, -0.1619434654712677, -0.001412704586982727, -0.005055264104157686, -7.271740287251305e-06, -1.4781842764932662e-05, -0.37216439843177795], "finish_reason": "stop"}], "metrics": {"energy": 560.5219826889041, "energy_per_token": 3.570203711394294, "time": 13.0436945, "time_per_token": 0.0830808566878981}}
{"outputs": [{"text": "# Preprocess the text by converting to lowercase, removing punctuation, and removing stopwords\n    words = [word.lower() for word in re.sub(r'[^\\w\\s]', '', text).split() if word.lower() not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Filter out the words that appear only once\n    filtered_word_counts = {word: count for word, count in word_counts.items() if count > 1}\n\n    return filtered_word_counts", "tokens": ["#", " Pre", "process", " the", " text", " by", " converting", " to", " lower", "case", ",", " removing", " punct", "uation", ",", " and", " removing", " stop", "words", "\n", "    ", "words", " =", " [", "word", ".", "lower", "()", " for", " word", " in", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", ".", "split", "()", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "    ", "#", " Count", " the", " frequency", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Filter", " out", " the", " words", " that", " appear", " only", " once", "\n", "    ", "filtered", "_", "word", "_", "counts", " =", " {", "word", ":", " count", " for", " word", ",", " count", " in", " word", "_", "counts", ".", "items", "()", " if", " count", " >", " ", "1", "}", "\n", "\n", "    ", "return", " filtered", "_", "word", "_", "counts", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-0.6367194056510925, -2.9423694610595703, -0.3309401869773865, -0.42271462082862854, -0.05651088431477547, -0.36912497878074646, -0.7020369172096252, -0.11783410608768463, -0.0006033745594322681, -0.003806371008977294, -0.23132239282131195, -0.12856847047805786, -0.09455391019582748, -0.002190216211602092, -0.6850143074989319, -0.05689869448542595, -0.28603896498680115, -0.22838710248470306, -0.054340850561857224, -0.033290691673755646, -0.001177809201180935, -0.6739470958709717, -0.0056732590310275555, -1.0765068531036377, -0.39965108036994934, -0.4191100001335144, -0.04638112336397171, -1.728519782773219e-05, -0.4375239312648773, -0.0001525762490928173, -0.00013851160474587232, -0.13671371340751648, -8.34461570775602e-06, -1.5237658023834229, -0.048093125224113464, -0.03965512290596962, -0.16561217606067657, -0.004051335621625185, -0.006149656139314175, -8.34461570775602e-06, -0.016108017414808273, -1.1801649634435307e-05, -0.01610778272151947, -0.00025829317746683955, -1.9311717551317997e-05, -0.02240814082324505, -5.6265202147187665e-05, -0.004682409111410379, -0.034963421523571014, -0.0008819981012493372, -0.006243604701012373, -0.0028181858360767365, -0.10240942984819412, -0.00662606256082654, -0.2175305187702179, -0.001763337990269065, -0.00017045476124621928, -0.0007879013428464532, -3.814689989667386e-06, -0.002266221446916461, 0.0, -1.7165990357170813e-05, 0.0, -1.1920928244535389e-07, -0.0034988634288311005, -0.0022230453323572874, -0.15055114030838013, -0.0003780603874474764, -0.008337453007698059, -0.16356149315834045, -0.02870357409119606, -0.20387542247772217, -0.0016732513904571533, -0.07247816026210785, -0.02403852716088295, -1.3627941608428955, -0.00016258825780823827, -0.19618965685367584, -0.0005664412747137249, -1.0690019130706787, -0.00024327656137757003, -0.019247546792030334, -0.0014116332167759538, -0.005070564802736044, -9.464769391342998e-05, -0.0034949432592839003, -0.03661324456334114, -0.00019774865359067917, -0.44555333256721497, -2.976046562194824, -0.36851146817207336, -2.5240540504455566, -0.6623981595039368, -0.6767984628677368, -0.5905451774597168, -0.4558691084384918, -0.004524470306932926, -0.08780726790428162, -0.0002636561985127628, -0.7343049645423889, -0.001536380616016686, -0.4813419282436371, -5.411955135059543e-05, -0.0007363230688497424, -0.0002097863471135497, -0.026103148236870766, -0.019484667107462883, -0.0011486368020996451, -0.0169188492000103, -0.0009729895391501486, -0.00015889335190877318, -4.529942543740617e-06, -0.0014584152959287167, -5.507317473529838e-05, -0.0007811117684468627, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0001839230244513601, -0.007071467116475105, -0.0006999903125688434, -0.00026854246971197426, -0.0024733925238251686, -0.023139337077736855, -0.00022206225548870862, -0.0021546499338001013, -0.0006448334897868335, -0.0002008474839385599, -0.007253147661685944, -9.667406266089529e-05, -0.15265218913555145, -0.10117077082395554, -4.410734163684538e-06, -1.1086402082582936e-05, -1.4305104514278355e-06, -1.0728830375228426e-06, -1.095233678817749, -5.960446742392378e-06, -2.50339189733495e-06, -5.722029527532868e-06, -6.6756979322235566e-06, -2.069391965866089, -0.0019326595356687903], "finish_reason": "stop"}], "metrics": {"energy": 514.9007909698485, "energy_per_token": 3.6260619082383694, "time": 11.78289, "time_per_token": 0.0829780985915493}}
{"outputs": [{"text": "if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.lower()\n    words = text.split()\n    filtered_words = [word for word in words if word not in STOPWORDS]\n    word_freq = Counter(filtered_words)\n    return dict(word_freq)", "tokens": ["if", " not", " isinstance", "(", "text", ",", " str", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " must", " be", " a", " string", ".", "\"", ")", "\n", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "    ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "    ", "word", "_", "freq", " =", " Counter", "(", "filtered", "_", "words", ")", "\n", "    ", "return", " dict", "(", "word", "_", "freq", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-3.6126201152801514, -0.11444884538650513, -0.039445772767066956, -2.5152843591058627e-05, -0.0002489972102921456, -5.030505417380482e-05, -0.005004854407161474, -0.023108001798391342, -0.01195056363940239, -0.0014786511892452836, -0.08891905844211578, -0.9010944366455078, -1.3708974620385561e-05, -0.08173339068889618, -0.036391761153936386, -0.09817362576723099, -0.41722390055656433, -6.818538531661034e-05, -0.010117318481206894, -0.013400958850979805, -0.8637685179710388, -0.0008311392739415169, -0.00010907054820563644, -0.0013431822881102562, -0.12057530879974365, -0.0005031750188209116, -2.6796653270721436, -0.080708809196949, -1.1404147148132324, -2.5629668016335927e-05, -0.01086262334138155, -0.06521090865135193, -0.011537259444594383, -0.4069388806819916, -0.013357672840356827, -0.011203711852431297, -0.0003921216703020036, -0.002156553091481328, -2.1934269170742482e-05, -0.021630799397826195, -0.0004094000905752182, -1.5735502529423684e-05, -0.08503441512584686, -3.0517112463712692e-05, -0.0022178117651492357, -0.4945773780345917, -0.9094798564910889, -0.08020295202732086, -2.4366750717163086, -0.05977156013250351, -0.36433953046798706, -9.917721035890281e-05, -0.07990463823080063, -4.7444173105759546e-05, -0.17953407764434814, -0.1317032277584076, -0.09325085580348969, -0.003401923691853881, -0.9041465520858765, -3.9457496313843876e-05, -0.0011157722910866141, -0.006292175501585007, -0.0020067808218300343, -0.13181357085704803, -2.1195127964019775, -0.003946375101804733, -0.0018500846344977617, -0.00013183678674977273, -0.009299533441662788, -0.05991292744874954, -0.003213838441297412, -7.986990567587782e-06, -1.645074735279195e-05, -0.0002348147245356813, -0.0035617027897387743, -0.014825879596173763, -0.04209178686141968, -2.0146166207268834e-05, -0.0010580186499282718, 0.0, -2.396077979938127e-05, 0.0, 0.0, -0.027470432221889496, -0.0008598444401286542, -0.1556854248046875, -0.09116897732019424, -0.000794214429333806, -2.4243016242980957, -0.04424508288502693, -0.06477893888950348, -0.0007114263135008514, -0.0011800715001299977, -1.7881377516459906e-06, -5.960462772236497e-07, -0.00013660451804753393, -0.009967435151338577, -0.3001730442047119, -0.09365344792604446, -0.45688164234161377, -0.0014748420799151063, -0.0068058110773563385, -5.245195097813848e-06, -5.722029527532868e-06, -1.1362744569778442, -1.9073468138230965e-06, -1.5497195136049413e-06, -9.417489309271332e-06, -5.006777428206988e-06, -0.13631467521190643], "finish_reason": "stop"}], "metrics": {"energy": 363.17539238929743, "energy_per_token": 3.3015944762663403, "time": 9.052367, "time_per_token": 0.08229424545454546}}
