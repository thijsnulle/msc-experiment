{"outputs": [{"text": "feature_col = df[feature]\n    target_col = df[target]\n    # \u68c0\u67e5\u6307\u5b9a\u5217\u5728 DataFrame \u4e2d\u662f\u5426\u5305\u542b\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"{feature} and {target} must be in df\")\n    # \u6784\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\n    model = LinearRegression()\n    model.fit(feature_col.values.reshape(-1, 1), target_col.values)\n    residuals = np.absolute(target_col - model.predict(feature_col.values.reshape(-1, 1)))\n    # \u5c06\u7ed3\u679c\u6839\u636e\u7edd\u5bf9\u503c\u964d\u5e8f\u6392\u5217\n    indices = np.argsort(residuals)[:n]\n    return indices, model", "tokens": ["feature", "_", "col", " =", " df", "[", "feature", "]", "\n", "    ", "target", "_", "col", " =", " df", "[", "target", "]", "\n", "    ", "#", " ", "\u68c0\u67e5", "\u6307\u5b9a", "\u5217", "\u5728", " Data", "Frame", " \u4e2d", "\u662f\u5426", "\u5305\u542b", "\n", "    ", "if", " not", " all", "(", "col", " in", " df", " for", " col", " in", " [", "feature", ",", " target", "]", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " and", " {", "target", "}", " must", " be", " in", " df", "\"", ")", "\n", "    ", "#", " ", "\u6784\u5efa", "\u7ebf\u6027", "\u56de\u5f52", "\u6a21\u578b", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "feature", "_", "col", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " target", "_", "col", ".", "values", ")", "\n", "    ", "res", "idual", "s", " =", " np", ".", "absolute", "(", "target", "_", "col", " -", " model", ".", "predict", "(", "feature", "_", "col", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")))", "\n", "    ", "#", " \u5c06", "\u7ed3\u679c", "\u6839\u636e", "\u7edd\u5bf9", "\u503c", "\u964d", "\u5e8f", "\u6392\u5217", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "res", "idual", "s", ")", "[:", "n", "]", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "if"], "logprobs": [-3.6216068267822266, -0.363982230424881, -0.8291370272636414, -0.14992755651474, -0.06336889415979385, -0.07155192643404007, -0.005017308983951807, -0.001553758280351758, -0.10769243538379669, -0.003729413729161024, -0.020745202898979187, -0.0005169962532818317, -0.0007572882459498942, -0.0012971091782674193, -0.0007731309160590172, -0.0003762729174923152, -0.00024423000286333263, -6.508615479106084e-05, -0.0002982171718031168, -0.7265188097953796, -3.2812130451202393, -3.3152291774749756, -2.8213891983032227, -2.0187911987304688, -0.22366517782211304, -3.130253791809082, -1.3132401704788208, -0.003152522025629878, -0.36567583680152893, -2.252558946609497, -1.2088180780410767, -0.22435255348682404, -0.0015967250801622868, -0.28897276520729065, -1.0881638526916504, -1.6534185409545898, -0.08803500980138779, -0.1854289174079895, -0.08845323324203491, -0.011158562265336514, -0.3279311954975128, -0.0004886387032456696, -0.00034648136352188885, -0.20949965715408325, -0.01605980470776558, -0.1579083800315857, -0.002406084444373846, -0.0023451941087841988, -0.0005096090608276427, -0.0034438606817275286, -0.002126338891685009, -0.018813500180840492, -0.004518181085586548, -1.7881233361549675e-05, -0.12515808641910553, -1.1786983013153076, -0.08972463011741638, -1.7856069803237915, -0.018139775842428207, -0.044486042112112045, -0.47309696674346924, -0.04688868299126625, -0.0012960376916453242, -0.0014809127897024155, -1.907065987586975, -0.06959214061498642, -0.2542782127857208, -1.6299934387207031, -0.3357459008693695, -0.00024279984063468874, -0.0012830605264753103, -0.7581135034561157, -0.5682379007339478, -0.1697966456413269, -3.368781089782715, -0.9377836585044861, -0.04971645772457123, -0.01971530169248581, -0.13969029486179352, -0.0020291469991207123, -0.21308691799640656, -0.003599475836381316, -0.0035191767383366823, -1.6331539882230572e-05, -0.00031275625224225223, -0.03984953835606575, -0.24473680555820465, -0.04456973075866699, -0.5587551593780518, -0.0025829069782048464, -9.095255518332124e-05, -0.03205973282456398, -0.032322920858860016, -0.00015245705435518175, -1.490105023549404e-05, -0.6157546043395996, -0.11978480964899063, -0.02985883504152298, -0.007193853612989187, -1.1920922133867862e-06, -0.025003299117088318, -1.7404405298293568e-05, -3.540453326422721e-05, -0.04125707969069481, -5.006777428206988e-06, -4.0649541915627196e-05, -0.00036542891757562757, -0.007144853472709656, -6.687417771900073e-05, -7.152555099310121e-07, -0.11250527203083038, -0.002733425237238407, -0.2193087339401245, -0.014151577837765217, -0.2491838037967682, -2.2044761180877686, -0.14625388383865356, -0.08053582161664963, -0.009421530179679394, -1.5380918979644775, -5.721882189391181e-05, -2.850026845932007, -0.026622265577316284, -0.7625038027763367, -0.0008068405441008508, -9.059865078597795e-06, -1.9217864274978638, -0.13719479739665985, -6.592056161025539e-05, -0.015999505296349525, -0.0049195671454072, -0.03786971792578697, -7.045020902296528e-05, -4.410734163684538e-06, -0.009007415734231472, -0.00450572045519948, -0.0037955641746520996, -0.0017078827368095517, -2.3841855067985307e-07, -0.0021046886686235666, -4.6132929128361866e-05, -0.00015937011630740017, -0.008664395660161972, -6.9141146923357155e-06, -0.012740878388285637, -0.04129505902528763, -0.04675012826919556, -0.887536346912384, -3.21254825592041, -1.1964203119277954, -4.425633430480957, -0.3958781063556671, -0.136004239320755, -2.219762086868286, -0.00038187362952157855, -0.21517397463321686, -0.6494109034538269, -0.0008286379743367434, -0.8398974537849426, -0.019092125818133354, -0.20578382909297943, -0.0002479245886206627, -0.04900546744465828, -0.00016532962035853416, -0.28506433963775635, -0.007515016943216324, -2.95634672511369e-05, -4.768370445162873e-07, -0.543869137763977, -1.3972325325012207, -0.04176096245646477, -0.1519690901041031, -0.03743472695350647, -0.0821399837732315, -0.16000835597515106, -0.07690610736608505, -0.04772086441516876, -0.0017401328077539802, -0.5240554809570312, -0.024018626660108566, -0.8425814509391785], "finish_reason": "stop"}], "metrics": {"energy": 217.1330447673798, "energy_per_token": 1.1996300815877337, "time": 8.206575, "time_per_token": 0.04534019337016575}}
{"outputs": [{"text": "residuals = []\n    indices = []\n    model = LinearRegression()\n\n    for idx, row in df.iterrows():\n        model.fit(df[[feature]], df[target])\n        residuals.append(model.resid_sum_squares / len(df))\n        indices.append(idx)\n    indices.sort(key=lambda x: residuals[x], reverse=True)\n    indices = indices[:n]\n    return indices, model", "tokens": ["res", "idual", "s", " =", " []", "\n", "    ", "indices", " =", " []", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "\n", "    ", "for", " idx", ",", " row", " in", " df", ".", "iter", "rows", "():", "\n", "        ", "model", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[", "target", "])", "\n", "        ", "res", "idual", "s", ".", "append", "(", "model", ".", "res", "id", "_", "sum", "_", "squ", "ares", " /", " len", "(", "df", "))", "\n", "        ", "indices", ".", "append", "(", "idx", ")", "\n", "    ", "indices", ".", "sort", "(", "key", "=", "lambda", " x", ":", " residuals", "[", "x", "]", ",", " reverse", "=", "True", ")", "\n", "    ", "indices", " =", " indices", "[:", "n", "]", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "def"], "logprobs": [-3.906116485595703, -0.2904640734195709, -0.21440760791301727, -0.09643122553825378, -0.2557690441608429, -0.023635663092136383, -0.16370350122451782, -3.191277027130127, -0.033830638974905014, -0.05187107250094414, -0.002183911856263876, -0.3652072548866272, -1.3578941822052002, -0.010736322030425072, -0.3058461546897888, -3.266281055402942e-05, -0.0001839230244513601, -0.07589082419872284, -0.04402163624763489, -0.7294450402259827, -0.00045885046711191535, -1.5835734605789185, -2.9020979404449463, -0.4590866267681122, -0.6078696250915527, -0.0034511075355112553, -0.007608364336192608, -0.09808208793401718, -0.1372283697128296, -0.00922465231269598, -0.0015345951542258263, -0.0035361635964363813, -0.01424031239002943, -0.8705118298530579, -0.014615495689213276, -0.00371029251255095, -0.2755306661128998, -0.49671855568885803, -0.5389455556869507, -0.015204952098429203, -0.40091654658317566, -0.03670092672109604, -0.02816096507012844, -0.5233046412467957, -0.00020966715237591416, -0.004469880368560553, -0.005050875712186098, -0.043521519750356674, -0.6238957047462463, -0.16663452982902527, -0.38785749673843384, -0.009255597367882729, -0.0017703588819131255, -0.11081479489803314, -0.7749415636062622, -0.00023767507809679955, -1.30153489112854, -0.019902179017663002, -1.5475680828094482, -0.3151609003543854, -0.0037459221202880144, -0.5158650279045105, -0.0034331686329096556, -2.137535810470581, -1.085038185119629, -0.0003861635341309011, -0.1685248464345932, -0.37474051117897034, -0.01328403502702713, -0.9049822092056274, -0.3682344853878021, -0.003271467750892043, -0.0013553252210840583, -0.03336448594927788, -0.11705797910690308, -0.001661945367231965, -0.0011263700434938073, -1.779631495475769, -1.0687915086746216, -1.5899734497070312, -0.009711402468383312, -0.013638997450470924, -0.04267669469118118, -0.014154164120554924, -0.04481995850801468, -0.3900769352912903, -0.00214775069616735, -0.05078777298331261, -0.009331658482551575, -0.006264928728342056, -0.9335678815841675, -0.0018305702833458781, -0.0016662298003211617, -0.0011850723531097174, -0.020607881247997284, -0.00482193473726511, -0.007877237163484097, -0.2600008249282837, -0.7068835496902466, -0.016422109678387642, -0.017902454361319542, -0.12113910168409348, -0.02092359960079193, -0.0024004948791116476, -0.005014580674469471, -0.7994964122772217, -0.29177019000053406, -0.03538545221090317, -0.04699378088116646, -0.0038184840232133865, -0.40930280089378357, -0.014414350502192974, -0.7241147756576538], "finish_reason": "stop"}], "metrics": {"energy": 142.59289409828187, "energy_per_token": 1.2618840185688662, "time": 5.0463033, "time_per_token": 0.044657551327433626}}
{"outputs": [{"text": "if feature not in df or target not in df:\n        raise ValueError(\n            f\"Feature or target not in DataFrame.\\n\\n\"\n            f\"Columns in df: {list(df.columns)}\\n\\n\"\n            f\"feature: {feature}\\n\\ntarget: {target}\"\n        )\n\n    feature_arr = df[feature].values\n    target_arr = df[target].values\n    coef = LinearRegression().fit(feature_arr.reshape(-1, 1), target_arr)\n\n    residual_arr = (target_arr - coef.predict(feature_arr.reshape(-1, 1))).reshape(-1)\n    sorted_residual_indices = np.argsort(residual_arr)\n\n    return sorted_residual_indices[:n], coef", "tokens": ["if", " feature", " not", " in", " df", " or", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "\"", "Feature", " or", " target", " not", " in", " Data", "Frame", ".", "\\", "n", "\\", "n", "\"", "\n", "            ", "f", "\"", "Columns", " in", " df", ":", " {", "list", "(", "df", ".", "columns", ")}\\", "n", "\\", "n", "\"", "\n", "            ", "f", "\"", "feature", ":", " {", "feature", "}\\", "n", "\\", "nt", "arget", ":", " {", "target", "}\"", "\n", "        ", ")", "\n", "\n", "    ", "feature", "_", "arr", " =", " df", "[", "feature", "]", ".", "values", "\n", "    ", "target", "_", "arr", " =", " df", "[", "target", "]", ".", "values", "\n", "    ", "co", "ef", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "feature", "_", "arr", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " target", "_", "arr", ")", "\n", "\n", "    ", "res", "idual", "_", "arr", " =", " (", "target", "_", "arr", " -", " co", "ef", ".", "predict", "(", "feature", "_", "arr", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")))", ".", "resh", "ape", "(-", "1", ")", "\n", "    ", "s", "orted", "_", "res", "idual", "_", "indices", " =", " np", ".", "args", "ort", "(", "res", "idual", "_", "arr", ")", "\n", "\n", "    ", "return", " sorted", "_", "res", "idual", "_", "indices", "[:", "n", "]", ",", " co", "ef", "\n", "\n", "def"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -1.9745479822158813, -0.006874481216073036, -0.00025614796322770417, -7.70062324590981e-05, -0.0002694958820939064, -0.007179177366197109, -0.0034848456270992756, -0.0037376086693257093, -0.015219863504171371, -0.0038200279232114553, -2.658331868587993e-05, -0.1413780301809311, -2.9599616527557373, -0.010917337611317635, -0.6112529635429382, -0.09157795459032059, -2.452036142349243, -1.9781668186187744, -0.0600070096552372, -1.6988966464996338, -0.4628528356552124, -0.9621375203132629, -0.008303169161081314, -1.5545918941497803, -3.2494313716888428, -0.7050600647926331, -2.524838924407959, -1.316219687461853, -0.46241137385368347, -0.028412899002432823, -0.010013229213654995, -0.05247777700424194, -0.004926803521811962, -2.4971184730529785, -1.2600317001342773, -1.839409351348877, -0.597695529460907, -0.17341667413711548, -0.31755512952804565, -0.0008616310660727322, -0.0009600082994438708, -0.07334992289543152, -0.09899520874023438, -0.4532836079597473, -0.018393192440271378, -0.7664542198181152, -0.011906037107110023, -0.00417053047567606, -0.004707681946456432, -0.08604243397712708, -0.00833804439753294, -0.005001770798116922, -1.0372896194458008, -0.21529623866081238, -0.19947810471057892, -0.010236736387014389, -0.0727771446108818, -0.21237853169441223, -0.08986596763134003, -1.442438006401062, -0.0002329078270122409, -0.0027591038960963488, -0.002889388706535101, -0.0002653246629051864, -0.23837332427501678, -0.17738020420074463, -0.008652222342789173, -0.00021300431399140507, -0.0010377742582932115, -0.524878740310669, -0.000801837770268321, -4.412163734436035, -0.31033945083618164, -3.089512348175049, -0.09037633240222931, -0.32458987832069397, -0.04274328798055649, -0.0021083762403577566, -0.0015029336791485548, -0.3496745526790619, -0.6292129158973694, -0.17201587557792664, -0.003657320514321327, -0.020396841689944267, -0.000256982195423916, -0.0010511117288842797, -0.0010786197381094098, -0.0010674261720851064, -0.0003147821989841759, -0.0002636561985127628, -3.075552376685664e-05, -0.019391018897294998, -0.0026777861639857292, -0.0035816587042063475, -1.0769548416137695, -3.9291300773620605, -0.2764996290206909, -0.8971041440963745, -0.29556259512901306, -0.00010287232726113871, -0.00014625910262111574, -0.03789393603801727, -0.09746924042701721, -0.0017434648470953107, -0.004731886088848114, -0.17248208820819855, -0.0001714082609396428, -0.00012587709352374077, -0.4525441825389862, -0.004120432306081057, -2.0265558760002023e-06, -0.0773799940943718, -2.52720492426306e-05, -5.090107151772827e-05, -0.01407600101083517, -1.4305012882687151e-05, -0.00016008525562938303, -0.0003134713042527437, -0.01790807582437992, -0.00015925093612167984, -7.152555099310121e-07, -0.03659692406654358, -0.550402820110321, -0.8781979084014893, -0.00015948931104503572, -0.7426784038543701, -0.16657045483589172, -2.4214816093444824, -0.6332550644874573, -0.006447584833949804, -1.957332968711853, -0.32114753127098083, -0.0017567930044606328, -5.245195097813848e-06, -0.021410873159766197, -0.3123440742492676, -0.0002547178009990603, -0.013440948911011219, -0.11336541175842285, -0.002591111231595278, -0.050673212856054306, -7.784063927829266e-05, -3.933898824470816e-06, -0.007085198070853949, -0.003007058519870043, -7.152555099310121e-07, -0.00431273877620697, -3.85038583772257e-05, -0.00013159839727450162, -0.003157394239678979, -7.748573807475623e-06, -0.022238055244088173, -0.9657630324363708, -0.5249758958816528, -1.4305104514278355e-06, -0.06398230791091919, -6.16293036728166e-05, -0.12821786105632782, -0.0065713501535356045, -0.3968040347099304, -2.365680456161499, -0.006415131036192179, -0.011365078389644623, -1.4667630195617676, -0.1250910758972168, -0.8350312113761902, -0.9804337024688721, -0.035168763250112534, -0.5171584486961365, -0.0001436368766007945, -0.05421427637338638, -0.000495549407787621, -0.1628626137971878, -0.04206207022070885, -4.1483970562694594e-05, -4.8636207793606445e-05, -3.2186455882765586e-06, -0.3783673942089081, -0.2354619801044464, -0.6645163893699646, -7.915183232398704e-05, -0.5230194330215454, -0.13750404119491577, -0.0010161004029214382, -1.4305012882687151e-05, -7.986990567587782e-06, -0.00011038171214750037, -3.373566141817719e-05, -0.14988106489181519, -0.026811106130480766, -0.03643762692809105, -0.02864113636314869, -0.006002732086926699, -4.291525328881107e-06, -0.4623022675514221, -0.007669171784073114, -0.9118558764457703], "finish_reason": "stop"}], "metrics": {"energy": 222.52782566547393, "energy_per_token": 1.1016228993340293, "time": 9.033958, "time_per_token": 0.044722564356435644}}
{"outputs": [{"text": "if feature not in df:\n        raise ValueError(\"The provided feature column not in the DataFrame.\")\n    if target not in df:\n        raise ValueError(\"The provided target column not in the DataFrame.\")\n    regr = LinearRegression().fit(df[[feature]], df[[target]])\n    residuals = abs(df[[feature]].to_numpy() - regr.predict(df[[feature]]))\n    sorted_indices = list(range(df.shape[0]))\n    heapq.heapify(sorted_indices)\n    while len(sorted_indices) > n:\n        heapq.heappop(sorted_indices)\n    return sorted_indices, regr", "tokens": ["if", " feature", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " provided", " feature", " column", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " provided", " target", " column", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "reg", "r", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[[", "target", "]]", ")", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "df", "[[", "feature", "]]", ".", "to", "_", "numpy", "()", " -", " reg", "r", ".", "predict", "(", "df", "[[", "feature", "]]", "))", "\n", "    ", "s", "orted", "_", "indices", " =", " list", "(", "range", "(", "df", ".", "shape", "[", "0", "]))", "\n", "    ", "heap", "q", ".", "heap", "ify", "(", "s", "orted", "_", "indices", ")", "\n", "    ", "while", " len", "(", "s", "orted", "_", "indices", ")", " >", " n", ":", "\n", "        ", "heap", "q", ".", "he", "app", "op", "(", "s", "orted", "_", "indices", ")", "\n", "    ", "return", " sorted", "_", "indices", ",", " reg", "r", "\n", "\n", "if"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -1.7203537225723267, -0.008249967359006405, -0.0034785496536642313, -0.008926840499043465, -0.004852423910051584, -3.8742269680369645e-05, -0.10005289316177368, -1.3489760160446167, -2.224787950515747, -2.5078048706054688, -0.7059417366981506, -0.6337729096412659, -3.20288348197937, -0.5866992473602295, -0.5573288798332214, -0.7894164323806763, -0.0043760016560554504, -0.7166842222213745, -0.02669701725244522, -0.0015174552099779248, -0.0010936238104477525, -0.14015595614910126, -0.06549599766731262, -0.003461918095126748, -0.00013207517622504383, -2.8967437174287625e-05, -0.00019226610311307013, -0.0011815002653747797, -9.822363062994555e-05, -0.00028379703871905804, -0.00039569655200466514, -0.00020489977032411844, -3.302042750874534e-05, -0.000620768463704735, -0.003070760751143098, -0.001476984703913331, -0.008703630417585373, -0.012709098868072033, -0.005596801172941923, -0.001802487880922854, -0.0006106419023126364, -0.002995767630636692, -0.0010116941994056106, -0.0033307571429759264, -0.005603558383882046, -0.000662822334561497, -0.0003430254873819649, -0.0003163314249832183, -1.0174522399902344, -3.2744030952453613, -2.582387685775757, -0.01020971592515707, -0.007167578209191561, -1.3708974620385561e-05, -0.0002733095607254654, -0.049937501549720764, -2.391787052154541, -0.0004430027911439538, -0.008261553943157196, -0.1212468147277832, -0.2581655979156494, -0.010289832949638367, -0.5360453724861145, -0.0068972124718129635, -0.01080731675028801, -1.4071094989776611, -0.0001230164198204875, -0.00030298411729745567, -0.004198427777737379, -0.008392896503210068, -0.09990964829921722, -0.5406962037086487, -0.2674503028392792, -0.05721059441566467, -0.016924357041716576, -2.9145617485046387, -0.019076570868492126, -0.49939075112342834, -0.12177234143018723, -0.30811482667922974, -0.013912484981119633, -1.2810629606246948, -2.1655685901641846, -0.0003890234511345625, -0.07307770103216171, -0.008065629750490189, -0.018713470548391342, -0.035821910947561264, -1.490105023549404e-05, -0.0001299296854995191, -0.022090444341301918, -0.00316226645372808, -0.02486272342503071, -0.0066171810030937195, -0.001879355520941317, -0.0007186928996816278, -0.40944796800613403, -0.09036184847354889, -0.028161661699414253, -2.4120700359344482, -0.009174687787890434, -0.012756414711475372, -0.43507733941078186, -0.010950706899166107, -3.2310562133789062, -0.0066903638653457165, -2.059481143951416, -0.0011478032683953643, -2.7634034156799316, -0.03188493102788925, -0.030542287975549698, -0.0009715604246594012, -0.0008659188752062619, -0.010595731437206268, -0.012606809847056866, -0.005836942233145237, -1.885696530342102, -0.0222866702824831, -9.16677454370074e-05, -0.017169294878840446, -1.549708758830093e-05, -0.0002087136817863211, -0.0019024383509531617, -7.152555099310121e-07, -8.296622399939224e-05, -7.462222856702283e-05, -0.008771579712629318, -0.03358018398284912, -0.0506059005856514, -1.9175280332565308, -0.28201285004615784, -0.0002554328821133822, -0.15899385511875153, -5.006777428206988e-06, -0.0001560327800689265, -0.00010692501382436603, -0.012797373346984386, -0.050994761288166046, -0.04563711956143379, -0.02356242761015892, -0.004381699021905661, -0.001341396477073431, -0.11807715147733688, -6.711257447022945e-05, -3.909988299710676e-05, -0.000379132863599807, -0.0009870424401015043, -0.0017160940915346146, -5.054346183896996e-05, -0.0001674750237725675, -1.9073468138230965e-06, -1.1205610462639015e-05, -8.106198947643861e-06, -0.0003053675754927099, -0.007408526260405779, -0.09292154014110565, -0.180286705493927, -0.040735550224781036, -0.005557325202971697, -2.0265373677830212e-05, -0.27232447266578674, -0.008130784146487713, -2.062299427052494e-05, -0.6494216322898865, -0.018460486084222794, -0.5720211863517761], "finish_reason": "stop"}], "metrics": {"energy": 186.64059127902985, "energy_per_token": 1.0914654460761979, "time": 7.782218, "time_per_token": 0.04551004678362573}}
{"outputs": [{"text": "if not feature in df.columns:\n        raise ValueError(\"feature not in df.columns\")\n    if not target in df.columns:\n        raise ValueError(\"target not in df.columns\")\n\n    X = df[[feature]]\n    Y = df[[target]]\n    model = LinearRegression().fit(X, Y)\n\n    residuals = list(model.resid.values)\n    n_largest_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n\n    return n_largest_indices, model", "tokens": ["if", " not", " feature", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "feature", " not", " in", " df", ".", "columns", "\"", ")", "\n", "    ", "if", " not", " target", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", " not", " in", " df", ".", "columns", "\"", ")", "\n", "\n", "    ", "X", " =", " df", "[[", "feature", "]]", "\n", "    ", "Y", " =", " df", "[[", "target", "]]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", ",", " Y", ")", "\n", "\n", "    ", "res", "idual", "s", " =", " list", "(", "model", ".", "res", "id", ".", "values", ")", "\n", "    ", "n", "_", "largest", "_", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "])", "\n", "\n", "    ", "return", " n", "_", "largest", "_", "indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.1016788482666016, -2.00366473197937, -3.7609593868255615, -0.04748977720737457, -0.007916740141808987, -0.47901803255081177, -0.02356126345694065, -0.46337687969207764, -0.010160508565604687, -0.012174227274954319, -0.01453678123652935, -0.012349920347332954, -0.00012587709352374077, -0.18118558824062347, -1.0182993412017822, -2.7658331394195557, -1.1597245931625366, -0.1223030760884285, -1.3256484270095825, -0.9891904592514038, -0.04119919613003731, -0.09062613546848297, -0.0024120304733514786, -0.001924449927173555, -0.10785768926143646, -0.05822218209505081, -0.002090651309117675, -0.002371120499446988, -0.0005203323671594262, -0.00028010259848088026, -0.0001954841281985864, -5.674201020156033e-05, -0.00030751267331652343, -6.317892984952778e-05, -0.0006223172531463206, -0.00040844682371243834, -0.00040284625720232725, -3.8265450712060556e-05, -0.003185200970619917, -0.0007205988513305783, -0.00883408822119236, -0.0020830377470701933, -0.0004913791781291366, -0.0013523490633815527, -0.0006970121758058667, -0.0018807833548635244, -0.0011304186191409826, -0.0002224197960458696, -0.00020668754586949944, -0.4783130884170532, -0.0017665509367361665, -2.485175371170044, -0.16470779478549957, -0.045452143996953964, -1.029694676399231, -0.015159043483436108, -0.3561856746673584, -0.23239976167678833, -0.0020843464881181717, -2.2361977100372314, -0.0005827635759487748, -0.0017249004449695349, -0.17692376673221588, -0.00014518637908622622, -0.0003773453936446458, -0.005363123957067728, -0.608556866645813, -0.6161864399909973, -0.010411590337753296, -0.006322856526821852, -1.2993727978027891e-05, -0.00019405389321036637, -0.054752979427576065, -0.5776398777961731, -9.202533692587167e-05, -0.00029404606902971864, -0.003508485620841384, -0.010633711703121662, -0.035181306302547455, -0.013588078320026398, -0.0042857942171394825, -0.76835036277771, -0.00047994061606004834, -0.9300801157951355, -0.15688377618789673, -0.06706303358078003, -0.019226498901844025, -2.931870460510254, -0.11910977214574814, -1.5281636714935303, -0.00020656836568377912, -0.12296804785728455, -0.0302731953561306, -2.1721627712249756, -0.8728224039077759, -0.06346231698989868, -0.025086775422096252, -0.12899544835090637, -3.6330370903015137, -0.8277471661567688, -1.223648190498352, -0.8701770901679993, -2.155254364013672, -0.022942345589399338, -0.20130085945129395, -0.0010885033989325166, -0.00015627116954419762, -0.3218727707862854, -4.2914423829643056e-05, -1.1920922133867862e-06, -0.0012301980750635266, -0.010823708958923817, -0.004841390997171402, -0.10041836649179459, -0.0017145470483228564, -0.010481075383722782, -6.16293036728166e-05, -0.0026730303652584553, -1.1205610462639015e-05, -1.9073468138230965e-06, -0.005764882545918226, -0.00024875884992070496, -0.4978688359260559, -0.020467272028326988, -0.8822435736656189, -0.17608623206615448, -0.0026662535965442657, -0.029596734791994095, -0.0003570872650016099, -0.00011014331539627165, -0.0021357364021241665, -0.047673240303993225, -1.077038288116455, -0.00022718709078617394, -0.09549257159233093, -0.2074616551399231, -0.000288087350782007, -4.768360213347478e-06, -5.721882189391181e-05, -0.00014745102089364082, -0.014348075725138187, -0.003091320628300309, -1.3529269695281982, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00021050144277978688, -0.00010132275929208845, -0.17449535429477692], "finish_reason": "stop"}], "metrics": {"energy": 177.64195363235464, "energy_per_token": 1.2002834704888827, "time": 6.5296254, "time_per_token": 0.044119090540540536}}
{"outputs": [{"text": "res = df[target] - (df[feature] * model.coef_ + model.intercept_)\n    res = res.values\n    res = heapq.nlargest(n, range(len(res)), res.__getitem__)\n    return res, model", "tokens": ["res", " =", " df", "[", "target", "]", " -", " (", "df", "[", "feature", "]", " *", " model", ".", "co", "ef", "_", " +", " model", ".", "inter", "cept", "_)", "\n", "    ", "res", " =", " res", ".", "values", "\n", "    ", "res", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "))", ",", " res", ".", "__", "get", "item", "__", ")", "\n", "    ", "return", " res", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.906116485595703, -1.8229538202285767, -2.1053292751312256, -0.7623674273490906, -0.7975362539291382, -0.007632262073457241, -0.32829904556274414, -1.383451223373413, -0.041002415120601654, -0.0062863705679774284, -0.00047994061606004834, -0.10394056141376495, -0.18109546601772308, -0.47028449177742004, -0.01837809570133686, -0.14196155965328217, -0.0013565156841650605, -0.6606970429420471, -0.028049929067492485, -0.0038845096714794636, -0.00011216964776394889, -0.0008931938209570944, -0.00013636612857226282, -0.013481291010975838, -0.010477771982550621, -0.0573008768260479, -0.8137518763542175, -1.5195972919464111, -0.3509252071380615, -0.4936486780643463, -2.401480197906494, -0.5807830095291138, -0.17199982702732086, -1.3039551973342896, -0.8146634697914124, -2.3015031814575195, -0.002289414405822754, -0.0002669931564014405, -0.2202157825231552, -0.00012051333033014089, -1.4305104514278355e-06, -0.005704314913600683, -0.026930635794997215, -0.012408792041242123, -0.8378480076789856, -0.0010006187949329615, -0.05226906016469002, -7.080780778778717e-05, -0.002882970031350851, -0.011611968278884888, -0.00031013446277938783, -1.2222371101379395, -0.0013818725710734725, -0.001825929619371891, -1.7762025890988298e-05, -6.186770770000294e-05, -1.537788011773955e-05, -0.004543338902294636, -0.00877370685338974, -0.06988286972045898, -0.5400266051292419, -0.15198495984077454, -0.11931388825178146, -0.05735569819808006, -2.190516710281372, -2.3841855067985307e-07, -5.245195097813848e-06, -7.855583680793643e-05, -0.00019214690837543458, -0.09547383338212967], "finish_reason": "stop"}], "metrics": {"energy": 105.69358937072757, "energy_per_token": 1.5099084195818224, "time": 2.9521663, "time_per_token": 0.04217380428571429}}
{"outputs": [{"text": "assert isinstance(n, int), \"n should be an int\"\n    assert n >= 1, \"n should be >= 1\"\n\n    assert target in df.columns, \"target not in DataFrame\"\n    assert feature in df.columns, \"feature not in DataFrame\"\n    assert feature != target, \"feature and target cannot be the same column\"\n\n    df_copy = df.copy()\n    df_copy[target] = df_copy[target] / 10\n    df_copy[target] = df_copy[target] / 10\n\n    df_copy[target] = df_copy[target] / 10\n    df_copy[target] = df_copy[target] / 10\n\n    X = df_copy[[feature]].values\n    Y = df_copy[[target]].values\n\n    lr_model = LinearRegression()\n    lr_model.fit(X, Y)\n\n    model = lr_model\n\n    # 1. Get a list of residuals\n    residuals = []\n    for i, y in enumerate(", "tokens": ["assert", " isinstance", "(", "n", ",", " int", ")", ",", " \"", "n", " should", " be", " an", " int", "\"", "\n", "    ", "assert", " n", " >=", " ", "1", ",", " \"", "n", " should", " be", " >=", " ", "1", "\"", "\n", "\n", "    ", "assert", " target", " in", " df", ".", "columns", ",", " \"", "target", " not", " in", " Data", "Frame", "\"", "\n", "    ", "assert", " feature", " in", " df", ".", "columns", ",", " \"", "feature", " not", " in", " Data", "Frame", "\"", "\n", "    ", "assert", " feature", " ", "!", "=", " target", ",", " \"", "feature", " and", " target", " cannot", " be", " the", " same", " column", "\"", "\n", "\n", "    ", "df", "_", "copy", " =", " df", ".", "copy", "()", "\n", "    ", "df", "_", "copy", "[", "target", "]", " =", " df", "_", "copy", "[", "target", "]", " /", " ", "1", "0", "\n", "    ", "df", "_", "copy", "[", "target", "]", " =", " df", "_", "copy", "[", "target", "]", " /", " ", "1", "0", "\n", "\n", "    ", "df", "_", "copy", "[", "target", "]", " =", " df", "_", "copy", "[", "target", "]", " /", " ", "1", "0", "\n", "    ", "df", "_", "copy", "[", "target", "]", " =", " df", "_", "copy", "[", "target", "]", " /", " ", "1", "0", "\n", "\n", "    ", "X", " =", " df", "_", "copy", "[[", "feature", "]]", ".", "values", "\n", "    ", "Y", " =", " df", "_", "copy", "[[", "target", "]]", ".", "values", "\n", "\n", "    ", "lr", "_", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "lr", "_", "model", ".", "fit", "(", "X", ",", " Y", ")", "\n", "\n", "    ", "model", " =", " l", "r", "_", "model", "\n", "\n", "    ", "#", " ", "1", ".", " Get", " a", " list", " of", " residuals", "\n", "    ", "res", "idual", "s", " =", " []", "\n", "    ", "for", " i", ",", " y", " in", " enumerate", "("], "logprobs": [-3.617250442504883, -2.014869451522827, -0.00030417583184316754, -1.7128548622131348, -0.0007998128421604633, -0.014702779240906239, -0.0001991788885788992, -1.2809152603149414, -0.9739058613777161, -0.38565322756767273, -1.63409423828125, -0.006038990803062916, -0.3574538826942444, -1.2481884956359863, -0.23432132601737976, -0.004264784511178732, -0.15011440217494965, -0.26642557978630066, -0.9166705012321472, -0.8280366063117981, -0.006854709703475237, -0.9558485150337219, -0.07697322219610214, -0.02642967365682125, -0.04376265034079552, -0.23361490666866302, -0.04044056683778763, -1.931747555732727, -0.06468664109706879, -0.002966885920614004, -0.013193333521485329, -0.0023517352528870106, -0.8384172916412354, -0.0005598884890787303, -2.521695137023926, -2.906576156616211, -0.039464451372623444, -0.01763368770480156, -0.15272484719753265, -0.026592548936605453, -0.08495941013097763, -0.7653040885925293, -0.5164375901222229, -1.6391736268997192, -0.24728846549987793, -1.723158359527588, -0.010961201041936874, -0.5391577482223511, -0.0005616756388917565, -0.019968319684267044, -0.01931723952293396, -0.017201635986566544, -0.002211864572018385, -0.0005918181850574911, -0.00028355870745144784, -9.226373367710039e-05, -0.0013392536202445626, -0.004912331234663725, -0.026328081265091896, -0.0011382774682715535, -0.0004966217675246298, -0.0020759000908583403, -0.004964406136423349, -0.0024770786985754967, -0.0008604400209151208, -1.6277525424957275, -0.2578091621398926, -1.2877532243728638, -0.056606754660606384, -2.50339189733495e-06, -1.7881233361549675e-05, -0.004022009205073118, -0.011801190674304962, -0.014751292765140533, -0.12606510519981384, -0.6731020212173462, -0.001128751551732421, -1.3659112453460693, -0.005220590624958277, -0.21144601702690125, -0.000847933697514236, -0.7825770378112793, -0.12090081721544266, -0.0012009082129225135, -0.2199377864599228, -0.00036864637513644993, -1.9824059009552002, -1.287127137184143, -1.9896882772445679, -0.007137041538953781, -0.006455994211137295, -0.13754186034202576, -0.031889550387859344, -0.061303071677684784, -0.04566001147031784, -0.3066631555557251, -0.39783400297164917, -0.007400479633361101, -0.02347405068576336, -1.203147053718567, -0.5338184237480164, -0.013126625679433346, -0.11229806393384933, -0.2354961782693863, -0.10806978493928909, -4.792098479811102e-05, -0.11958353966474533, -0.25483134388923645, -0.012849862687289715, -2.4878900051116943, -1.9470727443695068, -0.11671710759401321, -0.027134500443935394, -2.255124568939209, -0.43327122926712036, -0.42824700474739075, -0.005473863333463669, -0.009537489153444767, -0.053302157670259476, -2.7358474731445312, -0.02163814939558506, -0.22687365114688873, -0.26588359475135803, -0.012335320003330708, -3.2782016205601394e-05, -0.021831315010786057, -0.026225201785564423, -0.004604926332831383, -2.466789722442627, -0.1291612982749939, -0.053740132600069046, -0.009877377189695835, -0.18267697095870972, -0.5988361835479736, -0.0003491030656732619, -2.5824718475341797, -0.04190284013748169, -0.08430942893028259, -0.8544085621833801, -0.9094244837760925, -0.022971121594309807, -0.17743182182312012, -0.2118183970451355, -0.017911706119775772, -1.3589766240329482e-05, -0.026292435824871063, -0.07246662676334381, -0.011512159369885921, -1.1581820249557495, -0.093251071870327, -0.01793266460299492, -0.005713797174394131, -0.10472113639116287, -0.47435277700424194, -0.3888748288154602, -0.012652481906116009, -0.017353015020489693, -0.041212696582078934, -0.15034930408000946, -0.0012381753185763955, -0.01972196437418461, -0.006472102366387844, -0.0028786908369511366, -2.622600959512056e-06, -0.0005669178790412843, -0.0045485603623092175, -0.0016986002447083592, -0.010067281313240528, -0.0013143719406798482, -0.005022409372031689, -0.0012285312404856086, -0.016042442992329597, -0.2821897864341736, -0.0003800861886702478, -3.0145976543426514, -0.13675197958946228, -0.03269599750638008, -0.020201178267598152, -6.794906312279636e-06, -0.6599051356315613, -0.02836979366838932, -0.12632517516613007, -1.3292564153671265, -0.303567498922348, -0.18508967757225037, -0.008872253820300102, -2.1548197269439697, -0.0005212855176068842, -0.001968828495591879, -0.0022505212109535933, -2.3841855067985307e-07, -1.1279168128967285, -0.0007146426942199469, -0.002318196464329958, -0.002927900291979313, -0.0034645316191017628, -0.041006531566381454, -0.4166296720504761, -0.00023982033599168062, -2.417837142944336, -2.824129104614258, -0.04883462190628052, -0.006426856853067875, -0.007231608033180237, -2.1815061700181104e-05, -0.00020525732543319464, -0.06285496801137924, -0.3063177168369293, -0.04052219167351723, -0.015703821554780006, -0.002955238102003932, -0.0006786665762774646, -0.005365376826375723, -0.00045789722935296595, -0.0005281960475258529, -0.002113967202603817, -0.009742332622408867, -0.018420696258544922, -0.0061203911900520325, -0.0016162439715117216, -0.2492099106311798, -0.0002698534226510674, -3.436305522918701, -0.21679849922657013, -0.2071005403995514, -0.00013660451804753393, -0.0002456601650919765, -0.0001003691868390888, -0.08439488708972931, -0.522771418094635, -0.0006281548412516713, -2.8108839988708496, -4.301824569702148, -1.7534126043319702, -0.45599016547203064, -3.0223264694213867, -3.443129539489746, -0.6407936811447144, -0.07178783416748047, -1.7754535675048828, -0.8780874609947205, -0.013896849006414413, -0.3627322316169739, -0.12858881056308746, -0.04828885942697525, -0.041783370077610016, -1.5671805143356323, -0.009126848541200161, -0.0935850590467453, -0.11742184311151505, -0.6141598224639893, -1.8362821340560913, -1.6920123100280762, -0.6459051370620728, -0.09036729484796524, -0.0008815216715447605], "finish_reason": "length"}], "metrics": {"energy": 285.98752371215824, "energy_per_token": 1.117138764500618, "time": 11.762995, "time_per_token": 0.04594919921875}}
{"outputs": [{"text": "if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"{feature} or {target} is not in the DataFrame.\")\n\n    regr = LinearRegression()\n    model = regr.fit(df[[feature]], df[target])\n\n    # Note: This is not the correct way to get the largest residual.\n    # Instead, we should use the r2_score to get the largest residual, and then\n    # use it to get the indices of the largest residual.\n    residuals = df[target] - model.predict(df[[feature]])\n    indices = sorted(range(len(residuals)), key=lambda x: residuals[x])[:n]\n    return indices, model", "tokens": ["if", " (", "feature", " not", " in", " df", ".", "columns", ")", " or", " (", "target", " not", " in", " df", ".", "columns", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " or", " {", "target", "}", " is", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "reg", "r", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", " =", " reg", "r", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[", "target", "])", "\n", "\n", "    ", "#", " Note", ":", " This", " is", " not", " the", " correct", " way", " to", " get", " the", " largest", " residual", ".", "\n", "    ", "#", " Instead", ",", " we", " should", " use", " the", " r", "2", "_", "score", " to", " get", " the", " largest", " residual", ",", " and", " then", "\n", "    ", "#", " use", " it", " to", " get", " the", " indices", " of", " the", " largest", " residual", ".", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", " -", " model", ".", "predict", "(", "df", "[[", "feature", "]]", ")", "\n", "    ", "indices", " =", " sorted", "(", "range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " x", ":", " residuals", "[", "x", "])", "[:", "n", "]", "\n", "    ", "return", " indices", ",", " model"], "logprobs": [-1.1016788482666016, -3.016352415084839, -0.3334570527076721, -0.05042535439133644, -0.0004648081958293915, -0.0063348207622766495, -0.22194139659404755, -0.022499410435557365, -0.1386433243751526, -0.07306639850139618, -0.011730855330824852, -0.017940040677785873, -0.0002644904307089746, -4.9470632802695036e-05, -0.00032264748006127775, -0.00012766500003635883, -7.045020902296528e-05, -0.006272628903388977, -0.0057448516599833965, -0.009374882094562054, -0.027396319434046745, -0.006603325251489878, -6.854299135738984e-05, -0.19798476994037628, -1.101475715637207, -0.16949190199375153, -1.008232593536377, -0.015165618620812893, -0.04999590292572975, -1.0851287841796875, -0.02412545680999756, -0.0007800396997481585, -0.0021295505575835705, -1.3866146802902222, -0.03322231397032738, -0.3090239465236664, -0.5457401871681213, -0.6562092304229736, -0.005410077050328255, -1.1055070161819458, -0.036836400628089905, -0.000920825288631022, -0.00266304356046021, -0.513943612575531, -0.0008897398365661502, -2.346353054046631, -2.8219966888427734, -0.010312486439943314, -0.004915297031402588, -1.2159273865108844e-05, -0.00018046658078674227, -0.04127766937017441, -0.08894076198339462, -0.06103271245956421, -3.1196188926696777, -0.032515764236450195, -0.039459869265556335, -6.69933797325939e-05, -0.038147445768117905, -0.0003296785580459982, -0.011785050854086876, -0.1343129277229309, -0.4750843048095703, -0.012804670259356499, -0.3583090305328369, -0.009564882144331932, -0.006081646773964167, -0.1494288444519043, -0.00016509123088326305, -0.0020192726515233517, -0.006851394660770893, -0.730684220790863, -0.0002674698771443218, -2.342639923095703, -5.360876083374023, -0.41565296053886414, -3.0464961528778076, -1.4843136072158813, -1.826407551765442, -1.6490895748138428, -1.9465408325195312, -0.42804548144340515, -0.10806892812252045, -1.6102150678634644, -0.325897216796875, -2.170463800430298, -2.429924488067627, -1.016936182975769, -0.25144392251968384, -0.004437836818397045, -0.4206679165363312, -1.9103448390960693, -0.16974946856498718, -1.4580403566360474, -0.5798507928848267, -0.831144392490387, -0.8592230081558228, -4.799203872680664, -0.8684942126274109, -0.3272843062877655, -0.0015292390016838908, -3.061196804046631, -1.1049234867095947, -0.0882854014635086, -0.626006543636322, -0.1940218210220337, -2.9004452228546143, -2.761699914932251, -1.1777654886245728, -1.472483515739441, -0.0004704084130935371, -0.0001411338453181088, -2.0979080200195312, -3.0626769065856934, -0.21403716504573822, -1.373781442642212, -0.07678820937871933, -0.7101799249649048, -0.562971293926239, -0.059910569339990616, -0.7548545002937317, -1.2794142961502075, -0.13340720534324646, -0.1891915202140808, -0.045589741319417953, -0.9131882190704346, -0.07528113573789597, -0.04663624241948128, -0.010900122113525867, -2.0561163425445557, -1.4838056564331055, -0.14206808805465698, -0.004467150662094355, -0.11779268085956573, -0.18212845921516418, -0.00018523407925385982, -0.008661913685500622, -0.0014321081107482314, -0.004830001853406429, -0.0795304924249649, -0.0006101653561927378, -0.00020549570035655051, -0.0004532501916401088, -0.00964068342000246, -0.04521734267473221, -1.285455584526062, -0.04178760200738907, -2.515744209289551, -0.015384573489427567, -0.2312280833721161, -0.0001045410826918669, -0.03574853017926216, -0.0001541257370263338, -0.11854822188615799, -0.00016246906307060272, -8.583032467868179e-06, -0.0012268644059076905, -4.6967357775429264e-05, -0.014643102884292603, -0.005300634540617466, -0.2789047062397003, -0.4642760157585144, -0.00041130665340460837, -0.09701777249574661, -0.04320874810218811, -0.00016258825780823827, -0.20377673208713531, -1.3408803939819336, -0.011007302440702915, -0.006984698586165905, -0.0029771076515316963, -1.4448726177215576, -0.08100952208042145, -0.033865902572870255, -0.01596008613705635, -0.010461256839334965], "finish_reason": "stop"}], "metrics": {"energy": 209.21314691162107, "energy_per_token": 1.188711061997847, "time": 8.394678, "time_per_token": 0.04769703409090909}}
{"outputs": [{"text": "if not (feature in df and target in df):\n        raise ValueError(\"Columns not found in DataFrame\")\n\n    model = LinearRegression()\n    res = []\n\n    for i in range(len(df)):\n        X = np.array([df.loc[i, feature]])\n        y = np.array([df.loc[i, target]])\n        model.fit(X, y)\n        res.append(model.resid[i])\n\n    indices = heapq.nlargest(n, range(len(res)), key=res.__getitem__)\n    return indices, model", "tokens": ["if", " not", " (", "feature", " in", " df", " and", " target", " in", " df", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Columns", " not", " found", " in", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "res", " =", " []", "\n", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "df", "))", ":", "\n", "        ", "X", " =", " np", ".", "array", "([", "df", ".", "loc", "[", "i", ",", " feature", "]]", ")", "\n", "        ", "y", " =", " np", ".", "array", "([", "df", ".", "loc", "[", "i", ",", " target", "]]", ")", "\n", "        ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "        ", "res", ".", "append", "(", "model", ".", "res", "id", "[", "i", "])", "\n", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "))", ",", " key", "=", "res", ".", "__", "get", "item", "__", ")", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "if"], "logprobs": [-1.1016788482666016, -2.00366473197937, -1.5973470211029053, -0.41832235455513, -0.05700342357158661, -0.006531912833452225, -1.5950214862823486, -0.0122174471616745, -0.0004812512779608369, -0.00016306500765495002, -0.02378281205892563, -0.009427198208868504, -0.006311602890491486, -0.020688455551862717, -0.005011615343391895, -5.769562994828448e-05, -0.15762025117874146, -0.5844950675964355, -2.412493944168091, -1.165271520614624, -0.6071794033050537, -0.3630327880382538, -0.6754415035247803, -0.0045929416082799435, -0.6421775221824646, -0.0012366274604573846, -0.003082169685512781, -0.457823783159256, -0.0009701313101686537, -1.8773925304412842, -0.009724624454975128, -0.006082831881940365, -1.2874520507466514e-05, -0.00018046658078674227, -0.04492834955453873, -0.15730515122413635, -0.18813371658325195, -2.7836806774139404, -2.833314895629883, -0.35854166746139526, -0.011398550122976303, -0.9143441319465637, -0.0003634030872490257, -0.5821185111999512, -0.5188313722610474, -0.2005189061164856, -0.0905834510922432, -0.0032794286962598562, -1.0550158023834229, -0.00018952481332235038, -0.002279185689985752, -0.44196611642837524, -0.0010082405060529709, -0.004839611239731312, -0.012138072401285172, -3.2906689643859863, -0.07282070815563202, -1.910658597946167, -3.0397906812140718e-05, -0.19615106284618378, -0.2922475039958954, -0.9879456162452698, -1.0863633155822754, -0.5262402296066284, -0.013260859996080399, -0.014216690324246883, -0.25226449966430664, -0.06125855818390846, -1.1230432987213135, -0.02355404570698738, -1.0981206893920898, -0.004140020813792944, -0.31319567561149597, -0.0012811556225642562, -0.07997066527605057, -0.00020466140995267779, -0.0010342017048969865, -0.019337467849254608, -0.0009591746493242681, -0.0008301864145323634, -0.0002637753786984831, -4.362964682513848e-05, -6.83045873302035e-05, -0.00038961926475167274, -0.0012524626217782497, -0.0010930284624919295, -0.00039736481267027557, -0.002405846491456032, -0.23401327431201935, -0.10251681506633759, -0.006785564590245485, -0.0008247073274105787, -0.0029006809927523136, -0.0022479044273495674, -0.02905866503715515, -0.020789338275790215, -0.002605617046356201, -0.0018111744429916143, -0.13769902288913727, -0.27309587597846985, -0.04134984686970711, -0.0021506056655198336, -0.4065672755241394, -0.535571277141571, -0.007599846459925175, -1.1258461475372314, -0.006883952766656876, -1.3969799280166626, -0.6175843477249146, -0.012646125629544258, -0.004071162547916174, -0.15301591157913208, -0.002439382253214717, -1.0745896100997925, -0.03168619051575661, -0.43232542276382446, -0.0027585094794631004, -0.00036423723213374615, -0.30051249265670776, -0.00010966652916977182, -1.9073468138230965e-06, -0.001189477858133614, -0.008217807859182358, -0.005359922535717487, -0.18262483179569244, -0.0010609956225380301, -0.0035195332020521164, -5.9960475482512265e-05, -0.1489221751689911, -0.004249590449035168, -0.00017617580306250602, -0.5485028624534607, -0.013155568391084671, -0.48064202070236206, -9.953480184776708e-05, -0.002097075106576085, -4.768360213347478e-06, -1.9073304429184645e-05, -3.6954811548639555e-06, -0.008007684722542763, -0.004860490560531616, -0.558603823184967, -0.21958565711975098, -0.08141893893480301, -0.026575369760394096, -0.003158226143568754, -0.5461904406547546, -0.012539591640233994, -0.7897287607192993], "finish_reason": "stop"}], "metrics": {"energy": 197.9380019531249, "energy_per_token": 1.328442966128355, "time": 6.7414966, "time_per_token": 0.04524494362416107}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} columns are not in the DataFrame.\")\n\n    # fit linear regression model\n    model = LinearRegression()\n    model.fit(df[feature].values.reshape(-1, 1), df[target])\n    residuals = df[target].values.reshape(-1, 1) - model.predict(df[feature].values.reshape(-1, 1))\n    residuals_ordered = (-residuals).argsort()[:n]\n    return residuals_ordered, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " and", " {", "target", "}", " columns", " are", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " fit", " linear", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", " -", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "res", "idual", "s", "_", "ordered", " =", " (-", "res", "idual", "s", ")", ".", "args", "ort", "()", "[:", "n", "]", "\n", "    ", "return", " residuals", "_", "ordered", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.7249426245689392, -0.008477297611534595, -0.00027104519540444016, -0.00011562632425921038, -0.00046456989366561174, -0.00046695294440723956, -0.00011693747364915907, -0.002374569419771433, -0.00264711189083755, -0.0049677276983857155, -0.015109023079276085, -0.003703760216012597, -4.625213477993384e-05, -0.14050230383872986, -1.009451985359192, -0.118706613779068, -1.2691816091537476, -0.014309649355709553, -0.038667116314172745, -0.3925773501396179, -0.15765629708766937, -0.00035506143467500806, -0.0018210508860647678, -2.0896756649017334, -0.7006314396858215, -0.14730998873710632, -0.1127929538488388, -0.2900446653366089, -1.1145001649856567, -0.0028059417381882668, -0.9149764180183411, -0.017161091789603233, -0.0006772369961254299, -0.001053255284205079, -0.4312650263309479, -0.0006555553991347551, -1.895606517791748, -2.7466769218444824, -0.8218753933906555, -0.05191238224506378, -0.10753775388002396, -0.21634386479854584, -0.001129108713939786, -0.274575799703598, -0.002901156432926655, -0.0034559781197458506, -1.549708758830093e-05, -8.451581379631534e-05, -0.027508357539772987, -0.2847103774547577, -0.003678580978885293, -0.020320450887084007, -0.0012843701988458633, -7.068861305015162e-05, -0.13138309121131897, -0.05504004657268524, -1.3598614931106567, -0.021637681871652603, -0.0046623568050563335, -0.09484745562076569, -0.11013271659612656, -0.009194768033921719, -0.004735089838504791, -2.264974000354414e-06, -0.028826121240854263, -2.1219027985353023e-05, -1.8000440832111053e-05, -0.04067099839448929, -4.410734163684538e-06, -2.169585604860913e-05, -0.0003034608089365065, -0.010466447100043297, -0.0007327494095079601, -4.3748852476710454e-05, -2.4744491577148438, -0.005263281520456076, -1.6390070915222168, -0.7529820799827576, -0.14613161981105804, -0.04103204607963562, -0.006107595283538103, -1.2576504945755005, -0.45483869314193726, -0.3401542901992798, -0.023605158552527428, -0.1615806370973587, -0.24426771700382233, -1.5292320251464844, -0.14926661550998688, -1.311301275563892e-06, -0.010755308903753757, -1.8000440832111053e-05, -0.09813006967306137, -0.009429441764950752, -0.00012003655137959868, -0.0029702140018343925, -0.018518999218940735, -0.08929090946912766, -6.174850568640977e-05, -0.007041045930236578, -0.005696610081940889, -0.11770249903202057, -0.0021613112185150385, -0.00034850722295232117, -0.04507000744342804, -0.0011143434094265103, -0.0033079448621720076, -0.0031499075703322887, -0.001046467456035316, -4.768370445162873e-07, -0.0010333680547773838, -2.2172682292875834e-05, -4.95898348162882e-05, -0.00284576416015625, -7.629365427419543e-06, -0.00047350639943033457, -0.03113861195743084, -1.1723664999008179, -1.5793565511703491, -0.05661813169717789, -0.07522618770599365, -1.3381760120391846, -3.1037020683288574, -0.024272186681628227, -3.694603204727173, -0.029092244803905487, -4.51792984677013e-05, -3.099436753473128e-06, -0.055610667914152145, -0.0015745873097330332, -0.1427793651819229, -2.288792165927589e-05, -0.13973413407802582, -1.2798831462860107, -0.00948954839259386, -0.0032450894359499216, -0.07498832046985626, -0.7055595517158508, -0.5616669654846191, -0.38519081473350525, -0.001639452064409852, -2.288792165927589e-05, -0.06431301683187485, -0.0012946089264005423, -1.4651950597763062, -3.576278118089249e-07, -2.3841830625315197e-06, -4.434487345861271e-05, -0.00011288482346571982, -0.158822700381279], "finish_reason": "stop"}], "metrics": {"energy": 203.18847405433658, "energy_per_token": 1.294194102256921, "time": 7.994044, "time_per_token": 0.050917477707006366}}
{"outputs": [{"text": "if feature not in df:\n        raise ValueError(f\"{feature} not in df.\")\n    if target not in df:\n        raise ValueError(f\"{target} not in df.\")\n\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n\n    model = LinearRegression()\n    model.fit(X, y)\n\n    residuals = np.array([(r, i) for i, r in enumerate(np.abs(y-model.predict(X)))])\n\n    indices = heapq.nsmallest(n, residuals, key=lambda x: x[0])\n    return list(map(lambda x: x[1], indices)), model", "tokens": ["if", " feature", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " not", " in", " df", ".", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "target", "}", " not", " in", " df", ".", "\"", ")", "\n", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "res", "idual", "s", " =", " np", ".", "array", "([", "(", "r", ",", " i", ")", " for", " i", ",", " r", " in", " enumerate", "(", "np", ".", "abs", "(", "y", "-", "model", ".", "predict", "(", "X", "))", ")]", ")", "\n", "\n", "    ", "indices", " =", " heap", "q", ".", "nsmall", "est", "(", "n", ",", " residuals", ",", " key", "=", "lambda", " x", ":", " x", "[", "0", "])", "\n", "    ", "return", " list", "(", "map", "(", "lambda", " x", ":", " x", "[", "1", "]", ",", " indices", "))", ",", " model"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -1.7203537225723267, -0.008249967359006405, -0.0034785496536642313, -0.008926840499043465, -0.004852423910051584, -3.8742269680369645e-05, -0.10005289316177368, -0.350698322057724, -0.12112980335950851, -1.3296523094177246, -0.0018586517544463277, -0.05229293182492256, -0.7347560524940491, -0.22856231033802032, -1.0556586980819702, -2.2509305477142334, -0.10358970612287521, -0.0003972456615883857, -0.0023185533937066793, -0.09768668562173843, -0.03596716374158859, -0.00263450900092721, -0.00015138434537220746, -2.109982233378105e-05, -0.00015448330668732524, -0.0010425376240164042, -0.00023040501400828362, -0.00018094333063345402, -0.0003626880934461951, -0.00023326536756940186, -4.9470632802695036e-05, -0.0001833270798670128, -0.0008928364841267467, -0.0004552758182398975, -0.0008247073274105787, -0.008746527135372162, -0.0002329078270122409, -0.0005942009738646448, -0.00026770823751576245, -0.0018772137118503451, -0.01120347622781992, -0.000726316764485091, -0.00023469554434996098, -0.00030501006403937936, -0.5042721629142761, -0.000954649003688246, -2.156994581222534, -0.13057106733322144, -0.03729094937443733, -0.819385290145874, -0.04878058284521103, -0.005337986163794994, -0.48884662985801697, -0.30814066529273987, -0.2629643976688385, -0.01933220587670803, -4.172316494077677e-06, -0.11085203289985657, -3.659658250398934e-05, -0.00014995403762441128, -2.8445825576782227, -0.0002094287920044735, -0.016332043334841728, -0.0025381988380104303, -0.12546570599079132, -0.0006515049026347697, -0.0016439745668321848, -0.0014381790533661842, -0.00014911970356479287, -0.00019143179815728217, -0.03467317670583725, -0.015544210560619831, -0.09409569948911667, -0.5725942850112915, -0.0003233625029679388, -0.4803692102432251, -0.008148521184921265, -0.006322974804788828, -1.1920858014491387e-05, -0.00015496007108595222, -0.040121790021657944, -0.5200416445732117, -0.008863510563969612, -0.026446392759680748, -0.0018184330547228456, -0.0001911934232339263, -0.0008686583023518324, -0.0014244896592572331, -0.005267906002700329, -0.1299859881401062, -0.0017876134952530265, -0.001678963890299201, -0.2316659837961197, -0.0002964295563288033, -0.6375923752784729, -0.16352789103984833, -0.04272055998444557, -0.0077822585590183735, -1.0954031944274902, -2.3364747903542593e-05, -2.178678035736084, -0.6151175498962402, -2.0038609504699707, -2.906485080718994, -0.21761059761047363, -0.510395348072052, -0.023260587826371193, -0.060511521995067596, -0.23546038568019867, -0.0007877822499722242, -0.13242484629154205, -0.008567718788981438, -0.05648069083690643, -0.0017890414455905557, -1.3409940004348755, -0.00017808281700126827, -0.2074626237154007, -0.013459768146276474, -0.2263765186071396, -1.4374969005584717, -0.04170950874686241, -9.953480184776708e-05, -0.00574971130117774, -0.0012821081327274442, -0.004969625733792782, -0.02066183276474476, -0.01602906920015812, -0.011981777846813202, -0.07311870157718658, -1.6010464429855347, -0.00023493390472140163, -1.1554913520812988, -0.05519630014896393, -1.177760124206543, -0.0004430027911439538, -0.00018737945356406271, -0.4175986349582672, -9.059865078597795e-06, -0.003366638207808137, -0.009342759847640991, -0.002973779570311308, -0.026438266038894653, -0.06120249256491661, -0.021600468084216118, -0.021417642012238503, -0.015537755563855171, -0.309072881937027, -0.004484833683818579, -0.10336150228977203, -0.0011728082317858934, -0.0018641252536326647, -0.005997755099087954, -0.09618871659040451, -0.4673997163772583, -1.1160073280334473, -2.2671127319335938, -0.023713430389761925, -0.38568320870399475, -0.0004689785710070282, -0.006649272982031107, -0.10915298014879227, -0.0036535197868943214, -0.05546485632658005, -0.0017579830018803477, -0.0006095697171986103, -0.0003778220561798662, -0.0012323412811383605, -0.011120484210550785, -0.0013229437172412872, -0.0759439766407013, -0.004149874206632376], "finish_reason": "stop"}], "metrics": {"energy": 223.25868350124358, "energy_per_token": 1.2685152471661567, "time": 9.034268, "time_per_token": 0.051331068181818186}}
{"outputs": [{"text": "if not isinstance(df, DataFrame):\n        raise ValueError('df must be a DataFrame')\n    if feature not in df.columns:\n        raise ValueError('feature column not in the provided DataFrame')\n    if target not in df.columns:\n        raise ValueError('target column not in the provided DataFrame')\n    model = LinearRegression().fit(df[feature], df[target])\n    residuals = np.abs(df[target] - model.predict(df[feature]))\n    indices = np.argsort(-residuals)[:n]\n    return indices, model", "tokens": ["if", " not", " isinstance", "(", "df", ",", " Data", "Frame", "):", "\n", "        ", "raise", " Value", "Error", "('", "df", " must", " be", " a", " Data", "Frame", "')", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "feature", " column", " not", " in", " the", " provided", " Data", "Frame", "')", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "target", " column", " not", " in", " the", " provided", " Data", "Frame", "')", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[", "feature", "]", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " np", ".", "abs", "(", "df", "[", "target", "]", " -", " model", ".", "predict", "(", "df", "[", "feature", "]))", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(-", "res", "idual", "s", ")", "[:", "n", "]", "\n", "    ", "return", " indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.1016788482666016, -2.00366473197937, -0.8276383280754089, -0.0003916450368706137, -0.3544120192527771, -0.0045642247423529625, -2.2500433921813965, -0.0002928543253801763, -0.255783349275589, -0.006670351605862379, -0.00450631370767951, -0.031915415078401566, -1.2372597455978394, -0.0006516240537166595, -1.9316978454589844, -0.5560891032218933, -0.5308810472488403, -0.002792390063405037, -0.1800820231437683, -0.7177551984786987, -0.005906508769840002, -0.4246188700199127, -0.0007413261337205768, -0.6354843378067017, -0.19123949110507965, -0.44733086228370667, -0.011202061548829079, -6.496695277746767e-05, -0.006448650732636452, -0.28413286805152893, -0.032994311302900314, -0.13048109412193298, -0.0009557208395563066, -0.0007282227743417025, -0.0027473345398902893, -0.0044701178558170795, -1.1920858014491387e-05, -1.8487787246704102, -0.8180366158485413, -1.894007682800293, -0.42341506481170654, -0.6525240540504456, -2.4723737239837646, -1.5014184713363647, -0.056591883301734924, -0.00162743148393929, -0.07721657305955887, -0.00011753345461329445, -0.005539187230169773, -0.008746763691306114, -0.004742564167827368, -7.331102824537084e-05, -2.4199192921514623e-05, -0.00013886917440686375, -0.00010740180005086586, -3.838465272565372e-05, -0.000179036331246607, -0.000188332938705571, -0.00024041623692028224, -0.00025102324434556067, -0.0001510267611593008, -5.471556869451888e-05, -0.00150079105515033, -0.004029607865959406, -0.002333657816052437, -0.000695344409905374, -0.0006793813081458211, -0.0010552796302363276, -0.001468295231461525, -0.0007694382802583277, -0.0015653035370633006, -0.0006912940880283713, -0.0007090438157320023, -0.8831464052200317, -2.5176217555999756, -0.01308638695627451, -0.017790038138628006, -2.5152843591058627e-05, -0.0005611990345641971, -0.04178668558597565, -1.4153869152069092, -0.00017808281700126827, -0.003548398846760392, -0.11968031525611877, -0.6200695633888245, -0.01855890266597271, -0.009190988726913929, -0.6215315461158752, -0.006349627394229174, -0.0006404255982488394, -3.540453326422721e-05, -0.0019446763908490539, -0.00434526102617383, -0.06618766486644745, -0.6316768527030945, -0.17742642760276794, -0.04268788918852806, -0.01033785380423069, -2.054858684539795, -5.090107151772827e-05, -0.4470105767250061, -0.02211691252887249, -0.8772494196891785, -0.13222402334213257, -0.7734522819519043, -0.01716296561062336, -0.03228183090686798, -0.0786929726600647, -0.00010823617776622996, -0.01204102486371994, -0.0006051616510376334, -0.0018924438627436757, -0.003173674223944545, -0.00022659118985757232, -0.03405534103512764, -0.02617805451154709, -0.01291988417506218, -0.44441646337509155, -0.027333684265613556, -0.2279462367296219, -0.0004928089329041541, -0.07315891981124878, -0.0004107108688913286, -1.5079296827316284, -0.004941512830555439, -5.173549288883805e-05, -9.536738616588991e-07, -0.05993818864226341, -0.1045115515589714, -0.008434980176389217, -0.002889388706535101, -0.040023986250162125, -0.058041542768478394, -0.037917349487543106, -0.09466669708490372, -0.024159669876098633, -0.0017114529618993402, -1.3845988512039185, -1.1920928244535389e-07, -3.933898824470816e-06, -0.0001954841281985864, -0.00012408917245920748, -0.17215397953987122], "finish_reason": "stop"}], "metrics": {"energy": 157.35177820587163, "energy_per_token": 1.1003620853557456, "time": 6.303795, "time_per_token": 0.044082482517482514}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(\"Feature not in DataFrame columns\")\n    if target not in df.columns:\n        raise ValueError(\"Target not in DataFrame columns\")\n\n    model = LinearRegression()\n    model.fit(df[[feature]], df[target])\n    indices = model.predict(df[[feature]]).argsort()[::-1]\n    return indices[:n], model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Feature", " not", " in", " Data", "Frame", " columns", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Target", " not", " in", " Data", "Frame", " columns", "\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[", "target", "])", "\n", "    ", "indices", " =", " model", ".", "predict", "(", "df", "[[", "feature", "]]", ")", ".", "args", "ort", "()[", "::", "-", "1", "]", "\n", "    ", "return", " indices", "[:", "n", "]", ",", " model"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.6697954535484314, -0.008121561259031296, -0.003965848125517368, -0.009986437857151031, -0.00502774678170681, -2.8132995794294402e-05, -0.08009831607341766, -1.536332607269287, -0.7839462161064148, -1.5418334007263184, -0.2103765308856964, -0.7596795558929443, -0.0037401027511805296, -1.735431432723999, -0.540889322757721, -0.001556019764393568, -0.001679201959632337, -0.09667897969484329, -0.053697992116212845, -0.002380515681579709, -0.00012373158824630082, -1.9550132492440753e-05, -0.0001958416833076626, -0.0001802282058633864, -4.625213477993384e-05, -0.00014399446081370115, -7.176141662057489e-05, -0.00027450130437500775, -0.0005068686441518366, -0.00017474555352237076, -3.93382906622719e-05, -0.0007091629668138921, -0.0007803970365785062, -0.008356486447155476, -0.004596738610416651, -0.000794214429333806, -0.0014261561445891857, -0.0022808508947491646, -0.0015995815629139543, -0.0017395378090441227, -0.00020716428116429597, -0.00019905969384126365, -0.43927818536758423, -0.0010372978867962956, -2.0237789154052734, -0.009771963581442833, -0.0066081807017326355, -1.490105023549404e-05, -8.67805938469246e-05, -0.04916016757488251, -0.18673628568649292, -0.1406279355287552, -0.3620469868183136, -0.006252608262002468, -0.00024291902082040906, -0.17768654227256775, -0.06966385990381241, -0.37741711735725403, -0.01027543842792511, -0.49375542998313904, -0.013447417877614498, -0.006833871826529503, -0.19010065495967865, -8.880697714630514e-05, -0.0016487350221723318, -0.005614227149635553, -0.6282195448875427, -2.489257574081421, -0.021127641201019287, -2.27541446685791, -0.0008865240379236639, -0.7066529393196106, -0.05128166452050209, -0.019431354478001595, -0.032299838960170746, -0.0022639615926891565, -0.005793683230876923, -0.03876035287976265, -0.35581567883491516, -0.06224231421947479, -0.00012206286191940308, -1.346693515777588, -0.015710745006799698, -0.0029403807129710913, -9.42901024245657e-05, -0.6155019998550415, -0.09114079177379608, -0.33355894684791565, -0.21183758974075317, -0.06560518592596054, -0.07808322459459305, -0.009679998271167278, -0.017467355355620384, -0.011943024583160877, -0.002319623716175556], "finish_reason": "stop"}], "metrics": {"energy": 147.68838498306275, "energy_per_token": 1.4479253429712033, "time": 4.8332005, "time_per_token": 0.04738431862745098}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(f\"Column {feature} not found in dataframe.\")\n    if target not in df.columns:\n        raise ValueError(f\"Column {target} not found in dataframe.\")\n    df[target] = df[target].astype(np.float64)\n    df[feature] = df[feature].astype(np.float64)\n\n    # Sort by target column and return indices of top n elements\n    sorted_indices = np.argsort(-df.groupby(feature)[target].mean())[:n]\n    model = LinearRegression().fit(df[feature].values.reshape(-1, 1), df[target].values)\n\n    return sorted_indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " {", "feature", "}", " not", " found", " in", " data", "frame", ".", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " {", "target", "}", " not", " found", " in", " data", "frame", ".", "\"", ")", "\n", "    ", "df", "[", "target", "]", " =", " df", "[", "target", "]", ".", "ast", "ype", "(", "np", ".", "float", "6", "4", ")", "\n", "    ", "df", "[", "feature", "]", " =", " df", "[", "feature", "]", ".", "ast", "ype", "(", "np", ".", "float", "6", "4", ")", "\n", "\n", "    ", "#", " Sort", " by", " target", " column", " and", " return", " indices", " of", " top", " n", " elements", "\n", "    ", "s", "orted", "_", "indices", " =", " np", ".", "args", "ort", "(-", "df", ".", "group", "by", "(", "feature", ")[", "target", "]", ".", "mean", "())", "[:", "n", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "values", ")", "\n", "\n", "    ", "return", " sorted", "_", "indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.6697954535484314, -0.008121561259031296, -0.003965848125517368, -0.009986437857151031, -0.00502774678170681, -2.8132995794294402e-05, -0.08009831607341766, -0.29946085810661316, -0.11065248399972916, -2.2770371437072754, -0.6347432732582092, -0.001918738940730691, -0.09109867364168167, -0.219302698969841, -0.8148736357688904, -0.17910832166671753, -2.7249152660369873, -0.09659380465745926, -0.6392630934715271, -0.011363428086042404, -0.00032574593205936253, -0.0010988633148372173, -0.11696985363960266, -0.040177445858716965, -0.0031516901217401028, -0.00010334911348763853, -2.312633478140924e-05, -0.0002177716523874551, -0.00016807096835691482, -4.3987260141875595e-05, -0.00018809456378221512, -6.937739817658439e-05, -0.0002915434306487441, -0.0004469349514693022, -0.00017486473370809108, -2.8013790142722428e-05, -0.00017152745567727834, -0.0011625682236626744, -0.0006028980133123696, -0.0014425835106521845, -0.001116129569709301, -0.005871904082596302, -0.00021479207498487085, -0.0005075835506431758, -0.0003387354372534901, -0.00044467096449807286, -0.0008335214806720614, -0.0006005152827128768, -0.0036140859592705965, -0.0006113567505963147, -0.0002252801787108183, -0.00022182388056535274, -1.1575816869735718, -2.2082700729370117, -1.3930788040161133, -0.5891627073287964, -0.04630463942885399, -0.18719826638698578, -0.22561775147914886, -0.07668708264827728, -0.28019583225250244, -0.03347977623343468, -0.3497427999973297, -0.17478196322917938, -3.6954195820726454e-05, -0.110078364610672, -1.5656722784042358, -6.615896563744172e-05, -0.07082187384366989, -0.3173271417617798, -1.2874520507466514e-05, -0.005624895915389061, -0.02580927684903145, -0.22846423089504242, -0.9232950210571289, -0.052612826228141785, -0.10137588530778885, -0.0014559156261384487, -0.014388969168066978, -0.0005878866068087518, -0.0003233625029679388, -0.0009764432325027883, -2.3841574147809297e-05, -0.0010717130498960614, -0.0007758706342428923, -2.7418097943154862e-06, -0.00020811776630580425, -0.0006691362359561026, -0.00013314791431184858, -0.007834894582629204, -0.0005063920398242772, -2.658331868587993e-05, -0.00018737945356406271, -0.00031442465842701495, -1.4729499816894531, -0.0002836778585333377, -2.060892105102539, -3.606977939605713, -2.668037176132202, -1.2150616645812988, -1.086519718170166, -1.7229275703430176, -2.002096176147461, -1.7753404378890991, -0.3980248272418976, -1.0756170749664307, -0.15670788288116455, -2.3723702430725098, -0.1652698814868927, -0.0038371284026652575, -1.233985185623169, -0.009513872675597668, -0.001856866991147399, -0.567842423915863, -0.0030051569920033216, -0.6540994644165039, -1.490105023549404e-05, -0.05119604617357254, -0.00019202772818971425, -1.4173932075500488, -0.03997931629419327, -1.974244236946106, -2.2137558460235596, -0.00044526674901135266, -0.05115798860788345, -1.2405356168746948, -0.13831554353237152, -0.0030695723835378885, -0.008889386430382729, -0.012201666831970215, -0.5027976036071777, -0.4248441755771637, -0.7757915258407593, -0.007449112366884947, -0.0033432324416935444, -0.03509233891963959, -0.37350767850875854, -1.9923993349075317, -0.006620259955525398, -0.00663920771330595, -1.0847986231965479e-05, -0.00016902448260225356, -0.05240153521299362, -0.7978400588035583, -9.035655966727063e-05, -0.0017419178038835526, -0.3154521882534027, -0.8134319186210632, -0.00975437369197607, -0.5620225667953491, -0.1254485696554184, -0.6743561029434204, -1.7076327800750732, -0.00978860817849636, -2.145764938177308e-06, -0.028997639194130898, -1.728519782773219e-05, -1.3112935448589269e-05, -0.039382971823215485, -1.2516897186287679e-05, -0.00020382710499688983, -0.0004659997357521206, -0.04955344647169113, -0.019748728722333908, -0.00019214690837543458, -0.03564419969916344, -0.00015627116954419762, -0.0024706574622541666, -0.4177667200565338, -0.00275957933627069, -1.1806446313858032, -0.00032085992279462516, -0.03640647605061531, -0.05689498037099838, -0.0004059444472659379, -1.4662635294371285e-05, -0.05339132621884346, -0.001042894902639091, -1.596368670463562, -2.3841855067985307e-07, -3.3378546504536644e-06, -0.00017426878912374377, -0.0001012035645544529, -0.2040909379720688], "finish_reason": "stop"}], "metrics": {"energy": 226.4411493721008, "energy_per_token": 1.1855557558748733, "time": 8.6137085, "time_per_token": 0.0450979502617801}}
{"outputs": [{"text": "# Task 1\n    residuals = df[feature] - df[target]\n    regression = LinearRegression()\n    regression.fit(df[[feature]], df[target])\n\n    # Task 2\n    indices = [i for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if residuals[indices[j]] > residuals[indices[i]]:\n                indices[i], indices[j] = indices[j], indices[i]\n\n    return indices[0:n], regression", "tokens": ["#", " Task", " ", "1", "\n", "    ", "res", "idual", "s", " =", " df", "[", "feature", "]", " -", " df", "[", "target", "]", "\n", "    ", "reg", "ression", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "reg", "ression", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[", "target", "])", "\n", "\n", "    ", "#", " Task", " ", "2", "\n", "    ", "indices", " =", " [", "i", " for", " i", " in", " range", "(", "n", ")]", "\n", "    ", "for", " i", " in", " range", "(", "1", ",", " n", "):", "\n", "        ", "for", " j", " in", " range", "(", "i", "):", "\n", "            ", "if", " residuals", "[", "indices", "[", "j", "]]", " >", " residuals", "[", "indices", "[", "i", "]]", ":", "\n", "                ", "indices", "[", "i", "]", ",", " indices", "[", "j", "]", " =", " indices", "[", "j", "]", ",", " indices", "[", "i", "]", "\n", "\n", "    ", "return", " indices", "[", "0", ":", "n", "]", ",", " regression", "\n", "\n", "def"], "logprobs": [-1.9369316101074219, -4.3243560791015625, -0.5575361251831055, -0.14823856949806213, -0.8565980195999146, -0.08237549662590027, -3.7835826873779297, -0.3174043893814087, -0.13510838150978088, -0.13292762637138367, -2.8493497371673584, -0.7301856875419617, -1.2025638818740845, -0.01828574761748314, -0.2539195418357849, -0.041776739060878754, -0.0035872412845492363, -0.00023815179883968085, -0.0007271506474353373, -0.03245725855231285, -0.22421833872795105, -2.96748423576355, -1.1962001323699951, -0.42546358704566956, -0.014357359148561954, -2.288792165927589e-05, -0.00019035911827813834, -0.05815649777650833, -0.5585001111030579, -0.09066838026046753, -0.19009947776794434, -0.004792394116520882, -0.003910514991730452, -0.00026353701832704246, -0.005508126225322485, -0.07630808651447296, -0.35972270369529724, -0.024707242846488953, -0.1942542940378189, -0.0034107151441276073, -0.014491076581180096, -0.3014713227748871, -0.0005463061388581991, -0.0017127619357779622, -0.004142869729548693, -1.3017498254776, -0.0008873577462509274, -0.34104466438293457, -0.12764136493206024, -0.0058070761151611805, -0.024408306926488876, -0.04124335199594498, -0.004338020924478769, -1.2135132551193237, -0.14765243232250214, -2.576526641845703, -0.5603466033935547, -0.18349511921405792, -0.019999166950583458, -0.42683592438697815, -0.05522562935948372, -0.0012201968347653747, -2.9510018825531006, -0.3946492075920105, -0.024547899141907692, -0.13234004378318787, -1.8232570886611938, -0.569404125213623, -0.06547210365533829, -0.06462216377258301, -0.0012707976857200265, -2.4448883533477783, -0.04444727301597595, -0.11796697229146957, -0.1502561718225479, -0.008487817831337452, -0.010291485115885735, -1.0638200044631958, -0.05580471083521843, -0.00939023494720459, -0.046358928084373474, -0.0007120219524949789, -0.21719959378242493, -0.18044745922088623, -0.0014411549782380462, -0.003725138260051608, -0.1714547574520111, -1.157059669494629, -0.5020259618759155, -1.0393259525299072, -0.0027407959569245577, -0.33590275049209595, -0.015661222860217094, -0.798115074634552, -0.004616911057382822, -0.0021691620349884033, -0.013240273110568523, -0.00302108284085989, -0.020067404955625534, -0.0021120640449225903, -0.0035938932560384274, -0.0026694636326283216, -0.0011813811725005507, -0.15087072551250458, -0.019675210118293762, -0.44719526171684265, -0.0035508933942764997, -0.020917294546961784, -0.0033321829978376627, -0.00024637524620629847, -0.00030071981018409133, -0.00038628268521279097, -0.0007555014453828335, -0.005929972976446152, -7.73638384998776e-05, -0.0009464313625358045, -2.8609820219571702e-05, -0.00027783826226368546, -0.00058466981863603, -3.6238969187252223e-05, -0.0001501924270996824, -2.7894584491150454e-05, -0.006148708052933216, -0.3415718972682953, -0.007747363764792681, -0.5908860564231873, -0.08585690706968307, -2.3238353729248047, -1.473650336265564, -0.047388143837451935, -0.06059141084551811, -0.006795510184019804, -0.0038834409788250923, -0.008909590542316437, -0.29352954030036926, -0.01648707315325737, -0.6833973526954651], "finish_reason": "stop"}], "metrics": {"energy": 151.305234585762, "energy_per_token": 1.1044177706989928, "time": 6.1072693, "time_per_token": 0.044578608029197074}}
{"outputs": [{"text": "assert n <= len(df[feature])\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} not in df columns\")\n\n    df.drop(columns=[feature, target], inplace=True)\n    df[feature] = df[feature].astype(float)\n    df[target] = df[target].astype(float)\n    model = LinearRegression().fit(df[feature].values.reshape(-1, 1), df[target].values.reshape(-1, 1))\n\n    return [i for i, _ in sorted(enumerate(model.resid), key=lambda x: x[1])][0:n], model", "tokens": ["assert", " n", " <=", " len", "(", "df", "[", "feature", "])", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " and", " {", "target", "}", " not", " in", " df", " columns", "\"", ")", "\n", "\n", "    ", "df", ".", "drop", "(", "columns", "=[", "feature", ",", " target", "]", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", "[", "feature", "]", " =", " df", "[", "feature", "]", ".", "ast", "ype", "(", "float", ")", "\n", "    ", "df", "[", "target", "]", " =", " df", "[", "target", "]", ".", "ast", "ype", "(", "float", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "return", " [", "i", " for", " i", ",", " _", " in", " sorted", "(", "enumerate", "(", "model", ".", "res", "id", ")", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "]", ")]", "[", "0", ":", "n", "]", ",", " model", "\n", "\n", "def"], "logprobs": [-3.617250442504883, -2.2554738521575928, -1.4128985404968262, -0.3102863132953644, -0.0003666205739136785, -0.02126489207148552, -2.44577693939209, -0.21291638910770416, -0.05002583935856819, -0.8519389033317566, -0.3167867958545685, -2.19661545753479, -0.5340809226036072, -0.10136651247739792, -0.0002269487304147333, -0.008435570634901524, -0.4781978726387024, -0.029911017045378685, -0.7094196677207947, -0.00898591335862875, -0.00019691436318680644, -9.703165414975956e-05, -0.00043108707177452743, -0.001437583938241005, -0.00013159839727450162, -0.004007167648524046, -0.0050146994180977345, -0.004329712130129337, -0.019974278286099434, -0.010598208755254745, -7.70062324590981e-05, -0.2197016477584839, -1.110366702079773, -0.19336169958114624, -0.9718964695930481, -0.021984677761793137, -0.038142625242471695, -0.50190669298172, -0.1722947657108307, -0.0005379660287871957, -0.002548900432884693, -1.9418542385101318, -0.1377454549074173, -1.1526274681091309, -2.190513849258423, -0.16728025674819946, -0.0006003961316309869, -0.0024441389832645655, -0.5891502499580383, -0.0006725909770466387, -2.3546154499053955, -2.544830799102783, -2.0553030967712402, -0.905578076839447, -0.5152695178985596, -0.2597186863422394, -0.6738449931144714, -0.12213333696126938, -0.017200347036123276, -0.03649429231882095, -0.00039521988946944475, -0.03733045607805252, -1.6212332411669195e-05, -0.0016229089815169573, -0.0021054022945463657, -0.021702541038393974, -0.012946950271725655, -0.31577569246292114, -1.52608323097229, -0.737752377986908, -1.3330252170562744, -0.17943595349788666, -0.23132720589637756, -0.1898706704378128, -0.067010298371315, -0.033685650676488876, -0.00302381650544703, -0.08229073882102966, -0.20874345302581787, -2.6225699912174605e-05, -0.12542490661144257, -0.4334482252597809, -0.0038754846900701523, -0.009143739938735962, -0.02669806219637394, -0.07117508351802826, -0.019618986174464226, -0.007925964891910553, -0.0004934046883136034, -0.002420236123725772, -0.0007362039177678525, -0.00039152585668489337, -0.0010177677031606436, -1.6927575416048057e-05, -0.0003591130953282118, -0.0009011736838147044, -1.1086402082582936e-05, -0.00035637227119877934, -0.012332258746027946, -6.067568756407127e-05, -0.0004459816846065223, -0.9861589074134827, -1.2326667308807373, -0.01002573873847723, -0.010170657187700272, -1.6927575416048057e-05, -0.0004021312633994967, -0.08749985694885254, -0.6627400517463684, -0.00011896379146492109, -0.0008890252211131155, -0.18913321197032928, -0.7156274914741516, -0.02147248201072216, -0.030728423967957497, -0.1723540723323822, -0.11981610953807831, -0.03458359092473984, -0.005167698487639427, -1.311301275563892e-06, -0.10553929209709167, -5.0424259825376794e-05, -6.294052582234144e-05, -0.05612833425402641, -6.246371776796877e-05, -0.0002112165529979393, -0.0012138864258304238, -0.07146991044282913, -0.0016845572972670197, -0.0003081085451412946, -0.0725058764219284, -0.0001565095444675535, -0.004966185428202152, -0.9036582708358765, -0.007393616251647472, -2.0265558760002023e-06, -0.0021691620349884033, -1.1205610462639015e-05, -0.187532439827919, -0.01906791515648365, -0.0011610202491283417, -0.007171010598540306, -0.004241755697876215, -1.0441839694976807, -0.00023314618738368154, -2.2895116806030273, -2.4657082557678223, -0.9960702657699585, -0.6492858529090881, -0.07209578901529312, -0.6508951783180237, -0.6863112449645996, -0.013854878023266792, -0.38232457637786865, -0.02129383198916912, -0.36735132336616516, -0.001312228967435658, -0.11128535866737366, -0.00015758226800244302, -0.10619599372148514, -0.05477859824895859, -0.7033700942993164, -0.0004954302567057312, -0.10341740399599075, -0.006354484241455793, -0.009237408638000488, -0.3033749461174011, -0.0061548687517642975, -0.3266080319881439, -0.007413732353597879, -0.0009675112669356167, -0.7846180200576782, -2.2350871562957764, -3.200559616088867, -1.2695696353912354, -0.055275484919548035, -0.045211419463157654, -0.1286674290895462, -0.02837999165058136, -0.005099978763610125, -0.36475589871406555, -0.011109991930425167, -0.6816391944885254], "finish_reason": "stop"}], "metrics": {"energy": 247.7652931833267, "energy_per_token": 1.353908705919818, "time": 8.388652, "time_per_token": 0.04583962841530055}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError('Specified column is not in the DataFrame.')\n    if target not in df.columns:\n        raise ValueError('Specified column is not in the DataFrame.')\n    residuals = []\n\n    for i in range(df.shape[0]):\n        reg = LinearRegression()\n        reg.fit(df.loc[i:i, [feature]], df.loc[i:i, [target]])\n        residuals.append(reg.predict(df.loc[i:i, [feature]]) - df.loc[i:i, [target]])\n    residuals = np.asarray(residuals)\n\n    indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n\n    return indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "Spec", "ified", " column", " is", " not", " in", " the", " Data", "Frame", ".", "')", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "Spec", "ified", " column", " is", " not", " in", " the", " Data", "Frame", ".", "')", "\n", "    ", "res", "idual", "s", " =", " []", "\n", "\n", "    ", "for", " i", " in", " range", "(", "df", ".", "shape", "[", "0", "]", "):", "\n", "        ", "reg", " =", " Linear", "Reg", "ression", "()", "\n", "        ", "reg", ".", "fit", "(", "df", ".", "loc", "[", "i", ":", "i", ",", " [", "feature", "]]", ",", " df", ".", "loc", "[", "i", ":", "i", ",", " [", "target", "]]", ")", "\n", "        ", "res", "idual", "s", ".", "append", "(", "reg", ".", "predict", "(", "df", ".", "loc", "[", "i", ":", "i", ",", " [", "feature", "]]", ")", " -", " df", ".", "loc", "[", "i", ":", "i", ",", " [", "target", "]]", ")", "\n", "    ", "res", "idual", "s", " =", " np", ".", "as", "array", "(", "res", "idual", "s", ")", "\n", "\n", "    ", "indices", " =", " heap", "q", ".", "nsmall", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "])", "\n", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "def"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.6697954535484314, -0.008121561259031296, -0.003965848125517368, -0.009986437857151031, -0.00502774678170681, -2.8132995794294402e-05, -2.6869442462921143, -2.4596972465515137, -0.004397840239107609, -1.75015389919281, -0.9688782691955566, -0.016997376456856728, -0.05077802762389183, -0.3406185805797577, -1.2558985948562622, -0.001774761825799942, -0.6693906188011169, -0.029078233987092972, -0.0007043979712761939, -0.15603652596473694, -0.0886974111199379, -0.003969766199588776, -0.0001699779968475923, -2.7656173188006505e-05, -0.00025602878304198384, -0.00020287363440729678, -5.566918844124302e-05, -0.00022384998737834394, -0.00014029949670657516, -0.0003797286772169173, -0.0003502947511151433, -0.00014745102089364082, -3.099393507000059e-05, -0.005938623566180468, -0.006148352753371, -0.0003936707798857242, -0.017546191811561584, -0.0023137959651649, -6.854299135738984e-05, -0.00012563870404846966, -0.000571326119825244, -0.0003106111544184387, -0.0012176964664831758, -0.003261605743318796, -0.0003507714136503637, -0.0007862337515689433, -0.8963601589202881, -3.8797125816345215, -0.22510743141174316, -0.10983337461948395, -0.10020788013935089, -0.2535649240016937, -0.021259406581521034, -2.597100019454956, -0.0006910558440722525, -0.5449333190917969, -0.6467937231063843, -0.1839349865913391, -0.10090397298336029, -0.0013780631124973297, -0.9689664840698242, -0.08059608936309814, -0.04738757386803627, -0.0008237544680014253, -0.012306000106036663, -0.008350575342774391, -0.013449064455926418, -0.006753832101821899, -0.0047732931561768055, -2.0808844566345215, -0.35464081168174744, -0.0055716694332659245, -1.8358061424805783e-05, -0.00016699827392585576, -0.06503354012966156, -0.23694133758544922, -0.010863685049116611, -0.2454162985086441, -0.002726648934185505, -0.0010099078062921762, -0.18468718230724335, -0.1849956512451172, -1.4355067014694214, -0.43879950046539307, -1.6117424964904785, -0.03614551201462746, -0.2828463017940521, -0.11264566332101822, -1.6403052806854248, -0.07375960797071457, -0.02191808819770813, -0.33038708567619324, -0.01503633614629507, -0.013108035549521446, -0.03213384747505188, -0.0008450751192867756, -0.0014669859083369374, -0.00047124247066676617, -0.04903078079223633, -0.00037520044133998454, -0.00028868322260677814, -0.12887042760849, -0.00010263393050990999, -0.0012036467669531703, -0.0247013121843338, -0.003556119976565242, -0.04421063885092735, -0.2203262448310852, -0.05971069633960724, -0.16837908327579498, -0.00854573491960764, -0.003049249993637204, -0.2588156759738922, -0.21921950578689575, -0.001517931348644197, -0.6735768914222717, -0.1570812463760376, -0.020276762545108795, -0.03151213005185127, -0.02421296201646328, -0.07168897241353989, -0.005334310233592987, -0.026245059445500374, -0.001824739621952176, -0.020879119634628296, -0.003076703054830432, -0.00355528830550611, -0.0013267532922327518, -0.3007049858570099, -0.3142037093639374, -0.0713253989815712, -0.0037484162021428347, -0.0007289375062100589, -0.0008451942121610045, -0.04440474137663841, -0.038917794823646545, -0.00033790123416110873, -0.000925112864933908, -0.03850734606385231, -0.002251710742712021, -0.0010594476480036974, -0.021023407578468323, -0.005580916069447994, -1.1910326480865479, -1.0706288814544678, -0.3792910575866699, -0.03264234587550163, -0.29911795258522034, -1.064725399017334, -8.010543388081715e-05, -2.2759599685668945, -0.03049326315522194, -0.009930964559316635, -0.00943345669656992, -0.0008568667690269649, -1.311301275563892e-06, -0.01931525021791458, -0.06834819912910461, -1.430781602859497, -0.000527123745996505, -0.6404960751533508, -0.07537135481834412, -0.96889728307724, -0.0008990298374556005, -0.00013815402053296566, -0.4101141095161438, -1.7523612768854946e-05, -0.0029924397822469473, -0.0406380333006382, -0.007969368249177933, -0.3688378632068634, -0.0005756151513196528, -1.2645949125289917, -5.471556869451888e-05, -0.004149755463004112, -0.00016902448260225356, -3.576278118089249e-07, -0.0239070113748312, -0.00025686301523819566, -0.1533045470714569, -0.009808086790144444, -0.09693662822246552, -0.9500942230224609, -0.004835459403693676, -0.3073391020298004, -0.0027860894333571196, -0.0002712835557758808, -0.5891706347465515, -0.023101596161723137, -1.0974645614624023, -0.00014327930693980306, -0.145921990275383, -0.08446446061134338, -0.015815183520317078, -1.3840603828430176, -0.6710774898529053, -0.02300502359867096, -1.247918725013733], "finish_reason": "stop"}], "metrics": {"energy": 267.98164002609263, "energy_per_token": 1.307227512322403, "time": 9.244133, "time_per_token": 0.04509333170731707}}
{"outputs": [{"text": "# Requirement: heapq\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} not in DataFrame\")\n    if target not in df.columns:\n        raise ValueError(f\"{target} not in DataFrame\")\n\n    df_index = df.index\n    df_array = df[feature].values\n    model = LinearRegression().fit(X=df_array, y=df_array)\n\n    # Requirement: sklearn.linear_model\n    residual = model.predict(X=df_array) - df[target].values\n    sorted_residual = sorted(range(len(residual)), key=lambda i: residual[i])\n\n    if n < 0:\n        raise ValueError(\"n must be a positive value.\")\n    if n > len(residual):\n        raise ValueError(\"n must be smaller than or equal to length of residual.\")\n    residual = heapq.nsmallest(n, sorted_residual, key=lambda i: residual[i])\n\n    return list(res", "tokens": ["#", " Requ", "irement", ":", " heap", "q", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "feature", "}", " not", " in", " Data", "Frame", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "{", "target", "}", " not", " in", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", "_", "index", " =", " df", ".", "index", "\n", "    ", "df", "_", "array", " =", " df", "[", "feature", "]", ".", "values", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", "=", "df", "_", "array", ",", " y", "=", "df", "_", "array", ")", "\n", "\n", "    ", "#", " Requ", "irement", ":", " sklearn", ".", "linear", "_", "model", "\n", "    ", "res", "idual", " =", " model", ".", "predict", "(", "X", "=", "df", "_", "array", ")", " -", " df", "[", "target", "]", ".", "values", "\n", "    ", "s", "orted", "_", "res", "idual", " =", " sorted", "(", "range", "(", "len", "(", "res", "idual", "))", ",", " key", "=", "lambda", " i", ":", " residual", "[", "i", "])", "\n", "\n", "    ", "if", " n", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " must", " be", " a", " positive", " value", ".", "\"", ")", "\n", "    ", "if", " n", " >", " len", "(", "res", "idual", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " must", " be", " smaller", " than", " or", " equal", " to", " length", " of", " residual", ".", "\"", ")", "\n", "    ", "res", "idual", " =", " heap", "q", ".", "nsmall", "est", "(", "n", ",", " sorted", "_", "res", "idual", ",", " key", "=", "lambda", " i", ":", " residual", "[", "i", "])", "\n", "\n", "    ", "return", " list", "(", "res"], "logprobs": [-1.9369316101074219, -3.281903028488159, -0.21350635588169098, -0.8385834097862244, -1.7662639617919922, -0.002133119385689497, -0.3958929479122162, -0.02167186141014099, -2.023463010787964, -0.8901431560516357, -0.035241495817899704, -0.0002321927313460037, -0.004559834022074938, -0.3684293031692505, -0.02047731541097164, -0.6098543405532837, -0.010961082763969898, -0.004067600704729557, -0.014832692220807076, -0.010916865430772305, -5.1973900554003194e-05, -0.12483501434326172, -0.45132049918174744, -0.1514529436826706, -1.0541679859161377, -0.0025758917909115553, -0.03434046357870102, -1.1043416261672974, -0.2021762728691101, -1.6008386611938477, -0.01049818005412817, -1.0864956378936768, -0.00048756631440483034, -0.0023016647901386023, -0.09414007514715195, -0.06571101397275925, -0.0027677821926772594, -9.822363062994555e-05, -2.95634672511369e-05, -0.00023672162205912173, -0.00021526881027966738, -5.1377883210079744e-05, -0.00021264675888232887, -7.235741941258311e-05, -0.00027104519540444016, -0.0005258131423033774, -0.00019631843315437436, -3.158996332786046e-05, -0.00018594920402392745, -0.0012268644059076905, -0.0005362979718483984, -0.0007899263291619718, -0.007368884980678558, -0.0002901133266277611, -0.0008038626983761787, -0.0004440752090886235, -0.0016302878502756357, -0.0040115611627697945, -0.0034306738525629044, -0.00016080040950328112, -0.0002217047003796324, -0.5236083269119263, -0.0010880271438509226, -2.942168712615967, -1.2722994089126587, -4.90623664855957, -0.34632453322410583, -0.5685453414916992, -0.08865344524383545, -0.38620397448539734, -0.3870255649089813, -0.2247830033302307, -0.9320574402809143, -0.6166065335273743, -4.646590709686279, -0.03834938257932663, -0.09535333514213562, -1.644072413444519, -0.1736459732055664, -0.030416714027523994, -0.10836686939001083, -0.7417410016059875, -0.269132524728775, -0.13061951100826263, -2.9379820823669434, -0.04332016780972481, -0.013524336740374565, -2.038458114839159e-05, -0.00012683063687290996, -0.06031513586640358, -0.9383594989776611, -0.0001494772732257843, -0.005810157395899296, -3.0069732666015625, -0.016342364251613617, -0.047604817897081375, -0.15358379483222961, -0.0006718761869706213, -0.348279744386673, -0.007732577621936798, -0.0024723222013562918, -0.00290198833681643, -1.726560354232788, -1.0758445262908936, -0.26818081736564636, -0.010393894277513027, -0.8275389671325684, -0.00046921687317080796, -1.9717456102371216, -0.5729556679725647, -0.0007447806419804692, -0.010226117447018623, -0.08970588445663452, -0.048071425408124924, -0.0033534502144902945, -0.0016390950186178088, -0.0027188025414943695, -0.05099374055862427, -0.07279044389724731, -1.0613795518875122, -0.1407756209373474, -2.714522123336792, -2.1064248085021973, -0.0006827168981544673, -0.5187946557998657, -0.010170303285121918, -0.9176915287971497, -0.006774553097784519, -0.01933618076145649, -0.18577419221401215, -0.00047839165199548006, -0.03473316878080368, -0.10524275153875351, -0.04527977854013443, -0.8175519108772278, -0.009339098818600178, -0.0012991330586373806, -0.3703932464122772, -0.007835840806365013, -0.012010518461465836, -0.1850850135087967, -3.1600568294525146, -0.008900374174118042, -0.01658146269619465, -0.7280782461166382, -0.11456620693206787, -0.5835745930671692, -1.518194317817688, -0.028095249086618423, -1.7904155254364014, -0.0007240534760057926, -0.06948193907737732, -0.00011896379146492109, -0.053234681487083435, -0.00018082413589581847, -0.0010345588671043515, -0.0003987947420682758, -0.03408506512641907, -0.010838449001312256, -0.05552801117300987, -1.372814655303955, -0.0033820830285549164, -0.02736024744808674, -0.0005289109540171921, -0.000559292733669281, -0.492493599653244, -0.0724346935749054, -0.9460707306861877, -0.00022265815641731024, -3.122316598892212, -0.43340179324150085, -2.111398935317993, -0.6371073126792908, -0.5914902687072754, -0.3473719358444214, -0.017458803951740265, -0.0007861146004870534, -1.6780574321746826, -0.030052965506911278, -7.92710343375802e-05, -0.05938126891851425, -0.5028394460678101, -0.5990651845932007, -0.5314012169837952, -0.0665794387459755, -1.1163229942321777, -0.7850674986839294, -3.0448546409606934, -1.8674495220184326, -0.032186951488256454, -0.0003518439189065248, -0.0009329734020866454, -0.36049169301986694, -0.9100093841552734, -0.20903714001178741, -0.31900930404663086, -0.03792687878012657, -0.00034338299883529544, -0.5232744216918945, -0.01356432307511568, -0.042350977659225464, -0.001661826390773058, -0.00037377048283815384, -1.2477577924728394, -0.014425630681216717, -4.410646579344757e-05, -0.0016534955939278007, -0.3125288188457489, -0.1900540292263031, -0.7804397940635681, -0.2035204917192459, -1.9049969911575317, -0.086116261780262, -2.1436338424682617, -0.005470781121402979, -0.006883479189127684, -3.3027639389038086, -0.022102104499936104, -0.5858100056648254, -0.41627588868141174, -0.002837443258613348, -0.0003054867556784302, -0.0005516675882972777, -1.156774640083313, -3.288485050201416, -0.12695398926734924, -2.8064920902252197, -2.566960096359253, -0.0011816193582490087, -0.00015078838623594493, -0.49506643414497375, -4.51792984677013e-05, -0.009720374830067158, -0.023967301473021507, -0.06384207308292389, -0.08645646274089813, -0.0014531777705997229, -1.2278481335670222e-05, -3.7431014789035544e-05, -0.038968127220869064, -0.07505511492490768, -0.0034483750350773335, -0.09828297793865204, -0.1027388647198677, -0.0010178867960348725, -0.014250067062675953, -0.0029806732200086117, -0.0007801587926223874, -0.0011275607394054532, -0.005748051684349775, -0.5483796000480652, -0.0003190723655279726, -0.09490881860256195, -2.3676400184631348, -0.0010602811817079782, -0.0743224173784256], "finish_reason": "length"}], "metrics": {"energy": 294.4964277191164, "energy_per_token": 1.1503766707777985, "time": 11.560141, "time_per_token": 0.04515680078125}}
{"outputs": [{"text": "indices = []\n    model = LinearRegression()\n\n    if feature not in df.columns:\n        raise ValueError(\"'col1' is not in DataFrame columns\")\n    if target not in df.columns:\n        raise ValueError(\"'col2' is not in DataFrame columns\")\n    if n < 1:\n        raise ValueError(\"n should be greater than or equal to 1\")\n\n    for i in range(1, n+1):\n        model.fit(df[feature].iloc[i:n], df[target].iloc[i:n])\n        r_squared = model.score(df[feature].iloc[i:n], df[target].iloc[i:n])\n        if r_squared < 0:\n            break\n        else:\n            indices.append(i-1)\n    return indices, model", "tokens": ["indices", " =", " []", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "col", "1", "'", " is", " not", " in", " Data", "Frame", " columns", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "col", "2", "'", " is", " not", " in", " Data", "Frame", " columns", "\"", ")", "\n", "    ", "if", " n", " <", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " should", " be", " greater", " than", " or", " equal", " to", " ", "1", "\"", ")", "\n", "\n", "    ", "for", " i", " in", " range", "(", "1", ",", " n", "+", "1", "):", "\n", "        ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "il", "oc", "[", "i", ":", "n", "]", ",", " df", "[", "target", "]", ".", "il", "oc", "[", "i", ":", "n", "])", "\n", "        ", "r", "_", "squared", " =", " model", ".", "score", "(", "df", "[", "feature", "]", ".", "il", "oc", "[", "i", ":", "n", "]", ",", " df", "[", "target", "]", ".", "il", "oc", "[", "i", ":", "n", "])", "\n", "        ", "if", " r", "_", "squared", " <", " ", "0", ":", "\n", "            ", "break", "\n", "        ", "else", ":", "\n", "            ", "indices", ".", "append", "(", "i", "-", "1", ")", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "print"], "logprobs": [-3.644258499145508, -0.318957656621933, -0.27425915002822876, -0.010208181105554104, -0.08460620790719986, -0.3665878474712372, -0.006373436655849218, -0.5627953410148621, -3.85038583772257e-05, -0.0001370812824461609, -0.07823625206947327, -0.038406167179346085, -0.8077781796455383, -0.0004925706889480352, -0.6871511340141296, -0.2603403925895691, -0.0669974833726883, -0.0001419681793777272, -0.0051871477626264095, -0.2593066990375519, -0.013671571388840675, -0.6944555044174194, -0.0038203841540962458, -0.004242230672389269, -0.011804371140897274, -0.0032946374267339706, -2.8490614567999728e-05, -0.06825923919677734, -1.2123699188232422, -3.6196322441101074, -2.9467828273773193, -0.01957140862941742, -0.005287235137075186, -0.7912083268165588, -0.03785697743296623, -0.4589018225669861, -2.0584325790405273, -0.009899213910102844, -1.3805285692214966, -0.6375923752784729, -0.0006182666402310133, -0.0013679441763088107, -0.143254354596138, -0.064048171043396, -0.0025219083763659, -0.00016902448260225356, -2.5152843591058627e-05, -0.00017105070583056659, -0.0001668790791882202, -4.935142715112306e-05, -0.00013279033009894192, -7.152301259338856e-05, -0.00029202012228779495, -0.00027366707217879593, -0.00015698630886618048, -2.777537883957848e-05, -0.0024171441327780485, -0.0006214833119884133, -0.0016095790779218078, -0.005362412426620722, -0.016716759651899338, -0.000573351513594389, -0.0013469918631017208, -0.00010001159535022452, -0.001148874987848103, -0.0013369916705414653, -0.0025132279843091965, -0.001639332971535623, -0.0010509926360100508, -0.00011419598013162613, -0.00016711745411157608, -2.1413280963897705, -1.7998073101043701, -1.6645240783691406, -0.5571207404136658, -0.005370119586586952, -0.4693317413330078, -0.1154588833451271, -0.002880949294194579, -0.0010531361913308501, -0.06364846974611282, -0.008901674300432205, -4.279521817807108e-05, -0.0517708994448185, -0.02934568002820015, -0.27309125661849976, -2.20011043548584, -0.03949172794818878, -1.1522969007492065, -0.04141629859805107, -1.80414617061615, -0.011388296261429787, -0.014533490873873234, -0.007040572352707386, -0.0041287424974143505, -0.0697437971830368, -0.00022933237778488547, -0.00046754872892051935, -0.09001730382442474, -0.0006839081761427224, -2.399843692779541, -0.5800942778587341, -0.25090348720550537, -0.07230030000209808, -0.00257422705180943, -2.61622953414917, -0.1199568510055542, -0.654697597026825, -0.7944074273109436, -0.004065938759595156, -0.009564528241753578, -0.013637586496770382, -0.01381231751292944, -1.0931882858276367, -0.04023779556155205, -0.0010307481279596686, -0.09374582022428513, -0.12217004597187042, -1.1633683443069458, -0.041059620678424835, -0.018277905881404877, -0.3930552005767822, -1.9762643575668335, -0.00038354191929101944, -0.7956885695457458, -0.4999220073223114, -1.941665530204773, -1.3380637168884277, -1.190474510192871, -0.10239232331514359, -0.020518075674772263, -0.0044888686388731, -0.0006529344827868044, -0.031197426840662956, -0.000482442817883566, -0.0007414452848024666, -6.913899414939806e-05, -0.004655237775295973, -0.0019289711490273476, -0.002285013673827052, -0.0021019524428993464, -0.0027372294571250677, -0.004675527568906546, -0.07075168192386627, -2.751488208770752, -1.8457307815551758, -1.1172906160354614, -0.06680035591125488, -0.019187791272997856, -9.989239333663136e-05, -0.005727309733629227, -0.0019251639023423195, -0.019521726295351982, -0.019142765551805496, -0.0026163177099078894, -0.042010292410850525, -0.5477607846260071, -0.003968341741710901, -4.637133679352701e-05, -0.03210406377911568, -0.03389298543334007, -0.013305091299116611, -0.004951832816004753, -0.01671113260090351, -0.0008188708452507854, -0.0284330602735281, -0.0004797023138962686, -0.0002960720448754728, -0.0009097489528357983, -1.7881233361549675e-05, -0.00013910756388213485, -7.319182623177767e-05, -0.0003780603874474764, -0.0007347744540311396, -0.00035422726068645716, -0.0008916454971767962, -0.0008553183870390058, -0.009300597012043, -0.06289056688547134, -1.3684934377670288, -0.43329280614852905, -0.00012754580529872328, -0.00012396997772157192, -1.4757651090621948, -0.07340176403522491, -0.19322167336940765, -1.341933250427246, -0.013361201621592045, -0.005228298716247082, -1.7574220895767212, -0.00245710089802742, -0.23218591511249542, -1.5026764869689941, -0.0011316093150526285, -0.0036836881190538406, -0.002081967191770673, -0.21075983345508575, -0.009561458602547646, -0.006005931179970503, -0.020327342674136162, -0.05111664533615112, -1.3003920316696167, -0.003275745315477252, -0.0013441346818581223, -0.0031058192253112793, -1.0994365215301514, -0.07947566360235214, -0.06812239438295364, -0.03408045694231987, -0.0052848635241389275, -0.5564191341400146, -0.015507003292441368, -3.4676499366760254], "finish_reason": "stop"}], "metrics": {"energy": 246.4208295822144, "energy_per_token": 1.1569053032028844, "time": 9.669934, "time_per_token": 0.045398751173708916}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Please provide columns that are in the DataFrame\")\n    df1 = df.copy()\n    df1.drop([feature, target], axis=1, inplace=True)\n    model = LinearRegression()\n    model.fit(df1.values, df[target])\n\n    # Initialize a priority queue for storing indices\n    pq = []\n    for i in range(len(df)):\n        residual = abs(model.predict(df1.iloc[i].values.reshape(1, -1))[0] - df[target][i])\n        pq.append((-residual, i))\n\n    # Sort pq based on residuals in descending order\n    heapq.heapify(pq)\n\n    # Get the n indices with largest residuals\n    largest_residuals = []\n    for _ in range(n):\n        residual, index = heapq.heappop(pq)\n        largest_residuals.append(index)\n    return largest_residuals, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Please", " provide", " columns", " that", " are", " in", " the", " Data", "Frame", "\"", ")", "\n", "    ", "df", "1", " =", " df", ".", "copy", "()", "\n", "    ", "df", "1", ".", "drop", "([", "feature", ",", " target", "]", ",", " axis", "=", "1", ",", " in", "place", "=", "True", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "1", ".", "values", ",", " df", "[", "target", "])", "\n", "\n", "    ", "#", " Initialize", " a", " priority", " queue", " for", " storing", " indices", "\n", "    ", "pq", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "df", "))", ":", "\n", "        ", "res", "idual", " =", " abs", "(", "model", ".", "predict", "(", "df", "1", ".", "il", "oc", "[", "i", "]", ".", "values", ".", "resh", "ape", "(", "1", ",", " -", "1", "))", "[", "0", "]", " -", " df", "[", "target", "][", "i", "])", "\n", "        ", "pq", ".", "append", "(", "(-", "res", "idual", ",", " i", "))", "\n", "\n", "    ", "#", " Sort", " p", "q", " based", " on", " residuals", " in", " descending", " order", "\n", "    ", "heap", "q", ".", "heap", "ify", "(", "pq", ")", "\n", "\n", "    ", "#", " Get", " the", " n", " indices", " with", " largest", " residuals", "\n", "    ", "largest", "_", "res", "idual", "s", " =", " []", "\n", "    ", "for", " _", " in", " range", "(", "n", "):", "\n", "        ", "res", "idual", ",", " index", " =", " heap", "q", ".", "he", "app", "op", "(", "pq", ")", "\n", "        ", "largest", "_", "res", "idual", "s", ".", "append", "(", "index", ")", "\n", "    ", "return", " largest", "_", "res", "idual", "s", ",", " model"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.7249426245689392, -0.008477297611534595, -0.00027104519540444016, -0.00011562632425921038, -0.00046456989366561174, -0.00046695294440723956, -0.00011693747364915907, -0.002374569419771433, -0.00264711189083755, -0.0049677276983857155, -0.015109023079276085, -0.003703760216012597, -4.625213477993384e-05, -0.14050230383872986, -0.59870445728302, -3.193652391433716, -1.5078634023666382, -2.7720465660095215, -1.0252964496612549, -0.5686243176460266, -0.25088319182395935, -0.20123612880706787, -0.3752132058143616, -0.005589332897216082, -1.0121610164642334, -0.0011472079204395413, -0.0015987483784556389, -0.872848391532898, -2.2185115814208984, -3.243757724761963, -0.07026342302560806, -0.02812318131327629, -1.193289875984192, -0.6807664632797241, -0.0790603831410408, -0.03517704829573631, -0.02944893389940262, -0.2697868347167969, -0.1916959434747696, -1.0724526643753052, -0.7184503078460693, -1.324122667312622, -0.2570797801017761, -0.0695507749915123, -0.025744451209902763, -0.001465438399463892, -0.0004260824352968484, -0.14390429854393005, -0.05502323806285858, -0.022914966568350792, -0.014188248664140701, -0.0014390123542398214, -1.0490362910786644e-05, -0.006719375029206276, -0.003515613032504916, -0.04806313291192055, -0.011730737052857876, -0.1006043329834938, -1.32181978225708, -0.040585264563560486, -0.010726651176810265, -1.5258672647178173e-05, -0.00021419614495243877, -0.07298694550991058, -0.969847559928894, -0.04821343347430229, -0.1758817881345749, -0.010268241167068481, -0.00025078488397412, -0.0023749261163175106, -0.0419032946228981, -0.059123195707798004, -1.855569839477539, -0.3702711760997772, -0.04797723516821861, -0.014615142717957497, -0.21649210155010223, -0.010295496322214603, -2.087254762649536, -0.0020729261450469494, -2.7987887859344482, -0.0016069606645032763, -2.8307313919067383, -5.376034259796143, -1.1022453308105469, -2.0989534854888916, -0.012907763943076134, -2.9332282543182373, -0.6213486790657043, -2.303248643875122, -1.9473180770874023, -0.0007692000363022089, -0.7651206254959106, -0.010137615725398064, -0.2712261974811554, -0.015455356799066067, -0.6148257255554199, -0.550403356552124, -0.4268995523452759, -0.5450372695922852, -0.05275667831301689, -0.0004661188868340105, -0.5405803322792053, -2.610649426060263e-05, -0.01412983424961567, -0.9661232233047485, -0.0002889215829782188, -0.003978434018790722, -0.004186437930911779, -1.0457597970962524, -0.23048311471939087, -0.08623907715082169, -1.7845325469970703, -0.008532260544598103, -0.5695798397064209, -0.0011138670379295945, -0.11738379299640656, -0.03541789948940277, -0.02816479094326496, -0.6085495352745056, -0.18756574392318726, -0.3055119514465332, -0.0002479245886206627, -0.2477625608444214, -0.005423593334853649, -0.4301125407218933, -0.0005233110277913511, -0.09577923268079758, -0.3987281918525696, -0.006828543730080128, -4.768370445162873e-07, -0.05326463282108307, -0.029738035053014755, -8.689979586051777e-05, -0.073276586830616, -0.00027176024741493165, -0.01402192935347557, -1.376241683959961, -0.0011611393420025706, -0.020010853186249733, -0.02737950161099434, -0.02973456308245659, -0.0940139889717102, -0.0013338964199647307, -0.4201962649822235, -0.0006052807439118624, -0.001258296542800963, -0.00724545493721962, -0.00844904687255621, -2.9423367977142334, -0.019393591210246086, -0.0057791052386164665, -2.593722343444824, -0.04543517157435417, -0.01578737236559391, -9.059865078597795e-06, -0.0012228161795064807, -0.021778710186481476, -0.009581885300576687, -0.13058613240718842, -0.4768580198287964, -0.0014228230575099587, -0.5123975872993469, -0.8277443647384644, -3.017305612564087, -0.0005712069687433541, -1.9189836978912354, -0.0015328098088502884, -1.6538429260253906, -1.4810373783111572, -0.4171743094921112, -0.0003491030656732619, -0.10430590063333511, -0.0007340597221627831, -0.41050171852111816, -0.009075934067368507, -3.242440288886428e-05, -0.0008079125545918941, -1.1205610462639015e-05, -3.504691630951129e-05, -3.2782016205601394e-05, -0.00011062010162277147, -0.00420388812199235, -0.5804941654205322, -0.00011383838864276186, -0.5006383657455444, -1.9669560194015503, -0.3765975534915924, -1.2526445388793945, -3.0059752464294434, -0.15445560216903687, -2.110480785369873, -0.055821847170591354, -0.10549412667751312, -0.0003343261778354645, -2.4790291786193848, -0.16870270669460297, -0.5170620679855347, -0.017063826322555542, -0.03537923842668533, -0.022564096376299858, -1.0923242568969727, -0.0005956306122243404, -0.0063132611103355885, -0.10012181848287582, -0.4016629755496979, -0.000949885172303766, -0.00012635385792236775, -8.49926145747304e-05, -0.09566700458526611, -0.0016132686287164688, -0.0007738456479273736, -0.00044204952428117394, -1.2463951110839844, -0.014500359073281288, -0.0450819730758667, -0.30888670682907104, -0.000651147507596761, -0.002887843642383814, -7.748573807475623e-06, -1.168244216387393e-05, -0.00023934361524879932, -0.0014761515194550157, -4.362964682513848e-05, -1.2755313036905136e-05, -3.40932747349143e-05, -0.003095242427662015, -0.0015882747247815132, -0.0007557396893389523, -0.02898246794939041, -9.65590606938349e-06, -4.756337511935271e-05, -1.156323378381785e-05, -1.597391747054644e-05, -5.507317473529838e-05, -0.0012013844680041075, -0.0012010273057967424, -0.006666325498372316, -0.0008485292200930417, -0.0006250573205761611, -2.295111894607544, -0.20157413184642792, -0.06581995636224747, -0.00016151554882526398, -8.106198947643861e-06, -0.00024387246230617166, -5.722029527532868e-06, -0.06894522160291672, -0.0027157114818692207], "finish_reason": "length"}], "metrics": {"energy": 300.03040464496627, "energy_per_token": 1.1719937681443995, "time": 11.7562, "time_per_token": 0.04592265625}}
{"outputs": [{"text": "# check if specified columns are in the DataFrame\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n            \"Specified columns are not in the provided DataFrame.\")\n\n    # fit linear regression model\n    model = LinearRegression()\n    model.fit(df[feature].values.reshape(-1, 1), df[target].values)\n\n    # obtain residuals\n    residuals = np.abs(model.predict(df[feature].values.reshape(-1, 1)) - df[target].values)\n\n    # obtain indices of the n largest residuals\n    indices = np.argsort(residuals)[-n:][::-1]\n\n    return indices, model", "tokens": ["#", " check", " if", " specified", " columns", " are", " in", " the", " Data", "Frame", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "\"", "Spec", "ified", " columns", " are", " not", " in", " the", " provided", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " fit", " linear", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "values", ")", "\n", "\n", "    ", "#", " obtain", " residuals", "\n", "    ", "res", "idual", "s", " =", " np", ".", "abs", "(", "model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", " -", " df", "[", "target", "]", ".", "values", ")", "\n", "\n", "    ", "#", " obtain", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "res", "idual", "s", ")", "[-", "n", ":", "][", "::", "-", "1", "]", "\n", "\n", "    ", "return", " indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.9369316101074219, -2.6505887508392334, -1.1712056398391724, -1.944788932800293, -0.14228752255439758, -0.14477571845054626, -0.04937475547194481, -0.28136661648750305, -0.8375816941261292, -0.0012740122620016336, -0.06130800396203995, -0.004197240807116032, -0.3157443106174469, -0.25404781103134155, -0.010471873916685581, -9.762764238985255e-05, -0.002400970784947276, -0.20729239284992218, -0.010672987438738346, -0.9258869290351868, -0.007083304226398468, -0.00011705666838679463, -6.687417771900073e-05, -0.00032228996860794723, -0.00024089295766316354, -6.246371776796877e-05, -0.0007116645574569702, -0.0003965306677855551, -0.0021611922420561314, -0.010076368227601051, -0.0014746040105819702, -1.2755313036905136e-05, -0.08718754351139069, -2.2037899494171143, -0.008699257858097553, -1.021173119544983, -1.2952284812927246, -0.002520838286727667, -0.20684272050857544, -0.3481557071208954, -0.005423712078481913, -0.017198471352458, -0.02124038338661194, -0.2677503228187561, -0.004959187004715204, -0.001334372558631003, -0.2655709385871887, -0.030230749398469925, -0.4850638806819916, -0.00046659549116156995, -0.09513288736343384, -0.0008909308817237616, -0.26988357305526733, -0.7321241497993469, -1.0017759799957275, -0.017453882843255997, -0.05826491862535477, -0.20248347520828247, -0.000593962671700865, -0.21616843342781067, -0.002852896461263299, -0.002665064763277769, -1.1801649634435307e-05, -0.000481132126878947, -0.024760855361819267, -0.2764758765697479, -0.0033711527939885855, -0.02299279160797596, -0.0012461524456739426, -5.471556869451888e-05, -0.09188379347324371, -0.05694914609193802, -1.1623960733413696, -0.02050277590751648, -0.002602406544610858, -0.1242605596780777, -0.12744252383708954, -0.011611968278884888, -0.005062143784016371, -1.9073468138230965e-06, -0.022581463679671288, -2.1934269170742482e-05, -1.9311717551317997e-05, -0.013755057007074356, -4.0531076592742465e-06, -3.0278701160568744e-05, -0.00022671037004329264, -0.02364031970500946, -0.0005388000281527638, -0.00013529339048545808, -0.0506695881485939, -0.00017677174764685333, -0.003583796788007021, -0.21462231874465942, -0.004050741903483868, -0.10227114707231522, -0.0002924968139268458, -0.05154810845851898, -4.422155380249023, -1.8553565740585327, -0.3639973998069763, -0.0002233732520835474, -0.08977203816175461, -0.18875189125537872, -0.011407743208110332, -0.003874890971928835, -1.664874792098999, -2.6702524337451905e-05, -0.3531995713710785, -0.0212347824126482, -0.4929126799106598, -6.174850568640977e-05, -0.31770986318588257, -0.004314281977713108, -0.02758350595831871, -0.019376052543520927, -0.000886285852175206, -0.0010126468259841204, -0.0006836699321866035, -0.005566097795963287, -0.005626555532217026, -0.0010381315369158983, -4.768370445162873e-07, -0.00535624660551548, -5.006664650863968e-05, -4.9470632802695036e-05, -0.002144301077350974, -3.2186455882765586e-06, -0.015896612778306007, -0.10215157270431519, -0.15054211020469666, -0.004830120597034693, -0.010808849707245827, -0.012489911168813705, -0.001302585587836802, -0.002964152256026864, -0.04854656010866165, -0.011768791824579239, -0.10182452946901321, -0.00024470672360621393, -0.044614650309085846, -1.8167436122894287, -0.34288930892944336, -0.0702601969242096, -0.8640235066413879, -0.12171724438667297, -0.013939994387328625, -0.010076840408146381, -0.06601794809103012, -0.0004198861715849489, -0.18743370473384857, -0.021574335172772408, -0.3295040428638458, -0.0003693613689392805, -0.09049078822135925, -0.0002661589242052287, -0.17135050892829895, -0.00154518848285079, -0.00012313561455812305, -9.536738616588991e-07, -0.5608395338058472, -0.4652472138404846, -0.05382406711578369, -2.6238088607788086, -0.0021137294825166464, -0.00025233422638848424, -0.0020436609629541636, -3.0874729418428615e-05, -0.0008425738196820021, -0.03137015551328659, -0.05802692100405693, -0.0001387499796692282, -0.09699667245149612, -0.03461076691746712, -0.017622677609324455, -0.0007516896002925932, -1.3698101043701172, -2.3841855067985307e-07, -4.0531076592742465e-06, -9.798523387871683e-05, -0.0001113352773245424, -0.19372181594371796], "finish_reason": "stop"}], "metrics": {"energy": 211.05109512519843, "energy_per_token": 1.1596214017868045, "time": 8.37467, "time_per_token": 0.04601467032967033}}
{"outputs": [{"text": "model = LinearRegression()\n    residuals = []\n    for _ in range(n):\n        model.fit(df[feature].to_numpy().reshape(-1, 1), df[target].to_numpy())\n        residual = df[[feature, target]].iloc[0:1][[feature]].dot(model.coef_) - df[[target]].iloc[0:1][[target]].values[0]\n        residuals.append(residual)\n\n    indices = [i[0] for i in sorted(enumerate(residuals), key=lambda x: abs(x[1]), reverse=True)]\n    return indices, model", "tokens": ["model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "res", "idual", "s", " =", " []", "\n", "    ", "for", " _", " in", " range", "(", "n", "):", "\n", "        ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "        ", "res", "idual", " =", " df", "[[", "feature", ",", " target", "]]", ".", "il", "oc", "[", "0", ":", "1", "][", "[", "feature", "]]", ".", "dot", "(", "model", ".", "co", "ef", "_)", " -", " df", "[[", "target", "]]", ".", "il", "oc", "[", "0", ":", "1", "][", "[", "target", "]]", ".", "values", "[", "0", "]", "\n", "        ", "res", "idual", "s", ".", "append", "(", "res", "idual", ")", "\n", "\n", "    ", "indices", " =", " [", "i", "[", "0", "]", " for", " i", " in", " sorted", "(", "enumerate", "(", "res", "idual", "s", ")", ",", " key", "=", "lambda", " x", ":", " abs", "(", "x", "[", "1", "])", ",", " reverse", "=", "True", ")]", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "if"], "logprobs": [-3.2897262573242188, -0.04802916198968887, -0.060101982206106186, -2.6225699912174605e-05, -0.00027998341829515994, -0.06645763665437698, -0.05928701162338257, -0.21465347707271576, -3.16404390335083, -0.19352251291275024, -0.07573048025369644, -0.07580695301294327, -0.1302003413438797, -0.010656003840267658, -0.39519286155700684, -0.9523162841796875, -2.805724620819092, -0.4533342719078064, -0.046380892395973206, -0.001073975581675768, -0.11194341629743576, -0.005696847103536129, -0.004508924670517445, -0.01099303551018238, -0.7453775405883789, -0.021924035623669624, -0.0025794587563723326, -0.03648705035448074, -0.2029261738061905, -1.0622340440750122, -0.02563372440636158, -0.006456349510699511, -0.13462941348552704, -1.7526516914367676, -0.0001280225842492655, -0.031011609360575676, -0.015093405731022358, -0.08876646310091019, -0.006578811444342136, -1.0251946150674485e-05, -0.1412448287010193, -7.188061863416806e-05, -0.00017307691450696439, -0.06314016878604889, -0.00020859450160060078, -0.00018904806347563863, -0.0006671110168099403, -0.09195359796285629, -0.0012512720422819257, -0.0004374024283606559, -0.014726155437529087, -0.0007543102256022394, -0.0037416466511785984, -0.0009155849111266434, -0.00034624303225427866, -0.3122756779193878, -0.0022754985839128494, -0.008699730969965458, -0.2719976603984833, -0.03876391053199768, -1.8968002796173096, -2.7275030612945557, -3.1596550941467285, -0.2621365189552307, -0.06841978430747986, -0.006203917786478996, -0.011373092420399189, -0.04885074496269226, -2.3838746547698975, -0.0005834784242324531, -0.9106213450431824, -0.44647446274757385, -2.307133674621582, -0.3816278874874115, -2.9448611736297607, -1.0779229402542114, -0.38165807723999023, -2.985741138458252, -0.24667730927467346, -3.098630905151367, -0.02343178167939186, -0.3864223062992096, -0.00046004203613847494, -0.020856821909546852, -0.0004472924047149718, -0.44704341888427734, -0.45469585061073303, -0.13770702481269836, -0.2108815759420395, -0.3630564212799072, -0.04308429732918739, -0.06391051411628723, -0.03414532169699669, -1.811964830267243e-05, -0.0032932115718722343, -0.010512217879295349, -0.03270084410905838, -0.001780830672942102, -0.14629527926445007, -0.12748365104198456, -0.004833323881030083, -0.0007466865936294198, -0.7427641153335571, -0.9484012126922607, -0.9545890092849731, -0.0013721107970923185, -0.5137084722518921, -0.01482012402266264, -0.006385163404047489, -0.1254820078611374, -0.0004409771354403347, -0.010709903202950954, -0.004369830247014761, -0.002435457892715931, -0.16032220423221588, -0.1589515507221222, -0.00042500998824834824, -0.2117079496383667, -0.001061114715412259, -1.3561222553253174, -0.014495189301669598, -1.0996593236923218, -0.02674889750778675, -1.809760332107544, -0.41794630885124207, -1.4921962022781372, -0.07587259262800217, -0.15253368020057678, -0.009547407738864422, -0.0014580582501366735, -0.007722286507487297, -0.779072642326355, -0.008959685452282429, -0.06315907835960388, -0.001142206834629178, -0.00438074953854084, -3.909988299710676e-05, -2.95634672511369e-05, -0.0036699105985462666, -9.333651541965082e-05, -0.021053757518529892, -0.011073797941207886, -0.012583737261593342, -0.05960535258054733, -0.003662784118205309, -2.389166831970215, -0.0028106968384236097, -0.015896378085017204, -0.004726428538560867, -0.0016420703614130616, -1.1737735271453857, -0.009234927594661713, -0.0037087483797222376, -0.002817948115989566, -0.025957617908716202, -0.45969000458717346, -0.10428442060947418, -0.327686071395874, -0.2221478968858719, -0.038980625569820404, -0.4994780719280243, -0.002268837997689843, -0.48210909962654114, -0.010936439037322998, -1.0591740608215332], "finish_reason": "stop"}], "metrics": {"energy": 208.34814950943004, "energy_per_token": 1.2627160576329093, "time": 7.363477, "time_per_token": 0.04462713333333333}}
{"outputs": [{"text": "if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Column not found\")\n\n    X = df[feature].values\n    y = df[target].values\n\n    model = LinearRegression()\n    model.fit(X, y)\n\n    residuals = model.predict(X) - y\n    residuals_array = np.array(residuals)\n    indices = np.argsort(residuals_array)[-n:]\n    indices.sort(reverse=False)\n    indices = list(indices)\n\n    return indices, model", "tokens": ["if", " (", "feature", " not", " in", " df", ".", "columns", ")", " or", " (", "target", " not", " in", " df", ".", "columns", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Column", " not", " found", "\"", ")", "\n", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "res", "idual", "s", " =", " model", ".", "predict", "(", "X", ")", " -", " y", "\n", "    ", "res", "idual", "s", "_", "array", " =", " np", ".", "array", "(", "res", "idual", "s", ")", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "res", "idual", "s", "_", "array", ")", "[-", "n", ":]", "\n", "    ", "indices", ".", "sort", "(", "reverse", "=", "False", ")", "\n", "    ", "indices", " =", " list", "(", "indices", ")", "\n", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "def"], "logprobs": [-1.1016788482666016, -3.016352415084839, -0.3334570527076721, -0.05042535439133644, -0.0004648081958293915, -0.0063348207622766495, -0.22194139659404755, -0.022499410435557365, -0.1386433243751526, -0.07306639850139618, -0.011730855330824852, -0.017940040677785873, -0.0002644904307089746, -4.9470632802695036e-05, -0.00032264748006127775, -0.00012766500003635883, -7.045020902296528e-05, -0.006272628903388977, -0.0057448516599833965, -0.009374882094562054, -0.027396319434046745, -0.006603325251489878, -6.854299135738984e-05, -0.19798476994037628, -0.5922690033912659, -3.8291900157928467, -1.2252004146575928, -0.4184265434741974, -1.1024037599563599, -0.0019594295881688595, -0.004475102294236422, -0.6472453474998474, -0.001212219474837184, -2.0174458026885986, -0.1719018518924713, -0.03891056776046753, -0.6789392828941345, -0.0459882989525795, -0.0031947072129696608, -0.5865888595581055, -0.30215784907341003, -1.9543168544769287, -0.0014718662714585662, -0.09790007770061493, -0.0004326361231505871, -0.0007126175914891064, -0.0007378716254606843, -0.00014649749209638685, -5.5549986427649856e-05, -0.15188480913639069, -0.006138992961496115, -0.0022439793683588505, -0.4478609561920166, -0.00025781645672395825, -0.5162240862846375, -0.005109704099595547, -0.005370949395000935, -1.2636104656849056e-05, -0.00010823617776622996, -0.024058543145656586, -0.34001675248146057, -0.008181391283869743, -0.014901400543749332, -0.001934444298967719, -0.00012313561455812305, -0.0015478070126846433, -0.001387943746522069, -0.06667234003543854, -0.012697446160018444, -0.0008927173912525177, -0.0016300498973578215, -0.15664489567279816, -0.000219321038457565, -0.5111873745918274, -0.11689338833093643, -0.02112332358956337, -0.005773060489445925, -3.020636558532715, -5.638440416078083e-05, -1.2398066520690918, -0.002801424590870738, -0.0344218946993351, -0.013196862302720547, -0.0709117129445076, -0.004417660646140575, -0.007344862911850214, -0.2991572916507721, -1.9855244159698486, -0.08990693837404251, -0.09264090657234192, -0.7440845966339111, -3.8994014263153076, -0.009961769916117191, -0.5481663942337036, -4.60137271147687e-05, -0.2443975955247879, -0.07532668858766556, -0.06422347575426102, -0.0007180972606875002, -1.1920922133867862e-06, -0.060444191098213196, -0.020460965111851692, -0.47052282094955444, -0.8006657958030701, -0.0880596786737442, -0.308889240026474, -0.0003123987407889217, -0.08084031939506531, -0.00048423008411191404, -0.34584248065948486, -0.44680142402648926, -0.0007992172613739967, -1.1324817933200393e-05, -0.04185516759753227, -0.00012575789878610522, -0.5043181777000427, -0.860188901424408, -0.11207034438848495, -0.11009833216667175, -0.04104829579591751, -1.0675631761550903, -0.8008274435997009, -0.9212952256202698, -0.16007043421268463, -2.6188271045684814, -0.07729999721050262, -0.01385029312223196, -2.6036343574523926, -0.001379610737785697, -0.02062201127409935, -1.3248653411865234, -1.7399762868881226, -0.2943541407585144, -1.1610416173934937, -0.0017454879125580192, -0.05932498723268509, -0.054555345326662064, -0.006202496122568846, -0.3515157103538513, -0.0002693767019081861, -0.06548237800598145, -0.040795862674713135, -0.014482147060334682, -0.0017271614633500576, -0.48515400290489197, -0.01674993522465229, -0.7936622500419617], "finish_reason": "stop"}], "metrics": {"energy": 163.2423330345153, "energy_per_token": 1.1104920614592877, "time": 6.5207963, "time_per_token": 0.04435915850340136}}
{"outputs": [{"text": "try:\n        df = df[df[feature].dtype == int]\n        df = df[df[target].dtype == int]\n        # df = df.dropna()\n        df.index = df.index\n        df.columns = df.columns\n        target = target.upper()\n        feature = feature.upper()\n        if target not in df.columns:\n            raise ValueError(\"Target column not found.\")\n        if feature not in df.columns:\n            raise ValueError(\"Feature column not found.\")\n    except Exception as e:\n        raise ValueError(\"Dataframe not suitable.\")\n\n    x_train = df[feature]\n    y_train = df[target]\n    regressor = LinearRegression().fit(x_train, y_train)\n    df.reset_index(drop=True, inplace=True)\n    df = df.sort_values(target, ascending=False)\n    # print(df)\n    indices = df.index\n    return indices[:n], regressor", "tokens": ["try", ":", "\n", "        ", "df", " =", " df", "[", "df", "[", "feature", "]", ".", "d", "type", " ==", " int", "]", "\n", "        ", "df", " =", " df", "[", "df", "[", "target", "]", ".", "d", "type", " ==", " int", "]", "\n", "        ", "#", " df", " =", " df", ".", "drop", "na", "()", "\n", "        ", "df", ".", "index", " =", " df", ".", "index", "\n", "        ", "df", ".", "columns", " =", " df", ".", "columns", "\n", "        ", "target", " =", " target", ".", "upper", "()", "\n", "        ", "feature", " =", " feature", ".", "upper", "()", "\n", "        ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Target", " column", " not", " found", ".", "\"", ")", "\n", "        ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Feature", " column", " not", " found", ".", "\"", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Data", "frame", " not", " suitable", ".", "\"", ")", "\n", "\n", "    ", "x", "_", "train", " =", " df", "[", "feature", "]", "\n", "    ", "y", "_", "train", " =", " df", "[", "target", "]", "\n", "    ", "reg", "ress", "or", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "x", "_", "train", ",", " y", "_", "train", ")", "\n", "    ", "df", ".", "reset", "_", "index", "(", "drop", "=", "True", ",", " in", "place", "=", "True", ")", "\n", "    ", "df", " =", " df", ".", "sort", "_", "values", "(", "target", ",", " ascending", "=", "False", ")", "\n", "    ", "#", " print", "(", "df", ")", "\n", "    ", "indices", " =", " df", ".", "index", "\n", "    ", "return", " indices", "[:", "n", "]", ",", " regress", "or", "\n", "\n", "if"], "logprobs": [-2.749866485595703, -0.002233631443232298, -0.0052339909598231316, -0.011827933602035046, -1.8068736791610718, -1.466425895690918, -0.04779837280511856, -1.7058446407318115, -2.327751636505127, -0.2438972294330597, -0.04751274362206459, -0.004044567700475454, -0.012288807891309261, -2.17472505569458, -0.11003949493169785, -0.5289639234542847, -1.080568552017212, -0.22642014920711517, -0.043182600289583206, -0.43980395793914795, -0.2585512697696686, -0.050275158137083054, -0.001572444918565452, -0.054002080112695694, -0.010507381521165371, -0.0016653967322781682, -0.010435656644403934, -0.00047743841423653066, -0.000251142424531281, -0.0004292996891308576, -0.0012761552352458239, -0.0015086471103131771, -0.0048020039685070515, -0.0002746204845607281, -0.0007593132322654128, -1.2574379444122314, -3.36985445022583, -2.4816620349884033, -0.4388417899608612, -0.045366592705249786, -0.9384896159172058, -1.6089478731155396, -0.4675479829311371, -0.1607326865196228, -0.0636024922132492, -0.6223303079605103, -2.11588978767395, -1.416271686553955, -3.3987369537353516, -0.10998588800430298, -1.9243099689483643, -0.47750404477119446, -0.2644151747226715, -2.667027473449707, -0.36094364523887634, -1.6698516607284546, -0.7025919556617737, -1.4165856838226318, -0.038668952882289886, -0.41141292452812195, -0.0016423083143308759, -0.0043678125366568565, -0.04846411198377609, -0.4296473562717438, -4.042752265930176, -0.5559499859809875, -1.7065680027008057, -2.3136844635009766, -1.3098536729812622, -0.0057801720686256886, -0.019200654700398445, -0.033003538846969604, -0.2977210283279419, -0.00536075234413147, -0.0012359131360426545, -0.0021785590797662735, -0.0016890796832740307, -0.00014625910262111574, -0.0010114560136571527, -0.2981795072555542, -1.6956603527069092, -1.149599313735962, -0.2577962577342987, -0.0004385939973872155, -0.04354868084192276, -0.17940595746040344, -0.027826078236103058, -0.5155242681503296, -0.00656519178301096, -0.002720704535022378, -0.04331423342227936, -0.07675431668758392, -9.238292841473594e-05, -0.3054141104221344, -1.1220818758010864, -1.1815357208251953, -0.39032182097435, -0.3666798174381256, -0.3352193832397461, -1.4445507526397705, -0.0463598407804966, -0.001258296542800963, -0.0015947017818689346, -0.04266710206866264, -0.08475210517644882, -0.009733360260725021, -0.0006998711614869535, -8.535020606359467e-05, -0.0003798478574026376, -0.00041547726141288877, -0.0003250309091527015, -0.0005808573332615197, -0.0004385939973872155, -0.00037877538125030696, -0.0008529362385161221, -0.00022265815641731024, -2.0265373677830212e-05, -0.002137401606887579, -0.0036309524439275265, -0.036017417907714844, -0.0032707550562918186, -0.0008042200352065265, -0.00044860312482342124, -0.004222525749355555, -0.0007292948430404067, -8.570780482841656e-05, -0.00015793983766343445, -1.8401929140090942, -0.0035076539497822523, -1.3443388938903809, -0.27828675508499146, -0.07770200073719025, -0.0010838593589141965, -0.0040489607490599155, -0.0023080871906131506, -0.734592080116272, -0.2626274526119232, -4.684815212385729e-05, -0.03712659329175949, -1.1472088098526, -3.3842222690582275, -1.3331706523895264, -2.305004119873047, -2.2550697326660156, -1.2365458011627197, -0.1482633501291275, -0.06533632427453995, -0.0196407288312912, -0.6915605068206787, -0.0022044898942112923, -3.207270383834839, -1.9816129207611084, -0.5835856795310974, -0.043027203530073166, -0.1486360728740692, -0.5025666356086731, -0.05200043320655823, -0.006543400697410107, -0.39532598853111267, -0.0025909922551363707, -0.01619810238480568, -0.005613752640783787, -0.0034734413493424654, -0.0005401106318458915, -0.00378119433298707, -0.004489818122237921, -0.0005389191792346537, -0.0005832401220686734, -0.01242762990295887, -0.4930756986141205, -2.1544253826141357, -1.81227445602417, -0.02652672864496708, -0.009464277885854244, -0.005281542893499136, -1.3947389561508317e-05, -0.0006404255982488394, -0.04351421445608139, -2.4028401374816895, -0.0001599660754436627, -0.00040236959466710687, -0.019191883504390717, -0.002833639271557331, -3.8980677345534787e-05, -0.03556723892688751, -0.010616845451295376, -7.164221460698172e-05, -3.3378546504536644e-06, -0.004156284965574741, -0.005822720471769571, -0.37971606850624084, -3.3337202072143555, -1.7987442016601562, -0.952454686164856, -0.0004934046883136034, -0.0010325344046577811, -0.2855634093284607, -0.23927722871303558, -0.005254032090306282, -0.029973838478326797, -0.1650993973016739, -0.0032503176480531693, -9.536697689327411e-06, -0.0007924277451820672, -0.0012711548479273915, -0.004549272358417511, -0.004691901616752148, -0.145412415266037, -1.5898380279541016, -1.5810260772705078, -0.028659092262387276, -0.4709474742412567, -0.5256772637367249, -0.001800346071831882, -0.03380471095442772, -0.08002656698226929, -1.344789743423462, -0.18115992844104767, -0.139947772026062, -0.0055276877246797085, -0.05831282585859299, -0.07242970913648605, -0.016934789717197418, -0.10387405008077621, -3.489842414855957, -1.2845675945281982, -0.039320968091487885, -0.16533435881137848, -0.6393933296203613, -0.007198705803602934, -0.0601685494184494, -2.169625759124756, -0.055973127484321594, -1.122381567955017, -0.1653657704591751, -0.18796135485172272, -2.0175771713256836, -0.06269442290067673, -1.7801891565322876, -0.10704828798770905, -0.3315564692020416, -0.042962342500686646, -0.030005304142832756, -0.05391872674226761, -0.010430466383695602, -5.817244164063595e-05, -0.3375895321369171, -0.04776177927851677, -0.8512966632843018], "finish_reason": "stop"}], "metrics": {"energy": 294.9382345533373, "energy_per_token": 1.1844909018206315, "time": 11.327262, "time_per_token": 0.04549101204819277}}
{"outputs": [{"text": "# Check if the specified columns are in the DataFrame\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid feature or target column: {feature} or {target}\")\n\n    # Fit the linear regression model\n    model = LinearRegression()\n    model.fit([df[feature], df[target]], df[[target]])\n\n    # Get the residuals\n    residuals = [abs(y - model.predict([[x]])[0][0]) for x, y in zip(df[feature], df[target])]\n\n    # Sort residuals in descending order\n    sorted_indices = sorted(range(len(residuals)), key=lambda i: residuals[i], reverse=True)\n\n    # Get the indices of the n largest residuals\n    return sorted_indices[:n], model", "tokens": ["#", " Check", " if", " the", " specified", " columns", " are", " in", " the", " Data", "Frame", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " feature", " or", " target", " column", ":", " {", "feature", "}", " or", " {", "target", "}\"", ")", "\n", "\n", "    ", "#", " Fit", " the", " linear", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "([", "df", "[", "feature", "]", ",", " df", "[", "target", "]]", ",", " df", "[[", "target", "]]", ")", "\n", "\n", "    ", "#", " Get", " the", " residuals", "\n", "    ", "res", "idual", "s", " =", " [", "abs", "(", "y", " -", " model", ".", "predict", "([", "[", "x", "]]", ")[", "0", "][", "0", "])", " for", " x", ",", " y", " in", " zip", "(", "df", "[", "feature", "]", ",", " df", "[", "target", "]", ")]", "\n", "\n", "    ", "#", " Sort", " residuals", " in", " descending", " order", "\n", "    ", "s", "orted", "_", "indices", " =", " sorted", "(", "range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "]", ",", " reverse", "=", "True", ")", "\n", "\n", "    ", "#", " Get", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "return", " sorted", "_", "indices", "[:", "n", "]", ",", " model", "\n", "\n", "if"], "logprobs": [-1.9369316101074219, -2.0788075923919678, -1.005035161972046, -1.3434597253799438, -0.6030160188674927, -0.11257589608430862, -0.12075535207986832, -0.09174773842096329, -0.027268609032034874, -0.504569411277771, -0.0007759897271171212, -0.2250107228755951, -0.00350052653811872, -0.24832990765571594, -0.2209092676639557, -0.010864274576306343, -6.639736966462806e-05, -0.0014099667314440012, -0.2384960800409317, -0.007564472034573555, -0.8277823328971863, -0.00400135014206171, -8.689979586051777e-05, -4.875540980719961e-05, -0.00024863966973498464, -0.00022313489171210676, -6.258291978156194e-05, -0.0005442806868813932, -0.00018487652414478362, -0.0021068297792226076, -0.007642081007361412, -0.0013763965107500553, -6.079655122448457e-06, -0.04325190186500549, -0.8615590929985046, -0.04030546545982361, -2.0169568061828613, -1.5391336679458618, -0.17071956396102905, -0.0009197533945553005, -0.6603152751922607, -0.3567383885383606, -0.24325746297836304, -0.005326366052031517, -0.038083646446466446, -0.5556343197822571, -0.003575956914573908, -0.0003610197745729238, -0.3216860592365265, -0.000398198957554996, -0.0017891604220494628, -0.05618614703416824, -0.00096703483723104, -0.19926168024539948, -0.7656852006912231, -1.32993745803833, -0.1956738978624344, -0.011514752171933651, -0.008901910856366158, -0.1679043024778366, -0.000586695212405175, -0.19695982336997986, -0.0019985719118267298, -0.0028448132798075676, -8.940656698541716e-06, -0.0002460177056491375, -0.01816658489406109, -0.2122996747493744, -0.002998025855049491, -0.02184297889471054, -0.0010390841634944081, -4.2676016164477915e-05, -2.0370912551879883, -0.29299047589302063, -0.03797496482729912, -0.010428696870803833, -0.004018684849143028, -0.1413474977016449, -0.0029006809927523136, -0.0007065422250889242, -7.235741941258311e-05, -0.0013335392577573657, -2.930316925048828, -0.020538514479994774, -2.2480876445770264, -0.5769611597061157, -0.02733287215232849, -0.006776565685868263, -0.0116086695343256, -0.056871216744184494, -0.0003190723655279726, -0.025066081434488297, -1.5303772687911987, -0.16078567504882812, -1.6059097051620483, -0.6803128719329834, -0.00022909401741344482, -0.053258076310157776, -0.1155485212802887, -0.005087999626994133, -0.0029472745954990387, -1.8638280630111694, -0.9677829742431641, -0.010076958686113358, -2.108764171600342, -0.17866691946983337, -0.22675706446170807, -0.0002516191452741623, -0.06432989984750748, -0.4970160126686096, -0.2889055907726288, -0.28736475110054016, -0.5565372109413147, -0.2224377691745758, -0.0021197961177676916, -1.1042734384536743, -0.0006459057331085205, -0.001769644906744361, -0.09504714608192444, -0.11201780289411545, -0.008578001521527767, -0.024378642439842224, -0.00216535571962595, -0.9752088189125061, -0.03187881037592888, -0.009037068113684654, -0.051392871886491776, -0.010031522251665592, -0.0005525015876628458, -0.026401694864034653, -0.01261846348643303, -0.08068307489156723, -0.00048828122089616954, -0.005673140753060579, -0.0037338081747293472, -0.0026173877995461226, -0.10920920222997665, -0.00024875884992070496, -0.027158284559845924, -1.166197657585144, -1.0329922437667847, -0.4091721475124359, -0.19542400538921356, -0.00014244495832826942, -0.3029034435749054, -0.00027783826226368546, -0.8770847320556641, -0.0014915067004039884, -0.0024141711182892323, -0.7655649781227112, -0.0019189768936485052, -0.32310134172439575, -0.0043694740161299706, -0.019676145166158676, -8.093983342405409e-05, -0.032385822385549545, -1.5735502529423684e-05, -0.015598669648170471, -9.405170567333698e-05, 0.0, -0.0002658013836480677, -6.067568756407127e-05, -0.004022246692329645, -0.0009464313625358045, -0.028619010001420975, -0.09226682037115097, -9.786603914108127e-05, -0.030236301943659782, -0.00016950124700088054, -2.098061486321967e-05, -0.07352061569690704, -8.95221673999913e-05, -0.0009925207123160362, -0.00023755589791107923, -0.000798859924543649, -0.01093349140137434, -0.24317847192287445, -0.04871654510498047, -9.16677454370074e-05, -0.09532396495342255, -1.5688047409057617, -0.1269463151693344, -1.8766459226608276, -0.032234854996204376, -0.05695139989256859, -0.5258633494377136, -0.018187422305345535, -0.011524179019033909, -0.030981330201029778, -9.381330892210826e-05, -0.8487774133682251, -0.013073444366455078, -0.0002798642381094396, -2.777537883957848e-05, -0.05806134268641472, -0.009562875144183636, -0.035754282027482986, -0.08247353136539459, -0.0012746074935421348, -0.45338496565818787, -0.013905431143939495, -0.9475003480911255], "finish_reason": "stop"}], "metrics": {"energy": 236.72109881877898, "energy_per_token": 1.1718866278157376, "time": 9.680479, "time_per_token": 0.04792316336633663}}
{"outputs": [{"text": "model = LinearRegression()\n    model.fit(df[[feature, target]], df[target])\n    residuals = [\n        np.linalg.norm(df[[feature, target]][i].values -\n                       model.predict(df[[feature, target]][i].values))\n        for i in range(len(df))]\n    indices = [i for i in range(len(residuals)) if i not in range(n, 0, -1)]\n\n    return indices, model", "tokens": ["model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[[", "feature", ",", " target", "]]", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " [", "\n", "        ", "np", ".", "l", "inal", "g", ".", "norm", "(", "df", "[[", "feature", ",", " target", "]", "][", "i", "]", ".", "values", " -", "\n", "                ", "       ", "model", ".", "predict", "(", "df", "[[", "feature", ",", " target", "]", "][", "i", "]", ".", "values", "))", "\n", "        ", "for", " i", " in", " range", "(", "len", "(", "df", "))", "]", "\n", "    ", "indices", " =", " [", "i", " for", " i", " in", " range", "(", "len", "(", "res", "idual", "s", "))", " if", " i", " not", " in", " range", "(", "n", ",", " ", "0", ",", " -", "1", ")]", "\n", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "def"], "logprobs": [-3.2897262573242188, -0.04802916198968887, -0.060101982206106186, -2.6225699912174605e-05, -0.00027998341829515994, -0.06645763665437698, -0.05928701162338257, -0.21465347707271576, -0.63051837682724, -0.012685440480709076, -0.0004395472351461649, -0.15150150656700134, -0.11860137432813644, -0.4961221516132355, -0.010546072386205196, -0.8885194659233093, -0.02090865559875965, -0.0013869914691895247, -0.1597200334072113, -0.009278747253119946, -0.14372797310352325, -0.008345847018063068, -0.004466794431209564, -0.005085390526801348, -0.2964579463005066, -0.6447827816009521, -0.1685967594385147, -0.053127750754356384, -0.01281020138412714, -1.9492019414901733, -1.7418286800384521, -0.013921420089900494, -3.20344877243042, -0.00027581225731410086, -2.2070558071136475, -0.00038235029205679893, -0.0001299296854995191, -7.748573807475623e-06, -0.012016408145427704, -0.048227518796920776, -2.2824289798736572, -0.532238781452179, -0.05065689608454704, -0.022731447592377663, -0.004869625438004732, -0.22101125121116638, -0.0020367607939988375, -0.6301699876785278, -0.24308377504348755, -2.5504543781280518, -0.3792913854122162, -0.050879206508398056, -1.9515706300735474, -0.06074982509016991, -0.038762763142585754, -0.18755754828453064, -0.0006403064471669495, -0.04637213051319122, -0.09301093965768814, -0.0723692774772644, -0.008577410131692886, -0.0008235162240453064, -0.0028917661402374506, -0.0007609808817505836, -0.032521072775125504, -0.00029297350556589663, -0.025040969252586365, -0.013857229612767696, -0.0003883084573317319, -0.008006501942873001, -0.5199417471885681, -0.11451295018196106, -0.004028658382594585, -0.0036962777376174927, -0.0014580582501366735, -0.011605605483055115, -0.2435685694217682, -0.0009205871028825641, -0.8399378061294556, -0.00011681827891152352, -0.0013160386588424444, -0.1322038620710373, -1.5093810558319092, -0.0025006234645843506, -0.2076658457517624, -1.0900088548660278, -0.039954233914613724, -3.1332907676696777, -0.5016248822212219, -0.2031600922346115, -0.9022737145423889, -0.2819359004497528, -0.08648314327001572, -0.0006697318749502301, -0.024404002353549004, -2.4199192921514623e-05, -0.8502892255783081, -1.4662635294371285e-05, -2.3841855067985307e-07, -0.004639456048607826, -1.4365830421447754, -1.522750973701477, -0.28351151943206787, -0.0002454218047205359, -3.216702938079834, -0.020311105996370316, -0.248937726020813, -1.3724360466003418, -3.0551888942718506, -0.10818779468536377, -0.06405185908079147, -0.005878658965229988, -0.00380589603446424, -0.013300503604114056, -0.005015411414206028, -2.7328641414642334, -0.0026022878009825945, -0.24077850580215454, -0.149145245552063, -0.11013303697109222, -0.0020584126468747854, -0.369493693113327, -0.012611517682671547, -0.631251871585846], "finish_reason": "stop"}], "metrics": {"energy": 157.08741992378228, "energy_per_token": 1.2668340316434055, "time": 6.316783, "time_per_token": 0.050941798387096775}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(f\"Column '{feature}' not found.\")\n    if target not in df.columns:\n        raise ValueError(f\"Column '{target}' not found.\")\n    x = df.pop(feature)\n    y = df.pop(target)\n    model = LinearRegression()\n    model.fit(x, y)\n    residuals = [model.resid_sum_squares / model.coef_.shape[0]]\n    residuals.extend(sorted(range(len(residuals)), key=lambda i: residuals[i])[:n])\n    return residuals, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " '", "{", "feature", "}'", " not", " found", ".", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " '", "{", "target", "}'", " not", " found", ".", "\"", ")", "\n", "    ", "x", " =", " df", ".", "pop", "(", "feature", ")", "\n", "    ", "y", " =", " df", ".", "pop", "(", "target", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "x", ",", " y", ")", "\n", "    ", "res", "idual", "s", " =", " [", "model", ".", "res", "id", "_", "sum", "_", "squ", "ares", " /", " model", ".", "co", "ef", "_", ".", "shape", "[", "0", "]]", "\n", "    ", "res", "idual", "s", ".", "extend", "(", "s", "orted", "(", "range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "])", "[:", "n", "])", "\n", "    ", "return", " residuals", ",", " model"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.6697954535484314, -0.008121561259031296, -0.003965848125517368, -0.009986437857151031, -0.00502774678170681, -2.8132995794294402e-05, -0.08009831607341766, -0.29946085810661316, -0.11065248399972916, -2.2770371437072754, -0.8973546624183655, -0.0009814451914280653, -0.0016956250183284283, -0.000910225382540375, -0.19671368598937988, -0.7507013082504272, -2.0681331157684326, -0.04219190403819084, -0.00022587609419133514, -0.0010567086283117533, -0.12841854989528656, -0.03399991989135742, -0.00215429300442338, -6.270212179515511e-05, -1.5139465176616795e-05, -0.00019214690837543458, -0.00016759421851020306, -3.564294092939235e-05, -0.00015424491721205413, -6.83045873302035e-05, -0.00023195437097456306, -0.00036554806865751743, -0.00011431517486926168, -2.0265373677830212e-05, -0.00013791563105769455, -0.0011851914459839463, -0.0003058442671317607, -0.00048708971007727087, -0.000516757951118052, -6.12716976320371e-05, -0.005369171034544706, -0.0007347744540311396, -0.0004563482361845672, -0.00013815402053296566, -0.0014959108084440231, -0.0005073452484793961, -0.00022790218645241112, -0.00029345019720494747, -1.266804575920105, -3.147745132446289, -0.15405908226966858, -0.055735375732183456, -2.743830442428589, -3.0575482845306396, -0.010427162982523441, -0.01665732078254223, -0.016108017414808273, -0.1878269910812378, -0.0018388995667919517, -0.012715219520032406, -0.0004219118563923985, -0.0032743194606155157, -0.022283289581537247, -0.0009286858257837594, -0.000603493710514158, -0.0002530493075028062, -0.0007201223634183407, -0.002792746527120471, -0.17366550862789154, -0.6723536252975464, -0.005805653985589743, -0.004965710919350386, -1.4543427823809907e-05, -0.0005255748401395977, -0.04170322045683861, -0.7709300518035889, -0.010553267784416676, -0.06534481048583984, -0.003259229240939021, -0.00018344627460464835, -0.007078687660396099, -0.01315215602517128, -0.04737495630979538, -0.03334638476371765, -0.002698829397559166, -0.002937647048383951, -0.10827872902154922, -0.5718845129013062, -0.21792154014110565, -0.035516731441020966, -0.01006610132753849, -1.4442733526229858, -1.7794419527053833, -0.0008126770262606442, -0.8697411417961121, -0.006868324708193541, -0.5825735330581665, -0.8924893140792847, -0.0021872424986213446, -0.4413391947746277, -0.0012059090659022331, -1.32846999168396, -1.1059972047805786, -0.00010072677832795307, -1.53494393825531, -0.0014630577061325312, -0.03366824612021446, -0.045421842485666275, -1.9558087587356567, -0.002857532352209091, -0.020745670422911644, -0.2351895272731781, -0.1110471710562706, -0.059029366821050644, -2.499532461166382, -0.09880256652832031, -0.09106744080781937, -0.4173036813735962, -0.9004753828048706, -0.06915749609470367, -1.8530343770980835, -0.0009465504554100335, -0.1529080867767334, -1.3182255029678345, -0.0008235162240453064, -0.46810588240623474, -0.00019143179815728217, -0.7870688438415527, -0.010634773410856724, -0.0001646144810365513, -0.023172184824943542, -0.0016061275964602828, -0.2015979140996933, -0.012902350164949894, -0.06561121344566345, -0.43321946263313293, -0.0023136769887059927, -0.025959592312574387, -0.0006802152493037283, -0.0006756883230991662, -0.1881192922592163, -0.4038583040237427, -0.0987393856048584, -0.07728476822376251, -0.010479895398020744, -0.04843378812074661, -0.2334199994802475, -0.12094000726938248, -0.1299411803483963, -0.0017732147825881839], "finish_reason": "stop"}], "metrics": {"energy": 183.3132008705138, "energy_per_token": 1.167600005544674, "time": 6.940643, "time_per_token": 0.04420791719745223}}
{"outputs": [{"text": "residuals = []\n    model = LinearRegression()\n    indices = []\n    for row in range(df.shape[0]):\n        x = df.iloc[row][feature]\n        y = df.iloc[row][target]\n        model.fit([[x]], [y])\n        residuals.append(model.resid)\n    # 2. \u6309\u7167\u6b8b\u5dee\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u83b7\u5f97\u7d22\u5f15\u5217\u8868\n    residuals.sort()\n    for i in range(n):\n        indices.append(residuals.index(residuals[i]))\n    indices.sort()\n    return indices, model", "tokens": ["res", "idual", "s", " =", " []", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "indices", " =", " []", "\n", "    ", "for", " row", " in", " range", "(", "df", ".", "shape", "[", "0", "]", "):", "\n", "        ", "x", " =", " df", ".", "il", "oc", "[", "row", "][", "feature", "]", "\n", "        ", "y", " =", " df", ".", "il", "oc", "[", "row", "][", "target", "]", "\n", "        ", "model", ".", "fit", "([", "[", "x", "]]", ",", " [", "y", "])", "\n", "        ", "res", "idual", "s", ".", "append", "(", "model", ".", "res", "id", ")", "\n", "    ", "#", " ", "2", ".", " ", "\u6309\u7167", "\u6b8b", "\u5dee", "\u4ece\u5c0f", "\u5230\u5927", "\u6392\u5e8f", "\uff0c", "\u83b7\u5f97", "\u7d22\u5f15", "\u5217\u8868", "\n", "    ", "res", "idual", "s", ".", "sort", "()", "\n", "    ", "for", " i", " in", " range", "(", "n", "):", "\n", "        ", "indices", ".", "append", "(", "res", "idual", "s", ".", "index", "(", "res", "idual", "s", "[", "i", "]))", "\n", "    ", "indices", ".", "sort", "()", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "#"], "logprobs": [-3.906116485595703, -0.2904640734195709, -0.21440760791301727, -0.09643122553825378, -0.2557690441608429, -0.023635663092136383, -0.16370350122451782, -1.393804907798767, -0.012349920347332954, -0.19936735928058624, -3.218599158572033e-05, -0.0002631794777698815, -0.07145947962999344, -0.04633525758981705, -0.5719953775405884, -3.7759270668029785, -0.03863660991191864, -0.18818210065364838, -0.0031140190549194813, -0.4744664132595062, -1.0512287616729736, -2.3464579582214355, -0.0940806120634079, -1.800535798072815, -0.0019506252137944102, -0.9559021592140198, -0.03467525169253349, -0.12740159034729004, -0.0014703187625855207, -0.012984606437385082, -0.010162514634430408, -0.010448751971125603, -0.004427392967045307, -0.009125194512307644, -3.363025426864624, -0.186687633395195, -0.187240868806839, -0.4390593469142914, -0.7615600824356079, -0.0001726001501083374, -0.15644612908363342, -0.0007232195930555463, -0.8222236633300781, -0.030291007831692696, -0.0016875325236469507, -0.012399489991366863, -0.0004885195521637797, -0.008737074211239815, -0.0010401559993624687, -0.0009465504554100335, -0.0006548406090587378, -0.000300600629998371, -0.00010191874753218144, -5.066266385256313e-05, -1.6212332411669195e-05, -0.0009819215629249811, -0.00019524575327523053, -5.566918844124302e-05, -0.0001915509783430025, -0.014486259780824184, -0.2412704974412918, -0.007851808331906796, -0.0026984727010130882, -1.6345703601837158, -0.5315967202186584, -0.07174167782068253, -0.054401252418756485, -0.0003165697562508285, -0.06378223747015, -0.0008237544680014253, -0.0009168949909508228, -0.0052115777507424355, -0.015176068991422653, -0.6697645783424377, -0.25763916969299316, -0.5758129954338074, -0.011972825974225998, -0.002609421731904149, -0.12047555297613144, -0.5781119465827942, -0.0001262346631847322, -1.1184959411621094, -0.023265596479177475, -1.1662241220474243, -0.004643965046852827, -0.5992962718009949, -3.9893927574157715, -4.099569320678711, -4.049283027648926, -0.958176851272583, -3.6005196571350098, -3.314774751663208, -2.1269636154174805, -0.019725002348423004, -2.710805892944336, -0.01732407696545124, -0.4131098687648773, -1.3212950229644775, -4.314783096313477, -1.5694997310638428, -1.9202847480773926, -0.33553633093833923, -0.007034416776150465, -0.8208041787147522, -0.06250361353158951, -0.0973941907286644, -0.9929336905479431, -0.0007671750499866903, -0.1605178713798523, -0.02326536364853382, -0.05164569988846779, -0.9055569171905518, -0.3395558297634125, -0.028146594762802124, -0.009130273945629597, -0.011314278468489647, -0.2843673825263977, -0.015281853266060352, -0.011700693517923355, -0.0028198501095175743, -0.6301970481872559, -0.0034614428877830505, -0.0026329634711146355, -0.020541315898299217, -0.15466897189617157, -0.014439965598285198, -2.098061486321967e-05, -0.1012657955288887, -0.04072227329015732, -0.03603639081120491, -0.27399370074272156, -0.04591486230492592, -3.0636318115284666e-05, -0.16457988321781158, -0.04335053265094757, -0.11654811352491379, -0.01579640805721283, -0.22277851402759552, -3.16872501373291, -0.4070649743080139, -0.19431555271148682, -0.141966313123703, -0.017473096027970314, -0.05494978278875351, -0.20209777355194092, -0.027108395472168922, -0.05028955638408661, -0.008051084354519844, -0.3732117712497711, -0.02494109608232975, -2.365682601928711], "finish_reason": "stop"}], "metrics": {"energy": 182.55262467193592, "energy_per_token": 1.2089577792843438, "time": 6.715269, "time_per_token": 0.04447198013245033}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be present in the DataFrame.\")\n\n    # Sort the DataFrame based on the specified target column in ascending order\n    sorted_df = df.sort_values(target)\n\n    # Initialize an empty list to store the indices of the n largest residuals\n    indices = []\n\n    # Fit a linear regression model using the first n rows of the sorted DataFrame\n    model = LinearRegression()\n    model.fit(sorted_df[feature][:n].reshape(-1, 1), sorted_df[target].iloc[:n])\n\n    # Calculate the residuals for each row in the sorted DataFrame\n    residuals = sorted_df[target] - model.predict(sorted_df[feature].iloc[:n].reshape(-1, 1))\n\n    # Append the indices of the n largest residuals to the indices list\n    for i in range(n):\n        max_residual = np.max(residuals[i:])\n        indices", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Feature", " and", " target", " columns", " must", " be", " present", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Sort", " the", " Data", "Frame", " based", " on", " the", " specified", " target", " column", " in", " ascending", " order", "\n", "    ", "s", "orted", "_", "df", " =", " df", ".", "sort", "_", "values", "(", "target", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "indices", " =", " []", "\n", "\n", "    ", "#", " Fit", " a", " linear", " regression", " model", " using", " the", " first", " n", " rows", " of", " the", " sorted", " Data", "Frame", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "s", "orted", "_", "df", "[", "feature", "][", ":", "n", "]", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " sorted", "_", "df", "[", "target", "]", ".", "il", "oc", "[:", "n", "])", "\n", "\n", "    ", "#", " Calculate", " the", " residuals", " for", " each", " row", " in", " the", " sorted", " Data", "Frame", "\n", "    ", "res", "idual", "s", " =", " sorted", "_", "df", "[", "target", "]", " -", " model", ".", "predict", "(", "s", "orted", "_", "df", "[", "feature", "]", ".", "il", "oc", "[:", "n", "]", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "#", " App", "end", " the", " indices", " of", " the", " n", " largest", " residuals", " to", " the", " indices", " list", "\n", "    ", "for", " i", " in", " range", "(", "n", "):", "\n", "        ", "max", "_", "res", "idual", " =", " np", ".", "max", "(", "res", "idual", "s", "[", "i", ":", "])", "\n", "        ", "indices"], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.7249426245689392, -0.008477297611534595, -0.00027104519540444016, -0.00011562632425921038, -0.00046456989366561174, -0.00046695294440723956, -0.00011693747364915907, -0.002374569419771433, -0.00264711189083755, -0.0049677276983857155, -0.015109023079276085, -0.003703760216012597, -4.625213477993384e-05, -0.14050230383872986, -0.59870445728302, -2.4322426319122314, -0.41348183155059814, -0.06780998408794403, -0.5868250131607056, -0.7219771146774292, -0.04824376478791237, -2.334151029586792, -0.015916557982563972, -0.14845708012580872, -0.28215286135673523, -0.0013999671209603548, -0.3001513183116913, -0.004249827936291695, -0.0005119920242577791, -0.002073402050882578, -0.32762446999549866, -0.0010003806091845036, -1.7353085279464722, -3.7470710277557373, -0.3153840899467468, -0.6482462882995605, -0.0010122895473614335, -1.1634718179702759, -0.0008264940115623176, -0.3608887195587158, -1.303000569343567, -1.7601091861724854, -0.0720360055565834, -2.220200300216675, -0.42934584617614746, -0.003082882845774293, -0.2489682137966156, -0.0012999664759263396, -0.6039469838142395, -0.001639213995076716, -0.0005869334563612938, -0.0324275977909565, -0.0007526425761170685, -0.0027563695330172777, -0.005652989260852337, -0.010848354548215866, -1.8000440832111053e-05, -0.000328367663314566, -0.02633737027645111, -0.8524594902992249, -1.026219129562378, -0.024838769808411598, -0.0760500431060791, -0.0002917817619163543, -0.05612517520785332, -2.167271852493286, -1.7690582275390625, -0.016874542459845543, -0.08003625273704529, -0.1447247564792633, -0.035139299929142, -0.5378555655479431, -0.1744028478860855, -0.07549461722373962, -0.08363358676433563, -0.4548991918563843, -0.03304021432995796, -0.02380329929292202, -0.032994888722896576, -0.00011967896716669202, -1.3041715621948242, -0.08260985463857651, -0.010206411592662334, -0.00018880968855228275, -0.04210058972239494, -0.0001714082609396428, -0.032620422542095184, -2.6555018424987793, -0.19706231355667114, -0.32035407423973083, -0.002884990768507123, -0.008712257258594036, -1.867429256439209, -0.44827768206596375, -1.5355483293533325, -0.06990844011306763, -0.2952900528907776, -0.5327188968658447, -0.18571221828460693, -0.15721124410629272, -0.011807081289589405, -0.00025006983196362853, -0.11224329471588135, -0.0006569849792867899, -0.6410269141197205, -0.0035750067327171564, -0.004130048677325249, -1.7165990357170813e-05, -0.0007879013428464532, -0.04210378974676132, -0.270170122385025, -0.013423188589513302, -0.08319929987192154, -0.000753357307985425, -2.8490614567999728e-05, -0.0010982679668813944, -0.019444916397333145, -3.2186455882765586e-06, -1.8000440832111053e-05, -1.0490362910786644e-05, -0.6921573877334595, -0.04028840363025665, -1.0543925762176514, -0.00837031751871109, -0.03828054293990135, -0.02695140801370144, -0.7392053604125977, -2.5290374755859375, -7.152555099310121e-07, -0.052696291357278824, -1.3947389561508317e-05, -1.3232143828645349e-05, -0.028426803648471832, -4.0411134250462055e-05, -2.2411095415009186e-05, -0.0003469580551609397, -0.018219847232103348, -7.152555099310121e-07, -7.152555099310121e-07, -0.005833979696035385, -0.0001705739414319396, -2.4617984294891357, -0.040575649589300156, -2.9927029609680176, -3.123234637314454e-05, -0.05293544754385948, -0.0020705468486994505, -0.05185828357934952, -0.0011398254428058863, -0.03886974975466728, -0.00037472377880476415, -0.04110492765903473, -1.15639066696167, -0.10698969662189484, -0.19177743792533875, -0.451852411031723, -0.5628018975257874, -0.0211768951267004, -0.645855724811554, -0.011670058593153954, -0.3294554352760315, -0.0010812395485118032, -0.0003407612966839224, -0.12511253356933594, -0.0005797850899398327, -0.042134761810302734, -0.01662578247487545, -0.004830713849514723, -0.0026548400055617094, -0.23450163006782532, -0.0002488780301064253, -2.0265558760002023e-06, -0.03589183837175369, -0.002771110739558935, -0.2308613359928131, -2.332699775695801, -0.050462644547224045, -1.4424220353248529e-05, -0.005974055267870426, -0.001880307332612574, -0.01915258914232254, -1.0728830375228426e-06, -0.0004555141495075077, -3.2186455882765586e-06, -0.0004119024670217186, -0.0015655416063964367, -0.9289553761482239, -0.001444130903109908, -0.6229146718978882, -9.881961887003854e-05, -0.03039902076125145, -0.03297412768006325, -0.022065840661525726, -0.0007987407734617591, -0.0184051301330328, -1.1920928244535389e-07, -0.0013994909822940826, -2.3364747903542593e-05, -3.433168603805825e-05, -0.003967866767197847, -4.6491513785440475e-06, -0.000446696620201692, -0.004775428678840399, -0.044480111449956894, -0.0002809368306770921, -0.018947090953588486, -1.891189455986023, -0.0003713871701620519, -0.03964503854513168, -0.17214404046535492, -0.03042411431670189, -0.017612136900424957, -0.3483526110649109, -0.13886548578739166, -0.011907096952199936, -0.0765962153673172, -0.017256589606404305, -0.6138575077056885, -0.0017343016806989908, -0.019058911129832268, -0.00033682872890494764, -0.3314400911331177, -0.2048329859972, -0.14425873756408691, -0.021589035168290138, -0.0030762276146560907, -0.09006763994693756, -0.024736782535910606, -0.0026815906167030334, -0.0006438804557546973, -2.6548871994018555, -0.0006805725861340761, -0.4057064354419708, -0.08567648380994797, -0.38597264885902405, -1.7305558919906616, -1.4543427823809907e-05, -0.21735145151615143, -0.0004583738627843559, -0.010085927322506905, -2.8371408916427754e-05, -2.0265558760002023e-06, -0.6119784116744995, -0.018030663952231407, -0.23666325211524963, -0.10351521521806717, -0.025818802416324615, -0.0014348459662869573, -0.5252176523208618], "finish_reason": "length"}], "metrics": {"energy": 307.1487566280362, "energy_per_token": 1.1997998305782664, "time": 11.753604, "time_per_token": 0.045912515625}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(f\"Feature '{feature}' not found in DataFrame.\")\n    if target not in df.columns:\n        raise ValueError(f\"Target '{target}' not found in DataFrame.\")\n\n    model = LinearRegression()\n    residuals = []\n    for i in range(n):\n        model.fit(df[[feature, target]].to_numpy(), df[target].to_numpy())\n        residuals.append(model.predict(df[[feature, target]].to_numpy()) - df[target].to_numpy())\n\n    indices = heapq.nsmallest(n, range(len(residuals)), key=lambda x: residuals[x])\n\n    return indices, model\n\nclass TaskFunc:\n    \"\"\"\n    TaskFunc class.\n    \"\"\"\n\n    def __init__(self, func: Callable[[pd.DataFrame, str, str, int], tuple[list[int], LinearRegression]]):\n        \"\"\"\n        Initialize a new TaskFunc instance.", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Feature", " '", "{", "feature", "}'", " not", " found", " in", " Data", "Frame", ".", "\"", ")", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Target", " '", "{", "target", "}'", " not", " found", " in", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "res", "idual", "s", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "n", "):", "\n", "        ", "model", ".", "fit", "(", "df", "[[", "feature", ",", " target", "]]", ".", "to", "_", "numpy", "()", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "        ", "res", "idual", "s", ".", "append", "(", "model", ".", "predict", "(", "df", "[[", "feature", ",", " target", "]]", ".", "to", "_", "numpy", "())", " -", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "\n", "    ", "indices", " =", " heap", "q", ".", "nsmall", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " x", ":", " residuals", "[", "x", "])", "\n", "\n", "    ", "return", " indices", ",", " model", "\n", "\n", "class", " Task", "Func", ":", "\n", "    ", "\"", "\"", "\"", "\n", "    ", "Task", "Func", " class", ".", "\n", "    ", "\"", "\"", "\"", "\n", "\n", "    ", "def", " __", "init", "__(", "self", ",", " func", ":", " Call", "able", "[[", "pd", ".", "DataFrame", ",", " str", ",", " str", ",", " int", "]", ",", " tuple", "[", "list", "[", "int", "]", ",", " Linear", "Reg", "ression", "]]", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Initialize", " a", " new", " Task", "Func", " instance", "."], "logprobs": [-1.1016788482666016, -0.39688363671302795, -0.03339549899101257, -0.0002451834443490952, -0.003660052316263318, -0.3858696222305298, -0.01740163564682007, -0.6697954535484314, -0.008121561259031296, -0.003965848125517368, -0.009986437857151031, -0.00502774678170681, -2.8132995794294402e-05, -0.08009831607341766, -0.29946085810661316, -0.11065248399972916, -1.3673232793807983, -1.164067029953003, -0.0004886387032456696, -0.0008232779800891876, -0.0010621865512803197, -0.26621514558792114, -1.3732192516326904, -0.10960797965526581, -0.6790186762809753, -0.001511027687229216, -0.3090725243091583, -0.009278510697185993, -0.00031013446277938783, -0.0010668307077139616, -0.15253479778766632, -0.020989438518881798, -0.0020698329899460077, -7.1403817855753e-05, -2.038458114839159e-05, -0.00016759421851020306, -0.00018618757894728333, -2.7894584491150454e-05, -0.00014911970356479287, -6.01988795096986e-05, -0.00025138078490272164, -0.00041952868923544884, -0.00012218205665703863, -3.0040289857424796e-05, -0.00014625910262111574, -0.0009039129945449531, -0.0002033503697020933, -0.00564220268279314, -0.005359922535717487, -8.415821503149346e-05, -0.008554717525839806, -0.0003197873884346336, -0.0005729940603487194, -0.0006607971154153347, -0.0003995097358711064, -0.0010146714048460126, -0.001210552523843944, -0.0016436175210401416, -0.0006768796010874212, -0.00027783826226368546, -0.00029571453342214227, -0.3111148774623871, -0.0011129144113510847, -2.0011112689971924, -0.007644092198461294, -0.006175721064209938, -1.1324817933200393e-05, -0.00012063252506777644, -0.041111335158348083, -0.20469895005226135, -0.11071106791496277, -2.669177293777466, -0.12609632313251495, -0.03266473114490509, -0.02764079160988331, -0.1344115138053894, -0.013397077098488808, -0.5853731036186218, -0.46047160029411316, -0.6899742484092712, -0.3293837606906891, -0.08020438253879547, -0.0007394201820716262, -2.454752206802368, -0.01856381818652153, -0.006846303585916758, -0.005113380495458841, -0.8636171817779541, -0.019101599231362343, -0.0008631794480606914, -0.04205475375056267, -0.11370997875928879, -0.6277758479118347, -0.01765078864991665, -0.6567791700363159, -0.05862922966480255, -0.027392491698265076, -0.9694650173187256, -2.0852208137512207, -0.00042465253500267863, -0.000379132863599807, -0.025326348841190338, -0.2685660421848297, -0.031134450808167458, -0.16649001836776733, -0.0023858672939240932, -0.0703357607126236, -0.0005721600609831512, -0.05095284804701805, -0.004540490917861462, -0.0004514628672040999, -0.012030894868075848, -0.008482025936245918, -0.013444360345602036, -0.2179090827703476, -0.029179662466049194, -0.19896598160266876, -0.003794613992795348, -0.0027377051301300526, -0.07965511083602905, -0.8051745891571045, -0.000754786713514477, -0.7369657158851624, -0.17119431495666504, -0.019020546227693558, -0.08659049868583679, -0.013352966867387295, -0.04192730411887169, -0.0031112858559936285, -0.011661221273243427, -0.2592126131057739, -0.06202610209584236, -0.0003815161471720785, -0.00036638224264606833, -0.1090552881360054, -0.33380526304244995, -0.043208517134189606, -0.004501804243773222, -0.004044448956847191, -0.01176148746162653, -0.000774917658418417, -0.01459023728966713, -0.005745088681578636, -6.651657167822123e-05, -0.0023588708136230707, -0.003140876302495599, -0.7623129487037659, -0.004298257641494274, -0.8268188238143921, -0.019307533279061317, -0.9357936382293701, -0.0007524043321609497, -0.00016330339713022113, -0.5050066709518433, -1.7523612768854946e-05, -0.003087993012741208, -0.025366447865962982, -0.00460516382008791, -0.043159425258636475, -0.00019047829846385866, -1.0473521947860718, -4.005352093372494e-05, -0.009011550806462765, -8.40390202938579e-05, -1.7881377516459906e-06, -0.011542209424078465, -0.00014840454969089478, -0.07305188477039337, -0.004472016356885433, -0.05858403444290161, -1.3852356672286987, -0.0007678897818550467, -0.21886596083641052, -0.00036900385748595, -0.0001045410826918669, -0.024634087458252907, -0.03100675530731678, -0.7692960500717163, -0.0002549561613705009, -0.0402841679751873, -0.04926196113228798, -0.006877677980810404, -0.0016877705929800868, -0.5947619676589966, -0.012148790061473846, -3.535003185272217, -2.0045418739318848, -2.5693979263305664, -1.8422324657440186, -0.00789828971028328, -0.039180099964141846, -0.40229085087776184, -0.0003026265767402947, -6.198863957251888e-06, -0.2720626890659332, -0.006511897314339876, -1.742919921875, -0.22344152629375458, -0.8712531328201294, -2.1993141174316406, -0.06849793344736099, -1.1868362426757812, -0.4611501693725586, -7.30726242181845e-05, -7.390948667307384e-06, -0.00082923355512321, -0.36855483055114746, -0.005017071962356567, -0.14538118243217468, -0.024499043822288513, -0.01782926917076111, -0.00023803261865396053, -0.06686580926179886, -0.21179957687854767, -2.0162203311920166, -1.7794488668441772, -0.1619926393032074, -0.0001134808044298552, -2.4821176528930664, -1.6922698020935059, -0.00014745102089364082, -0.0017502479022368789, -0.009289966896176338, -0.009569723159074783, -0.0004219118563923985, -0.0034975565504282713, -0.036364175379276276, -0.03782862797379494, -0.03497171029448509, -0.0005769256968051195, -1.737534523010254, -0.14618992805480957, -0.12460307776927948, -0.28729069232940674, -0.003121743444353342, -0.0007333449902944267, -0.0005744237569160759, -0.04988216236233711, -0.00039295581518672407, -0.0004801789182238281, -0.01975691132247448, -0.510664701461792, -0.006177261006087065, -0.0014692475087940693, -0.3672325909137726, -9.667406266089529e-05, -1.2397689715726301e-05, -0.01751924864947796, -0.00522094639018178, -0.6201239228248596, -0.9224381446838379, -2.6234307289123535, -0.2749687731266022, -0.004227629862725735, -0.48982587456703186, -0.11060530692338943], "finish_reason": "length"}], "metrics": {"energy": 294.62718703556067, "energy_per_token": 1.1508874493576589, "time": 11.775792, "time_per_token": 0.0459991875}}
