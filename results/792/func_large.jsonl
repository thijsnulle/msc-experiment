{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Specified columns are not in the provided DataFrame\")\n\n    x = df[feature].to_numpy().reshape(-1, 1)\n    y = df[target].to_numpy()\n\n    model = LinearRegression().fit(x, y)\n\n    residuals = abs(y - model.predict(x))\n\n    idx = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n\n    return idx, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Spec", "ified", " columns", " are", " not", " in", " the", " provided", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "x", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "x", ",", " y", ")", "\n", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "y", " -", " model", ".", "predict", "(", "x", "))", "\n", "\n", "    ", "idx", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "res", "idual", "s", ".", "__", "get", "item", "__", ")", "\n", "\n", "    ", "return", " idx", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6430804133415222, -0.13455918431282043, -0.012289632111787796, -8.106198947643861e-06, -0.01624947600066662, -0.167974054813385, -0.0030265499372035265, -0.5265555381774902, -0.002601098734885454, -0.00016080040950328112, -2.2291887944447808e-05, -9.274052717955783e-05, -0.0002833203470800072, -0.00013469743134919554, -0.001557686016894877, -0.00141258561052382, -0.003404180984944105, -0.007412785664200783, -0.0031715352088212967, -1.168244216387393e-05, -0.19875667989253998, -1.0236680507659912, -0.15822216868400574, -1.842069387435913, -0.0018321170937269926, -0.12541985511779785, -1.21088707447052, -0.008015490137040615, -0.024295689538121223, -0.17244206368923187, -0.5022329688072205, -0.023516785353422165, -0.002632131101563573, -1.3212106227874756, -0.002693360671401024, -0.002878453116863966, -0.4366494417190552, -0.0009195152088068426, -2.7616934776306152, -0.11743170022964478, -0.09895525872707367, -0.09879770129919052, -0.004909484181553125, -0.0008347125840373337, -0.10311625897884369, -0.874756395816803, -1.6569954823353328e-05, -0.039887454360723495, -0.022324325516819954, -0.133637934923172, -0.0013965149410068989, 0.0, -0.056426048278808594, -3.790783375734463e-05, -0.00024732868769206107, -0.04902249202132225, -3.313963316031732e-05, -0.00014661667228210717, -0.032373011112213135, -0.0010912423022091389, -0.007919342257082462, -0.0005293875001370907, -0.0002951186615973711, -0.0004122599493712187, -0.00030286493711173534, -8.630380034446716e-05, -0.11566203832626343, -0.001862221397459507, -7.271740287251305e-06, -0.00013255194062367082, -0.00018571082910057157, -0.3944351077079773, -0.3691098093986511, -0.00023707917716819793, -0.3570600748062134, -0.0015575670404359698, -0.0034991009160876274, -5.602820692729438e-06, -6.556489552167477e-06, -0.008540061302483082, -0.686922550201416, -8.356221951544285e-05, -8.320462075062096e-05, -0.001211266964673996, -0.0031475310679525137, -0.0038474597968161106, -0.0006379238329827785, -0.005227468442171812, -0.8826355338096619, -0.00015829740732442588, -1.2001670598983765, -0.06596292555332184, -0.03659887984395027, -0.031064076349139214, -3.23991060256958, -0.008348093368113041, -0.5552133321762085, -0.010698816739022732, -0.010140801779925823, -2.6940935640595853e-05, -0.0021145620848983526, -8.892617915989831e-05, -0.00025960413040593266, -0.0033694894518703222, -0.03523010388016701, -0.6280900239944458, -0.00042012447374872863, -4.00208854675293, -0.45382803678512573, -0.293720006942749, -0.00019333878299221396, -0.00013541258522309363, -0.01249826978892088, -5.960462772236497e-07, 0.0, -0.00024971229140646756, -0.014865812845528126, -0.00415913388133049, -0.003655063919723034, -7.164221460698172e-05, -0.0024380742106586695, -1.764281842042692e-05, -0.01734340749680996, -1.6689286894688848e-06, -7.510157047363464e-06, -0.0002610342635307461, -0.00018249277491122484, -2.4743380546569824, -0.006583666894584894, -0.16358569264411926, -3.659658250398934e-05, -1.966933996300213e-05, -8.010543388081715e-05, -0.01583888567984104, -4.768370445162873e-07, -1.168244216387393e-05, -1.9073468138230965e-06, -0.0007470439304597676, -0.0060530914925038815, -0.2686251699924469, -0.00022063204960431904, -0.012932123616337776, -0.06309864670038223, -0.004528267774730921, -0.001100768567994237, -1.4164611101150513, -2.622600959512056e-06, -1.311301275563892e-06, -3.6954811548639555e-06, -6.758938252460212e-05, -0.18248838186264038], "finish_reason": "stop"}], "metrics": {"energy": 866.9023896579741, "energy_per_token": 5.741075428198505, "time": 23.646465, "time_per_token": 0.15659910596026488}}
{"outputs": [{"text": "columns = list(df.columns)\n    if feature not in columns or target not in columns:\n        raise ValueError(\"feature and target must be in the DataFrame\")\n\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1, 1)\n\n    # fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # calculate residuals\n    residuals = y - model.predict(X)\n    residuals = residuals.flatten()\n\n    # find the top n residuals\n    heap = []\n    for i, val in enumerate(residuals):\n        heapq.heappush(heap, (val, i))\n    indices = heapq.nlargest(n, heap)\n\n    return [i for _, i in indices], model", "tokens": ["columns", " =", " list", "(", "df", ".", "columns", ")", "\n", "    ", "if", " feature", " not", " in", " columns", " or", " target", " not", " in", " columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "feature", " and", " target", " must", " be", " in", " the", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "\n", "    ", "#", " fit", " linear", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "#", " calculate", " residuals", "\n", "    ", "res", "idual", "s", " =", " y", " -", " model", ".", "predict", "(", "X", ")", "\n", "    ", "res", "idual", "s", " =", " residuals", ".", "fl", "atten", "()", "\n", "\n", "    ", "#", " find", " the", " top", " n", " residuals", "\n", "    ", "heap", " =", " []", "\n", "    ", "for", " i", ",", " val", " in", " enumerate", "(", "res", "idual", "s", "):", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "heap", ",", " (", "val", ",", " i", "))", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " heap", ")", "\n", "\n", "    ", "return", " [", "i", " for", " _", ",", " i", " in", " indices", "]", ",", " model"], "logprobs": [-3.285316228866577, -0.10575680434703827, -2.9772329330444336, -0.005056213121861219, -0.042252473533153534, -0.04629974812269211, -0.009588142856955528, -0.04359707236289978, -0.012191185727715492, -0.13758569955825806, -0.09876476228237152, -0.24675126373767853, -0.032813556492328644, -1.847726889536716e-05, -0.019836384803056717, -1.025062084197998, -0.004494327586144209, -0.00026127262390218675, -4.31528314948082e-05, -0.0008835464250296354, -0.004666984546929598, -0.002222212729975581, -0.0047760214656591415, -0.027905607596039772, -0.003994463477283716, -7.903263758635148e-05, -0.24553866684436798, -0.6825413107872009, -3.425751209259033, -0.43737882375717163, -0.12430109083652496, -0.699839174747467, -0.05590188875794411, -0.9357672333717346, -0.5651562213897705, -0.7692146897315979, -0.010418078862130642, -0.5092505812644958, -0.0017020514933392406, -0.002508828416466713, -0.4490416347980499, -0.0007696765242144465, -2.8546791076660156, -0.08847429603338242, -0.0927535817027092, -0.11411526799201965, -0.003740933956578374, -0.001522573409602046, -0.08309376984834671, -0.731404185295105, -0.029487477615475655, -0.0006021831650286913, 0.0, -0.03169092535972595, -3.6477376852417365e-05, -0.0002153879904653877, -0.03201886638998985, -3.969590397900902e-05, -6.723177648382261e-05, -0.03414209559559822, -0.0006789048202335835, -0.07858432084321976, -0.0010507544502615929, -0.00035065223346464336, -0.0007107115816324949, -0.00013374387344811112, -2.3007127310847864e-05, -0.033227503299713135, -0.00017510310863144696, -0.5357364416122437, -0.0019482456846162677, -1.0728830375228426e-06, -0.0009894242975860834, -3.2186455882765586e-06, -5.23315102327615e-05, -0.0018271195003762841, -1.2040065485052764e-05, -4.5298504119273275e-05, -0.0019620470702648163, -0.5097361207008362, -0.0002469711471349001, -1.8954057693481445, -1.9450490474700928, -0.6498956084251404, -0.046629417687654495, -0.23782698810100555, -0.1564958691596985, -0.001256391522474587, -0.2580318748950958, -0.0016277885297313333, -0.003870259737595916, -5.125986263010418e-06, -2.8132995794294402e-05, -0.007220838218927383, -0.6481480598449707, -0.000904032145626843, -0.00444104103371501, -0.00647222064435482, -3.957670196541585e-05, -6.997340824455023e-05, -0.0008310201810672879, -0.012811025604605675, -0.002605379093438387, -0.0006412595394067466, -0.0018571049440652132, -0.07210976630449295, -0.0002915434306487441, -0.09200296550989151, -0.5015164017677307, -0.14905323088169098, -0.1152132898569107, -0.00018606838420964777, -0.5717102885246277, -0.04687264561653137, -0.008280470035970211, -0.005212763790041208, -0.36925196647644043, -0.01786826364696026, -0.005148960277438164, -1.9073304429184645e-05, -5.6980417866725475e-05, -3.731181277544238e-05, -0.0001679517881711945, -0.00027998341829515994, -0.06514490395784378, -1.2237671613693237, -0.8487845659255981, -0.015918787568807602, -0.11384201049804688, -0.36061662435531616, -0.2569151222705841, -0.08490728586912155, -0.2930435538291931, -8.391981828026474e-05, -0.0018741200910881162, -0.13316765427589417, -0.2134283483028412, -0.0003524397616274655, -0.10018296539783478, -1.6724588871002197, -1.488867163658142, -3.034346580505371, -0.21794311702251434, -0.4602079391479492, -0.7403104305267334, -0.0010455148294568062, -2.2650294303894043, -0.04410194233059883, -0.20115306973457336, -0.04430301859974861, -0.06868325918912888, -0.06636137515306473, -0.1494019478559494, -0.3213254511356354, -2.05861496925354, -0.0003831844369415194, -0.008223483338952065, -0.00013815402053296566, -0.002642593812197447, -8.654219709569588e-05, -2.3841830625315197e-06, -0.0027191590052098036, -0.0007468056865036488, -0.003174862591549754, -0.9415026307106018, -0.036456018686294556, -2.253030106658116e-05, -8.582700684200972e-05, -4.291525328881107e-06, -2.3841855067985307e-07, -0.00040749352774582803, -0.0003692421887535602, -5.6503606174374e-05, -0.710893452167511, -0.7624245882034302, -0.015934040769934654, -0.007519276347011328, -0.001281036646105349, -0.03745470568537712, -1.3161957263946533, -0.7855530381202698, -0.006697113625705242, -2.4088690280914307, -0.024268463253974915, -8.594620157964528e-05, -0.21681079268455505, -2.3841855067985307e-07, 0.0, -1.883488948806189e-05, -0.006154632195830345, -0.0028980658389627934, -0.002023793524131179, -0.09524810314178467, -0.0070846062153577805, -1.1277849674224854, -0.00014172980445437133, -0.8202409744262695, -0.21358607709407806, -1.0551879405975342, -0.6727386116981506, -0.289267361164093, -0.0021175360307097435, -0.005736080463975668, -0.00013863079948350787, -0.004663662053644657, -0.02856004238128662, -0.008847558870911598, -0.0016734894597902894], "finish_reason": "stop"}], "metrics": {"energy": 787.7454731941218, "energy_per_token": 3.787237851894816, "time": 18.486736, "time_per_token": 0.08887853846153847}}
{"outputs": [{"text": "# check if feature and target columns are in the provided DataFrame\n    if feature not in df.columns:\n        raise ValueError(\"'{}' column not in provided DataFrame.\".format(feature))\n    elif target not in df.columns:\n        raise ValueError(\"'{}' column not in provided DataFrame.\".format(target))\n\n    # get the feature and target columns\n    feature_col = df[feature].values.reshape(-1, 1)\n    target_col = df[target].values.reshape(-1, 1)\n\n    # create the linear regression model\n    reg = LinearRegression().fit(feature_col, target_col)\n\n    # calculate the residuals\n    residuals = target_col - reg.predict(feature_col)\n\n    # create the heap and store the residuals in it along with their index\n    heap = []\n    for i, res in enumerate(residuals):\n        heapq.heappush(heap, (res[0], i))\n\n    # get the indices of the n largest residuals\n    indices = [i", "tokens": ["#", " check", " if", " feature", " and", " target", " columns", " are", " in", " the", " provided", " Data", "Frame", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "{}", "'", " column", " not", " in", " provided", " Data", "Frame", ".", "\"", ".", "format", "(", "feature", "))", "\n", "    ", "elif", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "{}", "'", " column", " not", " in", " provided", " Data", "Frame", ".", "\"", ".", "format", "(", "target", "))", "\n", "\n", "    ", "#", " get", " the", " feature", " and", " target", " columns", "\n", "    ", "feature", "_", "col", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "target", "_", "col", " =", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "\n", "    ", "#", " create", " the", " linear", " regression", " model", "\n", "    ", "reg", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "feature", "_", "col", ",", " target", "_", "col", ")", "\n", "\n", "    ", "#", " calculate", " the", " residuals", "\n", "    ", "res", "idual", "s", " =", " target", "_", "col", " -", " reg", ".", "predict", "(", "feature", "_", "col", ")", "\n", "\n", "    ", "#", " create", " the", " heap", " and", " store", " the", " residuals", " in", " it", " along", " with", " their", " index", "\n", "    ", "heap", " =", " []", "\n", "    ", "for", " i", ",", " res", " in", " enumerate", "(", "res", "idual", "s", "):", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "heap", ",", " (", "res", "[", "0", "]", ",", " i", "))", "\n", "\n", "    ", "#", " get", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "indices", " =", " [", "i"], "logprobs": [-1.6816747188568115, -2.355574369430542, -0.5397672653198242, -1.5360528230667114, -0.07745005190372467, -0.009799469262361526, -0.6516667604446411, -0.33310818672180176, -0.16650596261024475, -0.20832559466362, -1.4143916368484497, -0.12075798958539963, -0.004496107809245586, -0.044546812772750854, -0.002196639310568571, -0.07680852711200714, -0.1066369116306305, -0.003206471214070916, -1.168244216387393e-05, -0.012601512484252453, -0.1580047756433487, -0.00129413278773427, -0.6731297373771667, -0.002812955528497696, -0.0025013370905071497, -0.005555309820920229, -0.0029763944912701845, -3.242440288886428e-05, -0.06491982191801071, -1.6928855180740356, -2.664158344268799, -0.5476536154747009, -0.006709073204547167, -0.9894663095474243, -0.5435742735862732, -0.3935171067714691, -1.6212446689605713, -0.02147761546075344, -0.001583989942446351, -1.2293871641159058, -0.007683249190449715, -0.011607373133301735, -0.0006370898918248713, -0.000821014866232872, -0.011227170005440712, -0.00127948890440166, -0.001967162825167179, -0.12426203489303589, -2.5673089027404785, -0.0026897939387708902, -0.0002325502864550799, -4.7801782784517854e-05, -0.00012218205665703863, -0.0012460333527997136, -0.00010716341057559475, -0.00025293012731708586, -0.0004433602443896234, -0.0017312075942754745, -0.0003526780928950757, -0.000248401309363544, -7.152555099310121e-07, -0.00039915222441777587, -0.009383031167089939, -0.0022448119707405567, -7.164221460698172e-05, -0.0002675890573300421, -0.0014180614380165935, -0.0006171943969093263, -0.00016211149340961128, -0.0007720588473603129, -0.0006765222642570734, -0.0002661589242052287, -0.007601857651025057, -0.001593511551618576, -0.00010287232726113871, -7.271740287251305e-06, -0.000120751719805412, -0.022593118250370026, -0.00012790338951162994, -0.0001928620331455022, -0.2577916383743286, -0.001128751551732421, -0.21495765447616577, -3.130154609680176, -0.716260552406311, -0.39899715781211853, -0.044878315180540085, -0.009390353225171566, -0.5534526109695435, -0.6352869868278503, -0.0002224197960458696, -1.0213876962661743, -0.09665224701166153, -0.31837230920791626, -0.01147126592695713, -0.021784892305731773, -0.038288574665784836, -0.0004864939546678215, -0.0004338276921771467, -1.0604244470596313, -0.28607362508773804, -0.6564855575561523, -0.003350123530253768, -8.344646857949556e-07, -0.019376052543520927, -3.838465272565372e-05, -0.00020930961181875318, -0.022004736587405205, -2.098061486321967e-05, -9.929640509653836e-05, -0.024020371958613396, -0.00028391621890477836, -0.0018186711240559816, -0.0001722425949992612, -0.00011526874004630372, -0.000865561596583575, -0.0008186326595023274, -0.000739539333153516, -0.00019202772818971425, -3.242440288886428e-05, -0.02107931859791279, -0.0007992172613739967, -0.11098635941743851, -0.003618955845013261, -2.0265558760002023e-06, -0.003824540413916111, -1.0728830375228426e-06, -2.9801878554280847e-05, -0.0013291343348100781, -5.483612312673358e-06, -3.099393507000059e-05, -0.0011523280991241336, -0.03965982049703598, -0.0005614373367279768, -0.005719723645597696, -1.7508113384246826, -1.4537787437438965, -0.4894023537635803, -0.046139709651470184, -0.007962863892316818, -0.5944749116897583, -0.0001784403866622597, -2.824526786804199, -0.20790697634220123, -0.002410722430795431, -7.510157047363464e-06, -3.838465272565372e-05, -0.004463471472263336, -1.583088755607605, -8.308542601298541e-05, -0.00011121608258690685, -0.010835855267941952, -0.00014435203047469258, -5.960462772236497e-07, -0.0008808070560917258, -0.0006189814303070307, -0.00012790338951162994, -3.814689989667386e-06, -0.00024387246230617166, -0.0025978884659707546, -0.11673100292682648, -0.0004899493651464581, -0.00732888700440526, -0.6607404351234436, -0.4374520182609558, -0.204207181930542, -0.16042882204055786, -9.77468371274881e-05, -0.27949899435043335, -0.03768330067396164, -0.012546654790639877, -0.003848291002213955, -0.30502262711524963, -0.003948868252336979, -4.494089080253616e-05, -0.012141017243266106, -0.007144379895180464, -1.156323378381785e-05, -3.0397906812140718e-05, -5.7338023907504976e-05, -0.0004111875023227185, -3.6477376852417365e-05, -1.1920928244535389e-07, -0.00029059001826681197, -0.023845087736845016, -0.15702246129512787, -0.000254241080256179, -0.0034855585545301437, -1.1114014387130737, -2.9436986446380615, -0.3714919686317444, -2.138666868209839, -3.688039779663086, -0.21774762868881226, -1.0153828859329224, -2.2975943088531494, -0.7455024719238281, -3.2361927032470703, -0.013665926642715931, -0.07035309076309204, -2.4606664180755615, -0.18658486008644104, -0.0003780603874474764, -0.5417233109474182, -0.011921350844204426, -0.5758026838302612, -0.014812959358096123, -0.01389261707663536, -0.025386320427060127, -0.25332632660865784, -0.44293999671936035, -1.0541938543319702, -0.0027287888806313276, -0.010258683934807777, -3.4450891689630225e-05, -0.004947087727487087, -0.00011300401820335537, -1.156323378381785e-05, -0.021198252215981483, -0.0006167178507894278, -0.0028318562544882298, -0.12668105959892273, -0.07574462890625, -2.5629668016335927e-05, -6.41325386823155e-05, -2.3841855067985307e-07, -1.311301275563892e-06, -0.0001294529065489769, -0.0003411188081372529, -0.00011121608258690685, -0.7150008678436279, -0.9383841156959534, -0.09751530736684799, -9.321732068201527e-05, -0.0009336879593320191, -0.01315250899642706, -0.0037539980839937925, -0.0032168091274797916, -0.035931169986724854, -0.00997274648398161, -0.0007026110542938113, -0.00868956744670868, -0.64727783203125, -0.01618613861501217, -1.2985260486602783, -0.012049740180373192, -0.01212547067552805, -0.13603585958480835, -0.008118132129311562, -0.005043166223913431, -0.11928849667310715, -0.00016759421851020306, -0.4248952269554138, -0.006077855359762907, -0.2858591377735138, -1.5022343397140503], "finish_reason": "length"}], "metrics": {"energy": 951.5303029708858, "energy_per_token": 3.7169152459800228, "time": 22.471882, "time_per_token": 0.0877807890625}}
{"outputs": [{"text": "if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"df must be a DataFrame\")\n\n    if not isinstance(feature, str):\n        raise TypeError(\"feature must be a string\")\n\n    if not isinstance(target, str):\n        raise TypeError(\"target must be a string\")\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if feature not in df.columns:\n        raise ValueError(f\"column {feature} does not exist\")\n\n    if target not in df.columns:\n        raise ValueError(f\"column {target} does not exist\")\n\n    if not np.issubdtype(df[feature].dtype, np.number):\n        raise TypeError(f\"column {feature} must be numerical\")\n\n    if not np.issubdtype(df[target].dtype, np.number):\n        raise TypeError(f\"column {target} must be numerical\")\n\n    model = LinearRegression()\n    ", "tokens": ["if", " not", " isinstance", "(", "df", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "df", " must", " be", " a", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "feature", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "feature", " must", " be", " a", " string", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "target", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "target", " must", " be", " a", " string", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "n", ",", " int", ")", " or", " n", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " must", " be", " a", " positive", " integer", "\"", ")", "\n", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "column", " {", "feature", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "column", " {", "target", "}", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "if", " not", " np", ".", "iss", "ub", "d", "type", "(", "df", "[", "feature", "]", ".", "d", "type", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "column", " {", "feature", "}", " must", " be", " numerical", "\"", ")", "\n", "\n", "    ", "if", " not", " np", ".", "iss", "ub", "d", "type", "(", "df", "[", "target", "]", ".", "d", "type", ",", " np", ".", "number", "):", "\n", "        ", "raise", " Type", "Error", "(", "f", "\"", "column", " {", "target", "}", " must", " be", " numerical", "\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    "], "logprobs": [-0.7251375317573547, -2.0984225273132324, -2.260043144226074, -0.00010215714428341016, -0.3435906171798706, -0.017612604424357414, -0.03676136955618858, -4.029192859889008e-05, -0.014542890712618828, -0.0737113282084465, -0.002075067488476634, -0.003846272360533476, -0.021524867042899132, -0.8795561790466309, -5.006664650863968e-05, -0.2490665316581726, -0.33259183168411255, -0.5196269154548645, -0.24024763703346252, -0.002883089007809758, -0.12799322605133057, -1.4616425037384033, -0.0054686469957232475, -0.18519577383995056, -0.00029583368450403214, -0.001348301419056952, -1.3629684448242188, -0.00030882356804795563, -0.17491668462753296, -0.6679466366767883, -0.5370351076126099, -3.516612196108326e-05, -0.4063725173473358, -0.00031382881570607424, -0.006084135267883539, -0.38615089654922485, -0.00031668893643654883, -0.000501983508002013, -0.002419760450720787, -0.004227392375469208, -3.0636318115284666e-05, -0.003573700087144971, -0.0071923150680959225, -0.21076050400733948, -0.021371666342020035, -0.0015286438865587115, -0.05716736242175102, -0.2504790425300598, -0.02023739367723465, -4.494089080253616e-05, -7.819823804311454e-05, -0.10479392111301422, -4.076874756719917e-05, -0.0034202192910015583, -0.06942722201347351, -0.017468761652708054, -1.3708974620385561e-05, -0.006524569820612669, -3.7431014789035544e-05, -0.0002499506517779082, -0.00022682955022901297, -6.365573790390044e-05, -0.00020728347590193152, -4.124556289752945e-05, -0.0007447806419804692, 0.0, -9.548207890475169e-05, -0.00015376816736534238, -0.01441517286002636, -0.0008922410197556019, -8.880697714630514e-05, -0.000563224486541003, -0.000816012208815664, -0.0005476167425513268, -3.862306402879767e-05, -0.0002012050390476361, -0.0059351869858801365, -0.00015007323236204684, -0.09054610878229141, -0.5179376006126404, -0.18307630717754364, -1.823885577323381e-05, -0.003910040017217398, -0.00011455356434453279, -0.008460748940706253, -1.685049295425415, -0.026867391541600227, -0.011872109957039356, -0.45081594586372375, -0.0007326302584260702, -0.6801354885101318, -0.017151247709989548, -0.0005290300468914211, -0.0004391897819004953, -0.0009367844904772937, -0.08268207311630249, -2.038458114839159e-05, -0.003394201397895813, -0.013836889527738094, -0.02111433632671833, -0.002314747544005513, -0.0025379611179232597, -0.09948506951332092, -0.6029510498046875, -0.008222891949117184, -0.01541204284876585, -0.00018451895448379219, -0.00039867559098638594, -0.008850039914250374, -0.0003526780928950757, -0.1324242204427719, -0.11622320115566254, -0.010809557512402534, -3.4570634852570947e-06, -0.006654246710240841, -0.13315366208553314, -0.000735608336981386, -0.5009497404098511, -0.0004103533865418285, -0.000491855782456696, -0.0008201810996979475, -0.0048966724425554276, -5.125986263010418e-06, -0.0043162996880710125, -0.4083716571331024, -0.0071037812158465385, -2.1792330741882324, -0.40465813875198364, -0.003030471969395876, -0.03528810292482376, -2.527480363845825, -0.000788258679676801, -0.01258609164506197, -1.456119179725647, -0.00015162272029556334, -0.00021646064124070108, -0.029941096901893616, -7.223821739898995e-05, -0.0031699903775006533, -0.0022130541037768126, -0.0005902693956159055, -6.437280717364047e-06, -2.610649426060263e-05, -5.94836674281396e-05, -4.279521817807108e-05, -0.00019786784832831472, -8.022463589441031e-05, -0.0002643712505232543, -0.00014780859055463225, -0.0002244459028588608, -8.34461570775602e-06, -7.60526381782256e-05, -0.0009666775586083531, -2.884823152271565e-05, -0.0020293849520385265, -0.0009477414423599839, -0.00695462990552187, -0.00013815402053296566, -0.0003629264247138053, -8.987976616481319e-05, -0.00012468514614738524, -0.00039402826223522425, -8.129743218887597e-05, -0.00018261195509694517, -0.01007388997823, -0.000705589191056788, -2.889950752258301, -2.3664815425872803, -2.314711570739746, -0.00017069313616957515, -0.06827916949987411, -0.0032276222482323647, -5.006777428206988e-06, -4.410734163684538e-06, -8.40390202938579e-05, -0.006058068014681339, -0.013354849070310593, -0.01893375627696514, -0.00012730741582345217, -0.026305323466658592, -0.0020184398163110018, -0.01942620985209942, -0.0011460172245278955, -0.0010879080509766936, -4.529942543740617e-06, -0.0023454318288713694, -0.1927381008863449, -0.0006920088781043887, -0.0004764852055814117, -0.005574870388954878, -0.922141969203949, -1.0847986231965479e-05, -0.0009092725813388824, -0.16011643409729004, -0.001522811478935182, -0.3517220914363861, -0.010620265267789364, -0.001682177186012268, -0.001580181298777461, -0.11778430640697479, -0.22317321598529816, -0.5826714634895325, -0.0034696399234235287, -5.364274329622276e-05, -0.00017391123401466757, -0.00327645824290812, -7.545663538621739e-05, -0.002960348967462778, -0.00284077157266438, -0.001706811715848744, -1.1920928244535389e-07, -1.4781842764932662e-05, -7.152555099310121e-07, 0.0, -2.3841574147809297e-05, -9.298280929215252e-06, -2.1219027985353023e-05, -8.67805938469246e-05, -0.0016762267332524061, -1.3708974620385561e-05, -0.0009084388730116189, -4.768360213347478e-06, -1.1920928244535389e-07, -1.966933996300213e-05, -7.581423415103927e-05, -2.3841855067985307e-07, -4.2914423829643056e-05, -0.0002739054325502366, -2.2053474822314456e-05, -0.00021979777375236154, -0.00012540031457319856, -0.0016724183224141598, 0.0, -4.5060096454108134e-05, -0.00037174468161538243, -2.372236667724792e-05, -0.0006428082706406713, -0.00029702542815357447, -0.004671018570661545, -5.1377883210079744e-05, -0.00010692501382436603, -5.185469490243122e-05, -0.0005097282119095325, -0.00016830935783218592, -8.475421054754406e-05, -0.00019810620869975537, -0.006685271859169006, -0.0006526962388306856, -1.227458119392395, -0.00259515387006104, -0.0047760214656591415, -9.417489309271332e-06, -2.622600959512056e-06, -0.012129710987210274, -0.1014285534620285, -0.2110748440027237], "finish_reason": "length"}], "metrics": {"energy": 922.5480571393962, "energy_per_token": 3.6037033482007663, "time": 22.465277, "time_per_token": 0.08775498828125}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not in DataFrame\")\n\n    df_copy = df.copy()\n    model = LinearRegression()\n    model.fit(df_copy[feature].to_numpy().reshape(-1, 1),\n              df_copy[target].to_numpy().reshape(-1, 1))\n\n    df_copy[\"predictions\"] = model.predict(df_copy[feature].to_numpy().reshape(-1, 1))\n    df_copy[\"residuals\"] = df_copy[target] - df_copy[\"predictions\"]\n    df_copy[\"abs_residuals\"] = df_copy[\"residuals\"].abs()\n    top_n = heapq.nlargest(n, enumerate(df_copy[\"abs_residuals\"]), key=lambda x: x[1])\n\n    return [index for index, _ in top_n], model<", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Columns", " {", "feature", "}", " or", " {", "target", "}", " not", " in", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", "_", "copy", " =", " df", ".", "copy", "()", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "_", "copy", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", "\n", "              ", "df", "_", "copy", "[", "target", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "df", "_", "copy", "[", "\"", "pred", "ictions", "\"", "]", " =", " model", ".", "predict", "(", "df", "_", "copy", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "df", "_", "copy", "[", "\"", "res", "idual", "s", "\"", "]", " =", " df", "_", "copy", "[", "target", "]", " -", " df", "_", "copy", "[", "\"", "pred", "ictions", "\"", "]", "\n", "    ", "df", "_", "copy", "[", "\"", "abs", "_", "res", "idual", "s", "\"", "]", " =", " df", "_", "copy", "[", "\"", "res", "idual", "s", "\"", "]", ".", "abs", "()", "\n", "    ", "top", "_", "n", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " enumerate", "(", "df", "_", "copy", "[", "\"", "abs", "_", "res", "idual", "s", "\"", "])", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "])", "\n", "\n", "    ", "return", " [", "index", " for", " index", ",", " _", " in", " top", "_", "n", "]", ",", " model", "<"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.9615052342414856, -0.1562800407409668, -1.5545073747634888, -0.45503875613212585, -0.0124429352581501, -0.08484803885221481, -1.3071720600128174, -0.003527967259287834, -0.000993830617517233, -0.001640999224036932, -0.3105262219905853, -0.18193309009075165, -0.7855039238929749, -0.007310544606298208, -0.3959929347038269, -0.0005756151513196528, -0.0017717868322506547, -0.3614727854728699, -0.0007407305529341102, -3.786370277404785, -1.2861396074295044, -1.8254966735839844, -0.005428573116660118, -0.015292536467313766, -0.4797251522541046, -0.04091121628880501, -0.06903389096260071, -0.06717026233673096, -0.29198378324508667, -1.4704536199569702, -0.00344469235278666, -0.005476471967995167, -1.156323378381785e-05, -1.07287787614041e-05, -0.00595355499535799, -0.10321130603551865, -0.1320900022983551, -0.30110713839530945, -0.010054771788418293, -9.417090768693015e-05, -0.004536930937319994, -0.11080092191696167, -0.10168185830116272, -0.0006723527330905199, -0.07882166653871536, -0.002751970896497369, -0.0006775943911634386, -0.00984928384423256, -0.5240196585655212, -1.1086402082582936e-05, -0.10090430080890656, -0.006901474203914404, -0.008777488023042679, -0.00025376438861712813, -1.0728830375228426e-06, -0.008050966076552868, -3.2543604902457446e-05, -0.00010132275929208845, -0.0627971962094307, -3.421248038648628e-05, -8.511180931236595e-05, -0.0014803176745772362, -1.4024803638458252, -0.04714640602469444, -0.0013718727277591825, -0.0022892954293638468, -8.702239938429557e-06, -0.0016294547822326422, -5.376194530981593e-05, -0.12486279010772705, -0.0010944573441520333, -0.0015945826889947057, -1.6331539882230572e-05, -0.00021002470748499036, -0.12534509599208832, -0.0017726197838783264, -0.0011874536285176873, -1.311301275563892e-06, -0.0002225389762315899, -6.079655122448457e-06, -5.8410845667822286e-05, -0.003467263886705041, -0.0034277038648724556, -0.030743800103664398, -0.005314745474606752, -0.6703513264656067, -0.0001928620331455022, -1.5358024835586548, -0.005460466258227825, -0.004360216204077005, -0.8232266902923584, -0.08351264148950577, -1.1463106870651245, -1.7185052633285522, -0.007388291414827108, -0.00031192204914987087, -0.001211266964673996, -0.04541398212313652, -0.00011228884250158444, -0.0026777861639857292, -9.7508447652217e-05, -1.194083333015442, -0.020114140585064888, -2.6940935640595853e-05, -0.00858320202678442, -0.006287673953920603, -0.0027157114818692207, -0.027548136189579964, -0.033221736550331116, -2.2291887944447808e-05, -0.00028772983932867646, -0.03277790918946266, -0.046742163598537445, -0.02124505117535591, -2.3841855067985307e-07, -0.08961368352174759, -0.0007379907765425742, -9.500529267825186e-05, -0.009984430857002735, -5.125986263010418e-06, -0.0018749530427157879, -0.09799519926309586, -0.09119182825088501, -0.07956594228744507, -0.0004693360242526978, -0.0003469580551609397, -0.05524807423353195, -0.0006530536338686943, -0.4112327992916107, -0.013351908884942532, -0.07471577078104019, -0.0032201362773776054, -0.00014101465058047324, -0.00017307691450696439, -0.6768818497657776, -0.006551217287778854, -4.1126360883936286e-05, -0.0062572285532951355, -0.08566882461309433, -0.015220919623970985, -0.11032383143901825, -0.008958149701356888, -0.00014911970356479287, 0.0, -0.014720398932695389, -0.0006210067658685148, -3.194758028257638e-05, -8.22540732769994e-06, -1.7881377516459906e-06, -0.0002547178009990603, -0.05670497938990593, -0.6711136102676392, -0.7988989353179932, -0.0008503158460371196, -0.0063102999702095985, -0.31812405586242676, -0.0003369478799868375, -0.8895668387413025, -0.014019696041941643, -0.00352559145539999, -0.020574131980538368, -0.008261790499091148, -0.0009602464851923287, -0.0001174142598756589, -0.00016080040950328112, -0.25022003054618835, -0.0008891443139873445, -3.4927710657939315e-05, -0.0052304333075881, -0.0003250309091527015, -0.0019996424671262503, -3.576278118089249e-07, -0.00013755806139670312, -5.245195097813848e-06, -0.0001299296854995191, -0.006072997581213713, -0.13777849078178406, -0.00021264675888232887, -0.019768482074141502, -0.9466793537139893, -1.7272627353668213, -0.03782736510038376, -0.3688397705554962, -0.48665904998779297, -0.3246311545372009, -5.5549986427649856e-05, -0.0002441108226776123, -0.0048383064568042755, -1.4305104514278355e-06, 0.0, -0.00029392691794782877, -0.04546843096613884, -0.010919931344687939, -2.3978235721588135, -0.000408327643526718, -0.0506359301507473, -0.004215759225189686, -2.1219027985353023e-05, -0.055127933621406555, -0.00032824851223267615, -0.01620854251086712, -2.861018856492592e-06, -8.22540732769994e-06, -5.960462772236497e-07, -5.090107151772827e-05, -7.986990567587782e-06, -0.1186765506863594, -0.0002177716523874551, -0.06206520274281502, -0.004597331862896681, -0.06129051372408867, -0.24955947697162628, -0.0017927302978932858, -0.017019174993038177, -0.003460611216723919, -0.0006443570018745959, -0.0011304186191409826, -0.004469405394047499, -1.2361358404159546, -0.0001728385395836085, -0.2806445062160492, -0.08766575157642365, -2.012342929840088, -0.021703941747546196, -0.04986957088112831, -0.0033312325831502676, -0.22966161370277405, -0.002544738817960024, -0.0038834409788250923, -7.629365427419543e-06, -5.960462772236497e-07, -0.0067961025051772594, -0.0031901916954666376, -0.0020327160600572824, -1.3673789501190186], "finish_reason": "length"}], "metrics": {"energy": 951.0558430643084, "energy_per_token": 3.7150618869699548, "time": 22.463348, "time_per_token": 0.087747453125}}
{"outputs": [{"text": "# Check if the specified columns are in the DataFrame\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns not in the DataFrame.\")\n    # Fit the linear regression model\n    model = LinearRegression()\n    X = df[feature].to_numpy().reshape(-1, 1)\n    y = df[target].to_numpy()\n    model.fit(X, y)\n    # Calculate the residuals\n    predictions = model.predict(X)\n    residuals = y - predictions\n    # Find the indices of the n largest residuals\n    largest_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_indices, model", "tokens": ["#", " Check", " if", " the", " specified", " columns", " are", " in", " the", " Data", "Frame", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Columns", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "#", " Fit", " the", " linear", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "    ", "#", " Calculate", " the", " residuals", "\n", "    ", "pred", "ictions", " =", " model", ".", "predict", "(", "X", ")", "\n", "    ", "res", "idual", "s", " =", " y", " -", " predictions", "\n", "    ", "#", " Find", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "largest", "_", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "__", "get", "item", "__", ")", "\n", "    ", "return", " largest", "_", "indices", ",", " model"], "logprobs": [-1.6816747188568115, -1.0266292095184326, -0.3390420377254486, -1.093360185623169, -0.4582633674144745, -0.04120743274688721, -0.39266839623451233, -0.11468228697776794, -0.011230941861867905, -0.5082523822784424, -0.003919539507478476, -0.18590010702610016, -0.0019160023657605052, -0.07123925536870956, -0.12412158399820328, -0.003067195415496826, -7.033323527139146e-06, -0.009500175714492798, -0.16463904082775116, -0.0007364421617239714, -0.40105482935905457, -0.001116724917665124, -7.152301259338856e-05, -1.3232143828645349e-05, -3.8742269680369645e-05, -0.00016735584358684719, -0.0004922132357023656, -0.0004978132783435285, -0.000596107158344239, -0.0025469979736953974, -0.011017678305506706, -0.001823549740947783, -9.298280929215252e-06, -0.08140729367733002, -0.4493640959262848, -2.327639102935791, -0.8166462779045105, -0.28222936391830444, -1.2257698774337769, -0.4403214752674103, -0.0020088031888008118, -1.2204898595809937, -0.014244073070585728, -0.0004814896092284471, -0.0012674640165641904, -1.7940411567687988, -0.12395330518484116, -1.0898902416229248, -0.8264347910881042, -0.4437764883041382, -0.04644690081477165, -0.0325501523911953, -0.25389957427978516, -0.0007120219524949789, -0.2862575650215149, -0.0013816345017403364, -0.0048188501968979836, -1.3589766240329482e-05, -1.4305012882687151e-05, -0.00642200093716383, -0.15094690024852753, -0.0014840076910331845, -1.6412439346313477, -0.04172574728727341, -0.04348887503147125, -0.1705571413040161, -0.0031395689584314823, -0.0005886013968847692, -0.005944074597209692, -0.8673328161239624, -8.702239938429557e-06, -0.08793042600154877, -0.008769097737967968, -0.025259051471948624, -0.0001674750237725675, 0.0, -0.008024713955819607, -2.7179348762729205e-05, -6.031808152329177e-05, -0.029234426096081734, -1.4662635294371285e-05, -4.827859811484814e-05, -0.04144375026226044, -8.892617915989831e-05, -0.02900458686053753, -0.0006874820101074874, -0.00018249277491122484, -0.0003343261778354645, -5.924526340095326e-05, -1.2040065485052764e-05, -0.05835072323679924, -0.000707971747033298, -3.1709168979432434e-05, -3.0278701160568744e-05, -0.00010024998482549563, -0.23567579686641693, -0.004391905851662159, -0.009181302972137928, -0.00320979836396873, -2.7179348762729205e-05, -2.729855441430118e-05, -0.000129691296024248, -0.005641846917569637, -0.001430679694749415, -0.00023231192608363926, -0.0017308506648987532, -0.06410664319992065, -0.02430383302271366, -0.47930315136909485, -0.6250673532485962, -0.032056502997875214, -0.30905309319496155, -0.00016199229867197573, -1.8599936962127686, -0.9062493443489075, -0.0006453100359067321, -0.0038946031127125025, -1.1086402082582936e-05, -0.000458254711702466, -1.680836794548668e-05, -0.001975491177290678, -0.00041952868923544884, -0.008352703414857388, -0.0004129749140702188, -0.03188643231987953, -0.0047418526373803616, -0.005085508804768324, -0.0008784249657765031, -0.11060071736574173, -0.0023313979618251324, -0.0010986251290887594, -0.01045311614871025, -0.0066881137900054455, -0.054749030619859695, -1.1759134531021118, -0.026855669915676117, -0.44698867201805115, -0.009806551970541477, -0.0245602298527956, -0.12611544132232666, -0.010802481323480606, -0.005580086261034012, -0.27952343225479126, -0.0007011815905570984, -0.589152991771698, -0.065415158867836, -0.8666892647743225, -0.015269290655851364, -0.12327180802822113, -0.00014208737411536276, -0.00013767725613433868, -0.003132082289084792, -4.768370445162873e-07, -1.1920928244535389e-07, -0.00031871485407464206, -0.02026987075805664, -0.0005989664932712913, -0.004603621084243059, -3.969590397900902e-05, -0.0019743014127016068, -2.1934269170742482e-05, -0.03340968117117882, -5.245195097813848e-06, -3.099436753473128e-06, -0.00028606137493625283, -9.572047565598041e-05, -0.579767644405365, -0.0002548369811847806, -0.24191884696483612, -2.3841855067985307e-07, -3.2186455882765586e-06, -1.1920928244535389e-07, -0.0018650771817192435, -0.0037796504329890013, -0.05934711545705795, -0.2007339894771576, -0.02703472040593624, -1.2755313036905136e-05, -2.861018856492592e-06, -0.004855982959270477, -0.000500196241773665], "finish_reason": "stop"}], "metrics": {"energy": 676.9684104728694, "energy_per_token": 3.7401569639385053, "time": 15.770567, "time_per_token": 0.0871302044198895}}
{"outputs": [{"text": "try:\n        feature_col = df[feature]\n        target_col = df[target]\n        model = LinearRegression()\n        model.fit(feature_col.values.reshape(-1, 1), target_col.values.reshape(-1, 1))\n        predicted_col = model.predict(feature_col.values.reshape(-1, 1))\n        residuals_col = target_col - predicted_col\n        indices = heapq.nlargest(n, range(len(residuals_col)), residuals_col.take)\n        return indices, model\n    except:\n        raise ValueError(\"Columns not in DataFrame.\")", "tokens": ["try", ":", "\n", "        ", "feature", "_", "col", " =", " df", "[", "feature", "]", "\n", "        ", "target", "_", "col", " =", " df", "[", "target", "]", "\n", "        ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "        ", "model", ".", "fit", "(", "feature", "_", "col", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " target", "_", "col", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "        ", "pred", "icted", "_", "col", " =", " model", ".", "predict", "(", "feature", "_", "col", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "        ", "res", "idual", "s", "_", "col", " =", " target", "_", "col", " -", " predicted", "_", "col", "\n", "        ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "_", "col", "))", ",", " residuals", "_", "col", ".", "take", ")", "\n", "        ", "return", " indices", ",", " model", "\n", "    ", "except", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Columns", " not", " in", " Data", "Frame", ".", "\"", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.745795965194702, -0.00067223358200863, -0.005165208131074905, -0.016900446265935898, -2.0188119411468506, -0.19316300749778748, -0.8189910650253296, -0.04994668811559677, -0.0351533405482769, -0.02327817492187023, -0.002775509376078844, -0.0015611377311870456, -0.24095135927200317, -0.12339067459106445, -0.007228885777294636, -0.0003364712174516171, -0.00029845553217455745, -0.002166069345548749, -0.0005055579822510481, -0.0002138386043952778, -0.0002818902430590242, -0.0001784403866622597, -0.0024518687278032303, -2.0799036026000977, -0.601881206035614, -0.0024254685267806053, -0.006566968280822039, -2.5152843591058627e-05, -1.5139465176616795e-05, -0.014709827490150928, -0.1576324701309204, -0.03257426992058754, -0.1206764280796051, -0.007850980386137962, -0.00016532962035853416, -0.004142395220696926, -0.134560227394104, -0.0007420408655889332, -1.549708758830093e-05, -0.08257341384887695, -0.7340453267097473, -0.006241354160010815, -0.0002177716523874551, -2.3841855067985307e-07, -0.009302368387579918, -3.564294092939235e-05, -0.00014959646796341985, -0.0542132593691349, -2.539125671319198e-05, -8.427741704508662e-05, -0.0008434075862169266, -0.04591486230492592, -0.00012313561455812305, -1.537788011773955e-05, -0.9958117604255676, -0.004106542095541954, -1.2467312812805176, -0.011747467331588268, -2.861018856492592e-06, -0.0011403016978874803, -8.702239938429557e-06, -0.00018594920402392745, -0.007059038151055574, -0.0009483369067311287, -0.008311208337545395, -0.006595509592443705, -0.23822715878486633, -1.2164533138275146, -1.3519401550292969, -0.6577714085578918, -1.7760906219482422, -0.0010846928926184773, -0.03548083454370499, -4.60137271147687e-05, -0.0006299418746493757, -0.00019977481861133128, -0.002895213197916746, -0.00020883286197204143, -6.198863957251888e-06, -0.002845288719981909, -0.0008659188752062619, -0.0001501924270996824, -0.0004391897819004953, -2.7418097943154862e-06, -0.0002498314715921879, -5.364403477869928e-06, -2.4437606043647975e-05, -0.0023535192012786865, -5.960446742392378e-06, -0.0005009111482650042, -0.18960432708263397, -0.033097073435783386, -0.20617015659809113, -0.048654891550540924, -0.20686443150043488, -2.992062568664551, -0.16244682669639587, -0.0008897398365661502, -0.5933199524879456, -0.00042250767000950873, -6.508615479106084e-05, -0.8082877397537231, -0.07589336484670639, -0.00019047829846385866, -3.6954811548639555e-06, -0.09262406080961227, -0.07693624496459961, -1.9028280973434448, -0.24470208585262299, -0.35991501808166504, -0.00038235029205679893, -0.00023231192608363926, -0.037807393819093704, -8.344646857949556e-07, -5.960462772236497e-07, -0.0032637445256114006, -0.014621369540691376, -0.0030549545772373676, -0.04006819427013397, -0.0005723983631469309, -0.010050876997411251, -3.218599158572033e-05, -0.05597684904932976, -1.4305104514278355e-06, -2.5987286790041253e-05, -8.427741704508662e-05, -3.099436753473128e-06, -0.002755656372755766, -0.00013302871957421303, -0.3224279284477234, -9.298280929215252e-06, -5.245195097813848e-06, -0.0004999579978175461, -0.0341220498085022, -0.00029940891545265913, -0.007629659026861191, -0.18824955821037292, -0.0705203041434288, -0.02687818370759487, -0.017235850915312767, -0.0008735416340641677, -0.005727546755224466, -0.05404239892959595, -0.0007846852531656623, -2.9935169219970703, -0.006440478377044201, -0.005443037953227758, -0.08824774622917175, -0.03891412541270256, -3.635817120084539e-05, -0.3415394723415375, -0.5184798240661621, -2.4322729110717773, -1.0107367038726807, -0.4178181290626526, -1.0026228427886963, -0.01944246143102646, -1.6138242483139038, -0.030528182163834572, -1.3191137313842773, -1.1324817933200393e-05, -2.50339189733495e-06, -4.410734163684538e-06, -3.242440288886428e-05, -0.1747055947780609], "finish_reason": "stop"}], "metrics": {"energy": 600.2013394432071, "energy_per_token": 3.6375838754133762, "time": 14.296812, "time_per_token": 0.08664734545454544}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError('Specified columns not in provided DataFrame')\n\n    lr = LinearRegression()\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n\n    lr.fit(X, y)\n    pred = lr.predict(X)\n    res = y - pred\n\n    heap = []\n    for i, val in enumerate(res):\n        heapq.heappush(heap, (-val, i))\n\n    indices = [heapq.heappop(heap)[1] for _ in range(min(len(heap), n))]\n    indices.sort()\n\n    return indices, lr", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "('", "Spec", "ified", " columns", " not", " in", " provided", " Data", "Frame", "')", "\n", "\n", "    ", "lr", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", "\n", "\n", "    ", "lr", ".", "fit", "(", "X", ",", " y", ")", "\n", "    ", "pred", " =", " l", "r", ".", "predict", "(", "X", ")", "\n", "    ", "res", " =", " y", " -", " pred", "\n", "\n", "    ", "heap", " =", " []", "\n", "    ", "for", " i", ",", " val", " in", " enumerate", "(", "res", "):", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "heap", ",", " (-", "val", ",", " i", "))", "\n", "\n", "    ", "indices", " =", " [", "heap", "q", ".", "he", "app", "op", "(", "heap", ")[", "1", "]", " for", " _", " in", " range", "(", "min", "(", "len", "(", "heap", ")", ",", " n", "))", "]", "\n", "    ", "indices", ".", "sort", "()", "\n", "\n", "    ", "return", " indices", ",", " l", "r", "\n", "\n", "if"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -1.8182393312454224, -1.5583629608154297, -0.0012530578533187509, -0.09528570622205734, -1.2368557453155518, -0.13271865248680115, -2.1802518367767334, -0.03105737268924713, -0.0040146480314433575, -0.3971744775772095, -0.002110398607328534, -0.3374742567539215, -0.0007976687629707158, -3.6887729167938232, -0.07912525534629822, -0.0065583232790231705, -3.528532761265524e-05, -1.585470999998506e-05, -0.010916394181549549, -0.021665796637535095, -0.09531388431787491, -2.9892139434814453, -0.0913429707288742, -0.09573471546173096, -0.10125911235809326, -0.0025358207058161497, -0.0016098171472549438, -0.011111760511994362, -0.5626131892204285, -0.016048073768615723, -0.0002829628065228462, -7.152555099310121e-07, -0.012195072136819363, -2.5510462364763953e-05, -0.00010299152199877426, -0.025279972702264786, -3.099393507000059e-05, -3.9219088648678735e-05, -0.025089100003242493, -0.0004764852055814117, -0.10804817080497742, -0.00260300119407475, -0.00028081765049137175, -0.00035613393993116915, -4.684815212385729e-05, -1.4305012882687151e-05, -0.08769752830266953, -0.002142040990293026, -0.6992591619491577, -1.2621128559112549, -0.00013362467871047556, -0.028840715065598488, -0.0032456836197525263, -2.9444261599564925e-05, -5.519237674889155e-05, -0.0003488647344056517, -0.010073300451040268, -0.0034669076558202505, -0.001029200037010014, -0.007996568456292152, -0.6108691096305847, -1.1021087169647217, -1.0960322618484497, -0.004112122114747763, -1.9073468138230965e-06, -2.2411095415009186e-05, -0.0002942844294011593, -7.164221460698172e-05, -0.0013897294411435723, -0.0006798578542657197, -0.007273029536008835, -0.22786451876163483, -0.18205691874027252, -1.6536809206008911, -0.21486803889274597, -0.006988368462771177, -0.0026792127173393965, -0.022566543892025948, -0.5290154814720154, -0.0002012050390476361, -1.5042829513549805, -0.0521496906876564, -0.5288598537445068, -0.02798142284154892, -0.11926934123039246, -0.056688643991947174, -0.21974843740463257, -0.37311965227127075, -1.7829190492630005, -0.0008884296985343099, -0.005478606093674898, -7.70062324590981e-05, -0.006772303022444248, -0.00831227283924818, -0.001158400671556592, -0.0029413315933197737, -0.351031094789505, -0.05856604501605034, -1.2755313036905136e-05, -0.00011860620725201443, -5.006777428206988e-06, -4.529942543740617e-06, -0.00020430385484360158, -0.0004444326623342931, -7.664863369427621e-05, -0.619789719581604, -0.1269477903842926, -0.006149892695248127, -0.004639456048607826, -0.001450439915060997, -0.12889108061790466, -0.1553749293088913, -0.015783147886395454, -1.0166836977005005, -0.004031151533126831, -0.6423125267028809, -0.35105401277542114, -0.002845407696440816, -4.291525328881107e-06, -0.0003844952443614602, -2.3841855067985307e-07, -1.311301275563892e-06, -1.0490362910786644e-05, -0.0003040566807612777, -0.031148433685302734, -0.0014879356604069471, -0.00016652150952722877, -0.0008627030183561146, -0.17141278088092804, -0.00014935807848814875, -9.858122211880982e-05, -5.495397272170521e-05, -1.7766510248184204, -0.0038607600145041943, -1.842557430267334, -3.313963316031732e-05, -0.0971553772687912, -0.00039414744242094457, -0.000302745756926015, -0.005953080952167511, -0.00043871314846910536, -0.012562546879053116, -0.005797950085252523, -1.171035647392273, -1.0375189781188965, -0.05515117570757866, -0.44284069538116455, -0.05345314368605614, -0.02703298069536686, -0.2193477898836136, -0.0001567479339428246, -0.016617927700281143, -0.012057632207870483, -0.003466313472017646, -0.02784787304699421, -1.3589766240329482e-05, -0.6065709590911865, -0.010691151022911072, -0.7171428799629211], "finish_reason": "stop"}], "metrics": {"energy": 649.646328739166, "energy_per_token": 3.6293090991014862, "time": 16.182549, "time_per_token": 0.09040530167597766}}
{"outputs": [{"text": "# Check if the feature and target columns exist in the provided DataFrame.\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n\n    # Fit a simple linear regression model to two specified columns.\n    model = LinearRegression()\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1, 1)\n    model.fit(X, y)\n\n    # Calculate the residuals of the fitted model.\n    residuals = df[target] - model.predict(X).flatten()\n\n    # Use a max heap to find the indices of the n largest residuals.\n    largest_residuals = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residuals, model", "tokens": ["#", " Check", " if", " the", " feature", " and", " target", " columns", " exist", " in", " the", " provided", " Data", "Frame", ".", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " columns", " are", " not", " in", " the", " provided", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " Fit", " a", " simple", " linear", " regression", " model", " to", " two", " specified", " columns", ".", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "#", " Calculate", " the", " residuals", " of", " the", " fitted", " model", ".", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", " -", " model", ".", "predict", "(", "X", ")", ".", "fl", "atten", "()", "\n", "\n", "    ", "#", " Use", " a", " max", " heap", " to", " find", " the", " indices", " of", " the", " n", " largest", " residuals", ".", "\n", "    ", "largest", "_", "res", "idual", "s", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "])", "\n", "    ", "return", " largest", "_", "res", "idual", "s", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6816747188568115, -1.0266292095184326, -0.3390420377254486, -1.093360185623169, -2.227262496948242, -0.0803096666932106, -0.0062818690203130245, -0.09574056416749954, -1.380974292755127, -0.05988822504878044, -0.017424948513507843, -1.981112003326416, -0.04057072848081589, -0.0014671048847958446, -1.651084303855896, -0.02064303122460842, -0.0024273712188005447, -0.07587634772062302, -0.092470183968544, -0.002442711964249611, -7.629365427419543e-06, -0.011225873604416847, -0.14548002183437347, -0.0010119322687387466, -0.8941240310668945, -0.0006586528033949435, -6.592056161025539e-05, -1.764281842042692e-05, -4.8636207793606445e-05, -0.00033396866638213396, -0.00046075694262981415, -0.0006007535266689956, -0.0005601267330348492, -0.0038038771599531174, -0.018649939447641373, -0.0024429496843367815, -1.2278481335670222e-05, -0.09679033607244492, -0.6178287863731384, -1.23111891746521, -0.0002828436263371259, -0.05568644031882286, -0.3831833302974701, -0.0024293928872793913, -0.011892136186361313, -0.012991901487112045, -0.13776478171348572, -0.005433197133243084, -0.0009284476400353014, -0.18181324005126953, -0.002315698890015483, -0.0008968859910964966, -0.00212479243054986, -0.26354947686195374, -0.0014293702552095056, -0.08332916349172592, -1.477380633354187, -0.4367651343345642, -1.2089979648590088, -0.005899753887206316, -0.004355824552476406, -0.011992497369647026, -0.29103022813796997, -1.9868621826171875, -2.4110398292541504, -0.05893193185329437, -0.8779085278511047, -0.03770178183913231, -0.002049014437943697, -0.35784193873405457, -0.0013850866816937923, -0.0030643432401120663, -1.0490362910786644e-05, -2.9682672902708873e-05, -0.007351608015596867, -0.23725338280200958, -0.008376820012927055, -2.013073682785034, -0.02450241707265377, -0.03669644519686699, -0.27540287375450134, -0.0035385394003242254, -0.00062851223628968, -0.005026797764003277, -0.4717806577682495, -0.005093574058264494, -5.054346183896996e-05, 0.0, -0.00392618915066123, -1.764281842042692e-05, -4.184158387943171e-05, -0.00997227430343628, -2.407998726994265e-05, -2.038458114839159e-05, -0.06961359828710556, -0.00014208737411536276, -0.013196627609431744, -0.0003237200144212693, -0.00014304091746453196, -0.00032586511224508286, -3.504691630951129e-05, -6.079655122448457e-06, -0.015687275677919388, -0.00014602071314584464, -0.8948028087615967, -0.0010931475553661585, -2.622600959512056e-06, -0.00030620177858509123, -7.152555099310121e-07, -1.883488948806189e-05, -0.0010621865512803197, -7.033323527139146e-06, -2.2649508537142538e-05, -0.0008368566050194204, -0.01712617091834545, -0.004755259025841951, -0.0051429118029773235, -1.537788011773955e-05, -2.6940935640595853e-05, -0.00020680672605521977, -0.005853771697729826, -0.001291870721615851, -9.870042413240299e-05, -0.002979365875944495, -0.02076680399477482, -0.00037043384509161115, -0.005808498244732618, -0.5467971563339233, -0.7350261807441711, -0.08237505704164505, -1.4909485578536987, -0.026778146624565125, -0.8632907271385193, -0.06291978061199188, -0.25425639748573303, -0.01541885081678629, -0.00025960413040593266, -0.6200210452079773, -0.02430487982928753, -0.004799512214958668, -0.002102666301652789, -1.6848070621490479, -0.00662476010620594, -0.04898480698466301, -0.0019922663923352957, -0.08054780960083008, -0.01714937388896942, -1.2636104656849056e-05, -0.0034411284141242504, -9.023735765367746e-05, -0.14578042924404144, -0.013574083335697651, -0.22354991734027863, -0.07799457758665085, -8.4638240878121e-06, -0.00011050090688513592, -0.007697326131165028, -0.048947010189294815, -0.0004683827864937484, -0.004534201696515083, -1.6588646173477173, -0.37814730405807495, -2.6405959129333496, -0.180982768535614, -0.05830652639269829, -1.2283320426940918, -0.01700124330818653, -0.7552310824394226, -0.00941408984363079, -0.025992462411522865, -0.07448530942201614, -0.00657573202624917, -0.005603439640253782, -0.061350610107183456, -0.027888797223567963, -0.0004970983718521893, -0.5625205039978027, -0.08394240587949753, -0.39970913529396057, -0.018125727772712708, -0.1499832719564438, -0.12133540958166122, -0.1675223708152771, -0.00011252723925281316, -2.3364747903542593e-05, -0.002933486830443144, -5.960462772236497e-07, 0.0, -7.581423415103927e-05, -0.019307533279061317, -0.0007177399238571525, -0.4877224266529083, -2.109982233378105e-05, -0.004231784492731094, -1.728519782773219e-05, -0.00820610299706459, -8.4638240878121e-06, -1.6689286894688848e-06, -0.0010852882405743003, -7.30726242181845e-05, -0.8024082779884338, -0.001581966644152999, -0.7642577290534973, -0.06155385449528694, -0.0024209495168179274, -0.14175105094909668, -0.003887834493070841, -8.880697714630514e-05, -0.0023333008866757154, -0.0017432268941774964, -2.7765140533447266, -0.14280490577220917, -0.05528033524751663, -1.4066597032069694e-05, -2.264974000354414e-06, -2.3841855067985307e-07, -2.9682672902708873e-05, -0.004433445632457733, -0.0008063640561886132, -1.606740951538086, -6.9141146923357155e-06, -1.9073468138230965e-06, -8.22540732769994e-06, -0.00014101465058047324, -0.13897763192653656], "finish_reason": "stop"}], "metrics": {"energy": 801.5823773365026, "energy_per_token": 3.5625883437177897, "time": 19.747921, "time_per_token": 0.08776853777777778}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The specified columns do not exist in the DataFrame\")\n    # Fit a simple linear regression model to col1 and col2.\n    X = np.array(df[feature]).reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    predictions = model.predict(X)\n    # Calculate residuals.\n    residuals = y - predictions\n    # Return the indices of the n largest residuals.\n    indices = heapq.nlargest(n, range(len(residuals)), residuals.take)\n    return indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " specified", " columns", " do", " not", " exist", " in", " the", " Data", "Frame", "\"", ")", "\n", "    ", "#", " Fit", " a", " simple", " linear", " regression", " model", " to", " col", "1", " and", " col", "2", ".", "\n", "    ", "X", " =", " np", ".", "array", "(", "df", "[", "feature", "])", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", ",", " y", ")", "\n", "    ", "pred", "ictions", " =", " model", ".", "predict", "(", "X", ")", "\n", "    ", "#", " Calculate", " residuals", ".", "\n", "    ", "res", "idual", "s", " =", " y", " -", " predictions", "\n", "    ", "#", " Return", " the", " indices", " of", " the", " n", " largest", " residuals", ".", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "take", ")", "\n", "    ", "return", " indices", ",", " model"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.7609742283821106, -2.171382427215576, -0.5110489726066589, -0.18069684505462646, -2.100287437438965, -0.0024755329359322786, -0.02355881966650486, -0.05499965697526932, -0.03322634845972061, -0.497662752866745, -0.00255769956856966, -1.304032802581787, -0.0011680454481393099, -0.0023405556567013264, -1.256847620010376, -2.2824137210845947, -2.0537209510803223, -1.2020483016967773, -0.9299972653388977, -0.013338734395802021, -0.028721991926431656, -0.03736410290002823, -0.5933903455734253, -3.1349518299102783, -0.014360061846673489, -0.010406281799077988, -0.0028266259469091892, -0.00201617949642241, -1.9353405237197876, -0.06962238252162933, -0.005203039385378361, -1.9659833908081055, -0.058348361402750015, -2.960860013961792, -2.5987286790041253e-05, -0.2055361568927765, -0.008962639607489109, -0.007140710949897766, -0.0530705489218235, -0.003293092828243971, -0.04310302063822746, -0.021573051810264587, -0.0003134713042527437, 0.0, -0.024180497974157333, -5.4596363042946905e-05, -0.0001641377166379243, -0.03822983056306839, -5.900685573578812e-05, -0.0001227780303452164, -0.04965316131711006, -0.00033408781746402383, -0.07903526723384857, -0.000514017534442246, -1.0435051918029785, -0.0019759670831263065, -9.381330892210826e-05, -2.455681169521995e-05, -0.03909825161099434, -0.028583329170942307, -0.1731991469860077, -0.001500314916484058, -0.0033877857495099306, -6.437280717364047e-06, -1.4781842764932662e-05, -0.0074310083873569965, -0.4335993826389313, -5.328513361746445e-05, -5.054346183896996e-05, -0.0009950215462595224, -0.010236619040369987, -0.001778450678102672, -0.00048303857329301536, -0.004739479627460241, -0.14031852781772614, -2.9729437828063965, -1.1956945657730103, -0.0024021598510444164, -0.015724124386906624, -6.186770770000294e-05, -0.0020147517789155245, -5.709961988031864e-05, -0.0014255610294640064, -0.0006475735572166741, -0.018844034522771835, -0.11611812561750412, -0.48915335536003113, -1.2147893905639648, -0.9948897361755371, -1.35040283203125, -0.023728331550955772, -0.0003389737685211003, -0.06415405124425888, -0.02353459969162941, -0.016281144693493843, -0.006075485609471798, -0.65259850025177, -0.015615217387676239, -0.005075664725154638, -0.007090169470757246, -0.016551095992326736, -0.11709170043468475, -1.4492409229278564, -0.3516169488430023, -0.048053134232759476, -0.010378792881965637, -0.02491121180355549, -0.2640545666217804, -0.015624371357262135, -0.006977122277021408, -0.6369327306747437, -0.026371970772743225, -0.0026680370792746544, -1.5074714422225952, -0.10017649084329605, -0.3037264347076416, -0.0005168771021999419, -0.0002746204845607281, -0.01919550821185112, -5.960462772236497e-07, -1.1920928244535389e-07, -0.00029559535323642194, -0.014649799093604088, -0.003291904693469405, -0.009039194323122501, -0.00012218205665703863, -0.002438787603750825, -3.075552376685664e-05, -0.0519251711666584, -5.125986263010418e-06, -8.022463589441031e-05, -0.0005558376433327794, -0.00010084597306558862, -0.26206862926483154, -0.00029488030122593045, -0.4580431282520294, -0.0001951265730895102, -0.0056891427375376225, -0.06832782924175262, -0.08370046317577362, -0.02203715406358242, -0.0049384282901883125, -0.0008509114268235862], "finish_reason": "stop"}], "metrics": {"energy": 621.1324565658571, "energy_per_token": 3.787393027840592, "time": 14.292447, "time_per_token": 0.08714906707317073}}
{"outputs": [{"text": "if feature not in df or target not in df:\n        raise ValueError(f\"The DataFrame has to have the column {feature} and {target}\")\n\n    model = LinearRegression()\n    model.fit(df[[feature]], df[target])\n    residuals = abs(model.predict(df[[feature]]) - df[target])\n    largest = heapq.nlargest(n, range(len(residuals)), residuals.iloc.__getitem__)\n    return largest, model", "tokens": ["if", " feature", " not", " in", " df", " or", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "The", " Data", "Frame", " has", " to", " have", " the", " column", " {", "feature", "}", " and", " {", "target", "}\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[[", "feature", "]]", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "model", ".", "predict", "(", "df", "[[", "feature", "]]", ")", " -", " df", "[", "target", "])", "\n", "    ", "largest", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "il", "oc", ".", "__", "get", "item", "__", ")", "\n", "    ", "return", " largest", ",", " model", "\n", "\n", "def"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -2.323913097381592, -0.002736159600317478, -0.0002603192115202546, -4.7205765440594405e-05, -4.1960789531003684e-05, -0.0022149572614580393, -0.0034426727797836065, -0.004025689791887999, -0.014468282461166382, -0.0038973342161625624, -1.9311717551317997e-05, -0.25663071870803833, -0.8681415319442749, -0.17306971549987793, -2.4456329345703125, -2.8341455459594727, -0.020691141486167908, -3.331890344619751, -2.3831424713134766, -1.5552923679351807, -1.362042784690857, -3.0629642009735107, -0.9522245526313782, -0.014369932934641838, -0.10316701233386993, -0.15661166608333588, -0.046850234270095825, -0.00248659192584455, -0.7403315901756287, -0.0022928635589778423, -0.005948459263890982, -0.4921950101852417, -0.0009945451747626066, -1.0406954288482666, -0.004301106557250023, -0.007626701612025499, -2.6940935640595853e-05, -1.645074735279195e-05, -0.010918044485151768, -0.0792367085814476, -0.14108727872371674, -0.5574952363967896, -0.016144851222634315, -0.00018809456378221512, -0.010508443228900433, -0.1464807391166687, -1.077400803565979, -0.002358395140618086, -0.0008693729760125279, -0.07656408101320267, -0.0038220465648919344, -0.6856330633163452, -0.0004979324294254184, -0.0012688927818089724, -0.012601982802152634, -0.812552273273468, -0.9235933423042297, -0.0683671310544014, -0.0419115275144577, -0.012285393662750721, -2.3239548206329346, -0.006896620616316795, -0.5629807710647583, -0.0002299282787134871, -0.010725471191108227, -0.0005678709712810814, -0.0003939091111533344, -0.018225934356451035, -0.007165092974901199, -3.7431014789035544e-05, -0.010867222212255001, -0.004279028624296188, -0.005601661279797554, -0.011327714659273624, -0.005263755563646555, -0.08289002627134323, -0.02319210208952427, -0.5840569734573364, -0.9324874877929688, -1.2016737461090088, -0.11127490550279617, -0.000196556793525815, -0.0007954055909067392, -0.0009527434594929218, -5.960462772236497e-07, 0.0, -0.0007377525325864553, -0.007799882907420397, -0.0032447329722344875, -0.3613932430744171, -6.842378934379667e-05, -0.004687630105763674, -4.410646579344757e-05, -0.024235302582383156, -4.172316494077677e-06, -4.887569048150908e-06, -0.0004312062228564173, -0.00028975578607060015, -0.06511474400758743, -0.00035851728171110153, -0.7240831851959229, -6.079655122448457e-06, -0.0011844770051538944, -0.6707766056060791, -1.9073468138230965e-06, -5.125986263010418e-06, -2.861018856492592e-06, -0.0010619483655318618, -0.01819620095193386, -0.5090652108192444, -0.048787280917167664, -0.09092485904693604, -0.008844486437737942, -0.0016740844585001469, -0.62732994556427, -0.014278272166848183, -1.8202970027923584], "finish_reason": "stop"}], "metrics": {"energy": 489.2072259502412, "energy_per_token": 4.009895294674108, "time": 11.75889, "time_per_token": 0.09638434426229507}}
{"outputs": [{"text": "if feature not in df:\n        raise ValueError(\"Column '{}' is not in the DataFrame\".format(feature))\n    if target not in df:\n        raise ValueError(\"Column '{}' is not in the DataFrame\".format(target))\n    heap = []\n    model = LinearRegression().fit(df[feature].values.reshape(-1,1), df[target])\n    residuals = model.predict(df[feature].values.reshape(-1,1)) - df[target]\n    for i in range(len(residuals)):\n        heapq.heappush(heap, (-abs(residuals[i]), i))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    indices = [i for _, i in heap]\n    return indices, model", "tokens": ["if", " feature", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Column", " '", "{}", "'", " is", " not", " in", " the", " Data", "Frame", "\"", ".", "format", "(", "feature", "))", "\n", "    ", "if", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Column", " '", "{}", "'", " is", " not", " in", " the", " Data", "Frame", "\"", ".", "format", "(", "target", "))", "\n", "    ", "heap", " =", " []", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", "1", ")", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", "1", "))", " -", " df", "[", "target", "]", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "res", "idual", "s", "))", ":", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "heap", ",", " (-", "abs", "(", "res", "idual", "s", "[", "i", "])", ",", " i", "))", "\n", "        ", "if", " len", "(", "heap", ")", " >", " n", ":", "\n", "            ", "heap", "q", ".", "he", "app", "op", "(", "heap", ")", "\n", "    ", "indices", " =", " [", "i", " for", " _", ",", " i", " in", " heap", "]", "\n", "    ", "return", " indices", ",", " model"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -2.7944483757019043, -0.006073471624404192, -0.003398834727704525, -0.0114598348736763, -0.004136459436267614, -1.2755313036905136e-05, -0.11433305591344833, -1.8571580648422241, -2.537508964538574, -0.674248218536377, -0.5881836414337158, -0.013413779437541962, -1.1810330152511597, -0.019448306411504745, -0.07801078259944916, -0.2515994906425476, -0.7116212248802185, -0.0037886761128902435, -0.6950957775115967, -0.006225124001502991, -0.000504723924677819, -0.0018195039592683315, -0.02345285937190056, -0.0021534604020416737, -0.0021112312097102404, -0.18458500504493713, -0.05354003980755806, -0.001560185570269823, -0.00029273517429828644, -1.1324817933200393e-05, -5.543078441405669e-05, -0.0005740663618780673, -0.00023803261865396053, -0.0004707658663392067, -0.00023493390472140163, -0.00022837892174720764, -2.50339189733495e-06, -0.00032824851223267615, -0.019704431295394897, -0.0011014830088242888, -0.0020552005153149366, -8.046303264563903e-05, -0.00016282663273159415, -0.0009058186551555991, -0.00020001317898277193, -9.226373367710039e-05, -0.000286657246761024, -0.0001770101225702092, -0.0003768687602132559, -0.0017440598458051682, -0.00026675479602999985, -2.8013790142722428e-05, -0.00011812942830147222, -0.02465188317000866, -8.284702198579907e-05, -0.00021669900161214173, -1.1458975076675415, -4.1153364181518555, -0.08620867878198624, -0.27034327387809753, -0.07383866608142853, -0.05791870132088661, -0.7751210331916809, -0.001853654277510941, -0.00632972689345479, -2.4914430468925275e-05, -3.480850500636734e-05, -0.007614279631525278, -1.89161217212677, -0.0003010773507412523, -0.0005772831500507891, -0.10469021648168564, -0.20039354264736176, -0.0037865384947508574, -0.004023196641355753, -0.03293929249048233, -0.5179618000984192, -0.015060527250170708, -0.0006031363154761493, -4.768370445162873e-07, -0.010710729286074638, -6.031808152329177e-05, -0.00018535325943958014, -2.165365695953369, -0.0006151691195555031, -0.005563964135944843, -0.13756148517131805, -0.0010642108973115683, -0.0001262346631847322, -0.409339040517807, -0.013043439947068691, -0.019858354702591896, -2.2555336952209473, -0.15053606033325195, -0.06530103832483292, -0.007596060633659363, -1.6113024950027466, -0.0003215749457012862, -0.010576033033430576, -0.000300958170555532, -0.002838275395333767, -0.011758188717067242, -0.0048882500268518925, -0.002924928907305002, -0.0003449321957305074, -0.0015336429933086038, -0.000491855782456696, -8.535020606359467e-05, -4.0531076592742465e-06, -0.0009052231325767934, -3.3378546504536644e-06, -0.0002094287920044735, -0.08247319608926773, -0.0029138748068362474, -0.045078668743371964, -0.007037376053631306, -0.0034252090845257044, -0.0064514935947954655, -0.0019056509481742978, -0.1790100485086441, -0.04047033190727234, -0.0931585431098938, -0.5973839163780212, -1.0340373516082764, -0.0409647673368454, -0.0024580522440373898, -0.2195068746805191, -0.00027891082572750747, -0.18887121975421906, -0.00013851160474587232, -0.0003634030872490257, -0.002668155822902918, -0.001257820287719369, -0.0016903887735679746, -0.00880785658955574, -0.48761242628097534, -0.02666730247437954, -4.2676016164477915e-05, -0.0003367095487192273, -5.8412379075889476e-06, -0.00011359999916749075, -0.0004804172203876078, -0.0019035092554986477, -0.0005404680268839002, -0.9633815884590149, -1.1142991781234741, -0.00023552982020191848, -0.0075590298511087894, -8.689979586051777e-05, -0.00042846560245379806, -0.01059360895305872, -0.00037424711626954377, -0.022825250402092934, -0.003005988895893097, -0.061175357550382614, -0.011263357475399971, -0.05312729626893997, -0.2867533564567566, -0.062399011105298996, -0.03852202743291855, -0.00010561384988250211, -0.00013791563105769455, -0.001976561965420842, -0.0037789377383887768, -0.004198665264993906, -0.0025983641389757395, -0.008261672221124172, -0.0043345787562429905, -0.005286997649818659, -0.004851949401199818, -2.47952248173533e-05, -0.0002115741081070155, -1.6689286894688848e-06, -4.470248313737102e-05, -6.115249561844394e-05, -0.00016556799528189003, -0.0006403064471669495, -0.010396725498139858, -0.05202476307749748, -0.8349200487136841, -0.00935173500329256, -0.3610038757324219, -1.0428180694580078, -0.4350630044937134, -0.08963591605424881, -0.0010743328602984548, -0.04165817052125931, -0.00014983485743869096, -0.07915499061346054, -0.05508258193731308, -0.00690739369019866, -0.012155620381236076, -0.2585795223712921, -0.12277764827013016, -0.007768537383526564, -0.0021326434798538685], "finish_reason": "stop"}], "metrics": {"energy": 772.657051891327, "energy_per_token": 3.8440649347827214, "time": 19.539562, "time_per_token": 0.09721175124378109}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not found in provided DataFrame.\")\n\n    # fit a simple linear regression model\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1, 1)\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # calculate residuals\n    residuals = y - model.predict(X)\n    abs_residuals = np.abs(residuals)\n\n    # get n largest residuals with their indices\n    largest_indices = np.argpartition(abs_residuals, -n)[-n:]\n\n    return largest_indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " columns", " not", " found", " in", " provided", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "#", " fit", " a", " simple", " linear", " regression", " model", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "#", " calculate", " residuals", "\n", "    ", "res", "idual", "s", " =", " y", " -", " model", ".", "predict", "(", "X", ")", "\n", "    ", "abs", "_", "res", "idual", "s", " =", " np", ".", "abs", "(", "res", "idual", "s", ")", "\n", "\n", "    ", "#", " get", " n", " largest", " residuals", " with", " their", " indices", "\n", "    ", "largest", "_", "indices", " =", " np", ".", "arg", "partition", "(", "abs", "_", "res", "idual", "s", ",", " -", "n", ")", "[-", "n", ":]", "\n", "\n", "    ", "return", " largest", "_", "indices", ",", " model", "\n", "\n", "def"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.7609742283821106, -1.333001732826233, -0.0010062160436064005, -0.06707261502742767, -1.2834879159927368, -2.6557304859161377, -0.036798715591430664, -1.9448487758636475, -0.024860631674528122, -0.002130621112883091, -0.49009814858436584, -0.0042151655070483685, -0.0007147617870941758, -0.0019190958701074123, -0.3246891498565674, -0.0007360848248936236, -1.4555236101150513, -2.4427571296691895, -1.9793100357055664, -0.9722052812576294, -0.03132094070315361, -0.06394574046134949, -0.0814567431807518, -0.5830240845680237, -0.0016383809270337224, -1.6223478317260742, -0.043531905859708786, -0.05625522881746292, -0.10972527414560318, -0.0025889708194881678, -0.0008560330606997013, -0.011064602062106133, -0.522553563117981, -0.008061017841100693, -5.435795901576057e-05, -4.410734163684538e-06, -0.012328607961535454, -2.074220174108632e-05, -6.758938252460212e-05, -0.020483272150158882, -2.0146166207268834e-05, -2.3245540432981215e-05, -0.07696902751922607, -0.00012611546844709665, -0.02900840900838375, -0.00041237910045310855, -0.0001652104256208986, -0.00028010259848088026, -5.638440416078083e-05, -1.4424220353248529e-05, -0.015737384557724, -7.116541382856667e-05, -0.9047720432281494, -0.0009557208395563066, -3.909988299710676e-05, -0.0004058252670802176, -2.3841855067985307e-07, -4.100715523236431e-05, -0.0014705568319186568, -6.556489552167477e-06, -2.3841574147809297e-05, -0.001042894902639091, -0.05653262883424759, -0.16723458468914032, -0.0007493072189390659, -0.002453295513987541, -6.318072337307967e-06, -1.3351351299206726e-05, -0.0049365307204425335, -0.6899791955947876, -0.0008600826840847731, -0.0024312958121299744, -0.0026700582820922136, -2.7179348762729205e-05, -3.3854863431770355e-05, -0.00017808281700126827, -0.009144921787083149, -0.0015653035370633006, -0.0001919085334520787, -0.0024945589248090982, -0.05636182427406311, -0.00034290633630007505, -0.02567671611905098, -0.5987884402275085, -0.2120404988527298, -0.2654995620250702, -0.00011395759065635502, -0.8293060064315796, -0.02341175265610218, -0.005452997051179409, -0.0036772743333131075, -0.6572901606559753, -0.015013789758086205, -0.0028523020446300507, -1.1444026313256472e-05, -3.71926071238704e-05, -3.0397906812140718e-05, -0.00013207517622504383, -0.000259723310591653, -0.11610188335180283, -1.2475237846374512, -2.872159957885742, -0.0006522196927107871, -0.005083967000246048, -0.029697997495532036, -0.003029758809134364, -0.001032296335324645, -0.0934034213423729, -3.2186455882765586e-06, -0.0388747937977314, -0.00048268112004734576, -0.002185577293857932, -0.00038413776201196015, -1.5616295058862306e-05, -0.12716752290725708, -0.06932011991739273, -0.13957013189792633, -0.0003636414185166359, -0.030124569311738014, -1.7356832027435303, -2.3500471115112305, -0.07068903744220734, -0.05384666100144386, -2.77992844581604, -0.582653820514679, -0.07710897922515869, -0.1272161304950714, -0.0006407829932868481, -0.6379179954528809, -0.1190444827079773, -0.6996631026268005, -0.06596549600362778, -1.7743775844573975, -2.7894584491150454e-05, -0.0782887190580368, -0.00013696208770852536, -0.24063944816589355, -0.05326033756136894, -7.891343557275832e-05, -5.960462772236497e-07, -4.768370445162873e-07, -1.5497195136049413e-06, -0.0937955304980278, -0.006978069432079792, -0.007298355456441641, -0.010866986587643623, -0.0006216024048626423, -0.0002653246629051864, -0.011867162771522999, -0.02003725990653038, -2.1224849224090576, -0.00016973962192423642, -0.3734893202781677, -0.44070208072662354, -6.794906312279636e-06, -3.576272320060525e-06, -0.3019123077392578, -0.0008809261489659548, -0.4967183470726013, -0.01240302249789238, -1.2387735843658447], "finish_reason": "stop"}], "metrics": {"energy": 680.040192380905, "energy_per_token": 3.7364845735214556, "time": 15.962944, "time_per_token": 0.08770848351648351}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(\"The specified column does not exist\")\n\n    if target not in df.columns:\n        raise ValueError(\"The specified column does not exist\")\n\n    model = LinearRegression()\n    model.fit(np.asarray(df[feature]).reshape(-1, 1), np.asarray(df[target]).reshape(-1, 1))\n\n    preds = model.predict(np.asarray(df[feature]).reshape(-1, 1))\n    residuals = abs(np.asarray(df[target]).reshape(-1, 1) - preds)\n    heap = heapq.nlargest(n, residuals)\n    return [np.where(np.asarray(residuals) == x)[0][0] for x in heap], model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " specified", " column", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " specified", " column", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "np", ".", "as", "array", "(", "df", "[", "feature", "])", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " np", ".", "as", "array", "(", "df", "[", "target", "])", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "pred", "s", " =", " model", ".", "predict", "(", "np", ".", "as", "array", "(", "df", "[", "feature", "])", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "np", ".", "as", "array", "(", "df", "[", "target", "])", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", " -", " pred", "s", ")", "\n", "    ", "heap", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " residuals", ")", "\n", "    ", "return", " [", "np", ".", "where", "(", "np", ".", "as", "array", "(", "res", "idual", "s", ")", " ==", " x", ")[", "0", "][", "0", "]", " for", " x", " in", " heap", "]", ",", " model", "\n", "\n", "def"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -1.0217221975326538, -0.0045485603623092175, -0.003239861223846674, -0.008812819607555866, -0.003573937574401498, -7.867782187531702e-06, -0.07789301872253418, -1.8600326776504517, -1.4464610815048218, -0.7273461818695068, -1.260059118270874, -1.5327750444412231, -0.001312824198976159, -0.0233492162078619, -3.083667039871216, -0.0029257608111947775, -0.005076257977634668, -1.4635329246520996, -0.0004505096294451505, -0.16186752915382385, -0.00654079532250762, -0.00045074793160893023, -1.537788011773955e-05, -0.000163541772053577, -0.00034683887497521937, -0.00022968991834204644, -0.000285584683297202, -0.0002450642641633749, -0.0007960011716932058, -0.0007404923089779913, -0.0004161922261118889, -4.768370445162873e-07, -0.0007117837085388601, -0.0024154791608452797, -0.0018836389062926173, -0.002049133414402604, -0.029709337279200554, -0.0021230080164968967, -9.667406266089529e-05, -0.0005616756388917565, -0.002610967494547367, -8.296622399939224e-05, -0.0005738280597142875, -0.02621765434741974, -0.0010255083907395601, -1.3417307138442993, -0.004473440814763308, -0.0060869790613651276, -3.3378044463461265e-05, -1.1920858014491387e-05, -0.0156104052439332, -0.10631636530160904, -0.19652163982391357, -0.3311567008495331, -0.01705198921263218, -0.00022396916756406426, -0.007264508865773678, -2.8447442054748535, -3.790783375734463e-05, -2.5593085289001465, -0.05122741684317589, -0.00154518848285079, -0.0025253568310290575, -0.026172596961259842, -0.0032844191882759333, -0.011266658082604408, -0.00687909871339798, -0.001260915887542069, -2.3841830625315197e-06, -0.015352173708379269, -3.194758028257638e-05, -0.00018976318824570626, -0.07446063309907913, -0.00010048838157672435, -0.00017557987303007394, -0.0021716600749641657, -1.2199393510818481, -4.23184028477408e-05, -0.04072112962603569, -0.003708867123350501, -0.0005875291535630822, -0.0028287656605243683, -0.0010414659045636654, -0.0008585343020968139, -1.5948607921600342, -0.004290423821657896, -0.018958671018481255, -9.536738616588991e-07, -0.0017203782917931676, -4.172316494077677e-06, -0.0014887689612805843, -0.01588405855000019, -0.0037041164468973875, -0.0036659911274909973, -0.013367082923650742, -0.39240917563438416, -0.0003570872650016099, -1.7841322422027588, -1.9305212497711182, -0.003649600315839052, -0.04545145854353905, -4.9232225137529895e-05, -0.0015486401971429586, -0.000442407006630674, -0.007962982170283794, -7.271740287251305e-06, -0.0014860312221571803, -9.775113539944869e-06, -0.00038675934774801135, -0.00023052419419400394, -0.0025710167828947306, -0.0038246591575443745, -0.0007640779949724674, -0.00012838016846217215, -4.2437604861333966e-05, -9.405170567333698e-05, -0.0001565095444675535, -2.50339189733495e-06, -0.00011228884250158444, -0.004444601479917765, -4.529942543740617e-06, -0.002372785471379757, -0.1263960897922516, -0.13206785917282104, -0.5183337330818176, -0.18358708918094635, -0.04130992665886879, -0.007134201005101204, -1.9612705707550049, -0.03314850851893425, -1.2415916919708252, -2.1934269170742482e-05, -0.13821110129356384, -0.00029559535323642194, -0.01018611527979374, -0.09994448721408844, -0.0012867513578385115, -0.02001132071018219, -0.035546645522117615, -0.2166910022497177, -0.0332716666162014, -3.576278118089249e-07, -0.006515095010399818, -2.13382354559144e-05, -0.022154107689857483, -0.008515594527125359, -0.0001006075763143599, -0.019805297255516052, -0.023678040131926537, -0.11763573437929153, -7.033323527139146e-06, -0.019575266167521477, -0.053754594177007675, -1.2096521854400635, -1.6029058694839478, -0.06952641904354095, -2.9218039512634277, -0.008024713955819607, -0.002385153668001294, -0.012320837005972862, -1.5497195136049413e-06, 0.0, -0.0004674295778386295, -0.010462789796292782, -0.008346674963831902, -3.1976616382598877, -0.8238579034805298, -0.01736941747367382, -0.3346036672592163, -2.0162014961242676, -0.4781830906867981, -1.6816295385360718, -0.0002698534226510674, -0.3033735454082489, -0.021959371864795685, -2.5735576152801514, -0.00020525732543319464, -0.1684512197971344, -0.001334729720838368, -0.0012465096078813076, -0.24792584776878357, -3.099436753473128e-06, -8.380061626667157e-05, -0.047278992831707, -0.12339457869529724, -1.692966341972351, -0.05267944186925888, -0.0016467118402943015, -0.04458991065621376, -0.0005347490659914911, -0.0002848696312867105, -0.008701621554791927, -0.0011472079204395413, -0.00011443436960689723, -0.004398315213620663, -0.018585115671157837, -0.004091939423233271, -0.0038883094675838947, -0.6989814043045044, -0.010458189062774181, -1.6486380100250244], "finish_reason": "stop"}], "metrics": {"energy": 780.2461937322616, "energy_per_token": 3.7511836237127962, "time": 18.287653, "time_per_token": 0.08792140865384615}}
{"outputs": [{"text": "try:\n        model = LinearRegression()\n        model.fit(df[feature].to_numpy().reshape(-1, 1), df[target].to_numpy())\n        residuals = model.predict(df[feature].to_numpy().reshape(-1, 1)) - df[target].to_numpy()\n        # Build a heap containing the n largest residuals with their corresponding indices\n        largest_residuals = [(-residual, i) for i, residual in enumerate(residuals[:n])]\n        heapq.heapify(largest_residuals)\n        # Update the heap for all the residuals in order to find the n largest residuals\n        for i, residual in enumerate(residuals[n:]):\n            # If current residual is less than the smallest residual in the heap,\n            # ignore it, else replace the smallest residual of the heap by the\n            # current residual\n            if -residual > largest_residuals[0][0]:\n                heapq.heappushpop(largest_residuals, (-residual, i + n))\n\n        largest", "tokens": ["try", ":", "\n", "        ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "        ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "        ", "res", "idual", "s", " =", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", " -", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", "\n", "        ", "#", " Build", " a", " heap", " containing", " the", " n", " largest", " residuals", " with", " their", " corresponding", " indices", "\n", "        ", "largest", "_", "res", "idual", "s", " =", " [", "(-", "res", "idual", ",", " i", ")", " for", " i", ",", " residual", " in", " enumerate", "(", "res", "idual", "s", "[:", "n", "]", ")]", "\n", "        ", "heap", "q", ".", "heap", "ify", "(", "largest", "_", "res", "idual", "s", ")", "\n", "        ", "#", " Update", " the", " heap", " for", " all", " the", " residuals", " in", " order", " to", " find", " the", " n", " largest", " residuals", "\n", "        ", "for", " i", ",", " residual", " in", " enumerate", "(", "res", "idual", "s", "[", "n", ":]", "):", "\n", "            ", "#", " If", " current", " residual", " is", " less", " than", " the", " smallest", " residual", " in", " the", " heap", ",", "\n", "            ", "#", " ignore", " it", ",", " else", " replace", " the", " smallest", " residual", " of", " the", " heap", " by", " the", "\n", "            ", "#", " current", " residual", "\n", "            ", "if", " -", "res", "idual", " >", " largest", "_", "res", "idual", "s", "[", "0", "][", "0", "]:", "\n", "                ", "heap", "q", ".", "he", "app", "ush", "pop", "(", "largest", "_", "res", "idual", "s", ",", " (-", "res", "idual", ",", " i", " +", " n", "))", "\n", "\n", "        ", "largest"], "logprobs": [-2.745795965194702, -0.00067223358200863, -0.005165208131074905, -0.016900446265935898, -3.6148297786712646, -0.009194768033921719, -0.00822360161691904, -2.8967437174287625e-05, -2.7656173188006505e-05, -0.01870715245604515, -0.22647081315517426, -0.0622292086482048, -0.6133483648300171, -0.024489156901836395, -0.0006485265912488103, -0.03644257038831711, -0.15907183289527893, -0.2622719705104828, -0.00523126358166337, -0.0010112178279086947, -0.0368899442255497, -0.5215579867362976, -1.645074735279195e-05, -0.06517104059457779, -0.006187805440276861, -0.03144744038581848, -0.00041762212640605867, -3.576278118089249e-07, -0.010549728758633137, -5.090107151772827e-05, -0.00022849810193292797, -0.1187051311135292, -3.099393507000059e-05, -0.00017832119192462415, -0.0019083875231444836, -0.060770466923713684, -0.0012553200358524919, -0.0005295066512189806, -0.41008830070495605, -0.001942058908753097, -0.005845831241458654, -6.425174069590867e-05, -0.00028880240279249847, -0.4602286219596863, -0.012324369512498379, -0.4466134309768677, -0.8953149914741516, -0.10485070943832397, -0.03659209981560707, -0.008159872144460678, -1.8686484098434448, -0.0002411313180346042, -0.004993348848074675, -0.0004301338049117476, -0.04641697183251381, -0.005779579281806946, -0.007358353119343519, -0.0015444743912667036, -5.745722592109814e-05, -0.0025664984714239836, -1.6212332411669195e-05, -7.235741941258311e-05, -0.00066985102603212, -0.0006399490521289408, -6.41325386823155e-05, 0.0, -0.0019615711644291878, -9.965400386136025e-05, -9.560128091834486e-05, -0.0050297630950808525, -1.0013530300057027e-05, -0.0038988778833299875, -0.02850211411714554, -0.022510481998324394, -0.0022645562421530485, -0.019346587359905243, -0.00010096516780322418, -0.11100492626428604, -0.0060385167598724365, -2.145764938177308e-06, -2.992108420585282e-05, -0.00028534632292576134, -0.008349984884262085, -0.18653114140033722, -3.797915458679199, -5.040520668029785, -0.399189829826355, -0.9915499687194824, -2.5449252128601074, -0.20172935724258423, -1.0270743370056152, -0.17703092098236084, -0.12733305990695953, -2.5089950561523438, -0.1879841685295105, -2.966506242752075, -0.12925149500370026, -0.3429420292377472, -0.0012081712484359741, -1.1249639987945557, -0.40615907311439514, -0.4447857439517975, -0.040013447403907776, -0.04499741643667221, -0.15584029257297516, -1.5458636283874512, -0.020530572161078453, -0.8582885265350342, -0.21484678983688354, -1.1826761960983276, -1.7369685173034668, -0.01004745438694954, -0.009882924146950245, -0.2625272572040558, -0.00022146634000819176, -0.00724521791562438, -0.0005311747081577778, -0.08307062089443207, -0.00025340684805996716, -0.002198780421167612, -6.425174069590867e-05, -2.8729025871143676e-05, -1.326554536819458, -0.010808967985212803, -0.031955134123563766, -0.00587083725258708, -0.011830996721982956, -0.0015010291244834661, -0.030603798106312752, -0.01019225176423788, -5.686121585313231e-05, -8.964136941358447e-05, -2.622600959512056e-06, -1.9788545614574105e-05, -4.649054244509898e-05, -3.3378546504536644e-06, -2.3841855067985307e-07, -5.125986263010418e-06, -3.4570634852570947e-06, -0.00020072828920092434, -0.012462950311601162, -0.051356520503759384, -0.6051924228668213, -4.303036212921143, -0.11750484257936478, -0.016654858365654945, -2.212526798248291, -2.106722354888916, -3.183900833129883, -0.6610423922538757, -2.839338779449463, -2.2200586795806885, -0.06450303643941879, -1.5324944257736206, -0.03396373614668846, -0.15837408602237701, -0.020058175548911095, -0.578718900680542, -0.1655898541212082, -0.0002015625941567123, -0.02454720064997673, -0.04108399152755737, -0.18023554980754852, -0.009204218164086342, -0.0001629458274692297, -0.010773707181215286, -2.3007127310847864e-05, -0.0003784178989008069, -1.6689286894688848e-06, -2.407998726994265e-05, -0.015628596767783165, -0.00021371940965764225, -0.00889092218130827, -0.008387104608118534, -0.0018386616138741374, -0.0028398206923156977, -2.1657004356384277, -1.21791410446167, -3.189850330352783, -0.01608080230653286, -0.2108096480369568, -2.9704079627990723, -0.1355348527431488, -0.07241141051054001, -0.40893062949180603, -0.3272651433944702, -0.2962281107902527, -0.14158819615840912, -0.051848772913217545, -0.2300652414560318, -2.8229007720947266, -0.0006277974462136626, -0.0021469180937856436, -2.220780849456787, -0.15463781356811523, -0.5636017322540283, -2.639331102371216, -0.6428977251052856, -0.10086162388324738, -0.12274084985256195, -0.03822765126824379, -2.5677342414855957, -0.0026880106888711452, -0.004688579123467207, -0.14609836041927338, -0.20221638679504395, -1.2556860446929932, -7.545663538621739e-05, -0.0002083561266772449, -0.004934039432555437, -0.034146588295698166, -0.5009835362434387, -0.0006619884516112506, -0.021601984277367592, -0.06578569114208221, -0.025057245045900345, -1.1920922133867862e-06, -0.010644680820405483, -0.0020249830558896065, -7.152555099310121e-07, 0.0, -4.768370445162873e-07, -7.152555099310121e-07, -2.13382354559144e-05, -7.557583012385294e-05, -1.2278481335670222e-05, -4.51792984677013e-05, -0.0002337421028641984, -0.0017392997397109866, -0.00040975757292471826, -0.1502685844898224, -4.756337511935271e-05, -1.168244216387393e-05, -0.6177879571914673, -1.0847986231965479e-05, -0.0022239969111979008, -0.00044979469384998083, -3.659658250398934e-05, -0.0027747959829866886, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.255681051290594e-05, -0.0018981549656018615, -0.0010162194957956672, -2.622600959512056e-06, -0.001910886145196855, -0.026412375271320343, -0.2394360899925232, -0.0020872014574706554, -0.0003665013937279582, -0.011186854913830757, -2.750288486480713, -0.01494238805025816, -2.171353340148926], "finish_reason": "length"}], "metrics": {"energy": 918.2326340827935, "energy_per_token": 3.5868462268859123, "time": 22.667616, "time_per_token": 0.088545375}}
{"outputs": [{"text": "try:\n        data = df[[feature, target]].copy()\n        # data = df.loc[:, [feature, target]]\n        model = LinearRegression()\n        model.fit(data[feature].values.reshape(-1, 1), data[target].values)\n        residuals = data[target] - model.predict(data[feature].values.reshape(-1, 1))\n        largest = heapq.nlargest(n, zip(residuals, range(len(residuals))), key=lambda x: abs(x[0]))\n        largest_indices = [index for _, index in largest]\n    except ValueError:\n        raise ValueError(\"Feature or target not in the DataFrame.\")\n    return largest_indices, model", "tokens": ["try", ":", "\n", "        ", "data", " =", " df", "[[", "feature", ",", " target", "]]", ".", "copy", "()", "\n", "        ", "#", " data", " =", " df", ".", "loc", "[:", ",", " [", "feature", ",", " target", "]]", "\n", "        ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "        ", "model", ".", "fit", "(", "data", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " data", "[", "target", "]", ".", "values", ")", "\n", "        ", "res", "idual", "s", " =", " data", "[", "target", "]", " -", " model", ".", "predict", "(", "data", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "        ", "largest", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " zip", "(", "res", "idual", "s", ",", " range", "(", "len", "(", "res", "idual", "s", ")))", ",", " key", "=", "lambda", " x", ":", " abs", "(", "x", "[", "0", "]))", "\n", "        ", "largest", "_", "indices", " =", " [", "index", " for", " _", ",", " index", " in", " largest", "]", "\n", "    ", "except", " Value", "Error", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Feature", " or", " target", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "return", " largest", "_", "indices", ",", " model", "\n", "\n", "if"], "logprobs": [-2.745795965194702, -0.00067223358200863, -0.005165208131074905, -0.016900446265935898, -3.060697317123413, -0.11202441155910492, -0.09335412085056305, -0.22988414764404297, -0.005588503088802099, -0.0016553997993469238, -0.01779390312731266, -0.0008002892718650401, -0.8189319372177124, -0.4888162910938263, -0.10768922418355942, -0.07663452625274658, -1.37087082862854, -3.095586061477661, -3.8557891845703125, -0.4950947165489197, -0.4083520770072937, -1.0920753479003906, -1.3238661289215088, -0.04721235856413841, -0.021761447191238403, -0.2377183437347412, -0.03361176699399948, -0.00318508199416101, -0.00691745663061738, -0.0019342063460499048, -1.2615129947662354, -0.8439176678657532, -1.2435626983642578, -0.0029634390957653522, -0.009082195349037647, -2.682172998902388e-05, -1.0371154530730564e-05, -0.017876341938972473, -0.12180083990097046, -0.08378137648105621, -0.4116639792919159, -0.025799866765737534, -0.000276765669696033, -0.0038887844420969486, -0.09456692636013031, -0.10891556739807129, -0.006253556348383427, -0.0005256939912214875, -0.019751066341996193, -1.581734299659729, -0.007167696952819824, -0.0008532935753464699, -2.3841855067985307e-07, -0.007001626770943403, -4.911301948595792e-05, -0.00018225439998786896, -0.0710333064198494, -3.0397906812140718e-05, -7.879423355916515e-05, -0.0007664603181183338, -0.13015000522136688, -0.0014734136639162898, -0.00025376438861712813, -0.64743572473526, -0.0015718498034402728, -0.004287456162273884, -0.36072394251823425, -0.017712626606225967, -0.27506276965141296, -1.48661208152771, -0.06297160685062408, -0.044511809945106506, -0.010831844992935658, -0.6116822957992554, -0.022128107026219368, -0.07251884788274765, -0.005476353224366903, -0.18973873555660248, -0.026574209332466125, -0.00022492263815365732, -0.0014136569807305932, -5.030505417380482e-05, -0.11144084483385086, -0.0023061842657625675, -0.00043275527423247695, -0.0017604819731786847, -0.0003947432560380548, -0.0022239969111979008, -0.0010983869433403015, -0.00012003655137959868, -2.1457441107486375e-05, -0.00500924326479435, -2.2172682292875834e-05, -0.00011753345461329445, -0.003359271911904216, -6.9141146923357155e-06, -0.0005367745761759579, -0.008430133573710918, -0.12771177291870117, -1.205272912979126, -1.5046244859695435, -0.12266324460506439, -0.00013314791431184858, -0.00032586511224508286, -0.012460713274776936, -4.768370445162873e-07, -5.960462772236497e-07, -0.0006659197388216853, -0.016218276694417, -0.003948868252336979, -2.28532075881958, -0.006730742286890745, -0.06294295191764832, -2.3841830625315197e-06, -5.245195097813848e-06, -0.07478457689285278, -1.4932825565338135, -0.0009950215462595224, -0.12268760055303574, -0.00015615197480656207, -0.46744266152381897, -1.7881233361549675e-05, -3.58813522325363e-05, -0.11774658411741257, -0.003336341353133321, -0.019821658730506897, -0.015822339802980423, -0.026528354734182358, -0.20085714757442474, -0.0030870423652231693, -0.3612331748008728, -0.00011014331539627165, -0.0008841419476084411, -0.0007314390386454761, -0.0004972175229340792, -0.0077199204824864864, -0.013581257313489914, -0.07774335891008377, -1.5113697052001953, -0.2651823163032532, -0.15503492951393127, -0.009716478176414967, -0.08657432347536087, -1.6922533512115479, -0.0043088216334581375, -0.15279002487659454, -0.0032055205665528774, -0.003927139099687338, -0.0003413571394048631, -0.0026008610147982836, -0.002132048597559333, -0.006138637196272612, -2.3820416927337646, -0.003204094711691141, -2.0179970264434814, -2.753696753643453e-05, -0.82041335105896, -0.006972860544919968, -0.002579221036285162, -0.10294827818870544, -0.05828100070357323, -1.1205610462639015e-05, -0.15162086486816406, -0.4169357419013977, -3.95937442779541, -1.3514726161956787, -0.030045446008443832, -1.8416900634765625, -0.4580126106739044, -0.8082119226455688, -0.791605532169342, -0.004763445816934109, -1.0205659866333008, -0.03683088719844818, -0.001077428925782442, -0.016361480578780174, -0.34820374846458435, -0.14985695481300354, -0.05051874741911888, -0.00010406429646536708, -6.079655122448457e-06, -0.0014518683310598135, -0.0012444854946807027, -0.47855931520462036, -0.01700768992304802, -0.7851834297180176], "finish_reason": "stop"}], "metrics": {"energy": 664.960138103485, "energy_per_token": 3.575054505932715, "time": 16.373188, "time_per_token": 0.08802789247311828}}
{"outputs": [{"text": "# check if feature and target are in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"feature {} not found in the DataFrame\".format(feature))\n    if target not in df.columns:\n        raise ValueError(\"target {} not found in the DataFrame\".format(target))\n    # create the regression model\n    model = LinearRegression()\n    model.fit(df[feature].to_numpy().reshape(-1, 1), df[target].to_numpy().reshape(-1, 1))\n    # compute the residuals and the absolute value of them\n    residuals = df[target] - model.predict(df[feature].to_numpy().reshape(-1, 1)).flatten()\n    residuals_abs = np.abs(residuals)\n    # select the n indices of the residuals that correspond to the n largest residuals\n    indices = heapq.nlargest(n, range(len(residuals_abs)), residuals_abs.__getitem__)\n    # return the indices and the model\n", "tokens": ["#", " check", " if", " feature", " and", " target", " are", " in", " the", " data", "frame", "\n", "    ", "if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "feature", " {}", " not", " found", " in", " the", " Data", "Frame", "\"", ".", "format", "(", "feature", "))", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "target", " {}", " not", " found", " in", " the", " Data", "Frame", "\"", ".", "format", "(", "target", "))", "\n", "    ", "#", " create", " the", " regression", " model", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "#", " compute", " the", " residuals", " and", " the", " absolute", " value", " of", " them", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", " -", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", ".", "fl", "atten", "()", "\n", "    ", "res", "idual", "s", "_", "abs", " =", " np", ".", "abs", "(", "res", "idual", "s", ")", "\n", "    ", "#", " select", " the", " n", " indices", " of", " the", " residuals", " that", " correspond", " to", " the", " n", " largest", " residuals", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "_", "abs", "))", ",", " residuals", "_", "abs", ".", "__", "get", "item", "__", ")", "\n", "    ", "#", " return", " the", " indices", " and", " the", " model", "\n"], "logprobs": [-1.6816747188568115, -2.355574369430542, -0.5397672653198242, -1.5360528230667114, -0.07745005190372467, -0.009799469262361526, -1.0857030153274536, -0.2756621539592743, -0.463161438703537, -1.7637497186660767, -0.1562451720237732, -0.13822978734970093, -0.003186626825481653, -0.06423845887184143, -0.07624612003564835, -0.0038127838633954525, -1.0967194612021558e-05, -0.008442427031695843, -0.17112530767917633, -0.00297722639515996, -0.8854273557662964, -0.003268616273999214, -0.0026609033811837435, -0.005924166180193424, -0.003730482654646039, -3.361645576660521e-05, -0.08425135165452957, -1.4765363931655884, -0.9935269951820374, -2.8852338790893555, -0.4061923325061798, -2.6882734298706055, -0.0957120731472969, -0.9212988615036011, -0.7956172823905945, -0.008444436825811863, -0.14576765894889832, -0.013108271174132824, -0.0015870844945311546, -0.0007096394547261298, -0.006318473257124424, -0.0009193961159326136, -0.0017861855449154973, -0.11780454963445663, -0.05264494568109512, -0.002151795197278261, -0.00013267113536130637, -1.883488948806189e-05, -8.451581379631534e-05, -0.00015722469834145159, -6.472854875028133e-05, -0.00014900050882715732, -0.00014780859055463225, -0.0006050424999557436, -0.0001559135998832062, -0.00016127715934999287, -2.7418097943154862e-06, -0.0007018963224254549, -0.010104219429194927, -0.014500945806503296, -0.0020567469764500856, -0.0005803807871416211, -0.0003916450368706137, -0.0003885467885993421, -0.000617432699073106, -0.0006328010931611061, -0.0010450384579598904, -0.0005714452126994729, -0.00048029806930571795, -5.8412379075889476e-06, -6.83045873302035e-05, -0.01152476854622364, -6.913899414939806e-05, -0.00024399164249189198, -1.284812092781067, -0.14383234083652496, -2.306335926055908, -1.008944034576416, -2.6126599311828613, -0.07117730379104614, -0.19508685171604156, -0.0008345934911631048, -0.4168122410774231, -0.002300832187756896, -0.005137219093739986, -1.2397689715726301e-05, -1.2874520507466514e-05, -0.01115596853196621, -0.028933482244610786, -0.01542765460908413, -1.3203825950622559, -0.010944575071334839, -0.00015043080202303827, -0.00535280816257, -0.10383698344230652, -0.3349493443965912, -0.0026880106888711452, -0.0019971441943198442, -0.008575991727411747, -1.0054829120635986, -2.2172682292875834e-05, -0.24431972205638885, -0.004351077135652304, -0.02079365774989128, -0.00029988560709170997, -1.1920928244535389e-07, -0.01210073847323656, -4.935142715112306e-05, -0.00014327930693980306, -0.0854649543762207, -1.3351351299206726e-05, -0.00011526874004630372, -0.0014123475411906838, -0.040488190948963165, -0.0008268513483926654, -0.0001230164198204875, -0.5131427645683289, -0.001320324488915503, -0.008100040256977081, -5.602820692729438e-06, -0.00015436411194968969, -0.7632216215133667, -0.004148924257606268, -0.011649439111351967, -1.9073468138230965e-06, -0.0008158930577337742, -4.386805812828243e-05, -0.0004435985756572336, -0.013512693345546722, -0.0019110051216557622, -0.007575829979032278, -0.004230597522109747, -0.10731130838394165, -0.06587989628314972, -1.8050143718719482, -0.3660537004470825, -0.1592703014612198, -2.621325969696045, -1.8211205005645752, -2.1878955364227295, -0.5893077850341797, -0.32314804196357727, -2.2129745483398438, -0.07674603909254074, -0.0003773453936446458, -0.3972494900226593, -0.13157029449939728, -0.061052002012729645, -0.020313559100031853, -0.3268767297267914, -0.0032955880742520094, -0.1752728968858719, -0.009344412945210934, -0.3799273371696472, -0.13270987570285797, -0.00027295202016830444, -0.004893825389444828, -0.0001102625101339072, -0.004686087369918823, -0.013360848650336266, -0.0003409996279515326, -0.0011076750233769417, -5.3165931603871286e-05, -0.0040984689258039, -6.556489552167477e-06, -5.590759246842936e-05, -0.0002562671434134245, -0.0001787979417713359, -7.712543447269127e-05, 0.0, -0.0004573014739435166, -1.0728830375228426e-06, -9.846202738117427e-05, -0.0036266762763261795, -1.0371154530730564e-05, -0.0005329619161784649, -0.9350636005401611, -0.48680785298347473, -0.00011288482346571982, -0.0002008474839385599, -0.007854292169213295, -0.001783448620699346, -2.2945642471313477, -0.016662947833538055, -0.02145591378211975, -0.22879324853420258, -0.03219260647892952, -0.002883089007809758, -0.18242332339286804, -3.814689989667386e-06, -0.0997321754693985, -0.00027998341829515994, -0.00376658677123487, -2.264974000354414e-06, -5.280832192511298e-05, -0.011668055318295956, -0.022806374356150627, -0.016465146094560623, -0.04101385548710823, -4.1146039962768555, -0.1127028614282608, -0.6862640380859375, -2.195706367492676, -0.717572808265686, -0.09232214838266373, -3.134641170501709, -2.569915294647217, -3.160215139389038, -0.038204703480005264, -0.05443918704986572, -0.7673332691192627, -0.2952747046947479, -0.18104106187820435, -0.13698068261146545, -0.00038961926475167274, -0.899338960647583, -0.07364621013402939, -0.3962143361568451, -0.00013910756388213485, -6.09140915912576e-05, -0.009763346053659916, -4.768370445162873e-07, 0.0, -0.0002694958820939064, -0.017758067697286606, -0.004026995971798897, -0.013907665386795998, -3.242440288886428e-05, -0.016100391745567322, -2.9801878554280847e-05, -0.016411907970905304, -1.311301275563892e-06, -2.4914430468925275e-05, -0.5010128617286682, -2.5152843591058627e-05, -0.0008175606490112841, -0.0002150304353563115, -0.097310371696949, -0.00046659549116156995, -2.3483953555114567e-05, -0.0002790300059132278, -0.020203281193971634, 0.0, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.0012462714221328497, -0.0032982020638883114, -0.05934430658817291, -1.9220563173294067, -0.09109421074390411, -0.07777578383684158, -0.41803255677223206, -0.256003201007843, -0.028137322515249252, -0.2954038083553314, -0.029881861060857773], "finish_reason": "length"}], "metrics": {"energy": 919.5549725704191, "energy_per_token": 3.5920116116031995, "time": 22.491705, "time_per_token": 0.08785822265625}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Specified columns '{feature}' and/or '{target}' are not in the DataFrame.\")\n    x = df[feature].to_numpy().reshape((-1, 1))\n    y = df[target]\n    model = LinearRegression().fit(x, y)\n    y_pred = model.predict(x)\n    residuals = y - y_pred\n\n    largest_indices = [i for _, i in heapq.nlargest(n, ((res, i) for i, res in enumerate(residuals)))]\n    return largest_indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Spec", "ified", " columns", " '", "{", "feature", "}'", " and", "/", "or", " '", "{", "target", "}'", " are", " not", " in", " the", " Data", "Frame", ".", "\"", ")", "\n", "    ", "x", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(", "(-", "1", ",", " ", "1", "))", "\n", "    ", "y", " =", " df", "[", "target", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "x", ",", " y", ")", "\n", "    ", "y", "_", "pred", " =", " model", ".", "predict", "(", "x", ")", "\n", "    ", "res", "idual", "s", " =", " y", " -", " y", "_", "pred", "\n", "\n", "    ", "largest", "_", "indices", " =", " [", "i", " for", " _", ",", " i", " in", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " ((", "res", ",", " i", ")", " for", " i", ",", " res", " in", " enumerate", "(", "res", "idual", "s", "))", ")]", "\n", "    ", "return", " largest", "_", "indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.9615052342414856, -0.1562800407409668, -1.8185588121414185, -0.0018874465022236109, -0.13695262372493744, -2.389421224594116, -0.01708550751209259, -0.004042549524456263, -0.023188024759292603, -0.3176983892917633, -1.0677235126495361, -0.00036042393185198307, -0.010717333294451237, -0.0010624246206134558, -0.0005881248507648706, -0.002561147790402174, -1.3980309963226318, -0.0412919707596302, -0.09492453932762146, -0.12362667918205261, -0.7579158544540405, -0.002809983678162098, -0.27599048614501953, -0.007755644153803587, -0.0009525052737444639, -0.0035188202746212482, -1.4858473539352417, -2.3108229637145996, -0.09293446689844131, -0.08011844754219055, -0.10336623340845108, -0.003865747479721904, -0.0010562323732301593, -0.06558945029973984, -0.9986633062362671, -1.5616295058862306e-05, -0.01569654606282711, -0.04750194400548935, -0.12229010462760925, -0.0008764001540839672, 0.0, -2.989525556564331, -0.02063252218067646, -0.0002165798214264214, -0.000310730334604159, -0.058250296860933304, -0.00016127715934999287, -0.00012635385792236775, -0.03869865462183952, -0.0002177716523874551, -0.008216389454901218, -0.000436925794929266, -0.0003762729174923152, -0.00035851728171110153, -0.00013851160474587232, -4.434487345861271e-05, -1.846919059753418, -0.10322195291519165, -0.3541204035282135, -0.0012425805907696486, -0.005561592988669872, -8.821448318485636e-06, -3.659658250398934e-05, -0.007347347680479288, -0.6223565936088562, -5.5549986427649856e-05, -9.047575440490618e-05, -0.0018599607283249497, -0.003991494886577129, -0.0026115619111806154, -0.0016339774010702968, -0.009065302088856697, -0.0923926904797554, -1.5739439725875854, -0.06407265365123749, -0.3157585859298706, -0.0382651686668396, -0.01935325190424919, -5.61460001335945e-05, -0.0007152383332140744, -5.471556869451888e-05, -0.0005679901223629713, -0.0005385617259889841, -0.011370145715773106, -0.025941122323274612, -0.2765064239501953, -0.036817558109760284, -0.025754442438483238, -0.009922584518790245, -0.2563750445842743, -0.028867121785879135, -0.0022743092849850655, -0.00013147920253686607, -5.960446742392378e-06, -0.010820642113685608, -2.62544584274292, -0.0008357845945283771, -1.575246810913086, -0.14030878245830536, -0.9937586784362793, -0.03491484001278877, -2.833282709121704, -1.2232815027236938, -1.0078959465026855, -0.5593140125274658, -0.005513817071914673, -0.028408147394657135, -0.004695698153227568, -0.056369487196207047, -6.890059739816934e-05, -3.659658250398934e-05, -0.008258716203272343, -1.311301275563892e-06, -1.1920928244535389e-07, -3.683499380713329e-05, -0.030833154916763306, -0.0014840076910331845, -0.9334760308265686, -1.702302098274231, -0.5167636275291443, -0.30939120054244995, -0.0009534580749459565, -0.0021992563270032406, -0.0321769081056118, -0.00015853578224778175, -0.0024996723514050245, -0.0008743754005990922, -0.006174891721457243, -0.00019560330838430673, -0.00657194247469306, -5.483612312673358e-06, -8.702239938429557e-06, -0.028978994116187096, -0.004262528847903013, -0.010157676413655281, -0.5637321472167969, -0.04070933908224106, -0.03615022450685501, -7.271740287251305e-06, -5.960462772236497e-07, -0.0017394188325852156, -0.0005847889697179198, -1.4249762296676636, -2.3841830625315197e-06, -1.1920922133867862e-06, -4.0531076592742465e-06, -9.655486064730212e-05, -0.14192524552345276], "finish_reason": "stop"}], "metrics": {"energy": 601.8672760810853, "energy_per_token": 3.561344828882161, "time": 14.9166975, "time_per_token": 0.08826448224852071}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(f'Both {feature} and {target} must be in the provided DataFrame')\n\n    x = df[feature].to_numpy().reshape(-1, 1)\n    y = df[target].to_numpy()\n\n    model = LinearRegression().fit(x, y)\n\n    predictions = model.predict(x)\n    residuals = y - predictions\n\n    largest_indices = []\n\n    for _ in range(n):\n        largest_residual = -1\n        largest_index = -1\n\n        for index, residual in enumerate(residuals):\n            if residual > largest_residual and index not in largest_indices:\n                largest_residual = residual\n                largest_index = index\n\n        heapq.heappush(largest_indices, largest_index)\n\n    return largest_indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "'", "Both", " {", "feature", "}", " and", " {", "target", "}", " must", " be", " in", " the", " provided", " Data", "Frame", "')", "\n", "\n", "    ", "x", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "x", ",", " y", ")", "\n", "\n", "    ", "pred", "ictions", " =", " model", ".", "predict", "(", "x", ")", "\n", "    ", "res", "idual", "s", " =", " y", " -", " predictions", "\n", "\n", "    ", "largest", "_", "indices", " =", " []", "\n", "\n", "    ", "for", " _", " in", " range", "(", "n", "):", "\n", "        ", "largest", "_", "res", "idual", " =", " -", "1", "\n", "        ", "largest", "_", "index", " =", " -", "1", "\n", "\n", "        ", "for", " index", ",", " residual", " in", " enumerate", "(", "res", "idual", "s", "):", "\n", "            ", "if", " residual", " >", " largest", "_", "res", "idual", " and", " index", " not", " in", " largest", "_", "indices", ":", "\n", "                ", "largest", "_", "res", "idual", " =", " residual", "\n", "                ", "largest", "_", "index", " =", " index", "\n", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "largest", "_", "indices", ",", " largest", "_", "index", ")", "\n", "\n", "    ", "return", " largest", "_", "indices", ",", " model", "\n", "\n", "if"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.9615052342414856, -1.9696612358093262, -3.318753719329834, -0.693621039390564, -0.006823097355663776, -0.03705284744501114, -0.008333669975399971, -0.001629216712899506, -0.0010765953920781612, -0.0017206162447109818, -0.721211850643158, -0.055041175335645676, -0.52919602394104, -0.4609562158584595, -1.4818233251571655, -0.06891239434480667, -0.004981250036507845, -0.9487028121948242, -0.002877739956602454, -0.38610050082206726, -0.0009665584657341242, -3.0611608028411865, -0.1084396094083786, -0.08280728757381439, -0.1030588373541832, -0.0035010017454624176, -0.0015826807357370853, -0.09209603816270828, -1.1788899898529053, -1.9192511899746023e-05, -0.029962267726659775, -0.030375661328434944, -0.13141193985939026, -0.001258177449926734, -1.1920928244535389e-07, -0.05252019315958023, -5.280832192511298e-05, -0.000277123210253194, -0.06288138031959534, -2.9205850296420977e-05, -0.00016246906307060272, -0.028539305552840233, -0.0012907992349937558, -0.010647275485098362, -0.0004894727608188987, -0.00033146608620882034, -0.00035637227119877934, -0.00037496211007237434, -0.0001037067049765028, -0.07723643630743027, -0.0021496538538485765, -1.2278481335670222e-05, -0.00011467275908216834, -0.0001851148990681395, -0.32041239738464355, -0.44712164998054504, -0.00026294111739844084, -0.37337687611579895, -0.0013892533024773002, -0.004277959931641817, -4.887569048150908e-06, -8.4638240878121e-06, -0.009100032970309258, -0.8848414421081543, -7.70062324590981e-05, -8.475421054754406e-05, -0.001459962804801762, -0.003822284284979105, -0.0038715661503374577, -0.0006781900301575661, -0.004699850920587778, -0.8094711303710938, -0.00017033556650858372, -1.784309983253479, -1.0501552820205688, -0.002786683849990368, -0.02674112282693386, -3.7788631743751466e-05, -0.0012317459331825376, -5.793403761344962e-05, -0.0013559204526245594, -0.0009913297835737467, -0.01495060883462429, -0.23408496379852295, -0.23155732452869415, -0.015311320312321186, -0.019698821008205414, -0.007990418933331966, -0.505406379699707, -0.006429936736822128, -0.00264366390183568, -0.01113203726708889, -0.40865182876586914, -0.00018869050836656243, -1.3309022188186646, -0.29068639874458313, -0.8562657237052917, -0.04874107241630554, -2.5179429054260254, -0.005931987427175045, -1.6258552074432373, -0.00020180096908006817, -0.6764516234397888, -0.7329562902450562, -0.02448589913547039, -0.0014987675240263343, -0.0002783149539027363, -0.032908495515584946, -0.001644093543291092, -0.004423832520842552, -0.016265779733657837, -1.1441479921340942, -0.5086999535560608, -2.027592658996582, -0.07795741409063339, -0.20255571603775024, -1.4367611408233643, -0.7092181444168091, -0.20206095278263092, -0.09486176818609238, -0.11767113208770752, -0.0004629017203114927, -0.3054622411727905, -0.0007871866691857576, -0.14874805510044098, -0.0001740304142003879, -0.0004717191040981561, -0.4084629416465759, -0.0007634824141860008, -0.0424455851316452, -1.3645437955856323, -0.08688682317733765, -0.4643193483352661, -0.0011543523287400603, -0.01165886502712965, -0.0002747396647464484, -0.006548611912876368, 0.0, -3.6954811548639555e-06, -0.004675764590501785, -0.0012288884026929736, -0.004055490717291832, -0.013954571448266506, -0.8543910384178162, -0.05838389694690704, -0.006400798913091421, -8.34461570775602e-06, -0.00025388356880284846, -5.960446742392378e-06, -0.09776008874177933, -0.05051036179065704, -0.009383149445056915, -5.006777428206988e-06, -0.0006652049487456679, -1.7881377516459906e-06, -0.0001333863037871197, -0.003710767487064004, -0.002187599427998066, -0.00029118589009158313, -0.0037553044967353344, -1.0728830375228426e-06, -0.0031756944954395294, -5.125986263010418e-06, -0.001010741456411779, -0.0015848231269046664, -0.0008434075862169266, -0.00024637524620629847, -5.602679812000133e-05, -2.622600959512056e-06, -5.5549986427649856e-05, -5.221230458118953e-05, -0.00030393750057555735, -0.0002864189154934138, -0.04722168296575546, -0.0016074366867542267, -2.083458185195923, -0.00037305548903532326, -5.030505417380482e-05, -0.004577158950269222, -2.47952248173533e-05, -0.0019693044014275074, -0.0006225554971024394, -0.0025869496166706085, -1.9430925021879375e-05, -0.0004190520558040589, -0.0004668337933253497, -0.03967941179871559, -7.867782187531702e-06, -0.006758568342775106, -0.0010002615163102746, -0.005501013249158859, -0.02480737306177616, -0.002706676023080945, -0.09957032650709152, -0.2304517775774002, -4.768360213347478e-06, -0.0004727914638351649, -0.010042970068752766, -0.0010936238104477525, -0.7945246696472168, -0.010680182836949825, -0.7764219641685486], "finish_reason": "stop"}], "metrics": {"energy": 798.8001410226827, "energy_per_token": 3.58206341265777, "time": 19.760506, "time_per_token": 0.08861213452914798}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(f\"Column '{feature}' not in the DataFrame\")\n\n    if target not in df.columns:\n        raise ValueError(f\"Column '{target}' not in the DataFrame\")\n\n    df = df[[feature, target]].copy()\n\n    model = LinearRegression()\n\n    model.fit(df[feature].to_numpy().reshape(-1, 1), df[target])\n    pred = model.predict(df[feature].to_numpy().reshape(-1, 1))\n\n    diffs = df[target] - pred\n\n    residuals = list()\n\n    for diff in diffs:\n        heapq.heappush(residuals, (-diff, diff))\n\n        if len(residuals) > n:\n            heapq.heappop(residuals)\n\n    return [i for i, _ in residuals], model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " '", "{", "feature", "}'", " not", " in", " the", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " '", "{", "target", "}'", " not", " in", " the", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "df", " =", " df", "[[", "feature", ",", " target", "]]", ".", "copy", "()", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "])", "\n", "    ", "pred", " =", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "diff", "s", " =", " df", "[", "target", "]", " -", " pred", "\n", "\n", "    ", "res", "idual", "s", " =", " list", "()", "\n", "\n", "    ", "for", " diff", " in", " diff", "s", ":", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "res", "idual", "s", ",", " (-", "diff", ",", " diff", "))", "\n", "\n", "        ", "if", " len", "(", "res", "idual", "s", ")", " >", " n", ":", "\n", "            ", "heap", "q", ".", "he", "app", "op", "(", "res", "idual", "s", ")", "\n", "\n", "    ", "return", " [", "i", " for", " i", ",", " _", " in", " residuals", "]", ",", " model"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -1.0217221975326538, -0.0045485603623092175, -0.003239861223846674, -0.008812819607555866, -0.003573937574401498, -7.867782187531702e-06, -0.07789301872253418, -0.2481628656387329, -0.24865515530109406, -1.3470836877822876, -0.5736662149429321, -0.012738877907395363, -0.005519389174878597, -0.004798681940883398, -0.4857979118824005, -0.29747024178504944, -1.6748900413513184, -0.5098885297775269, -0.0037796504329890013, -0.6038311123847961, -0.00044741155579686165, -0.002208653138950467, -1.7651931047439575, -0.0001740304142003879, -0.01611153595149517, -0.0027790756430476904, -0.00025149996508844197, -9.894321920000948e-06, -8.546940807718784e-05, -0.0001463782973587513, -0.00013159839727450162, -0.00010823617776622996, -9.810443589231e-05, -0.0004659997357521206, -0.00025018901214934886, -0.00019059749320149422, -2.3841855067985307e-07, -0.00014923889830242842, -0.002806892851367593, -7.724463648628443e-05, -0.0009583409409970045, -0.001400800421833992, -0.0015437601832672954, -0.007239064201712608, -0.00044979469384998083, -0.0012749646557494998, -0.00018463814922142774, -0.0006068295333534479, -0.0001081169830285944, -0.00013159839727450162, -0.0019829864613711834, -6.115249561844394e-05, -0.0003237200144212693, -0.016513105481863022, -0.0008942657150328159, -3.6887240409851074, -0.340457022190094, -0.01288540381938219, -0.22738468647003174, -0.003775018732994795, -0.0007241725688800216, -0.009147283621132374, -0.0009135602158494294, -0.7850489020347595, -1.0450325012207031, -0.028233399614691734, -0.0744510069489479, -0.994525671005249, -0.0003046525234822184, -1.0746569633483887, -0.0026698203291743994, -0.00425255810841918, -1.0251946150674485e-05, -1.0251946150674485e-05, -0.012428689748048782, -0.09250050783157349, -1.7658816576004028, -0.00015639036428183317, -0.8141590356826782, -0.021060993894934654, -0.0003657863999251276, -0.005662116687744856, -0.11200086027383804, -0.16568218171596527, -0.0023679095320403576, -0.000654602306894958, -0.0072688874788582325, -0.2621629238128662, -1.6331539882230572e-05, -0.10965541750192642, -0.0067192562855780125, -0.013829365372657776, -0.0001998939987970516, 0.0, -0.011586751788854599, -5.7338023907504976e-05, -0.00019107422849629074, -0.04445035383105278, -1.6093124941107817e-05, -8.010543388081715e-05, -0.0011273226700723171, -0.11776226758956909, -0.0021113501861691475, -0.00010322991875000298, -0.44325119256973267, -0.008628349751234055, -1.8620909452438354, -0.8885218501091003, -1.380157709121704, -0.00957421027123928, -0.0002919009421020746, -0.0001486429391661659, -0.00017105070583056659, -0.010181749239563942, -0.013478939421474934, -0.0007425173535011709, -0.0005283151986077428, -3.0040289857424796e-05, -0.0014348459662869573, -0.000382707774406299, -4.255681051290594e-05, -0.00011407678539399058, -0.00029213930247351527, -3.7788631743751466e-05, -5.245195097813848e-06, -0.00024148885859176517, -1.0728830375228426e-06, -0.0002416080387774855, -0.001978227635845542, -3.3378546504536644e-06, -0.0007032066932879388, -0.007217997685074806, -0.5419508814811707, -0.0001102625101339072, -2.835449695587158, -1.7823363542556763, -0.013197568245232105, -1.021134614944458, -0.011358005926012993, -0.034163061529397964, -0.007773268967866898, -0.21971896290779114, -0.01468997448682785, -0.028241049498319626, -0.3978709280490875, -0.00020752183627337217, -3.367283344268799, -0.5968214273452759, -0.13531872630119324, -0.05285709351301193, -2.8997883796691895, -2.593918800354004, -0.007725717034190893, -0.5886814594268799, -9.97731985989958e-05, -0.12398121505975723, -2.550778865814209, -0.18396562337875366, -0.06691598147153854, -0.00023946279543451965, -0.19031581282615662, -0.001943962532095611, -0.022808121517300606, -0.45298996567726135, -0.0008575814426876605, -6.294052582234144e-05, -0.003983777482062578, -6.198863957251888e-06, -9.595887240720913e-05, -0.00011562632425921038, -0.004016310442239046, -4.529942543740617e-06, -3.802703940891661e-05, -0.000284154579276219, -1.1494629383087158, -0.47699853777885437, -0.09064409881830215, -0.5222918391227722, -0.08039844036102295, -0.07413536310195923, -0.07078655064105988, -2.5386271476745605, -0.0389738604426384, -0.017529908567667007, -6.496695277746767e-05, -0.0018847098108381033, -1.0967194612021558e-05, -4.851700214203447e-05, -0.000613143783994019, -0.0400967113673687, -0.006997956894338131, -0.00771164009347558, -0.0023484050761908293, -0.005793683230876923, -0.08104975521564484, -2.4437606043647975e-05, -3.0278701160568744e-05, -0.0002768848498817533, -9.536738616588991e-07, -0.007627174723893404, -9.321732068201527e-05, -0.0007421599584631622, -3.85038583772257e-05, -4.529942543740617e-06, -0.0012317459331825376, -0.004391905851662159, -0.004159965086728334, -0.0035634846426546574, -1.200100064277649, -0.14784575998783112, -1.7079572677612305, -0.3034292459487915, -0.8307969570159912, -0.09765835851430893, -0.9475821852684021, -0.012272675521671772, -0.5428443551063538, -0.11632634699344635, -0.006754542235285044, -0.006404115352779627], "finish_reason": "stop"}], "metrics": {"energy": 851.3514255657196, "energy_per_token": 3.7504468086595577, "time": 19.762342, "time_per_token": 0.08705877533039648}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in DataFrame.\")\n    model = LinearRegression()\n    model.fit(df[feature].values.reshape(-1, 1), df[target])\n    residuals = df[target] - model.predict(df[feature].values.reshape(-1, 1))\n    indices = heapq.nlargest(n, range(len(residuals)), residuals.take)\n    return indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " columns", " not", " in", " Data", "Frame", ".", "\"", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "])", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", " -", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "take", ")", "\n", "    ", "return", " indices", ",", " model"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.7609742283821106, -1.333001732826233, -0.0010062160436064005, -0.06707261502742767, -1.2834879159927368, -0.10302291810512543, -0.757094144821167, -0.005416479427367449, -1.1185296773910522, -0.007396101485937834, -0.0007163104019127786, -0.0019641886465251446, -1.3157554864883423, -0.9791120886802673, -0.0027090536896139383, -0.005824853666126728, -2.2649508537142538e-05, -1.680836794548668e-05, -0.0112879928201437, -0.07876437157392502, -0.010067635215818882, -0.4326145648956299, -0.00968531146645546, -0.00013326710904948413, -0.004365794360637665, -0.11114338785409927, -0.320467084646225, -0.002858720952644944, -0.0017911833710968494, -0.011634120717644691, -0.8204307556152344, -0.00693438621237874, -0.0003325386205688119, -2.861018856492592e-06, -0.008158334530889988, -3.766942609217949e-05, -0.00010656742961145937, -0.07548444718122482, -3.397406908334233e-05, -7.92710343375802e-05, -0.0005708495154976845, -0.022624000906944275, -0.0005032941699028015, -9.42901024245657e-05, -0.7133347988128662, -0.013383902609348297, -0.053895797580480576, -0.7714874744415283, -0.05536741390824318, -0.03125843405723572, -0.0068293726071715355, -0.6114689111709595, -0.0073119644075632095, -0.04646817967295647, -0.005393121857196093, -0.050780635327100754, -0.04517586901783943, -9.858122211880982e-05, -0.0034129724372178316, -0.00014649749209638685, -0.004594958852976561, -0.017669878900051117, -0.0015885126776993275, -0.005262214224785566, -8.523101132595912e-05, -0.004401638172566891, -0.0005801424849778414, -0.00036507140612229705, -1.549708758830093e-05, -0.011488472111523151, -2.7894584491150454e-05, -9.226373367710039e-05, -0.0038304782938212156, -9.65590606938349e-06, -0.00042655906872823834, -0.008307898417115211, -0.03805920109152794, -1.9029350280761719, -0.05938643589615822, -0.17771877348423004, -0.00016056202002801, -0.000701658078469336, -0.025664981454610825, -3.576278118089249e-07, -5.960462772236497e-07, -0.0019458661554381251, -0.03155463561415672, -0.0021391860209405422, -0.031182406470179558, -0.00013040646445006132, -0.009194295853376389, -5.447716102935374e-05, -0.026991091668605804, -1.9073468138230965e-06, -1.3947389561508317e-05, -0.0010437285527586937, -7.593343616463244e-05, -0.19518443942070007, -0.0005609607324004173, -0.6935887336730957, -0.00021371940965764225, -0.0051735094748437405, -0.027074750512838364, -0.02236209623515606, -0.029800403863191605, -0.00316690094769001, -0.0011504229623824358], "finish_reason": "stop"}], "metrics": {"energy": 455.9874974174498, "energy_per_token": 3.5624023235738265, "time": 11.344988, "time_per_token": 0.08863271875}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame\")\n\n    # fit model\n    X = df[feature].to_numpy().reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n\n    # compute residuals\n    y_pred = model.predict(X)\n    residuals = y - y_pred\n\n    # return indices of n largest residuals\n    n_largest = heapq.nlargest(n, range(len(residuals)), residuals.take)\n\n    return n_largest, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " columns", " are", " not", " in", " the", " provided", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " fit", " model", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "y", " =", " df", "[", "target", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "#", " compute", " residuals", "\n", "    ", "y", "_", "pred", " =", " model", ".", "predict", "(", "X", ")", "\n", "    ", "res", "idual", "s", " =", " y", " -", " y", "_", "pred", "\n", "\n", "    ", "#", " return", " indices", " of", " n", " largest", " residuals", "\n", "    ", "n", "_", "largest", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "take", ")", "\n", "\n", "    ", "return", " n", "_", "largest", ",", " model", "\n", "\n", "#"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.7609742283821106, -1.333001732826233, -0.0010062160436064005, -0.06707261502742767, -0.49612680077552795, -0.009262211620807648, -0.018418824300169945, -0.06768978387117386, -0.3154328763484955, -0.017217570915818214, -0.0020096360240131617, -1.0876307487487793, -0.0005864569102413952, -0.0035444789100438356, -0.3097665309906006, -0.0007933806627988815, -1.6060194969177246, -2.4675745964050293, -2.807192802429199, -0.24330484867095947, -0.0010618292726576328, -1.3360230922698975, -0.05543474480509758, -0.10361044853925705, -0.12987564504146576, -0.0028461208567023277, -0.0012288884026929736, -0.01916428469121456, -0.7091977000236511, -1.2636104656849056e-05, -0.09505939483642578, -0.009677991271018982, -0.06703872978687286, -0.00045658653834834695, 0.0, -0.015842286869883537, -4.5536911784438416e-05, -0.00012134769349358976, -0.04980413243174553, -2.1576648578047752e-05, -8.415821503149346e-05, -0.033314675092697144, -0.00018916724366135895, -0.07997550815343857, -0.001542688929475844, -0.0003474347176961601, -0.0004748170613311231, -0.0001431601122021675, -4.1483970562694594e-05, -1.4781899452209473, -0.07968185842037201, -0.13987676799297333, -0.0017409658757969737, -0.0020327160600572824, -8.583032467868179e-06, -2.1934269170742482e-05, -0.00781514123082161, -0.5718801617622375, -4.1483970562694594e-05, -5.328513361746445e-05, -0.0005700155161321163, -0.014126308262348175, -0.0022327988408505917, -0.0009552444680593908, -0.002385153668001294, -0.19445766508579254, -0.0004587313160300255, -0.038300737738609314, -1.6861205101013184, -0.12046255171298981, -0.17163440585136414, -0.00024148885859176517, -1.065472960472107, -0.03596210479736328, -0.28056058287620544, -0.03004590980708599, -0.0058114612475037575, -2.312633478140924e-05, -0.0005956306122243404, -4.017272294731811e-05, -0.0008505540899932384, -0.0006323245470412076, -0.009852824732661247, -0.0075222342275083065, -0.1029033288359642, -0.029913214966654778, -0.0103731295093894, -0.0024682790972292423, -0.20994214713573456, -0.037855714559555054, -0.0022677676752209663, -0.00013910756388213485, -3.6954811548639555e-06, -0.005666384007781744, -0.1094907745718956, -0.0003965306677855551, -0.03425890952348709, -2.4694461822509766, -0.664495587348938, -0.08270402252674103, -0.8501253128051758, -0.037977032363414764, -0.01497386209666729, -0.23565366864204407, -0.000977038755081594, -2.967501163482666, -0.13869094848632812, -0.03880278393626213, -0.2694229483604431, -0.21607497334480286, -0.00016902448260225356, -8.070142939686775e-05, -0.004778275731950998, -5.960462772236497e-07, -1.1920922133867862e-06, -0.00041106835124082863, -0.022405460476875305, -0.0010378933511674404, -0.11016720533370972, -3.1470757676288486e-05, -0.004545474890619516, -2.4199192921514623e-05, -0.06801693141460419, -1.1920922133867862e-06, -2.0265558760002023e-06, -0.0011376821203157306, -0.00011324241495458409, -0.1733628511428833, -0.0002329078270122409, -0.8954325914382935, -9.369411418447271e-05, -0.007716016843914986, -1.2067537307739258, -0.00030250742565840483, -0.027209097519516945, -0.0686318427324295, -0.00019870213873218745, -4.529942543740617e-06, -0.0034601360093802214, -0.0015530440723523498, -0.5955028533935547, -0.012183884158730507, -2.0463712215423584], "finish_reason": "stop"}], "metrics": {"energy": 583.2673584594731, "energy_per_token": 3.5565082832894706, "time": 14.302785, "time_per_token": 0.08721210365853659}}
{"outputs": [{"text": "try:\n        assert feature in df.columns, f'No feature column {feature!r} in provided DataFrame'\n        assert target in df.columns, f'No target column {target!r} in provided DataFrame'\n    except AssertionError as e:\n        raise ValueError(e)\n    else:\n        model = LinearRegression()\n        model.fit(df[feature].values.reshape(-1, 1), df[target].values.reshape(-1, 1))\n        residuals = df[target].values - model.predict(df[feature].values.reshape(-1, 1))\n        largest_n = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n        return largest_n, model", "tokens": ["try", ":", "\n", "        ", "assert", " feature", " in", " df", ".", "columns", ",", " f", "'", "No", " feature", " column", " {", "feature", "!", "r", "}", " in", " provided", " Data", "Frame", "'", "\n", "        ", "assert", " target", " in", " df", ".", "columns", ",", " f", "'", "No", " target", " column", " {", "target", "!", "r", "}", " in", " provided", " Data", "Frame", "'", "\n", "    ", "except", " Ass", "ert", "ion", "Error", " as", " e", ":", "\n", "        ", "raise", " Value", "Error", "(", "e", ")", "\n", "    ", "else", ":", "\n", "        ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "        ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "        ", "res", "idual", "s", " =", " df", "[", "target", "]", ".", "values", " -", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "        ", "largest", "_", "n", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "__", "get", "item", "__", ")", "\n", "        ", "return", " largest", "_", "n", ",", " model", "\n", "\n", "if"], "logprobs": [-2.745795965194702, -0.00067223358200863, -0.005165208131074905, -0.016900446265935898, -2.4768636226654053, -0.2960803210735321, -0.015832431614398956, -0.025403521955013275, -0.24253085255622864, -0.012568904086947441, -1.695906639099121, -0.3134637176990509, -2.240894317626953, -3.365504264831543, -2.2673604488372803, -0.9051995277404785, -1.0720313787460327, -0.009379370138049126, -2.4578826427459717, -0.0017556030070409179, -0.24754610657691956, -0.4045877456665039, -2.516824245452881, -0.1761295050382614, -0.01569114811718464, -0.6639509797096252, -0.012026890181005001, -0.015823982656002045, -0.011972944252192974, -0.006253792904317379, -0.0066549573093652725, -0.00035398892941884696, -0.00021431533969007432, -0.00010263393050990999, -0.0016558758215978742, -0.005945852026343346, -0.002298810286447406, -0.002150010783225298, -0.05092814937233925, -0.0032068276777863503, -0.001763337990269065, -0.04260324314236641, -0.0028949754778295755, -0.0001864259538706392, -0.0008505540899932384, -0.002054605633020401, -0.0010852882405743003, -0.0007460909546352923, -0.00031120702624320984, -0.0009450022480450571, -0.0007354891858994961, -0.7911760807037354, -0.0022670540492981672, -0.033244915306568146, -6.6756979322235566e-06, -3.4570634852570947e-06, -2.622600959512056e-06, -0.05594336986541748, -0.5790871381759644, -0.0018171241972595453, -0.002930396469309926, -0.003116752253845334, -0.06248703971505165, -0.05343833938241005, -1.9550132492440753e-05, -0.17044153809547424, -0.6201715469360352, -0.026616113260388374, -0.12038835883140564, -0.8857482671737671, -1.5760457515716553, -0.0001081169830285944, -0.0010889797704294324, -0.012699564918875694, -0.9670758247375488, -0.005626436788588762, -0.008044462651014328, -2.9205850296420977e-05, -8.940656698541716e-06, -0.01817641779780388, -0.12382260710000992, -0.06516779959201813, -0.411733478307724, -0.03942285478115082, -0.0003995097358711064, -0.013057912699878216, -0.11318381875753403, -0.19815286993980408, -0.0051034181378781796, -0.00228441902436316, -0.031527724117040634, -1.4325683116912842, -0.01684512197971344, -0.0016280265990644693, -1.0490362910786644e-05, -0.012575614266097546, -5.209310256759636e-05, -0.0002451834443490952, -0.13229064643383026, -2.4914430468925275e-05, -0.00011252723925281316, -0.0014135378878563643, -0.03060726635158062, -0.0008691347320564091, -8.427741704508662e-05, -0.5505034327507019, -0.0011258936719968915, -0.008670895360410213, -0.8040903806686401, -0.034429728984832764, -2.9802276912960224e-06, -0.001420561340637505, -2.253030106658116e-05, -0.00026675479602999985, -0.00783252902328968, -0.004251489415764809, -0.006081291474401951, -0.01442551240324974, -0.4220324754714966, -0.7962150573730469, -0.11546345055103302, -0.05764742195606232, -0.01099433284252882, -0.60364830493927, -0.01108134351670742, -0.1756041944026947, -0.012312947772443295, -1.114169716835022, -0.03391050174832344, -0.27592164278030396, -0.022788429632782936, -6.568216485902667e-05, -0.004750513471662998, -0.0001736728590913117, -0.0030753957107663155, -0.003300934797152877, -0.0016068416880443692, -0.0009154658182524145, -0.00010239553375868127, -0.0011609011562541127, -0.0004441943601705134, -0.0007023728103376925, -1.4305104514278355e-06, -0.0004451475979294628, -1.168244216387393e-05, -8.916457591112703e-05, -0.0031368357595056295, -9.894321920000948e-06, -0.0007487116381525993, -0.9219681620597839, -0.08954904973506927, -1.4443243741989136, -0.276674747467041, -3.6156203746795654, -0.3633067011833191, -0.09679444879293442, -0.00015472168161068112, -0.00044276448898017406, -0.004737818613648415, -7.152555099310121e-07, 0.0, -0.001212814822793007, -0.013456356711685658, -0.005002363584935665, -0.1915488988161087, -9.929640509653836e-05, -0.05712041258811951, -6.139089964563027e-05, -0.009992692619562149, -4.768370445162873e-07, -1.6212332411669195e-05, -0.0011965028243139386, -0.00030191155383363366, -0.18023623526096344, -0.0002637753786984831, -0.01588617078959942, -3.3378546504536644e-06, -6.6756979322235566e-06, -8.344646857949556e-07, -0.004097163211554289, -0.009444321505725384, -0.32747259736061096, -0.024025144055485725, -0.08806164562702179, -2.062299427052494e-05, -2.622600959512056e-06, -0.004628183785825968, -0.001623980118893087, -0.5177006721496582, -0.019176915287971497, -0.7371144890785217], "finish_reason": "stop"}], "metrics": {"energy": 718.3031653861998, "energy_per_token": 3.7607495569958105, "time": 16.6114, "time_per_token": 0.08697068062827225}}
{"outputs": [{"text": "if feature not in df.columns:\n        raise ValueError(\n            f\"Column '{feature}' not present in the provided DataFrame.\"\n        )\n\n    if target not in df.columns:\n        raise ValueError(f\"Column '{target}' not present in the provided DataFrame.\")\n\n    df_temp = df.copy()\n    df_temp[\"target\"] = df[target]\n    model = LinearRegression()\n\n    # fit the linear model\n    model.fit(df_temp[feature].to_numpy().reshape(-1, 1), df_temp[\"target\"])\n\n    # get the residuals\n    y_pred = model.predict(df_temp[feature].to_numpy().reshape(-1, 1))\n    residuals = (df_temp[\"target\"] - y_pred).abs()\n    # select the indices of the n largest residuals\n    indices = heapq.nlargest(n, range(len(residuals)), key=residuals.get)\n\n    return indices, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\n", "            ", "f", "\"", "Column", " '", "{", "feature", "}'", " not", " present", " in", " the", " provided", " Data", "Frame", ".", "\"", "\n", "        ", ")", "\n", "\n", "    ", "if", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Column", " '", "{", "target", "}'", " not", " present", " in", " the", " provided", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "df", "_", "temp", " =", " df", ".", "copy", "()", "\n", "    ", "df", "_", "temp", "[", "\"", "target", "\"", "]", " =", " df", "[", "target", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "\n", "    ", "#", " fit", " the", " linear", " model", "\n", "    ", "model", ".", "fit", "(", "df", "_", "temp", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "_", "temp", "[", "\"", "target", "\"", "])", "\n", "\n", "    ", "#", " get", " the", " residuals", "\n", "    ", "y", "_", "pred", " =", " model", ".", "predict", "(", "df", "_", "temp", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "    ", "res", "idual", "s", " =", " (", "df", "_", "temp", "[", "\"", "target", "\"", "]", " -", " y", "_", "pred", ")", ".", "abs", "()", "\n", "    ", "#", " select", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "indices", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "res", "idual", "s", ".", "get", ")", "\n", "\n", "    ", "return", " indices", ",", " model"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -1.0217221975326538, -0.0045485603623092175, -0.003239861223846674, -0.008812819607555866, -0.003573937574401498, -7.867782187531702e-06, -0.07789301872253418, -2.7805075645446777, -0.008797812275588512, -0.168532595038414, -0.1446370780467987, -1.6173067092895508, -0.588683545589447, -0.024792836979031563, -0.0032507930882275105, -0.00931358803063631, -0.6628940105438232, -2.5387725830078125, -0.004932615906000137, -0.47486093640327454, -0.7603051662445068, -0.03248610720038414, -0.0036479374393820763, -0.5355654358863831, -0.010690443217754364, -0.5058534741401672, -0.02452068030834198, -1.2755313036905136e-05, -0.0023617250844836235, -1.5678932666778564, -0.00013529339048545808, -0.01999390870332718, -0.0028556303586810827, -0.0002224197960458696, -6.556489552167477e-06, -6.568216485902667e-05, -0.00013207517622504383, -7.533743337262422e-05, -8.964136941358447e-05, -8.821098163025454e-05, -0.00020346954988781363, -0.00025042734341695905, -0.00010024998482549563, -1.1920928244535389e-07, -8.535020606359467e-05, -0.6070719957351685, -0.00010406429646536708, -0.0024142900947481394, -0.0017417988274246454, -0.0004944770480506122, -0.00285705691203475, -0.0009153467253781855, -0.0015788720920681953, -4.637133679352701e-05, -0.00045908879837952554, -0.000854841957334429, -0.0011869773734360933, -0.0011730464175343513, -0.00020597243565134704, -0.0060889930464327335, -0.0005696581210941076, -0.00046623803791590035, -0.0006086166249588132, -0.014380743727087975, -0.0005824061809107661, -3.843010425567627, -1.327897548675537, -3.8686318397521973, -0.0053798421286046505, -0.03529822826385498, -1.4433292150497437, -0.2067762166261673, -0.06554166227579117, -0.09695956110954285, -0.33703523874282837, -1.1277213096618652, -0.00937547255307436, -0.040843356400728226, -1.0062836408615112, -0.27875685691833496, -1.8326716423034668, -0.2124883234500885, -0.0002867764269467443, -0.0022612258326262236, -0.06470251083374023, -0.8106590509414673, -0.11326354742050171, -0.0010973153403028846, -0.3219708502292633, -0.23915523290634155, -2.848020315170288, -0.005815609358251095, -0.006676509045064449, -1.3351351299206726e-05, -5.245195097813848e-06, -0.013580904342234135, -0.19725269079208374, -2.2367196083068848, -0.00014709345123264939, -2.15688419342041, -1.8468176126480103, -0.7314317226409912, -2.218153476715088, -1.7375750541687012, -0.34055328369140625, -0.002135141519829631, -0.27022498846054077, -0.03644176572561264, -0.0013248485047370195, -0.010364989750087261, -0.4293505847454071, -0.16973699629306793, -4.327203714638017e-05, -0.10046300292015076, -0.014197062700986862, -0.0011847150744870305, -0.01917913742363453, -0.5560631155967712, -2.9682672902708873e-05, -0.5603823065757751, -0.010856137610971928, -0.006609246600419283, -0.0002656822034623474, -1.1920928244535389e-07, -0.011439917609095573, -3.361645576660521e-05, -4.565611743601039e-05, -0.02363240160048008, -1.764281842042692e-05, -6.651657167822123e-05, -0.0006125480867922306, -0.06308073550462723, -0.018116949126124382, -1.4781842764932662e-05, -0.10297516733407974, -0.18370704352855682, -2.1815061700181104e-05, -1.3589766240329482e-05, -0.029898520559072495, -0.0041435821913182735, -0.20644190907478333, -0.00021491125517059118, -0.09232160449028015, -2.2829389572143555, -0.48450881242752075, -0.6641308665275574, -0.33405983448028564, -0.00035339308669790626, -2.992659568786621, -0.1001172885298729, -0.2271951287984848, -0.13382866978645325, -0.01428120955824852, -4.029192859889008e-05, -0.0004522969538811594, -0.0001264730526600033, -0.008038431406021118, -0.016997845843434334, -0.0001137191939051263, -0.014179080724716187, -0.002477792324498296, -0.0005607224884442985, -1.7404405298293568e-05, -0.0025783886667340994, 0.0, -4.076874756719917e-05, -0.0002019201492657885, -0.00026294111739844084, -0.0002828436263371259, -2.3841855067985307e-07, -0.00045885046711191535, -1.9073468138230965e-06, -3.194758028257638e-05, -0.0006833125371485949, -4.291525328881107e-06, -0.00040284625720232725, -0.008861973881721497, -0.03275945037603378, -0.3246217668056488, -0.07264767587184906, -0.033731065690517426, -0.0023663633037358522, -2.4096567630767822, -0.3354701101779938, -0.0046304380521178246, -7.748573807475623e-06, -0.007074781693518162, -0.01759878359735012, -0.00014161060971673578, -1.0371154530730564e-05, -0.008067403919994831, -0.0682554543018341, -0.0026443772949278355, -3.2186455882765586e-06, -3.576278118089249e-07, -0.07307837158441544, -0.4333132803440094, -0.41518470644950867, -0.00013958434283267707, -0.05810093507170677, -2.4753994941711426, -2.413646697998047, -4.07375955581665, -0.3160783350467682, -1.5390565395355225, -0.10249368101358414, -0.1140899583697319, -0.35364118218421936, -0.13310055434703827, -0.025860391557216644, -0.1272072046995163, -0.009826737456023693, -0.9911102652549744, -0.039029236882925034, -0.17031869292259216, -6.580135959666222e-05, -0.00011038171214750037, -0.005816676188260317, -7.152555099310121e-07, -1.1920928244535389e-07, -0.00024279984063468874, -0.0378466472029686, -0.0031399254221469164, -0.016644306480884552, -5.769562994828448e-05, -0.0031434905249625444, -4.470248313737102e-05, -0.0479234904050827, -3.6954811548639555e-06, -1.2755313036905136e-05, -0.0009147512027993798, -3.480850500636734e-05, -1.5178747177124023, -0.0015248350100591779, -0.08052834123373032, -2.4437606043647975e-05, -2.884823152271565e-05, -6.758938252460212e-05, -0.0653594359755516, -0.0013759202556684613, -0.007912482134997845, -0.3651525676250458, -0.0001081169830285944, -0.05018128827214241, -0.05011359974741936, -0.004544050898402929, -0.0010981488740071654], "finish_reason": "stop"}], "metrics": {"energy": 910.2147168769837, "energy_per_token": 3.5835225073897, "time": 22.276327, "time_per_token": 0.0877020748031496}}
{"outputs": [{"text": "if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The DataFrame does not have the specified columns\")\n\n    # Use a linear regression model to fit the relationship between the feature and target\n    model = LinearRegression()\n    model.fit(df[feature].values.reshape(-1, 1), df[target].values.reshape(-1, 1))\n\n    # Calculate the residuals as the difference between the predicted and actual values\n    residuals = df[target].values - model.predict(df[feature].values.reshape(-1, 1)).reshape(-1)\n\n    # Use a heap to find the indices of the n largest residuals\n    largest = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n\n    return largest, model", "tokens": ["if", " feature", " not", " in", " df", ".", "columns", " or", " target", " not", " in", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "The", " Data", "Frame", " does", " not", " have", " the", " specified", " columns", "\"", ")", "\n", "\n", "    ", "#", " Use", " a", " linear", " regression", " model", " to", " fit", " the", " relationship", " between", " the", " feature", " and", " target", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "#", " Calculate", " the", " residuals", " as", " the", " difference", " between", " the", " predicted", " and", " actual", " values", "\n", "    ", "res", "idual", "s", " =", " df", "[", "target", "]", ".", "values", " -", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "values", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", ".", "resh", "ape", "(-", "1", ")", "\n", "\n", "    ", "#", " Use", " a", " heap", " to", " find", " the", " indices", " of", " the", " n", " largest", " residuals", "\n", "    ", "largest", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "lambda", " i", ":", " residuals", "[", "i", "])", "\n", "\n", "    ", "return", " largest", ",", " model", "\n", "\n", "def"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -0.17551377415657043, -0.0027825231663882732, -0.4783758223056793, -0.0022354156244546175, -0.00016080040950328112, -1.7523612768854946e-05, -8.034383063204587e-05, -0.00026127262390218675, -0.0001250427303602919, -0.0015704215038567781, -0.001479246304370463, -0.003213838441297412, -0.01022529136389494, -0.0028864170890301466, -9.894321920000948e-06, -0.18415653705596924, -0.7609742283821106, -2.171382427215576, -3.5041215419769287, -0.02511862851679325, -1.0674548149108887, -0.002631774405017495, -0.791185736656189, -0.5039532780647278, -0.1695244014263153, -0.11990852653980255, -1.2197327613830566, -0.0017210922669619322, -0.0033062815200537443, -0.34800562262535095, -0.000686767278239131, -1.5434452295303345, -4.650093078613281, -1.8791191577911377, -2.1850438117980957, -0.04799257591366768, -0.1657283455133438, -0.2903318405151367, -0.5193182229995728, -0.25379812717437744, -3.350188970565796, -0.2079947143793106, -0.9230800867080688, -1.0417211055755615, -0.20676487684249878, -0.36394214630126953, -1.8477637767791748, -0.0035371140111237764, -0.4702725112438202, -0.0023279490415006876, -0.003699603257700801, -7.271740287251305e-06, -1.0132738680113107e-05, -0.00978860817849636, -0.07411721348762512, -0.021711640059947968, -0.3160790503025055, -0.0064270938746631145, -7.378782902378589e-05, -0.010933609679341316, -0.10641540586948395, -0.4340514540672302, -0.0018712644232437015, -0.002559126354753971, -0.0033547570928931236, -0.5176438093185425, -0.005135321523994207, -0.00015567521040793508, -1.1920928244535389e-07, -0.007251609116792679, -3.218599158572033e-05, -9.440929716220126e-05, -0.06520264595746994, -2.8967437174287625e-05, -3.433168603805825e-05, -0.0003252692404203117, -0.00983346626162529, -0.0006307758158072829, -3.40932747349143e-05, -0.30933207273483276, -0.00022075122979003936, -0.0023500702809542418, -0.9204683303833008, -0.011607137508690357, -1.9073468138230965e-06, -0.0006412595394067466, -3.933898824470816e-06, -6.782778655178845e-05, -0.0050383033230900764, -0.0002967870968859643, -0.0026922905817627907, -0.004859304521232843, -0.045273058116436005, -0.0005442806868813932, -0.02047404646873474, -0.5929790139198303, -0.3389756381511688, -0.19561821222305298, -4.096426010131836, -0.14547528326511383, -0.1688777059316635, -0.006726006045937538, -0.03527038171887398, -1.5289826393127441, -1.1229937076568604, -0.08278094977140427, -0.4239386320114136, -0.14776277542114258, -0.0002127659390680492, -0.4249601364135742, -0.011065074242651463, -0.005856497213244438, -0.0014117523096501827, -0.24175617098808289, -0.004058577585965395, -0.029089929535984993, -0.0011468507582321763, -0.43335169553756714, -0.007374683395028114, -0.20205803215503693, -0.013877568766474724, -7.867782187531702e-06, -0.00041607304592616856, -8.427741704508662e-05, -0.003341212635859847, -0.004103098995983601, -0.0004670721245929599, -0.0003873551613651216, -2.002696055569686e-05, -0.0006193388253450394, -0.00016675988445058465, -5.2569914259947836e-05, -4.529942543740617e-06, -0.0005684667266905308, -2.0265558760002023e-06, -3.71926071238704e-05, -0.0022573007736355066, -1.9073468138230965e-06, -0.00042381841922178864, -0.6208429932594299, -2.336730718612671, -4.0531076592742465e-06, -0.04312414303421974, -2.90866428258596e-05, -0.04405631497502327, -0.0022288737818598747, -0.04457748308777809, -0.000495549407787621, -0.013878626748919487, -0.6156273484230042, -0.21882304549217224, -0.4240625202655792, -0.1205562874674797, -0.36794954538345337, -0.004879353102296591, -0.7709163427352905, -0.015517332591116428, -0.006158186122775078, -0.14514942467212677, -0.029368020594120026, -0.011805903166532516, -0.15242253243923187, -0.0006356602534651756, -0.3455633819103241, -2.3645050525665283, -0.09346888959407806, -8.487341256113723e-05, -3.0636318115284666e-05, -0.0024786246940493584, -5.960462772236497e-07, 0.0, -0.00010752100206445903, -0.006529899314045906, -0.0008677055011503398, -0.0833750069141388, -1.3947389561508317e-05, -0.0037131428252905607, -2.1576648578047752e-05, -0.009198193438351154, -8.344646857949556e-07, -3.3378546504536644e-06, -0.00014888131408952177, -6.246371776796877e-05, -0.43629926443099976, -0.0021344278939068317, -0.4810722768306732, -0.12954173982143402, -0.0020610298961400986, -0.25356826186180115, -0.0005015069036744535, -9.107174992095679e-05, -0.004032101482152939, -0.0019622850231826305, -0.06098706275224686, -0.00024732868769206107, -0.1063912883400917, -0.08165736496448517, -0.002990300301462412, -0.0004502712981775403, -0.5521015524864197, -0.015427067875862122, -1.9481987953186035], "finish_reason": "stop"}], "metrics": {"energy": 822.832444755554, "energy_per_token": 3.975035965002676, "time": 19.932556, "time_per_token": 0.09629254106280194}}
{"outputs": [{"text": "if feature not in df or target not in df:\n        raise ValueError(\"Columns not in DataFrame.\")\n\n    X, y = df[feature].to_numpy().reshape(-1, 1), df[target].to_numpy().reshape(-1, 1)\n    model = LinearRegression().fit(X, y)\n\n    heap = [(-abs(model.predict(x.reshape(1, 1)) - y), i) for i, (x, y) in df.iterrows()]\n    heapq.heapify(heap)\n\n    res = []\n    for _ in range(min(n, len(heap))):\n        _, idx = heapq.heappop(heap)\n        res.append(idx)\n\n    return res, model", "tokens": ["if", " feature", " not", " in", " df", " or", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Columns", " not", " in", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "X", ",", " y", " =", " df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "heap", " =", " [", "(-", "abs", "(", "model", ".", "predict", "(", "x", ".", "resh", "ape", "(", "1", ",", " ", "1", "))", " -", " y", ")", ",", " i", ")", " for", " i", ",", " (", "x", ",", " y", ")", " in", " df", ".", "iter", "rows", "()", "]", "\n", "    ", "heap", "q", ".", "heap", "ify", "(", "heap", ")", "\n", "\n", "    ", "res", " =", " []", "\n", "    ", "for", " _", " in", " range", "(", "min", "(", "n", ",", " len", "(", "heap", "))", "):", "\n", "        ", "_", ",", " idx", " =", " heap", "q", ".", "he", "app", "op", "(", "heap", ")", "\n", "        ", "res", ".", "append", "(", "idx", ")", "\n", "\n", "    ", "return", " res", ",", " model", "\n", "\n", "def"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -2.323913097381592, -0.002736159600317478, -0.0002603192115202546, -4.7205765440594405e-05, -4.1960789531003684e-05, -0.0022149572614580393, -0.0034426727797836065, -0.004025689791887999, -0.014468282461166382, -0.0038973342161625624, -1.9311717551317997e-05, -0.25663071870803833, -0.7526401281356812, -2.1564669609069824, -0.801911473274231, -0.18072839081287384, -0.611000120639801, -0.008810102008283138, -2.136263608932495, -0.011473977006971836, -0.0008001701789908111, -0.003246158827096224, -0.4505520462989807, -0.0006385194719769061, -2.7149412631988525, -2.640223741531372, -0.035023968666791916, -0.012806789018213749, -0.08637773990631104, -0.10312141478061676, -0.008619367145001888, -0.00020752183627337217, -0.12157474458217621, -0.598699152469635, -1.6212332411669195e-05, -0.07462915033102036, -0.04812891408801079, -0.12754148244857788, -0.0027765792328864336, 0.0, -0.02195902168750763, -5.6265202147187665e-05, -0.00015507926582358778, -0.05186982825398445, -4.6967357775429264e-05, -0.0001255195093108341, -0.0011428022990003228, -0.007196812424808741, -0.0009110590908676386, -0.001035987981595099, -7.188061863416806e-05, -0.47188523411750793, -0.0027272433508187532, -2.098061486321967e-05, -0.00016675988445058465, -0.000819466426037252, -1.2641834020614624, -0.0017801166977733374, -1.0728830375228426e-06, -0.001549473381601274, -7.664863369427621e-05, -0.0002488780301064253, -0.006617773324251175, -8.4638240878121e-06, -0.00016807096835691482, -0.007726190146058798, -0.37383076548576355, -0.34137052297592163, -0.0023104657884687185, -0.003587716491892934, -1.0847986231965479e-05, -1.7046782886609435e-05, -0.00892932154238224, -0.5512526035308838, -0.00011359999916749075, -0.00010656742961145937, -0.0012432949151843786, -0.013164980337023735, -0.0014282988850027323, -0.0006250573205761611, -0.008447745814919472, -1.0150492191314697, -0.00020787939138244838, -3.0288047790527344, -0.052673447877168655, -2.0271596908569336, -0.6139816641807556, -0.8779449462890625, -0.008207876235246658, -1.9237542152404785, -0.0007656264933757484, -0.010645860806107521, -0.43163421750068665, -1.0477755069732666, -0.664099395275116, -0.0019885781221091747, -4.768370445162873e-07, -1.7787989377975464, -0.02018657512962818, -7.033100700937212e-05, -0.8694565892219543, -0.000570253818295896, -0.0007979070069268346, -0.5240360498428345, -0.04841243848204613, -0.2905765771865845, -0.0323762409389019, -0.4048340618610382, -0.011978951282799244, -0.05906892195343971, -0.07011561840772629, -0.0003146630187984556, -0.05228071287274361, -0.00845850259065628, -0.00011920218821614981, -0.0025379611179232597, -0.00012337400403339416, -0.004560783039778471, -2.33149790763855, -0.18227997422218323, -0.0070357187651097775, -0.0001711698860162869, -0.000619696278590709, -0.007931523025035858, -0.01248779147863388, -0.10932483524084091, -0.03466534614562988, -0.01610262133181095, -0.00012909532233607024, -0.0002286172821186483, -3.814689989667386e-06, -0.0001641377166379243, -0.0002343380037928, -0.00027366707217879593, -0.023192567750811577, -0.46878039836883545, -0.00014423283573705703, -2.8875651359558105, -0.495734840631485, -0.4223426580429077, -0.0015262633096426725, -0.055782612413167953, -0.25689178705215454, -0.19411656260490417, -0.0071544405072927475, -0.0007658647373318672, -0.00011824862303910777, -2.9172799587249756, -0.021104998886585236, -0.29345354437828064, -0.0015065044863149524, -0.03239447623491287, -0.00017021637177094817, -0.19274753332138062, -0.000858415151014924, -0.00016830935783218592, -0.005457621067762375, -0.0027955996338278055, -2.5611965656280518, -0.008488290011882782, -1.083449125289917, -0.0014661526074633002, -0.006090651731938124, -0.00043275527423247695, -1.3589766240329482e-05, -0.00015793983766343445, -2.0265558760002023e-06, -4.017272294731811e-05, -7.73638384998776e-05, -8.892617915989831e-05, -0.0002787916746456176, -0.00290198833681643, -0.001943010720424354, -0.0032740819733589888, -0.0025838580913841724, -0.0003519630990922451, -0.0006372089846991003, -0.008009577170014381, -0.0005353448214009404, -0.0013488966505974531, -0.34659379720687866, -0.0004586121649481356, -0.009993990883231163, -0.03972581401467323, -0.0038818970788270235, -0.0007320346776396036, -0.8438444137573242, -0.010009451769292355, -1.4060468673706055], "finish_reason": "stop"}], "metrics": {"energy": 725.1522411365505, "energy_per_token": 3.7378981501884048, "time": 16.816078, "time_per_token": 0.0866808144329897}}
{"outputs": [{"text": "# Check if columns are in the DataFrame\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(\"Specified columns are not in the provided DataFrame\")\n\n    # Create model\n    X = df[feature].to_frame()\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n\n    # Compute residuals and heapq\n    y_pred = model.predict(X)\n    residuals = y - y_pred\n    return heapq.nlargest(n, range(len(residuals)), residuals.getitem), model", "tokens": ["#", " Check", " if", " columns", " are", " in", " the", " Data", "Frame", "\n", "    ", "if", " not", " (", "feature", " in", " df", ".", "columns", " and", " target", " in", " df", ".", "columns", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Spec", "ified", " columns", " are", " not", " in", " the", " provided", " Data", "Frame", "\"", ")", "\n", "\n", "    ", "#", " Create", " model", "\n", "    ", "X", " =", " df", "[", "feature", "]", ".", "to", "_", "frame", "()", "\n", "    ", "y", " =", " df", "[", "target", "]", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "X", ",", " y", ")", "\n", "\n", "    ", "#", " Compute", " residuals", " and", " heap", "q", "\n", "    ", "y", "_", "pred", " =", " model", ".", "predict", "(", "X", ")", "\n", "    ", "res", "idual", "s", " =", " y", " -", " y", "_", "pred", "\n", "    ", "return", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " residuals", ".", "get", "item", ")", ",", " model", "\n", "\n", "if"], "logprobs": [-1.6816747188568115, -1.0266292095184326, -0.3390420377254486, -1.5737831592559814, -0.42631393671035767, -0.14470165967941284, -0.23238134384155273, -0.5261649489402771, -0.008008276112377644, -0.1142338439822197, -0.0015518538421019912, -0.07205574959516525, -2.370988607406616, -1.8292267322540283, -0.05559476837515831, -0.11147390305995941, -0.008128301240503788, -0.29788103699684143, -0.002368147252127528, -0.11669472604990005, -0.00252618920058012, -0.00017677174764685333, -0.00012575789878610522, -0.0007516896002925932, -0.0002598424907773733, -0.000841025379486382, -0.0012685356196016073, -0.00406012125313282, -0.012120288796722889, -0.0024573388509452343, -3.93382906622719e-05, -0.1130468025803566, -0.4942222535610199, -1.517849326133728, -0.0005659647285938263, -0.03693922981619835, -0.43254727125167847, -0.004213147796690464, -0.014872625470161438, -0.037546563893556595, -0.8844701051712036, -0.008083367720246315, -0.000957150012254715, -1.1144745349884033, -0.0007003477076068521, -0.002831024117767811, -0.2783198952674866, -0.0014834124594926834, -0.15022651851177216, -1.8479925394058228, -2.9050393104553223, -0.562549889087677, -0.00032944019767455757, -3.022418737411499, -0.06668583303689957, -0.17055583000183105, -0.2402607649564743, -0.003034512745216489, -0.0010096696205437183, -0.033088769763708115, -0.889599084854126, -2.3245540432981215e-05, -1.8641732931137085, -0.0014747231034561992, -0.049204882234334946, -0.0003022690652869642, -0.0802951455116272, -0.0005687049706466496, -0.0011454218765720725, -0.0037307203747332096, -0.00013136000779923052, -2.753696753643453e-05, -0.16019870340824127, -0.11657887697219849, -0.1344175636768341, -0.0014781750505790114, -0.0026312987320125103, -1.1444026313256472e-05, -1.4424220353248529e-05, -0.010545718483626842, -1.0531915426254272, -9.178694017464295e-05, -4.207999518257566e-05, -0.0011027929140254855, -0.014187895692884922, -0.005524842534214258, -0.001036583329550922, -0.007234093267470598, -0.05922802910208702, -0.0005729940603487194, -0.03261730819940567, -2.3345232009887695, -0.19718573987483978, -1.8532978296279907, -1.812414526939392, -2.8865509033203125, -0.6953113675117493, -0.000746448349673301, -1.708748698234558, -0.048063814640045166, -0.39594942331314087, -0.039195459336042404, -0.012272205203771591, -2.7417760065873154e-05, -0.0010640918044373393, -6.4490144723095e-05, -0.0035444789100438356, -0.003092271275818348, -0.007776108104735613, -0.0037250195164233446, -0.32885390520095825, -0.05986655503511429, -0.032605309039354324, -0.018398810178041458, -0.38350558280944824, -0.057420872151851654, -0.0024221388157457113, -0.0001494772732257843, -2.861018856492592e-06, -0.010915332473814487, -0.06201411411166191, -3.5055179595947266, -0.46161773800849915, -0.0003711488388944417, -0.0015425699530169368, -0.025078287348151207, -1.311301275563892e-06, 0.0, -0.0003921216703020036, -0.009396729990839958, -0.006288147531449795, -0.3732738196849823, -0.0002338612830499187, -0.013555502519011497, -4.8397800128441304e-05, -0.13201886415481567, -2.4914430468925275e-05, -6.997340824455023e-05, -0.0005567907355725765, -0.00020489977032411844, -0.14059127867221832, -0.0004611144249793142, -0.7155579924583435, -0.3876485526561737, -0.01197164785116911, -0.008087151683866978, -0.017720825970172882, -0.43330618739128113, -0.014559456147253513, -0.8013978600502014], "finish_reason": "stop"}], "metrics": {"energy": 530.1230142793654, "energy_per_token": 3.5341534285291027, "time": 13.031316, "time_per_token": 0.08687544}}
{"outputs": [{"text": "try:\n        y = df[target]\n        x = df[[feature]]\n        model = LinearRegression().fit(x, y)\n        preds = model.predict(x)\n        residuals = y - preds\n\n        top_n_largest = heapq.nlargest(n, range(len(residuals)), key=residuals.get)\n\n        return top_n_largest, model\n    except KeyError as err:\n        raise ValueError('DataFrame must have at least two columns named col1 and col2') from err", "tokens": ["try", ":", "\n", "        ", "y", " =", " df", "[", "target", "]", "\n", "        ", "x", " =", " df", "[[", "feature", "]]", "\n", "        ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "x", ",", " y", ")", "\n", "        ", "pred", "s", " =", " model", ".", "predict", "(", "x", ")", "\n", "        ", "res", "idual", "s", " =", " y", " -", " pred", "s", "\n", "\n", "        ", "top", "_", "n", "_", "largest", " =", " heap", "q", ".", "nl", "arg", "est", "(", "n", ",", " range", "(", "len", "(", "res", "idual", "s", "))", ",", " key", "=", "res", "idual", "s", ".", "get", ")", "\n", "\n", "        ", "return", " top", "_", "n", "_", "largest", ",", " model", "\n", "    ", "except", " Key", "Error", " as", " err", ":", "\n", "        ", "raise", " Value", "Error", "('", "DataFrame", " must", " have", " at", " least", " two", " columns", " named", " col", "1", " and", " col", "2", "')", " from", " err", "\n", "\n", "def"], "logprobs": [-2.745795965194702, -0.00067223358200863, -0.005165208131074905, -0.016900446265935898, -3.5107991695404053, -0.0860203355550766, -0.05646142736077309, -0.09554599225521088, -0.37395206093788147, -0.0015150746330618858, -0.4342309236526489, -0.07312213629484177, -1.1112666130065918, -0.010041790083050728, -0.035661108791828156, -2.0554091930389404, -0.006815164815634489, -0.005112313199788332, -0.009741978719830513, -0.6081125736236572, -0.26695048809051514, -0.003138143103569746, -0.005092743784189224, -2.4318398573086597e-05, -7.867782187531702e-06, -0.00435095839202404, -0.5361611843109131, -0.00013386306818574667, -8.49926145747304e-05, -0.003472372191026807, -0.011026520282030106, -0.018748922273516655, -0.0009997851448133588, -0.009204926900565624, -0.1752794086933136, -1.0905243158340454, -0.9511397480964661, -0.004130286164581776, -0.0544351227581501, -0.00011896379146492109, -0.00046659549116156995, -0.0004312062228564173, -0.01568516343832016, -0.0017602439038455486, -0.005036642774939537, -0.10684969276189804, -0.6111721992492676, -0.19695620238780975, -0.04920794442296028, -0.011977420188486576, -0.4257866442203522, -0.03485589846968651, -0.02077287621796131, -7.748573807475623e-06, -0.005630348809063435, -2.3145346641540527, -0.017728086560964584, -2.914302349090576, -0.12641499936580658, -0.7488209009170532, -1.345534086227417, -2.2248313426971436, -0.573386549949646, -0.29506704211235046, -0.0002775999018922448, -0.0002535260282456875, -0.005243122112005949, -8.344646857949556e-07, -1.9073468138230965e-06, -0.0012017417466267943, -0.07135491818189621, -0.006289332173764706, -0.49533241987228394, -0.0001463782973587513, -0.009638676419854164, -6.19869097135961e-05, -0.022945258766412735, -1.0728830375228426e-06, -5.960446742392378e-06, -0.0026601902209222317, -0.00044371772673912346, -1.931268572807312, -0.01125392783433199, -0.5454580187797546, -8.844937838148326e-05, -2.0503786799963564e-05, -0.00010871296399272978, -0.18178382515907288, -0.0011992413783445954, -0.014462877996265888, -0.7324612736701965, -0.1796627789735794, -0.02028762549161911, -0.03191102668642998, -1.0728830375228426e-06, -4.768370445162873e-07, -4.768360213347478e-06, -6.794906312279636e-06, -0.002824367256835103, -0.0038600473199039698, -0.008090107701718807, -0.6305953860282898, -0.0019646643195301294, -0.42268508672714233, -3.480850500636734e-05, -0.5031413435935974, -3.0056755542755127, -0.002279661362990737, -0.003436019876971841, -0.0060325926169753075, -0.07173968106508255, -0.0190542321652174, -1.1801649634435307e-05, -2.420299768447876, -2.0461883544921875, -1.4814610481262207, -0.615620493888855, -0.8804896473884583, -0.014582717791199684, -0.20673182606697083, -1.740128755569458, -0.4200797379016876, -1.9683690071105957, -0.004778750240802765, -0.03438711166381836, -0.003364024218171835, -0.0015119798481464386, -0.3034899830818176, -0.3061745762825012, -0.004566597752273083, -0.6011528372764587, -0.04308623820543289, -1.5032718181610107], "finish_reason": "stop"}], "metrics": {"energy": 486.3389845542909, "energy_per_token": 3.6566840943931647, "time": 12.180975, "time_per_token": 0.09158627819548873}}
{"outputs": [{"text": "if feature not in df or target not in df:\n        raise ValueError('Columns not in the provided DataFrame')\n\n    model = LinearRegression().fit(df[feature].to_numpy().reshape(-1, 1),\n                                   df[target].to_numpy())\n    preds = model.predict(df[feature].to_numpy().reshape(-1, 1))\n\n    residuals = abs(preds - df[target].to_numpy())\n    heap = [-x for x in residuals]\n    heapq.heapify(heap)\n\n    top_n_indices = []\n    for i in range(n):\n        top_n_indices.append(heapq.heappop(heap))\n\n    return top_n_indices, model", "tokens": ["if", " feature", " not", " in", " df", " or", " target", " not", " in", " df", ":", "\n", "        ", "raise", " Value", "Error", "('", "Columns", " not", " in", " the", " provided", " Data", "Frame", "')", "\n", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", "\n", "                ", "                ", "   ", "df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "    ", "pred", "s", " =", " model", ".", "predict", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", "\n", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "pred", "s", " -", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "    ", "heap", " =", " [-", "x", " for", " x", " in", " residuals", "]", "\n", "    ", "heap", "q", ".", "heap", "ify", "(", "heap", ")", "\n", "\n", "    ", "top", "_", "n", "_", "indices", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "n", "):", "\n", "        ", "top", "_", "n", "_", "indices", ".", "append", "(", "heap", "q", ".", "he", "app", "op", "(", "heap", "))", "\n", "\n", "    ", "return", " top", "_", "n", "_", "indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7251375317573547, -0.1973528116941452, -0.011726142838597298, -1.2755313036905136e-05, -0.012606455944478512, -2.323913097381592, -0.002736159600317478, -0.0002603192115202546, -4.7205765440594405e-05, -4.1960789531003684e-05, -0.0022149572614580393, -0.0034426727797836065, -0.004025689791887999, -0.014468282461166382, -0.0038973342161625624, -1.9311717551317997e-05, -1.5213210582733154, -2.235706090927124, -0.6672260165214539, -0.18977315723896027, -1.5095868110656738, -0.932202160358429, -0.023986738175153732, -0.003576313378289342, -0.32238319516181946, -0.0017814256716519594, -0.3903874158859253, -0.0007192885386757553, -1.1819367408752441, -0.003418674925342202, -0.005211340729147196, -1.9430925021879375e-05, -2.3483953555114567e-05, -0.0102998623624444, -2.8354244232177734, -0.00013565097469836473, -0.0014394884929060936, -0.21886873245239258, -0.25797781348228455, -0.0048501696437597275, -0.0017207353375852108, -0.04549223929643631, -0.5370839834213257, -1.9430925021879375e-05, -0.09513093531131744, -0.008494200184941292, -0.011021332815289497, -0.00022373080719262362, -1.5497195136049413e-06, -0.013017318211495876, -8.49926145747304e-05, -0.00014804698002990335, -0.08834880590438843, -5.113947918289341e-05, -0.00011848701251437888, -0.0018272384768351912, -2.290971279144287, -0.015921955928206444, -0.009850109927356243, -0.07937458157539368, -0.001210195361636579, -0.0010783816687762737, -5.4238757002167404e-05, -0.27940794825553894, -0.002266221446916461, -0.001972635742276907, -2.0146166207268834e-05, -0.00017832119192462415, -0.6347763538360596, -0.009570431895554066, -0.5116686224937439, -1.4563210010528564, -1.6552330255508423, -0.002363390289247036, -0.02040104754269123, -0.00011812942830147222, -0.0013775869738310575, -0.00022909401741344482, -0.004316774196922779, -0.014835275709629059, -0.001798085169866681, -0.0004854215949308127, -4.160317621426657e-05, -0.0015772057231515646, -7.915183232398704e-05, -7.60526381782256e-05, -0.00012885693286079913, -0.0006221981020644307, -3.683499380713329e-05, 0.0, -0.00119138287845999, -4.291525328881107e-06, -4.339123915997334e-05, -0.0018408034229651093, -8.4638240878121e-06, -0.0005874100024811924, -0.012292105704545975, -2.3742706775665283, -0.000179036331246607, -1.5006099939346313, -0.1890822947025299, -0.07030320167541504, -0.058122530579566956, -2.5058703422546387, -0.018532222136855125, -0.570496678352356, -7.819823804311454e-05, -0.025486499071121216, -0.003388260956853628, -0.004722869023680687, -0.0040773362852633, -0.22613246738910675, -0.00015054999676067382, -0.01043624710291624, -5.722029527532868e-06, -0.0008892634068615735, -0.004333391785621643, -0.03396466001868248, -0.5145558714866638, -1.7957477569580078, -0.053484782576560974, -3.4351820945739746, -1.5055643320083618, -0.005801742896437645, -0.004911856725811958, -0.00011062010162277147, -0.014521859586238861, -0.7823778986930847, -0.026382071897387505, -0.09238269180059433, -0.042475175112485886, -0.019704081118106842, -6.711257447022945e-05, -1.7881233361549675e-05, -8.344646857949556e-07, -0.00013362467871047556, -0.00011097769311163574, -0.00011872540198964998, -0.00915130041539669, -0.5600666403770447, -0.0001387499796692282, -3.395824670791626, -0.12205757945775986, -0.25608956813812256, -1.4429080486297607, -0.5024909377098083, -0.00710946274921298, -0.4521276354789734, -0.00156589865218848, -0.169467955827713, -0.06872933357954025, -1.2024651765823364, -0.0016886036610230803, -0.0008423355757258832, -0.00023505308490712196, -0.2006814181804657, -0.0033952705562114716, -0.0006715188501402736, -0.001645878772251308, -0.5528555512428284, -0.016897281631827354, -0.003789507318288088, -0.0006905793561600149, -0.0009133219718933105, -0.0011087467428296804, -0.0006384003208950162, -0.03993590548634529, -1.116417407989502, -0.3643719255924225, -1.8954096958623268e-05, -0.005753267090767622, -2.47952248173533e-05, -0.0006299418746493757, -7.56950321374461e-05, -0.0001486429391661659, -0.5618757605552673, -0.003180091269314289, -0.20462802052497864, -0.0005953923100605607, -0.23336847126483917, -0.10589814931154251, -3.6954811548639555e-06, -3.814689989667386e-06, -2.1457441107486375e-05, -3.6954195820726454e-05, -0.04960722103714943, -0.004832611884921789, -1.2550036907196045, -2.861018856492592e-06, -1.1920922133867862e-06, -3.814689989667386e-06, -5.757642793469131e-05, -0.14773418009281158], "finish_reason": "stop"}], "metrics": {"energy": 735.7773962688444, "energy_per_token": 3.8123181153826136, "time": 16.998892, "time_per_token": 0.08807716062176167}}
{"outputs": [{"text": "columns = {feature, target}\n    if columns - df.columns:\n        raise ValueError(\"DataFrame should contain all specified columns.\")\n    model = LinearRegression()\n    model.fit(df[feature].to_numpy().reshape(-1, 1), df[target].to_numpy())\n    residuals = abs(model.predict(df[feature].to_numpy().reshape(-1, 1)) - df[target].to_numpy())\n    heap = []\n    for idx, res in enumerate(residuals):\n        heapq.heappush(heap, (-res, idx))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    indices = [item[1] for item in heap]\n    return indices, model", "tokens": ["columns", " =", " {", "feature", ",", " target", "}", "\n", "    ", "if", " columns", " -", " df", ".", "columns", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "DataFrame", " should", " contain", " all", " specified", " columns", ".", "\"", ")", "\n", "    ", "model", " =", " Linear", "Reg", "ression", "()", "\n", "    ", "model", ".", "fit", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", ")", ",", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "    ", "res", "idual", "s", " =", " abs", "(", "model", ".", "predict", "(", "df", "[", "feature", "]", ".", "to", "_", "numpy", "()", ".", "resh", "ape", "(-", "1", ",", " ", "1", "))", " -", " df", "[", "target", "]", ".", "to", "_", "numpy", "())", "\n", "    ", "heap", " =", " []", "\n", "    ", "for", " idx", ",", " res", " in", " enumerate", "(", "res", "idual", "s", "):", "\n", "        ", "heap", "q", ".", "he", "app", "ush", "(", "heap", ",", " (-", "res", ",", " idx", "))", "\n", "        ", "if", " len", "(", "heap", ")", " >", " n", ":", "\n", "            ", "heap", "q", ".", "he", "app", "op", "(", "heap", ")", "\n", "    ", "indices", " =", " [", "item", "[", "1", "]", " for", " item", " in", " heap", "]", "\n", "    ", "return", " indices", ",", " model", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.285316228866577, -0.10575680434703827, -3.6817407608032227, -0.10011814534664154, -0.05542685091495514, -0.0025563915260136127, -0.01603645831346512, -0.0422348752617836, -0.12297289818525314, -0.22755779325962067, -1.6441149711608887, -1.1814706325531006, -0.4348091185092926, -0.0008141063735820353, -0.004212079104036093, -0.24519261717796326, -0.026567243039608, -0.003577382303774357, -0.1490800380706787, -0.0038740597665309906, -8.153582894010469e-05, -0.31306013464927673, -1.3300166130065918, -2.0824337005615234, -2.3137996196746826, -1.010068655014038, -2.7943854331970215, -0.6257064342498779, -0.02212635800242424, -0.9843883514404297, -0.00715680792927742, -0.0032876271288841963, -0.0033768555149435997, -0.8216193318367004, -1.1489179134368896, -0.0028968772385269403, -0.007124021649360657, -3.1470757676288486e-05, -1.7523612768854946e-05, -0.018114373087882996, -0.13567037880420685, -0.011401142925024033, -0.7275470495223999, -0.021743018180131912, -0.00022933237778488547, -0.010640316642820835, -0.13888415694236755, -0.15691079199314117, -0.007003047503530979, -0.0005700155161321163, -0.07330461591482162, -0.24889636039733887, -1.847726889536716e-05, -0.17510510981082916, -0.015223972499370575, -0.02528206631541252, -0.0005439232336357236, -1.1920928244535389e-07, -0.012189066037535667, -6.353653589030728e-05, -0.000169382052263245, -0.04730571433901787, -2.586808113846928e-05, -0.00016342257731594145, -0.001646116841584444, -0.07003426551818848, -0.0009945451747626066, -0.0001525762490928173, -0.9095819592475891, -0.0028148575220257044, -0.005182404071092606, -0.0001517419150331989, -9.953480184776708e-05, -0.19428040087223053, -0.00844360888004303, -0.09676273912191391, -0.7495797872543335, -0.08087781071662903, -0.05122118815779686, -0.018342046067118645, -2.391997814178467, -0.01470407098531723, -0.3494240343570709, -0.00014590153296012431, -0.007867420092225075, -0.00036459474358707666, -0.050411298871040344, -0.0118672801181674, -0.014135357923805714, -0.002144301077350974, -0.0003404037852305919, -0.004571819212287664, -1.6093124941107817e-05, -9.929640509653836e-05, -0.00384449097327888, -0.00150079105515033, -0.00016664070426486433, -1.1920928244535389e-07, -0.0026537699159234762, -4.708655978902243e-05, -9.762764238985255e-05, -0.004762496333569288, -9.179073458653875e-06, -0.013048852793872356, -0.05270646885037422, -0.1043882742524147, -0.0015266203554347157, -0.005609841085970402, -0.08915232867002487, -0.0001802282058633864, -0.004539660178124905, -2.3841830625315197e-06, -3.302042750874534e-05, -0.0028505190275609493, -0.018659181892871857, -0.055838871747255325, -2.21713924407959, -0.08244619518518448, -0.6244702935218811, -0.019858472049236298, -0.013186156749725342, -0.08673063665628433, -1.5281336307525635, -0.11757776141166687, -1.5061029195785522, -0.017942501232028008, -0.05448208376765251, -0.00022837892174720764, -0.002809032564982772, -5.364403477869928e-06, -6.079655122448457e-06, -0.008124162442982197, -0.0018768567824736238, -0.0027658799663186073, -0.9634647369384766, -0.07764310389757156, -5.006664650863968e-05, -0.0003634030872490257, -1.4305104514278355e-06, -2.1934269170742482e-05, -0.0008354272576980293, -0.0004240567213855684, -0.00015031162183731794, -0.6947653293609619, -0.028685040771961212, -0.005832320544868708, -0.007813958451151848, -0.002321407664567232, -0.08600348979234695, -0.49642226099967957, -0.024362005293369293, -0.018200064077973366, -2.8729025871143676e-05, -4.827859811484814e-05, -0.0002805792901199311, -0.007669053506106138, -0.0030178739689290524, -0.0019712080247700214, -0.0050531295128166676, -0.0019999993965029716, -0.009043092839419842, -0.015177595429122448, -1.0371154530730564e-05, -8.821098163025454e-05, -1.1920922133867862e-06, -7.390703103737906e-05, -2.2411095415009186e-05, -6.031808152329177e-05, -0.00017975145601667464, -0.008619840256869793, -0.0518958605825901, -0.9240638613700867, -0.014974800869822502, -0.3724493682384491, -2.3463902473449707, -0.01028464175760746, -0.0003516055876389146, -5.8053239627042785e-05, -0.0002975021197926253, -0.007184148300439119, -4.3748852476710454e-05, -0.027303408831357956, -0.050416287034749985, -0.009014622308313847, -0.02498760260641575, -0.2570272386074066, -0.06554701924324036, -0.005134017206728458, -0.0006972504197619855, -1.2464776039123535, -3.2186455882765586e-06, -1.1920922133867862e-06, -3.099436753473128e-06, -6.0437283536884934e-05, -0.1933586448431015], "finish_reason": "stop"}], "metrics": {"energy": 735.4931129646296, "energy_per_token": 3.7717595536647672, "time": 17.05323, "time_per_token": 0.08745246153846153}}
