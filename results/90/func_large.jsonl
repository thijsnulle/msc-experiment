{"outputs": [{"text": "# Validate the input parameters\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n\n    # Constants\n    radius = 6371  # km\n\n    # Calculate the distance between target and each data point\n    data['Distance'] = np.sqrt(np.square(data['Latitude'] - target[0]) + np.square(data['Longitude'] - target[1]))\n\n    # Sort the data by distance in ascending order\n    sorted_data = data.sort_values(by='Distance')\n\n    # Extract the top 'k' nearest neighbors\n    top_k_neighbors = sorted_data.iloc[:k][['Latitude', 'Longitude']].values.tolist()\n\n    return top_k_neighbors", "tokens": ["#", " Valid", "ate", " the", " input", " parameters", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Const", "ants", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "  ", "#", " km", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " between", " target", " and", " each", " data", " point", "\n", "    ", "data", "['", "Distance", "']", " =", " np", ".", "sqrt", "(", "np", ".", "square", "(", "data", "['", "Lat", "itude", "']", " -", " target", "[", "0", "])", " +", " np", ".", "square", "(", "data", "['", "Long", "itude", "']", " -", " target", "[", "1", "]))", "\n", "\n", "    ", "#", " Sort", " the", " data", " by", " distance", " in", " ascending", " order", "\n", "    ", "s", "orted", "_", "data", " =", " data", ".", "sort", "_", "values", "(", "by", "='", "Distance", "')", "\n", "\n", "    ", "#", " Ext", "ract", " the", " top", " '", "k", "'", " nearest", " neighbors", "\n", "    ", "top", "_", "k", "_", "ne", "ighbors", " =", " sorted", "_", "data", ".", "il", "oc", "[:", "k", "][", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "\n", "    ", "return", " top", "_", "k", "_", "ne", "ighbors", "\n", "\n", "if"], "logprobs": [-1.1992313861846924, -2.526092767715454, -0.09537012875080109, -1.2568714618682861, -0.32217299938201904, -0.6303411722183228, -0.1282901167869568, -0.016159629449248314, -0.1579187661409378, -0.23915289342403412, -0.02509293518960476, -0.0002611534437164664, -0.02710224688053131, -0.00036614391137845814, -0.01570863276720047, -0.05101583153009415, -0.006638852413743734, -0.005725650116801262, -0.044917408376932144, -0.00042965717148035765, -0.0476999506354332, -0.003095123451203108, -0.004871167708188295, -0.003654469968751073, -0.010011458769440651, -0.0017675028648227453, -2.4437606043647975e-05, -0.03741646930575371, -0.0350765697658062, -1.0904767513275146, -0.0009023646707646549, -0.00018892886873800308, -0.017482349649071693, -0.0006926044588908553, -0.005815965123474598, -0.008965120650827885, -0.0013690156629309058, -0.0005485698929987848, -0.00036161558819003403, -0.2144685983657837, -0.0035409152042120695, -0.00027414379292167723, -0.0019315887475386262, -0.11800172179937363, -0.0024595982395112514, -0.19918735325336456, -4.202477931976318, -0.023401737213134766, -0.23409751057624817, -0.0014498446835204959, -0.5793486833572388, -0.31957998871803284, -0.002186171943321824, -0.0020568659529089928, -0.001986198825761676, -0.00019012074335478246, -0.006504909601062536, -0.7489792704582214, -0.00020561488054227084, -2.481235980987549, -0.17745287716388702, -0.10546377301216125, -0.0008195855189114809, -0.05469869449734688, -0.7252957820892334, -0.20985768735408783, -0.2854856550693512, -0.34692755341529846, -2.734638214111328, -0.13700532913208008, -0.7018427848815918, -0.7351154088973999, -0.021868404000997543, -0.45556309819221497, -0.0011635207338258624, -1.88518226146698, -0.17767387628555298, -0.8936436176300049, -0.006307693663984537, -0.0005859803641214967, -0.14820270240306854, -1.6212332411669195e-05, -0.13567912578582764, -0.7359421849250793, -0.342553049325943, -1.0967194612021558e-05, -0.8861237168312073, -0.05446876212954521, -0.3428257703781128, -0.029344869777560234, -0.028917616233229637, -0.00010322991875000298, -0.0015495923580601811, -0.039873018860816956, -0.005080290138721466, -0.0036880825646221638, -0.0020525832660496235, -0.004119363613426685, -0.008691576309502125, -0.08829860389232635, -7.510157047363464e-06, -0.00012885693286079913, -0.0016501632053405046, -0.0040059806779026985, -0.0007956438348628581, -0.0006799769471399486, -1.5258672647178173e-05, -9.858122211880982e-05, -0.0017727388767525554, -0.0004968600696884096, -3.135155202471651e-05, -0.0006039702566340566, -0.0008580578723922372, -0.06174248829483986, -0.07172148674726486, -0.0006874820101074874, -0.005679778754711151, -0.1279522180557251, -0.061213817447423935, -0.0978391170501709, -0.8965964913368225, -0.1592026948928833, -0.9270035624504089, -0.009336145594716072, -0.0004820853646378964, -0.3839072287082672, -0.0002627027570270002, -0.7875515222549438, -0.00010430268594063818, -0.00143722677603364, -0.004846254829317331, -0.0005245024804025888, -0.002360417041927576, -0.003197559155523777, -0.014337382279336452, -8.344646857949556e-07, -2.0265558760002023e-06, -0.7462126612663269, -0.0012267453130334616, -0.13378800451755524, -0.00019858295854646713, -0.6258608102798462, -0.02136046439409256, -0.01639818586409092, -0.00021228920377325267, -0.011738513596355915, -1.669395089149475, -0.002573632635176182, -0.04168332368135452, -2.507415294647217, -0.3266941010951996, -0.0009585791267454624, -0.0005385617259889841, -0.20943216979503632, -0.005980573128908873, -0.176431342959404, -0.0002157455455744639, -2.81667423248291, -0.0061132824048399925, -0.022867662832140923, -0.7378578186035156, -0.1287217140197754, -0.06697797030210495, -0.0008746135863475502, -0.006320131942629814, -7.390948667307384e-06, -4.768370445162873e-07, -0.3629358410835266, -2.428537130355835, -3.576278118089249e-07, -0.026420850306749344, -0.002100168028846383, -0.6409482359886169, -0.001341753639280796, -0.0019890540279448032, -3.9934315282152966e-05, -0.00014149141497910023, -4.6132929128361866e-05, -0.0028490927070379257, -4.792098479811102e-05, -5.960462772236497e-07, -0.0005240259342826903, -0.00015352977789007127, -0.24228912591934204, -0.09180418401956558, -0.00982650090008974, -0.00020704510097857565, -5.960462772236497e-07, -0.00020454221521504223, -0.0028662097174674273, -0.01818426139652729, -0.00035398892941884696, -0.3889583647251129, -0.0035681172739714384, -2.50339189733495e-06, -2.145764938177308e-06, -5.483612312673358e-06, -2.622600959512056e-06, -4.768370445162873e-07, -0.7116563320159912, -0.012937065213918686, -1.2809863090515137], "finish_reason": "stop"}], "metrics": {"energy": 843.4029814472199, "energy_per_token": 4.175262284392177, "time": 19.192444, "time_per_token": 0.09501209900990099}}
{"outputs": [{"text": "# Check if k is a non-negative integer\n    if k < 0 or not isinstance(k, int):\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Calculate distance between all points in data and target point\n    data['Distance'] = np.sqrt(\n        (data['Latitude'] - target[0])**2 + (data['Longitude'] - target[1])**2)\n    # Sort data by distance and return k nearest neighbors\n    result = data.sort_values('Distance').head(k)[['Latitude', 'Longitude']].values.tolist()\n    return result", "tokens": ["#", " Check", " if", " k", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " k", " <", " ", "0", " or", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " distance", " between", " all", " points", " in", " data", " and", " target", " point", "\n", "    ", "data", "['", "Distance", "']", " =", " np", ".", "sqrt", "(", "\n", "        ", "(", "data", "['", "Lat", "itude", "']", " -", " target", "[", "0", "])", "**", "2", " +", " (", "data", "['", "Long", "itude", "']", " -", " target", "[", "1", "])", "**", "2", ")", "\n", "    ", "#", " Sort", " data", " by", " distance", " and", " return", " k", " nearest", " neighbors", "\n", "    ", "result", " =", " data", ".", "sort", "_", "values", "('", "Distance", "')", ".", "head", "(", "k", ")[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -0.7300890684127808, -0.5573834776878357, -0.0050642783753573895, -0.17754071950912476, -0.3324221670627594, -0.004981843288987875, -0.000910225382540375, -0.0032706360798329115, -0.14314009249210358, -0.002222807612270117, -0.02389932982623577, -1.9508109092712402, -0.034311436116695404, -0.00047922570956870914, -0.003361291717737913, -0.0757988914847374, -0.044794198125600815, -0.0370020717382431, -7.73638384998776e-05, -0.0006372089846991003, -0.0004625442670658231, -0.005519626196473837, -0.00369473360478878, -0.0017589349299669266, -0.0037572046276181936, -0.010479423217475414, -0.0009210634743794799, -2.145764938177308e-06, -0.05213656648993492, -0.020553112030029297, -0.2429061383008957, -0.021600117906928062, -0.0005367745761759579, -0.006332451477646828, -0.0035259476862847805, -0.0018245016690343618, -9.369411418447271e-05, -0.000567275274079293, -0.5375168323516846, -0.00030560590676032007, -0.0021146810613572598, -0.09834510087966919, -0.0028234163764864206, -0.1383654773235321, -1.2350521087646484, -1.5193670988082886, -0.42283061146736145, -3.3406624794006348, -0.48366472125053406, -0.7187364101409912, -0.6611101627349854, -0.027917664498090744, -0.3115522563457489, -1.0026767253875732, -0.1291099637746811, -0.0025232164189219475, -1.2563694715499878, -0.3279617726802826, -1.431516170501709, -0.0064295814372599125, -0.0009355935617350042, -0.2511005699634552, -2.0265373677830212e-05, -0.10247378051280975, -1.446195363998413, -1.4800525903701782, -0.04587216302752495, -0.23022311925888062, -0.08046817779541016, -0.0257636196911335, -0.03166447579860687, -0.0003575639275368303, -0.0006254147156141698, -0.03934778645634651, -0.008812464773654938, -0.004148805979639292, -0.0015549485106021166, -0.0008122005965560675, -0.6374272704124451, -0.0005368936690501869, -0.040633682161569595, -0.3740265369415283, -0.001032177242450416, -0.0003300360403954983, -0.0006314906058833003, -2.6940935640595853e-05, -2.610649426060263e-05, -0.002701207296922803, -0.0005197366117499769, -4.124556289752945e-05, -0.00039200251922011375, -8.916457591112703e-05, -0.004337189719080925, -0.00012838016846217215, -0.32739242911338806, -0.055269621312618256, -2.8848226070404053, -0.3504718840122223, -0.22289632260799408, -0.630354642868042, -0.252534955739975, -0.15032519400119781, -1.0634477138519287, -2.103389263153076, -2.7632455825805664, -0.1020616963505745, -0.01823190413415432, -0.09753476828336716, -0.014259234070777893, -3.091033935546875, -0.033526234328746796, -0.11648275703191757, -0.008494200184941292, -0.2081354856491089, -9.179073458653875e-06, -7.986990567587782e-06, -0.3959025740623474, -0.00011014331539627165, -0.03249822556972504, -0.11580591648817062, -0.36114436388015747, -0.000439428084064275, -0.010044385679066181, -0.4265621304512024, -0.024951327592134476, -0.0011276798322796822, -5.829164365422912e-05, -0.00034767304896377027, -0.00010585224663373083, -0.034297727048397064, -0.00010644822759786621, -1.7881377516459906e-06, -0.0015806573210284114, -0.0036680102348327637, -0.1758567839860916, -0.1322844922542572, -0.021356264129281044, -0.00048673225683160126, -2.861018856492592e-06, -0.0014491304755210876, -0.004409115295857191, -0.686890184879303, -0.35789087414741516, -0.01583794690668583, -0.3787018656730652, -0.014406359754502773, -0.5710076689720154], "finish_reason": "stop"}], "metrics": {"energy": 623.9450654335022, "energy_per_token": 4.187550774721491, "time": 13.388236, "time_per_token": 0.08985393288590604}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    if k == 0:\n        return []\n\n    target = np.array(target)\n\n    distance = np.sqrt(np.sum((data - target)**2, axis=1))\n    sorted_indices = np.argsort(distance)\n    nearest_neighbors = data.iloc[sorted_indices[:k]]\n    return nearest_neighbors.values.tolist()", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " k", " ==", " ", "0", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "target", " =", " np", ".", "array", "(", "target", ")", "\n", "\n", "    ", "distance", " =", " np", ".", "sqrt", "(", "np", ".", "sum", "((", "data", " -", " target", ")**", "2", ",", " axis", "=", "1", "))", "\n", "    ", "s", "orted", "_", "indices", " =", " np", ".", "args", "ort", "(", "distance", ")", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", " =", " data", ".", "il", "oc", "[", "s", "orted", "_", "indices", "[:", "k", "]]", "\n", "    ", "return", " nearest", "_", "ne", "ighbors", ".", "values", ".", "tol", "ist", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -1.1572272777557373, -0.005786098074167967, -0.0003947432560380548, -0.0022257810924202204, -0.21432805061340332, -0.0028139064088463783, -2.1483635902404785, -1.1425715684890747, -0.0570511668920517, -0.001258891774341464, -0.0007899263291619718, -0.012465540319681168, -0.012350980192422867, -0.003186864545568824, -0.018541935831308365, -0.019806815311312675, -0.014851131476461887, -0.05402783304452896, -0.0020272433757781982, -3.022773265838623, -1.5161691904067993, -0.21606719493865967, -1.3828182090946939e-05, -0.25474512577056885, -0.02886410988867283, -0.0023292573168873787, -0.025353895500302315, -0.07061605900526047, -1.3006863594055176, -0.002372904447838664, -3.5923638343811035, -0.2678903341293335, -0.561949610710144, -1.311301275563892e-06, -1.17664635181427, -0.09326823055744171, -0.09174295514822006, -1.0251946150674485e-05, -0.051540181040763855, -0.20937687158584595, -0.12656226754188538, -0.6286877393722534, -0.021721089258790016, -0.6986051797866821, -0.0011226787464693189, -0.008768152445554733, -0.0047844452783465385, -0.028594566509127617, -0.00647245766595006, -0.003796157892793417, -0.07102108746767044, -0.6133396029472351, -0.9421698451042175, -0.001178642618469894, -0.009310989640653133, -0.4600040018558502, -0.0011448265286162496, -0.0315435491502285, -5.006777428206988e-06, -0.013782452791929245, -1.1920928244535389e-07, -0.00041261743172071874, -0.0011967408936470747, -0.012058809399604797, -0.1372089385986328, -0.6016120910644531, -0.9067041873931885, -0.13703079521656036, -0.0900629535317421, -0.379337877035141, -0.004322590306401253, -0.01749640703201294, -0.3306942582130432, -0.2751392722129822, -0.1006023958325386, -1.6689286894688848e-06, -0.00035065223346464336, -0.0020723312627524137, -1.0728830375228426e-06, -4.6491513785440475e-06, -1.311301275563892e-06, -0.3690730333328247, -0.0071473391726613045, -0.036580607295036316, -0.6574884653091431, -1.1881731748580933, -0.37787121534347534, -0.10150427371263504, -9.179073458653875e-06, -4.410734163684538e-06, -3.933898824470816e-06, -0.17876224219799042, -0.06174696981906891, -0.009885049425065517, -0.0036510254722088575, -4.768370445162873e-07, -0.0012962757609784603, -1.2216405868530273, -4.172316494077677e-06, -1.5497195136049413e-06, -2.264974000354414e-06, -3.3378546504536644e-06, -0.09771911799907684], "finish_reason": "stop"}], "metrics": {"energy": 536.2487959537505, "energy_per_token": 4.062490878437504, "time": 11.937055, "time_per_token": 0.09043223484848485}}
{"outputs": [{"text": "try:\n        radius_earth = 6371  # radius of earth is 6371 km\n\n        if k < 0:\n            raise ValueError(\"The value of k must be non-negative.\")\n        elif k % 1 != 0:\n            raise ValueError(\"The value of k must be a non-negative integer.\")\n\n        if isinstance(data, pd.DataFrame):\n            latitudes = np.deg2rad(data['Latitude'])\n            longitudes = np.deg2rad(data['Longitude'])\n\n            if len(target) == 2:\n                target_latitude = np.deg2rad(target[0])\n                target_longitude = np.deg2rad(target[1])\n                distances = np.array([math.acos(np.cos(target_latitude) * np.cos(target_longitude) * np.cos(\n                    latitudes) * np.cos(longitudes) + np.cos(target_latitude) * np.sin(latitudes) * np.cos(\n                    target", "tokens": ["try", ":", "\n", "        ", "radius", "_", "earth", " =", " ", "6", "3", "7", "1", "  ", "#", " radius", " of", " earth", " is", " ", "6", "3", "7", "1", " km", "\n", "\n", "        ", "if", " k", " <", " ", "0", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " value", " of", " k", " must", " be", " non", "-", "negative", ".", "\"", ")", "\n", "        ", "elif", " k", " %", " ", "1", " ", "!", "=", " ", "0", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " value", " of", " k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "        ", "if", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "            ", "lat", "itudes", " =", " np", ".", "deg", "2", "rad", "(", "data", "['", "Lat", "itude", "'])", "\n", "            ", "long", "itudes", " =", " np", ".", "deg", "2", "rad", "(", "data", "['", "Long", "itude", "'])", "\n", "\n", "            ", "if", " len", "(", "target", ")", " ==", " ", "2", ":", "\n", "                ", "target", "_", "lat", "itude", " =", " np", ".", "deg", "2", "rad", "(", "target", "[", "0", "])", "\n", "                ", "target", "_", "long", "itude", " =", " np", ".", "deg", "2", "rad", "(", "target", "[", "1", "])", "\n", "                ", "dist", "ances", " =", " np", ".", "array", "([", "math", ".", "ac", "os", "(", "np", ".", "cos", "(", "target", "_", "lat", "itude", ")", " *", " np", ".", "cos", "(", "target", "_", "long", "itude", ")", " *", " np", ".", "cos", "(", "\n", "                ", "    ", "lat", "itudes", ")", " *", " np", ".", "cos", "(", "long", "itudes", ")", " +", " np", ".", "cos", "(", "target", "_", "lat", "itude", ")", " *", " np", ".", "sin", "(", "lat", "itudes", ")", " *", " np", ".", "cos", "(", "\n", "                ", "    ", "target"], "logprobs": [-3.315391778945923, -0.0011025547282770276, -0.007548026740550995, -0.0706612691283226, -3.6499881744384766, -1.2297050952911377, -0.8623518347740173, -0.03213523328304291, -0.008532497100532055, -0.001604818389751017, -0.001732040662318468, -0.000402250443585217, -0.005626673810184002, -1.531481146812439, -0.0016484970692545176, -0.8038901686668396, -0.04558529704809189, -0.6572717428207397, -0.6338304877281189, -0.013125213794410229, -0.00015853578224778175, -0.0014897212386131287, -0.00029940891545265913, -0.0005159238935448229, -0.016056519001722336, -0.024379456415772438, -1.076785683631897, -0.0061305807903409, -0.9110133051872253, -1.2390753030776978, -0.1277921348810196, -0.0007543102256022394, -0.01686762645840645, -0.882313072681427, -0.06598982214927673, -0.003983302507549524, -0.026959877461194992, -0.007541874423623085, -2.7418097943154862e-06, -0.10918750613927841, -0.07133738696575165, -2.543393611907959, -1.2148250341415405, -0.09623277932405472, -0.8077753186225891, -0.4926467835903168, -0.021316705271601677, -1.1785286664962769, -0.005823787301778793, -0.002529280725866556, -0.3451429307460785, -0.012433163821697235, -0.0004905451205559075, -0.005137219093739986, -0.4640801250934601, -0.9332736134529114, -1.6710469722747803, -2.076014280319214, -0.005764052737504244, -0.014061307534575462, -0.044899288564920425, -3.576278118089249e-07, -1.4781842764932662e-05, -0.0020404488313943148, -3.540453326422721e-05, -0.01463276520371437, -0.019057506695389748, -0.0013869914691895247, -0.006128685083240271, -0.014190246351063251, -1.811964830267243e-05, -0.004539897665381432, -0.006252964027225971, -0.12550808489322662, -0.006956168916076422, -0.00339099345728755, -0.0032302364706993103, -0.005054790060967207, -0.0009514334378764033, -2.468886137008667, -0.04878012835979462, -0.0028543227817863226, -0.006585088092833757, -0.0039366381242871284, -0.024125806987285614, -0.002856937935575843, -0.00025149996508844197, -0.0009784678695723414, -0.3115484118461609, -0.0036118291318416595, -3.4998626708984375, -2.14302396774292, -0.0004204819560982287, -0.7487683296203613, -0.07271739840507507, -0.19997668266296387, -0.0001646144810365513, -0.022646727040410042, -0.6409122347831726, -0.02906433865427971, -0.02161843329668045, -1.941644549369812, -0.3549341857433319, -0.08220608532428741, -0.9709920287132263, -3.933898824470816e-06, -1.9149359464645386, -0.0010483728256076574, -1.0609570381348021e-05, -0.0008954567601904273, -0.0319073311984539, -0.20825648307800293, -0.0024861162528395653, -0.00047291061491705477, -0.10253672301769257, -0.05875299498438835, -0.0008792586741037667, -0.0011432785540819168, -0.002473511267453432, -0.0002464944263920188, -0.00018130090029444546, -2.3841855067985307e-07, -4.2914423829643056e-05, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.00012206286191940308, -0.0001714082609396428, -0.0003438596613705158, -0.00020001317898277193, -3.2066785934148356e-05, -9.476689592702314e-05, -0.0037333332002162933, -1.3269047737121582, -0.3919529318809509, -2.0032899379730225, -1.546055793762207, -0.000433112756581977, -0.2142065316438675, -0.0022699085529893637, -0.8073047399520874, -0.04573722556233406, -0.042624492198228836, -0.21648654341697693, -0.1240992620587349, -0.01907949522137642, -0.20477111637592316, -0.0243120938539505, -0.01105682086199522, -0.8630345463752747, -0.27176350355148315, -0.11183842271566391, -1.1920928244535389e-07, -0.013456592336297035, -2.861018856492592e-06, -5.483612312673358e-06, -0.006043375004082918, -0.02133222483098507, -0.0001941730733960867, -0.0011098184622824192, -0.001695148996077478, -0.01051587425172329, -0.00036042393185198307, -0.0002026352594839409, -1.5139465176616795e-05, -0.0001006075763143599, -0.0008441222598776221, -0.000243634101934731, -0.00015186110977083445, -4.768370445162873e-07, -0.00031728477915748954, -1.4305104514278355e-06, -1.311301275563892e-06, -4.0411134250462055e-05, -0.0002153879904653877, -2.7894584491150454e-05, -0.00018070495571009815, -4.494089080253616e-05, -0.0006276782951317728, -2.8094069957733154, -1.6635922193527222, -0.035416632890701294, -0.014754346571862698, -0.4471092224121094, -4.172316494077677e-06, -2.0793418884277344, -0.18074381351470947, -1.5120354890823364, -4.362964682513848e-05, -0.2891665995121002, -2.264974000354414e-06, -0.007902311161160469, -0.5262990593910217, -1.168244216387393e-05, -1.2921783924102783, -9.214453893946484e-05, -0.025738641619682312, -5.352353764465079e-05, -0.0019259967375546694, -4.768360213347478e-06, -0.11170037090778351, -0.024504976347088814, -0.02697473019361496, -7.152531907195225e-06, -0.00226205843500793, -9.619726915843785e-05, -1.4954992532730103, -5.364274329622276e-05, -0.0008248264202848077, -4.768360213347478e-06, -0.01734786108136177, -0.12086542695760727, -0.04624750465154648, -8.821448318485636e-06, -0.0003567297535482794, -8.05822346592322e-05, -3.21345853805542, -0.00011979816190432757, -0.10360894352197647, -0.2188931554555893, -0.021123673766851425, -0.025132810696959496, -0.14324866235256195, -0.0018488947534933686, -2.0265558760002023e-06, -0.00031275625224225223, -0.0002644904307089746, -0.05044326186180115, -6.115249561844394e-05, -0.003728345036506653, -0.005748526193201542, -0.06191730499267578, -4.410734163684538e-06, -1.4795935153961182, -6.0437283536884934e-05, -0.02202887460589409, -1.9073468138230965e-06, -8.5588610090781e-05, -2.3841855067985307e-07, -0.0008311392739415169, -0.0015718498034402728, -0.014016522094607353, -3.576278118089249e-07, -0.0003212174342479557, -6.16293036728166e-05, -0.2581096887588501, -4.23184028477408e-05, -0.0006349454633891582, -0.0014359173364937305, -0.021939430385828018, -9.775113539944869e-06, -1.5219677686691284, -4.8397800128441304e-05, -0.4167432487010956, -0.00010287232726113871, -0.05660765618085861, -0.0048237144947052], "finish_reason": "length"}], "metrics": {"energy": 1026.9113416728967, "energy_per_token": 4.011372428409753, "time": 23.36772, "time_per_token": 0.09128015625}}
{"outputs": [{"text": "# Check that k is a non-negative integer\n    if k < 0 or not isinstance(k, int):\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Convert coordinates to radians\n    data_rad = np.radians(data)\n    target_rad = np.radians(target)\n\n    # Calculate distance using Haversine formula\n    distances = 2 * np.arcsin(\n        np.sqrt(\n            np.sin(np.radians((data_rad['Latitude'] - target_rad[0])/2)) ** 2 +\n            np.cos(np.radians(target_rad[0])) *\n            np.cos(np.radians(data_rad['Latitude'])) *\n            np.sin(np.radians((data_rad['Longitude'] - target_rad[1])/2)) ** 2\n        )\n    )\n\n    # Sort distances in ascending order and get indices of the k closest neighbors\n    indices = np.argsort(distances)[:k]\n\n    # Extract the k closest neighbors and", "tokens": ["#", " Check", " that", " k", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " k", " <", " ", "0", " or", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " Convert", " coordinates", " to", " rad", "ians", "\n", "    ", "data", "_", "rad", " =", " np", ".", "rad", "ians", "(", "data", ")", "\n", "    ", "target", "_", "rad", " =", " np", ".", "rad", "ians", "(", "target", ")", "\n", "\n", "    ", "#", " Calculate", " distance", " using", " Ha", "vers", "ine", " formula", "\n", "    ", "dist", "ances", " =", " ", "2", " *", " np", ".", "arc", "sin", "(", "\n", "        ", "np", ".", "sqrt", "(", "\n", "            ", "np", ".", "sin", "(", "np", ".", "rad", "ians", "((", "data", "_", "rad", "['", "Lat", "itude", "']", " -", " target", "_", "rad", "[", "0", "]", ")/", "2", "))", " **", " ", "2", " +", "\n", "            ", "np", ".", "cos", "(", "np", ".", "rad", "ians", "(", "target", "_", "rad", "[", "0", "]))", " *", "\n", "            ", "np", ".", "cos", "(", "np", ".", "rad", "ians", "(", "data", "_", "rad", "['", "Lat", "itude", "']))", " *", "\n", "            ", "np", ".", "sin", "(", "np", ".", "rad", "ians", "((", "data", "_", "rad", "['", "Long", "itude", "']", " -", " target", "_", "rad", "[", "1", "]", ")/", "2", "))", " **", " ", "2", "\n", "        ", ")", "\n", "    ", ")", "\n", "\n", "    ", "#", " Sort", " distances", " in", " ascending", " order", " and", " get", " indices", " of", " the", " k", " closest", " neighbors", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "dist", "ances", ")", "[:", "k", "]", "\n", "\n", "    ", "#", " Ext", "ract", " the", " k", " closest", " neighbors", " and"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -1.8788470029830933, -0.5602970719337463, -0.0039507681503891945, -0.05514203757047653, -0.11118605732917786, -0.002105521271005273, -0.0013105622492730618, -0.0032797851599752903, -0.12392929196357727, -0.0041007245890796185, -0.02029825560748577, -2.0886433124542236, -0.0445876307785511, -0.00039426659350283444, -0.0038202654104679823, -0.10674544423818588, -0.056418612599372864, -0.03763462230563164, -8.05822346592322e-05, -0.0005912224878557026, -0.0003777029050979763, -0.007060695439577103, -0.0038296468555927277, -0.0021107555367052555, -0.003756254445761442, -0.010815453715622425, -0.0007257211836986244, -2.50339189733495e-06, -0.05537756532430649, -0.024909816682338715, -0.13265873491764069, -0.011856560595333576, -0.0005635818815790117, -0.005636512767523527, -0.003939012996852398, -0.0015038858400657773, -0.00016592556494288146, -0.0005467826849780977, -0.3728673756122589, -0.000254241080256179, -0.0019857229199260473, -0.11648381501436234, -0.002988874213770032, -0.13099530339241028, -1.7299734354019165, -3.1864986419677734, -0.2115423083305359, -0.10286170244216919, -0.0004240567213855684, -0.15296967327594757, -0.001405086019076407, -1.4532904624938965, -0.8356946110725403, -0.07268503308296204, -0.19879361987113953, -0.2756251394748688, -1.6689286894688848e-06, -0.07432374358177185, -0.0007413261337205768, -0.009001508355140686, -0.016991164535284042, -0.6191702485084534, -0.004588550888001919, -0.025489753112196922, -0.005386007949709892, -0.004692613612860441, -0.0004354958946350962, -0.0001892864383989945, -0.006720677483826876, -5.960462772236497e-07, -0.0005189026123844087, -9.536738616588991e-07, -0.008988749235868454, -0.028898855671286583, -0.0010525407269597054, -0.001806176733225584, -0.01580544374883175, -0.0009707267745397985, -0.023018887266516685, -0.1125161424279213, -1.3281116485595703, -1.649010181427002, -0.8711068630218506, -1.1920922133867862e-06, -0.0003343261778354645, -0.011184968054294586, -0.04335681349039078, -0.001069450518116355, -1.4615224599838257, -0.29864105582237244, -0.0192892923951149, -0.1601756513118744, -0.015688801184296608, -0.009701603092253208, -0.6202688813209534, -3.2543604902457446e-05, -0.007583993021398783, -6.341733387671411e-05, -0.08459602296352386, -0.9456210136413574, -0.0541345551609993, -0.06432878226041794, -1.5497195136049413e-06, -0.012988959439098835, -0.0014678190927952528, -0.22134502232074738, -0.006178919691592455, -0.023421766236424446, -4.291525328881107e-06, -0.027567850425839424, -1.3180210590362549, -0.5608774423599243, -9.417489309271332e-06, -0.7804692983627319, -0.0009427393670193851, -2.2428274154663086, -0.14728407561779022, -0.16190098226070404, -1.156323378381785e-05, -0.9162806272506714, -0.035583920776844025, -0.000940714729949832, -0.03088412806391716, -0.05912308394908905, -0.003120079869404435, -0.01986805535852909, -0.00012706902634818107, -0.17038896679878235, -0.004811138845980167, -2.3020942211151123, -0.026370925828814507, -0.008578828535974026, -0.01397608406841755, -1.4403088092803955, -0.02086312510073185, -5.876845170860179e-05, -0.33070307970046997, -0.17149071395397186, -0.0059400456957519054, -0.0027581527829170227, -2.861018856492592e-06, -0.0081370510160923, -0.0007981451926752925, -0.0804751068353653, -1.1920922133867862e-06, -0.0011650687083601952, -2.861018856492592e-06, -0.003560396144166589, -0.24605964124202728, -0.00590793089941144, -6.341733387671411e-05, -0.0005569098866544664, -0.005191654432564974, -0.002009160118177533, -0.005828764755278826, -0.33394843339920044, -0.0024272524751722813, -0.00019798702851403505, -2.264974000354414e-06, -0.0007381098694168031, -0.0003771070914808661, -0.0040006376802921295, -4.768370445162873e-07, -0.0006759266252629459, -1.168244216387393e-05, -0.0005893162451684475, -0.005697558633983135, -0.0010484919184818864, -4.172316494077677e-06, -0.0006111184484325349, -0.0015625660307705402, -2.264974000354414e-06, -0.002767187776044011, -0.005290199536830187, -0.003767893183976412, -0.0009576263837516308, -0.0021251493599265814, -4.529942543740617e-06, -0.00016056202002801, -0.005045182537287474, -0.0011592342052608728, -1.6689286894688848e-06, -0.00017689094238448888, -1.07287787614041e-05, -0.004563037771731615, -0.0007190502947196364, -0.0014750801492482424, -1.3351351299206726e-05, -0.0007082099909894168, -0.0005385617259889841, -4.0649541915627196e-05, -0.00013350549852475524, -0.00978624727576971, -0.0006295844214037061, -0.0003579214389901608, -3.6954811548639555e-06, -0.00010108436981681734, -0.001026103738695383, -0.044415004551410675, -0.0005581013392657042, -0.0007197650265879929, -0.00415462302044034, -0.02144821174442768, -0.009396021254360676, -5.125986263010418e-06, -0.06788784265518188, -0.10351037979125977, -0.25174498558044434, -0.0013316344702616334, -0.003969647455960512, -0.00036137725692242384, -0.020914727821946144, -0.06455545127391815, -0.0014122284483164549, -0.02859572507441044, -0.5313865542411804, -0.3523080348968506, -0.8785250782966614, -0.0053684595040977, -0.0004602803383022547, -0.8390014171600342, -0.48105549812316895, -1.5800180435180664, -0.05566005781292915, -0.7192193269729614, -0.6277849674224854, -1.2405712604522705, -0.5187233686447144, -0.011220568791031837, -0.000646501372102648, -1.4131865501403809, -0.01583865098655224, -0.18061783909797668, -2.3841855067985307e-07, -0.04047548398375511, -1.1920928244535389e-07, -0.0006407829932868481, -0.0011205353075638413, -6.9141146923357155e-06, -0.04604339972138405, -0.16334010660648346, -0.0016551617300137877, -0.0015373327769339085, -0.002485997276380658, -0.07261685281991959, -0.00052998325554654, -0.06823207437992096, -2.3129734992980957, -0.0024362902622669935, -0.7573369145393372, -0.7161688804626465, -0.0752921923995018, -0.04470118135213852, -1.6441868543624878], "finish_reason": "length"}], "metrics": {"energy": 1043.597430643082, "energy_per_token": 4.076552463449539, "time": 23.366884, "time_per_token": 0.091276890625}}
{"outputs": [{"text": "# check if k is a non-negative integer\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    # convert latitude and longitude to radians\n    target_latitude, target_longitude = math.radians(target[0]), math.radians(target[1])\n    data_latitude = np.radians(data['Latitude'])\n    data_longitude = np.radians(data['Longitude'])\n\n    # calculate the great-circle distance between target and every other point\n    d_latitude, d_longitude = data_latitude - target_latitude, data_longitude - target_longitude\n    a = np.sin(d_latitude/2)**2 + np.cos(target_latitude) * np.cos(data_latitude) * np.sin(d_longitude/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n    distances = 6371", "tokens": ["#", " check", " if", " k", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " convert", " latitude", " and", " long", "itude", " to", " rad", "ians", "\n", "    ", "target", "_", "lat", "itude", ",", " target", "_", "long", "itude", " =", " math", ".", "rad", "ians", "(", "target", "[", "0", "])", ",", " math", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "    ", "data", "_", "lat", "itude", " =", " np", ".", "rad", "ians", "(", "data", "['", "Lat", "itude", "'])", "\n", "    ", "data", "_", "long", "itude", " =", " np", ".", "rad", "ians", "(", "data", "['", "Long", "itude", "'])", "\n", "\n", "    ", "#", " calculate", " the", " great", "-", "circle", " distance", " between", " target", " and", " every", " other", " point", "\n", "    ", "d", "_", "lat", "itude", ",", " d", "_", "long", "itude", " =", " data", "_", "lat", "itude", " -", " target", "_", "lat", "itude", ",", " data", "_", "long", "itude", " -", " target", "_", "long", "itude", "\n", "    ", "a", " =", " np", ".", "sin", "(", "d", "_", "lat", "itude", "/", "2", ")**", "2", " +", " np", ".", "cos", "(", "target", "_", "lat", "itude", ")", " *", " np", ".", "cos", "(", "data", "_", "lat", "itude", ")", " *", " np", ".", "sin", "(", "d", "_", "long", "itude", "/", "2", ")**", "2", "\n", "    ", "c", " =", " ", "2", " *", " np", ".", "ar", "ct", "an", "2", "(", "np", ".", "sqrt", "(", "a", ")", ",", " np", ".", "sqrt", "(", "1", " -", " a", "))", "\n", "    ", "dist", "ances", " =", " ", "6", "3", "7", "1"], "logprobs": [-1.1992313861846924, -2.0871431827545166, -1.3451762199401855, -0.32262858748435974, -0.01724698208272457, -0.36975958943367004, -0.4509522616863251, -0.017394136637449265, -0.001473889802582562, -0.006352707277983427, -0.09599737077951431, -0.003204688895493746, -0.030842632055282593, -0.18767651915550232, -0.02618502266705036, -0.00015424491721205413, -0.0005477358354255557, -0.0004886387032456696, -0.009599713608622551, -0.015348769724369049, -0.007282615639269352, -0.004739123396575451, -0.02741522528231144, -0.0003474347176961601, -0.01649891771376133, -0.002727124374359846, -0.003119604429230094, -0.00367668061517179, -0.008901792578399181, -0.001206504413858056, -3.099436753473128e-06, -0.07983969897031784, -0.03196136653423309, -0.23497429490089417, -0.01611235737800598, -0.0005297449533827603, -0.006086742039769888, -0.004933327902108431, -0.0017041935352608562, -0.0002338612830499187, -0.0008299481705762446, -1.2898820638656616, -0.004298020154237747, -0.00031096869497559965, -0.0016381428577005863, -0.13162536919116974, -0.0028463585767894983, -0.2263801395893097, -1.7123943567276, -1.1144698858261108, -0.05620023235678673, -0.0009709649602882564, -0.001077071763575077, -0.2644288241863251, -0.02599443681538105, -0.0013335392577573657, -0.09202862530946732, -0.0011749514378607273, -0.8048702478408813, -0.41172629594802856, -0.17529810965061188, -2.545914649963379, -0.6159651279449463, -0.0014187756460160017, -2.038458114839159e-05, -0.000812915270216763, -0.0013915151357650757, -0.0037285825237631798, -0.30311334133148193, -3.611976353568025e-05, -0.00013219437096267939, -1.6689160474925302e-05, -0.00031001531169749796, -0.030453601852059364, -0.0013328249333426356, -0.00403981888666749, -0.0007286992622539401, -0.0004138090298511088, -0.005278104450553656, -2.706014311115723e-05, -3.766942609217949e-05, -9.202533692587167e-05, -0.000105375460407231, -0.009119878523051739, -0.0001037067049765028, -0.00031394799589179456, -0.00010001159535022452, -0.0016307639889419079, -0.4983201026916504, -0.12671320140361786, -1.0967953205108643, -0.014751292765140533, -0.13142521679401398, -0.9788948893547058, -0.0968741923570633, -1.311301275563892e-06, -0.006183895748108625, -0.00014411364099942148, -0.0004676678800024092, -0.029326114803552628, -0.15419918298721313, -0.001364849042147398, -5.113947918289341e-05, -0.09696486592292786, -0.017411943525075912, -0.00039057256071828306, -0.00014530557382386178, -3.58813522325363e-05, -0.0002108589978888631, -0.0001012035645544529, -0.0008903353591449559, -0.00019429226813372225, -4.768370445162873e-07, -9.65590606938349e-06, -5.125868119648658e-05, -2.13382354559144e-05, -4.625213477993384e-05, -0.00028939827461726964, -9.953480184776708e-05, -2.7418097943154862e-06, -0.00013410145766101778, -0.002434387570247054, -0.021891379728913307, -0.0009376181988045573, -0.0171913243830204, -0.18573062121868134, -0.7259160876274109, -2.580385208129883, -0.5305042862892151, -0.0014385362155735493, -0.06418971717357635, -0.42595040798187256, -1.4689527750015259, -0.05501026287674904, -3.5777482986450195, -0.9790244102478027, -0.24420785903930664, -0.472765177488327, -0.0008972433279268444, -1.6055142879486084, -0.37823623418807983, -0.1487564742565155, -0.9840500354766846, -2.9250805377960205, -0.0010350352386012673, -0.0003564914222806692, -0.0006861716392450035, -0.0007020154735073447, -0.00274269818328321, -0.1401786506175995, -0.0003195490571670234, -0.00012218205665703863, 0.0, -0.006065532565116882, -0.00046135272714309394, -0.00020716428116429597, -4.768370445162873e-07, -2.3841855067985307e-07, -0.0008756855386309326, -0.0051564318127930164, -0.00016497205069754273, -4.529942543740617e-06, 0.0, -0.0004832768754567951, -0.00023445718397852033, -2.992108420585282e-05, -1.4305012882687151e-05, -7.867782187531702e-06, -0.004562444519251585, -0.03713440150022507, -0.20922940969467163, -0.014326218515634537, -0.05989058315753937, -4.768370445162873e-07, -0.007944414392113686, -0.0002719986077863723, -0.011881062760949135, -5.960462772236497e-07, -0.006346903275698423, -9.298280929215252e-06, -0.5757860541343689, -0.0006231511943042278, -0.15137292444705963, -0.00011824862303910777, -0.0015779199311509728, -0.0167800635099411, -3.576278118089249e-07, -0.0038174153305590153, -3.313963316031732e-05, -0.1574469357728958, -0.0001134808044298552, -0.0005347490659914911, -1.9073468138230965e-06, -0.04070853814482689, -0.0013298486592248082, -0.011449817568063736, -2.145764938177308e-06, -0.00156589865218848, -6.437094270950183e-05, -0.0024541281163692474, -0.00025519452174194157, -2.7894584491150454e-05, -2.3841855067985307e-07, -0.004418372642248869, -0.0006082591717131436, -0.0025572238955646753, -2.264974000354414e-06, -3.93382906622719e-05, -2.9205850296420977e-05, -9.512448741588742e-05, -2.264974000354414e-06, -1.823885577323381e-05, -2.264974000354414e-06, -0.0017308506648987532, -4.386805812828243e-05, -0.005698625463992357, -0.0023468590807169676, -0.004560546018183231, -0.013364612124860287, -0.13420504331588745, -0.002137520583346486, -0.019297126680612564, -0.00010013079008786008, -0.0015310243470594287, -0.06175851449370384, 0.0, -0.07229331880807877, -0.0008524598088115454, -1.311301275563892e-06, -0.00019178935326635838, -0.0003289635351393372, -0.0009276139317080379, -2.9802276912960224e-06, -0.0025720868725329638, -2.8729025871143676e-05, -0.0001357701694360003, -0.0002051381452474743, -0.0002885640424210578, -0.00044431351125240326, -1.1920928244535389e-07, -1.5735502529423684e-05, -0.00028761065914295614, -0.0007780147134326398, -0.5457481741905212, -0.0007539528887718916, -0.0002520958660170436, -0.008929912000894547, -0.06619703769683838, -1.2407889366149902, -0.06301268935203552, -0.017726914957165718, -0.28538796305656433, -0.000782183778937906, -0.0006572232232429087, -0.00018416139937471598, -0.004446856677532196], "finish_reason": "length"}], "metrics": {"energy": 1037.016438531875, "energy_per_token": 4.050845463015137, "time": 23.383635, "time_per_token": 0.09134232421875}}
{"outputs": [{"text": "# Check if k is a non-negative integer\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    # Convert Latitude and Longitude to radians\n    lat_rad = math.radians(target[0])\n    lng_rad = math.radians(target[1])\n\n    # Calculate distances between target and each data point\n    distances = np.sqrt(np.square((math.radians(data['Latitude']) - lat_rad)) + np.square((math.radians(data['Longitude']) - lng_rad)))\n\n    # Find the indices of the k nearest neighbors\n    nearest_indices = np.argsort(distances)[:k]\n\n    # Extract the coordinates of the k nearest neighbors\n    nearest_data = data.iloc[nearest_indices]\n\n    # Convert back to degrees\n    nearest_data = nearest_data.apply(lambda x: [math.degrees(x[0]), math.degrees(x[1])], axis=1)\n\n    # Return", "tokens": ["#", " Check", " if", " k", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " Lat", "itude", " and", " Long", "itude", " to", " rad", "ians", "\n", "    ", "lat", "_", "rad", " =", " math", ".", "rad", "ians", "(", "target", "[", "0", "])", "\n", "    ", "l", "ng", "_", "rad", " =", " math", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "\n", "    ", "#", " Calculate", " distances", " between", " target", " and", " each", " data", " point", "\n", "    ", "dist", "ances", " =", " np", ".", "sqrt", "(", "np", ".", "square", "((", "math", ".", "rad", "ians", "(", "data", "['", "Lat", "itude", "'])", " -", " lat", "_", "rad", "))", " +", " np", ".", "square", "((", "math", ".", "rad", "ians", "(", "data", "['", "Long", "itude", "'])", " -", " l", "ng", "_", "rad", ")))", "\n", "\n", "    ", "#", " Find", " the", " indices", " of", " the", " k", " nearest", " neighbors", "\n", "    ", "ne", "arest", "_", "indices", " =", " np", ".", "args", "ort", "(", "dist", "ances", ")", "[:", "k", "]", "\n", "\n", "    ", "#", " Ext", "ract", " the", " coordinates", " of", " the", " k", " nearest", " neighbors", "\n", "    ", "ne", "arest", "_", "data", " =", " data", ".", "il", "oc", "[", "ne", "arest", "_", "indices", "]", "\n", "\n", "    ", "#", " Convert", " back", " to", " degrees", "\n", "    ", "ne", "arest", "_", "data", " =", " nearest", "_", "data", ".", "apply", "(", "lambda", " x", ":", " [", "math", ".", "deg", "rees", "(", "x", "[", "0", "])", ",", " math", ".", "deg", "rees", "(", "x", "[", "1", "]", ")]", ",", " axis", "=", "1", ")", "\n", "\n", "    ", "#", " Return"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -0.7300890684127808, -0.5573834776878357, -0.0050642783753573895, -0.17754071950912476, -0.3324221670627594, -0.004981843288987875, -0.000910225382540375, -0.0032706360798329115, -0.14314009249210358, -0.002222807612270117, -0.02389932982623577, -1.9508109092712402, -0.034311436116695404, -0.00047922570956870914, -0.003361291717737913, -2.654656410217285, -0.0027240333147346973, -0.003418080974370241, -0.007487685419619083, -0.001347944256849587, -4.768360213347478e-06, -0.08637675642967224, -0.017732301726937294, -0.14311529695987701, -0.05375843495130539, -0.004775072447955608, -0.07592087984085083, -0.01166369579732418, -0.0026741004548966885, -0.000458254711702466, -0.0036707420367747545, -1.1585921049118042, -0.019642014056444168, -0.00043108707177452743, -0.0010121704544872046, -1.0965266227722168, -0.0013298486592248082, -0.25262847542762756, -1.5276058912277222, -2.217759132385254, -0.06721998006105423, -0.16394616663455963, -0.005512512754648924, -0.000902126485016197, -0.39697539806365967, -0.11198753863573074, -0.001527215470559895, -0.1836114078760147, -0.0013784202747046947, -1.8668726682662964, -1.3737083673477173, -0.7699465155601501, -0.3282870352268219, -2.1011037826538086, -1.4781842764932662e-05, -0.0008893824997358024, -2.169585604860913e-05, -0.0006637753685936332, -0.08486819267272949, -0.002315223217010498, -0.003957892768085003, -0.0008624648326076567, -0.010245822370052338, -0.0035590894985944033, -2.2891273498535156, -0.0016470688860863447, -0.0003026265767402947, -0.0002172949316445738, -0.00022396916756406426, -0.00040713604539632797, -2.50339189733495e-06, -3.790783375734463e-05, -6.079655122448457e-06, -3.4927710657939315e-05, -2.1219027985353023e-05, -3.2305197237292305e-05, -0.0006536492728628218, -3.802703940891661e-05, -0.0003680505615193397, -0.07035142928361893, -0.0008874768391251564, -0.021130092442035675, -0.49443182349205017, -2.1075186729431152, -1.4190901517868042, -0.3629845082759857, -0.05840548500418663, -1.0552136898040771, -0.9590175151824951, -0.008508975617587566, -0.1930515617132187, -0.0011088658357039094, -0.8319123387336731, -0.04797598347067833, -0.005063092336058617, -0.5539052486419678, -4.851700214203447e-05, -1.1796694993972778, -0.16707028448581696, -0.47170183062553406, -8.940656698541716e-06, -0.6237754225730896, -2.83182430267334, -1.8105344772338867, -1.2636104656849056e-05, -0.009254416450858116, -7.033323527139146e-06, -0.0014661526074633002, -0.02902218885719776, -0.12298354506492615, -0.07498234510421753, -3.0874729418428615e-05, -0.13236427307128906, -0.004279621876776218, -0.004318792372941971, -4.529942543740617e-06, -1.2755313036905136e-05, -0.05609700083732605, -0.06386544555425644, -0.3000873029232025, -4.7801782784517854e-05, -0.00023147765023168176, -0.03470311686396599, -0.0036997220013290644, -1.9311717551317997e-05, -0.0001445904199499637, -1.0728830375228426e-06, -0.0003743662964552641, -0.0032965384889394045, -0.0015869655180722475, -0.0004301338049117476, -2.861018856492592e-06, -0.014318580739200115, -0.0009613183210603893, -0.0022757365368306637, -3.576272320060525e-06, -2.3841830625315197e-06, -9.298280929215252e-06, -0.005323875695466995, -0.04494476318359375, -0.09542474150657654, -0.0009708458674140275, -0.0057653565891087055, -1.8849155902862549, -0.15727683901786804, -0.9001728892326355, -0.017888404428958893, -0.09594061970710754, -0.291962593793869, -0.32852333784103394, -0.0037709809839725494, -0.07939010858535767, -0.000707971747033298, -0.9419007897377014, -0.0779637023806572, -0.05147111415863037, -0.09078226238489151, -0.0003228858404327184, -0.1956617385149002, -2.3841855067985307e-07, -0.7385441064834595, -1.1920928244535389e-07, -0.0010259846458211541, -0.0005931286723352969, -1.0728830375228426e-06, -0.0890575647354126, -0.006393217947334051, -0.003055429784581065, -0.0017986800521612167, -0.00429172907024622, -0.015393730252981186, -0.00035089056473225355, -0.014376983046531677, -1.531777024269104, -0.0027482856530696154, -0.13735732436180115, -1.266606092453003, -0.02345891296863556, -0.008550225757062435, -0.28727906942367554, -0.0018980359891429543, -0.0003518439189065248, -0.09548640251159668, -0.0006138585740700364, -0.14680492877960205, -0.052102506160736084, -0.10658472776412964, -3.2781498432159424, -0.032018519937992096, -0.13247255980968475, -0.06487837433815002, -0.015374008566141129, 0.0, -0.000169382052263245, -0.0017285895301029086, -2.3841855067985307e-07, -9.536738616588991e-07, -4.768370445162873e-07, -0.9095240831375122, -0.16537638008594513, -0.1543811410665512, -0.000535821367520839, -0.46337905526161194, -0.8901721239089966, -2.525414228439331, -0.026284074410796165, -0.9106971621513367, -0.8777555823326111, -0.0007535954937338829, -0.08916126936674118, -0.00031454383861273527, -0.0010630200849846005, -0.12460897117853165, -1.2509782314300537, -0.3078080117702484, -1.5497195136049413e-06, -1.1324817933200393e-05, -0.22792109847068787, -0.05656754970550537, -0.34654945135116577, -0.007432428188621998, -0.2051643431186676, -0.003389805555343628, -0.444244384765625, -0.0830913558602333, -4.768360213347478e-06, -8.225102646974847e-05, -6.6756979322235566e-06, -0.00017569905321579427, -0.002683255122974515, -0.6129627227783203, -0.01447521522641182, -0.00025650550378486514, -0.0004861365014221519, -0.004128861241042614, -6.079655122448457e-06, -2.098061486321967e-05, -3.576272320060525e-06, -9.119095193454996e-05, -8.916457591112703e-05, -0.00017593742813915014, -0.0004203628050163388, -0.00037746457383036613, -2.1576648578047752e-05, -0.026233911514282227, -0.0017495339270681143, -0.006109135691076517, -0.001004667836241424, -0.009355750866234303, -0.10504433512687683, -0.042853277176618576, -0.00032360086333937943, -0.842132568359375, -0.545049786567688], "finish_reason": "length"}], "metrics": {"energy": 1127.8595999164581, "energy_per_token": 4.405701562173665, "time": 25.003597, "time_per_token": 0.09767030078125}}
{"outputs": [{"text": "if isinstance(k, int) and k >= 0:\n        if len(data) < 2:\n            raise ValueError(\"Dataset must have at least two rows to calculate distances.\")\n        if not isinstance(data, pd.DataFrame):\n            raise TypeError(\"Dataset must be a pandas DataFrame.\")\n        if len(data.columns) != 2:\n            raise ValueError(\"Dataset must have exactly two columns 'Latitude' and 'Longitude'.\")\n        if not isinstance(target, list) or len(target) != 2:\n            raise ValueError(\"Target must be a list of two values [Latitude, Longitude].\")\n        if not (isinstance(target[0], (int, float)) and isinstance(target[1], (int, float))):\n            raise ValueError(\"Values in target must be numeric.\")\n\n        def haversine_distance(lat1, lon1, lat2, lon2):\n            # Haversine formula for distance calculation\n            # radius of earth is 6371 km\n            lat1", "tokens": ["if", " isinstance", "(", "k", ",", " int", ")", " and", " k", " >=", " ", "0", ":", "\n", "        ", "if", " len", "(", "data", ")", " <", " ", "2", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Dataset", " must", " have", " at", " least", " two", " rows", " to", " calculate", " distances", ".", "\"", ")", "\n", "        ", "if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "            ", "raise", " Type", "Error", "(", "\"", "Dataset", " must", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "        ", "if", " len", "(", "data", ".", "columns", ")", " ", "!", "=", " ", "2", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Dataset", " must", " have", " exactly", " two", " columns", " '", "Lat", "itude", "'", " and", " '", "Long", "itude", "'", ".", "\"", ")", "\n", "        ", "if", " not", " isinstance", "(", "target", ",", " list", ")", " or", " len", "(", "target", ")", " ", "!", "=", " ", "2", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Target", " must", " be", " a", " list", " of", " two", " values", " [", "Lat", "itude", ",", " Long", "itude", "]", ".", "\"", ")", "\n", "        ", "if", " not", " (", "is", "instance", "(", "target", "[", "0", "]", ",", " (", "int", ",", " float", "))", " and", " isinstance", "(", "target", "[", "1", "]", ",", " (", "int", ",", " float", "))", "):", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Values", " in", " target", " must", " be", " numeric", ".", "\"", ")", "\n", "\n", "        ", "def", " ha", "vers", "ine", "_", "distance", "(", "lat", "1", ",", " lon", "1", ",", " lat", "2", ",", " lon", "2", "):", "\n", "            ", "#", " Ha", "vers", "ine", " formula", " for", " distance", " calculation", "\n", "            ", "#", " radius", " of", " earth", " is", " ", "6", "3", "7", "1", " km", "\n", "            ", "lat", "1"], "logprobs": [-0.7325347065925598, -3.323099136352539, -0.00022921319759916514, -0.016777601093053818, -0.0014935302315279841, -0.2629825472831726, -0.12110361456871033, -0.18501052260398865, -0.011858444660902023, -0.20732669532299042, -0.006002850364893675, -0.027399219572544098, -0.010333487764000893, -0.01706874929368496, -0.18241338431835175, -2.3127245903015137, -1.612486720085144, -0.0007084482349455357, -0.4412356913089752, -0.2553945779800415, -1.8968652486801147, -2.7822885513305664, -0.5324122309684753, -0.17107045650482178, -0.05125697702169418, -0.004583448171615601, -1.2314858436584473, -0.08883911371231079, -7.510157047363464e-06, -0.20376020669937134, -0.06969510018825531, -2.2998905181884766, -0.5075204372406006, -0.590770959854126, -0.1857036054134369, -0.004331017844378948, -0.4760674238204956, -2.1213088035583496, -2.581829071044922, -0.9375097751617432, -0.7336286306381226, -0.3903767764568329, -0.0035139499232172966, -0.0006873629172332585, -0.002719991374760866, -0.6288888454437256, -0.859110414981842, -2.0678768157958984, -0.9836154580116272, -0.0005409446312114596, -0.9421005845069885, -0.4147248864173889, -0.10522139817476273, -0.00021479207498487085, -0.019114229828119278, -0.1945653259754181, -0.004322115797549486, -0.0035622967407107353, -0.07030720263719559, -0.7987442016601562, -2.753696753643453e-05, -0.016076697036623955, -0.018960660323500633, -1.6963727474212646, -0.08677217364311218, -0.001737157697789371, -0.12562426924705505, -0.2392607182264328, -0.03833068162202835, -0.006217068061232567, -0.5078822374343872, -0.00601718807592988, -0.00020728347590193152, -0.0006652049487456679, -0.11764145642518997, -0.18312513828277588, -2.207632064819336, -0.0011798333143815398, -0.6612655520439148, -0.3606550395488739, -0.11056998372077942, -0.015239352360367775, -0.5265294909477234, -4.768370445162873e-07, -1.6689286894688848e-06, -0.03648187965154648, -0.010940802283585072, -0.4115535616874695, -0.007220246363431215, -0.0009921634336933494, -0.002530351048335433, -0.010642558336257935, -2.7418097943154862e-06, -0.002410008804872632, -0.011819333769381046, -0.062126483768224716, -0.026988888159394264, -0.02434525266289711, -0.28034642338752747, -0.03780004382133484, -0.0031604839023202658, -2.9371178150177, -0.0543033666908741, -0.0023689798545092344, -0.0016249321633949876, -0.03468020260334015, -0.0007783720502629876, -0.0004287039046175778, -0.00014244495832826942, -0.004158658906817436, -0.03246164321899414, -0.0014018717920407653, -0.0001559135998832062, -0.0010668307077139616, -0.11077926307916641, -0.15514139831066132, -0.6990755200386047, -1.751447081565857, -0.0005695389700122178, -0.04724931716918945, -0.022621670737862587, -0.20722845196723938, -0.37200161814689636, -0.07651074230670929, -0.02731292136013508, -8.022463589441031e-05, -0.000508417550008744, -0.0002108589978888631, -0.0065177008509635925, 0.0, -1.7881377516459906e-06, -0.009021946229040623, -0.0005986090400256217, -0.09880418330430984, -0.0012892514932900667, -0.0010905277449637651, -0.001984414178878069, -0.21559935808181763, -9.63164638960734e-05, -0.0017116909148171544, -0.009683540090918541, -0.026372088119387627, -0.29860931634902954, -0.007946661673486233, -0.03645486757159233, -0.03874234855175018, -0.6709413528442383, -0.22524885833263397, -0.7861706018447876, -0.6045463681221008, -0.04201566427946091, -0.002237794455140829, -0.00015555603022221476, -0.0033549948129802942, -8.22540732769994e-06, -0.04426264762878418, -0.002906505251303315, -0.0003946240758523345, -0.00020728347590193152, -0.0003393312799744308, -0.42903921008110046, -0.8794094324111938, -0.3649432957172394, -2.0448098182678223, -1.6037225723266602, -0.0012043612077832222, -6.437094270950183e-05, -0.05112140253186226, -0.010692920535802841, -0.0005067494930699468, -3.9457496313843876e-05, -0.00013696208770852536, -0.3998916745185852, -0.05084057152271271, -0.0003289635351393372, -0.002111945068463683, -0.021200120449066162, -0.01789730228483677, -0.04024489223957062, -2.729855441430118e-05, -0.0005004345439374447, -8.964136941358447e-05, -0.000837571220472455, -1.847726889536716e-05, -1.9907753085135482e-05, -0.001167092937976122, -0.0009607228566892445, -4.255681051290594e-05, -0.0005918181850574911, -0.016610657796263695, -0.0027982147876173258, -0.0009117737063206732, -0.0014075858052819967, -0.0034420788288116455, -0.5002572536468506, -9.179073458653875e-06, -0.0011784045491367579, -0.0065495590679347515, -1.8344717025756836, -0.06677170097827911, -0.4078754782676697, -0.5585252642631531, -0.0011951930355280638, -0.7842052578926086, -0.0741872787475586, -0.00168658047914505, -4.100715523236431e-05, -0.0004576589271891862, -0.9410908818244934, -0.016081858426332474, -3.2461462020874023, -1.1601511240005493, -0.0025232164189219475, -0.001663611619733274, -0.9181628823280334, -0.04416969418525696, -0.011181431822478771, -0.4225539267063141, -0.041332345455884933, -0.010329948738217354, -0.08987534046173096, -1.847726889536716e-05, -0.0012961566681042314, -0.0009273757459595799, -6.997340824455023e-05, -0.00013481661153491586, -0.00024327656137757003, -1.9073468138230965e-06, -0.04560750722885132, -0.006348324473947287, -0.008114229887723923, -1.9373805522918701, -1.8371648788452148, -1.1205610462639015e-05, -0.0002992897352669388, -0.6834262013435364, -1.0741291046142578, -0.8886755704879761, -0.1616847962141037, -0.4542710483074188, -0.007754461374133825, -1.7419085502624512, -3.1032779216766357, -0.06307133287191391, -0.2378080040216446, -0.13642273843288422, -0.011534078046679497, -0.0006742588011547923, -0.0031400443986058235, -0.0001436368766007945, -0.0015792291378602386, -0.033396076411008835, -0.010688084177672863, -0.053937364369630814, -1.8239445686340332, -0.03779752179980278], "finish_reason": "length"}], "metrics": {"energy": 1140.1884184608462, "energy_per_token": 4.45386100961268, "time": 26.115448, "time_per_token": 0.10201346875}}
{"outputs": [{"text": "# Check that 'k' is a non-negative integer\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    # Convert latitude and longitude to radians\n    data_rad = np.radians(data)\n    target_rad = np.radians(target)\n\n    # Calculate the Haversine distance\n    lat_distance = np.sin((data_rad[:, 0] - target_rad[0]) / 2)**2\n    lon_distance = np.sin((data_rad[:, 1] - target_rad[1]) / 2)**2\n    distance = 2 * 6371 * np.arcsin(np.sqrt(lat_distance +\n                                            np.cos(data_rad[:, 0]) * np.cos(target_rad[0]) * lon_distance))\n\n    # Sort the distances and get the indices of the nearest neighbors\n    indices = distance.argsort()[:k]\n\n    # Return the nearest neighbors\n    neighbors = data.iloc", "tokens": ["#", " Check", " that", " '", "k", "'", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Convert", " latitude", " and", " long", "itude", " to", " rad", "ians", "\n", "    ", "data", "_", "rad", " =", " np", ".", "rad", "ians", "(", "data", ")", "\n", "    ", "target", "_", "rad", " =", " np", ".", "rad", "ians", "(", "target", ")", "\n", "\n", "    ", "#", " Calculate", " the", " Ha", "vers", "ine", " distance", "\n", "    ", "lat", "_", "distance", " =", " np", ".", "sin", "((", "data", "_", "rad", "[:", ",", " ", "0", "]", " -", " target", "_", "rad", "[", "0", "])", " /", " ", "2", ")**", "2", "\n", "    ", "lon", "_", "distance", " =", " np", ".", "sin", "((", "data", "_", "rad", "[:", ",", " ", "1", "]", " -", " target", "_", "rad", "[", "1", "])", " /", " ", "2", ")**", "2", "\n", "    ", "distance", " =", " ", "2", " *", " ", "6", "3", "7", "1", " *", " np", ".", "arc", "sin", "(", "np", ".", "sqrt", "(", "lat", "_", "distance", " +", "\n", "                ", "                ", "            ", "np", ".", "cos", "(", "data", "_", "rad", "[:", ",", " ", "0", "])", " *", " np", ".", "cos", "(", "target", "_", "rad", "[", "0", "])", " *", " lon", "_", "distance", "))", "\n", "\n", "    ", "#", " Sort", " the", " distances", " and", " get", " the", " indices", " of", " the", " nearest", " neighbors", "\n", "    ", "indices", " =", " distance", ".", "args", "ort", "()", "[:", "k", "]", "\n", "\n", "    ", "#", " Return", " the", " nearest", " neighbors", "\n", "    ", "ne", "ighbors", " =", " data", ".", "il", "oc"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -1.8788470029830933, -1.0239543914794922, -0.00781821645796299, -0.0003773453936446458, -0.002715235808864236, -0.0734637975692749, -0.0661805272102356, -0.0015141224721446633, -0.0009067714563570917, -0.0026880106888711452, -0.16318963468074799, -0.0035197706893086433, -0.019733767956495285, -0.1671619564294815, -0.021655647084116936, -0.00011789103882620111, -0.0005212855176068842, -0.000270091783022508, -0.015181000344455242, -0.022960053756833076, -0.007286994252353907, -0.004208043217658997, -0.012152322567999363, -0.0002217047003796324, -0.011739573441445827, -0.001462581567466259, -0.002063527936115861, -0.0026903883554041386, -0.00843970850110054, -0.0009573881980031729, -3.6954811548639555e-06, -0.03829695284366608, -0.04248911514878273, -0.670117199420929, -0.011157618835568428, -0.00033885458833537996, -0.0034151107538491488, -0.003766824258491397, -0.0015411416534334421, -0.0001774868869688362, -0.0007334641413763165, -1.042215347290039, -0.005032965913414955, -0.0002746204845607281, -0.0008837846689857543, -0.09222551435232162, -0.0026796883903443813, -0.10994968563318253, -1.7518566846847534, -1.3958277702331543, -0.049967214465141296, -0.0008472190820612013, -0.0007375142886303365, -0.3637393116950989, -0.030293667688965797, -0.0005965837044641376, -0.16303449869155884, -0.001261273049749434, -1.9577598571777344, -1.5233012437820435, -0.04963989183306694, -0.23084904253482819, -0.4327892065048218, -1.9073468138230965e-06, -0.10556385666131973, -0.00029452278977259994, -0.007020685356110334, -0.013869103975594044, -0.9809154272079468, -0.005135796032845974, -0.027983972802758217, -0.00490533234551549, -0.005120140966027975, -0.00034624303225427866, -0.00019894051365554333, -0.005522352643311024, -3.576278118089249e-07, -0.0011829291470348835, -1.7881377516459906e-06, -0.01359313540160656, -0.02091250941157341, -0.0009458358981646597, -0.0017191881779581308, -0.018715811893343925, -0.0008849757141433656, -0.015368843451142311, -0.17670390009880066, -0.6137921214103699, -2.242558479309082, -3.099436753473128e-06, -0.0013458014000207186, -0.2598559558391571, -1.928020715713501, -0.0011051744222640991, -2.4315295219421387, -0.07151097804307938, -3.0624701976776123, -0.006377937737852335, -0.3969722092151642, -2.3841855067985307e-07, -0.08405596017837524, -0.06369287520647049, -0.046391021460294724, -0.000596107158344239, -4.768360213347478e-06, -1.0883839130401611, -0.00027783826226368546, -0.0667824074625969, -0.0025550834834575653, -0.019394291564822197, -0.00022682955022901297, -0.00041476229671388865, -0.002135379472747445, -0.00014602071314584464, -0.0004943578969687223, -0.0002834395272657275, -0.016306711360812187, -0.009824967011809349, -0.000387831823900342, -0.00020930961181875318, -1.8032822608947754, -0.0003641180810518563, -0.013477527536451817, -0.00021395778458099812, -0.7729871869087219, -3.862306402879767e-05, -0.0002240883477497846, -0.00012432756193447858, -0.0005700155161321163, -4.768370445162873e-07, -0.049757517874240875, -0.00025054652360267937, -0.0002079985715681687, -0.00012361239350866526, -2.622600959512056e-06, -2.169585604860913e-05, -8.380061626667157e-05, -0.00010966652916977182, -0.00016246906307060272, -0.0001012035645544529, -2.288792165927589e-05, -2.586808113846928e-05, -5.960446742392378e-06, -2.50339189733495e-06, -2.9444261599564925e-05, -0.00017915551143232733, -3.93382906622719e-05, -0.00034791138023138046, -0.00012432756193447858, -1.0847986231965479e-05, -0.0003003622987307608, -4.124556289752945e-05, -0.0012054328108206391, -0.04052699729800224, -0.3052898049354553, -0.009839014150202274, -0.2812570035457611, -0.00019965562387369573, -0.002392764901742339, -0.24780778586864471, -0.0063608805648982525, -0.0003875934926327318, -0.00024971229140646756, -0.0012267453130334616, -0.00854868907481432, -0.007546133827418089, -8.821448318485636e-06, -0.0003097769513260573, -6.079655122448457e-06, -0.0032222752925008535, -0.010384456254541874, -3.814689989667386e-06, -1.490105023549404e-05, -0.0006213641609065235, -0.02339533343911171, -1.311301275563892e-06, -4.6491513785440475e-06, -0.0006816447712481022, -1.8031617403030396, -0.05319105088710785, -0.06351076066493988, -0.5476682782173157, -0.0028701324481517076, -8.34461570775602e-06, -9.107174992095679e-05, -9.405170567333698e-05, -0.03394357115030289, -0.00030357998912222683, -2.074220174108632e-05, -9.154854342341423e-05, -4.7444173105759546e-05, -0.0024990777019411325, -0.002109446795657277, -0.00040904260822571814, -0.0028203255496919155, -0.06561969965696335, -7.152555099310121e-07, -1.1920922133867862e-06, -0.00015627116954419762, -0.0060482332482934, -0.0003912875254172832, -3.85038583772257e-05, -0.00021646064124070108, -0.003379588248208165, -1.4781842764932662e-05, -0.0018532973481342196, -0.03528476506471634, -8.344646857949556e-07, -3.3378546504536644e-06, -0.0018303323304280639, -0.005210984963923693, -0.022893061861395836, -0.0007699147681705654, -0.010840808041393757, -0.5205831527709961, -0.2884331941604614, -0.6181542277336121, -0.7091076374053955, -0.7679288983345032, -0.006606167647987604, -0.31485408544540405, -0.01485054474323988, -0.004903553053736687, -1.7952078580856323, -0.0312601663172245, -0.011918052099645138, -0.000568228424526751, -1.6389052867889404, -0.00810689851641655, -2.353487491607666, -0.00014780859055463225, -8.570780482841656e-05, -3.576278118089249e-07, -0.018541818484663963, -0.38453084230422974, -0.0007980260998010635, -0.0010406322544440627, -0.0030796739738434553, -0.06859444081783295, -0.00034517052699811757, -0.06875437498092651, -0.43135693669319153, -0.025503696873784065, -0.5127550959587097, -0.008253159001469612, -0.49298352003097534, -0.0011066034203395247, -2.7211639881134033, -0.8862649202346802, -0.022597312927246094, -0.3849818706512451, -0.02538236975669861, -0.08289408683776855, -7.152555099310121e-07], "finish_reason": "length"}], "metrics": {"energy": 1034.67023110199, "energy_per_token": 4.041680590242149, "time": 23.367691, "time_per_token": 0.09128004296875}}
{"outputs": [{"text": "try:\n        assert all(isinstance(coord, (int, float)) for coord in target), \"target values must be int or float\"\n        assert isinstance(k, int) and k >= 0, \"k must be a non-negative integer\"\n        assert all(isinstance(coord, (int, float)) for coord in target), \"target values must be int or float\"\n        assert all(isinstance(coord, (int, float)) for coord in target), \"target values must be int or float\"\n\n        # convert latitude and longitude to radians\n        target_lat, target_lon = np.radians(target[0]), np.radians(target[1])\n\n        # convert latitude and longitude to radians for each data point\n        data[\"LatitudeRad\"] = np.radians(data[\"Latitude\"])\n        data[\"LongitudeRad\"] = np.radians(data[\"Longitude\"])\n\n        # calculate the distances between the target and each data point\n        data[\"Distance\"] = np.sin((data[\"LatitudeRad\"] -", "tokens": ["try", ":", "\n", "        ", "assert", " all", "(", "is", "instance", "(", "coord", ",", " (", "int", ",", " float", "))", " for", " coord", " in", " target", ")", ",", " \"", "target", " values", " must", " be", " int", " or", " float", "\"", "\n", "        ", "assert", " isinstance", "(", "k", ",", " int", ")", " and", " k", " >=", " ", "0", ",", " \"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", "\n", "        ", "assert", " all", "(", "is", "instance", "(", "coord", ",", " (", "int", ",", " float", "))", " for", " coord", " in", " target", ")", ",", " \"", "target", " values", " must", " be", " int", " or", " float", "\"", "\n", "        ", "assert", " all", "(", "is", "instance", "(", "coord", ",", " (", "int", ",", " float", "))", " for", " coord", " in", " target", ")", ",", " \"", "target", " values", " must", " be", " int", " or", " float", "\"", "\n", "\n", "        ", "#", " convert", " latitude", " and", " long", "itude", " to", " rad", "ians", "\n", "        ", "target", "_", "lat", ",", " target", "_", "lon", " =", " np", ".", "rad", "ians", "(", "target", "[", "0", "])", ",", " np", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "\n", "        ", "#", " convert", " latitude", " and", " long", "itude", " to", " rad", "ians", " for", " each", " data", " point", "\n", "        ", "data", "[", "\"", "Lat", "itude", "Rad", "\"", "]", " =", " np", ".", "rad", "ians", "(", "data", "[", "\"", "Lat", "itude", "\"", "])", "\n", "        ", "data", "[", "\"", "Long", "itude", "Rad", "\"", "]", " =", " np", ".", "rad", "ians", "(", "data", "[", "\"", "Long", "itude", "\"", "])", "\n", "\n", "        ", "#", " calculate", " the", " distances", " between", " the", " target", " and", " each", " data", " point", "\n", "        ", "data", "[", "\"", "Distance", "\"", "]", " =", " np", ".", "sin", "((", "data", "[", "\"", "Lat", "itude", "Rad", "\"", "]", " -"], "logprobs": [-3.315391778945923, -0.0011025547282770276, -0.007548026740550995, -0.0706612691283226, -2.6226768493652344, -3.2073707580566406, -0.6331176161766052, -0.5569459795951843, -0.0007269124034792185, -0.0017228773795068264, -1.1245920658111572, -0.0029654596000909805, -0.23612408339977264, -0.0798581913113594, -0.0011454218765720725, -0.0033092519734054804, -0.008042688481509686, -0.03557023033499718, -0.002760055009275675, -0.0036137294955551624, -0.009577516466379166, -0.0066009568981826305, -1.1626778841018677, -0.44762715697288513, -2.265460729598999, -2.8704495429992676, -0.1958046555519104, -0.01249320711940527, -1.801862359046936, -0.08593358844518661, -0.02030935324728489, -0.0879344642162323, -0.011023690924048424, -0.06262074410915375, -0.04477139934897423, -1.0872727632522583, -0.00016246906307060272, -0.022538455203175545, -0.0008470999309793115, -0.04006349667906761, -0.0003412379592191428, -0.2768092453479767, -0.014552406966686249, -0.06398219615221024, -0.0051826415583491325, -0.020189613103866577, -0.004562207031995058, -0.0339798703789711, -0.06161460652947426, -0.03653796762228012, -0.0016069606645032763, -0.032936062663793564, -0.01921807788312435, -0.0038203841540962458, -0.0005044856225140393, -0.008505783975124359, -0.01798710972070694, -0.003586647566407919, -0.8335237503051758, -0.32874783873558044, -0.5146526098251343, -0.1095861867070198, -0.6311147212982178, -0.0001267114421352744, -0.00011634149996098131, -0.14547312259674072, -0.010440729558467865, -0.051437485963106155, -0.008846495300531387, -0.00027497802511788905, -0.0011605439940467477, -0.002750306623056531, -0.0009815642843022943, -0.13928331434726715, -0.05628407374024391, -0.5664603114128113, -0.0045639872550964355, -0.03733539208769798, -0.011759602464735508, -0.0652446374297142, -0.1933503895998001, -0.0034862712491303682, -0.0006862907321192324, -0.03525887429714203, -0.000713213172275573, -0.00031454383861273527, -0.0014546061865985394, -0.0037797691766172647, -0.5128079056739807, -0.2482253760099411, -0.6183604001998901, -0.08727450668811798, -0.311084121465683, -0.00040904260822571814, -0.00018189683032687753, -0.22740092873573303, -0.01566403917968273, -0.018375052139163017, -0.0070328782312572, -0.00022623363474849612, -0.0006802152493037283, -0.0013616346986964345, -0.004290898330509663, -0.14165328443050385, -0.0163410734385252, -0.2595365345478058, -0.005877118557691574, -0.0069515518844127655, -0.002504071919247508, -0.01186256855726242, -0.004025689791887999, -0.00039736481267027557, -0.00024971229140646756, -0.002278947737067938, -0.0001134808044298552, -0.00010918975021922961, -0.0002760506176855415, -0.0030189435929059982, -1.32686448097229, -0.14210520684719086, -1.0047814846038818, -2.9772756099700928, -1.3233814239501953, -0.07403916865587234, -0.0014511541230604053, -0.0015979153104126453, -0.27831393480300903, -0.03268469125032425, -0.0014519874239340425, -0.09566646814346313, -0.007734233979135752, -0.454485148191452, -0.2599931061267853, -0.2274182140827179, -0.5106911659240723, -0.00038509105797857046, -3.099436753473128e-06, -0.4454192519187927, -0.0013930626446381211, -2.220496892929077, -5.722029527532868e-06, -0.13867102563381195, -0.0021550068631768227, -0.06461635231971741, -0.07002948969602585, -1.270681381225586, -0.004542983137071133, -0.0016468308167532086, -0.0009896624833345413, -0.0007207180024124682, -8.22540732769994e-06, -3.0278701160568744e-05, -1.823885577323381e-05, -0.0003819928097072989, -0.0004633783537428826, -0.00019798702851403505, -0.0005007919971831143, -0.0002517383254598826, -0.0029836446046829224, -0.6956564784049988, -0.005091083236038685, -0.0351693369448185, -3.1461973190307617, -0.2528918981552124, -0.011583688668906689, -0.0006049233488738537, -0.0001821352052502334, -0.5369986295700073, -0.08962905406951904, -0.000228140561375767, -1.8037693500518799, -0.7528220415115356, -0.8923999667167664, -0.016665175557136536, -0.08297045528888702, -0.002744124736636877, -0.10885387659072876, -2.274933099746704, -0.2727815806865692, -0.1786717027425766, -0.08041306585073471, -3.0103321075439453, -0.42687395215034485, -0.0008755664457567036, -0.01300437469035387, -0.029515719041228294, 0.0, -0.0012938946019858122, -6.6756979322235566e-06, -0.0004855407460127026, -0.002123126992955804, -0.08610335737466812, -0.0006221981020644307, -0.000916418619453907, -6.246371776796877e-05, -0.0017381097422912717, -0.016400882974267006, -0.0030193000566214323, -8.356221951544285e-05, -2.2053474822314456e-05, -0.00012063252506777644, -2.0265558760002023e-06, -0.0009503615438006818, -0.0006522196927107871, -0.0006229128921404481, -1.7523612768854946e-05, -6.532455881824717e-05, -3.3378044463461265e-05, -8.856858039507642e-05, -1.4305104514278355e-06, -9.894321920000948e-06, -6.651657167822123e-05, -3.6238969187252223e-05, -4.1483970562694594e-05, -0.00021479207498487085, -6.079655122448457e-06, -5.4834770708112046e-05, -1.5497195136049413e-06, -2.932505594799295e-05, -6.925819616299123e-05, -0.0001294529065489769, -0.012818675488233566, -0.003968104254454374, -0.030514422804117203, -0.15365546941757202, -0.587363064289093, -3.760589361190796, -0.3935038447380066, -0.35897278785705566, -0.014872037805616856, -0.18062758445739746, -0.09294934570789337, -0.0387539304792881, -0.00115863885730505, -0.36206308007240295, -0.0023619630374014378, -0.11066944897174835, -0.012151616625487804, -6.437094270950183e-05, -0.13153068721294403, -0.011060004122555256, -0.0001255195093108341, -0.00021705655672121793, -0.6023280620574951, -3.707340147229843e-05, -1.755855679512024, -0.14642411470413208, -0.21349161863327026, -0.0032137196976691484, -2.5033637939486653e-05, -0.0034797375556081533, -7.152555099310121e-07, -0.001531976624391973, -4.768360213347478e-06, -0.009907475672662258, -0.00031382881570607424], "finish_reason": "length"}], "metrics": {"energy": 1065.473334342956, "energy_per_token": 4.162005212277172, "time": 23.590271, "time_per_token": 0.09214949609375}}
{"outputs": [{"text": "# Raise ValueError if 'k' is not an integer or is negative.\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Use the Haversine formula to calculate the distance in kilometers between each data point and the target.\n    rad_target_lat, rad_target_lon = math.radians(target[0]), math.radians(target[1])\n    dlat = data['Latitude'].apply(lambda x: math.radians(x) - rad_target_lat)\n    dlon = data['Longitude'].apply(lambda x: math.radians(x) - rad_target_lon)\n    a = np.sin(dlat / 2)**2 + np.cos(rad_target_lat) * np.cos(data['Latitude'].apply(math.radians)) * np.sin(dlon / 2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n    distances", "tokens": ["#", " Ra", "ise", " Value", "Error", " if", " '", "k", "'", " is", " not", " an", " integer", " or", " is", " negative", ".", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " Use", " the", " Ha", "vers", "ine", " formula", " to", " calculate", " the", " distance", " in", " kilometers", " between", " each", " data", " point", " and", " the", " target", ".", "\n", "    ", "rad", "_", "target", "_", "lat", ",", " rad", "_", "target", "_", "lon", " =", " math", ".", "rad", "ians", "(", "target", "[", "0", "])", ",", " math", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "    ", "d", "lat", " =", " data", "['", "Lat", "itude", "']", ".", "apply", "(", "lambda", " x", ":", " math", ".", "rad", "ians", "(", "x", ")", " -", " rad", "_", "target", "_", "lat", ")", "\n", "    ", "dl", "on", " =", " data", "['", "Long", "itude", "']", ".", "apply", "(", "lambda", " x", ":", " math", ".", "rad", "ians", "(", "x", ")", " -", " rad", "_", "target", "_", "lon", ")", "\n", "    ", "a", " =", " np", ".", "sin", "(", "d", "lat", " /", " ", "2", ")**", "2", " +", " np", ".", "cos", "(", "rad", "_", "target", "_", "lat", ")", " *", " np", ".", "cos", "(", "data", "['", "Lat", "itude", "']", ".", "apply", "(", "math", ".", "rad", "ians", "))", " *", " np", ".", "sin", "(", "dl", "on", " /", " ", "2", ")**", "2", "\n", "    ", "c", " =", " ", "2", " *", " np", ".", "ar", "ct", "an", "2", "(", "np", ".", "sqrt", "(", "a", ")", ",", " np", ".", "sqrt", "(", "1", " -", " a", "))", "\n", "    ", "dist", "ances"], "logprobs": [-1.1992313861846924, -3.452314615249634, -0.08378630876541138, -1.7247047424316406, -0.015472612343728542, -0.03627105802297592, -0.5119036436080933, -0.0033554700203239918, -0.0004602803383022547, -0.0035741752944886684, -2.036590576171875, -0.6211954951286316, -0.035431016236543655, -0.30605387687683105, -0.5934688448905945, -0.4685116708278656, -1.9760041236877441, -0.011543741449713707, -0.003649006364867091, -0.011947030201554298, -0.14314991235733032, -0.011544094420969486, -0.00020883286197204143, -0.0013104431563988328, -0.0005041282274760306, -0.013530923053622246, -0.05581023544073105, -0.004762733820825815, -0.01325650792568922, -0.024212263524532318, -0.0005355831235647202, -0.020383760333061218, -0.0020086844451725483, -0.0023265217896550894, -0.005096420645713806, -0.008067049086093903, -0.0007798014557920396, -6.210611172718927e-05, -0.06553898006677628, -0.03846513107419014, -0.9049854874610901, -0.02336551994085312, -0.0007634824141860008, -0.01524980179965496, -0.009410900995135307, -0.0030265499372035265, -0.0003815161471720785, -0.0007783720502629876, -0.8720859289169312, -0.00047219570842571557, -0.0014731755945831537, -0.09255636483430862, -0.0026629245840013027, -0.12030370533466339, -4.239211559295654, -1.084352970123291, -0.8451898097991943, -1.4185804502631072e-05, -0.0006367324967868626, -0.03391315042972565, -0.045413754880428314, -0.07048319280147552, -0.12184431403875351, -0.162980318069458, -2.8010597229003906, -0.2723231017589569, -0.250834196805954, -1.8481829166412354, -0.7063537836074829, -0.02814358100295067, -0.1010870561003685, -0.044329933822155, -0.002516557462513447, -0.23147732019424438, -0.016745129600167274, -0.004585702903568745, -3.2880640029907227, -0.7633482813835144, -0.37532132863998413, -1.9301629066467285, -0.05976470932364464, -1.6863466501235962, -0.004231903236359358, -2.932505594799295e-05, -0.0015441172290593386, -6.4490144723095e-05, -0.35283732414245605, -0.008730101399123669, -0.09071268886327744, -2.1219027985353023e-05, -0.00033909291960299015, -2.1219027985353023e-05, -0.00024875884992070496, -0.0241487305611372, -0.001032177242450416, -0.0049865879118442535, -0.0004440752090886235, -0.00031192204914987087, -0.0013847296359017491, -2.002696055569686e-05, -2.539125671319198e-05, -3.3854863431770355e-05, -3.6238969187252223e-05, -0.007288532797247171, -3.9219088648678735e-05, -0.0005516675882972777, -0.00011991735664196312, -0.007540099788457155, -0.10241825133562088, -3.478837490081787, -0.5486099123954773, -0.17372392117977142, -3.13618540763855, -0.19921255111694336, -0.004877810832113028, -0.00031394799589179456, -0.00020895205670967698, -0.40469202399253845, -0.1229737401008606, -0.0006236277404241264, -0.2976069152355194, -0.032898690551519394, -0.0036126605700701475, -0.08212120831012726, -5.722029527532868e-06, -0.0006319671520031989, -2.861018856492592e-06, -0.0036582706961780787, -0.022211821749806404, -2.368758201599121, -0.0007556205382570624, -0.0030193000566214323, -4.172316494077677e-06, -9.536738616588991e-07, -4.768370445162873e-07, -2.9802276912960224e-06, -0.003069334663450718, -0.020727338269352913, -0.00015889335190877318, -0.06168835610151291, -0.00029690624796785414, -0.0002208704245276749, -0.0063399141654372215, -0.0005364171229302883, -0.00012051333033014089, -2.3841855067985307e-07, -2.50339189733495e-06, -0.0004929280839860439, -0.0003228858404327184, -6.198863957251888e-06, -0.002787991426885128, -0.0022392217069864273, -4.684815212385729e-05, -0.0015100754098966718, -2.3841855067985307e-07, -2.8967437174287625e-05, -0.0004024887748528272, -9.142934868577868e-05, -0.00056429672986269, -0.0015145984943956137, -2.253030106658116e-05, -0.0003014348621945828, -3.576278118089249e-07, -8.344646857949556e-07, -9.536738616588991e-07, -1.3470558769768104e-05, -0.00013755806139670312, -0.0004440752090886235, -0.029923047870397568, -0.25146952271461487, -0.002337463665753603, -0.059294428676366806, -1.1920928244535389e-07, -0.8087426424026489, -0.0004220310365781188, -0.011365314014256, -5.006777428206988e-06, -0.8934411406517029, -0.0003064401389565319, -3.707340147229843e-05, -1.991844892501831, -0.0005534547381103039, -0.0025081150233745575, -0.01632547564804554, -7.152555099310121e-07, -0.008708357810974121, -0.0015949398512020707, -0.5626018047332764, -4.684815212385729e-05, -1.1205610462639015e-05, -4.887569048150908e-06, -0.00036113892565481365, -0.006937582511454821, -0.006691903341561556, -0.013552092015743256, -1.4305104514278355e-06, -0.00019822540343739092, -0.0005881248507648706, -0.08543331921100616, -0.010070467367768288, -0.0010737375123426318, -2.264974000354414e-06, -0.016450252383947372, -0.0015457835979759693, -0.024464262649416924, -4.255681051290594e-05, -0.3683936893939972, -2.1815061700181104e-05, -9.30981186684221e-05, -1.9192511899746023e-05, -0.007895214483141899, -0.006113400682806969, -0.017504489049315453, -4.768370445162873e-07, -4.327203714638017e-05, -5.328513361746445e-05, -0.0010125277331098914, -7.152555099310121e-07, -0.0034547902178019285, -0.0006338732782751322, -2.9802276912960224e-06, -0.017315056174993515, -0.001116010476835072, -0.010850477032363415, -0.009640565142035484, -0.06773857772350311, -0.0014737708261236548, -0.025818802416324615, -0.00010394509445177391, -0.0008966478053480387, -0.08981682360172272, 0.0, -0.4533289074897766, -0.02014930732548237, -7.152555099310121e-07, -0.0004687402688432485, -0.0004881620698142797, -0.0018670998979359865, -9.059865078597795e-06, -0.0012365083675831556, -4.458328112377785e-05, -0.0002553137019276619, -0.0018935146508738399, -0.0002699726028367877, -0.0005706112715415657, -1.1920928244535389e-07, -1.2397689715726301e-05, -0.0001842805795604363, -0.0014671048847958446, -0.010895286686718464, -0.0002090712368953973, -0.00015341058315243572, -0.007835367694497108, -0.03234773501753807, -0.43499472737312317, -0.18996955454349518], "finish_reason": "length"}], "metrics": {"energy": 1047.058968137741, "energy_per_token": 4.090074094288051, "time": 23.566223, "time_per_token": 0.09205555859375}}
{"outputs": [{"text": "if k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    if type(k) != int:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    # Calculate distances for all points in data from target\n    distances = np.array([\n        haversine_distance(target[0], target[1], point[0], point[1]) for point in data\n    ])\n\n    # Sort indices by distances\n    indices = np.argsort(distances)\n\n    # Extract k nearest neighbors\n    nearest = data[indices[:k]]\n\n    return nearest.tolist()", "tokens": ["if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " type", "(", "k", ")", " ", "!", "=", " int", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " distances", " for", " all", " points", " in", " data", " from", " target", "\n", "    ", "dist", "ances", " =", " np", ".", "array", "([", "\n", "        ", "ha", "vers", "ine", "_", "distance", "(", "target", "[", "0", "]", ",", " target", "[", "1", "]", ",", " point", "[", "0", "]", ",", " point", "[", "1", "])", " for", " point", " in", " data", "\n", "    ", "])", "\n", "\n", "    ", "#", " Sort", " indices", " by", " distances", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "dist", "ances", ")", "\n", "\n", "    ", "#", " Ext", "ract", " k", " nearest", " neighbors", "\n", "    ", "ne", "arest", " =", " data", "[", "indices", "[:", "k", "]]", "\n", "\n", "    ", "return", " nearest", ".", "tol", "ist", "()", "\n", "\n", "def"], "logprobs": [-0.7325347065925598, -1.4926776885986328, -0.08184707909822464, -0.0009178477921523154, -0.010852482169866562, -0.9594210386276245, -0.018395651131868362, -0.005728020798414946, -0.014392847195267677, -0.0015704215038567781, -2.5033637939486653e-05, -0.11626756191253662, -0.014431740157306194, -0.5219971537590027, -0.10277457535266876, -0.007480349391698837, -0.23591649532318115, -0.031370848417282104, -0.004152960609644651, -0.00082923355512321, -0.004274873994290829, -1.4616186618804932, -0.017102381214499474, -0.0004353767435532063, -0.002753754146397114, -1.3531934022903442, -0.001190192298963666, -0.6340336203575134, -3.0410125255584717, -0.00012337400403339416, -0.008541716262698174, -0.00014172980445437133, -0.37842583656311035, -1.4305104514278355e-06, -1.645074735279195e-05, -0.011069907806813717, -0.01625111885368824, -0.002934794407337904, -0.003440059022977948, -0.00633920356631279, -0.013108388520777225, -2.610649426060263e-05, -0.00538090942427516, -0.0029415693134069443, -0.007820936851203442, -0.008445855230093002, -0.0011067223967984319, -1.031186819076538, -0.021354513242840767, -0.0008382858941331506, -0.003158107167109847, -0.00043501926120370626, -0.015638338401913643, -0.0026619734708219767, -0.00019596086349338293, -0.0007247682078741491, -0.029809661209583282, -0.002468516817316413, -1.1016238927841187, -2.2148802280426025, -2.700517177581787, -4.006906509399414, -1.4386987686157227, -0.8335886001586914, -0.9159194231033325, -0.9284884929656982, -1.2192732095718384, -0.4720619022846222, -0.45618748664855957, -0.010052056983113289, -0.7099472880363464, -0.06648240238428116, -0.009895908646285534, -0.7601054310798645, -1.4305104514278355e-06, -1.919282078742981, -0.3751608431339264, -3.051675796508789, -0.09345445036888123, -1.913326382637024, -0.00047708096099086106, -0.0025664984714239836, -1.0456124544143677, -0.2092311531305313, -0.055628370493650436, -1.395232915878296, -0.4772496223449707, -0.016171125695109367, -0.0005162813467904925, -0.0006937957368791103, -0.017984066158533096, -0.0004368066438473761, -8.284702198579907e-05, -0.00010132275929208845, -0.000379132863599807, -1.4469865560531616, -0.060041140764951706, -0.08262752741575241, -0.0005461869877763093, -0.00030357998912222683, -0.0018549631349742413, -0.00011073929636040702, -0.00014244495832826942, -0.03368588164448738, -0.9061933159828186, -0.04215773195028305, -0.001948483637534082, -0.047999732196331024, -0.8082015514373779, -0.10001838207244873, -0.012497092597186565, -0.019635234028100967, -0.051100220531225204, -0.0008218486327677965, -0.044586945325136185, -1.330881953239441, -2.6489078998565674, -1.122391939163208, -0.9415907263755798, -0.7547012567520142, -0.0005458295345306396, -2.0245003700256348, -0.05436275526881218, -0.6280342936515808, -5.960446742392378e-06, -0.025705762207508087, -3.576278118089249e-07, -0.0003657863999251276, -0.0014079429674893618, -3.576278118089249e-07, -0.019080664962530136, -0.12093451619148254, -0.0475463904440403, -0.0002703301142901182, -0.23438555002212524, -2.701444625854492, -0.016966786235570908, -1.4149755239486694, -0.5106287598609924, -0.19727128744125366, -0.5229556560516357, -0.000486970558995381, -0.3707205355167389, -0.3739258944988251, -1.6690638065338135, -0.6866540908813477, -0.7052051424980164, -0.006760699674487114, -0.29315268993377686, -0.00890793651342392, -0.014674115926027298, -0.19485566020011902, -0.03443744406104088, -0.00023755589791107923, -0.24718819558620453, -0.07185950875282288, -0.5567589998245239, -1.058339238166809, -9.298280929215252e-06, -0.0023272354155778885, -0.06777065992355347, -0.0024504417087882757, -0.08489786833524704], "finish_reason": "stop"}], "metrics": {"energy": 651.6012121772767, "energy_per_token": 3.997553448940348, "time": 14.8483095, "time_per_token": 0.09109392331288343}}
{"outputs": [{"text": "# check k\n    if k < 0 or not isinstance(k, int):\n        raise ValueError(\"'k' must be a non-negative integer\")\n\n    radius = 6371  # radius of Earth in km\n    lat1, lon1 = target\n    target_lat, target_lon = math.radians(lat1), math.radians(lon1)\n\n    # calculate distances between target and each point in the dataset\n    distances = []\n    for index, row in data.iterrows():\n        lat, lon = row['Latitude'], row['Longitude']\n        lat2, lon2 = math.radians(lat), math.radians(lon)\n        dLat = lat2 - target_lat\n        dLon = lon2 - target_lon\n        a = math.sin(dLat / 2) ** 2 + math.cos(lat1) * math.cos(lat) * math.sin(dLon / 2) ** 2\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1", "tokens": ["#", " check", " k", "\n", "    ", "if", " k", " <", " ", "0", " or", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "  ", "#", " radius", " of", " Earth", " in", " km", "\n", "    ", "lat", "1", ",", " lon", "1", " =", " target", "\n", "    ", "target", "_", "lat", ",", " target", "_", "lon", " =", " math", ".", "rad", "ians", "(", "lat", "1", ")", ",", " math", ".", "rad", "ians", "(", "lon", "1", ")", "\n", "\n", "    ", "#", " calculate", " distances", " between", " target", " and", " each", " point", " in", " the", " dataset", "\n", "    ", "dist", "ances", " =", " []", "\n", "    ", "for", " index", ",", " row", " in", " data", ".", "iter", "rows", "():", "\n", "        ", "lat", ",", " lon", " =", " row", "['", "Lat", "itude", "']", ",", " row", "['", "Long", "itude", "']", "\n", "        ", "lat", "2", ",", " lon", "2", " =", " math", ".", "rad", "ians", "(", "lat", ")", ",", " math", ".", "rad", "ians", "(", "lon", ")", "\n", "        ", "d", "Lat", " =", " lat", "2", " -", " target", "_", "lat", "\n", "        ", "d", "L", "on", " =", " lon", "2", " -", " target", "_", "lon", "\n", "        ", "a", " =", " math", ".", "sin", "(", "d", "Lat", " /", " ", "2", ")", " **", " ", "2", " +", " math", ".", "cos", "(", "lat", "1", ")", " *", " math", ".", "cos", "(", "lat", ")", " *", " math", ".", "sin", "(", "d", "L", "on", " /", " ", "2", ")", " **", " ", "2", "\n", "        ", "c", " =", " ", "2", " *", " math", ".", "atan", "2", "(", "math", ".", "sqrt", "(", "a", ")", ",", " math", ".", "sqrt", "(", "1"], "logprobs": [-1.1992313861846924, -2.0871431827545166, -2.3853907585144043, -0.9003512859344482, -0.0027323553804308176, -0.09138975292444229, -1.3871495723724365, -0.11144084483385086, -0.0013381821336224675, -0.016653452068567276, -0.527557909488678, -0.3638240098953247, -0.03416997566819191, -0.0002824861148837954, -0.0007491880678571761, -0.0013817534781992435, -0.014260761439800262, -0.004762140568345785, -0.00959156733006239, -0.011231531389057636, -0.01138546783477068, -0.0024129818193614483, -4.482168878894299e-05, -0.1728513091802597, -0.06146496161818504, -1.467646598815918, -0.0020070187747478485, -0.0012993711279705167, -0.06034229323267937, -0.0029034148901700974, -0.023598289117217064, -0.008846140466630459, -0.0029825749807059765, -0.0008124388405121863, -0.0014325842494145036, -1.0727500915527344, -0.0003678122302517295, -0.0027197536546736956, -0.2628909945487976, -0.0017865424742922187, -3.0486981868743896, -0.3491087853908539, -0.005159989930689335, -0.0018743580440059304, -0.0029166084714233875, -0.00016664070426486433, -0.004842221271246672, -1.0197653770446777, -0.000348268891684711, -0.6535665988922119, -0.0032935680355876684, -2.006744623184204, -0.10225748270750046, -1.1353163719177246, -0.014968342147767544, -0.8954036235809326, -1.4816282987594604, -0.8170430660247803, -0.09189847111701965, -0.03200777992606163, -0.00010835537250386551, -0.002809983678162098, -1.9210031032562256, -0.6004248857498169, -1.226403832435608, -2.988585948944092, -0.19288919866085052, -1.8520463705062866, -0.7791436910629272, -0.0002416080387774855, -3.111314072157256e-05, -0.014066244475543499, -0.000497336674015969, -0.4347223937511444, -3.71926071238704e-05, -0.0002951186615973711, -6.318072337307967e-06, -0.00015615197480656207, -0.011279270984232426, -7.235741941258311e-05, -0.0004266782198101282, -0.00021443451987579465, -0.0020811345893889666, -4.172316494077677e-06, -0.00014554394874721766, -4.172316494077677e-06, -7.402622577501461e-05, -0.023763256147503853, -7.748573807475623e-06, -6.09140915912576e-05, -0.023233799263834953, -0.3099590837955475, -0.0009199915803037584, -0.3616880178451538, -0.7188360691070557, -1.174267053604126, -1.4228386878967285, -0.19159920513629913, -0.03973108157515526, -1.0080997943878174, -0.5511136651039124, -0.09369979798793793, -0.7454087734222412, -0.2934380769729614, -0.028139060363173485, -0.000979420612566173, -0.45293307304382324, -0.023469509556889534, -0.002697046147659421, -0.37056344747543335, -0.009914321824908257, -0.013849940150976181, -0.01339766476303339, -1.3707271814346313, -0.03160083666443825, -0.19904784858226776, -0.00035386974923312664, -0.003954449202865362, -0.005436872597783804, -0.0011969790793955326, -4.7205765440594405e-05, -1.728519782773219e-05, -0.0028993734158575535, -0.0025634069461375475, -0.07281117141246796, -2.5774781703948975, -0.0025153683964163065, -0.00032634177478030324, -0.19423751533031464, -0.20150582492351532, -0.0051337797194719315, -0.00036971885128878057, -0.00017855956684798002, -0.0011825718684121966, -0.00018976318824570626, -8.49926145747304e-05, -9.762764238985255e-05, -1.0728830375228426e-06, -1.2040065485052764e-05, -0.0043599787168204784, -0.010236146859824657, -0.3433492183685303, -0.5339905023574829, -0.0024346255231648684, -0.00028355870745144784, -2.3603161025675945e-05, -0.0006183857913129032, -0.005831253714859486, -1.2397689715726301e-05, -4.100715523236431e-05, -2.3841855067985307e-07, -1.7881233361549675e-05, -0.0023849159479141235, -0.00011240804451517761, -2.455681169521995e-05, -0.0002456601650919765, -2.9802276912960224e-06, -1.2993727978027891e-05, -4.732496745418757e-05, -2.8609820219571702e-05, -0.0001652104256208986, -0.00025293012731708586, -0.0007627676823176444, -0.1153499037027359, -0.6214065551757812, -3.3287389278411865, -0.060930535197257996, -0.22888389229774475, -0.0010871936101466417, -0.00911905150860548, -0.0007076143519952893, -5.245195097813848e-06, -9.536738616588991e-07, -0.005995266605168581, -8.082063141046092e-05, -0.003510861424729228, -0.0012892514932900667, -0.0003796095261350274, -9.30981186684221e-05, -0.015566863119602203, -4.0649541915627196e-05, -0.00015841660206206143, -4.6967357775429264e-05, -6.6756979322235566e-06, -1.966933996300213e-05, -0.0003649522550404072, -0.03300226852297783, -0.04160865768790245, -0.0013105622492730618, -0.025146760046482086, -5.960462772236497e-07, -0.009968261234462261, -0.0004673104267567396, -0.0016889605903998017, -0.0014240134041756392, -0.6501943469047546, -7.4741430580616e-05, -1.1444026313256472e-05, -0.44981464743614197, -0.01058818306773901, -0.00038425691309385, -2.264974000354414e-06, -0.0014909114688634872, -0.01142330002039671, -2.9802276912960224e-06, -0.00047469791024923325, -2.062299427052494e-05, -1.22249174118042, -0.22744527459144592, -0.001364849042147398, -0.0007948100101202726, -0.01404626201838255, -7.390948667307384e-06, -0.0030599460005760193, -2.8132995794294402e-05, -0.004957882221788168, -1.1535320281982422, -0.00257422705180943, -0.004531828220933676, -5.245195097813848e-06, -2.3841574147809297e-05, -2.288792165927589e-05, -0.00274757225997746, -7.986703712958843e-05, -2.9802276912960224e-06, -0.0010180057724937797, -0.00018153927521780133, -2.861018856492592e-06, -0.002113253576681018, -0.0003449321957305074, -0.00018869050836656243, -4.768370445162873e-07, -0.0014174662064760923, -0.00040391870425082743, -0.01947157271206379, -0.0002026352594839409, -0.0012057899730280042, -3.981510963058099e-05, -0.00020394629973452538, -0.0011094611836597323, -1.7881377516459906e-06, -0.01120123639702797, -2.9444261599564925e-05, -0.0001438752660760656, -0.0020283141639083624, -3.576278118089249e-07, -4.768370445162873e-07, -1.549708758830093e-05, -2.9801878554280847e-05, -1.8954096958623268e-05, -1.847726889536716e-05, -0.00018153927521780133, -1.0728830375228426e-06, -5.602820692729438e-06, -0.00019822540343739092, -0.00038771264371462166], "finish_reason": "length"}], "metrics": {"energy": 1046.526183952332, "energy_per_token": 4.087992906063797, "time": 24.250896, "time_per_token": 0.0947300625}}
{"outputs": [{"text": "if k < 0 or not isinstance(k, int):\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Initialize an empty list to store the distances of the target point from the other data points\n    distances = []\n\n    # Calculate the distance between the target point and each data point in the dataset\n    for i in range(len(data)):\n        d_lat = math.radians(data.iloc[i, 0] - target[0])\n        d_long = math.radians(data.iloc[i, 1] - target[1])\n        a = (math.sin(d_lat / 2) * math.sin(d_lat / 2) +\n             math.cos(math.radians(target[0])) * math.cos(math.radians(data.iloc[i, 0])) *\n             math.sin(d_long / 2) * math.sin(d_long / 2))\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))", "tokens": ["if", " k", " <", " ", "0", " or", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " distances", " of", " the", " target", " point", " from", " the", " other", " data", " points", "\n", "    ", "dist", "ances", " =", " []", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " between", " the", " target", " point", " and", " each", " data", " point", " in", " the", " dataset", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "data", "))", ":", "\n", "        ", "d", "_", "lat", " =", " math", ".", "rad", "ians", "(", "data", ".", "il", "oc", "[", "i", ",", " ", "0", "]", " -", " target", "[", "0", "])", "\n", "        ", "d", "_", "long", " =", " math", ".", "rad", "ians", "(", "data", ".", "il", "oc", "[", "i", ",", " ", "1", "]", " -", " target", "[", "1", "])", "\n", "        ", "a", " =", " (", "math", ".", "sin", "(", "d", "_", "lat", " /", " ", "2", ")", " *", " math", ".", "sin", "(", "d", "_", "lat", " /", " ", "2", ")", " +", "\n", "             ", "math", ".", "cos", "(", "math", ".", "rad", "ians", "(", "target", "[", "0", "]))", " *", " math", ".", "cos", "(", "math", ".", "rad", "ians", "(", "data", ".", "il", "oc", "[", "i", ",", " ", "0", "]))", " *", "\n", "             ", "math", ".", "sin", "(", "d", "_", "long", " /", " ", "2", ")", " *", " math", ".", "sin", "(", "d", "_", "long", " /", " ", "2", "))", "\n", "        ", "c", " =", " ", "2", " *", " math", ".", "atan", "2", "(", "math", ".", "sqrt", "(", "a", ")", ",", " math", ".", "sqrt", "(", "1", " -", " a", "))"], "logprobs": [-0.7325347065925598, -1.4926776885986328, -0.08184707909822464, -0.0009178477921523154, -0.010852482169866562, -0.493764728307724, -0.13328544795513153, -0.014613145962357521, -0.00017867876158561558, -0.0006513857515528798, -0.001135300612077117, -0.012230165302753448, -0.005816794466227293, -0.018294408917427063, -0.008733292110264301, -0.019037622958421707, -0.0013267532922327518, -8.22540732769994e-06, -0.10579895228147507, -0.024406911805272102, -0.5931993126869202, -0.03199126943945885, -0.0010236029047518969, -0.019272221252322197, -0.00982874445617199, -0.0028876056894659996, -0.00033301531220786273, -0.0013044904917478561, -0.31188881397247314, -0.0003784178989008069, -0.0035943682305514812, -0.2514339089393616, -0.0031055815052241087, -0.9372043013572693, -3.6043434143066406, -1.037838101387024, -0.01916627213358879, -0.08918176591396332, -0.1616542637348175, -0.10790060460567474, -0.2852688729763031, -0.4159224331378937, -1.876760482788086, -1.2671862840652466, -4.044072151184082, -1.6128714084625244, -0.3596171438694, -1.7586866617202759, -1.1824860572814941, -1.430377721786499, -0.01378927193582058, -0.2513619661331177, -0.002532372483983636, -0.17298738658428192, -0.06636237353086472, -0.0077442885376513, -0.03513849154114723, -0.003017042065039277, -0.20562496781349182, -0.001739775761961937, -0.0470421202480793, -1.100982904434204, -0.05118619278073311, -0.2668088972568512, -0.516926109790802, -0.026226943358778954, -0.006073589902371168, -0.19872501492500305, -0.0017051455797627568, -0.34455767273902893, -0.48535463213920593, -0.001828071428462863, -0.8108024001121521, -0.01173026580363512, -0.24081148207187653, -0.21040096879005432, -0.002820919966325164, -0.08522075414657593, -0.5251756906509399, -0.2696312665939331, -0.06320127099752426, -0.0012740122620016336, -0.08163078129291534, -0.00011896379146492109, -0.0014755562879145145, -0.026868203654885292, -0.0002640137099660933, -0.00305317179299891, -0.01406389381736517, -3.1369376182556152, -3.0060739517211914, -0.24116073548793793, -0.06342203915119171, -0.33825603127479553, -2.372236667724792e-05, -0.022639501839876175, -3.2066785934148356e-05, -0.008060544729232788, -0.11869274824857712, -0.2735634446144104, -0.3023245632648468, -3.576278118089249e-07, -0.0006699701189063489, -0.00023064337437972426, -1.077131986618042, -0.20024602115154266, -0.007218589540570974, -0.03651026636362076, -0.0006684214458800852, -0.005004142876714468, -0.0003718638326972723, -0.0006276782951317728, -0.0008114859228953719, -0.13823114335536957, -0.0006210067658685148, -0.005626081023365259, -7.223821739898995e-05, -1.311129093170166, -0.0019683525897562504, -0.0019804879557341337, -1.311301275563892e-06, -2.9444261599564925e-05, -1.1920928244535389e-07, -0.0007640779949724674, -0.0011245838832110167, -9.011816291604191e-05, -0.0004262015863787383, -8.106198947643861e-06, -3.58813522325363e-05, -7.247662142617628e-05, -0.0008771148277446628, -0.0009335688664577901, -0.0009354744106531143, -0.0004938812926411629, -0.00016199229867197573, -0.00013779645087197423, -3.3378044463461265e-05, -0.000497336674015969, -7.688703772146255e-05, -0.00038675934774801135, -0.09091103821992874, -0.3417259156703949, -0.0020841085352003574, -1.4628496170043945, -0.013553149998188019, -3.814689989667386e-06, -0.01281808689236641, -0.0006225554971024394, -0.0008768765837885439, -1.6689286894688848e-06, -0.003163692308589816, -0.5204712748527527, -0.000403084559366107, -0.00019369633810129017, -0.12376962602138519, -1.5199570655822754, -0.0020386644173413515, -1.0609570381348021e-05, -0.004511653911322355, -0.0001726001501083374, -0.00011979816190432757, -8.344646857949556e-07, -0.0013465156080201268, -0.0014569868799299002, -0.00047505536349490285, -8.34461570775602e-06, -0.3752160668373108, -0.1422482281923294, -0.39877060055732727, -0.2970055043697357, -0.010244996286928654, -2.777537883957848e-05, -0.006381609942764044, -0.00032062159152701497, -0.014042265713214874, -2.7418097943154862e-06, -0.000634111522231251, -4.768370445162873e-07, -0.00022575691400561482, -0.06423487514257431, -0.00015937011630740017, -0.0019220703979954123, -0.001004906021989882, -0.0010457528987899423, -0.08425946533679962, -3.6954811548639555e-06, -5.924526340095326e-05, -8.201262971851975e-05, -0.0009077242575585842, -3.4570634852570947e-06, -3.9219088648678735e-05, -1.0728830375228426e-06, -0.00039939055568538606, -0.034649111330509186, -0.0012363893911242485, -0.004161270800977945, -1.1920928244535389e-07, -8.272782724816352e-05, -0.00032062159152701497, -0.003086566925048828, -0.005264585837721825, -0.0024874242953956127, -0.001257344032637775, -0.006349390838295221, -0.06130576133728027, -0.0038119524251669645, -0.00032550760079175234, 0.0, -2.038458114839159e-05, -5.090107151772827e-05, -5.07818695041351e-05, -2.622600959512056e-06, -7.724463648628443e-05, -0.0021161085460335016, -0.0002172949316445738, -1.6689286894688848e-06, -0.0016931259306147695, -0.0008555566309951246, -0.0003110878460574895, -7.271740287251305e-06, -2.2053474822314456e-05, -2.7656173188006505e-05, -2.062299427052494e-05, -7.152555099310121e-07, -2.145764938177308e-06, -0.0009579836623743176, -0.00023112009512260556, -8.821448318485636e-06, -0.020125823095440865, -0.0022157898638397455, -0.035490732640028, -0.0647348016500473, -0.0005896736984141171, -0.0038611162453889847, -0.00012838016846217215, -0.00115697190631181, -0.002741509350016713, -2.861018856492592e-06, -0.0027506633196026087, -9.48860906646587e-05, -0.00023719835735391825, -0.0006725909770466387, -1.2755313036905136e-05, -2.9802276912960224e-06, -2.6225699912174605e-05, -7.021180499577895e-05, -1.9192511899746023e-05, -4.482168878894299e-05, -0.0011301804333925247, -5.960462772236497e-07, -3.099436753473128e-06, -0.0005365362740121782, -0.0005404680268839002, -0.006799535825848579, -0.0002451834443490952, -0.00014578233822248876], "finish_reason": "length"}], "metrics": {"energy": 1046.6631567077636, "energy_per_token": 4.088527955889702, "time": 23.582317, "time_per_token": 0.09211842578125}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    radius = 6371\n\n    # Calculate the distance from target to each point in data\n    data['distance'] = np.sqrt(np.sum((data[['Latitude', 'Longitude']] - target) ** 2, axis=1))\n\n    # Sort the data in ascending order of distances from target\n    sorted_data = data.sort_values('distance')\n\n    # Return the 'k' nearest neighbors\n    return sorted_data.head(k)[['Latitude', 'Longitude']].values.tolist()", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " from", " target", " to", " each", " point", " in", " data", "\n", "    ", "data", "['", "distance", "']", " =", " np", ".", "sqrt", "(", "np", ".", "sum", "((", "data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", " -", " target", ")", " **", " ", "2", ",", " axis", "=", "1", "))", "\n", "\n", "    ", "#", " Sort", " the", " data", " in", " ascending", " order", " of", " distances", " from", " target", "\n", "    ", "s", "orted", "_", "data", " =", " data", ".", "sort", "_", "values", "('", "distance", "')", "\n", "\n", "    ", "#", " Return", " the", " '", "k", "'", " nearest", " neighbors", "\n", "    ", "return", " sorted", "_", "data", ".", "head", "(", "k", ")[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -0.40404582023620605, -0.00036244976217858493, -0.0025720868725329638, -0.2449832707643509, -0.0036020891275256872, -1.9921932220458984, -0.2928706705570221, -0.004543457645922899, -0.002283110748976469, -0.001653971616178751, -7.462222856702283e-05, -0.0035565949510782957, -0.8510041236877441, -0.9544134140014648, -0.0018736441852524877, -1.329898476600647, -0.7349787950515747, -0.525077760219574, -0.2644745707511902, -1.685623288154602, -2.6176390647888184, -0.1286238133907318, -0.3074299991130829, -0.6056929230690002, -0.17434737086296082, -1.3009467124938965, -0.2685542702674866, -0.001835091970860958, -1.0245616436004639, -0.2416089028120041, -0.503847062587738, -0.007218115963041782, -0.000880568812135607, -0.16816912591457367, -2.002696055569686e-05, -0.11546854674816132, -0.6988412737846375, -0.393720418214798, -1.6689160474925302e-05, -0.5406573414802551, -0.18714408576488495, -0.10424210131168365, -0.10641507804393768, -0.006765909492969513, -0.006623694207519293, -0.00010358751023886725, -0.0005875291535630822, -0.0001232548092957586, -0.014496599324047565, -3.8265450712060556e-05, -2.3841855067985307e-07, -2.372236667724792e-05, -0.011069082655012608, -0.2704353332519531, -0.20744644105434418, -0.2199023962020874, -0.0037944952491670847, -0.0027327120769768953, -6.949660019017756e-05, -0.003973091021180153, -0.0016969341086223722, -0.028542548418045044, -0.0019140986260026693, -0.004138952121138573, -0.022899586707353592, -0.14138247072696686, -0.0006062338361516595, -0.01642199233174324, -0.16012537479400635, -0.29179590940475464, -0.23318447172641754, -3.013871669769287, -0.008034056052565575, -0.003492804942652583, -0.056520912796258926, -1.7607951164245605, -0.9951711297035217, -0.43823397159576416, -0.09758148342370987, -0.00047386385267600417, -0.6401596665382385, -0.0001134808044298552, -0.0009588173124939203, -0.026021501049399376, -0.0007965967524796724, -0.0026062114629894495, -0.0034064382780343294, -0.01937079057097435, -7.152555099310121e-07, -5.960462772236497e-07, -0.5382477641105652, -4.9470632802695036e-05, -0.06459545344114304, -0.02336435578763485, -0.01790514774620533, -0.00031156453769654036, -0.03542675822973251, -0.8643574714660645, -0.03966199606657028, -0.5554570555686951, -0.00035291642416268587, -0.0006868863711133599, -0.06646165251731873, -0.0065695736557245255, -0.47210198640823364, -0.000824349990580231, -0.3191901445388794, -0.014037210494279861, -1.966933996300213e-05, -3.3378546504536644e-06, -1.1230822801589966, -0.3442351520061493, -0.00114292127545923, -0.010655177757143974, -0.3498239517211914, -0.0018099845619872212, -0.0007737264968454838, -7.629365427419543e-06, -7.760223525110632e-05, -0.00019095504831057042, -0.002009873976930976, -8.785339014139026e-05, -5.960462772236497e-07, -2.586808113846928e-05, -0.0020114206708967686, -0.018485764041543007, -0.07051897048950195, -0.011062126606702805, -9.703165414975956e-05, -4.768370445162873e-07, -0.0003164505760651082], "finish_reason": "stop"}], "metrics": {"energy": 678.8969418449399, "energy_per_token": 4.243105886530874, "time": 14.5974045, "time_per_token": 0.091233778125}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    if k == 0:\n        return []\n\n    target_lat, target_lon = target\n    radius = 6371\n\n    def haversine_distance(lat1, lon1, lat2, lon2):\n        \"\"\"\n        Calculate the Haversine distance in km between two points on the Earth's surface.\n\n        Parameters:\n        lat1 (float): Latitude of point 1.\n        lon1 (float): Longitude of point 1.\n        lat2 (float): Latitude of point 2.\n        lon2 (float): Longitude of point 2.\n\n        Returns:\n        float: Distance in kilometers between the two points.\n        \"\"\"\n        dlat = math.radians(lat2 - lat1)\n        dlon = math.radians(lon2 - lon1)\n        a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "if", " k", " ==", " ", "0", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "target", "_", "lat", ",", " target", "_", "lon", " =", " target", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "\n", "\n", "    ", "def", " ha", "vers", "ine", "_", "distance", "(", "lat", "1", ",", " lon", "1", ",", " lat", "2", ",", " lon", "2", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Cal", "culate", " the", " Ha", "vers", "ine", " distance", " in", " km", " between", " two", " points", " on", " the", " Earth", "'", "s", " surface", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "lat", "1", " (", "float", "):", " Lat", "itude", " of", " point", " ", "1", ".", "\n", "        ", "lon", "1", " (", "float", "):", " Long", "itude", " of", " point", " ", "1", ".", "\n", "        ", "lat", "2", " (", "float", "):", " Lat", "itude", " of", " point", " ", "2", ".", "\n", "        ", "lon", "2", " (", "float", "):", " Long", "itude", " of", " point", " ", "2", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "float", ":", " Distance", " in", " kilometers", " between", " the", " two", " points", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "d", "lat", " =", " math", ".", "rad", "ians", "(", "lat", "2", " -", " lat", "1", ")", "\n", "        ", "dl", "on", " =", " math", ".", "rad", "ians", "(", "lon", "2", " -", " lon", "1", ")", "\n", "        ", "a", " =", " math", ".", "sin", "(", "d", "lat", " /", " ", "2", ")", " **", " ", "2", " +", " math", ".", "cos", "(", "math", ".", "rad", "ians", "(", "lat"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -0.40404582023620605, -0.00036244976217858493, -0.0025720868725329638, -0.2449832707643509, -0.0036020891275256872, -2.0593605041503906, -1.1307146549224854, -0.05579140782356262, -0.0013178244698792696, -0.000750736624468118, -0.010231662541627884, -0.013609598390758038, -0.0033890926279127598, -0.018444571644067764, -0.020852500572800636, -0.012291516177356243, -0.05548764020204544, -0.0019299230771139264, -3.205221176147461, -0.31358736753463745, -0.10567808896303177, -0.3146119713783264, -0.0008303055074065924, -9.536697689327411e-06, -0.2969258725643158, -0.0006328010931611061, -0.6078417897224426, -0.10546977818012238, -0.4388982057571411, -1.0668944120407104, -0.3338896334171295, -0.0024121494498103857, -0.0022149572614580393, -0.0021415650844573975, -8.332382276421413e-05, -0.0014403217937797308, -1.0414190292358398, -0.3048456609249115, -0.0010826685465872288, -1.0288453102111816, -1.3990601301193237, -0.0018892312655225396, -0.0008189899963326752, -0.5083310604095459, -0.011056703515350819, -0.006348087452352047, -0.331219881772995, -0.06054697930812836, -0.0057437848299741745, -0.017892032861709595, -7.676783570786938e-05, -0.004378138110041618, -0.0017528659664094448, -6.031808152329177e-05, -0.0006224363460205495, -0.00020466140995267779, -3.099436753473128e-06, -0.015794765204191208, -0.005089660175144672, -0.008360506035387516, -0.5323967337608337, -0.015137908980250359, -2.2411095415009186e-05, -0.27274519205093384, -0.0048188501968979836, -0.05042365565896034, -0.1132846251130104, -0.013064972124993801, -1.105048418045044, -1.311301275563892e-06, -5.340433563105762e-05, -0.04347141459584236, -1.3342595100402832, -2.4006407260894775, -0.0362132303416729, -0.012239821255207062, -0.2785242795944214, -0.29563018679618835, -1.4909589290618896, -0.967528223991394, -0.20950700342655182, -0.00031990656862035394, -0.0028461208567023277, -1.1114447116851807, -0.02805827371776104, -0.7149467468261719, -0.002079825848340988, -0.10890765488147736, -0.005599409341812134, -0.0004366874636616558, -0.009751186706125736, -0.00708898575976491, -0.00024041623692028224, -0.19909913837909698, -0.015158222056925297, -0.014745771884918213, -0.2477651685476303, -0.00030048147891648114, -0.02701859176158905, -1.0740967988967896, -0.007163080852478743, -4.172316494077677e-06, -0.6742565035820007, -0.0019045800436288118, -3.85038583772257e-05, -0.0007789676310494542, -3.373566141817719e-05, -2.6940935640595853e-05, -7.1403817855753e-05, -5.960446742392378e-06, -6.723177648382261e-05, -8.070142939686775e-05, -3.981510963058099e-05, -2.0146166207268834e-05, -7.962863310240209e-05, -0.0007969540893100202, -0.0002693767019081861, -5.781483559985645e-05, -4.9470632802695036e-05, -8.511180931236595e-05, -3.4450891689630225e-05, -2.455681169521995e-05, -3.564294092939235e-05, -7.748573807475623e-06, -3.85038583772257e-05, -1.1920922133867862e-06, -5.066266385256313e-05, -1.0490362910786644e-05, -5.125868119648658e-05, -0.00016950124700088054, -6.19869097135961e-05, -2.13382354559144e-05, -4.51792984677013e-05, -7.86750388215296e-05, -7.974783511599526e-05, -2.4199192921514623e-05, -2.8132995794294402e-05, -1.3351351299206726e-05, -0.00037698791129514575, -3.0517112463712692e-05, -3.6954195820726454e-05, -1.5735502529423684e-05, -4.303362584323622e-05, -0.00020656836568377912, -0.0007602662080898881, -0.000501983508002013, -0.006344771012663841, -0.00017438798386137933, -0.0063980743288993835, -0.00035386974923312664, -0.0008582960581406951, -0.00032443503732793033, -0.008922350592911243, -0.00151078961789608, -1.955955147743225, -0.2673022150993347, -1.4002143144607544, -0.5526856184005737, -0.09308197349309921, -0.028260402381420135, -0.0065587968565523624, -0.06651630997657776, -0.002081967191770673, -0.6493797302246094, -0.002398592187091708, -1.1920922133867862e-06, -4.529942543740617e-06, -0.00020692592079285532, -0.04408665746450424, -2.3149003982543945, -0.8153384327888489, -0.04264197126030922, -0.07560238987207413, -1.1920858014491387e-05, -5.1616290875244886e-05, -1.4305104514278355e-06, -0.0007023728103376925, -0.0025383178144693375, -0.0028101024217903614, -0.026100128889083862, -4.362964682513848e-05, -4.410734163684538e-06, -3.361645576660521e-05, -0.00783347524702549, -1.9073304429184645e-05, -0.03622012957930565, -4.291525328881107e-06, -2.109982233378105e-05, -3.2782016205601394e-05, -2.3841855067985307e-07, -2.861018856492592e-06, -7.986990567587782e-06, -4.51792984677013e-05, -1.9073304429184645e-05, -0.00011336160969221964, -7.688703772146255e-05, -3.290122185717337e-05, -2.455681169521995e-05, -4.0531076592742465e-06, -6.353653589030728e-05, -0.07007772475481033, -0.25963252782821655, -0.0006325627909973264, -0.06546361744403839, -2.0265558760002023e-06, -0.0019474128494039178, -0.00012861855793744326, -0.00047267231275327504, -3.576278118089249e-07, -0.5143384337425232, -1.2993727978027891e-05, -4.887569048150908e-06, -1.0290803909301758, -0.027921605855226517, -8.046303264563903e-05, -7.152555099310121e-07, -0.00047600860125385225, -0.04083649069070816, -2.3841830625315197e-06, -9.464769391342998e-05, -5.972207145532593e-05, -0.0035628906916826963, -5.960462772236497e-07, -7.045020902296528e-05, -7.152555099310121e-07, -2.3603161025675945e-05, -0.003143728245049715], "finish_reason": "length"}], "metrics": {"energy": 1068.6383470935814, "energy_per_token": 4.174368543334302, "time": 23.59515, "time_per_token": 0.0921685546875}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # define the radius of earth in kilometers\n    RADIUS_KM = 6371\n\n    # calculate the distance between target and each point in the dataset using the Haversine formula\n    data['distance'] = data[['Latitude', 'Longitude']].apply(lambda x: distance(target[0], target[1], x['Latitude'], x['Longitude']), axis=1)\n\n    # sort the dataset by distance and return the top 'k' nearest neighbors\n    nearest_neighbors = data.nlargest(k, 'distance')[['Latitude', 'Longitude']].values.tolist()\n    return nearest_neighbors", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " define", " the", " radius", " of", " earth", " in", " kilometers", "\n", "    ", "R", "AD", "I", "US", "_", "KM", " =", " ", "6", "3", "7", "1", "\n", "\n", "    ", "#", " calculate", " the", " distance", " between", " target", " and", " each", " point", " in", " the", " dataset", " using", " the", " Ha", "vers", "ine", " formula", "\n", "    ", "data", "['", "distance", "']", " =", " data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "apply", "(", "lambda", " x", ":", " distance", "(", "target", "[", "0", "]", ",", " target", "[", "1", "]", ",", " x", "['", "Lat", "itude", "']", ",", " x", "['", "Long", "itude", "'])", ",", " axis", "=", "1", ")", "\n", "\n", "    ", "#", " sort", " the", " dataset", " by", " distance", " and", " return", " the", " top", " '", "k", "'", " nearest", " neighbors", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", " =", " data", ".", "nl", "arg", "est", "(", "k", ",", " '", "distance", "')", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "    ", "return", " nearest", "_", "ne", "ighbors", "\n", "\n", "def"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -0.40404582023620605, -0.00036244976217858493, -0.0025720868725329638, -0.2449832707643509, -0.0036020891275256872, -0.8524742722511292, -4.543794631958008, -1.0949667692184448, -0.3445495665073395, -0.020087851211428642, -1.2284882068634033, -0.6360437870025635, -1.268734097480774, -0.10224155336618423, -0.0018544872291386127, -2.2584502696990967, -2.3687081336975098, -0.0033987159840762615, -0.0029424012172967196, -1.2212858200073242, -1.9956514835357666, -0.010883023962378502, -0.0020557953976094723, -0.0003771070914808661, -0.0022351776715368032, -0.0002851079625543207, -0.016833633184432983, -0.1343299150466919, -0.06917807459831238, -0.0014678190927952528, -0.17188960313796997, -0.9136962294578552, -0.3590758442878723, -0.30002284049987793, -0.4295465648174286, -1.7321624755859375, -0.13411498069763184, -0.7279424071311951, -0.6004147529602051, -0.15324543416500092, -0.4061391353607178, -0.34075042605400085, -2.661220073699951, -0.8735353350639343, -0.8421686291694641, -5.722029527532868e-06, -0.000342191313393414, -0.026060177013278008, -0.04781246557831764, -0.002456625225022435, -0.8749002814292908, -0.44530144333839417, -0.3536553382873535, -0.03407377377152443, -0.0009912106906995177, -1.695286512374878, -1.3497240543365479, -0.0032765772193670273, -0.010287709534168243, -0.00016973962192423642, -0.0007026110542938113, -0.0006058764411136508, -0.012316714972257614, -7.748303323751315e-05, -2.264974000354414e-06, -7.188061863416806e-05, -0.0077403848990798, -0.00466223806142807, -0.024027355015277863, -0.005555546842515469, -0.34827983379364014, -0.22522497177124023, -0.0033248167019337416, -2.568105936050415, -0.6266836524009705, -0.2951236665248871, -0.09915456175804138, -0.004890148062258959, -0.00018153927521780133, -0.0004471732536330819, -0.038381390273571014, -0.00022766382608097047, -0.00012361239350866526, -9.655486064730212e-05, -0.00017593742813915014, -0.012396899983286858, -0.9248102903366089, -0.0007153574260883033, -9.536697689327411e-06, -5.2569914259947836e-05, -0.00039498155820183456, -0.03791803866624832, -0.004135865718126297, -5.471556869451888e-05, -4.410734163684538e-06, -0.6530776619911194, -0.05777570232748985, -0.0019497923785820603, -0.01888076588511467, -0.00013529339048545808, -0.02107873558998108, -0.011283395811915398, -0.05675070732831955, -0.0009082006872631609, -0.008786468766629696, -0.29662036895751953, -0.03599085658788681, -0.4773130714893341, -0.12178247421979904, -0.18050478398799896, -0.7468691468238831, -1.2155296802520752, -0.011686082929372787, -1.1637599468231201, -0.27473965287208557, -0.0009827552130445838, -0.00031144535751082003, -0.36230623722076416, -0.00567491864785552, -0.08958567678928375, -0.000990377040579915, -0.6505782604217529, -0.1675650179386139, -0.3464621305465698, -0.043029941618442535, -0.001986555755138397, -0.0019895299337804317, -0.048746634274721146, -0.011190037243068218, -2.214996814727783, -3.814689989667386e-06, -7.092700980138034e-05, -0.0005684667266905308, -0.03544505313038826, -0.06796926259994507, -0.025912199169397354, -0.00033158526639454067, -0.04515877738595009, -0.5339890718460083, -0.0009834696538746357, -0.01425135973840952, -5.6265202147187665e-05, -0.00017557987303007394, -7.1403817855753e-05, -0.0048011732287704945, -2.062299427052494e-05, -7.152555099310121e-07, -0.001096481690183282, -0.0004198861715849489, -0.15844358503818512, -0.12865200638771057, -0.0230441652238369, -0.0005093707586638629, -9.536738616588991e-07, -0.017755374312400818, -0.00869063101708889, -1.387213945388794, -0.45384112000465393, -0.011305909603834152, -5.924526340095326e-05, -3.4689302992774174e-05, -3.4570634852570947e-06, -0.052783478051424026, -0.003987220581620932, -0.10371662676334381], "finish_reason": "stop"}], "metrics": {"energy": 766.7137280712128, "energy_per_token": 3.9521326189237773, "time": 17.723839, "time_per_token": 0.09135999484536084}}
{"outputs": [{"text": "# Check that k is a non-negative integer.\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n\n    # Calculate the distance between each point in the dataset and the target point.\n    # Define radius of the Earth (in km)\n    radius = 6371\n    distances = []\n\n    for point in data[['Latitude', 'Longitude']].values:\n        distance = np.radians(point[0] - target[0])\n        lat_diff = np.radians(point[0]) - np.radians(target[0])\n        lon_diff = np.radians(point[1]) - np.radians(target[1])\n\n        a = np.sin(lat_diff / 2) ** 2 + np.cos(np.radians(target[0])) * np.cos(np.radians(point[0])) * np.sin(lon_diff / 2) ** 2\n        c = 2 * np.arctan2", "tokens": ["#", " Check", " that", " k", " is", " a", " non", "-", "negative", " integer", ".", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " between", " each", " point", " in", " the", " dataset", " and", " the", " target", " point", ".", "\n", "    ", "#", " Define", " radius", " of", " the", " Earth", " (", "in", " km", ")", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "\n", "    ", "dist", "ances", " =", " []", "\n", "\n", "    ", "for", " point", " in", " data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ":", "\n", "        ", "distance", " =", " np", ".", "rad", "ians", "(", "point", "[", "0", "]", " -", " target", "[", "0", "])", "\n", "        ", "lat", "_", "diff", " =", " np", ".", "rad", "ians", "(", "point", "[", "0", "])", " -", " np", ".", "rad", "ians", "(", "target", "[", "0", "])", "\n", "        ", "lon", "_", "diff", " =", " np", ".", "rad", "ians", "(", "point", "[", "1", "])", " -", " np", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "\n", "        ", "a", " =", " np", ".", "sin", "(", "lat", "_", "diff", " /", " ", "2", ")", " **", " ", "2", " +", " np", ".", "cos", "(", "np", ".", "rad", "ians", "(", "target", "[", "0", "]))", " *", " np", ".", "cos", "(", "np", ".", "rad", "ians", "(", "point", "[", "0", "]))", " *", " np", ".", "sin", "(", "lon", "_", "diff", " /", " ", "2", ")", " **", " ", "2", "\n", "        ", "c", " =", " ", "2", " *", " np", ".", "ar", "ct", "an", "2"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -1.8788470029830933, -0.5602970719337463, -0.0039507681503891945, -0.05514203757047653, -0.11118605732917786, -0.002105521271005273, -0.0013105622492730618, -0.0032797851599752903, -2.6823551654815674, -0.03750167042016983, -0.0036007824819535017, -0.02613276243209839, -0.18166384100914001, -0.02448008395731449, -0.0001662831346038729, -0.0006468587671406567, -0.0005278385942801833, -0.013136273249983788, -0.022787030786275864, -0.008007803000509739, -0.005868111737072468, -0.01721229776740074, -0.00024351492174901068, -0.014161686412990093, -0.0015286438865587115, -0.0034445736091583967, -0.0035107426811009645, -0.006397482007741928, -0.0009371418273076415, -2.264974000354414e-06, -0.06575790047645569, -0.047584015876054764, -1.8388407230377197, -0.0006660388899035752, -0.0003066784702241421, -0.01384065207093954, -0.000597179401665926, -0.004795716144144535, -0.0034671451430767775, -0.0012690117582678795, -0.00017295771976932883, -0.0005623904871754348, -0.13842421770095825, -0.004674103576689959, -0.0003280101518612355, -0.0008554374799132347, -0.10437753051519394, -0.0024616196751594543, -0.13901269435882568, -1.1282724142074585, -0.300106018781662, -0.32484471797943115, -0.27309662103652954, -0.6880179643630981, -0.8017708659172058, -0.14681532979011536, -0.09950374066829681, -0.2864393889904022, -0.01912744529545307, -0.005268973298370838, -0.0032242953311651945, -1.1358168125152588, -0.2217918485403061, -0.016713008284568787, -0.006715822499245405, -2.469265937805176, -5.041154861450195, -1.4730491638183594, -0.0387885645031929, -1.934926152229309, -1.4787633419036865, -2.638457775115967, -0.69964200258255, -0.255315899848938, -0.05229293182492256, -0.4227718114852905, -0.008837751112878323, -0.23150815069675446, -0.09893646836280823, -0.0011182728921994567, -0.00017093151109293103, -0.0008155357209034264, -5.1973900554003194e-05, -0.018721075728535652, -0.30504539608955383, -1.0167044401168823, -2.733126401901245, -0.035945892333984375, -0.008495736867189407, -0.5008652806282043, -0.011951270513236523, -2.075225830078125, -0.0016174342017620802, -0.6490415334701538, -0.9709915518760681, -0.00820113718509674, -0.022917645052075386, -2.622285842895508, -0.013743886724114418, -0.008368072099983692, -0.00024184639914892614, -0.0004825619689654559, -0.00023135847004596144, -0.026567591354250908, -0.0001954841281985864, -1.7165990357170813e-05, -1.7404405298293568e-05, -0.11239054054021835, -7.056941103655845e-05, -0.060006897896528244, -0.13703568279743195, -0.02151903323829174, -0.039756860584020615, -2.5930094718933105, -0.03852546587586403, -2.4344611167907715, -0.00029380773776210845, -0.8290666341781616, -0.05929364264011383, -0.016129836440086365, -0.30703872442245483, -0.017263151705265045, -0.020108649507164955, -0.24378354847431183, -0.0004761277523357421, -0.0008476955117657781, -0.0001821352052502334, -0.0004366874636616558, -0.0014418693026527762, -0.45930495858192444, -0.010979359038174152, -1.687809705734253, -0.8110978603363037, -0.7829742431640625, -0.003946018870919943, -0.08910641819238663, -2.3841855067985307e-07, -0.06283559650182724, -1.0728830375228426e-06, -0.01756950095295906, -0.054262831807136536, -6.925819616299123e-05, -0.26270154118537903, -0.01729080267250538, -0.054340511560440063, -0.0016941969515755773, -2.3841574147809297e-05, -2.4914430468925275e-05, -0.0001714082609396428, -3.7788631743751466e-05, -0.0005090133054181933, -4.5060096454108134e-05, -0.006328542251139879, -0.00022837892174720764, -0.001669800141826272, -0.0013365155318751931, -0.3125998079776764, -0.00035375059815123677, -0.00012087091454304755, -0.0002461368858348578, -0.00048685140791349113, -2.3841855067985307e-07, -0.0002818902430590242, -6.318072337307967e-06, -6.83045873302035e-05, -0.00112255965359509, -0.0004903068183921278, -0.0006778326351195574, -0.18693487346172333, -0.0001802282058633864, -0.00028272447525523603, -2.145764938177308e-06, -2.098061486321967e-05, -0.0023123687133193016, -4.792098479811102e-05, -5.8887653722194955e-05, -3.9934315282152966e-05, -0.001644093543291092, -2.52720492426306e-05, -0.00014685506175737828, -1.5871798992156982, -0.008158689364790916, -0.14382418990135193, -0.0019928612746298313, -0.11160697788000107, -4.768370445162873e-07, -0.04755343869328499, -0.00032872517476789653, -0.009713881649076939, -0.00020203932945150882, -0.00025018901214934886, -0.20535658299922943, -0.0003813969960901886, -4.446407547220588e-05, -0.17028580605983734, -0.014258763752877712, -0.0010698077967390418, -2.50339189733495e-06, -0.00434490479528904, -0.08475659787654877, -1.5497195136049413e-06, -0.0007303669699467719, -0.00017069313616957515, -0.24290838837623596, -2.50339189733495e-06, -0.0032222752925008535, -3.3378546504536644e-06, -0.00045468006283044815, -1.1212084293365479, -0.0007488307310268283, -0.002509304089471698, -0.0007384672062471509, -0.011328186839818954, -0.015245692804455757, -2.264974000354414e-06, -0.0005876483046449721, -0.00011276562872808427, -0.03024451434612274, -4.6491513785440475e-06, -0.00010978573118336499, -6.198863957251888e-06, -0.00040975757292471826, -0.011427897028625011, -0.00010442188795423135, -0.003301885211840272, -0.005631296895444393, -0.0015788720920681953, -0.00690396036952734, -1.5497195136049413e-06, -2.95634672511369e-05, -9.035655966727063e-05, -0.009522020816802979, -9.894321920000948e-06, -4.327203714638017e-05, -0.00978010892868042, -0.0009716795175336301, -4.768360213347478e-06, -0.003913958556950092, -0.0011185110779479146, -0.0009091534884646535, -7.152555099310121e-07, -0.004854677710682154, -0.09484083950519562, -0.012140781618654728, -0.00016330339713022113, -0.001527096494100988, -7.557583012385294e-05, -0.0002619877050165087, -0.021240267902612686, 0.0, -0.018198776990175247, -0.003987339325249195, -5.960462772236497e-07, -0.0002044230350293219], "finish_reason": "length"}], "metrics": {"energy": 1054.49734384346, "energy_per_token": 4.119130249388515, "time": 23.807062, "time_per_token": 0.0929963359375}}
{"outputs": [{"text": "# Validate input data\n    if not isinstance(k, int):\n        raise ValueError(\"'k' must be an integer\")\n    if k < 0:\n        raise ValueError(\"'k' must be a non-negative integer\")\n    # Define radius of Earth in kilometers (assuming spherical Earth)\n    radius = 6371.0\n    # Calculate distances between target point and all points in data\n    distances = []\n    for i in range(len(data)):\n        d = geodistance(target[0], target[1], data['Latitude'].iloc[i], data['Longitude'].iloc[i], radius)\n        distances.append(d)\n    # Sort points by distance from target point\n    distances = np.array(distances)\n    indices = np.argsort(distances)\n    # Return the 'k' closest points\n    k = min(k, len(indices))  # Handle case where 'k' is greater than the number of points in data\n    closest_points = []\n    for i in range(k", "tokens": ["#", " Valid", "ate", " input", " data", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " an", " integer", "\"", ")", "\n", "    ", "if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "    ", "#", " Define", " radius", " of", " Earth", " in", " kilometers", " (", "assuming", " spherical", " Earth", ")", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", ".", "0", "\n", "    ", "#", " Calculate", " distances", " between", " target", " point", " and", " all", " points", " in", " data", "\n", "    ", "dist", "ances", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "data", "))", ":", "\n", "        ", "d", " =", " ge", "od", "istance", "(", "target", "[", "0", "]", ",", " target", "[", "1", "]", ",", " data", "['", "Lat", "itude", "']", ".", "il", "oc", "[", "i", "]", ",", " data", "['", "Long", "itude", "']", ".", "il", "oc", "[", "i", "]", ",", " radius", ")", "\n", "        ", "dist", "ances", ".", "append", "(", "d", ")", "\n", "    ", "#", " Sort", " points", " by", " distance", " from", " target", " point", "\n", "    ", "dist", "ances", " =", " np", ".", "array", "(", "dist", "ances", ")", "\n", "    ", "indices", " =", " np", ".", "args", "ort", "(", "dist", "ances", ")", "\n", "    ", "#", " Return", " the", " '", "k", "'", " closest", " points", "\n", "    ", "k", " =", " min", "(", "k", ",", " len", "(", "indices", "))", "  ", "#", " Handle", " case", " where", " '", "k", "'", " is", " greater", " than", " the", " number", " of", " points", " in", " data", "\n", "    ", "clos", "est", "_", "points", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "k"], "logprobs": [-1.1992313861846924, -2.526092767715454, -0.09537012875080109, -1.032954454421997, -3.3173513412475586, -0.8208764791488647, -0.00790290255099535, -0.21371334791183472, -0.295168936252594, -0.13540972769260406, -0.00040165462996810675, -0.9231263995170593, -0.0009435730753466487, -0.04729866236448288, -2.38673734664917, -0.012580323033034801, -0.005152755416929722, -0.03574853017926216, -0.034908510744571686, -9.298280929215252e-06, -0.10026934742927551, -0.04600776731967926, -1.7047187089920044, -0.002636886900290847, -0.0005421360838226974, -0.04877990111708641, -0.0017407278064638376, -0.2790426015853882, -0.010821349918842316, -0.9433233141899109, -0.00041368984966538846, -0.003396102227270603, -0.15631145238876343, -0.16071847081184387, -0.029372304677963257, -0.15258321166038513, -0.0007159530650824308, -0.04486726224422455, -0.017827628180384636, -0.0012412709183990955, -0.000985494232736528, -0.0004940004437230527, -0.00021705655672121793, -5.364403477869928e-06, -0.0020434230100363493, -0.0006037319544702768, -0.004042430780827999, -0.0003734129713848233, -0.0001230164198204875, -0.017040973529219627, -0.004499905277043581, -0.2228066623210907, -0.016709843650460243, -0.0023864619433879852, -0.0003387354372534901, -0.00362691399641335, -0.008262972347438335, -0.00028546550311148167, -0.00037496211007237434, -1.8099713325500488, -0.8644939661026001, -3.2107627391815186, -1.771158218383789, -0.02397405169904232, -1.7247004508972168, -0.2988809645175934, -0.14852336049079895, -3.0338070392608643, -2.096466302871704, -0.07479353994131088, -0.06881235539913177, -0.06235466152429581, -0.008136224001646042, -0.0023384150117635727, -0.43546798825263977, -0.2576175332069397, -0.001479841535910964, -0.0003106111544184387, -0.0013806821079924703, -0.0001811817055568099, -0.009035532362759113, -1.3529106378555298, -0.002151676220819354, -0.2527583837509155, -0.14819078147411346, -0.18038246035575867, -1.3471269607543945, -1.76243257522583, -1.2821340560913086, -0.19712789356708527, -2.571237087249756, -0.002978771459311247, -0.6172680854797363, -1.4123255014419556, -0.004787767305970192, -1.1562690734863281, -0.39165428280830383, -0.004626166541129351, -0.6541450023651123, -0.07182955741882324, -0.005383280571550131, -0.984397828578949, -0.016471359878778458, -0.007566601503640413, -0.07075956463813782, -0.7116684913635254, -0.3279174566268921, -0.04784712567925453, -0.001967043848708272, -0.045011889189481735, -0.00017128908075392246, -0.002373380120843649, -0.03777892515063286, -0.0002960720448754728, -0.0033390740863978863, -0.006973925977945328, -2.351438045501709, -1.3777546882629395, -2.9218459129333496, -0.11922289431095123, -0.1961342990398407, -0.2829558849334717, -0.1361430287361145, -0.39625105261802673, -0.012721811421215534, -0.0007582411635667086, -0.0015085280174389482, -0.03971286863088608, -9.655486064730212e-05, -8.987976616481319e-05, -0.0001578206429257989, -0.0003296785580459982, -0.021922634914517403, -0.8147284388542175, -0.019137853756546974, -0.0008024332928471267, -1.371873140335083, -0.002493250882253051, -0.09933613240718842, 0.0, -0.00024732868769206107, -0.0004191712068859488, -0.0005048430757597089, -0.0017472729086875916, -0.01963803917169571, -0.0009427393670193851, -0.0006093314150348306, -2.884823152271565e-05, -0.0004301338049117476, -4.815939246327616e-05, -6.0437283536884934e-05, -9.536738616588991e-07, -7.712543447269127e-05, -0.00021908267808612436, -0.24843953549861908, -0.0015824426664039493, -0.02728983759880066, -0.041850823909044266, -0.01062085572630167, -0.0033755486365407705, -0.040333859622478485, -0.00026472879108041525, -0.00039843725971877575, -0.00020275443966966122, -0.50661301612854, -0.01635526493191719, -0.003086091484874487, -0.003599475836381316, -0.04729695990681648, -0.12127986550331116, -0.5186908841133118, -1.1101229190826416, -0.1776168793439865, -0.20560778677463531, -0.5932857394218445, -0.008333669975399971, -0.4876769781112671, -0.16485337913036346, -0.0012998473830521107, -3.024653434753418, -0.02904164232313633, -0.8196122646331787, -0.1366330236196518, -1.585470999998506e-05, -0.03070102632045746, -0.0032067089341580868, -0.0011132716899737716, -1.7881233361549675e-05, -0.0075972434133291245, -0.011775507591664791, -0.0028135497123003006, -0.9900048971176147, -0.0016183863626793027, -0.17544205486774445, -2.3841830625315197e-06, -0.0013322297018021345, -2.3841855067985307e-07, -0.0002848696312867105, -0.0005754960584454238, -7.152555099310121e-07, -0.004480798728764057, -0.06378895044326782, -0.008731519803404808, -0.7243863344192505, -0.46230947971343994, -0.405132532119751, -0.7180530428886414, -0.0011438739020377398, -0.0012003129813820124, -1.2833391427993774, -0.22247394919395447, -0.5212832689285278, -0.0012491289526224136, -2.725050449371338, -1.7063709497451782, -0.19036094844341278, -0.0017489389283582568, -0.04871586710214615, -0.0009109399979934096, -0.03323096036911011, -3.015949550899677e-05, -0.7775828838348389, -0.006887622643262148, -1.2867916822433472, -0.0001294529065489769, -2.35640287399292, -0.26786407828330994, -0.0943286269903183, -1.2519807815551758, -0.005863607861101627, -0.001897679059766233, -0.31362274289131165, -1.107903003692627, -0.000577402301132679, -0.7502794861793518, -0.12368050962686539, -0.0001892864383989945, -0.5945600271224976, -0.7882622480392456, -0.5947074294090271, -0.010065747424960136, -0.0033736478071659803, -1.57610285282135, -2.2411095415009186e-05, -0.5572572946548462, -0.0851915255188942, -0.0025351073127239943, -0.5406004786491394, -0.001029319129884243, -0.0008330450509674847, -0.005777683109045029, -0.019399086013436317, -0.00032944019767455757, -0.07266640663146973, -2.7417760065873154e-05, -0.0036887952592223883], "finish_reason": "length"}], "metrics": {"energy": 1061.643300930023, "energy_per_token": 4.147044144257903, "time": 23.79639, "time_per_token": 0.0929546484375}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n\n    if k == 0:\n        return []\n\n    # constants\n    radius = 6371  # Radius of the Earth in kilometers\n\n    # Convert the latitude and longitude of the target point into radians\n    lat1, lon1 = math.radians(target[0]), math.radians(target[1])\n\n    # Calculate the distance from each data point to the target point\n    distances = np.zeros(len(data))\n    for i, (_, point) in enumerate(data.iterrows()):\n        lat2, lon2 = math.radians(point['Latitude']), math.radians(point['Longitude'])\n        distance = math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lon1 - lon2))\n        distances[i] = distance * radius\n\n    # Get the indices", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " k", " ==", " ", "0", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "#", " constants", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "  ", "#", " Rad", "ius", " of", " the", " Earth", " in", " kilometers", "\n", "\n", "    ", "#", " Convert", " the", " latitude", " and", " long", "itude", " of", " the", " target", " point", " into", " rad", "ians", "\n", "    ", "lat", "1", ",", " lon", "1", " =", " math", ".", "rad", "ians", "(", "target", "[", "0", "])", ",", " math", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " from", " each", " data", " point", " to", " the", " target", " point", "\n", "    ", "dist", "ances", " =", " np", ".", "zeros", "(", "len", "(", "data", "))", "\n", "    ", "for", " i", ",", " (_", ",", " point", ")", " in", " enumerate", "(", "data", ".", "iter", "rows", "()", "):", "\n", "        ", "lat", "2", ",", " lon", "2", " =", " math", ".", "rad", "ians", "(", "point", "['", "Lat", "itude", "'])", ",", " math", ".", "rad", "ians", "(", "point", "['", "Long", "itude", "'])", "\n", "        ", "distance", " =", " math", ".", "ac", "os", "(", "math", ".", "sin", "(", "lat", "1", ")", " *", " math", ".", "sin", "(", "lat", "2", ")", " +", " math", ".", "cos", "(", "lat", "1", ")", " *", " math", ".", "cos", "(", "lat", "2", ")", " *", " math", ".", "cos", "(", "lon", "1", " -", " lon", "2", "))", "\n", "        ", "dist", "ances", "[", "i", "]", " =", " distance", " *", " radius", "\n", "\n", "    ", "#", " Get", " the", " indices"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -1.1572272777557373, -0.005786098074167967, -0.0003947432560380548, -0.0022257810924202204, -0.21432805061340332, -0.0028139064088463783, -2.1483635902404785, -1.1425715684890747, -0.0570511668920517, -0.001258891774341464, -0.0007899263291619718, -0.012465540319681168, -0.012350980192422867, -0.003186864545568824, -0.018541935831308365, -0.019806815311312675, -0.014851131476461887, -0.05402783304452896, -0.0020272433757781982, -1.0196948051452637, -4.61721134185791, -0.15267275273799896, -0.002428798470646143, -0.5234955549240112, -0.49287211894989014, -0.00271428469568491, -0.0019913145806640387, -0.0030354636255651712, -0.00014161060971673578, -0.00462343730032444, -0.9931902885437012, -0.0002057340752799064, -2.0459752082824707, -0.0008280424517579377, -0.0008124388405121863, -0.3285291790962219, -0.19859151542186737, -0.0323638953268528, -0.1785403937101364, -0.04300059750676155, -0.1725434809923172, -0.0005031750188209116, -0.24957601726055145, -2.029491901397705, -1.6903055906295776, -3.0027363300323486, -0.08944299072027206, -0.0008652042597532272, -0.0024661386851221323, -1.2243372201919556, -0.1297493875026703, -0.0836164802312851, -1.0468093156814575, -2.432863473892212, -0.011532781645655632, -0.000339569611242041, -0.11222369223833084, -0.0011214879341423512, -1.7593704462051392, -0.43520504236221313, -0.29896122217178345, -0.0490461029112339, -2.777537883957848e-05, -0.0008523407159373164, -0.23352864384651184, -1.4543427823809907e-05, -1.5616295058862306e-05, -3.6954811548639555e-06, -0.0001282609737245366, -0.023146558552980423, -0.00047636605449952185, -0.005781120155006647, -0.0003513672563713044, -7.033100700937212e-05, -0.00040284625720232725, -1.1801649634435307e-05, -1.811964830267243e-05, -4.494089080253616e-05, -7.92710343375802e-05, -0.0008923601126298308, -3.969590397900902e-05, -0.0011208925861865282, -3.0397906812140718e-05, -0.0007787294453009963, -0.02355637401342392, -0.0006724718841724098, -0.03199542686343193, -0.601351261138916, -0.02863522805273533, -0.6361867189407349, -1.730327844619751, -2.345972776412964, -0.9250276684761047, -0.0034973190631717443, -0.0271376334130764, -0.0006646093097515404, -0.0012230543652549386, -0.15016569197177887, -0.4313707947731018, -0.0017739288741722703, -0.3085659444332123, -0.01107639167457819, -0.003115088678896427, -1.276219367980957, -3.790783375734463e-05, -0.6935350298881531, -0.03513319790363312, -0.17665565013885498, -2.312633478140924e-05, -0.00020954797219019383, -0.011545036919414997, -0.021337127313017845, -0.08294828981161118, -0.011792001314461231, -0.03603903576731682, -0.21506446599960327, -3.261058807373047, -0.04551832377910614, -1.7997641563415527, -0.004281402565538883, -4.565611743601039e-05, -0.00022671037004329264, -0.00013314791431184858, -0.00027164106722921133, -0.005756348837167025, -0.0033096084371209145, -3.85038583772257e-05, -0.00015627116954419762, -0.00026222606538794935, -0.005814305506646633, -0.0037934263236820698, -0.08885350823402405, -0.0048049697652459145, -0.01659107767045498, -0.0001560327800689265, -2.145764938177308e-06, -0.000270091783022508, -0.014171676710247993, -1.0728830375228426e-06, -1.883488948806189e-05, -7.033323527139146e-06, -0.00016389934171456844, -0.0071798874996602535, -0.14951907098293304, -0.0038561285473406315, -0.00015496007108595222, -0.0005158047424629331, -2.2053474822314456e-05, -0.001427346607670188, -1.3708974620385561e-05, -1.728519782773219e-05, -0.0056923432275652885, -2.8013790142722428e-05, -0.0061703892424702644, -0.00010871296399272978, -4.708655978902243e-05, -2.3841855067985307e-07, -3.6954195820726454e-05, -0.000935950840357691, -0.09691942483186722, -1.8110315799713135, -0.009634307585656643, -1.5223047733306885, -2.264974000354414e-06, -0.05544557422399521, -1.6689286894688848e-06, -0.0038453221786767244, -0.4167650043964386, -2.145764938177308e-06, -0.019423170015215874, -1.7881233361549675e-05, -4.95898348162882e-05, -0.0005779979983344674, -0.021324757486581802, -9.572047565598041e-05, -0.0006053998949937522, -1.1920928244535389e-07, -9.059865078597795e-06, -2.47952248173533e-05, -8.523101132595912e-05, -7.402622577501461e-05, -0.0001546025014249608, -0.010307295247912407, -0.6251847147941589, -8.34461570775602e-06, -1.7881377516459906e-06, -7.271740287251305e-06, -0.0001072826053132303, -4.255681051290594e-05, -0.000219321038457565, -0.0019828674849122763, -0.028992775827646255, -2.074220174108632e-05, -7.271740287251305e-06, -8.22540732769994e-06, -0.0009869233472272754, -3.373566141817719e-05, -0.00019226610311307013, -0.0009346407605335116, -0.0012000747956335545, -2.145764938177308e-06, -1.7881377516459906e-06, -9.035655966727063e-05, -0.012043027207255363, -0.10096432268619537, -0.006722216960042715, -0.00011157367407577112, -1.3947389561508317e-05, -0.0029086447320878506, -0.12365807592868805, -0.014689270406961441, -0.02175246551632881, -0.00011932138295378536, -5.745722592109814e-05, -1.5258672647178173e-05, -3.373566141817719e-05, -0.00013672371278516948, -0.2799642086029053, -0.36163124442100525, -0.0031279230024665594, -0.279705673456192, -0.009954098612070084, -0.000846147071570158, -0.020038194954395294, -1.8155364990234375, -0.01239795982837677, -0.3177220821380615], "finish_reason": "length"}], "metrics": {"energy": 1038.3385856666566, "energy_per_token": 4.0560101002603774, "time": 23.595793, "time_per_token": 0.09217106640625}}
{"outputs": [{"text": "# Validate input\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Calculate distances from target to all points in dataset\n    distances = [distance(target, point) for point in data[['Latitude', 'Longitude']].values]\n    data['distance'] = distances\n\n    # Sort dataset by distances and get the 'k' nearest neighbors\n    nearest_neighbors = data.nsmallest(k, 'distance')\n\n    # Return the 'k' nearest neighbors as list of lists\n    return nearest_neighbors[['Latitude', 'Longitude']].values.tolist()", "tokens": ["#", " Valid", "ate", " input", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " distances", " from", " target", " to", " all", " points", " in", " dataset", "\n", "    ", "dist", "ances", " =", " [", "distance", "(", "target", ",", " point", ")", " for", " point", " in", " data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", "]", "\n", "    ", "data", "['", "distance", "']", " =", " distances", "\n", "\n", "    ", "#", " Sort", " dataset", " by", " distances", " and", " get", " the", " '", "k", "'", " nearest", " neighbors", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", " =", " data", ".", "nsmall", "est", "(", "k", ",", " '", "distance", "')", "\n", "\n", "    ", "#", " Return", " the", " '", "k", "'", " nearest", " neighbors", " as", " list", " of", " lists", "\n", "    ", "return", " nearest", "_", "ne", "ighbors", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "\n", "def"], "logprobs": [-1.1992313861846924, -2.526092767715454, -0.09537012875080109, -1.032954454421997, -0.8884133100509644, -0.010251722298562527, -0.09268610924482346, -0.3346478343009949, -0.03716633468866348, -0.0002954761730507016, -0.03454570099711418, -0.0003718638326972723, -0.02357814647257328, -0.061855897307395935, -0.00664690462872386, -0.007308651227504015, -0.03752784803509712, -0.0005059154354967177, -0.041178148239851, -0.003201718209311366, -0.004517112858593464, -0.004092058166861534, -0.009538315236568451, -0.001932302606292069, -2.539125671319198e-05, -0.049560368061065674, -0.03235650807619095, -0.4902540445327759, -0.015674952417612076, -0.0005691815749742091, -0.008107963018119335, -0.010524839162826538, -0.002003330737352371, -0.0004101150552742183, -0.0005459486856125295, -0.602059006690979, -0.00025674383505247533, -0.0019527667900547385, -0.0830434113740921, -0.00279357866384089, -0.15735964477062225, -1.4670487642288208, -1.7387495040893555, -1.030809760093689, -0.1212715208530426, -0.24818268418312073, -0.6534082293510437, -0.9551176428794861, -0.3771037757396698, -1.4289551973342896, -0.045206859707832336, -0.003674423787742853, -0.4930046498775482, -0.03555285558104515, -0.0035321249160915613, -2.118278980255127, -2.035792589187622, -0.6150866150856018, -0.26294469833374023, -0.14861346781253815, -0.309068500995636, -0.032502032816410065, -0.01114311907440424, -0.008214852772653103, -0.0001517419150331989, -0.1335734724998474, -0.5809133052825928, -0.004514146130532026, -0.005900227930396795, -0.0001774868869688362, -9.262132516596466e-05, -4.6132929128361866e-05, -0.007777172606438398, -3.433168603805825e-05, -5.960462772236497e-07, -3.099436753473128e-06, -0.013840299099683762, -0.00019131260341964662, -0.01739378646016121, -0.10232969373464584, -0.005824142601341009, -1.7931432723999023, -1.1261577606201172, -0.11616875231266022, -0.9459331035614014, -0.002730334410443902, -0.0007815881981514394, -0.007669763173907995, -0.08630906790494919, -0.035141829401254654, -0.0007784912013448775, -0.002201516181230545, -0.15925849974155426, -1.1866216659545898, -0.04808085411787033, -1.1156253814697266, -1.3549410104751587, -1.9070091247558594, -0.22324158251285553, -0.3915315568447113, -0.0005765683017671108, -0.0006358985556289554, -0.09455195814371109, -0.007155505940318108, -0.031470198184251785, -0.0007468056865036488, -0.3273107707500458, -0.41790086030960083, -0.4070334732532501, -0.0635320171713829, -0.0011847150744870305, -0.0019205235876142979, -0.06864263862371445, -0.005904612597078085, -2.4471681118011475, -2.3841855067985307e-07, -0.00822100043296814, -0.012068231590092182, -0.01623915508389473, -0.00797670055180788, -1.537788011773955e-05, -0.004059408791363239, -1.283813238143921, -0.4366963505744934, -0.000476246903417632, -0.20948612689971924, -0.3703617453575134, -0.5012643933296204, -0.4607321321964264, -0.00012659224739763886, -0.0002172949316445738, -0.0030282139778137207, -0.0051397099159657955, -0.8664253354072571, -1.773024082183838, -0.2601347267627716, -1.6934462785720825, -0.11779405921697617, -0.001189477858133614, -0.06981617212295532, -0.08715421706438065, -5.602820692729438e-06, -9.536738616588991e-07, -3.576278118089249e-07, -0.04283123463392258, -7.283422019099817e-05, -0.0021051643416285515, -1.2755313036905136e-05, -3.755022044060752e-05, -4.7205765440594405e-05, -0.0023648173082619905, -7.1403817855753e-05, -1.1920922133867862e-06, -3.886147169396281e-05, -4.2437604861333966e-05, -0.0012044801842421293, -0.005089778918772936, -0.006169323343783617, -9.297892393078655e-05, -2.3841855067985307e-07, -0.0006394725642167032, -0.01707976497709751, -0.0027348517905920744, -0.14091727137565613], "finish_reason": "stop"}], "metrics": {"energy": 698.7897300586699, "energy_per_token": 4.260912988162621, "time": 15.052745, "time_per_token": 0.09178503048780488}}
{"outputs": [{"text": "try:\n        # Check if the 'k' value is a negative integer or not an integer.\n        if not isinstance(k, int) or k < 0:\n            raise ValueError(\"k should be a non-negative integer.\")\n\n        # Get the number of rows in the data set.\n        row_count = len(data)\n\n        # Calculate the distance between the target and each point in the dataset.\n        distances = np.zeros(row_count)\n        for i in range(row_count):\n            lat1, lon1 = data['Latitude'].iloc[i], data['Longitude'].iloc[i]\n            lat2, lon2 = target[0], target[1]\n            distance = calculate_distance(lat1, lon1, lat2, lon2)\n            distances[i] = distance\n\n        # Get the indices of the 'k' nearest neighbors.\n        nearest_indices = np.argsort(distances)[:k]\n\n        # Get the coordinates of the nearest neighbors and return them as a list.\n        nearest_coords =", "tokens": ["try", ":", "\n", "        ", "#", " Check", " if", " the", " '", "k", "'", " value", " is", " a", " negative", " integer", " or", " not", " an", " integer", ".", "\n", "        ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "k", " should", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "        ", "#", " Get", " the", " number", " of", " rows", " in", " the", " data", " set", ".", "\n", "        ", "row", "_", "count", " =", " len", "(", "data", ")", "\n", "\n", "        ", "#", " Calculate", " the", " distance", " between", " the", " target", " and", " each", " point", " in", " the", " dataset", ".", "\n", "        ", "dist", "ances", " =", " np", ".", "zeros", "(", "row", "_", "count", ")", "\n", "        ", "for", " i", " in", " range", "(", "row", "_", "count", "):", "\n", "            ", "lat", "1", ",", " lon", "1", " =", " data", "['", "Lat", "itude", "']", ".", "il", "oc", "[", "i", "]", ",", " data", "['", "Long", "itude", "']", ".", "il", "oc", "[", "i", "]", "\n", "            ", "lat", "2", ",", " lon", "2", " =", " target", "[", "0", "]", ",", " target", "[", "1", "]", "\n", "            ", "distance", " =", " calculate", "_", "distance", "(", "lat", "1", ",", " lon", "1", ",", " lat", "2", ",", " lon", "2", ")", "\n", "            ", "dist", "ances", "[", "i", "]", " =", " distance", "\n", "\n", "        ", "#", " Get", " the", " indices", " of", " the", " '", "k", "'", " nearest", " neighbors", ".", "\n", "        ", "ne", "arest", "_", "indices", " =", " np", ".", "args", "ort", "(", "dist", "ances", ")", "[:", "k", "]", "\n", "\n", "        ", "#", " Get", " the", " coordinates", " of", " the", " nearest", " neighbors", " and", " return", " them", " as", " a", " list", ".", "\n", "        ", "ne", "arest", "_", "co", "ords", " ="], "logprobs": [-3.315391778945923, -0.0011025547282770276, -0.007548026740550995, -0.0706612691283226, -1.238795280456543, -0.9105390906333923, -0.5729124546051025, -2.579530954360962, -2.4860341548919678, -0.0166001059114933, -0.0016947920667007565, -1.424572467803955, -0.013835831545293331, -0.34845542907714844, -0.9027122855186462, -0.024213312193751335, -0.20893993973731995, -0.06152370199561119, -0.022478895261883736, -0.001680272980593145, -1.6755064725875854, -0.07956792414188385, -0.004153079353272915, -0.04589732736349106, -0.5803975462913513, -0.03610871732234955, -0.00026806574896909297, -0.0018581758486106992, -0.0006906984490342438, -0.026094090193510056, -0.020813273265957832, -0.008704575709998608, -0.015251914970576763, -0.04355119168758392, -0.0006379238329827785, -0.027445033192634583, -0.0030946482438594103, -0.0026255918201059103, -0.00394958071410656, -0.02032185159623623, -0.019491447135806084, -1.9073468138230965e-06, -0.07978390157222748, -0.05083535984158516, -1.0622293949127197, -2.995572090148926, -0.0057287318632006645, -0.055654194205999374, -0.03503386676311493, -0.00923988875001669, -0.000771820661611855, -0.0025001477915793657, -0.48806580901145935, -0.00805013906210661, -0.00029845553217455745, -0.0030434264335781336, -0.12916485965251923, -0.015636693686246872, -0.12832754850387573, -3.0719594955444336, -0.10893727093935013, -0.9355049729347229, -0.00046266341814771295, -0.14818717539310455, -0.05843449756503105, -0.020424406975507736, -0.749657928943634, -1.8868751525878906, -0.18202969431877136, -0.011222690343856812, -0.0006093314150348306, -3.322737693786621, -0.19247597455978394, -0.38942816853523254, -0.0030648186802864075, -0.5855536460876465, -9.512448741588742e-05, -0.002678618300706148, -0.21696893870830536, -0.007802012376487255, -0.05304183438420296, -0.003419506596401334, -0.02078641951084137, -2.048142910003662, -0.09125309437513351, -0.33917462825775146, -0.3282550871372223, -0.6198503375053406, -0.048125844448804855, -0.49686819314956665, -0.2038174718618393, -0.9750336408615112, -0.03711705654859543, -0.0040710438042879105, -1.144248127937317, -0.17888276278972626, -0.011563891544938087, -0.005760496947914362, -0.4201921224594116, -0.04870383068919182, -0.009042857214808464, -1.0702358484268188, -0.00016592556494288146, -1.2183691263198853, -0.029233962297439575, -0.0024441389832645655, -2.145764938177308e-06, -2.3841855067985307e-07, -0.03079870715737343, -0.04280725121498108, -0.10408376902341843, -0.044243600219488144, -0.09620040655136108, -0.06851685792207718, -0.002948581939563155, -0.0015279296785593033, -0.017623966559767723, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.0002051381452474743, -0.0009243983076885343, -0.005755400285124779, -1.0283310413360596, -0.1594778597354889, -0.36221522092819214, -0.07004193216562271, -4.1126360883936286e-05, -0.009984195232391357, -1.400189757347107, -2.171543598175049, -0.005672666244208813, -0.0005448763840831816, -0.8496711254119873, -0.022278975695371628, -0.12610146403312683, 0.0, -0.00017975145601667464, -0.0005349873681552708, -0.0001641377166379243, -0.002508709440007806, -0.001383896335028112, -0.0005888396990485489, -0.0010838593589141965, -2.9802276912960224e-06, -6.139089964563027e-05, -9.381330892210826e-05, -5.149708886165172e-05, -2.5152843591058627e-05, -2.8967437174287625e-05, -0.0003502947511151433, -2.1576648578047752e-05, -0.0061109126545488834, -0.0021146810613572598, -0.032238662242889404, -0.005624895915389061, -0.0010305099422112107, -0.000399033073335886, -9.775113539944869e-06, -0.0004589696181938052, -0.006307220086455345, -0.19422277808189392, -0.0026580500416457653, -0.00010740180005086586, -0.0007245299639180303, -0.0013162767281755805, -8.904537389753386e-05, -0.00019071667338721454, -2.5987286790041253e-05, -0.004880539141595364, -0.13684794306755066, -1.394327163696289, -0.04442458227276802, -1.5764504671096802, -0.009171262383460999, -0.1251472532749176, -0.06489669531583786, -0.0016527815023437142, -0.0002613918040879071, -0.0009176096064038575, -0.00886433757841587, -7.259582343976945e-05, -7.056941103655845e-05, -0.0003943857445847243, -5.209310256759636e-05, -6.270212179515511e-05, -0.00031740395934320986, -7.152531907195225e-06, -0.011387472040951252, -0.02156675234436989, -0.011335141025483608, -0.00610202644020319, -3.576278118089249e-07, -0.0001419681793777272, -4.7205765440594405e-05, -0.00031990656862035394, -0.0006302992696873844, -0.002382299629971385, -0.004773411434143782, -0.012132537551224232, -0.008887259289622307, -0.006895436439663172, -1.620185375213623, -0.018013687804341316, -0.4953295886516571, -0.013058030046522617, -0.010129355825483799, -0.33271363377571106, -0.0009012927766889334, -0.000849601230584085, -0.2893220782279968, -0.012359458021819592, -0.40502193570137024, -0.010363809764385223, -0.0006759266252629459, -1.0622920989990234, -0.10256286710500717, -0.03776445984840393, -0.05062675103545189, -0.000387831823900342, -0.4131568670272827, -6.318072337307967e-06, -1.0311334133148193, -4.768370445162873e-07, -3.838465272565372e-05, -0.00036221143091097474, -2.3841855067985307e-07, -0.01856241375207901, -0.003931413404643536, -0.0032289293594658375, -0.0005987281911075115, -0.0030282139778137207, -0.059433165937662125, -0.0013948483392596245, -0.00525664072483778, -0.6602782607078552, -0.005142674781382084, -0.7363191843032837, -0.015039859339594841, -0.002308919792994857, -1.89913809299469, -0.040045060217380524, -2.6615357398986816, -0.6072118282318115, -0.1930951029062271, -0.5732418894767761, -0.06964851170778275, -0.021981295198202133, -0.23149433732032776, -0.0023411503061652184, -0.00033408781746402383, -0.0556943342089653, -0.08944190293550491, -0.05475534871220589, -2.2730133533477783, -1.8245351314544678, -0.005146706942468882], "finish_reason": "length"}], "metrics": {"energy": 1041.314861602783, "energy_per_token": 4.067636178135871, "time": 23.779675, "time_per_token": 0.09288935546875}}
{"outputs": [{"text": "if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer\")\n\n    radius_of_earth = 6371\n    lat, lon = target\n\n    def calculate_distance(lat1, lon1):\n        lat1, lon1 = map(math.radians, [lat1, lon1])\n        lat2, lon2 = map(math.radians, [lat, lon])\n\n        distance = (math.sin((lat2 - lat1) / 2) ** 2 +\n                    math.cos(lat1) * math.cos(lat2) *\n                    math.sin((lon2 - lon1) / 2) ** 2)\n\n        return radius_of_earth * 2 * math.atan2(math.sqrt(distance), math.sqrt(1 - distance))\n\n    data[\"distance\"] = data[['Latitude', 'Longitude']].apply(lambda x: calculate_distance(*x)", "tokens": ["if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " an", " integer", "\"", ")", "\n", "\n", "    ", "radius", "_", "of", "_", "earth", " =", " ", "6", "3", "7", "1", "\n", "    ", "lat", ",", " lon", " =", " target", "\n", "\n", "    ", "def", " calculate", "_", "distance", "(", "lat", "1", ",", " lon", "1", "):", "\n", "        ", "lat", "1", ",", " lon", "1", " =", " map", "(", "math", ".", "rad", "ians", ",", " [", "lat", "1", ",", " lon", "1", "])", "\n", "        ", "lat", "2", ",", " lon", "2", " =", " map", "(", "math", ".", "rad", "ians", ",", " [", "lat", ",", " lon", "])", "\n", "\n", "        ", "distance", " =", " (", "math", ".", "sin", "((", "lat", "2", " -", " lat", "1", ")", " /", " ", "2", ")", " **", " ", "2", " +", "\n", "                ", "    ", "math", ".", "cos", "(", "lat", "1", ")", " *", " math", ".", "cos", "(", "lat", "2", ")", " *", "\n", "                ", "    ", "math", ".", "sin", "((", "lon", "2", " -", " lon", "1", ")", " /", " ", "2", ")", " **", " ", "2", ")", "\n", "\n", "        ", "return", " radius", "_", "of", "_", "earth", " *", " ", "2", " *", " math", ".", "atan", "2", "(", "math", ".", "sqrt", "(", "distance", ")", ",", " math", ".", "sqrt", "(", "1", " -", " distance", "))", "\n", "\n", "    ", "data", "[", "\"", "distance", "\"", "]", " =", " data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "apply", "(", "lambda", " x", ":", " calculate", "_", "distance", "(*", "x", ")"], "logprobs": [-0.7325347065925598, -1.4926776885986328, -0.08184707909822464, -0.0009178477921523154, -0.010852482169866562, -0.9594210386276245, -0.018395651131868362, -0.005728020798414946, -0.014392847195267677, -0.0015704215038567781, -2.5033637939486653e-05, -0.11626756191253662, -0.014431740157306194, -0.5219971537590027, -0.10277457535266876, -0.007480349391698837, -0.23591649532318115, -0.031370848417282104, -0.004152960609644651, -0.00082923355512321, -0.004274873994290829, -0.28571149706840515, -0.00037651124875992537, -0.0032397424802184105, -1.4675606489181519, -0.0014193708775565028, -0.6991796493530273, -0.37621980905532837, -0.023935526609420776, -0.00019774865359067917, -0.00485894875600934, -0.0007711059297434986, -0.007633090019226074, -0.005838483106344938, -0.0024462793953716755, -0.0021018334664404392, -0.010645506903529167, -0.006222991272807121, -4.291525328881107e-06, -0.0023983544670045376, -0.0012954423436895013, -0.001716689090244472, -0.004084103740751743, -0.0005310555570758879, -0.0867321714758873, -0.0012457951670512557, -0.011478337459266186, -9.452849917579442e-05, -0.0005664412747137249, -0.03119604103267193, -0.002883326727896929, -2.154728889465332, -1.402741551399231, -0.5287629961967468, -0.0001234931987710297, -0.00886327400803566, -0.047063615173101425, -0.0029343189671635628, -0.0013229437172412872, -0.0015397133538499475, -0.00018380382971372455, -0.005280713085085154, -0.751266360282898, -0.861044704914093, -2.191612482070923, -2.435260057449341, -0.11849581450223923, -0.0028386320918798447, -0.9879539012908936, -0.15915806591510773, -0.7048324942588806, -0.0011250602547079325, -1.5479071140289307, -1.1614376306533813, -0.007490051444619894, -0.07090682536363602, -0.04952747002243996, -0.987457275390625, -0.2654117941856384, -0.006147760432213545, -0.036522336304187775, -0.0015881556319072843, -2.7858197689056396, -0.013188744895160198, -0.016145318746566772, -1.6330933570861816, -0.4953058362007141, -0.2545986771583557, -0.0008553183870390058, -4.4225667807040736e-05, -0.009780699387192726, -1.7462012767791748, -0.0002809368306770921, -0.06456383317708969, -6.41325386823155e-05, -0.0073847416788339615, -3.909988299710676e-05, -0.0008772339206188917, -0.02371319755911827, -0.0022897711023688316, -0.02893626131117344, -0.00022182388056535274, -0.000783613184466958, -0.00013696208770852536, -0.0011364913079887629, -0.012220626696944237, -0.03986763581633568, -0.09971275925636292, -0.12563319504261017, -0.0016886036610230803, -0.0002708068350329995, -7.688703772146255e-05, -0.001042656716890633, -0.01219954714179039, -6.9141146923357155e-06, -0.0003573255962692201, -4.351044481154531e-05, -1.8596476365928538e-05, -1.4305104514278355e-06, -1.8000440832111053e-05, -0.0013754441170021892, -0.0034459992311894894, -0.008348566479980946, -0.0005670370301231742, -0.0001932195882545784, -0.0033993099350482225, -0.7869314551353455, -0.0009477414423599839, -1.14821457862854, -0.09257755428552628, -1.2288670539855957, -1.5726062059402466, -1.1205610462639015e-05, -0.018228275701403618, -0.8170417547225952, -0.0012647256953641772, -0.012302938848733902, -0.07610516995191574, -0.00017569905321579427, -0.00016866691294126213, -0.05171792209148407, -0.0008033862104639411, -0.0004752936656586826, -0.00016926287207752466, -0.18869946897029877, -0.0009367844904772937, -0.001587679609656334, -6.794906312279636e-06, -0.1168338879942894, -0.3601066470146179, -0.03529742360115051, -0.04838324710726738, -0.0032511495519429445, -6.318072337307967e-06, -0.00032145579461939633, -0.00024923557066358626, -9.548207890475169e-05, -0.003147649811580777, -0.0018866135505959392, -0.0006242233794182539, -0.010354961268603802, -1.1801649634435307e-05, -1.764281842042692e-05, -0.00011896379146492109, -4.434487345861271e-05, -0.0007669368060305715, -0.0007976687629707158, -0.0011389919091016054, -0.7945509552955627, -0.00021741411183029413, -0.0007596705690957606, -0.006931308191269636, -4.0531076592742465e-06, -1.4543427823809907e-05, -0.002837918698787689, -1.3708974620385561e-05, -6.353653589030728e-05, -0.0011522090062499046, -0.0001941730733960867, -0.0002351722796447575, -0.002452106447890401, -9.059495641849935e-05, -0.00029583368450403214, -7.748573807475623e-06, -0.003563959849998355, -0.0002236116270069033, -0.0010626628063619137, -9.536738616588991e-07, -0.016918731853365898, -0.031447671353816986, -0.6451464891433716, -0.00041571559268049896, -1.151320219039917, -0.33883199095726013, -7.629365427419543e-06, -2.861018856492592e-06, -4.768370445162873e-07, -2.3483953555114567e-05, -0.0017585780005902052, -0.10851319134235382, -0.0006355411605909467, -0.0008015995263122022, -0.057373933494091034, -2.9802276912960224e-06, -0.4408152401447296, -0.0002549561613705009, -0.00016473367577418685, -0.008689094334840775, -2.0265558760002023e-06, -5.483612312673358e-06, -3.969590397900902e-05, -0.0004542034293990582, -0.00017128908075392246, -0.0002571013756096363, -0.1013750210404396, -7.748573807475623e-06, -7.152531907195225e-06, -0.0026515109930187464, -0.009317249990999699, -0.003257803386077285, -0.00035565727739594877, -0.000886285852175206, -0.01718897931277752, -0.01655367575585842, -0.001101244823075831, -0.8158029317855835, -1.299936294555664, -0.0009951406391337514, -0.5383290648460388, -0.044157832860946655, -0.00032824851223267615, -0.00010275312524754554, -0.03218960389494896, -1.0318760871887207, -0.4004726707935333, -0.006618365179747343, -0.00016008525562938303, -0.00023934361524879932, -0.00024256148026324809, -0.033054400235414505, -0.0001431601122021675, -8.344646857949556e-07, -2.52720492426306e-05, -0.004736038856208324, -0.004420509096235037, -0.005247865337878466, -0.007563288789242506, -0.09372769296169281, -0.40275874733924866, -0.004916838835924864, -0.02181183733046055, -4.100715523236431e-05, -1.2040065485052764e-05, -1.597800374031067, -0.008435215801000595, -0.01358901895582676], "finish_reason": "length"}], "metrics": {"energy": 1031.262205286026, "energy_per_token": 4.028367989398539, "time": 23.773994, "time_per_token": 0.0928671640625}}
{"outputs": [{"text": "# Check if k is a non-negative integer\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n\n    # Calculate the distance between each point in the dataset and the target point\n    data['distance'] = np.sqrt((data['Latitude'] - target[0]) ** 2 + (data['Longitude'] - target[1]) ** 2)\n\n    # Sort the data by distance in ascending order\n    data.sort_values('distance', inplace=True)\n\n    # Extract the coordinates for the k nearest neighbors\n    neighbors = data[['Latitude', 'Longitude']][:k]\n\n    return neighbors.values.tolist()", "tokens": ["#", " Check", " if", " k", " is", " a", " non", "-", "negative", " integer", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " between", " each", " point", " in", " the", " dataset", " and", " the", " target", " point", "\n", "    ", "data", "['", "distance", "']", " =", " np", ".", "sqrt", "((", "data", "['", "Lat", "itude", "']", " -", " target", "[", "0", "])", " **", " ", "2", " +", " (", "data", "['", "Long", "itude", "']", " -", " target", "[", "1", "])", " **", " ", "2", ")", "\n", "\n", "    ", "#", " Sort", " the", " data", " by", " distance", " in", " ascending", " order", "\n", "    ", "data", ".", "sort", "_", "values", "('", "distance", "'", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "#", " Ext", "ract", " the", " coordinates", " for", " the", " k", " nearest", " neighbors", "\n", "    ", "ne", "ighbors", " =", " data", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "][", ":", "k", "]", "\n", "\n", "    ", "return", " neighbors", ".", "values", ".", "tol", "ist", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.1992313861846924, -0.8138449788093567, -0.7300890684127808, -0.5573834776878357, -0.0050642783753573895, -0.17754071950912476, -0.3324221670627594, -0.004981843288987875, -0.000910225382540375, -0.0032706360798329115, -0.14314009249210358, -0.002222807612270117, -0.02389932982623577, -0.19865944981575012, -0.014066832140088081, -0.00012242044613230973, -0.0004978132783435285, -0.00035851728171110153, -0.01009749248623848, -0.00985860824584961, -0.005507770925760269, -0.004552951082587242, -0.019284497946500778, -0.0002366024418734014, -0.014908094890415668, -0.0016726563917472959, -0.001918857917189598, -0.0027562507893890142, -0.008538288064301014, -0.0009190387791022658, -2.145764938177308e-06, -0.04460393637418747, -0.029295437037944794, -2.0660696029663086, -0.0004741021548397839, -0.00018487652414478362, -0.016978155821561813, -0.0006409021443687379, -0.0036466307938098907, -0.0036748989950865507, -0.0010749283246695995, -0.00015639036428183317, -0.0003927174839191139, -0.28331083059310913, -0.0043551125563681126, -0.00028761065914295614, -0.0006205302197486162, -0.07822809368371964, -0.0031037989538162947, -0.1642608940601349, -1.0253362655639648, -0.6222430467605591, -0.30148735642433167, -0.2509405016899109, -0.8027780055999756, -0.6817522048950195, -0.18558993935585022, -0.1517818719148636, -0.32432419061660767, -0.01564796082675457, -0.005778749473392963, -0.0021567910443991423, -0.7618504762649536, -0.14569686353206635, -0.0034560970962047577, -2.2628116607666016, -0.24588178098201752, -0.624830424785614, -0.0047874110750854015, -0.0011842388194054365, -0.19583052396774292, -3.802703940891661e-05, -0.1498098522424698, -0.28687065839767456, -0.09131000190973282, -0.01823319122195244, -0.031071819365024567, -0.0003250309091527015, -0.0005284343496896327, -0.0462275855243206, -0.005001652054488659, -0.003158820327371359, -0.0019298041006550193, -0.00017891713650897145, -0.6900604367256165, -0.0035991196054965258, -6.103329360485077e-05, -0.0037187249399721622, -0.07113867253065109, -0.0013427060330286622, -0.0002954761730507016, -0.00031573555315844715, -5.960446742392378e-06, -2.6940935640595853e-05, -0.0006173135479912162, -0.0004934046883136034, -4.756337511935271e-05, -0.0003311085747554898, -5.721882189391181e-05, -0.0015380469849333167, -0.00047994061606004834, -9.142934868577868e-05, -0.015354756265878677, -0.07789522409439087, -0.05259586125612259, -0.001503052655607462, -0.004692613612860441, -0.21304288506507874, -0.010844580829143524, -1.6664247512817383, -0.5294928550720215, -0.24181194603443146, -1.7373530864715576, -0.0053861262276768684, -0.00019238528329879045, -0.9131843447685242, -0.0003860443539451808, -1.127223253250122, -1.8462742567062378, -0.0008518642862327397, -0.00017271934484597296, -2.9802276912960224e-06, -1.1502752304077148, -7.784063927829266e-05, -0.0016218378441408277, -3.6477376852417365e-05, -0.026874469593167305, 0.0, -0.0011891205795109272, -0.0001538873475510627, -0.020225828513503075, -0.0010302717564627528, -0.011059650219976902, -0.0007457336178049445, -0.009278982877731323, -1.563905119895935, -0.0005775213940069079, -0.028068937361240387, -1.80409574508667, -3.0844686031341553, -0.02383403107523918, -0.8232601284980774, -0.16619901359081268, -0.006114348769187927, -0.23506297171115875, -0.0012725834967568517, -0.46568363904953003, -1.3970009088516235, -0.007939092814922333, -0.11739131808280945, -0.6707816123962402, -0.013807966373860836, -0.0024029924534261227, -5.2569914259947836e-05, -5.721882189391181e-05, -9.929640509653836e-05, -0.005744140595197678, -0.00011789103882620111, -2.3841830625315197e-06, -0.002245882526040077, -2.6813955307006836, -0.01136566698551178, -0.0025888520758599043, -0.001957882894203067, -0.5335531830787659, -0.04264756664633751, -0.0008680627797730267, -1.2218186855316162, -0.022805675864219666, -0.10512170940637589, -0.12115990370512009, -0.005277985706925392, -0.0006449526408687234, -1.7881377516459906e-06, -0.00042024365393444896, -1.4451522827148438, -3.3378546504536644e-06, -1.0728830375228426e-06, -2.622600959512056e-06, -8.821448318485636e-06, -0.12603525817394257], "finish_reason": "stop"}], "metrics": {"energy": 753.0430665187833, "energy_per_token": 4.160458931043002, "time": 16.685091, "time_per_token": 0.0921828232044199}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n\n    def haversine_distance(lat1, lon1, lat2, lon2):\n        \"\"\"\n        Calculate the Haversine distance between two points on a sphere.\n\n        Parameters:\n        lat1 (float): Latitude of the first point.\n        lon1 (float): Longitude of the first point.\n        lat2 (float): Latitude of the second point.\n        lon2 (float): Longitude of the second point.\n\n        Returns:\n        float: Haversine distance in kilometers.\n\n        Constants:\n        radius of earth is 6371 km\n        \"\"\"\n        radius = 6371  # Radius of the Earth in kilometers\n\n        # Convert latitude and longitude to radians\n        lat1 = math.radians(lat1)\n        lon1 = math.radians(lon1)\n        lat2 = math.radians(lat2)\n        lon2 = math.radians(lon", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "def", " ha", "vers", "ine", "_", "distance", "(", "lat", "1", ",", " lon", "1", ",", " lat", "2", ",", " lon", "2", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Cal", "culate", " the", " Ha", "vers", "ine", " distance", " between", " two", " points", " on", " a", " sphere", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "lat", "1", " (", "float", "):", " Lat", "itude", " of", " the", " first", " point", ".", "\n", "        ", "lon", "1", " (", "float", "):", " Long", "itude", " of", " the", " first", " point", ".", "\n", "        ", "lat", "2", " (", "float", "):", " Lat", "itude", " of", " the", " second", " point", ".", "\n", "        ", "lon", "2", " (", "float", "):", " Long", "itude", " of", " the", " second", " point", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "float", ":", " Ha", "vers", "ine", " distance", " in", " kilometers", ".", "\n", "\n", "        ", "Constants", ":", "\n", "        ", "radius", " of", " earth", " is", " ", "6", "3", "7", "1", " km", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "radius", " =", " ", "6", "3", "7", "1", "  ", "#", " Rad", "ius", " of", " the", " Earth", " in", " kilometers", "\n", "\n", "        ", "#", " Convert", " latitude", " and", " long", "itude", " to", " rad", "ians", "\n", "        ", "lat", "1", " =", " math", ".", "rad", "ians", "(", "lat", "1", ")", "\n", "        ", "lon", "1", " =", " math", ".", "rad", "ians", "(", "lon", "1", ")", "\n", "        ", "lat", "2", " =", " math", ".", "rad", "ians", "(", "lat", "2", ")", "\n", "        ", "lon", "2", " =", " math", ".", "rad", "ians", "(", "lon"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -1.232351541519165, -0.0009727513534016907, -0.00032860602368600667, -0.027379965409636497, -0.0009280903614126146, -0.008890331722795963, -0.008279760368168354, -0.0016035091830417514, -0.0006270825979299843, -0.0006151691195555031, -0.31427136063575745, -0.004208992701023817, -0.00035255891270935535, -0.0031357663683593273, -0.2154630869626999, -0.003234514268115163, -3.326383113861084, -1.0675199031829834, -0.0031697528902441263, -0.00212027202360332, -0.9138137102127075, -0.04626047983765602, -0.007583401631563902, -0.671095073223114, -0.048461273312568665, -0.00972096435725689, -0.11355026811361313, -3.540453326422721e-05, -0.0016452836571261287, -0.00130353809799999, -6.4490144723095e-05, -0.00025245340657420456, -0.00028451209072954953, -2.0265558760002023e-06, -0.04098227620124817, -0.0069636269472539425, -0.013921654783189297, -0.42208561301231384, -0.011164338327944279, -1.3947389561508317e-05, -0.3277568519115448, -0.005575463175773621, -0.04543972760438919, -0.12941762804985046, -0.015229255892336369, -1.1329439878463745, -1.1920922133867862e-06, -6.794698856538162e-05, -0.03745860978960991, -0.5647664666175842, -0.014153811149299145, -0.25348028540611267, -0.2163473218679428, -0.19499926269054413, -0.02637847326695919, -1.3471044301986694, -0.03873615711927414, -0.5151084065437317, -0.0018168861279264092, -0.08442775905132294, -0.0030045625753700733, -0.0005697772721759975, -0.01109372265636921, -0.009558388032019138, -0.00024434918304905295, -0.1722644716501236, -0.018588507547974586, -0.016086198389530182, -0.22690482437610626, -0.0002169373765354976, -0.033033180981874466, -0.6241514682769775, -0.00047434045700356364, -0.0037354708183556795, -0.4600125253200531, -0.00304758595302701, -4.1960789531003684e-05, -0.0023449561558663845, -2.372236667724792e-05, -4.160317621426657e-05, -9.07141511561349e-05, -2.0503786799963564e-05, -8.05822346592322e-05, -5.531158240046352e-05, -4.5536911784438416e-05, -2.8729025871143676e-05, -8.320462075062096e-05, -1.8358061424805783e-05, -0.00014232576359063387, -3.2782016205601394e-05, -6.854299135738984e-05, -5.376194530981593e-05, -3.015949550899677e-05, -2.3245540432981215e-05, -3.1709168979432434e-05, -2.4437606043647975e-05, -6.139089964563027e-05, -2.1219027985353023e-05, -4.8636207793606445e-05, -3.3378044463461265e-05, -0.00020394629973452538, -2.098061486321967e-05, -0.00010322991875000298, -2.396077979938127e-05, -5.531158240046352e-05, -7.378782902378589e-05, -6.55629628454335e-05, -2.682172998902388e-05, -3.957670196541585e-05, -1.966933996300213e-05, -0.0009345216676592827, -5.6622808187967166e-05, -4.0411134250462055e-05, -2.4199192921514623e-05, -6.41325386823155e-05, -2.407998726994265e-05, -0.0014363934751600027, -0.00016735584358684719, -0.007929631508886814, -0.00028796817059628665, -0.008634849451482296, -0.00048101297579705715, -0.0004363300104159862, -0.00036864637513644993, -0.015810489654541016, -0.0015241208020597696, -0.9689810276031494, -7.748573807475623e-06, -3.135155202471651e-05, -0.0017842815723270178, -1.4684686660766602, -0.25985124707221985, -0.2430543303489685, -0.0016156489728018641, -0.7435094714164734, -0.0006850994541309774, -1.0215322971343994, -0.002961299614980817, -0.0026315366849303246, -0.003154661040753126, -0.12532983720302582, -0.016727544367313385, -0.007691056467592716, -0.014942153356969357, -0.0024700628127902746, -0.0002580548170953989, -0.0015947017818689346, -4.2914423829643056e-05, -0.0006126672378741205, -0.006169559899717569, -0.01430459599941969, -0.8026610016822815, -0.03726499527692795, -2.9802276912960224e-06, -2.4914430468925275e-05, -0.00016699827392585576, -0.06737946718931198, -0.47770655155181885, -0.11442332714796066, -0.0010201494442299008, -0.00036137725692242384, -0.0003738896339200437, -3.564294092939235e-05, -0.0021023093722760677, -0.7125157713890076, -0.00020680672605521977, -0.676651120185852, -6.270212179515511e-05, -0.0005062728887423873, -0.15447348356246948, -0.16520854830741882, -0.007464257534593344, -0.07264822721481323, -0.01839764043688774, -1.0367012023925781, -0.0003936707798857242, -1.3107471466064453, -0.14957265555858612, -1.3070536851882935, -0.009158741682767868, -2.2172682292875834e-05, -0.0003968881501350552, -0.2586595118045807, -0.04236263036727905, -0.0006562701892107725, -0.01975281909108162, -0.0006853376980870962, -0.04237177222967148, -0.011181550100445747, -1.6709895133972168, -0.034854400902986526, -6.437280717364047e-06, -0.0004593271005433053, -2.9802276912960224e-06, -4.1126360883936286e-05, -0.002681828336790204, -1.585470999998506e-05, -0.0002361257211305201, -0.0009142747730948031, -1.823885577323381e-05, -0.017076482996344566, -6.6756979322235566e-06, -1.8000440832111053e-05, -9.894321920000948e-06, -2.3841855067985307e-07, -6.318072337307967e-06, -4.088794958079234e-05, -4.887569048150908e-06, -4.410734163684538e-06, -1.0132738680113107e-05, -4.529942543740617e-06, -1.7881233361549675e-05, -0.0017527469899505377, -9.775113539944869e-06, -8.344646857949556e-07, -1.156323378381785e-05, -1.0251946150674485e-05, -2.3841855067985307e-07, -5.245195097813848e-06, -0.011559413745999336, -1.1920922133867862e-06, -1.1324817933200393e-05, -1.5497195136049413e-06, -4.172316494077677e-06, -9.298280929215252e-06, -1.0371154530730564e-05, -2.0265558760002023e-06, -3.576278118089249e-07, -9.179073458653875e-06, -3.933898824470816e-06, -3.576278118089249e-07, -2.5033637939486653e-05, -2.5987286790041253e-05, -1.6689286894688848e-06, -2.145764938177308e-06], "finish_reason": "length"}], "metrics": {"energy": 1068.325029071808, "energy_per_token": 4.17314464481175, "time": 24.015194, "time_per_token": 0.0938093515625}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n    distance_list = []\n    for i, item in enumerate(data.values):\n        # distance = math.sqrt((target[0] - item[0]) ** 2 + (target[1] - item[1]) ** 2)\n        distance = distance_func(target[0], target[1], item[0], item[1])\n        distance_list.append([distance, [item[0], item[1]]])\n\n    distance_list = sorted(distance_list, key=lambda x: x[0])[:k]\n\n    return [distance_list[j][1] for j in range(k)]", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "    ", "distance", "_", "list", " =", " []", "\n", "    ", "for", " i", ",", " item", " in", " enumerate", "(", "data", ".", "values", "):", "\n", "        ", "#", " distance", " =", " math", ".", "sqrt", "((", "target", "[", "0", "]", " -", " item", "[", "0", "])", " **", " ", "2", " +", " (", "target", "[", "1", "]", " -", " item", "[", "1", "])", " **", " ", "2", ")", "\n", "        ", "distance", " =", " distance", "_", "func", "(", "target", "[", "0", "]", ",", " target", "[", "1", "]", ",", " item", "[", "0", "]", ",", " item", "[", "1", "])", "\n", "        ", "distance", "_", "list", ".", "append", "([", "distance", ",", " [", "item", "[", "0", "]", ",", " item", "[", "1", "]]", "])", "\n", "\n", "    ", "distance", "_", "list", " =", " sorted", "(", "distance", "_", "list", ",", " key", "=", "lambda", " x", ":", " x", "[", "0", "])", "[:", "k", "]", "\n", "\n", "    ", "return", " [", "distance", "_", "list", "[", "j", "][", "1", "]", " for", " j", " in", " range", "(", "k", ")]", "\n", "\n", "def"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -0.4550822377204895, -0.02672882005572319, -0.0008775911992415786, -0.010781371966004372, -0.009351616725325584, -0.0028525397647172213, -0.00028081765049137175, -0.0007057083421386778, -1.1572272777557373, -0.005786098074167967, -0.0003947432560380548, -0.0022257810924202204, -1.6535274982452393, -3.738401412963867, -1.7844445705413818, -1.0751625299453735, -0.014223741367459297, -0.2891508638858795, -0.039703357964754105, -0.06456975638866425, -0.37948209047317505, -0.8322009444236755, -2.1708896160125732, -3.3211355209350586, -0.007282852195203304, -0.8555682897567749, -0.0006307758158072829, -0.12369641661643982, -0.4766414165496826, -0.10943083465099335, -0.209988534450531, -0.014487434178590775, -0.011561181396245956, -2.8571512699127197, -2.780210256576538, -1.5669022798538208, -0.7648289203643799, -0.00017307691450696439, -0.2694316804409027, -0.22185994684696198, -1.1909544467926025, -0.01799917034804821, -0.03788808360695839, -0.21706624329090118, -0.0016276695532724261, -0.012994490563869476, -0.002787159290164709, -0.0015842280117794871, -0.0012182918144389987, -0.5755500197410583, -0.0028526587411761284, -0.00018261195509694517, -0.003206114750355482, -0.017320914193987846, -0.0006001578294672072, -5.8887653722194955e-05, -0.0007869484252296388, -0.0017257335130125284, -0.0004303721070755273, -0.0008915264043025672, -0.00013052565918769687, -0.001166616566479206, -0.0009028411004692316, -0.004750038962811232, -0.0026491330936551094, -9.07141511561349e-05, -0.009782824665307999, -0.13287992775440216, -0.013000020757317543, -0.33675479888916016, -0.03559945151209831, -2.6335105895996094, -0.04660540819168091, -3.138659954071045, -0.0646350160241127, -0.3617648184299469, -1.167272686958313, -0.007516555022448301, -0.0006665153778158128, -0.0014528206083923578, -0.09718847274780273, -5.221230458118953e-05, -0.00019441144831944257, -0.00016234986833296716, -0.0006890306831337512, -0.01596677303314209, -0.0007904027588665485, -0.0006185048841871321, -5.1377883210079744e-05, -0.0005178302526473999, -0.0020425901748239994, -9.727005090098828e-05, -0.0006445952458307147, -0.027750946581363678, -0.02990453690290451, -0.0032707550562918186, -0.062200531363487244, -0.004802240990102291, -0.0027304531540721655, -0.007094903849065304, -0.0007809926173649728, -0.8299540281295776, -0.7946118116378784, -0.00363974180072546, -2.7097625732421875, -0.07155625522136688, -0.003990307915955782, -0.002581598935648799, -0.00018857131362892687, -0.0007030876004137099, -0.00836180616170168, -0.00018416139937471598, -0.00021836756786797196, -0.02256677858531475, -0.05101322755217552, -0.010905192233622074, -2.026916980743408, -0.003949224483221769, -0.5193842649459839, -0.0022318472620099783, -0.07971356064081192, -1.1239593029022217, -0.22309882938861847, -0.0012404375011101365, -0.004946138709783554, -5.125986263010418e-06, 0.0, -0.1953616440296173, -0.011073797941207886, -0.018707972019910812, -0.010556570254266262, -0.14022207260131836, -0.0036757304333150387, -0.050754234194755554, -0.0006521005416288972, -0.001258534612134099, -0.03771062195301056, -1.2774642705917358, -0.008379420265555382, -0.004087665118277073, -0.011065781116485596, -1.503758430480957, -0.00023135847004596144, -0.5750495195388794, -0.16362415254116058, -3.854687213897705, -1.7903339862823486, -0.23749256134033203, -0.05277511104941368, -3.095304250717163, -0.009002217091619968, -0.006906209979206324, -0.002722963457927108, -0.0016112453304231167, -0.0012515101116150618, -0.002768971025943756, -0.009008596651256084, -0.0003591130953282118, -0.6102971434593201, -0.0038233529776334763, -0.007459642831236124, -0.005222962237894535, -0.05788798630237579], "finish_reason": "stop"}], "metrics": {"energy": 785.5630161933899, "energy_per_token": 4.269364218442337, "time": 16.931091, "time_per_token": 0.09201679891304347}}
{"outputs": [{"text": "# Validate the input parameters\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer.\")\n\n    # Calculate the Euclidean distance between each point in the dataset and the target point\n    distances = np.linalg.norm(data - np.array(target), axis=1)\n\n    # Find the 'k' indices of the nearest neighbors in the dataset\n    nearest_neighbors = np.argpartition(distances, k)[:k]\n\n    # Extract the coordinates of the nearest neighbors\n    nearest_neighbors_coords = data.iloc[nearest_neighbors][['Latitude', 'Longitude']].values.tolist()\n\n    # Sort the nearest neighbors based on their distances from the target point\n    nearest_neighbors_coords = sorted(nearest_neighbors_coords, key=lambda x: distances[nearest_neighbors_coords.index(x)])\n\n    return nearest_neighbors", "tokens": ["#", " Valid", "ate", " the", " input", " parameters", "\n", "    ", "if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " an", " integer", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " the", " Euclidean", " distance", " between", " each", " point", " in", " the", " dataset", " and", " the", " target", " point", "\n", "    ", "dist", "ances", " =", " np", ".", "l", "inal", "g", ".", "norm", "(", "data", " -", " np", ".", "array", "(", "target", ")", ",", " axis", "=", "1", ")", "\n", "\n", "    ", "#", " Find", " the", " '", "k", "'", " indices", " of", " the", " nearest", " neighbors", " in", " the", " dataset", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", " =", " np", ".", "arg", "partition", "(", "dist", "ances", ",", " k", ")", "[:", "k", "]", "\n", "\n", "    ", "#", " Ext", "ract", " the", " coordinates", " of", " the", " nearest", " neighbors", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", "_", "co", "ords", " =", " data", ".", "il", "oc", "[", "ne", "arest", "_", "ne", "ighbors", "][", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "\n", "    ", "#", " Sort", " the", " nearest", " neighbors", " based", " on", " their", " distances", " from", " the", " target", " point", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", "_", "co", "ords", " =", " sorted", "(", "ne", "arest", "_", "ne", "ighbors", "_", "co", "ords", ",", " key", "=", "lambda", " x", ":", " distances", "[", "ne", "arest", "_", "ne", "ighbors", "_", "co", "ords", ".", "index", "(", "x", ")]", ")", "\n", "\n", "    ", "return", " nearest", "_", "ne", "ighbors"], "logprobs": [-1.1992313861846924, -2.526092767715454, -0.09537012875080109, -1.2568714618682861, -0.32217299938201904, -0.6303411722183228, -0.1282901167869568, -0.016159629449248314, -0.1579187661409378, -1.7287158966064453, -0.05217435583472252, -0.0004800597671419382, -0.01177244447171688, -0.6642680764198303, -0.006776920985430479, -0.002821395406499505, -0.006513437256217003, -0.0010053823934867978, -8.106198947643861e-06, -0.05201401188969612, -0.027934705838561058, -0.38811489939689636, -0.07623375207185745, -0.004355705808848143, -0.13428175449371338, -0.014458647929131985, -0.0026104918215423822, -0.0004951919545419514, -0.0031010655220597982, -1.1312282085418701, -0.014312705025076866, -0.00037651124875992537, -0.0014606770128011703, -0.2014717161655426, -0.33583125472068787, -0.1489148736000061, -0.019116219133138657, -0.00018261195509694517, -0.002595034893602133, -0.0005981324939057231, -0.008103232830762863, -0.005016122944653034, -0.0016896746819838881, -0.0015313815092667937, -0.002257538726553321, -0.004854084458202124, -3.2186455882765586e-06, -0.0016016048612073064, -0.0011714984430000186, -0.0014987675240263343, -0.002944659674540162, -0.0006636562757194042, -0.07505777478218079, -0.0009654866298660636, -0.021076519042253494, -0.001718236249871552, -0.00015579440514557064, -0.0003165697562508285, -0.13895179331302643, -0.002380277728661895, -0.152079775929451, -1.3861486911773682, -0.13252070546150208, -3.1512675285339355, -0.21950122714042664, -0.16033895313739777, -0.9926722645759583, -0.7802442312240601, -0.21160472929477692, -0.06462685763835907, -0.3320446312427521, -0.02513188123703003, -0.004064751323312521, -0.003367826109752059, -0.9243488907814026, -0.07709871232509613, -0.005148960277438164, -0.42031294107437134, -0.036985985934734344, -0.003367232158780098, -0.32288283109664917, -3.433168603805825e-05, -2.1812870502471924, -8.49926145747304e-05, -4.768360213347478e-06, -2.0146166207268834e-05, -1.2636104656849056e-05, -0.014577900990843773, -0.05259212851524353, -0.6485001444816589, -0.8059974908828735, -1.7881377516459906e-06, -0.05479270592331886, -0.02370341867208481, -0.0006998711614869535, -0.07176142930984497, -0.04742634296417236, -0.004679917823523283, -0.014434090815484524, -0.0027139282319694757, -0.0036450866609811783, -0.017562473192811012, -0.09071268886327744, -0.000846147071570158, -0.0025707788299769163, -1.5053240060806274, -0.0017946342704817653, -1.0460084676742554, -0.0005235493299551308, -0.0006422125734388828, -3.2229433059692383, -0.6380488276481628, -0.08285107463598251, -0.635366678237915, -0.010694571770727634, -1.4831085205078125, -0.14457136392593384, -0.20764268934726715, -0.11391030251979828, -0.0004188137245364487, -0.4407917559146881, -0.05064692348241806, -0.10679355263710022, -1.7611048221588135, -0.0013996100751683116, -1.044837236404419, -0.3018130660057068, -4.172316494077677e-06, -1.117052674293518, -5.8412379075889476e-06, -0.0018920868169516325, -0.0023635090328752995, -5.960462772236497e-07, -0.0007960011716932058, -0.012625291012227535, -0.03932085260748863, -0.006775026675313711, -0.0007219092221930623, -0.0005165196489542723, -0.005414582323282957, -0.01453631091862917, -0.00037520044133998454, -0.02704028971493244, -2.8169400691986084, -0.0007096394547261298, -0.024653278291225433, -0.721276044845581, -0.028615303337574005, -0.005141725763678551, -0.34050890803337097, -0.00851133931428194, -1.1962019205093384, -0.0009114163694903255, -0.5000863671302795, -0.1049247682094574, -0.0025351073127239943, -0.27600759267807007, -0.004577277693897486, -0.4841609001159668, -0.16451647877693176, -0.8084853887557983, -0.0009984752396121621, -0.10820833593606949, -0.08912920951843262, -0.038661498576402664, -1.1920928244535389e-07, -0.0002329078270122409, -0.006426027975976467, -7.152555099310121e-07, -7.271740287251305e-06, -1.7881377516459906e-06, -1.2993727978027891e-05, -1.2101503610610962, -0.03915075212717056, -0.008896829560399055, -0.0007737264968454838, -0.00028951745480298996, -0.0001113352773245424, -0.0066371941938996315, -8.129743218887597e-05, -1.0728830375228426e-06, -2.2053474822314456e-05, -0.0007745603215880692, -0.22193174064159393, -0.043691445142030716, -0.1056937426328659, -0.0002628219372127205, -8.344646857949556e-07, -0.0007154765771701932, -0.0017667888896539807, -0.04842084273695946, -0.0007384672062471509, -0.7236383557319641, -0.8238288164138794, -0.010534511879086494, -0.059376101940870285, -0.0027388939633965492, -1.737070083618164, -0.00025054652360267937, -0.049894750118255615, -0.20053744316101074, -0.18440161645412445, -0.0008313775178976357, -0.000803505361545831, -1.113067626953125, -0.04903736338019371, -0.0010397987207397819, -0.8454171419143677, -0.00010883215873036534, -7.795983401592821e-05, -0.00041130665340460837, -3.480850500636734e-05, -0.0031357663683593273, -0.10871691256761551, -1.2397689715726301e-05, -0.8559654951095581, -0.08688671886920929, -0.0006392342620529234, -0.005976070184260607, -2.3841855067985307e-07, -2.264974000354414e-06, 0.0, -4.768370445162873e-07, -0.00040415700641460717, -1.645074735279195e-05, -9.536738616588991e-07, -0.0017841625958681107, -0.01664641685783863, -0.002685157349333167, -0.004266445990651846, -0.07608572393655777, -0.00157423026394099, -0.8846331834793091, -0.0019250449258834124, -0.5326026678085327, -0.0004843492351938039, -6.198863957251888e-06, -8.22540732769994e-06, -1.1920928244535389e-07, -1.9914376735687256, -0.07183986902236938, -0.00016699827392585576, -0.002181770745664835, -0.00015078838623594493, -0.0006482883472926915, -0.0005498804384842515, -0.0037367772310972214, -0.0026217871345579624, -0.004875675309449434, -0.030992886051535606, -0.0005266471416689456, -0.2436520904302597, -0.0019052940187975764, -1.490105023549404e-05, -2.2291887944447808e-05, -2.264974000354414e-06], "finish_reason": "length"}], "metrics": {"energy": 1046.4265427551272, "energy_per_token": 4.087603682637216, "time": 23.579647, "time_per_token": 0.09210799609375}}
{"outputs": [{"text": "# Validate the input values.\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer\")\n    if k < 0:\n        raise ValueError(\"k must be non-negative\")\n\n    # Calculate the distance between the target and each data point.\n    radius = 6371  # Radius of the Earth in kilometers\n    target_lat, target_lon = math.radians(target[0]), math.radians(target[1])\n\n    # Calculate the latitude and longitude of each data point in radians.\n    data['rad_lat'] = data['Latitude'].apply(math.radians)\n    data['rad_lon'] = data['Longitude'].apply(math.radians)\n\n    # Calculate the distance using the Haversine formula.\n    data['distance'] = np.sqrt(np.square(np.sin((target_lat - data['rad_lat'])/2)) + np.cos(target_lat) * np.cos(data['rad_lat']) * np.square(np.sin((target_lon", "tokens": ["#", " Valid", "ate", " the", " input", " values", ".", "\n", "    ", "if", " not", " isinstance", "(", "k", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " an", " integer", "\"", ")", "\n", "    ", "if", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "k", " must", " be", " non", "-", "negative", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " between", " the", " target", " and", " each", " data", " point", ".", "\n", "    ", "radius", " =", " ", "6", "3", "7", "1", "  ", "#", " Rad", "ius", " of", " the", " Earth", " in", " kilometers", "\n", "    ", "target", "_", "lat", ",", " target", "_", "lon", " =", " math", ".", "rad", "ians", "(", "target", "[", "0", "])", ",", " math", ".", "rad", "ians", "(", "target", "[", "1", "])", "\n", "\n", "    ", "#", " Calculate", " the", " latitude", " and", " long", "itude", " of", " each", " data", " point", " in", " rad", "ians", ".", "\n", "    ", "data", "['", "rad", "_", "lat", "']", " =", " data", "['", "Lat", "itude", "']", ".", "apply", "(", "math", ".", "rad", "ians", ")", "\n", "    ", "data", "['", "rad", "_", "lon", "']", " =", " data", "['", "Long", "itude", "']", ".", "apply", "(", "math", ".", "rad", "ians", ")", "\n", "\n", "    ", "#", " Calculate", " the", " distance", " using", " the", " Ha", "vers", "ine", " formula", ".", "\n", "    ", "data", "['", "distance", "']", " =", " np", ".", "sqrt", "(", "np", ".", "square", "(", "np", ".", "sin", "((", "target", "_", "lat", " -", " data", "['", "rad", "_", "lat", "']", ")/", "2", "))", " +", " np", ".", "cos", "(", "target", "_", "lat", ")", " *", " np", ".", "cos", "(", "data", "['", "rad", "_", "lat", "'])", " *", " np", ".", "square", "(", "np", ".", "sin", "((", "target", "_", "lon"], "logprobs": [-1.1992313861846924, -2.526092767715454, -0.09537012875080109, -1.2568714618682861, -0.32217299938201904, -2.479921817779541, -2.911531925201416, -0.03459567949175835, -0.009820126928389072, -0.1389581263065338, -0.25694453716278076, -0.04925742372870445, -0.0003500564198475331, -0.03573288768529892, -0.0004522969538811594, -0.02817927859723568, -2.5695037841796875, -0.010577685199677944, -0.006746253930032253, -0.02364031970500946, -0.0175186637789011, -2.276871418871451e-05, -0.1278645247220993, -0.07891585677862167, -0.6136111617088318, -0.0687897652387619, -0.002628207439556718, -0.36583220958709717, -0.01505723875015974, -0.8665069341659546, -0.00048530244384892285, -0.005167105700820684, -0.13251078128814697, -0.16770917177200317, -0.02643524669110775, -0.13241294026374817, -0.0006785474251955748, -0.029399391263723373, -0.022462693974375725, -0.001023007556796074, -0.0010994586627930403, -0.0004412154376041144, -0.0002554328821133822, -2.9802276912960224e-06, -0.0020391400903463364, -0.0011855486081913114, -0.0056360382586717606, -0.010141627863049507, -0.006452677771449089, -1.0674641132354736, -0.010378320701420307, -0.00041083001997321844, -0.028835849836468697, -0.0002847504511009902, -0.0008493629866279662, -0.12208131700754166, -0.002558531705290079, -0.1457487940788269, -1.1283897161483765, -0.10776779055595398, -0.29491928219795227, -0.36450886726379395, -0.5420422554016113, -0.04575271159410477, -0.22438588738441467, -0.5447884798049927, -0.5875194668769836, -0.009498640894889832, -0.49346596002578735, -0.014468047767877579, -0.004932615906000137, -3.005889654159546, -0.41943737864494324, -0.007296106778085232, -0.002299404935911298, -0.001790588372386992, -0.00026043839170597494, -0.006686219479888678, -1.0971343517303467, -0.00035482310340739787, -1.4044036865234375, -0.0003461238811723888, -0.001746439840644598, -0.20773489773273468, -0.2400202751159668, -0.04716460034251213, -0.18797913193702698, -0.16630631685256958, -0.05742323398590088, -0.6329910159111023, -0.024959465488791466, -0.12221647053956985, -0.2164437174797058, -0.00036435641231946647, -1.156323378381785e-05, -0.24611108005046844, -0.0003084660565946251, -0.4683631658554077, -6.0794889577664435e-05, -9.202533692587167e-05, -5.8412379075889476e-06, -0.0003108495147898793, -0.020381541922688484, -0.0013719918206334114, -0.004460029769688845, -0.000715714821126312, -0.00012408917245920748, -0.0008435266790911555, -8.22540732769994e-06, -1.9192511899746023e-05, -8.344646857949556e-07, -0.00010501786891836673, -0.006953919306397438, -7.152301259338856e-05, -0.00028010259848088026, -6.16293036728166e-05, -0.03079061582684517, -1.784132957458496, -0.0005304598016664386, -1.8504705429077148, -0.8352514505386353, -0.18237940967082977, -1.8878144025802612, -0.05286794528365135, -0.0005694198189303279, -0.0032650516368448734, -2.3765716552734375, -0.5841121673583984, -0.2636432647705078, -0.007239773869514465, -0.5191230177879333, -0.07973161339759827, -0.00012432756193447858, -0.17199921607971191, -0.008156088180840015, -0.0008843801915645599, -0.2887290418148041, -0.5103957056999207, -0.7484967708587646, -0.36581164598464966, -0.1403324156999588, -0.030943652614951134, -0.004079473204910755, -0.29120755195617676, -0.02987549640238285, -0.0037091048434376717, -0.00020466140995267779, -6.472854875028133e-05, -0.0004757702990900725, -0.02977321296930313, -2.9682672902708873e-05, -0.16104285418987274, -2.7418097943154862e-06, -6.198863957251888e-06, -3.158996332786046e-05, -0.00018344627460464835, -0.0017746428493410349, -6.997340824455023e-05, -4.2914423829643056e-05, -3.766942609217949e-05, -6.580135959666222e-05, -2.9801878554280847e-05, -0.0077280825935304165, -2.2411095415009186e-05, -0.00013290952483657748, -0.00013886917440686375, -2.2649508537142538e-05, -0.000739658426027745, -1.311301275563892e-06, -3.3378546504536644e-06, -1.2040065485052764e-05, -1.490105023549404e-05, -1.5497195136049413e-06, -0.00011407678539399058, -3.933898824470816e-06, -1.7881377516459906e-06, -4.768360213347478e-06, -1.8954096958623268e-05, -0.0005322470096871257, -0.047087837010622025, -0.0003057250869460404, -0.05648902803659439, -0.03418518230319023, -0.008324922062456608, -1.0682096481323242, -2.608036994934082, -0.04070373252034187, -0.2348121702671051, -8.344646857949556e-07, -5.2927523938706145e-05, -0.009367914870381355, -0.062155500054359436, -0.006345955654978752, -0.0007400158210657537, -0.2717408835887909, -0.0028275768272578716, -0.057329583913087845, -0.01044391468167305, -0.0007381098694168031, -1.01864755153656, -2.372236667724792e-05, -0.06332167237997055, -0.11066347360610962, -0.46032387018203735, -2.622600959512056e-06, -0.3810381293296814, -0.060647957026958466, -0.6681087017059326, -9.775113539944869e-06, -0.0029374093282967806, -0.012696151621639729, -1.1383395195007324, -0.0010930284624919295, -0.005923455115407705, -0.050112128257751465, -0.0023935975041240454, -0.012003333307802677, -0.0005915798828937113, -5.125986263010418e-06, -2.3364747903542593e-05, -1.6845124959945679, -0.03398735821247101, -0.007772322744131088, -0.12069111317396164, -0.13339175283908844, -1.2724475860595703, -1.5735502529423684e-05, -0.021290332078933716, -0.0006308949086815119, -0.021678278222680092, -4.7801782784517854e-05, -0.01916217990219593, -0.13900066912174225, -0.02351096272468567, -0.02457604743540287, -1.645074735279195e-05, -0.0009733468177728355, -0.0005759726045653224, -0.0024033491499722004, -0.0014354411978274584, -0.0006040894077159464, -9.417489309271332e-06, -0.005007701460272074, -0.001686461502686143, -0.003380182199180126, -0.018459316343069077, -7.033323527139146e-06, -0.00063744728686288, -0.0033149549271911383, -0.00021038226259406656, -1.7881377516459906e-06, -0.00014327930693980306, -0.0020568659529089928, -0.0007524043321609497, -1.1086402082582936e-05, -9.274052717955783e-05], "finish_reason": "length"}], "metrics": {"energy": 1057.6262227306368, "energy_per_token": 4.13135243254155, "time": 23.803787, "time_per_token": 0.09298354296875}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n\n    if not isinstance(data['Latitude'], pd.Series) or not isinstance(data['Longitude'], pd.Series):\n        raise ValueError(\"'data' must contain columns 'Latitude' and 'Longitude' as series of geographical coordinates.\")\n\n    # Calculate distance from each point to the target\n    def distance(lat1, lon1, lat2, lon2):\n        \"\"\"\n        Calculates the distance between two points in geographic coordinates using the Haversine formula.\n\n        Parameters:\n        lat1 (float): Latitude of point 1 in decimal degrees.\n        lon1 (float): Longitude of point 1 in decimal degrees.\n        lat2 (float): Latitude of point 2 in decimal degrees.\n        lon2 (float): Longitude of point 2 in decimal degrees.\n\n        Returns:\n        float: Distance between the two points in kilometers.\n\n        \"\"\"\n        radius = 6371\n        ", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "\n", "    ", "if", " not", " isinstance", "(", "data", "['", "Lat", "itude", "']", ",", " pd", ".", "Series", ")", " or", " not", " isinstance", "(", "data", "['", "Long", "itude", "']", ",", " pd", ".", "Series", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "data", "'", " must", " contain", " columns", " '", "Lat", "itude", "'", " and", " '", "Long", "itude", "'", " as", " series", " of", " geographical", " coordinates", ".", "\"", ")", "\n", "\n", "    ", "#", " Calculate", " distance", " from", " each", " point", " to", " the", " target", "\n", "    ", "def", " distance", "(", "lat", "1", ",", " lon", "1", ",", " lat", "2", ",", " lon", "2", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Cal", "cul", "ates", " the", " distance", " between", " two", " points", " in", " geographic", " coordinates", " using", " the", " Ha", "vers", "ine", " formula", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "lat", "1", " (", "float", "):", " Lat", "itude", " of", " point", " ", "1", " in", " decimal", " degrees", ".", "\n", "        ", "lon", "1", " (", "float", "):", " Long", "itude", " of", " point", " ", "1", " in", " decimal", " degrees", ".", "\n", "        ", "lat", "2", " (", "float", "):", " Lat", "itude", " of", " point", " ", "2", " in", " decimal", " degrees", ".", "\n", "        ", "lon", "2", " (", "float", "):", " Long", "itude", " of", " point", " ", "2", " in", " decimal", " degrees", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "float", ":", " Distance", " between", " the", " two", " points", " in", " kilometers", ".", "\n", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "radius", " =", " ", "6", "3", "7", "1", "\n", "        "], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -1.232351541519165, -0.0009727513534016907, -0.00032860602368600667, -0.027379965409636497, -0.0009280903614126146, -0.008890331722795963, -0.008279760368168354, -0.0016035091830417514, -0.0006270825979299843, -0.0006151691195555031, -0.31427136063575745, -0.004208992701023817, -0.00035255891270935535, -0.0031357663683593273, -0.2154630869626999, -0.003234514268115163, -2.316697597503662, -1.3095252513885498, -0.6841982007026672, -0.00022968991834204644, -0.6226667165756226, -2.8520455360412598, -0.01640182174742222, -0.00015078838623594493, -0.04085216671228409, -0.5146443247795105, -1.063489317893982, -8.248942322097719e-05, -0.05463842302560806, -0.23947766423225403, -0.055007778108119965, -0.02524719573557377, -0.005332413129508495, -0.0002699726028367877, -0.010193431749939919, -0.0011745942756533623, -0.015931811183691025, -3.9457496313843876e-05, -6.723177648382261e-05, -0.00021181246847845614, -0.0007937379996292293, -3.933898824470816e-06, -0.00018535325943958014, -0.04453837871551514, -0.0035391333512961864, -0.006456704810261726, -0.04527169093489647, -0.18951299786567688, -6.329813186312094e-05, -0.014937573112547398, -0.010491455905139446, -1.17546546459198, -0.07048986107110977, -0.005081713665276766, -0.18870747089385986, -1.177567720413208, -0.22372235357761383, -0.39064469933509827, -0.0035904485266655684, -0.00031990656862035394, -0.0004601611872203648, -0.007704305928200483, -0.00026603974401950836, -0.0002029928145930171, -7.378782902378589e-05, -0.003302004188299179, -1.7272093296051025, -2.8779478073120117, -3.111238479614258, -2.0624818801879883, -0.009384093806147575, -0.03545805439352989, -0.0020810156129300594, -0.0003212174342479557, -0.0017803546506911516, -0.044977471232414246, -0.0019695423543453217, -1.7024016380310059, -2.2031397819519043, -1.574162244796753, -1.5533432960510254, -1.1977348327636719, -0.5501536726951599, -0.8094585537910461, -0.246492400765419, -0.008554244413971901, -0.5909078121185303, -0.006597285624593496, -2.7996504306793213, -0.9276564717292786, -0.1394723504781723, -1.1028258800506592, -0.14631444215774536, -0.00600972305983305, -0.14442208409309387, -7.629103492945433e-05, -0.03137466311454773, -0.0037263259291648865, -0.00013207517622504383, -0.003904221346601844, -0.00017069313616957515, -4.0531076592742465e-06, -0.019486302509903908, -0.00716485595330596, -0.018649939447641373, -2.190007209777832, -0.02337588556110859, -0.0004707658663392067, -0.2143929898738861, -0.010943868197500706, -0.10549724102020264, -1.7560603618621826, -0.011603249236941338, -0.0655098408460617, -0.0771140530705452, -0.25123485922813416, -0.02572760358452797, -0.23633427917957306, -1.0978370904922485, -2.7480764389038086, -0.011691031977534294, -0.9613977670669556, -0.05119729042053223, -0.19188912212848663, -2.145764938177308e-06, -0.00010239553375868127, -0.031375471502542496, -0.04430187866091728, -0.020144283771514893, -0.3027440309524536, -0.002742460463196039, -0.08050139248371124, -0.011820157989859581, -0.0010831448016688228, -0.021570835262537003, -0.017930323258042336, -0.00032228996860794723, -0.1907743662595749, -0.0377916656434536, -0.02452079765498638, -0.33531734347343445, -0.00036137725692242384, -0.037410151213407516, -1.244158148765564, -0.008057352155447006, -1.0132738680113107e-05, -1.6526451110839844, -1.437392234802246, -0.004206025041639805, -0.0400271899998188, -0.0016464737709611654, -0.00012575789878610522, -0.004047773778438568, -3.480850500636734e-05, -4.4225667807040736e-05, -5.709961988031864e-05, -3.4927710657939315e-05, -0.00017855956684798002, -8.570780482841656e-05, -5.245071224635467e-05, -1.7165990357170813e-05, -5.447716102935374e-05, -0.0005747812101617455, -0.00025293012731708586, -3.421248038648628e-05, -1.0251946150674485e-05, -0.00015233787416946143, -7.116541382856667e-05, -9.357491217087954e-05, -4.4225667807040736e-05, -4.23184028477408e-05, -2.634490556374658e-05, -4.970903682988137e-05, -2.992108420585282e-05, -5.090107151772827e-05, -2.0265558760002023e-06, -3.361645576660521e-05, -2.4676019165781327e-05, -3.957670196541585e-05, -0.000536655425094068, -0.00013720047718379647, -2.372236667724792e-05, -2.7417760065873154e-05, -9.381330892210826e-05, -7.283422019099817e-05, -6.580135959666222e-05, -0.00025245340657420456, -8.630380034446716e-05, -1.6569954823353328e-05, -2.4676019165781327e-05, -1.4543427823809907e-05, -0.0008690156391821802, -1.156323378381785e-05, -4.494089080253616e-05, -8.4638240878121e-06, -1.5258672647178173e-05, -6.949660019017756e-05, -3.325883881188929e-05, -5.364403477869928e-06, -1.311301275563892e-06, -0.0001851148990681395, -0.0002431573811918497, -0.0068212030455470085, -0.0004892344586551189, -0.007624572142958641, -0.0010452766437083483, -0.0006486457423307002, -0.0005937243695370853, -0.02419038861989975, -0.0016947920667007565, -0.42004355788230896, -0.17215067148208618, -0.14683827757835388, -0.05419067665934563, -0.001364491879940033, -0.010125814937055111, -0.23381127417087555, -0.040906526148319244, -0.00256423931568861, -0.9212626218795776, -0.000809818331617862, -3.1720004081726074, -7.164221460698172e-05, -6.317892984952778e-05, -0.0004111875023227185, -0.0853634923696518, -0.4698169231414795, -0.10406969487667084, -0.0016596842324361205, -0.00045789722935296595, -0.00048780461656861007, -0.00012385078298393637, -0.006605101749300957, -2.16036057472229, -0.25600165128707886], "finish_reason": "length"}], "metrics": {"energy": 1080.1980021877291, "energy_per_token": 4.219523446045817, "time": 23.773855, "time_per_token": 0.09286662109375}}
{"outputs": [{"text": "if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n    data = data.copy()\n    data['distance'] = np.sqrt((data['Latitude'] - target[0]) ** 2 + (data['Longitude'] - target[1]) ** 2)\n    neighbors = data.nsmallest(k, 'distance')\n    nearest_neighbors = neighbors[['Latitude', 'Longitude']].values.tolist()\n    return nearest_neighbors", "tokens": ["if", " not", " isinstance", "(", "k", ",", " int", ")", " or", " k", " <", " ", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "'", "k", "'", " must", " be", " a", " non", "-", "negative", " integer", ".", "\"", ")", "\n", "    ", "data", " =", " data", ".", "copy", "()", "\n", "    ", "data", "['", "distance", "']", " =", " np", ".", "sqrt", "((", "data", "['", "Lat", "itude", "']", " -", " target", "[", "0", "])", " **", " ", "2", " +", " (", "data", "['", "Long", "itude", "']", " -", " target", "[", "1", "])", " **", " ", "2", ")", "\n", "    ", "ne", "ighbors", " =", " data", ".", "nsmall", "est", "(", "k", ",", " '", "distance", "')", "\n", "    ", "ne", "arest", "_", "ne", "ighbors", " =", " neighbors", "[", "['", "Lat", "itude", "'", ",", " '", "Long", "itude", "']", "]", ".", "values", ".", "tol", "ist", "()", "\n", "    ", "return", " nearest", "_", "ne", "ighbors", "\n", "\n", "if"], "logprobs": [-0.7325347065925598, -0.3479824662208557, -0.01783652789890766, -0.0002195594133809209, -0.011133570224046707, -0.000811366830021143, -0.010038484819233418, -0.04931870102882385, -0.007816915400326252, -0.00968720018863678, -0.060372933745384216, -0.0009477414423599839, -0.05118754878640175, -0.003275151364505291, -0.011156558059155941, -0.00787345226854086, -0.011553050018846989, -0.0019062458304688334, -1.1920858014491387e-05, -0.07582540810108185, -0.03559323772788048, -1.232351541519165, -0.0009727513534016907, -0.00032860602368600667, -0.027379965409636497, -0.0009280903614126146, -0.008890331722795963, -0.008279760368168354, -0.0016035091830417514, -0.0006270825979299843, -0.0006151691195555031, -0.31427136063575745, -0.004208992701023817, -0.00035255891270935535, -0.0031357663683593273, -1.649060606956482, -1.9676599502563477, -0.9125958681106567, -0.28756898641586304, -1.0444307327270508, -2.2044920921325684, -0.05521683022379875, -0.10327538847923279, -0.08663761615753174, -0.5640880465507507, -0.36643481254577637, -0.9660636782646179, -0.028425760567188263, -0.003070404287427664, -0.282650887966156, -7.510157047363464e-06, -0.2980519235134125, -0.37314921617507935, -0.10749257355928421, -0.025085728615522385, -0.03971332684159279, -0.00029666791670024395, -0.0007123793475329876, -0.07092959433794022, -0.005540609825402498, -0.0027683766093105078, -0.00310320477001369, -0.0005899119423702359, -0.6491141319274902, -0.004763564094901085, -0.00019441144831944257, -0.006895554717630148, -0.08059652894735336, -0.002580647822469473, -0.0006032554083503783, -0.0003300360403954983, -1.6689286894688848e-06, -2.8609820219571702e-05, -0.001522573409602046, -0.0007644353318028152, -3.480850500636734e-05, -0.0003067976504098624, -0.00012146688823122531, -0.003181041684001684, -0.0014265133067965508, -8.34430247778073e-05, -0.016999252140522003, -0.12350057065486908, -0.018395768478512764, -2.0849525928497314, -0.8165184855461121, -0.010035770945250988, -0.13402239978313446, -0.02278318628668785, -1.1932525634765625, -1.1920928244535389e-07, -0.00043704494601115584, -0.010169358924031258, -0.07366858422756195, -0.025554828345775604, -9.655486064730212e-05, -0.013491406105458736, -0.3816542625427246, -0.010081443004310131, -0.8358150124549866, -2.9247992038726807, -0.17343942821025848, -0.034278031438589096, -0.005914685782045126, -0.004466794431209564, -0.22454513609409332, -0.06421408802270889, -0.0003846143954433501, -0.002617150079458952, -0.000102037942269817, -8.618460560683161e-05, -0.0003240775258745998, -0.012722281739115715, -0.00011586471373448148, -7.152531907195225e-06, -0.0027212989516556263, -0.00020251607929822057, -0.05989215523004532, -0.06373582035303116, -0.006538545247167349, -0.0012449617497622967, -8.344646857949556e-07, -0.0007697956170886755, -0.005376047920435667, -0.059226568788290024, -0.06649857759475708, -0.003203381784260273, -2.6940935640595853e-05, -1.4543427823809907e-05, -1.311301275563892e-06, -0.3914419412612915, -0.0157526396214962, -1.928330659866333], "finish_reason": "stop"}], "metrics": {"energy": 538.1085323829651, "energy_per_token": 4.045928814909512, "time": 12.111442, "time_per_token": 0.09106347368421053}}
