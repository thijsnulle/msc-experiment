{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    processed_json_files = []\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    for file in json_files:\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n\n        # Use regex to find double quotes and escape them\n        escaped_content = re.sub(r'\"', r'\\\\\"', content)\n\n        with open(file, \"w\", encoding=\"utf-8\") as f:\n            f.write(escaped_content)\n\n        processed_json_files.append(file)\n\n    return processed_json_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "processed", "_", "json", "_", "files", " =", " []", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "for", " file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "\n", "        ", "#", " Use", " regex", " to", " find", " double", " quotes", " and", " escape", " them", "\n", "        ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " f", ":", "\n", "            ", "f", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "\n", "        ", "processed", "_", "json", "_", "files", ".", "append", "(", "file", ")", "\n", "\n", "    ", "return", " processed", "_", "json", "_", "files", "\n", "\n", "if"], "logprobs": [-0.8436912298202515, -0.05179659277200699, -0.006033896002918482, -2.312633478140924e-05, -0.0012821081327274442, -3.933898824470816e-06, -0.32953765988349915, -0.00018571082910057157, -0.0021089711226522923, -0.0008150592911988497, -8.702239938429557e-06, -0.007784269750118256, -0.006730979308485985, -0.004219320602715015, -0.013048499822616577, -0.0019246878800913692, -0.00011205045302631333, -5.364403477869928e-06, -0.024834467098116875, -0.4489343464374542, -0.04288753867149353, -0.23065520823001862, -0.8736836910247803, -0.00019870213873218745, -0.000938332756049931, -3.6238969187252223e-05, -2.3841855067985307e-07, -0.0027429359033703804, -0.5976147651672363, -0.0004570631426759064, -0.0017035985365509987, -0.20489846169948578, -0.003930938430130482, -0.00044848397374153137, -0.0008329259580932558, -0.15375369787216187, -0.0002330270071979612, -1.9171772003173828, -0.007815969176590443, -1.3820551633834839, -0.0781780406832695, -0.004960966296494007, -0.009318548254668713, -0.01495178323239088, -0.014350778423249722, -1.0535420179367065, -0.7855188846588135, -0.0015705404803156853, -0.1307678371667862, -0.02166789583861828, -0.013829248026013374, -2.0146166207268834e-05, -0.00483095133677125, -0.0007811117684468627, -0.1752721071243286, -5.960462772236497e-07, -3.099436753473128e-06, -1.311301275563892e-06, -0.0020816102623939514, -3.397406908334233e-05, -0.000331704446580261, -9.119095193454996e-05, -3.6954811548639555e-06, -0.0003091811086051166, -0.24971050024032593, -0.029929179698228836, -0.0017043125117197633, -0.00024685196694917977, -0.00039152585668489337, -0.006513081956654787, -0.007515726611018181, -0.25722071528434753, -0.00012599628826137632, -0.05254417285323143, -1.2656872272491455, -0.7658969759941101, -0.0009984752396121621, -2.3841855067985307e-07, -3.099436753473128e-06, -6.472854875028133e-05, -0.0001820160250645131, -0.007742040790617466, -0.07476544380187988, -7.283422019099817e-05, -6.472854875028133e-05, -0.0014467497821897268, -0.03870977833867073, -0.07067381590604782, -0.005412685684859753, -0.08495152741670609, -1.6341346502304077, -0.020651672035455704, -0.14721965789794922, -0.0002441108226776123, -0.02906132861971855, -0.05094831436872482, -0.0002563863235991448, -0.001258534612134099, -0.015467564575374126, -3.8265450712060556e-05, -0.8708897233009338, -0.03469229117035866, -0.0035171573981642723, -0.0004012971476186067, -0.6660884618759155, -0.0046249800361692905, -0.07787404954433441, -1.8358061424805783e-05, -1.9073468138230965e-06, -0.0003868784988299012, -0.007683958858251572, -0.28708478808403015, -0.029195178300142288, -0.694327712059021, -1.3262029886245728, -0.8558048605918884, -0.10433994233608246, -0.5931215286254883, -1.0436891317367554, -0.023317189887166023, -0.9482715129852295, -0.8716052770614624, -0.01632770523428917, -0.9240016341209412, -0.00041797960875555873, -0.8511093258857727, -9.65590606938349e-06, -5.400034933700226e-05, -0.004197715315967798, -0.013598544523119926, -0.000625176471658051, -0.004721920005977154, -0.000259365770034492, -9.07141511561349e-05, -0.026264218613505363, -0.023073988035321236, -0.7264373898506165, -0.04599831625819206, -0.0886998102068901, -0.00011240804451517761, -0.052356623113155365, -0.250858336687088, -5.2927523938706145e-05, -0.00024041623692028224, -3.242440288886428e-05, -0.0005191409145481884, -0.011288229376077652, -0.00948659610003233, -0.012145139276981354, -0.00023910524032544345, -0.4191208779811859, -1.3232143828645349e-05, -1.4781842764932662e-05, -0.0012479382567107677, -0.00012933371181134135, -0.004080541897565126, -0.0005418977816589177, -0.001388062839396298, -0.008217571303248405, -0.0007366804056800902, -0.0003736513026524335, -6.198863957251888e-06, -9.667406266089529e-05, -0.00021038226259406656, -5.972207145532593e-05, -5.4238757002167404e-05, -0.0007739647408016026, -1.585470999998506e-05, -0.002379683079198003, -0.000742279109545052, -0.00048565989709459245, -0.00014411364099942148, -0.571740984916687, -3.576272320060525e-06, -0.0001716466504149139, -0.0002619877050165087, -0.0009087961516343057, -4.768370445162873e-07, -1.0728830375228426e-06, -1.1920928244535389e-07, -2.622600959512056e-06, -0.0013990148436278105, -0.00041952868923544884, -0.02789088524878025, -0.0026228572241961956, -0.027720220386981964, -4.291525328881107e-06, -0.00015293381875380874, -2.3841830625315197e-06, -0.00015472168161068112, -3.290122185717337e-05, -8.809178689261898e-05, -0.0008691347320564091, -0.12600509822368622, -0.004750632215291262, -0.0007257211836986244, -0.015329986810684204, -0.0019524098606780171, -0.007653319742530584, -0.006067547015845776, -1.311301275563892e-06, -1.5497195136049413e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.2276349812746048, -0.008663331158459187, -0.5227513909339905], "finish_reason": "stop"}], "metrics": {"energy": 945.7815528411863, "energy_per_token": 4.56899300889462, "time": 23.591114, "time_per_token": 0.11396673429951691}}
{"outputs": [{"text": "# Get the absolute path of the directory\n    directory_path = os.path.abspath(directory_path)\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory does not exist: {directory_path}\")\n\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_json_files = []\n\n    for json_file in json_files:\n        # Open the JSON file and read its contents\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            json_data = json.load(file)\n\n        # Escape the double quotes\n        json_data = re.sub(r'(?<!\\\\)\"', r'\\\\\\\"', json_data)\n\n        # Write the escaped JSON back to the file\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            file.write(", "tokens": ["#", " Get", " the", " absolute", " path", " of", " the", " directory", "\n", "    ", "directory", "_", "path", " =", " os", ".", "path", ".", "ab", "sp", "ath", "(", "directory", "_", "path", ")", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " does", " not", " exist", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "processed", "_", "json", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "#", " Open", " the", " JSON", " file", " and", " read", " its", " contents", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "json", "_", "data", " =", " json", ".", "load", "(", "file", ")", "\n", "\n", "        ", "#", " Escape", " the", " double", " quotes", "\n", "        ", "json", "_", "data", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\", ")\"", "'", ",", " r", "'", "\\\\\\\"", "'", ",", " json", "_", "data", ")", "\n", "\n", "        ", "#", " Write", " the", " escaped", " JSON", " back", " to", " the", " file", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "("], "logprobs": [-1.7926647663116455, -3.3440961837768555, -1.2852309942245483, -1.5724661350250244, -0.11551623046398163, -0.2028825730085373, -0.00486381258815527, -0.34517839550971985, -0.2518252432346344, -0.001311871805228293, -0.918724775314331, -0.12592069804668427, -0.023567086085677147, -0.004622606560587883, -0.0065450589172542095, -2.52720492426306e-05, -0.00037305548903532326, -1.8358061424805783e-05, -0.024705499410629272, -2.3841855067985307e-07, -1.0847986231965479e-05, -0.00012170527770649642, -0.006443913094699383, -0.00010585224663373083, -3.576278118089249e-07, -0.0007702721050009131, -0.002522978698834777, -0.2116568237543106, -0.0002337421028641984, -0.039540886878967285, -0.13425704836845398, -0.00753879826515913, -0.1049332469701767, -0.045590080320835114, -0.04077766835689545, -0.036969903856515884, -5.6503606174374e-05, -0.0013678251998499036, -0.011287757195532322, -0.0004207202873658389, -1.311301275563892e-06, -0.000161038784426637, -2.145764938177308e-06, -0.40556493401527405, -2.5510462364763953e-05, -0.00021228920377325267, -6.842378934379667e-05, -1.0728830375228426e-06, -0.010809793137013912, -0.00030751267331652343, -0.000673424918204546, -0.014781010337173939, -0.0014697236474603415, -4.1126360883936286e-05, -2.264974000354414e-06, -0.009889062494039536, -0.44802287220954895, -0.016957644373178482, -0.12655512988567352, -2.3305423259735107, -0.0007333449902944267, -0.001967162825167179, -0.028223317116498947, -0.008241218514740467, -0.0005096090608276427, -0.0008317348547279835, -7.152531907195225e-06, -0.0039240517653524876, -9.810443589231e-05, -0.0001573438785271719, -0.009591684676706791, -0.00017093151109293103, -0.11142048239707947, -2.2255806922912598, -1.471423625946045, -0.017947183921933174, -0.00022968991834204644, -0.27926722168922424, -0.12738752365112305, -0.005838720127940178, -0.014489314518868923, -0.0007871866691857576, -0.08365058153867722, -0.04069159924983978, -0.00017689094238448888, -0.26097044348716736, -0.0005376085755415261, -0.029808735474944115, -0.006265521049499512, -0.014669064432382584, -2.5152843591058627e-05, -0.0018057008273899555, -0.0004400238685775548, -0.13159872591495514, -7.152555099310121e-07, -2.3841830625315197e-06, -1.1920928244535389e-07, -0.0005994430393911898, -3.433168603805825e-05, -0.0006176709430292249, -5.543078441405669e-05, -3.2186455882765586e-06, -0.0002641328901518136, -0.15025155246257782, -0.013208745047450066, -0.0008952185744419694, -0.000291662581730634, -0.00014685506175737828, -0.0029901815578341484, -0.0006379238329827785, -0.0356101468205452, -0.00011264643399044871, -2.1615090370178223, -0.009840075857937336, -2.2234947681427, -0.056032754480838776, -0.002942163497209549, -0.0076646762900054455, -0.004306210670620203, -0.05003513768315315, -0.23987257480621338, -9.047575440490618e-05, -0.6411881446838379, -0.3146509826183319, -0.00020466140995267779, -0.011859741061925888, -0.028061171993613243, -0.001698243198916316, -4.768370445162873e-07, -1.1920928244535389e-07, -4.482168878894299e-05, -0.0006463822210207582, -0.023373322561383247, -0.6043583750724792, -2.4156157970428467, -0.21132606267929077, -0.06780886650085449, -0.00031728477915748954, -1.3101353645324707, -0.3464645743370056, -0.20680898427963257, -1.2952218055725098, -0.05033399164676666, -0.0005489272880367935, -0.008793085813522339, -8.177422569133341e-05, -7.772143726469949e-05, -0.0015231685247272253, -9.775113539944869e-06, -5.8412379075889476e-06, -0.00956712570041418, -0.1325523406267166, -0.004393923562020063, -0.010050523094832897, -1.7431025505065918, -0.016049128025770187, -0.0937945544719696, -0.0004077318590134382, -0.02721930667757988, -0.028205586597323418, -7.4741430580616e-05, -0.001943010720424354, -0.011662517674267292, -2.0503786799963564e-05, -0.05455252528190613, -0.0029620127752423286, -0.0003947432560380548, -0.00042358008795417845, -1.4195576906204224, -0.0001541257370263338, -0.579818606376648, -0.014844789169728756, -0.4765511751174927, -6.615896563744172e-05, -0.06204167380928993, -2.706014311115723e-05, -9.035655966727063e-05, -0.0014719852479174733, -0.002359108766540885, -0.029628677293658257, -0.0465279221534729, -0.10425316542387009, -1.0286575555801392, -0.8450235724449158, -0.013219333253800869, -0.002941450336948037, -2.074331521987915, -0.0011156531982123852, -1.2808964252471924, -0.001069093239493668, -0.03556850180029869, -0.04379824921488762, -0.2869188189506531, -0.000816131301689893, -0.005349013488739729, -0.03641601651906967, -0.06011971831321716, -1.438392162322998, -0.3114081025123596, -0.050189223140478134, -0.01710425689816475, -0.30594635009765625, -0.1020093783736229, -0.06821748614311218, -3.755022044060752e-05, -0.09996703267097473, -2.1229963302612305, -1.8144166469573975, -0.0003077510336879641, -0.00010644822759786621, -0.1116761714220047, -0.022390540689229965, -0.0002302858338225633, -0.005090371705591679, -0.016851451247930527, -0.009906531311571598, -0.00047267231275327504, -0.005832557566463947, -0.3760436177253723, -0.4425334930419922, -1.1984379291534424, -0.9769521355628967, -1.4019793272018433, -0.00242594419978559, -0.005033914465457201, -0.08329121768474579, -0.004806274548172951, -0.000262106885202229, -0.004424900282174349, -1.1205610462639015e-05, -2.312633478140924e-05, -0.0010122895473614335, -1.0967194612021558e-05, -1.883488948806189e-05, -0.00023827097902540118, -0.004475339315831661, -0.0009782296838238835, -0.0011751896236091852, -0.004895486403256655, -0.0005555993411689997, -0.0004839917819481343, -1.9192511899746023e-05, -0.00010024998482549563, -0.0002012050390476361, -3.0517112463712692e-05, -4.5298504119273275e-05, -0.0009584600338712335, -2.9682672902708873e-05, -0.0015320956008508801, -0.00025459862081333995, -0.00017236177518498152, -0.00027998341829515994, -0.8257144093513489, -1.2397689715726301e-05, -0.0002805792901199311, -0.00046397410915233195], "finish_reason": "length"}], "metrics": {"energy": 960.0354328222279, "energy_per_token": 3.7501384094618277, "time": 23.953072, "time_per_token": 0.0935666875}}
{"outputs": [{"text": "processed_files = []\n\n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Recursively search for JSON files\n    json_files = glob.glob(directory_path + '/**/*.json', recursive=True)\n\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n            # Convert to string and escape double quotes\n            data = json.dumps(data, indent=4)\n            data = re.sub(r'\"', r'\\\\\"', data)\n\n        with open(json_file, 'w') as file:\n            file.write(data)\n\n        processed_files.append(json_file)\n\n    return processed_files", "tokens": ["processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Check", " if", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Rec", "urs", "ively", " search", " for", " JSON", " files", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " '", "/**", "/*", ".", "json", "'", ",", " recursive", "=", "True", ")", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "file", ")", "\n", "\n", "            ", "#", " Convert", " to", " string", " and", " escape", " double", " quotes", "\n", "            ", "data", " =", " json", ".", "d", "umps", "(", "data", ",", " indent", "=", "4", ")", "\n", "            ", "data", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " data", ")", "\n", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " '", "w", "')", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "data", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "if"], "logprobs": [-2.6187336444854736, -0.028888432309031487, -0.1685613989830017, -0.014900225214660168, -0.02634805254638195, -0.02060566283762455, -1.0237047672271729, -0.000285227142740041, -0.910275399684906, -0.81465744972229, -0.027581186965107918, -1.7362319231033325, -0.11289922893047333, -0.11100257933139801, -0.0001433984871255234, -0.0077519770711660385, -0.02808956988155842, -0.002136806957423687, -7.748573807475623e-06, -0.0002422039397060871, -2.622600959512056e-06, -0.3326949179172516, -5.435795901576057e-05, -0.0005423743859864771, -0.0012561534531414509, -5.364403477869928e-06, -0.013364259153604507, -0.0004001055203843862, -0.0006413786904886365, -0.010810854844748974, -0.001482460182160139, -3.397406908334233e-05, -2.145764938177308e-06, -0.012236877344548702, -0.44070836901664734, -0.019063003361225128, -0.06431201100349426, -0.8144603371620178, -0.00012373158824630082, -0.0007238152320496738, -3.683499380713329e-05, -2.3841855067985307e-07, -0.0014350840356200933, -0.8453977704048157, -0.0002658013836480677, -0.08708975464105606, -0.00862645823508501, -0.00011777184408856556, -0.0002714027068577707, -0.010319801978766918, -0.00023779425828251988, -0.09140084683895111, -4.726863861083984, -0.06522006541490555, -0.042109616100788116, -1.6631243228912354, -0.1012989729642868, -0.3914707899093628, -0.0008256602450273931, -1.2331761121749878, -0.00010430268594063818, -0.14850260317325592, -0.0002083561266772449, -0.01579711213707924, -0.0021821276750415564, -0.012980605475604534, -3.9934315282152966e-05, -0.028485894203186035, -0.0015412606298923492, -0.9500430822372437, -9.786603914108127e-05, -1.9073468138230965e-06, -0.032932717353105545, -1.499274730682373, -0.5186943411827087, -0.007246046792715788, -0.0027453135699033737, -0.00031394799589179456, -0.0005831210291944444, -0.0007631250191479921, -0.0006181474891491234, -0.0017316836165264249, -0.0005161621957086027, -0.0009682258241809905, -0.0021349035669118166, -0.033002499490976334, -0.00011991735664196312, -0.6958488821983337, -0.6380716562271118, -0.0008634176338091493, -0.008100868202745914, -0.014397782273590565, -0.00039641151670366526, -1.1920928244535389e-07, -1.1920928244535389e-07, -6.23445157543756e-05, -0.00030417583184316754, -0.04373788833618164, -0.3404942452907562, -7.629103492945433e-05, -0.00012718822108581662, -0.0006961782928556204, -1.9430925021879375e-05, -2.0265558760002023e-06, -0.01490938663482666, -0.42574450373649597, -0.002921957289800048, -0.4280851185321808, -0.00013982271775603294, -0.056176792830228806, -0.001673013437539339, -0.0009765623253770173, -0.0008437649230472744, -1.9059300422668457, -0.0043160622008144855, -0.5470669269561768, -0.00016008525562938303, -0.11533694714307785, -2.95634672511369e-05, -8.380061626667157e-05, -0.0021205099765211344, -0.009859789162874222, -0.11562497913837433, -2.2810702323913574, -0.18836301565170288, -1.7871589660644531, -1.5053164958953857, -0.31905263662338257, -1.7289400100708008, -0.23410280048847198, -0.06103416904807091, -0.0014971011551097035, -0.2862323820590973, -0.0011204162146896124, -0.4404028058052063, -0.6150635480880737, -1.5061417818069458, -0.00017093151109293103, -0.005191179923713207, -2.861018856492592e-06, -0.0007198841194622219, -0.005274902563542128, -1.728336215019226, -1.9160330295562744, -0.0019010106334462762, -0.14003616571426392, -0.14432798326015472, -0.15598176419734955, -0.037128083407878876, -0.3960888683795929, -0.013014258816838264, -0.3631010949611664, -0.0003319427778478712, -0.0016544476384297013, -0.15977530181407928, -0.013711315579712391, -0.4124755859375, -0.059350598603487015, -0.10075125843286514, -6.09140915912576e-05, -0.09018409252166748, -0.5249959230422974, -0.00015507926582358778, -0.0006130246329121292, -0.00016056202002801, -0.005679067224264145, -0.0017100248951464891, -0.022877216339111328, -0.03199900686740875, -0.49926653504371643, -0.5136940479278564, -1.3470558769768104e-05, -5.1616290875244886e-05, -0.0002195594133809209, -9.417489309271332e-06, -5.245195097813848e-06, -0.0003651905863080174, -0.021434327587485313, -0.00037579628406092525, -0.006317644380033016, -2.6940935640595853e-05, -0.0008524598088115454, -0.00020632999076042324, -0.00086198840290308, -0.0004854215949308127, -0.44452399015426636, -8.4638240878121e-06, -0.0004677870310842991, -0.00029774048016406596, -0.0014554394874721766, -0.0016800350276753306, -0.0014524635626003146, -0.09071889519691467, -0.005880318116396666, -0.11700368672609329, -4.6491513785440475e-06, -0.00021944021864328533, -5.1020273531321436e-05, -9.262132516596466e-05, -0.0013780631124973297, -0.09877988696098328, -9.202533692587167e-05, -1.4662635294371285e-05, -0.011130386963486671, -0.0017538178944960237, -0.017961233854293823, -0.0025468789972364902, -0.020117996260523796, -0.002619765931740403, -4.410734163684538e-06, -2.622600959512056e-06, -0.1251905858516693, -0.0064116958528757095, -0.5416517853736877], "finish_reason": "stop"}], "metrics": {"energy": 765.115876856804, "energy_per_token": 3.575307835779458, "time": 18.487637, "time_per_token": 0.08639082710280374}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_files = []\n\n    for json_file in files:\n        try:\n            with open(json_file, \"r\", encoding=\"utf-8\") as file:\n                json_data = json.load(file)\n\n            escaped_json = re.sub(r'\"', r\"\\\\\\\\\\\"\", json.dumps(json_data))\n\n            with open(json_file, \"w\", encoding=\"utf-8\") as file:\n                json.dump(json.loads(escaped_json), file)\n\n            processed_files.append(json_file)\n\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n        except Exception:\n            pass\n\n    return processed_files", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "                ", "json", "_", "data", " =", " json", ".", "load", "(", "file", ")", "\n", "\n", "            ", "es", "cap", "ed", "_", "json", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "\"", "\\\\\\\\", "\\\"\"", ",", " json", ".", "d", "umps", "(", "json", "_", "data", "))", "\n", "\n", "            ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "                ", "json", ".", "dump", "(", "json", ".", "loads", "(", "es", "cap", "ed", "_", "json", ")", ",", " file", ")", "\n", "\n", "            ", "processed", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "        ", "except", " Exception", ":", "\n", "            ", "pass", "\n", "\n", "    ", "return", " processed", "_", "files"], "logprobs": [-2.832463502883911, -0.18617475032806396, -0.6578362584114075, -0.00011419598013162613, -0.0033134103287011385, -0.0035002888180315495, -0.45180460810661316, -5.722029527532868e-06, -0.00010001159535022452, -1.5497195136049413e-06, -0.013464237563312054, -0.00013195598148740828, -0.0018544872291386127, -0.0014892450999468565, -0.00015066919149830937, -0.002009873976930976, -0.2936848998069763, -0.04230698198080063, -0.006793734151870012, -0.001665277755819261, -0.00018189683032687753, -0.004939614795148373, -0.015206713229417801, -1.6147098541259766, -0.0002613918040879071, -2.340071678161621, -0.03132105618715286, -0.06805535405874252, -0.004701156169176102, -0.018933873623609543, -0.005801268853247166, -0.6627700328826904, -7.986703712958843e-05, -0.09489656984806061, -2.868516445159912, -0.015970878303050995, -0.05506441742181778, -0.03501947969198227, -0.002658287761732936, -0.00014959646796341985, -0.0004210777406115085, -0.03706490620970726, -3.020367383956909, -6.222531374078244e-05, -0.0003420721332076937, -0.0038288156501948833, -0.05609959363937378, -0.00010716341057559475, -0.00010096516780322418, -0.0017360866768285632, -1.2159273865108844e-05, -3.576278118089249e-07, -0.00867254938930273, -0.1172536090016365, -0.01150284893810749, -0.03352877125144005, -1.2081942558288574, -0.010826420970261097, -0.1145528182387352, -0.00046492734691128135, -0.03811141476035118, -0.035939451307058334, -0.0003343261778354645, -0.002204251941293478, -0.01411114539951086, -3.4927710657939315e-05, -0.1402549147605896, -0.009264101274311543, -0.0017202593153342605, -0.00038675934774801135, -1.9814021587371826, -0.0007708676857873797, -0.8282456398010254, -0.005769386421889067, -0.5584191679954529, -0.00016044282529037446, -0.05864620581269264, -2.8013790142722428e-05, -0.0001481661747675389, -0.002380396705120802, -0.00640553655102849, -0.31157511472702026, -0.1069871261715889, -3.5277099609375, -2.7417760065873154e-05, -0.0006466205231845379, -0.014269223436713219, -0.8557409644126892, -0.7047540545463562, -0.3758009970188141, -0.005026560742408037, -0.0028455264400690794, -0.02629789337515831, -0.08380790799856186, -0.8417425751686096, -0.051829420030117035, -0.15446428954601288, -0.0001225396408699453, -0.056300751864910126, -1.7725770473480225, -1.87450110912323, -0.022261489182710648, -0.00021264675888232887, -0.07814584672451019, -0.3505747318267822, -0.00023100091493688524, 0.0, -5.781483559985645e-05, -0.0010380124440416694, -6.544376083184034e-05, -9.298280929215252e-06, -0.03279140591621399, -0.013989015482366085, -0.0396563820540905, -0.0025699466932564974, -0.03091198392212391, -2.1457441107486375e-05, -3.0040289857424796e-05, -0.0011854295153170824, -2.658331868587993e-05, -1.5497195136049413e-06, -0.0003734129713848233, -0.004747191444039345, -0.0023744504433125257, -0.0019267105963081121, -0.006198112387210131, -0.0009701313101686537, -0.0003095386200584471, -1.0609570381348021e-05, -6.723177648382261e-05, -0.0001911934232339263, -4.23184028477408e-05, -2.9205850296420977e-05, -0.0009473841637372971, -8.22540732769994e-06, -0.003391468897461891, -0.0006111184484325349, -0.0003719830128829926, -0.00010334911348763853, -1.64534592628479, -0.012151145376265049, -5.483612312673358e-06, -0.00020930961181875318, -0.34838375449180603, -0.1371653825044632, -0.00021789084712509066, -4.7801782784517854e-05, -0.00024029705673456192, 0.0, -1.0728830375228426e-06, 0.0, 0.0, -0.005904256831854582, -0.00011646069469861686, -0.000626367807853967, -0.41572830080986023, -0.009708096273243427, -0.038400545716285706, -0.005237429868429899, -0.01530580222606659, -5.960446742392378e-06, -0.00036352223833091557, -6.472854875028133e-05, -9.30981186684221e-05, -0.0018521074671298265, -0.07156047224998474, -0.0003725788265001029, -8.427741704508662e-05, -0.005686535034328699, -0.0003670972364488989, -0.7175083160400391, -0.035061608999967575, -0.002846596296876669, -1.8338470458984375, -0.0002712835557758808, -4.768370445162873e-07, -0.1847926378250122, -0.0012481764424592257, -0.0001411338453181088, -0.9105687737464905, -0.16250063478946686, -0.00011622230522334576, -1.7762025890988298e-05, -0.004140258301049471, -0.24879691004753113, -0.004817782435566187, -0.3182251751422882, -0.6634371280670166, -0.00016485285595990717, -0.010160508565604687, -0.0041320668533444405, -3.2066785934148356e-05, -0.002049609087407589, -0.4651247560977936, -0.0008303055074065924, -0.0020591262727975845, -0.11461425572633743, -0.014862289652228355, -0.0014636528212577105, -0.03886493295431137, -0.3764626681804657, -1.5109339952468872, -0.009724270552396774, -1.2863808870315552, -2.7487363815307617, -0.013277565129101276, -0.00037269797758199275, -1.9673587083816528, -0.0556827187538147, -0.015979208052158356, -0.001733230659738183, -0.008597975596785545, -0.004711122717708349, -3.099436753473128e-06, -8.344646857949556e-07], "finish_reason": "stop"}], "metrics": {"energy": 794.7361439552308, "energy_per_token": 3.69644718118712, "time": 18.487993, "time_per_token": 0.08599066511627906}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    for file_path in files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            escaped_content = re.sub(r'\"', r'\\\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(escaped_content)\n    return files", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "for", " file", "_", "path", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "    ", "return", " files", "\n", "\n", "if"], "logprobs": [-2.832463502883911, -0.18617475032806396, -0.6578362584114075, -0.00011419598013162613, -0.0033134103287011385, -0.0035002888180315495, -0.45180460810661316, -5.722029527532868e-06, -0.00010001159535022452, -1.5497195136049413e-06, -0.013464237563312054, -0.00013195598148740828, -0.0018544872291386127, -0.0014892450999468565, -0.00015066919149830937, -0.002009873976930976, -0.2936848998069763, -0.04230698198080063, -0.006793734151870012, -0.001665277755819261, -0.00018189683032687753, -0.004939614795148373, -0.015206713229417801, -0.2221222221851349, -1.1880584955215454, -0.14531108736991882, -1.7373535633087158, -0.11592896282672882, -0.00023552982020191848, -0.0024846892338246107, -0.0002598424907773733, -0.0006117141456343234, -0.008298204280436039, -0.13128985464572906, -0.00023147765023168176, -0.00011073929636040702, -0.0016086269170045853, -0.0001081169830285944, -2.3841855067985307e-07, -0.053421951830387115, -0.12283679842948914, -0.011016852222383022, -0.03885839879512787, -0.2027602344751358, -8.749579137656838e-05, -0.17998455464839935, -0.005604980513453484, -0.000964533886872232, -0.0006961782928556204, -0.48018714785575867, -0.0036123041063547134, -0.08936362713575363, -9.679325739853084e-05, -6.079655122448457e-06, -0.00026008085114881396, -0.005735251121222973, -1.4355978965759277, -1.406211256980896, -0.0001538873475510627, -0.00030655929003842175, -0.07173047214746475, -0.036139532923698425, -0.0004924515378661454, -0.03383179008960724, -0.00017414960893802345, -0.0003625689132604748, -0.0966322273015976, -0.09488561749458313, -0.9419891834259033, -0.09849505871534348, -0.18709979951381683, -0.00012361239350866526, -0.05323558673262596, -0.8950583934783936, -8.368142152903602e-05, -0.0005785936955362558, -9.262132516596466e-05, -0.0008811643347144127, -0.0077648707665503025, -0.0329061858355999, -0.5629752278327942, -0.012458829209208488, -4.446407547220588e-05, -2.47952248173533e-05, -0.0003644755925051868, -7.30726242181845e-05, 0.0, -0.00015710550360381603, -0.0027516144327819347, -0.0005236684810370207, -0.001369610894471407, -0.0025100174825638533, -2.682172998902388e-05, -0.0013098479248583317, -0.00023052419419400394, -0.0002849888114724308, -0.0004078510100953281, -0.25600966811180115, -0.00011872540198964998, -0.000228140561375767, -0.0008677055011503398, -0.0032884590327739716, -2.3841855067985307e-07, -9.536697689327411e-06, -9.536738616588991e-07, -4.768370445162873e-07, -0.001894704531878233, -0.0004614718782249838, -0.08832697570323944, -0.011512276716530323, -0.04527590423822403, -0.06504493206739426, -0.014185779727995396, -0.705166757106781], "finish_reason": "stop"}], "metrics": {"energy": 436.0378393115998, "energy_per_token": 3.8248933272947347, "time": 9.682001, "time_per_token": 0.08492983333333333}}
{"outputs": [{"text": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"Directory does not exist: {directory_path}\")\n    files_list = []\n    for json_file in glob.glob(directory_path + \"/**/*.json\", recursive=True):\n        with open(json_file, \"r\", encoding=\"utf8\") as file:\n            content = file.read()\n        content = re.sub(r'\"', r\"\\\\\\\\\\\"\", content)\n        with open(json_file, \"w\", encoding=\"utf8\") as file:\n            file.write(content)\n        files_list.append(json_file)\n    return files_list", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " does", " not", " exist", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "    ", "files", "_", "list", " =", " []", "\n", "    ", "for", " json", "_", "file", " in", " glob", ".", "glob", "(", "directory", "_", "path", " +", " \"", "/**", "/*", ".", "json", "\"", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "        ", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "\"", "\\\\\\\\", "\\\"\"", ",", " content", ")", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "content", ")", "\n", "        ", "files", "_", "list", ".", "append", "(", "json", "_", "file", ")", "\n", "    ", "return", " files", "_", "list"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -1.4411518573760986, -0.0002212279650848359, -0.00025245340657420456, -0.0016089839627966285, -0.0011722128838300705, -1.1920858014491387e-05, -0.002411673776805401, -0.0067384387366473675, -0.00259515387006104, -0.010628876276314259, -0.004040531348437071, -7.688703772146255e-05, -6.079655122448457e-06, -0.0358213372528553, -0.41797345876693726, -0.043713584542274475, -0.32288050651550293, -2.5275778770446777, -0.0022393406834453344, -0.005567757412791252, -0.03922732546925545, -0.01964692398905754, -0.0009029601933434606, -2.5987286790041253e-05, -1.1920928244535389e-07, -0.007001863792538643, -0.00026770823751576245, -0.0009971652179956436, -2.0531768798828125, -1.541928768157959, -2.6849470138549805, -1.4177942276000977, -0.024914119392633438, -0.79075026512146, -0.007331608794629574, -0.1028369665145874, -0.566918671131134, -1.3286652565002441, -0.06019088625907898, -0.07451518625020981, -0.12660984694957733, -0.010692920535802841, -5.173549288883805e-05, -0.04048223793506622, -0.0014482972910627723, -2.207210063934326, -0.00012790338951162994, -2.3841830625315197e-06, -0.0226875152438879, -0.350450724363327, -2.508486747741699, -0.00934500340372324, -0.0027739638462662697, -0.0012051946250721812, -0.0005082983989268541, -0.03313755244016647, -0.0007101159426383674, -0.004554019309580326, -0.0021099227014929056, -0.0012857988476753235, -0.005373795051127672, -0.00826888345181942, -0.24494165182113647, -0.0002714027068577707, -0.00011681827891152352, -0.0022075825836509466, -4.0411134250462055e-05, -1.1920928244535389e-07, -0.09822376072406769, -0.07807264477014542, -0.020826583728194237, -0.18139033019542694, -1.2727421522140503, -0.018193040043115616, -0.1078382134437561, -0.0005957497633062303, -0.0652703270316124, -2.68457293510437, -4.815939246327616e-05, -0.01750870607793331, -0.0001551984460093081, -0.3100665509700775, -0.024801092222332954, -0.00433362927287817, -0.0011024356354027987, -0.7658854126930237, -0.020251411944627762, -0.2243300825357437, -7.402622577501461e-05, -8.4638240878121e-06, -0.001772143878042698, -0.011778335087001324, -0.6465258598327637, -0.6901996731758118, -0.08198140561580658, -0.0945127010345459, -8.999896090244874e-05, -0.002160359639674425, -0.12252267450094223, -0.07102897763252258, -0.9190587401390076, -0.26762089133262634, -0.4852764904499054, -0.00041786045767366886, -0.132398322224617, -0.9431226849555969, -1.4810189008712769, -0.01721206307411194, -0.0003270567976869643, -0.0020334296859800816, -0.015382695943117142, -0.059468887746334076, -0.00904817320406437, -0.28149086236953735, -6.508615479106084e-05, -2.884823152271565e-05, -0.0037802441511303186, -1.9550132492440753e-05, -2.145764938177308e-06, -0.0011269653914496303, -0.00728320749476552, -0.004797851666808128, -0.014342082664370537, -0.07459573447704315, -0.0016988381976261735, -0.0013503251830115914, -1.7165990357170813e-05, -0.0006036128615960479, -0.010220217518508434, -1.3112935448589269e-05, -0.0013992529129609466, -5.4596363042946905e-05, -0.01084953360259533, -0.0008908117306418717, -0.0011177966371178627, -0.0002503081923350692, -0.40882593393325806, -4.1483970562694594e-05, -0.002314747544005513, -0.0010171722387894988, -0.019320279359817505, -0.0018128404626622796, -0.0005859803641214967, -0.04242981597781181, -0.019300401210784912, -6.23445157543756e-05, -3.611976353568025e-05, -0.0028262692503631115, -0.0002256377338198945, -0.0016548046842217445, -0.06123063713312149, -0.00016127715934999287, -1.4781842764932662e-05, -0.023313229903578758, -0.000736918649636209, -0.05330498144030571, -0.011294475756585598, -0.00615024846047163, -5.006664650863968e-05, -2.9802276912960224e-06], "finish_reason": "stop"}], "metrics": {"energy": 604.2104125099181, "energy_per_token": 3.6398217621079403, "time": 14.697294, "time_per_token": 0.0885379156626506}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Define the pattern for double quotes\n    double_quote_pattern = r'(?<!\\\\)\"'\n\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Process each JSON file\n    processed_files = []\n    for file in json_files:\n        with open(file, \"r\", encoding=\"utf-8\") as json_file:\n            json_data = json.load(json_file)\n\n        # Check if the data is a string\n        if isinstance(json_data, str):\n            # Use regular expressions to replace all double quotes with double backslashes\n            json_data = re.sub(double_quote_pattern, r'\\\\\"', json_data)\n\n        # Write back to the file\n        with open(file, \"w\", encoding=\"utf-8\") as json", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Define", " the", " pattern", " for", " double", " quotes", "\n", "    ", "double", "_", "quote", "_", "pattern", " =", " r", "'(", "?", "<", "!", "\\\\", ")\"", "'", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "#", " Process", " each", " JSON", " file", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "data", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " data", " is", " a", " string", "\n", "        ", "if", " isinstance", "(", "json", "_", "data", ",", " str", "):", "\n", "            ", "#", " Use", " regular", " expressions", " to", " replace", " all", " double", " quotes", " with", " double", " back", "sl", "ashes", "\n", "            ", "json", "_", "data", " =", " re", ".", "sub", "(", "double", "_", "quote", "_", "pattern", ",", " r", "'\\\\", "\"", "'", ",", " json", "_", "data", ")", "\n", "\n", "        ", "#", " Write", " back", " to", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " json"], "logprobs": [-1.7926647663116455, -0.7253312468528748, -0.041194621473550797, -0.1891893446445465, -0.24753251671791077, -0.0835631936788559, -0.11882602423429489, -0.0007929041748866439, -0.011400200426578522, -0.021399905905127525, -0.0033456087112426758, -9.417489309271332e-06, -0.0004024887748528272, -4.172316494077677e-06, -0.18675458431243896, -7.414542778860778e-05, -0.0011252983240410686, -0.0015021003782749176, -2.0265558760002023e-06, -0.014548529870808125, -0.0006906984490342438, -0.000897957943379879, -0.012291870079934597, -0.0012062662281095982, -5.340433563105762e-05, -2.50339189733495e-06, -0.012103683315217495, -1.0857309103012085, -0.2856767475605011, -0.681706964969635, -0.0002967870968859643, -0.0011735226726159453, -0.6383988857269287, -0.0062088933773338795, -0.0015672078588977456, -0.0005828827270306647, -0.07829269021749496, -0.0002015625941567123, -0.339077889919281, -3.234046220779419, -0.33296558260917664, -1.096449613571167, -1.0423747301101685, -1.187880516052246, -0.021064845845103264, -0.3126407861709595, -0.00031406714697368443, -1.6809608936309814, -0.0019752532243728638, -0.13726037740707397, -0.010945872403681278, -0.009173979051411152, -0.000982278841547668, -0.7727611064910889, -2.9681105613708496, -0.702792227268219, -0.06631574779748917, -0.009843617677688599, -0.52813720703125, -0.06651106476783752, -0.04243210330605507, -0.038671817630529404, -0.029159285128116608, -0.00010764019680209458, -0.032241202890872955, -2.2291646003723145, -0.9634038805961609, -0.00325388228520751, -0.00013457823661156, -0.7215961217880249, -0.09470248222351074, -0.004062495660036802, -0.008421503938734531, -0.002005591057240963, -0.1188168153166771, -0.01477090921252966, -0.0001691436773398891, -0.10653682798147202, -0.00027247529942542315, -0.021123439073562622, -0.005071869120001793, -0.015558764338493347, -3.6954195820726454e-05, -0.003919420763850212, -0.0010313435923308134, -0.22020764648914337, -1.0728830375228426e-06, -2.145764938177308e-06, -1.7881377516459906e-06, -0.0007969540893100202, -4.410646579344757e-05, -0.0001357701694360003, -0.0001382732152706012, -4.410734163684538e-06, -0.00036554806865751743, -0.2998315393924713, -0.011615739203989506, -0.0008974815136753023, -0.00014411364099942148, -2.4437606043647975e-05, -0.002424160484224558, -0.0006226746481843293, -0.0447431281208992, -4.3748852476710454e-05, -0.17407165467739105, -0.6419903635978699, -0.025271255522966385, -0.03145552799105644, -0.0002506657037883997, -0.0537823848426342, -0.00012742661056108773, -1.2095515727996826, -0.005394189152866602, -0.16868890821933746, -0.0035024271346628666, -0.005504451226443052, -0.004826087038964033, -0.035190399736166, -0.004255169536918402, -1.2077007293701172, -0.9299869537353516, -0.0007447806419804692, -9.536738616588991e-07, 0.0, -3.9457496313843876e-05, -7.724463648628443e-05, -0.009050535969436169, -0.6060272455215454, -2.6940935640595853e-05, -6.806619057897478e-05, -0.0012011463986709714, -0.010615783743560314, -0.09454545378684998, -0.003378875320777297, -0.028206050395965576, -1.702150583267212, -0.014418110251426697, -0.1030222699046135, -0.00013684290752280504, -0.03163629770278931, -0.038825374096632004, -0.0002008474839385599, -0.002311536343768239, -0.009205399081110954, -4.351044481154531e-05, -1.136387586593628, -0.003582371398806572, -0.008008512668311596, -0.0021891456563025713, -0.0009807306341826916, -0.0004619484825525433, -1.5422165393829346, -0.00014399446081370115, -1.0848387479782104, -0.007638176903128624, -0.01214313693344593, -1.1033422946929932, -0.03770775347948074, -4.005352093372494e-05, -0.0002731903805397451, -5.1377883210079744e-05, -2.622600959512056e-06, -0.0024947968777269125, -0.007290426176041365, -0.31931132078170776, -0.13903696835041046, -0.09251441806554794, -2.1014325618743896, -0.04424941912293434, -0.17535074055194855, -1.5268489122390747, -0.06095745414495468, -0.20817555487155914, -0.5575197339057922, -0.7002251744270325, -0.0003922408213838935, -0.009806079789996147, -0.01270427368581295, -5.245195097813848e-06, -0.0003150205302517861, -3.8265450712060556e-05, 0.0, -5.817244164063595e-05, -0.007515844888985157, -0.0041909487918019295, -0.0005525015876628458, -0.0062383925542235374, -0.19727060198783875, -2.4298415184020996, -1.9755911827087402, -0.29253867268562317, -0.021891264244914055, -1.0310453176498413, -1.0032122135162354, -0.3143765330314636, -0.009526507928967476, -0.3063489496707916, -1.3847641944885254, -0.04310336336493492, -0.10146291553974152, -0.0019606193527579308, -0.11823942512273788, -0.00019524575327523053, -0.5559878349304199, -2.4676019165781327e-05, -0.00725693441927433, -0.030589692294597626, -0.0042719063349068165, -8.106198947643861e-06, -0.0004441943601705134, -0.0005619138828478754, -0.02920050360262394, -2.3841855067985307e-07, -8.344646857949556e-07, -7.152555099310121e-07, -2.3841855067985307e-07, -6.55629628454335e-05, -0.08321882039308548, -0.5760874152183533, -6.782778655178845e-05, -9.226373367710039e-05, -3.814624506048858e-05, -0.0011077941162511706, -4.8040190449682996e-05, -4.291525328881107e-06, -0.00807993859052658, -0.0017948722233995795, -0.21252745389938354, -0.23714692890644073, -0.29147157073020935, -0.16844959557056427, -0.8574852347373962, -2.9925198554992676, -0.017292559146881104, -1.279431939125061, -0.043912459164857864, -0.0001445904199499637, -0.006234956905245781, -1.0847986231965479e-05, -2.0861407392658293e-05, -0.0009283285471610725, -9.655486064730212e-05, -0.005248221103101969, -0.0014556775568053126, -0.0022586092818528414, -0.006757976021617651, -0.0005298641044646502, -0.0006158839096315205, -1.5735502529423684e-05, -0.0001037067049765028, -0.0003738896339200437, -2.5510462364763953e-05, -3.755022044060752e-05, -0.0012763934209942818, -5.602820692729438e-06, -0.01140220370143652], "finish_reason": "length"}], "metrics": {"energy": 898.0078098344803, "energy_per_token": 3.5078430071659388, "time": 22.27718, "time_per_token": 0.087020234375}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n    processed_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        escaped_content = re.sub(r'\"([^\"]+)\"', r'\"\\1\"', content)\n\n        with open(json_file, \"w\") as file:\n            file.write(escaped_content)\n\n        processed_files.append(json_file)\n\n    return processed_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}", "/*", ".", "json", "\"", ")", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "([", "^", "\"", "]+", ")\"", "'", ",", " r", "'", "\"", "\\", "1", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -0.9426590800285339, -0.00017271934484597296, -0.0011123190633952618, -2.1219027985353023e-05, -2.3841855067985307e-07, -0.0027516144327819347, -0.5678119659423828, -0.000402250443585217, -0.0016033900901675224, -0.1946418583393097, -0.003763617714866996, -0.00043394684325903654, -0.0008429311565123498, -0.1333882063627243, -0.00022623363474849612, -0.7021576762199402, -0.002571254502981901, -0.04665069282054901, -0.008843895979225636, -0.04706929996609688, -2.8967437174287625e-05, -0.002396808471530676, -0.000774798565544188, -2.2229645252227783, -0.07380766421556473, -0.0002833203470800072, -0.0016260033007711172, -2.47952248173533e-05, -8.344646857949556e-07, -0.2654462456703186, -0.01314015593379736, -0.0013856819132342935, -0.0010748092317953706, -0.00011407678539399058, -0.011276441626250744, -0.014261231757700443, -0.5713057518005371, -0.4808918833732605, -0.014525267295539379, -0.12521520256996155, -0.001848180778324604, -0.026598121970891953, -0.0025938458275049925, -0.08859769999980927, -6.913899414939806e-05, -0.06320216506719589, -0.4982011020183563, -0.0004564673872664571, -0.008394669741392136, -0.01180967316031456, -0.0009121309849433601, -2.3841855067985307e-07, -7.152555099310121e-07, -5.793403761344962e-05, -0.0002335037279408425, -0.014353716745972633, -0.07766769826412201, -5.721882189391181e-05, -4.851700214203447e-05, -0.0009392855572514236, -8.4638240878121e-06, -1.0728830375228426e-06, -0.019755976274609566, -0.1547718048095703, -0.005948933307081461, -0.07852745801210403, -0.2883237600326538, -1.7165990357170813e-05, -0.03491748869419098, -0.0030284514650702477, -0.0008725888328626752, -0.0003483880718704313, -0.5109660625457764, -0.0029736608266830444, -0.07065948843955994, -9.059865078597795e-06, -4.172316494077677e-06, -0.0006191005813889205, -0.007778828497976065, -0.2821284830570221, -0.03293571621179581, -1.8471591472625732, -1.811964830267243e-05, -0.00017593742813915014, -0.011903680860996246, -0.04097861424088478, -0.0005679901223629713, -0.038398366421461105, -0.0002181292074965313, -0.00025018901214934886, -0.08621097356081009, -0.07142762094736099, -0.7967097163200378, -0.05876423791050911, -2.54896879196167, -0.04460860788822174, -0.007164974696934223, -1.526608943939209, -0.13384723663330078, -0.0075965337455272675, -6.90197994117625e-05, -0.03314550966024399, -0.02428312413394451, -0.05554357171058655, -0.9604573845863342, -0.005878540687263012, -0.030232485383749008, -0.004632811527699232, -0.0022182876709848642, -0.0005787128466181457, -0.012166337110102177, -0.09680743515491486, -0.08300303667783737, -0.00030417583184316754, -0.052036531269550323, -2.253030106658116e-05, -4.172238186583854e-05, -0.00040546778473071754, -4.6491513785440475e-06, -3.814689989667386e-06, -0.0001805857609724626, -0.002220666501671076, -0.0005221195751801133, -0.0005607224884442985, -0.00248231110163033, -1.3470558769768104e-05, -0.0005989664932712913, -0.0002019201492657885, -0.00024959311122074723, -0.00028689560713246465, -0.17578749358654022, -1.1920858014491387e-05, -0.00027891082572750747, -0.0007267932523973286, -0.005141844507306814, -2.3841855067985307e-07, -3.933898824470816e-06, -1.0728830375228426e-06, -2.0265558760002023e-06, -0.005331820342689753, -0.00022968991834204644, -0.02226405404508114, -0.002888319082558155, -0.020221039652824402, -2.3841574147809297e-05, -0.0014610340585932136, -9.881961887003854e-05, -7.092700980138034e-05, -0.0010913613950833678, -0.06629220396280289, -2.7656173188006505e-05, -2.7656173188006505e-05, -0.00753442058339715, -0.0005955114611424506, -0.014069183729588985, -0.0018347349250689149, -0.008684013038873672, -0.00603839848190546, -2.7418097943154862e-06, -1.311301275563892e-06, -2.1379992961883545, -3.2186455882765586e-06, -1.4305104514278355e-06, -2.145764938177308e-06, -2.586808113846928e-05, -0.19862660765647888], "finish_reason": "stop"}], "metrics": {"energy": 681.2757536344527, "energy_per_token": 3.623807200183259, "time": 15.766872, "time_per_token": 0.08386634042553191}}
{"outputs": [{"text": "json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n\n    if not json_files:\n        return []\n\n    for file_path in json_files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        content = re.sub(r'\"', r'\\\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(content)\n        processed_files.append(file_path)\n\n    return processed_files", "tokens": ["json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "if", " not", " json", "_", "files", ":", "\n", "        ", "return", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "content", ")", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "if"], "logprobs": [-3.5816967487335205, -0.05742323398590088, -0.1586226224899292, -0.01995277777314186, -0.08465878665447235, -7.819823804311454e-05, -0.001623980118893087, -0.0017207353375852108, -0.3848482668399811, -1.6689286894688848e-06, -4.7801782784517854e-05, -1.9073468138230965e-06, -0.013818313367664814, -0.00010907054820563644, -0.0012996093137189746, -0.0014748420799151063, -0.00011765264935093, -0.0014578201808035374, -0.24758175015449524, -0.02947462908923626, -0.0022513538133352995, -0.0007394201820716262, -0.00033384948619641364, -0.00792206171900034, -0.01586047373712063, -0.3193967342376709, -1.0007680654525757, -0.02508421614766121, -0.21554313600063324, -0.002388721564784646, -0.02803891710937023, -0.003031898057088256, -0.554385781288147, -0.00013386306818574667, -2.507089376449585, -0.17112047970294952, -1.1811453104019165, -0.0002461368858348578, -3.576278118089249e-07, -0.005921440199017525, -0.0065282415598630905, -0.0011530425399541855, -1.132891058921814, -1.2287349700927734, -0.02552461437880993, -0.021000996232032776, -0.0002225389762315899, -0.1594572216272354, -0.6674304604530334, -0.9383640885353088, -0.027410469949245453, -0.00011646069469861686, -0.009684956632554531, -8.702239938429557e-06, -1.5497195136049413e-06, -0.00018976318824570626, -0.00028153270250186324, -0.014736726880073547, -0.15966789424419403, -0.0001938155182870105, -0.00010775939153973013, -0.0013238961109891534, -0.00014673586701974273, -1.1920928244535389e-07, -0.020539097487926483, -0.14175724983215332, -0.0051773046143352985, -0.039986759424209595, -0.27430346608161926, -2.992108420585282e-05, -0.19024673104286194, -0.0036231130361557007, -0.000649956171400845, -0.0004967409186065197, -0.5576489567756653, -0.002962963655591011, -0.08136311173439026, -6.687417771900073e-05, -3.4570634852570947e-06, -0.0003883084573317319, -0.00768940057605505, -0.41232767701148987, -0.043349847197532654, -2.0318851470947266, -0.047681767493486404, -0.06172085925936699, -9.119095193454996e-05, -0.0011311330599710345, -0.0904204398393631, -0.06555517017841339, -0.835407018661499, -0.1893472969532013, -0.7453165650367737, -0.000364713923772797, -0.07330450415611267, -1.0003684759140015, -0.0001287377526750788, -0.000644237850792706, -0.00010680581908673048, -0.0008436457719653845, -0.007367583457380533, -0.030383408069610596, -1.6313464641571045, -1.5160417556762695, -5.578839045483619e-05, -4.8636207793606445e-05, -0.000653411028906703, -5.9126061387360096e-05, -1.1920928244535389e-07, -0.0001902399235405028, -0.0033699646592140198, -0.0007767044589854777, -0.0015191215788945556, -0.0030091977678239346, -1.5020257706055418e-05, -0.0013056810712441802, -0.00022790218645241112, -0.00020585325546562672, -0.0003936707798857242, -0.08980167657136917, -4.160317621426657e-05, -0.00054058717796579, -0.0004167880106251687, -0.0012311505852267146, -0.001517812255769968, -0.00033098942367359996, -1.371492624282837, -0.018878309056162834, -3.433168603805825e-05, -0.0005479741375893354, -0.00029047083808109164, -0.00031799983116798103, -0.003236177610233426, -0.1037297397851944, -0.0028827323112636805, -1.6331539882230572e-05, -0.020941460505127907, -0.0006146925734356046, -0.1719426065683365, -0.0032752701081335545, -0.01137144211679697, -0.012949892319738865, -4.0531076592742465e-06, -1.7881377516459906e-06, -0.1663137823343277, -0.008481789380311966, -0.6104252338409424], "finish_reason": "stop"}], "metrics": {"energy": 538.7127843914034, "energy_per_token": 3.6647128189891385, "time": 12.397235, "time_per_token": 0.08433493197278912}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # Find all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Process each JSON file\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes in the content\n        content = re.sub(r'\"', r'\\\\\"', content)\n\n        # Write back the modified content\n        with open(json_file, \"w\") as file:\n            json.dump(json.loads(content), file, indent=4)\n\n    # Return the list of processed JSON files\n    return json_files", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "The", " specified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "#", " Process", " each", " JSON", " file", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Escape", " double", " quotes", " in", " the", " content", "\n", "        ", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "#", " Write", " back", " the", " modified", " content", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "json", ".", "dump", "(", "json", ".", "loads", "(", "content", ")", ",", " file", ",", " indent", "=", "4", ")", "\n", "\n", "    ", "#", " Return", " the", " list", " of", " processed", " JSON", " files", "\n", "    ", "return", " json", "_", "files", "\n", "\n", "if"], "logprobs": [-1.7926647663116455, -0.7253312468528748, -0.041194621473550797, -0.1891893446445465, -0.24753251671791077, -0.0835631936788559, -0.11882602423429489, -0.0007929041748866439, -0.011400200426578522, -0.021399905905127525, -0.0033456087112426758, -9.417489309271332e-06, -0.0004024887748528272, -4.172316494077677e-06, -0.18675458431243896, -7.414542778860778e-05, -0.0011252983240410686, -0.0015021003782749176, -2.0265558760002023e-06, -0.014548529870808125, -0.0006906984490342438, -0.000897957943379879, -0.012291870079934597, -0.0012062662281095982, -5.340433563105762e-05, -2.50339189733495e-06, -0.012103683315217495, -1.0857309103012085, -1.7564656734466553, -0.19508862495422363, -0.0011917401570826769, -0.01193807739764452, -8.105902816168964e-05, -0.0005993238883093, -0.22629372775554657, -0.0033246977254748344, -0.00068926892708987, -0.00044764988706447184, -0.0842231884598732, -0.00022110878489911556, -0.2817935347557068, -1.6107826232910156, -0.1407766491174698, -0.1760377436876297, -0.0045219785533845425, -0.02441866137087345, -0.002592181321233511, -0.2396470010280609, -0.07919838279485703, -0.00022766382608097047, -0.256571888923645, -0.0006641327636316419, -0.022465607151389122, -0.00418774364516139, -0.007306520827114582, -5.94836674281396e-05, -0.0030482991132885218, -0.0008731843554414809, -0.2269744575023651, -8.344646857949556e-07, -2.7418097943154862e-06, -2.3841855067985307e-07, -0.00113589596003294, -3.182837463100441e-05, -0.00011681827891152352, -0.00013100242358632386, -1.1920922133867862e-06, -0.00032395837479270995, -0.17842979729175568, -0.009810329414904118, -0.000570253818295896, -0.00012230125139467418, -6.997340824455023e-05, -0.0021061161532998085, -0.0005509527400135994, -0.10747651755809784, -0.00010847456724150106, -0.3218204379081726, -0.7601372003555298, -0.01920848898589611, -0.03170062601566315, -0.00042167355422861874, -0.05023797228932381, -0.0002215855201939121, -0.8352321982383728, -0.4784027636051178, -0.00010823617776622996, -0.007759902626276016, -0.030204957351088524, -0.0006229128921404481, -4.768370445162873e-07, 0.0, -4.8397800128441304e-05, -0.00013147920253686607, -0.0202803835272789, -0.5079342722892761, -3.3854863431770355e-05, -5.507317473529838e-05, -0.0016433794517070055, -7.510157047363464e-06, -1.5497195136049413e-06, -0.008140243589878082, -0.08893290907144547, -0.003936044406145811, -0.051006656140089035, -0.23986554145812988, -2.6225699912174605e-05, -0.03262065351009369, -0.0022421954199671745, -0.0007699147681705654, -0.00043358939001336694, -0.5758124589920044, -0.0032593482173979282, -0.030580095946788788, -1.0490362910786644e-05, -3.6954811548639555e-06, -0.00024196557933464646, -0.006532860454171896, -0.08347513526678085, -0.04827557131648064, -0.023224830627441406, -0.7246763110160828, -0.13868452608585358, -0.0016077938489615917, -2.0275542736053467, -0.16928671300411224, -0.48957130312919617, -0.09217876940965652, -0.00047874910524114966, -1.213012933731079, -0.08799800276756287, -0.07190987467765808, -0.0001760566228767857, -0.0007446615491062403, -0.0639682188630104, -0.036066632717847824, -0.8293933272361755, -0.04183207452297211, -0.05187005177140236, -5.304672595229931e-05, -0.07182445377111435, -0.3556644916534424, -6.389413465512916e-05, -0.0002802217786666006, -5.209310256759636e-05, -0.00027771908207796514, -0.0040609524585306644, -0.009036004543304443, -0.003414873266592622, -0.00035661060246638954, -0.2512100040912628, -0.05404307693243027, -0.6898314952850342, -0.05258149653673172, -0.15903300046920776, -0.0006541258189827204, -1.6635757684707642, -8.570780482841656e-05, -0.0010451575508341193, -4.768360213347478e-06, -1.728519782773219e-05, -0.00020823694649152458, -3.4570634852570947e-06, -1.311301275563892e-06, -5.793403761344962e-05, -0.001022888463921845, -0.00027926836628466845, -0.0002851079625543207, -0.0036873698700219393, -5.483612312673358e-06, -0.00024256148026324809, -7.664863369427621e-05, -7.772143726469949e-05, -0.0002574589161667973, -2.279301881790161, -0.0011045790743082762, -0.0003636414185166359, -0.0007602662080898881, -1.0689817667007446, -0.006313735153526068, -0.00961943157017231, -0.0003723404952324927, -0.0029817428439855576, -0.003569898894056678, -0.00047910655848681927, -0.0013392536202445626, -1.350006341934204, -0.06421151757240295, -0.0006692553870379925, -0.14265668392181396, -0.030717788264155388, -0.026006748899817467, -0.014146759174764156, -0.009669726714491844, -1.4770867824554443, -0.028448238968849182, -0.3331453502178192, -0.28236427903175354, -0.00012838016846217215, -0.03300780430436134, -0.0343136265873909, -0.0011691170511767268, -0.004264784511178732, -0.00015221867943182588, -0.002916014287620783, -0.029320212081074715, -0.0002696150622796267, -7.235741941258311e-05, -0.14662344753742218, -0.008872253820300102, -0.6156935691833496], "finish_reason": "stop"}], "metrics": {"energy": 768.9779927921305, "energy_per_token": 3.644445463469813, "time": 18.08557, "time_per_token": 0.0857136018957346}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    processed_files = []\n    for file in glob.glob(directory_path + \"/*.json\"):\n        with open(file, \"r\") as json_file:\n            json_data = json_file.read()\n            json_data = re.sub(r'\"([^\"]*)\"', r'\"\\1\"', json_data)\n\n        with open(file, \"w\") as json_file:\n            json_file.write(json_data)\n\n        processed_files.append(file)\n\n    return processed_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "directory", "_", "path", " +", " \"", "/*", ".", "json", "\"", "):", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "data", " =", " json", "_", "file", ".", "read", "()", "\n", "            ", "json", "_", "data", " =", " re", ".", "sub", "(", "r", "'", "\"", "([", "^", "\"", "]*", ")\"", "'", ",", " r", "'", "\"", "\\", "1", "\"", "'", ",", " json", "_", "data", ")", "\n", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "file", ".", "write", "(", "json", "_", "data", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "def"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -1.1586549282073975, -0.004250539932399988, -0.026969045400619507, -0.005861237645149231, -0.0006356602534651756, -0.00015090756642166525, -5.960462772236497e-07, -0.00421623419970274, -0.00023362292267847806, -0.0007021345663815737, -0.11060307174921036, -0.00018559163436293602, -1.8961131572723389, -0.008497273549437523, -0.2554573714733124, -0.006354721263051033, -0.016755327582359314, -0.010924648493528366, -0.8348114490509033, -0.7912884950637817, -0.9708697199821472, -0.5855776071548462, -0.025854233652353287, -2.932505594799295e-05, -0.0298442579805851, -0.0006226746481843293, -2.240992546081543, -0.0002488780301064253, -6.198863957251888e-06, -0.008550580590963364, -0.24237088859081268, -0.15792424976825714, -0.011480105109512806, -0.0005984899471513927, -6.878139538457617e-05, -0.012410322204232216, -0.003066838951781392, -0.009260203689336777, -0.10355455428361893, -0.00011288482346571982, -6.69933797325939e-05, -0.0010449193650856614, -0.05067026615142822, -0.0510614812374115, -0.007204150315374136, -0.06002239137887955, -0.21043013036251068, -6.16293036728166e-05, -0.919673502445221, -0.015017899684607983, -0.011334551498293877, -0.0035577828530222178, -0.001293061301112175, -0.000543446687515825, -1.2766350507736206, -0.0004975749761797488, -0.8227213025093079, -0.00820752140134573, -0.046807464212179184, -1.0181981325149536, -0.00013553177996072918, -2.4676019165781327e-05, -3.814689989667386e-06, -0.00046885941992513835, -0.010076014325022697, -1.2436707019805908, -1.4863499402999878, -0.00034648136352188885, -0.050499819219112396, -0.08779668062925339, -0.1279607117176056, -4.637133679352701e-05, -0.0009129646932706237, -0.09097253531217575, -0.11301348358392715, -0.9173987507820129, -0.21710288524627686, -1.4760801792144775, -0.04911374673247337, -0.0069265724159777164, -0.612541139125824, -0.20422467589378357, -0.019544053822755814, -0.000120751719805412, -0.0458664707839489, -0.11219172179698944, -0.24900008738040924, -1.0209693908691406, -0.004240094218403101, -0.031812530010938644, -0.01723971590399742, -0.015258959494531155, -0.0012703214306384325, -0.00031132620642893016, -0.0003916450368706137, -0.011071322485804558, -0.12978298962116241, -0.5312386751174927, -0.06995679438114166, -0.09217431396245956, -4.756337511935271e-05, -4.053033626405522e-05, -0.0020690003875643015, -0.000506511190906167, -0.007395746186375618, -0.0008459088858217001, -0.0013658013194799423, -0.004437599331140518, -3.266281055402942e-05, -0.007015950512140989, -5.0424259825376794e-05, -0.0007609808817505836, -0.0013994909822940826, -0.00026294111739844084, -0.0004769618099089712, -0.004465014673769474, -0.030189573764801025, -0.01674032397568226, -6.890059739816934e-05, -0.00044526674901135266, -0.0028654965572059155, -0.0021715410985052586, -0.002382894279435277, -4.637133679352701e-05, -0.004898807965219021, -0.00040880427695810795, -0.41025131940841675, -0.007000679615885019, -0.026873890310525894, -8.940656698541716e-06, -0.0014210374793037772, -0.0001954841281985864, -8.749579137656838e-05, -0.0010557560017332435, -0.1536419689655304, -0.01854158379137516, -0.0007387054502032697, -0.07248570024967194, -0.0011512563796713948, -0.008372918702661991, -0.0032035005278885365, -2.622600959512056e-06, -2.3841830625315197e-06, -0.14606837928295135, -0.007183201611042023, -1.4274373054504395], "finish_reason": "stop"}], "metrics": {"energy": 580.5183842353827, "energy_per_token": 3.4554665728296587, "time": 14.084279, "time_per_token": 0.08383499404761904}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"The specified directory '{directory_path}' does not exist\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    modified_files = []\n\n    for file_path in json_files:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n\n        # Prepend double quotes with double backslashes\n        modified_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\\"', content)\n\n        with open(file_path, \"w\", encoding=\"utf-8\") as file:\n            file.write(modified_content)\n\n        modified_files.append(file_path)\n\n    return modified_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " specified", " directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "modified", "_", "files", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Pre", "pend", " double", " quotes", " with", " double", " back", "sl", "ashes", "\n", "        ", "modified", "_", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\\\\\", ")\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "modified", "_", "content", ")", "\n", "\n", "        ", "modified", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " modified", "_", "files", "\n", "\n", "if"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -1.9560645818710327, -0.8102693557739258, -0.006734057795256376, -1.5090434551239014, -0.000277123210253194, -0.00161160237621516, -1.9192511899746023e-05, -1.1920922133867862e-06, -0.0018252156442031264, -0.027264200150966644, -0.0002338612830499187, -0.0009240409708581865, -2.7803614139556885, -0.0007077334448695183, -0.00158791767898947, -0.22603195905685425, -0.00034195298212580383, -0.8022392392158508, -0.005186317954212427, -0.04992774873971939, -0.012989312410354614, -0.06339351087808609, -5.1973900554003194e-05, -0.0023123687133193016, -0.0009835887467488647, -0.33247876167297363, -9.536738616588991e-07, -1.0847986231965479e-05, -1.5497195136049413e-06, -0.0035154942888766527, -5.6265202147187665e-05, -0.00027652730932459235, -0.00015531764074694365, -7.152555099310121e-07, -0.0005189026123844087, -0.19814690947532654, -0.02593020349740982, -0.0017130000051110983, -0.0005343916127458215, -0.0002795067266561091, -0.00549010606482625, -0.010297266766428947, -0.5965640544891357, -2.8834338188171387, -0.007499635685235262, -0.3483818769454956, -0.003957655280828476, -0.018414728343486786, -0.0028249616734683514, -0.1535061001777649, -9.691245941212401e-05, -0.06879310309886932, -0.8245428800582886, -0.9547929763793945, -0.021567918360233307, -8.749579137656838e-05, -0.004145956598222256, -3.576278118089249e-07, -1.1920928244535389e-07, -4.911301948595792e-05, -0.00018535325943958014, -0.00937972404062748, -0.07834416627883911, -9.560128091834486e-05, -6.69933797325939e-05, -0.0006280356901697814, -5.411955135059543e-05, 0.0, -0.027763353660702705, -0.10489653795957565, -0.0060508400201797485, -0.034512534737586975, -1.3948397636413574, -0.0192791186273098, -0.1164642944931984, -0.0002714027068577707, -0.030186451971530914, -0.03791941702365875, -0.00010716341057559475, -0.0019450333202257752, -0.009563465602695942, -4.6132929128361866e-05, -0.10698273777961731, -0.0039175208657979965, -0.0007348936051130295, -0.0003703146940097213, -0.7212259769439697, -0.002628207439556718, -0.08226428180932999, -3.182837463100441e-05, -5.006777428206988e-06, -0.00016080040950328112, -0.0048596602864563465, -0.21388700604438782, -0.022786332294344902, -0.781497061252594, -3.711458206176758, -0.0984874963760376, -0.27166375517845154, -0.10025274008512497, -0.059535156935453415, -1.5604603290557861, -0.004842814523726702, -0.16584771871566772, -8.34430247778073e-05, -0.14562296867370605, -0.0008006466086953878, -0.8765614032745361, -0.005865504499524832, -0.0012822272256016731, -0.0003302744007669389, -0.016957292333245277, -2.610649426060263e-05, -8.809178689261898e-05, -0.019881494343280792, -0.013955865055322647, -0.6860958337783813, -0.1424814760684967, -0.04040530323982239, -0.04293619096279144, -1.5383532047271729, -0.06616903096437454, -0.06022871285676956, -7.021180499577895e-05, -0.07846518605947495, -0.6006934642791748, -4.9470632802695036e-05, -0.00063744728686288, -7.593343616463244e-05, -0.0005312938592396677, -0.009058686904609203, -0.020202815532684326, -0.018545562401413918, -0.00033790123416110873, -0.34745144844055176, -1.2040065485052764e-05, -1.9550132492440753e-05, -0.00025555206229910254, -1.156323378381785e-05, 0.0, -0.0001479277852922678, -0.0037144492380321026, -0.0005197366117499769, -0.0009648911654949188, -0.004634353797882795, -0.0005809764843434095, -0.00031573555315844715, -8.4638240878121e-06, -0.00012814177898690104, -0.0002649671514518559, -4.8397800128441304e-05, -4.482168878894299e-05, -0.0008201810996979475, -7.033323527139146e-06, -0.002166782971471548, -0.00018916724366135895, -0.0003779412363655865, -0.00029952809563837945, -0.36861881613731384, -5.054346183896996e-05, -0.000285584683297202, -0.0001408954558428377, -0.0016843193443492055, -3.576278118089249e-07, -4.410734163684538e-06, -0.002141327131539583, -0.0002406545972917229, -0.042016807943582535, -0.0044981250539422035, -0.013889912515878677, -4.529942543740617e-06, -0.0011947167804464698, -6.270212179515511e-05, -0.0001971527235582471, -0.0017164511373266578, -0.08298734575510025, -0.0006977269076742232, -2.253030106658116e-05, -0.015480711124837399, -0.0005913416389375925, -0.019909890368580818, -0.0034048936795443296, -0.010547369718551636, -0.005893946625292301, -4.172316494077677e-06, -4.768360213347478e-06, -0.22943200170993805, -0.00869252160191536, -0.41582971811294556], "finish_reason": "stop"}], "metrics": {"energy": 716.7215179185873, "energy_per_token": 3.4129596091361303, "time": 17.664797, "time_per_token": 0.08411808095238095}}
{"outputs": [{"text": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    for file in json_files:\n        with open(file, \"r\") as f:\n            content = f.read()\n\n        # Define regular expression to find double quotes\n        double_quote_pattern = re.compile(r'\"')\n\n        # Replace all double quotes with escaped double quotes\n        escaped_content = double_quote_pattern.sub(r'\\\\\\\\\"', content)\n\n        with open(file, \"w\") as f:\n            f.write(escaped_content)\n\n    return json_files", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Spec", "ified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "for", " file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "\n", "        ", "#", " Define", " regular", " expression", " to", " find", " double", " quotes", "\n", "        ", "double", "_", "quote", "_", "pattern", " =", " re", ".", "compile", "(", "r", "'", "\"", "')", "\n", "\n", "        ", "#", " Replace", " all", " double", " quotes", " with", " escaped", " double", " quotes", "\n", "        ", "es", "cap", "ed", "_", "content", " =", " double", "_", "quote", "_", "pattern", ".", "sub", "(", "r", "'", "\\\\\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ")", " as", " f", ":", "\n", "            ", "f", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "\n", "    ", "return", " json", "_", "files", "\n", "\n", "def"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -1.4411518573760986, -0.0002212279650848359, -0.00025245340657420456, -0.0016089839627966285, -0.0011722128838300705, -1.1920858014491387e-05, -0.002411673776805401, -0.0067384387366473675, -0.00259515387006104, -0.010628876276314259, -0.004040531348437071, -7.688703772146255e-05, -6.079655122448457e-06, -0.0358213372528553, -1.1660890579223633, -2.41019868850708, -0.014944854192435741, -0.05143601447343826, -0.11667626351118088, -0.000440262199845165, -0.002953336341306567, -0.37291115522384644, -0.0054920027032494545, -0.0014715091092512012, -0.0014811508590355515, -0.25557878613471985, -0.00025614796322770417, -0.8171950578689575, -0.009716124273836613, -0.05589444562792778, -0.012002273462712765, -0.13580547273159027, -4.2676016164477915e-05, -0.0026704147458076477, -0.001595296896994114, -0.3870619833469391, -1.6689286894688848e-06, -1.2636104656849056e-05, -3.576278118089249e-07, -0.0042567127384245396, -6.687417771900073e-05, -0.0007582411635667086, -0.00020585325546562672, -9.536738616588991e-07, -0.0006593675934709609, -0.14888601005077362, -0.0407487116754055, -0.002279066713526845, -0.0008231588872149587, -0.0003337303060106933, -0.004880894906818867, -0.005832083523273468, -0.7886242866516113, -0.00012373158824630082, -0.7461331486701965, -0.877785861492157, -0.4168423116207123, -0.0013162767281755805, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.0001629458274692297, -0.0003897384158335626, -0.013548092916607857, -0.05333346500992775, -7.068861305015162e-05, -7.509902934543788e-05, -0.0021100416779518127, -0.05662849545478821, -0.09131380915641785, -0.006191122345626354, -0.05374905839562416, -0.21679283678531647, -2.5629668016335927e-05, -0.6381873488426208, -0.03608744591474533, -0.0027963127940893173, -0.0005573864909820259, -0.596953272819519, -0.004256119020283222, -0.19147035479545593, -5.245195097813848e-06, -3.4570634852570947e-06, -0.00037949037505313754, -0.007541756145656109, -0.4118907153606415, -0.02781633846461773, -0.9279624819755554, -3.9432787895202637, -2.188215970993042, -0.04364922270178795, -2.1739745140075684, -1.5475499629974365, -0.30548349022865295, -0.01789308711886406, -1.0013396739959717, -0.000714523543138057, -1.0862842798233032, -0.0017790456768125296, -0.35742637515068054, -0.021421724930405617, -0.4754851758480072, -0.0005942009738646448, -0.7746136784553528, -1.0251946150674485e-05, -0.0004704084130935371, -0.03049430251121521, -0.011157265864312649, -0.6826176643371582, -0.037892214953899384, -0.055194154381752014, -0.00791851431131363, -0.04628859460353851, -0.00019178935326635838, -0.031049398705363274, -0.41679587960243225, -2.4975814819335938, -0.27408769726753235, -0.0035050406586378813, -0.07026153057813644, -0.6599304676055908, -0.22038735449314117, -0.04693133756518364, -0.09972397983074188, -0.00022003613412380219, -1.0970064401626587, -1.2874520507466514e-05, -6.460934673668817e-05, -0.004646219778805971, -0.05802872031927109, -0.00033968876232393086, -0.15845344960689545, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.6689286894688848e-06, -2.3841830625315197e-06, -7.390948667307384e-06, -6.794906312279636e-06, -0.011573907919228077, -0.014364292845129967, -0.5081979036331177, -1.1651768684387207, -0.08748248964548111, -0.0026676803827285767, -9.202533692587167e-05, -0.0002489972102921456, -0.001396633917465806, -0.018131699413061142, -0.002168448409065604, -0.0007348936051130295, -0.9350179433822632, -1.2993727978027891e-05, -4.172238186583854e-05, -0.0009077242575585842, -0.00021717573690693825, -0.005906508769840002, -0.0007346553611569107, -0.0016369527438655496, -0.004309652838855982, -8.583032467868179e-06, -0.0037335706874728203, -0.000610999355558306, -0.0004593271005433053, -0.0002944036095868796, -0.26955559849739075, -7.629365427419543e-06, -0.00021741411183029413, -0.00038890427094884217, -0.0029790091793984175, -1.311301275563892e-06, -2.861018856492592e-06, -3.576278118089249e-07, -8.344646857949556e-07, -0.002559007378295064, -0.0005990855861455202, -0.025890594348311424, -0.01881689392030239, -0.03682525455951691, -0.03579143434762955, -0.00017724849749356508, -1.966933996300213e-05, -0.14779464900493622, -0.005565267987549305, -1.190341591835022], "finish_reason": "stop"}], "metrics": {"energy": 683.4629227523799, "energy_per_token": 3.6162059404887823, "time": 15.983108, "time_per_token": 0.08456670899470899}}
{"outputs": [{"text": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n    for file in files:\n        with open(file, \"r\") as f:\n            content = f.read()\n            pattern = r\"(?<!\\\\\\\\)((\\\"(?:[^\\\"]|\\\\\\\")*?\\\"))\"\n            replaced = re.sub(pattern, r'\\1\\\\\"', content)\n        with open(file, \"w\") as f:\n            f.write(replaced)\n        processed_files.append(file)\n    return processed_files", "tokens": ["if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "pattern", " =", " r", "\"", "(", "?", "<", "!", "\\\\\\\\", ")(", "(\\\"", "(", "?", ":[", "^", "\\\"]", "|\\\\", "\\\")", "*", "?", "\\\"))", "\"", "\n", "            ", "re", "placed", " =", " re", ".", "sub", "(", "pattern", ",", " r", "'\\", "1", "\\\\", "\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ")", " as", " f", ":", "\n", "            ", "f", ".", "write", "(", "re", "placed", ")", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", ")", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "if"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -1.4411518573760986, -0.0002212279650848359, -0.00025245340657420456, -0.0016089839627966285, -0.0011722128838300705, -1.1920858014491387e-05, -0.002411673776805401, -0.0067384387366473675, -0.00259515387006104, -0.010628876276314259, -0.004040531348437071, -7.688703772146255e-05, -6.079655122448457e-06, -0.0358213372528553, -0.41797345876693726, -0.043713584542274475, -0.32288050651550293, -0.9820302724838257, -0.006651049479842186, -0.0236396212130785, -0.009570077992975712, -0.0009747759322635829, -9.190614218823612e-05, -4.768370445162873e-07, -0.006522438023239374, -0.0002240883477497846, -0.0008322112844325602, -0.12997478246688843, -0.0002033503697020933, -1.9234843254089355, -0.10013087093830109, -0.30959582328796387, -4.386805812828243e-05, -0.002839582972228527, -0.00114292127545923, -0.595331609249115, -1.4305104514278355e-06, -8.583032467868179e-06, -1.1920928244535389e-07, -0.0014885308919474483, -4.851700214203447e-05, -0.0004576589271891862, -0.00019035911827813834, -2.3841830625315197e-06, -0.0005539313424378633, -0.14171452820301056, -0.03203456476330757, -0.004592585377395153, -0.0009808497270569205, -0.0002786724944598973, -0.0026238083373755217, -0.00415462302044034, -0.3405304551124573, -0.5072571039199829, -0.03350017964839935, -0.04626503214240074, -0.0029254043474793434, -0.02231966331601143, -0.00217475276440382, -2.033945083618164, -0.1821630299091339, -0.13336296379566193, -0.37646421790122986, -0.002861217362806201, -0.00016509123088326305, -0.0002907091984525323, -0.005876288749277592, -0.08473370224237442, -7.116541382856667e-05, -6.174850568640977e-05, -0.0016888416139408946, -0.0456508994102478, -0.06812050193548203, -0.009677755646407604, -0.026448946446180344, -0.18018706142902374, -3.659658250398934e-05, -0.5706408619880676, -0.034503091126680374, -0.0016753936652094126, -0.00042381841922178864, -0.5017527341842651, -0.0032182352151721716, -0.0613851398229599, -3.0040289857424796e-05, -2.264974000354414e-06, -0.0003343261778354645, -0.0059434822760522366, -1.3874346017837524, -3.5551199913024902, -0.012497798539698124, -0.32595065236091614, -1.816514253616333, -1.7298240661621094, -0.12634198367595673, -0.0488085113465786, -0.03566030412912369, -1.1899186372756958, -1.5830152034759521, -1.6962473392486572, -1.807270884513855, -0.0172561202198267, -1.060286045074463, -0.24898113310337067, -0.2524397671222687, -1.0330085754394531, -0.724227786064148, -0.7579225301742554, -1.34439218044281, -1.5217803716659546, -0.0857008844614029, -0.2628471851348877, -0.01921807788312435, -2.8096628189086914, -0.21025732159614563, -1.0292103290557861, -0.008617476560175419, -0.0001616347290109843, -0.0007490689749829471, -0.002720704535022378, -0.02072792313992977, -0.000445385929197073, -0.16847094893455505, -3.1225640773773193, -0.03287400305271149, -2.386540651321411, -0.10010035336017609, -0.03675355762243271, -0.0011949549661949277, -0.0015111466636881232, -0.03014758788049221, -0.018114255741238594, -1.3323917388916016, -0.15764997899532318, -5.411955135059543e-05, -4.410646579344757e-05, -0.0011243456974625587, -0.0003023882454726845, -0.005998347420245409, -0.0014293702552095056, -0.002314747544005513, -0.005684282630681992, -2.884823152271565e-05, -0.0035827276296913624, -0.0021415650844573975, -0.0005240259342826903, -0.0005336767644621432, -0.18680532276630402, -2.7417760065873154e-05, -0.00040844682371243834, -0.00045313104055821896, -0.006763778161257505, -0.00012587709352374077, -0.003132438752800226, -0.0002714027068577707, -0.08641228824853897, -0.01705574057996273, -6.103329360485077e-05, -0.00026663561584427953, -0.00023541064001619816, -0.00016366096679121256, -0.001327705685980618, -0.1236693486571312, -0.008019037544727325, -0.00034314466756768525, -0.3877105116844177, -0.011238014325499535, -0.0025894464924931526, -8.583032467868179e-06, -7.152531907195225e-06, -0.15842078626155853, -0.010122510604560375, -0.6289498209953308], "finish_reason": "stop"}], "metrics": {"energy": 609.6077005243296, "energy_per_token": 3.4056296118677634, "time": 15.146143, "time_per_token": 0.08461532402234637}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    # Initialize an empty list to store the processed JSON files\n    processed_files = []\n\n    # Iterate over each file in the directory\n    for filename in glob.glob(os.path.join(directory_path, \"*.json\")):\n        with open(filename, \"r\", encoding=\"utf-8\") as json_file:\n            json_data = json_file.read()\n\n        # Use regex to replace double quotes with double backslashes\n        modified_json_data = re.sub(r'(?<!\\\\)(?:\\\\\\\\)*\"', r'\\1\\\\\"', json_data)\n\n        # Write back the modified content to the JSON file\n        with open(filename, \"w\", encoding=\"utf-8\") as json_file:\n            json_file.write(modified_json_data)\n\n        # Append the processed file to the list\n        processed_files.append(filename)\n\n    return processed", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " processed", " JSON", " files", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "data", " =", " json", "_", "file", ".", "read", "()", "\n", "\n", "        ", "#", " Use", " regex", " to", " replace", " double", " quotes", " with", " double", " back", "sl", "ashes", "\n", "        ", "modified", "_", "json", "_", "data", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\", ")(", "?", ":", "\\\\\\\\", ")*", "\"", "'", ",", " r", "'\\", "1", "\\\\", "\"", "'", ",", " json", "_", "data", ")", "\n", "\n", "        ", "#", " Write", " back", " the", " modified", " content", " to", " the", " JSON", " file", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "file", ".", "write", "(", "modified", "_", "json", "_", "data", ")", "\n", "\n", "        ", "#", " App", "end", " the", " processed", " file", " to", " the", " list", "\n", "        ", "processed", "_", "files", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "return", " processed"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -1.1586549282073975, -0.004250539932399988, -0.026969045400619507, -0.005861237645149231, -0.0006356602534651756, -0.00015090756642166525, -5.960462772236497e-07, -0.00421623419970274, -0.00023362292267847806, -0.0007021345663815737, -0.11060307174921036, -0.00018559163436293602, -2.5070960521698, -3.9018359184265137, -1.75783109664917, -0.008154788054525852, -0.017803270369768143, -0.034792233258485794, -0.15797321498394012, -0.5952363610267639, -0.3695521056652069, -0.22828036546707153, -0.02861831523478031, -0.17048366367816925, -0.0002208704245276749, -0.23268668353557587, -0.008181154727935791, -0.5489400029182434, -0.018742019310593605, -0.0034608489368110895, -0.0010521834483370185, -0.018575169146060944, -0.00014804698002990335, -0.03061697818338871, -2.3393096923828125, -0.0011720937909558415, -0.25088614225387573, -1.1891051530838013, -1.4672868251800537, -0.16599918901920319, -0.002502407180145383, -0.2306671291589737, -0.16030117869377136, -0.00018594920402392745, -0.028310813009738922, -2.309025764465332, -0.0009385710000060499, -0.175813689827919, -2.4318398573086597e-05, -0.03923947364091873, -0.0003455280384514481, -0.14819921553134918, -2.3841855067985307e-07, -2.3841830625315197e-06, 0.0, -0.000439428084064275, -3.2305197237292305e-05, -8.11782301752828e-05, -0.0003046525234822184, -8.344646857949556e-07, -0.0002351722796447575, -0.24679122865200043, -0.009783769026398659, -0.01367956679314375, -0.0007201223634183407, -0.0001515035255579278, -0.005409484263509512, -9.333651541965082e-05, -0.0009984752396121621, -0.05339076370000839, -0.7494017481803894, -0.0001248043408850208, -6.437094270950183e-05, -0.006945869419723749, -0.021954122930765152, -0.07362328469753265, -0.008515003137290478, -0.1794903427362442, -1.3007943630218506, -0.016607725992798805, -0.14670652151107788, -0.000497336674015969, -0.032262787222862244, -0.05337268114089966, -0.0001436368766007945, -0.0011676882859319448, -0.011855971068143845, -3.0874729418428615e-05, -2.3619635105133057, -0.01824934408068657, -0.0017660749144852161, -0.002226375974714756, -0.0036488876212388277, -0.0038528037257492542, -1.3757492303848267, -0.0004408579843584448, -0.997299313545227, -0.01032039150595665, -0.012037255801260471, -0.871027410030365, -9.691245941212401e-05, -2.3483953555114567e-05, -2.9802276912960224e-06, -0.001210552523843944, -0.014525736682116985, -0.07496332377195358, -0.13233201205730438, -0.04854974150657654, -0.9250693917274475, -0.8945863246917725, -0.08869872242212296, -1.5306923389434814, -0.7294068336486816, -0.011900853365659714, -0.3452819585800171, -0.6056393384933472, -0.025527983903884888, -0.12680718302726746, -0.000824349990580231, -0.17397168278694153, -0.0002964295563288033, -1.2345305681228638, -0.005881977267563343, -0.9897506237030029, -0.7194595336914062, -0.0038322594482451677, -0.0005791893927380443, -0.008138825185596943, -7.259582343976945e-05, -0.0003455280384514481, -0.022387508302927017, -0.038441043347120285, -1.1637451648712158, -0.18167705833911896, -0.0379677340388298, -0.023700391873717308, -0.3314369320869446, -2.282597064971924, -1.0164167881011963, -0.3172718584537506, -0.143024280667305, -0.003804827108979225, -0.12918707728385925, -0.010118144564330578, -4.0649541915627196e-05, -0.25240105390548706, -0.0814388319849968, -0.773532509803772, -0.7977514863014221, -9.083335316972807e-05, -0.00019107422849629074, -0.00019333878299221396, -0.001869717612862587, -6.8662193370983e-05, -1.1920922133867862e-06, -0.009274613112211227, -0.013174626976251602, -0.00875669065862894, -0.0002980979916173965, -0.3100898861885071, -0.41017958521842957, -1.1162524223327637, -0.055303797125816345, -0.0207687895745039, -0.21362198889255524, -0.05372702702879906, -0.001975610153749585, -0.7534398436546326, -0.0003871168300975114, -0.005040912423282862, -0.00025245340657420456, -0.003983539994806051, -1.2874520507466514e-05, -1.490105023549404e-05, -0.0006537684239447117, -0.00012408917245920748, -0.009272605180740356, -0.00038890427094884217, -0.0007300095749087632, -0.004337545949965715, -0.0004843492351938039, -0.0003122795606032014, -6.318072337307967e-06, -9.655486064730212e-05, -0.00019751029321923852, -2.1815061700181104e-05, -6.663577369181439e-05, -0.0007108307327143848, -9.536697689327411e-06, -0.004287218675017357, -1.823885577323381e-05, -0.00015472168161068112, -0.0010187203297391534, -0.00010501786891836673, -0.00024303820100612938, -0.002893073484301567, -0.005418139509856701, -0.00039939055568538606, -4.7444173105759546e-05, -0.00015639036428183317, -0.00017021637177094817, -0.0006930810050107539, -1.1920928244535389e-07, -3.576278118089249e-07, -7.033323527139146e-06, -8.344646857949556e-07, -0.001290561049245298, -0.00016652150952722877, -0.010667090304195881, -0.0042646657675504684, -0.13927438855171204, -0.443086713552475, -3.1709168979432434e-05, -0.012490617111325264, -0.1609087884426117, -0.9050820469856262, -0.13987822830677032, -0.0005870526074431837, -0.015145658515393734, -0.03987989202141762, -0.00013016807497479022, -0.0018502036109566689, -4.768370445162873e-07, -7.509902934543788e-05, -2.932505594799295e-05, -5.4238757002167404e-05, -0.0015430459752678871, -0.06922345608472824, -0.011041375808417797, -0.0004818470624741167, -0.009707270190119743, -0.0029723532497882843, -0.2591744363307953, -0.0015470929211005569], "finish_reason": "length"}], "metrics": {"energy": 872.1737803401946, "energy_per_token": 3.4069288294538853, "time": 21.848007, "time_per_token": 0.08534377734375}}
{"outputs": [{"text": "# Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Find all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        # Replace double quotes with escaped double quotes\n        modified_content = re.sub(r'\"', r\"\\\\\" + '\"', content)\n\n        with open(json_file, \"w\") as file:\n            file.write(modified_content)\n\n        processed_files.append(json_file)\n\n    return processed_files", "tokens": ["#", " Check", " if", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Find", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Replace", " double", " quotes", " with", " escaped", " double", " quotes", "\n", "        ", "modified", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "\"", "\\\\", "\"", " +", " '", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "modified", "_", "content", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "if"], "logprobs": [-1.7926647663116455, -0.7253312468528748, -0.041194621473550797, -1.8269418478012085, -0.18238338828086853, -0.136593297123909, -0.0006635371246375144, -0.012766418978571892, -0.015860121697187424, -0.0031319635454565287, -1.0371154530730564e-05, -0.0003215749457012862, -5.125986263010418e-06, -0.22638079524040222, -9.30981186684221e-05, -0.0013915151357650757, -0.0011081513948738575, -1.4305104514278355e-06, -0.01881139539182186, -0.0005679901223629713, -0.0009062950266525149, -0.010966860689222813, -0.002040567807853222, -5.221230458118953e-05, -2.3841830625315197e-06, -0.016465967521071434, -0.47384122014045715, -0.028288215398788452, -0.07655513286590576, -0.762428343296051, -0.0001770101225702092, -0.0009188005933538079, -0.00013040646445006132, 0.0, -0.0016232660273090005, -0.8125607371330261, -0.00034898388548754156, -0.14111915230751038, -0.007380363065749407, -0.00023469554434996098, -0.0004707658663392067, -0.08420160412788391, -0.00016330339713022113, -0.34892940521240234, -1.6394718885421753, -0.2540954351425171, -0.16166137158870697, -0.004023315384984016, -0.03540167585015297, -0.054743047803640366, -0.15041309595108032, -0.05759914591908455, -0.0001821352052502334, -0.15830296277999878, -0.0005265279905870557, -0.02378944680094719, -0.0034608489368110895, -0.008806084282696247, -3.302042750874534e-05, -0.002372904447838664, -0.0005790702416561544, -0.16605129837989807, -3.576278118089249e-07, -1.9073468138230965e-06, -2.3841855067985307e-07, -0.0005927712772972882, -3.290122185717337e-05, -7.855583680793643e-05, -6.747018051100895e-05, -9.536738616588991e-07, -0.00021681819634977728, -0.24042153358459473, -0.01125840749591589, -0.000806602300144732, -9.798523387871683e-05, -5.829164365422912e-05, -0.0021023093722760677, -0.0007348936051130295, -0.10708212852478027, -0.00010024998482549563, -1.9021403789520264, -0.010102213360369205, -0.09314192831516266, -0.0036086218897253275, -0.006330674514174461, -0.04289348050951958, -0.33614638447761536, -5.006664650863968e-05, -0.6426122784614563, -0.4528038203716278, -0.0002162222663173452, -0.007717554457485676, -0.013174156658351421, -0.001341634662821889, -1.1920928244535389e-07, -1.1920928244535389e-07, -3.182837463100441e-05, -0.000285227142740041, -0.01693795435130596, -0.600020706653595, -2.9444261599564925e-05, -5.4596363042946905e-05, -0.0012148389359936118, -6.9141146923357155e-06, -1.4305104514278355e-06, -0.008254341781139374, -0.10043367743492126, -0.0038689535576850176, -0.04557128995656967, -0.28303971886634827, -2.2411095415009186e-05, -0.05419869348406792, -0.0021658313926309347, -0.0009847796754911542, -0.0004295380203984678, -0.624046266078949, -0.0027114315889775753, -0.061391305178403854, -7.748573807475623e-06, -2.622600959512056e-06, -0.0002694958820939064, -0.005523893982172012, -0.08285403251647949, -0.050597742199897766, -0.046534519642591476, -1.507203221321106, -0.3408845365047455, -0.015915149822831154, -0.19071930646896362, -1.0604642629623413, -0.1662149578332901, -0.3241824805736542, -0.15179979801177979, -0.00047910655848681927, -1.4024461507797241, -0.005475167650729418, -0.0008704449282959104, -0.00044550508027896285, -0.022418400272727013, -0.0002057340752799064, -9.274052717955783e-05, -0.0564262755215168, -0.04338717460632324, -0.9585266709327698, -0.04240170866250992, -0.13742414116859436, -0.00017534149810671806, -0.052525848150253296, -2.9295549392700195, -0.28103870153427124, -0.06411055475473404, -0.06290746480226517, -0.07090061157941818, -0.0052717006765306, -0.0006084974738769233, -0.001602675998583436, -0.00047910655848681927, -0.01024098414927721, -0.01568211242556572, -0.006654364988207817, -0.0002762889489531517, -0.47081223130226135, -6.6756979322235566e-06, -2.9801878554280847e-05, -0.00037424711626954377, -1.5497195136049413e-06, -9.536738616588991e-07, -0.00018320789968129247, -0.0023974028881639242, -0.0005250982358120382, -0.000753357307985425, -0.002351259347051382, -9.65590606938349e-06, -0.000386640167562291, -0.0001445904199499637, -0.000513064325787127, -0.00020346954988781363, -0.25791221857070923, -5.8412379075889476e-06, -0.0002321927313460037, -0.00034517052699811757, -0.0033614104613661766, -2.3841855067985307e-07, -1.5497195136049413e-06, -0.000924993772059679, -0.0004379982128739357, -0.009900747798383236, -0.0028613361064344645, -0.10430364310741425, -6.079655122448457e-06, -0.001313776709139347, -5.8530047681415454e-05, -0.00010918975021922961, -0.0006690170848742127, -0.14487287402153015, -1.5258672647178173e-05, -2.0265373677830212e-05, -0.00444792490452528, -0.0011995985405519605, -0.011322764679789543, -0.0027684953529387712, -0.018989551812410355, -0.004518536850810051, -1.5497195136049413e-06, -2.0265558760002023e-06, -0.12657707929611206, -0.008457912132143974, -0.598395049571991], "finish_reason": "stop"}], "metrics": {"energy": 732.6140167160044, "energy_per_token": 3.522182772673098, "time": 17.645273, "time_per_token": 0.08483304326923077}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n\n    for file in json_files:\n        with open(file, \"r\", encoding='utf-8') as file:\n            content = file.read()\n        modified_content = re.sub(r'\"', r'\\\\\\\\\"', content)\n        with open(file, \"w\", encoding='utf-8') as file:\n            file.write(modified_content)\n\n    return json_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " not", " found", ":", " {", "directory", "_", "path", "}\"", ")", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}", "/*", ".", "json", "\"", ")", "\n", "\n", "    ", "for", " file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "        ", "modified", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'", "\\\\\\\\", "\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "modified", "_", "content", ")", "\n", "\n", "    ", "return", " json", "_", "files", "\n", "\n", "def"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -1.1586549282073975, -0.004250539932399988, -0.026969045400619507, -0.005861237645149231, -0.0006356602534651756, -0.00015090756642166525, -5.960462772236497e-07, -0.00421623419970274, -0.00023362292267847806, -0.0007021345663815737, -2.2605817317962646, -0.9592084884643555, -0.008388877846300602, -0.04698456823825836, -0.00636384217068553, -0.048891499638557434, -4.494089080253616e-05, -0.002739607123658061, -0.0008499585674144328, -1.901282548904419, -0.06700283288955688, -0.0003323002893012017, -0.0020026168785989285, -5.674201020156033e-05, -1.1920922133867862e-06, -0.28257736563682556, -0.02250908501446247, -0.0019881022162735462, -0.0016520674107596278, -0.00018153927521780133, -0.017068631947040558, -0.012203080579638481, -2.3153507709503174, -0.00028939827461726964, -1.108417272567749, -1.0534703731536865, -0.5949821472167969, -0.0012200777418911457, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.00014029949670657516, -0.0005327236140146852, -0.012144785374403, -0.05322801321744919, -0.00010632903286023065, -0.00011395759065635502, -0.0017815446481108665, -0.035164617002010345, -0.15290604531764984, -0.005279645789414644, -0.0454324372112751, -1.4147148132324219, -0.015048549510538578, -2.036362409591675, -0.041584987193346024, -0.05318392813205719, -0.0020016650669276714, -0.012705332599580288, -0.0004916174802929163, -2.1780974864959717, -0.36490413546562195, -0.009167601354420185, -0.00273913168348372, -0.5955435633659363, -0.005607351660728455, -0.0679256021976471, -9.512448741588742e-05, -1.0847986231965479e-05, -0.0005585778853856027, -0.009065302088856697, -1.0824170112609863, -2.208442211151123, -0.04625933989882469, -0.004858236759901047, -0.00100740697234869, -0.07524166256189346, -0.00019131260341964662, -0.0002406545972917229, -0.11855150759220123, -0.029802950099110603, -0.8306687474250793, -0.1584465354681015, -0.5733979940414429, -0.00018523407925385982, -0.0773056223988533, -0.6711755990982056, -0.28103023767471313, -0.07591181993484497, -0.003916570916771889, -0.00017355366435367614, -0.0012659162748605013, -0.012545241974294186, -0.040355388075113297, -0.14535900950431824, -0.016963856294751167, -3.3378044463461265e-05, -8.451581379631534e-05, -0.000858415151014924, -0.0003408804477658123, -0.025254402309656143, -0.000974656839389354, -0.006022283341735601, -0.04271473363041878, -0.0026104918215423822, -0.005223673768341541, -0.0005772831500507891, -0.0010985060362145305, -5.23315102327615e-05, -0.0015845850575715303, -6.317892984952778e-05, -0.01013454794883728, -0.0008429311565123498, -0.00029452278977259994, -0.000491021724883467, -0.11580071598291397, -3.671578815556131e-05, -0.00046206763363443315, -0.000226472009671852, -0.0030028987675905228, -8.344646857949556e-07, -8.344646857949556e-07, -0.001683605252765119, -0.0005844315164722502, -0.48097604513168335, -0.005777090322226286, -0.019043589010834694, -0.040997035801410675, -0.00010835537250386551, -1.3947389561508317e-05, -0.17242862284183502, -0.009388581849634647, -1.175058364868164], "finish_reason": "stop"}], "metrics": {"energy": 525.8382934951779, "energy_per_token": 3.4145343733453113, "time": 13.076366, "time_per_token": 0.08491146753246753}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory_path))\n\n    json_files = glob.glob(os.path.join(directory_path, '*.json'))\n    modified_json_files = []\n\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            content = file.read()\n\n        # Escape double quotes using regex and replace them with backslashes\n        escaped_content = re.sub(r'(?<!\\\\)\"', r'\\\\\"', content)\n\n        # Write back the escaped content to the file\n        with open(json_file, 'w') as file:\n            file.write(escaped_content)\n\n        modified_json_files.append(json_file)\n\n    return modified_json_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " not", " found", ":", " {", "}\"", ".", "format", "(", "directory", "_", "path", "))", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "json", "'))", "\n", "    ", "modified", "_", "json", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Escape", " double", " quotes", " using", " regex", " and", " replace", " them", " with", " back", "sl", "ashes", "\n", "        ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\)", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "#", " Write", " back", " the", " escaped", " content", " to", " the", " file", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " '", "w", "')", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "\n", "        ", "modified", "_", "json", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "    ", "return", " modified", "_", "json", "_", "files", "\n", "\n", "if"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -1.145698070526123, -0.43750452995300293, -1.039644718170166, -0.005534919444471598, -2.3305537700653076, -1.6132413148880005, -0.025401663035154343, -0.0007394201820716262, -7.748303323751315e-05, -0.00019238528329879045, -0.003492804942652583, -0.0002150304353563115, -2.861018856492592e-06, -0.00029762129997834563, -0.000508417550008744, -0.1721133291721344, -0.0002109781780745834, -0.7021028399467468, -0.0036810750607401133, -0.04387766122817993, -0.006711678113788366, -0.03877847269177437, -1.8715683836489916e-05, -0.004550103098154068, -0.00380850862711668, -0.21661882102489471, -1.6689286894688848e-06, -8.702239938429557e-06, -2.0265558760002023e-06, -0.0023323495406657457, -4.446407547220588e-05, -0.00011598391574807465, -0.00010680581908673048, -3.576278118089249e-07, -0.0005258131423033774, -1.7336695194244385, -0.013674040324985981, -0.0016574229812249541, -0.0005248599336482584, -0.004028658382594585, -0.005643150769174099, -0.5267201066017151, -2.5452969074249268, -0.005772349424660206, -1.7345614433288574, -0.04558541253209114, -0.005705618765205145, -0.0016200524987652898, -0.01388003770262003, -0.003140519605949521, -0.12479113042354584, -8.976056415122002e-05, -0.05494854226708412, -0.46901631355285645, -0.0003219324571546167, -0.007133727427572012, -0.021863972768187523, -0.0018205749802291393, -5.960462772236497e-07, -4.768370445162873e-07, -6.19869097135961e-05, -0.00016819016309455037, -0.013968795537948608, -0.1007828339934349, -7.86750388215296e-05, -0.00012778419477399439, -0.0032036192715168, -4.291525328881107e-06, -2.622600959512056e-06, -0.02085273526608944, -0.12108100950717926, -0.004889436531811953, -0.3476392328739166, -0.00014625910262111574, -0.1145223081111908, -0.0023222402669489384, -0.0006624649395234883, -0.0004994813934899867, -0.660009503364563, -0.0020692383404821157, -0.055701661854982376, -9.775113539944869e-06, -3.099436753473128e-06, -0.0002821285743266344, -0.00510922959074378, -0.310953825712204, -0.03811956197023392, -0.6142703890800476, -0.9625789523124695, -0.13665683567523956, -0.0022473097778856754, -2.5731453895568848, -0.7052757143974304, -3.0309488773345947, -1.0620232820510864, -0.4862608015537262, -0.01807890087366104, -2.975329875946045, -0.3583720922470093, -0.06323450803756714, -0.06753914803266525, -0.0010886224918067455, -0.8654324412345886, -7.867782187531702e-06, -4.255681051290594e-05, -0.004311076831072569, -0.030610619112849236, -0.00048744716332294047, -0.0033633115235716105, -6.437280717364047e-06, -0.00028975578607060015, -0.058209024369716644, -0.007082593627274036, -0.9384499788284302, -0.11916903406381607, -0.04216790571808815, -0.019327761605381966, -2.7463836669921875, -0.1367538422346115, -0.04369909316301346, -3.361645576660521e-05, -0.1046629473567009, -1.6867351531982422, -0.00031156453769654036, -0.00017248096992261708, -0.0001262346631847322, -0.0006177900941111147, -0.006878388114273548, -0.031155135482549667, -0.01650173030793667, -0.0005035324720665812, -1.2189602851867676, -0.6007035970687866, -0.8724620938301086, -0.08009666204452515, -1.6850087642669678, -0.01648132875561714, -0.17516794800758362, -0.004219201859086752, -1.8151928186416626, -0.008116595447063446, -0.00023529145983047783, -0.0043459730222821236, -1.0251946150674485e-05, -9.476689592702314e-05, -0.0005149707430973649, -2.3841830625315197e-06, -2.9802276912960224e-06, -9.703165414975956e-05, -0.01226360909640789, -0.00035422726068645716, -0.012440227903425694, -1.0132738680113107e-05, -0.001258772797882557, -0.00017832119192462415, -8.260862523457035e-05, -0.000289159914245829, -0.037559423595666885, -1.0132738680113107e-05, -0.00011538793478393927, -0.00021598390594590455, -0.0024568631779402494, -2.3841855067985307e-07, -4.768370445162873e-07, -4.768370445162873e-07, -1.7881377516459906e-06, -0.002415598137304187, -0.00011550712952157483, -0.021879950538277626, -0.004387870896607637, -0.031962405890226364, -3.933898824470816e-06, -8.093983342405409e-05, -2.3841830625315197e-06, -0.00013350549852475524, -7.30726242181845e-05, -0.00015698630886618048, -0.0036582706961780787, -0.14839644730091095, -6.389413465512916e-05, -1.645074735279195e-05, -0.006033540237694979, -0.0011564955348148942, -0.02674831822514534, -0.0034673826303333044, -0.01275912206619978, -0.006353891920298338, -1.6689286894688848e-06, -1.311301275563892e-06, -6.9141146923357155e-06, -2.3841855067985307e-07, -0.19201573729515076, -0.008424695581197739, -0.5072091221809387], "finish_reason": "stop"}], "metrics": {"energy": 718.4249941577916, "energy_per_token": 3.3728872965154535, "time": 18.08471, "time_per_token": 0.08490474178403756}}
{"outputs": [{"text": "import os\n    import re\n    import json\n    import glob\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n\n    # Process each JSON file in the directory\n    for json_file in json_files:\n        # Read the JSON file\n        with open(json_file, \"r\") as file:\n            data = json.load(file)\n\n        # Check if the data is of the type 'str', process it, otherwise pass it to the 'process_data' function\n        if isinstance(data, str):\n            # Find all double quotes in the string\n            double_quotes = re.findall('\"', data)\n\n            # Count the number of double quotes\n            num_double_quotes = len(double_quotes)\n\n            # Replace double quotes with escaped double quotes\n            data = data.", "tokens": ["import", " os", "\n", "    ", "import", " re", "\n", "    ", "import", " json", "\n", "    ", "import", " glob", "\n", "\n", "    ", "#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Process", " each", " JSON", " file", " in", " the", " directory", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "#", " Read", " the", " JSON", " file", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "file", ")", "\n", "\n", "        ", "#", " Check", " if", " the", " data", " is", " of", " the", " type", " '", "str", "'", ",", " process", " it", ",", " otherwise", " pass", " it", " to", " the", " '", "process", "_", "data", "'", " function", "\n", "        ", "if", " isinstance", "(", "data", ",", " str", "):", "\n", "            ", "#", " Find", " all", " double", " quotes", " in", " the", " string", "\n", "            ", "double", "_", "qu", "otes", " =", " re", ".", "find", "all", "('", "\"", "'", ",", " data", ")", "\n", "\n", "            ", "#", " Count", " the", " number", " of", " double", " quotes", "\n", "            ", "num", "_", "double", "_", "qu", "otes", " =", " len", "(", "double", "_", "qu", "otes", ")", "\n", "\n", "            ", "#", " Replace", " double", " quotes", " with", " escaped", " double", " quotes", "\n", "            ", "data", " =", " data", "."], "logprobs": [-3.11230206489563, -1.0170232057571411, -0.04672805592417717, -0.1582387536764145, -0.1256263703107834, -0.22726644575595856, -0.0008100565755739808, -0.01263529621064663, -0.0017851145239546895, -0.01298354659229517, -0.00020597243565134704, -0.023642996326088905, -0.005269566550850868, -0.0009438112610951066, -0.0003215749457012862, -0.2003883719444275, -0.0010184821439906955, -1.30619215965271, -0.59840327501297, -0.039291512221097946, -0.21918149292469025, -0.40252944827079773, -0.057120975106954575, -0.08727876842021942, -0.0003159739135298878, -0.0033780436497181654, -0.006524214521050453, -0.0007375142886303365, -1.7881377516459906e-06, -0.00027211778797209263, -3.4570634852570947e-06, -0.24907629191875458, -4.625213477993384e-05, -0.00159172632265836, -0.0008404298569075763, -4.0531076592742465e-06, -0.020137857645750046, -0.0004481264913920313, -0.0008686583023518324, -0.007017726078629494, -0.0010592094622552395, -4.029192859889008e-05, -2.0265558760002023e-06, -0.008970082737505436, -0.6247314810752869, -0.017839573323726654, -0.10633940994739532, -0.7329954504966736, -0.00014530557382386178, -0.0009240409708581865, -3.4927710657939315e-05, -4.768370445162873e-07, -0.0014085381990298629, -0.8758512139320374, -0.00020144341397099197, -0.10632558912038803, -0.008917033672332764, -0.00015376816736534238, -0.00018404220463708043, -0.015589866787195206, -0.00017617580306250602, -1.727047085762024, -0.0030603024642914534, -0.029351120814681053, -0.006810902617871761, -0.13542503118515015, -1.3828182090946939e-05, -0.003059589536860585, -0.0006344689172692597, -0.14481274783611298, -1.1920928244535389e-07, -3.6954811548639555e-06, -4.768370445162873e-07, -0.0007397775771096349, -3.302042750874534e-05, -0.0001820160250645131, -9.190614218823612e-05, -4.768370445162873e-07, -0.0002588890492916107, -0.3490724563598633, -0.020798444747924805, -0.0010757618583738804, -0.0002755738969426602, -0.00019572250312194228, -0.004247334785759449, -0.05835544690489769, -0.6892080307006836, -0.2948433756828308, -0.00882097240537405, -0.07932205498218536, -0.0008794969180598855, -0.008843541145324707, -0.005794513039290905, -0.03785858675837517, -0.00010132275929208845, -1.6650716066360474, -0.8880053758621216, -0.03170732408761978, -0.007900891825556755, -0.0004080893413629383, -0.9060233235359192, -0.0012931802775710821, -0.021641064435243607, -0.005248814355581999, -0.00023684080224484205, -0.0013167529832571745, -0.47365298867225647, -0.00023529145983047783, -0.010450167581439018, -0.012191185727715492, -0.003435188438743353, -4.768370445162873e-07, -2.3841855067985307e-07, -2.1219027985353023e-05, -6.615896563744172e-05, -0.02429126761853695, -1.758246898651123, -0.2525310516357422, -0.11960627883672714, -0.3929040729999542, -0.10844089090824127, -0.2931622862815857, -0.00032860602368600667, -0.013816667720675468, -3.0278701160568744e-05, -4.7444173105759546e-05, -0.0010139568476006389, -3.576272320060525e-06, -1.311301275563892e-06, -0.003579758107662201, -0.14814668893814087, -0.003217997495085001, -0.0019615711644291878, -0.19932056963443756, -9.894321920000948e-06, -0.04312562942504883, -0.0013234198559075594, -0.00018630675913300365, -0.0002109781780745834, -1.7155580520629883, -0.0069904993288218975, -0.10459143668413162, -5.340433563105762e-05, -0.07131640613079071, -2.884823152271565e-05, -6.05564855504781e-05, -0.001882449141703546, -0.002131691901013255, -0.030801482498645782, -0.02000407502055168, -0.04597771167755127, -2.863043785095215, -0.0608820803463459, -0.17570649087429047, -0.31772884726524353, -0.04419045150279999, -2.98518443107605, -2.8955140113830566, -2.288461208343506, -2.2135560512542725, -0.34252145886421204, -0.006426738575100899, -3.4076545238494873, -4.402769088745117, -1.4295462369918823, -1.965179681777954, -3.0493059158325195, -3.0343379974365234, -0.2989712953567505, -3.6831698417663574, -0.35008910298347473, -3.0490000247955322, -1.169803261756897, -0.03981700539588928, -1.4505716562271118, -0.16075624525547028, -0.06029639020562172, -0.07465536892414093, -0.0008467426523566246, -0.13862121105194092, -0.03064403124153614, -1.537788011773955e-05, -0.00041321321623399854, -0.0001597276859683916, -0.014755639247596264, -0.004993230104446411, -0.0029561889823526144, -0.0029916076455265284, -1.4312412738800049, -3.621278762817383, -0.2738106846809387, -0.27756232023239136, -0.038197245448827744, -0.5663022994995117, -0.012508629821240902, -0.296828955411911, -1.200330376625061, -0.0002406545972917229, -0.9351608157157898, -0.0001567479339428246, -0.06145823374390602, -1.597391747054644e-05, -0.03419128805398941, -0.046311698853969574, -1.9073468138230965e-06, -0.00222090445458889, -0.021403873339295387, -0.9126514792442322, -0.051657021045684814, -0.021960072219371796, -0.00013207517622504383, -0.0010089550632983446, -0.0009760859538801014, -0.00463838828727603, -0.18676230311393738, -0.0009046276099979877, -0.03685018792748451, -3.82623291015625, -0.05351743847131729, -0.30442115664482117, -0.0001932195882545784, -0.16396336257457733, -0.0024497280828654766, -0.6331477761268616, -4.8993817472364753e-05, -0.49980488419532776, -0.00029905137489549816, -0.2557945251464844, -0.00011216964776394889, -0.00021240839851088822, -5.960462772236497e-07, -0.0003147821989841759, -0.008086323738098145, -0.00013255194062367082, -9.369411418447271e-05, -3.576278118089249e-07, 0.0, 0.0, -5.9960475482512265e-05, -0.0011268462985754013, -0.01877676509320736, -0.002130621112883091, -0.036812618374824524, -1.4173444509506226, -1.0136380195617676, -0.0035527939908206463, -0.0781053900718689, -1.42660653591156, -0.1987229734659195, -0.11904903501272202, -0.1884160339832306, -0.00013398226292338222, -0.5889938473701477, -0.05594111606478691, -0.6682180166244507, -0.0001426833332516253], "finish_reason": "length"}], "metrics": {"energy": 884.7796457986835, "energy_per_token": 3.4561704914011075, "time": 21.866241, "time_per_token": 0.08541500390625}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    pattern = os.path.join(directory_path, \"*.json\")\n\n    file_list = []\n\n    for filename in glob.iglob(pattern, recursive=True):\n        if not os.path.isfile(filename):\n            continue\n\n        with open(filename, \"r\") as file:\n            content = file.read()\n\n        content = re.sub(r'(?<!\\\\)\"', r'\\\"', content)  # Escape double quotes with a backslash\n\n        with open(filename, \"w\") as file:\n            file.write(content)\n\n        file_list.append(filename)\n\n    return file_list", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", ")", "\n", "\n", "    ", "file", "_", "list", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "ig", "lob", "(", "pattern", ",", " recursive", "=", "True", "):", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "filename", "):", "\n", "            ", "continue", "\n", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\", ")\"", "'", ",", " r", "'\\\"", "'", ",", " content", ")", "  ", "#", " Escape", " double", " quotes", " with", " a", " back", "slash", "\n", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "content", ")", "\n", "\n", "        ", "file", "_", "list", ".", "append", "(", "filename", ")", "\n", "\n", "    ", "return", " file", "_", "list", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -0.9426590800285339, -0.00017271934484597296, -0.0011123190633952618, -2.1219027985353023e-05, -2.3841855067985307e-07, -0.0027516144327819347, -0.8814220428466797, -0.0008253029081970453, -0.16679033637046814, -0.010232842527329922, -0.0003231241717003286, -0.0010252702049911022, -0.13200247287750244, -0.0002087136817863211, -3.1240031719207764, -0.018439071252942085, -0.643738329410553, -5.1616290875244886e-05, -0.00034314466756768525, -1.5497195136049413e-06, -0.02641783282160759, -0.0006584145012311637, -0.007576303090900183, -7.021180499577895e-05, -2.50339189733495e-06, -0.0008334023877978325, -0.22348852455615997, -0.07805367559194565, -0.011909453198313713, -0.001529715140350163, -0.00020096666412428021, -0.00041869457345455885, -0.01404708530753851, -2.280482053756714, -0.00017975145601667464, -4.027574062347412, -0.03862433880567551, -0.6891261339187622, -0.005590399727225304, -1.3671506643295288, -0.008128656074404716, -0.5328222513198853, -8.284702198579907e-05, -0.0729534775018692, -1.5625566244125366, -0.001821169862523675, -0.004233683925122023, -1.585470999998506e-05, -2.3473966121673584, 0.0, -5.4596363042946905e-05, -0.0012538912706077099, -1.3543686866760254, -0.0006003961316309869, -0.0014459164813160896, -0.09282854944467545, -0.0006403064471669495, -0.0015997005393728614, -0.02727000042796135, -2.076833724975586, -1.1506298780441284, -0.059736862778663635, -1.311301275563892e-06, -0.0006106419023126364, 0.0, -0.09926963597536087, -0.004616317804902792, -0.002847903873771429, -0.0011232740944251418, -0.010951296426355839, -0.011424125172197819, -0.0002790300059132278, -0.010530383326113224, -0.025429554283618927, -0.15858101844787598, -0.00045003299601376057, -0.19264951348304749, -0.0003295593778602779, -0.0001629458274692297, -0.007167341653257608, -0.022809287533164024, -0.20022934675216675, -0.012308355420827866, -0.10652685910463333, -0.396915465593338, -4.029192859889008e-05, -0.18578478693962097, -0.004136578179895878, -0.0007070187130011618, -0.0006187431863509119, -0.5522072911262512, -0.005361819639801979, -0.055062949657440186, -2.0265373677830212e-05, -2.622600959512056e-06, -0.0007303669699467719, -0.010408051311969757, -0.14420300722122192, -0.037858929485082626, -1.381371259689331, -0.04721895605325699, -0.06621287763118744, -6.544376083184034e-05, -0.0009974034037441015, -0.16299064457416534, -0.060075268149375916, -0.939907968044281, -0.2523208260536194, -0.03677481412887573, -0.033743858337402344, -0.5801886916160583, -0.15358778834342957, -0.2283305525779724, -0.0001037067049765028, -0.1714341640472412, -1.7795847654342651, -0.001618624315597117, -0.0009971652179956436, -0.0009344025747850537, -0.010455593466758728, -2.4991614818573, -0.000251142424531281, -1.4622727632522583, -0.19976076483726501, -0.00408434122800827, -2.792600631713867, -0.7874181866645813, -0.7347736954689026, -0.0013988957507535815, -0.07165435701608658, -0.036826979368925095, -0.00020597243565134704, -0.09528137743473053, -1.7404405298293568e-05, -2.2411095415009186e-05, -0.0005874100024811924, -0.0002051381452474743, -0.004730462562292814, -0.0005644158809445798, -0.0010309863137081265, -0.01473026629537344, -8.583032467868179e-06, -0.0016041041817516088, -0.00030322244856506586, -0.0026241650339215994, -0.00023040501400828362, -0.0894283801317215, -4.088794958079234e-05, -0.0004128557338844985, -0.00019894051365554333, -0.0009085579658858478, -0.0020905323326587677, -0.002457576571032405, -0.013216273859143257, -0.003443385474383831, -0.017095936462283134, -0.000376034586224705, -0.005020985845476389, -0.00019167017308063805, -0.0001501924270996824, -0.0018711454467847943, -0.07287290692329407, -0.009495806880295277, -0.007294331677258015, -0.008197471499443054, -0.002227446297183633, -0.009017220698297024, -0.003689032746478915, -8.4638240878121e-06, -9.536738616588991e-07, -1.8908193111419678, -1.7881377516459906e-06, -4.768360213347478e-06, -1.311301275563892e-06, -2.2411095415009186e-05, -0.228080153465271], "finish_reason": "stop"}], "metrics": {"energy": 665.6976071662906, "energy_per_token": 3.3621091271024777, "time": 16.827387, "time_per_token": 0.08498680303030304}}
{"outputs": [{"text": "processed_files = []\n\n    # Check if the specified directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    # Search for JSON files in the specified directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Iterate over JSON files\n    for json_file in json_files:\n        # Open the JSON file for reading\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n\n        # Use regular expression to match and replace double quotes\n        content_with_escaped_quotes = re.sub(r'\"', r'\\\\' + '\"', content)\n\n        # Write the escaped quotes back to the original JSON file\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            json.dump(json.loads(content_with_escaped_quotes), file", "tokens": ["processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Search", " for", " JSON", " files", " in", " the", " specified", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "#", " Iter", "ate", " over", " JSON", " files", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "#", " Open", " the", " JSON", " file", " for", " reading", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Use", " regular", " expression", " to", " match", " and", " replace", " double", " quotes", "\n", "        ", "content", "_", "with", "_", "es", "cap", "ed", "_", "qu", "otes", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'", "\\\\'", " +", " '", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "#", " Write", " the", " escaped", " quotes", " back", " to", " the", " original", " JSON", " file", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "json", ".", "dump", "(", "json", ".", "loads", "(", "content", "_", "with", "_", "es", "cap", "ed", "_", "qu", "otes", ")", ",", " file"], "logprobs": [-2.6187336444854736, -0.028888432309031487, -0.1685613989830017, -0.014900225214660168, -0.02634805254638195, -0.02060566283762455, -1.0237047672271729, -0.000285227142740041, -0.910275399684906, -0.81465744972229, -0.027581186965107918, -0.20344462990760803, -1.8017431497573853, -0.008465122431516647, -0.026167603209614754, -0.07307659834623337, -0.0002162222663173452, -0.007457749918103218, -0.04282381013035774, -0.002800473477691412, -5.602820692729438e-06, -0.0003131137927994132, -4.768360213347478e-06, -0.20800496637821198, -5.1616290875244886e-05, -0.0011031500762328506, -0.0013183006085455418, -2.145764938177308e-06, -0.01989259570837021, -0.0004161922261118889, -0.000734297966118902, -0.009758269414305687, -0.0010519453790038824, -3.659658250398934e-05, -2.264974000354414e-06, -0.010732430033385754, -0.48659712076187134, -0.015476837754249573, -0.12312963604927063, -0.7553532123565674, -0.00015615197480656207, -0.0007488307310268283, -5.328513361746445e-05, -7.152555099310121e-07, -0.0020808966364711523, -0.681050181388855, -0.00022230061586014926, -0.0007650309125892818, -0.11875753104686737, -0.00402046600356698, -0.0001760566228767857, -0.00025078488397412, -0.01059360895305872, -0.0003023882454726845, -0.06164666265249252, -2.5442066192626953, -0.13334627449512482, -0.73399418592453, -0.00270715169608593, -0.17232176661491394, -0.001788208493962884, -0.9140739440917969, -0.0020060669630765915, -0.12171249836683273, -0.00015484087634831667, -0.17057201266288757, -0.00020382710499688983, -0.02609141916036606, -0.0057863350957632065, -0.008959331549704075, -2.90866428258596e-05, -0.0033874292857944965, -0.0005099665140733123, -0.14019346237182617, -1.4305104514278355e-06, -1.6689286894688848e-06, -1.1920928244535389e-07, -0.0006835508393123746, -3.2782016205601394e-05, -4.994744449504651e-05, -0.000120751719805412, -1.0728830375228426e-06, -0.0002134810492862016, -0.20313459634780884, -0.01567765139043331, -0.0009369035833515227, -0.0001299296854995191, -0.00010680581908673048, -0.0030099109280854464, -0.000795762927737087, -0.02075722999870777, -0.00011073929636040702, -0.5177049040794373, -1.6772301197052002, -0.0004901876673102379, -0.38701003789901733, -1.5865449905395508, -0.000432278640801087, -0.20500509440898895, -8.976056415122002e-05, -0.0018572239205241203, -0.3795897662639618, -0.00023112009512260556, -0.005203750915825367, -0.021046053618192673, -0.000553335587028414, -2.3841855067985307e-07, 0.0, -2.253030106658116e-05, -7.557583012385294e-05, -0.05525856837630272, -1.166107416152954, -2.385085105895996, -0.7141416668891907, -0.12372191250324249, -0.0002580548170953989, -0.8151245713233948, -0.0048406790010631084, -0.0827021598815918, -0.0001411338453181088, -0.006490815430879593, -6.139089964563027e-05, -6.246371776796877e-05, -0.0014083001296967268, -1.0490362910786644e-05, -1.0728830375228426e-06, -0.008364762179553509, -0.2089880108833313, -0.0019451522966846824, -0.0009242791566066444, -1.491469144821167, -0.01695670746266842, -0.09488843381404877, -0.0003933132975362241, -0.02549312263727188, -0.03337071090936661, -0.00014184899919200689, -0.0029670048970729113, -0.010168769396841526, -2.634490556374658e-05, -0.042119674384593964, -0.005134017206728458, -0.00032419670606032014, -0.0013429442187771201, -1.3707492351531982, -0.0029235025867819786, -0.03185363858938217, -7.223821739898995e-05, -3.933898824470816e-06, -0.0003777029050979763, -0.00948954839259386, -0.047698814421892166, -0.07489275932312012, -0.01612502709031105, -1.804947853088379, -0.8041015267372131, -0.5016805529594421, -0.03780314326286316, -2.01821231842041, -1.5500174760818481, -1.006859540939331, -0.23076802492141724, -0.006723637692630291, -0.7261012196540833, -0.00024375328212045133, -0.9366191029548645, -2.8000705242156982, -0.1773776113986969, -1.5616295058862306e-05, -0.053987059742212296, -2.3841830625315197e-06, -0.018291834741830826, -0.002233869396150112, -0.17627713084220886, -2.455681169521995e-05, -0.0005816913326270878, -0.0058869547210633755, -8.583032467868179e-06, -0.00020847532141488045, -0.07021208107471466, -0.24248239398002625, -0.8580219745635986, -0.03930079564452171, -0.1497635692358017, -9.572047565598041e-05, -0.0576770193874836, -1.2556722164154053, -0.6473149657249451, -0.1380125731229782, -0.09761694818735123, -0.0181427039206028, -0.0017871374730020761, -0.0009053422254510224, -0.000623032043222338, -0.007758128456771374, -0.02452300675213337, -0.0059828246012330055, -0.000416907190810889, -0.0058944206684827805, -1.4770300388336182, -0.5198967456817627, -2.353259563446045, -2.6251254081726074, -0.15850400924682617, -0.005221064668148756, -0.0022649129386991262, -1.914945363998413, -0.7046969532966614, -0.0018974411068484187, -0.007941693998873234, -0.0003234816831536591, -0.005636749789118767, -4.768360213347478e-06, -2.729855441430118e-05, -0.0011116046225652099, -2.145764938177308e-06, -3.099436753473128e-06, -0.00023231192608363926, -0.008306833915412426, -0.0005237876321189106, -0.0011982887517660856, -0.009529931470751762, -0.0005620330339297652, -0.00031454383861273527, -6.318072337307967e-06, -7.343022298300639e-05, -9.83428253675811e-05, -2.1934269170742482e-05, -5.1616290875244886e-05, -0.000760385300964117, -1.585470999998506e-05, -0.001884471857920289, -0.0005090133054181933, -0.00025674383505247533, -0.000296310376143083, -2.4949889183044434, -0.005136982072144747, -0.00032944019767455757, -0.0007152383332140744, -1.2991223335266113, -0.07012729346752167, -0.005186791997402906, -0.00032205163734033704, -0.00339443888515234, -0.00519805820658803, -1.2993727978027891e-05, -3.576278118089249e-07, -8.4638240878121e-06, -1.1920928244535389e-07, -9.536738616588991e-07, -4.768370445162873e-07, -1.9073468138230965e-06, 0.0, -0.004604451823979616, -0.00019941726350225508, -0.001764646964147687], "finish_reason": "length"}], "metrics": {"energy": 892.9497234115604, "energy_per_token": 3.488084857076408, "time": 21.656706, "time_per_token": 0.0845965078125}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n    files = glob.glob(f\"{directory_path}/*.json\")\n    for file_path in files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            content = re.sub(r'(?<!\\\\)\"', r'\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(content)\n    return files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}", "/*", ".", "json", "\"", ")", "\n", "    ", "for", " file", "_", "path", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\", ")\"", "'", ",", " r", "'\\\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "content", ")", "\n", "    ", "return", " files"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -1.145698070526123, -0.43750452995300293, -0.5309814810752869, -0.0004912600270472467, -0.0024612629786133766, -0.6400376558303833, -0.006437635514885187, -0.0018475858960300684, -0.0010968389688059688, -1.5119609832763672, -1.3506195545196533, -0.07036098092794418, -0.4516740143299103, -0.0001419681793777272, -0.0023135582450777292, -0.0026165556628257036, -2.242274045944214, -0.081168033182621, -0.0005988473421894014, -0.0024883756414055824, -9.893881360767409e-05, -5.960462772236497e-07, -0.16518591344356537, -0.021039050072431564, -0.013144743628799915, -0.005924877244979143, -0.00024005869636312127, -0.006896383594721556, -0.013673217035830021, -0.09205906838178635, -0.6746517419815063, -0.17557348310947418, -1.688137412071228, -0.09526024013757706, -0.00022873646230436862, -0.0026594768278300762, -0.0002739054325502366, -0.0005124686285853386, -0.003728345036506653, -0.0423867404460907, -0.00010632903286023065, -6.735097849741578e-05, -0.001419608946889639, -0.00035470392322167754, -1.1920928244535389e-07, -0.06734970957040787, -0.13997533917427063, -0.005769267678260803, -0.04233212396502495, -0.16760443150997162, -7.378782902378589e-05, -0.13588851690292358, -0.00448174774646759, -0.0010131231974810362, -0.0005302215577103198, -0.5057562589645386, -0.004153910558670759, -0.11864489316940308, -5.8053239627042785e-05, -7.152531907195225e-06, -0.0002824861148837954, -0.011106101796030998, -1.248181700706482, -1.2889792919158936, -0.05456166714429855, -0.05119626969099045, -3.075552376685664e-05, -0.0008175606490112841, -0.1538694053888321, -0.08892124146223068, -1.3471214771270752, -0.2281201034784317, -0.042064014822244644, -0.0398283451795578, -0.5931483507156372, -0.19516189396381378, -0.2783198058605194, -0.00017629499780014157, -0.1326913982629776, -1.859201431274414, -0.0030015914235264063, -0.0012349606258794665, -0.0016236230731010437, -0.007456330116838217, -0.06221453472971916, -0.10799263417720795, -0.007440356072038412, -2.8371408916427754e-05, -3.0874729418428615e-05, -0.0002613918040879071, -6.151010165922344e-05, -4.768370445162873e-07, -0.0001551984460093081, -0.004633167292922735, -0.000610999355558306, -0.0019224273273721337, -0.00271071819588542, -8.4638240878121e-06, -0.0014724613865837455, -0.00022968991834204644, -0.000284154579276219, -0.0006119524477981031, -0.1788301318883896, -0.00011383838864276186, -0.0005701346672140062, -0.0005614373367279768, -0.001645997748710215, -0.0014897212386131287, -0.00035208225017413497, -0.03130638226866722, -0.010491102002561092, -0.03152194619178772], "finish_reason": "stop"}], "metrics": {"energy": 438.15214613342323, "energy_per_token": 3.344672871247506, "time": 10.940611, "time_per_token": 0.0835161145038168}}
{"outputs": [{"text": "try:\n        processed_files = []\n        json_files = glob.glob(directory_path + '/*.json')\n\n        for file_path in json_files:\n            with open(file_path, 'r', encoding='utf-8') as file:\n                content = file.read()\n                modified_content = re.sub(r'\"', r'\\\\\\\\\"', content)\n\n            with open(file_path, 'w', encoding='utf-8') as file:\n                file.write(modified_content)\n\n            processed_files.append(file_path)\n\n        return processed_files\n\n    except FileNotFoundError:\n        raise FileNotFoundError(\"Directory does not exist.\")", "tokens": ["try", ":", "\n", "        ", "processed", "_", "files", " =", " []", "\n", "        ", "json", "_", "files", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " '", "/*", ".", "json", "')", "\n", "\n", "        ", "for", " file", "_", "path", " in", " json", "_", "files", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "                ", "content", " =", " file", ".", "read", "()", "\n", "                ", "modified", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'", "\\\\\\\\", "\"", "'", ",", " content", ")", "\n", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "w", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "                ", "file", ".", "write", "(", "modified", "_", "content", ")", "\n", "\n", "            ", "processed", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "        ", "return", " processed", "_", "files", "\n", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "def"], "logprobs": [-2.9850761890411377, -0.0001691436773398891, -0.0014986485475674272, -0.011344569735229015, -3.014251708984375, -0.02018786035478115, -0.24435240030288696, -0.012856806628406048, -0.05057450756430626, -0.03498172387480736, -0.1533781737089157, -1.8764500617980957, -0.014329979196190834, -0.08358369767665863, -0.021540267392992973, -0.04418303817510605, -4.756337511935271e-05, -0.004563749767839909, -0.0011442311806604266, -1.874768853187561, -0.0005274811992421746, -5.793403761344962e-05, -0.017778092995285988, -1.5037986040115356, -0.22231121361255646, -0.011658276431262493, -0.001606365549378097, -0.008894112892448902, -0.028207672759890556, -1.2986431121826172, -0.0009634620510041714, -0.12433014810085297, -0.8546240329742432, -1.4837512969970703, -0.07420056313276291, -0.00019047829846385866, -0.004002180881798267, -2.0265558760002023e-06, -3.576278118089249e-07, -0.00010287232726113871, -0.001134586171247065, -0.015474841929972172, -0.12051782011985779, -0.0002401778765488416, -0.00031513971043750644, -0.0008361419313587248, -3.2305197237292305e-05, -2.3841855067985307e-07, -0.03357257694005966, -0.10883837938308716, -0.003178665181621909, -1.4386985301971436, -0.000164018536452204, -0.013558442704379559, -0.09356540441513062, -0.023120349273085594, -0.0379851795732975, -0.0004985281848348677, -0.011699632741510868, -0.00012015574611723423, -0.1370181143283844, -0.003386954078450799, -0.0016198145458474755, -0.0004605186404660344, -0.861204981803894, -0.0028666851576417685, -0.1627851277589798, -2.6225699912174605e-05, -4.6491513785440475e-06, -0.00028880240279249847, -0.006513318512588739, -1.111392855644226, -1.6865973472595215, -0.018610037863254547, -0.0030853785574436188, -0.0005192600074224174, -0.04790303483605385, -0.0001720042055239901, -0.0002623452164698392, -0.16882485151290894, -0.031912412494421005, -0.5964062213897705, -0.16918626427650452, -0.5552003383636475, -0.00021908267808612436, -0.08757991343736649, -0.6043400764465332, -0.21611733734607697, -0.12313701957464218, -0.005310239270329475, -0.00012909532233607024, -0.001383777242153883, -0.009678227826952934, -0.05722680315375328, -0.09348365664482117, -0.033152662217617035, -0.061973441392183304, -5.2689116273541003e-05, -9.619726915843785e-05, -0.000856628583278507, -3.397406908334233e-05, -3.576278118089249e-07, -0.00043811736395582557, -0.010197325609624386, -0.0008937893435359001, -0.01567753404378891, -4.434487345861271e-05, -0.0005976559477858245, -0.000503770774230361, -8.34430247778073e-05, -0.00010406429646536708, -3.266281055402942e-05, -0.0026977595407515764, -2.074220174108632e-05, -0.0013673489447683096, -0.00025674383505247533, -0.00020716428116429597, -9.870042413240299e-05, -0.1203969195485115, -0.0001728385395836085, -0.0004922132357023656, -0.00026973424246534705, -0.002419046824797988, -5.960462772236497e-07, -4.768370445162873e-07, -0.0028168782591819763, -0.00020430385484360158, -0.172196626663208, -0.007767236325889826, -0.08273804187774658, -2.3483953555114567e-05, -0.006260427180677652, -0.00014101465058047324, -0.00013767725613433868, -0.0035169196780771017, -0.8161031603813171, -0.002004520269110799, -4.255681051290594e-05, -0.041899293661117554, -0.0008657997823320329, -0.054634809494018555, -0.023270022124052048, -0.02495795488357544, -0.002939073368906975, -9.536738616588991e-07, -3.576278118089249e-07, -0.004884691443294287, -0.3911680281162262, -0.0003494605771265924, -0.0030234598089009523, -0.0509827546775341, -2.9444261599564925e-05, -3.933898824470816e-06, -0.23535628616809845, -0.0006930810050107539, -0.0009395237429998815, -0.5509218573570251, -0.1786518692970276, -0.0005389191792346537, -4.23184028477408e-05, -0.068751260638237, -0.8219050765037537, -0.4214015305042267, -0.6724132895469666, -0.0002603192115202546, -0.0018098655855283141, -0.27411678433418274, -0.030993927270174026, -0.08217951655387878, -0.08280125260353088, -0.02685079723596573, -1.7458468675613403], "finish_reason": "stop"}], "metrics": {"energy": 586.8733095245359, "energy_per_token": 3.4120541251426504, "time": 14.514765, "time_per_token": 0.08438816860465116}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"The specified directory '{directory_path}' does not exist.\")\n    files_list = glob.glob(directory_path + \"/*.json\")\n    for file in files_list:\n        with open(file, \"r\") as json_file:\n            content = json_file.read()\n            modified_content = re.sub('\"', '\\\\\"', content)\n        with open(file, \"w\") as json_file:\n            json_file.write(modified_content)\n    return files_list", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "The", " specified", " directory", " '", "{", "directory", "_", "path", "}'", " does", " not", " exist", ".", "\"", ")", "\n", "    ", "files", "_", "list", " =", " glob", ".", "glob", "(", "directory", "_", "path", " +", " \"", "/*", ".", "json", "\"", ")", "\n", "    ", "for", " file", " in", " files", "_", "list", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "content", " =", " json", "_", "file", ".", "read", "()", "\n", "            ", "modified", "_", "content", " =", " re", ".", "sub", "('", "\"", "'", ",", " '\\\\", "\"", "'", ",", " content", ")", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "file", ".", "write", "(", "modified", "_", "content", ")", "\n", "    ", "return", " files", "_", "list", "\n", "\n", "def"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -1.9560645818710327, -0.8102693557739258, -0.006734057795256376, -1.5090434551239014, -0.000277123210253194, -0.00161160237621516, -1.9192511899746023e-05, -1.1920922133867862e-06, -0.0018252156442031264, -0.027264200150966644, -0.0002338612830499187, -0.0009240409708581865, -0.10246678441762924, -0.005648366641253233, -0.0006584145012311637, -0.0006436422117985785, -2.194871664047241, -1.5690107345581055, -2.5237226486206055, -1.2955745458602905, -0.025092819705605507, -1.000510811805725, -0.0004353767435532063, -0.0014627005439251661, -0.002745907986536622, -1.286062479019165, -0.0001784403866622597, -5.483612312673358e-06, -0.023979637771844864, -0.29848116636276245, -0.3672710657119751, -0.03398885577917099, -0.002526664873585105, -0.00013565097469836473, -0.008198181167244911, -0.02984124980866909, -0.09498069435358047, -0.5135376453399658, -0.23365463316440582, -0.23049485683441162, -0.0025499705225229263, -1.9907753085135482e-05, -2.264974000354414e-06, -0.000680691737215966, -0.001444607158191502, -0.005690802354365587, -0.05888562649488449, -0.00029213930247351527, -0.00020895205670967698, -0.004121263511478901, -0.08997917175292969, -0.17471981048583984, -0.011142529547214508, -0.0969931036233902, -0.2565326988697052, -0.00019572250312194228, -1.4974398612976074, -0.04020962491631508, -0.06643956899642944, -0.019901826977729797, -0.00272260676138103, -0.000998951611109078, -0.9276540875434875, -0.01681358925998211, -0.04985199496150017, -0.130375936627388, -3.766942609217949e-05, -5.61460001335945e-05, -1.4424220353248529e-05, -0.0012279358925297856, -0.012688265182077885, -0.7536143064498901, -1.9551492929458618, -0.04726580157876015, -0.011516991071403027, -0.0013609204906970263, -0.056717369705438614, -0.00010680581908673048, -0.00042274597217328846, -2.087125539779663, -0.36947327852249146, -0.17062850296497345, -0.00022754464589525014, -0.741325855255127, -0.00020203932945150882, -0.0009940688032656908, -0.0003665013937279582, -0.0018992258701473475, -0.01174899935722351, -0.03635520860552788, -0.18383808434009552, -0.010326527059078217, -6.401333666872233e-05, -0.00013147920253686607, -0.0014153235824778676, -0.00047100416850298643, -0.01199332159012556, -0.0020386644173413515, -0.0023666012566536665, -0.0050042616203427315, -2.992108420585282e-05, -0.021722255274653435, -0.00015531764074694365, -0.0020858929492533207, -0.0038975717034190893, -0.000447530735982582, -0.0010890988633036613, -0.0073279403150081635, -0.05088147148489952, -0.000179036331246607, -4.410646579344757e-05, -0.00365256960503757, -0.0006370898918248713, -0.0017409658757969737, -4.0531076592742465e-06, -3.3378546504536644e-06, -0.0018646011594682932, -0.0005604841862805188, -0.033844009041786194, -0.0159787405282259, -0.03476068377494812, -0.00044324109330773354, -8.583032467868179e-06, -0.18419024348258972, -0.01544878352433443, -1.0365350246429443], "finish_reason": "stop"}], "metrics": {"energy": 526.9400367279052, "energy_per_token": 3.584626100189831, "time": 12.199334, "time_per_token": 0.08298866666666667}}
{"outputs": [{"text": "processed_files = []\n    for file_path in glob.glob(os.path.join(directory_path, \"*.json\")):\n        with open(file_path, \"r\") as json_file:\n            json_content = json.load(json_file)\n\n        if isinstance(json_content, str):\n            # Use regex to find all double quotes and prepend them with a backslash\n            json_content = re.sub(r'\"', r'\\\\\"', json_content)\n        elif isinstance(json_content, dict):\n            # Recursively process the dictionary values\n            for key, value in json_content.items():\n                json_content[key] = task_func(value) if isinstance(value, dict) else value\n\n        # Write back the modified content to the respective JSON file\n        with open(file_path, \"w\") as json_file:\n            json.dump(json_content, json_file)\n\n        processed_files.append(file_path)\n\n    return processed_files", "tokens": ["processed", "_", "files", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", "_", "content", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "\n", "        ", "if", " isinstance", "(", "json", "_", "content", ",", " str", "):", "\n", "            ", "#", " Use", " regex", " to", " find", " all", " double", " quotes", " and", " pre", "pend", " them", " with", " a", " back", "slash", "\n", "            ", "json", "_", "content", " =", " re", ".", "sub", "(", "r", "'", "\"", "'", ",", " r", "'\\\\", "\"", "'", ",", " json", "_", "content", ")", "\n", "        ", "elif", " isinstance", "(", "json", "_", "content", ",", " dict", "):", "\n", "            ", "#", " Rec", "urs", "ively", " process", " the", " dictionary", " values", "\n", "            ", "for", " key", ",", " value", " in", " json", "_", "content", ".", "items", "():", "\n", "                ", "json", "_", "content", "[", "key", "]", " =", " task", "_", "func", "(", "value", ")", " if", " isinstance", "(", "value", ",", " dict", ")", " else", " value", "\n", "\n", "        ", "#", " Write", " back", " the", " modified", " content", " to", " the", " respective", " JSON", " file", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " json", "_", "file", ":", "\n", "            ", "json", ".", "dump", "(", "json", "_", "content", ",", " json", "_", "file", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.6187336444854736, -0.028888432309031487, -0.1685613989830017, -0.014900225214660168, -0.02634805254638195, -0.02060566283762455, -0.4454652965068817, -1.5013859272003174, -0.7603350281715393, -1.2305814027786255, -0.038473162800073624, -0.0007441850611940026, -0.016963504254817963, -0.00013422065239865333, -0.029624048620462418, -0.001158400671556592, -0.32427436113357544, -3.814689989667386e-06, -2.753696753643453e-05, -7.152555099310121e-07, -0.0057427179999649525, -0.00010346830822527409, -0.0006644901586696506, -0.0011822147062048316, -0.00016723664884921163, -0.0007512131123803556, -0.29068219661712646, -0.02485004998743534, -0.006888569798320532, -0.0008213722030632198, -9.440929716220126e-05, -0.0075972434133291245, -0.0002441108226776123, -0.004280927591025829, -0.015084599144756794, -0.26096996665000916, -0.0005166388000361621, -9.595887240720913e-05, -0.0016828911611810327, -0.0004720765573438257, -2.3841855067985307e-07, -0.04054073616862297, -0.12300504744052887, -0.010718748904764652, -0.03159714117646217, -0.18999913334846497, -5.507317473529838e-05, -1.991450548171997, -0.008337335661053658, -0.0054697138257324696, -0.0038961467798799276, -0.001166616566479206, -0.0009764432325027883, -0.8742530941963196, -0.00036542891757562757, -0.7044634819030762, -0.005397153086960316, -0.05413884297013283, -1.9474766254425049, -0.03944852203130722, -4.8993817472364753e-05, -0.00014220656885299832, -6.270212179515511e-05, -7.629365427419543e-06, -0.0010596857173368335, -0.008644185960292816, -1.1194889545440674, -0.07345914095640182, -1.2101480960845947, -0.03359194099903107, -1.3947389561508317e-05, -0.00016878610767889768, -2.9801878554280847e-05, -7.271740287251305e-06, -0.0001408954558428377, -0.9334574937820435, -0.010948466137051582, -0.028270136564970016, -0.0015501875896006823, -1.5611200332641602, -3.5908308029174805, -0.8671334981918335, -0.09755326062440872, -0.8493701219558716, -1.1710660457611084, -0.1295614242553711, -0.036339689046144485, -0.8638278245925903, -2.355095624923706, -0.00041762212640605867, -0.13618329167366028, -0.002951553324237466, -0.12379933148622513, -1.8044759035110474, -0.0018785225693136454, -0.06204111501574516, -0.00036006642039865255, -0.8544571995735168, -2.5510462364763953e-05, -0.0033905182499438524, -0.013637704774737358, -0.010517879389226437, -1.1324817933200393e-05, -0.001508289948105812, -0.04106065258383751, -0.06242656335234642, -1.193379282951355, -0.1427023708820343, -0.08534378558397293, -0.00011932138295378536, -0.04985267296433449, -0.5783107280731201, -5.8530047681415454e-05, -0.00042143522296100855, -4.494089080253616e-05, -0.0006700892699882388, -0.0003082277253270149, -1.2993727978027891e-05, -0.0010788579238578677, -0.00434526102617383, -1.0066452026367188, -0.4613223671913147, -0.000860201776959002, -7.748573807475623e-06, -0.00016711745411157608, -7.664863369427621e-05, -6.9141146923357155e-06, -2.455681169521995e-05, -0.14998532831668854, -0.10270777344703674, -0.003296063281595707, -0.00026592056383378804, -0.3763073682785034, -1.2863867282867432, -0.010670038871467113, -0.009819419123232365, -0.679548442363739, -1.5673757791519165, -0.4598839581012726, -0.6373990178108215, -0.1464063972234726, -0.00015054999676067382, -0.6251517534255981, -0.021070566028356552, -0.2070002257823944, -0.006412051152437925, -4.672895011026412e-05, -0.0008313775178976357, -2.8132995794294402e-05, -5.722029527532868e-06, -0.0002646096108946949, -0.00015507926582358778, -9.179073458653875e-06, -9.7508447652217e-05, -7.247662142617628e-05, -1.4070316553115845, -1.4305104514278355e-06, -9.297892393078655e-05, -0.000291662581730634, -6.890059739816934e-05, -2.4914430468925275e-05, -4.279521817807108e-05, -0.07231782376766205, -0.0001299296854995191, -0.0006038511055521667, -0.006902540102601051, -0.2540811002254486, -0.31235793232917786, -2.5932083129882812, -0.13200320303440094, -3.504691630951129e-05, -0.01671101525425911, -6.675497570540756e-05, -2.5722217559814453, -0.005784912966191769, -0.061672888696193695, -0.2711518406867981, -0.0077982270158827305, -0.8907263875007629, -0.010641024447977543, -1.703869342803955, -0.22836746275424957, -0.8539654612541199, -0.11531846225261688, -0.19712525606155396, -0.127788245677948, -0.10725647956132889, -0.0024103655014187098, -1.3069918155670166, -0.03764931857585907, -0.00043764073052443564, -0.014256883412599564, -0.0010677833342924714, -0.008189904503524303, -7.30726242181845e-05, -6.329813186312094e-05, -0.0023393663577735424, -6.0794889577664435e-05, -4.0531076592742465e-06, -0.00028379703871905804, -0.009045573882758617, -0.005197584163397551, -0.0006924853660166264, -0.0025798154529184103, -1.3589766240329482e-05, -0.006881111301481724, -2.0146166207268834e-05, -0.000780754373408854, -0.000801837770268321, -0.0001264730526600033, -0.0003748429589904845, -0.028786392882466316, -0.08058146387338638, -7.748303323751315e-05, -0.0002320735511602834, -0.0016110072610899806, -0.00019476900342851877, -7.199982064776123e-05, -0.0007883778307586908, -0.00018702188390307128, -2.9444261599564925e-05, -2.9802276912960224e-06, -0.1769704967737198, -0.0005664412747137249, -0.07372118532657623, -0.003584034275263548, -0.16849784553050995, -2.7418097943154862e-06, -0.00028796817059628665, -0.00014172980445437133, -0.00023338454775512218, -0.001157567254267633, -0.1404578685760498, -0.00015770144818816334, -3.85038583772257e-05, -0.014716875739395618, -0.00888855941593647, -0.1261790245771408, -0.005161057226359844, -0.010391180403530598, -0.001980606932193041, -6.318072337307967e-06, -4.529942543740617e-06, -2.154839038848877, -5.364403477869928e-06, -1.0728830375228426e-06, -2.145764938177308e-06, -3.814624506048858e-05, -0.15392592549324036], "finish_reason": "stop"}], "metrics": {"energy": 866.9657052211751, "energy_per_token": 3.4817899808079322, "time": 21.238403, "time_per_token": 0.08529479116465864}}
{"outputs": [{"text": "# Check if the specified directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Set the pattern to match all JSON files in the directory\n    pattern = os.path.join(directory_path, \"*.json\")\n\n    # Create a list to store the processed JSON files\n    processed_files = []\n\n    # Iterate through all JSON files in the directory\n    for file_path in glob.glob(pattern):\n        # Read the JSON file\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes in the content\n        content = re.sub(r\"\\\"\", r\"\\\\\" + '\"', content)\n\n        # Write the modified content back to the JSON file\n        with open(file_path, \"w\") as file:\n            file.write(content)\n\n        # Append the file path to the list of processed files\n        processed_files.append(file_path)\n\n    return processed_files", "tokens": ["#", " Check", " if", " the", " specified", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "#", " Set", " the", " pattern", " to", " match", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " to", " store", " the", " processed", " JSON", " files", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "pattern", "):", "\n", "        ", "#", " Read", " the", " JSON", " file", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Escape", " double", " quotes", " in", " the", " content", "\n", "        ", "content", " =", " re", ".", "sub", "(", "r", "\"", "\\\"\"", ",", " r", "\"", "\\\\", "\"", " +", " '", "\"", "'", ",", " content", ")", "\n", "\n", "        ", "#", " Write", " the", " modified", " content", " back", " to", " the", " JSON", " file", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "content", ")", "\n", "\n", "        ", "#", " App", "end", " the", " file", " path", " to", " the", " list", " of", " processed", " files", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "def"], "logprobs": [-1.7926647663116455, -0.7253312468528748, -0.041194621473550797, -0.1891893446445465, -1.9445348978042603, -0.011146302334964275, -0.02976580709218979, -0.12105894088745117, -0.0005781171494163573, -0.013420718722045422, -0.022539271041750908, -0.004501210525631905, -7.986990567587782e-06, -0.00039772229501977563, -3.814689989667386e-06, -0.26348188519477844, -9.727005090098828e-05, -0.003235940122976899, -0.0014029431622475386, -2.7418097943154862e-06, -0.019856369122862816, -0.0005790702416561544, -0.0010874316794797778, -0.018824147060513496, -0.0014080620603635907, -8.821098163025454e-05, -2.622600959512056e-06, -0.014421635307371616, -1.0442225933074951, -0.40211519598960876, -0.6985964775085449, -0.0002796259068418294, -0.0015555436257272959, -0.589905321598053, -0.007601029239594936, -0.0018737631617113948, -0.0007708676857873797, -0.08598227053880692, -0.00022146634000819176, -0.3220343291759491, -4.567634582519531, -0.424659788608551, -1.5195122957229614, -0.4990517497062683, -0.37526044249534607, -1.1360727548599243, -0.26474153995513916, -0.007311609573662281, -0.37930548191070557, -0.006295610684901476, -0.2294398695230484, -0.046846937388181686, -0.0002022777043748647, -0.07610538601875305, -0.004747072700411081, -0.6240002512931824, -1.2516897186287679e-05, -4.327203714638017e-05, -1.0728830375228426e-06, -0.007626938167959452, -0.00025912740966305137, -0.0016607552533969283, -4.1126360883936286e-05, -4.768370445162873e-07, -0.0009863278828561306, -0.059667907655239105, -0.01578960195183754, -0.0024465173482894897, -0.0008311392739415169, -7.712543447269127e-05, -0.0002892790944315493, -0.0012080521555617452, -0.0910089984536171, -4.577531944960356e-05, -0.12356125563383102, -1.8312346935272217, -0.4420022666454315, -0.143519788980484, -0.059174660593271255, -0.11431901901960373, -0.31214046478271484, -0.3699374794960022, -0.2512381076812744, -0.01834532432258129, -0.005473270546644926, -7.879423355916515e-05, -0.19202420115470886, -0.012939183972775936, -0.39819493889808655, -0.014014171436429024, -0.003641167189925909, -0.00019369633810129017, -0.005177067592740059, -5.6265202147187665e-05, -0.03999409079551697, -0.6593700051307678, -0.00030858523678034544, -1.1546082496643066, -0.832852840423584, -0.4438733160495758, -0.0005621521850116551, -0.2846945822238922, -0.0008541273418813944, -0.10038471966981888, -0.09870676696300507, -6.294052582234144e-05, -0.005367629695683718, -0.7100465893745422, -0.5918526649475098, -0.051727544516325, -0.00041083001997321844, -0.002636886900290847, -9.894321920000948e-06, -0.013916482217609882, -2.062299427052494e-05, -0.00047159992391243577, -0.013559853658080101, -0.00017963226127903908, -0.08233509212732315, -0.25332263112068176, -0.5299342274665833, -0.0987083911895752, -0.6323992609977722, -0.09573471546173096, -0.38210976123809814, -0.0003323002893012017, -0.014303773641586304, -3.576214658096433e-05, -0.00010740180005086586, -0.001046586548909545, -5.602679812000133e-05, -1.1920928244535389e-07, -0.017395777627825737, -0.09727057069540024, -0.004900231491774321, -0.011740398593246937, -0.12135303765535355, -1.7523612768854946e-05, -0.14148461818695068, -0.002997193718329072, -0.00015043080202303827, -0.00029059001826681197, -0.6925801634788513, -0.0030131200328469276, -0.10646041482686996, -3.85038583772257e-05, -3.2186455882765586e-06, -0.0003703146940097213, -0.002699780510738492, -0.027284616604447365, -0.017490901052951813, -0.0052861678414046764, -0.7068882584571838, -0.8548241257667542, -0.001711095916107297, -1.650720238685608, -0.03144847974181175, -0.5279665589332581, -0.2176830917596817, -0.00041714549297466874, -0.9815970063209534, -0.056834615767002106, -0.08490301668643951, -0.00010835537250386551, -0.0011614966206252575, -0.0520477369427681, -0.03601408377289772, -1.1499488353729248, -0.16110597550868988, -0.00033539868309162557, -0.5763363838195801, -0.02406121976673603, -0.4132247865200043, -0.1395481526851654, -0.10722167789936066, -0.8740077018737793, -0.008832670748233795, -0.0016321921721100807, -0.0027272433508187532, -0.000841025379486382, -0.0027129771187901497, -0.018617060035467148, -0.007693659048527479, -0.00028880240279249847, -0.0009158230968751013, -0.13415949046611786, -0.4459460973739624, -0.25663691759109497, -0.002176180249080062, -0.06834141165018082, -0.002082205144688487, -0.000510204816237092, -0.4349726438522339, -0.00016532962035853416, -0.0024366469588130713, -0.00013505500101018697, -0.003653401043266058, -6.198863957251888e-06, -1.9550132492440753e-05, -0.0002002515539061278, -6.5205356804654e-05, -2.3841855067985307e-07, -9.63164638960734e-05, -0.0019096963806077838, -0.0003108495147898793, -0.000922969076782465, -0.0057455627247691154, -3.4570634852570947e-06, -0.0005845506675541401, -0.00010108436981681734, -9.583967766957358e-05, -0.00019739109848160297, -0.06709547340869904, -4.827859811484814e-05, -0.00022492263815365732, -0.0002636561985127628, -0.0020227227360010147, -0.0009218971827067435, -0.00027807659353129566, -0.005665198899805546, -0.0017432268941774964, -0.019476015120744705, -0.9874088764190674, -1.728519782773219e-05, -0.007775634527206421, -2.335080623626709, -0.5046439170837402, -0.010555272921919823, -0.0019526478135958314, -0.3722201883792877, -0.01289658434689045, -0.0004629017203114927, -0.23895399272441864, -0.0011693552369251847, -8.320462075062096e-05, -0.0025692330673336983, -1.311301275563892e-06, -1.8954096958623268e-05, -5.61460001335945e-05, -2.396077979938127e-05, -0.00032860602368600667, -0.004633404780179262, -0.00013410145766101778, -1.0728830375228426e-06, -0.0024201171472668648, -0.00011657988943625242, -0.008687558583915234, -0.004012629389762878, -0.6600141525268555, -0.0018680518260225654, -1.0132738680113107e-05, -4.768360213347478e-06, -0.1352912336587906, -0.006223347038030624, -1.307964563369751], "finish_reason": "stop"}], "metrics": {"energy": 949.6746350402832, "energy_per_token": 3.724214255059934, "time": 22.271908, "time_per_token": 0.08734081568627451}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found.\")\n\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n    processed_files = []\n\n    for file_path in json_files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes using regex\n        escaped_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\', content)\n\n        # Write back the modified content\n        with open(file_path, \"w\") as file:\n            file.write(escaped_content)\n\n        processed_files.append(file_path)\n\n    return processed_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " {", "directory", "_", "path", "}", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "_", "path", "}", "/*", ".", "json", "\"", ")", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "\n", "        ", "#", " Escape", " double", " quotes", " using", " regex", "\n", "        ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\\\\\", ")\"", "'", ",", " r", "'", "\\\\'", ",", " content", ")", "\n", "\n", "        ", "#", " Write", " back", " the", " modified", " content", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " \"", "w", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "\n", "        ", "processed", "_", "files", ".", "append", "(", "file", "_", "path", ")", "\n", "\n", "    ", "return", " processed", "_", "files", "\n", "\n", "if"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -0.4303126335144043, -0.053099941462278366, -0.26339566707611084, -1.6201951503753662, -0.0009679876384325325, -3.564294092939235e-05, -5.960462772236497e-07, -0.005055264104157686, -0.8393778800964355, -0.0010186012368649244, -0.4671506881713867, -0.014685041271150112, -0.00027533553657121956, -0.0008403107640333474, -0.1891370564699173, -0.00023874769976828247, -0.7805630564689636, -0.0032902411185204983, -0.04275105521082878, -0.006698889657855034, -0.04212447628378868, -2.658331868587993e-05, -0.0023223592434078455, -0.0006587718962691724, -2.063521385192871, -0.050681713968515396, -0.00032848684350028634, -0.0017982041463255882, -3.7431014789035544e-05, -9.536738616588991e-07, -0.20637451112270355, -0.01534160878509283, -0.0018734062323346734, -0.0012147198431193829, -0.00012587709352374077, -0.01422280166298151, -0.011758306995034218, -0.5603647828102112, -0.5736100673675537, -0.016037162393331528, -0.15669678151607513, -0.0021387101151049137, -0.02172388881444931, -0.003153948113322258, -0.11862615495920181, -8.964136941358447e-05, -0.061171770095825195, -0.9523116946220398, -0.7755823731422424, -0.017355358228087425, -9.07141511561349e-05, -0.0028509944677352905, -3.576278118089249e-07, -4.768370445162873e-07, -4.029192859889008e-05, -0.00016509123088326305, -0.015137203969061375, -0.05546519532799721, -4.160317621426657e-05, -5.054346183896996e-05, -0.0008021951070986688, -1.6569954823353328e-05, 0.0, -0.0203035119920969, -0.09663990885019302, -0.007197877392172813, -0.04010988026857376, -0.25415459275245667, -2.0503786799963564e-05, -0.15165108442306519, -0.0026247594505548477, -0.0004887578543275595, -0.00037531962152570486, -0.49109750986099243, -0.003109503071755171, -0.07497604191303253, -1.9430925021879375e-05, -3.099436753473128e-06, -0.0004114258335903287, -0.006601904518902302, -0.26729482412338257, -0.03191956877708435, -0.634624719619751, -1.0513805150985718, -0.18408562242984772, -0.0020929116290062666, -2.5785067081451416, -0.7877476215362549, -0.2184043973684311, -0.0004451475979294628, -0.4711940586566925, -7.986990567587782e-06, -3.909988299710676e-05, -0.00468573160469532, -0.015482472255825996, -0.0003432638186495751, -0.004412319976836443, -0.00011503035057103261, -0.0001245659514097497, -0.030605647712945938, -0.036983001977205276, -0.7145885229110718, -0.19561655819416046, -0.03143427148461342, -0.017731599509716034, -1.869922399520874, -0.06391745060682297, -0.05232370272278786, -4.5536911784438416e-05, -0.07452193647623062, -1.375552773475647, -2.321925401687622, -1.0814480781555176, -0.0031784274615347385, -0.02401106059551239, -0.03114878013730049, -0.021069981157779694, -0.000426439888542518, -1.1192243099212646, -0.3727719783782959, -0.8466055393218994, -0.18062430620193481, -0.6128056645393372, -0.003859334858134389, -1.1090890169143677, -0.00026258357684127986, -0.0031881716568022966, -1.0609570381348021e-05, -2.8013790142722428e-05, -0.00037865620106458664, -6.913899414939806e-05, -2.3841855067985307e-07, -8.856858039507642e-05, -0.0024975319392979145, -0.0004586121649481356, -0.0006382812280207872, -0.009906413964927197, -1.156323378381785e-05, -0.0011612584348767996, -0.00019631843315437436, -0.00011324241495458409, -0.00029297350556589663, -0.04207327216863632, -6.639736966462806e-05, -0.0003404037852305919, -0.00036530973738990724, -0.0008374521275982261, -4.768370445162873e-07, -4.768360213347478e-06, -3.576278118089249e-07, -3.2186455882765586e-06, -0.002150129759684205, -9.524368942948058e-05, -0.019997064024209976, -0.0036176491994410753, -0.07489696145057678, -4.6491513785440475e-06, -0.0007591941393911839, -7.855583680793643e-05, -0.0001389883691444993, -0.0012169820256531239, -0.15045300126075745, -0.00042083943844772875, -1.4662635294371285e-05, -0.014135357923805714, -0.0010014524450525641, -0.016528114676475525, -0.0027390127070248127, -0.012462361715734005, -0.010546544566750526, -2.7418097943154862e-06, -1.6689286894688848e-06, -0.1287069320678711, -0.006808060687035322, -0.6803117990493774], "finish_reason": "stop"}], "metrics": {"energy": 712.8079228801731, "energy_per_token": 3.674267643712233, "time": 16.619982, "time_per_token": 0.08567001030927836}}
{"outputs": [{"text": "# Initialize the list of processed files\n    processed_files = []\n\n    # Use the `os.path.isdir` method to check if the given directory exists\n    if not os.path.isdir(directory_path):\n        # If the directory does not exist, raise a FileNotFoundError with an error message\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Use the `glob.glob` method to get a list of all JSON files in the given directory\n    json_files = glob.glob(os.path.join(directory_path, '*.json'))\n\n    # Iterate over each JSON file in the directory\n    for json_file in json_files:\n        # Use the `os.path.basename` method to get the filename without the full path\n        filename = os.path.basename(json_file)\n\n        # Use the `os.path.join` method to create the full path to the file\n        file_path = os.path.join(directory_path, filename)\n\n        # Open the file in read mode using `with` and", "tokens": ["#", " Initialize", " the", " list", " of", " processed", " files", "\n", "    ", "processed", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Use", " the", " `", "os", ".", "path", ".", "is", "dir", "`", " method", " to", " check", " if", " the", " given", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "_", "path", "):", "\n", "        ", "#", " If", " the", " directory", " does", " not", " exist", ",", " raise", " a", " File", "NotFound", "Error", " with", " an", " error", " message", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", ".", "\"", ")", "\n", "\n", "    ", "#", " Use", " the", " `", "glob", ".", "glob", "`", " method", " to", " get", " a", " list", " of", " all", " JSON", " files", " in", " the", " given", " directory", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " '", "*", ".", "json", "'))", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " JSON", " file", " in", " the", " directory", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "#", " Use", " the", " `", "os", ".", "path", ".", "bas", "ename", "`", " method", " to", " get", " the", " filename", " without", " the", " full", " path", "\n", "        ", "filename", " =", " os", ".", "path", ".", "bas", "ename", "(", "json", "_", "file", ")", "\n", "\n", "        ", "#", " Use", " the", " `", "os", ".", "path", ".", "join", "`", " method", " to", " create", " the", " full", " path", " to", " the", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " filename", ")", "\n", "\n", "        ", "#", " Open", " the", " file", " in", " read", " mode", " using", " `", "with", "`", " and"], "logprobs": [-1.7926647663116455, -3.641848564147949, -1.87803316116333, -0.46407487988471985, -0.9116579294204712, -0.14003564417362213, -1.257951259613037, -0.2858748137950897, -0.0003134713042527437, -0.1268322914838791, -0.01805056817829609, -0.0677187442779541, -0.022910889238119125, -0.005907338112592697, -0.0006661579827778041, -0.09785965085029602, -0.0002445875434204936, -0.03705387935042381, -2.8780605792999268, -2.3313190937042236, -3.5450029373168945, -1.4772515296936035, -0.7920403480529785, -0.10039011389017105, -0.07302816957235336, -1.52887761592865, -0.03196771815419197, -0.17372332513332367, -1.3620986938476562, -0.029020220041275024, -0.08068923652172089, -0.03783402219414711, -0.02746300958096981, -1.564809799194336, -0.44183483719825745, -0.40236786007881165, -0.2057698518037796, -0.0002840353990904987, -0.08542237430810928, -0.16086971759796143, -0.001142564113251865, -1.3470558769768104e-05, -0.0001517419150331989, -2.145764938177308e-06, -0.0006152882124297321, -2.2411095415009186e-05, -0.0002308817347511649, -0.001127441762946546, -0.0018798314267769456, -2.50339189733495e-06, -0.0006877202540636063, -0.0028559870552271605, -0.002111945068463683, -0.7941073179244995, -0.5685774683952332, -0.15056487917900085, -0.03679641708731651, -0.47501298785209656, -0.00020847532141488045, -0.000570253818295896, -0.004085290711373091, -0.00837977509945631, -0.12848450243473053, -0.5188795328140259, -0.00024423000286333263, -0.0020707848016172647, -0.6893166899681091, -0.7525721192359924, -1.1257495880126953, -0.0005709686665795743, -0.010102685540914536, -0.0001497156627010554, -0.00966606754809618, -0.0009447640040889382, -5.364274329622276e-05, -9.536738616588991e-07, -0.023889435455203056, -0.43409740924835205, -0.03568664565682411, -0.2650325894355774, -0.752758800983429, -0.0002232540718978271, -0.0005352256703190506, -8.999896090244874e-05, -2.50339189733495e-06, -0.0013749678619205952, -0.5811786651611328, -0.00042465253500267863, -0.23847711086273193, -0.017997179180383682, -0.00016330339713022113, -0.0006523388437926769, -0.014550057239830494, -0.0004757702990900725, -0.0075135971419513226, -0.07195236533880234, -0.025748051702976227, -0.024162810295820236, -0.19264931976795197, -0.29195600748062134, -0.06514468044042587, -0.0030240542255342007, -0.15101096034049988, -0.028591090813279152, -0.9450287222862244, -0.18277528882026672, -0.001157209975644946, -0.0002706876548472792, -0.17152585089206696, -0.23211143910884857, -0.002237199805676937, -0.027130788192152977, -0.0009862087899819016, -1.2219581604003906, -0.001016576774418354, -0.04162958264350891, -0.00023457636416424066, -0.5074115991592407, -0.0014531777705997229, -0.02788868173956871, -0.006245382130146027, -0.00232081301510334, -8.106198947643861e-06, -0.0002946419408544898, -0.0004262015863787383, -0.2548774480819702, -5.960462772236497e-07, -2.50339189733495e-06, 0.0, -0.0007499027997255325, -4.255681051290594e-05, -0.0002637753786984831, -0.00018821375851985067, -1.4305104514278355e-06, -0.00043883229955099523, -1.729540228843689, -0.00948565173894167, -0.0011938833631575108, -0.0002401778765488416, -0.0019252828788012266, -0.0014488924061879516, -0.020579038187861443, -0.0002615109842736274, -0.03318033739924431, -0.6258718967437744, -0.00022635281493421644, -0.249855175614357, -0.09762181341648102, -0.035476118326187134, -0.00047398300375789404, -0.39302822947502136, -0.0008124388405121863, -0.9237281084060669, -0.02293337509036064, -9.619726915843785e-05, -0.0013898485340178013, -0.5833187103271484, -0.0005627478822134435, -0.013925299048423767, -0.02611871063709259, -0.0005788319394923747, -5.960462772236497e-07, -1.1920928244535389e-07, -3.6477376852417365e-05, -0.00010525626566959545, -0.056199897080659866, -0.045759886503219604, -1.3918960094451904, -0.027552079409360886, -0.014139472506940365, -0.4721212387084961, -0.0006764031131751835, -0.0023243811447173357, -0.001116010476835072, -0.337240070104599, -4.458328112377785e-05, -0.00023100091493688524, -0.028706585988402367, -0.011549986898899078, -0.23551662266254425, -0.06932078301906586, -1.4988598823547363, -0.9601955413818359, -0.14815326035022736, -1.7911063432693481, -0.18184345960617065, -0.029352277517318726, -0.00010918975021922961, -0.4588656723499298, -0.0055311257019639015, -6.341733387671411e-05, -5.483612312673358e-06, -7.152555099310121e-07, 0.0, -9.619726915843785e-05, -1.5258672647178173e-05, -1.764281842042692e-05, -0.00022825974156148732, -1.0847986231965479e-05, -3.2066785934148356e-05, -9.703165414975956e-05, -0.0006032554083503783, -0.30506420135498047, -0.0005900310934521258, -0.023443426936864853, -1.065431833267212, -0.03740980848670006, -0.017061950638890266, -2.309579372406006, -0.0003911683743353933, -0.005852467846125364, -0.0003951007383875549, -0.06838605552911758, -7.390703103737906e-05, -0.003369727171957493, -0.003684638300910592, -1.8083964586257935, -0.1354086846113205, -0.19466286897659302, -0.29491767287254333, -0.14883875846862793, -0.014379921369254589, -1.187933087348938, -0.3726285994052887, -0.00012146688823122531, -0.5001958012580872, -0.5028117299079895, -0.0023172451183199883, -0.0004917366313748062, -0.000271521887043491, -1.0728830375228426e-06, -2.7418097943154862e-06, -2.861018856492592e-06, -0.00016985881666187197, -0.0003847335756290704, -0.004556629806756973, -0.0003323002893012017, -9.536738616588991e-07, -0.00010966652916977182, -0.004260511137545109, -4.076874756719917e-05, -0.0004172646440565586, -0.006643825676292181, -0.0006936766440048814, -0.023441562429070473, -0.60577392578125, -0.01906171813607216, -0.6661412119865417, -0.2522395849227905, -0.21335525810718536, -0.027764396741986275, -1.572306752204895, -2.1243326663970947, -0.8583846092224121, -0.22231025993824005, -2.1596336364746094], "finish_reason": "length"}], "metrics": {"energy": 906.6172243099212, "energy_per_token": 3.5414735324606297, "time": 22.264439, "time_per_token": 0.08697046484375}}
{"outputs": [{"text": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found\")\n\n    # Get all JSON files in the directory\n    files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Iterate through each JSON file\n    for file in files:\n        # Read JSON from the file\n        with open(file, \"r\") as f:\n            data = json.load(f)\n\n        # Convert the data to a string to apply regular expressions\n        data_str = json.dumps(data)\n\n        # Regular expression pattern to match double quotes\n        pattern = r'\"'\n\n        # Replace double quotes with backslash-escaped double quotes\n        data_str = re.sub(pattern, r'\\\\\"', data_str)\n\n        # Parse the modified string back to JSON\n        data = json.loads(data_str)\n\n        # Write the modified JSON back to the file\n        with open(file, \"w\") as f:", "tokens": ["#", " Check", " if", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " '", "{", "directory", "_", "path", "}'", " not", " found", "\"", ")", "\n", "\n", "    ", "#", " Get", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " JSON", " file", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Read", " JSON", " from", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "        ", "#", " Convert", " the", " data", " to", " a", " string", " to", " apply", " regular", " expressions", "\n", "        ", "data", "_", "str", " =", " json", ".", "d", "umps", "(", "data", ")", "\n", "\n", "        ", "#", " Regular", " expression", " pattern", " to", " match", " double", " quotes", "\n", "        ", "pattern", " =", " r", "'", "\"", "'", "\n", "\n", "        ", "#", " Replace", " double", " quotes", " with", " back", "slash", "-", "es", "cap", "ed", " double", " quotes", "\n", "        ", "data", "_", "str", " =", " re", ".", "sub", "(", "pattern", ",", " r", "'\\\\", "\"", "'", ",", " data", "_", "str", ")", "\n", "\n", "        ", "#", " Parse", " the", " modified", " string", " back", " to", " JSON", "\n", "        ", "data", " =", " json", ".", "loads", "(", "data", "_", "str", ")", "\n", "\n", "        ", "#", " Write", " the", " modified", " JSON", " back", " to", " the", " file", "\n", "        ", "with", " open", "(", "file", ",", " \"", "w", "\"", ")", " as", " f", ":"], "logprobs": [-1.7926647663116455, -0.7253312468528748, -0.041194621473550797, -0.1891893446445465, -0.24753251671791077, -0.0835631936788559, -0.11882602423429489, -0.0007929041748866439, -0.011400200426578522, -0.021399905905127525, -0.0033456087112426758, -9.417489309271332e-06, -0.0004024887748528272, -4.172316494077677e-06, -0.18675458431243896, -7.414542778860778e-05, -0.0011252983240410686, -0.0015021003782749176, -2.0265558760002023e-06, -0.014548529870808125, -0.0006906984490342438, -0.000897957943379879, -0.012291870079934597, -0.0012062662281095982, -5.340433563105762e-05, -2.50339189733495e-06, -0.012103683315217495, -0.45138874650001526, -0.01927315630018711, -0.09351839870214462, -0.7367957234382629, -0.0001461399078834802, -0.000895933189895004, -0.0001294529065489769, -2.3841855067985307e-07, -0.0016260033007711172, -0.750747561454773, -0.0002783149539027363, -2.479341745376587, -0.00016151554882526398, -0.0005868143052794039, -0.08062446117401123, -0.00019536493346095085, -0.2861950397491455, -1.8291622400283813, -0.47312071919441223, -0.21998485922813416, -0.014405537396669388, -0.04161277413368225, -0.0043871584348380566, -0.1138494536280632, -0.03702561929821968, -0.00018189683032687753, -2.416008710861206, -0.03393999859690666, -0.016073176637291908, -7.068861305015162e-05, -0.002768852049484849, -0.0006076634745113552, -0.2350149005651474, -7.152555099310121e-07, -3.814689989667386e-06, 0.0, -0.0004234609368722886, -3.242440288886428e-05, -0.00017963226127903908, -9.42901024245657e-05, -8.344646857949556e-07, -0.0003363520372658968, -0.23424352705478668, -0.007069573272019625, -0.0010376551654189825, -0.0003071551618631929, -7.497983460780233e-05, -0.0021220564376562834, -0.0004680253332480788, -0.16745904088020325, -0.0001323135511483997, -0.25190088152885437, -1.7945709228515625, -0.0007434703293256462, -1.2216122150421143, -0.23448446393013, -0.3805183470249176, -0.0009153467253781855, -0.11189331859350204, -0.00010799778101500124, -0.05690331384539604, -0.13562947511672974, -0.40919479727745056, -0.0007265550084412098, -0.0001161031104857102, -7.331102824537084e-05, -0.01874716579914093, -0.8375632762908936, -0.3223746418952942, -2.4507875442504883, -3.119259834289551, -0.43399283289909363, -0.0015937496209517121, -0.009973926469683647, -0.00024089295766316354, -0.0124915586784482, -2.2649508537142538e-05, -9.810443589231e-05, -0.0015219782944768667, -0.018639173358678818, -0.10970049351453781, -0.004069381859153509, -0.002732117660343647, -0.1845988780260086, -1.6331539882230572e-05, -0.5353659987449646, -0.014646392315626144, -0.00033778208307921886, -0.00028534632292576134, -1.4918334484100342, -0.006821440067142248, -0.2349737286567688, -1.6569954823353328e-05, -0.046618152409791946, -2.634490556374658e-05, -0.00030429501202888787, -0.0006333967321552336, -0.0025581750087440014, -0.03672712668776512, -0.03613217547535896, -0.02874515764415264, -1.9305264949798584, -0.6747036576271057, -0.546382486820221, -0.09706039726734161, -0.4725637435913086, -0.1366986334323883, -2.5287022590637207, -2.4882616996765137, -1.913825273513794, -0.8626266717910767, -0.06878753751516342, -0.0004570631426759064, -0.11189864575862885, -0.04764118790626526, -0.19872844219207764, -0.0007702721050009131, -0.7384791374206543, -1.6331539882230572e-05, -0.0007529999129474163, 0.0, -0.00015805903240107, -0.00033706706017255783, -0.020347317680716515, -0.005866096820682287, -0.013342850841581821, -0.00030858523678034544, -0.0058698891662061214, -2.7566702365875244, -0.15644368529319763, -0.25382956862449646, -0.12262929230928421, -0.2728801369667053, -0.17092858254909515, -0.011075684800744057, -0.8172982335090637, -0.00018094333063345402, -0.07842407375574112, -0.006005812902003527, -0.2143588364124298, -0.42453381419181824, -0.022359181195497513, -0.3598405122756958, -0.013596192933619022, -0.0151584567502141, -0.00017188502533826977, -0.002087915316224098, -0.3902815580368042, -0.4952711760997772, -0.0030593518167734146, -0.033848848193883896, -2.1198554039001465, -1.2572182416915894, -0.43421563506126404, -0.08105723559856415, -5.364403477869928e-06, -0.002980079036206007, -0.29556161165237427, -0.006056290585547686, -0.11144671589136124, -0.0001668790791882202, -1.6492106914520264, -0.0035772635601460934, -0.14350885152816772, -0.3621392846107483, -0.0014381790533661842, -7.60526381782256e-05, -2.992108420585282e-05, -0.00017307691450696439, -0.005772823467850685, -0.0003564914222806692, -0.02137785218656063, -0.37321406602859497, -0.00026222606538794935, -0.0004278697888366878, -0.00013648532330989838, -0.0005722792120650411, -5.221230458118953e-05, -2.3841855067985307e-07, -0.004081848077476025, -0.005995148327201605, -0.0027497122064232826, -0.0003398079425096512, -0.0015353093622252345, -2.9862098693847656, -0.08039667457342148, -0.18121393024921417, -0.319058358669281, -0.30862417817115784, -0.0843612551689148, -1.3905798196792603, -0.19380755722522736, -8.67805938469246e-05, -0.864675760269165, -0.14200416207313538, -0.0001294529065489769, -2.7418097943154862e-06, -3.576272320060525e-06, -3.504691630951129e-05, -7.986703712958843e-05, -2.169585604860913e-05, -3.576278118089249e-07, -0.00145329674705863, -0.00042763148667290807, -0.0006481691962108016, -0.0003526780928950757, -0.0007005859515629709, -0.047894738614559174, -0.39360669255256653, -0.1602223813533783, -0.39429333806037903, -0.36086487770080566, -0.0011383965611457825, -0.0029384789522737265, -0.030723800882697105, -0.00148781668394804, -0.0001081169830285944, -0.0010132422903552651, -3.576272320060525e-06, -3.266281055402942e-05, -0.0002798642381094396, -8.618460560683161e-05, -0.003515850519761443, -0.0002734287118073553, -0.00015901254664640874, -0.0031108104158192873, -4.410734163684538e-06, -0.0004463391669560224, -0.0001541257370263338], "finish_reason": "length"}], "metrics": {"energy": 894.5777021121982, "energy_per_token": 3.494444148875774, "time": 22.054619, "time_per_token": 0.08615085546875}}
{"outputs": [{"text": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    modified_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n            escaped_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\\\\\\"', content)  # Escape double quotes using a double backslash\n\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            file.write(escaped_content)\n            modified_files.append(json_file)\n\n    return modified_files", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "directory", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "\"", "Spec", "ified", " directory", " does", " not", " exist", ".", "\"", ")", "\n", "\n", "    ", "json", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", "_", "path", ",", " \"", "*", ".", "json", "\"", "))", "\n", "    ", "modified", "_", "files", " =", " []", "\n", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "es", "cap", "ed", "_", "content", " =", " re", ".", "sub", "(", "r", "'(", "?", "<", "!", "\\\\\\\\", ")\"", "'", ",", " r", "'", "\\\\\\\\", "\"", "'", ",", " content", ")", "  ", "#", " Escape", " double", " quotes", " using", " a", " double", " back", "slash", "\n", "\n", "        ", "with", " open", "(", "json", "_", "file", ",", " \"", "w", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "file", ".", "write", "(", "es", "cap", "ed", "_", "content", ")", "\n", "            ", "modified", "_", "files", ".", "append", "(", "json", "_", "file", ")", "\n", "\n", "    ", "return", " modified", "_", "files", "\n", "\n", "def"], "logprobs": [-0.8540965914726257, -0.04510841146111488, -0.007988526485860348, -2.634490556374658e-05, -0.0015994624700397253, -3.933898824470816e-06, -0.27018851041793823, -0.00015531764074694365, -0.0016813441179692745, -0.00096703483723104, -8.821448318485636e-06, -0.010235320776700974, -0.006720677483826876, -0.004038393963128328, -0.01272487174719572, -0.0024546037893742323, -0.00013195598148740828, -5.364403477869928e-06, -0.022630179300904274, -1.145698070526123, -2.654644727706909, -0.006378174759447575, -0.014722160995006561, -0.11701110750436783, -0.0005845506675541401, -0.004653932526707649, -0.5034001469612122, -0.004476051311939955, -0.0012954423436895013, -0.001156376558355987, -0.22550919651985168, -0.00025245340657420456, -0.870364248752594, -0.006164228543639183, -0.05245266482234001, -0.010538404807448387, -0.08686485886573792, -4.589452510117553e-05, -0.003057688008993864, -0.0016567088896408677, -0.343005895614624, -2.861018856492592e-06, -1.2397689715726301e-05, -2.3841855067985307e-07, -0.005047080107033253, -5.0424259825376794e-05, -0.00026544384309090674, -0.0001864259538706392, -4.768370445162873e-07, -0.0007849234389141202, -0.13671953976154327, -0.03168977051973343, -0.0017617909470573068, -0.0006198153714649379, -0.0003349220205564052, -0.004769021645188332, -0.007458814885467291, -0.5673372745513916, -2.780452251434326, -0.008783041499555111, -0.43298861384391785, -0.0037720496766269207, -0.02051667496562004, -0.0032534070778638124, -0.132130429148674, -8.594620157964528e-05, -0.06104886159300804, -0.7271803021430969, -0.0006423317245207727, -0.009103813208639622, -0.009380197152495384, -0.0015829188050702214, -3.576278118089249e-07, -1.1920928244535389e-07, -5.924526340095326e-05, -0.00022373080719262362, -0.014005002565681934, -0.06595321744680405, -0.00010072677832795307, -6.508615479106084e-05, -0.002333182143047452, -8.821448318485636e-06, -1.4305104514278355e-06, -0.01796603575348854, -0.10731419920921326, -0.005621931981295347, -0.03966199606657028, -1.5782463550567627, -0.02560281753540039, -0.17402257025241852, -0.00036376056959852576, -0.029457151889801025, -0.05271562933921814, -0.00025519452174194157, -0.0016368337674066424, -0.011722725816071033, -5.435795901576057e-05, -0.08220257610082626, -0.004442940000444651, -0.0013892533024773002, -0.0004379982128739357, -0.6066781878471375, -0.003023697528988123, -0.060351721942424774, -8.34461570775602e-06, -3.814689989667386e-06, -0.00021431533969007432, -0.007905504666268826, -1.5768980979919434, -1.7125842571258545, -2.8609820219571702e-05, -0.0002037079248111695, -0.015160804614424706, -0.033488307148218155, -0.000497336674015969, -0.03205776959657669, -0.0001774868869688362, -0.00029869386344216764, -0.09186900407075882, -0.06363482028245926, -1.2258827686309814, -0.12081049382686615, -0.0404227077960968, -0.019804829731583595, -1.5837252140045166, -0.0794648677110672, -0.1470974236726761, -7.450303382938728e-05, -0.10524983704090118, -1.0201494693756104, -0.17457135021686554, -0.1467735320329666, -0.00038068200228735805, -0.00010835537250386551, -0.001690983772277832, -0.01563505083322525, -2.2863216400146484, -0.000129691296024248, -1.425370693206787, -0.1360195279121399, -0.003809696063399315, -2.5115485191345215, -2.3071835041046143, -0.659650981426239, -0.018189411610364914, -0.0024033491499722004, -0.057629868388175964, -0.07370158284902573, -0.00760623486712575, -0.08917882293462753, -2.95634672511369e-05, -1.8000440832111053e-05, -0.0003904534096363932, -2.3841830625315197e-06, -2.264974000354414e-06, -0.00021062063751742244, -0.0033686577808111906, -0.0009192770230583847, -0.002138234442099929, -0.005861593410372734, -0.000589792791288346, -0.0002711643755901605, -1.168244216387393e-05, -9.452849917579442e-05, -0.00019298121333122253, -4.7801782784517854e-05, -7.712543447269127e-05, -0.0008540081907995045, -1.728519782773219e-05, -0.001016457681544125, -0.00026294111739844084, -0.0022865599021315575, -0.0002162222663173452, -0.8061293959617615, -2.396077979938127e-05, -0.00022921319759916514, -0.00024685196694917977, -0.0033059250563383102, 0.0, -1.4305104514278355e-06, -2.3841855067985307e-07, -8.344646857949556e-07, -0.0027366350404918194, -0.004713733214884996, -1.2535954713821411, -0.005659627728164196, -7.986990567587782e-06, -0.0002044230350293219, -7.915183232398704e-05, -0.00015400654228869826, -0.0019383705221116543, -0.11746636778116226, -6.985420623095706e-05, -4.076874756719917e-05, -0.006736070849001408, -0.005056213121861219, -0.036035701632499695, -0.00632972689345479, -0.013586431741714478, -0.005815965123474598, -1.6689286894688848e-06, -3.576278118089249e-07, -0.17440304160118103, -0.008042097091674805, -1.4209603071212769], "finish_reason": "stop"}], "metrics": {"energy": 722.2157277898787, "energy_per_token": 3.52300355019453, "time": 17.61154, "time_per_token": 0.0859099512195122}}
