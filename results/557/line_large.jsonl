{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.0732363685965538, -0.15675191581249237, -4.8636207793606445e-05, -0.002442236291244626, -3.1470757676288486e-05, -8.940656698541716e-06, -0.0012740122620016336, -0.014253240078687668, -0.11095798015594482, -0.011143000796437263, -0.0832357183098793, -0.007923126220703125, -0.052729200571775436, -0.08250074833631516, -7.271740287251305e-06, -0.0008187517523765564, -0.34948867559432983, -0.0008312584250234067, -0.0029471556190401316, -2.396077979938127e-05, -0.0019331354415044188, -8.868777513271198e-05, -2.2411095415009186e-05, -0.0003071551618631929, -3.2186455882765586e-06, -2.3841855067985307e-07, -0.003962167073041201, -0.0016599221853539348], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -1.108404278755188, -0.0004654039512388408, -0.0009504806366749108], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.47960391640663147, -0.005680608097463846], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.106516033411026, -2.610649426060263e-05, -0.5689666867256165, -0.00311354361474514, -0.002275260630995035, -0.0025874252896755934, -0.05126762390136719, -0.0465843603014946, -0.001278179232031107, -0.09405164420604706, -0.0001397035230183974, -0.007335158996284008, -0.13499192893505096], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00031537804170511663, -0.0006874820101074874, -0.03247779980301857, -4.410734163684538e-06, -0.00013457823661156, -0.03924841433763504, -0.00680652167648077], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.44289618730545044, -0.00021050144277978688, -0.8102476596832275, -0.00011991735664196312, -6.6756979322235566e-06, -0.005021934863179922, -0.19532379508018494, -0.001143040368333459, -0.009315832518041134, -0.041876088827848434, -0.04982556775212288], "finish_reason": "stop"}, {"text": "figure(figsize=(len(s_list), 4))", "tokens": ["figure", "(", "fig", "size", "=(", "len", "(", "s", "_", "list", ")", ",", " ", "4", "))", "\n"], "logprobs": [-2.5490951538085938, -0.744742214679718, -0.039147429168224335, -2.455681169521995e-05, -0.00551606947556138, -1.6853306293487549, -0.00013004888023715466, -0.19558821618556976, -0.0002574589161667973, -2.8729025871143676e-05, -0.09003429859876633, -0.22099509835243225, -0.22951918840408325, -2.168886661529541, -0.13940557837486267, -0.014247128739953041], "finish_reason": "stop"}, {"text": "title(\"Average Similarity Scores\")", "tokens": ["title", "(", "\"", "Average", " Similar", "ity", " Sc", "ores", "\"", ")", "\n"], "logprobs": [-2.373614549636841, -0.45544660091400146, -0.019333958625793457, -0.1282161921262741, -0.09645558148622513, -0.004272855818271637, -0.14831463992595673, -1.728519782773219e-05, -0.10026966780424118, -0.0025649527087807655, -0.0002693767019081861], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02281453087925911, -8.22540732769994e-06, -4.6491513785440475e-06, -0.00012611546844709665, -0.38331976532936096], "finish_reason": "stop"}], "metrics": {"energy": 790.9906502971647, "energy_per_token": 6.878179567801433, "time": 22.952316, "time_per_token": 0.19958535652173912}}
{"outputs": [{"text": " not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -2.4725892543792725, -0.17666374146938324, -0.006367632653564215, -6.341733387671411e-05, -0.0011085085570812225, -0.29340294003486633, -0.0018165291985496879, -0.012072000652551651, -3.4689302992774174e-05, -0.0015647084219381213, -0.00010168035078095272, -2.658331868587993e-05, -0.0007378716254606843, -4.672895011026412e-05, -1.0728830375228426e-06, -0.05899554118514061, -0.005419325083494186], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -0.4173413813114166, -0.0007347744540311396, -0.0003829461056739092, -0.001001690630801022], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, s1).ratio() for s1 in s_list]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " s", "1", ")", ".", "ratio", "()", " for", " s", "1", " in", " s", "_", "list", "]", "\n"], "logprobs": [-1.311812400817871, -0.09040965884923935, -4.172316494077677e-06, -5.960446742392378e-06, -0.0002321927313460037, -0.30393290519714355, -3.683499380713329e-05, -0.00894964300096035, -0.013292504474520683, -1.2506675720214844, -1.8377494812011719, -0.010377731174230576, -0.0005986090400256217, -0.00012289722508285195, -0.0003513672563713044, -0.03859554976224899, -0.0016074366867542267, -6.365573790390044e-05, -0.00011836781777674332, -0.0037813130766153336, -2.8013790142722428e-05, -2.622600959512056e-06, -0.8200346231460571, -0.0074484022334218025], "finish_reason": "stop"}, {"text": " np.nanmean(scores) if scores else np.nan", "tokens": [" np", ".", "nan", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.11366486549377441, -2.253030106658116e-05, -0.7025502920150757, -1.7131690979003906, -0.006534873507916927, -0.01858055219054222, -0.001655637752264738, -0.1629820317029953, -0.28321054577827454, -0.006553230341523886, -0.03496629744768143, -4.446407547220588e-05, -0.007404976058751345, -0.10916730016469955], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004120216181036085, -0.0008110094931907952, -0.029227247461676598, -3.933898824470816e-06, -0.00015043080202303827, -0.04666104540228844, -0.007026840932667255], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5163116455078125, -0.0002131234941771254, -0.5885195732116699, -7.152555099310121e-07, -7.86750388215296e-05, -0.0062308101914823055, -0.13744927942752838, -0.001576253562234342, -0.036385323852300644, -0.04103776812553406, -0.02986045554280281], "finish_reason": "stop"}, {"text": "bar(range(len(s_list)), avg_scores)", "tokens": ["bar", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-2.4617550373077393, -0.050763752311468124, -0.22251135110855103, -2.2291887944447808e-05, -0.05222946032881737, -1.9311717551317997e-05, -0.4909827411174774, -0.00016604475968051702, -1.8000440832111053e-05, -0.00120936194434762, -8.05822346592322e-05, -0.014837037771940231, -1.2040065485052764e-05, -4.768370445162873e-07, -1.4543427823809907e-05, -0.18925870954990387, -0.008052503690123558], "finish_reason": "stop"}, {"text": "title(\"Average Similarity Scores\")", "tokens": ["title", "(", "\"", "Average", " Similar", "ity", " Sc", "ores", "\"", ")", "\n"], "logprobs": [-2.3836913108825684, -0.5159639120101929, -0.02162216603755951, -0.11383892595767975, -0.0903589054942131, -0.005474574863910675, -0.1285659521818161, -1.7046782886609435e-05, -0.10420719534158707, -0.0021214615553617477, -0.0002348147245356813], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02472654916346073, -5.8412379075889476e-06, -4.529942543740617e-06, -0.0001370812824461609, -0.3372940719127655], "finish_reason": "stop"}], "metrics": {"energy": 583.9274649906158, "energy_per_token": 4.526569496051286, "time": 15.345685, "time_per_token": 0.1189587984496124}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(x, str) for x in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "x", ",", " str", ")", " for", " x", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.3435840606689453, -0.00036173476837575436, -0.007908105850219727, -3.635817120084539e-05, -0.0028795229736715555, -7.235741941258311e-05, -4.577531944960356e-05, -0.0006711614551022649, -2.861018856492592e-06, 0.0, -0.005193077493458986, -0.0021401375997811556], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -1.108404278755188, -0.0004654039512388408, -0.0009504806366749108], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.47960391640663147, -0.005680608097463846], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else 0.0", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " ", "0", ".", "0", "\n"], "logprobs": [-0.106516033411026, -2.610649426060263e-05, -0.5689666867256165, -0.00311354361474514, -0.002275260630995035, -0.0025874252896755934, -0.05126762390136719, -0.0465843603014946, -0.001278179232031107, -2.870140314102173, -0.01873815804719925, -1.332534670829773, -0.09206733107566833, -0.10276392847299576], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00031537804170511663, -0.0006874820101074874, -0.03247779980301857, -4.410734163684538e-06, -0.00013457823661156, -0.03924841433763504, -0.00680652167648077], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.44289618730545044, -0.00021050144277978688, -0.5927221775054932, -7.152555099310121e-07, -6.69933797325939e-05, -0.005637697875499725, -0.1531526744365692, -0.0015463787131011486, -0.030560441315174103, -0.05444302409887314, -0.029045579954981804], "finish_reason": "stop"}, {"text": "plot(avg_scores, label='Similarity Scores')", "tokens": ["plot", "(", "avg", "_", "scores", ",", " label", "='", "Sim", "ilar", "ity", " Sc", "ores", "')", "\n"], "logprobs": [-0.2540167570114136, -0.009191934019327164, -0.31650373339653015, -1.0728830375228426e-06, -6.246371776796877e-05, -2.4118993282318115, -1.0686604976654053, -0.34372884035110474, -2.7426509857177734, -0.0033404999412596226, -0.014572379179298878, -0.5584721565246582, -7.915183232398704e-05, -0.05109138786792755, -0.00862397626042366], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.42497947812080383, -0.27765417098999023, -0.418133944272995, -0.000285227142740041, -0.008520913310348988, -0.00016008525562938303], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.02281453087925911, -8.22540732769994e-06, -4.6491513785440475e-06, -0.00012611546844709665], "finish_reason": "stop"}], "metrics": {"energy": 537.6748163423537, "energy_per_token": 4.93279648020508, "time": 15.151456, "time_per_token": 0.13900418348623853}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError('Input must be a list of strings')", "tokens": [" Value", "Error", "('", "Input", " must", " be", " a", " list", " of", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -0.8601526021957397, -1.9100024700164795, -0.004016310442239046, -0.020826583728194237, -0.0018656720640137792, -0.0022367238998413086, -0.0030929844360798597, -0.3457326292991638, -0.00149555376265198], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6516848206520081, -0.008452355861663818, -0.004398670978844166, -1.680836794548668e-05, -3.099436753473128e-06, -0.002077446784824133, -0.006015647668391466], "finish_reason": "stop"}, {"text": " [SequenceMatcher(a=s, b=other).ratio() for other in s_list if other != s]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "other", ")", ".", "ratio", "()", " for", " other", " in", " s", "_", "list", " if", " other", " ", "!", "=", " s", "]", "\n"], "logprobs": [-1.1412696838378906, -0.07288720458745956, -4.0531076592742465e-06, -4.768360213347478e-06, -0.0001971527235582471, -1.375737190246582, -0.0033939636778086424, -0.003660883754491806, -0.008910772390663624, -0.005125359166413546, -0.0004096384218428284, -1.2926983833312988, -0.26260894536972046, -0.0008249455713666975, -6.90197994117625e-05, -0.00036066226311959326, -0.050810545682907104, -0.012265728786587715, -0.0002673506969586015, -0.004990027751773596, -2.3364747903542593e-05, -1.7881377516459906e-06, -0.16816087067127228, -0.3321801722049713, -0.013879331760108471, -2.3841855067985307e-07, -5.125986263010418e-06, -0.0008550802012905478, -0.0014075858052819967, -0.007015240378677845], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10410890728235245, -2.8967437174287625e-05, -0.8112747073173523, -0.0028901018667966127, -0.00323653407394886, -0.0026336766313761473, -0.05342816933989525, -0.041350990533828735, -0.0012473430251702666, -0.12497714906930923, -8.082063141046092e-05, -0.006656970363110304, -0.14177505671977997], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00040975757292471826, -0.0007267932523973286, -0.030419835820794106, -4.291525328881107e-06, -0.00017712931730784476, -0.04417220503091812, -0.0049704560078680515], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5577319860458374, -0.0001931004080688581, -0.7655055522918701, -9.035655966727063e-05, -4.0531076592742465e-06, -0.006116362754255533, -0.18305228650569916, -0.0012442474253475666, -0.010095014236867428, -0.044299714267253876, -0.04311329871416092], "finish_reason": "stop"}, {"text": "plot(s_list, avg_scores)", "tokens": ["plot", "(", "s", "_", "list", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.2613238990306854, -0.008587692864239216, -2.766413688659668, -0.001370206126011908, -2.4676019165781327e-05, -0.004281046334654093, -0.03720733895897865, -3.0278701160568744e-05, -1.311301275563892e-06, -7.295342220459133e-05, -0.5134285092353821, -0.003221086924895644], "finish_reason": "stop"}, {"text": "xticks(rotation=90)", "tokens": ["xt", "icks", "(", "rotation", "=", "9", "0", ")", "\n"], "logprobs": [-1.8520281314849854, -1.07287787614041e-05, -0.0009857324184849858, -0.026549018919467926, -0.03638509660959244, -1.4640307426452637, -6.568216485902667e-05, -0.01549526583403349, -0.010512571781873703], "finish_reason": "stop"}, {"text": " avg_scores<|endoftext|>import unittest", "tokens": [" av", "g", "_", "scores", "<", "|", "end", "of", "text", "|>", "import", " un", "ittest", "\n"], "logprobs": [-0.02235347032546997, -6.079655122448457e-06, -5.006777428206988e-06, -0.0001267114421352744, -1.7099615335464478, -2.50339189733495e-06, -1.4305104514278355e-06, -4.6491513785440475e-06, -0.0001746263587847352, -0.25157836079597473, -0.8060205578804016, -2.0382566452026367, -0.0035815397277474403, -0.01105234120041132], "finish_reason": "stop"}], "metrics": {"energy": 660.5702392520908, "energy_per_token": 4.555656822428213, "time": 18.492235, "time_per_token": 0.1275326551724138}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -1.3726190328598022, -0.1157839372754097, -0.0031484817154705524, -0.0008122005965560675, -0.0040494357235729694, -0.5220074653625488, -0.0015137653099372983, -0.0003797286772169173, -0.0008255410939455032], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " [SequenceMatcher(a=s, b=s2).ratio() for s2 in s_list]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "s", "2", ")", ".", "ratio", "()", " for", " s", "2", " in", " s", "_", "list", "]", "\n"], "logprobs": [-1.1425658464431763, -0.0911283865571022, -4.410734163684538e-06, -7.510157047363464e-06, -0.00019226610311307013, -1.523114800453186, -0.004572293721139431, -0.004130523186177015, -0.00879852194339037, -0.008378593251109123, -0.0004383556661196053, -0.8892842531204224, -0.39888253808021545, -0.004807579796761274, -0.0006455483380705118, -4.851700214203447e-05, -0.00021979777375236154, -0.028689788654446602, -0.004866540897637606, -0.00018010901112575084, -0.00025138078490272164, -0.003141589229926467, -2.253030106658116e-05, -1.0728830375228426e-06, -1.2047038078308105, -0.007610257249325514], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.average(scores)  # Return nan if scores is empty", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "average", "(", "scores", ")", "  ", "#", " Return", " nan", " if", " scores", " is", " empty", "\n"], "logprobs": [-0.10583992302417755, -2.6225699912174605e-05, -0.6261985301971436, -0.33964166045188904, -0.5196118354797363, -0.005878777708858252, -0.004562682006508112, -0.047807805240154266, -1.4543427823809907e-05, -3.0923354625701904, -0.005158211104571819, -0.004494446329772472, -0.004032932687550783, -2.052525758743286, -0.00036054308293387294, -1.0221896171569824, -1.5982580184936523, -0.16001445055007935, -1.354370355606079, -0.12369883805513382, -0.06411715596914291, -0.16979815065860748], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004236992390360683, -0.0007824220228940248, -0.03543964773416519, -5.722029527532868e-06, -0.00018737945356406271, -0.03763290122151375, -0.0073417858220636845], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.4725596606731415, -0.00019870213873218745, -0.7087693214416504, -0.00012981049076188356, -6.437280717364047e-06, -0.005598934832960367, -0.17991504073143005, -0.001291394466534257, -0.010020310059189796, -0.042792633175849915, -0.05741310492157936], "finish_reason": "stop"}, {"text": "plot(range(len(s_list)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.24214914441108704, -0.010568366385996342, -1.8523948192596436, -9.655486064730212e-05, -0.27375975251197815, -3.957670196541585e-05, -0.22548094391822815, -0.0002686616498976946, -1.9788545614574105e-05, -0.00206864345818758, -0.00018940561858471483, -0.00752826826646924, -7.986990567587782e-06, -7.152555099310121e-07, -2.90866428258596e-05, -0.19450752437114716, -0.009245322085916996], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.39568808674812317, -0.29292163252830505, -0.45430153608322144, -0.0004520586517173797, -0.0088573656976223, -0.00011681827891152352], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.022756852209568024, -7.510157047363464e-06, -4.6491513785440475e-06, -0.00010048838157672435], "finish_reason": "stop"}], "metrics": {"energy": 671.4603264102929, "energy_per_token": 4.599043331577349, "time": 18.705425, "time_per_token": 0.1281193493150685}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(item, str) for item in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "item", ",", " str", ")", " for", " item", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.486856460571289, -0.00012957210128661245, -0.005048740655183792, -4.756337511935271e-05, -0.002988042077049613, -9.643566590966657e-05, -4.8040190449682996e-05, -0.00030357998912222683, -2.145764938177308e-06, -1.1920928244535389e-07, -0.00427202507853508, -0.0013827058719471097], "finish_reason": "stop"}, {"text": " ValueError(\"s_list must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -0.15696662664413452, -0.12141449004411697, -0.006512844935059547, -0.0013936578761786222, -0.0023283057380467653, -0.0045359814539551735, -0.8898853063583374, -0.00195693108253181, -0.0003511289251036942, -0.0008337597246281803], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.47960391640663147, -0.005680608097463846], "finish_reason": "stop"}, {"text": " sum(scores) / len(scores) if scores else 0", "tokens": [" sum", "(", "scores", ")", " /", " len", "(", "scores", ")", " if", " scores", " else", " ", "0", "\n"], "logprobs": [-2.413801431655884, -0.0002786724944598973, -0.00022885564249008894, -0.05116217955946922, -0.0008485292200930417, -0.05202861130237579, -0.00012039413559250534, -0.02161329984664917, -5.543078441405669e-05, -0.07733133435249329, -0.11341862380504608, -0.0037244255654513836, -2.3715412616729736, -0.09953805804252625, -0.4183734357357025], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004397855664137751, -0.0006523388437926769, -0.031478747725486755, -6.9141146923357155e-06, -0.00018714107864070684, -0.04247163236141205, -0.005800439044833183], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9486222863197327, -3.1709168979432434e-05, -1.5616295058862306e-05, -0.4580829441547394, -0.027757788076996803, -1.6569954823353328e-05, -0.03400268405675888, -0.0033490543719381094], "finish_reason": "stop"}, {"text": "plot(range(len(avg_scores)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "avg", "_", "scores", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.1940770000219345, -0.009326343424618244, -1.7889032363891602, -9.107174992095679e-05, -0.23009498417377472, -3.58813522325363e-05, -1.5876805782318115, -9.65590606938349e-06, -0.0001299296854995191, -0.0014291321858763695, -0.00025602878304198384, -0.00971116591244936, -3.6954811548639555e-06, -7.152555099310121e-07, -4.0411134250462055e-05, -0.20807120203971863, -0.006743411999195814], "finish_reason": "stop"}, {"text": "xlabel('String')", "tokens": ["xlabel", "('", "String", "')", "\n"], "logprobs": [-0.3979176878929138, -0.2873828113079071, -1.2464711666107178, -0.05179603025317192, -0.00031454383861273527], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.02412545680999756, -8.22540732769994e-06, -5.364403477869928e-06, -0.0001525762490928173], "finish_reason": "stop"}], "metrics": {"energy": 543.8026672039028, "energy_per_token": 4.855380957177704, "time": 15.566409, "time_per_token": 0.13898579464285715}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -1.8340984582901, -0.00342996115796268, -0.010104337707161903, -0.001462343498133123, -0.00212395959533751, -0.0035979317035526037, -0.5837392210960388, -0.001949554425664246, -0.0003692421887535602, -0.0009715604246594012], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.47960391640663147, -0.005680608097463846], "finish_reason": "stop"}, {"text": " np.nan if len(scores) == 0 else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " len", "(", "scores", ")", " ==", " ", "0", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.106516033411026, -2.610649426060263e-05, -0.9068191647529602, -0.31484779715538025, -1.010488510131836, -0.0005722792120650411, -0.21085967123508453, -0.0005832401220686734, -0.038944050669670105, -0.0013847296359017491, -0.005482399836182594, -0.0017573880031704903, -0.04436642676591873, -2.6225699912174605e-05, -0.20138242840766907, -0.0018172431737184525, -0.004383597988635302, -0.0008397151832468808, -0.07962329685688019], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003475538978818804, -0.0007531190640293062, -0.02796565741300583, -4.291525328881107e-06, -0.00016246906307060272, -0.03687121346592903, -0.006337308324873447], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.6090877652168274, -0.0002506657037883997, -0.6890340447425842, -0.00012182447244413197, -6.794906312279636e-06, -0.005239445716142654, -0.22529654204845428, -0.0010043105576187372, -0.00932693388313055, -0.04186854138970375, -0.04389568790793419], "finish_reason": "stop"}, {"text": "plot(range(len(s_list)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.24169185757637024, -0.00887792557477951, -1.8585853576660156, -9.524368942948058e-05, -0.23432160913944244, -3.93382906622719e-05, -0.2613797187805176, -0.00021526881027966738, -1.823885577323381e-05, -0.0022671727929264307, -0.00017987063620239496, -0.006693561095744371, -8.4638240878121e-06, -7.152555099310121e-07, -3.0040289857424796e-05, -0.20933480560779572, -0.007414797320961952], "finish_reason": "stop"}, {"text": "xticks(rotation=45)", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ")", "\n"], "logprobs": [-1.663128137588501, -1.811964830267243e-05, -0.001073380233719945, -0.02387162670493126, -0.03648107498884201, -0.4076792299747467, -0.007552640978246927, -0.8197284936904907, -0.0065713501535356045], "finish_reason": "stop"}, {"text": " avg_scores<|endoftext|>\"\"\"", "tokens": [" av", "g", "_", "scores", "<", "|", "end", "of", "text", "|", ">\"", "\"", "\"", "\n"], "logprobs": [-0.025798356160521507, -1.1444026313256472e-05, -5.960446742392378e-06, -0.00016556799528189003, -1.6411100625991821, -2.9802276912960224e-06, -2.0265558760002023e-06, -5.602820692729438e-06, -0.00015376816736534238, -1.5248843431472778, -0.0034230705350637436, -0.004866422154009342, -0.0004198861715849489, -0.38747426867485046], "finish_reason": "stop"}], "metrics": {"energy": 628.6005169067382, "energy_per_token": 4.798477228295711, "time": 17.23657, "time_per_token": 0.13157687022900763}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -1.8340984582901, -0.00342996115796268, -0.010104337707161903, -0.001462343498133123, -0.00212395959533751, -0.0035979317035526037, -0.5837392210960388, -0.001949554425664246, -0.0003692421887535602, -0.0009715604246594012], "finish_reason": "stop"}, {"text": " np.array([np.mean([SequenceMatcher(a=item, b=x).ratio() for x in s_list]) for item in s_list])", "tokens": [" np", ".", "array", "([", "np", ".", "mean", "([", "Sequence", "Mat", "cher", "(", "a", "=", "item", ",", " b", "=", "x", ")", ".", "ratio", "()", " for", " x", " in", " s", "_", "list", "])", " for", " item", " in", " s", "_", "list", "])", "\n"], "logprobs": [-3.0588226318359375, -5.6980417866725475e-05, -1.717507243156433, -0.35845571756362915, -0.47539010643959045, -0.0005477358354255557, -0.20876337587833405, -0.11366923153400421, -0.030260242521762848, -1.0013530300057027e-05, -6.198863957251888e-06, -0.0005339150666259229, -1.356553077697754, -0.008424932137131691, -1.7083568572998047, -0.12444057315587997, -0.01107780635356903, -0.00126151111908257, -2.962836742401123, -0.006002968642860651, -0.0009107018122449517, -8.49926145747304e-05, -0.0010927902767434716, -0.1479920744895935, -0.05038239434361458, -0.000763244170229882, -0.010683484375476837, -8.308542601298541e-05, -4.768360213347478e-06, -0.9098058938980103, -0.10945017635822296, -0.029268115758895874, -0.0006037319544702768, -0.001932302606292069, -2.2649508537142538e-05, 0.0, -0.019582515582442284, -0.019694028422236443], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, x).ratio() for x in s_list if x != s]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " x", ")", ".", "ratio", "()", " for", " x", " in", " s", "_", "list", " if", " x", " ", "!", "=", " s", "]", "\n"], "logprobs": [-1.1425658464431763, -0.0911283865571022, -4.410734163684538e-06, -7.510157047363464e-06, -0.00019226610311307013, -0.2506500482559204, -6.115249561844394e-05, -0.009456838481128216, -0.014664600603282452, -2.6993026733398438, -0.01883678138256073, -0.0006796196103096008, -0.00010835537250386551, -0.00017736769223120064, -0.0401284322142601, -0.004150230437517166, -8.761498611420393e-05, -0.0030971437226980925, -2.5033637939486653e-05, -8.344646857949556e-07, -0.2651710510253906, -0.20839393138885498, -0.01941615529358387, -3.576278118089249e-07, -7.748573807475623e-06, -0.0007564543629996479, -0.0017021704697981477, -0.016158809885382652], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.1343286633491516, -2.825220326485578e-05, -0.5909931063652039, -0.00296248821541667, -0.002941807033494115, -0.0031606026459485292, -0.04914087429642677, -0.036947041749954224, -0.0014934111386537552, -0.10948383063077927, -0.00012766500003635883, -0.007131715305149555, -0.13721641898155212], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00030357998912222683, -0.0006856950931251049, -0.03677010163664818, -5.245195097813848e-06, -0.0001726001501083374, -0.036658525466918945, -0.0069160363636910915], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5606595873832703, -0.0002112165529979393, -0.6538479328155518, -5.960462772236497e-07, -5.9960475482512265e-05, -0.0056380536407232285, -0.13590891659259796, -0.0016465928638353944, -0.03639302775263786, -0.04218699038028717, -0.028242556378245354], "finish_reason": "stop"}, {"text": "plot(avg_scores, marker='o', linestyle='-')", "tokens": ["plot", "(", "avg", "_", "scores", ",", " marker", "='", "o", "'", ",", " lin", "estyle", "='", "-", "')", "\n"], "logprobs": [-0.308561235666275, -0.008424104191362858, -0.23817361891269684, -1.311301275563892e-06, -8.391981828026474e-05, -2.264317274093628, -0.7483653426170349, -0.042388226836919785, -0.21390260756015778, -1.2667092084884644, -0.0005007919971831143, -0.0945044532418251, -1.1920928244535389e-07, -0.041861798614263535, -0.2946063280105591, -0.03988367319107056, -0.010829132981598377], "finish_reason": "stop"}, {"text": "xlabel('String')", "tokens": ["xlabel", "('", "String", "')", "\n"], "logprobs": [-0.3551379442214966, -0.23234806954860687, -1.0511391162872314, -0.03669023886322975, -0.00034362133010290563], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.0214589461684227, -5.125986263010418e-06, -4.6491513785440475e-06, -0.00013410145766101778, -0.40066784620285034], "finish_reason": "stop"}], "metrics": {"energy": 750.933575250626, "energy_per_token": 4.315710202589805, "time": 19.336468, "time_per_token": 0.1111291264367816}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"s_list should be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " should", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -2.0636744499206543, -0.3296884000301361, -0.010535691864788532, -0.0014748420799151063, -0.0034514637663960457, -0.009208942763507366, -0.912604808807373, -0.0020839895587414503, -0.0003293210465926677, -0.0007484733941964805], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -0.24453015625476837, -0.5771498084068298, -0.005320792552083731, -0.004695461131632328, -0.05118856951594353, -1.8954096958623268e-05, -0.1320587694644928, -0.0017171651124954224, -0.002514773979783058, -0.0009442876325920224, -0.15265393257141113], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5603039860725403, -0.00022599527437705547, -0.6490592956542969, -8.344646857949556e-07, -5.113947918289341e-05, -0.006016595754772425, -0.14848163723945618, -0.0016298118280246854, -0.03419036418199539, -0.03715071454644203, -0.029215671122074127], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.20286495983600616, -0.009263510815799236, -0.30865874886512756, -9.536738616588991e-07, -6.878139538457617e-05, -0.10528106242418289, -0.004204006865620613], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.49103599786758423, -0.266384482383728, -0.4872215688228607, -0.0003002431185450405, -0.008435215801000595, -0.00013410145766101778], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.0222773440182209, -8.106198947643861e-06, -5.483612312673358e-06, -0.00013565097469836473], "finish_reason": "stop"}], "metrics": {"energy": 518.8672191677095, "energy_per_token": 4.989107876612592, "time": 15.14162, "time_per_token": 0.14559249999999999}}
{"outputs": [{"text": " not isinstance(s_list, list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -2.6035094261169434, -0.00958932377398014], "finish_reason": "stop"}, {"text": " ValueError('s_list must be a list of strings')", "tokens": [" Value", "Error", "('", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -1.1900972127914429, -0.0015589953400194645, -0.00035446559195406735, -0.24811013042926788, -0.06512926518917084, -0.009380669333040714, -0.0016250512562692165, -0.0025293997023254633, -0.003843422280624509, -0.09475648403167725, -0.0012225781101733446], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6516848206520081, -0.008452355861663818, -0.004398670978844166, -1.680836794548668e-05, -3.099436753473128e-06, -0.002077446784824133, -0.006015647668391466], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, t).ratio() for t in s_list if s != t]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " t", ")", ".", "ratio", "()", " for", " t", " in", " s", "_", "list", " if", " s", " ", "!", "=", " t", "]", "\n"], "logprobs": [-1.1412696838378906, -0.07288720458745956, -4.0531076592742465e-06, -4.768360213347478e-06, -0.0001971527235582471, -0.29674237966537476, -4.470248313737102e-05, -0.0074556199833750725, -0.015163740143179893, -2.35935115814209, -0.03214273601770401, -0.00034505134681239724, -8.34430247778073e-05, -0.00028463127091526985, -0.02272748574614525, -0.001321157906204462, -7.199982064776123e-05, -0.0035008827690035105, -2.407998726994265e-05, -1.0728830375228426e-06, -0.3894875943660736, -0.2366611808538437, -0.013388137333095074, -9.536738616588991e-07, -5.245195097813848e-06, -0.0011030309833586216, -0.0014910305617377162, -0.018309859558939934], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.09518209844827652, -3.123234637314454e-05, -0.5627073049545288, -0.0029558322858065367, -0.003095598891377449, -0.0032877461053431034, -0.041075412184000015, -0.03384077921509743, -0.001179118873551488, -0.09483595937490463, -0.00011491115583339706, -0.00927827414125204, -0.13076187670230865], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00033742457162588835, -0.0007694382802583277, -0.027057694271206856, -3.3378546504536644e-06, -0.00017438798386137933, -0.038875024765729904, -0.0055174920707941055], "finish_reason": "stop"}, {"text": " plot_path:", "tokens": [" plot", "_", "path", ":", "\n"], "logprobs": [-0.9169448018074036, -3.9219088648678735e-05, -1.3589766240329482e-05, -0.9516919851303101, -0.0034312678035348654], "finish_reason": "stop"}, {"text": "bar(range(len(s_list)), avg_scores, color='blue')", "tokens": ["bar", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ",", " color", "='", "blue", "')", "\n"], "logprobs": [-2.4421510696411133, -0.055252473801374435, -0.2438831329345703, -3.123234637314454e-05, -0.04774268716573715, -1.7165990357170813e-05, -0.8041568398475647, -0.00019786784832831472, -1.8358061424805783e-05, -0.0009055804111994803, -8.11782301752828e-05, -0.014447367750108242, -1.4424220353248529e-05, -4.768370445162873e-07, -1.7165990357170813e-05, -1.5920567512512207, -1.3888318538665771, -0.07360479235649109, -1.1295745372772217, -0.547678530216217, -0.006357327103614807], "finish_reason": "stop"}, {"text": "title('Average Similarity Scores')", "tokens": ["title", "('", "Average", " Similar", "ity", " Sc", "ores", "')", "\n"], "logprobs": [-2.5606021881103516, -0.9288068413734436, -0.13905304670333862, -0.16388535499572754, -0.00591207854449749, -0.2441929131746292, -1.966933996300213e-05, -0.09405500441789627, -0.0001541257370263338], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.024744806811213493, -6.437280717364047e-06, -5.960446742392378e-06, -0.00016258825780823827], "finish_reason": "stop"}], "metrics": {"energy": 553.7078219757084, "energy_per_token": 4.61423184979757, "time": 14.722386, "time_per_token": 0.12268655}}
{"outputs": [{"text": " not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -2.4725892543792725, -0.17666374146938324, -0.006367632653564215, -6.341733387671411e-05, -0.0011085085570812225, -0.29340294003486633, -0.0018165291985496879, -0.012072000652551651, -3.4689302992774174e-05, -0.0015647084219381213, -0.00010168035078095272, -2.658331868587993e-05, -0.0007378716254606843, -4.672895011026412e-05, -1.0728830375228426e-06, -0.05899554118514061, -0.005419325083494186], "finish_reason": "stop"}, {"text": " ValueError(\"s_list must be a list of strings\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -0.15696662664413452, -0.12141449004411697, -0.006512844935059547, -0.0013936578761786222, -0.0023283057380467653, -0.0045359814539551735, -0.5568774938583374, -0.0002892790944315493, -0.001434488920494914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, other).ratio() for other in s_list if s != other]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " other", ")", ".", "ratio", "()", " for", " other", " in", " s", "_", "list", " if", " s", " ", "!", "=", " other", "]", "\n"], "logprobs": [-1.311812400817871, -0.09040965884923935, -4.172316494077677e-06, -5.960446742392378e-06, -0.0002321927313460037, -0.30393290519714355, -3.683499380713329e-05, -0.00894964300096035, -0.013292504474520683, -1.1437225341796875, -0.23494356870651245, -0.0004303721070755273, -8.439661905867979e-05, -0.00038747431244701147, -0.05502154305577278, -0.0010677833342924714, -0.00047398300375789404, -0.005254150368273258, -2.992108420585282e-05, -5.960462772236497e-07, -0.6962063908576965, -1.1164004802703857, -0.015499725937843323, -9.536738616588991e-07, -3.2186455882765586e-06, -0.0004528927383944392, -0.0017915404168888927, -0.012547831982374191], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)  # return NaN if no scores", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "  ", "#", " return", " Na", "N", " if", " no", " scores", "\n"], "logprobs": [-0.11639914661645889, -3.302042750874534e-05, -0.9815930128097534, -0.36143773794174194, -0.6303243041038513, -0.007489341776818037, -0.005091557744890451, -0.05882864445447922, -1.7404405298293568e-05, -0.1365196704864502, -0.001982510555535555, -0.0026544833090156317, -0.0009972843108698726, -2.122755289077759, -0.00026222606538794935, -2.59060001373291, -2.7081425189971924, -0.00019298121333122253, -0.13186852633953094, -3.2246692180633545, -0.3466406762599945, -0.3887285590171814], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004926898400299251, -0.000687958556227386, -0.03495018184185028, -4.172316494077677e-06, -0.0002090712368953973, -0.03217136487364769, -0.007634746376425028], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.4592795670032501, -0.00021562635083682835, -0.7633498907089233, -0.00012683063687290996, -7.152531907195225e-06, -0.0051788464188575745, -0.22171898186206818, -0.001178642618469894, -0.010354135185480118, -0.05770942568778992, -0.05093653127551079], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2749391794204712, -0.012135010212659836, -0.29587656259536743, -1.311301275563892e-06, -0.00010346830822527409, -0.11091818660497665, -0.002989943837746978], "finish_reason": "stop"}, {"text": "xticks(rotation=45)", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ")", "\n"], "logprobs": [-1.8898725509643555, -1.2993727978027891e-05, -0.001029319129884243, -0.030774317681789398, -0.04077183082699776, -0.4855213165283203, -0.007228412665426731, -1.1918246746063232, -0.009129093028604984], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.023466715589165688, -8.821448318485636e-06, -4.768360213347478e-06, -0.00013410145766101778, -0.4026602506637573], "finish_reason": "stop"}], "metrics": {"energy": 574.7331748456957, "energy_per_token": 4.387276143860272, "time": 15.574463, "time_per_token": 0.11888903053435114}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list should contain only strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " should", " contain", " only", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -1.474717140197754, -0.22621995210647583, -0.04785360395908356, -0.011602071113884449, -1.3510475158691406, -0.00045599075383506715, -0.0010095505276694894], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nanmean(scores) if len(scores) > 0 else np.nan", "tokens": [" np", ".", "nan", "mean", "(", "scores", ")", " if", " len", "(", "scores", ")", " >", " ", "0", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -1.5764622688293457, -0.0049795894883573055, -0.02541828155517578, -0.0019795361440628767, -0.18206645548343658, -1.636544108390808, -0.00012027494085486978, -0.07611455768346786, -0.012673434801399708, -0.17470909655094147, -0.0007371568935923278, -0.028667664155364037, -0.001209242851473391, -0.0404709056019783, -2.3603161025675945e-05, -0.004945308435708284, -0.18459798395633698], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9232190251350403, -3.516612196108326e-05, -1.3828182090946939e-05, -0.3968736231327057, -0.0318477489054203, -2.2649508537142538e-05, -0.03349925950169563, -0.0031177031341940165], "finish_reason": "stop"}, {"text": "bar(np.arange(len(avg_scores)), avg_scores)", "tokens": ["bar", "(", "np", ".", "ar", "ange", "(", "len", "(", "avg", "_", "scores", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-2.3741633892059326, -0.0437106192111969, -1.5525596141815186, -5.8412379075889476e-06, -0.005161650013178587, -1.6689286894688848e-06, -0.000300958170555532, -0.12501050531864166, -4.017272294731811e-05, -0.3452211916446686, -2.9802276912960224e-06, -5.4238757002167404e-05, -0.008198772557079792, -0.0667191743850708, -0.025897562503814697, -2.1934269170742482e-05, -1.1920928244535389e-07, -2.1219027985353023e-05, -0.2357555627822876, -0.016953542828559875], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.37370485067367554, -0.2554469406604767, -0.4477601647377014, -0.0003721021639648825, -0.007311017718166113, -0.0001264730526600033], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.022911354899406433, -6.318072337307967e-06, -5.245195097813848e-06, -0.00012432756193447858, -0.3636068105697632], "finish_reason": "stop"}], "metrics": {"energy": 563.2460227890012, "energy_per_token": 4.814068570846165, "time": 15.557851, "time_per_token": 0.13297308547008546}}
{"outputs": [{"text": " not all([isinstance(s, str) for s in s_list]):", "tokens": [" not", " all", "([", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "]", "):", "\n"], "logprobs": [-0.06768376380205154, -2.4725892543792725, -1.84646737575531, -0.01886637695133686, -0.0004152389301452786, -0.012105096131563187, -0.3706287145614624, -0.008017263375222683, -0.018377743661403656, -0.00022957073815632612, -0.002074234653264284, -0.00017724849749356508, -5.686121585313231e-05, -0.0007634824141860008, -5.6503606174374e-05, -3.933898824470816e-06, -0.04373230040073395, -0.0015697074122726917, -0.009461325593292713], "finish_reason": "stop"}, {"text": " ValueError(\"s_list must be a list of strings\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -0.15696662664413452, -0.12141449004411697, -0.006512844935059547, -0.0013936578761786222, -0.0023283057380467653, -0.0045359814539551735, -0.5568774938583374, -0.0002892790944315493, -0.001434488920494914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " [SequenceMatcher(a=s, b=item).ratio() for item in s_list if item != s]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "item", ")", ".", "ratio", "()", " for", " item", " in", " s", "_", "list", " if", " item", " ", "!", "=", " s", "]", "\n"], "logprobs": [-1.311812400817871, -0.09040965884923935, -4.172316494077677e-06, -5.960446742392378e-06, -0.0002321927313460037, -1.3577125072479248, -0.0045763286761939526, -0.004775665700435638, -0.009929075837135315, -0.00613958528265357, -0.000426439888542518, -2.6772756576538086, -0.013776926323771477, -0.0007529999129474163, -7.950943836476654e-05, -0.00023648326168768108, -0.035095907747745514, -0.0071292296051979065, -0.00013886917440686375, -0.002892598044127226, -3.1709168979432434e-05, -2.3841855067985307e-07, -0.4468039274215698, -0.10919231176376343, -0.01351375225931406, -4.768370445162873e-07, -5.602820692729438e-06, -0.0009678685455583036, -0.0016346914926543832, -0.009015803225338459], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10588667541742325, -2.6225699912174605e-05, -0.7146019339561462, -0.002624997403472662, -0.003194113029167056, -0.0030782478861510754, -0.0469466932117939, -0.05187956243753433, -0.0014252038672566414, -0.11953911185264587, -0.00012587709352374077, -0.008443254046142101, -0.14003098011016846], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003912875254172832, -0.0006376855308189988, -0.03290387988090515, -4.0531076592742465e-06, -0.0001770101225702092, -0.035166576504707336, -0.008272667415440083], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.4980802536010742, -0.00020668754586949944, -0.7445024251937866, -0.00015078838623594493, -6.437280717364047e-06, -0.004394042305648327, -0.1857059746980667, -0.001096005435101688, -0.009975815191864967, -0.0418870635330677, -0.04248785600066185], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.24292418360710144, -0.008467013947665691, -0.27745530009269714, -9.536738616588991e-07, -9.07141511561349e-05, -0.10287848114967346, -0.0037260884419083595], "finish_reason": "stop"}, {"text": "xticks(rotation=45, ha='right')", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ",", " ha", "='", "right", "')", "\n"], "logprobs": [-1.925424337387085, -1.9907753085135482e-05, -0.0010767144849523902, -0.017909714952111244, -0.03131724148988724, -0.3679942786693573, -0.007436924614012241, -0.5610092282295227, -0.0025202438700944185, -0.03531583398580551, -0.000736918649636209, -0.01787470281124115, -0.007932469248771667], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.024928653612732887, -7.510157047363464e-06, -4.291525328881107e-06, -0.00012694983161054552, -0.3825940787792206], "finish_reason": "stop"}], "metrics": {"energy": 595.1025249919892, "energy_per_token": 4.613197868154955, "time": 16.82155, "time_per_token": 0.13039961240310077}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -2.762338876724243], "finish_reason": "stop"}, {"text": " ValueError(\"s_list must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -0.15696662664413452, -0.12141449004411697, -0.006512844935059547, -0.0013936578761786222, -0.0023283057380467653, -0.0045359814539551735, -0.8898853063583374, -0.00195693108253181, -0.0003511289251036942, -0.0008337597246281803], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " [SequenceMatcher(a=s, b=other).ratio() for other in s_list if s != other]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "other", ")", ".", "ratio", "()", " for", " other", " in", " s", "_", "list", " if", " s", " ", "!", "=", " other", "]", "\n"], "logprobs": [-1.1425658464431763, -0.0911283865571022, -4.410734163684538e-06, -7.510157047363464e-06, -0.00019226610311307013, -1.523114800453186, -0.004572293721139431, -0.004130523186177015, -0.00879852194339037, -0.008378593251109123, -0.0004383556661196053, -1.3066178560256958, -0.2844642698764801, -0.0007572882459498942, -9.011816291604191e-05, -0.00035601475974544883, -0.056251056492328644, -0.01508741732686758, -0.0002728328399825841, -0.005441733635962009, -2.038458114839159e-05, -1.7881377516459906e-06, -0.1748553365468979, -1.268249750137329, -0.018571892753243446, -4.768370445162873e-07, -2.145764938177308e-06, -0.0005579821881838143, -0.001292942208237946, -0.010862152092158794], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10583992302417755, -2.6225699912174605e-05, -0.8285605907440186, -0.0022647941950708628, -0.0031251898035407066, -0.002698116237297654, -0.041459761559963226, -0.03207947686314583, -0.0013765154872089624, -0.09780668467283249, -9.917721035890281e-05, -0.0069641005247831345, -0.1397324800491333], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0005553610390052199, -0.0006937957368791103, -0.043367769569158554, -3.933898824470816e-06, -0.00017736769223120064, -0.034264206886291504, -0.0076891640201210976], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.6071437001228333, -0.00019429226813372225, -0.59025639295578, -7.152555099310121e-07, -6.472854875028133e-05, -0.006020505912601948, -0.14171379804611206, -0.0016464737709611654, -0.03407815098762512, -0.04062590003013611, -0.030195705592632294], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.24123556911945343, -0.008097675628960133, -0.256511926651001, -8.344646857949556e-07, -9.047575440490618e-05, -0.09522198140621185, -0.003700672183185816], "finish_reason": "stop"}, {"text": "xlabel(\"String\")", "tokens": ["xlabel", "(", "\"", "String", "\"", ")", "\n"], "logprobs": [-0.38465866446495056, -1.4216121435165405, -0.004138358868658543, -1.7095061540603638, -0.1248113363981247, -0.0020610298961400986, -0.0002008474839385599], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02250348962843418, -6.6756979322235566e-06, -5.125986263010418e-06, -0.00013064485392533243, -0.34560254216194153], "finish_reason": "stop"}], "metrics": {"energy": 564.9688963470456, "energy_per_token": 4.70807413622538, "time": 15.960247, "time_per_token": 0.13300205833333334}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(item, str) for item in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "item", ",", " str", ")", " for", " item", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.486856460571289, -0.00012957210128661245, -0.005048740655183792, -4.756337511935271e-05, -0.002988042077049613, -9.643566590966657e-05, -4.8040190449682996e-05, -0.00030357998912222683, -2.145764938177308e-06, -1.1920928244535389e-07, -0.00427202507853508, -0.0013827058719471097], "finish_reason": "stop"}, {"text": " ValueError('Input list must contain only strings.')", "tokens": [" Value", "Error", "('", "Input", " list", " must", " contain", " only", " strings", ".", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -0.8601526021957397, -0.292013943195343, -0.34819120168685913, -0.33053186535835266, -0.05957502871751785, -0.016603974625468254, -0.8487330675125122, -0.0015707785496488214, -0.0006277974462136626], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6516848206520081, -0.008452355861663818, -0.004398670978844166, -1.680836794548668e-05, -3.099436753473128e-06, -0.002077446784824133, -0.006015647668391466], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, ss).ratio() for ss in s_list]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " ss", ")", ".", "ratio", "()", " for", " ss", " in", " s", "_", "list", "]", "\n"], "logprobs": [-1.1412696838378906, -0.07288720458745956, -4.0531076592742465e-06, -4.768360213347478e-06, -0.0001971527235582471, -0.29674237966537476, -4.470248313737102e-05, -0.0074556199833750725, -0.015163740143179893, -2.8576927185058594, -0.010297502391040325, -0.0003978414461016655, -6.83045873302035e-05, -0.0001851148990681395, -0.041332345455884933, -0.01063807588070631, -0.0001674750237725675, -0.0035306992940604687, -4.2199197196168825e-05, -7.152555099310121e-07, -1.1563481092453003, -0.007516081444919109], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan  # Handle case for a single element", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "  ", "#", " Handle", " case", " for", " a", " single", " element", "\n"], "logprobs": [-0.09518209844827652, -3.123234637314454e-05, -0.5627073049545288, -0.0029558322858065367, -0.003095598891377449, -0.0032877461053431034, -0.041075412184000015, -0.03384077921509743, -0.001179118873551488, -0.09483595937490463, -0.00011491115583339706, -0.00927827414125204, -2.3383500576019287, -0.00038258862332440913, -2.5729589462280273, -1.4272434711456299, -3.07796311378479, -1.5145612955093384, -0.03764047846198082, -0.6973168849945068, -0.4761413335800171], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00033742457162588835, -0.0007694382802583277, -0.027057694271206856, -3.3378546504536644e-06, -0.00017438798386137933, -0.038875024765729904, -0.0055174920707941055], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9169448018074036, -3.9219088648678735e-05, -1.3589766240329482e-05, -0.5474714040756226, -0.03076876886188984, -2.455681169521995e-05, -0.03717334195971489, -0.003497794270515442], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.25439929962158203, -0.00904581043869257, -0.37692543864250183, -1.0728830375228426e-06, -7.56950321374461e-05, -0.10136392712593079, -0.003533431561663747], "finish_reason": "stop"}, {"text": "xticks(rotation=45, ha='right')", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ",", " ha", "='", "right", "')", "\n"], "logprobs": [-1.8743078708648682, -1.645074735279195e-05, -0.0011096993694081903, -0.020212510600686073, -0.0318773090839386, -0.4018845856189728, -0.008294893428683281, -0.5047050714492798, -0.002499315422028303, -0.038751982152462006, -0.0007566926069557667, -0.00729563320055604, -0.006756792310625315], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.022690312936902046, -6.794906312279636e-06, -4.6491513785440475e-06, -0.00015364897262770683, -0.367697536945343], "finish_reason": "stop"}], "metrics": {"energy": 602.5843665523529, "energy_per_token": 4.565033079942068, "time": 15.763758, "time_per_token": 0.11942240909090908}}
{"outputs": [{"text": " not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -2.4725892543792725, -0.17666374146938324, -0.006367632653564215, -6.341733387671411e-05, -0.0011085085570812225, -0.29340294003486633, -0.0018165291985496879, -0.012072000652551651, -3.4689302992774174e-05, -0.0015647084219381213, -0.00010168035078095272, -2.658331868587993e-05, -0.0007378716254606843, -4.672895011026412e-05, -1.0728830375228426e-06, -0.05899554118514061, -0.005419325083494186], "finish_reason": "stop"}, {"text": " ValueError('s_list must be a list of strings')", "tokens": [" Value", "Error", "('", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -1.1900972127914429, -0.0015589953400194645, -0.00035446559195406735, -0.24811013042926788, -0.06512926518917084, -0.009380669333040714, -0.0016250512562692165, -0.0025293997023254633, -0.003843422280624509, -0.09475648403167725, -0.0012225781101733446], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.7945261597633362, -0.0035151378251612186, -7.867782187531702e-06, -2.50339189733495e-06, -0.0028666851576417685, -0.004752174485474825], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.5091648101806641, -0.005021816119551659], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan  # Return NaN if the list contains a single element", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "  ", "#", " Return", " Na", "N", " if", " the", " list", " contains", " a", " single", " element", "\n"], "logprobs": [-0.10626716911792755, -2.4914430468925275e-05, -0.642234206199646, -0.0023382960353046656, -0.0032958255615085363, -0.002579102059826255, -0.04432366043329239, -0.03426040709018707, -0.0013404440833255649, -0.10551300644874573, -9.059495641849935e-05, -0.008289100602269173, -2.189703941345215, -0.0003632839070633054, -0.9985595345497131, -1.9922902584075928, -0.00010382589971413836, -0.1326170712709427, -0.5948266983032227, -0.030023466795682907, -0.7400176525115967, -0.041951537132263184, -0.0004930472350679338, -0.0588514618575573, -0.013307209126651287], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003494605771265924, -0.0007088055717758834, -0.03045996092259884, -6.079655122448457e-06, -0.0001793938863556832, -0.03948909044265747, -0.006361117586493492], "finish_reason": "stop"}, {"text": " plot_path:", "tokens": [" plot", "_", "path", ":", "\n"], "logprobs": [-1.007239818572998, -3.528532761265524e-05, -1.2993727978027891e-05, -1.0339007377624512, -0.004830001853406429], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.20557352900505066, -0.011499431915581226, -0.36670351028442383, -1.0728830375228426e-06, -8.356221951544285e-05, -0.11329644173383713, -0.004206737503409386], "finish_reason": "stop"}, {"text": "xticks(rotation=45, ha='right')", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ",", " ha", "='", "right", "')", "\n"], "logprobs": [-1.9726475477218628, -1.680836794548668e-05, -0.0009740613750182092, -0.030694089829921722, -0.036374520510435104, -0.4112149477005005, -0.005795579869300127, -0.6003248691558838, -0.0022348209749907255, -0.03611734136939049, -0.000577402301132679, -0.013306856155395508, -0.006938174366950989], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores"], "logprobs": [-0.027963917702436447, -7.748573807475623e-06, -4.410734163684538e-06, -0.00015376816736534238], "finish_reason": "stop"}], "metrics": {"energy": 510.5599949665069, "energy_per_token": 4.9568931550146305, "time": 14.536842, "time_per_token": 0.14113438834951456}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError('The argument s_list must be a list of strings')", "tokens": [" Value", "Error", "('", "The", " argument", " s", "_", "list", " must", " be", " a", " list", " of", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -2.6892714500427246, -3.130964517593384, -2.1801466941833496, -0.0024927754420787096, -0.0005930095794610679, -0.31106090545654297, -0.02847117930650711, -0.015665212646126747, -0.00422525592148304, -0.006629733834415674, -0.009535481221973896, -0.793249785900116, -0.0008647278300486505], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.7945261597633362, -0.0035151378251612186, -7.867782187531702e-06, -2.50339189733495e-06, -0.0028666851576417685, -0.004752174485474825], "finish_reason": "stop"}, {"text": " [SequenceMatcher(a=s, b=item).ratio() for item in s_list if item != s]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "item", ")", ".", "ratio", "()", " for", " item", " in", " s", "_", "list", " if", " item", " ", "!", "=", " s", "]", "\n"], "logprobs": [-1.0813255310058594, -0.09105459600687027, -4.6491513785440475e-06, -5.364403477869928e-06, -0.00021360022947192192, -1.3081659078598022, -0.0033534502144902945, -0.002826506970450282, -0.010812977328896523, -0.005860763601958752, -0.0003895000845659524, -2.5264906883239746, -0.014973157085478306, -0.0006156456656754017, -7.414542778860778e-05, -0.0002057340752799064, -0.031263403594493866, -0.005503977183252573, -0.00014697425649501383, -0.002474581589922309, -3.4689302992774174e-05, -1.1920928244535389e-07, -0.45245274901390076, -0.10688568651676178, -0.0164487287402153, -5.960462772236497e-07, -6.6756979322235566e-06, -0.0011294659925624728, -0.0013824678026139736, -0.00894728023558855], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10496534407138824, -2.8729025871143676e-05, -0.7067447900772095, -0.0023544705472886562, -0.003485320834442973, -0.0033649748656898737, -0.04491889104247093, -0.033313293009996414, -0.0016194575000554323, -0.0841333344578743, -0.00010358751023886725, -0.0075099291279911995, -0.16161106526851654], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00036507140612229705, -0.0008304246584884822, -0.032348427921533585, -2.861018856492592e-06, -0.00024089295766316354, -0.03564465790987015, -0.006324988789856434], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.49969032406806946, -0.00021944021864328533, -0.6277791261672974, -9.536738616588991e-07, -6.854299135738984e-05, -0.005700996145606041, -0.16456268727779388, -0.0016050563426688313, -0.032351430505514145, -0.04512482136487961, -0.027172785252332687], "finish_reason": "stop"}, {"text": "bar(range(len(s_list)), avg_scores)", "tokens": ["bar", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-2.561596632003784, -0.041820984333753586, -0.21980489790439606, -2.312633478140924e-05, -0.04701652750372887, -1.6331539882230572e-05, -0.6513509750366211, -0.00019965562387369573, -3.71926071238704e-05, -0.0010518262861296535, -7.56950321374461e-05, -0.013872748240828514, -1.9550132492440753e-05, -4.768370445162873e-07, -1.549708758830093e-05, -0.24079275131225586, -0.007102124392986298], "finish_reason": "stop"}, {"text": "xticks(rotation=45)", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ")", "\n"], "logprobs": [-1.7388612031936646, -1.537788011773955e-05, -0.0012222208315506577, -0.027954179793596268, -0.03379237651824951, -0.4122648537158966, -0.007082120515406132, -0.9545255899429321, -0.009781643748283386], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.027176151052117348, -6.794906312279636e-06, -4.6491513785440475e-06, -0.00011157367407577112, -0.3446822464466095], "finish_reason": "stop"}], "metrics": {"energy": 640.0826930828094, "energy_per_token": 4.445018701963955, "time": 17.858831, "time_per_token": 0.12401965972222222}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -0.4173413813114166, -0.0007347744540311396, -0.0003829461056739092, -0.001001690630801022], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.7052962183952332, -0.00265733664855361, -0.0027323553804308176, -0.0029989767353981733, -0.049009665846824646, -0.04590655118227005, -0.0012836558744311333, -0.11382456123828888, -0.00016115797916427255, -0.00761392479762435, -0.16032707691192627], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004592079494614154, -0.0006425699684768915, -0.03467835858464241, -4.768360213347478e-06, -0.0002554328821133822, -0.03837898001074791, -0.00771980220451951], "finish_reason": "stop"}, {"text": " len(avg_scores) == 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5371972918510437, -0.00020728347590193152, -0.6783275604248047, -5.960462772236497e-07, -7.807903602952138e-05, -0.005450862925499678, -0.13784413039684296, -0.001573873101733625, -0.04077617824077606, -0.038461461663246155, -0.02727394551038742], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.23573888838291168, -0.007268769200891256, -0.26328784227371216, -8.344646857949556e-07, -7.390703103737906e-05, -0.09533696621656418, -0.004382054787129164], "finish_reason": "stop"}, {"text": "xlabel('String')", "tokens": ["xlabel", "('", "String", "')", "\n"], "logprobs": [-0.3510766625404358, -0.31915366649627686, -1.1417039632797241, -0.04267144203186035, -0.0002849888114724308], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.020159121602773666, -5.245195097813848e-06, -5.125986263010418e-06, -0.00012706902634818107, -0.34550172090530396], "finish_reason": "stop"}], "metrics": {"energy": 504.32827272796624, "energy_per_token": 5.043282727279663, "time": 14.297814, "time_per_token": 0.14297814}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError('s_list must be a list of strings')", "tokens": [" Value", "Error", "('", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -1.1900972127914429, -0.0015589953400194645, -0.00035446559195406735, -0.24811013042926788, -0.06512926518917084, -0.009380669333040714, -0.0016250512562692165, -0.0025293997023254633, -0.003843422280624509, -0.09475648403167725, -0.0012225781101733446], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6516848206520081, -0.008452355861663818, -0.004398670978844166, -1.680836794548668e-05, -3.099436753473128e-06, -0.002077446784824133, -0.006015647668391466], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.4580840766429901, -0.0049128057435154915], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10496362298727036, -2.7417760065873154e-05, -0.6789720058441162, -0.0028187802527099848, -0.0028945000376552343, -0.003044614801183343, -0.056364756077528, -0.036079395562410355, -0.0013653251808136702, -0.07924386858940125, -0.00014077626110520214, -0.0064897495321929455, -0.167507141828537], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00045265440712682903, -0.0006859333370812237, -0.03420914337038994, -5.483612312673358e-06, -0.0002002515539061278, -0.032503072172403336, -0.0064010354690253735], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5102211833000183, -0.00022373080719262362, -0.8409116864204407, -0.00012599628826137632, -5.722029527532868e-06, -0.005869770888239145, -0.18095482885837555, -0.0009147512027993798, -0.01043117418885231, -0.03802454471588135, -0.04493769630789757], "finish_reason": "stop"}, {"text": "plot(range(len(s_list)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.26201552152633667, -0.007173378020524979, -1.67149019241333, -8.320462075062096e-05, -0.21699312329292297, -3.40932747349143e-05, -0.23811443150043488, -0.0002094287920044735, -2.0265373677830212e-05, -0.002087677363306284, -0.00016258825780823827, -0.007518802769482136, -8.22540732769994e-06, -9.536738616588991e-07, -2.8967437174287625e-05, -0.22395861148834229, -0.008302105590701103], "finish_reason": "stop"}, {"text": "title(\"Average Similarity Scores\")", "tokens": ["title", "(", "\"", "Average", " Similar", "ity", " Sc", "ores", "\"", ")", "\n"], "logprobs": [-2.2849230766296387, -0.5521350502967834, -0.01986466534435749, -0.11731159687042236, -0.09644875675439835, -0.004657966550439596, -0.15009726583957672, -1.4781842764932662e-05, -0.08663291484117508, -0.0018135543214157224, -0.0002157455455744639], "finish_reason": "stop"}, {"text": " avg_scores<|endoftext|>from typing import List", "tokens": [" av", "g", "_", "scores", "<", "|", "end", "of", "text", "|>", "from", " typing", " import", " List", "\n"], "logprobs": [-0.024758879095315933, -6.437280717364047e-06, -4.6491513785440475e-06, -9.238292841473594e-05, -1.7598092555999756, -2.145764938177308e-06, -2.145764938177308e-06, -5.125986263010418e-06, -0.00014578233822248876, -0.2646392583847046, -1.9636945724487305, -1.799335241317749, -0.0011141052236780524, -0.656846821308136, -0.21208389103412628], "finish_reason": "stop"}], "metrics": {"energy": 610.7581151523589, "energy_per_token": 4.809119016947708, "time": 16.818945, "time_per_token": 0.1324326377952756}}
{"outputs": [{"text": " not all(isinstance(item, str) for item in s_list):", "tokens": [" not", " all", "(", "is", "instance", "(", "item", ",", " str", ")", " for", " item", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -2.4725892543792725, -0.17666374146938324, -0.006367632653564215, -6.341733387671411e-05, -0.0011085085570812225, -2.394038438796997, -0.00021431533969007432, -0.010013701394200325, -2.634490556374658e-05, -0.0017316836165264249, -7.343022298300639e-05, -3.814624506048858e-05, -0.00126079679466784, -5.602679812000133e-05, -2.145764938177308e-06, -0.07193483412265778, -0.004026046022772789], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must be a list of strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -1.3726190328598022, -0.1157839372754097, -0.0031484817154705524, -0.0008122005965560675, -0.0040494357235729694, -0.9686474800109863, -0.000569300667848438, -0.0014804366510361433], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -0.24453015625476837, -0.5771498084068298, -0.005320792552083731, -0.004695461131632328, -0.05118856951594353, -1.8954096958623268e-05, -0.1320587694644928, -0.0017171651124954224, -0.002514773979783058, -0.0009442876325920224, -0.15265393257141113], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9232190251350403, -3.516612196108326e-05, -1.3828182090946939e-05, -0.3968736231327057, -0.0318477489054203, -2.2649508537142538e-05, -0.03349925950169563, -0.0031177031341940165], "finish_reason": "stop"}, {"text": "bar(range(len(s_list)), avg_scores)", "tokens": ["bar", "(", "range", "(", "len", "(", "s", "_", "list", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-2.3741633892059326, -0.0437106192111969, -0.2968871593475342, -3.0040289857424796e-05, -0.058009371161460876, -1.7165990357170813e-05, -0.7799022197723389, -0.00018857131362892687, -3.9219088648678735e-05, -0.0010278901318088174, -7.795983401592821e-05, -0.012811025604605675, -1.490105023549404e-05, -3.576278118089249e-07, -2.0503786799963564e-05, -0.2164965271949768, -0.007120589260011911], "finish_reason": "stop"}, {"text": "xlabel(\"String\")", "tokens": ["xlabel", "(", "\"", "String", "\"", ")", "\n"], "logprobs": [-0.37370485067367554, -1.490272045135498, -0.004352738615125418, -1.7399251461029053, -0.1282120943069458, -0.0021527467761188745, -0.00015352977789007127], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.022911354899406433, -6.318072337307967e-06, -5.245195097813848e-06, -0.00012432756193447858, -0.3636068105697632], "finish_reason": "stop"}], "metrics": {"energy": 510.2196286544796, "energy_per_token": 5.051679491628511, "time": 14.306322, "time_per_token": 0.14164675247524752}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain strings only.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " strings", " only", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -2.154073476791382, -0.1627633422613144, -0.21908123791217804, -0.00105408881790936, -0.00032276666024699807, -0.0009042703313753009], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)  # If the list contains a single element, return np.nan", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "  ", "#", " If", " the", " list", " contains", " a", " single", " element", ",", " return", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -0.24453015625476837, -0.5771498084068298, -0.005320792552083731, -0.004695461131632328, -0.05118856951594353, -1.8954096958623268e-05, -0.1320587694644928, -0.0017171651124954224, -0.002514773979783058, -0.0009442876325920224, -2.086888551712036, -0.0003212174342479557, -2.8476176261901855, -0.9052112102508545, -0.06262858211994171, -1.3087069988250732, -0.10852399468421936, -0.0005566716426983476, -0.10868889838457108, -0.36960846185684204, -0.3446940779685974, -0.9575955271720886, -3.0040289857424796e-05, -0.002262653084471822, -0.0434114895761013], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9232190251350403, -3.516612196108326e-05, -1.3828182090946939e-05, -0.3968736231327057, -0.0318477489054203, -2.2649508537142538e-05, -0.03349925950169563, -0.0031177031341940165], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2729519009590149, -0.010918516665697098, -0.2925100326538086, -1.0728830375228426e-06, -6.913899414939806e-05, -0.09733676165342331, -0.004442702513188124], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.397638201713562, -0.30032941699028015, -0.4677673876285553, -0.00039760314393788576, -0.00904970895498991, -0.00011586471373448148], "finish_reason": "stop"}, {"text": " avg_scores<|endoftext|>from math import factorial", "tokens": [" av", "g", "_", "scores", "<", "|", "end", "of", "text", "|>", "from", " math", " import", " factor", "ial", "\n"], "logprobs": [-0.02053816244006157, -5.483612312673358e-06, -4.291525328881107e-06, -9.321732068201527e-05, -1.7280607223510742, -2.50339189733495e-06, -2.0265558760002023e-06, -4.6491513785440475e-06, -8.046303264563903e-05, -0.25584447383880615, -2.008002281188965, -3.4082770347595215, -0.014473452232778072, -2.9067301750183105, -9.77468371274881e-05, -0.18861320614814758], "finish_reason": "stop"}], "metrics": {"energy": 588.443518892288, "energy_per_token": 4.745512249131355, "time": 16.400654, "time_per_token": 0.1322633387096774}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError('All elements in the list must be strings')", "tokens": [" Value", "Error", "('", "All", " elements", " in", " the", " list", " must", " be", " strings", "')", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -2.068939447402954, -3.0820860862731934, -0.508100152015686, -0.5489447116851807, -0.44476860761642456, -0.2414814829826355, -0.22983981668949127, -0.0002903516869992018, -0.03349556773900986, -0.46619752049446106, -0.0010729038622230291], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.1668667048215866, -0.01386275514960289], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.7945261597633362, -0.0035151378251612186, -7.867782187531702e-06, -2.50339189733495e-06, -0.0028666851576417685, -0.004752174485474825], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.5091648101806641, -0.005021816119551659], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10626716911792755, -2.4914430468925275e-05, -0.642234206199646, -0.0023382960353046656, -0.0032958255615085363, -0.002579102059826255, -0.04432366043329239, -0.03426040709018707, -0.0013404440833255649, -0.10551300644874573, -9.059495641849935e-05, -0.008289100602269173, -0.15723711252212524], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003494605771265924, -0.0007088055717758834, -0.03045996092259884, -6.079655122448457e-06, -0.0001793938863556832, -0.03948909044265747, -0.006361117586493492], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-1.007239818572998, -3.528532761265524e-05, -1.2993727978027891e-05, -0.49135929346084595, -0.023719949647784233, -1.8596476365928538e-05, -0.033783964812755585, -0.003942337818443775], "finish_reason": "stop"}, {"text": "plot(range(1, len(s_list) + 1), avg_scores)", "tokens": ["plot", "(", "range", "(", "1", ",", " len", "(", "s", "_", "list", ")", " +", " ", "1", ")", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.20557352900505066, -0.011499431915581226, -1.666618824005127, -9.226373367710039e-05, -1.2480155229568481, -0.0012022180017083883, -0.031690001487731934, -5.578839045483619e-05, -0.47779977321624756, -0.00037865620106458664, -2.8967437174287625e-05, -0.36467212438583374, -0.0020404488313943148, -0.0006599632324650884, -7.760223525110632e-05, -0.00020990552729927003, -0.0002097863471135497, -0.005694239400327206, -4.529942543740617e-06, -8.344646857949556e-07, -3.4450891689630225e-05, -0.4185996651649475, -0.020244287326931953], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.3367680609226227, -0.28913605213165283, -0.46200498938560486, -0.0003293210465926677, -0.007891666144132614, -0.0001578206429257989], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.027963917702436447, -7.748573807475623e-06, -4.410734163684538e-06, -0.00015376816736534238, -0.40097883343696594], "finish_reason": "stop"}], "metrics": {"energy": 557.165279970169, "energy_per_token": 4.930666194426274, "time": 15.3546295, "time_per_token": 0.13588167699115045}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain strings only.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " strings", " only", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -2.154073476791382, -0.1627633422613144, -0.21908123791217804, -0.00105408881790936, -0.00032276666024699807, -0.0009042703313753009], "finish_reason": "stop"}, {"text": " np.nan  # initialize the output variable", "tokens": [" np", ".", "nan", "  ", "#", " initialize", " the", " output", " variable", "\n"], "logprobs": [-3.0588226318359375, -5.6980417866725475e-05, -1.23662269115448, -1.236659049987793, -0.0009899006690829992, -1.8534821271896362, -2.178741455078125, -2.3852741718292236, -1.5045394897460938, -0.3424474895000458], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -0.24453015625476837, -0.5771498084068298, -0.005320792552083731, -0.004695461131632328, -0.05118856951594353, -1.8954096958623268e-05, -0.1320587694644928, -0.0017171651124954224, -0.002514773979783058, -0.0009442876325920224, -0.15265393257141113], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9232190251350403, -3.516612196108326e-05, -1.3828182090946939e-05, -0.3968736231327057, -0.0318477489054203, -2.2649508537142538e-05, -0.03349925950169563, -0.0031177031341940165], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2729519009590149, -0.010918516665697098, -0.2925100326538086, -1.0728830375228426e-06, -6.913899414939806e-05, -0.09733676165342331, -0.004442702513188124], "finish_reason": "stop"}, {"text": "xticks(rotation=45, ha='right')", "tokens": ["xt", "icks", "(", "rotation", "=", "4", "5", ",", " ha", "='", "right", "')", "\n"], "logprobs": [-1.8004282712936401, -2.5629668016335927e-05, -0.0009257083875127137, -0.022986384108662605, -0.03386486694216728, -0.4340042471885681, -0.006410274654626846, -0.6328912377357483, -0.002639859216287732, -0.04283694550395012, -0.0005082983989268541, -0.010296912863850594, -0.008361097425222397], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02053816244006157, -5.483612312673358e-06, -4.291525328881107e-06, -9.321732068201527e-05, -0.3711157441139221], "finish_reason": "stop"}], "metrics": {"energy": 554.2108864574434, "energy_per_token": 4.8614990040126616, "time": 15.561721, "time_per_token": 0.13650632456140352}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -1.108404278755188, -0.0004654039512388408, -0.0009504806366749108], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.47960391640663147, -0.005680608097463846], "finish_reason": "stop"}, {"text": " np.nan if scores == [] else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " scores", " ==", " []", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.106516033411026, -2.610649426060263e-05, -0.9068191647529602, -0.31484779715538025, -3.5290164947509766, -0.15005755424499512, -0.014105386100709438, -0.006747674662619829, -0.053204841911792755, -3.480850500636734e-05, -0.22028377652168274, -0.003357727313414216, -0.005203157663345337, -0.0008886678842827678, -0.1310354620218277], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003475538978818804, -0.0007531190640293062, -0.02796565741300583, -4.291525328881107e-06, -0.00016246906307060272, -0.03687121346592903, -0.006337308324873447], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.6090877652168274, -0.0002506657037883997, -0.6890340447425842, -0.00012182447244413197, -6.794906312279636e-06, -0.005239445716142654, -0.22529654204845428, -0.0010043105576187372, -0.00932693388313055, -0.04186854138970375, -0.04389568790793419], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.24169185757637024, -0.00887792557477951, -0.304325133562088, -8.344646857949556e-07, -7.712543447269127e-05, -0.1040700152516365, -0.0035435284953564405], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.4642794132232666, -0.26224759221076965, -0.4129478633403778, -0.00025197668583132327, -0.008334143087267876, -0.00014673586701974273], "finish_reason": "stop"}, {"text": " avg_scores<|endoftext|>\"\"\"", "tokens": [" av", "g", "_", "scores", "<", "|", "end", "of", "text", "|", ">\"", "\"", "\"", "\n"], "logprobs": [-0.025798356160521507, -1.1444026313256472e-05, -5.960446742392378e-06, -0.00016556799528189003, -1.6411100625991821, -2.9802276912960224e-06, -2.0265558760002023e-06, -5.602820692729438e-06, -0.00015376816736534238, -1.5248843431472778, -0.0034230705350637436, -0.004866422154009342, -0.0004198861715849489, -0.38747426867485046], "finish_reason": "stop"}], "metrics": {"energy": 597.0236730403902, "energy_per_token": 5.330568509289199, "time": 15.742394, "time_per_token": 0.14055708928571428}}
{"outputs": [{"text": " not isinstance(s_list, list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -2.6035094261169434, -0.00958932377398014], "finish_reason": "stop"}, {"text": " ValueError(\"s_list must be a list of strings\")", "tokens": [" Value", "Error", "(", "\"", "s", "_", "list", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -1.646345615386963, -0.0006789048202335835, -0.0005942009738646448, -0.15696662664413452, -0.12141449004411697, -0.006512844935059547, -0.0013936578761786222, -0.0023283057380467653, -0.0045359814539551735, -0.5568774938583374, -0.0002892790944315493, -0.001434488920494914], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.nanmean(scores) if scores else np.nan", "tokens": [" np", ".", "nan", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.752579391002655, -1.5764622688293457, -0.0049795894883573055, -0.02541828155517578, -0.0019795361440628767, -0.18206645548343658, -0.2452591359615326, -0.006427567917853594, -0.03389909118413925, -5.125868119648658e-05, -0.006679114419966936, -0.11059730499982834], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00041309406515210867, -0.0006005152827128768, -0.031760793179273605, -4.6491513785440475e-06, -0.00017081231635529548, -0.045991942286491394, -0.006926099304109812], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9232190251350403, -3.516612196108326e-05, -1.3828182090946939e-05, -0.3968736231327057, -0.0318477489054203, -2.2649508537142538e-05, -0.03349925950169563, -0.0031177031341940165], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2729519009590149, -0.010918516665697098, -0.2925100326538086, -1.0728830375228426e-06, -6.913899414939806e-05, -0.09733676165342331, -0.004442702513188124], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.397638201713562, -0.30032941699028015, -0.4677673876285553, -0.00039760314393788576, -0.00904970895498991, -0.00011586471373448148], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02053816244006157, -5.483612312673358e-06, -4.291525328881107e-06, -9.321732068201527e-05, -0.3711157441139221], "finish_reason": "stop"}], "metrics": {"energy": 435.56244334888464, "energy_per_token": 5.247740281311863, "time": 12.83404, "time_per_token": 0.15462698795180724}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must be a list of strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " be", " a", " list", " of", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -1.3726190328598022, -0.1157839372754097, -0.0031484817154705524, -0.0008122005965560675, -0.0040494357235729694, -0.5220074653625488, -0.0015137653099372983, -0.0003797286772169173, -0.0008255410939455032], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, other_s).ratio() for other_s in s_list if other_s != s]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " other", "_", "s", ")", ".", "ratio", "()", " for", " other", "_", "s", " in", " s", "_", "list", " if", " other", "_", "s", " ", "!", "=", " s", "]", "\n"], "logprobs": [-1.1425658464431763, -0.0911283865571022, -4.410734163684538e-06, -7.510157047363464e-06, -0.00019226610311307013, -0.2506500482559204, -6.115249561844394e-05, -0.009456838481128216, -0.014664600603282452, -1.1211129426956177, -1.75374174118042, -0.11534926295280457, -0.0066908374428749084, -0.0005889588501304388, -0.00012420836719684303, -0.00042226933874189854, -0.08587484806776047, -0.002566141774877906, -2.50339189733495e-06, -9.298280929215252e-06, -0.0008054111385717988, -0.006599772721529007, -1.9430925021879375e-05, -1.4305104514278355e-06, -0.5335394740104675, -0.646390974521637, -1.680836794548668e-05, -7.045020902296528e-05, -0.019861159846186638, 0.0, -8.106198947643861e-06, -0.0006114759016782045, -0.0024525821208953857, -0.013178745284676552], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.10654239356517792, -3.2543604902457446e-05, -0.8901243209838867, -0.26948267221450806, -0.5904833674430847, -0.0071473391726613045, -0.004973065573722124, -0.057242002338171005, -2.2053474822314456e-05, -0.15891525149345398, -0.0015744682168588042, -0.002518935827538371, -0.0009371418273076415, -0.1523532271385193], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0003071551618631929, -0.0007787294453009963, -0.033151738345623016, -4.6491513785440475e-06, -0.00019202772818971425, -0.029923047870397568, -0.005471966695040464], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5730001926422119, -0.0002277830062666908, -0.8109246492385864, -0.00013624693383462727, -6.556489552167477e-06, -0.005507059395313263, -0.2029123455286026, -0.0010161004029214382, -0.011387943290174007, -0.044917408376932144, -0.04936442896723747], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2732837498188019, -0.00802199449390173, -0.29128915071487427, -7.152555099310121e-07, -5.9960475482512265e-05, -0.10672401636838913, -0.004716106224805117], "finish_reason": "stop"}, {"text": "title('Average Similarity Score')", "tokens": ["title", "('", "Average", " Similar", "ity", " Score", "')", "\n"], "logprobs": [-2.3955883979797363, -1.0125298500061035, -0.14732202887535095, -0.16007275879383087, -0.006145508959889412, -1.916951060295105, -0.41336363554000854, -0.00016509123088326305], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.0272920411080122, -5.602820692729438e-06, -4.0531076592742465e-06, -0.00011717586312443018, -0.40790995955467224], "finish_reason": "stop"}], "metrics": {"energy": 604.338469587326, "energy_per_token": 4.34775877400954, "time": 15.989609, "time_per_token": 0.11503315827338129}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(s, str) for s in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "s", ",", " str", ")", " for", " s", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -0.33337223529815674, -0.000649956171400845, -0.003112830687314272, -2.777537883957848e-05, -0.002236961852759123, -7.354942499659956e-05, -2.407998726994265e-05, -0.00042703570215962827, -2.9802276912960224e-06, -4.768370445162873e-07, -0.0034765300806611776, -0.0015531631652265787], "finish_reason": "stop"}, {"text": " ValueError(\"Input must be a list of strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " must", " be", " a", " list", " of", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -1.8340984582901, -0.00342996115796268, -0.010104337707161903, -0.001462343498133123, -0.00212395959533751, -0.0035979317035526037, -0.8663548827171326, -0.00047994061606004834, -0.001505433232523501], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": "1 in s_list:", "tokens": ["1", " in", " s", "_", "list", ":", "\n"], "logprobs": [-0.6278602480888367, -0.010284877382218838, -0.003228810615837574, -1.4662635294371285e-05, -3.4570634852570947e-06, -0.0026834928430616856, -0.005500538740307093], "finish_reason": "stop"}, {"text": " [SequenceMatcher(None, s, ss).ratio() for ss in s_list]", "tokens": [" [", "Sequence", "Mat", "cher", "(", "None", ",", " s", ",", " ss", ")", ".", "ratio", "()", " for", " ss", " in", " s", "_", "list", "]", "\n"], "logprobs": [-1.1425658464431763, -0.0911283865571022, -4.410734163684538e-06, -7.510157047363464e-06, -0.00019226610311307013, -0.2506500482559204, -6.115249561844394e-05, -0.009456838481128216, -0.014664600603282452, -2.942002296447754, -0.011133451946079731, -0.00044764988706447184, -8.809178689261898e-05, -0.0001811817055568099, -0.041216928511857986, -0.006854236125946045, -0.0002109781780745834, -0.0036620714236050844, -3.576214658096433e-05, -1.0728830375228426e-06, -1.1603641510009766, -0.008627403527498245], "finish_reason": "stop"}, {"text": " np.nan if len(scores) == 0 else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " len", "(", "scores", ")", " ==", " ", "0", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.1343286633491516, -2.825220326485578e-05, -0.873177707195282, -0.22484031319618225, -1.0394864082336426, -0.00042965717148035765, -0.22860583662986755, -0.0004848258395213634, -0.03577912598848343, -0.0009726322605274618, -0.0053063263185322285, -0.0018289043800905347, -0.03985881432890892, -2.3841574147809297e-05, -0.20136430859565735, -0.0017007424030452967, -0.0037557794712483883, -0.000785161682870239, -0.07737822830677032], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00036816971260122955, -0.0006221981020644307, -0.035055968910455704, -5.006777428206988e-06, -0.00018249277491122484, -0.045534610748291016, -0.004975912161171436], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9852834343910217, -3.0278701160568744e-05, -1.4185804502631072e-05, -0.4812910258769989, -0.026052046567201614, -2.2291887944447808e-05, -0.029297636821866035, -0.002756607485935092], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2285047322511673, -0.009171617217361927, -0.3474251627922058, -9.536738616588991e-07, -8.332382276421413e-05, -0.12383650988340378, -0.004403300117701292], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.4524702727794647, -0.2515980899333954, -0.4642934203147888, -0.0004400238685775548, -0.009457075037062168, -0.0001264730526600033], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02494400180876255, -5.364403477869928e-06, -3.4570634852570947e-06, -0.0001358893496217206, -0.39063048362731934], "finish_reason": "stop"}], "metrics": {"energy": 585.778740354538, "energy_per_token": 4.686229922836303, "time": 15.354742, "time_per_token": 0.122837936}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(item, str) for item in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "item", ",", " str", ")", " for", " item", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.486856460571289, -0.00012957210128661245, -0.005048740655183792, -4.756337511935271e-05, -0.002988042077049613, -9.643566590966657e-05, -4.8040190449682996e-05, -0.00030357998912222683, -2.145764938177308e-06, -1.1920928244535389e-07, -0.00427202507853508, -0.0013827058719471097], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -1.108404278755188, -0.0004654039512388408, -0.0009504806366749108], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.3988770842552185, -0.005018139258027077], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.7052962183952332, -0.00265733664855361, -0.0027323553804308176, -0.0029989767353981733, -0.049009665846824646, -0.04590655118227005, -0.0012836558744311333, -0.11382456123828888, -0.00016115797916427255, -0.00761392479762435, -0.16032707691192627], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004592079494614154, -0.0006425699684768915, -0.03467835858464241, -4.768360213347478e-06, -0.0002554328821133822, -0.03837898001074791, -0.00771980220451951], "finish_reason": "stop"}, {"text": " len(s_list) == 1:", "tokens": [" len", "(", "s", "_", "list", ")", " ==", " ", "1", ":", "\n"], "logprobs": [-0.5371972918510437, -0.00020728347590193152, -0.7128353118896484, -0.00010394509445177391, -6.318072337307967e-06, -0.0066696410067379475, -0.18616822361946106, -0.0010992205934599042, -0.008820027112960815, -0.0399489626288414, -0.059729114174842834], "finish_reason": "stop"}, {"text": "plot(range(len(avg_scores)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "avg", "_", "scores", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.23573888838291168, -0.007268769200891256, -2.0154850482940674, -9.786603914108127e-05, -0.23547649383544922, -3.7431014789035544e-05, -1.4786992073059082, -1.2874520507466514e-05, -0.0001573438785271719, -0.0016021999763324857, -0.00038818930624984205, -0.00819557998329401, -5.483612312673358e-06, -8.344646857949556e-07, -3.9457496313843876e-05, -0.21307891607284546, -0.006460139527916908], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.3510766625404358, -0.31915366649627686, -0.4766439199447632, -0.0003146630187984556, -0.008595847524702549, -0.00012206286191940308], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.020159121602773666, -5.245195097813848e-06, -5.125986263010418e-06, -0.00012706902634818107, -0.34550172090530396], "finish_reason": "stop"}], "metrics": {"energy": 533.2002842483519, "energy_per_token": 4.847275311348653, "time": 14.913777, "time_per_token": 0.13557979090909092}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(x, str) for x in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "x", ",", " str", ")", " for", " x", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.3435840606689453, -0.00036173476837575436, -0.007908105850219727, -3.635817120084539e-05, -0.0028795229736715555, -7.235741941258311e-05, -4.577531944960356e-05, -0.0006711614551022649, -2.861018856492592e-06, 0.0, -0.005193077493458986, -0.0021401375997811556], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -0.4173413813114166, -0.0007347744540311396, -0.0003829461056739092, -0.001001690630801022], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " np.array([SequenceMatcher(a=s, b=other).ratio() for other in s_list if other != s])", "tokens": [" np", ".", "array", "([", "Sequence", "Mat", "cher", "(", "a", "=", "s", ",", " b", "=", "other", ")", ".", "ratio", "()", " for", " other", " in", " s", "_", "list", " if", " other", " ", "!", "=", " s", "])", "\n"], "logprobs": [-3.325594902038574, -0.00043096792069263756, -0.20019781589508057, -0.23403619229793549, -0.03197498992085457, -8.34461570775602e-06, -6.9141146923357155e-06, -0.0003381395654287189, -1.3162505626678467, -0.005307274870574474, -0.007740621455013752, -0.013005433604121208, -0.008097557350993156, -0.0006805725861340761, -1.6346628665924072, -0.15595871210098267, -0.0007986216805875301, -6.4490144723095e-05, -0.0009332115878351033, -0.06657252460718155, -0.017515970394015312, -0.0005585778853856027, -0.006976056843996048, -2.6225699912174605e-05, -5.960446742392378e-06, -0.44332656264305115, -0.5396856665611267, -0.02423728071153164, -5.483612312673358e-06, -4.768360213347478e-06, -0.0011243456974625587, -0.06710204482078552, -0.02180612087249756], "finish_reason": "stop"}, {"text": " np.mean(scores) if scores else np.nan", "tokens": [" np", ".", "mean", "(", "scores", ")", " if", " scores", " else", " np", ".", "nan", "\n"], "logprobs": [-0.10719630122184753, -2.5152843591058627e-05, -0.7052962183952332, -0.00265733664855361, -0.0027323553804308176, -0.0029989767353981733, -0.049009665846824646, -0.04590655118227005, -0.0012836558744311333, -0.11382456123828888, -0.00016115797916427255, -0.00761392479762435, -0.16032707691192627], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.0004592079494614154, -0.0006425699684768915, -0.03467835858464241, -4.768360213347478e-06, -0.0002554328821133822, -0.03837898001074791, -0.00771980220451951], "finish_reason": "stop"}, {"text": " len(avg_scores) > 1:", "tokens": [" len", "(", "avg", "_", "scores", ")", " >", " ", "1", ":", "\n"], "logprobs": [-0.5371972918510437, -0.00020728347590193152, -0.6783275604248047, -5.960462772236497e-07, -7.807903602952138e-05, -0.005450862925499678, -2.829296112060547, -0.0017395378090441227, -0.04749489575624466, -0.06469759345054626, -0.04190009459853172], "finish_reason": "stop"}, {"text": "plot(range(len(avg_scores)), avg_scores)", "tokens": ["plot", "(", "range", "(", "len", "(", "avg", "_", "scores", "))", ",", " av", "g", "_", "scores", ")", "\n"], "logprobs": [-0.23573888838291168, -0.007268769200891256, -2.0154850482940674, -9.786603914108127e-05, -0.23547649383544922, -3.7431014789035544e-05, -1.4786992073059082, -1.2874520507466514e-05, -0.0001573438785271719, -0.0016021999763324857, -0.00038818930624984205, -0.00819557998329401, -5.483612312673358e-06, -8.344646857949556e-07, -3.9457496313843876e-05, -0.21307891607284546, -0.006460139527916908], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.3510766625404358, -0.31915366649627686, -0.4766439199447632, -0.0003146630187984556, -0.008595847524702549, -0.00012206286191940308], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.020159121602773666, -5.245195097813848e-06, -5.125986263010418e-06, -0.00012706902634818107, -0.34550172090530396], "finish_reason": "stop"}], "metrics": {"energy": 640.6609545173643, "energy_per_token": 4.51169686279834, "time": 17.861134, "time_per_token": 0.1257826338028169}}
{"outputs": [{"text": " not isinstance(s_list, list) or not all(isinstance(x, str) for x in s_list):", "tokens": [" not", " isinstance", "(", "s", "_", "list", ",", " list", ")", " or", " not", " all", "(", "is", "instance", "(", "x", ",", " str", ")", " for", " x", " in", " s", "_", "list", "):", "\n"], "logprobs": [-0.06768376380205154, -0.1504342257976532, -4.327203714638017e-05, -0.0030903699807822704, -3.421248038648628e-05, -7.271740287251305e-06, -0.0012971091782674193, -0.014414937235414982, -0.07705456763505936, -0.011802133172750473, -0.07079610228538513, -0.0077280825935304165, -0.03636624291539192, -0.06999414414167404, -5.960446742392378e-06, -0.0008501967531628907, -2.3435840606689453, -0.00036173476837575436, -0.007908105850219727, -3.635817120084539e-05, -0.0028795229736715555, -7.235741941258311e-05, -4.577531944960356e-05, -0.0006711614551022649, -2.861018856492592e-06, 0.0, -0.005193077493458986, -0.0021401375997811556], "finish_reason": "stop"}, {"text": " ValueError(\"Input list must contain only strings.\")", "tokens": [" Value", "Error", "(", "\"", "Input", " list", " must", " contain", " only", " strings", ".", "\"", ")", "\n"], "logprobs": [-0.005831609014421701, -2.0265558760002023e-06, -0.14220066368579865, -0.02880307286977768, -0.4097237288951874, -0.27919355034828186, -0.2813730835914612, -0.33616581559181213, -0.13492371141910553, -0.010767928324639797, -0.4173413813114166, -0.0007347744540311396, -0.0003829461056739092, -0.001001690630801022], "finish_reason": "stop"}, {"text": " []", "tokens": [" []", "\n"], "logprobs": [-0.15202520787715912, -0.014313997700810432], "finish_reason": "stop"}, {"text": " in s_list:", "tokens": [" in", " s", "_", "list", ":", "\n"], "logprobs": [-0.8201095461845398, -0.0037130240816622972, -7.867782187531702e-06, -4.0531076592742465e-06, -0.0028942623175680637, -0.004748733714222908], "finish_reason": "stop"}, {"text": " [", "tokens": [" [", "\n"], "logprobs": [-1.311812400817871, -2.9309096336364746], "finish_reason": "stop"}, {"text": " np.nan if not scores else np.mean(scores)", "tokens": [" np", ".", "nan", " if", " not", " scores", " else", " np", ".", "mean", "(", "scores", ")", "\n"], "logprobs": [-0.10645977407693863, -3.302042750874534e-05, -0.7915583252906799, -0.23897455632686615, -0.6358221173286438, -0.007971852086484432, -0.003996125888079405, -0.04795610159635544, -1.7404405298293568e-05, -0.15794400870800018, -0.00215143826790154, -0.0032947564031928778, -0.0009346407605335116, -0.16778305172920227], "finish_reason": "stop"}, {"text": "append(avg_score)", "tokens": ["append", "(", "avg", "_", "score", ")", "\n"], "logprobs": [-0.00039593485416844487, -0.0007846852531656623, -0.028346039354801178, -5.245195097813848e-06, -0.00015031162183731794, -0.031775690615177155, -0.005881503224372864], "finish_reason": "stop"}, {"text": " plot_path is not None:", "tokens": [" plot", "_", "path", " is", " not", " None", ":", "\n"], "logprobs": [-0.9046406745910645, -3.218599158572033e-05, -1.2397689715726301e-05, -0.41623884439468384, -0.028092004358768463, -1.966933996300213e-05, -0.035714827477931976, -0.002893905621021986], "finish_reason": "stop"}, {"text": "plot(avg_scores)", "tokens": ["plot", "(", "avg", "_", "scores", ")", "\n"], "logprobs": [-0.2898654639720917, -0.009429560042917728, -0.3032825291156769, -1.0728830375228426e-06, -7.295342220459133e-05, -0.12483048439025879, -0.003498744685202837], "finish_reason": "stop"}, {"text": "xlabel('Strings')", "tokens": ["xlabel", "('", "Str", "ings", "')", "\n"], "logprobs": [-0.4064761996269226, -0.2713830769062042, -0.44246065616607666, -0.00040463366894982755, -0.008647613227367401, -0.00013136000779923052], "finish_reason": "stop"}, {"text": " avg_scores", "tokens": [" av", "g", "_", "scores", "\n"], "logprobs": [-0.02557702176272869, -5.8412379075889476e-06, -4.768360213347478e-06, -0.00015889335190877318, -0.3873499035835266], "finish_reason": "stop"}], "metrics": {"energy": 498.5312753715516, "energy_per_token": 5.035669448197491, "time": 14.289043, "time_per_token": 0.14433376767676767}}
