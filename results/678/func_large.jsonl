{"outputs": [{"text": "if not os.path.exists(path):\n        os.mkdir(path)\n    if not os.path.exists(os.path.join(path, \"processed\")):\n        os.mkdir(os.path.join(path, \"processed\"))\n    files = sorted(os.listdir(path))\n    df = pd.DataFrame()\n    for filename in files:\n        with open(os.path.join(path, filename), 'r') as f:\n            data = json.load(f)\n        df = pd.concat([df, pd.DataFrame(data, columns=['a', 'b'])], ignore_index=True)\n        df.insert(len(df.columns), 'source', filename)\n        shutil.move(os.path.join(path, filename), os.path.join(path, 'processed', filename))\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "path", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", ":", "\n", "        ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", "\n", "    ", "files", " =", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "a", "'", ",", " '", "b", "']", ")]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "        ", "df", ".", "insert", "(", "len", "(", "df", ".", "columns", ")", ",", " '", "source", "'", ",", " filename", ")", "\n", "        ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " filename", "))", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.6890628337860107, -0.059431370347738266, -0.004645626526325941, -3.099436753473128e-06, -0.0012830605264753103, -3.683499380713329e-05, -0.049870364367961884, -0.006233653519302607, -0.06764543801546097, -0.014070241712033749, -0.009835472330451012, -0.004404130857437849, -0.5033858418464661, -3.373566141817719e-05, -0.915311872959137, -2.8609820219571702e-05, -0.00112255965359509, -0.0012705596163868904, -0.0005750194541178644, -0.008162000216543674, -0.3728174567222595, -1.6738460063934326, -0.043110672384500504, -0.0032113431952893734, -2.622600959512056e-06, -0.0047689033672213554, -1.4781842764932662e-05, -0.09314681589603424, -0.02480027824640274, -0.2901025414466858, -4.0531076592742465e-06, -0.00011181206355104223, -2.0265558760002023e-06, -0.0004686211177613586, -0.0021688053384423256, -0.0014277036534622312, -0.0014700806932523847, -0.868373453617096, -0.003916808404028416, -0.0010726656764745712, -5.876845170860179e-05, -0.0003262225945945829, -0.0012447236804291606, -0.0005918181850574911, -0.002048300579190254, -5.006777428206988e-06, -0.005323757417500019, -5.006777428206988e-06, -0.0007939761853776872, -0.007512059062719345, -5.483612312673358e-06, -4.6491513785440475e-06, -1.1920922133867862e-06, -9.190614218823612e-05, -6.627816765103489e-05, -0.00015555603022221476, -0.001190192298963666, -0.002698116237297654, -0.00043501926120370626, -3.7431014789035544e-05, -0.0001599660754436627, -0.001254724687896669, -0.20206505060195923, -1.3259341716766357, -0.0033568956423550844, -0.5452236533164978, -0.08192913234233856, -0.03932979330420494, -1.311301275563892e-06, -0.003186864545568824, -1.1920928244535389e-07, -4.589452510117553e-05, -0.0075972434133291245, -0.013710963539779186, -0.017123475670814514, -0.005421222187578678, -0.3077380061149597, -0.022677842527627945, -0.06002744287252426, -2.407998726994265e-05, -0.023913413286209106, -0.16755744814872742, -0.013921537436544895, -0.0030479426495730877, -0.022499525919556618, -2.9732563495635986, -0.00010239553375868127, -0.0027312852907925844, -0.001320324488915503, -0.0007172634359449148, -0.0006943913758732378, -1.048280954360962, -6.55629628454335e-05, -0.00033742457162588835, -0.009339570999145508, -1.0728830375228426e-06, -1.537788011773955e-05, -2.145764938177308e-06, -8.320462075062096e-05, -6.806619057897478e-05, -0.0001510267611593008, -8.201262971851975e-05, -0.003301885211840272, -0.3217005729675293, -4.756337511935271e-05, -1.912506103515625, -0.0012718691723421216, -0.00451640086248517, -1.8358061424805783e-05, -0.03739131987094879, -0.0010565895354375243, -0.0004183370911050588, -0.0009833505610004067, -0.14475126564502716, -0.0024070357903838158, -0.014449953101575375, -3.933898824470816e-06, -0.034109145402908325, -2.3364747903542593e-05, -0.000163541772053577, -0.00020072828920092434, -0.0008839037618599832, -0.686396062374115, -0.272903174161911, -0.43768560886383057, -0.6248952746391296, -1.2159273865108844e-05, -0.010550319217145443, -0.011117065325379372, -0.005619087256491184, -0.000592890428379178, -0.0019841762259602547, -1.9430925021879375e-05, -0.09369155019521713, -0.02836168371140957, -0.0012219827622175217, -2.597083568572998, -0.04083580523729324, -0.5337314605712891, -0.01756024733185768, -0.0010087168775498867, -2.777537883957848e-05, -0.016203029081225395, -0.00010871296399272978, -0.19417674839496613, -0.13124185800552368, -0.6615557074546814, -0.04746408760547638, -3.2186455882765586e-06, -1.4305104514278355e-06, -0.0020320022013038397, -0.0038100522942841053, -0.03639107197523117, -0.004928108304738998, -0.009709395468235016, -0.09682907164096832, -0.30138057470321655, -0.012840094976127148, -0.0004312062228564173, -1.0369658470153809, -1.9311717551317997e-05, -0.00010907054820563644, -0.0002540027489885688, -8.082063141046092e-05, -0.004220863804221153, -0.0011954312212765217, -0.43183332681655884, -0.12997426092624664, -0.00016973962192423642, -7.438383181579411e-05, -0.05943990498781204, -0.008504010736942291, -0.0045502218417823315, -0.03989306464791298, -1.0362462997436523, -1.9073468138230965e-06, -4.0531076592742465e-06, -0.0009709649602882564, -4.2914423829643056e-05, -0.0016815820708870888, -1.6689286894688848e-06, -4.541770613286644e-05, -6.556489552167477e-06, -1.8000440832111053e-05, -9.274052717955783e-05, -9.202533692587167e-05, -3.075552376685664e-05, -0.00041059168870560825, -0.00012599628826137632, -3.194758028257638e-05, -0.0030957176350057125, -9.059865078597795e-06, -3.2186455882765586e-06, -1.6689286894688848e-06, -2.4914430468925275e-05, -0.0011449456214904785, -0.002226256998255849, -0.00012754580529872328, -1.9615613222122192, -9.131014667218551e-05, -0.10667269676923752, -0.0004067785630468279, -0.0023859862703830004, -0.0005857420619577169, -0.0014056811342015862, -0.01112225279211998, -0.036446936428546906, -0.001214005402289331, -0.12836414575576782, -0.03859486058354378, -0.8924520015716553], "finish_reason": "stop"}], "metrics": {"energy": 942.8714045066831, "energy_per_token": 4.46858485548191, "time": 24.419342, "time_per_token": 0.11573147867298578}}
{"outputs": [{"text": "if not os.path.exists(path):\n        return None\n    # Loading all the files in a DataFrame\n    df = pd.DataFrame()\n    for file in sorted(os.listdir(path)):\n        if file.endswith(\".json\"):\n            with open(os.path.join(path, file)) as f:\n                data = json.load(f)\n                df_file = pd.DataFrame(data)\n                df_file[\"source\"] = file\n                df = pd.concat([df, df_file], ignore_index=True)\n    # Move the processed files to the \"processed\" subdirectory\n    if not os.path.exists(os.path.join(path, \"processed\")):\n        os.mkdir(os.path.join(path, \"processed\"))\n    for file in os.listdir(path):\n        if file.endswith(\".json\"):\n            shutil.move(os.path.join(path, file), os.path.join(path, \"processed\"))\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "return", " None", "\n", "    ", "#", " Load", "ing", " all", " the", " files", " in", " a", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", "))", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "df", "_", "file", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "                ", "df", "_", "file", "[", "\"", "source", "\"", "]", " =", " file", "\n", "                ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "file", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "#", " Move", " the", " processed", " files", " to", " the", " \"", "processed", "\"", " sub", "directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", ":", "\n", "        ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -2.268775463104248, -0.9969668388366699, -0.029919462278485298, -0.6609678268432617, -3.04325795173645, -3.4594995975494385, -3.594290256500244, -1.8832769393920898, -1.361601710319519, -1.4787375926971436, -0.7513933181762695, -0.9658525586128235, -2.3641157150268555, -0.08122111856937408, -0.314349889755249, -0.002910784212872386, -0.47808903455734253, -0.06892707943916321, -0.0821634829044342, -1.0371154530730564e-05, -0.10817870497703552, -0.11504032462835312, -0.004990739282220602, -0.0051416074857115746, -0.2514561712741852, -0.7830254435539246, -0.04557197168469429, -0.24162201583385468, -0.0009423820883966982, -0.0016302878502756357, -7.152555099310121e-07, -0.0006521005416288972, 0.0, -0.00012468514614738524, -0.0004956685588695109, -0.003941031638532877, -0.0005108005134388804, -0.005559103563427925, -0.001785947591997683, -0.47724902629852295, -0.09926575422286987, -0.0023826563265174627, -0.009281699545681477, -1.4185804502631072e-05, -4.768370445162873e-07, -0.9030390381813049, -0.0015625660307705402, -0.011609140783548355, -0.0010157431242987514, -1.2993727978027891e-05, -0.006955103483051062, -0.004308584611862898, -0.0010880271438509226, -0.4083595275878906, -9.476689592702314e-05, -0.000696654780767858, -0.02475876361131668, -2.622600959512056e-06, -1.8596476365928538e-05, -2.9802276912960224e-06, -0.00016830935783218592, -7.533743337262422e-05, -0.00021824838768225163, -8.940297266235575e-05, -0.008879224769771099, -1.6592079401016235, -0.00020823694649152458, -0.05472228303551674, -0.013669218868017197, -0.0021080193109810352, -0.0005378468777053058, -0.3728914260864258, -0.0031863891053944826, -0.027583854272961617, -8.4638240878121e-06, -0.01543305441737175, -2.4318398573086597e-05, -0.00012754580529872328, -0.0009267802815884352, -0.005097013432532549, -0.42121925950050354, -0.4596400856971741, -1.5292980670928955, -0.3559093773365021, -0.0010511117288842797, -0.0026075192727148533, -6.794906312279636e-06, -0.11897864937782288, -0.007588252425193787, -0.0015029336791485548, -0.058121632784605026, -0.04158430173993111, -0.010311543010175228, -0.06742047518491745, -0.020105376839637756, -0.00017689094238448888, -0.3725373446941376, -0.00033909291960299015, -0.492902547121048, -0.002435576869174838, -0.00017772526189219207, -6.246371776796877e-05, -0.08010711520910263, -0.0948052778840065, -0.002434268593788147, -0.005066532175987959, -0.0023112983908504248, -0.018258709460496902, -2.861018856492592e-06, -9.822363062994555e-05, -0.0011436357162892818, -5.352353764465079e-05, -0.0019909576512873173, -0.0016920547932386398, -0.00011264643399044871, -3.6954811548639555e-06, -0.6467500329017639, -3.6000557884108275e-05, -0.08888841420412064, -2.264974000354414e-06, -1.0728830375228426e-06, -0.0016544476384297013, -0.009061404503881931, -0.014017697423696518, -0.005128798540681601, -0.25276634097099304, -0.11728265881538391, -1.5322961807250977, -0.8634002208709717, -0.5331954956054688, -0.11348162591457367, -0.09622606635093689, -1.124107003211975, -0.3967772424221039, -0.006517937406897545, -0.005046131554991007, -0.40320608019828796, -0.028860172256827354, -0.034312356263399124, -0.0006694936309941113, -0.5147818326950073, -0.0224145520478487, -0.0011510183103382587, -1.7881377516459906e-06, -6.675497570540756e-05, -8.34461570775602e-06, -0.00631101056933403, -0.016138751059770584, -0.05316539108753204, -7.152555099310121e-07, -2.2291887944447808e-05, -4.887569048150908e-06, -7.629103492945433e-05, -0.0005775213940069079, -0.002526070224121213, -0.0008854520856402814, -0.04652610048651695, -0.003600069787353277, -0.000714523543138057, -5.98412734689191e-05, -0.0006654431927017868, -0.000454799213912338, -0.0018849477637559175, -0.0015456646215170622, -4.768370445162873e-07, -0.23267194628715515, -1.2993727978027891e-05, -0.00013553177996072918, -0.00029845553217455745, -9.536738616588991e-07, -1.5497195136049413e-06, -7.152555099310121e-07, -1.883488948806189e-05, -1.823885577323381e-05, -4.053033626405522e-05, -5.578839045483619e-05, -0.00026901919045485556, -5.757642793469131e-05, -1.4662635294371285e-05, -6.544376083184034e-05, -0.00018249277491122484, -0.00984751246869564, -0.026905803009867668, -0.015557708218693733, -0.00033909291960299015, -0.2902527451515198, -1.0728830375228426e-06, -0.00035589560866355896, 0.0, -3.969590397900902e-05, -0.0007320346776396036, -0.00068926892708987, -9.095255518332124e-05, -0.00027295202016830444, -0.008030153810977936, -0.0046449145302176476, -0.0025274972431361675, -0.000592890428379178, -8.344646857949556e-07, 0.0, -0.001807366730645299, -0.00010311071673640981, -0.0008350699208676815, -0.0011295850854367018, -8.4638240878121e-06, -0.013331441208720207, -0.00014065706636756659, -0.00033063191222026944, -0.34432393312454224, -1.311301275563892e-06, -1.311301275563892e-06, -0.00023457636416424066, -1.8715683836489916e-05, -0.06324581056833267, -1.7881377516459906e-06, -1.9788545614574105e-05, -8.4638240878121e-06, -1.823885577323381e-05, -1.490105023549404e-05, -0.00011657988943625242, -3.266281055402942e-05, -0.00051771110156551, -0.00012778419477399439, -1.823885577323381e-05, -0.016401000320911407, -7.152555099310121e-07, -1.7881377516459906e-06, -6.198863957251888e-06, -1.0490362910786644e-05, -2.1219027985353023e-05, -0.0003488647344056517, -5.8410845667822286e-05, -0.0012847273610532284, -2.7894584491150454e-05, -0.00010322991875000298, -0.9483058452606201, -0.0018317601643502712, -0.03876689076423645, -0.06038336828351021, -0.001369253732264042, -0.14127929508686066, -0.054915256798267365, -1.297160267829895], "finish_reason": "stop"}], "metrics": {"energy": 896.0871940670017, "energy_per_token": 3.5140674277137323, "time": 21.852358, "time_per_token": 0.08569552156862745}}
{"outputs": [{"text": "# Check if the directory exists. If not, create it.\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n    # List all files in the directory\n    files = os.listdir(path)\n\n    # Create a list to hold the processed DataFrames\n    dfs = []\n\n    # Loop through the files in alphabetical order\n    for file in sorted(files):\n        # Read the file as JSON\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n\n        # Convert JSON to DataFrame and add a \"Source\" column\n        df = pd.DataFrame(data)\n        df['Source'] = file\n\n        # Append the DataFrame to the list\n        dfs.append(df)\n\n    # Concatenate all DataFrames into a single DataFrame\n    df = pd.concat(dfs, ignore_index=True)\n\n    # Move the processed files to the \"processed\" directory\n    if not os.path.exists(os.path.join(", "tokens": ["#", " Check", " if", " the", " directory", " exists", ".", " If", " not", ",", " create", " it", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "#", " List", " all", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " to", " hold", " the", " processed", " Data", "F", "rames", "\n", "    ", "d", "fs", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " the", " files", " in", " alphabet", "ical", " order", "\n", "    ", "for", " file", " in", " sorted", "(", "files", "):", "\n", "        ", "#", " Read", " the", " file", " as", " JSON", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "        ", "#", " Convert", " JSON", " to", " Data", "Frame", " and", " add", " a", " \"", "Source", "\"", " column", "\n", "        ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "        ", "df", "['", "Source", "']", " =", " file", "\n", "\n", "        ", "#", " App", "end", " the", " Data", "Frame", " to", " the", " list", "\n", "        ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " all", " Data", "F", "rames", " into", " a", " single", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "#", " Move", " the", " processed", " files", " to", " the", " \"", "processed", "\"", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "("], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -1.2174828052520752, -0.13796231150627136, -2.3135881423950195, -0.6395338773727417, -0.37056979537010193, -0.003355826484039426, -0.183202862739563, -0.02501562424004078, -0.13560928404331207, -0.013610891997814178, -0.00044145373976789415, -0.03406559303402901, -0.0293510053306818, -0.0008151783840730786, -1.5497195136049413e-06, -0.00021669900161214173, -2.634490556374658e-05, -0.06059657037258148, -0.0018159341998398304, -0.004633286036550999, -0.001167211914435029, -0.0005883631529286504, -0.0029841200448572636, -0.017055857926607132, -8.702239938429557e-06, -0.3476138114929199, -6.794906312279636e-06, -1.5616295058862306e-05, -0.00019786784832831472, -0.0002416080387774855, -0.0027185645885765553, -0.001453415839932859, -0.2852686941623688, -0.0014180614380165935, -0.048891156911849976, -3.27001953125, -0.45858293771743774, -0.6926138997077942, -0.015840644016861916, -0.0036529258359223604, -0.021364198997616768, -1.2199786901474, -6.55629628454335e-05, -0.11048342287540436, -0.0018870895728468895, -0.18329575657844543, -9.536738616588991e-07, -5.769562994828448e-05, -1.1920928244535389e-07, -0.00011681827891152352, -0.00027700403006747365, -9.583967766957358e-05, -0.0001829695247579366, -0.0629497766494751, -0.00022623363474849612, -0.005047673359513283, -2.4951274394989014, -1.1746397018432617, -1.0947623252868652, -0.09580100327730179, -1.401861310005188, -0.31690385937690735, -1.509443759918213, -1.115943431854248, -0.005518677644431591, -2.0265558760002023e-06, -0.01258656196296215, -5.507317473529838e-05, -0.4325781464576721, -2.0265558760002023e-06, -0.0011317284079268575, -0.0006528153317049146, -7.486063259420916e-05, -0.008233296684920788, -0.00011932138295378536, -0.0114137539640069, -0.7263384461402893, -0.32743874192237854, -1.021109700202942, -0.05705071613192558, -1.545898199081421, -0.24998162686824799, -0.0008399534272029996, -0.00020013237372040749, -0.04577275365591049, -6.508615479106084e-05, -0.0044031813740730286, -0.38687095046043396, -0.09582971036434174, -0.003313291585072875, -0.0001961992384167388, -0.000961913785431534, -0.00499714445322752, -0.00025567124248482287, -0.00886031985282898, -0.1470358818769455, -2.000386953353882, -0.16087011992931366, -1.0772404670715332, -0.8262826800346375, -0.6925240159034729, -0.4748905897140503, -0.00023755589791107923, -0.055838532745838165, -4.8636207793606445e-05, -0.0007906410028226674, -0.020040998235344887, -1.5497195136049413e-06, -1.156323378381785e-05, -2.50339189733495e-06, -3.564294092939235e-05, -7.366862701019272e-05, -7.962863310240209e-05, -1.9550132492440753e-05, -0.0013463966315612197, -0.169510617852211, -2.586808113846928e-05, -0.12147340178489685, -0.0006829552003182471, -0.005676341243088245, -6.556489552167477e-06, -0.0045357439666986465, -0.0014106809394434094, -0.00019488819816615433, -0.0005440423847176135, -0.07049685716629028, -0.0013342535821720958, -0.003658745903521776, -3.3378546504536644e-06, -0.022794023156166077, -1.7046782886609435e-05, -8.201262971851975e-05, -0.00014888131408952177, -0.00031859567388892174, -0.22227056324481964, -0.019497644156217575, -0.0013705631718039513, -0.27768850326538086, -1.3469126224517822, -0.5754247903823853, -0.2274656891822815, -0.0014638908905908465, -1.6073992252349854, -0.6813055276870728, -0.3810798227787018, -0.31092578172683716, -0.17418453097343445, -4.339123915997334e-05, -0.0008406681008636951, -0.11583161354064941, -0.00013255194062367082, -0.006062570493668318, -0.008648086339235306, -0.0014985294546931982, -1.7881377516459906e-06, -0.08220355957746506, -0.013394135981798172, -0.0005187834613025188, -0.0465051643550396, -0.15857918560504913, -0.004157471936196089, -0.0033346780110150576, -0.11167414486408234, -0.8764746785163879, -3.0636318115284666e-05, -0.00011395759065635502, -0.04641503468155861, -0.007849679328501225, -0.017186518758535385, -0.0003334919747430831, -0.007935781031847, -0.2398836463689804, -2.0146166207268834e-05, -0.09320025146007538, -0.44913315773010254, -0.0007213136414065957, -0.0008312584250234067, -0.0013103241799399257, -0.0017902314430102706, -0.1457527130842209, -5.98412734689191e-05, -0.0004625442670658231, 0.0, -0.0002627027570270002, -3.480850500636734e-05, -0.00013600854435935616, -5.018585216021165e-05, -0.00021908267808612436, -5.4238757002167404e-05, -0.004643609281629324, -0.8643769025802612, -0.000701658078469336, -0.23548610508441925, -1.5139465176616795e-05, -8.582700684200972e-05, -1.4066597032069694e-05, -0.6072245240211487, -0.06998947262763977, -2.6940935640595853e-05, -1.1920928244535389e-07, -0.4725906252861023, -0.659295380115509, -0.000692961853928864, -0.08506298810243607, -0.00028880240279249847, -0.02813129499554634, -0.00047434045700356364, -0.020421253517270088, -0.018580785021185875, -7.581423415103927e-05, -5.960462772236497e-07, -1.4662635294371285e-05, -0.00039962888695299625, -7.295342220459133e-05, 0.0, -0.6157345771789551, -0.04945497214794159, -1.311301275563892e-06, -1.5258672647178173e-05, -0.001207814086228609, -0.0015538772568106651, -0.004058577585965395, -0.000604565953835845, -0.0043451422825455666, -0.0002790300059132278, -0.002009992953389883, -0.13084585964679718, -0.483808696269989, -0.24409709870815277, -0.029909860342741013, -0.011442039161920547, -1.1086652278900146, -0.03611941263079643, -0.002623451640829444, -0.004013104364275932, -1.656994342803955, -0.02471933886408806, -0.00013696208770852536, -0.43276214599609375, -0.006269193720072508, -0.00010954733443213627, -1.4305104514278355e-06, -2.0265373677830212e-05, -1.0609570381348021e-05, -0.0009723940747790039, -0.30292755365371704, -0.04032080993056297, -5.245195097813848e-06, -1.6331539882230572e-05, -1.168244216387393e-05, -5.173549288883805e-05, -0.0037859445437788963], "finish_reason": "length"}], "metrics": {"energy": 897.3432327194212, "energy_per_token": 3.505247002810239, "time": 21.883835, "time_per_token": 0.08548373046875}}
{"outputs": [{"text": "df = pd.DataFrame()\n    for filename in sorted(os.listdir(path)):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n            df = df.append(data, ignore_index=True)\n            df.insert(0, \"Source\", filename)\n            os.rename(os.path.join(path, filename), os.path.join(path, \"processed\", filename))\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", " =", " df", ".", "append", "(", "data", ",", " ignore", "_", "index", "=", "True", ")", "\n", "            ", "df", ".", "insert", "(", "0", ",", " \"", "Source", "\"", ",", " filename", ")", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ",", " filename", "))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.0573697090148926, -0.03956311568617821, -0.05590493232011795, -3.302042750874534e-05, -0.02079167403280735, -0.13418743014335632, -0.05813872814178467, -0.16239280998706818, -1.2396281957626343, -0.708370566368103, -0.00035494225448928773, -0.14989174902439117, -0.0017231153324246407, -0.002971877809613943, -3.576278118089249e-07, -0.0023746881633996964, -0.00015484087634831667, -0.0004408579843584448, -0.0036663473583757877, -0.0029157765675336123, -0.0004536076739896089, -0.007855711504817009, -0.005062499549239874, -0.781788170337677, -0.21127481758594513, -0.003581777447834611, -0.012470484711229801, -6.9141146923357155e-06, 0.0, -0.4625557065010071, -0.005077087786048651, -0.000806602300144732, -2.109982233378105e-05, -0.008727028965950012, -0.003671929705888033, -0.0012684165267273784, -0.2493184208869934, -0.00013624693383462727, -0.0013080621138215065, -0.020710641518235207, -6.6756979322235566e-06, -2.7656173188006505e-05, -1.9073468138230965e-06, -8.022463589441031e-05, -0.0001554368354845792, -0.00011276562872808427, -5.07818695041351e-05, -0.0039321258664131165, -0.2591133415699005, -0.00011586471373448148, -0.012094378471374512, -0.0017246623756363988, -0.00295048370026052, -7.510157047363464e-06, -0.049372598528862, -0.0018462770385667682, -0.0008422164828516543, -0.0005750194541178644, -0.2037266492843628, -0.003140638582408428, -0.018980661407113075, -5.8412379075889476e-06, -0.019643181934952736, -3.635817120084539e-05, -0.00010501786891836673, -0.0004544417606666684, -0.0015522110043093562, -0.5744587779045105, -0.5442196726799011, -0.20682382583618164, -1.1075265407562256, -9.119095193454996e-05, -0.008265573531389236, -0.0020574608352035284, -1.6184513568878174, -0.16816480457782745, -0.005177067592740059, -4.291525328881107e-06, -7.390948667307384e-06, -0.0035447163973003626, -0.0011951930355280638, -0.018162019550800323, -0.007262260187417269, -0.00727172801271081, -0.12988035380840302, -0.09506308287382126, -0.009627342224121094, -0.000985375139862299, -0.8670687079429626, -6.782778655178845e-05, -2.4362375736236572, -0.5419577360153198, -9.214453893946484e-05, -9.583967766957358e-05, -0.2199963480234146, -0.05010169744491577, -0.012843742966651917, -0.2493830770254135, -0.8734787702560425, -2.47952248173533e-05, -0.39993977546691895, -0.0009450022480450571, -0.027275685220956802, -4.410734163684538e-06, -7.414542778860778e-05, -7.152531907195225e-06, -7.295342220459133e-05, -0.0007619338575750589, -0.0007840896723791957, -0.00011979816190432757, -0.009139015339314938, -0.00020656836568377912, -0.00011431517486926168, -0.038230977952480316, -2.50339189733495e-06, -2.8132995794294402e-05, -5.960446742392378e-06, -0.00022218143567442894, -0.008693231269717216, -0.01383218728005886, -0.024848422035574913, -0.8346139788627625, -0.022288652136921883, -0.11090346425771713, -0.018627706915140152, -0.012585384771227837, -0.004501091782003641, -0.009828153997659683, -0.04065737500786781, -0.08028975129127502, -0.0017873755423352122, -0.22231417894363403, -0.04154747724533081, -1.006226897239685], "finish_reason": "stop"}], "metrics": {"energy": 472.43767028617856, "energy_per_token": 3.5256542558670043, "time": 11.354875, "time_per_token": 0.08473787313432836}}
{"outputs": [{"text": "# Initialize the DataFrame to store the processed data\n    df = pd.DataFrame()\n\n    # Create the \"processed\" subdirectory if it doesn't exist\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.mkdir(os.path.join(path, 'processed'))\n\n    # Read each JSON file in the directory, alphabetically\n    for filename in sorted(os.listdir(path)):\n        if filename.endswith('.json'):\n            filepath = os.path.join(path, filename)\n\n            # Read the JSON file into a DataFrame\n            with open(filepath) as f:\n                data = json.load(f)\n            df_current = pd.DataFrame(data)\n\n            # Add a \"Source\" column to the current DataFrame\n            df_current['Source'] = filename\n\n            # Append the current DataFrame to the main DataFrame\n            df = pd.concat([df, df_current], ignore_index=True)\n\n            # Move the processed file to the \"processed\" subdirectory\n            sh", "tokens": ["#", " Initialize", " the", " Data", "Frame", " to", " store", " the", " processed", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Create", " the", " \"", "processed", "\"", " sub", "directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "\n", "    ", "#", " Read", " each", " JSON", " file", " in", " the", " directory", ",", " alphabet", "ically", "\n", "    ", "for", " filename", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", "\n", "\n", "            ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", "\n", "            ", "with", " open", "(", "file", "path", ")", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", "_", "current", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "            ", "#", " Add", " a", " \"", "Source", "\"", " column", " to", " the", " current", " Data", "Frame", "\n", "            ", "df", "_", "current", "['", "Source", "']", " =", " filename", "\n", "\n", "            ", "#", " App", "end", " the", " current", " Data", "Frame", " to", " the", " main", " Data", "Frame", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "current", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "            ", "#", " Move", " the", " processed", " file", " to", " the", " \"", "processed", "\"", " sub", "directory", "\n", "            ", "sh"], "logprobs": [-0.9825034737586975, -2.4149580001831055, -2.1060938835144043, -0.2776956260204315, -0.001409133430570364, -1.4660727977752686, -0.8905088901519775, -0.07015252113342285, -1.1320292949676514, -0.14438390731811523, -0.09827800840139389, -0.0006703275139443576, -0.03226948156952858, -0.0069966549053788185, -0.04068530350923538, -1.823885577323381e-05, -0.0004020121123176068, -0.08311516046524048, -0.002867873990908265, -0.6120211482048035, -0.0003359945258125663, -0.023483483120799065, -0.9890933632850647, -0.2690681219100952, -0.4100981056690216, -0.005356720648705959, -0.0011133907828480005, -0.14405274391174316, -0.0010474200826138258, -0.06464418023824692, -0.003712073899805546, -0.12345390021800995, -0.00016020445036701858, -1.5497195136049413e-06, -0.04978065565228462, -0.026518022641539574, -9.810443589231e-05, -1.1794312000274658, -0.007474906742572784, -0.00046885941992513835, -3.576278118089249e-07, -0.00011228884250158444, -1.847726889536716e-05, -0.014139002189040184, -0.02668181248009205, -0.2830725908279419, -2.145764938177308e-06, -1.1444026313256472e-05, -1.5497195136049413e-06, -0.00019762947340495884, -0.0009371418273076415, -0.0005794276366941631, -0.0008481719414703548, -0.6432475447654724, -0.0011811431031674147, -0.0016845572972670197, -0.00011550712952157483, -0.00037496211007237434, -0.0013542537344619632, -0.0013363964390009642, -1.4305104514278355e-06, -0.5811024308204651, -1.0609570381348021e-05, -0.0006338732782751322, -0.00010334911348763853, -1.5497195136049413e-06, -1.1920928244535389e-07, -8.344646857949556e-07, -6.794906312279636e-06, -0.0001113352773245424, -7.271740287251305e-06, -9.238292841473594e-05, -0.00024005869636312127, -2.2172682292875834e-05, -2.3245540432981215e-05, -0.00018356545479036868, -0.01224429626017809, -0.0009744186536408961, -0.005292215384542942, -0.8866707682609558, -0.12387600541114807, -0.12822918593883514, -0.0003053675754927099, -1.3659230470657349, -0.1612781584262848, -0.15356038510799408, -1.881317377090454, -0.7939876914024353, -0.00018451895448379219, -0.2349729686975479, -0.0001641377166379243, -0.12985701858997345, -0.2326224446296692, -5.400034933700226e-05, -0.046978313475847244, -0.004483884200453758, -0.00040999590419232845, -1.7881377516459906e-06, -7.033100700937212e-05, 0.0, -6.90197994117625e-05, -0.0014706759247928858, -0.0015845850575715303, -8.83301836438477e-05, -0.00036221143091097474, -0.003417368046939373, -0.22945892810821533, -0.06577810645103455, -0.0022644372656941414, -0.0060365027748048306, -7.152555099310121e-07, -1.1920928244535389e-07, -0.057691533118486404, -0.0029385979287326336, -0.00018737945356406271, -7.271740287251305e-06, -0.01033230870962143, -0.002071022754535079, -0.004092058166861534, -2.1005067825317383, -0.13647599518299103, -8.129743218887597e-05, -0.00013207517622504383, -1.1920928244535389e-07, -3.3378546504536644e-06, -4.887569048150908e-06, -0.00021634146105498075, -8.308542601298541e-05, -9.476689592702314e-05, -9.417489309271332e-06, -0.00014828535495325923, -3.755022044060752e-05, -0.0007995745982043445, -0.9658353328704834, -0.0014748420799151063, -0.012521225959062576, -0.12998796999454498, -0.041233744472265244, -0.220205157995224, -0.20664486289024353, -0.046838972717523575, -0.004604333080351353, -0.013888737186789513, -0.0001573438785271719, -0.09118431806564331, -0.00017557987303007394, -0.3520001471042633, -4.6967357775429264e-05, -9.047575440490618e-05, -0.00032944019767455757, -1.0847986231965479e-05, -2.071974515914917, -5.364403477869928e-06, -0.014352541416883469, -0.0032329694367945194, -0.000198821333469823, -0.0003983181086368859, -0.1726732850074768, -0.005621457938104868, -0.03350928798317909, -4.529942543740617e-06, -0.00887497141957283, -1.728519782773219e-05, -7.855583680793643e-05, -0.0007298904820345342, -0.0010039533954113722, -0.46975162625312805, -0.6715564727783203, -0.31616759300231934, -3.158099412918091, -0.010496528819203377, -0.00032419670606032014, -9.894321920000948e-06, -0.06873679161071777, -0.007655330467969179, -0.00025281094713136554, -0.01339025516062975, -0.0051412517204880714, -0.018959255889058113, -0.0004203628050163388, -0.0004142856632824987, -1.6800129413604736, -0.13793085515499115, -0.08230270445346832, -0.13895688951015472, -3.480850500636734e-05, -0.0002315968304174021, -0.19759047031402588, -0.19351190328598022, -1.2944227457046509, -0.08883310854434967, -0.0001234931987710297, -0.5079637765884399, -6.353653589030728e-05, -0.01990942284464836, -0.0004379982128739357, -6.794698856538162e-05, -0.03002670593559742, -1.8856900930404663, -3.373566141817719e-05, -4.5298504119273275e-05, -0.10826963931322098, -0.003534262999892235, -0.012890111654996872, -0.00031406714697368443, -0.0010013333521783352, -0.35017284750938416, -1.6927575416048057e-05, -0.0021803434938192368, -0.02983858808875084, -0.003539846045896411, -2.3245540432981215e-05, -0.0007005859515629709, -0.0016420703614130616, -0.6683517694473267, -0.013996068388223648, -3.2782016205601394e-05, -0.00394661258906126, -6.353653589030728e-05, -0.0007568117580376565, -0.00021455370006151497, -0.024136163294315338, -2.3841855067985307e-07, -1.1801649634435307e-05, -0.000433112756581977, -1.4185804502631072e-05, -0.00020037073409184813, -0.0003367095487192273, -0.00011276562872808427, -1.6927575416048057e-05, -0.17049331963062286, -1.0847986231965479e-05, -0.053678788244724274, -7.152555099310121e-07, -7.152555099310121e-07, -0.0006098079611547291, -0.002678618300706148, -0.017405852675437927, -0.000301673193462193, -0.001922665280289948, -0.003758867271244526, -0.0008742563077248633, -0.004480323754251003, -0.002098026918247342, -0.16351686418056488, -0.12012061476707458, -0.021020138636231422, -0.0028292411006987095, -0.002441641641780734, -0.00020954797219019383, -0.0004901876673102379, -0.009674095548689365, -0.0001380348257953301, -0.0024974129628390074, -0.0001147919538198039, -0.034960199147462845], "finish_reason": "length"}], "metrics": {"energy": 908.5455438594814, "energy_per_token": 3.5490060307010993, "time": 21.858904, "time_per_token": 0.08538634375}}
{"outputs": [{"text": "# Check if the path exists\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n    # Read each JSON file alphabetically into a DataFrame and insert a \"Source\" column\n    dfs = []\n    for file in sorted(os.listdir(path)):\n        if file.endswith('.json'):\n            with open(os.path.join(path, file), 'r') as f:\n                data = json.load(f)\n            df = pd.DataFrame(data)\n            df.insert(0, 'Source', file)\n            dfs.append(df)\n\n    # Concatenate the DataFrames and move processed files to a \"processed\" subdirectory\n    df = pd.concat(dfs)\n    os.makedirs(os.path.join(path, 'processed'), exist_ok=True)\n    for file in sorted(os.listdir(path)):\n        if file.endswith('.json'):\n            shutil.move(os.path.join(path, file), os.", "tokens": ["#", " Check", " if", " the", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "#", " Read", " each", " JSON", " file", " alphabet", "ically", " into", " a", " Data", "Frame", " and", " insert", " a", " \"", "Source", "\"", " column", "\n", "    ", "d", "fs", " =", " []", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "df", ".", "insert", "(", "0", ",", " '", "Source", "'", ",", " file", ")", "\n", "            ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " and", " move", " processed", " files", " to", " a", " \"", "processed", "\"", " sub", "directory", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ")", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "')", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", "."], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -0.4213058650493622, -0.06241043657064438, -0.4656427204608917, -0.0007890925044193864, -0.01634940132498741, -0.10798225551843643, -0.0014496066141873598, -1.311301275563892e-06, -0.00014828535495325923, -1.9907753085135482e-05, -0.007975399494171143, -0.0003914067056030035, -0.0006231511943042278, -0.0010839784517884254, -0.00040070133400149643, -0.003566216677427292, -2.094057083129883, -1.0847986231965479e-05, -0.6019548773765564, -3.158996332786046e-05, -5.340433563105762e-05, -0.00033718624035827816, -0.003459066851064563, -0.0050859833136200905, -0.04007323086261749, -0.16654986143112183, -0.0019493164727464318, -0.05492394417524338, -1.7936409711837769, -0.42215651273727417, -0.09727241098880768, -0.0013241341803222895, -0.8042561411857605, -4.756337511935271e-05, -0.3463040590286255, -0.014957772567868233, -0.023409422487020493, -0.00026258357684127986, -0.9204410910606384, -0.09855674207210541, -0.1608850359916687, -0.11205265671014786, -0.02193954586982727, -0.00011789103882620111, -0.0015739921946078539, -0.5209766030311584, -0.0004477690381463617, -1.0280377864837646, -0.00021073981770314276, -0.001293656532652676, -0.017530377954244614, -0.007428641896694899, -0.0019658540841192007, -0.0831204280257225, -1.5157363414764404, -0.06572362780570984, -0.07976848632097244, -0.0008054111385717988, -0.0012650828575715423, -5.960462772236497e-07, -0.001073856488801539, -1.1920928244535389e-07, -6.69933797325939e-05, -0.00015615197480656207, -0.0048442380502820015, -0.00015436411194968969, -0.0004142856632824987, -0.0008043391280807555, -0.21714414656162262, -0.018445156514644623, -0.0004680253332480788, -0.003522859187796712, -7.390948667307384e-06, -2.3841855067985307e-07, -0.4496239721775055, -0.0018919678404927254, -0.0002520958660170436, -9.179073458653875e-06, -0.0025898031890392303, -0.0013874676078557968, -0.00036435641231946647, -0.16605988144874573, -4.827859811484814e-05, -0.0004954302567057312, -0.008495500311255455, -2.9802276912960224e-06, -6.9141146923357155e-06, -1.5497195136049413e-06, -5.209310256759636e-05, -9.035655966727063e-05, -4.2199197196168825e-05, -2.109982233378105e-05, -0.002021295018494129, -0.17788013815879822, -1.966933996300213e-05, -0.010146938264369965, -0.0008750900160521269, -0.002305232686921954, -5.006777428206988e-06, -0.007606116589158773, -0.0021350225433707237, -0.0005166388000361621, -0.00030357998912222683, -0.13773559033870697, -0.0012527006911113858, -0.0073209586553275585, -4.529942543740617e-06, -0.011294829659163952, -1.823885577323381e-05, -9.643566590966657e-05, -0.0002867764269467443, -0.0014073477359488606, -0.8861056566238403, -0.022976014763116837, -0.009590622037649155, -0.001320681651122868, -6.961580220377073e-05, -0.06693951040506363, -0.00933496467769146, -0.00029559535323642194, -0.018250515684485435, -0.015020953491330147, -0.0005173536483198404, -0.010710611008107662, -0.9252346754074097, -0.0008469808381050825, -0.00019751029321923852, -0.04485654830932617, -3.182837463100441e-05, -0.07470570504665375, -0.5514217019081116, -2.682172998902388e-05, -1.0251946150674485e-05, -0.0825943797826767, -0.016745129600167274, -0.006478498224169016, -0.0012648447882384062, -0.006708717904984951, 0.0, -0.0001436368766007945, -3.480850500636734e-05, -0.0008480527903884649, -5.709961988031864e-05, -0.0003238391946069896, -0.0001262346631847322, -0.09215724468231201, -0.03449272736907005, -0.003980215173214674, -1.0832056999206543, -2.1576648578047752e-05, -0.0004435985756572336, -5.8530047681415454e-05, -0.5756577849388123, -0.023717040196061134, -0.0008834273321554065, -4.768370445162873e-07, -0.712407112121582, -0.3419978618621826, -0.9574844837188721, -0.004447093699127436, -0.009260440245270729, -0.563294529914856, -0.2365816831588745, -0.0007954055909067392, -0.0004916174802929163, -0.04395786672830582, -0.0029510778840631247, -0.004157471936196089, -0.00020096666412428021, -0.23593974113464355, -0.0025259514804929495, -0.0002885640424210578, -1.311301275563892e-06, -1.7404405298293568e-05, -0.00039748396375216544, -6.05564855504781e-05, 0.0, -0.724198579788208, -0.14607280492782593, -0.023489421233534813, -1.2097868919372559, -3.6954811548639555e-06, -0.07832851260900497, -3.576278118089249e-07, -1.1920922133867862e-06, -0.0901649221777916, -0.004664255306124687, -1.0728830375228426e-06, -1.3470558769768104e-05, -1.2278481335670222e-05, -2.9444261599564925e-05, -0.002379445359110832, -0.00028951745480298996, -0.00047267231275327504, -0.012234287336468697, -0.0006897454150021076, -0.010086871683597565, -3.182837463100441e-05, -6.878139538457617e-05, -2.145764938177308e-06, -5.8412379075889476e-06, -0.0010868363315239549, -0.00012158608296886086, -4.95898348162882e-05, -0.0012674640165641904, -0.0010400369064882398, -0.016060156747698784, -0.05955369025468826, -0.00033849707688204944, -1.4003140926361084, -9.905801562126726e-05, -0.00016437610611319542, -1.4305104514278355e-06, -4.994744449504651e-05, -4.768370445162873e-07, -3.611976353568025e-05, -0.0009224927052855492, -0.0003289635351393372, -0.0001501924270996824, -5.376194530981593e-05, -0.00028308198670856655, -0.01884918101131916, -0.003796870354562998, -0.0006992755807004869, -0.0003890234511345625, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00023755589791107923, -0.00019774865359067917, -0.001999523490667343, -6.318072337307967e-06, -0.007437753025442362, -7.664863369427621e-05, -0.00024387246230617166, -0.44715991616249084, -1.311301275563892e-06, -2.0265558760002023e-06, -0.0012281740782782435, -1.2516897186287679e-05, -0.0010182439582422376, -8.344646857949556e-07, -2.47952248173533e-05, -1.0847986231965479e-05, -5.960446742392378e-06, -4.5298504119273275e-05, -7.223821739898995e-05, -2.47952248173533e-05, -0.00017307691450696439, -0.0001494772732257843, -1.6093124941107817e-05, -0.013230156153440475, -1.4305104514278355e-06], "finish_reason": "length"}], "metrics": {"energy": 935.219601530075, "energy_per_token": 3.6532015684768555, "time": 21.854183, "time_per_token": 0.08536790234375}}
{"outputs": [{"text": "# Check if the path exists and is a directory\n    if not os.path.isdir(path):\n        raise ValueError(\"Invalid directory path\")\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame()\n\n    # Get a list of all files in the directory\n    files = os.listdir(path)\n\n    # Iterate over the files in the directory\n    for file in files:\n        # Check if the file is a JSON file\n        if file.endswith('.json'):\n            # Read the JSON file into a DataFrame\n            with open(os.path.join(path, file), 'r') as f:\n                data = json.load(f)\n            # Convert the data to a DataFrame\n            df_file = pd.DataFrame(data)\n            # Add the filename as a new column in the DataFrame\n            df_file['source'] = file\n            # Concatenate the DataFrames\n            df = pd.concat([df, df_file])\n            # Move the file to a processed directory\n            shutil.move(os.path", "tokens": ["#", " Check", " if", " the", " path", " exists", " and", " is", " a", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " directory", " path", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " to", " store", " the", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Get", " a", " list", " of", " all", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " files", " in", " the", " directory", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " JSON", " file", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "#", " Convert", " the", " data", " to", " a", " Data", "Frame", "\n", "            ", "df", "_", "file", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "#", " Add", " the", " filename", " as", " a", " new", " column", " in", " the", " Data", "Frame", "\n", "            ", "df", "_", "file", "['", "source", "']", " =", " file", "\n", "            ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "file", "])", "\n", "            ", "#", " Move", " the", " file", " to", " a", " processed", " directory", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path"], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -0.4213058650493622, -0.06241043657064438, -1.8258378505706787, -0.5986071825027466, -0.05459846556186676, -0.0126707274466753, -0.058323170989751816, -0.0007321537705138326, -0.026930520310997963, -0.1363416165113449, -0.00783595908433199, -8.344646857949556e-07, -0.00019012074335478246, -1.3589766240329482e-05, -1.462749719619751, -8.928377064876258e-05, -0.00018416139937471598, -0.0008574623498134315, -0.002126457868143916, -0.000408327643526718, -0.002495510270819068, -0.32468053698539734, -0.45192745327949524, -4.410734163684538e-06, -0.08026841282844543, -0.967403769493103, -1.7971972227096558, -0.6089710593223572, -0.09492301940917969, -0.4307202398777008, -0.0004096384218428284, -0.0003091811086051166, -0.5288180708885193, -0.0005385617259889841, -0.05240119621157646, -0.9943177700042725, -0.6488335728645325, -0.5295681357383728, -0.0011878109071403742, -0.0706559345126152, -0.4497305750846863, -0.03299903869628906, -0.6497160792350769, -0.4818481206893921, -0.0001003691868390888, -0.011864099651575089, -0.0036591021344065666, -0.007431599777191877, -9.179073458653875e-06, -0.0006611545104533434, -0.12896369397640228, -0.002277996391057968, -0.023694803938269615, -0.0001787979417713359, -0.005211340729147196, -1.7890636920928955, -0.5027708411216736, -0.06529802083969116, -5.578839045483619e-05, -0.4548925459384918, -1.0389394760131836, -0.0029122107662260532, -0.000925112864933908, -0.11436059325933456, -0.1913721114397049, -6.067568756407127e-05, -0.11844964325428009, -0.0008228015503846109, -0.09138529002666473, -9.536738616588991e-07, -0.0001282609737245366, -4.768370445162873e-07, -4.8397800128441304e-05, -9.953480184776708e-05, -8.666139910928905e-05, -0.0001264730526600033, -0.04506157711148262, -0.00020847532141488045, -0.003686538664624095, -1.7766075134277344, -0.00013302871957421303, -0.4364056885242462, -0.5827846527099609, -0.05930757150053978, -0.8939298391342163, -2.5573878288269043, -0.050881244242191315, -0.16855384409427643, -0.0001714082609396428, -0.005263162776827812, -0.2697525918483734, -0.05905510112643242, -0.11259432137012482, -0.00023398046323563904, -0.00011157367407577112, -0.009667602367699146, -0.04740508273243904, -0.40725356340408325, -0.011943495832383633, -0.021217510104179382, -0.02430383302271366, -0.05230899527668953, -0.005294705741107464, -0.043302129954099655, -0.0025228597223758698, -0.03837714344263077, -0.00011562632425921038, -0.0019442004850134254, -0.12165486812591553, -0.0013518728082999587, -0.002577199600636959, -1.1920922133867862e-06, -2.3841855067985307e-07, -1.3464852571487427, -0.0016686100279912353, -0.00018344627460464835, -1.2516897186287679e-05, -0.001899701775982976, -0.00010692501382436603, -0.0023783750366419554, -0.011839478276669979, -0.4061788320541382, -0.004515570122748613, -0.16972662508487701, -0.11050466448068619, -0.054996270686388016, -0.006527412217110395, -0.02186443842947483, -0.00012158608296886086, -0.04490111023187637, -0.00013314791431184858, -0.7738462090492249, -0.00013195598148740828, -0.0008622265886515379, -0.011436499655246735, -3.2186455882765586e-06, -2.002696055569686e-05, -3.099436753473128e-06, -7.235741941258311e-05, -6.568216485902667e-05, -6.186770770000294e-05, -2.884823152271565e-05, -0.002078279387205839, -0.1036696657538414, -3.9457496313843876e-05, -0.010159800760447979, -0.0008722314960323274, -0.002211983548477292, -4.172316494077677e-06, -0.005819283425807953, -0.001957288011908531, -0.00044490929576568305, -0.0005347490659914911, -0.24539606273174286, -0.0019016055157408118, -0.020144401118159294, -2.622600959512056e-06, -0.017742374911904335, -2.2172682292875834e-05, -0.0001037067049765028, -0.0005535738891921937, -0.00113589596003294, -0.9866793751716614, -3.1403679847717285, -1.310542345046997, -0.07869462668895721, -0.6662592887878418, -0.20016200840473175, -0.009445619769394398, -0.013738713227212429, -0.00027044929447583854, -0.13007977604866028, -0.0007550249574705958, -0.4485633969306946, -0.35133543610572815, -0.27352988719940186, -0.00022599527437705547, -0.0006225554971024394, -2.884823152271565e-05, -0.07702168077230453, -0.004585821647197008, -0.0008057684754021466, -0.02042008563876152, -0.002581717912107706, -0.019355474039912224, -0.010347174480557442, -1.766473650932312, -2.0981764793395996, -1.6456215381622314, -0.9130595326423645, -0.030080843716859818, -0.5017143487930298, -0.007570979185402393, -1.178711175918579, -0.004421102814376354, -0.007556071970611811, -0.00017736769223120064, -0.005475879181176424, -0.0001711698860162869, -0.003034512745216489, -0.005847845692187548, -5.173549288883805e-05, -0.03169242665171623, -0.19151829183101654, -0.0009059377480298281, -0.00013517419574782252, -0.05088996887207031, -0.003961692098528147, -0.0045499843545258045, -0.004476288799196482, -1.0787893533706665, -3.8980677345534787e-05, -0.00020621081057470292, -8.821448318485636e-06, -0.0014177043922245502, -0.13199380040168762, -0.9421846866607666, -1.5616295058862306e-05, -0.014958829618990421, -0.0002474478678777814, -0.001007526065222919, -0.00012027494085486978, -0.0011307757813483477, -2.264974000354414e-06, -1.0967194612021558e-05, -0.0007481159991584718, -1.811964830267243e-05, -0.0031158016063272953, -0.0006118332967162132, -0.00015960850578267127, -5.722029527532868e-06, -1.7492009401321411, -0.0008384049870073795, -0.4540068507194519, -0.008984023705124855, -0.017999637871980667, -0.00385470362380147, -0.5605424642562866, -0.004895605146884918, -1.9305493831634521, -1.7248995304107666, -0.6402149796485901, -0.011641898192465305, -0.0016943159280344844, -0.32799261808395386, -2.264974000354414e-06, -9.775113539944869e-06, -0.00041869457345455885, -9.381330892210826e-05, -0.0006538875168189406, -9.536697689327411e-06, -5.4238757002167404e-05], "finish_reason": "length"}], "metrics": {"energy": 912.3395722885126, "energy_per_token": 3.5638264542520024, "time": 22.277004, "time_per_token": 0.087019546875}}
{"outputs": [{"text": "# Create \"processed\" subdirectory if it doesn't exist\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n\n    # Read each file in the directory and append to DataFrame\n    df = pd.DataFrame()\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n                df = df.append(pd.DataFrame(data, columns=data[0].keys()))\n                df.insert(0, 'Source', filename)\n\n            # Move file to \"processed\" subdirectory\n            shutil.move(os.path.join(path, filename), os.path.join(path, 'processed', filename))\n\n    return df", "tokens": ["#", " Create", " \"", "processed", "\"", " sub", "directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "\n", "    ", "#", " Read", " each", " file", " in", " the", " directory", " and", " append", " to", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "df", " =", " df", ".", "append", "(", "pd", ".", "DataFrame", "(", "data", ",", " columns", "=", "data", "[", "0", "]", ".", "keys", "()))", "\n", "                ", "df", ".", "insert", "(", "0", ",", " '", "Source", "'", ",", " filename", ")", "\n", "\n", "            ", "#", " Move", " file", " to", " \"", "processed", "\"", " sub", "directory", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " filename", "))", "\n", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.9825034737586975, -1.3892526626586914, -2.506181240081787, -0.02016192488372326, -0.002056628232821822, -0.427143931388855, -0.012369230389595032, -0.13452833890914917, -0.04574815556406975, -0.16078415513038635, -0.0005589353386312723, -7.033323527139146e-06, -0.018360305577516556, -0.04732140526175499, -0.0013329440262168646, -0.868532657623291, -0.015045495703816414, -0.0009634620510041714, -1.4305104514278355e-06, -0.0001551984460093081, -3.528532761265524e-05, -0.025010274723172188, -0.07389391958713531, -0.44998160004615784, -3.3378546504536644e-06, -3.111314072157256e-05, -3.933898824470816e-06, -0.0002321927313460037, -0.0010419422760605812, -0.0007046362152323127, -0.000834117061458528, -0.700518012046814, -0.0014666287461295724, -0.0015468548517674208, -0.00013290952483657748, -0.0004536076739896089, -0.002794529777020216, -0.0015930355293676257, -7.152555099310121e-07, -0.8140507340431213, -6.079655122448457e-06, -3.683499380713329e-05, -0.0005474975914694369, -0.0006043276516720653, -1.311301275563892e-06, -4.768370445162873e-07, -4.768370445162873e-07, -1.9073468138230965e-06, -0.00011777184408856556, -4.529942543740617e-06, -8.95221673999913e-05, -0.0003067976504098624, -1.6212332411669195e-05, -5.519237674889155e-05, -0.0006493605324067175, -0.4190126061439514, -0.0014574630185961723, -0.030140647664666176, -0.7610363364219666, -0.7585598826408386, -1.750354528427124, -0.8449371457099915, -0.5943394303321838, -0.11384233087301254, -1.9361058473587036, -1.4912443161010742, -0.31099817156791687, -0.9011743068695068, -0.0010702840518206358, -0.017639661207795143, -0.00020990552729927003, -0.14285480976104736, -0.022214271128177643, -0.025144435465335846, -5.960462772236497e-07, -0.015872560441493988, -0.1930440068244934, -0.006011737510561943, -0.003245327156037092, -0.09599899500608444, -0.6108888983726501, -6.0437283536884934e-05, -2.1403896808624268, -9.417489309271332e-06, -0.00023862851958256215, 0.0, -0.00014733182615600526, -0.0015814905054867268, -0.00046659549116156995, -0.0006068295333534479, -0.0011262509506195784, -0.3607049882411957, -0.05642041563987732, -0.003976653330028057, -0.005587317515164614, -2.861018856492592e-06, -2.3841855067985307e-07, -0.0833146870136261, -0.004423001315444708, -0.0005930095794610679, -8.583032467868179e-06, -0.01404708530753851, -0.003927020356059074, -0.0004615910293068737, -0.2910744249820709, -4.470248313737102e-05, -0.00025829317746683955, -0.0009639384225010872, -2.622600959512056e-06, -3.099436753473128e-06, -7.152555099310121e-07, -3.6477376852417365e-05, -3.135155202471651e-05, -2.586808113846928e-05, -1.5258672647178173e-05, -0.0012991330586373806, -0.12308578938245773, -2.0265373677830212e-05, -0.009398619644343853, -0.0010003806091845036, -0.0020687624346464872, -5.722029527532868e-06, -0.022993024438619614, -0.00130353809799999, -0.00040344204171560705, -0.0004167880106251687, -0.24494342505931854, -0.0026567422319203615, -0.020920097827911377, -3.814689989667386e-06, -0.012005925178527832, -1.9430925021879375e-05, -6.01988795096986e-05, -0.0002787916746456176, -0.0034101211931556463, -0.31949588656425476, -0.3864515423774719, -0.17773723602294922, -0.824184000492096, -8.106198947643861e-06, -0.0014113951474428177, -0.0008875959902070463, -0.7571641206741333, -8.583032467868179e-06, -0.04229235649108887, -0.007608009502291679, -0.0008033862104639411, -1.4535057544708252, -0.06793061643838882, -0.7988901734352112, -0.12864719331264496, -0.005060483235865831, -0.0002631794777698815, -0.040598999708890915, -0.0009526243666186929, -2.0861407392658293e-05, -0.5934236645698547, -0.005970263388007879, -1.6140682697296143, -0.03568055108189583, -0.5459354519844055, -0.025403985753655434, -0.00044467096449807286, -0.7673185467720032, -5.1973900554003194e-05, -0.054942335933446884, -1.7327488660812378, -0.0001134808044298552, -3.766942609217949e-05, -0.10276446491479874, -0.01653210073709488, -0.04879863187670708, -0.21261054277420044, -0.3858411908149719, -0.0043732719495892525, -0.006837660446763039, -0.5660244822502136, -0.0033263610675930977, -0.12319277226924896, -0.0001599660754436627, -0.0007808735244907439, -0.024747831746935844, -0.00038771264371462166, -0.03439102694392204, -0.0005681092734448612, -0.05077802762389183, -2.50339189733495e-06, -1.9073468138230965e-06, -0.00037043384509161115, -1.9907753085135482e-05, -0.0010250320192426443, -3.6954811548639555e-06, -1.2159273865108844e-05, -5.483612312673358e-06, -9.536697689327411e-06, -9.035655966727063e-05, -7.724463648628443e-05, -2.9682672902708873e-05, -0.00015555603022221476, -0.00010179955279454589, -2.169585604860913e-05, -0.06471648067235947, -3.2186455882765586e-06, -4.529942543740617e-06, -1.1205610462639015e-05, -3.2782016205601394e-05, -0.0006753309280611575, -0.0007890925044193864, -0.00015579440514557064, -0.003107839496806264, -7.891343557275832e-05, -0.1687932312488556, -0.00016532962035853416, -0.0005090133054181933, -0.0004430027911439538, -0.0015710166189819574, -0.03864624351263046, -0.003352381056174636, -0.14104865491390228, -0.0011258936719968915, -0.205947607755661, -0.026428861543536186, -0.8936147689819336], "finish_reason": "stop"}], "metrics": {"energy": 778.0477968921665, "energy_per_token": 3.489003573507473, "time": 19.13808, "time_per_token": 0.0858209865470852}}
{"outputs": [{"text": "# Create the \"processed\" subdirectory if it doesn't exist\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n    # Create an empty list to hold the data\n    data = []\n    # Loop through each file in the directory alphabetically\n    for filename in sorted(os.listdir(path)):\n        if filename.endswith('.json'):\n            # Read the JSON file into a DataFrame\n            with open(os.path.join(path, filename), 'r') as f:\n                df = pd.read_json(f)\n            # Insert a \"Source\" column with the filename\n            df.insert(0, 'source', filename)\n            # Append the data to the list\n            data.append(df)\n            # Move the processed file to the \"processed\" subdirectory\n            shutil.move(os.path.join(path, filename), os.path.join(path, 'processed'))\n    # Concatenate the data from all files into", "tokens": ["#", " Create", " the", " \"", "processed", "\"", " sub", "directory", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " hold", " the", " data", "\n", "    ", "data", " =", " []", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " directory", " alphabet", "ically", "\n", "    ", "for", " filename", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "df", " =", " pd", ".", "read", "_", "json", "(", "f", ")", "\n", "            ", "#", " Insert", " a", " \"", "Source", "\"", " column", " with", " the", " filename", "\n", "            ", "df", ".", "insert", "(", "0", ",", " '", "source", "'", ",", " filename", ")", "\n", "            ", "#", " App", "end", " the", " data", " to", " the", " list", "\n", "            ", "data", ".", "append", "(", "df", ")", "\n", "            ", "#", " Move", " the", " processed", " file", " to", " the", " \"", "processed", "\"", " sub", "directory", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " data", " from", " all", " files", " into"], "logprobs": [-0.9825034737586975, -1.3892526626586914, -0.7158427238464355, -0.4999300539493561, -0.0137808071449399, -0.0013255628291517496, -0.32244253158569336, -0.002800117013975978, -0.12958624958992004, -0.006439649034291506, -0.11447818577289581, -0.00034600470098666847, -2.9802276912960224e-06, -0.023238224908709526, -0.077446848154068, -0.0011842388194054365, -0.9576128125190735, -0.010048044845461845, -0.0007459718617610633, -1.5497195136049413e-06, -0.00015114595589693636, -4.51792984677013e-05, -0.02104465290904045, -0.09000837057828903, -0.41196760535240173, -2.264974000354414e-06, -2.5510462364763953e-05, -4.0531076592742465e-06, -0.0003010773507412523, -0.0010442048078402877, -0.0007393010891973972, -0.0010633773636072874, -0.6507396697998047, -0.001036583329550922, -0.0014391313306987286, -0.00017414960893802345, -0.00048530244384892285, -0.0027254601009190083, -0.0016192194307222962, -8.344646857949556e-07, -0.6097219586372375, -6.198863957251888e-06, -2.0861407392658293e-05, -0.00045694399159401655, -0.0003045333724003285, -9.536738616588991e-07, -4.768370445162873e-07, -1.0728830375228426e-06, -5.602820692729438e-06, -0.00013398226292338222, -5.006777428206988e-06, -6.0437283536884934e-05, -0.00030870441696606576, -1.5735502529423684e-05, -5.638440416078083e-05, -0.0004957877099514008, -1.0543677806854248, -0.08435949683189392, -2.236999034881592, -0.21387045085430145, -0.001615172834135592, -2.264131784439087, -0.029150716960430145, -1.5118916034698486, -0.2651601731777191, -2.1891257762908936, -2.6831581592559814, -0.00029237763374112546, -0.13025204837322235, -0.0995628759264946, -0.0013865152141079307, -0.00019131260341964662, -0.005601543001830578, -0.01387039665132761, -0.7717500329017639, -0.31060102581977844, -1.6627427339553833, -0.17276506125926971, -0.008566655218601227, -0.00592013681307435, -0.05625331029295921, -2.5563466548919678, -0.00012134769349358976, -0.05083819106221199, -0.00013171759201213717, -0.011694212444126606, -0.3395651578903198, -7.593343616463244e-05, -0.026790447533130646, -0.0015468548517674208, -0.00030989613151177764, -1.5497195136049413e-06, -5.1377883210079744e-05, 0.0, -8.737658936297521e-05, -0.0007446615491062403, -0.0017979660769924521, -4.9470632802695036e-05, -0.0004300146538298577, -0.006736189126968384, -1.2671165466308594, -0.08632120490074158, -0.004666272550821304, -0.0064857229590415955, -9.775113539944869e-06, -1.1920928244535389e-07, -0.10629107058048248, -0.0065535856410861015, -0.0004909025738015771, -1.2278481335670222e-05, -0.009745756164193153, -0.04709136486053467, -0.005174458492547274, -0.23384666442871094, -0.23995350301265717, -0.059033188968896866, -0.28286245465278625, -0.07068192958831787, -0.046084724366664886, -0.007895569317042828, -0.19233858585357666, -0.00038020533975213766, -0.09628117829561234, -0.00039188333903439343, -0.7590029239654541, -6.282132380874828e-05, -0.00019810620869975537, -0.0009887097403407097, -2.0265558760002023e-06, -5.8412379075889476e-06, -2.3841830625315197e-06, -2.9682672902708873e-05, -2.5629668016335927e-05, -2.372236667724792e-05, -1.3351351299206726e-05, -0.001364849042147398, -0.15417587757110596, -1.9550132492440753e-05, -0.011282453313469887, -0.0013583013787865639, -0.005393596366047859, -3.2186455882765586e-06, -0.016308704391121864, -0.001757030957378447, -0.0003474347176961601, -0.0008071978809311986, -0.3794751763343811, -0.007002100348472595, -0.005075664725154638, -6.401333666872233e-05, -2.1948063373565674, -1.5735502529423684e-05, -0.00023135847004596144, -0.0002653246629051864, -0.1835339218378067, -0.2341429740190506, -0.0035312932450324297, -0.052279241383075714, -0.006982686463743448, -0.24997039139270782, -0.0541112907230854, -0.2744032144546509, -0.08370079845190048, -4.255681051290594e-05, -0.00030048147891648114, -0.6910385489463806, -0.002663637977093458, -0.07229475677013397, -0.04838960990309715, -0.0005552418879233301, -0.004561376757919788, -0.2618837058544159, -0.0012342463014647365, -6.19869097135961e-05, -0.029589559882879257, -3.135155202471651e-05, -0.06736085563898087, -0.2926269471645355, -0.0005878866068087518, -2.2649508537142538e-05, -0.08056298643350601, -0.015687862411141396, -0.00029309268575161695, -0.0008360228384844959, -0.011876468546688557, -0.2021438330411911, -2.455681169521995e-05, -0.00698860501870513, -1.2907731533050537, -0.054946400225162506, -0.005005447659641504, -0.01785268820822239, -0.024754110723733902, -0.00018571082910057157, -0.0019301610300317407, -0.004208992701023817, -0.038388270884752274, -0.0005388000281527638, -0.0010206258157268167, -0.008925658650696278, -0.00030298411729745567, -0.09993456304073334, -0.0033502422738820314, -0.006264336407184601, -0.0015185264637693763, -0.9863206148147583, -0.05806539207696915, -0.027268027886748314, -0.005382332019507885, -0.008596557192504406, -0.00034350217902101576, -0.0004068977141287178, -0.01374318078160286, -0.0003426679759286344, -0.0034991009160876274, -0.001278893556445837, -0.09214267879724503, -3.2186455882765586e-06, -3.3378546504536644e-06, -0.0006117141456343234, -2.3007127310847864e-05, -0.0022703842259943485, -1.168244216387393e-05, -2.932505594799295e-05, -1.4185804502631072e-05, -1.4543427823809907e-05, -7.509902934543788e-05, -7.426462980220094e-05, -2.8013790142722428e-05, -0.00020919041708111763, -0.0001289761275984347, -3.421248038648628e-05, -0.07073713093996048, -7.986990567587782e-06, -1.3589766240329482e-05, -1.3232143828645349e-05, -3.4689302992774174e-05, -0.0007126175914891064, -0.0012915135594084859, -0.00011157367407577112, -0.004732835106551647, -8.093983342405409e-05, -1.6645543575286865, -0.0008167268824763596, -0.014524209313094616, -0.01518463995307684, -0.34923967719078064, -1.2874520507466514e-05, -0.00011288482346571982, -2.5152843591058627e-05, -0.2309306114912033, -0.2865387499332428, -0.46103087067604065, -0.021613650023937225, -0.21323198080062866, -0.19420266151428223], "finish_reason": "length"}], "metrics": {"energy": 888.9997643699647, "energy_per_token": 3.4726553295701748, "time": 21.853292, "time_per_token": 0.085364421875}}
{"outputs": [{"text": "# Get the directory path\n    path = os.path.join(path, '')\n    # Get the list of files in the directory\n    files = os.listdir(path)\n    # Sort the files alphabetically\n    files.sort()\n    # Create a list to store the DataFrames\n    dfs = []\n    # Loop over the files\n    for file in files:\n        # Check if the file is a JSON file\n        if file.endswith('.json'):\n            # Read the JSON file into a DataFrame\n            with open(path + file, 'r') as f:\n                df = pd.read_json(f)\n            # Insert a \"Source\" column with the file name\n            df.insert(0, 'source', file)\n            # Add the DataFrame to the list\n            dfs.append(df)\n    # Concatenate the DataFrames\n    df = pd.concat(dfs, ignore_index=True)\n    # Move the files to the \"processed\" subdirectory\n    if not os.path.exists('processed'):\n        os.mkdir('", "tokens": ["#", " Get", " the", " directory", " path", "\n", "    ", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " '", "')", "\n", "    ", "#", " Get", " the", " list", " of", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "    ", "#", " Sort", " the", " files", " alphabet", "ically", "\n", "    ", "files", ".", "sort", "()", "\n", "    ", "#", " Create", " a", " list", " to", " store", " the", " Data", "F", "rames", "\n", "    ", "d", "fs", " =", " []", "\n", "    ", "#", " Loop", " over", " the", " files", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " JSON", " file", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", "\n", "            ", "with", " open", "(", "path", " +", " file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "df", " =", " pd", ".", "read", "_", "json", "(", "f", ")", "\n", "            ", "#", " Insert", " a", " \"", "Source", "\"", " column", " with", " the", " file", " name", "\n", "            ", "df", ".", "insert", "(", "0", ",", " '", "source", "'", ",", " file", ")", "\n", "            ", "#", " Add", " the", " Data", "Frame", " to", " the", " list", "\n", "            ", "d", "fs", ".", "append", "(", "df", ")", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "    ", "#", " Move", " the", " files", " to", " the", " \"", "processed", "\"", " sub", "directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "('", "processed", "')", ":", "\n", "        ", "os", ".", "mk", "dir", "('"], "logprobs": [-0.9825034737586975, -3.3181543350219727, -1.2179768085479736, -2.3226606845855713, -1.9225058555603027, -0.7540574073791504, -0.0028204445261508226, -1.983822226524353, -0.053467266261577606, -0.2603057622909546, -6.210611172718927e-05, -0.008950233459472656, -0.00022825974156148732, -1.5774641036987305, -0.07873935997486115, -1.090863585472107, -0.6114171743392944, -0.4827805459499359, -0.4658677875995636, -0.06130015477538109, -0.90874844789505, -0.2943315804004669, -2.4067468643188477, -1.1392250061035156, -0.6610842943191528, -0.0005302215577103198, -0.6586756110191345, -0.08598117530345917, -0.02516024559736252, -0.01912335306406021, -0.286138653755188, -0.0005438040825538337, -0.12446656823158264, -0.003082526382058859, -0.21561279892921448, -1.311301275563892e-06, -0.0005911033367738128, -1.7881377516459906e-06, -0.0008779485360719264, -0.011007891967892647, -0.0012368656462058425, -0.001134943449869752, -0.033381085842847824, -0.045314300805330276, -0.614109218120575, -0.05248015373945236, -0.37119027972221375, -0.06846977025270462, -3.4927710657939315e-05, -0.025692284107208252, -9.500529267825186e-05, -0.010505258105695248, -0.14544333517551422, -1.764281842042692e-05, -0.001622313866391778, -0.0003129946126136929, -0.05852096155285835, -0.02057098038494587, -1.1609221696853638, -1.0493756532669067, -1.165200114250183, -0.06163209304213524, -0.39387014508247375, -0.11923886835575104, -0.44709479808807373, -0.0036214501596987247, -3.3378546504536644e-06, -0.1525808572769165, -0.00012599628826137632, -0.07129053771495819, -9.536697689327411e-06, -0.0005666795768775046, -0.0012984187342226505, -6.747018051100895e-05, -0.009841138496994972, -0.06459198892116547, -0.531035840511322, -1.4268792867660522, -0.3960583806037903, -0.0491037592291832, -0.0826541930437088, -8.11782301752828e-05, -0.0020816102623939514, -0.2129373997449875, -0.010284877382218838, -0.0003937899600714445, -0.00026222606538794935, -6.913899414939806e-05, -0.009045337326824665, -0.01302461326122284, -1.876362681388855, -0.04521096125245094, -0.05752475559711456, -0.05003547668457031, -0.05675352364778519, -0.013845355249941349, -0.053029172122478485, -0.005540372803807259, -0.018074218183755875, -0.0001573438785271719, -0.002516200765967369, -0.06319253891706467, -0.004750632215291262, -0.003094172803685069, -2.264974000354414e-06, -1.1920928244535389e-07, -0.04006979614496231, -0.005926891695708036, -0.0003513672563713044, -1.1205610462639015e-05, -0.003063154872506857, -0.00010346830822527409, -0.0027878726832568645, -0.0033085390459746122, -0.267031729221344, -0.002700850600376725, -0.14408865571022034, -0.0709439143538475, -0.10001449286937714, -0.0017030035378411412, -0.02057623490691185, -0.0006342306733131409, -0.011610554531216621, -0.00020621081057470292, -2.9832828044891357, -0.0003010773507412523, -0.0008499585674144328, -0.36380577087402344, -0.11306703090667725, -0.0015925593907013535, -0.14963117241859436, -0.012199429795145988, -0.0019804879557341337, -0.013630060479044914, -1.2397689715726301e-05, -0.007489341776818037, -0.0025121578946709633, -0.0005385617259889841, -0.0009818024700507522, -0.4237021207809448, -0.0095831835642457, -0.006313379853963852, -6.6756979322235566e-06, -1.9407339096069336, -1.0132738680113107e-05, -0.00010907054820563644, -0.0003407612966839224, -0.14750955998897552, -0.22083738446235657, -0.0019339682767167687, -0.09857164323329926, -0.007404739502817392, -0.09749487042427063, -0.05476008728146553, -0.4006314277648926, -0.08575373142957687, -6.0794889577664435e-05, -0.0002618685248307884, -0.8443267345428467, -0.0016399280866608024, -1.1767276525497437, -0.021016521379351616, -0.02853374369442463, -0.0035855784080922604, -0.0055164252407848835, -0.12580318748950958, -0.0013758012792095542, -9.60780744208023e-05, -0.030497077852487564, -5.173549288883805e-05, -0.15658435225486755, -0.39206987619400024, -0.00042834642226807773, -5.173549288883805e-05, -0.060080431401729584, -0.016194583848118782, -0.0003578022588044405, -0.002121699508279562, -0.005764052737504244, -1.3837502002716064, -0.0008910499745979905, -0.005528280511498451, -0.0005489272880367935, -0.00016783259343355894, -0.00015925093612167984, -0.000388665939681232, -0.037235017865896225, -0.00027295202016830444, -0.0007908792467787862, 0.0, -0.0008468617452308536, -0.00012373158824630082, -0.00018737945356406271, -0.0003232433518860489, -0.0003995097358711064, -0.00010859376925509423, -0.184540793299675, -0.0039265453815460205, -0.158540740609169, -1.7881233361549675e-05, -6.4490144723095e-05, -1.3947389561508317e-05, -0.15596900880336761, -0.0018507986096665263, -5.6265202147187665e-05, -1.7881377516459906e-06, -0.8467025756835938, -0.0002157455455744639, -0.007343324366956949, -0.002649489790201187, -0.000169382052263245, -5.960462772236497e-07, -2.396077979938127e-05, -0.0006636562757194042, -8.976056415122002e-05, 0.0, -0.9908863306045532, -0.18664084374904633, -5.245195097813848e-06, -1.6689286894688848e-06, -0.0038292906247079372, -0.0017326356610283256, -0.007063418161123991, -0.0003968881501350552, -0.003211105475202203, -0.005632363725453615, -0.46898016333580017, -0.02844174951314926, -0.9877430200576782, -0.008821327239274979, -0.3159804940223694, -0.0682869702577591, -0.0021023093722760677, -0.001957882894203067, -0.37748607993125916, -0.0016227898886427283, -0.015161392278969288, -0.00025412190007045865, -0.3408845365047455, -0.02320433221757412, -0.00040070133400149643, -2.50339189733495e-06, -0.00013422065239865333, -8.22540732769994e-06, -0.01829768717288971, -2.530137300491333, -0.10587852448225021, -0.005123461596667767, -0.0012197205796837807, -0.0011207734933122993, -0.003583796788007021, -0.015726706013083458, -1.4066597032069694e-05, -0.30211150646209717, -5.674201020156033e-05, -0.0014856740599498153], "finish_reason": "length"}], "metrics": {"energy": 924.4332055377962, "energy_per_token": 3.6110672091320164, "time": 22.066027, "time_per_token": 0.08619541796875}}
{"outputs": [{"text": "if not os.path.exists(path):\n        return pd.DataFrame()\n    df = pd.DataFrame()\n    for file in sorted(os.listdir(path)):\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n        df = pd.concat([df, pd.DataFrame(data)])\n        df.insert(0, 'source', file)\n    df = df.sort_values(['source'])\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n    for file in os.listdir(path):\n        if os.path.isfile(os.path.join(path, file)):\n            os.replace(os.path.join(path, file), os.path.join(path, 'processed', file))\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "return", " pd", ".", "DataFrame", "()", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", "(", "data", ")]", ")", "\n", "        ", "df", ".", "insert", "(", "0", ",", " '", "source", "'", ",", " file", ")", "\n", "    ", "df", " =", " df", ".", "sort", "_", "values", "(['", "source", "'])", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", "))", ":", "\n", "            ", "os", ".", "replace", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " file", "))", "\n", "    ", "return", " df", "\n", "\n", "print"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -2.268775463104248, -0.6834120750427246, -3.6238969187252223e-05, -0.00015889335190877318, -0.06932123005390167, -0.026905221864581108, -0.8400776982307434, -1.1807060241699219, -0.06671784073114395, -0.06402066349983215, -1.0609570381348021e-05, -0.06719088554382324, -0.04679222032427788, -0.005218100268393755, -0.0032086102291941643, -0.38737666606903076, -0.78985995054245, -0.0765785425901413, -0.11773386597633362, -0.0004478881892282516, -0.0011479223612695932, -1.1920928244535389e-07, -0.0005209281225688756, -2.4437606043647975e-05, -5.972207145532593e-05, -0.00047136162174865603, -0.0049384282901883125, -0.00020418466010596603, -0.0009297577198594809, -0.0007113072206266224, -1.9382671117782593, -9.011816291604191e-05, -0.001116129569709301, -0.021260922774672508, -1.5497195136049413e-06, -1.3351351299206726e-05, -2.861018856492592e-06, -0.00011681827891152352, -0.00016842853801790625, -0.00021884430316276848, -4.351044481154531e-05, -0.00490331556648016, -0.43733248114585876, -5.5549986427649856e-05, -0.12553247809410095, -0.0015049570938572288, -0.004977810196578503, -9.65590606938349e-06, -0.006864062510430813, -0.0022176930215209723, -0.0005700155161321163, -0.0006330393371172249, -0.175881490111351, -0.0017790456768125296, -0.02230042777955532, -4.0531076592742465e-06, -0.030852457508444786, -2.1576648578047752e-05, -9.727005090098828e-05, -0.00030119650182314217, -0.0009377372916787863, -0.6619946956634521, -0.4416062831878662, -0.1268536001443863, -0.4682959318161011, -9.059865078597795e-06, -0.0037354708183556795, -0.0023890782613307238, -0.004788123071193695, -0.0005438040825538337, -0.0037095798179507256, -9.179073458653875e-06, -0.10407130420207977, -0.018790921196341515, -0.0008685392094776034, -0.3941635489463806, -0.6462060809135437, -0.021970801055431366, -0.012302703224122524, -0.08957193791866302, -0.2915690243244171, -0.003439465072005987, -0.0011050553293898702, -0.36288997530937195, -5.674201020156033e-05, -0.16515903174877167, -0.2662960886955261, -0.001128275180235505, -9.48860906646587e-05, -0.10051227360963821, -0.007962745614349842, -0.007197048980742693, -0.8930478096008301, -2.9983015060424805, -1.245203971862793, -0.06498964130878448, -0.23487362265586853, -2.073577404022217, -0.0002503081923350692, -0.025525080040097237, -2.034667491912842, -0.058849550783634186, -0.8166130781173706, -0.09549051523208618, -0.012813026085495949, -0.8609248995780945, -0.028572671115398407, -0.001666824915446341, -2.3841855067985307e-07, -3.8742269680369645e-05, -2.3841830625315197e-06, -0.010059728287160397, -0.11733746528625488, -0.03709971159696579, -8.344646857949556e-07, -1.9192511899746023e-05, -1.7762025890988298e-05, -8.308542601298541e-05, -0.0022427900694310665, -0.0008582960581406951, -0.0019006537040695548, -0.06440053880214691, -0.005364546552300453, -0.002755299676209688, -0.00037698791129514575, -0.0007319155265577137, -0.0031028480734676123, -0.0019976201001554728, -5.960462772236497e-07, -1.0322809219360352, -2.9802276912960224e-06, -0.0001560327800689265, -0.00037269797758199275, -0.00035565727739594877, -1.1920922133867862e-06, -4.768360213347478e-06, -7.271740287251305e-06, -2.002696055569686e-05, -0.00031883400515653193, -2.2172682292875834e-05, -9.142934868577868e-05, -0.0007552632014267147, -5.352353764465079e-05, -0.0007046362152323127, -0.0005946775199845433, -0.007659707684069872, -0.05060487985610962, -0.017090076580643654, -0.0002650863316375762, -0.42246025800704956, -1.311301275563892e-06, -0.0006104036583565176, 0.0, -0.00011574551899684593, -0.00069165148306638, -0.0015430459752678871, -7.724463648628443e-05, -0.0011611393420025706, -1.3272738456726074, -1.238858938217163, -5.722029527532868e-06, -0.00045074793160893023, -1.1920928244535389e-07, -0.03715094178915024, -0.021855108439922333, -0.0005793085438199341, -0.0021211046259850264, -1.6689286894688848e-06, -3.814689989667386e-06, -7.152555099310121e-07, -1.6331539882230572e-05, -8.642300235806033e-05, -0.0001938155182870105, -6.317892984952778e-05, -0.002358038444072008, -0.004531116224825382, -0.04443461820483208, -0.0010155049385502934, -0.0007544293766841292, -1.3701815605163574, -3.099436753473128e-06, -2.383788824081421, -0.0002383901592111215, -0.03903083875775337, -8.4638240878121e-06, -6.9141146923357155e-06, -1.6689286894688848e-06, -0.0001433984871255234, -7.60526381782256e-05, -0.00014447122521232814, -0.00010764019680209458, -0.0024135764688253403, -0.0003095386200584471, -7.295342220459133e-05, -0.013518456369638443, -6.198863957251888e-06, -1.07287787614041e-05, -1.6927575416048057e-05, -9.63164638960734e-05, -0.0005087750032544136, -0.003047704929485917, -0.00014923889830242842, -0.00773281417787075, -5.23315102327615e-05, -0.010901418514549732, -0.0005049622268415987, -0.007391723338514566, -0.001157209975644946, -0.002356016542762518, -0.022309403866529465, -0.034369491040706635, -0.002324500121176243, -0.1587630957365036, -0.04191426932811737, -3.3178794384002686], "finish_reason": "stop"}], "metrics": {"energy": 794.3855273265831, "energy_per_token": 3.4994957150950796, "time": 19.34836, "time_per_token": 0.08523506607929515}}
{"outputs": [{"text": "os.makedirs(path, exist_ok=True)\n    df = pd.DataFrame()\n    for filename in sorted(os.listdir(path)):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename)) as f:\n                data = json.load(f)\n                df2 = pd.DataFrame(data)\n                df2['source'] = filename\n                df = pd.concat([df, df2])\n    os.makedirs('processed', exist_ok=True)\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            shutil.move(os.path.join(path, filename), os.path.join('processed', filename))\n    return df", "tokens": ["os", ".", "m", "aked", "irs", "(", "path", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", "))", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "df", "2", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "                ", "df", "2", "['", "source", "']", " =", " filename", "\n", "                ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "2", "])", "\n", "    ", "os", ".", "m", "aked", "irs", "('", "processed", "'", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " os", ".", "path", ".", "join", "('", "processed", "'", ",", " filename", "))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.336803913116455, -0.0003922408213838935, -0.145692840218544, -9.536697689327411e-06, -0.00035589560866355896, -0.0004520586517173797, -0.7173481583595276, -0.11592418700456619, -0.0028736984822899103, -3.6954811548639555e-06, -9.417489309271332e-06, -0.007949027232825756, -0.0007738456479273736, -0.00043990471749566495, -0.10739268362522125, -0.14710019528865814, -0.6712062954902649, -0.04008697718381882, -0.04210904613137245, -7.867782187531702e-06, -0.030449090525507927, -0.2062678337097168, -0.015171959064900875, -0.07126101106405258, -0.23061507940292358, -0.792403519153595, -0.00023123928986024112, -0.11814399063587189, -0.0014965059235692024, -0.0018299752846360207, -7.152555099310121e-07, -0.0010069306008517742, -5.960462772236497e-07, -0.00026663561584427953, -0.0016054133884608746, -0.0038395035080611706, -0.00041631137719377875, -0.0021076626144349575, -0.00276445341296494, -0.7470061779022217, -0.24428218603134155, -0.0040699755772948265, -0.015847332775592804, -4.172316494077677e-06, 0.0, -0.4729877710342407, -0.006593614351004362, -0.0008254220010712743, -1.585470999998506e-05, -0.01156106311827898, -0.0010342017048969865, -0.000552263343706727, -0.1988314390182495, -9.464769391342998e-05, -0.00157803890760988, -0.015375887043774128, -2.264974000354414e-06, -2.8132995794294402e-05, -2.7418097943154862e-06, -6.508615479106084e-05, -0.00035851728171110153, -0.0003040566807612777, -6.41325386823155e-05, -0.0022526620887219906, -1.4367619752883911, -0.00021717573690693825, -0.040013447403907776, -0.003383865114301443, -0.0003719830128829926, -0.00048828122089616954, -0.1966952681541443, -0.0031980343628674746, -0.016365351155400276, -9.059865078597795e-06, -0.007315751630812883, -2.4676019165781327e-05, -0.00011574551899684593, -0.0005978942499496043, -0.001328777172602713, -0.8687037825584412, -0.5925562381744385, -2.6113803386688232, -0.00028451209072954953, -0.0030706420075148344, -2.9802276912960224e-06, -0.08875195682048798, -0.006111979018896818, -0.0004755319678224623, -0.04473697394132614, -0.07910862565040588, -0.006145390681922436, -0.006739267613738775, -0.012206260114908218, -0.2979557514190674, -0.2562335133552551, -0.0009541726321913302, -0.00036816971260122955, -0.040689196437597275, -0.010732193477451801, -0.009257487021386623, -0.007526966743171215, -0.009666303172707558, -0.06747239828109741, -3.2186455882765586e-06, -6.675497570540756e-05, -0.0011604249011725187, -2.253030106658116e-05, -0.0015379278920590878, -0.0009575072908774018, -0.0003784178989008069, -1.0827853679656982, -0.0013153243344277143, -2.369657516479492, -0.7447313070297241, -7.748573807475623e-06, -0.02388128824532032, -4.768370445162873e-07, -2.0265558760002023e-06, -0.3214731812477112, -0.06356434524059296, -0.008672195486724377, -0.0005743046058341861, -0.0003358753747306764, -3.814689989667386e-06, 0.0, -0.00018010901112575084, -0.0005383234238252044, -0.00021991695393808186, -0.002393716247752309, -0.0012168630491942167, -0.15442945063114166, -0.020818643271923065, -0.0015468548517674208, -0.45037367939949036, -9.536738616588991e-07, -0.00031871485407464206, 0.0, -0.0017105009173974395, -0.0008024332928471267, -0.0005168771021999419, -7.152301259338856e-05, -0.0006418551784008741, -0.07286293059587479, -0.004898570477962494, -0.0012059090659022331, -0.0002623452164698392, -2.861018856492592e-06, -7.152555099310121e-07, -0.000830901088193059, -0.0006672301678918302, -0.0008412636234425008, -7.390948667307384e-06, -0.0015361425466835499, -8.546940807718784e-05, -0.0007945717661641538, -0.20630139112472534, -2.264974000354414e-06, -4.410734163684538e-06, -0.007770666852593422, -7.080780778778717e-05, -0.0040671261958777905, -9.536738616588991e-07, -5.531158240046352e-05, -9.65590606938349e-06, -3.123234637314454e-05, -0.0009308296139352024, -0.00018702188390307128, -6.937739817658439e-05, -0.0003081085451412946, -0.0002441108226776123, -2.8013790142722428e-05, -0.10758646577596664, -2.9802276912960224e-06, -4.887569048150908e-06, -8.34461570775602e-06, -3.9457496313843876e-05, -0.004171598702669144, -0.0006081400788389146, -0.0016520674107596278, -2.1576648578047752e-05, -0.0009814451914280653, -0.0007039214833639562, -0.001511027687229216, -0.01373154018074274, -0.026829442009329796, -0.0017489389283582568, -0.2915523648262024, -0.041580069810152054, -1.2372450828552246], "finish_reason": "stop"}], "metrics": {"energy": 650.993957918167, "energy_per_token": 3.444412475757497, "time": 15.98055, "time_per_token": 0.0845531746031746}}
{"outputs": [{"text": "# Create the \"processed\" directory if it doesn't exist.\n    if not os.path.exists(f'{path}/processed'):\n        os.makedirs(f'{path}/processed')\n    # Initialize an empty DataFrame.\n    df = pd.DataFrame()\n    # Loop through all the JSON files in the directory.\n    for file in os.listdir(path):\n        if file.endswith('.json'):\n            # Read the JSON file into a DataFrame.\n            df_new = pd.read_json(f'{path}/{file}')\n            # Insert a \"Source\" column with the filename.\n            df_new['source'] = file\n            # Append the new data to the main DataFrame.\n            df = pd.concat([df, df_new], ignore_index=True)\n            # Move the processed file to the \"processed\" directory.\n            shutil.move(f'{path}/{file}', f'{path}/processed/{file}')\n    return df", "tokens": ["#", " Create", " the", " \"", "processed", "\"", " directory", " if", " it", " doesn", "'", "t", " exist", ".", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "f", "'{", "path", "}/", "processed", "')", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "f", "'{", "path", "}/", "processed", "')", "\n", "    ", "#", " Initialize", " an", " empty", " Data", "Frame", ".", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "#", " Loop", " through", " all", " the", " JSON", " files", " in", " the", " directory", ".", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", ".", "\n", "            ", "df", "_", "new", " =", " pd", ".", "read", "_", "json", "(", "f", "'{", "path", "}/{", "file", "}", "')", "\n", "            ", "#", " Insert", " a", " \"", "Source", "\"", " column", " with", " the", " filename", ".", "\n", "            ", "df", "_", "new", "['", "source", "']", " =", " file", "\n", "            ", "#", " App", "end", " the", " new", " data", " to", " the", " main", " Data", "Frame", ".", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "new", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "            ", "#", " Move", " the", " processed", " file", " to", " the", " \"", "processed", "\"", " directory", ".", "\n", "            ", "sh", "util", ".", "move", "(", "f", "'{", "path", "}/{", "file", "}'", ",", " f", "'{", "path", "}/", "processed", "/{", "file", "}", "')", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-0.9825034737586975, -1.3892526626586914, -0.7158427238464355, -0.4999300539493561, -0.0137808071449399, -0.0013255628291517496, -1.3247580528259277, -0.09698531031608582, -0.004485783167183399, -0.10729310661554337, -0.00044741155579686165, -4.887569048150908e-06, -0.02623135596513748, -2.9567973613739014, -0.020716829225420952, -0.0013872295385226607, -0.9496639966964722, -0.005614819936454296, -0.0008691347320564091, -2.145764938177308e-06, -0.00018165845540352166, -6.01988795096986e-05, -0.019335947930812836, -0.30931317806243896, -2.5080740451812744, -0.8733800053596497, -0.0022356535773724318, -0.10292848944664001, -0.003126853611320257, -0.03786902874708176, -0.0006256530177779496, -0.0023055896162986755, -0.005835520103573799, -0.00459222961217165, -2.7418097943154862e-06, -0.6987689733505249, -1.3947389561508317e-05, -0.0002557904226705432, -0.0009895433904603124, -0.0020159415435045958, -0.0029932716861367226, -1.966933996300213e-05, -0.0005589353386312723, -3.182837463100441e-05, -0.0011962646385654807, -0.0015949398512020707, -1.0277526378631592, -0.10756012797355652, -1.0374441146850586, -0.2562744915485382, -0.0013878247700631618, -0.3896830976009369, -0.0004807746736332774, -0.7330909967422485, -0.0032689727377146482, -0.00031025364296510816, -0.021959954872727394, -0.004626404028385878, -0.00444970466196537, -1.168244216387393e-05, -0.0002348147245356813, -0.028794385492801666, -0.0014893640764057636, -0.017119022086262703, -0.017629237845540047, -0.9329930543899536, -0.3527190387248993, -0.631376326084137, -1.5139431953430176, -0.9366505146026611, -0.0029372903518378735, -0.021514834836125374, -0.00995185598731041, -0.2145121842622757, -0.5983884930610657, -0.009672088548541069, -0.0003090619284193963, -0.03588838875293732, -0.7976908087730408, -0.07304135710000992, -1.143441081047058, -8.34461570775602e-06, -0.0036462745629251003, 0.0, -0.0004170263418927789, -0.032460372895002365, -0.0015453074593096972, -0.0004539651272352785, -0.008965120650827885, -0.1063435897231102, -0.04621995985507965, -0.00075049843871966, -0.001190311275422573, -8.4638240878121e-06, -4.768370445162873e-07, -0.2321482002735138, -0.006760699674487114, -0.00040928093949332833, -1.7762025890988298e-05, -0.007170418743044138, -0.0012490098597481847, -0.0048380689695477486, -0.042068012058734894, -0.14901821315288544, -0.10950925946235657, -0.4740123450756073, -0.17259494960308075, -0.08352075517177582, -0.005948578007519245, -0.01689189113676548, -0.0002978596603497863, -0.2731889486312866, -0.0032056395430117846, -0.00029130507027730346, -0.8585644960403442, -0.31114763021469116, -2.9184350967407227, -0.0015608996618539095, -0.004311670549213886, -1.1324817933200393e-05, -0.489272803068161, -4.0531076592742465e-06, -8.165503095369786e-05, -0.005474219098687172, -0.31810054183006287, -0.019834162667393684, -0.0005191409145481884, -0.004906755872070789, -0.00023684080224484205, -0.33204513788223267, -0.00021896349790040404, -0.004205906298011541, -0.0012247211998328567, -0.017002182081341743, -0.1782723069190979, -0.07252561300992966, -0.2456442266702652, -0.11754161864519119, -5.4834770708112046e-05, -0.0003091811086051166, -1.5546119213104248, -0.0020799448247998953, -0.2158905565738678, -0.06264224648475647, -0.001974420389160514, -0.00020394629973452538, -0.00632996391505003, -0.004342530854046345, -6.05564855504781e-05, -1.715470552444458, -0.1596231907606125, -0.0007127366843633354, -0.0015024575404822826, -0.02815389633178711, -0.0069288220256567, -0.000998951611109078, -0.011860683560371399, -0.39484280347824097, -7.056941103655845e-05, -0.01815113238990307, -0.1495252400636673, -2.421349048614502, -0.028720369562506676, -0.0035660979337990284, -3.1045053005218506, -0.0016897936584427953, -0.0001299296854995191, -0.004747191444039345, -0.0007645544828847051, -0.0002658013836480677, -0.0015718498034402728, -0.0012196014868095517, -0.026075158268213272, -3.3378546504536644e-06, -1.9192511899746023e-05, -0.001639213995076716, -8.67805938469246e-05, -0.0009982370538637042, -0.004055253230035305, -0.0004182179400231689, -1.0371154530730564e-05, -0.35805729031562805, -3.790783375734463e-05, -0.10866526514291763, -1.9073468138230965e-06, -2.0265558760002023e-06, -0.002613345393911004, -0.004156166221946478, -0.013804909773170948, -0.0010765953920781612, -0.01839693821966648, -0.003940081689506769, -0.008102759718894958, -0.0028502813074737787, -0.2142876386642456, -0.13243675231933594, -0.02972681075334549, -0.006297269370406866, -0.0020078516099601984, -0.0005423743859864771, -0.0008412636234425008, -0.2889373004436493, -0.00664051016792655, -0.0010082405060529709, -0.001190787530504167, -0.09184670448303223, -3.099436753473128e-06, -3.099436753473128e-06, -0.0009731086320243776, -6.031808152329177e-05, -0.0034423163160681725, -0.001135181519202888, -0.00016616393986623734, -0.00023779425828251988, -5.8053239627042785e-05, -0.0008575814426876605, -6.818538531661034e-05, -0.0017202593153342605, -0.0009037939016707242, -4.470248313737102e-05, -0.0006020640721544623, -3.0636318115284666e-05, -0.08575405925512314, -0.0001931004080688581, -0.0017522709676995873, -8.916457591112703e-05, -0.0010115751065313816, -0.013998184353113174, -0.44293272495269775, -0.0017031225143000484, -0.11625397205352783, -0.05449913069605827, -1.0582562685012817], "finish_reason": "stop"}], "metrics": {"energy": 843.9562740163803, "energy_per_token": 3.622129931400774, "time": 19.754475, "time_per_token": 0.08478315450643777}}
{"outputs": [{"text": "files = sorted(os.listdir(path))\n\n    df = pd.DataFrame()\n    for file in files:\n        if file.endswith('.json'):\n            file_path = os.path.join(path, file)\n            with open(file_path, 'r') as f:\n                data = json.load(f)\n            df_file = pd.DataFrame(data)\n            df_file['Source'] = file\n            df = pd.concat([df, df_file], ignore_index=True)\n\n            # Move file to the processed folder\n            processed_path = os.path.join(path, 'processed')\n            if not os.path.exists(processed_path):\n                os.makedirs(processed_path)\n            shutil.move(file_path, os.path.join(processed_path, file))\n\n    return df", "tokens": ["files", " =", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", "_", "file", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "df", "_", "file", "['", "Source", "']", " =", " file", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "file", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "            ", "#", " Move", " file", " to", " the", " processed", " folder", "\n", "            ", "processed", "_", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "')", "\n", "            ", "if", " not", " os", ".", "path", ".", "exists", "(", "processed", "_", "path", "):", "\n", "                ", "os", ".", "m", "aked", "irs", "(", "processed", "_", "path", ")", "\n", "            ", "sh", "util", ".", "move", "(", "file", "_", "path", ",", " os", ".", "path", ".", "join", "(", "processed", "_", "path", ",", " file", "))", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.0174803733825684, -0.007623625919222832, -0.5817004442214966, -0.14020632207393646, -0.054249055683612823, -5.125986263010418e-06, -0.00732628395780921, -2.8490614567999728e-05, -0.00039081089198589325, -0.003114256775006652, -0.005933883599936962, -0.05135323852300644, -2.8404622077941895, -0.0011386347468942404, -0.7718323469161987, -0.047400761395692825, -0.044974394142627716, -3.218599158572033e-05, -0.02430429868400097, -0.13266342878341675, -0.023569181561470032, -0.39307352900505066, -0.07634497433900833, -0.2857104241847992, -0.035294778645038605, -0.003750316333025694, -0.0006482883472926915, -0.0010494445450603962, -0.006121576298028231, -1.7472563982009888, -0.27559393644332886, -0.008521031588315964, -0.010389410890638828, -3.075552376685664e-05, -2.3841855067985307e-07, -0.32038044929504395, -0.011939255520701408, -0.001816648175008595, -2.6225699912174605e-05, -0.008089279755949974, -0.0023677905555814505, -0.0019320646533742547, -3.0613744258880615, -0.2499518245458603, -0.05104460567235947, -0.0002829628065228462, -0.005223318003118038, -8.344646857949556e-07, -2.610649426060263e-05, -2.622600959512056e-06, -0.0003500564198475331, -0.0004766043566633016, -0.0003110878460574895, -8.797258487902582e-05, -0.0013390155509114265, -8.093983342405409e-05, -0.001634215353988111, -0.04149395599961281, -0.23059500753879547, -6.139089964563027e-05, -0.00020597243565134704, -0.00022980909852776676, -0.00019667598826345056, -9.536738616588991e-07, -0.1157899871468544, -0.0202805008739233, -0.0019509821431711316, -0.005592296365648508, -1.490105023549404e-05, -0.013563028536736965, -0.004046348854899406, -0.0005505952867679298, -0.0005921755800954998, -0.06734112650156021, -0.003600069787353277, -0.020116593688726425, -4.291525328881107e-06, -0.018070587888360023, -3.564294092939235e-05, -0.00013636612857226282, -0.0006955826538614929, -0.0017487009754404426, -0.8371623158454895, -0.38466182351112366, -1.0120835304260254, -0.3033594489097595, -0.0004963834653608501, -0.0010550415609031916, -7.271740287251305e-06, -0.15632358193397522, -0.006442136596888304, -0.0004563482361845672, -0.034065134823322296, -0.028441285714507103, -0.007667042315006256, -0.007845894433557987, -0.006586390547454357, -0.00023684080224484205, -0.11016197502613068, -1.276800274848938, -0.00025674383505247533, -0.00031668893643654883, -0.09402744472026825, -0.024292897433042526, -0.0053927660919725895, -0.0050953528843820095, -0.006170152686536312, -0.030484706163406372, -2.9802276912960224e-06, -4.851700214203447e-05, -0.0007348936051130295, -3.790783375734463e-05, -0.0011853104224428535, -0.0006713996990583837, -0.00019441144831944257, -3.576272320060525e-06, -0.4877532422542572, -4.51792984677013e-05, -0.10455472022294998, -1.0728830375228426e-06, -5.006777428206988e-06, -0.0012965138303115964, -0.007128164637833834, -0.008988749235868454, -0.0025813612155616283, -1.1212095022201538, -0.8009540438652039, -1.0656119585037231, -0.1219860389828682, -2.173759698867798, -0.012709217146039009, -2.1128928661346436, -1.1963950395584106, -2.25838041305542, -0.03287896513938904, -0.0009865660686045885, -0.23000936210155487, -0.00043871314846910536, -0.6416152715682983, -0.00013302871957421303, -0.01739027164876461, -5.960462772236497e-07, -8.451581379631534e-05, -2.145764938177308e-06, -0.0015919642755761743, -0.10133086144924164, -0.01555747352540493, -0.004179196432232857, -0.03409289941191673, -0.0020419952925294638, -0.027281716465950012, -0.0005759726045653224, -0.0008412636234425008, -0.6249731183052063, -0.002993509406223893, -5.9960475482512265e-05, -1.7881377516459906e-06, -5.3881147323409095e-05, -9.417489309271332e-06, -0.009167483076453209, -0.00014697425649501383, -0.0014054430648684502, -5.364403477869928e-06, -6.437280717364047e-06, -0.000196556793525815, -0.00031919151660986245, -0.0006019449210725725, -0.0010006187949329615, -2.3841855067985307e-07, -0.651678204536438, 0.0, -0.00014494798961095512, -0.0002862997353076935, -7.533743337262422e-05, -2.0861407392658293e-05, -8.344646857949556e-07, -0.0012730597518384457, -0.000569300667848438, -0.06852787733078003, -0.05039883032441139, -1.1920922133867862e-06, -1.9073468138230965e-06, -0.0002598424907773733, -1.0847986231965479e-05, -0.0022978587076067924, -0.0007889734115451574, -7.152555099310121e-07, -6.0794889577664435e-05, -0.014710179530084133, -3.576278118089249e-07, -2.622600959512056e-06, -1.4305104514278355e-06, -5.483612312673358e-06, -0.0003591130953282118, -0.003600901225581765, -7.271740287251305e-06, -2.622600959512056e-06, -0.0037416466511785984, -0.004393449053168297, -0.0013237770181149244, -0.000821014866232872, -0.0299428328871727, -0.0059119598008692265, -0.04688902571797371, -0.0011857867939397693, -2.0947515964508057, -8.22540732769994e-06, -1.0728830375228426e-06, -3.6954811548639555e-06, -5.876845170860179e-05, -0.23679740726947784], "finish_reason": "stop"}], "metrics": {"energy": 786.9865579376221, "energy_per_token": 3.7297941134484462, "time": 18.89182, "time_per_token": 0.08953469194312796}}
{"outputs": [{"text": "if not os.path.exists(path):\n        os.makedirs(path)\n\n    df = pd.DataFrame()\n    for filename in os.listdir(path):\n        if filename.endswith(\".json\"):\n            filepath = os.path.join(path, filename)\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n                file_df = pd.DataFrame(data)\n                file_df['source'] = filename\n                df = pd.concat([df, file_df], ignore_index=True)\n            shutil.move(filepath, os.path.join(path, 'processed', filename))\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", "\n", "            ", "with", " open", "(", "file", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "file", "_", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "                ", "file", "_", "df", "['", "source", "']", " =", " filename", "\n", "                ", "df", " =", " pd", ".", "concat", "([", "df", ",", " file", "_", "df", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "            ", "sh", "util", ".", "move", "(", "file", "path", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " filename", "))", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -0.576907753944397, -4.005352093372494e-05, -0.6376020908355713, -3.158996332786046e-05, -3.528532761265524e-05, -0.00033122775494121015, -0.0036448491737246513, -0.010500420816242695, -0.010468924418091774, -0.9789319634437561, -0.0012362702982500196, -1.4272855520248413, -0.03852993994951248, -0.030264174565672874, -1.2516897186287679e-05, -0.02226230502128601, -0.11165814846754074, -0.018655555322766304, -0.4380529224872589, -0.300793319940567, -0.568855881690979, -0.0001546025014249608, -2.578336715698242, -2.861018856492592e-06, -0.0003321811091154814, -3.576278118089249e-07, -0.0001928620331455022, -0.0006074252305552363, -0.0021491781808435917, -0.0015525680501013994, -0.0016852713888511062, -0.16489391028881073, -0.09431007504463196, -0.00240430049598217, -0.006068495102226734, -3.6954811548639555e-06, 0.0, -0.8817262053489685, -0.0005916990339756012, -0.004015004262328148, -0.001019911258481443, -6.079655122448457e-06, -0.008285554125905037, -0.001157686347141862, -0.0007348936051130295, -1.2294608354568481, -0.1721990406513214, -0.00019214690837543458, -0.0014277036534622312, -3.576278118089249e-07, -1.764281842042692e-05, -1.311301275563892e-06, -0.0005006728461012244, -9.226373367710039e-05, -0.0001935771433636546, -5.1616290875244886e-05, -0.0006635371246375144, -8.332382276421413e-05, -0.0008219677838496864, -0.008301159366965294, -0.15977723896503448, -5.4596363042946905e-05, -7.283422019099817e-05, -0.000285227142740041, -1.0847986231965479e-05, -0.1290488839149475, -1.3134299516677856, -0.0013690156629309058, -0.006453151814639568, -1.5616295058862306e-05, -0.016290409490466118, -0.003405368886888027, -0.0004499138449318707, -0.00034898388548754156, -0.07073401659727097, -0.006860273890197277, -0.018781093880534172, -5.006777428206988e-06, -0.01118532195687294, -3.099393507000059e-05, -0.0001380348257953301, -0.0006073060794733465, -0.0009558399324305356, -0.8696306943893433, -2.58876895904541, -0.0019150504376739264, -0.0014788892585784197, -0.0001971527235582471, -0.0005301024066284299, -7.867782187531702e-06, -0.057128407061100006, -0.004132423084229231, -0.00035172473872080445, -0.016422579064965248, -0.02505573444068432, -0.009699360467493534, -0.012667431496083736, -5.876845170860179e-05, -6.508615479106084e-05, -0.9245758056640625, -0.495665580034256, -0.0012373419012874365, -0.00044550508027896285, -0.0677105039358139, -0.01839342713356018, -0.005036049522459507, -0.006310655269771814, -0.0003363520372658968, -0.051754824817180634, -2.3841830625315197e-06, -6.48477507638745e-05, -0.00033909291960299015, -0.0002954761730507016, -9.333651541965082e-05, -0.0008355463505722582, -1.8954096958623268e-05, -0.00013672371278516948, -0.4825552999973297, -3.683499380713329e-05, -0.07234687358140945, -2.145764938177308e-06, -7.629365427419543e-06, -0.0009869233472272754, -0.005887902807444334, -0.01436100248247385, -0.0017456068890169263, -0.27478042244911194, -0.5163871049880981, -1.7881377516459906e-06, -1.6212332411669195e-05, -0.0003967689990531653, -7.366862701019272e-05, -0.0018780466634780169, -5.972207145532593e-05, -0.00020013237372040749, -0.009101332165300846, -2.9682672902708873e-05, -7.390948667307384e-06, -2.7418097943154862e-06, -0.0001567479339428246, -0.017685221508145332, -0.026151344180107117, -0.005427861586213112, -0.2958594560623169, -0.002768733073025942, -0.3096070885658264, -0.0005090133054181933, -0.0053193699568510056, -0.0009652484441176057, -0.006002495065331459, -0.8980690240859985, -0.004320810083299875, -0.042657963931560516, -0.0014365125680342317, -0.1747269183397293, -0.027861090376973152, -1.3312374353408813], "finish_reason": "stop"}], "metrics": {"energy": 620.8728285179138, "energy_per_token": 3.6738037190409103, "time": 14.300237, "time_per_token": 0.08461678698224852}}
{"outputs": [{"text": "# Initialize a list to store the DataFrames\n    dataframes = []\n\n    # Check if the path exists\n    if os.path.exists(path):\n        # List all the files in the path\n        files = os.listdir(path)\n\n        # Sort the files alphabetically\n        files.sort()\n\n        for file in files:\n            # Check if the file is a JSON file\n            if file.endswith(\".json\"):\n                # Read the JSON file into a DataFrame\n                df = pd.read_json(os.path.join(path, file))\n\n                # Add a \"source\" column with the filename\n                df[\"source\"] = file\n\n                # Append the DataFrame to the list\n                dataframes.append(df)\n\n    # Combine all the DataFrames into one DataFrame\n    df = pd.concat(dataframes)\n\n    # Move the processed files to a \"processed\" subdirectory\n    if not os.path.exists(os.path.join(path, \"processed\")):\n        os.mkdir(os.path.join(", "tokens": ["#", " Initialize", " a", " list", " to", " store", " the", " Data", "F", "rames", "\n", "    ", "data", "frames", " =", " []", "\n", "\n", "    ", "#", " Check", " if", " the", " path", " exists", "\n", "    ", "if", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "#", " List", " all", " the", " files", " in", " the", " path", "\n", "        ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "\n", "        ", "#", " Sort", " the", " files", " alphabet", "ically", "\n", "        ", "files", ".", "sort", "()", "\n", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "#", " Check", " if", " the", " file", " is", " a", " JSON", " file", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "                ", "#", " Read", " the", " JSON", " file", " into", " a", " Data", "Frame", "\n", "                ", "df", " =", " pd", ".", "read", "_", "json", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", "))", "\n", "\n", "                ", "#", " Add", " a", " \"", "source", "\"", " column", " with", " the", " filename", "\n", "                ", "df", "[", "\"", "source", "\"", "]", " =", " file", "\n", "\n", "                ", "#", " App", "end", " the", " Data", "Frame", " to", " the", " list", "\n", "                ", "data", "frames", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " Combine", " all", " the", " Data", "F", "rames", " into", " one", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "data", "frames", ")", "\n", "\n", "    ", "#", " Move", " the", " processed", " files", " to", " a", " \"", "processed", "\"", " sub", "directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", ":", "\n", "        ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "("], "logprobs": [-0.9825034737586975, -2.4149580001831055, -2.518073558807373, -1.3525097370147705, -0.05426192656159401, -0.24301329255104065, -0.390247106552124, -0.5182539820671082, -0.0064411889761686325, -4.887569048150908e-06, -0.4227710962295532, -0.000685576000250876, -2.8299925327301025, -0.23066647350788116, -0.0017532228957861662, -0.0020249830558896065, -0.0002299282787134871, -0.8709328770637512, -0.00026901919045485556, -0.022354984655976295, -1.2378822565078735, -0.018604421988129616, -0.11116408556699753, -0.29592365026474, -0.031207595020532608, -0.4678298234939575, -0.00010942813969450071, -0.006185317412018776, -0.4168415367603302, -5.364403477869928e-06, -0.00022265815641731024, -1.1920858014491387e-05, -0.020850399509072304, -0.00022146634000819176, -0.0007651500636711717, -0.004539778921753168, -0.00037746457383036613, -0.026524292305111885, -0.008070714771747589, -2.117128849029541, -0.43826159834861755, -1.6026122570037842, -0.2949129641056061, -0.032291412353515625, -0.004050979390740395, -0.8032114505767822, -0.6097015738487244, -0.00015233787416946143, -0.16096431016921997, -0.0024525821208953857, -0.10523728281259537, -1.311301275563892e-06, -0.00012599628826137632, 0.0, -0.00012742661056108773, -0.0001599660754436627, -5.8530047681415454e-05, -0.00019035911827813834, -0.33525776863098145, -0.0015325717395171523, -0.0032695666886866093, -0.8409774899482727, -0.06489256024360657, -0.11087006330490112, -0.0867028757929802, -1.4543427823809907e-05, -0.019342729821801186, -9.548207890475169e-05, -0.08108548074960709, -0.15284353494644165, -6.437280717364047e-06, -0.0011469698511064053, -0.0003784178989008069, -0.006799535825848579, -0.0012711548479273915, -2.615677833557129, -0.20354975759983063, -0.034209951758384705, -0.0005043664714321494, -0.00025817399728111923, -0.0004593271005433053, -0.007096561137586832, -0.0800209566950798, -0.6165918111801147, -0.002127052517607808, -0.07672087103128433, -0.08931434899568558, -0.12132316082715988, -0.009879383258521557, -0.06929820775985718, -0.006129751447588205, -0.03811531513929367, -0.0001472126314183697, -0.0015636371681466699, -0.016728131100535393, -0.0004172646440565586, -0.003991613630205393, -9.536738616588991e-07, 0.0, -1.1148035526275635, -0.0005436849314719439, -0.0012865131720900536, -0.0002401778765488416, -4.410734163684538e-06, -0.004685612861067057, -0.00013147920253686607, -0.0024289172142744064, -0.04716300964355469, -0.2546817362308502, -0.025524381548166275, -0.12300072610378265, -0.04644143581390381, -0.1296435296535492, -0.002312606666237116, -0.023020168766379356, -0.0007188120507635176, -0.024348974227905273, -0.00039498155820183456, -0.43400487303733826, -0.00431784288957715, -0.001774523756466806, -1.0490362910786644e-05, -0.06625539064407349, -2.753696753643453e-05, -6.639736966462806e-05, -0.005098673980683088, -0.13494078814983368, -2.50339189733495e-06, -1.645074735279195e-05, -2.9802276912960224e-06, -0.00018499570433050394, -9.047575440490618e-05, -0.00030119650182314217, -4.1126360883936286e-05, -0.0021613112185150385, -0.05944136530160904, -0.0013680632691830397, -0.08656120300292969, -0.0006817638641223311, -0.0009708458674140275, -2.178393602371216, -0.1115771234035492, -0.30837497115135193, -1.9859765768051147, -0.0013615157222375274, -0.0017246623756363988, -1.4562345743179321, -0.005151925142854452, -0.8401283621788025, -0.09582538157701492, -0.00019238528329879045, -0.01076462585479021, -0.12968948483467102, -9.97731985989958e-05, -0.0653623417019844, -0.0005373702733777463, -4.255681051290594e-05, -2.4199192921514623e-05, -0.05618919059634209, -0.006693916395306587, -0.007514070253819227, -0.0007522851810790598, -0.012804905883967876, -0.1912968009710312, -3.8265450712060556e-05, -0.010805548168718815, -0.011833823285996914, -0.001553996349684894, -0.0015338810626417398, -0.0006683023530058563, -0.005388379096984863, -0.033532921224832535, -0.0002165798214264214, -0.00048720886115916073, -5.125986263010418e-06, -8.34430247778073e-05, -3.814624506048858e-05, -8.332382276421413e-05, -0.0001618731184862554, -0.0002814135223161429, -7.354942499659956e-05, -0.04455023631453514, -0.32521310448646545, -0.03806884214282036, -2.780972957611084, -0.136421799659729, -0.3823913633823395, -0.003536995267495513, -8.40390202938579e-05, -1.1920928244535389e-07, -0.07986854016780853, -0.3626171052455902, -0.9681466817855835, -0.001212695729918778, -0.04152620583772659, -0.0004934046883136034, -0.09376351535320282, -0.0058810291811823845, -0.00030119650182314217, -7.152555099310121e-07, -0.0021000492852181196, -0.0003592322755139321, -0.00015484087634831667, -1.1920922133867862e-06, -1.0734143257141113, -0.05436580255627632, -0.01214572787284851, -0.0005789510905742645, -0.01140880398452282, -0.40535351634025574, -0.2571345269680023, -0.3737635910511017, -0.11558260768651962, -0.021195217967033386, -0.46260496973991394, -0.213748499751091, -0.002050679875537753, -0.001811888418160379, -0.0926203653216362, -0.007302142214030027, -0.018742604181170464, -0.00031764229061082006, -0.28643617033958435, -0.022042518481612206, -0.0001752223033690825, -5.960462772236497e-07, -1.5258672647178173e-05, -5.483612312673358e-06, -0.0012892514932900667, -0.01460092794150114, -0.05764629691839218, -6.437280717364047e-06, -1.0132738680113107e-05, -5.006777428206988e-06, -3.516612196108326e-05, -0.0007032066932879388, -0.0014748420799151063, -0.0003097769513260573, -0.01575193554162979, -0.0014722233172506094, -0.0005082983989268541, -5.209310256759636e-05, -0.00040141629870049655, -0.000105375460407231, -0.0013080621138215065, -0.009437589906156063, -8.344646857949556e-07, -0.3608804941177368, -7.152531907195225e-06, -0.00011097769311163574, -0.00022897482267580926, -1.7881377516459906e-06, -4.172316494077677e-06, -2.264974000354414e-06, -8.4638240878121e-06, -1.5735502529423684e-05], "finish_reason": "length"}], "metrics": {"energy": 948.0103169708242, "energy_per_token": 3.703165300667282, "time": 22.90132, "time_per_token": 0.08945828125}}
{"outputs": [{"text": "# Check if the directory path exists\n    if not os.path.exists(path):\n        return None\n\n    # Create the \"processed\" subdirectory\n    processed_dir = os.path.join(path, \"processed\")\n    if not os.path.exists(processed_dir):\n        os.mkdir(processed_dir)\n\n    # Initialize an empty DataFrame to hold the results\n    df = pd.DataFrame()\n\n    # Read each file alphabetically\n    files = os.listdir(path)\n    files.sort()\n    for filename in files:\n        if filename.endswith(\".json\"):\n            # Read the file into a DataFrame and add a \"Source\" column\n            with open(os.path.join(path, filename), \"r\") as f:\n                data = json.load(f)\n                new_df = pd.DataFrame(data)\n                new_df[\"Source\"] = os.path.splitext(filename)[0]\n\n            # Add the new DataFrame to the existing one\n            df = pd.concat([df, new_df", "tokens": ["#", " Check", " if", " the", " directory", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "return", " None", "\n", "\n", "    ", "#", " Create", " the", " \"", "processed", "\"", " sub", "directory", "\n", "    ", "processed", "_", "dir", " =", " os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "processed", "_", "dir", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "processed", "_", "dir", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " Data", "Frame", " to", " hold", " the", " results", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " Read", " each", " file", " alphabet", "ically", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "    ", "files", ".", "sort", "()", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "#", " Read", " the", " file", " into", " a", " Data", "Frame", " and", " add", " a", " \"", "Source", "\"", " column", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "new", "_", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "                ", "new", "_", "df", "[", "\"", "Source", "\"", "]", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "filename", ")[", "0", "]", "\n", "\n", "            ", "#", " Add", " the", " new", " Data", "Frame", " to", " the", " existing", " one", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " new", "_", "df"], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -1.2174828052520752, -2.3946533203125, -0.06799376755952835, -0.465165913105011, -0.0011738798348233104, -0.017921658232808113, -0.09643761068582535, -0.0016166010173037648, -1.9073468138230965e-06, -0.00020966715237591416, -1.4305012882687151e-05, -0.08229974657297134, -0.0005096090608276427, -0.0006930810050107539, -0.0010727847693488002, -0.0003610197745729238, -0.0034193878527730703, -2.535942554473877, -0.5516807436943054, -0.030521012842655182, -0.34939712285995483, -0.001032177242450416, -0.052742429077625275, -0.7982361316680908, -1.0927940607070923, -0.32258570194244385, -0.003214670345187187, -0.0010627818992361426, -0.23537041246891022, -0.001679201959632337, -1.839009165763855, -0.00012611546844709665, -0.27392181754112244, -0.00930106919258833, -0.42022305727005005, -0.0012303171679377556, -0.02273133210837841, -1.1920928244535389e-07, -7.271740287251305e-06, -2.264974000354414e-06, -0.000873065204359591, -0.0005919373361393809, -0.004085646942257881, -0.00027783826226368546, -0.5313719511032104, -0.0011794761521741748, -0.0004379982128739357, -6.258291978156194e-05, -0.00028391621890477836, -0.0007083290838636458, -2.0590198040008545, -0.00691639119759202, -3.302042750874534e-05, -3.576278118089249e-07, -5.364403477869928e-06, -1.9073468138230965e-06, -0.0041587776504457, -3.015949550899677e-05, -4.649054244509898e-05, -2.9802276912960224e-06, -3.576278118089249e-07, -9.476689592702314e-05, -5.829164365422912e-05, -0.00023588736075907946, -0.002728075487539172, -5.960462772236497e-07, -0.5502889752388, -4.851700214203447e-05, -2.2649508537142538e-05, -0.0001045410826918669, -8.106198947643861e-06, -9.536738616588991e-07, -4.100715523236431e-05, -0.00011955977242905647, -0.012740408070385456, -0.0005706112715415657, -0.023135144263505936, -1.504953384399414, -0.35519319772720337, -0.0012538912706077099, -0.2690523862838745, -0.0003698380314745009, -1.5579267740249634, -1.2922062873840332, -0.054493147879838943, -1.9679670333862305, -0.017777975648641586, -9.667406266089529e-05, -0.10492530465126038, -0.01524205319583416, -0.022346708923578262, -1.2755313036905136e-05, -0.0005864569102413952, -0.06457087397575378, -0.001953361788764596, -0.00937606394290924, -0.00013529339048545808, -0.0033135293051600456, -1.897886037826538, -0.17739208042621613, -1.5359776020050049, -1.5676910877227783, -4.6967357775429264e-05, -1.5190167427062988, -7.009260298218578e-05, -1.4157004356384277, -0.0020198675338178873, -1.454862117767334, -4.768370445162873e-07, -0.0011276798322796822, 0.0, -4.279521817807108e-05, -0.00024732868769206107, -0.0007077334448695183, -0.0011587579501792789, -0.00044919890933670104, -0.121236152946949, -0.04619400575757027, -0.00032014489988796413, -0.002189026679843664, -0.008878516033291817, -0.06988265365362167, -0.003974397201091051, -1.025625228881836, -2.5987286790041253e-05, -0.0015523299807682633, -0.0005411829333752394, -5.3165931603871286e-05, -0.001585775287821889, -1.1920616626739502, -0.11147432774305344, -0.015191449783742428, -0.022907277569174767, -2.622600959512056e-06, -2.3841855067985307e-07, -0.03309592232108116, -3.671578815556131e-05, -0.003327192971482873, -0.0008142255246639252, -7.867782187531702e-06, -0.01879408024251461, -0.002249093959107995, -0.001191978226415813, -1.312079906463623, -0.16523461043834686, -0.07111313194036484, -1.1405799388885498, -0.5299931168556213, -0.005744495894759893, -0.013190509751439095, -0.00020454221521504223, -2.020585775375366, -0.5247961282730103, -0.19459053874015808, -0.11599764972925186, -0.14962583780288696, -5.411955135059543e-05, -0.0011676882859319448, -0.06423498690128326, -0.000259723310591653, -0.7868648767471313, -6.0794889577664435e-05, -4.660974445869215e-05, -0.0022795426193624735, -8.344646857949556e-07, -2.861018856492592e-06, -8.344646857949556e-07, -1.3351351299206726e-05, -7.271740287251305e-06, -4.8040190449682996e-05, -7.867782187531702e-06, -0.00033968876232393086, -0.1712256520986557, -1.156323378381785e-05, -0.03974528983235359, -0.0020058290101587772, -0.00018785618885885924, -0.009192169643938541, -1.597391747054644e-05, -0.04410194233059883, -0.001616839086636901, -0.00026127262390218675, -0.00014053787162993103, -0.09247257560491562, -0.004447093699127436, -0.03460005670785904, -3.3378546504536644e-06, -0.0172383114695549, -1.2993727978027891e-05, -5.1377883210079744e-05, -0.00039664984797127545, -0.0022162655368447304, -0.8678720593452454, -3.47174334526062, -0.010082387365400791, -0.0261248666793108, -0.00010656742961145937, -0.000813034363090992, -2.0265558760002023e-06, -0.030547143891453743, -0.0026761216577142477, -0.000910225382540375, -0.110225610435009, -0.02905171737074852, -0.008870836347341537, -0.0032042134553194046, -3.814689989667386e-06, -2.825220326485578e-05, -0.08950185030698776, -5.185469490243122e-05, -0.7179856300354004, -1.645074735279195e-05, -7.152531907195225e-06, -1.811964830267243e-05, -2.9606363773345947, -1.9073468138230965e-06, -4.6491513785440475e-06, -4.529942543740617e-06, -1.172034502029419, -7.748573807475623e-06, 0.0, -0.00010835537250386551, -0.021567100659012794, -0.0010194348869845271, -0.0007229813490994275, -0.0007419217727147043, -0.09367808699607849, -0.3232092261314392, -0.06417864561080933, -0.005616834852844477, -2.173255681991577, -0.01116987969726324, -0.30241653323173523, -0.2445564717054367, -0.00018380382971372455, -0.004126368090510368, -0.0027903690934181213, -0.6599445343017578, -0.215253084897995, -0.02079365774989128, -0.0005183068569749594, -0.013551503419876099, -0.00030393750057555735, -0.010965798981487751, -2.264974000354414e-06, -2.288792165927589e-05, -0.00038235029205679893, -0.0004440752090886235, -5.340433563105762e-05, -0.0002944036095868796, -6.556489552167477e-06, -1.0251946150674485e-05], "finish_reason": "length"}], "metrics": {"energy": 933.3016355524059, "energy_per_token": 3.6457095138765854, "time": 22.269817, "time_per_token": 0.08699147265625}}
{"outputs": [{"text": "df = pd.DataFrame()\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n    files = sorted(os.listdir(path))\n\n    for file in files:\n        if file.endswith('.json'):\n            with open(os.path.join(path, file), 'r') as f:\n                data = json.load(f)\n            file_df = pd.json_normalize(data).assign(source=file)\n            df = pd.concat([df, file_df], ignore_index=True)\n\n    df.to_csv('processed.csv', index=False)\n\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.mkdir(processed_path)\n\n    for file in files:\n        if file.endswith('.json'):\n            os.replace(os.path.join(path, file), os.path.join(processed_path, file))\n\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "path", ")", "\n", "\n", "    ", "files", " =", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "file", "_", "df", " =", " pd", ".", "json", "_", "normal", "ize", "(", "data", ")", ".", "assign", "(", "source", "=", "file", ")", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " file", "_", "df", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "df", ".", "to", "_", "csv", "('", "processed", ".", "csv", "'", ",", " index", "=", "False", ")", "\n", "\n", "    ", "processed", "_", "path", " =", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "')", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "processed", "_", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "processed", "_", "path", ")", "\n", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "os", ".", "replace", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "processed", "_", "path", ",", " file", "))", "\n", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-2.0573697090148926, -0.03956311568617821, -0.05590493232011795, -3.302042750874534e-05, -0.02079167403280735, -0.13418743014335632, -0.05813872814178467, -0.16239280998706818, -1.2523788213729858, -0.4911498725414276, -0.005084797274321318, -1.1920922133867862e-06, -0.002769803162664175, -2.169585604860913e-05, -0.043810002505779266, -0.004288405645638704, -0.05720192566514015, -0.027201905846595764, -0.005364546552300453, -0.004944715183228254, -0.8722678422927856, -8.332382276421413e-05, -0.8065772652626038, -1.9073468138230965e-06, -0.0015720878727734089, -0.0008554374799132347, -0.0007934997556731105, -0.008842714130878448, -2.6893959045410156, -0.0028386320918798447, -1.943357229232788, -0.005980573128908873, -0.6639119386672974, -0.019111307337880135, -0.01856662705540657, -1.6689286894688848e-06, -0.0034123784862458706, -2.3841855067985307e-07, -0.00012742661056108773, -0.0007428746903315187, -0.014955775812268257, -0.013610657304525375, -1.8334664106369019, -0.00038413776201196015, -0.08638593554496765, -0.37170737981796265, -0.03618575260043144, -0.0026208360213786364, -0.0012049565557390451, -0.0006170752458274364, -0.010209479369223118, -1.029921531677246, -0.1793987900018692, -0.005466868635267019, -0.009266109205782413, -1.5735502529423684e-05, 0.0, -0.38904255628585815, -0.009017338976264, -0.0012487717904150486, -2.825220326485578e-05, -0.007831227965652943, -0.0018355678766965866, -0.003348578931763768, -0.19101499021053314, -7.760223525110632e-05, -0.0015468548517674208, -0.03586481139063835, -2.9802276912960224e-06, -6.329813186312094e-05, -2.7418097943154862e-06, -9.285972191719338e-05, -0.00038938093348406255, -0.00037353215157054365, -0.00014006110723130405, -0.00824452843517065, -0.17593637108802795, -7.772143726469949e-05, -0.012319658882915974, -0.0012323412811383605, -0.0029162520077079535, -1.9073304429184645e-05, -0.015678707510232925, -0.00279357866384089, -0.0005385617259889841, -0.0009426202741451561, -0.06865042448043823, -0.002930396469309926, -0.016176754608750343, -4.768360213347478e-06, -0.02693922258913517, -3.325883881188929e-05, -0.000105375460407231, -0.00040999590419232845, -0.000972036796156317, -1.05776846408844, -2.1850602626800537, -0.005861119367182255, -0.013506577350199223, -0.00031609306461177766, -0.0010306290350854397, -8.583032467868179e-06, -3.045133352279663, -0.007083777338266373, -0.0008600826840847731, -1.6927575416048057e-05, -0.002358514117076993, -0.0009497660794295371, -0.02125847339630127, -3.0392301082611084, -0.09332415461540222, -9.262132516596466e-05, -0.8633788824081421, -0.027052821591496468, -0.014800508506596088, -0.020847130566835403, -0.01855071261525154, -0.012494031339883804, -0.027006177231669426, -0.0010698077967390418, -0.01673235185444355, -4.529942543740617e-06, -8.5588610090781e-05, -0.0011742371134459972, -0.0023919325321912766, -0.00017307691450696439, -0.0029488196596503258, -1.0013530300057027e-05, -1.1086402082582936e-05, -0.19260890781879425, -4.768258077092469e-05, -0.07256829738616943, -9.536738616588991e-07, -2.3841830625315197e-06, -0.0006249382277019322, -0.005085746292024851, -0.01905703917145729, -0.002646992914378643, -0.8918222188949585, -0.5161114931106567, -1.8324110507965088, -0.10238263756036758, -0.14389945566654205, -1.0490362910786644e-05, -0.1471056491136551, -0.3004441559314728, -0.4660039246082306, -0.840303897857666, -0.009159568697214127, -0.14179439842700958, -0.000602421467192471, -0.040994517505168915, -0.0020503229461610317, -0.004347516223788261, -0.022075751796364784, -0.010917219333350658, -0.6237015128135681, -0.04886414110660553, -2.2635953426361084, -0.028598157688975334, -0.8599446415901184, -0.0003620922507252544, -0.03808502107858658, -2.3841855067985307e-07, -9.703165414975956e-05, -3.2186455882765586e-06, -0.0018329500453546643, -0.013852526433765888, -0.011891547590494156, -0.0009126074146479368, -0.030593276023864746, -0.0017733338754624128, -0.001901843468658626, -0.0008156548719853163, -0.05277330428361893, -0.3797045052051544, -0.03764277324080467, -8.880697714630514e-05, -1.5497195136049413e-06, -3.2782016205601394e-05, -1.3470558769768104e-05, -0.002302140463143587, -0.0002723561483435333, -0.0007382289622910321, -1.5020257706055418e-05, -7.390948667307384e-06, -0.00029738296871073544, -0.00017081231635529548, -0.001176618505269289, -0.0012341272085905075, -1.4305104514278355e-06, -0.014602337963879108, -2.7418097943154862e-06, -0.002991132438182831, -0.0009438112610951066, -3.58813522325363e-05, -3.576278118089249e-07, -0.0002329078270122409, -0.00019691436318680644, -0.0869339257478714, -0.0009353553177788854, -0.08388836681842804, -0.010706601664423943, -0.0004502712981775403, -0.0173968318849802, -0.0004505096294451505, -8.654219709569588e-05, -0.0005732323625124991, -0.08878707885742188, -0.00798521563410759, -0.0012015035608783364, -0.0003500564198475331, -9.298280929215252e-06, -3.576278118089249e-07, -0.0009171332349069417, -0.000735608336981386, -0.0025156063493341208, -6.318072337307967e-06, -0.004217658657580614, -4.6132929128361866e-05, -0.0005813338793814182, -1.3962140083312988, -2.622600959512056e-06, -1.4063869714736938, -0.00010883215873036534, -0.006440004333853722, -6.6756979322235566e-06, -2.5152843591058627e-05, -2.622600959512056e-06, -4.672895011026412e-05, -0.00030322244856506586, -0.00010692501382436603, -7.223821739898995e-05, -0.001510551548562944, -0.00014423283573705703, -4.136476854910143e-05, -0.004516875371336937, -3.2186455882765586e-06, -4.6491513785440475e-06, -7.390948667307384e-06, -3.0040289857424796e-05, -0.0006058764411136508, -0.027900390326976776, -1.549708758830093e-05, -7.748573807475623e-06, -0.0005225961795076728, -0.004797258414328098, -0.0005830018781125546, -0.012780660763382912, -0.08887248486280441, -0.013505049049854279, -0.05445002391934395, -0.00485254218801856, -0.17818862199783325, -0.012088489718735218, -0.8244450688362122], "finish_reason": "stop"}], "metrics": {"energy": 922.993434337615, "energy_per_token": 3.6054431028813085, "time": 22.058695, "time_per_token": 0.08616677734375}}
{"outputs": [{"text": "os.makedirs(path, exist_ok=True)  # Make the path if it doesn't exist\n    os.makedirs(os.path.join(path, \"processed\"), exist_ok=True)  # Create the subdirectory\n    df = pd.DataFrame(\n        [], columns=[\"a\", \"b\", \"source\"]\n    )  # Initialize an empty DataFrame with columns \"a\", \"b\", and \"source\"\n    for filename in sorted(os.listdir(path)):  # Iterate through filenames in path\n        if filename.endswith(\".json\"):  # Process only JSON files\n            with open(os.path.join(path, filename), \"r\") as f:  # Open each JSON file\n                data = json.load(f)  # Load the data from the JSON file\n                data_df = pd.DataFrame(data)  # Convert the data to a DataFrame\n                data_df.insert(2, \"source\", filename)  # Insert a \"source\" column with the filename\n                df = pd.concat", "tokens": ["os", ".", "m", "aked", "irs", "(", "path", ",", " exist", "_", "ok", "=", "True", ")", "  ", "#", " Make", " the", " path", " if", " it", " doesn", "'", "t", " exist", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ")", ",", " exist", "_", "ok", "=", "True", ")", "  ", "#", " Create", " the", " sub", "directory", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "\n", "        ", "[]", ",", " columns", "=[", "\"", "a", "\"", ",", " \"", "b", "\"", ",", " \"", "source", "\"", "]", "\n", "    ", ")", "  ", "#", " Initialize", " an", " empty", " Data", "Frame", " with", " columns", " \"", "a", "\"", ",", " \"", "b", "\"", ",", " and", " \"", "source", "\"", "\n", "    ", "for", " filename", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "  ", "#", " Iter", "ate", " through", " fil", "en", "ames", " in", " path", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "  ", "#", " Process", " only", " JSON", " files", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "  ", "#", " Open", " each", " JSON", " file", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "  ", "#", " Load", " the", " data", " from", " the", " JSON", " file", "\n", "                ", "data", "_", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "  ", "#", " Convert", " the", " data", " to", " a", " Data", "Frame", "\n", "                ", "data", "_", "df", ".", "insert", "(", "2", ",", " \"", "source", "\"", ",", " filename", ")", "  ", "#", " Insert", " a", " \"", "source", "\"", " column", " with", " the", " filename", "\n", "                ", "df", " =", " pd", ".", "concat"], "logprobs": [-2.336803913116455, -0.0003922408213838935, -0.145692840218544, -9.536697689327411e-06, -0.00035589560866355896, -0.0004520586517173797, -0.7173481583595276, -0.11592418700456619, -0.0028736984822899103, -3.6954811548639555e-06, -9.417489309271332e-06, -0.007949027232825756, -0.0007738456479273736, -0.00043990471749566495, -2.7768073081970215, -0.00024256148026324809, -3.4454314708709717, -0.8965036273002625, -0.9024856090545654, -0.18450134992599487, -0.0052004302851855755, -0.043763790279626846, -0.00026520551182329655, -4.660974445869215e-05, -0.009840548038482666, -0.18060609698295593, -0.09902749210596085, -2.4309756755828857, -0.00017069313616957515, -0.3040420711040497, -8.21318244561553e-05, -5.006777428206988e-06, -0.009652843698859215, -0.11409644037485123, -3.576272320060525e-06, -0.00013636612857226282, -2.145764938177308e-06, -0.0008424547268077731, -0.0012748456792905927, -0.0023290193639695644, -0.0009652484441176057, -1.001493215560913, -0.0033557077404111624, -0.0010451575508341193, -0.002875124802812934, -8.511180931236595e-05, -0.002567211864516139, -7.152531907195225e-06, -1.1920928244535389e-07, -0.0002177716523874551, -0.0001842805795604363, -6.603976362384856e-05, -0.12485437095165253, -1.966933996300213e-05, -2.163421630859375, -1.3418954610824585, -2.662520408630371, -0.023917021229863167, -0.3097846508026123, -0.4541529715061188, -0.6883689761161804, -0.04435194283723831, -0.03390243276953697, -7.986990567587782e-06, -0.02991078421473503, -2.186466693878174, -2.2422738075256348, -0.0036077904514968395, -0.8461467027664185, -0.18694475293159485, -0.8591049909591675, -0.05266157165169716, -0.0251823328435421, -0.1487962305545807, -0.00013386306818574667, -0.0009848987683653831, -0.0007183355046436191, -0.00016234986833296716, -2.5987286790041253e-05, -0.3801670968532562, -0.001016695867292583, -0.16255484521389008, -0.0005135409301146865, -0.00689496286213398, -0.012158211320638657, -0.00019870213873218745, -2.50339189733495e-06, -0.003240930614992976, -2.2649508537142538e-05, -0.7110810279846191, -0.13555671274662018, -0.00023707917716819793, -0.03216813504695892, -0.0002996472467202693, -0.042445242404937744, -2.373244524002075, -0.8316910862922668, -0.006267772056162357, -0.00618140771985054, -0.016786862164735794, -0.0019873883575201035, -0.0001387499796692282, -0.0001551984460093081, -0.036015577614307404, -0.08590208739042282, -0.0008976006065495312, -0.0181463323533535, -0.002557461615651846, -0.009657330811023712, -0.19042934477329254, -0.3667556345462799, -0.6435003876686096, -0.00022837892174720764, -0.09415927529335022, -0.0005739472107961774, -0.07149488478899002, -1.4305104514278355e-06, -0.00021860594279132783, 0.0, -2.7894584491150454e-05, -0.0024586468935012817, -0.0044478061608970165, -0.0005404680268839002, -0.4689437448978424, -2.264974000354414e-06, -1.6387324333190918, -0.0010468247346580029, -1.1831268072128296, -2.438908576965332, -2.8013790142722428e-05, -1.1920922133867862e-06, -0.4613385796546936, -2.633981943130493, -0.049532461911439896, -0.00045217780279926956, -0.2303723394870758, -0.19417959451675415, -0.007826733402907848, -0.02459314651787281, -2.3483953555114567e-05, -3.576278118089249e-07, -0.001140778069384396, -0.02517477609217167, -0.0072260452434420586, -0.0009445258183404803, -1.1444026313256472e-05, -0.022557221353054047, -0.12604083120822906, -2.9802276912960224e-06, -1.098457932472229, -0.24959467351436615, -0.1557256281375885, -0.0038904468528926373, -0.007550156209617853, -0.0004385939973872155, -0.274619460105896, -0.00034421717282384634, -5.2927523938706145e-05, -0.0668446272611618, -1.6689286894688848e-06, -8.106198947643861e-06, -1.1920928244535389e-07, -3.886147169396281e-05, -1.549708758830093e-05, -0.0001954841281985864, -1.6093124941107817e-05, -0.00018726025882642716, -0.22575026750564575, -9.679325739853084e-05, -0.006693205796182156, -0.004841035231947899, -0.0011002921964973211, -0.007409591227769852, -0.00018654513405635953, -0.08081415295600891, -0.003605177393183112, -0.9637737274169922, -1.1324817933200393e-05, -0.40055403113365173, -1.7786672115325928, -1.1953485012054443, -0.003615867579355836, -0.1048494204878807, -0.00019774865359067917, -0.2892478108406067, -0.007566128391772509, -0.0207037515938282, -2.8013790142722428e-05, -0.023462289944291115, -1.7762025890988298e-05, -0.07517034560441971, -0.0010324153117835522, -0.07058040052652359, -2.861018856492592e-06, -0.8556725978851318, -0.3463207483291626, -0.6226213574409485, -1.0446854829788208, -0.25248226523399353, -1.4553444385528564, -0.004257899709045887, -0.03183158114552498, -0.02897239290177822, -2.5370264053344727, -0.3070826530456543, -0.17592637240886688, -0.00016175392374861985, -0.013007081113755703, -1.3828182090946939e-05, -0.02383449673652649, -0.011742519214749336, -0.4996396005153656, -0.15507259964942932, -0.01988932304084301, -3.814689989667386e-06, -0.09530651569366455, -0.20886573195457458, -0.09469684213399887, -0.1490033119916916, -0.0052758511155843735, -0.007220246363431215, -0.0006399490521289408, -0.001870788517408073, -0.0016916978638619184, -0.04639921709895134, -9.226373367710039e-05, -0.00032300499151460826, -1.4410731792449951, -0.03917023912072182, -0.0001387499796692282, -1.7802023887634277, -6.97350042173639e-05, -0.0040368507616221905, -0.025016436353325844, -6.90197994117625e-05, -1.8954096958623268e-05, -0.04059327766299248, -0.010870995931327343, -0.010721933096647263, -7.390948667307384e-06, -0.057639095932245255, -1.1863049268722534, -0.5451756715774536, -0.06633470952510834, -0.00010346830822527409, -0.0011121999705210328, -0.7636805176734924, -0.20393550395965576, -0.018453583121299744, -0.017726914957165718, -0.0018866135505959392, -0.04009556397795677, -0.0019035092554986477, -0.043763451278209686, -1.1920922133867862e-06, -4.684815212385729e-05], "finish_reason": "length"}], "metrics": {"energy": 914.68080036068, "energy_per_token": 3.5729718764089062, "time": 22.065508, "time_per_token": 0.086193390625}}
{"outputs": [{"text": "files = os.listdir(path)\n    files.sort()\n    df = pd.DataFrame()\n    for file in files:\n        with open(os.path.join(path, file), \"r\") as f:\n            data = json.load(f)\n        df = pd.concat([df, pd.DataFrame(data)])\n        df[\"source\"] = file\n        os.rename(os.path.join(path, file), os.path.join(path, \"processed\", file))\n    return df", "tokens": ["files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "    ", "files", ".", "sort", "()", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", "(", "data", ")]", ")", "\n", "        ", "df", "[", "\"", "source", "\"", "]", " =", " file", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ",", " file", "))", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-3.0174803733825684, -0.007623625919222832, -1.6570788621902466, -1.5497195136049413e-06, -0.009669726714491844, -1.1086402082582936e-05, -0.00037925204378552735, -0.001861388562247157, -0.0008418591460213065, -0.04211830347776413, -0.01463863905519247, -0.4242894947528839, -0.2856428921222687, -0.00032491172896698117, -0.010299154557287693, -0.057744309306144714, -0.19854548573493958, -0.1960367113351822, -0.054643839597702026, -0.03641509637236595, -1.4781842764932662e-05, -0.013114153407514095, -0.12737052142620087, -0.008971618488430977, -0.07866796106100082, -0.06750605255365372, -0.32740503549575806, -0.01395892072468996, -0.0030095544643700123, -0.0012197205796837807, -0.0004468158003874123, -0.003612779313698411, -0.8915784955024719, -0.00011491115583339706, -0.0016514724120497704, -0.05963646247982979, -3.4570634852570947e-06, -5.6980417866725475e-05, -5.602820692729438e-06, -6.854299135738984e-05, -0.00032646095496602356, -0.00023588736075907946, -9.738924563862383e-05, -0.00912578497081995, -0.27003929018974304, -7.939023635117337e-05, -2.4203388690948486, -0.004090039525181055, -0.0004986473359167576, -0.00692456029355526, -9.65590606938349e-06, -0.024298131465911865, -0.0045374054461717606, -0.001879355520941317, -0.0006378046819008887, -0.09391588717699051, -0.0028855851851403713, -0.037226058542728424, -4.768360213347478e-06, -0.0321793295443058, -2.8729025871143676e-05, -0.00014840454969089478, -0.0006051616510376334, -0.0010087168775498867, -1.0387786626815796, -0.4109475910663605, -0.39440077543258667, -0.472176194190979, -3.933898824470816e-06, -0.012965190224349499, -0.026119988411664963, -0.008585919626057148, -0.0006225554971024394, -0.0025766051840037107, -1.5020257706055418e-05, -0.12495053559541702, -0.017102498561143875, -0.0017642899183556437, -0.13459961116313934, -0.3006986379623413, -0.0076275295577943325, -0.025229061022400856, -0.07157467305660248, -1.5957696437835693, -0.00030524839530698955, -0.19167941808700562, -0.001100173220038414, -0.0002580548170953989, -0.0003535122668836266, -0.021863972768187523, -0.014974096789956093, -0.7777027487754822, -0.7844609022140503, -3.6238969187252223e-05, -0.575676441192627, -0.0003782987187150866, -0.06380024552345276, -5.364403477869928e-06, -5.1616290875244886e-05, -9.179073458653875e-06, -5.054346183896996e-05, -0.00010418349120300263, -0.0004893536097370088, -0.00010287232726113871, -0.010196617804467678, -0.0003073934931308031, -8.082063141046092e-05, -0.014216337352991104, -2.3841830625315197e-06, -2.253030106658116e-05, -2.50339189733495e-06, -9.715084888739511e-05, -0.001280560391023755, -0.029576944187283516, -0.010856609791517258, -0.14466100931167603, -0.02220587618649006, -0.05532737076282501, -0.013040851801633835, -0.017169294878840446, -0.004218133166432381, -0.004195697605609894, -0.018977386876940727, -0.10130274295806885, -0.0017540559638291597, -0.1252128928899765, -0.04783587530255318, -2.2588860988616943], "finish_reason": "stop"}], "metrics": {"energy": 441.10163708496077, "energy_per_token": 3.446106539726256, "time": 10.940537, "time_per_token": 0.0854729453125}}
{"outputs": [{"text": "# Check that path is a directory and create 'processed' directory\n    if not os.path.isdir(path):\n        os.makedirs(path)\n    if not os.path.isdir(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n\n    # Read all JSON files in the directory\n    files = sorted(os.listdir(path))\n    df = pd.DataFrame()\n    for file in files:\n        # Skip processed files\n        if file in os.listdir(os.path.join(path, 'processed')):\n            continue\n        # Read file, insert a 'Source' column, and append to DataFrame\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n        df = pd.concat([df, pd.DataFrame(data, columns=['a', 'b']).assign(source=file)], ignore_index=True)\n        # Move file to 'processed' directory\n        os.rename(os.path.", "tokens": ["#", " Check", " that", " path", " is", " a", " directory", " and", " create", " '", "processed", "'", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "\n", "    ", "#", " Read", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "files", " =", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Skip", " processed", " files", "\n", "        ", "if", " file", " in", " os", ".", "list", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "            ", "continue", "\n", "        ", "#", " Read", " file", ",", " insert", " a", " '", "Source", "'", " column", ",", " and", " append", " to", " Data", "Frame", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "a", "'", ",", " '", "b", "'])", ".", "assign", "(", "source", "=", "file", ")]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "        ", "#", " Move", " file", " to", " '", "processed", "'", " directory", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", "."], "logprobs": [-0.9825034737586975, -1.2898244857788086, -2.8533921241760254, -1.2982454299926758, -1.3178887367248535, -0.21285761892795563, -0.49023112654685974, -1.1556074619293213, -0.8711681365966797, -3.5679450035095215, -0.013819606974720955, -0.00555744394659996, -1.9772751331329346, -1.1802932024002075, -0.0017854715697467327, -0.17439574003219604, -0.19140194356441498, -0.00686856172978878, -1.5497195136049413e-06, -0.00048411093303002417, -1.4543427823809907e-05, -0.9278952479362488, -0.00017796363681554794, -0.0023206942714750767, -0.0021128966473042965, -0.0075710974633693695, -0.002469349419698119, -0.003371034050360322, -0.3203468918800354, -9.775113539944869e-06, -0.9517573118209839, -1.3828182090946939e-05, -5.2927523938706145e-05, -0.0014882928226143122, -0.01076993253082037, -0.020488178357481956, -0.011332194320857525, -0.07489342242479324, -0.8556068539619446, -0.024402374401688576, -0.0018171241972595453, -1.311301275563892e-06, -0.0003134713042527437, -6.079655122448457e-06, -0.36387693881988525, -0.00027414379292167723, -0.005315931048244238, -0.03601178526878357, -7.033323527139146e-06, -1.3470558769768104e-05, -1.7881377516459906e-06, -0.00013350549852475524, -0.0005214046686887741, -0.0005621521850116551, -0.0006098079611547291, -0.12684929370880127, -0.0006431656656786799, -0.0007761088781990111, -0.00018571082910057157, -0.000625176471658051, -0.0011840007500723004, -0.0004979324294254184, -2.9802276912960224e-06, -0.07000581175088882, -3.099436753473128e-06, -6.079655122448457e-06, -0.00034433635300956666, -0.0002406545972917229, -1.7881377516459906e-06, -2.0265558760002023e-06, -7.152555099310121e-07, -3.075552376685664e-05, -0.00011085849109804258, -4.95898348162882e-05, -0.00013028726971242577, -0.00040928093949332833, -2.407998726994265e-05, -3.6954195820726454e-05, -0.0006210067658685148, -0.2818099856376648, -0.0009117737063206732, -0.030232485383749008, -1.1809194087982178, -1.7617416381835938, -0.389720618724823, -0.0036151548847556114, -0.2500074505805969, -0.875580906867981, -0.2107151299715042, -1.5247610807418823, -0.00010108436981681734, -0.6553112268447876, -0.0010448002722114325, -1.080607533454895, -0.08609132468700409, -0.04343442991375923, -5.245195097813848e-06, -0.016721565276384354, -4.768370445162873e-07, -5.3881147323409095e-05, -0.0013548490824177861, -0.007728437427431345, -0.013280270621180534, -0.04346262291073799, -1.2669117450714111, -0.09487932920455933, -0.07265809178352356, -1.7046782886609435e-05, -0.028308726847171783, -0.14383307099342346, -0.011393246240913868, -0.048575177788734436, -0.011650852859020233, -0.3470555245876312, -0.015253793448209763, -0.002918510464951396, -0.0007321537705138326, -0.0003133521240670234, -0.0022061550989747047, -1.8730990886688232, -1.1423059701919556, -1.55281662940979, -0.07520794123411179, -0.14698843657970428, -0.0001323135511483997, -0.004297308158129454, -0.5897189974784851, -2.225435256958008, -0.023089248687028885, -1.1801649634435307e-05, -5.566918844124302e-05, 0.0, -0.0026052603498101234, -0.003095242427662015, -2.0265558760002023e-06, -1.549708758830093e-05, -1.4305104514278355e-06, -2.1815061700181104e-05, -0.0003968881501350552, -3.397406908334233e-05, -4.7444173105759546e-05, -0.002961418591439724, -6.508615479106084e-05, -0.0002908283786382526, -0.01896241493523121, -0.00225242436863482, -0.0008606782066635787, -0.010148354806005955, -0.000311802898067981, -0.2852950394153595, -0.23332220315933228, -0.23115873336791992, -1.9618964195251465, -3.3542392253875732, -1.5457370281219482, -3.02886962890625, -1.7969591617584229, -0.23287427425384521, -0.0009204680100083351, -0.006242894101887941, -0.3516598641872406, -0.2690516412258148, -0.4028429687023163, -0.053600262850522995, -0.5707352161407471, -0.0014256800059229136, -0.001468176138587296, -0.00024244230007752776, -0.28432604670524597, -8.630380034446716e-05, -0.00029130507027730346, -0.002905910834670067, -1.1920922133867862e-06, -8.34461570775602e-06, -1.1920928244535389e-07, -5.972207145532593e-05, -0.00010215714428341016, -4.172238186583854e-05, -5.245071224635467e-05, -0.0012300790986046195, -0.14883434772491455, -1.8000440832111053e-05, -0.007418938912451267, -0.0012634160229936242, -0.0063697644509375095, -4.291525328881107e-06, -0.005275258328765631, -0.0026353413704782724, -0.0002320735511602834, -0.0009529816452413797, -0.1752263754606247, -0.0013399679446592927, -0.01807257905602455, -2.622600959512056e-06, -0.03151882812380791, -2.47952248173533e-05, -9.321732068201527e-05, -0.0004119024670217186, -0.0010559941874817014, -0.4450554847717285, -0.37880048155784607, -0.22653183341026306, -0.7798947095870972, -5.006777428206988e-06, -0.0022977397311478853, -0.0039245267398655415, -0.005188096780329943, -0.0003968881501350552, -0.004925142508000135, -5.245195097813848e-06, -0.06307726353406906, -0.037875574082136154, -0.001485078944824636, -0.8640784621238708, -0.13943897187709808, -0.5289406180381775, -0.03583088517189026, -0.001727875554934144, -1.7762025890988298e-05, -0.011980482377111912, -0.0002896366349887103, -0.5311256647109985, -0.0031663067638874054, -0.1269138753414154, -0.000504723924677819, -0.36963918805122375, -0.030191771686077118, -0.010415483266115189, -0.015390913002192974, -0.23845578730106354, -0.061872147023677826, -3.2186455882765586e-06, -1.7881377516459906e-06, -0.00036435641231946647, -0.0013658013194799423, -0.011776214465498924, -0.0016126735135912895, -0.16947922110557556, -0.015588223934173584, -0.013046969659626484, -0.2698476314544678, -0.004767479375004768, -0.26683154702186584, -0.00029702542815357447, -0.0025285673327744007, -0.1253896802663803, -0.02576420083642006, -0.0004732680681627244, -2.379495143890381, -9.179073458653875e-06, -0.040849536657333374, -6.97350042173639e-05, -0.0037068482488393784, -1.4543427823809907e-05, -3.0040289857424796e-05, -1.7881377516459906e-06], "finish_reason": "length"}], "metrics": {"energy": 907.938716911317, "energy_per_token": 3.546635612934832, "time": 22.065138, "time_per_token": 0.0861919453125}}
{"outputs": [{"text": "if not os.path.exists(path):\n        os.makedirs(path)\n\n    files = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    files.sort()\n\n    df = pd.DataFrame()\n\n    for f in files:\n        if f.endswith('.json'):\n            df_file = pd.read_json(os.path.join(path, f))\n            df_file.insert(len(df_file.columns), 'source', f)\n            df = pd.concat([df, df_file], ignore_index=True)\n\n    os.makedirs(os.path.join(path, 'processed'), exist_ok=True)\n    for f in files:\n        if f.endswith('.json'):\n            shutil.move(os.path.join(path, f), os.path.join(path, 'processed', f))\n\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "path", ")", " if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "path", ",", " f", "))", "]", "\n", "    ", "files", ".", "sort", "()", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "if", " f", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "df", "_", "file", " =", " pd", ".", "read", "_", "json", "(", "os", ".", "path", ".", "join", "(", "path", ",", " f", "))", "\n", "            ", "df", "_", "file", ".", "insert", "(", "len", "(", "df", "_", "file", ".", "columns", ")", ",", " '", "source", "'", ",", " f", ")", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "file", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "')", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "if", " f", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " f", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " f", "))", "\n", "\n", "    ", "return", " df"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -0.576907753944397, -4.005352093372494e-05, -0.6376020908355713, -3.158996332786046e-05, -3.528532761265524e-05, -0.00033122775494121015, -0.0036448491737246513, -0.010500420816242695, -0.010468924418091774, -0.9789319634437561, -0.0012362702982500196, -1.6240190267562866, -0.003584034275263548, -1.8746410608291626, -0.37118080258369446, -0.01091780886054039, -0.00046039948938414454, -1.2516897186287679e-05, -0.1532149612903595, -1.4305104514278355e-06, -0.0007969540893100202, -1.1920922133867862e-06, -0.00021908267808612436, -0.0006412595394067466, -0.003000759519636631, -0.0026020498480647802, -1.2649869918823242, -4.410734163684538e-06, -9.417489309271332e-06, -5.364403477869928e-06, -0.013803616166114807, -9.059495641849935e-05, -0.0002706876548472792, -0.010321571491658688, -3.576278118089249e-07, -2.098061486321967e-05, -1.311301275563892e-06, -2.9205850296420977e-05, -2.8729025871143676e-05, -0.00010430268594063818, -6.401333666872233e-05, -0.001665277755819261, -0.00023326536756940186, -0.9759686589241028, -0.003582014935091138, -0.07452691346406937, -0.18813084065914154, -0.12167534232139587, -0.00014506718434859067, -0.017358170822262764, -0.05317149683833122, -0.1508021503686905, -0.00018106251081917435, -0.7017560005187988, -0.06850828975439072, -0.03539833799004555, -3.099436753473128e-06, -0.025271952152252197, -0.1587744951248169, -0.009703846648335457, -1.0642108917236328, -8.237022848334163e-05, -0.020427795127034187, -1.4361498355865479, -0.03748800605535507, -0.0007018963224254549, -0.00031323294388130307, -0.00018046658078674227, -0.002495629247277975, -1.6042330265045166, -0.15373682975769043, -0.010989970527589321, -0.022361978888511658, -1.0609570381348021e-05, 0.0, -0.2966063618659973, -0.005909115541726351, -0.0009115354623645544, -2.2172682292875834e-05, -0.008046590723097324, -0.000653411028906703, -0.0009865660686045885, -2.7473111152648926, -0.5338867902755737, -0.5996934771537781, -0.0009843033039942384, -0.008826998993754387, -3.099436753473128e-06, -0.3790191113948822, -2.7179348762729205e-05, -0.00019000156316906214, -0.006108305882662535, -0.010455476120114326, 0.0, -1.07287787614041e-05, -1.6689286894688848e-06, -4.9828242481453344e-05, -0.00035958975786343217, -0.00018273114983458072, -5.781483559985645e-05, -0.00206864345818758, -0.32241886854171753, -0.0052198790945112705, -0.0037137367762625217, -0.008948462083935738, -0.010923822410404682, -0.00026854246971197426, -0.9576461315155029, -0.012473545968532562, -0.0005315321614034474, -1.9348326921463013, -1.4781842764932662e-05, -0.00013159839727450162, -0.011707526631653309, -2.706014311115723e-05, -0.0006671110168099403, -7.462222856702283e-05, -0.0005942009738646448, -0.0013715155655518174, -0.1539381891489029, -0.26648861169815063, -0.0008917645900510252, -6.794698856538162e-05, -0.07933758199214935, -0.00678130192682147, -0.006910472176969051, -0.007327703759074211, -0.011728852055966854, -0.0040008751675486565, -0.08996250480413437, -8.344646857949556e-07, -1.2993727978027891e-05, -0.0005160430446267128, -3.528532761265524e-05, -0.0008406681008636951, -0.00044824567157775164, -0.0007201223634183407, -1.3232143828645349e-05, -0.40184909105300903, -2.2291887944447808e-05, -0.15167945623397827, -2.145764938177308e-06, -2.7418097943154862e-06, -0.0011268462985754013, -0.017241239547729492, -0.018337715417146683, -0.0017387047410011292, -0.724266529083252, -0.3484741151332855, -1.4787201881408691, -2.777537883957848e-05, -0.06547746062278748, -5.960462772236497e-07, -1.2159273865108844e-05, -0.31579890847206116, -0.0053206742741167545, -3.099436753473128e-06, -9.179073458653875e-06, -3.2186455882765586e-06, -8.380061626667157e-05, -0.0030163289047777653, -0.001359372865408659, -0.0008607972995378077, -0.02607004903256893, -0.0015566148795187473, -0.013123801909387112, -5.280832192511298e-05, -0.00015793983766343445, -8.344646857949556e-07, -3.933898824470816e-06, -0.0009270184673368931, -0.00015948931104503572, -0.0002544794406276196, -0.0025113255251199007, -1.0225062370300293, -0.3065490126609802, -0.10662897676229477, -0.003561940509825945, -0.014382858760654926, -0.0005457103834487498, -5.113947918289341e-05, -0.0003651905863080174, -0.08686387538909912, -0.01955668069422245, -0.0010750473011285067, -0.00025567124248482287, -5.960462772236497e-07, 0.0, -0.0003352795320097357, -0.00067223358200863, -0.0011129144113510847, -7.271740287251305e-06, -0.004920516163110733, -7.509902934543788e-05, -0.00045372682507149875, -0.20563185214996338, -5.602820692729438e-06, -2.0265558760002023e-06, -0.0010967198759317398, -1.811964830267243e-05, -0.002406084444373846, -1.7881377516459906e-06, -7.033323527139146e-06, -3.2186455882765586e-06, -1.490105023549404e-05, -6.913899414939806e-05, -3.564294092939235e-05, -2.1457441107486375e-05, -0.00021264675888232887, -5.1973900554003194e-05, -1.4066597032069694e-05, -0.0016350485384464264, -4.768370445162873e-07, -1.0728830375228426e-06, -3.6954811548639555e-06, -1.5139465176616795e-05, -0.00043811736395582557, -0.0003461238811723888, -5.757642793469131e-05, -0.0009964506607502699, -3.0517112463712692e-05, -0.16410218179225922, -0.00016437610611319542, -0.000597179401665926, -0.0009210634743794799, -0.0034006168134510517, -0.045382656157016754, -0.002165474696084857, -0.01935442164540291, -0.000987756997346878], "finish_reason": "stop"}], "metrics": {"energy": 864.1508577365871, "energy_per_token": 3.5708713129611036, "time": 20.816153, "time_per_token": 0.08601716115702479}}
{"outputs": [{"text": "# Check if the path exists, if not, create it\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n    # Get the list of files in the directory\n    files = os.listdir(path)\n    files = [f for f in files if f.endswith('.json')]\n    files.sort()\n\n    # Initialize an empty list to store the DataFrames\n    dfs = []\n\n    # Loop through each file\n    for f in files:\n        # Read the file into a DataFrame\n        with open(os.path.join(path, f), 'r') as infile:\n            data = json.load(infile)\n            df = pd.DataFrame(data)\n            # Insert a \"Source\" column with the filename\n            df.insert(0, 'source', f)\n            # Append the DataFrame to the list\n            dfs.append(df)\n\n    # Concatenate the DataFrames into a single DataFrame\n    df = pd.concat(dfs)\n\n    # Move the processed files to", "tokens": ["#", " Check", " if", " the", " path", " exists", ",", " if", " not", ",", " create", " it", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "#", " Get", " the", " list", " of", " files", " in", " the", " directory", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "    ", "files", " =", " [", "f", " for", " f", " in", " files", " if", " f", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "    ", "files", ".", "sort", "()", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " Data", "F", "rames", "\n", "    ", "d", "fs", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", "\n", "    ", "for", " f", " in", " files", ":", "\n", "        ", "#", " Read", " the", " file", " into", " a", " Data", "Frame", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " f", ")", ",", " '", "r", "')", " as", " in", "file", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "in", "file", ")", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "#", " Insert", " a", " \"", "Source", "\"", " column", " with", " the", " filename", "\n", "            ", "df", ".", "insert", "(", "0", ",", " '", "source", "'", ",", " f", ")", "\n", "            ", "#", " App", "end", " the", " Data", "Frame", " to", " the", " list", "\n", "            ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " the", " Data", "F", "rames", " into", " a", " single", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ")", "\n", "\n", "    ", "#", " Move", " the", " processed", " files", " to"], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -0.4213058650493622, -0.06241043657064438, -2.411020040512085, -0.4953550100326538, -0.10539446771144867, -0.6708149313926697, -0.17832009494304657, -0.12816596031188965, -0.10625077039003372, -0.0006529344827868044, -0.02150060050189495, -0.012455886229872704, -0.0009891861118376255, -1.1920922133867862e-06, -0.00011860620725201443, -1.966933996300213e-05, -0.008354004472494125, -0.0008043391280807555, -0.0011688789818435907, -0.0009454786195419729, -0.0003446938644628972, -0.00331911351531744, -0.013778572902083397, -5.245195097813848e-06, -0.20625124871730804, -1.2516897186287679e-05, -4.529942543740617e-06, -0.00039009589818306267, -0.0003147821989841759, -0.0021645228844136, -0.0018151012482121587, -0.29507336020469666, -0.0019654971547424793, -0.0562918521463871, -2.311145305633545, -1.1233035326004028, -0.26018592715263367, -7.1403817855753e-05, -1.4516030550003052, -0.022417349740862846, -0.005060483235865831, -0.6238155961036682, -0.3557067811489105, -0.00013362467871047556, -0.0892481729388237, -0.0015604236396029592, -0.2129417359828949, -1.4305104514278355e-06, -0.00018082413589581847, -2.3841855067985307e-07, -8.594620157964528e-05, -0.00027855331427417696, -0.00018034738604910672, -0.0002236116270069033, -2.3716142177581787, -0.5031415820121765, -1.3275513648986816, -0.2773054242134094, -0.6141917109489441, -0.00849987380206585, -7.343022298300639e-05, -1.0013530300057027e-05, -0.002543787471950054, -0.00021944021864328533, -0.12427108734846115, -0.007918396033346653, -0.005565742030739784, -3.2186455882765586e-06, -1.1920928244535389e-07, -0.18428850173950195, -0.010657536797225475, -0.0011075560469180346, -0.00011276562872808427, -0.01559444423764944, -0.06025385484099388, -0.7989715337753296, -0.16065239906311035, -0.1545831859111786, -6.186770770000294e-05, -0.018179461359977722, -0.16608622670173645, -0.030551999807357788, -0.00024041623692028224, -0.05884190648794174, -1.080230951309204, -0.34960228204727173, -0.0011653067776933312, -1.3049969673156738, -0.06882382184267044, -0.37940478324890137, -0.2228730469942093, -0.35586437582969666, -0.0037010284140706062, -1.9073468138230965e-06, -0.04992060363292694, -8.868777513271198e-05, -0.18760794401168823, -5.006777428206988e-06, -0.0016869375249370933, -0.0007359656738117337, -0.00011514954530866817, -0.026532882824540138, -0.0001311216183239594, -0.015464160591363907, -0.5617298483848572, -0.40806081891059875, -0.6456785202026367, -0.052813783288002014, -1.4055235385894775, -6.401333666872233e-05, -0.000947622349485755, -1.607114553451538, -0.06847979128360748, -0.0003215749457012862, -0.0002212279650848359, -3.433168603805825e-05, -0.007795979734510183, -0.08825887739658356, -0.28480595350265503, -0.03994506970047951, -1.2196934223175049, -0.4825005531311035, -0.0012824652949348092, -0.024958536028862, -0.000547378440387547, -0.062391508370637894, -0.00022015532886143774, -0.9195650219917297, -7.652943895664066e-05, -0.0006656814948655665, -0.01585167460143566, -3.099436753473128e-06, -8.106198947643861e-06, -2.264974000354414e-06, -4.935142715112306e-05, -9.297892393078655e-05, -5.125868119648658e-05, -3.909988299710676e-05, -0.006502422504127026, -0.04679279029369354, -2.8490614567999728e-05, -0.008985322900116444, -0.0007140470552258193, -0.003256258787587285, -6.794906312279636e-06, -1.2652904987335205, -0.006054987199604511, -0.00021765247220173478, -0.0002613918040879071, -0.0009284476400353014, -0.3753843903541565, -0.001557686016894877, -0.012701919302344322, -4.0531076592742465e-06, -0.01301590632647276, -2.682172998902388e-05, -4.792098479811102e-05, 0.0, -0.0007251255447044969, -0.001909815357066691, -0.5973123908042908, -0.00934169627726078, -0.014885427430272102, -0.0014247277285903692, -0.00011324241495458409, -0.016322074458003044, -0.013921184465289116, -0.00022396916756406426, -0.006477313581854105, -0.0022204285487532616, -1.5757222175598145, -0.2207483947277069, -0.5885292887687683, -0.15937957167625427, -0.5565909743309021, -0.20489457249641418, -4.8874615458771586e-05, -0.00045098623377270997, -0.5567308664321899, -0.005738925188779831, -0.20338743925094604, -0.03602500632405281, -0.00033802041434682906, -0.005023951176553965, -0.20024241507053375, -0.0006739014061167836, -8.67805938469246e-05, -0.026387065649032593, -3.313963316031732e-05, -0.15862639248371124, -0.22712445259094238, -0.0006108802044764161, -2.682172998902388e-05, -0.03960161656141281, -0.02360527403652668, -0.0003672163875307888, -0.07362295687198639, -0.30156126618385315, -0.1940518617630005, -3.242440288886428e-05, -0.01858593337237835, -0.02295900508761406, -0.0005765683017671108, -0.0004389514506328851, -0.0006573423161171377, -0.000979896984063089, -0.06892863661050797, -0.0005870526074431837, -0.0006353028584271669, 0.0, -0.0002366024418734014, -4.2676016164477915e-05, -8.248942322097719e-05, -8.654219709569588e-05, -0.00019798702851403505, -7.664863369427621e-05, -0.2973825931549072, -0.2541007101535797, -0.0026487763971090317, -0.10135229676961899, -8.821448318485636e-06, -3.7431014789035544e-05, -9.65590606938349e-06, -0.5798330903053284, -0.009650364518165588, -0.00014828535495325923, -1.1920928244535389e-07, -0.8940919041633606, -0.27209019660949707, -0.0013555632904171944, -0.05674564093351364, -0.00037865620106458664, -0.03674907609820366, -0.00044610086479224265, -0.0241458211094141, -0.004782784264534712, -0.00010299152199877426, -5.960462772236497e-07, -1.9192511899746023e-05, -0.00047195740626193583, -4.303362584323622e-05, 0.0, -0.9853436946868896, -0.006881584879010916, -0.1581885814666748, -0.00037901371251791716, -0.004541321657598019, -0.1214306429028511, -0.15742972493171692, -0.23845747113227844, -0.014191304333508015, -0.01785210333764553], "finish_reason": "length"}], "metrics": {"energy": 891.6903135471348, "energy_per_token": 3.4831652872934953, "time": 21.854212, "time_per_token": 0.085368015625}}
{"outputs": [{"text": "if not os.path.exists(path):\n        os.mkdir(path)\n    df = pd.DataFrame()\n    for file in sorted(os.listdir(path)):\n        with open(os.path.join(path, file)) as f:\n            data = json.load(f)\n        df = pd.concat([df, pd.DataFrame(data)])\n        df.insert(0, 'Source', file)\n        if not os.path.exists(os.path.join(path, 'processed')):\n            os.mkdir(os.path.join(path, 'processed'))\n        shutil.move(os.path.join(path, file), os.path.join(path, 'processed', file))\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "path", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", "))", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", "(", "data", ")]", ")", "\n", "        ", "df", ".", "insert", "(", "0", ",", " '", "Source", "'", ",", " file", ")", "\n", "        ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "            ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "        ", "sh", "util", ".", "move", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " file", "))", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -0.576907753944397, -4.005352093372494e-05, -0.7532331943511963, -2.0265373677830212e-05, -0.0011212497483938932, -0.0007977878558449447, -0.000734297966118902, -0.008413229137659073, -0.44631198048591614, -1.0973060131072998, -0.02991911582648754, -0.031198929995298386, -1.1444026313256472e-05, -0.033334966748952866, -0.11943311989307404, -0.018028439953923225, -0.014284382574260235, -0.35352015495300293, -1.1087300777435303, -0.028799250721931458, -0.09716100245714188, -0.0008653233526274562, -0.002148702275007963, -1.0728830375228426e-06, -0.0009558399324305356, 0.0, -0.00013600854435935616, -0.0024737492203712463, -0.004645626526325941, -0.00036113892565481365, -0.0023958568926900625, -0.001023364719003439, -1.4307565689086914, -8.070142939686775e-05, -0.0012524626217782497, -0.057887423783540726, -2.145764938177308e-06, -2.753696753643453e-05, -3.4570634852570947e-06, -0.00012742661056108773, -0.00018273114983458072, -0.00024434918304905295, -8.320462075062096e-05, -0.009365434758365154, -1.4996252059936523, -8.165503095369786e-05, -0.034389644861221313, -0.005529229063540697, -0.0010422994382679462, -0.0008320921915583313, -0.20736689865589142, -0.0022454068530350924, -0.025697048753499985, -6.9141146923357155e-06, -0.01592078246176243, -2.932505594799295e-05, -0.0001481661747675389, -0.0004596845537889749, -0.001405324088409543, -0.5153616070747375, -0.5691513419151306, -0.16713392734527588, -0.4215606153011322, -5.125986263010418e-06, -0.005437939893454313, -0.0053666806779801846, -0.008801121264696121, -0.00102324562612921, -0.0019892919808626175, -1.3589766240329482e-05, -0.07669778913259506, -0.019168144091963768, -0.000996331567876041, -0.21684658527374268, -0.4376731514930725, -0.016422579064965248, -0.013790448196232319, -0.061459802091121674, -0.10746634751558304, -0.003887597005814314, -0.0015167410019785166, -0.32699063420295715, -6.782778655178845e-05, -0.4449234902858734, -1.1940803527832031, -6.425174069590867e-05, -5.972207145532593e-05, -0.08708745986223221, -0.014363469555974007, -0.0059958589263260365, -0.5501980781555176, -1.4382487535476685, -0.012504508718848228, -0.0008524598088115454, -1.311301275563892e-06, -6.115249561844394e-05, -9.536738616588991e-07, -0.007508864160627127, -0.509852945804596, -0.04813516139984131, -1.0728830375228426e-06, -8.856858039507642e-05, -1.3232143828645349e-05, -0.00020930961181875318, -0.0066426414996385574, -0.0008048156159929931, -0.0014485353603959084, -0.10584217309951782, -0.0021143241319805384, -0.0018390186596661806, -0.0003675738989841193, -0.0009464313625358045, -0.0034696399234235287, -0.0015069806249812245, -2.145764938177308e-06, -0.029100466519594193, -4.207999518257566e-05, -0.0013533014571294188, -0.0005236684810370207, -6.9141146923357155e-06, -6.794906312279636e-06, -3.4570634852570947e-06, -4.017272294731811e-05, -0.00023469554434996098, -0.00010024998482549563, -0.00013362467871047556, -0.0008051729528233409, -2.9682672902708873e-05, -0.00016389934171456844, -0.0002213471452705562, -0.008506020531058311, -0.2646314799785614, -2.264974000354414e-06, -5.125986263010418e-06, -0.0041178204119205475, -6.472854875028133e-05, -0.005414227023720741, -9.298280929215252e-06, -5.435795901576057e-05, -6.437280717364047e-06, -1.168244216387393e-05, -8.964136941358447e-05, -7.962863310240209e-05, -5.209310256759636e-05, -0.0011828100541606545, -0.00015567521040793508, -4.60137271147687e-05, -0.019307183101773262, -4.887569048150908e-06, -1.168244216387393e-05, -1.3470558769768104e-05, -2.098061486321967e-05, -0.0004599228559527546, -0.001212100381962955, -0.00010287232726113871, -0.003147649811580777, -5.23315102327615e-05, -0.5469207763671875, -0.0008798541966825724, -0.007397521287202835, -0.0008810452418401837, -0.0007761088781990111, -0.00910026952624321, -0.03315900266170502, -0.0017692878609523177, -0.17892134189605713, -0.03523482009768486, -0.8959904313087463], "finish_reason": "stop"}], "metrics": {"energy": 631.2470551967622, "energy_per_token": 3.5069280844264563, "time": 15.349481, "time_per_token": 0.08527489444444444}}
{"outputs": [{"text": "# create a DataFrame to store the data\n    df = pd.DataFrame()\n\n    # if the path does not exist, create it\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n    # get a list of all JSON files in the path\n    file_list = [f for f in os.listdir(path) if f.endswith('.json')]\n\n    # sort the file names alphabetically\n    file_list.sort()\n\n    # iterate over each file\n    for filename in file_list:\n        # read the file into a DataFrame\n        with open(os.path.join(path, filename)) as f:\n            file_data = json.load(f)\n            file_df = pd.DataFrame(file_data)\n\n        # add a \"Source\" column to the DataFrame\n        file_df['source'] = filename\n\n        # append the DataFrame to the master DataFrame\n        df = df.append(file_df, ignore_index=True)\n\n    # create a \"processed\" subdirectory if it doesn't exist", "tokens": ["#", " create", " a", " Data", "Frame", " to", " store", " the", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "#", " if", " the", " path", " does", " not", " exist", ",", " create", " it", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "\n", "    ", "#", " get", " a", " list", " of", " all", " JSON", " files", " in", " the", " path", "\n", "    ", "file", "_", "list", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "path", ")", " if", " f", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "\n", "    ", "#", " sort", " the", " file", " names", " alphabet", "ically", "\n", "    ", "file", "_", "list", ".", "sort", "()", "\n", "\n", "    ", "#", " iterate", " over", " each", " file", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "#", " read", " the", " file", " into", " a", " Data", "Frame", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " filename", "))", " as", " f", ":", "\n", "            ", "file", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "file", "_", "df", " =", " pd", ".", "DataFrame", "(", "file", "_", "data", ")", "\n", "\n", "        ", "#", " add", " a", " \"", "Source", "\"", " column", " to", " the", " Data", "Frame", "\n", "        ", "file", "_", "df", "['", "source", "']", " =", " filename", "\n", "\n", "        ", "#", " append", " the", " Data", "Frame", " to", " the", " master", " Data", "Frame", "\n", "        ", "df", " =", " df", ".", "append", "(", "file", "_", "df", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "#", " create", " a", " \"", "processed", "\"", " sub", "directory", " if", " it", " doesn", "'", "t", " exist"], "logprobs": [-0.9825034737586975, -3.5663747787475586, -1.5104306936264038, -1.0505424737930298, -0.0035076539497822523, -0.16104792058467865, -0.6725826859474182, -0.10649888962507248, -0.4856456518173218, -0.7314605116844177, -0.0005078217945992947, -0.023496640846133232, -0.004434632603079081, -0.015368843451142311, -1.2159273865108844e-05, -0.001039322349242866, -0.07698238641023636, -0.001156852813437581, -0.7405572533607483, -0.00037245964631438255, -0.013240273110568523, -3.5839831829071045, -0.2001093178987503, -0.34523805975914, -1.0326638221740723, -0.0005109196645207703, -0.006980436854064465, -0.047217704355716705, -0.12378184497356415, -0.09061197936534882, -0.03079373762011528, -6.69933797325939e-05, -0.04673784226179123, -0.00312673463486135, -0.000957030919380486, -2.622600959512056e-06, -0.00011967896716669202, -4.136476854910143e-05, -0.007086736615747213, -0.00044324109330773354, -0.0010257464600726962, -0.000863894063513726, -0.00021789084712509066, -0.0021281230729073286, -0.006335886660963297, -6.198863957251888e-06, -0.18994520604610443, -6.794906312279636e-06, -5.245195097813848e-06, -0.00023731753753963858, -8.320462075062096e-05, -0.00168503331951797, -0.00016211149340961128, -0.03259273245930672, -0.0020060669630765915, -0.004130760673433542, -1.3965892791748047, -0.7510188817977905, -0.045225318521261215, -5.8410845667822286e-05, -0.3394692540168762, -1.1302529573440552, -0.004494565073400736, -0.009630057029426098, -0.007663138676434755, -0.961734414100647, -0.4940517842769623, -0.00015114595589693636, -2.592909336090088, -0.05028672143816948, -0.037490300834178925, -0.00015066919149830937, -0.1549118012189865, -0.24752043187618256, -0.010485793463885784, -6.83045873302035e-05, -8.940656698541716e-06, -0.012829032726585865, -5.245195097813848e-06, -0.0006451908848248422, -1.311301275563892e-06, -0.00013314791431184858, -0.0006430465145967901, -0.0032421189825981855, -0.0024496091064065695, -0.11198284476995468, -0.002138234442099929, -0.0018616265151649714, -1.4424220353248529e-05, -3.576278118089249e-07, -0.0629454106092453, -0.004553781822323799, -0.00029666791670024395, -7.688703772146255e-05, -0.004097044467926025, -0.00021979777375236154, -0.0342547632753849, -0.00018308870494365692, -0.0021466801408678293, -0.33239060640335083, -0.010524721816182137, -0.6682014465332031, -2.945878744125366, -0.044749513268470764, -1.2159273865108844e-05, -0.04398798197507858, -6.580135959666222e-05, -0.052757810801267624, -7.748573807475623e-06, -0.0009074860718101263, -0.0546363890171051, -1.2993727978027891e-05, -0.0009559590835124254, -0.0003793711948674172, -0.0027658799663186073, -0.00021240839851088822, -0.03966543450951576, -1.314789056777954, -0.24517592787742615, -0.7646340727806091, -0.08133365958929062, -1.0107159614562988, -3.766942609217949e-05, -0.0009320206008851528, -1.5953930616378784, -4.362964682513848e-05, -0.0005236684810370207, -5.364403477869928e-06, -1.1920928244535389e-07, -4.184158387943171e-05, -5.9960475482512265e-05, -0.018983468413352966, -0.1132659986615181, -0.24692487716674805, -0.02631019987165928, -0.8708816766738892, -0.23061279952526093, -0.0036655159201472998, -0.03676389902830124, -0.00023421882360707968, -0.045636776834726334, -0.0002273062855238095, -0.2965697646141052, -7.664863369427621e-05, -0.0006138585740700364, -0.008979533798992634, -3.2186455882765586e-06, -1.6212332411669195e-05, -3.576278118089249e-07, -3.969590397900902e-05, -0.00011050090688513592, -5.3881147323409095e-05, -3.814624506048858e-05, -0.0028165215626358986, -1.654771327972412, -4.017272294731811e-05, -0.02578883059322834, -0.0027322364039719105, -0.00014137222024146467, -0.0008180370787158608, -2.015202522277832, -0.003085735021159053, -0.2235954850912094, -0.0011242267210036516, -0.358390748500824, -4.768360213347478e-06, -0.00881210993975401, -1.8715683836489916e-05, -0.0001245659514097497, -0.0006495987763628364, -0.0015475689433515072, -0.2017800211906433, -0.27451276779174805, -3.0040289857424796e-05, -0.0021343089174479246, -7.152301259338856e-05, -0.000285584683297202, -1.0251946150674485e-05, -0.08237220346927643, -0.0030353448819369078, -0.00041392818093299866, -2.3841830625315197e-06, -9.059865078597795e-06, -0.01247001439332962, -0.0025850471574813128, -0.08273288607597351, -0.029669644311070442, -0.00045980370487086475, -0.9086199998855591, -0.11683940887451172, -0.2818007171154022, -0.24687077105045319, -3.9457496313843876e-05, -0.00023552982020191848, -0.13693557679653168, -0.07298406213521957, -0.4047882556915283, -0.00016556799528189003, -0.9723694920539856, -0.0003980797773692757, -0.016590140759944916, -5.722029527532868e-06, -4.3748852476710454e-05, -0.12070632725954056, -0.22512999176979065, -0.0009388091857545078, -0.00011503035057103261, -0.02001856453716755, -0.003933550789952278, -0.00284445658326149, -0.0004117832868359983, -0.00031835734262131155, -0.2635565400123596, -0.00425825547426939, -0.4248640239238739, -0.00011193125828867778, -0.001553520211018622, -0.004178009461611509, -2.132575750350952, -0.007801538798958063, -0.00011681827891152352, -0.0006797387031838298, -6.961580220377073e-05, -0.0022647941950708628, -0.00015710550360381603, -2.5722503662109375, -1.0609570381348021e-05, -0.00013481661153491586, -0.0007014198345132172, -0.0003195490571670234, -7.748573807475623e-06, -3.766942609217949e-05, -0.23003758490085602, -0.016140861436724663, -1.9073468138230965e-06, -1.1444026313256472e-05, -0.001699671265669167, -0.00430668517947197, -0.008243346586823463, -0.00048423008411191404, -0.002971877809613943, -0.8012189269065857, -0.0019794171676039696, -1.405134677886963, -0.08035619556903839, -0.1329113394021988, -0.003837009659036994, -0.001091004116460681, -0.10055355727672577, -0.004215640481561422, -1.4239591360092163, -0.006819072179496288, -0.28379133343696594, -0.0003830652858596295, -2.264974000354414e-06, -0.06859955936670303], "finish_reason": "length"}], "metrics": {"energy": 902.1983739309313, "energy_per_token": 3.5242123981677005, "time": 21.84846, "time_per_token": 0.085345546875}}
{"outputs": [{"text": "# Check if the path exists\n    if not os.path.exists(path):\n        raise ValueError(\"Path does not exist: {}\".format(path))\n    # Check if the path is a directory\n    if not os.path.isdir(path):\n        raise ValueError(\"Path is not a directory: {}\".format(path))\n    # Get a list of all JSON files in the directory\n    json_files = [f for f in os.listdir(path) if f.endswith(\".json\")]\n    # Sort the JSON files alphabetically\n    json_files.sort()\n    # Initialize an empty list to store the DataFrames\n    df_list = []\n    # Process each JSON file\n    for f in json_files:\n        # Read the file into a DataFrame\n        df = pd.DataFrame(json.load(open(os.path.join(path, f), \"r\")))\n        # Insert a \"Source\" column\n        df.insert(0, \"source\", f)\n        # Append the DataFrame to the list\n        df_list.append", "tokens": ["#", " Check", " if", " the", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Path", " does", " not", " exist", ":", " {", "}\"", ".", "format", "(", "path", "))", "\n", "    ", "#", " Check", " if", " the", " path", " is", " a", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Path", " is", " not", " a", " directory", ":", " {", "}\"", ".", "format", "(", "path", "))", "\n", "    ", "#", " Get", " a", " list", " of", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "json", "_", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "path", ")", " if", " f", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", ")]", "\n", "    ", "#", " Sort", " the", " JSON", " files", " alphabet", "ically", "\n", "    ", "json", "_", "files", ".", "sort", "()", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " Data", "F", "rames", "\n", "    ", "df", "_", "list", " =", " []", "\n", "    ", "#", " Process", " each", " JSON", " file", "\n", "    ", "for", " f", " in", " json", "_", "files", ":", "\n", "        ", "#", " Read", " the", " file", " into", " a", " Data", "Frame", "\n", "        ", "df", " =", " pd", ".", "DataFrame", "(", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " f", ")", ",", " \"", "r", "\"", ")))", "\n", "        ", "#", " Insert", " a", " \"", "Source", "\"", " column", "\n", "        ", "df", ".", "insert", "(", "0", ",", " \"", "source", "\"", ",", " f", ")", "\n", "        ", "#", " App", "end", " the", " Data", "Frame", " to", " the", " list", "\n", "        ", "df", "_", "list", ".", "append"], "logprobs": [-0.9825034737586975, -1.2898244857788086, -0.10361722111701965, -0.44760429859161377, -0.4213058650493622, -0.06241043657064438, -0.4656427204608917, -0.0007890925044193864, -0.01634940132498741, -0.10798225551843643, -0.0014496066141873598, -1.311301275563892e-06, -0.00014828535495325923, -1.9907753085135482e-05, -0.007975399494171143, -0.0003914067056030035, -0.0006231511943042278, -0.0010839784517884254, -0.00040070133400149643, -0.003566216677427292, -1.0369664430618286, -1.135500431060791, -6.6756979322235566e-06, -0.09173784404993057, -0.8189867734909058, -0.6791354417800903, -0.11663638055324554, -6.568216485902667e-05, -0.000569300667848438, -1.6200709342956543, -0.24854683876037598, -0.009799469262361526, -0.001049801823683083, -4.494089080253616e-05, -9.524368942948058e-05, -0.0006771179032512009, -0.00022885564249008894, -0.0005304598016664386, -1.0752284526824951, -0.08481705188751221, -1.7488347291946411, -0.026338648051023483, -0.07321620732545853, -0.027010701596736908, -0.1309184432029724, -0.028521809726953506, -0.007201191503554583, -0.004227867349982262, -8.260862523457035e-05, -0.018567094579339027, -0.002974255010485649, -9.107174992095679e-05, -2.145764938177308e-06, -1.5258672647178173e-05, -1.7881377516459906e-06, -0.00016830935783218592, -6.23445157543756e-05, -4.160317621426657e-05, -2.7179348762729205e-05, -3.266281055402942e-05, -3.576214658096433e-05, -0.00012408917245920748, -0.0006061147432774305, -0.006802259013056755, -3.576278118089249e-07, -0.00029702542815357447, -0.0007824220228940248, -0.024220293387770653, -0.004115446005016565, -9.691245941212401e-05, -0.00048423008411191404, -0.00017736769223120064, -0.0004768426588270813, -0.00027223696815781295, -3.0040289857424796e-05, -6.854299135738984e-05, -0.00010358751023886725, -3.755022044060752e-05, -6.770858453819528e-05, -7.950943836476654e-05, -0.0001726001501083374, -0.084323450922966, -0.007098691537976265, -1.3174930810928345, -0.9358267188072205, -0.06713014096021652, -0.00010251473577227443, -0.4486795663833618, -0.9660180807113647, -0.014117492362856865, -0.01601416990160942, -0.0035531502217054367, -0.049814339727163315, -0.18620632588863373, -0.00024244230007752776, -0.7658540606498718, -0.002701682737097144, -0.012494031339883804, -0.00022623363474849612, -0.09283974021673203, -0.12516608834266663, -0.010077194310724735, -3.8265450712060556e-05, -3.2186455882765586e-06, -0.010712734423577785, -2.50339189733495e-06, -0.00013183678674977273, -1.1920928244535389e-07, -2.3364747903542593e-05, -0.0003847335756290704, -0.00031156453769654036, -0.004978640470653772, -0.08317483216524124, -0.0003955773718189448, -0.0015912501839920878, -5.245195097813848e-06, -9.536738616588991e-07, -0.8903981447219849, -0.001726447488181293, -0.0009501233580522239, -0.00010692501382436603, -3.814689989667386e-06, -0.005269922316074371, -0.00030179237364791334, -0.003044614801183343, -0.04667128622531891, -0.6630172729492188, -0.02136303298175335, -0.9655439257621765, -0.011083466000854969, -0.027310369536280632, -1.0251946150674485e-05, -0.01665216125547886, -5.8053239627042785e-05, -0.010528968647122383, -7.867782187531702e-06, -6.937739817658439e-05, -0.13619588315486908, -1.5616295058862306e-05, -0.0008996253600344062, -0.0005155664402991533, -0.006410274654626846, -0.020491331815719604, -1.2011181116104126, -0.2569340169429779, -0.0007221474661491811, -1.4525954723358154, -0.10561416298151016, -0.4203537404537201, -0.16799339652061462, -0.3315662443637848, -0.004150230437517166, -3.099436753473128e-06, -0.04853077605366707, -9.643566590966657e-05, -2.294508934020996, -0.015460756607353687, -0.0011734035797417164, -0.0001370812824461609, -0.0007708676857873797, -6.627816765103489e-05, -0.0012085284106433392, -0.05037491396069527, -2.093653440475464, -0.023319868370890617, -0.033273279666900635, -0.0002379134384682402, -0.2647903859615326, -0.00012861855793744326, -0.0014212755486369133, -1.4597864151000977, -0.10906223207712173, -0.00045313104055821896, -2.145764938177308e-06, -6.794906312279636e-06, -7.998623186722398e-05, -6.913899414939806e-05, -0.002341626212000847, -0.055469367653131485, -0.24627035856246948, -0.020442044362425804, -2.558742046356201, -0.24010400474071503, -0.0013878247700631618, -0.023308338597416878, -0.00039641151670366526, -0.014156044460833073, -0.00019905969384126365, -0.2615816295146942, -0.014182019047439098, -0.0024592415429651737, -4.851700214203447e-05, -1.9712238311767578, -0.042629174888134, -0.009141141548752785, -7.080780778778717e-05, -0.05592420697212219, -0.0008572241058573127, -0.000500196241773665, -0.0010003806091845036, -0.026487374678254128, -7.986990567587782e-06, -2.3483953555114567e-05, -1.1920922133867862e-06, -5.280832192511298e-05, -3.6000557884108275e-05, -0.0002236116270069033, -2.2411095415009186e-05, -0.012880108319222927, -0.8306257724761963, -0.00010907054820563644, -0.11278049647808075, -0.004839967470616102, -0.00022706791060045362, -0.015795938670635223, -0.0011955503141507506, -0.0008270895341411233, -0.0026628058403730392, -0.1397634744644165, -0.04247334972023964, -0.1790527105331421, -0.09981611371040344, -3.731181277544238e-05, -0.0002489972102921456, -1.6080093383789062, -0.0003483880718704313, -0.00560545502230525, -0.20607344806194305, -0.0014694855781272054, -9.595887240720913e-05, -0.050553541630506516, -3.0517112463712692e-05, -0.0051621245220303535, -0.14779649674892426, -0.0004894727608188987, -2.992108420585282e-05, -0.030655361711978912, -0.009876905009150505, -0.0005012686015106738, -0.0004191712068859488, -0.005687127821147442, -0.33556002378463745, -5.519237674889155e-05, -0.027384720742702484, -0.007225808687508106, -0.00038556772051379085, -0.000724887300748378, -0.0003483880718704313, -0.00017295771976932883, -0.013235802762210369, -0.0001784403866622597, -0.0004412154376041144, -0.000742398202419281, -9.059865078597795e-06, -0.0003743662964552641, -8.082063141046092e-05], "finish_reason": "length"}], "metrics": {"energy": 893.2143504848485, "energy_per_token": 3.4891185565814395, "time": 21.860218, "time_per_token": 0.0853914765625}}
{"outputs": [{"text": "df = pd.DataFrame()\n    files = sorted(os.listdir(path))\n    if not files:\n        print(\"No files found in directory.\")\n    else:\n        for file in files:\n            with open(os.path.join(path, file), 'r') as f:\n                data = json.load(f)\n            file_df = pd.json_normalize(data)\n            file_df['source'] = file\n            df = pd.concat([df, file_df], ignore_index=True)\n            if not os.path.exists(os.path.join(path, 'processed')):\n                os.mkdir(os.path.join(path, 'processed'))\n            os.rename(os.path.join(path, file), os.path.join(path, 'processed', file))\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "files", " =", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", "\n", "    ", "if", " not", " files", ":", "\n", "        ", "print", "(", "\"", "No", " files", " found", " in", " directory", ".", "\"", ")", "\n", "    ", "else", ":", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "file", "_", "df", " =", " pd", ".", "json", "_", "normal", "ize", "(", "data", ")", "\n", "            ", "file", "_", "df", "['", "source", "']", " =", " file", "\n", "            ", "df", " =", " pd", ".", "concat", "([", "df", ",", " file", "_", "df", "]", ",", " ignore", "_", "index", "=", "True", ")", "\n", "            ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "                ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " file", "))", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-2.0573697090148926, -0.03956311568617821, -0.05590493232011795, -3.302042750874534e-05, -0.02079167403280735, -0.13418743014335632, -0.05813872814178467, -0.16239280998706818, -1.8373292684555054, -0.005215372424572706, -0.626290500164032, -0.04720701649785042, -0.023265479132533073, -1.0609570381348021e-05, -0.004179433919489384, -3.611976353568025e-05, -0.00021598390594590455, -0.0032916669733822346, -0.0076744952239096165, -0.04260118678212166, -0.05672311410307884, -2.950085163116455, -0.3549099266529083, -1.357315182685852, -0.009920459240674973, -0.019911760464310646, -0.004347397480159998, -2.2197790145874023, -0.1349879801273346, -0.4722149074077606, -0.2936360239982605, -0.11873000860214233, -0.5659016370773315, -0.2278001606464386, -0.8631943464279175, -0.7078703045845032, -0.022390540689229965, -0.00027533553657121956, -0.0010249129263684154, -1.3505332469940186, -0.23078174889087677, -0.00020430385484360158, -0.00025018901214934886, -0.0020881532691419125, -0.16679799556732178, -0.2592126131057739, -0.021831898018717766, -0.00813303142786026, -0.0008179179858416319, -0.0006257721688598394, -0.0016664678696542978, -1.0340346097946167, -0.00015233787416946143, -0.0022011594846844673, -0.06103237345814705, -4.291525328881107e-06, -5.23315102327615e-05, -3.099436753473128e-06, -0.00013457823661156, -0.00029059001826681197, -0.0003995097358711064, -0.00020072828920092434, -0.017393551766872406, -0.27168726921081543, -8.296622399939224e-05, -0.26844316720962524, -0.001301871263422072, -0.004591398872435093, -1.2636104656849056e-05, -0.023502929136157036, -0.0024540091399103403, -0.0010065733222290874, -0.0006909366929903626, -0.10359271615743637, -0.0034726096782833338, -0.023931803181767464, -4.0531076592742465e-06, -0.027298420667648315, -2.7179348762729205e-05, -0.00010144196130568162, -0.0003313469351269305, -0.002318434417247772, -0.9745173454284668, -2.064002513885498, -0.004839967470616102, -0.016667285934090614, -0.00032109825406223536, -0.0007921895012259483, -7.271740287251305e-06, -2.907468557357788, -0.003660646267235279, -0.0006644901586696506, -2.539125671319198e-05, -0.0016957441112026572, -0.0010513499146327376, -0.02097204513847828, -0.04768574610352516, -0.0011826909612864256, -0.03046516515314579, -0.00010740180005086586, -0.0014281797921285033, -0.5212063193321228, -0.6107921004295349, -0.0037493661511689425, -0.0011024356354027987, -0.09995592385530472, -0.028293313458561897, -0.001413061749190092, -0.01989610120654106, -0.001177213853225112, -0.030885862186551094, -1.1920922133867862e-06, -5.781483559985645e-05, -0.0010445620864629745, -0.0005391574813984334, -0.00018404220463708043, -0.002082324121147394, -1.7762025890988298e-05, -4.446407547220588e-05, -0.26923999190330505, -5.936446541454643e-05, -0.0658080130815506, -1.1920922133867862e-06, -3.099436753473128e-06, -0.0020548435859382153, -0.00680995499715209, -0.021385202184319496, -0.002795837353914976, -0.5432361364364624, -1.8039451837539673, -0.09570492058992386, -0.005039489362388849, -2.3841830625315197e-06, -0.00013195598148740828, -5.245195097813848e-06, -0.04713764786720276, -1.1796674728393555, -0.08970937132835388, -2.861018856492592e-06, -8.987976616481319e-05, -6.079655122448457e-06, -0.0003389737685211003, -0.014542890712618828, -0.0021567910443991423, -0.001672894461080432, -0.19750379025936127, -0.00366124021820724, -0.0029951734468340874, -0.0005378468777053058, -0.0017300175968557596, -0.0017170461360365152, -0.009162994101643562, -3.576272320060525e-06, -0.6867294907569885, -1.5020257706055418e-05, -0.0025766051840037107, -0.0005231918767094612, -2.145764938177308e-06, -1.1920858014491387e-05, -7.867782187531702e-06, -1.4185804502631072e-05, -0.00025078488397412, -2.5629668016335927e-05, -0.00013612773909699172, -0.0012661544606089592, -4.482168878894299e-05, -0.000196556793525815, -0.000730128725990653, -0.030809111893177032, -1.849306344985962, -3.4570634852570947e-06, -0.3450748920440674, -0.00014745102089364082, -0.01319839246571064, -3.4570634852570947e-06, -2.4437606043647975e-05, -1.2040065485052764e-05, -3.099393507000059e-05, -0.0001677133986959234, -8.546940807718784e-05, -7.080780778778717e-05, -0.003697940381243825, -0.00013553177996072918, -6.16293036728166e-05, -0.04348636418581009, -2.50339189733495e-06, -2.288792165927589e-05, -1.0132738680113107e-05, -4.23184028477408e-05, -0.0007834940915927291, -0.002411673776805401, -0.00014673586701974273, -0.012235700152814388, -0.00013183678674977273, -0.01263329479843378, -0.0007781338645145297, -0.015105735510587692, -0.003539846045896411, -0.0022952421568334103, -0.14057356119155884, -0.06331082433462143, -0.0029778205789625645, -0.1723400205373764, -0.06531242281198502, -1.1316428184509277], "finish_reason": "stop"}], "metrics": {"energy": 720.9318713531496, "energy_per_token": 3.5167408358690224, "time": 17.45738, "time_per_token": 0.0851579512195122}}
{"outputs": [{"text": "os.makedirs(os.path.join(path, \"processed\"), exist_ok=True)\n    files = os.listdir(path)\n    files.sort()\n    dfs = []\n    for file in files:\n        if file.endswith(\".json\"):\n            with open(os.path.join(path, file), \"r\") as f:\n                data = json.load(f)\n            df = pd.DataFrame(data)\n            df[\"source\"] = file\n            dfs.append(df)\n            os.rename(os.path.join(path, file), os.path.join(path, \"processed\", file))\n    return pd.concat(dfs).reset_index(drop=True)\n\ndf = task_func(\"data\")\nprint(df)", "tokens": ["os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ")", ",", " exist", "_", "ok", "=", "True", ")", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "path", ")", "\n", "    ", "files", ".", "sort", "()", "\n", "    ", "d", "fs", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "df", "[", "\"", "source", "\"", "]", " =", " file", "\n", "            ", "d", "fs", ".", "append", "(", "df", ")", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", ",", " file", "))", "\n", "    ", "return", " pd", ".", "concat", "(", "d", "fs", ")", ".", "reset", "_", "index", "(", "drop", "=", "True", ")", "\n", "\n", "df", " =", " task", "_", "func", "(", "\"", "data", "\"", ")", "\n", "print", "(", "df", ")<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.336803913116455, -0.0003922408213838935, -0.145692840218544, -9.536697689327411e-06, -0.00035589560866355896, -0.0004520586517173797, -0.7517338395118713, -2.634490556374658e-05, -0.00045718232286162674, -2.0265558760002023e-06, -0.0022401732858270407, -0.0014296083245426416, -0.0028449322562664747, -0.0016934829764068127, -0.8578603863716125, -0.00496132206171751, -0.002200802555307746, -0.00757701275870204, -0.0001716466504149139, -0.0005395148764364421, -9.536738616588991e-07, -4.768360213347478e-06, -0.00622204365208745, -0.00043025295599363744, -0.00025042734341695905, -0.06638937443494797, -0.1233808770775795, -1.8051624298095703, -0.0038738222792744637, -2.138941764831543, -1.7881377516459906e-06, -0.005077087786048651, -1.1920928244535389e-07, -0.0001012035645544529, -0.003849953645840287, -0.001010384177789092, -0.004844119306653738, -0.0033503612503409386, -0.18797814846038818, -0.16843388974666595, -0.00039414744242094457, -0.005468054208904505, -0.03000646084547043, -0.05788404867053032, -1.8229796886444092, -0.0011491130571812391, -0.0016405232017859817, -0.01623704470694065, -0.002898422535508871, -0.021258706226944923, -0.01619810238480568, -0.4243950843811035, -0.014336325228214264, -0.0040046744979918, -0.0008197046699933708, -0.00021038226259406656, -0.0013192531187087297, -0.3423343300819397, -0.109446220099926, -0.003397290362045169, -0.007144379895180464, -1.645074735279195e-05, 0.0, -0.042712219059467316, -9.83428253675811e-05, -0.006284001283347607, -0.0006951061659492552, -1.156323378381785e-05, -0.03602788224816322, -0.0006544832140207291, -0.0003904534096363932, -0.10946203768253326, -6.496695277746767e-05, -0.0001147919538198039, -0.0032131255138665438, -1.1920922133867862e-06, -1.3828182090946939e-05, -2.50339189733495e-06, -3.302042750874534e-05, -2.13382354559144e-05, -8.761498611420393e-05, -2.2172682292875834e-05, -0.0007459718617610633, -0.12110023200511932, -2.288792165927589e-05, -0.03578556701540947, -0.0018032018560916185, -0.00026472879108041525, -0.0036786997225135565, -1.7881233361549675e-05, -0.01036121416836977, -0.002336155390366912, -0.0002864189154934138, -0.00017855956684798002, -0.08731907606124878, -0.0011475651990622282, -0.005166275426745415, -4.6491513785440475e-06, -0.017399175092577934, -1.5735502529423684e-05, -8.999896090244874e-05, -0.00031680811662226915, -0.000567275274079293, -0.6154300570487976, -0.017470283433794975, -0.0077815488912165165, -0.0017297795275226235, -1.1205610462639015e-05, -0.027805209159851074, -0.008275385946035385, -0.0006133820279501379, -0.012633530423045158, -0.011079810559749603, -0.000705470098182559, -0.0145603958517313, -0.2689211964607239, -0.00010239553375868127, -0.18513000011444092, -0.0006827168981544673, -3.802703940891661e-05, -4.160317621426657e-05, -0.050364259630441666, -0.009845506399869919, -0.000910225382540375, -0.10223369300365448, -7.033323527139146e-06, -0.00032789100077934563, -0.00010859376925509423, -0.00037448544753715396, -0.000251142424531281, -0.0019326595356687903, -0.0002574589161667973, -0.12044553458690643, -1.5475249290466309, -4.768360213347478e-06, -0.1422891765832901, -6.0794889577664435e-05, -0.13455282151699066, -2.4676019165781327e-05, -3.802703940891661e-05, -5.364403477869928e-06, -6.318072337307967e-06, -2.706014311115723e-05, -5.1377883210079744e-05, -3.433168603805825e-05, -0.0015956539427861571, -0.00017176583060063422, -1.680836794548668e-05, -0.01325191929936409, -4.529942543740617e-06, -5.245195097813848e-06, -3.2186455882765586e-06, -1.7404405298293568e-05, -3.015949550899677e-05, -0.0009567927336320281, -0.0004773192631546408, -0.018583126366138458, -0.00029404606902971864, -0.003650669241324067, -0.0021357364021241665, -0.011234949342906475, -0.003246277803555131, -0.0038826095405966043, -0.03911590576171875, -0.49948617815971375, -0.0025258325040340424, -5.722029527532868e-06, -0.0003486264031380415, -0.0003337303060106933, -0.00021944021864328533, 0.0, -0.5642160177230835, -2.7802109718322754, -0.037096839398145676, -1.2040065485052764e-05, -5.006777428206988e-06, -0.027554050087928772, -7.414542778860778e-05, -0.0008248264202848077, -0.0011294659925624728, -0.12134068459272385, -0.08241710066795349, -0.0449274405837059, -3.7392587661743164, -0.01730825938284397, -0.007860087789595127, -0.0002935693773906678, -0.0006028980133123696, -0.4580250382423401, -0.043394025415182114, -0.13678358495235443, -0.02714749425649643, -0.3610350489616394, -0.21988631784915924, -0.25989803671836853, -0.001069331425242126, -0.006417144555598497, -0.5758797526359558, -1.6927575416048057e-05, -1.6689286894688848e-06, -4.291525328881107e-06, -5.113947918289341e-05, -1.774381399154663, -0.006220503710210323], "finish_reason": "stop"}], "metrics": {"energy": 718.945710389137, "energy_per_token": 3.524243678378123, "time": 17.447111, "time_per_token": 0.08552505392156863}}
{"outputs": [{"text": "if not os.path.exists(path):\n        os.makedirs(path)\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n    files = [file for file in os.listdir(path) if os.path.isfile(os.path.join(path, file)) and file.endswith('.json')]\n    files.sort()\n    df = pd.DataFrame()\n    for file in files:\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n        df_file = pd.DataFrame(data)\n        df_file['source'] = file\n        df = pd.concat([df, df_file])\n        os.rename(os.path.join(path, file), os.path.join(path, 'processed', file))\n    return df", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "path", ")", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", ":", "\n", "        ", "os", ".", "m", "aked", "irs", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'))", "\n", "    ", "files", " =", " [", "file", " for", " file", " in", " os", ".", "list", "dir", "(", "path", ")", " if", " os", ".", "path", ".", "is", "file", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", "))", " and", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "    ", "files", ".", "sort", "()", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", "_", "file", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "        ", "df", "_", "file", "['", "source", "']", " =", " file", "\n", "        ", "df", " =", " pd", ".", "concat", "([", "df", ",", " df", "_", "file", "])", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join", "(", "path", ",", " '", "processed", "'", ",", " file", "))", "\n", "    ", "return", " df", "\n", "\n", "if"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -0.576907753944397, -4.005352093372494e-05, -0.6376020908355713, -3.158996332786046e-05, -3.528532761265524e-05, -0.00033122775494121015, -0.0036448491737246513, -0.010500420816242695, -0.010468924418091774, -0.5064550042152405, -1.6855413913726807, -0.044718049466609955, -0.0030122878961265087, -3.2186455882765586e-06, -0.011360363103449345, -1.0847986231965479e-05, -0.10163825005292892, -0.03567974641919136, -0.22197003662586212, -2.0265558760002023e-06, -6.16293036728166e-05, -1.6689286894688848e-06, -0.0005461869877763093, -0.0019500303314998746, -0.001749176881276071, -0.0017807116964831948, -0.6361637115478516, -0.002558056265115738, -0.002744124736636877, -0.0002488780301064253, -0.001068736077286303, -0.0010155049385502934, -0.001379253575578332, -6.437280717364047e-06, -0.02121797576546669, -1.6689286894688848e-06, -4.529942543740617e-06, -0.0006114759016782045, -0.0006083783227950335, -4.768370445162873e-07, -5.483612312673358e-06, -1.5497195136049413e-06, -3.325883881188929e-05, -0.00016556799528189003, -0.0001062098381225951, -0.0001961992384167388, -0.0010162194957956672, -8.21318244561553e-05, -9.285972191719338e-05, -0.000764792668633163, -0.16220855712890625, -1.10207200050354, -0.0015212640864774585, -1.869315266609192, -1.9031238555908203, -0.011091247200965881, -0.0012159105390310287, -4.2199197196168825e-05, -0.12166046351194382, -1.9073468138230965e-06, -0.000873065204359591, -1.1920928244535389e-07, -0.00039081089198589325, -0.002525119110941887, -0.002736991737037897, -0.008483326062560081, -1.49949312210083, -1.0371154530730564e-05, -1.4066597032069694e-05, -6.318072337307967e-06, -0.04309479892253876, -9.023735765367746e-05, -0.00023445718397852033, -0.0069991410709917545, -1.6689286894688848e-06, -9.536697689327411e-06, -6.198863957251888e-06, -2.586808113846928e-05, -2.455681169521995e-05, -0.000362807244528085, -8.332382276421413e-05, -0.0015288818394765258, -0.0001932195882545784, -0.2907097637653351, -0.07871511578559875, -0.027136357501149178, -0.013517750427126884, -9.894321920000948e-06, -1.1920928244535389e-07, -0.05485217645764351, -0.007316343020647764, -0.0006040894077159464, -9.738924563862383e-05, -0.16489249467849731, -0.003508960595354438, -0.0019860798493027687, -0.2658672332763672, -0.045752257108688354, -6.675497570540756e-05, -0.01140621118247509, -0.02137773483991623, -0.010513043031096458, -0.26060232520103455, -0.05118619278073311, -0.03922170773148537, -8.821448318485636e-06, -0.037323564291000366, -0.17836686968803406, -0.006811139173805714, -0.0018888743361458182, -0.015857307240366936, -0.02543327398598194, -0.007637585513293743, -0.0008733034483157098, -0.0004807746736332774, -0.00019238528329879045, -0.0007608617888763547, -0.22011534869670868, -7.223821739898995e-05, -0.0004664763400796801, -0.0016657537780702114, 0.0, -3.4570634852570947e-06, -1.0728830375228426e-06, -1.5139465176616795e-05, -8.463501580990851e-05, -4.8874615458771586e-05, -3.40932747349143e-05, -0.0021615491714328527, -0.054366931319236755, -3.397406908334233e-05, -0.009549650363624096, -0.000673424918204546, -0.002979603596031666, -1.3828182090946939e-05, -0.009111018851399422, -0.002211745595559478, -0.00039962888695299625, -0.0007707485929131508, -0.11891472339630127, -0.0014896021457388997, -0.011778806336224079, -2.861018856492592e-06, -0.03450677543878555, -2.396077979938127e-05, -6.925819616299123e-05, -0.00024911639047786593, -0.0005862186080776155, -0.42142170667648315, -0.29098737239837646, -1.4467023611068726, -0.5157573819160461, -0.00028427375946193933, -0.0008293526479974389, -4.291525328881107e-06, -0.09226594865322113, -0.007754461374133825, -0.000433112756581977, -0.03922193869948387, -0.02332557551562786, -0.00031156453769654036, -0.005823313258588314, -0.004122094251215458, -4.7444173105759546e-05, -0.18763788044452667, -0.5465895533561707, -0.0010856455191969872, -0.0002714027068577707, -0.02904801070690155, -0.0075806803070008755, -0.00018451895448379219, -0.009622973389923573, -0.010194375179708004, -0.04822297766804695, -1.311301275563892e-06, -3.0636318115284666e-05, -0.0004017737810499966, -3.218599158572033e-05, -0.0007441850611940026, -0.0006168370018713176, -0.00012373158824630082, -2.7418097943154862e-06, -0.8301403522491455, -0.0010988633148372173, -0.019379442557692528, -1.101602554321289, -5.8412379075889476e-06, -0.23686081171035767, -0.0004325169720686972, -0.004861321300268173, -2.861018856492592e-06, -2.253030106658116e-05, -2.9802276912960224e-06, -1.0371154530730564e-05, -0.00012575789878610522, -5.721882189391181e-05, -5.566918844124302e-05, -0.0028097457252442837, -0.00016449528629891574, -3.814624506048858e-05, -0.0071010589599609375, -8.4638240878121e-06, -3.4570634852570947e-06, -6.198863957251888e-06, -3.1470757676288486e-05, -0.0004961451631970704, -0.0023826563265174627, -0.00013815402053296566, -0.00986521877348423, -0.0002076410164590925, -0.003955992870032787, -0.00018320789968129247, -0.0058282907120883465, -0.007285929284989834, -0.004138833377510309, -0.011944438330829144, -0.04707839712500572, -0.0012948471121490002, -0.2229626178741455, -0.03289303556084633, -1.0306199789047241], "finish_reason": "stop"}], "metrics": {"energy": 817.3816519966127, "energy_per_token": 3.508075759642115, "time": 19.975574, "time_per_token": 0.0857320772532189}}
{"outputs": [{"text": "if not os.path.exists(path):\n        os.mkdir(path)\n\n    # read each json file into a dataframe\n    dfs = []\n    for file in sorted(os.listdir(path)):\n        if file.endswith(\".json\"):\n            with open(os.path.join(path, file), \"r\") as f:\n                data = json.load(f)\n            df = pd.DataFrame(data)\n            df['source'] = file\n            dfs.append(df)\n\n    # concatenate all dataframes\n    df = pd.concat(dfs, ignore_index=True)\n\n    # move files to \"processed\" directory\n    if not os.path.exists(os.path.join(path, \"processed\")):\n        os.mkdir(os.path.join(path, \"processed\"))\n    for file in sorted(os.listdir(path)):\n        if file.endswith(\".json\"):\n            os.replace(os.path.join(path, file), os.path.join", "tokens": ["if", " not", " os", ".", "path", ".", "exists", "(", "path", "):", "\n", "        ", "os", ".", "mk", "dir", "(", "path", ")", "\n", "\n", "    ", "#", " read", " each", " json", " file", " into", " a", " data", "frame", "\n", "    ", "d", "fs", " =", " []", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "            ", "df", "['", "source", "']", " =", " file", "\n", "            ", "d", "fs", ".", "append", "(", "df", ")", "\n", "\n", "    ", "#", " concaten", "ate", " all", " data", "frames", "\n", "    ", "df", " =", " pd", ".", "concat", "(", "d", "fs", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "#", " move", " files", " to", " \"", "processed", "\"", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", ":", "\n", "        ", "os", ".", "mk", "dir", "(", "os", ".", "path", ".", "join", "(", "path", ",", " \"", "processed", "\"", "))", "\n", "    ", "for", " file", " in", " sorted", "(", "os", ".", "list", "dir", "(", "path", "))", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "os", ".", "replace", "(", "os", ".", "path", ".", "join", "(", "path", ",", " file", ")", ",", " os", ".", "path", ".", "join"], "logprobs": [-1.5882925987243652, -0.056721873581409454, -0.004561376757919788, -3.099436753473128e-06, -0.0013831820106133819, -4.2914423829643056e-05, -0.05196387693285942, -0.0050667691975831985, -0.04095160961151123, -0.013999124988913536, -0.009160159155726433, -0.004136103205382824, -0.576907753944397, -4.005352093372494e-05, -0.7532331943511963, -2.0265373677830212e-05, -0.0011212497483938932, -0.0007977878558449447, -0.000734297966118902, -0.008413229137659073, -1.1389350891113281, -0.0017090728506445885, -2.0179710388183594, -3.34669828414917, -1.175386667251587, -1.2790464162826538, -0.018044713884592056, -1.0673809051513672, -0.055250443518161774, -0.5473037958145142, -0.030042091384530067, -0.8414997458457947, -0.0008696111617609859, -0.9962211847305298, -0.0005135409301146865, -0.00236969324760139, -0.052498701959848404, -0.004304311238229275, -0.007454909849911928, -0.11587991565465927, -1.1072717905044556, -0.046238966286182404, -0.15648424625396729, -0.0009488132782280445, -0.002506212331354618, -2.264974000354414e-06, -0.0018172431737184525, -2.3841855067985307e-07, -0.0001426833332516253, -0.0002908283786382526, -0.003759698709473014, -0.00016080040950328112, -0.00354519160464406, -0.0019482456846162677, -0.2561148703098297, -0.04685467109084129, -0.0016294547822326422, -0.004042193293571472, -9.417489309271332e-06, 0.0, -1.0980863571166992, -0.0006706849089823663, -0.005292926914989948, -0.0004258441040292382, -7.510157047363464e-06, -0.0035444789100438356, -0.0008774721063673496, -0.000706780469045043, -0.2577648460865021, -6.365573790390044e-05, -0.0005347490659914911, -0.019787531346082687, -2.3841830625315197e-06, -1.4305012882687151e-05, -2.622600959512056e-06, -7.450303382938728e-05, -5.245071224635467e-05, -0.00017867876158561558, -5.8410845667822286e-05, -0.007890011183917522, -0.22598974406719208, -4.4225667807040736e-05, -0.18522141873836517, -0.002964984392747283, -0.00042215018766000867, -0.006071338430047035, -4.100715523236431e-05, -0.021753398701548576, -0.004321403335779905, -0.0012859179405495524, -0.00023112009512260556, -0.217001274228096, -0.0016702761640772223, -0.007171839475631714, -4.172316494077677e-06, -0.017640246078372, -1.5020257706055418e-05, -0.00011145447206217796, -0.0003311085747554898, -0.0014866263372823596, -0.9376779794692993, -0.025356102734804153, -0.011893314309418201, -0.0016067225951701403, -0.0002451834443490952, -0.04565625265240669, -0.012884344905614853, -0.0005392765742726624, -0.009334138594567776, -0.012564548291265965, -0.13247403502464294, -0.2733703553676605, -2.3871066570281982, -0.4770715534687042, -0.0012668687850236893, -0.0026266619097441435, -0.04381776228547096, -0.1462571769952774, -0.0038852221332490444, -0.007554415613412857, -3.576278118089249e-07, -0.0002658013836480677, -3.266281055402942e-05, -0.0005801424849778414, -0.00019107422849629074, -0.0008761619683355093, -0.0007363230688497424, -0.13331235945224762, -0.05024693161249161, -0.021115969866514206, -0.5131604075431824, -0.00011443436960689723, -0.7201653122901917, -0.17522798478603363, -0.0026096594519913197, -0.7221720218658447, -0.0001515035255579278, -0.02309192717075348, -0.007455028593540192, -0.0001931004080688581, -1.0728830375228426e-06, -4.9470632802695036e-05, -0.0006314906058833003, -9.154854342341423e-05, 0.0, -0.6289609670639038, -0.08835578709840775, -2.264974000354414e-06, -3.8980677345534787e-05, -0.0015047191409394145, -0.0011788808042183518, -0.004346329253166914, -0.0011851914459839463, -0.02399197407066822, -0.0005595310358330607, -0.016069188714027405, -0.08926180005073547, -1.6129283905029297, -0.01990603469312191, -1.9496140480041504, -0.0034493254497647285, -0.00662227300927043, -0.9142969250679016, -0.01760077476501465, -0.00014220656885299832, -0.3992486000061035, -0.013940229080617428, -0.00011586471373448148, -1.311301275563892e-06, -4.3748852476710454e-05, -2.0265373677830212e-05, -0.0020320022013038397, -0.08860064297914505, -0.08477729558944702, -2.145764938177308e-06, -2.753696753643453e-05, -5.722029527532868e-06, -7.009260298218578e-05, -0.0015015052631497383, -0.002097907941788435, -0.0007724162423983216, -0.16461436450481415, -0.0014074668288230896, -0.0003449321957305074, -5.6980417866725475e-05, -0.00011514954530866817, -0.0002184867626056075, -0.0019298041006550193, -0.0004104725376237184, -1.0728830375228426e-06, -0.026200350373983383, -1.5139465176616795e-05, -0.00025138078490272164, -0.00037949037505313754, -7.152555099310121e-07, -2.264974000354414e-06, -1.1920922133867862e-06, -8.22540732769994e-06, -4.660974445869215e-05, -3.659658250398934e-05, -0.00012027494085486978, -0.0007121411035768688, -2.682172998902388e-05, -4.0531076592742465e-06, -5.757642793469131e-05, -5.4238757002167404e-05, -0.14737604558467865, -0.011739102192223072, -0.015956448391079903, -0.0001394651480950415, -1.6015801429748535, -6.723177648382261e-05, -4.577531944960356e-05, -1.0728830375228426e-06, -3.075552376685664e-05, 0.0, -3.802703940891661e-05, -0.00041333239641971886, -0.00020632999076042324, -0.00011979816190432757, -2.8967437174287625e-05, -0.00036840804386883974, -0.04117734730243683, -0.0029031771700829268, -0.0018621024210005999, -0.0002992897352669388, -2.3841855067985307e-07, 0.0, -0.0030069397762417793, -5.0424259825376794e-05, -0.0007864719373174012, -0.0007244108128361404, -5.125986263010418e-06, -0.00380340195260942, -3.93382906622719e-05, -0.000592890428379178, -0.8105890154838562, -4.0531076592742465e-06, -2.0734333992004395, -0.00012861855793744326, -0.11503086984157562, -1.2397689715726301e-05, -1.6331539882230572e-05, -2.6940935640595853e-05, -4.5536911784438416e-05, -4.5060096454108134e-05, -0.00012230125139467418, -7.509902934543788e-05, -0.002918391488492489, -0.00017033556650858372, -8.928377064876258e-05, -0.014513753354549408, -2.3841830625315197e-06, -1.0847986231965479e-05, -1.3828182090946939e-05, -3.373566141817719e-05], "finish_reason": "length"}], "metrics": {"energy": 930.9807285137181, "energy_per_token": 3.6366434707567112, "time": 21.83602, "time_per_token": 0.085296953125}}
