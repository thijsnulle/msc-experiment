{"outputs": [{"text": "# Find all text files in the specified directory\n    text_files = glob.glob(os.path.join(directory, '*.txt'))\n\n    # Initialize a list to store the extracted dictionaries\n    dictionaries = []\n\n    # Loop through each text file\n    for file in text_files:\n        with open(file, 'r') as f:\n            # Read the content of the file\n            content = f.read()\n            # Convert the Unicode string representation to a Python dictionary\n            dictionary = ast.literal_eval(content)\n            dictionaries.append(dictionary)\n\n    return dictionaries", "tokens": ["#", " Find", " all", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Initialize", " a", " list", " to", " store", " the", " extracted", " diction", "aries", "\n", "    ", "diction", "aries", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " each", " text", " file", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " Read", " the", " content", " of", " the", " file", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "#", " Convert", " the", " Un", "icode", " string", " representation", " to", " a", " Python", " dictionary", "\n", "            ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "            ", "diction", "aries", ".", "append", "(", "d", "ictionary", ")", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "#"], "logprobs": [-1.0172709226608276, -3.471832513809204, -0.07410669326782227, -0.2964435815811157, -0.017138006165623665, -0.1175476610660553, -0.038710467517375946, -0.8105055093765259, -0.0018296183552592993, -0.20251978933811188, -0.0031794970855116844, -0.8911570906639099, -0.011228937655687332, -0.012483788654208183, -0.004666865803301334, -0.01216669101268053, -0.00013326710904948413, -0.0018888743361458182, -0.0019249258330091834, -0.09003724157810211, -3.933898824470816e-06, -1.966933996300213e-05, -7.629365427419543e-06, -0.000552263343706727, -0.00029559535323642194, -0.019117621704936028, -0.0005006728461012244, -0.28065240383148193, -0.0037481787148863077, -0.0024033491499722004, -0.0029194613453000784, -0.0014600817812606692, -0.003861234989017248, -0.24913743138313293, -0.0006277974462136626, -0.1432042419910431, -1.6957879066467285, -0.9421980381011963, -0.021688776090741158, -0.015033635310828686, -0.13958972692489624, -0.26293882727622986, -1.3357083797454834, -0.007539034821093082, -0.00016926287207752466, -0.016687216237187386, -0.0005210472736507654, -0.3614203929901123, -0.00013386306818574667, -0.015065223909914494, -0.0019963113591074944, -0.0005347490659914911, -0.02034953609108925, -0.0003673355677165091, -0.041458386927843094, -1.6838150024414062, -0.1730373352766037, -0.15407370030879974, -0.009760512970387936, -0.00034600470098666847, -0.5393717288970947, -0.00015484087634831667, -0.002636530203744769, -0.22935040295124054, -0.594922661781311, -0.00048137042904272676, -1.1920922133867862e-06, -1.1920928244535389e-07, -6.997340824455023e-05, -0.0004761277523357421, -0.01886146515607834, -0.8854948878288269, -3.290122185717337e-05, -0.00024196557933464646, -0.0030437828972935677, -0.027776455506682396, -0.055871449410915375, -0.0018309272127225995, -0.27983662486076355, -8.49926145747304e-05, -0.03755816072225571, -0.005481570027768612, -0.0035432910080999136, -0.006247514393180609, -0.18503449857234955, -0.22839535772800446, -0.058548394590616226, -1.1898419857025146, -0.03840811923146248, -0.03545138239860535, -0.042090415954589844, -0.1360279619693756, -0.00029952809563837945, -0.07513672858476639, -0.00022802136663813144, -0.0014422263484448195, -6.437280717364047e-06, -4.768360213347478e-06, -0.0009538153535686433, -0.022652555257081985, -0.8345659375190735, -0.19358892738819122, -0.3694450855255127, -0.2515244781970978, -0.8278197646141052, -0.0001461399078834802, -0.017449315637350082, -0.3635648190975189, -0.272070050239563, -0.013551268726587296, -0.4509657025337219, -0.003061015624552965, -0.27059686183929443, -0.004521384835243225, -0.6443935036659241, -0.01651955395936966, -0.0022548031993210316, -0.009339924901723862, -8.821448318485636e-06, -0.0001292145170737058, -2.3841855067985307e-07, -2.50339189733495e-06, -0.00021109737281221896, -0.003915977198630571, -0.023371227085590363, -0.006158660165965557, -0.022136151790618896, -0.7268191576004028, -1.4305104514278355e-06, -9.500529267825186e-05, -0.00031132620642893016, -0.0001515035255579278, -0.00022110878489911556, -4.768370445162873e-07, -0.00035744477645494044, -0.010255379602313042, -0.05052407458424568, -0.0013900866033509374, -0.2365664392709732, -0.0012955614365637302, -2.145764938177308e-06, -0.09967035055160522, -0.008618185296654701, -1.3962347507476807], "finish_reason": "stop"}], "metrics": {"energy": 589.4054671268465, "energy_per_token": 4.093093521714212, "time": 12.973228, "time_per_token": 0.09009186111111112}}
{"outputs": [{"text": "try:\n        # Initialize the list to store the extracted dictionaries\n        data = []\n\n        # Get the list of all text files in the directory\n        files = glob.glob(os.path.join(directory, '*.txt'))\n\n        # Extract the dictionaries from each file\n        for file in files:\n            with open(file, 'r') as f:\n                try:\n                    dictionary = ast.literal_eval(f.read())\n                    data.append(dictionary)\n                except ValueError:\n                    print(f\"Invalid dictionary representation in {file}\")\n\n        # Return the list of dictionaries\n        return data\n    except FileNotFoundError:\n        print(f\"Directory '{directory}' not found.\")\n        return None", "tokens": ["try", ":", "\n", "        ", "#", " Initialize", " the", " list", " to", " store", " the", " extracted", " diction", "aries", "\n", "        ", "data", " =", " []", "\n", "\n", "        ", "#", " Get", " the", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "        ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "        ", "#", " Ext", "ract", " the", " diction", "aries", " from", " each", " file", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "try", ":", "\n", "                ", "    ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "f", ".", "read", "())", "\n", "                ", "    ", "data", ".", "append", "(", "d", "ictionary", ")", "\n", "                ", "except", " Value", "Error", ":", "\n", "                ", "    ", "print", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " {", "file", "}\"", ")", "\n", "\n", "        ", "#", " Return", " the", " list", " of", " diction", "aries", "\n", "        ", "return", " data", "\n", "    ", "except", " File", "NotFound", "Error", ":", "\n", "        ", "print", "(", "f", "\"", "Directory", " '", "{", "directory", "}'", " not", " found", ".", "\"", ")", "\n", "        ", "return", " None", "\n", "\n", "if"], "logprobs": [-3.241518020629883, -0.002937647048383951, -0.00514362333342433, -0.03922182321548462, -1.1875813007354736, -1.3876701593399048, -2.4753057956695557, -0.5774340033531189, -0.48036685585975647, -0.15167208015918732, -0.5016655325889587, -1.6043447256088257, -0.007705725263804197, -0.00022671037004329264, -0.07020241767168045, -0.001279131742194295, -3.5079522132873535, -0.31088539958000183, -0.013115918263792992, -0.0032974891364574432, -0.18961596488952637, -0.0023625576868653297, -0.0034931611735373735, -1.3889524936676025, -0.8385617733001709, -1.218993067741394, -0.00016139635408762842, -1.094092845916748, -0.30933257937431335, -0.027157587930560112, -0.03408080339431763, -0.0023971651680767536, -0.4206686019897461, -0.055970534682273865, -0.0013633014168590307, -1.4152053594589233, -0.021211907267570496, -0.03541640564799309, -0.00017450717859901488, -0.0017316836165264249, -0.005640306044369936, -0.17237745225429535, -6.318072337307967e-06, -2.288792165927589e-05, -2.3841830625315197e-06, -0.0007110689766705036, -0.0003381395654287189, -0.017438888549804688, -0.0009800160769373178, -0.4458714425563812, -0.001625646254979074, -0.00468632485717535, -0.0035778575111180544, -0.002593132434412837, -0.003491854527965188, -0.02755335532128811, -0.0016271935310214758, -0.0555158331990242, -1.7779489755630493, -0.001821288955397904, -0.6621480584144592, -0.09778592735528946, -0.00023135847004596144, -0.020602043718099594, -0.12428656220436096, -0.8198379874229431, -0.2829568088054657, -0.0006933192489668727, -0.0055523463524878025, -0.22591204941272736, -0.09221529215574265, -0.001420561340637505, -0.00011598391574807465, -0.0003912875254172832, -0.007130886893719435, -0.0850456953048706, -6.437094270950183e-05, -0.00026520551182329655, -0.003426872193813324, -0.049941472709178925, -0.05516211688518524, -0.0017363247461616993, -0.2182101607322693, -6.12716976320371e-05, -0.01087877806276083, -0.012614931911230087, -0.004187862388789654, -0.0038517348002642393, -2.390374183654785, -0.00037377048283815384, -0.006858498323708773, -0.0013044904917478561, -0.0022946475073695183, -2.753244638442993, -0.6266199350357056, -0.023638922721147537, -0.0314006544649601, -5.364403477869928e-06, -0.00010597144137136638, -1.1920928244535389e-07, -1.1920922133867862e-06, -0.0007976687629707158, -0.0038224030286073685, -0.00012730741582345217, -5.483612312673358e-06, -0.0669412910938263, -0.016539135947823524, -0.005290080793201923, -0.06187136098742485, -0.1183316707611084, -0.001681939116679132, -0.004860490560531616, -0.00037531962152570486, -0.0007083290838636458, -2.3841855067985307e-07, -0.0002890407631639391, -0.00675099017098546, -0.003962048329412937, -0.0027315232437103987, -1.0903949737548828, -3.099436753473128e-06, -0.5856396555900574, -0.015532943420112133, -0.0008382858941331506, -0.0030985698103904724, -0.41671934723854065, -0.03566444665193558, -0.14035965502262115, -0.14381644129753113, -0.7320382595062256, -0.061352964490652084, -0.2707904577255249, -0.02992432191967964, -1.0089142322540283, -0.019638506695628166, -0.16938050091266632, -0.0021999699529260397, -0.0035721559543162584, -0.3591848909854889, -0.036661166697740555, -0.7953665852546692, -0.09170597791671753, -0.003356063971295953, -0.4036487638950348, -0.007804141379892826, -0.8682882785797119, -6.19869097135961e-05, -0.04109737649559975, -0.0006891497760079801, -0.011248034425079823, -0.001927424455061555, -0.0010399178136140108, -0.479476660490036, -0.006114704068750143, -2.326878786087036, -0.0011226787464693189, -2.002696055569686e-05, -0.1932196170091629, -0.007269715890288353, -0.008648204617202282, -0.12770065665245056, -0.01559737790375948, -0.2776590585708618, -0.021398738026618958, -0.14266826212406158, -0.8226757049560547, -0.00034588552080094814, -0.009391297586262226, -0.0031537103932350874, -0.09737591445446014, -0.00041059168870560825, -0.21927082538604736, -0.08523114770650864, -0.06516065448522568, -0.05447407066822052, -2.2781381607055664, -0.05595024675130844, -1.3347175121307373, -0.2557075619697571, -0.4219954013824463, -0.8416601419448853], "finish_reason": "stop"}], "metrics": {"energy": 737.6905987472529, "energy_per_token": 4.075638667111894, "time": 16.518435, "time_per_token": 0.09126207182320442}}
{"outputs": [{"text": "dictionaries = []\n    # get the list of file path\n    files_path = glob.glob(f\"{directory}/*.txt\")\n    for file_path in files_path:\n        with open(file_path, 'r') as file:\n            dictionaries.append(ast.literal_eval(file.read()))\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "    ", "#", " get", " the", " list", " of", " file", " path", "\n", "    ", "files", "_", "path", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "txt", "\"", ")", "\n", "    ", "for", " file", "_", "path", " in", " files", "_", "path", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "file", ".", "read", "()))", "\n", "    ", "return", " diction", "aries", "\n", "\n", "print"], "logprobs": [-2.8267574310302734, -0.002758747199550271, -0.037850093096494675, -0.013340028002858162, -0.025585155934095383, -0.23396450281143188, -2.524801254272461, -3.867619514465332, -1.8331981897354126, -1.5662111043930054, -0.014054490253329277, -2.855740785598755, -2.868771553039551, -1.5278805494308472, -0.005039370618760586, -1.537876844406128, -2.1932992935180664, -0.44494128227233887, -0.10017520189285278, -0.07185917347669601, -0.0008677055011503398, -0.005503146909177303, -0.014116435311734676, -1.6134181022644043, -0.7149025201797485, -0.007870613597333431, -0.08293907344341278, -0.12651269137859344, -0.07271728664636612, -0.1598745733499527, -0.011662988923490047, -0.0005013877525925636, -0.016020270064473152, -0.007226874120533466, -0.3166106641292572, -0.7149094343185425, -0.30672726035118103, -0.5398589968681335, -0.033751923590898514, -0.0009897815762087703, -0.0023612494114786386, -8.34461570775602e-06, 0.0, -0.0033400245010852814, -0.014571556821465492, -0.02471701242029667, -0.7508865594863892, -0.0007699147681705654, -0.0015338810626417398, -0.006840620189905167, -0.011834765784442425, -5.364403477869928e-06, -0.2320389449596405, -0.4138002097606659, -0.015544327907264233, -0.42743000388145447, -0.0016703951405361295, -0.4193463921546936, -0.016879113391041756, -0.006999495904892683, -0.013388019986450672, -3.891554832458496, -0.014761981554329395, -0.06848646700382233, -0.017136482521891594, -0.0032690914813429117, -0.05288524553179741, -2.5510462364763953e-05, -6.389413465512916e-05, -1.5497195136049413e-06, -4.2437604861333966e-05, -0.002886892529204488, -0.01249874010682106, -0.00045408427831716835, -4.207999518257566e-05, -0.06502348929643631, -0.029383763670921326, -0.27621588110923767, -0.03232869133353233, -0.0038404534570872784, -4.768370445162873e-07, -0.02682921104133129, -0.014707595109939575, -1.8611727952957153], "finish_reason": "stop"}], "metrics": {"energy": 346.41752874374396, "energy_per_token": 4.124018199330285, "time": 7.5227757, "time_per_token": 0.08955685357142858}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, \"*.txt\"))\n    dictionaries = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = f.read()\n            dictionaries.append(ast.literal_eval(data))\n    return dictionaries", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "    ", "diction", "aries", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "            ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "data", "))", "\n", "    ", "return", " diction", "aries", "\n", "\n", "if"], "logprobs": [-2.496295928955078, -0.06079009920358658, -0.07963430136442184, -0.00014447122521232814, -0.0034937553573399782, -0.00994205940514803, -0.2855580449104309, -8.821448318485636e-06, -7.807903602952138e-05, -1.0967194612021558e-05, -0.0019063648069277406, -0.0004522969538811594, -0.016409795731306076, -0.0018206939566880465, -0.9358512163162231, -0.019820841029286385, -0.01575475186109543, -0.004063208121806383, -0.00020561488054227084, -0.004973540082573891, -0.06902432441711426, -0.13580912351608276, -0.9380044937133789, -0.003172367112711072, -0.01731318049132824, -0.11030109226703644, -0.0028077249880880117, -0.35184335708618164, -0.04659733176231384, -0.24253413081169128, -0.12309496104717255, -0.001374610816128552, -0.0005465444410219789, -0.0009031984372995794, -0.006715348921716213, -0.0297585166990757, -0.00013958434283267707, -0.0002015625941567123, -0.0018675759201869369, -0.06648664176464081, -0.8160620927810669, -0.0021092090755701065, -0.16191406548023224, -0.0002076410164590925, -0.03842601552605629, -0.016519084572792053, -0.0024723222013562918, -0.0036946148611605167, -1.8135126829147339, -0.011057999916374683, -0.23045358061790466, -4.0411134250462055e-05, -1.2516897186287679e-05, -0.012762418016791344, -0.1416122019290924, -0.18000197410583496, -1.3111952543258667, -0.0025720868725329638, -0.01835843175649643, -0.043333522975444794, -0.0010349161457270384, -0.017903273925185204, -1.7523612768854946e-05, -2.6940935640595853e-05, -1.0728830375228426e-06, -7.867782187531702e-06, -0.0006291079334914684, -0.00524098752066493, -0.016478631645441055, -0.016999484971165657, -0.057798877358436584, -0.010255379602313042, -0.003285607323050499, -5.960462772236497e-07, -0.04640968516469002, -0.009920577518641949, -1.1059082746505737], "finish_reason": "stop"}], "metrics": {"energy": 304.94795027732846, "energy_per_token": 3.960362990614655, "time": 6.8765306, "time_per_token": 0.0893055922077922}}
{"outputs": [{"text": "# Initialize a list to store dictionaries\n    dicts_from_files = []\n\n    # Iterate over each file in the directory\n    for file_path in glob.glob(os.path.join(directory, '*.txt')):\n        with open(file_path, 'r') as file:\n            # Convert the contents of the file to a dictionary and append it to the list\n            dicts_from_files.append(ast.literal_eval(file.read()))\n\n    return dicts_from_files", "tokens": ["#", " Initialize", " a", " list", " to", " store", " diction", "aries", "\n", "    ", "dict", "s", "_", "from", "_", "files", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " directory", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " Convert", " the", " contents", " of", " the", " file", " to", " a", " dictionary", " and", " append", " it", " to", " the", " list", "\n", "            ", "dict", "s", "_", "from", "_", "files", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "file", ".", "read", "()))", "\n", "\n", "    ", "return", " dict", "s", "_", "from", "_", "files", "\n", "\n", "if"], "logprobs": [-1.0172709226608276, -1.025850534439087, -1.7270177602767944, -0.06323137134313583, -0.025549134239554405, -0.13212823867797852, -2.3203799724578857, -0.00028046013903804123, -0.387327641248703, -0.0012371037155389786, -1.4315769672393799, -1.0243101119995117, -1.6309183835983276, -3.008801221847534, -0.0008299481705762446, -0.8858477473258972, -0.01018021535128355, -0.007674258667975664, -0.002150248736143112, -0.11508346349000931, -0.001258058357052505, -0.006997838616371155, -1.6367967128753662, -0.0036549451760947704, -0.22935116291046143, -1.2276394367218018, -0.5913735032081604, -0.054165832698345184, -0.004086121916770935, -0.21207888424396515, -0.10296247899532318, -0.0006576997111551464, -0.018629111349582672, -0.45576196908950806, -1.2772266864776611, -0.32948896288871765, -0.0007164295529946685, -0.008263208903372288, -0.00015484087634831667, -0.030052734538912773, -0.0019093393348157406, -0.1914553940296173, -1.5497195136049413e-06, -3.313963316031732e-05, -3.576272320060525e-06, -0.0014857931528240442, -0.0005470209871418774, -0.012589740566909313, -0.000979420612566173, -0.28677037358283997, -0.005395255982875824, -0.08866708725690842, -0.004665086045861244, -0.022221848368644714, -0.00024399164249189198, -0.0047528864815831184, -0.0712190493941307, -0.7333563566207886, -0.00011920218821614981, -0.00031287543242797256, -0.0017091918271034956, -0.0006658005877397954, -1.1920928244535389e-07, -0.03850895166397095, -0.08231347054243088, -0.003169633913785219, -0.4164166748523712, -0.00013565097469836473, -0.4380451440811157, -0.004104048945009708, -0.003214908065274358, -0.013654167763888836, -0.44586023688316345, -2.9492130279541016, -0.3930176794528961, -2.9856138229370117, -0.06505532562732697, -0.12523087859153748, -0.017298651859164238, -0.050144895911216736, -0.028851022943854332, -0.2888623774051666, -2.0394322872161865, -0.2637884020805359, -0.4046589136123657, -0.008198417723178864, -0.036567043513059616, -0.02089628204703331, -0.035332292318344116, -0.003825846826657653, -0.4427242577075958, -0.06011870875954628, -9.941560711013153e-05, -5.209310256759636e-05, -2.145764938177308e-06, -0.007694960571825504, -0.004509873688220978, -0.01459928322583437, -0.0009196343016810715, -0.02931257151067257, -1.0371154530730564e-05, -1.1205610462639015e-05, -4.768370445162873e-07, -1.4305012882687151e-05, -0.0017141900025308132, -0.004813630133867264, -0.00023684080224484205, -1.0251946150674485e-05, -0.020250828936696053, -0.007898644544184208, -0.059239599853754044, -0.0016612313920632005, -0.47664526104927063, -0.002803088864311576, -3.4450891689630225e-05, -3.421248038648628e-05, -1.8715683836489916e-05, -2.0265558760002023e-06, -7.4741430580616e-05, -0.10420762002468109, -0.0035978129599243402, -1.1069905757904053], "finish_reason": "stop"}], "metrics": {"energy": 498.0495433120726, "energy_per_token": 4.0823733058366605, "time": 11.072251, "time_per_token": 0.09075615573770492}}
{"outputs": [{"text": "results = []\n    for file_path in glob.glob(os.path.join(directory, '*.txt')):\n        with open(file_path, 'r') as f:\n            for line in f:\n                line = line.strip()\n                results.append(ast.literal_eval(line))\n    return results", "tokens": ["results", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "for", " line", " in", " f", ":", "\n", "                ", "line", " =", " line", ".", "strip", "()", "\n", "                ", "results", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "line", "))", "\n", "    ", "return", " results", "\n", "\n", "if"], "logprobs": [-3.7481689453125, -0.01508542150259018, -0.035634420812129974, -0.02774062752723694, -0.21713608503341675, -0.5781694650650024, -0.972366452217102, -1.1172795295715332, -0.33997592329978943, -0.0008573431987315416, -0.007659352850168943, -0.00013207517622504383, -0.03932119533419609, -0.0026314177084714174, -0.24096252024173737, -3.099436753473128e-06, -4.339123915997334e-05, -2.0265558760002023e-06, -0.0026150099001824856, -0.0005491655902005732, -0.02027115412056446, -0.0012865131720900536, -0.33249884843826294, -0.013828071765601635, -0.04601801186800003, -0.00530905369669199, -0.03262803703546524, -0.0004037995240651071, -0.012239586561918259, -0.014511050656437874, -0.06359309703111649, -0.00021240839851088822, -0.00033444532891735435, -0.0015794672071933746, -0.0006618693005293608, -1.311301275563892e-06, -0.0670311450958252, -0.12509065866470337, -0.004779225215315819, -0.2562028765678406, -0.00020346954988781363, -0.6641870141029358, -0.029906388372182846, -0.0045789391733706, -0.0038794034626334906, -1.9659771919250488, -0.028303975239396095, -0.0024989587254822254, -0.0013330630026757717, -0.07473103702068329, -0.006452559493482113, -0.00276314583607018, -2.2666468620300293, -0.08253949880599976, -0.13710230588912964, -0.006892713718116283, -0.1365654319524765, -0.006128566339612007, -0.08995433151721954, -0.01417296938598156, -2.349813938140869, -0.005038184579461813, -0.006856130436062813, -0.0023744504433125257, -0.026841627433896065, -1.4305012882687151e-05, -6.12716976320371e-05, -1.1920922133867862e-06, -1.0132738680113107e-05, -0.0006618693005293608, -0.0031973214354366064, -0.016434187069535255, -0.01917983777821064, -0.09712757170200348, -0.010059846565127373, -0.0044590807519853115, -0.6122558116912842, -0.010559165850281715, -0.9539207220077515], "finish_reason": "stop"}], "metrics": {"energy": 312.47924629020696, "energy_per_token": 3.955433497344392, "time": 7.1047826, "time_per_token": 0.08993395696202532}}
{"outputs": [{"text": "# Initialize a list to hold the extracted dictionaries\n    dictionaries = []\n\n    # Loop through all the text files in the directory\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        # Open the file in read mode\n        with open(filename, 'r') as file:\n            # Read the file content as a string\n            content = file.read()\n            # Try to evaluate the string as a Python expression\n            try:\n                # Use ast.literal_eval instead of eval() for safer parsing of user-provided strings\n                dictionary = ast.literal_eval(content)\n                # Add the dictionary to the list\n                dictionaries.append(dictionary)\n            except Exception as e:\n                # Log or handle the error\n                print(f\"Error while converting the data: {str(e)}\")\n\n    return dictionaries\n\nresult = task_func(DIRECTORY)\nprint(result)", "tokens": ["#", " Initialize", " a", " list", " to", " hold", " the", " extracted", " diction", "aries", "\n", "    ", "diction", "aries", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " all", " the", " text", " files", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "#", " Open", " the", " file", " in", " read", " mode", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " Read", " the", " file", " content", " as", " a", " string", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "#", " Try", " to", " evaluate", " the", " string", " as", " a", " Python", " expression", "\n", "            ", "try", ":", "\n", "                ", "#", " Use", " ast", ".", "literal", "_", "eval", " instead", " of", " eval", "()", " for", " safer", " parsing", " of", " user", "-", "provided", " strings", "\n", "                ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "                ", "#", " Add", " the", " dictionary", " to", " the", " list", "\n", "                ", "diction", "aries", ".", "append", "(", "d", "ictionary", ")", "\n", "            ", "except", " Exception", " as", " e", ":", "\n", "                ", "#", " Log", " or", " handle", " the", " error", "\n", "                ", "print", "(", "f", "\"", "Error", " while", " converting", " the", " data", ":", " {", "str", "(", "e", ")}", "\"", ")", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "result", " =", " task", "_", "func", "(", "DI", "RECT", "ORY", ")", "\n", "print", "(", "result", ")"], "logprobs": [-1.0172709226608276, -1.025850534439087, -1.7270177602767944, -0.06323137134313583, -0.025549134239554405, -2.166792392730713, -0.14282917976379395, -1.1846017837524414, -0.01059903483837843, -0.00021586472576018423, -0.07801277190446854, -0.002301307860761881, -0.4602101147174835, -0.000785161682870239, -0.028762416914105415, -0.006903368514031172, -0.0011383965611457825, -0.09039615094661713, -0.0006482883472926915, -0.00411722669377923, -2.7454261779785156, -0.3502514362335205, -0.20085373520851135, -0.9624278545379639, -0.27602675557136536, -0.00428674416616559, -0.010189655236899853, -0.001524953986518085, -0.39798495173454285, -0.0779760554432869, -0.000863894063513726, -0.027694711461663246, -0.8561568856239319, -0.0002610342635307461, -0.03721756115555763, -9.786603914108127e-05, -0.007698627654463053, -0.0035169196780771017, -0.17131756246089935, -2.622600959512056e-06, -2.169585604860913e-05, -6.9141146923357155e-06, -0.0007968349382281303, -0.0005345107638277113, -0.01809212937951088, -0.00048494499060325325, -0.2929956316947937, -0.0026076382491737604, -0.0035236908588558435, -0.003931294661015272, -0.012230518274009228, -0.00019202772818971425, -0.0034690459724515676, -0.06731069833040237, -0.6930781602859497, -0.3709317445755005, -0.27249857783317566, -0.23786495625972748, -1.8592779636383057, -0.08700288087129593, -0.017369886860251427, -0.1409647911787033, -0.000476246903417632, -0.0062315212562680244, -9.691245941212401e-05, -0.0003040566807612777, -0.002511444501578808, -0.003984964452683926, -0.09237062931060791, -0.0017370387213304639, -0.1756276935338974, -7.891343557275832e-05, -0.5624972581863403, -0.0038095773197710514, -0.0010617101797834039, -0.007390421349555254, -0.03941059112548828, -0.34055453538894653, -0.031608693301677704, -1.2960753440856934, -0.48738208413124084, -1.5037341117858887, -0.04248031601309776, -0.13337840139865875, -0.11360623687505722, -0.0004673104267567396, -0.40218833088874817, -0.002422614488750696, -0.0010981488740071654, -3.9934315282152966e-05, -7.510157047363464e-06, -0.0019645453430712223, -0.025901280343532562, -0.7204405069351196, -0.0997164249420166, -2.268278121948242, -0.06759964674711227, -2.5776846408843994, -0.0030366519931703806, -0.40197309851646423, -0.05204547196626663, -0.055607736110687256, -0.5793164372444153, -0.5894784927368164, -0.2891051769256592, -0.004792631138116121, -0.10961631685495377, -0.0006493605324067175, -0.0004940004437230527, -0.006334465462714434, -0.6737900376319885, -1.5572774410247803, -0.48555248975753784, -0.0869148001074791, -0.0007521660882048309, -0.00023505308490712196, -5.1973900554003194e-05, -1.331559419631958, -0.0034410094376653433, -0.014858061447739601, -1.9594186544418335, -1.1865473985671997, -0.5235541462898254, -1.8462858200073242, -1.0942578315734863, -2.313108205795288, -3.053402900695801, -1.3228564262390137, -1.1065480709075928, -0.11072633415460587, -0.0017664319602772593, -0.8531312346458435, -0.009010841138660908, -0.0029087637085467577, -0.0021100416779518127, -2.264974000354414e-06, -1.3112935448589269e-05, -7.271740287251305e-06, -7.986990567587782e-06, -0.00023040501400828362, -0.0054082986898720264, -0.018576104193925858, -0.005160108674317598, -0.3270702362060547, -0.08318580687046051, -1.086814522743225, -0.005181574262678623, -0.19910402595996857, -0.0027707540430128574, -0.0014653194230049849, -0.05402681604027748, -0.29271936416625977, -0.0011038646334782243, -0.0016858663875609636, -1.0728830375228426e-06, -0.00018010901112575084, -0.0003399271226953715, -0.0002343380037928, -0.0003228858404327184, -2.3841855067985307e-07, -0.00018809456378221512, -0.00036840804386883974, -0.02015725150704384, -0.1990123838186264, -1.8588135242462158, -0.06784439831972122, -0.06132112070918083, -0.0015343570848926902, -0.02038644626736641, -0.003152046585455537, -0.44098636507987976, -1.4379587173461914, -1.532818078994751, -0.0240654107183218, -0.06484831869602203, -0.29900118708610535, -2.2528557777404785, -0.0010468247346580029, -0.13378477096557617, -0.01224229484796524, -0.039606884121894836, -0.054132409393787384, -0.09072412550449371, -2.0905649662017822, -2.6618120670318604, -1.9431538581848145, -4.110081672668457, -2.2211549282073975, -0.013544212095439434, -1.7221696376800537, -0.00023040501400828362, -0.00029059001826681197, -0.0039175208657979965, -0.041052184998989105, -0.0021849824115633965, -0.006261967122554779, -0.4013362526893616, -0.00298542738892138, -1.4081552028656006, -0.0010266992030665278, -1.311301275563892e-06, -0.43843623995780945, -0.008538169786334038, -3.011323928833008, -0.03334522992372513, -0.0062696672976017, -0.0001486429391661659, -0.00012492353562265635, -0.009680942632257938, -0.014687390066683292, -1.1920922133867862e-06, -8.821448318485636e-06, -0.01687501184642315, -0.04885392263531685, -0.12234105169773102, -0.006490460131317377, -0.05125799775123596, -0.9193956851959229], "finish_reason": "stop"}], "metrics": {"energy": 991.244161741257, "energy_per_token": 4.546991567620445, "time": 22.355991, "time_per_token": 0.10255041743119266}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, '*.txt'))\n    dictionaries = []\n    for file_name in files:\n        with open(file_name, \"r\") as file:\n            contents = file.read()\n        dictionaries.append(ast.literal_eval(contents))\n    return dictionaries", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "diction", "aries", " =", " []", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", "_", "name", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "        ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "contents", "))", "\n", "    ", "return", " diction", "aries", "\n", "\n", "print"], "logprobs": [-2.496295928955078, -0.06079009920358658, -0.07963430136442184, -0.00014447122521232814, -0.0034937553573399782, -0.00994205940514803, -0.2855580449104309, -8.821448318485636e-06, -7.807903602952138e-05, -1.0967194612021558e-05, -0.0019063648069277406, -0.0004522969538811594, -0.016409795731306076, -0.0018206939566880465, -0.5313788652420044, -0.008011114783585072, -0.03149861469864845, -0.0051775421015918255, -0.0037390338256955147, -0.0607222281396389, -0.14422602951526642, -1.0076273679733276, -0.002836135681718588, -0.012364756315946579, -0.14698360860347748, -0.002141922013834119, -0.33841413259506226, -0.04955878108739853, -0.21252861618995667, -2.3023622035980225, -2.334414005279541, -0.00018571082910057157, -0.001693720929324627, -0.000694153131917119, -0.0012276978231966496, -0.011298601515591145, -0.04622451215982437, -0.0002683041093405336, -0.0004687402688432485, -0.025070730596780777, -0.0005187834613025188, -2.0265558760002023e-06, -0.08306644856929779, -2.934927463531494, -0.04495285451412201, -0.0023713582195341587, -0.22682823240756989, -0.0005551227368414402, -0.49482080340385437, -0.02497493103146553, -0.004256000276654959, -0.007839980535209179, -3.3706367015838623, -0.0014804366510361433, -0.02106577903032303, -0.0003426679759286344, -2.2053474822314456e-05, -0.01221874263137579, -0.1317666620016098, -1.9879717826843262, -0.9236830472946167, -0.0016884845681488514, -0.034526240080595016, -0.04166525974869728, -0.0015162649797275662, -0.03486016020178795, -2.1934269170742482e-05, -6.627816765103489e-05, -1.4305104514278355e-06, -1.2874520507466514e-05, -0.0008976006065495312, -0.005090252961963415, -0.037310127168893814, -0.019878104329109192, -0.11619825661182404, -0.010909791104495525, -0.004624742548912764, -4.768370445162873e-07, -0.043335236608982086, -0.010415129363536835, -1.7844345569610596], "finish_reason": "stop"}], "metrics": {"energy": 333.1878083171844, "energy_per_token": 4.113429732310919, "time": 7.1210485, "time_per_token": 0.08791417901234568}}
{"outputs": [{"text": "# Get all text files in the directory\n    file_list = glob.glob(os.path.join(directory, '*.txt'))\n\n    # Initialize an empty list to store the extracted dictionaries\n    results = []\n\n    # Extract dictionaries from each text file\n    for file in file_list:\n        with open(file, 'r', encoding='utf-8') as f:\n            try:\n                # Use ast.literal_eval to convert Unicode string representation to a dictionary\n                results.append(ast.literal_eval(f.read()))\n            except SyntaxError:\n                print(\"Invalid dictionary representation in file: \", file)\n                results.append(None)\n\n    return results\n\nresult = task_func(DIRECTORY)\nprint(result)", "tokens": ["#", " Get", " all", " text", " files", " in", " the", " directory", "\n", "    ", "file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " extracted", " diction", "aries", "\n", "    ", "results", " =", " []", "\n", "\n", "    ", "#", " Ext", "ract", " diction", "aries", " from", " each", " text", " file", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "try", ":", "\n", "                ", "#", " Use", " ast", ".", "literal", "_", "eval", " to", " convert", " Un", "icode", " string", " representation", " to", " a", " dictionary", "\n", "                ", "results", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "f", ".", "read", "()))", "\n", "            ", "except", " Sy", "ntax", "Error", ":", "\n", "                ", "print", "(", "\"", "Invalid", " dictionary", " representation", " in", " file", ":", " \"", ",", " file", ")", "\n", "                ", "results", ".", "append", "(", "None", ")", "\n", "\n", "    ", "return", " results", "\n", "\n", "result", " =", " task", "_", "func", "(", "DI", "RECT", "ORY", ")", "\n", "print", "(", "result", ")<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.0172709226608276, -2.0058023929595947, -1.2317769527435303, -0.5754819512367249, -0.09344001114368439, -0.04770074784755707, -0.049244146794080734, -0.32736483216285706, -0.04946507140994072, -0.003426040755584836, -2.64994740486145, -0.07192563265562057, -0.7492117285728455, -0.001905769924633205, -0.025256726890802383, -0.00031287543242797256, -0.006627839058637619, -0.008967837318778038, -0.1548231691122055, -5.245195097813848e-06, -4.1483970562694594e-05, -7.390948667307384e-06, -0.0008291144040413201, -0.0006012300727888942, -0.02778920903801918, -0.0017867805436253548, -0.3932138681411743, -0.0037882011383771896, -0.006796576082706451, -0.005060245748609304, -0.00443273363634944, -0.004279265645891428, -0.21594791114330292, -0.0007509748684242368, -0.10476289689540863, -1.896049976348877, -0.7556639909744263, -0.00316226645372808, -0.025845753028988838, -0.043921131640672684, -0.1404152810573578, -0.3766118884086609, -1.6850652694702148, -0.00842386856675148, -0.0001784403866622597, -0.016624843701720238, -0.0004508670826908201, -4.29290771484375, -0.041273437440395355, -0.004475695546716452, -0.0008204193436540663, -0.030982254073023796, -0.0004135706985834986, -0.0675126239657402, -1.4198427200317383, -0.0016215997748076916, -0.1629200428724289, -0.00018785618885885924, -0.017903391271829605, -0.0875147134065628, -0.2694769501686096, -0.0008229206432588398, -0.14879633486270905, -0.0006160030607134104, -0.006138992961496115, -0.2993799149990082, -0.8279748558998108, -0.0005975367967039347, -8.34461570775602e-06, -4.768370445162873e-07, -0.0003698380314745009, -0.0016721803694963455, -0.012726990506052971, -0.18417863547801971, -0.00012087091454304755, -0.00036745471879839897, -0.008109972812235355, -0.059389468282461166, -0.06836801767349243, -0.0024944401811808348, -1.0742151737213135, -0.00035339308669790626, -0.021501533687114716, -0.061892539262771606, -0.024428199976682663, -0.06743484735488892, -0.005735843442380428, -0.01077995728701353, -5.6622808187967166e-05, -0.22046931087970734, -0.01357326004654169, -0.0066027333959937096, -0.0049719978123903275, -1.5909624099731445, -0.0003914067056030035, -0.007535840384662151, -0.005092032253742218, -0.7875170111656189, -1.2233854532241821, -0.14240208268165588, -0.15133213996887207, -0.001167569193057716, -0.00014208737411536276, -8.642300235806033e-05, -0.2754930257797241, -0.6806403398513794, -1.029367446899414, -0.0006840273272246122, -0.1703706681728363, -1.2091394662857056, -0.11095477640628815, -0.6897785067558289, -0.5158922076225281, -0.026161447167396545, -0.0005080600967630744, -1.052931785583496, -0.004665086045861244, -0.013038380071520805, -0.0007161913090385497, -0.00450477097183466, -4.529942543740617e-06, -6.9141146923357155e-06, -1.6689286894688848e-06, -3.099436753473128e-06, -0.0018072477541863918, -0.004192610736936331, -0.00026901919045485556, -4.768360213347478e-06, -0.12968383729457855, -0.0030140706803649664, -0.0072732665576040745, -0.008702685125172138, -0.7313957214355469, -3.2186455882765586e-06, -5.483612312673358e-06, -0.3770531713962555, -0.019257018342614174, -0.002161906100809574, -0.31786590814590454, -0.015979794785380363, -2.7954277992248535, -0.5135908126831055, -0.07787834852933884, -0.12790942192077637, -0.07081687450408936, -0.19659371674060822, -0.6272726655006409, -0.27470335364341736, -0.5174998641014099, -0.0406966358423233, -0.008059362880885601, -0.00859643891453743, -2.195054054260254, -3.4417853355407715, -0.3812609910964966, -0.08816086500883102, -0.5133672952651978, -0.7143279314041138, -0.00010549465514486656, -0.12517723441123962, -0.2729704976081848, -0.0029970749747008085, -0.21791031956672668, -0.004897621460258961, -0.3474389910697937, -0.006987066473811865, -3.37491512298584, -0.03445080295205116, -0.007066022139042616, -0.00013350549852475524, -0.00014590153296012431, -0.007414679042994976, -0.011337262578308582, -1.6689286894688848e-06, -1.3351351299206726e-05, -0.009228195063769817, -0.03609319403767586, -0.1531992107629776, -0.014170970767736435, -0.07332964986562729, -0.3851221203804016, -9.179073458653875e-06, -3.2186455882765586e-06, -3.6954811548639555e-06, -2.455681169521995e-05, -1.9617236852645874, -0.0025503274518996477], "finish_reason": "stop"}], "metrics": {"energy": 788.9548995056152, "energy_per_token": 4.219010157784039, "time": 17.09476, "time_per_token": 0.09141582887700535}}
{"outputs": [{"text": "all_dictionaries = []\n    path_pattern = os.path.join(directory, '*.txt')\n    text_files = glob.glob(path_pattern)\n\n    for file in text_files:\n        with open(file, 'r') as f:\n            data = f.read()\n            all_dictionaries.append(ast.literal_eval(data))\n\n    return all_dictionaries", "tokens": ["all", "_", "diction", "aries", " =", " []", "\n", "    ", "path", "_", "pattern", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "')", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "path", "_", "pattern", ")", "\n", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "            ", "all", "_", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "data", "))", "\n", "\n", "    ", "return", " all", "_", "diction", "aries", "\n", "\n", "#"], "logprobs": [-3.5608444213867188, -0.015564280562102795, -1.6129074096679688, -0.0016430224059149623, -0.013026966713368893, -0.021586468443274498, -0.05105423182249069, -0.26768621802330017, -3.561189651489258, -1.4004395008087158, -3.0858070850372314, -0.0028753625229001045, -0.10389307141304016, -1.728519782773219e-05, -0.0006086166249588132, -1.2159273865108844e-05, -0.002788467099890113, -0.002631655428558588, -0.053520265966653824, -0.0027105992194265127, -0.4837173521518707, -0.022134985774755478, -0.03812277689576149, -0.005122394300997257, -0.0002932118659373373, -0.0629926472902298, -0.08342622220516205, -1.3232988119125366, -0.045149318873882294, -0.03685731440782547, -0.009564882144331932, -0.005419325083494186, -1.7165990357170813e-05, -0.001819028053432703, -0.0001161031104857102, -0.0009685831028036773, -9.214453893946484e-05, -4.768370445162873e-07, -0.0024129818193614483, -0.00881990883499384, -0.5795630812644958, -0.00046075694262981415, -0.09498167037963867, -0.5421115159988403, -0.3813888132572174, -0.0012571059633046389, -7.152555099310121e-07, -3.3378546504536644e-06, -0.0005504761938937008, -0.0008654424455016851, -0.01281443890184164, -0.06279093027114868, -0.00019560330838430673, -0.0007104733376763761, -0.004197715315967798, -0.10964173823595047, -0.1359647959470749, -0.006240761838853359, -0.3277544379234314, -0.0004818470624741167, -0.34835320711135864, -0.031614698469638824, -0.00242380378767848, -0.0044983625411987305, -2.521827220916748, -0.03315681219100952, -0.22638659179210663, -4.017272294731811e-05, -1.3232143828645349e-05, -0.02695488929748535, -0.13696467876434326, -0.15211458504199982, -2.5052950382232666, -6.365573790390044e-05, -0.003351430408656597, -5.793403761344962e-05, -0.044093843549489975, -0.05705758556723595, -0.0020234365947544575, -0.022095341235399246, -1.7046782886609435e-05, -3.194758028257638e-05, -1.1920922133867862e-06, -2.7418097943154862e-06, -0.0007724162423983216, -0.004346922505646944, -0.015880655497312546, -0.016288181766867638, -0.28607290983200073, -0.0023671959061175585, -0.016903143376111984, -0.00451604463160038, -2.264974000354414e-06, -6.437280717364047e-06, -7.152555099310121e-07, -0.06919287145137787, -0.004771157167851925, -2.046900749206543], "finish_reason": "stop"}], "metrics": {"energy": 386.2800215263367, "energy_per_token": 3.941632872717722, "time": 8.757775, "time_per_token": 0.08936505102040816}}
{"outputs": [{"text": "# Initialize an empty list to store the extracted dictionaries\n    dictionaries = []\n\n    # Create the directory path\n    path = os.path.join(os.getcwd(), directory)\n\n    # Iterate over the text files in the directory\n    for filename in glob.glob(os.path.join(path, '*.txt')):\n        with open(filename, 'r', encoding='utf-8') as file:\n            # Convert each line to a dictionary using the ast library\n            for line in file:\n                try:\n                    dictionary = ast.literal_eval(line)\n                    dictionaries.append(dictionary)\n                except ValueError:\n                    raise ValueError(f\"The file {filename} has invalid dictionary representation\")\n\n    return dictionaries", "tokens": ["#", " Initialize", " an", " empty", " list", " to", " store", " the", " extracted", " diction", "aries", "\n", "    ", "diction", "aries", " =", " []", "\n", "\n", "    ", "#", " Create", " the", " directory", " path", "\n", "    ", "path", " =", " os", ".", "path", ".", "join", "(", "os", ".", "get", "c", "wd", "()", ",", " directory", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " the", " text", " files", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "#", " Convert", " each", " line", " to", " a", " dictionary", " using", " the", " ast", " library", "\n", "            ", "for", " line", " in", " file", ":", "\n", "                ", "try", ":", "\n", "                ", "    ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "line", ")", "\n", "                ", "    ", "diction", "aries", ".", "append", "(", "d", "ictionary", ")", "\n", "                ", "except", " Value", "Error", ":", "\n", "                ", "    ", "raise", " Value", "Error", "(", "f", "\"", "The", " file", " {", "filename", "}", " has", " invalid", " dictionary", " representation", "\"", ")", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "if"], "logprobs": [-1.0172709226608276, -1.025850534439087, -0.5521310567855835, -0.0018352109473198652, -0.023419322445988655, -0.04526781663298607, -0.17128370702266693, -0.18680225312709808, -1.1037509441375732, -0.010536045767366886, -0.0002233732520835474, -0.05943822115659714, -0.0017084777355194092, -0.8445457220077515, -0.0011193446116521955, -0.05919229984283447, -0.005143860820680857, -0.0016934829764068127, -0.11265344172716141, -0.000735608336981386, -0.005148130003362894, -2.8407797813415527, -1.9099583625793457, -1.6034420728683472, -1.0371155738830566, -1.051139235496521, -0.0009260656661354005, -1.6810601949691772, -0.03408748656511307, -0.0626741573214531, -2.9801878554280847e-05, -0.0015336429933086038, -5.8410845667822286e-05, -0.08514488488435745, -0.039661310613155365, -0.281814306974411, -5.113947918289341e-05, -0.036653582006692886, -0.0007327494095079601, 0.0, -0.001073380233719945, -0.0017309696413576603, -0.17038996517658234, -0.003727276111021638, -0.010450403206050396, -0.03495075926184654, -0.0005575056420639157, -0.007160121574997902, -1.1893850564956665, -0.0011395872570574284, -0.2622816860675812, -1.7132575511932373, -0.2585729658603668, -0.003647818695753813, -0.014930173754692078, -0.0016963391099125147, -0.18407273292541504, -0.057635944336652756, -0.0007051127031445503, -0.023779552429914474, -1.187767505645752, -0.00035958975786343217, -0.02104266732931137, -2.5152843591058627e-05, -0.020332131534814835, -0.002449966035783291, -0.16623958945274353, -3.576278118089249e-07, -7.629365427419543e-06, -2.3841855067985307e-07, -3.3378044463461265e-05, -0.000436925794929266, -0.016691789031028748, -0.0008958140970207751, -0.6556921601295471, -0.0024953915271908045, -0.005798779893666506, -0.0032936870120465755, -0.004206381272524595, -0.00016830935783218592, -0.0036739488132297993, -0.07279609888792038, -0.8342386484146118, -8.368142152903602e-05, -0.00030763185350224376, -0.02975539304316044, -0.035162318497896194, -0.07596352696418762, -0.0029954109340906143, -1.1556031703948975, -0.0003332536434754729, -0.022536007687449455, -0.09888431429862976, -0.03148255869746208, -0.05761118605732918, -0.006000243593007326, -0.00974587444216013, -6.782778655178845e-05, -0.19743216037750244, -0.001762028899975121, -0.003594605950638652, -0.011912044137716293, -0.28673887252807617, -3.1242387294769287, -2.5262107849121094, -1.4527634382247925, -0.3056265711784363, -0.016202090308070183, -0.7053918242454529, -0.7230793833732605, -2.2684130668640137, -0.11180494725704193, -2.8578290939331055, -0.08981627970933914, -0.0030868046451359987, -0.6014768481254578, -0.005474100820720196, -0.0013255628291517496, -0.00027044929447583854, -0.02269928529858589, -0.0014543681172654033, -0.0055253165774047375, -1.2830781936645508, -0.0010021670022979379, -0.0033502422738820314, -0.001096005435101688, -0.002726292237639427, -1.024118185043335, -0.033442653715610504, -0.004209705162793398, -0.00837031751871109, -5.125986263010418e-06, -9.858122211880982e-05, -1.1920928244535389e-07, -6.318072337307967e-06, -0.00043299360550008714, -0.004054896999150515, -0.24313780665397644, -0.008118723519146442, -0.011747938580811024, -0.164006769657135, -0.23736122250556946, -2.7418097943154862e-06, -0.0001618731184862554, -0.0006748544401489198, -0.00035065223346464336, -0.0002669931564014405, 0.0, -0.0002456601650919765, -0.023193033412098885, -0.004789309576153755, -0.00568297877907753, -1.34080970287323, -2.622600959512056e-06, -0.6358723640441895, -0.015664860606193542, -0.0009323778795078397, -0.0019387274514883757, -2.1845009326934814, -0.06473658978939056, -1.0609570381348021e-05, -0.1141345202922821, -0.608067512512207, -0.20238299667835236, -2.406254291534424, -0.8241305947303772, -0.3503713607788086, -0.034753892570734024, -0.008579183369874954, -0.6970883011817932, -0.5474110245704651, -0.05019115284085274, -0.018773255869746208, -0.35980039834976196, -0.0025882574263960123, -0.007825787179172039, -0.1641690582036972, -0.0030944105237722397, -0.6838716864585876, -0.002174871740862727, -4.768370445162873e-07, -0.05970025435090065, -0.0046080113388597965, -0.9648436307907104], "finish_reason": "stop"}], "metrics": {"energy": 777.1604499034878, "energy_per_token": 4.223698097301564, "time": 16.908703, "time_per_token": 0.091895125}}
{"outputs": [{"text": "dictionaries = []\n    files = glob.glob(directory + '/*')\n    for file in files:\n        if os.path.isfile(file):\n            with open(file, 'r', encoding='utf-8') as f:\n                for line in f.readlines():\n                    dictionaries.append(ast.literal_eval(line))\n\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "directory", " +", " '", "/*", "')", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "):", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "for", " line", " in", " f", ".", "read", "lines", "():", "\n", "                ", "    ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "line", "))", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "print"], "logprobs": [-2.8267574310302734, -0.002758747199550271, -0.037850093096494675, -0.013340028002858162, -0.025585155934095383, -0.23396450281143188, -1.974869728088379, -0.038901396095752716, -0.03026440739631653, -0.00011014331539627165, -0.0034938741009682417, -0.004662950057536364, -2.868985652923584, -0.09520605206489563, -0.5495771169662476, -0.6503576040267944, -2.378598928451538, -0.05512737110257149, -0.21663101017475128, -0.12268475443124771, -0.23651430010795593, -0.11929844319820404, -0.003924764227122068, -0.0014757943572476506, -0.0034274663776159286, -0.015556534752249718, -1.3479974269866943, -0.3400701880455017, -1.2278481335670222e-05, -0.0033199451863765717, -1.5497195136049413e-06, -0.039711836725473404, -0.016934320330619812, -0.0012049565557390451, -0.002311655320227146, -0.2091161608695984, -0.01898709498345852, -0.00569056486710906, -0.07446450740098953, -0.00033206192892976105, -0.0008379285573028028, -0.003011218272149563, -0.19357585906982422, -0.130208820104599, -0.010564591735601425, -1.5454297065734863, -0.0007363230688497424, -0.03318437561392784, -0.15212492644786835, -0.03996053338050842, -0.0942620187997818, -0.004594128113240004, -0.013086974620819092, -0.00019143179815728217, -0.17615540325641632, -0.04336925223469734, -0.005166156683117151, -0.0030667202081531286, -2.415445566177368, -0.035316526889801025, -0.0007795632118359208, -0.0015180503251031041, -2.522660255432129, -5.400034933700226e-05, -0.04495410993695259, -0.0006089740199968219, -0.005330279003828764, -0.0012319840025156736, -0.003092271275818348, -1.0283608436584473, -0.004060596227645874, -0.008828062564134598, -0.0073925512842834, -0.002500504720956087, -0.03658485785126686, -1.585470999998506e-05, -5.9126061387360096e-05, -9.536738616588991e-07, -1.3708974620385561e-05, -0.0017860665684565902, -0.01553693413734436, -0.20063166320323944, -0.020945897325873375, -2.070225715637207, -0.003896740498021245, -0.020948931574821472, -0.0041857254691421986, -5.960462772236497e-07, -0.44030603766441345, -0.00800082553178072, -1.8726109266281128], "finish_reason": "stop"}], "metrics": {"energy": 399.47596238708485, "energy_per_token": 4.389845740517416, "time": 8.153849, "time_per_token": 0.08960273626373626}}
{"outputs": [{"text": "# Initialize an empty list to store the extracted dictionaries\n    result = []\n\n    # Find all text files in the specified directory\n    text_files = glob.glob(os.path.join(directory, '*.txt'))\n\n    # Iterate over each text file and extract dictionaries\n    for file in text_files:\n        with open(file, 'r') as f:\n            try:\n                # Read the file and convert the content to a Python dictionary\n                content = f.read()\n                dicts = ast.literal_eval(content)\n                # Append the dictionary to the result list\n                result.append(dicts)\n            except ValueError:\n                print(f'Error: Invalid dictionary representation in {file}')\n\n    # Return the extracted dictionaries\n    return result", "tokens": ["#", " Initialize", " an", " empty", " list", " to", " store", " the", " extracted", " diction", "aries", "\n", "    ", "result", " =", " []", "\n", "\n", "    ", "#", " Find", " all", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", " and", " extract", " diction", "aries", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "try", ":", "\n", "                ", "#", " Read", " the", " file", " and", " convert", " the", " content", " to", " a", " Python", " dictionary", "\n", "                ", "content", " =", " f", ".", "read", "()", "\n", "                ", "dict", "s", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "                ", "#", " App", "end", " the", " dictionary", " to", " the", " result", " list", "\n", "                ", "result", ".", "append", "(", "dict", "s", ")", "\n", "            ", "except", " Value", "Error", ":", "\n", "                ", "print", "(", "f", "'", "Error", ":", " Invalid", " dictionary", " representation", " in", " {", "file", "}", "')", "\n", "\n", "    ", "#", " Return", " the", " extracted", " diction", "aries", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-1.0172709226608276, -1.025850534439087, -0.5521310567855835, -0.0018352109473198652, -0.023419322445988655, -0.04526781663298607, -0.17128370702266693, -0.18680225312709808, -1.1037509441375732, -0.010536045767366886, -0.0002233732520835474, -0.05943822115659714, -0.0017084777355194092, -2.674675464630127, -0.08821991831064224, -0.008315346203744411, -0.002095409668982029, -0.22039759159088135, -0.0008438840159215033, -0.005642320960760117, -3.121734142303467, -0.03038051724433899, -0.41103848814964294, -0.016180040314793587, -0.17083020508289337, -0.0031589390709996223, -0.4113354980945587, -0.0006764031131751835, -0.37514734268188477, -0.0004907834227196872, -0.9776679277420044, -0.009098261594772339, -0.007795861456543207, -0.004206381272524595, -0.004982910584658384, -0.00012170527770649642, -0.001753103919327259, -0.0010993395699188113, -0.13174690306186676, -2.3841830625315197e-06, -1.9192511899746023e-05, -2.3841830625315197e-06, -0.00047052756417542696, -0.0002754547167569399, -0.00874877255409956, -0.00048780461656861007, -0.4148857295513153, -0.0024801704566925764, -0.0021168221719563007, -0.00203473842702806, -0.0014994817320257425, -0.0034037057776004076, -0.02205277979373932, -0.0007639588438905776, -0.047775644809007645, -0.63832688331604, -0.00040391870425082743, -0.24901263415813446, -0.2846054434776306, -0.016690732911229134, -0.0003909300430677831, -1.941028356552124, -0.14064264297485352, -0.29633766412734985, -7.748303323751315e-05, -0.4162398874759674, -0.000288087350782007, -0.0030171608086675406, -0.26994210481643677, -0.7200993895530701, -0.0006874820101074874, -1.5497195136049413e-06, -8.344646857949556e-07, -8.725739462533966e-05, -0.00044955636258237064, -0.012310003861784935, -0.22290481626987457, -4.95898348162882e-05, -0.0002797450579237193, -0.004395348019897938, -0.020928969606757164, -0.04556901007890701, -0.0009859706042334437, -0.2556058466434479, -8.391981828026474e-05, -0.13272292912006378, -0.00952875055372715, -0.005478013306856155, -0.002878453116863966, -1.9112223386764526, -0.0002181292074965313, -0.004327456932514906, -0.0035172761417925358, -0.23310486972332, -2.213770866394043, -0.0752643346786499, -0.9674280881881714, -2.397263288497925, -0.3070354759693146, -0.8167216181755066, -2.7594072818756104, -0.020917879417538643, -0.03964332118630409, -1.650230884552002, -0.020870130509138107, -0.628758430480957, -0.00026067672297358513, -1.1326225996017456, -0.0024949158541858196, -0.025037365034222603, -5.006777428206988e-06, -7.510157047363464e-06, -0.0007064230740070343, -0.13236375153064728, -0.006003561429679394, -2.307831287384033, -2.0466573238372803, -0.04428853467106819, -0.01698952354490757, -1.4781842764932662e-05, -0.0003311085747554898, -2.3841855067985307e-07, -3.2186455882765586e-06, -0.00013815402053296566, -0.003304855665192008, -0.029368020594120026, -0.015950465574860573, -1.2034145593643188, -0.8429245948791504, -0.6136486530303955, -0.00041416651220060885, -0.0721481442451477, -0.6810646653175354, -0.024114053696393967, -0.0012862751027569175, -0.07488147914409637, -0.03284343332052231, -0.00695439288392663, -0.0008578196284361184, -0.011202415451407433, -0.0029238590504974127, -0.01697428710758686, -0.0003311085747554898, -0.001709786825813353, -0.0015922023449093103, -0.00035613393993116915, -0.0010989824077114463, -0.026545071974396706, -0.003628814360126853, -1.6078565120697021, -1.6689286894688848e-06, -0.6383897662162781, -0.01166487392038107, -0.003106413409113884, -0.43727782368659973, -0.01761236973106861, -0.19646179676055908, -2.178105115890503, -1.6054632663726807, -0.7958944439888, -0.3527834713459015, -0.050333425402641296, -0.19029226899147034, -0.0625079795718193, -0.7453891038894653, -0.04892328381538391, -0.006919350940734148, -0.09018637984991074, -0.004795359913259745, -0.3071179986000061, -0.0015733970794826746, -1.2738524675369263, -0.017705600708723068, -0.0027509010396897793, -1.184157371520996, -0.005875577684491873, -0.0002926159941125661, -0.030724724754691124, -0.0005569098866544664, -0.004212079104036093, -0.0019189768936485052, -0.16609159111976624, -0.007275278214365244, -1.210185170173645], "finish_reason": "stop"}], "metrics": {"energy": 758.6098934535974, "energy_per_token": 4.122879855726072, "time": 16.73901, "time_per_token": 0.0909728804347826}}
{"outputs": [{"text": "file_list = glob.glob(os.path.join(directory, '*.txt'))\n    dict_list = []\n    for file in file_list:\n        with open(file, 'r') as f:\n            content = f.read()\n            try:\n                content_dict = ast.literal_eval(content)\n            except:\n                raise ValueError(f\"File {file} has invalid dictionary representation\")\n            dict_list.append(content_dict)\n    return dict_list", "tokens": ["file", "_", "list", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "dict", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "try", ":", "\n", "                ", "content", "_", "dict", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "            ", "except", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "File", " {", "file", "}", " has", " invalid", " dictionary", " representation", "\"", ")", "\n", "            ", "dict", "_", "list", ".", "append", "(", "content", "_", "dict", ")", "\n", "    ", "return", " dict", "_", "list", "\n", "\n", "if"], "logprobs": [-3.0503997802734375, -0.10811493545770645, -0.8692774176597595, -0.008061609230935574, -0.1429576277732849, -0.0004047528200317174, -0.004978877957910299, -0.01032357756048441, -0.5377023220062256, -8.34461570775602e-06, -0.00015364897262770683, -1.4781842764932662e-05, -0.003660646267235279, -0.0009884715545922518, -0.03757274150848389, -0.004295290447771549, -0.7194556593894958, -0.012369818985462189, -0.04812152683734894, -0.005856497213244438, -0.004627353046089411, -0.06613366305828094, -0.17737960815429688, -1.6153384447097778, -0.11843206733465195, -0.03130245581269264, -0.0036410484462976456, -0.10327936708927155, -0.0037335706874728203, -0.334870308637619, -0.06317004561424255, -0.3392438292503357, -0.49842002987861633, -0.001016457681544125, -4.6491513785440475e-06, -1.0728830375228426e-06, -0.0009189196862280369, -0.001965378178283572, -0.009577162563800812, -0.04655978083610535, -0.0002619877050165087, -0.00087878224439919, -0.005150857847183943, -0.10302108526229858, -0.12317653745412827, -0.00823849905282259, -0.37929749488830566, -0.0002632986579556018, -0.1111813634634018, -0.028596188873052597, -0.0027528032660484314, -0.00391455227509141, -2.273404359817505, -0.005451218690723181, -0.055394142866134644, -6.663577369181439e-05, -1.6331539882230572e-05, -0.019539495930075645, -0.12470179796218872, -0.14799124002456665, -1.299914836883545, -0.0008468617452308536, -0.002316412515938282, -0.004057034384459257, -2.712721824645996, -0.6664758324623108, -0.11920183897018433, -0.007640779484063387, -0.020130731165409088, -1.07287787614041e-05, -0.0006852186052128673, -2.3841855067985307e-07, -4.410734163684538e-06, -0.00030429501202888787, -0.00786446314305067, -0.025865036994218826, -0.028462490066885948, -1.5619200468063354, -0.002394905546680093, -1.7140737771987915, -0.008367598988115788, -0.0018033209489658475, -0.7297088503837585, -0.017594216391444206, -5.793403761344962e-05, -0.2007872313261032, -0.7479872107505798, -0.28874433040618896, -2.7346091270446777, -0.3957127332687378, -0.022256942465901375, -0.012956482358276844, -0.9302502870559692, -0.2333253175020218, -0.03745688870549202, -0.016560358926653862, -0.1908424347639084, -0.0017910643946379423, -0.0071544405072927475, -0.15269280970096588, -0.15998631715774536, -4.279521817807108e-05, -9.083335316972807e-05, -0.005374625325202942, -0.006160437595099211, -0.0007986216805875301, -0.0023436478804796934, -0.00025602878304198384, -5.900685573578812e-05, -0.0010300336871296167, -0.0014002051902934909, -0.12065909802913666, -0.015622141771018505, -0.005062143784016371, -7.10462118149735e-05, -1.5020257706055418e-05, -0.06810123473405838, -0.010231662541627884, -1.0063014030456543], "finish_reason": "stop"}], "metrics": {"energy": 478.9161159324646, "energy_per_token": 4.024505175903064, "time": 10.837266, "time_per_token": 0.09106946218487395}}
{"outputs": [{"text": "files = glob.glob(f\"{directory}/*.txt\")\n\n    dicts = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = f.read()\n            d = ast.literal_eval(data)\n            dicts.append(d)\n\n    return dicts", "tokens": ["files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "txt", "\"", ")", "\n", "\n", "    ", "dict", "s", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "            ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "data", ")", "\n", "            ", "dict", "s", ".", "append", "(", "d", ")", "\n", "\n", "    ", "return", " dict", "s", "\n", "\n", "if"], "logprobs": [-2.496295928955078, -0.06079009920358658, -0.07963430136442184, -0.00014447122521232814, -0.0034937553573399782, -0.00994205940514803, -1.7797977924346924, -0.42207685112953186, -0.002757082926109433, -0.05228840559720993, -0.07397263497114182, -0.08718863874673843, -0.03486902266740799, -0.005356839392334223, -0.00020966715237591416, -0.007413377519696951, -0.08483117818832397, -1.976914405822754, -0.0009908534120768309, -2.3162214756011963, -0.840521514415741, -0.09897339344024658, -0.029555071145296097, -0.01327297743409872, -0.18538692593574524, -0.02684360183775425, -0.19497013092041016, -0.07876679301261902, -0.0019165972480550408, -0.0007625294383615255, -0.001212814822793007, -0.013673687353730202, -0.041748613119125366, -0.0001752223033690825, -0.0005146132898516953, -0.007512650452554226, -0.10902450233697891, -0.5834300518035889, -0.0031452730763703585, -0.23583334684371948, -0.0002256377338198945, -0.03234923630952835, -0.01608221046626568, -0.002445684978738427, -0.003627745434641838, -2.0329158306121826, -0.010822057723999023, -0.2754554748535156, -1.7046782886609435e-05, -1.156323378381785e-05, -0.014916902408003807, -0.1272559016942978, -0.18404020369052887, -3.1868839263916016, -0.5621891617774963, -0.014029335230588913, -1.5020257706055418e-05, -7.521823135903105e-05, -3.576278118089249e-07, -2.622600959512056e-06, -0.00018916724366135895, -0.004421458579599857, -0.029432613402605057, -0.049142688512802124, -0.011994970962405205, -0.09141053259372711, -0.00010752100206445903, -0.001035749795846641, -0.003147649811580777, -0.0005365362740121782, -0.0010768335778266191, -0.0010188394226133823, -0.003607434220612049, -0.5968754291534424, -0.0020830377470701933, -0.017096640542149544, -0.004018803592771292, -7.974783511599526e-05, -0.21692748367786407, -0.005899042822420597, -1.1826159954071045], "finish_reason": "stop"}], "metrics": {"energy": 376.899095249176, "energy_per_token": 4.653075249989827, "time": 7.7563806, "time_per_token": 0.09575778518518518}}
{"outputs": [{"text": "# Find all text files in the directory\n    text_files = glob.glob(os.path.join(directory, '*.txt'))\n\n    # Convert each text file to a dictionary\n    dictionaries = []\n    for file_path in text_files:\n        with open(file_path, 'r') as file:\n            try:\n                dictionaries.append(ast.literal_eval(file.read()))\n            except ValueError:\n                print(f\"Invalid dictionary representation in {file_path}. Skipping...\")\n\n    return dictionaries", "tokens": ["#", " Find", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Convert", " each", " text", " file", " to", " a", " dictionary", "\n", "    ", "diction", "aries", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "try", ":", "\n", "                ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "file", ".", "read", "()))", "\n", "            ", "except", " Value", "Error", ":", "\n", "                ", "print", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " {", "file", "_", "path", "}", ".", " Sk", "ipping", ".", ".", ".", "\"", ")", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "#"], "logprobs": [-1.0172709226608276, -3.471832513809204, -0.07410669326782227, -0.2964435815811157, -0.017138006165623665, -0.1175476610660553, -0.038710467517375946, -0.6910692453384399, -0.1919572949409485, -0.0031793781090527773, -0.8140210509300232, -0.013384373858571053, -0.011502024717628956, -0.0026751705445349216, -0.008321612142026424, -0.00012170527770649642, -0.0014379409840330482, -0.002452701097354293, -0.12717624008655548, -3.3378546504536644e-06, -1.9073304429184645e-05, -1.4424220353248529e-05, -0.0007169060409069061, -0.00032145579461939633, -0.018533041700720787, -0.00045134371612221, -0.2835252583026886, -0.003214908065274358, -0.0018059387803077698, -0.0034849646035581827, -0.0013069906271994114, -0.004607299342751503, -0.24188992381095886, -0.0005484507419168949, -0.12254534661769867, -1.7456214427947998, -1.3348671197891235, -0.21251261234283447, -0.002157385926693678, -0.04462559521198273, -0.03661151975393295, -0.23852293193340302, -0.23697490990161896, -0.0007138088112697005, -0.31634068489074707, -0.0003121604095213115, -0.00533549627289176, -0.15026211738586426, -0.0020412816666066647, -0.019049203023314476, -0.018891995772719383, -0.5687105059623718, -0.5888261795043945, -0.07247039675712585, -4.053033626405522e-05, -0.00127948890440166, -8.344646857949556e-07, -4.768370445162873e-07, -0.0001225396408699453, -0.0006441186997108161, -0.005105790216475725, -0.04845332354307175, -6.305972783593461e-05, -0.0002053765201708302, -0.0010296764085069299, -5.602820692729438e-06, 0.0, -0.01758519746363163, -0.034298304468393326, -0.0019279003608971834, -0.21058079600334167, -9.703165414975956e-05, -0.5050820708274841, -0.0016396900173276663, -0.0009667966514825821, -0.0038067272398620844, -0.9490623474121094, -0.00038675934774801135, -0.0037847571074962616, -0.0031312506180256605, -1.6274988651275635, -0.0015704215038567781, -0.00444816192612052, -0.006043256726115942, -0.0005814530304633081, -0.028573134914040565, -6.079655122448457e-06, -3.671578815556131e-05, -2.3841855067985307e-07, -4.410734163684538e-06, -0.0006124289939180017, -0.00385470362380147, -0.00016664070426486433, -3.6954811548639555e-06, -0.019762054085731506, -0.009906059131026268, -0.008296784944832325, -0.002991488901898265, -1.582634687423706, -4.529942543740617e-06, -0.620205283164978, -0.015211527235805988, -0.0027462646830826998, -0.2729344964027405, -0.0198987890034914, -0.15175187587738037, -0.06632723659276962, -0.7365054488182068, -0.03592656925320625, -0.1771932989358902, -0.04002845287322998, -0.9459503293037415, -0.15861876308918, -0.03441118448972702, -7.259582343976945e-05, -2.071640729904175, -0.1953486055135727, -0.34730035066604614, -0.004930717870593071, -1.2601494789123535, -0.7723400592803955, -0.007082830648869276, -0.0035284424666315317, -0.0013369916705414653, -0.001746439840644598, -0.43527060747146606, -0.000933926145080477, -0.13263575732707977, -0.0022653888445347548, -1.1920922133867862e-06, -0.060165517032146454, -0.004655831027776003, -1.3517106771469116], "finish_reason": "stop"}], "metrics": {"energy": 545.9140561180113, "energy_per_token": 4.104616963293318, "time": 12.1580715, "time_per_token": 0.09141407142857143}}
{"outputs": [{"text": "# Get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory, '*.txt'))\n\n    # Iterate over each text file and extract dictionaries\n    dictionaries = []\n    for file_path in text_files:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            try:\n                # Convert the Unicode string to a dictionary using ast.literal_eval()\n                dictionary = ast.literal_eval(content)\n                dictionaries.append(dictionary)\n            except SyntaxError as e:\n                print(f\"Error parsing dictionary in file '{file_path}': {str(e)}\")\n    return dictionaries\n\ntask_func(DIRECTORY)", "tokens": ["#", " Get", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", " and", " extract", " diction", "aries", "\n", "    ", "diction", "aries", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "try", ":", "\n", "                ", "#", " Convert", " the", " Un", "icode", " string", " to", " a", " dictionary", " using", " ast", ".", "literal", "_", "eval", "()", "\n", "                ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "                ", "diction", "aries", ".", "append", "(", "d", "ictionary", ")", "\n", "            ", "except", " Sy", "ntax", "Error", " as", " e", ":", "\n", "                ", "print", "(", "f", "\"", "Error", " parsing", " dictionary", " in", " file", " '", "{", "file", "_", "path", "}", "':", " {", "str", "(", "e", ")}", "\"", ")", "\n", "    ", "return", " diction", "aries", "\n", "\n", "task", "_", "func", "(", "DI", "RECT", "ORY", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.0172709226608276, -2.0058023929595947, -1.0807340145111084, -0.0064575341530144215, -0.00044347942457534373, -0.14278815686702728, -0.30280303955078125, -0.01765160821378231, -0.014667890034615993, -0.004715394228696823, -0.4147784113883972, -0.05675746500492096, -0.004117701668292284, -0.680554211139679, -0.010722286999225616, -0.011294947937130928, -0.0029000865761190653, -0.02449183166027069, -0.00015233787416946143, -0.00101062236353755, -0.0027528032660484314, -0.07871853560209274, -3.3378546504536644e-06, -2.1934269170742482e-05, -8.821448318485636e-06, -0.0004557524516712874, -0.0004338276921771467, -0.023499203845858574, -0.0004848258395213634, -0.28502920269966125, -0.0025517542380839586, -0.002493607811629772, -0.003619549795985222, -0.00135925377253443, -0.004579057916998863, -0.22554506361484528, -0.0006468587671406567, -0.0903373435139656, -3.5331597328186035, -0.0008793777669779956, -0.2781115770339966, -0.5505535006523132, -0.058354657143354416, -0.0005085367010906339, -0.6746823191642761, -0.48152652382850647, -0.6635256409645081, -0.00013064485392533243, -0.5015314817428589, -0.0004961451631970704, -0.24052295088768005, -0.00017391123401466757, -0.009123186580836773, -0.005265890154987574, -0.0018443731823936105, -0.01940271072089672, -0.015148241072893143, -0.29717713594436646, -0.6071973443031311, -0.026002218946814537, -2.6225699912174605e-05, -0.000863894063513726, -8.344646857949556e-07, -2.3841855067985307e-07, -9.500529267825186e-05, -0.0008029097807593644, -0.006065058521926403, -0.038217782974243164, -4.1960789531003684e-05, -0.00017593742813915014, -0.0008693729760125279, -6.794906312279636e-06, 0.0, -0.011811558157205582, -0.039810359477996826, -0.0013213959755375981, -0.4055687487125397, -0.00011050090688513592, -0.10995043069124222, -0.0009791824268177152, -0.0013546108966693282, -0.0022979776840656996, -1.7925751209259033, -0.00044204952428117394, -0.0079912468791008, -4.4225667807040736e-05, -1.0013530300057027e-05, -0.002169756917282939, -0.1329275220632553, -0.12861941754817963, -1.0500152111053467, -0.0002087136817863211, -0.0019370617810636759, -0.004550340585410595, -0.630657970905304, -0.7928223013877869, -0.5607843995094299, -1.7593140602111816, -0.00018726025882642716, -0.030588189139962196, -0.5929394960403442, -0.02559421956539154, -0.8303259015083313, -0.29979902505874634, -0.1889781951904297, -0.11044061928987503, -0.0012871085200458765, -8.260862523457035e-05, -3.4689302992774174e-05, -1.7085754871368408, -0.04038011655211449, -0.0008111285860650241, -0.5643614530563354, -0.005018732510507107, -0.002943352097645402, -0.0024077491834759712, -5.8412379075889476e-06, -7.867782187531702e-06, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016926287207752466, -0.00614858977496624, -0.03553226590156555, -0.0044964635744690895, -0.18201498687267303, -0.06737077236175537, -8.344646857949556e-07, -4.255681051290594e-05, -0.000542493537068367, -0.00041130665340460837, -0.00036352223833091557, 0.0, -0.00017653337272349745, -0.0038083898834884167, -0.013746473006904125, -0.0006124289939180017, -0.5363801121711731, -4.6491513785440475e-06, -2.7418097943154862e-06, -0.8470772504806519, -0.12437214702367783, -0.000931544229388237, -0.008129365742206573, -0.002368147252127528, -0.46058496832847595, -0.0033053308725357056, -0.037501439452171326, -0.05656338110566139, -0.3456898629665375, -0.8838905096054077, -0.6278215050697327, -0.06428272277116776, -0.5594837069511414, -0.5923402309417725, -2.9205850296420977e-05, -0.028606614097952843, -0.0055229454301297665, -5.173549288883805e-05, -0.02644813433289528, -0.00031406714697368443, -0.007667160592973232, -0.8900046348571777, -6.0794889577664435e-05, -0.00010668662434909493, -0.0025618611834943295, -0.01167406514286995, -0.0018165291985496879, -0.004000518936663866, -2.449909210205078, -0.025335879996418953, -0.0018963703187182546, -3.576278118089249e-07, -0.04060964658856392, -0.0094221206381917, -3.1295526027679443, -0.03978492692112923, -0.14014694094657898, -0.01566779427230358, -0.023251038044691086, -7.510157047363464e-06, -1.811964830267243e-05, -0.5779061913490295, -5.483612312673358e-06, -6.9141146923357155e-06, -3.4570634852570947e-06, -4.255681051290594e-05, -0.1697431355714798], "finish_reason": "stop"}], "metrics": {"energy": 852.8866486301418, "energy_per_token": 4.560891169145144, "time": 19.19859, "time_per_token": 0.10266625668449197}}
{"outputs": [{"text": "# Get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory, \"*.txt\"))\n    dict_list = []\n\n    # Iterate over each text file and process the content\n    for text_file in text_files:\n        with open(text_file, \"r\") as file:\n            content = file.read()\n            try:\n                # Convert the Unicode string representation to a Python dictionary using ast.literal_eval()\n                dict_list.append(ast.literal_eval(content))\n            except SyntaxError:\n                # If the dictionary is in invalid format, continue to the next file\n                continue\n\n    return dict_list", "tokens": ["#", " Get", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "    ", "dict", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " file", " and", " process", " the", " content", "\n", "    ", "for", " text", "_", "file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "try", ":", "\n", "                ", "#", " Convert", " the", " Un", "icode", " string", " representation", " to", " a", " Python", " dictionary", " using", " ast", ".", "literal", "_", "eval", "()", "\n", "                ", "dict", "_", "list", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "content", "))", "\n", "            ", "except", " Sy", "ntax", "Error", ":", "\n", "                ", "#", " If", " the", " dictionary", " is", " in", " invalid", " format", ",", " continue", " to", " the", " next", " file", "\n", "                ", "continue", "\n", "\n", "    ", "return", " dict", "_", "list", "\n", "\n", "#"], "logprobs": [-1.0172709226608276, -2.0058023929595947, -1.0807340145111084, -0.0064575341530144215, -0.00044347942457534373, -0.14278815686702728, -0.30280303955078125, -0.01765160821378231, -0.014667890034615993, -0.004715394228696823, -0.4147784113883972, -0.05675746500492096, -0.004117701668292284, -0.680554211139679, -0.010722286999225616, -0.011294947937130928, -0.0029000865761190653, -0.02449183166027069, -0.00015233787416946143, -0.00101062236353755, -0.0027528032660484314, -0.07871853560209274, -3.3378546504536644e-06, -2.1934269170742482e-05, -8.821448318485636e-06, -0.0004557524516712874, -0.0004338276921771467, -0.023499203845858574, -0.0004848258395213634, -1.4122989177703857, -0.006218845024704933, -0.001335086883045733, -0.004125299863517284, -0.00010799778101500124, -0.0017160940915346146, -0.0036778682842850685, -1.5762920379638672, -3.0175867080688477, -0.41534602642059326, -0.06494440138339996, -0.003641998628154397, -0.010589716024696827, -0.10350845009088516, -0.6298946142196655, -0.0013516347389668226, -0.16577975451946259, -0.8670600652694702, -0.0016638495726510882, -0.27028951048851013, -0.4573071002960205, -0.05317353084683418, -0.0006665153778158128, -1.1668498516082764, -3.304285764694214, -1.8666398525238037, -0.7951104640960693, -0.030740562826395035, -0.0008298290777020156, -0.004905806854367256, -1.9082677364349365, -0.023659994825720787, -0.001976205036044121, -0.0021099227014929056, -0.0006845038151368499, -4.768370445162873e-07, -5.960462772236497e-07, -0.00016842853801790625, -0.00028772983932867646, -0.015225381590425968, -0.2019120156764984, -4.7205765440594405e-05, -0.0002890407631639391, -0.007453845348209143, -1.9073468138230965e-06, -7.748573807475623e-06, -0.009461797773838043, -0.7296086549758911, -0.00805723387748003, -0.000513064325787127, -0.36592167615890503, -0.00013016807497479022, -0.28077223896980286, -0.0018836389062926173, -0.0018703126115724444, -0.004270719364285469, -0.5863881707191467, -0.0006893880781717598, -0.008094956167042255, -0.00010585224663373083, -1.4662635294371285e-05, -0.0029289701487869024, -0.17133614420890808, -0.22741802036762238, -1.0781623125076294, -0.001129108713939786, -0.007909643463790417, -0.012041966430842876, -0.3311305046081543, -0.919533371925354, -0.24981023371219635, -1.4718953371047974, -8.201262971851975e-05, -0.022534959018230438, -1.1348114013671875, -0.04601425677537918, -0.018336545675992966, -0.32362493872642517, -0.005402132868766785, -2.256107807159424, -0.1607886254787445, -0.17693614959716797, -0.002406560117378831, -0.00013398226292338222, -3.45700973412022e-05, -1.5017765760421753, -0.04942002519965172, -0.0013473490253090858, -0.7510198950767517, -0.019472157582640648, -0.3929475247859955, -0.0064814588986337185, -0.008366298861801624, -0.00043084874050691724, -0.009725568816065788, -9.536697689327411e-06, -5.8412379075889476e-06, -8.344646857949556e-07, -8.344646857949556e-07, -0.0003281293320469558, -0.003731314092874527, -0.01685836724936962, -0.005924166180193424, -0.013528806157410145, -0.007454909849911928, -0.6199474334716797, -7.390948667307384e-06, -1.1801649634435307e-05, -0.3769708275794983, -0.021235598251223564, -0.003782500745728612, -1.757883906364441, -1.0149067640304565, -0.604375422000885, -2.7655997276306152, -1.5917878150939941, -3.674961805343628, -0.5543517470359802, -0.36966586112976074, -0.2725541293621063, -3.7526965141296387, -0.2765328288078308, -0.11366944015026093, -0.0006637753685936332, -0.20682449638843536, -0.3838042616844177, -0.0011245838832110167, -0.41211581230163574, -0.011449581943452358, -0.5383383631706238, -0.0030469917692244053, -0.11938995867967606, -0.0026467551942914724, -0.0001674750237725675, -2.3483953555114567e-05, -0.026537874713540077, -0.005861119367182255, -1.289191484451294], "finish_reason": "stop"}], "metrics": {"energy": 790.2982820510869, "energy_per_token": 4.732325042222077, "time": 17.144728, "time_per_token": 0.10266304191616767}}
{"outputs": [{"text": "all_dict = []\n\n    for file_path in glob.glob(os.path.join(directory, \"*.txt\")):\n        with open(file_path, 'r') as file:\n            contents = file.read()\n            try:\n                dict = ast.literal_eval(contents)\n                all_dict.append(dict)\n            except ValueError:\n                raise ValueError(f\"The file '{file_path}' contains invalid dictionary representation.\")\n\n    return all_dict", "tokens": ["all", "_", "dict", " =", " []", "\n", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", ":", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "            ", "try", ":", "\n", "                ", "dict", " =", " ast", ".", "literal", "_", "eval", "(", "contents", ")", "\n", "                ", "all", "_", "dict", ".", "append", "(", "dict", ")", "\n", "            ", "except", " Value", "Error", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "The", " file", " '", "{", "file", "_", "path", "}'", " contains", " invalid", " dictionary", " representation", ".", "\"", ")", "\n", "\n", "    ", "return", " all", "_", "dict", "\n", "\n", "if"], "logprobs": [-3.5608444213867188, -0.015564280562102795, -0.9116402268409729, -1.7067952156066895, -0.08727450668811798, -0.03647877648472786, -1.8494420051574707, -0.0012631779536604881, -0.7299525737762451, -0.755513608455658, -1.5803388357162476, -0.7116032242774963, -0.0022656265646219254, -0.0077118766494095325, -0.00037865620106458664, -0.04269885644316673, -0.005687009077519178, -0.3784255087375641, -3.814689989667386e-06, -8.618460560683161e-05, -6.6756979322235566e-06, -0.004160677082836628, -0.0008235162240453064, -0.03288288787007332, -0.004510941915214062, -1.316760778427124, -0.037670671939849854, -0.020191365852952003, -0.005597156938165426, -0.00017438798386137933, -0.030269727110862732, -0.0008989107445813715, -0.014998875558376312, -0.05463311821222305, -0.13465222716331482, -0.00040904260822571814, -0.0007901645149104297, -0.0024302254896610975, -0.0014262752374634147, -8.344646857949556e-07, -0.10189300775527954, -0.6184316277503967, -0.014219393022358418, -0.3718424141407013, -0.0006561510381288826, -0.5761949419975281, -0.012348271906375885, -0.0032756265718489885, -0.008875207975506783, -3.6940724849700928, -0.0016171961324289441, -0.00955956894904375, -0.0003780603874474764, -2.539125671319198e-05, -0.019201239570975304, -0.1254168152809143, -0.2891370356082916, -1.1235896348953247, -0.0027214179281145334, -0.003185438457876444, -0.008936882950365543, -1.7148014307022095, -2.047421455383301, -0.02414035238325596, -1.3708974620385561e-05, -0.0004493180604185909, -2.3841855067985307e-07, -1.2874520507466514e-05, -0.0004042761866003275, -0.00956712570041418, -0.03912587836384773, -0.022045666351914406, -0.28005385398864746, -0.07574031502008438, -3.814689989667386e-06, -1.9073304429184645e-05, -0.005079816095530987, -0.0027155925054103136, -0.00045563330058939755, -0.0026848006527870893, -0.0005474975914694369, -0.006507041398435831, -0.03768330067396164, -0.0053903949446976185, -1.559594988822937, -2.109982233378105e-05, -0.5292496085166931, -0.020775560289621353, -0.004262528847903013, -2.272322654724121, -0.06651318818330765, -5.364403477869928e-06, -0.13604865968227386, -0.5282028913497925, -0.1732027530670166, -1.9420056343078613, -0.6305874586105347, -2.3204243183135986, -0.0008966478053480387, -0.0371914878487587, -0.027633022516965866, -0.0001232548092957586, -0.014494013972580433, -1.0844907760620117, -0.25983408093452454, -0.07684329897165298, -0.02058674581348896, -0.702704131603241, -0.06601716578006744, -0.0036184806376695633, -0.009539023973047733, -0.5457057952880859, -0.003563603386282921, -0.02676781639456749, -0.006119087804108858, -3.4570634852570947e-06, -1.597391747054644e-05, -0.07801695913076401, -0.0060149370692670345, -1.1090247631072998], "finish_reason": "stop"}], "metrics": {"energy": 499.6549378337862, "energy_per_token": 4.1637911486148855, "time": 10.850502, "time_per_token": 0.09042085000000001}}
{"outputs": [{"text": "result = []\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n            # Convert Unicode string to Python dictionary\n            dictionary = ast.literal_eval(content)\n            result.append(dictionary)\n    return result", "tokens": ["result", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "content", " =", " file", ".", "read", "()", "\n", "            ", "#", " Convert", " Un", "icode", " string", " to", " Python", " dictionary", "\n", "            ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "            ", "result", ".", "append", "(", "d", "ictionary", ")", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.967947006225586, -0.11666194349527359, -0.031686536967754364, -0.013705084100365639, -0.17075896263122559, -0.561211347579956, -0.6730371117591858, -0.0007846852531656623, -0.0567346028983593, -6.174850568640977e-05, -0.035554006695747375, -0.0029226704500615597, -0.22278976440429688, -1.5497195136049413e-06, -5.924526340095326e-05, -1.9073468138230965e-06, -0.0012006701435893774, -0.0005427317810244858, -0.034263864159584045, -0.0007981451926752925, -0.30853161215782166, -0.004756801761686802, -0.020247558131814003, -0.004904027562588453, -0.018705865368247032, -0.0004259632551111281, -0.01335590798407793, -0.013143331743776798, -0.06422515213489532, -0.00018571082910057157, -0.00038342276820912957, -0.011196402832865715, -0.0750289112329483, -0.11846351623535156, -0.0056493147276341915, -1.3017778396606445, -0.0006712805479764938, -0.027079854160547256, -0.09922138601541519, -0.025847729295492172, -0.04561741650104523, -0.004164832178503275, -0.017311306670308113, -9.893881360767409e-05, -0.5903375148773193, -0.004828222561627626, -0.002572800265625119, -0.00406012125313282, -1.362234354019165, -0.001077548018656671, -0.014308003708720207, -8.427741704508662e-05, -1.1801649634435307e-05, -0.010324639268219471, -0.15669474005699158, -0.13019385933876038, -2.534940242767334, -1.2823165655136108, -1.0463799238204956, -0.0017820206703618169, -0.15105770528316498, -0.5789681077003479, -0.49988362193107605, -0.03485232964158058, -0.3830343782901764, -0.0038140900433063507, -1.361176609992981, -0.035032257437705994, -0.006023823749274015, -0.005760852713137865, -1.156323378381785e-05, -0.00017593742813915014, -2.3841855067985307e-07, -3.2186455882765586e-06, -0.0002329078270122409, -0.007469345349818468, -0.03326163440942764, -0.006172403693199158, -0.01191687397658825, -0.06080905720591545, -0.0008965287124738097, -0.0029929152224212885, -0.0006317288498394191, -0.001110771088860929, -5.960462772236497e-07, -0.0006227937992662191, -0.0014075858052819967, -0.08046366274356842, -0.012032897211611271, -0.003078485606238246, -0.05799182131886482, -0.007822947576642036, -2.0548863410949707], "finish_reason": "stop"}], "metrics": {"energy": 402.5906923580171, "energy_per_token": 4.328932175892657, "time": 8.375771, "time_per_token": 0.09006205376344087}}
{"outputs": [{"text": "# Construct the path for the directory\n    path = os.path.join(os.getcwd(), directory)\n\n    # Get all the text files in the specified directory\n    text_files = glob.glob(os.path.join(path, '*.txt'))\n\n    # List to store the dictionaries extracted from the text files\n    dicts = []\n\n    # Iterate through each text file\n    for file in text_files:\n        with open(file, 'r') as f:\n            # Read the contents of the file\n            contents = f.read()\n\n            # Convert the Unicode string representation of dictionary to Python dictionary\n            dictionary = ast.literal_eval(contents)\n\n            # Append the dictionary to the list\n            dicts.append(dictionary)\n\n    return dicts", "tokens": ["#", " Construct", " the", " path", " for", " the", " directory", "\n", "    ", "path", " =", " os", ".", "path", ".", "join", "(", "os", ".", "get", "c", "wd", "()", ",", " directory", ")", "\n", "\n", "    ", "#", " Get", " all", " the", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "#", " List", " to", " store", " the", " diction", "aries", " extracted", " from", " the", " text", " files", "\n", "    ", "dict", "s", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " text", " file", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " Read", " the", " contents", " of", " the", " file", "\n", "            ", "contents", " =", " f", ".", "read", "()", "\n", "\n", "            ", "#", " Convert", " the", " Un", "icode", " string", " representation", " of", " dictionary", " to", " Python", " dictionary", "\n", "            ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "contents", ")", "\n", "\n", "            ", "#", " App", "end", " the", " dictionary", " to", " the", " list", "\n", "            ", "dict", "s", ".", "append", "(", "d", "ictionary", ")", "\n", "\n", "    ", "return", " dict", "s", "\n", "\n", "if"], "logprobs": [-1.0172709226608276, -3.779428720474243, -0.20786389708518982, -1.4777531623840332, -3.225123882293701, -0.37189313769340515, -0.4380072355270386, -0.4917536973953247, -0.001601009746082127, -0.6633216738700867, -0.09356442838907242, -0.14620506763458252, -4.660974445869215e-05, -0.004753123503178358, -0.0005178302526473999, -0.323150634765625, -0.06172478199005127, -0.10245946794748306, -2.062299427052494e-05, -0.10224553197622299, -0.0007923085941001773, -4.768370445162873e-07, -0.0010218166280537844, -0.0024601928889751434, -0.13425631821155548, -0.007832174189388752, -0.0186588317155838, -0.18232885003089905, -0.0004505096294451505, -0.02035701274871826, -1.5955712795257568, -0.8969244956970215, -0.6059048771858215, -0.2557793855667114, -0.06532526761293411, -0.1352068930864334, -0.007887882180511951, -2.068542957305908, -0.009950203821063042, -0.07584872841835022, -0.0004687402688432485, -0.8993783593177795, -0.03336690738797188, -0.0253530815243721, -0.007758838124573231, -0.014848547987639904, -8.201262971851975e-05, -0.0020718553569167852, -0.006710138637572527, -0.28906339406967163, -7.152555099310121e-07, -3.1709168979432434e-05, -1.311301275563892e-06, -0.0001134808044298552, -0.00027891082572750747, -0.005804350133985281, -0.0018518695142120123, -0.8188796043395996, -0.0039011340122669935, -0.003977365326136351, -0.0025480680633336306, -0.0021061161532998085, -0.003675017738714814, -0.029755044728517532, -0.000514851592015475, -0.0899011641740799, -2.1223645210266113, -0.0883713960647583, -0.24115051329135895, -0.23079775273799896, -0.4997888207435608, -0.0003505330823827535, -0.3199908137321472, -0.003932957071810961, -0.0856931135058403, -0.0468735545873642, -0.0009894242975860834, -0.005649551749229431, -0.00026008085114881396, -1.9464845657348633, -1.045912742614746, -0.19642800092697144, -0.004460386000573635, -0.0007009433466009796, -0.02729424461722374, -0.0004650464979931712, -0.17712989449501038, -0.908279538154602, -0.0010347970528528094, -1.2917098999023438, -0.28724953532218933, -0.024424012750387192, -0.0005614373367279768, -0.1515069454908371, -0.00017689094238448888, -0.0017521519912406802, -0.3078314960002899, -0.15508922934532166, -0.0005728749092668295, -8.344646857949556e-07, -3.576278118089249e-07, -0.0001486429391661659, -0.0004328744253143668, -0.07139488309621811, -0.9201317429542542, -6.496695277746767e-05, -0.00028606137493625283, -0.003975703381001949, -0.06827972829341888, -0.07839035242795944, -0.0036942586302757263, -0.31251347064971924, -0.00018046658078674227, -0.062111809849739075, -0.016973115503787994, -0.006675324868410826, -0.01472639013081789, -0.22497597336769104, -0.30132871866226196, -0.10170630365610123, -1.1257076263427734, -0.007504841312766075, -0.02085413597524166, -0.06770092248916626, -0.19353047013282776, -0.0003492222458589822, -0.27466946840286255, -0.0002783149539027363, -0.0015387610765174031, -1.0609570381348021e-05, -5.364403477869928e-06, -0.0036219253670424223, -0.022443577647209167, -0.4099113345146179, -0.013978905975818634, -0.032054539769887924, -0.5213138461112976, -0.13248948752880096, -0.8706231713294983, -0.00013302871957421303, -0.038354888558387756, -0.26302388310432434, -1.1289558410644531, -1.3814661502838135, -0.03242840617895126, -2.4567747116088867, -0.013481879606842995, -0.3684881031513214, -0.001211028778925538, -1.914108395576477, -0.3601808249950409, -0.0044657266698777676, -0.007460116408765316, -8.702239938429557e-06, -4.6132929128361866e-05, -2.3841855067985307e-07, -2.9802276912960224e-06, -0.00024863966973498464, -0.0024302254896610975, -0.02277514524757862, -0.00435594329610467, -0.19465972483158112, -0.002567092888057232, -0.006228914950042963, -0.6568453311920166, -0.0008448368753306568, -0.016491061076521873, -0.029192514717578888, -0.0020973130594938993, -0.0038481722585856915, -0.014361237175762653, -0.09155206382274628, -0.00011252723925281316, -0.001929566147737205, -2.2411095415009186e-05, -0.0003405229654163122, -0.0003367095487192273, -0.0001161031104857102, -0.0006644901586696506, -3.576278118089249e-07, -0.0004203628050163388, -0.0002961912250611931, -0.019291864708065987, -0.003523215651512146, -0.6283283829689026, -0.0024126251228153706, -6.258291978156194e-05, -0.10086754709482193, -0.003337767207995057, -1.1051368713378906], "finish_reason": "stop"}], "metrics": {"energy": 789.1768611907956, "energy_per_token": 4.153562427319977, "time": 17.562918, "time_per_token": 0.0924364105263158}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, \"*.txt\"))\n    dictionaries = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n        content = ast.literal_eval(content)\n        dictionaries.append(content)\n    return dictionaries", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "    ", "diction", "aries", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "        ", "content", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "        ", "diction", "aries", ".", "append", "(", "content", ")", "\n", "    ", "return", " diction", "aries", "\n", "\n", "if"], "logprobs": [-2.496295928955078, -0.06079009920358658, -0.07963430136442184, -0.00014447122521232814, -0.0034937553573399782, -0.00994205940514803, -0.2855580449104309, -8.821448318485636e-06, -7.807903602952138e-05, -1.0967194612021558e-05, -0.0019063648069277406, -0.0004522969538811594, -0.016409795731306076, -0.0018206939566880465, -0.9358512163162231, -0.019820841029286385, -0.01575475186109543, -0.004063208121806383, -0.00020561488054227084, -0.004973540082573891, -0.06902432441711426, -0.13580912351608276, -0.9380044937133789, -0.003172367112711072, -0.01731318049132824, -0.11030109226703644, -0.0028077249880880117, -0.35184335708618164, -0.04659733176231384, -0.24253413081169128, -0.12309496104717255, -0.001374610816128552, -0.0005465444410219789, -0.0009031984372995794, -0.006715348921716213, -0.0297585166990757, -0.00013958434283267707, -0.0002015625941567123, -0.0018675759201869369, -0.06648664176464081, -0.8160620927810669, -0.0021092090755701065, -0.16191406548023224, -0.0002076410164590925, -0.03842601552605629, -0.016519084572792053, -0.0024723222013562918, -0.0036946148611605167, -1.4777315855026245, -0.0013498490443453193, -0.053375277668237686, -4.076874756719917e-05, -1.0609570381348021e-05, -0.00598554965108633, -0.1509052813053131, -2.0051069259643555, -3.4740045070648193, -0.1949726790189743, -0.5616403222084045, -4.3987260141875595e-05, -0.0012711548479273915, -1.311301275563892e-06, -1.3708974620385561e-05, -0.0006386386230587959, -0.0071420129388570786, -0.022476565092802048, -0.04566388204693794, -0.006932491902261972, -0.2336515188217163, -1.6689160474925302e-05, -0.0040584588423371315, -0.008489471860229969, -0.0006012300727888942, -0.01099162083119154, -0.0017914213240146637, -0.0034285355359315872, -0.09634505212306976, -0.011108223348855972, -0.004377782344818115, -7.152555099310121e-07, -0.050071533769369125, -0.011440271511673927, -0.956801176071167], "finish_reason": "stop"}], "metrics": {"energy": 362.8047117881775, "energy_per_token": 4.371141105881656, "time": 7.4981847, "time_per_token": 0.09033957469879518}}
{"outputs": [{"text": "try:\n        # Generate a list of all text files in the directory\n        all_text_files = glob.glob(os.path.join(directory, '*.txt'))\n        output_list = []\n\n        # Loop through all text files and extract dictionaries using ast.literal_eval\n        for text_file in all_text_files:\n            with open(text_file, 'r') as f:\n                text_data = f.read().strip()\n                output_list.append(ast.literal_eval(text_data))\n\n        return output_list\n    except ValueError as e:\n        # If the text_file has invalid dictionary representation, raise an error\n        print(f\"Error: {e}\")\n    except Exception as e:\n        # If there are other errors, raise an error\n        print(f\"An unexpected error occurred: {e}\")", "tokens": ["try", ":", "\n", "        ", "#", " Generate", " a", " list", " of", " all", " text", " files", " in", " the", " directory", "\n", "        ", "all", "_", "text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "        ", "output", "_", "list", " =", " []", "\n", "\n", "        ", "#", " Loop", " through", " all", " text", " files", " and", " extract", " diction", "aries", " using", " ast", ".", "literal", "_", "eval", "\n", "        ", "for", " text", "_", "file", " in", " all", "_", "text", "_", "files", ":", "\n", "            ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "text", "_", "data", " =", " f", ".", "read", "()", ".", "strip", "()", "\n", "                ", "output", "_", "list", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "text", "_", "data", "))", "\n", "\n", "        ", "return", " output", "_", "list", "\n", "    ", "except", " Value", "Error", " as", " e", ":", "\n", "        ", "#", " If", " the", " text", "_", "file", " has", " invalid", " dictionary", " representation", ",", " raise", " an", " error", "\n", "        ", "print", "(", "f", "\"", "Error", ":", " {", "e", "}\"", ")", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "#", " If", " there", " are", " other", " errors", ",", " raise", " an", " error", "\n", "        ", "print", "(", "f", "\"", "An", " unexpected", " error", " occurred", ":", " {", "e", "}\"", ")", "\n", "\n", "if"], "logprobs": [-3.241518020629883, -0.002937647048383951, -0.00514362333342433, -0.03922182321548462, -1.1875813007354736, -3.852599620819092, -1.1887681484222412, -0.13529935479164124, -0.01285574771463871, -0.5332183837890625, -0.38928335905075073, -0.07763714343309402, -0.030323851853609085, -0.012466364540159702, -0.4207064211368561, -0.1309058964252472, -0.002782047726213932, -3.3455653190612793, -0.029331672936677933, -0.7738719582557678, -0.1102714091539383, -0.06498986482620239, -0.03724420443177223, -0.036686792969703674, -0.0002953569928649813, -0.0028633568435907364, -0.005567046348005533, -0.20233012735843658, -8.4638240878121e-06, -4.851700214203447e-05, -8.583032467868179e-06, -0.0025490194093436003, -0.0007961202645674348, -0.022862069308757782, -0.0027033472433686256, -0.48017874360084534, -0.008249257691204548, -0.006925152149051428, -0.004861914087086916, -0.002974968170747161, -0.0058492678217589855, -1.566955327987671, -3.3555760383605957, -0.8488686084747314, -0.9275007843971252, -0.01813860610127449, -0.05913949012756348, -0.057806193828582764, -0.7339345812797546, -0.00424804724752903, -0.23643553256988525, -1.6615846157073975, -0.1666868031024933, -1.733971118927002, -0.28019770979881287, -0.010265055112540722, -1.2899446487426758, -0.7790161371231079, -0.39000073075294495, -0.0002978596603497863, -1.0925925970077515, -0.1340911090373993, -0.3165592551231384, -0.0016936019528657198, -0.00023982033599168062, -0.00011717586312443018, -0.32429584860801697, -0.001259487122297287, -0.020257603377103806, -0.9447923302650452, -0.0849999263882637, -0.02463536709547043, -0.023293081670999527, -0.0010874316794797778, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -9.536738616588991e-07, -0.00047541281674057245, -0.0005813338793814182, -0.012382535263895988, -0.06454427540302277, -0.0001560327800689265, -0.0007176207727752626, -0.005598934832960367, -1.311301275563892e-06, -1.1920928244535389e-07, -0.05725843831896782, -0.1301395297050476, -0.004590093623846769, -0.22026388347148895, -0.0002739054325502366, -0.4052625894546509, -0.015455239452421665, -0.004916246049106121, -0.00315941427834332, -1.7194525003433228, -1.2705295085906982, -1.5397604703903198, -0.00678260438144207, -0.012711570598185062, -3.790783375734463e-05, -8.4638240878121e-06, -0.02545744553208351, -2.275632619857788, -0.1919568032026291, -0.008965711109340191, -0.28593409061431885, -0.14884965121746063, -0.8395577073097229, -0.008565118536353111, -0.023977426812052727, -0.004056678153574467, -0.013798678293824196, -0.0008180370787158608, -0.006904079113155603, -5.8412379075889476e-06, -8.940656698541716e-06, -4.768370445162873e-07, -8.344646857949556e-07, -0.0003165697562508285, -0.002796788467094302, -1.0013530300057027e-05, -8.022463589441031e-05, -0.005200311541557312, -0.00932646170258522, -0.2893180847167969, -0.03813241422176361, -0.1446579247713089, -0.002710361499339342, -8.34461570775602e-06, -4.768370445162873e-07, -0.017534594982862473, -0.962943434715271, -0.019408905878663063, -0.2472728192806244, -5.006664650863968e-05, -0.4233538508415222, -0.3562120795249939, -0.0025393879041075706, -0.013122507371008396, -0.008450346998870373, -1.8966630697250366, -1.942468285560608, -1.7928118705749512, -0.8332487344741821, -3.1151740550994873, -2.7970130443573, -0.9431196451187134, -0.31128787994384766, -0.11804801970720291, -0.041460905224084854, -0.37615475058555603, -1.2241430282592773, -1.4689080715179443, -0.7311215996742249, -0.17201858758926392, -0.0022025867365300655, -0.8895015120506287, -0.043831340968608856, -0.19841831922531128, -0.05462092533707619, -0.6350414156913757, -0.6651244163513184, -0.8744889497756958, -0.5305252075195312, -0.3554590046405792, -0.04578334465622902, -0.016003258526325226, -2.1548659801483154, -0.054430268704891205, -0.08335285633802414, -0.013076502829790115, -0.006715585943311453, -0.0026557911187410355, -0.002767068799585104, -0.0018465149914845824, -0.1373039186000824, -0.42920050024986267, -0.6620775461196899, -2.701775550842285, -1.5110690593719482, -1.7137117385864258, -0.261663019657135, -0.2814648449420929, -0.24637135863304138, -0.03483022376894951, -0.06255456805229187, -0.0009310677996836603, -0.030370226129889488, -0.0011098184622824192, -0.015130746178328991, -0.0027268866542726755, -1.7247929573059082, -0.8559803366661072, -0.002756131812930107, -0.04497769847512245, -0.049295663833618164, -0.0007011815905570984, -0.01934226043522358, -0.005202090367674828, -0.034695517271757126, -0.01971459947526455, -0.0880984291434288, -0.928366482257843], "finish_reason": "stop"}], "metrics": {"energy": 854.0112983112338, "energy_per_token": 4.165908772249921, "time": 18.97967, "time_per_token": 0.09258375609756096}}
{"outputs": [{"text": "# Initialize the result list\n    result = []\n\n    # Iterate over each file in the directory\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        # Open the file\n        with open(filename, 'r') as f:\n            # Read the file content\n            content = f.read()\n\n            # Convert the Unicode string representation to a dictionary\n            try:\n                result.append(ast.literal_eval(content))\n            except SyntaxError:\n                print(f\"Invalid dictionary representation in file: {filename}\")\n\n    # Return the result list\n    return result", "tokens": ["#", " Initialize", " the", " result", " list", "\n", "    ", "result", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "#", " Open", " the", " file", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "#", " Read", " the", " file", " content", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "\n", "            ", "#", " Convert", " the", " Un", "icode", " string", " representation", " to", " a", " dictionary", "\n", "            ", "try", ":", "\n", "                ", "result", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "content", "))", "\n", "            ", "except", " Sy", "ntax", "Error", ":", "\n", "                ", "print", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " file", ":", " {", "filename", "}\"", ")", "\n", "\n", "    ", "#", " Return", " the", " result", " list", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-1.0172709226608276, -1.025850534439087, -2.3668036460876465, -1.3565480709075928, -0.11300570517778397, -0.07846761494874954, -0.0010163385886698961, -0.2682822048664093, -0.09366690367460251, -0.008159044198691845, -0.001784519525244832, -0.20679667592048645, -0.0006656814948655665, -0.0035036150366067886, -1.6727961301803589, -0.0016310019418597221, -0.18005135655403137, -1.751186728477478, -0.5416368842124939, -0.0409005731344223, -0.0024726788979023695, -0.14109958708286285, -0.06590601056814194, -0.0006250573205761611, -0.015602776780724525, -0.6875820755958557, -0.00035565727739594877, -0.3152618110179901, -5.6980417866725475e-05, -0.016036225482821465, -0.002942995633929968, -0.13651739060878754, -2.3841830625315197e-06, -1.6093124941107817e-05, -6.437280717364047e-06, -0.0006845038151368499, -0.00034540885826572776, -0.016792723909020424, -0.00044347942457534373, -0.2490321397781372, -0.003545666579157114, -0.03466695919632912, -0.005993489176034927, -0.011653091758489609, -0.00018976318824570626, -0.005214542616158724, -0.05541647598147392, -0.4483109712600708, -0.5748561024665833, -0.18100376427173615, -0.04027099907398224, -1.1381161212921143, -0.0005828827270306647, -0.006135675590485334, -0.00019858295854646713, -0.0003885467885993421, -0.0034404154866933823, -0.052169039845466614, -0.0546727329492569, -0.0015259062638506293, -0.316777765750885, -7.164221460698172e-05, -1.0767757892608643, -0.015865636989474297, -0.0009245174005627632, -0.00498646916821599, -0.04034828767180443, -0.1941671222448349, -0.04307447746396065, -1.007745385169983, -0.43796029686927795, -0.35526958107948303, -0.0004984090337529778, -0.3362255096435547, -0.0002681849291548133, -0.0008490057080052793, -1.4424220353248529e-05, -5.006777428206988e-06, -0.0024396199733018875, -0.0436769537627697, -0.6666609644889832, -0.44186389446258545, -0.02411242388188839, -0.4785028100013733, -0.16240689158439636, -1.016774296760559, -8.439661905867979e-05, -0.021494882181286812, -0.5492984652519226, -0.27960753440856934, -0.031171197071671486, -0.6055328845977783, -0.39312776923179626, -0.0019564551766961813, -1.3146470785140991, -0.0012203158112242818, -0.0013998481445014477, -0.005556851159781218, -2.1333999633789062, -0.010622624307870865, -0.0034338815603405237, -0.0004966217675246298, -0.014758693054318428, -7.986990567587782e-06, -8.05822346592322e-05, -3.576278118089249e-07, -9.417489309271332e-06, -0.00032205163734033704, -0.0035614653024822474, -0.02241082303225994, -0.006237918511033058, -0.014578958973288536, -0.01049770787358284, -0.8149867653846741, -5.483612312673358e-06, -2.109982233378105e-05, -0.36349642276763916, -0.01795467734336853, -0.005597393959760666, -0.5593500733375549, -0.03795270249247551, -0.17378725111484528, -0.13057640194892883, -0.715836226940155, -0.047516606748104095, -0.17476674914360046, -0.04873164743185043, -0.582728385925293, -0.3477416932582855, -0.004043380729854107, -0.0050380658358335495, -0.02544408105313778, -0.0030944105237722397, -0.003053647233173251, -0.28561538457870483, -0.0069320183247327805, -0.8039660453796387, -0.0124915586784482, -0.0016815820708870888, -0.36418259143829346, -0.6860982179641724, -0.03407769277691841, -0.0005794276366941631, -0.0027438870165497065, -0.002063171239569783, -0.4633444547653198, -0.008819790557026863, -1.4245645999908447], "finish_reason": "stop"}], "metrics": {"energy": 640.6167259445193, "energy_per_token": 4.328491391517022, "time": 14.818173, "time_per_token": 0.10012279054054055}}
{"outputs": [{"text": "# Initialize the result list\n    results = []\n\n    # Get the absolute path of the specified directory\n    absolute_path = os.path.abspath(directory)\n\n    # Iterate over all text files in the directory\n    for file in glob.glob(os.path.join(absolute_path, '*.txt')):\n        # Open each text file\n        with open(file, 'r', encoding='utf-8') as f:\n            # Read the contents of the file\n            contents = f.read()\n\n            # Convert the contents to a dictionary using ast.literal_eval\n            try:\n                dictionary = ast.literal_eval(contents)\n            except SyntaxError as e:\n                raise ValueError(f\"Invalid dictionary representation in {file}: {e}\")\n\n            # Append the dictionary to the results list\n            results.append(dictionary)\n\n    # Return the results\n    return results", "tokens": ["#", " Initialize", " the", " result", " list", "\n", "    ", "results", " =", " []", "\n", "\n", "    ", "#", " Get", " the", " absolute", " path", " of", " the", " specified", " directory", "\n", "    ", "absolute", "_", "path", " =", " os", ".", "path", ".", "ab", "sp", "ath", "(", "directory", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " all", " text", " files", " in", " the", " directory", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "absolute", "_", "path", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "#", " Open", " each", " text", " file", "\n", "        ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "#", " Read", " the", " contents", " of", " the", " file", "\n", "            ", "contents", " =", " f", ".", "read", "()", "\n", "\n", "            ", "#", " Convert", " the", " contents", " to", " a", " dictionary", " using", " ast", ".", "literal", "_", "eval", "\n", "            ", "try", ":", "\n", "                ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "contents", ")", "\n", "            ", "except", " Sy", "ntax", "Error", " as", " e", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " {", "file", "}:", " {", "e", "}\"", ")", "\n", "\n", "            ", "#", " App", "end", " the", " dictionary", " to", " the", " results", " list", "\n", "            ", "results", ".", "append", "(", "d", "ictionary", ")", "\n", "\n", "    ", "#", " Return", " the", " results", "\n", "    ", "return", " results", "\n", "\n", "#"], "logprobs": [-1.0172709226608276, -1.025850534439087, -2.3668036460876465, -1.3565480709075928, -0.11300570517778397, -0.07846761494874954, -0.0010163385886698961, -2.910806894302368, -0.012318952940404415, -0.007441539317369461, -0.0015616138698533177, -0.22867678105831146, -0.0006690170848742127, -0.006185080390423536, -1.6181327104568481, -0.7359577417373657, -1.3788658380508423, -0.09579093009233475, -0.26634758710861206, -0.005916818510740995, -1.8200290203094482, -0.00213668798096478, -0.023272350430488586, -0.0008828318095766008, -2.201949119567871, -0.0032049263827502728, -0.7667847275733948, -0.02498469687998295, -0.002641286002472043, -8.106198947643861e-06, -0.0022226886358112097, -0.00027581225731410086, -0.015890510752797127, -6.198863957251888e-06, -3.0517112463712692e-05, -0.0006962973857298493, -0.02821219153702259, -0.0003666205739136785, -0.001790707348845899, -0.029470346868038177, -0.0004659997357521206, -0.00646523293107748, -2.5206329822540283, -0.0006356602534651756, -0.2591128647327423, -0.6577146649360657, -0.36007431149482727, -0.005142319016158581, -0.02635536715388298, -0.002202943665906787, -0.37801629304885864, -0.09515564888715744, -0.0005728749092668295, -0.029039442539215088, -0.5181623697280884, -0.3360542058944702, -0.016266483813524246, -2.539125671319198e-05, -0.016645830124616623, -0.0020524642895907164, -0.44093698263168335, -3.099436753473128e-06, -1.1086402082582936e-05, -1.1920922133867862e-06, -0.0002996472467202693, -0.0005505952867679298, -0.01952231116592884, -3.576272320060525e-06, -3.576272320060525e-06, -0.0007194076315499842, -0.37103456258773804, -0.007820463739335537, -0.006285778246819973, -0.002807843731716275, -0.0073678200133144855, -0.0002456601650919765, -0.00331911351531744, -0.12733452022075653, -0.5560356974601746, -0.5924407243728638, -0.876768171787262, -0.5618206858634949, -0.0011021974496543407, -1.3702113628387451, -0.0003530356043484062, -0.006063873879611492, -0.0001928620331455022, -0.00032944019767455757, -0.003971903584897518, -0.09955726563930511, -0.10513877123594284, -0.0061599635519087315, -1.6263920068740845, -0.0008044582791626453, -0.01883408986032009, -0.09421157091856003, -0.03468100726604462, -0.062339987605810165, -0.0035535066854208708, -0.013958451338112354, -6.23445157543756e-05, -0.16029691696166992, -0.013670277781784534, -0.0023509026505053043, -0.006412169896066189, -0.06681206822395325, -0.3520643711090088, -0.16271066665649414, -1.0025898218154907, -0.05840335041284561, -0.187600240111351, -0.08654316514730453, -0.16439269483089447, -0.0005555993411689997, -0.44165733456611633, -0.000520570669323206, -0.0030126445926725864, -1.490105023549404e-05, -4.291525328881107e-06, -0.006402457132935524, -0.030160773545503616, -0.5423383712768555, -0.21422941982746124, -0.028651446104049683, -0.6916005611419678, -0.2845565676689148, -0.4847220480442047, -0.12598134577274323, -0.07294715940952301, -0.5148513317108154, -0.33498525619506836, -0.45750996470451355, -0.12053557485342026, -0.0020123724825680256, -0.0001299296854995191, -3.707340147229843e-05, -0.5149098038673401, -0.0014223469188436866, -1.3059526681900024, -0.0006802152493037283, -0.001536618685349822, -0.005761208012700081, -1.4402427673339844, -0.04586658254265785, -0.017868496477603912, -0.0018509175861254334, -2.145764938177308e-06, -5.364403477869928e-06, -2.3841855067985307e-07, -1.311301275563892e-06, -0.0002002515539061278, -0.0018970841774716973, -0.016624728217720985, -0.0018474669195711613, -0.8203883767127991, -0.010645153000950813, -0.452418714761734, -2.50339189733495e-06, -6.079655122448457e-06, -1.3091541528701782, -0.11117368191480637, -0.0013455632142722607, -0.008821445517241955, -0.0034827073104679585, -1.7125377655029297, -0.033785924315452576, -1.4066597032069694e-05, -0.042244359850883484, -0.2376255840063095, -0.14548899233341217, -0.656669020652771, -0.026372667402029037, -0.17370960116386414, -0.06946147978305817, -0.9303160905838013, -0.03798254206776619, -0.23183172941207886, -0.007334685884416103, -0.3758609890937805, -0.024757133796811104, -0.0016192194307222962, -0.2928920090198517, -0.09151279181241989, -0.004230597522109747, -0.007359536364674568, -0.5278164744377136, -0.0001726001501083374, -0.008065866306424141, -0.09825941920280457, -0.0016233850037679076, -0.0019431296968832612, -0.39122042059898376, -0.051547203212976456, -0.0021339519880712032, -0.0002806984703056514, -0.0034862712491303682, -0.00027700403006747365, -0.00026663561584427953, -0.0003084660565946251, -0.0005099665140733123, -3.576278118089249e-07, -0.0007863528444431722, -0.0007736074039712548, -0.011346337385475636, -0.002060316037386656, -0.296515554189682, -0.011228230781853199, -0.0012863941956311464, -0.5070016980171204, -0.8379110097885132, -0.0003580405900720507, -0.0015095992712303996, -0.001492696930654347, -0.32801681756973267, -0.005460822023451328, -0.9570399522781372], "finish_reason": "stop"}], "metrics": {"energy": 979.3961976127625, "energy_per_token": 4.534241655614641, "time": 22.17812, "time_per_token": 0.10267648148148148}}
{"outputs": [{"text": "result = []\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        with open(filename, 'r', encoding='utf-8') as f:\n            try:\n                # Convert Unicode string representation to Python dictionary\n                dictionary = ast.literal_eval(f.read())\n                result.append(dictionary)\n            except Exception as e:\n                print(f'Error reading file {filename}: {e}')\n    return result", "tokens": ["result", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "try", ":", "\n", "                ", "#", " Convert", " Un", "icode", " string", " representation", " to", " Python", " dictionary", "\n", "                ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "f", ".", "read", "())", "\n", "                ", "result", ".", "append", "(", "d", "ictionary", ")", "\n", "            ", "except", " Exception", " as", " e", ":", "\n", "                ", "print", "(", "f", "'", "Error", " reading", " file", " {", "filename", "}:", " {", "e", "}", "')", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.967947006225586, -0.11666194349527359, -0.031686536967754364, -0.013705084100365639, -0.17075896263122559, -0.561211347579956, -0.6730371117591858, -0.0007846852531656623, -0.0567346028983593, -6.174850568640977e-05, -0.035554006695747375, -0.0029226704500615597, -0.22278976440429688, -1.5497195136049413e-06, -5.924526340095326e-05, -1.9073468138230965e-06, -0.0012006701435893774, -0.0005427317810244858, -0.034263864159584045, -0.0007981451926752925, -0.30853161215782166, -0.004756801761686802, -0.020247558131814003, -0.004904027562588453, -0.018705865368247032, -0.0004259632551111281, -0.01335590798407793, -0.013143331743776798, -0.06422515213489532, -0.00018571082910057157, -0.00038342276820912957, -0.011196402832865715, -0.0750289112329483, -0.11846351623535156, -0.0056493147276341915, -1.3017778396606445, -0.0006712805479764938, -0.027079854160547256, -0.09922138601541519, -0.025847729295492172, -0.04561741650104523, -0.004164832178503275, -0.017311306670308113, -9.893881360767409e-05, -0.8643434047698975, -0.01766800507903099, -0.0060169510543346405, -0.0037142117507755756, -1.5512571334838867, -0.0006949870148673654, -0.004813511855900288, -0.0023155799135565758, -3.049201488494873, -1.938360571861267, -1.3322739601135254, -0.0015791100449860096, -0.08472374081611633, -0.7292710542678833, -0.1897086650133133, -0.5638231635093689, -0.03391798958182335, -0.24178995192050934, -0.0010511117288842797, -1.492402195930481, -0.34976571798324585, -0.01559514831751585, -0.010873943567276001, -5.364403477869928e-06, -0.00030179237364791334, -2.3841855067985307e-07, -2.3841830625315197e-06, -0.0010605193674564362, -0.007771258242428303, -0.00027771908207796514, -5.245195097813848e-06, -0.0887778103351593, -0.005219167564064264, -0.1886342316865921, -0.07229575514793396, -0.0007319155265577137, -0.0031880526803433895, -0.0005390383303165436, -0.0008224442135542631, -5.960462772236497e-07, -0.00023815179883968085, -0.005159634165465832, -0.016209011897444725, -0.002400732832029462, -2.932347536087036, -0.1453382968902588, -0.06095308065414429, -0.0018287854036316276, -0.012432221323251724, -0.002659357851371169, -0.27845335006713867, -0.015994811430573463, -0.10167324542999268, -1.8434358835220337, -0.49939748644828796, -2.238004684448242, -0.48885613679885864, -0.3263987898826599, -0.004802359733730555, -0.12302234023809433, -0.010785028338432312, -0.2015320360660553, -0.007781903725117445, -0.0065695736557245255, -0.007223441731184721, -0.2129642814397812, -0.00963218230754137, -0.0017341827042400837, -0.41777363419532776, -0.008647849783301353, -1.721493124961853], "finish_reason": "stop"}], "metrics": {"energy": 488.8679048862458, "energy_per_token": 4.251025259880398, "time": 10.418065, "time_per_token": 0.09059186956521739}}
{"outputs": [{"text": "dict_list = []\n\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        with open(filename, 'r') as f:\n            dictionary = ast.literal_eval(f.read())\n            dict_list.append(dictionary)\n    return dict_list", "tokens": ["dict", "_", "list", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "f", ".", "read", "())", "\n", "            ", "dict", "_", "list", ".", "append", "(", "d", "ictionary", ")", "\n", "    ", "return", " dict", "_", "list"], "logprobs": [-2.5994300842285156, -0.6242204904556274, -0.1773667186498642, -0.008070596493780613, -0.01581600494682789, -0.046724189072847366, -1.8982787132263184, -0.001259129960089922, -0.6944031119346619, -0.8178196549415588, -0.0010415849974378943, -0.048009276390075684, -0.00013243274588603526, -0.031110646203160286, -0.0020234365947544575, -0.22534620761871338, -3.3378546504536644e-06, -4.3748852476710454e-05, -2.145764938177308e-06, -0.0010992205934599042, -0.0007350126979872584, -0.055194154381752014, -0.001374253653921187, -0.28884872794151306, -0.004975912161171436, -0.031243298202753067, -0.004813630133867264, -0.015812132507562637, -0.0005771639989688993, -0.015262012369930744, -0.03458048030734062, -0.09021938592195511, -0.00020585325546562672, -0.0005297449533827603, -0.04205967113375664, -0.07011673599481583, -0.1321229189634323, -0.00609681336209178, -0.29885777831077576, -0.0001597276859683916, -0.9727317094802856, -0.02295050024986267, -0.0030490122735500336, -0.006804982200264931, -4.231170177459717, -0.27877724170684814, -0.15283657610416412, -0.07482318580150604, -9.417489309271332e-06, -0.00012683063687290996, -3.576278118089249e-07, -7.986990567587782e-06, -0.0009529816452413797, -0.010749530047178268, -0.00010787858627736568, -1.0371154530730564e-05, -0.04771177098155022, -0.02303507924079895, -0.025499863550066948, -0.040506623685359955, -4.184158387943171e-05, -4.005352093372494e-05, -0.0016742035513743758, -0.001622075797058642, -0.0004545609117485583, -0.0007359656738117337, -2.0265558760002023e-06, -0.0009104635682888329, -0.002103974809870124, -1.644927740097046, -0.01720995455980301, -0.00537296524271369, -0.00027843413408845663, -4.3748852476710454e-05], "finish_reason": "stop"}], "metrics": {"energy": 332.28850814819344, "energy_per_token": 4.490385245245857, "time": 6.7186346, "time_per_token": 0.09079235945945946}}
{"outputs": [{"text": "file_list = glob.glob(f\"{directory}/*.txt\")\n    list_dict = []\n    for filename in file_list:\n        with open(filename, 'r') as file:\n            # convert all Unicode string representations of dictionaries to Python dictionaries.\n            list_dict.append(ast.literal_eval(file.readline()))\n    return list_dict", "tokens": ["file", "_", "list", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "txt", "\"", ")", "\n", "    ", "list", "_", "dict", " =", " []", "\n", "    ", "for", " filename", " in", " file", "_", "list", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "            ", "#", " convert", " all", " Un", "icode", " string", " representations", " of", " diction", "aries", " to", " Python", " diction", "aries", ".", "\n", "            ", "list", "_", "dict", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "file", ".", "read", "line", "()))", "\n", "    ", "return", " list", "_", "dict", "\n", "\n", "def"], "logprobs": [-3.0503997802734375, -0.10811493545770645, -0.8692774176597595, -0.008061609230935574, -0.1429576277732849, -0.0004047528200317174, -0.004978877957910299, -0.01032357756048441, -1.3428704738616943, -0.6838055849075317, -0.004954679403454065, -0.06530851870775223, -0.06798730790615082, -0.20734171569347382, -0.06859366595745087, -0.006743649020791054, -0.00027211778797209263, -0.00901296827942133, -0.10189881920814514, -0.18031039834022522, -3.254323959350586, -0.045622654259204865, -1.7188894748687744, -0.35487356781959534, -0.11836142838001251, -0.007037613075226545, -0.2583910822868347, -0.07643001526594162, -2.7784366607666016, -0.0006636562757194042, -0.003687845077365637, -5.364403477869928e-06, -3.576278118089249e-07, -0.003157394239678979, -0.005901768337935209, -0.02246665768325329, -0.18722642958164215, -0.0005545270396396518, -0.0032059960067272186, -0.036055248230695724, -0.19719944894313812, -0.4628155529499054, -0.014577783644199371, -0.4955601990222931, -0.0009008163469843566, -0.5833097100257874, -0.03463379666209221, -0.0035727499052882195, -0.007738018874078989, -3.673901319503784, -4.040703773498535, -2.811549186706543, -0.5653821229934692, -0.0013813963159918785, -0.1183241531252861, -0.3633192181587219, -0.11225149780511856, -0.069206103682518, -0.003265170380473137, -1.4207524061203003, -0.08256375789642334, -0.036802276968955994, -0.0013872295385226607, -2.258441209793091, -0.02321166917681694, -0.0026661348529160023, -1.0335434675216675, -0.0006138585740700364, -0.0034349507186561823, -0.03334200009703636, -0.008580246940255165, -0.004068075679242611, -0.04713708162307739, -1.6927575416048057e-05, -4.136476854910143e-05, -4.768370445162873e-07, -2.1576648578047752e-05, -0.004115802235901356, -0.011711296625435352, -0.00044967554276809096, -4.2437604861333966e-05, -2.981415033340454, -0.019908957183361053, -0.012536177411675453, -0.24562425911426544, -0.03667116537690163, -0.009055143222212791, -0.0002522150462027639, -4.684815212385729e-05, -0.09861539304256439, -0.008445500396192074, -1.283497929573059], "finish_reason": "stop"}], "metrics": {"energy": 367.1869042911528, "energy_per_token": 3.9911620031647046, "time": 8.372834, "time_per_token": 0.0910090652173913}}
{"outputs": [{"text": "dictionaries = []\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        with open(filename, 'r') as f:\n            content = f.read()\n            dictionaries.append(ast.literal_eval(content))\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "content", " =", " f", ".", "read", "()", "\n", "            ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "content", "))", "\n", "    ", "return", " diction", "aries", "\n", "\n", "if"], "logprobs": [-2.8267574310302734, -0.002758747199550271, -0.037850093096494675, -0.013340028002858162, -0.025585155934095383, -0.23396450281143188, -0.7646255493164062, -0.6254283785820007, -0.0006808108882978559, -0.04711456224322319, -5.876845170860179e-05, -0.02572028525173664, -0.002916014287620783, -0.12793321907520294, -1.6689286894688848e-06, -4.470248313737102e-05, -1.9073468138230965e-06, -0.0008678245940245688, -0.0005302215577103198, -0.02525312267243862, -0.0007051127031445503, -0.2786126136779785, -0.004752530250698328, -0.020175594836473465, -0.0042716688476502895, -0.011706231161952019, -0.0003046525234822184, -0.01126642245799303, -0.011200175620615482, -0.04829147085547447, -0.00016330339713022113, -0.00032646095496602356, -0.013759054243564606, -0.05756549537181854, -0.06457981467247009, -0.0032336823642253876, -0.3011983633041382, -0.0002547178009990603, -0.7771197557449341, -0.008650686591863632, -0.002669344889000058, -0.003873941022902727, -1.78933584690094, -0.0014486543368548155, -0.048299651592969894, -2.8729025871143676e-05, -9.298280929215252e-06, -0.007409827783703804, -0.15387625992298126, -0.1477854996919632, -2.0662500858306885, -0.0053787752985954285, -0.01941218040883541, -0.03600982949137688, -0.001032177242450416, -0.03927798569202423, -2.0503786799963564e-05, -2.7417760065873154e-05, -1.311301275563892e-06, -5.602820692729438e-06, -0.0006926044588908553, -0.0032850131392478943, -0.020330846309661865, -0.012460477650165558, -0.04319207742810249, -0.00986333005130291, -0.002188194077461958, -4.768370445162873e-07, -0.45252516865730286, -0.012672139331698418, -1.0970956087112427], "finish_reason": "stop"}], "metrics": {"energy": 294.840570968628, "energy_per_token": 4.15268409814969, "time": 6.2607746, "time_per_token": 0.08817992394366198}}
{"outputs": [{"text": "# List to store the dictionaries extracted from the text files\n    dictionaries_list = []\n\n    # Iterate over each file in the specified directory\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        try:\n            with open(filename, 'r') as f:\n                # Read the file content and convert it to a dictionary using eval()\n                file_content = f.read().strip()  # Ensure there are no leading/trailing whitespace characters\n                file_dict = eval(file_content)\n                # Append the dictionary to the list\n                dictionaries_list.append(file_dict)\n        except Exception as e:\n            print(f\"Error while reading file '{filename}': {e}\")\n\n    return dictionaries_list\n\ntask_func(DIRECTORY)", "tokens": ["#", " List", " to", " store", " the", " diction", "aries", " extracted", " from", " the", " text", " files", "\n", "    ", "diction", "aries", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " file", " in", " the", " specified", " directory", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "#", " Read", " the", " file", " content", " and", " convert", " it", " to", " a", " dictionary", " using", " eval", "()", "\n", "                ", "file", "_", "content", " =", " f", ".", "read", "()", ".", "strip", "()", "  ", "#", " Ensure", " there", " are", " no", " leading", "/", "tra", "iling", " whites", "pace", " characters", "\n", "                ", "file", "_", "dict", " =", " eval", "(", "file", "_", "content", ")", "\n", "                ", "#", " App", "end", " the", " dictionary", " to", " the", " list", "\n", "                ", "diction", "aries", "_", "list", ".", "append", "(", "file", "_", "dict", ")", "\n", "        ", "except", " Exception", " as", " e", ":", "\n", "            ", "print", "(", "f", "\"", "Error", " while", " reading", " file", " '", "{", "filename", "}", "':", " {", "e", "}\"", ")", "\n", "\n", "    ", "return", " diction", "aries", "_", "list", "\n", "\n", "task", "_", "func", "(", "DI", "RECT", "ORY", ")"], "logprobs": [-1.0172709226608276, -3.453768014907837, -0.8578360676765442, -0.3186870813369751, -0.6778608560562134, -0.6789912581443787, -0.00025376438861712813, -0.32860907912254333, -0.003820146666839719, -0.18288737535476685, -0.05856762081384659, -0.0011538759572431445, -0.06287276744842529, -0.0013261580606922507, -0.6468602418899536, -0.0016036281595006585, -2.7789714336395264, -0.17873971164226532, -0.0032606550958007574, -0.014812137000262737, -0.0019574069883674383, -0.09348973631858826, -0.0007902836659923196, -0.014245836064219475, -1.588812232017517, -0.007453135214745998, -0.26098760962486267, -1.0913565158843994, -0.8977794051170349, -0.037515103816986084, -0.0018365198047831655, -1.4469462633132935, -0.0009341643890365958, -0.05613475665450096, -0.0005720409681089222, -0.01436417456716299, -0.7651962637901306, -0.001004786929115653, -0.21839089691638947, -8.34430247778073e-05, -0.01702304184436798, -0.0032393860165029764, -0.17181161046028137, -2.264974000354414e-06, -2.1457441107486375e-05, -1.6689286894688848e-06, -0.0006378046819008887, -0.0004292996891308576, -0.02348511293530464, -0.0006137394811958075, -0.27689602971076965, -0.0037150431890040636, -0.04779735207557678, -0.005092862527817488, -0.016077518463134766, -0.00017677174764685333, -0.004038631450384855, -0.09812726080417633, -2.7943224906921387, -0.00035982808913104236, -0.01745200902223587, -0.007353856228291988, -1.0751550197601318, -0.00012373158824630082, -0.0005614373367279768, -0.014330918900668621, -0.02359200268983841, -0.08705271035432816, -0.0037731186021119356, -0.382221519947052, -0.00015424491721205413, -2.372152090072632, -0.017706654965877533, -0.02259894460439682, -0.014031804166734219, -0.22656719386577606, -0.6066502928733826, -0.061858028173446655, -2.036257266998291, -0.3150359094142914, -0.68199223279953, -0.3105732500553131, -0.23301459848880768, -0.01316286250948906, -0.03686144948005676, -0.28144678473472595, -0.5029067993164062, -2.3127620220184326, -0.6392108798027039, -0.10476010292768478, -0.0024649493861943483, -3.3673195838928223, -0.005009124521166086, -0.34824338555336, -0.009228785522282124, -0.04867589846253395, -2.4199192921514623e-05, -8.583032467868179e-06, -0.003613373264670372, -1.8441177606582642, -0.08329154551029205, -0.007385214790701866, -2.9984352588653564, -1.2993727978027891e-05, -3.205869197845459, -1.9146103858947754, -0.045407600700855255, -0.006478616502135992, -0.36043092608451843, -0.11710251867771149, -0.0012026942567899823, -0.00016258825780823827, -0.2545757293701172, -2.6084392070770264, -0.932553231716156, -0.05635235831141472, -0.08680059015750885, -1.832371473312378, -0.00029845553217455745, -0.45632460713386536, -0.003724663285538554, -1.1848770380020142, -0.0006955826538614929, -0.00715574249625206, -2.0265558760002023e-06, -2.264974000354414e-06, -0.026308691129088402, -0.08349290490150452, -0.3107801377773285, -0.9728705286979675, -0.754851222038269, -0.001213171985000372, -0.013973968103528023, -0.04052940383553505, -0.0022747849579900503, -0.0017473918851464987, -0.09135526418685913, -0.04326502978801727, -0.0005112771177664399, -0.002124911407008767, -1.1920928244535389e-07, -2.8609820219571702e-05, -2.0265558760002023e-06, -0.00037722624256275594, -0.0005920564290136099, -0.0002302858338225633, -0.0018641252536326647, -2.622600959512056e-06, -3.9219088648678735e-05, -0.00021920185827184469, -0.0005650115781463683, -0.06543682515621185, -0.006374858319759369, -1.6139798164367676, -0.024165254086256027, -0.0425463505089283, -0.0007497837068513036, -0.009390471503138542, -0.005972633603960276, -0.3324214816093445, -0.006591364275664091, -0.025239523500204086, -0.07472606003284454, -0.3025505244731903, -1.9101213216781616, -2.1387665271759033, -0.5366352200508118, -1.114672303199768, -6.23445157543756e-05, -0.003650906728580594, -0.04487079381942749, -0.0006150499684736133, -0.013728953897953033, -0.3558962643146515, -0.02707846276462078, -0.0007410878897644579, -0.005179202184081078, -0.12520731985569, -0.0018230738351121545, -0.18998946249485016, -0.0010417040903121233, -9.536738616588991e-07, -2.3245540432981215e-05, -7.867782187531702e-06, -0.049072206020355225, -0.004413388203829527, -3.22822642326355, -0.020415646955370903, -0.13357868790626526, -0.021233731880784035, -0.0287669338285923, -5.602820692729438e-06, -1.4781842764932662e-05, -0.8450780510902405], "finish_reason": "stop"}], "metrics": {"energy": 830.7974307632443, "energy_per_token": 4.282460983315692, "time": 18.613348, "time_per_token": 0.09594509278350515}}
