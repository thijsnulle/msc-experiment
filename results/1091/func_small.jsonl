{"outputs": [{"text": "dictionaries = []\n    for text_file in glob.glob(os.path.join(directory, '**/*.txt'), recursive=True):\n        with open(text_file, 'r', encoding='utf-8') as file:\n            text = file.read()\n            if '{' in text:\n                dictionaries.append(ast.literal_eval(text))\n            else:\n                raise ValueError(f\"File '{text_file}' contains invalid dictionary representation.\")\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "    ", "for", " text", "_", "file", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "**", "/*", ".", "txt", "')", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "text", " =", " file", ".", "read", "()", "\n", "            ", "if", " '", "{'", " in", " text", ":", "\n", "                ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "text", "))", "\n", "            ", "else", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "File", " '", "{", "text", "_", "file", "}'", " contains", " invalid", " dictionary", " representation", ".", "\"", ")", "\n", "    ", "return", " diction", "aries", "\n", "\n", "if"], "logprobs": [-3.8750863075256348, -0.0051255966536700726, -0.06858330965042114, -0.03556286543607712, -0.01673387549817562, -0.4261399805545807, -0.5253602862358093, -3.3017306327819824, -0.11496009677648544, -0.03661404922604561, -0.04966133087873459, -0.04557960107922554, -8.439661905867979e-05, -0.1338249146938324, -0.013772458769381046, -0.24921947717666626, -4.172316494077677e-06, -0.0002113357331836596, -0.0014909114688634872, -0.0012947280192747712, -0.002009755000472069, -0.024975627660751343, -0.0022892954293638468, -0.47344204783439636, -2.3869729042053223, -0.5478781461715698, -0.0373760461807251, -0.021054808050394058, -0.08420576900243759, -0.00043049128726124763, -0.007007308769971132, -0.014843497425317764, -0.003653401043266058, -0.002049014437943697, -0.010127703659236431, -0.010966035537421703, -0.5191118717193604, -0.003052221145480871, -0.00017438798386137933, -0.0015789910685271025, -3.576278118089249e-07, -3.576272320060525e-06, -0.08278413116931915, -0.3490556478500366, -0.07858773320913315, -0.39581823348999023, -0.0003297977091278881, -0.017580511048436165, -0.10517922788858414, -0.0575355589389801, -0.08064568787813187, -0.00310320477001369, -0.028879860416054726, -0.0003122795606032014, -0.5451657176017761, -0.0074455626308918, -0.0038809471298009157, -0.005160701461136341, -1.6243969202041626, -0.09527909755706787, -0.01598343253135681, -2.610649426060263e-05, -6.544376083184034e-05, -0.017891213297843933, -0.06508414447307587, -0.2562083303928375, -2.0553081035614014, -1.1922436952590942, -0.09435194730758667, -0.5130493640899658, -0.0014618673594668508, -0.5000889897346497, -0.15828587114810944, -0.0014355602907016873, -1.191346526145935, -0.0005030558677390218, -0.0032305929344147444, -0.0025735136587172747, -0.003841165918856859, -0.12429593503475189, -6.01988795096986e-05, -5.7338023907504976e-05, -9.536697689327411e-06, -0.0005541696446016431, -0.0005631053354591131, -0.0019363479223102331, -0.007733523845672607, -0.03457241877913475, -0.23604755103588104, -0.05239949747920036, -0.00012134769349358976, -0.04883916303515434, -0.000697965151630342, -0.09028549492359161, -0.007155505940318108, -5.924526340095326e-05, -0.21763092279434204, -0.29733484983444214, -0.24266880750656128, -2.7800087928771973, -1.092677354812622, -0.00013124081306159496, -0.06994956731796265, -0.0030699288472533226, -4.2437604861333966e-05, -0.00410571089014411, -1.493303894996643, -0.1094508171081543, -0.06526283919811249, -0.1841811239719391, -0.39343851804733276, -0.02376255765557289, -0.0058044688776135445, -0.01273028552532196, -0.5444450378417969, -0.011054462753236294, -0.0018731682794168591, -1.8000440832111053e-05, -0.5744166374206543, -0.01079564169049263, -0.9446196556091309], "finish_reason": "stop"}], "metrics": {"energy": 158.70809733009338, "energy_per_token": 1.3116371680173007, "time": 5.4427667, "time_per_token": 0.04498154297520661}}
{"outputs": [{"text": "try:\n        results = []\n        for filename in glob.glob(os.path.join(directory, '*.txt')):\n            with open(filename, 'r') as file:\n                text = file.read()\n                dict_str = re.findall(r'{([^}]+)}', text)\n                if len(dict_str) > 0:\n                    dict_str = dict_str[0]\n                    dictionary = ast.literal_eval(dict_str)\n                    results.append(dictionary)\n        return results\n    except SyntaxError:\n        raise ValueError(\"Invalid dictionary representation found in file: \", filename)", "tokens": ["try", ":", "\n", "        ", "results", " =", " []", "\n", "        ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "            ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "text", " =", " file", ".", "read", "()", "\n", "                ", "dict", "_", "str", " =", " re", ".", "find", "all", "(", "r", "'", "{(", "[", "^", "}]", "+", ")}", "'", ",", " text", ")", "\n", "                ", "if", " len", "(", "dict", "_", "str", ")", " >", " ", "0", ":", "\n", "                ", "    ", "dict", "_", "str", " =", " dict", "_", "str", "[", "0", "]", "\n", "                ", "    ", "d", "ictionary", " =", " ast", ".", "literal", "_", "eval", "(", "dict", "_", "str", ")", "\n", "                ", "    ", "results", ".", "append", "(", "d", "ictionary", ")", "\n", "        ", "return", " results", "\n", "    ", "except", " Sy", "ntax", "Error", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", " found", " in", " file", ":", " \"", ",", " filename", ")", "\n", "\n", "if"], "logprobs": [-2.6998753547668457, -0.0022291115019470453, -0.008200072683393955, -0.022733429446816444, -4.43516731262207, -0.024076931178569794, -0.06385537981987, -0.020057708024978638, -0.18591901659965515, -0.6374778151512146, -0.6969552040100098, -0.0016562328673899174, -0.09754158556461334, -9.142934868577868e-05, -0.1708788424730301, -0.01247931458055973, -0.2689816951751709, -3.3378546504536644e-06, -0.00019012074335478246, -0.0017485818825662136, -0.0010031197452917695, -0.0031116423197090626, -0.026027772575616837, -0.0023456697817891836, -0.46608397364616394, -0.15957887470722198, -0.1260928511619568, -0.04480570927262306, -0.0030686217360198498, -0.0006214833119884133, -0.010271781124174595, -0.008769216015934944, -0.21957895159721375, -0.00448732590302825, -0.00039402826223522425, -0.0067379651591181755, -0.11536912620067596, -0.33999910950660706, -0.07371342927217484, -0.9064255356788635, -0.0008012421894818544, -0.471699595451355, -0.009864983148872852, -0.004112240858376026, -0.005100215785205364, -1.9246749877929688, -0.08517630398273468, -0.018744241446256638, -1.9311717551317997e-05, -6.270212179515511e-05, -0.02335399203002453, -0.0519874170422554, -0.12437783181667328, -2.8948376178741455, -0.10678187757730484, -0.947301983833313, -0.057747796177864075, -2.2925949096679688, -0.010812152177095413, -0.32296809554100037, -0.00016819016309455037, -0.14162999391555786, -0.04726625978946686, -1.3717507123947144, -0.5215684771537781, -2.37540340423584, -0.3235499858856201, -0.20352818071842194, -0.22553811967372894, -0.274323046207428, -0.0060628075152635574, -0.00011240804451517761, -0.00490106176584959, -0.8405265212059021, -0.04198194295167923, -0.08131058514118195, -0.41713660955429077, -1.7319611310958862, -0.00017987063620239496, -0.0005199749139137566, -4.565611743601039e-05, -2.5033637939486653e-05, -0.020375000312924385, -1.066603183746338, -0.001256034360267222, -0.4322858154773712, -0.01172331441193819, -0.0327920988202095, -0.0011386347468942404, -0.001261987374164164, -1.1961003541946411, -0.07721050828695297, -0.6082054972648621, -0.06111424043774605, -0.2219875007867813, -0.0020866068080067635, -8.034383063204587e-05, -0.015855195000767708, -0.00042655906872823834, -0.002049133414402604, -0.17068660259246826, -0.011683962307870388, -0.11715193092823029, -3.062814712524414, -1.172574758529663, -0.040512919425964355, -0.2374339997768402, -5.328513361746445e-05, -4.9232225137529895e-05, -2.264974000354414e-06, -0.0001820160250645131, -0.0074544367380440235, -0.027414413169026375, -0.000604565953835845, -9.536697689327411e-06, -0.010556334629654884, -0.029797859489917755, -0.0052166772074997425, -0.05468323081731796, -0.12075154483318329, -0.0019292092183604836, -0.0006148116663098335, -0.000458254711702466, -0.003780125407502055, -1.0490362910786644e-05, -0.0002506657037883997, -0.0011860248632729053, -1.0825823545455933, -0.021681778132915497, -0.0019876263104379177, -0.002189621329307556, -0.17950569093227386, -0.003463462460786104, -2.0259175300598145, -1.2636104656849056e-05, -4.4225667807040736e-05, -0.2532868981361389, -0.02517593838274479, -0.0018197420286014676, -0.16768255829811096, -0.03882468491792679, -9.715084888739511e-05, -0.4186129868030548, -0.24012228846549988, -0.6469176411628723, -0.20000068843364716, -0.43999186158180237, -2.0721378326416016, -0.20720374584197998, -2.5647377967834473, -1.3528343439102173, -1.0379527807235718, -2.999924898147583, -0.1405588537454605, -0.1183427944779396, -0.13638468086719513, -0.4648353159427643, -0.7713906168937683], "finish_reason": "stop"}], "metrics": {"energy": 254.53215322113024, "energy_per_token": 1.6109629950704445, "time": 7.7244835, "time_per_token": 0.048889136075949365}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, \"**/*.txt\"), recursive=True)\n    with open(os.path.join(directory, \"keys_and_values.txt\"), \"w\") as out_file:\n        for f in files:\n            with open(f, \"r\") as in_file:\n                try:\n                    for line in in_file:\n                        parsed_line = ast.literal_eval(line)\n                        for key, value in parsed_line.items():\n                            value_str = str(value)\n                            value_str = value_str.encode(\"utf-8\")\n                            key_str = key.encode(\"utf-8\")\n                            out_file.write(key_str.decode(\"utf-8\") + \" : \" + value_str.decode(\"utf-8\") + \"\\n\")\n                except (ValueError, SyntaxError) as e:\n                    print(f\"Invalid dictionary representation: {line.strip()}\")\n                    raise ValueError(", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "**", "/*", ".", "txt", "\"", ")", ",", " recursive", "=", "True", ")", "\n", "    ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "keys", "_", "and", "_", "values", ".", "txt", "\"", ")", ",", " \"", "w", "\"", ")", " as", " out", "_", "file", ":", "\n", "        ", "for", " f", " in", " files", ":", "\n", "            ", "with", " open", "(", "f", ",", " \"", "r", "\"", ")", " as", " in", "_", "file", ":", "\n", "                ", "try", ":", "\n", "                ", "    ", "for", " line", " in", " in", "_", "file", ":", "\n", "                ", "        ", "par", "sed", "_", "line", " =", " ast", ".", "literal", "_", "eval", "(", "line", ")", "\n", "                ", "        ", "for", " key", ",", " value", " in", " parsed", "_", "line", ".", "items", "():", "\n", "                ", "            ", "value", "_", "str", " =", " str", "(", "value", ")", "\n", "                ", "            ", "value", "_", "str", " =", " value", "_", "str", ".", "encode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "                ", "            ", "key", "_", "str", " =", " key", ".", "encode", "(", "\"", "utf", "-", "8", "\"", ")", "\n", "                ", "            ", "out", "_", "file", ".", "write", "(", "key", "_", "str", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", " +", " \"", " :", " \"", " +", " value", "_", "str", ".", "decode", "(", "\"", "utf", "-", "8", "\"", ")", " +", " \"", "\\", "n", "\"", ")", "\n", "                ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", ")", " as", " e", ":", "\n", "                ", "    ", "print", "(", "f", "\"", "Invalid", " dictionary", " representation", ":", " {", "line", ".", "strip", "()", "}\"", ")", "\n", "                ", "    ", "raise", " Value", "Error", "("], "logprobs": [-2.91050386428833, -0.12594760954380035, -0.13526728749275208, -0.0003275334893260151, -0.03929758816957474, -0.016919201239943504, -0.463972270488739, -4.0531076592742465e-06, -0.0003519630990922451, -0.0013690156629309058, -0.002375164069235325, -0.0029289701487869024, -0.033177684992551804, -0.0029584472067654133, -0.9792881608009338, -1.3845903873443604, -0.26402929425239563, -0.035573333501815796, -0.04143368452787399, -0.0019961923826485872, -0.1840333640575409, -0.0004080893413629383, -0.006320368964225054, -0.012197663076221943, -0.004200327210128307, -0.0007961202645674348, -0.015344308689236641, -0.24260418117046356, -4.074665069580078, -1.6694004535675049, -0.17621096968650818, -2.177273750305176, -0.0019384894985705614, -0.026481570675969124, -0.011923941783607006, -0.0292879119515419, -0.021337592974305153, -0.15425844490528107, -0.0011501847766339779, -0.2529119849205017, -5.017682075500488, -1.3374764919281006, -1.2710208892822266, -0.0005376085755415261, -0.08907882869243622, -0.06475592404603958, -0.6086154580116272, -0.0013908008113503456, -0.12663264572620392, -0.0006302992696873844, -0.3796994388103485, -0.0865388959646225, -0.053924936801195145, -0.150377094745636, -0.00198643677867949, -2.3341338634490967, -1.0126031637191772, -0.15585406124591827, -0.0037802441511303186, -0.006030578166246414, -0.024688519537448883, -0.3458673655986786, -1.9039009809494019, -0.369849294424057, -0.005590873770415783, -0.0009455977124162018, -0.0047271400690078735, -0.010588654316961765, -0.6233717799186707, -0.007093483582139015, -0.000491021724883467, -0.006485959514975548, -0.4320995509624481, -0.3405252993106842, -0.08121979981660843, -0.017744014039635658, -0.4325192868709564, -0.0004931663861498237, -0.31925439834594727, -0.03285185620188713, -0.0019558602944016457, -0.0005660838796757162, -0.0026214304380118847, -0.0052164397202432156, -2.418382167816162, -0.0007904027588665485, -0.0049456642009317875, -0.001878165639936924, -0.0008990298374556005, -2.625535726547241, -0.2800506055355072, -0.005113380495458841, -0.01030717696994543, -0.0005067494930699468, -4.768360213347478e-06, -0.09442321956157684, -0.005485956557095051, -0.002209009835496545, -0.0010799296433106065, -4.105570316314697, -0.009122831746935844, -0.5093962550163269, -0.5932596921920776, -0.02024276740849018, -0.09750676155090332, -8.380061626667157e-05, -0.00021360022947192192, -2.9802276912960224e-06, -0.0004042761866003275, -0.0011593532981351018, -0.009750242345035076, -0.21028833091259003, -0.04460815340280533, -0.016243495047092438, -0.024193180724978447, -1.7907824516296387, -0.35660478472709656, -0.3171038031578064, -0.15203626453876495, -0.0023655309341847897, -0.013959509320557117, -2.3603161025675945e-05, -3.2782016205601394e-05, -0.002855036174878478, -0.0026410482823848724, -0.0006652049487456679, -0.003508366644382477, -0.0012656782055273652, -0.0011817384511232376, -3.0687456130981445, -2.76621150970459, -1.1753541231155396, -0.01574278250336647, -0.5482439994812012, -0.0017910643946379423, -0.009878675453364849, -0.004427986219525337, -0.12217795848846436, -0.025932643562555313, -0.016340136528015137, -2.050502300262451, -0.048513174057006836, -0.07025931030511856, -0.0831923857331276, -0.2128767967224121, -0.0022255433723330498, -7.92710343375802e-05, -0.02071484550833702, -1.3290574550628662, -0.5635982751846313, -0.10297473520040512, -0.37970253825187683, -0.0739206001162529, -0.017341768369078636, -4.994744449504651e-05, -0.2921050190925598, -0.25247836112976074, -0.011980836279690266, -0.024476826190948486, -3.3116466999053955, -0.04109714925289154, -0.02550404705107212, -0.0017960622208192945, -0.3968255817890167, -0.06012308597564697, -0.0020886289421468973, -0.00923421885818243, -0.0003181189822498709, -0.0010709986090660095, -0.0008594871615059674, -1.645074735279195e-05, -2.6940935640595853e-05, -0.0019462230848148465, -0.0014215136179700494, -0.016762712970376015, -0.01192771177738905, -0.4313638210296631, -0.0015889888163655996, -0.0601193830370903, -0.000259723310591653, -0.010971104726195335, -0.0789213627576828, -1.7261639833450317, -0.008038431406021118, -2.3841830625315197e-06, -2.6810028553009033, -0.002804515417665243, -0.16123026609420776, -0.0062532005831599236, -0.024751901626586914, -0.007384031545370817, -0.0003133521240670234, -3.4689302992774174e-05, -0.14798907935619354, -0.007849679328501225, -1.7548024654388428, -1.5613387823104858, -0.021796440705657005, -0.04028576985001564, -0.04941004142165184, -0.00048232366680167615, -4.0531076592742465e-06, -0.22774672508239746, -0.008204801939427853, -0.007791958283632994, -0.001206861576065421, -0.00021217002358753234, -0.000906175933778286, -4.768360213347478e-06, -2.658331868587993e-05, -0.1657738983631134, -0.006133305840194225, -0.0749138817191124, -0.05250333994626999, -0.0096443435177207, -0.0012422234285622835, -0.0116675840690732, -0.001776070799678564, -0.11372508853673935, -0.06409613788127899, -1.5812289714813232, -0.5318336486816406, -4.5298504119273275e-05, -0.03906351327896118, -0.12270089238882065, -4.887569048150908e-06, -9.274052717955783e-05, -1.83674955368042, -0.003466313472017646, -0.2972657084465027, -0.001312586129643023, -0.0069747548550367355, -0.0011975744273513556, -0.0034553841687738895, -0.7748690247535706, -0.06947070360183716, -0.7633402347564697, -0.05810206010937691, -1.9649403095245361, -0.21530508995056152, -0.536873459815979, -1.8198312520980835, -0.020297087728977203, -1.038584589958191, -1.1712646484375, -0.2913772463798523, -0.07785850018262863, -0.11623550951480865, -0.03555780276656151, -0.018541818484663963, -0.2450203001499176, -0.019856134429574013, -0.5372409224510193, -0.20044974982738495, -2.1815061700181104e-05, -0.1966145783662796], "finish_reason": "length"}], "metrics": {"energy": 382.12214476585376, "energy_per_token": 1.4926646279916163, "time": 12.49309, "time_per_token": 0.0488011328125}}
{"outputs": [{"text": "result = []\n    files = glob.glob(directory + os.sep + '*.txt')\n\n    # check if files are valid dictionaries\n    for file in files:\n        try:\n            result.append(ast.literal_eval(open(file, 'r').read()))\n        except (ValueError, SyntaxError):\n            raise ValueError\n\n    return result", "tokens": ["result", " =", " []", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "directory", " +", " os", ".", "sep", " +", " '", "*", ".", "txt", "')", "\n", "\n", "    ", "#", " check", " if", " files", " are", " valid", " diction", "aries", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "result", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "open", "(", "file", ",", " '", "r", "')", ".", "read", "()))", "\n", "        ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "            ", "raise", " Value", "Error", "\n", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-2.3285927772521973, -0.08599255234003067, -0.06296343356370926, -0.011857384815812111, -0.3236031234264374, -2.1779961585998535, -0.10389210283756256, -0.10771395266056061, -0.0002208704245276749, -0.048088353127241135, -0.00933024100959301, -1.4585893154144287, -0.0808066725730896, -2.840268135070801, -7.271740287251305e-06, -0.22557617723941803, -0.005351266358047724, -0.3786710202693939, -0.18431873619556427, -0.24497655034065247, -0.031529802829027176, -0.039091601967811584, -0.036268990486860275, -1.4925346374511719, -0.0003916450368706137, -2.5583395957946777, -3.6616392135620117, -1.1209311485290527, -1.7469862699508667, -1.584860920906067, -1.0062122344970703, -3.0268354415893555, -0.03580339625477791, -0.32414525747299194, -0.013108858838677406, -0.25735703110694885, -0.3503386974334717, -0.20835812389850616, -0.00523126358166337, -0.0015889888163655996, -0.0014704378554597497, -0.02307235635817051, -1.1769490242004395, -0.0010289618512615561, -0.0028795229736715555, -0.0036165802739560604, -3.1341989040374756, -0.046783801168203354, -0.02814844809472561, -0.02190665900707245, -0.14598658680915833, -0.00016366096679121256, -8.034383063204587e-05, -3.2782016205601394e-05, -0.00041654970846138895, -0.002610729541629553, -0.36178991198539734, -0.0007257211836986244, -0.007961444556713104, -0.5547677278518677, -0.275099515914917, -0.072296641767025, -0.04832157492637634, -0.0005852655158378184, -0.001795467222109437, -0.1641031950712204, -0.01386322546750307, -0.039182621985673904, -0.005944430362433195, -1.1402016878128052, -0.5261576175689697, -3.194758028257638e-05, -0.08763779699802399, -0.1279357373714447, -2.7418097943154862e-06, -7.784063927829266e-05, -0.2750369608402252, -0.01530321966856718, -0.0039456626400351524, -0.1607670933008194, -0.04681701958179474, -1.3589766240329482e-05, -2.7270987033843994, -0.3606933355331421, -0.0036342781968414783, -0.020953018218278885, -0.006817059125751257, -0.7273975610733032, -0.010376551188528538, -0.9199686646461487], "finish_reason": "stop"}], "metrics": {"energy": 115.0004960746765, "energy_per_token": 1.2777832897186279, "time": 4.210002, "time_per_token": 0.0467778}}
{"outputs": [{"text": "result = []\n\n    for text_file in glob.glob(directory + '*.txt'):\n        # Check if file exists\n        if not os.path.isfile(text_file):\n            raise ValueError('The path ' + text_file + ' is invalid')\n        # Open file for reading\n        with open(text_file, 'r', encoding='utf-8') as file:\n            # Iterate over every line\n            for line in file:\n                # Split line into words\n                words = line.strip().split(\" \")\n                if len(words) > 0 and words[0] == '{':\n                    # Convert string to Python dictionary\n                    result.append(ast.literal_eval(line))\n\n    return result", "tokens": ["result", " =", " []", "\n", "\n", "    ", "for", " text", "_", "file", " in", " glob", ".", "glob", "(", "directory", " +", " '", "*", ".", "txt", "')", ":", "\n", "        ", "#", " Check", " if", " file", " exists", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "text", "_", "file", "):", "\n", "            ", "raise", " Value", "Error", "('", "The", " path", " '", " +", " text", "_", "file", " +", " '", " is", " invalid", "')", "\n", "        ", "#", " Open", " file", " for", " reading", "\n", "        ", "with", " open", "(", "text", "_", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "#", " Iter", "ate", " over", " every", " line", "\n", "            ", "for", " line", " in", " file", ":", "\n", "                ", "#", " Split", " line", " into", " words", "\n", "                ", "words", " =", " line", ".", "strip", "()", ".", "split", "(", "\"", " \"", ")", "\n", "                ", "if", " len", "(", "words", ")", " >", " ", "0", " and", " words", "[", "0", "]", " ==", " '", "{", "':", "\n", "                ", "    ", "#", " Convert", " string", " to", " Python", " dictionary", "\n", "                ", "    ", "result", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "line", "))", "\n", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3285927772521973, -0.08599255234003067, -0.06296343356370926, -0.011857384815812111, -1.2863545417785645, -0.0004919749335385859, -0.6171292662620544, -3.3996663093566895, -0.16743434965610504, -0.04205498471856117, -0.08264388144016266, -0.043431006371974945, -8.630380034446716e-05, -0.19451723992824554, -0.015121234580874443, -2.37715482711792, -0.06896112859249115, -0.5476445555686951, -2.053361415863037, -0.2422962337732315, -0.023817269131541252, -0.028175685554742813, -0.0007323920144699514, -0.018626654520630836, -0.05086074024438858, -2.8979454040527344, -3.146043300628662, -0.7196410298347473, -2.5411508083343506, -0.8611103296279907, -0.32625797390937805, -0.0024028734769672155, -0.054740678519010544, -0.7509313821792603, -0.006028444971889257, -6.6756979322235566e-06, -0.0003578022588044405, -0.002557461615651846, -1.1294246912002563, -0.00020108585886191577, -0.00043406602344475687, -0.0024781490210443735, -7.438383181579411e-05, -2.8013790142722428e-05, -0.007700638845562935, -0.004845305811613798, -0.0019622850231826305, -0.7069210410118103, -0.5641575455665588, -0.00010632903286023065, -1.5949761867523193, -2.2964024543762207, -3.344675302505493, -4.106132507324219, -0.06797104328870773, -0.15984083712100983, -0.0003912875254172832, -0.0016876515001058578, -0.011695744469761848, -0.03862571343779564, -0.6531448364257812, -0.7606098651885986, -0.6827138662338257, -0.0023756397422403097, -1.3762335777282715, -0.8967521786689758, -1.821876883506775, -0.8979912400245667, -2.229701519012451, -0.10207870602607727, -0.14455537497997284, -0.0036377226933836937, -0.3181927502155304, -0.0024263011291623116, -0.0017030035378411412, -0.0029167274478822947, -2.396077979938127e-05, -2.264974000354414e-06, -0.1664993017911911, -0.12804901599884033, -0.06023668125271797, -0.5392128229141235, -0.0008958140970207751, -0.027337512001395226, -0.10639075189828873, -0.09900881350040436, -0.16860400140285492, -0.004651796538382769, -0.0341457799077034, -0.0011617346899583936, -0.5168678164482117, -0.029981819912791252, -0.00139318173751235, -0.039751362055540085, -0.7411763668060303, -2.8689560890197754, -0.026303697377443314, -0.5620282888412476, -3.948052406311035, -0.16307702660560608, -1.4744317531585693, -0.0009604846709407866, -0.08433452248573303, -0.04561092332005501, -0.004629132803529501, -0.005258656572550535, -0.1347891241312027, -0.0009258274803869426, -0.012913529761135578, -0.5068883895874023, -2.954108476638794, -0.5547260046005249, -0.6012265086174011, -2.573258399963379, -0.33186104893684387, -0.001043133088387549, -0.2788773775100708, -0.009998476132750511, -0.0825500339269638, -0.0018106985371559858, -0.9641101360321045, -0.02040630392730236, -0.002107900334522128, -0.013851115480065346, -3.0357682704925537, -0.14162492752075195, -0.7763858437538147, -0.0034383959136903286, -0.008324330672621727, -0.15003405511379242, -2.803497314453125, -0.3971420228481293, -0.00022075122979003936, -0.0010899323970079422, -0.007833948358893394, -1.7182421684265137, -0.0012554391287267208, -1.2086608409881592, -1.6768512725830078, -0.2720264494419098, -0.05066641420125961, -0.004846966825425625, -0.08225011825561523, -0.4938223659992218, -0.4508744180202484, -0.6551899909973145, -0.0008326877141371369, -0.06098515912890434, -0.0038897343911230564, -0.001111009274609387, -0.4841230809688568, -2.7349090576171875, -1.860670566558838, -0.6836868524551392, -2.95538592338562, -0.10485757887363434, -0.21424992382526398, -0.0007544293766841292, -0.0001591317413840443, -0.561504065990448, -0.009115153923630714, -0.0030844276770949364, -0.008563108742237091, -0.06467557698488235, -8.189342770492658e-05, -5.066266385256313e-05, -1.1444026313256472e-05, -0.000271521887043491, -0.02657223492860794, -0.056993626058101654, -0.12515145540237427, -0.003972259815782309, -0.44041648507118225, -0.010603280737996101, -0.08215074241161346, -0.004648592788726091, -1.3377866744995117, -7.152555099310121e-07, -7.152555099310121e-07, -3.194758028257638e-05, -6.3774932641536e-05, -0.07956770062446594], "finish_reason": "stop"}], "metrics": {"energy": 284.7633653926848, "energy_per_token": 1.5646338757839826, "time": 8.777454, "time_per_token": 0.048227769230769234}}
{"outputs": [{"text": "all_dicts = []\n    for file_path in glob.iglob(directory + \"/*.txt\"):\n        try:\n            with open(file_path, 'r') as f:\n                text_string = f.read()\n                all_dicts.append(ast.literal_eval(text_string))\n        except SyntaxError:\n            raise ValueError(\"The text file: {} has invalid dictionary representation\".format(file_path))\n        except NameError:\n            raise ValueError(\"The text file: {} has invalid dictionary representation\".format(file_path))\n        except TypeError:\n            raise ValueError(\"The text file: {} has invalid dictionary representation\".format(file_path))\n    return all_dicts", "tokens": ["all", "_", "dict", "s", " =", " []", "\n", "    ", "for", " file", "_", "path", " in", " glob", ".", "ig", "lob", "(", "directory", " +", " \"", "/*", ".", "txt", "\"", "):", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "text", "_", "string", " =", " f", ".", "read", "()", "\n", "                ", "all", "_", "dict", "s", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "text", "_", "string", "))", "\n", "        ", "except", " Sy", "ntax", "Error", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " text", " file", ":", " {}", " has", " invalid", " dictionary", " representation", "\"", ".", "format", "(", "file", "_", "path", "))", "\n", "        ", "except", " Name", "Error", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " text", " file", ":", " {}", " has", " invalid", " dictionary", " representation", "\"", ".", "format", "(", "file", "_", "path", "))", "\n", "        ", "except", " Type", "Error", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "The", " text", " file", ":", " {}", " has", " invalid", " dictionary", " representation", "\"", ".", "format", "(", "file", "_", "path", "))", "\n", "    ", "return", " all", "_", "dict", "s", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.7875962257385254, -0.018960075452923775, -1.4248316287994385, -0.2492014467716217, -0.04791189730167389, -0.0611172690987587, -0.027292853221297264, -0.3646675646305084, -0.5071394443511963, -1.2241357564926147, -1.052278757095337, -0.9530123472213745, -0.006591008976101875, -0.04720974341034889, -9.524368942948058e-05, -1.770649790763855, -0.00036125810584053397, -0.03465118631720543, -1.3641366958618164, -0.1268056184053421, -1.3931163549423218, -0.8335580229759216, -0.1683811992406845, -0.030064301565289497, -0.001913741696625948, -0.2911074757575989, -0.021568384021520615, -0.022345542907714844, -1.7632580995559692, -0.0005775213940069079, -0.005997281055897474, -0.003341331612318754, -0.393991619348526, -0.004662119783461094, -0.00026294111739844084, -0.002391575602814555, -2.145764938177308e-06, -1.2516897186287679e-05, -0.11591803282499313, -0.6307220458984375, -0.11316795647144318, -1.045931100845337, -0.001032891683280468, -1.0505536794662476, -0.04673442989587784, -0.006508699618279934, -0.0031022538896650076, -2.2880971431732178, -1.7039607763290405, -2.8320586681365967, -0.01591104455292225, -0.038342613726854324, -4.136476854910143e-05, -0.00010048838157672435, -0.026028933003544807, -0.07568317651748657, -0.15424954891204834, -1.7374321222305298, -0.00017927470616996288, -0.009815995581448078, -0.003870022250339389, -0.011634238995611668, -0.017112577334046364, -0.0065789297223091125, -0.1202174499630928, -9.619726915843785e-05, -8.201262971851975e-05, -1.6212332411669195e-05, -0.0002817710628733039, -0.0007930232677608728, -0.005665317177772522, -1.8715683836489916e-05, -5.113947918289341e-05, -0.013464707881212234, -0.03648613020777702, -0.04290558397769928, -0.004259561188519001, -2.2600133419036865, -1.0609570381348021e-05, -4.8397800128441304e-05, -0.17385217547416687, -0.04839426651597023, -0.004964880645275116, -0.28694385290145874, -0.035693779587745667, -8.237022848334163e-05, -0.17104272544384003, -0.7108609676361084, -2.210129976272583, -0.7244595885276794, -0.12702201306819916, -4.234839916229248, -0.9520363211631775, -0.7225301265716553, -0.1872367113828659, -0.14886629581451416, -0.16112209856510162, -0.36161112785339355, -0.021890796720981598, -0.006155935116112232, -0.0009893052047118545, -0.06478441506624222, -0.0006032554083503783, -0.0007326302584260702, -0.00711573613807559, -0.016969716176390648, -1.3929266929626465, -0.05108549818396568, -2.4644927978515625, -0.0013386583887040615, -0.021207589656114578, -0.022204359993338585, -0.001320800743997097, -0.029626015573740005, -0.06804689019918442, -6.318072337307967e-06, -0.0017661938909441233, -0.017060426995158195, -0.02506921999156475, -0.010809674859046936, -0.0016770598012953997, -0.007986516691744328, -0.0006173135479912162, -0.030050767585635185, -0.010654234327375889, -0.008324685506522655, -0.002978058299049735, -0.00723350141197443, -0.0008497203234583139, -0.0012775840004906058, -0.00014995403762441128, -0.0021541742607951164, -5.245195097813848e-06, -4.410734163684538e-06, -0.0002896366349887103, -0.0034132099244743586, -0.7751474976539612, -0.018700016662478447, -2.128628730773926, -8.702239938429557e-06, -0.0036570830270648003, -0.002920887665823102, -0.0005747812101617455, -0.007895687595009804, -0.004442940000444651, -3.099436753473128e-06, -0.0004744596080854535, -0.004333035554736853, -0.004162339493632317, -0.0009351171320304275, -0.000243634101934731, -0.001416513929143548, -8.511180931236595e-05, -0.0027001372072845697, -0.0015287628630176187, -0.0007322729215957224, -0.0005012686015106738, -0.0024102467577904463, -0.0003165697562508285, -0.00040284625720232725, -8.356221951544285e-05, -0.000618624035269022, -3.3378546504536644e-06, -9.536738616588991e-07, -0.00018916724366135895, -0.0011747133685275912, -1.1169534921646118, -0.016287125647068024, -0.006498158909380436, -3.135155202471651e-05, -5.483612312673358e-06, -2.145764938177308e-06, -1.6769628524780273, -8.344646857949556e-07, -9.536738616588991e-07, -0.0004551566671580076, -0.00015531764074694365, -0.08248636871576309], "finish_reason": "stop"}], "metrics": {"energy": 270.4929864997863, "energy_per_token": 1.5196235196617207, "time": 8.983859, "time_per_token": 0.050471117977528096}}
{"outputs": [{"text": "files = glob.glob(os.path.join(directory, '*.txt'))\n    result = []\n\n    for filepath in files:\n        file_content = []\n        with open(filepath, 'r', encoding='utf-8') as file:\n            for line in file:\n                file_content.append(line.strip())\n        try:\n            result.append(eval(''.join(file_content)))\n        except (SyntaxError, NameError, TypeError):\n            raise ValueError(\n                f'There is an invalid dictionary in the file: {filepath}')\n\n    return result", "tokens": ["files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "result", " =", " []", "\n", "\n", "    ", "for", " file", "path", " in", " files", ":", "\n", "        ", "file", "_", "content", " =", " []", "\n", "        ", "with", " open", "(", "file", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "for", " line", " in", " file", ":", "\n", "                ", "file", "_", "content", ".", "append", "(", "line", ".", "strip", "())", "\n", "        ", "try", ":", "\n", "            ", "result", ".", "append", "(", "eval", "('", "'", ".", "join", "(", "file", "_", "content", ")))", "\n", "        ", "except", " (", "Syntax", "Error", ",", " Name", "Error", ",", " Type", "Error", "):", "\n", "            ", "raise", " Value", "Error", "(", "\n", "                ", "f", "'", "There", " is", " an", " invalid", " dictionary", " in", " the", " file", ":", " {", "file", "path", "}", "')", "\n", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-2.91050386428833, -0.12594760954380035, -0.13526728749275208, -0.0003275334893260151, -0.03929758816957474, -0.016919201239943504, -0.463972270488739, -4.0531076592742465e-06, -0.0003519630990922451, -0.0013690156629309058, -0.002375164069235325, -0.0029289701487869024, -0.033177684992551804, -0.0029584472067654133, -0.529762327671051, -0.2148805409669876, -0.1502380073070526, -0.04065863415598869, -0.004172429908066988, -0.013133331201970577, -0.21394659578800201, -1.8144054412841797, -0.04539791867136955, -0.05498645454645157, -0.0027205857913941145, -0.8366328477859497, -0.00029595286468975246, -0.1494922786951065, -0.3051467835903168, -2.25909161567688, -0.0009540535393171012, -0.0032018369529396296, -0.0003401654539629817, -0.001981677720323205, -0.01703816093504429, -3.180684804916382, -0.847607433795929, -1.527296781539917, -0.010463143698871136, -3.221662759780884, -0.007823893800377846, -0.2371336668729782, -0.37345048785209656, -0.005807787179946899, -0.0008542464347556233, -0.002471489831805229, -0.0004303721070755273, -0.18411408364772797, -0.28882086277008057, -0.05770357325673103, -0.7255346775054932, -0.001701099332422018, -0.01990544982254505, -0.10906746983528137, -0.09672021120786667, -0.114108145236969, -0.003324222518131137, -0.03330522030591965, -0.0008206575294025242, -0.7910962700843811, -0.0260312557220459, -0.006602141074836254, -0.018683401867747307, -0.6518316268920898, -0.07450754940509796, -0.0020145138259977102, -0.003937350586056709, -0.17527510225772858, -0.005282728932797909, -0.004968795459717512, -0.9950946569442749, -0.0005422552349045873, -0.002140970202162862, -0.010254082269966602, -0.00752128753811121, -0.004093838855624199, -0.07545492798089981, -0.6110851764678955, -0.17183850705623627, -0.09404242038726807, -0.01577763445675373, -1.1090900897979736, -1.638745665550232, -0.0012903229799121618, -0.0018933956744149327, -0.0022769258357584476, -0.8620828986167908, -0.016610775142908096, -0.025852374732494354, -0.009945128113031387, -1.3660532236099243, -0.33576634526252747, -0.3655400574207306, -4.124556289752945e-05, -0.0002790300059132278, -0.002167615806683898, -0.010700821876525879, -5.411955135059543e-05, -1.3828182090946939e-05, -0.040601059794425964, -0.028104636818170547, -0.01678522117435932, -0.0022695516236126423, -1.33799409866333, -0.6197616457939148, -6.437094270950183e-05, -0.004944715183228254, -0.8257096409797668, -0.00016807096835691482, -0.6544854640960693, -1.4177076816558838, -1.6927575416048057e-05, -0.7872768640518188, -0.012154796160757542, -0.003666466102004051, -0.15335026383399963, -0.0181779395788908, -6.0437283536884934e-05, -0.3833736479282379, -2.5639877319335938, -0.002221261151134968, -0.4641000032424927, -1.1185067892074585, -3.4664576053619385, -0.6650996208190918, -1.2601782083511353, -0.24533385038375854, -0.2380361706018448, -1.6622731685638428, -1.01816725730896, -0.5559178590774536, -1.4323108196258545, -0.08517882227897644, -0.1902993619441986, -0.022959820926189423, -0.19054827094078064, -0.22028771042823792, -0.0783843994140625, -0.3525623679161072, -0.004746835678815842, -0.011730737052857876, -0.004627946298569441, -0.24669818580150604, -0.008334143087267876, -0.9274012446403503], "finish_reason": "stop"}], "metrics": {"energy": 253.6872418899536, "energy_per_token": 1.749567185447956, "time": 7.11276, "time_per_token": 0.04905351724137931}}
{"outputs": [{"text": "# Ensure that the directory exists\n    if not os.path.exists(directory):\n        raise ValueError(f\"Directory {directory} does not exist!\")\n    # Check the files and extract the dictionaries from them\n    dicts = []\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        # Extract the data from each file\n        try:\n            with open(filename, encoding='utf-8') as file:\n                data = file.read()\n                # Parse the dictionary string representation\n                dicts.append(ast.literal_eval(data))\n        except (ValueError, SyntaxError) as e:\n            # If there is an error, raise a ValueError exception\n            raise ValueError(f\"Invalid dictionary in file {filename}: {e}\")\n    return dicts", "tokens": ["#", " Ensure", " that", " the", " directory", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "directory", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Directory", " {", "directory", "}", " does", " not", " exist", "!", "\"", ")", "\n", "    ", "#", " Check", " the", " files", " and", " extract", " the", " diction", "aries", " from", " them", "\n", "    ", "dict", "s", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "#", " Ext", "ract", " the", " data", " from", " each", " file", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "filename", ",", " encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "                ", "data", " =", " file", ".", "read", "()", "\n", "                ", "#", " Parse", " the", " dictionary", " string", " representation", "\n", "                ", "dict", "s", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "data", "))", "\n", "        ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", ")", " as", " e", ":", "\n", "            ", "#", " If", " there", " is", " an", " error", ",", " raise", " a", " Value", "Error", " exception", "\n", "            ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " dictionary", " in", " file", " {", "filename", "}:", " {", "e", "}\"", ")", "\n", "    ", "return", " dict", "s", "\n", "\n", "#"], "logprobs": [-1.560671329498291, -4.178804874420166, -1.1896895170211792, -0.24854999780654907, -0.573845624923706, -0.3023449182510376, -0.8406726121902466, -0.0028531341813504696, -0.1195429190993309, -0.04366759583353996, -0.008775242604315281, -8.583032467868179e-06, -0.00013326710904948413, -0.0038025707472115755, -0.6605449318885803, -0.0003058442671317607, -0.018376339226961136, -0.023027274757623672, -0.0022709788754582405, -0.0012050755321979523, -0.20580460131168365, -0.38278597593307495, -3.194758028257638e-05, -0.1794016808271408, -1.0103696584701538, -0.17324475944042206, -0.4269300401210785, -0.606852650642395, -0.0017885654233396053, -0.012004864402115345, -0.32781627774238586, -0.0013142528478056192, -0.018664095550775528, -2.641664981842041, -0.03737673535943031, -0.0005332001601345837, -0.003963117022067308, -2.10418701171875, -0.38040393590927124, -3.0982656478881836, -2.751659393310547, -2.2507362365722656, -3.4489965438842773, -3.053892135620117, -0.8938016891479492, -0.8008974194526672, -0.0038329721428453922, -2.1131043434143066, -1.226500391960144, -0.107710100710392, -0.006623575929552317, -2.670389175415039, -0.33109283447265625, -0.04738007113337517, -0.07489607483148575, -0.00727930199354887, -0.03371826931834221, -0.258318156003952, -0.7065979838371277, -0.001531857531517744, -0.05068738013505936, -2.8371408916427754e-05, -0.07176187634468079, -0.00465962802991271, -0.34963303804397583, -0.0001429217227268964, -4.565611743601039e-05, -0.003787488443776965, -0.00046361665590666234, -0.0007098776986822486, -0.008166847750544548, -0.001562208984978497, -0.8036618232727051, -0.131571963429451, -0.24795682728290558, -0.0455646812915802, -0.0032921424135565758, -0.000418575422372669, -0.009169254451990128, -0.006088400725275278, -2.540112018585205, -3.4775004386901855, -0.02348208613693714, -0.3754548132419586, -3.2855193614959717, -0.32394272089004517, -2.588505744934082, -0.3852895200252533, -0.4794025719165802, -0.003006464336067438, -2.5117383003234863, -0.0003228858404327184, -0.0025424794293940067, -0.0014638908905908465, -0.3884752690792084, -0.0029273061081767082, -0.00037079135654494166, -0.0026918151415884495, -0.12335348129272461, -1.3531734943389893, -0.187479168176651, -0.05158637464046478, -0.10640297085046768, -0.002953930525109172, -0.024979231879115105, -0.0006188622792251408, -0.9788466691970825, -0.015734568238258362, -0.005726005882024765, -0.00189482350833714, -0.978522002696991, -0.0179667379707098, -0.6020439863204956, -6.627816765103489e-05, -0.00011693747364915907, -0.04777098447084427, -0.09049884974956512, -0.4141350984573364, -1.5849698781967163, -2.183741331100464, -0.13694357872009277, -2.3208210468292236, -3.1410000324249268, -2.479544162750244, -1.0289440155029297, -0.0024831434711813927, -0.5892300009727478, -1.3778257369995117, -0.013202156871557236, -0.005856023170053959, -0.009680825285613537, -0.07901687175035477, -4.8874615458771586e-05, -7.092700980138034e-05, -3.099436753473128e-06, -0.0002798642381094396, -0.00097977789118886, -0.004015597980469465, -0.020868847146630287, -0.01029242854565382, -0.050138771533966064, -0.1011037528514862, -0.729792594909668, -0.39128515124320984, -1.811964830267243e-05, -0.012419858947396278, -0.06356590986251831, -2.7418097943154862e-06, -3.3378044463461265e-05, -1.772042989730835, -0.0007509748684242368, -0.24473755061626434, -0.0002849888114724308, -0.01300731673836708, -0.002937647048383951, -1.7181048393249512, -1.7772566080093384, -0.7262214422225952, -0.4672704041004181, -0.4191496670246124, -0.17963539063930511, -1.0011649131774902, -1.1201226711273193, -0.40139052271842957, -0.11721151322126389, -0.00393497571349144, -2.7547366619110107, -0.24063728749752045, -0.0006688979919999838, -0.15254873037338257, -0.0035000513307750225, -1.0013530300057027e-05, -0.051166143268346786, -0.08255849033594131, -0.05078607425093651, -0.861615002155304, -0.19897732138633728, -1.7179381847381592, -0.5610169768333435, -0.22608977556228638, -0.011171647347509861, -0.1225409209728241, -0.009794983081519604, -0.12990286946296692, -0.06949739903211594, -0.0015482831513509154, -0.025806603953242302, -0.30550211668014526, -0.1386290043592453, -0.0033652123529464006, -0.00013386306818574667, -0.6454312205314636, -0.014004179276525974, -1.738153100013733], "finish_reason": "stop"}], "metrics": {"energy": 264.9734234695434, "energy_per_token": 1.365842389018265, "time": 9.3896, "time_per_token": 0.0484}}
{"outputs": [{"text": "text_files = glob.glob(os.path.join(directory, \"*.txt\"))\n    dict_list = []\n    for file in text_files:\n        with open(file, \"r\", encoding='utf-8') as f:\n            file_lines = f.readlines()\n            file_lines = [line.rstrip() for line in file_lines if not line.startswith(\"#\")]\n            dict_list.append(eval(file_lines[0]))\n    return dict_list", "tokens": ["text", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", "\n", "    ", "dict", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "            ", "file", "_", "lines", " =", " f", ".", "read", "lines", "()", "\n", "            ", "file", "_", "lines", " =", " [", "line", ".", "r", "strip", "()", " for", " line", " in", " file", "_", "lines", " if", " not", " line", ".", "start", "sw", "ith", "(", "\"", "#", "\"", ")]", "\n", "            ", "dict", "_", "list", ".", "append", "(", "eval", "(", "file", "_", "lines", "[", "0", "]))", "\n", "    ", "return", " dict", "_", "list", "\n", "\n", "def"], "logprobs": [-3.8652310371398926, -0.12891800701618195, -0.14290596544742584, -0.032564692199230194, -0.1019495278596878, -0.0003073934931308031, -0.027752917259931564, -0.009873127564787865, -0.3754606246948242, -3.814689989667386e-06, -0.00020132421923335642, -0.0011406589765101671, -0.00121007626876235, -0.002706676023080945, -0.03832482919096947, -0.0023154611699283123, -1.053687334060669, -0.17951634526252747, -0.03960035368800163, -0.020120684057474136, -0.002755656372755766, -0.002396808471530676, -0.01802457682788372, -0.328399658203125, -2.7982587814331055, -1.0403101444244385, -0.20135153830051422, -0.009785067290067673, -0.050109293311834335, -0.006766383070498705, -0.525053858757019, -0.14118416607379913, -0.842082679271698, -0.5685052871704102, -0.004445788450539112, -2.0265373677830212e-05, -6.318072337307967e-06, -0.000395815703086555, -0.0026556721422821283, -0.01104880403727293, -0.5807519555091858, -0.002173920162022114, -0.00045170116936787963, -0.003190310439094901, -0.1619092971086502, -1.0950515270233154, -0.08344048261642456, -0.028783729299902916, -0.7181622982025146, -0.016313279047608376, -1.3398746252059937, -0.09317374974489212, -0.20482677221298218, -0.005756467115134001, -0.023725537583231926, -0.0013394916895776987, -0.4464704096317291, -0.03513607755303383, -0.009177405387163162, -0.005056687630712986, -2.9686412811279297, -0.03332608938217163, -3.0124340057373047, -0.008618303574621677, -0.05474970489740372, -3.4927710657939315e-05, -0.00012742661056108773, -0.10695413500070572, -0.00462343730032444, -0.009308746084570885, -0.17509640753269196, -2.4806761741638184, -0.00562868919223547, -0.7624709606170654, -0.3049093782901764, -0.1709490865468979, -0.20521162450313568, -0.029860109090805054, -2.1886372566223145, -0.0016145778354257345, -0.2603355348110199, -0.029999172315001488, -0.000418575422372669, -0.00016890530241653323, -0.0011400636285543442, -1.3708974620385561e-05, -1.5497195136049413e-06, -2.3553895950317383, -2.282424211502075, -0.07227945327758789, -0.011209134012460709, -0.7890104651451111, -3.814689989667386e-06, 0.0, -0.6206654906272888, -0.0501132607460022, -0.3974432051181793, -0.02277642861008644, -0.12560229003429413, -0.06720593571662903, -0.09655603021383286, -2.2989752292633057, -0.0526578389108181, -0.6020099520683289, -0.06120428815484047, -0.22494865953922272, -0.05363619327545166, -2.2626419067382812, -0.29157212376594543, -2.950192451477051, -0.0013817534781992435, -0.00023803261865396053, -0.09703854471445084, -0.04337005317211151, -0.09438362717628479, -0.044753845781087875, -0.3313837945461273, -0.028213467448949814, -0.016825545579195023, -0.0002719986077863723, -1.4543427823809907e-05, -0.25339674949645996, -0.014704893343150616, -0.7678059935569763], "finish_reason": "stop"}], "metrics": {"energy": 207.52727275085456, "energy_per_token": 1.6736070383133432, "time": 6.268528, "time_per_token": 0.05055264516129032}}
{"outputs": [{"text": "try:\n        res = []\n        # Iterate through all text files in the specified directory\n        for filename in glob.glob(os.path.join(directory, \"*.txt\")):\n            # Read the text file using the built-in Python file readline function\n            with open(filename, \"r\", encoding=\"utf8\") as file:\n                lines = file.readlines()\n\n                # Iterate through each line in the text file and parse it as a dictionary\n                for line in lines:\n                    line = line.strip()\n                    if line and not line.startswith(\"#\"):\n                        try:\n                            # Convert the line to a dictionary\n                            res.append(ast.literal_eval(line))\n                        except (ValueError, SyntaxError):\n                            # Raise a ValueError if the line is invalid\n                            raise ValueError(f\"Invalid dictionary representation: {line}\")\n\n        return res\n\n    except ImportError as e:\n        print(f\"An import error occurred: {e}\")\n\n    except Exception as e:\n        print", "tokens": ["try", ":", "\n", "        ", "res", " =", " []", "\n", "        ", "#", " Iter", "ate", " through", " all", " text", " files", " in", " the", " specified", " directory", "\n", "        ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", ":", "\n", "            ", "#", " Read", " the", " text", " file", " using", " the", " built", "-", "in", " Python", " file", " read", "line", " function", "\n", "            ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "8", "\"", ")", " as", " file", ":", "\n", "                ", "lines", " =", " file", ".", "read", "lines", "()", "\n", "\n", "                ", "#", " Iter", "ate", " through", " each", " line", " in", " the", " text", " file", " and", " parse", " it", " as", " a", " dictionary", "\n", "                ", "for", " line", " in", " lines", ":", "\n", "                ", "    ", "line", " =", " line", ".", "strip", "()", "\n", "                ", "    ", "if", " line", " and", " not", " line", ".", "start", "sw", "ith", "(", "\"", "#", "\"", "):", "\n", "                ", "        ", "try", ":", "\n", "                ", "            ", "#", " Convert", " the", " line", " to", " a", " dictionary", "\n", "                ", "            ", "res", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "line", "))", "\n", "                ", "        ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "                ", "            ", "#", " Ra", "ise", " a", " Value", "Error", " if", " the", " line", " is", " invalid", "\n", "                ", "            ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " dictionary", " representation", ":", " {", "line", "}\"", ")", "\n", "\n", "        ", "return", " res", "\n", "\n", "    ", "except", " Import", "Error", " as", " e", ":", "\n", "        ", "print", "(", "f", "\"", "An", " import", " error", " occurred", ":", " {", "e", "}\"", ")", "\n", "\n", "    ", "except", " Exception", " as", " e", ":", "\n", "        ", "print"], "logprobs": [-2.6998753547668457, -0.0022291115019470453, -0.008200072683393955, -0.022733429446816444, -4.495758056640625, -0.10264334082603455, -0.11629090458154678, -0.021170008927583694, -0.08664482831954956, -2.5100111961364746, -2.7330658435821533, -0.07916302978992462, -1.0074944496154785, -0.49454089999198914, -0.642497181892395, -0.014823177829384804, -0.16336186230182648, -0.05107133835554123, -0.7529973983764648, -0.003217641031369567, -0.08993929624557495, -0.0027309288270771503, -0.057577088475227356, -0.7219322919845581, -0.0013678251998499036, -0.11256897449493408, -4.482168878894299e-05, -0.1710541695356369, -0.011497899889945984, -0.26428523659706116, -2.50339189733495e-06, -0.00010084597306558862, -0.0010789770167320967, -0.0004338276921771467, -0.002044850494712591, -0.01972535252571106, -0.0019069596892222762, -1.1459944248199463, -0.12614601850509644, -0.0476205013692379, -0.028922248631715775, -0.0020527022425085306, -0.0013305629836395383, -0.0002047805901383981, -0.011885186657309532, -0.020200828090310097, -0.7777839303016663, -1.0216630697250366, -0.2413179725408554, -1.225341796875, -0.05487903207540512, -2.9790782928466797, -0.8678989410400391, -2.4074292182922363, -0.025487661361694336, -0.00015627116954419762, -2.6225757598876953, -2.223574638366699, -3.4713664054870605, -3.4117562770843506, -1.4992961883544922, -0.1170353963971138, -0.0021605975925922394, -0.25713324546813965, -0.0009203489171341062, -0.00020382710499688983, -0.00263225007802248, -0.09569203108549118, -0.9329893589019775, -0.12266092747449875, -0.011137224733829498, -0.6681914925575256, -0.017956668511033058, -0.3709023892879486, -0.0012566297082230449, -0.10805587470531464, -1.3559682369232178, -0.00011872540198964998, -0.018127601593732834, -0.00021407696476671845, -0.4906856119632721, -0.017355944961309433, -0.004382885992527008, -0.005169951822608709, -1.6848361492156982, -0.005866096820682287, -0.22868618369102478, -0.00016473367577418685, -9.810443589231e-05, -0.03407192975282669, -0.004309652838855982, -0.028713304549455643, -0.5621564984321594, -0.782758355140686, -0.17524869740009308, -1.2156435251235962, -0.0007320346776396036, -0.053925614804029465, -0.9272117614746094, -0.03130199387669563, -0.4125140905380249, -0.003999568987637758, -0.14632534980773926, -0.0014132998185232282, -2.5926003456115723, -2.3950395584106445, -0.8419869542121887, -0.23056660592556, -0.08611505478620529, -0.4640320837497711, -0.20144490897655487, -0.0014444880653172731, -0.0544450543820858, -0.058394577354192734, -0.002551040844991803, -0.002998857758939266, -0.0011091040214523673, -0.0004390706308186054, -0.005138523876667023, -0.0006659197388216853, -2.4996585845947266, -0.10997649282217026, -0.11735866963863373, -0.004716224502772093, -0.08040888607501984, -0.01642856001853943, -0.229966938495636, -0.19558194279670715, -0.00030048147891648114, -0.48572883009910583, -0.5454143285751343, -2.8055624961853027, -0.5329501628875732, -0.028951317071914673, -0.019099727272987366, -0.03190305829048157, -1.9073468138230965e-06, 0.0, -0.28555113077163696, -0.037485938519239426, -0.2778852581977844, -0.012755002826452255, -0.13102155923843384, -0.13352413475513458, -0.005654056090861559, -0.0005813338793814182, -0.8050065040588379, -7.366862701019272e-05, -0.0019502682844176888, -0.0010306290350854397, -0.0007294139941222966, -1.3939036130905151, -2.196665048599243, -0.08083746582269669, -0.4993622601032257, -0.28679782152175903, -0.0479823499917984, -0.5291690230369568, -1.5174893140792847, -0.0009172523277811706, -0.0002019201492657885, -0.8146054744720459, -0.012059045024216175, -0.001328420010395348, -0.0044956328347325325, -0.15249775350093842, -5.090107151772827e-05, -9.881961887003854e-05, -5.006777428206988e-06, -0.00022957073815632612, -0.00047743841423653066, -0.006763541139662266, -0.016757672652602196, -0.01734212040901184, -0.025328440591692924, -0.007068626116961241, -0.005936253350228071, -0.7519833445549011, -0.3989316523075104, -5.245195097813848e-06, -0.01683926023542881, -0.03867950290441513, -1.7881377516459906e-06, -3.480850500636734e-05, -0.28030842542648315, -0.009908066131174564, -0.0014291321858763695, -0.0011510183103382587, -1.4326205253601074, -1.0758731365203857, -0.01697932742536068, -0.3177666664123535, -0.05411027371883392, -0.0017590539064258337, -0.03458163142204285, -0.28026309609413147, -0.05205531790852547, -0.483961820602417, -0.8960295915603638, -0.06870841234922409, -0.0008591298246756196, -0.0003297977091278881, -0.06602419167757034, -0.010659070685505867, -7.867782187531702e-06, -0.027280673384666443, -0.40188777446746826, -0.02924368903040886, -0.1525975465774536, -0.0996125191450119, -0.3783678710460663, -0.5623292326927185, -0.04918445274233818, -0.06319589912891388, -0.0939907655119896, -0.0006646093097515404, -0.009358939714729786, -0.7368488907814026, -0.10860302299261093, -0.08858612924814224, -0.00266304356046021, -0.004364963620901108, -1.060620665550232, -0.009128738194704056, -0.029283514246344566, -3.7250194549560547, -0.0003978414461016655, -0.6922364234924316, -0.29998451471328735, -0.0023824183735996485, -0.01755368709564209, -0.003758035833016038, -0.8232148289680481, -0.017086327075958252, -0.518767237663269, -0.030798476189374924, -2.7583656311035156, -1.5394172668457031, -0.03445598855614662, -0.11264598369598389, -0.08280245959758759, -0.0031791406217962503, -0.06542778015136719, -0.08203093707561493, -0.057918474078178406, -0.07167998701334, -0.901810348033905, -0.2670963406562805, -0.028367361053824425, -0.6431942582130432, -0.005194975063204765, -0.0029056731145828962, -0.0014873405452817678, -0.0035861723590642214, -0.0004917366313748062, -0.025765245780348778], "finish_reason": "length"}], "metrics": {"energy": 379.15293098831165, "energy_per_token": 1.4810661366730924, "time": 12.760899, "time_per_token": 0.04984726171875}}
{"outputs": [{"text": "all_dicts = []\n    for filename in glob.iglob(f\"{directory}/*.txt\"):\n        file = ast.literal_eval(open(filename, 'r').read())\n        all_dicts.append(file)\n    return all_dicts", "tokens": ["all", "_", "dict", "s", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "ig", "lob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "txt", "\"", "):", "\n", "        ", "file", " =", " ast", ".", "literal", "_", "eval", "(", "open", "(", "filename", ",", " '", "r", "')", ".", "read", "())", "\n", "        ", "all", "_", "dict", "s", ".", "append", "(", "file", ")", "\n", "    ", "return", " all", "_", "dict", "s", "\n", "\n", "def"], "logprobs": [-3.7875962257385254, -0.018960075452923775, -1.4248316287994385, -0.2492014467716217, -0.04791189730167389, -0.0611172690987587, -0.027292853221297264, -0.3646675646305084, -0.5071394443511963, -0.9476064443588257, -0.003780125407502055, -0.11149768531322479, -0.00011240804451517761, -1.9104492664337158, -0.00048065552255138755, -0.03915442153811455, -2.47125506401062, -0.38191938400268555, -0.007441421039402485, -0.06553228199481964, -0.11845768988132477, -0.18139520287513733, -0.14238305389881134, -0.032506417483091354, -0.0024318902287632227, -0.24826247990131378, -0.020471593365073204, -0.015636106953024864, -2.5655617713928223, -0.4959443211555481, -2.8432934284210205, -0.0002019201492657885, -0.0033660440240055323, -1.9192511899746023e-05, -0.0008683010237291455, -0.00380114559084177, -0.2967281937599182, -0.0009333306807093322, -0.007766644936054945, -0.6496030688285828, -0.7269731163978577, -0.09077420085668564, -0.0872860848903656, -0.0005807381821796298, -0.002283586421981454, -0.08876428008079529, -0.041219789534807205, -0.030867252498865128, -0.21405823528766632, -1.9907753085135482e-05, -7.354942499659956e-05, -0.0001370812824461609, -0.008197116665542126, -0.004299800843000412, -0.003361648181453347, -0.020897215232253075, -0.0036231130361557007, -0.0041516548953950405, -0.3078681230545044, -0.034898266196250916, -0.006675324868410826, -2.706014311115723e-05, -6.6756979322235566e-06, 0.0, -0.26812228560447693, -0.01398983784019947, -0.8229020833969116], "finish_reason": "stop"}], "metrics": {"energy": 104.78415482902528, "energy_per_token": 1.563942609388437, "time": 3.1408155, "time_per_token": 0.04687784328358209}}
{"outputs": [{"text": "dict_list = []\n\n    for filename in glob.iglob(directory + '/*.txt'):\n        with open(filename, 'r') as f:\n            try:\n                dict_list.append(eval(f.read()))\n            except (ValueError, SyntaxError):\n                raise ValueError(\"Error parsing the dictionary in file \" + filename)\n\n    return dict_list", "tokens": ["dict", "_", "list", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " glob", ".", "ig", "lob", "(", "directory", " +", " '", "/*", ".", "txt", "')", ":", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "try", ":", "\n", "                ", "dict", "_", "list", ".", "append", "(", "eval", "(", "f", ".", "read", "()))", "\n", "            ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "                ", "raise", " Value", "Error", "(", "\"", "Error", " parsing", " the", " dictionary", " in", " file", " \"", " +", " filename", ")", "\n", "\n", "    ", "return", " dict", "_", "list", "\n", "\n", "def"], "logprobs": [-3.742170810699463, -0.8390066027641296, -0.1772332340478897, -0.021427443251013756, -0.049023061990737915, -0.015989650040864944, -1.4110820293426514, -0.0005017452058382332, -0.5831007957458496, -0.8841644525527954, -0.0024530577939003706, -0.11740563064813614, -0.00011002412065863609, -2.0382440090179443, -0.0006748544401489198, -0.036669325083494186, -1.1651198863983154, -0.13552860915660858, -0.43600478768348694, -0.5622277855873108, -0.16495445370674133, -0.02763371728360653, -0.5198177695274353, -0.00041130665340460837, -0.029398581013083458, -0.05120714381337166, -0.6349191665649414, -0.005936135072261095, -0.0012416280806064606, -0.0049747261218726635, -0.18159624934196472, -0.29930347204208374, -0.09177830070257187, -1.148264765739441, -0.0012506766943261027, -1.0596790313720703, -0.04221738874912262, -0.006776920985430479, -0.01689845509827137, -1.9534668922424316, -0.0003768687602132559, -0.003060896648094058, -0.0028299542609602213, -0.6967553496360779, -0.017564931884407997, -0.13014425337314606, -0.01652846485376358, -0.015499373897910118, -0.005453826859593391, -2.7477164268493652, -0.003474866971373558, -0.052915096282958984, -0.00021240839851088822, -0.0002843929105438292, -0.16211794316768646, -0.043863628059625626, -0.025090958923101425, -0.003335153218358755, -0.8643444180488586, -1.3804287910461426, -3.7788631743751466e-05, -0.024402840062975883, -0.11688978224992752, -3.6954811548639555e-06, -3.7431014789035544e-05, -0.4473067820072174, -0.01841016300022602, -0.0016657537780702114, -0.31225264072418213, -0.036956578493118286, -6.16293036728166e-05, -0.23785707354545593, -0.902009129524231, -3.0917091369628906, -2.4950482845306396, -2.262084484100342, -1.2107247114181519, -1.10395348072052, -1.004975438117981, -2.127089262008667, -0.04514157027006149, -0.07734755426645279, -0.117128387093544, -0.031230473890900612, -0.20873019099235535, -0.005860526580363512, -0.013372022658586502, -0.00837634690105915, -0.0001668790791882202, -1.4066597032069694e-05, -0.26966968178749084, -0.007071822416037321, -1.0119271278381348], "finish_reason": "stop"}], "metrics": {"energy": 125.52606096839904, "energy_per_token": 1.349742591058054, "time": 4.3944845, "time_per_token": 0.047252521505376344}}
{"outputs": [{"text": "list_of_dicts = []\n    list_of_files = glob.glob(os.path.join(directory, '*.txt'))\n\n    for filename in list_of_files:\n        with open(filename) as file:\n            file_data = file.readlines()\n            for line in file_data:\n                line_dict = ast.literal_eval(line)\n                list_of_dicts.append(line_dict)\n\n    return list_of_dicts", "tokens": ["list", "_", "of", "_", "dict", "s", " =", " []", "\n", "    ", "list", "_", "of", "_", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "for", " filename", " in", " list", "_", "of", "_", "files", ":", "\n", "        ", "with", " open", "(", "filename", ")", " as", " file", ":", "\n", "            ", "file", "_", "data", " =", " file", ".", "read", "lines", "()", "\n", "            ", "for", " line", " in", " file", "_", "data", ":", "\n", "                ", "line", "_", "dict", " =", " ast", ".", "literal", "_", "eval", "(", "line", ")", "\n", "                ", "list", "_", "of", "_", "dict", "s", ".", "append", "(", "line", "_", "dict", ")", "\n", "\n", "    ", "return", " list", "_", "of", "_", "dict", "s", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.892244815826416, -0.10468914359807968, -0.5541974306106567, -0.0010507544502615929, -0.6488515734672546, -0.4358658492565155, -0.04912872985005379, -0.040635284036397934, -0.018133221194148064, -0.41035082936286926, -3.6228415966033936, -0.006189108360558748, -0.04234526306390762, -0.0018309272127225995, -0.6306527853012085, -0.02892352268099785, -0.16682876646518707, -0.00025340684805996716, -0.030219994485378265, -0.013835596852004528, -0.643627405166626, -3.6954811548639555e-06, -0.0007977878558449447, -0.0020453264005482197, -0.0024330795276910067, -0.004682646598666906, -0.06043252348899841, -0.003366875695064664, -0.5463576316833496, -0.16257703304290771, -0.1727992594242096, -0.0374404676258564, -0.0038592161145061255, -0.016499502584338188, -1.377511978149414, -0.0004593271005433053, -0.1904231309890747, -2.2256829738616943, -0.0028216331265866756, -0.0038860533386468887, -0.00022098960471339524, -2.002696055569686e-05, -9.775113539944869e-06, -9.059865078597795e-06, -0.0009573881980031729, -0.004190474282950163, -0.03336494788527489, -0.6782082915306091, -0.003448850242421031, -0.0009172523277811706, -0.0048251380212605, -1.550535798072815, -0.0006438804557546973, -0.738674521446228, -0.04620129242539406, -0.005546774249523878, -0.013586667366325855, -2.9392142295837402, -0.06544419378042221, -1.89798104763031, -0.005264822859317064, -0.06805112212896347, -0.00018273114983458072, -0.00012766500003635883, -2.0535709857940674, -0.00827846024185419, -0.007248886860907078, -0.40603014826774597, -1.2492507696151733, -0.4532136619091034, -0.004388701636344194, -0.0017769037513062358, -0.0002557904226705432, -6.6756979322235566e-06, -0.0028178293723613024, -0.0022479044273495674, -0.010987612418830395, -2.5697057247161865, -1.5923142433166504, -1.680531620979309, -0.04679415374994278, -0.18469591438770294, -8.821098163025454e-05, -0.00026306029758416116, -6.794906312279636e-06, -0.0003250309091527015, -0.002462689997628331, -0.004512365907430649, -0.09990306943655014, -0.07363757491111755, -0.06349945813417435, -0.20734287798404694, -7.83174327807501e-05, -4.970903682988137e-05, -9.775113539944869e-06, -0.00011765264935093, -7.283422019099817e-05, -0.00235661119222641, -0.0011531615164130926, -0.0009304723353125155, -0.004105235915631056, -0.0002809368306770921, -1.7165990357170813e-05, -0.002450560452416539, -0.005673733074218035, -0.30149045586586, -0.011565541848540306, -0.045369211584329605, -0.0042847259901463985, -0.000538680877070874, -4.172316494077677e-06, -5.709961988031864e-05, -5.578839045483619e-05, -1.9073468138230965e-06, -0.9443657398223877, -3.576278118089249e-07, -8.344646857949556e-07, -3.802703940891661e-05, -0.00037651124875992537, -0.10174937546253204], "finish_reason": "stop"}], "metrics": {"energy": 197.78112065887453, "energy_per_token": 1.6481760054906212, "time": 5.662357, "time_per_token": 0.047186308333333336}}
{"outputs": [{"text": "task_func.count += 1\n    results = []\n\n    for filepath in glob.glob(os.path.join(directory, '*.txt')):\n        try:\n            with open(filepath, 'r', encoding='utf-8') as f:\n                contents = f.read()\n                lines = contents.split('\\n')\n                d = ast.literal_eval(lines[0])\n                results.append(d)\n        except (ValueError, SyntaxError, IndentationError) as e:\n            print(f'Error while parsing {filepath}: {e}')\n            raise ValueError(f'Error while parsing {filepath}: {e}')\n        except IndexError:\n            print(f'Error while parsing {filepath}: File is empty.')\n            raise ValueError(f'Error while parsing {filepath}: File is empty.')\n        except FileNotFoundError:\n            print(f'Error while parsing {filepath}: File not found.')\n            raise ValueError(f'Error while parsing {filepath}: File not found.')\n\n    return results\n\ntask_", "tokens": ["task", "_", "func", ".", "count", " +=", " ", "1", "\n", "    ", "results", " =", " []", "\n", "\n", "    ", "for", " file", "path", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "path", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "contents", " =", " f", ".", "read", "()", "\n", "                ", "lines", " =", " contents", ".", "split", "('", "\\", "n", "')", "\n", "                ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "lines", "[", "0", "])", "\n", "                ", "results", ".", "append", "(", "d", ")", "\n", "        ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", ",", " Ind", "entation", "Error", ")", " as", " e", ":", "\n", "            ", "print", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " {", "e", "}", "')", "\n", "            ", "raise", " Value", "Error", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " {", "e", "}", "')", "\n", "        ", "except", " Index", "Error", ":", "\n", "            ", "print", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " File", " is", " empty", ".", "')", "\n", "            ", "raise", " Value", "Error", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " File", " is", " empty", ".", "')", "\n", "        ", "except", " File", "NotFound", "Error", ":", "\n", "            ", "print", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " File", " not", " found", ".", "')", "\n", "            ", "raise", " Value", "Error", "(", "f", "'", "Error", " while", " parsing", " {", "file", "path", "}:", " File", " not", " found", ".", "')", "\n", "\n", "    ", "return", " results", "\n", "\n", "task", "_"], "logprobs": [-4.081861972808838, -0.09898225218057632, -2.1316921710968018, -0.29981422424316406, -2.805906057357788, -0.8206941485404968, -0.03582628443837166, -0.005564675200730562, -0.06396329402923584, -0.34788450598716736, -3.9232678413391113, -0.028277438133955002, -0.047128550708293915, -0.008231405168771744, -1.2116873264312744, -0.0003970073303207755, -0.7424494028091431, -1.176527738571167, -2.0475997924804688, -0.006170626264065504, -0.04482998698949814, -8.034383063204587e-05, -0.27364805340766907, -0.01765804924070835, -0.38158777356147766, -8.940656698541716e-06, -0.0003518439189065248, -0.003649006364867091, -0.0025869496166706085, -0.002932892646640539, -0.023870928213000298, -0.0027393694035708904, -0.4911513328552246, -0.1917007714509964, -0.2621646821498871, -0.0495326854288578, -0.00651580560952425, -0.0006945105269551277, -0.010501482523977757, -0.04336845502257347, -1.2739629745483398, -0.0004469349514693022, -0.0035185827873647213, -0.0033793505281209946, -0.33603912591934204, -0.005342017859220505, -0.0002928543253801763, -0.003301647724583745, -7.807903602952138e-05, -0.11899568885564804, -0.43358370661735535, -0.07868735492229462, -0.46759307384490967, -0.002972234506160021, -0.017339307814836502, -0.10338375717401505, -0.06498315930366516, -0.13048496842384338, -0.0021151569671928883, -0.015799928456544876, -0.0003780603874474764, -0.740018904209137, -0.06397884339094162, -0.0038381970953196287, -0.005801505874842405, -2.6507115364074707, -0.005203039385378361, -0.18052150309085846, -4.053033626405522e-05, -0.0001006075763143599, -0.16710245609283447, -0.11475265026092529, -0.3550233542919159, -4.211084842681885, -0.017085038125514984, -0.5052186250686646, -0.0007615765207447112, -0.1077580526471138, -0.6801208257675171, -0.11870057880878448, -0.0023413882590830326, -0.0909445583820343, -0.029808389022946358, -0.2903323769569397, -2.0873208045959473, -1.545114278793335, -0.9830215573310852, -0.00011228884250158444, -9.548207890475169e-05, -8.583032467868179e-06, -0.00024244230007752776, -0.016657672822475433, -0.013202274218201637, -0.09735385328531265, -0.07633161544799805, -0.034723151475191116, -0.07517841458320618, -0.07366658747196198, -0.2618958055973053, -0.002350783674046397, -0.0013150862650945783, -0.0027616003062576056, -0.006717953830957413, -0.0008659188752062619, -0.00377870025113225, -0.1333819478750229, -0.00468098558485508, -0.9015387892723083, -0.43131861090660095, -1.8954096958623268e-05, -0.04399368539452553, -0.2181418240070343, -2.50339189733495e-06, -9.42901024245657e-05, -1.0216100215911865, -2.7465226650238037, -0.0016143397660925984, -6.651657167822123e-05, -1.8025166988372803, -0.003981283865869045, -0.14738869667053223, -0.0006884350441396236, -0.010145286098122597, -0.004047180060297251, -0.8145727515220642, -0.11708756536245346, -0.24562714993953705, -1.1288115978240967, -0.9510290026664734, -2.1632981300354004, -1.4397882223129272, -0.6051028966903687, -0.027214549481868744, -0.0005827635759487748, -0.2054041475057602, -0.041399143636226654, -0.11198977380990982, -0.09263394773006439, -0.027465909719467163, -0.005337393376976252, -0.9230746626853943, -0.9600178003311157, -0.6820210814476013, -1.1324817933200393e-05, -0.7724915742874146, -0.3639846444129944, -0.23301167786121368, -0.8302711248397827, -0.07101476192474365, -0.01661394163966179, -0.02963504195213318, -0.0030985698103904724, -1.1086402082582936e-05, -0.5221797227859497, -0.008447510190308094, -0.0061298697255551815, -0.017434436827898026, -0.007334922440350056, -0.23635327816009521, -1.5566917657852173, -0.049248456954956055, -2.290069580078125, -7.986990567587782e-06, -0.3234952986240387, -0.026695508509874344, -0.0014355602907016873, -0.1500554084777832, -0.06970833241939545, -0.026037877425551414, -0.1303149312734604, -0.6090800762176514, -0.10414382070302963, -0.04580031335353851, -0.012719104066491127, -0.001260439632460475, -7.748573807475623e-06, -0.09408408403396606, -3.0841586589813232, -0.6768932342529297, -0.2987162172794342, -1.7937250137329102, -0.023241952061653137, -0.0007352509419433773, -0.3030540943145752, -0.06718029826879501, -0.12662959098815918, -2.145764938177308e-06, -0.010537107475101948, -0.00873518269509077, -0.0019902437925338745, -0.005740821827203035, -0.00021288513380568475, -0.00036483307485468686, -0.0006424508756026626, -0.0002615109842736274, -7.867782187531702e-06, -0.0007524043321609497, -0.002741033909842372, -0.0005433275364339352, -0.0003014348621945828, -0.01955317333340645, -0.0011002921964973211, -0.0013012760318815708, -0.8685519099235535, -0.02645150199532509, -2.2406165599823, -0.0024898024275898933, -6.186770770000294e-05, -0.06420167535543442, -0.007147220429033041, -0.0010057396721094847, -0.05190242454409599, -0.007892139256000519, -0.006233179941773415, -0.05537981912493706, -0.15286900103092194, -0.010639962740242481, -0.031040731817483902, -0.00313564739190042, -0.0027209424879401922, -6.437280717364047e-06, -0.003247941145673394, -0.09292925149202347, -0.19137625396251678, -0.0021942604798823595, -0.041190844029188156, -0.003360935254022479, -0.00032550760079175234, -0.017106834799051285, -0.0050592971965670586, -0.225178524851799, -7.271740287251305e-06, -0.0015963680343702435, -0.003607671707868576, -0.0012350797187536955, -0.002421425189822912, -5.495397272170521e-05, -0.00033539868309162557, -0.00016675988445058465, -0.00018046658078674227, -1.7881377516459906e-06, -0.00013720047718379647, -0.0004397855664137751, -0.0006891497760079801, -7.986703712958843e-05, -0.001700980355963111, -0.00037174468161538243, -0.0006136203301139176, -0.9668899774551392, -0.02474411018192768, -0.24255488812923431, -0.009526980109512806, -0.10009787231683731, -0.01733403466641903, -0.3016507625579834, -0.0015668508131057024], "finish_reason": "length"}], "metrics": {"energy": 394.0892305049895, "energy_per_token": 1.5394110566601151, "time": 12.521576, "time_per_token": 0.04891240625}}
{"outputs": [{"text": "with open(os.path.join(directory, 'unicode.txt')) as file:\n        for line in file:\n            line = line.strip()\n            try:\n                dict_value = ast.literal_eval(line)\n                yield dict_value\n            except ValueError:\n                raise ValueError(\"Invalid dictionary representation: \" + line)", "tokens": ["with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "un", "icode", ".", "txt", "'))", " as", " file", ":", "\n", "        ", "for", " line", " in", " file", ":", "\n", "            ", "line", " =", " line", ".", "strip", "()", "\n", "            ", "try", ":", "\n", "                ", "dict", "_", "value", " =", " ast", ".", "literal", "_", "eval", "(", "line", ")", "\n", "                ", "yield", " dict", "_", "value", "\n", "            ", "except", " Value", "Error", ":", "\n", "                ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", ":", " \"", " +", " line", ")", "\n", "\n", "if"], "logprobs": [-4.028101444244385, -0.9367899298667908, -0.24799971282482147, -0.8323067426681519, -6.997340824455023e-05, -0.011056113988161087, -0.006240169517695904, -0.011659454554319382, -0.011487765237689018, -0.08516842126846313, -0.004631862044334412, -0.5188398361206055, -4.120113372802734, -0.15706340968608856, -1.2730380296707153, -0.09781035780906677, -0.6071602702140808, -0.002183198230341077, -1.1691856384277344, -0.08382730931043625, -0.017318570986390114, -0.020800195634365082, -2.9755234718322754, -0.2278633862733841, -0.002622024854645133, -0.011772561818361282, -0.23113328218460083, -0.0066104307770729065, -0.009076643735170364, -2.5742785930633545, -0.16695891320705414, -0.2244168519973755, -0.01026942115277052, -0.11932235211133957, -0.022997334599494934, -0.09193272143602371, -0.094218410551548, -1.8439857959747314, -0.0006658005877397954, -0.004864405374974012, -0.002391575602814555, -2.5600595474243164, -0.12065465748310089, -3.567054271697998, -0.007735061924904585, -0.08379463851451874, -4.207999518257566e-05, -4.935142715112306e-05, -5.602820692729438e-06, -0.00020728347590193152, -0.0018475858960300684, -0.005932698491960764, -0.012998373247683048, -0.03215762972831726, -0.9895534515380859, -1.3932710886001587, -0.07475592941045761, -0.011078985407948494, -0.0003854485403280705, -0.008385567925870419, -0.017470987513661385, -0.003003255231305957, -1.0767594575881958, -0.0002090712368953973, -0.14397253096103668, -0.02281091921031475, -0.001904937089420855, -0.24707600474357605, -0.029903380200266838, -0.00014327930693980306, -0.27633923292160034, -0.8690495491027832, -0.6692071557044983, -0.23340395092964172, -0.31539973616600037, -0.7916128635406494, -1.0719795227050781, -0.09559886157512665, -0.03503398224711418, -0.10379453748464584, -0.041367918252944946, -0.14655239880084991, -1.5297675132751465], "finish_reason": "stop"}], "metrics": {"energy": 126.835934753418, "energy_per_token": 1.5281437922098555, "time": 3.997799, "time_per_token": 0.048166253012048195}}
{"outputs": [{"text": "results = []\n    file_paths = glob.glob(os.path.join(directory, '*.txt'))\n\n    for file_path in file_paths:\n        file_name = os.path.basename(file_path)\n        file_name_without_extension = os.path.splitext(file_name)[0]\n\n        try:\n            with open(file_path, 'r') as file:\n                result = ast.literal_eval(file.read())\n                results.append(result)\n        except ValueError:\n            print(f\"Invalid dictionary representation in file '{file_path}'\")\n\n    return results", "tokens": ["results", " =", " []", "\n", "    ", "file", "_", "paths", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "\n", "    ", "for", " file", "_", "path", " in", " file", "_", "paths", ":", "\n", "        ", "file", "_", "name", " =", " os", ".", "path", ".", "bas", "ename", "(", "file", "_", "path", ")", "\n", "        ", "file", "_", "name", "_", "without", "_", "extension", " =", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", "_", "name", ")[", "0", "]", "\n", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "result", " =", " ast", ".", "literal", "_", "eval", "(", "file", ".", "read", "())", "\n", "                ", "results", ".", "append", "(", "result", ")", "\n", "        ", "except", " Value", "Error", ":", "\n", "            ", "print", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " file", " '", "{", "file", "_", "path", "}'", "\"", ")", "\n", "\n", "    ", "return", " results"], "logprobs": [-4.110550403594971, -0.023268157616257668, -0.07162749767303467, -0.013148861937224865, -0.43917959928512573, -3.096449851989746, -0.08735939115285873, -0.8768035173416138, -0.007933770306408405, -0.10316905379295349, -0.00019572250312194228, -0.035999596118927, -0.0070763202384114265, -0.27209019660949707, -3.099436753473128e-06, -0.00026127262390218675, -0.004092533141374588, -0.0011610202491283417, -0.003315905574709177, -0.026329010725021362, -0.0023167694453150034, -0.5033937692642212, -0.1662828028202057, -0.15232764184474945, -0.04673124477267265, -0.0029214818496257067, -0.01122740563005209, -1.2520480155944824, -0.0003680505615193397, -0.15280424058437347, -0.2764841914176941, -0.05920847877860069, -0.010178563185036182, -0.00027176024741493165, -0.0015594713622704148, -1.1920928244535389e-07, -6.318072337307967e-06, -0.00017188502533826977, -0.0011934071080759168, -0.01867053098976612, -2.9546618461608887, -0.25813454389572144, -0.7543506622314453, -0.032239239662885666, -0.04329311475157738, -1.0132738680113107e-05, -3.242440288886428e-05, -0.0038569599855691195, -0.12717875838279724, -3.576278118089249e-07, -2.0146166207268834e-05, -0.0024673277512192726, -2.50339189733495e-06, -0.0002488780301064253, -0.0005696581210941076, -0.010517643764615059, -0.0911121740937233, -0.9728835225105286, -0.017085857689380646, -0.8813503384590149, -0.4066295027732849, -0.8013976812362671, -0.0008137490367516875, -0.357595294713974, -0.05819046497344971, -0.27814921736717224, -5.686121585313231e-05, -8.153582894010469e-05, -0.0023129635956138372, -0.0006236277404241264, -1.9788545614574105e-05, -9.536738616588991e-07, -4.660974445869215e-05, -0.004939851816743612, -9.536738616588991e-07, -0.007404029369354248, -0.0013440155889838934, -0.0037753749638795853, -0.00016437610611319542, -0.014167210087180138, -0.9731073379516602, -0.0010099078062921762, -1.045894742012024, -0.00033825874561443925, -0.002228992525488138, -0.0024132197722792625, -0.48737549781799316, -0.008625749498605728, -0.0003505330823827535, -0.006533452309668064, -7.64102369430475e-05, -0.0003564914222806692, -0.12425350397825241, -0.27709048986434937, -0.054436925798654556, -0.9485390186309814, -0.00018499570433050394, -0.27912837266921997, -0.01145582739263773, -0.0024302254896610975, -0.003133864840492606, -3.744234561920166, -0.08292623609304428, -0.13390801846981049, -8.046303264563903e-05, -9.643566590966657e-05, -2.50339189733495e-06, -0.00022384998737834394, -0.0020864878315478563, -0.007780011277645826, -0.0041245874017477036, -0.00012206286191940308, -0.09212745726108551, -0.022674230858683586, -0.8755464553833008, -0.3819088935852051, -0.0013387774815782905, -0.0015911312075331807, -0.016122445464134216, -0.009741978719830513, -0.00041154498467221856, -0.0019139796495437622, -0.19114437699317932, -0.002663162536919117, -1.1904890537261963, -4.339123915997334e-05, -0.4515135884284973, -0.02239403687417507, -0.004316180944442749, -1.4574158191680908, -0.04738450422883034, -0.14943274855613708, -0.2805706560611725, -1.456161379814148, -0.09078758955001831, -0.3392261564731598, -0.2569352090358734, -1.005414366722107, -1.0559903383255005, -0.0004128557338844985, -0.008773352019488811, -0.002578745363280177, -1.197311282157898, -0.2616347670555115, -1.2944695949554443, -0.011336437426507473, -0.003961573354899883, -0.8509930372238159, -0.013017906807363033, -0.027111876755952835, -0.0012057899730280042], "finish_reason": "stop"}], "metrics": {"energy": 208.9219548645019, "energy_per_token": 1.3835891050629265, "time": 7.313309, "time_per_token": 0.048432509933774834}}
{"outputs": [{"text": "result = []\n\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n\n        if os.path.isfile(filepath):\n            try:\n                with open(filepath, encoding='utf-8') as f:\n                    d = eval(f.read())\n                    result.append(d)\n            except (ValueError, SyntaxError):\n                raise ValueError(\n                    f\"Error while parsing file {filename}: Invalid dictionary representation in file.\")\n\n    return result", "tokens": ["result", " =", " []", "\n", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "file", "path", " =", " os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", "\n", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "path", "):", "\n", "            ", "try", ":", "\n", "                ", "with", " open", "(", "file", "path", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "    ", "d", " =", " eval", "(", "f", ".", "read", "())", "\n", "                ", "    ", "result", ".", "append", "(", "d", ")", "\n", "            ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "                ", "raise", " Value", "Error", "(", "\n", "                ", "    ", "f", "\"", "Error", " while", " parsing", " file", " {", "filename", "}:", " Invalid", " dictionary", " representation", " in", " file", ".", "\"", ")", "\n", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-2.3285927772521973, -0.08599255234003067, -0.06296343356370926, -0.011857384815812111, -1.2863545417785645, -0.0004919749335385859, -0.6171292662620544, -0.7563967704772949, -0.002538674511015415, -2.6545169353485107, -2.038458114839159e-05, -0.003003255231305957, -5.722029527532868e-06, -0.0027260545175522566, -0.02706894837319851, -0.0010806442005559802, -0.01414311584085226, -0.0223490409553051, -1.5121846199035645, -0.6178296804428101, -0.0013438966125249863, -0.015144601464271545, -0.0006277974462136626, -2.038458114839159e-05, -0.006789116654545069, -0.000341476290486753, -0.00019667598826345056, -0.0011743560899049044, -0.0005423743859864771, -0.0037098173052072525, -0.00014280252798926085, -0.002817948115989566, -1.1710708141326904, -0.0004968600696884096, -0.43063002824783325, -0.25658729672431946, -0.0002420847595203668, -0.00010752100206445903, -0.0012757980730384588, -0.0006416169344447553, -0.03320639953017235, -2.455681169521995e-05, -0.0030284514650702477, -1.9192511899746023e-05, -0.8531447649002075, -0.017026441171765327, -0.017501093447208405, -0.9913985729217529, -0.00013386306818574667, -0.0023224782198667526, -0.0026801638305187225, -0.3168500065803528, -0.003236890770494938, -9.965400386136025e-05, -0.0057715196162462234, -7.152555099310121e-07, -0.04652928560972214, -1.3616576194763184, -0.26886728405952454, -0.04466857388615608, -0.08751023560762405, -0.0012897277483716607, -0.009003517217934132, -0.0002369599969824776, -0.9076802730560303, -0.03405752778053284, -0.0035187015309929848, -0.006689771544188261, -0.0007260785205289721, -3.2525079250335693, -0.4353630244731903, -2.1147451400756836, -0.0026632812805473804, -0.014819537289440632, -0.000102037942269817, -7.378782902378589e-05, -0.08883660286664963, -0.0909680724143982, -0.2857411503791809, -0.11413834989070892, -0.22002188861370087, -0.0022819212172180414, -0.0015141224721446633, -0.0022689569741487503, -0.007494429592043161, -0.0007613382767885923, -0.0017805927200242877, -0.0973234623670578, -0.0023055896162986755, -0.67364901304245, -1.0656183958053589, -2.4676019165781327e-05, -0.021835513412952423, -0.16482557356357574, -2.622600959512056e-06, -4.637133679352701e-05, -0.4501560926437378, -0.013410015031695366, -0.0017467968864366412, -0.2624683082103729, -0.04235886037349701, -3.7431014789035544e-05, -0.232522115111351, -2.428175687789917, -0.0007407305529341102, -0.006893187295645475, -0.3308558464050293, -0.3031519055366516, -2.7615842819213867, -1.9101097583770752, -1.5267829895019531, -1.185328483581543, -0.4741641581058502, -0.37627553939819336, -1.213050127029419, -1.0272889137268066, -0.23883402347564697, -0.39278021454811096, -3.305737018585205, -0.943627119064331, -0.6211704015731812, -0.05008593574166298, -0.060939058661460876, -0.05655842646956444, -0.2970081567764282, -0.024092640727758408, -0.010787386447191238, -0.001713952049612999, -0.1378512978553772, -0.003496843855828047, -0.6751088500022888], "finish_reason": "stop"}], "metrics": {"energy": 221.72120261001592, "energy_per_token": 1.6925282641985948, "time": 6.6916513, "time_per_token": 0.051081307633587786}}
{"outputs": [{"text": "dictionary_list = []\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            # The file must have at least two lines of content\n            # The first line must be a dictionary representation\n            # The second line must be either empty or contain a list representation\n            if os.path.exists(file_path) and os.path.isfile(file_path):\n                with open(file_path, \"r\", encoding=\"utf-8\") as file:\n                    first_line = file.readline().strip()\n                    second_line = file.readline().strip()\n                    if (first_line.startswith('{') and first_line.endswith('}')) or (\n                            first_line.startswith(\"(\") and first_line.endswith(\")\")):\n                        # Check that there are no extraneous characters\n                        for char in first_line.replace('{', '').replace('}', '').", "tokens": ["d", "ictionary", "_", "list", " =", " []", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "#", " The", " file", " must", " have", " at", " least", " two", " lines", " of", " content", "\n", "            ", "#", " The", " first", " line", " must", " be", " a", " dictionary", " representation", "\n", "            ", "#", " The", " second", " line", " must", " be", " either", " empty", " or", " contain", " a", " list", " representation", "\n", "            ", "if", " os", ".", "path", ".", "exists", "(", "file", "_", "path", ")", " and", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "                ", "    ", "first", "_", "line", " =", " file", ".", "read", "line", "()", ".", "strip", "()", "\n", "                ", "    ", "second", "_", "line", " =", " file", ".", "read", "line", "()", ".", "strip", "()", "\n", "                ", "    ", "if", " (", "first", "_", "line", ".", "start", "sw", "ith", "('", "{", "')", " and", " first", "_", "line", ".", "end", "sw", "ith", "('", "}'", "))", " or", " (", "\n", "                ", "            ", "first", "_", "line", ".", "start", "sw", "ith", "(", "\"", "(", "\"", ")", " and", " first", "_", "line", ".", "end", "sw", "ith", "(", "\"", ")\"", "))", ":", "\n", "                ", "        ", "#", " Check", " that", " there", " are", " no", " extr", "aneous", " characters", "\n", "                ", "        ", "for", " char", " in", " first", "_", "line", ".", "replace", "('", "{'", ",", " '", "')", ".", "replace", "('", "}'", ",", " '", "')", "."], "logprobs": [-3.1744580268859863, -0.5233435034751892, -0.06714239716529846, -0.16831330955028534, -0.022017447277903557, -0.03849805146455765, -0.02276279404759407, -1.236293911933899, -0.0005336767644621432, -0.6435544490814209, -3.0480973720550537, -0.002509423065930605, -0.9306412935256958, -0.0016886036610230803, -0.0002774807217065245, -0.021214241161942482, -0.0007013006834313273, -0.013348967768251896, -5.125986263010418e-06, -0.00020096666412428021, -0.0023407936096191406, -0.039047807455062866, -0.1099102720618248, -0.027199003845453262, -0.016745716333389282, -0.13332770764827728, -0.3040480315685272, -0.19642947614192963, -0.21977274119853973, -0.00020919041708111763, -0.0017476299544796348, -0.011151724494993687, -1.3331729173660278, -0.16764263808727264, -0.047053832560777664, -0.0012406755704432726, -0.009233156219124794, -9.643566590966657e-05, -1.8358061424805783e-05, -0.0036365347914397717, -0.0012649638811126351, -9.095255518332124e-05, -0.007481059525161982, -0.00025519452174194157, -0.001906840712763369, -0.00017915551143232733, -0.0030906074680387974, -0.24029020965099335, -3.280930757522583, -4.901877403259277, -2.1073920726776123, -2.7339117527008057, -1.8655085563659668, -3.7790634632110596, -0.03900997340679169, -2.4439311027526855, -0.3671547472476959, -2.5465433597564697, -1.4211416244506836, -0.9259381294250488, -0.003137667663395405, -2.3056581020355225, -2.2463295459747314, -0.28882068395614624, -0.08595535904169083, -0.567782461643219, -0.5902727246284485, -0.4647270441055298, -1.0713114738464355, -0.49211639165878296, -0.8458631038665771, -0.003722169203683734, -0.3348381519317627, -0.16210272908210754, -0.3514452278614044, -0.03484726324677467, -0.123670294880867, -0.21042530238628387, -4.0043134689331055, -1.7194937467575073, -0.0869978591799736, -2.224550724029541, -1.2274360656738281, -1.8082726001739502, -2.1705832481384277, -0.19444715976715088, -0.07603833079338074, -1.319953441619873, -0.6943244934082031, -7.807903602952138e-05, -0.05896924436092377, -0.0012442474253475666, -1.6957507133483887, -0.00040665941196493804, -0.003129943273961544, -0.0017761897761374712, -7.867782187531702e-06, -0.4264169931411743, -0.030073093250393867, -0.5313435792922974, -0.0017973711946979165, -0.050397925078868866, -0.005461770575493574, -0.924980640411377, -0.001647544908337295, -0.0013293724041432142, -0.006602851673960686, -0.001029557315632701, -2.3841855067985307e-07, -0.5120479464530945, -0.004785631783306599, -0.016479920595884323, -0.5539745092391968, -0.00223910273052752, -0.0002240883477497846, -0.0018042728770524263, -0.0025341559667140245, -9.536738616588991e-07, -0.21508312225341797, -2.4362566471099854, -0.13758112490177155, -0.02233540080487728, -0.445372074842453, -0.024480897933244705, -0.3812229037284851, -0.0014935302315279841, -0.1505466252565384, -0.27626553177833557, -0.004220270086079836, -0.012847509235143661, -0.012754649855196476, -0.00035565727739594877, -0.6401007771492004, -0.13707828521728516, -0.0017308506648987532, -0.008000943809747696, -0.0009600082994438708, -2.335855007171631, -0.04103296250104904, -0.02552182599902153, -0.058710843324661255, -0.032471220940351486, -0.00010978573118336499, -0.0006848612101748586, -0.0019801310263574123, -0.0052657718770205975, -1.0843815803527832, -0.06132359057664871, -0.014012760482728481, -0.04058217257261276, -0.09995786845684052, -0.003275745315477252, -0.6747493743896484, -0.0002982171718031168, -0.0036605275236070156, -0.003149075899273157, -0.010496646165847778, -0.00011216964776394889, -0.00011955977242905647, -0.0041315918788313866, -0.00022027450904715806, -0.034244854003190994, -0.002558531705290079, -0.0006901028100401163, -0.019417792558670044, -0.46234560012817383, -0.031761717051267624, -0.3018112778663635, -2.4250998497009277, -1.3818925619125366, -0.0004847066884394735, -0.00012933371181134135, -0.46870237588882446, -0.05847306177020073, -8.34461570775602e-06, -1.1920928244535389e-07, -0.8202528357505798, -0.05899958685040474, -0.07151241600513458, -0.21762248873710632, -0.3513981103897095, -2.098061486321967e-05, -1.6689286894688848e-06, -0.003719199914485216, -0.001026222831569612, -3.433168603805825e-05, 0.0, -0.0028496868908405304, -0.15159668028354645, -0.003621212672442198, -1.2197613716125488, -0.22215324640274048, -0.761938750743866, -0.0005210472736507654, -0.13287073373794556, -0.4778372049331665, -2.0265558760002023e-06, -2.0265558760002023e-06, -0.038872502744197845, -0.013975261710584164, -2.264974000354414e-06, 0.0, -2.2520666122436523, -0.031324174255132675, -2.8050596714019775, -0.021556485444307327, -0.0006223172531463206, -0.009687435813248158, -0.02796739526093006, -1.4305012882687151e-05, -1.1324817933200393e-05, -0.001256391522474587, -0.0011830481234937906, -9.179073458653875e-06, -1.1920928244535389e-07, -0.02408333122730255, -0.0013094907626509666, -0.0035002888180315495, -0.046403881162405014, -0.11453336477279663, -0.008252568542957306, -0.014998288825154305, -0.0013143719406798482, -2.279630661010742, -2.5197105407714844, -2.20971941947937, -3.0406038761138916, -0.6127338409423828, -0.8234238028526306, -3.8645401000976562, -0.0002181292074965313, -0.759488582611084, -1.5960148572921753, -0.0018954183906316757, -0.00011467275908216834, -3.2102808952331543, -0.7096754312515259, -0.0035337877925485373, -0.5696976780891418, -1.6689286894688848e-06, -1.7881377516459906e-06, -3.207899808883667, -1.180586576461792, -0.8416258096694946, -0.1834353804588318, -0.00037353215157054365, -0.06855626404285431, -0.07568616420030594, -0.008054987527430058, -0.0024408092722296715, -0.028211960569024086, -0.04390926659107208, -2.7179348762729205e-05, -0.011479279957711697, -0.0013760393485426903, -0.15079322457313538], "finish_reason": "length"}], "metrics": {"energy": 431.83569414520264, "energy_per_token": 1.6868581802546978, "time": 13.5648155, "time_per_token": 0.052987560546875}}
{"outputs": [{"text": "try:\n        with open(os.path.join(directory, \"test_data.txt\")) as f:\n            lines = f.readlines()\n    except (FileNotFoundError, IOError):\n        raise ValueError(\"Text file not found.\")\n    results = []\n    for line in lines:\n        d = ast.literal_eval(line.strip())\n        if isinstance(d, dict):\n            results.append(d)\n        else:\n            raise ValueError(\"Invalid dictionary representation in file.\")\n    return results", "tokens": ["try", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "test", "_", "data", ".", "txt", "\"", "))", " as", " f", ":", "\n", "            ", "lines", " =", " f", ".", "read", "lines", "()", "\n", "    ", "except", " (", "File", "NotFound", "Error", ",", " IO", "Error", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Text", " file", " not", " found", ".", "\"", ")", "\n", "    ", "results", " =", " []", "\n", "    ", "for", " line", " in", " lines", ":", "\n", "        ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "line", ".", "strip", "())", "\n", "        ", "if", " isinstance", "(", "d", ",", " dict", "):", "\n", "            ", "results", ".", "append", "(", "d", ")", "\n", "        ", "else", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", " in", " file", ".", "\"", ")", "\n", "    ", "return", " results", "\n", "\n", "def"], "logprobs": [-2.6998753547668457, -0.0022291115019470453, -0.008200072683393955, -0.022733429446816444, -2.352396011352539, -0.5638933777809143, -0.09888160973787308, -0.8079469203948975, -5.7338023907504976e-05, -0.004961440805345774, -0.006433963775634766, -0.005290674045681953, -0.004270481877028942, -0.041701506823301315, -0.0032056395430117846, -1.3549188375473022, -2.596344470977783, -1.7837597131729126, -2.702390193939209, -0.2234734743833542, -0.37703534960746765, -0.0015766106080263853, -0.5735962986946106, -0.005543810781091452, -0.6901381611824036, -0.05938452482223511, -0.01776755414903164, -0.0075080362148582935, -2.861135482788086, -0.015659697353839874, -0.144486665725708, -7.343022298300639e-05, -0.00019977481861133128, -0.21201224625110626, -0.007266875822097063, -0.00970278400927782, -1.1055184602737427, -0.004609791561961174, -2.789050340652466, -0.7133708000183105, -0.0026318933814764023, -0.00016962042718660086, -0.05300509184598923, -1.8162187337875366, -3.659658250398934e-05, -0.40835699439048767, -0.03223300725221634, -0.003146580420434475, -0.9067949652671814, -0.3461780846118927, -6.675497570540756e-05, -0.18343190848827362, -0.1641358733177185, -2.912820816040039, -0.15510863065719604, -0.3780094087123871, -0.015283497050404549, -1.2322077751159668, -0.13515368103981018, -0.0010589712765067816, -0.006549322512000799, -1.1513818502426147, -3.822200298309326, -0.012458240613341331, -0.05800217390060425, -0.006945751141756773, -0.10583391785621643, -0.09723866730928421, -0.41078871488571167, -0.0017914213240146637, -0.0020975510124117136, -0.0029294455889612436, -0.0026667292695492506, -0.004455757327377796, -3.58156156539917, -0.43846607208251953, -0.39064282178878784, -0.00011526874004630372, -8.427741704508662e-05, -9.894321920000948e-06, -0.0001991788885788992, -0.0022493319120258093, -0.0051760002970695496, -1.329587697982788, -0.13098348677158356, -0.04983668401837349, -0.036041565239429474, -0.0035316497087478638, -1.333333134651184, -0.3818015456199646, -0.00014053787162993103, -0.0009141556802205741, -0.001053850632160902, -0.05982377752661705, -0.010130535811185837, -0.020992707461118698, -0.0009843033039942384, -0.03765207529067993, -0.001057423185557127, -0.000493762141559273, -0.0013223483692854643, -0.006385045126080513, -0.0009351171320304275, -0.0011535187950357795, -0.4511404037475586, -0.05031834915280342, -7.819823804311454e-05, -0.008569372817873955, -0.0012986568035557866, -0.0721743181347847, -0.005596919916570187, -6.5205356804654e-05, -0.02361016534268856, -0.3171939253807068, -0.2947063148021698, -0.06778447329998016, -0.6694175601005554, -1.5527245998382568, -2.4308512210845947, -0.3129127323627472, -0.01606132835149765, -0.001424132497049868, -0.002121699508279562, -0.11086045950651169, -0.021503282710909843, -0.0019860798493027687, -0.140008807182312, -0.010387169197201729, -0.6778077483177185], "finish_reason": "stop"}], "metrics": {"energy": 210.79301016235357, "energy_per_token": 1.634054342343826, "time": 6.2708583, "time_per_token": 0.04861130465116279}}
{"outputs": [{"text": "res = []\n    for file in glob.glob(directory + '/*'):\n        if file.endswith('.txt'):\n            with open(file, 'r', encoding='utf-8') as f:\n                s = f.read()\n                if s == '':\n                    continue\n                if s[-1] == '}':\n                    s = s[:-1]\n                d = ast.literal_eval(s)\n                res.append(d)\n        else:\n            continue\n    return res", "tokens": ["res", " =", " []", "\n", "    ", "for", " file", " in", " glob", ".", "glob", "(", "directory", " +", " '", "/*", "')", ":", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "txt", "')", ":", "\n", "            ", "with", " open", "(", "file", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " f", ":", "\n", "                ", "s", " =", " f", ".", "read", "()", "\n", "                ", "if", " s", " ==", " '", "':", "\n", "                ", "    ", "continue", "\n", "                ", "if", " s", "[-", "1", "]", " ==", " '", "}", "':", "\n", "                ", "    ", "s", " =", " s", "[:", "-", "1", "]", "\n", "                ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "s", ")", "\n", "                ", "res", ".", "append", "(", "d", ")", "\n", "        ", "else", ":", "\n", "            ", "continue", "\n", "    ", "return", " res", "\n", "\n", "def"], "logprobs": [-4.3811211585998535, -0.07743140310049057, -0.06152134761214256, -0.01614966057240963, -0.17550267279148102, -0.6387685537338257, -1.401157259941101, -0.459030419588089, -0.12709057331085205, -0.0001705739414319396, -0.24366620182991028, -0.02662772126495838, -1.4480113983154297, -0.2166895717382431, -0.5240646600723267, -0.2525007724761963, -1.6392135620117188, -0.0015092422254383564, -0.019879506900906563, -0.019831007346510887, -1.3081350326538086, -0.9953349232673645, -0.06627190113067627, -0.07921171188354492, -0.00011705666838679463, -1.1920928244535389e-07, -0.32030603289604187, -0.04088592529296875, -0.055978428572416306, -0.0007520469953306019, -0.04170916602015495, -0.0137808071449399, -0.013153097592294216, -0.7715064287185669, -0.004790021106600761, -0.0015584002248942852, -0.008058534935116768, -0.20063869655132294, -0.2608761191368103, -0.07215768098831177, -0.5485649704933167, -0.0013508014380931854, -0.025766640901565552, -0.11746912449598312, -0.07664158940315247, -0.16180242598056793, -0.004750750958919525, -0.021662412211298943, -0.0009802542626857758, -0.28782933950424194, -0.061152368783950806, -0.006270970683544874, -0.0059415861032903194, -3.519986152648926, -0.034595221281051636, -0.08289847522974014, -0.0001081169830285944, -0.00024136967840604484, -0.17858058214187622, -0.16990266740322113, -0.18402384221553802, -1.9846892356872559, -1.1776372194290161, -2.88790225982666, -0.2911154329776764, -0.7531070113182068, -0.09244421124458313, -0.0002037079248111695, -0.0022852513939142227, -0.5560413002967834, -0.022726088762283325, -0.07223143428564072, -2.105586528778076, -0.8394623398780823, -2.286747932434082, -0.09479161351919174, -0.03265872970223427, -0.27700671553611755, -1.350940465927124, -1.2005360126495361, -0.001010741456411779, -0.09311379492282867, -0.0010222929995507002, -0.001960976282134652, -0.8734074831008911, -0.08270490169525146, -0.18848495185375214, -0.47358453273773193, -0.03599303960800171, -0.05386541038751602, -0.009809620678424835, -0.12636016309261322, -0.046907223761081696, -2.589604139328003, -0.11164066940546036, -0.20588833093643188, -0.0001137191939051263, -9.238292841473594e-05, -6.9141146923357155e-06, -0.0004406196530908346, -0.006769106257706881, -0.005066057667136192, -0.023153431713581085, -0.023542867973446846, -0.051642075181007385, -0.11888191103935242, -0.011932305060327053, -0.0024245171807706356, -0.0014578201808035374, -0.004665560554713011, -0.0008415018673986197, -0.0010895751183852553, -2.5687947273254395, -0.19420403242111206, -0.00024673278676345944, -0.02632494643330574, -0.0020591262727975845, -0.9119089245796204, -0.0027273620944470167, -0.2131938338279724, -0.03952816501259804, -0.0027375861536711454, -0.22609159350395203, -0.011382521130144596, -0.9159843325614929], "finish_reason": "stop"}], "metrics": {"energy": 167.86352908897396, "energy_per_token": 1.3429082327117916, "time": 5.8768167, "time_per_token": 0.0470145336}}
{"outputs": [{"text": "# Validate the directory\n    if not os.path.isdir(directory):\n        raise ValueError('Input is not a directory or does not exist.')\n\n    # Get all text files in the specified directory\n    filenames = glob.glob(os.path.join(directory, '*'))\n\n    # Get all the dictionaries\n    dictionaries = []\n\n    # For each text file\n    for filename in filenames:\n        # Open the text file\n        with open(filename, 'r', encoding='utf-8') as text_file:\n            # Extract the dictionaries in each text file\n            for dictionary in ast.literal_eval(text_file.read()).keys():\n                dictionaries.append(dictionary)\n\n    return dictionaries", "tokens": ["#", " Valid", "ate", " the", " directory", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "directory", "):", "\n", "        ", "raise", " Value", "Error", "('", "Input", " is", " not", " a", " directory", " or", " does", " not", " exist", ".", "')", "\n", "\n", "    ", "#", " Get", " all", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "fil", "en", "ames", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", "'))", "\n", "\n", "    ", "#", " Get", " all", " the", " diction", "aries", "\n", "    ", "diction", "aries", " =", " []", "\n", "\n", "    ", "#", " For", " each", " text", " file", "\n", "    ", "for", " filename", " in", " fil", "en", "ames", ":", "\n", "        ", "#", " Open", " the", " text", " file", "\n", "        ", "with", " open", "(", "filename", ",", " '", "r", "'", ",", " encoding", "='", "utf", "-", "8", "')", " as", " text", "_", "file", ":", "\n", "            ", "#", " Ext", "ract", " the", " diction", "aries", " in", " each", " text", " file", "\n", "            ", "for", " dictionary", " in", " ast", ".", "literal", "_", "eval", "(", "text", "_", "file", ".", "read", "())", ".", "keys", "():", "\n", "                ", "diction", "aries", ".", "append", "(", "d", "ictionary", ")", "\n", "\n", "    ", "return", " diction", "aries", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.560671329498291, -3.2080578804016113, -0.28914782404899597, -1.0713756084442139, -0.5490216016769409, -1.1934120655059814, -0.004490530118346214, -0.20948699116706848, -0.07014384865760803, -0.07271828502416611, -1.4543427823809907e-05, -0.00032824851223267615, -0.004727496299892664, -0.4160037636756897, -0.001956217223778367, -0.00018606838420964777, -0.015223503112792969, -0.04239142686128616, -0.004259917419403791, -0.001583989942446351, -0.05075547844171524, -0.12195765227079391, -3.2305197237292305e-05, -2.1177124977111816, -3.869443416595459, -1.0766912698745728, -0.1308606117963791, -0.10694278031587601, -0.6430655121803284, -3.026890754699707, -0.5115259289741516, -0.0021294315811246634, -0.12033446133136749, -1.3131204843521118, -0.0448264554142952, -0.0012428186601027846, -0.1864168792963028, -0.001257344032637775, -0.3097032308578491, -1.989630103111267, -0.7065393328666687, -1.0013867616653442, -0.07809910178184509, -0.3209511339664459, -0.021431175991892815, -2.042275905609131, -0.004983740858733654, -0.09655959904193878, -0.0008691347320564091, -3.496211528778076, -0.001887565478682518, -4.136476854910143e-05, -0.006539966445416212, -0.06886287778615952, -5.531158240046352e-05, -0.020380372181534767, -0.012918825261294842, -0.2381637543439865, -0.00010573305189609528, -9.881961887003854e-05, -0.002717019058763981, -0.0011694743297994137, -0.0017076447838917375, -0.01571168377995491, -0.0019116000039502978, -0.1686176061630249, -0.14683271944522858, -2.856961488723755, -0.0076515451073646545, -0.5046185851097107, -0.000379132863599807, -0.1390850991010666, -3.0870189666748047, -0.7346265912055969, -2.7905521392822266, -1.6831040382385254, -0.0037296514492481947, -2.1708507537841797, -0.0017106198938563466, -0.9351385831832886, -0.0011132716899737716, -0.02481772191822529, -0.2172335535287857, -0.003487102687358856, -1.8182295560836792, -0.0001419681793777272, -1.5077693462371826, -2.7769992351531982, -0.32635536789894104, -0.5417307019233704, -0.023043466731905937, -0.6039954423904419, -0.0007418026216328144, -0.01015661470592022, -0.11190599948167801, -0.0012206730898469687, -0.001019911258481443, -5.960462772236497e-07, -4.768360213347478e-06, -0.0005679901223629713, -0.0007833749405108392, -0.1512119472026825, -0.4480903744697571, -1.9297120571136475, -0.14560525119304657, -0.8871020078659058, -0.0034880531020462513, -0.59759521484375, -0.0012348415330052376, -0.31237345933914185, -0.0011094611836597323, -0.0006480501033365726, -0.004352738615125418, -0.14447861909866333, -0.18347111344337463, -0.09071236848831177, -0.5868720412254333, -0.0010782625759020448, -0.022904597222805023, -0.08830602467060089, -0.08496586978435516, -0.16712766885757446, -0.0027821664698421955, -0.03172730281949043, -0.0008058876264840364, -2.8027496337890625, -0.21160559356212616, -0.004483409225940704, -0.0007528808200731874, -0.000916418619453907, -0.06902377307415009, -0.18589752912521362, -2.9543402194976807, -0.0041848947294056416, -0.6107630133628845, -2.4563889503479004, -0.007622324395924807, -3.061962842941284, -2.924332618713379, -0.335983008146286, -0.01651732623577118, -0.19492824375629425, -0.008759644813835621, -1.575967788696289, -2.1002163887023926, -0.4377153813838959, -0.12753087282180786, -0.00016902448260225356, -0.003242950653657317, -1.2993727978027891e-05, -0.002920055529102683, -0.01228315569460392, -0.002471846528351307, -3.58813522325363e-05, -0.00014304091746453196, -0.0007339406292885542, -0.00030655929003842175, -1.5272494554519653, -0.7965961694717407, -2.118673086166382, -0.0042777229100465775, -0.007510520983487368, -0.010088051669299603, -0.4468512237071991, -0.0001578206429257989, -0.003106769872829318, -0.0014529397012665868, -0.006542453076690435, -0.12798263132572174, -0.00010048838157672435, -0.003647580975666642, -0.008503065444529057, -0.06864719837903976, -0.01669190637767315, -0.6871011853218079, -0.006090059410780668, -2.95634672511369e-05, -1.174260139465332, -4.768370445162873e-07, -8.344646857949556e-07, -7.211902266135439e-05, -0.00010179955279454589, -0.050204984843730927], "finish_reason": "stop"}], "metrics": {"energy": 253.4241769199371, "energy_per_token": 1.3848315678685088, "time": 8.787665, "time_per_token": 0.048020027322404374}}
{"outputs": [{"text": "output = []\n    for filename in glob.glob(os.path.join(directory, \"*.txt\")):\n        with open(filename, \"r\") as file:\n            contents = file.read()\n            parsed_dict = ast.literal_eval(contents)\n            output.append(parsed_dict)\n    return output", "tokens": ["output", " =", " []", "\n", "    ", "for", " filename", " in", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "*", ".", "txt", "\"", "))", ":", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "contents", " =", " file", ".", "read", "()", "\n", "            ", "par", "sed", "_", "dict", " =", " ast", ".", "literal", "_", "eval", "(", "contents", ")", "\n", "            ", "output", ".", "append", "(", "par", "sed", "_", "dict", ")", "\n", "    ", "return", " output", "\n", "\n", "if"], "logprobs": [-4.145674228668213, -0.25551488995552063, -0.049871839582920074, -0.014461820013821125, -0.3402794897556305, -0.6142181754112244, -0.8898826241493225, -0.0028196123894304037, -0.1225157156586647, -0.00011657988943625242, -0.14419835805892944, -0.013616536743938923, -0.36275744438171387, -3.814689989667386e-06, -0.00018308870494365692, -0.00185591506306082, -0.0012373419012874365, -0.0027769359294325113, -0.024038759991526604, -0.003123288508504629, -1.0657821893692017, -0.18017292022705078, -0.09210679680109024, -0.030304769054055214, -0.001752984942868352, -0.0031337460968643427, -0.00034433635300956666, -0.015661340206861496, -0.013236508704721928, -0.5242920517921448, -0.0038175340741872787, -0.0006023023161105812, -0.00568048981949687, -0.17285872995853424, -1.064507007598877, -0.08204532414674759, -0.019756676629185677, -0.6761994957923889, -0.0001931004080688581, -0.37581074237823486, -0.01357855275273323, -0.003829765599220991, -0.0038892594166100025, -2.7751941680908203, -0.0027380618266761303, -0.056076373904943466, -2.3007127310847864e-05, -6.544376083184034e-05, -0.12095817923545837, -0.1491406261920929, -0.24102246761322021, -3.2268290519714355, -0.007731040008366108, -0.5454760789871216, -1.031110405921936, -0.10457351058721542, -0.09972959011793137, -9.691245941212401e-05, -9.333651541965082e-05, -2.9802276912960224e-06, -0.00035422726068645716, -0.0007630059262737632, -0.007566956337541342, -0.02510572411119938, -0.05215863138437271, -0.0985085591673851, -0.1024380549788475, -0.0044538588263094425, -0.0012055517872795463, -0.00040797016117721796, -0.0026548400055617094, -8.535020606359467e-05, -5.960462772236497e-07, -1.7881233361549675e-05, -0.0006480501033365726, -0.0030437828972935677, -0.33608248829841614, -0.016892241314053535, -0.004007286392152309, -0.6300804018974304, -0.01422679703682661, -0.8489190340042114], "finish_reason": "stop"}], "metrics": {"energy": 108.00214610862731, "energy_per_token": 1.317099342788138, "time": 3.9873862, "time_per_token": 0.048626660975609755}}
{"outputs": [{"text": "dictionary_list = []\n    for file in glob.iglob(os.path.join(directory, '*.txt')):\n        try:\n            file_contents = ast.literal_eval(open(file).read())\n            dictionary_list.append(file_contents)\n        except (ValueError, SyntaxError) as e:\n            raise ValueError(f\"Invalid dictionary representation in text file: {file}\")\n    return dictionary_list", "tokens": ["d", "ictionary", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " glob", ".", "ig", "lob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", ":", "\n", "        ", "try", ":", "\n", "            ", "file", "_", "contents", " =", " ast", ".", "literal", "_", "eval", "(", "open", "(", "file", ")", ".", "read", "())", "\n", "            ", "d", "ictionary", "_", "list", ".", "append", "(", "file", "_", "contents", ")", "\n", "        ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", ")", " as", " e", ":", "\n", "            ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " dictionary", " representation", " in", " text", " file", ":", " {", "file", "}\"", ")", "\n", "    ", "return", " dictionary", "_", "list", "\n", "\n", "#"], "logprobs": [-3.1744580268859863, -0.5233435034751892, -0.06714239716529846, -0.16831330955028534, -0.022017447277903557, -0.03849805146455765, -0.02276279404759407, -0.3434411287307739, -0.6520068049430847, -1.1435493230819702, -0.9151834845542908, -0.10730263590812683, -0.00012659224739763886, -1.996187686920166, -0.0003965306677855551, -0.05421089008450508, -0.625542163848877, -7.033323527139146e-06, -0.00035255891270935535, -0.006586982868611813, -0.0013106813421472907, -0.005263044033199549, -0.019633129239082336, -0.007018199656158686, -0.4067370593547821, -0.664618194103241, -0.19721873104572296, -0.045475609600543976, -0.09049111604690552, -0.00040904260822571814, -0.01652928628027439, -0.020128628239035606, -1.438934326171875, -0.0006430465145967901, -0.003696990432217717, -0.0024272524751722813, -2.9492573738098145, -0.12078545987606049, -2.2239913940429688, -0.006303784437477589, -1.0423022508621216, -9.667406266089529e-05, -0.0003103728231508285, -7.390948667307384e-06, -0.0003741279651876539, -0.005701588466763496, -0.2044001817703247, -0.0006666345288977027, -0.0026544833090156317, -0.8883299827575684, -0.00018356545479036868, -0.000621959799900651, -0.10200625658035278, -0.03067096881568432, -0.3433550298213959, -0.1418401151895523, -0.000288087350782007, -0.011960458010435104, -0.001471271039918065, -0.003002542071044445, -0.0027204668149352074, -0.0025207193102687597, -0.018023639917373657, -4.589452510117553e-05, -7.629103492945433e-05, -0.0015553055563941598, -0.005441140849143267, -0.02303938940167427, -0.004301699809730053, -0.7697805166244507, -0.3347000479698181, -3.981510963058099e-05, -0.062635637819767, -0.16186438500881195, -2.3841830625315197e-06, -7.521823135903105e-05, -2.3982479572296143, -0.002509304089471698, -0.26521357893943787, -0.0006883158930577338, -0.012177172116935253, -0.004039343912154436, -0.71345055103302, -0.03108256682753563, -3.397406908334233e-05, -0.13520626723766327, -0.4061225354671478, -0.2240411341190338, -0.8430771231651306, -0.11337169259786606, -0.3247985541820526, -0.2894371449947357, -1.8791522979736328, -0.004242111928761005, -0.41244858503341675, -0.014093514531850815, -0.054124388843774796, -0.6105721592903137, -0.01506733801215887, -0.017092304304242134, -0.43983614444732666, -0.007224980276077986, -0.0038963842671364546, -7.581423415103927e-05, -9.179073458653875e-06, -0.6985222697257996, -0.008425050415098667, -2.014247417449951], "finish_reason": "stop"}], "metrics": {"energy": 144.43085669326783, "energy_per_token": 1.3373227471598872, "time": 5.2364235, "time_per_token": 0.04848540277777778}}
{"outputs": [{"text": "dct_list = []\n\n    files = glob.glob(os.path.join(directory, \"**\", \"*.txt\"), recursive=True)\n\n    for filename in files:\n        if not os.path.isfile(filename):\n            continue\n        with open(filename, \"r\") as file:\n            file_data = file.read()\n            if \"{\" not in file_data:\n                raise ValueError(\"Invalid dictionary representation in text file\")\n            try:\n                dct_list.append(ast.literal_eval(file_data))\n            except (ValueError, SyntaxError):\n                raise ValueError(\"Invalid dictionary representation in text file\")\n\n    return dct_list", "tokens": ["d", "ct", "_", "list", " =", " []", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " \"", "**", "\"", ",", " \"", "*", ".", "txt", "\"", ")", ",", " recursive", "=", "True", ")", "\n", "\n", "    ", "for", " filename", " in", " files", ":", "\n", "        ", "if", " not", " os", ".", "path", ".", "is", "file", "(", "filename", "):", "\n", "            ", "continue", "\n", "        ", "with", " open", "(", "filename", ",", " \"", "r", "\"", ")", " as", " file", ":", "\n", "            ", "file", "_", "data", " =", " file", ".", "read", "()", "\n", "            ", "if", " \"", "{\"", " not", " in", " file", "_", "data", ":", "\n", "                ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", " in", " text", " file", "\"", ")", "\n", "            ", "try", ":", "\n", "                ", "d", "ct", "_", "list", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "file", "_", "data", "))", "\n", "            ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "                ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", " in", " text", " file", "\"", ")", "\n", "\n", "    ", "return", " d", "ct", "_", "list", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.1744580268859863, -1.558305263519287, -0.7453164458274841, -0.5273264050483704, -0.02272084355354309, -0.054052338004112244, -0.02108457125723362, -1.5018110275268555, -0.000485183292767033, -3.304898262023926, -0.20656903088092804, -0.1439511626958847, -0.0002752163854893297, -0.03130476549267769, -0.01482176873832941, -0.47267600893974304, -5.245195097813848e-06, -0.0005770448478870094, -0.002723557874560356, -0.0025200059171766043, -0.003925357945263386, -0.035011421889066696, -0.003643067553639412, -0.909953773021698, -1.7807072401046753, -1.6228495836257935, -0.054497212171554565, -0.04107644036412239, -0.013106506317853928, -0.08744414895772934, -0.05764731019735336, -0.0015066235791891813, -0.432428240776062, -0.0006092122639529407, -0.014405302703380585, -0.01881338283419609, -0.00613603089004755, -0.0009335688664577901, -0.010862858965992928, -0.8201987147331238, -0.00027855331427417696, -0.13415521383285522, -2.3969500064849854, -0.003246990730985999, -0.0032526941504329443, -0.0004326361231505871, -0.002725816797465086, -0.06628116220235825, -3.0261354446411133, -1.4628995656967163, -0.34423211216926575, -0.0001438752660760656, -0.0023191480431705713, -0.002009041141718626, -0.5317184925079346, -0.111263707280159, -0.0002225389762315899, -0.003560158656910062, -0.03323096036911011, -0.046450767666101456, -0.00108159682713449, -0.1856967657804489, -0.02820083498954773, -0.7678677439689636, -0.4927152395248413, -0.0036776307970285416, -0.0003146630187984556, -0.0027033472433686256, -0.11307501792907715, -1.12923264503479, -0.2828885316848755, -0.022263936698436737, -0.9110159277915955, -0.00019476900342851877, -0.8410236239433289, -0.025104444473981857, -0.0024764842819422483, -0.010364753194153309, -3.7200865745544434, -0.08963242918252945, -2.111408233642578, -0.004123874939978123, -0.0860598236322403, -0.00024125049822032452, -9.572047565598041e-05, -0.12635889649391174, -0.1298183798789978, -0.4445228576660156, -1.889843225479126, -1.8734548091888428, -0.2951504588127136, -0.6059229969978333, -0.00017736769223120064, -0.003003374207764864, -0.0009896624833345413, -8.702239938429557e-06, -0.22760535776615143, -0.08889495581388474, -0.0010492063593119383, -0.3738166391849518, -0.010408759117126465, -8.093983342405409e-05, -0.0825921818614006, -0.9356005787849426, -0.8943489789962769, -0.22622963786125183, -0.4853757619857788, -0.6089749932289124, -0.9288756251335144, -0.01766718551516533, -1.4503635168075562, -0.0648864209651947, -0.007181781344115734, -0.1472538262605667, -1.2566033601760864, -0.00017033556650858372, -0.0027684953529387712, -0.0014412740711122751, -0.27802589535713196, -0.02105690911412239, -0.9520444869995117, -0.04431351274251938, -0.005914448760449886, -0.006273576524108648, -0.0030772972386330366, -0.11960765719413757, -4.577531944960356e-05, -7.438383181579411e-05, -4.410734163684538e-06, -0.0002489972102921456, -0.0007234578370116651, -0.003732383018359542, -0.0012740122620016336, -3.933898824470816e-06, -0.016154820099473, -0.012314831838011742, -0.007514661643654108, -0.0014572249492630363, -1.120111107826233, -0.7521187663078308, -1.1086402082582936e-05, -0.01387968473136425, -0.030408039689064026, -2.9802276912960224e-06, -6.031808152329177e-05, -0.30684199929237366, -0.0071211811155080795, -0.0009656057227402925, -0.19607816636562347, -0.015675656497478485, -5.054346183896996e-05, -0.00460931658744812, -0.10477448999881744, -0.028533628210425377, -0.025563426315784454, -0.015273869968950748, -0.007123429793864489, -0.0016870565013960004, -0.00018785618885885924, -0.01958835870027542, -0.0016989572905004025, -0.004094313830137253, -0.35818028450012207, -0.0030776537023484707, -0.010010160505771637, -0.004314281977713108, -4.410734163684538e-06, -3.2186455882765586e-06, -2.098061486321967e-05, -1.1233241558074951, -3.576278118089249e-07, -8.344646857949556e-07, -5.566918844124302e-05, -0.00018034738604910672, -0.08511105179786682], "finish_reason": "stop"}], "metrics": {"energy": 269.856188577652, "energy_per_token": 1.5420353633008685, "time": 8.574445, "time_per_token": 0.04899682857142858}}
{"outputs": [{"text": "text_files = glob.glob(f\"{directory}/*.txt\")\n    result = []\n    for file in text_files:\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            data = f.read()\n            try:\n                parsed_data = ast.literal_eval(data)\n                result.append(parsed_data)\n            except ValueError as e:\n                print(\"Error in text file\", file, e)\n                raise ValueError(\"The text file has invalid dictionary representation\")\n\n    return result", "tokens": ["text", "_", "files", " =", " glob", ".", "glob", "(", "f", "\"", "{", "directory", "}", "/*", ".", "txt", "\"", ")", "\n", "    ", "result", " =", " []", "\n", "    ", "for", " file", " in", " text", "_", "files", ":", "\n", "        ", "with", " open", "(", "file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " f", ":", "\n", "            ", "data", " =", " f", ".", "read", "()", "\n", "            ", "try", ":", "\n", "                ", "par", "sed", "_", "data", " =", " ast", ".", "literal", "_", "eval", "(", "data", ")", "\n", "                ", "result", ".", "append", "(", "par", "sed", "_", "data", ")", "\n", "            ", "except", " Value", "Error", " as", " e", ":", "\n", "                ", "print", "(", "\"", "Error", " in", " text", " file", "\"", ",", " file", ",", " e", ")", "\n", "                ", "raise", " Value", "Error", "(", "\"", "The", " text", " file", " has", " invalid", " dictionary", " representation", "\"", ")", "\n", "\n", "    ", "return", " result", "\n", "\n", "if"], "logprobs": [-3.8652310371398926, -0.12891800701618195, -0.14290596544742584, -0.032564692199230194, -0.1019495278596878, -0.0003073934931308031, -0.027752917259931564, -0.009873127564787865, -1.8141717910766602, -0.242921382188797, -0.006912839598953724, -0.05479462444782257, -0.16053178906440735, -0.06407981365919113, -0.06047695875167847, -0.023004207760095596, -0.0025919433683156967, -0.02860916405916214, -0.026466013863682747, -0.37270209193229675, -1.8764410018920898, -0.06892674416303635, -0.044875238090753555, -0.002815095242112875, -0.6044189929962158, -0.1228833943605423, -0.627426266670227, -0.3454679548740387, -0.005126545205712318, -1.0728830375228426e-06, -2.861018856492592e-06, -0.00039521988946944475, -0.0029318227898329496, -0.010718277655541897, -0.6156582832336426, -0.00292671169154346, -0.0007830176036804914, -0.00530881667509675, -0.15858082473278046, -1.3260036706924438, -0.10400222986936569, -0.021765880286693573, -0.599108099937439, -0.013921537436544895, -0.3814954459667206, -0.0016527815023437142, -0.08553280681371689, -0.25281357765197754, -0.003980215173214674, -0.011163395829498768, -0.008368072099983692, -0.0030863292049616575, -0.38097289204597473, -0.049555715173482895, -0.005701233167201281, -0.0028663286939263344, -2.3250372409820557, -0.025537513196468353, -0.3254950940608978, -0.0001081169830285944, -8.260862523457035e-05, -0.16670921444892883, -0.11512606590986252, -0.26817336678504944, -1.310889720916748, -0.0005534547381103039, -0.004257424734532833, -0.0016595651395618916, -3.3142998218536377, -0.004575616680085659, -0.4522683322429657, -0.39410173892974854, -0.0032083725091069937, -0.04376070946455002, -6.818538531661034e-05, -7.652943895664066e-05, -3.6954811548639555e-06, -0.000321336614433676, -0.0003238391946069896, -0.005391580518335104, -0.024973999708890915, -0.025424208492040634, -0.3697393536567688, -0.1388350874185562, -0.004840085748583078, -0.004215284250676632, -0.001116010476835072, -0.0045236400328576565, -0.00021741411183029413, -1.5497195136049413e-06, -9.619726915843785e-05, -0.0011154150124639273, -0.0016941969515755773, -0.00959251169115305, -0.0021083762403577566, -1.20152747631073, -0.00011717586312443018, -1.2728674411773682, -0.21080173552036285, -0.0007967158453539014, -0.007941693998873234, -0.00096703483723104, -0.8925349712371826, -0.019646456465125084, -2.031219244003296, -1.2672228813171387, -1.9217535257339478, -2.780974864959717, -0.06601136177778244, -2.124880313873291, -0.12101531773805618, -0.18527144193649292, -0.41884645819664, -0.8858261704444885, -0.07457194477319717, -0.010246176272630692, -0.4881823658943176, -0.6591569185256958, -0.618724524974823, -3.802703940891661e-05, -0.40599480271339417, -0.2851598858833313, -3.4378139972686768, -0.3561849296092987, -0.1067299097776413, -0.7164580821990967, -0.20115678012371063, -0.10707356035709381, -0.15522029995918274, -0.24856162071228027, -0.02158086746931076, -0.019903114065527916, -1.3939824104309082, -0.01295118685811758, -0.03348911553621292, -0.0027064383029937744, -0.2282981127500534, -0.005890036001801491, -0.8105676770210266], "finish_reason": "stop"}], "metrics": {"energy": 206.45760205078125, "energy_per_token": 1.4853064895739658, "time": 7.0913215, "time_per_token": 0.05101670143884892}}
{"outputs": [{"text": "dictionaries = []\n\n    # Iterate through all text files in the specified directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".txt\"):\n            # Read the contents of the file\n            with open(os.path.join(directory, filename), 'r') as file:\n                content = file.read()\n                # Convert the Unicode string representation of a dictionary to a Python dictionary\n                dictionaries.append(ast.literal_eval(content))\n\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "directory", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "            ", "#", " Read", " the", " contents", " of", " the", " file", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " filename", ")", ",", " '", "r", "')", " as", " file", ":", "\n", "                ", "content", " =", " file", ".", "read", "()", "\n", "                ", "#", " Convert", " the", " Un", "icode", " string", " representation", " of", " a", " dictionary", " to", " a", " Python", " dictionary", "\n", "                ", "diction", "aries", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "content", "))", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "def"], "logprobs": [-3.8750863075256348, -0.0051255966536700726, -0.06858330965042114, -0.03556286543607712, -0.01673387549817562, -1.0590134859085083, -0.000619696278590709, -1.2174224853515625, -2.0471689701080322, -0.043313320726156235, -0.9275416731834412, -0.4800262749195099, -0.47288385033607483, -0.013189215213060379, -0.10655450820922852, -0.03658497333526611, -0.5420784950256348, -0.0016412371769547462, -0.06351020187139511, -0.0010744519531726837, -0.03781680390238762, -0.5339053869247437, -0.0008269704412668943, -2.3553173542022705, -1.4543427823809907e-05, -0.0012375799706205726, -2.264974000354414e-06, -0.0014028241857886314, -0.011822514235973358, -0.000362807244528085, -0.000957030919380486, -0.01916954666376114, -0.8159732222557068, -0.21495698392391205, -0.0010300336871296167, -0.00334097514860332, -6.925819616299123e-05, 0.0, -0.7200717926025391, -0.0011431594612076879, -0.004435582086443901, -0.023008868098258972, -8.511180931236595e-05, -0.041714198887348175, -0.01580098457634449, -0.01859857141971588, -1.6323139667510986, -1.1470071077346802, -0.1498853862285614, -1.525111198425293, -0.008482025936245918, -0.049740616232156754, -1.8017027378082275, -1.3242383003234863, -0.0008505540899932384, -0.19033809006214142, -0.00012015574611723423, -0.0003985564399044961, -0.09966441988945007, -0.0011074369540438056, -7.033323527139146e-06, -0.0041357469744980335, -1.764281842042692e-05, -2.47952248173533e-05, -0.000770510348957032, -0.00012575789878610522, -0.0028564624954015017, -0.1312045454978943, -2.777537883957848e-05, -0.961570680141449, -0.030266951769590378, -0.9651555418968201, -0.0005913416389375925, -0.3636573553085327, -0.003660883754491806, -0.00030357998912222683, -0.003046635305508971, -1.9378947019577026, -0.002757439622655511, -0.023554859682917595, -8.583032467868179e-06, -1.645074735279195e-05, -0.015281030908226967, -0.04091670736670494, -1.7792975902557373, -0.9026771187782288, -1.7044576406478882, -0.1304769068956375, -2.6442108154296875, -0.00040820849244482815, -0.04129757359623909, -0.16805849969387054, -0.1834448128938675, -1.401792287826538, -0.04074893891811371, -0.26356375217437744, -0.08299063891172409, -0.5621703863143921, -0.013481996953487396, -0.09559604525566101, -0.005579138174653053, -0.9100982546806335, -0.0012859179405495524, -0.0026793316937983036, -0.0024969372898340225, -0.0027255788445472717, -0.06856449693441391, -2.7417760065873154e-05, -8.95221673999913e-05, -3.576272320060525e-06, -0.0012275787303224206, -0.0008385241380892694, -0.0019345632754266262, -0.016699878498911858, -0.012276090681552887, -0.1431707739830017, -0.0074280500411987305, -0.13958878815174103, -0.0025361774023622274, -2.0146166207268834e-05, -0.08366834372282028, -0.007199534680694342, -0.6187036037445068], "finish_reason": "stop"}], "metrics": {"energy": 165.94567369270322, "energy_per_token": 1.3491518186398637, "time": 5.858631, "time_per_token": 0.04763114634146341}}
{"outputs": [{"text": "data = []\n    files = glob.glob(directory+'/*.txt')\n    for file in files:\n        with open(file,'r',encoding='utf-8') as file:\n            try:\n                text = file.read()\n                d = ast.literal_eval(text)\n                data.append(d)\n            except SyntaxError:\n                raise ValueError(f\"{file} is invalid dictionary\")\n\n    return data", "tokens": ["data", " =", " []", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "directory", "+'", "/*", ".", "txt", "')", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "with", " open", "(", "file", ",", "'", "r", "'", ",", "encoding", "='", "utf", "-", "8", "')", " as", " file", ":", "\n", "            ", "try", ":", "\n", "                ", "text", " =", " file", ".", "read", "()", "\n", "                ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "text", ")", "\n", "                ", "data", ".", "append", "(", "d", ")", "\n", "            ", "except", " Sy", "ntax", "Error", ":", "\n", "                ", "raise", " Value", "Error", "(", "f", "\"", "{", "file", "}", " is", " invalid", " dictionary", "\"", ")", "\n", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-3.8776211738586426, -0.2656842768192291, -0.06092660874128342, -0.013208627700805664, -0.3054627776145935, -2.5595221519470215, -0.058036480098962784, -0.09248029440641403, -0.00019262365822214633, -0.03195028379559517, -0.008488171733915806, -1.388488531112671, -3.070066452026367, -0.2604917287826538, -0.1958818882703781, -0.027933893725275993, -0.031419601291418076, -0.02586817368865013, -0.1921708732843399, -0.1705782562494278, -0.42035070061683655, -0.2102918177843094, -0.0029937471263110638, -0.0025079960469156504, -0.0033014100044965744, -0.018966156989336014, -0.6922074556350708, -0.005999650806188583, -0.007204386871308088, -0.005276799667626619, -0.30394047498703003, -2.6686854362487793, -0.1110166609287262, -0.5322564244270325, -0.004692850634455681, -0.21912232041358948, -0.14944803714752197, -0.11477550119161606, -0.2083641141653061, -0.008998436853289604, -0.03512778878211975, -0.008585447445511818, -1.6461477279663086, -0.3539108335971832, -0.010658598504960537, -0.01492958702147007, -1.954269528388977, -0.005583050195127726, -0.00692195538431406, -0.004328050650656223, -3.5585644245147705, -0.13183990120887756, -0.11745470762252808, -0.0004010588163509965, -0.0011934071080759168, -0.09912455081939697, -0.08484355360269547, -0.05321275442838669, -2.7245054244995117, -0.9835485816001892, -0.16170842945575714, -0.00014411364099942148, -6.41325386823155e-05, -1.5735502529423684e-05, -0.00031931069679558277, -0.0023606547620147467, -0.004532065242528915, -0.015139317139983177, -0.03908506780862808, -0.25362229347229004, -0.08299239724874496, -0.005838601849973202, -0.0024551982060074806, -0.0019264726433902979, -0.00696208793669939, -0.001091599464416504, -0.0017628619680181146, -0.027912911027669907, -0.0015716117341071367, -2.130929470062256, -1.2755313036905136e-05, -0.00013791563105769455, -0.14247992634773254, -0.060966651886701584, -0.0025829069782048464, -0.2984256148338318, -0.12535087764263153, -0.00022504181833937764, -0.5335309505462646, -0.6953127980232239, -0.4111294448375702, -1.7890037298202515, -0.08655070513486862, -0.16533121466636658, -1.5722692012786865, -0.7555556893348694, -1.4588056802749634, -1.1904160976409912, -0.011375096626579762, -0.010018539614975452, -1.6662862300872803, -0.024619432166218758, -0.02067093923687935, -0.010367113165557384, -0.2712472081184387, -0.006800956558436155, -1.0975857973098755], "finish_reason": "stop"}], "metrics": {"energy": 152.4920631504059, "energy_per_token": 1.4251594686953821, "time": 5.0228467, "time_per_token": 0.046942492523364486}}
{"outputs": [{"text": "dictionaries = []\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".txt\"):\n                file_path = os.path.join(root, file)\n                with open(file_path, \"r\") as f:\n                    # convert the text file to a string\n                    content = f.read()\n                    try:\n                        # parse the string as a dictionary and convert it to a Python dictionary\n                        d = ast.literal_eval(content)\n                        dictionaries.append(d)\n                    except:\n                        print(f\"Error reading {file_path}. Skipping...\")\n\n    return dictionaries", "tokens": ["diction", "aries", " =", " []", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "directory", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "txt", "\"", "):", "\n", "                ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "                ", "with", " open", "(", "file", "_", "path", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "    ", "#", " convert", " the", " text", " file", " to", " a", " string", "\n", "                ", "    ", "content", " =", " f", ".", "read", "()", "\n", "                ", "    ", "try", ":", "\n", "                ", "        ", "#", " parse", " the", " string", " as", " a", " dictionary", " and", " convert", " it", " to", " a", " Python", " dictionary", "\n", "                ", "        ", "d", " =", " ast", ".", "literal", "_", "eval", "(", "content", ")", "\n", "                ", "        ", "diction", "aries", ".", "append", "(", "d", ")", "\n", "                ", "    ", "except", ":", "\n", "                ", "        ", "print", "(", "f", "\"", "Error", " reading", " {", "file", "_", "path", "}", ".", " Sk", "ipping", ".", ".", ".", "\"", ")", "\n", "\n", "    ", "return", " diction", "aries", "\n", "\n", "def"], "logprobs": [-3.8750863075256348, -0.0051255966536700726, -0.06858330965042114, -0.03556286543607712, -0.01673387549817562, -1.0590134859085083, -0.000619696278590709, -0.595558226108551, -3.340762138366699, -0.0020967184100300074, -0.9285935163497925, -0.0011981697753071785, -0.00024244230007752776, -0.026065286248922348, -0.0007843278581276536, -0.009865927509963512, -4.0531076592742465e-06, -0.0002203936892328784, -0.002414646791294217, -0.029928022995591164, -0.09468285739421844, -0.023596659302711487, -0.011020153760910034, -0.12767431139945984, -0.36609959602355957, -0.17094506323337555, -0.2299613505601883, -0.0001538873475510627, -0.0020919598173350096, -0.013746825978159904, -1.307868242263794, -0.17003010213375092, -0.012581853196024895, -0.012170459143817425, -8.535020606359467e-05, -1.1920928244535389e-07, -0.7945530414581299, -0.0039029151666909456, -0.006717480253428221, -0.04801393672823906, -0.00011491115583339706, -0.03627278283238411, -0.016760721802711487, -0.009143976494669914, -1.5696475505828857, -0.20238767564296722, -0.032831668853759766, -0.0006681832019239664, -0.006895791739225388, -1.549708758830093e-05, -9.894321920000948e-06, -0.004800105467438698, -0.0005254556890577078, -8.070142939686775e-05, -0.020624931901693344, -0.0003491030656732619, -0.0009298768127337098, -0.00021586472576018423, -0.003942575305700302, -0.09335705637931824, -0.3125498294830322, -0.001859127776697278, -0.00010597144137136638, -0.0006985607906244695, -0.00033861625706776977, -2.145764938177308e-06, -0.0977715477347374, -0.9579338431358337, -0.07264933735132217, -0.0301754642277956, -0.8725448250770569, -9.595887240720913e-05, -0.813662052154541, -0.02515629306435585, -0.0014561536954715848, -0.004859541542828083, -0.000979420612566173, -3.414134979248047, -4.4697771072387695, -1.6610939502716064, -1.0657787322998047, -0.36358022689819336, -0.48473143577575684, -0.3152259886264801, -1.4746432304382324, -0.5084831714630127, -0.001608269871212542, -0.00018535325943958014, -2.1096136569976807, -0.007046017330139875, -0.08480960130691528, -7.343022298300639e-05, -4.95898348162882e-05, -0.006201548036187887, -0.06472340226173401, -0.4037110209465027, -0.009839486330747604, -1.873767614364624, -0.0005881248507648706, -0.00707324268296361, -0.0024531767703592777, -0.0017791647696867585, -0.4667438566684723, -2.200564384460449, -0.05516696721315384, -0.6238691210746765, -0.9405804872512817, -0.34146633744239807, -0.2788381278514862, -2.8387696743011475, -3.015167236328125, -0.38715144991874695, -0.07864514738321304, -0.2883487641811371, -0.6902683973312378, -0.1785227358341217, -0.06716781109571457, -0.0010975534096360207, -0.0002090712368953973, -1.1467031240463257, -0.5519163012504578, -0.07962846755981445, -7.128461584215984e-05, -8.391981828026474e-05, -8.344646857949556e-07, -0.0002205128694185987, -0.0022163845133036375, -0.006262796465307474, -0.03406951203942299, -0.010922878980636597, -0.01429437194019556, -0.1462399810552597, -0.1308477520942688, -6.854299135738984e-05, -0.0003293210465926677, -0.0004430027911439538, -0.0020858929492533207, -0.03100525215268135, -0.0037108862306922674, -0.002079587895423174, -0.017104491591453552, -0.008426587097346783, -0.0056471810676157475, -2.1755106449127197, -0.009646350517868996, -0.0010094314347952604, -0.0014636528212577105, -2.8294224739074707, -0.04830237850546837, -0.2735964357852936, -0.053415171802043915, -1.289770483970642, -2.539132595062256, -1.1519522666931152, -0.010091356001794338, -0.15862862765789032, -0.00011955977242905647, -1.0909969806671143, -0.30601173639297485, -2.1053102016448975, -0.06855203211307526, -0.2636246681213379, -0.3038456439971924, -0.039129432290792465, -0.01053002942353487, -0.0017489389283582568, -0.005884584505110979, -0.4373132288455963, -0.01182357408106327, -0.02503957413136959, -0.00280962698161602, -1.3828182090946939e-05, -0.16774143278598785, -0.005464260466396809, -0.7258588671684265], "finish_reason": "stop"}], "metrics": {"energy": 242.37683898162837, "energy_per_token": 1.385010508466448, "time": 8.571984, "time_per_token": 0.04898276571428572}}
{"outputs": [{"text": "# Initializing the list to store dictionaries\n    file_dictionary_list = []\n\n    # Iterating through all the text files in the specified directory\n    for file_name in glob.iglob(directory + '**/*.txt', recursive=True):\n        with open(file_name, \"r\", encoding=\"utf-8\") as file:\n            # Extracting the string from each line\n            for line in file.readlines():\n                try:\n                    file_dictionary_list.append(ast.literal_eval(line))\n                # Raising error if dictionary is not properly formed\n                except (ValueError, SyntaxError):\n                    raise ValueError(\"{} is invalid dictionary\".format(file_name))\n\n    return file_dictionary_list", "tokens": ["#", " Initial", "izing", " the", " list", " to", " store", " diction", "aries", "\n", "    ", "file", "_", "d", "ictionary", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Iter", "ating", " through", " all", " the", " text", " files", " in", " the", " specified", " directory", "\n", "    ", "for", " file", "_", "name", " in", " glob", ".", "ig", "lob", "(", "directory", " +", " '", "**", "/*", ".", "txt", "'", ",", " recursive", "=", "True", "):", "\n", "        ", "with", " open", "(", "file", "_", "name", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "utf", "-", "8", "\"", ")", " as", " file", ":", "\n", "            ", "#", " Ext", "racting", " the", " string", " from", " each", " line", "\n", "            ", "for", " line", " in", " file", ".", "read", "lines", "():", "\n", "                ", "try", ":", "\n", "                ", "    ", "file", "_", "d", "ictionary", "_", "list", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "line", "))", "\n", "                ", "#", " Ra", "ising", " error", " if", " dictionary", " is", " not", " properly", " formed", "\n", "                ", "except", " (", "Value", "Error", ",", " Sy", "ntax", "Error", "):", "\n", "                ", "    ", "raise", " Value", "Error", "(", "\"", "{}", " is", " invalid", " dictionary", "\"", ".", "format", "(", "file", "_", "name", "))", "\n", "\n", "    ", "return", " file", "_", "d", "ictionary", "_", "list", "\n", "\n", "def"], "logprobs": [-1.560671329498291, -4.911061763763428, -1.1013463735580444, -1.4873286485671997, -0.5972331166267395, -0.7001793384552002, -0.27642822265625, -0.8757147192955017, -0.001706811715848744, -0.24056531488895416, -0.0025185791309922934, -4.309926986694336, -0.01645447500050068, -2.5628347396850586, -0.37301236391067505, -0.625644326210022, -0.1488913595676422, -0.01598566211760044, -0.07338060438632965, -0.0011810240102931857, -0.210592582821846, -0.00043871314846910536, -0.14731420576572418, -1.99932861328125, -0.2990373373031616, -0.6528694033622742, -0.617222785949707, -1.1498818397521973, -0.913975179195404, -0.062486592680215836, -0.3064647614955902, -0.023472420871257782, -0.6735130548477173, -0.006116718519479036, -0.06784439831972122, -0.0013784202747046947, -0.033301301300525665, -0.6520228385925293, -0.5995532870292664, -0.34897658228874207, -0.004265852738171816, -0.2653636932373047, -6.735097849741578e-05, -2.24601149559021, -0.001209123758599162, -0.04709523171186447, -1.1309356689453125, -0.12455003708600998, -0.5131034255027771, -1.9381988048553467, -0.08784515410661697, -0.059673525393009186, -0.01782938465476036, -0.007398113142699003, -0.0006939148879610002, -0.005521522834897041, -0.015602776780724525, -0.001506028464064002, -0.0014294892316684127, -0.005472796503454447, -0.1766291707754135, -1.771242380142212, -0.00676448829472065, -0.0007801587926223874, -0.008180327713489532, -3.099436753473128e-06, -8.844937838148326e-05, -0.0867757797241211, -2.852630138397217, -0.18124982714653015, -0.052259329706430435, -0.945462167263031, -0.026980997994542122, -0.5139402151107788, -0.0028468340169638395, -0.1161932721734047, -0.3241250813007355, -0.009076643735170364, -0.01565723307430744, -0.015078023076057434, -0.00038580605178140104, -0.28277018666267395, -0.05227833613753319, -0.012716279365122318, -0.0919879600405693, -0.9192116856575012, -1.9866290092468262, -0.1192893385887146, -0.6116446256637573, -3.0808534622192383, -3.16884708404541, -2.396949052810669, -1.2425440549850464, -1.2928130626678467, -0.003507772693410516, -1.6231510639190674, -0.12350236624479294, -0.012261606752872467, -0.005880199838429689, -1.892638921737671, -0.000164018536452204, -0.04175490140914917, -0.003629170823842287, -0.0015563768101856112, -0.018571307882666588, -1.6457412242889404, -0.0008021951070986688, -0.007436806336045265, -0.0019443194614723325, -0.0007834940915927291, -1.402273178100586, -0.0011638780124485493, -0.035344142466783524, -0.0004543225804809481, -0.06830500066280365, -0.0021333571057766676, -0.012514045462012291, -0.01364593580365181, -0.0027419847901910543, -0.11884867399930954, -6.913899414939806e-05, -7.462222856702283e-05, -8.940656698541716e-06, -0.00031251792097464204, -0.0010349161457270384, -0.005037117283791304, -0.1356184482574463, -0.030542057007551193, -0.028364580124616623, -2.881960391998291, -0.6514841914176941, -0.375802218914032, -3.5596091747283936, -0.25492343306541443, -3.4500107765197754, -0.7745742797851562, -0.6162413358688354, -2.5576300621032715, -1.576482892036438, -0.1116083636879921, -0.0008993871742859483, -0.015070156194269657, -0.6609258055686951, -0.41055548191070557, -1.4543427823809907e-05, -0.052288178354501724, -0.04295240715146065, -1.9073468138230965e-06, -4.2914423829643056e-05, -0.2568746507167816, -0.0019971441943198442, -0.0012817509705200791, -0.0014547251630574465, -0.1609697788953781, -0.04075603559613228, -3.313963316031732e-05, -0.13737541437149048, -0.7623550891876221, -3.1112473011016846, -0.6415759325027466, -1.8826632499694824, -0.7189891934394836, -0.9875684380531311, -0.01717667654156685, -0.0039240517653524876, -0.0010584949050098658, -0.11817174404859543, -0.054707497358322144, -0.0002817710628733039, -0.009564291685819626, -0.03477772697806358, -0.3168312609195709, -0.01098725851625204, -0.16393332183361053, -0.005747814662754536, -5.245195097813848e-06, -4.649054244509898e-05, -4.4225667807040736e-05, -5.722029527532868e-06, -6.556489552167477e-06, -0.2819080054759979, -0.0084232771769166, -1.0285874605178833], "finish_reason": "stop"}], "metrics": {"energy": 252.31639465332037, "energy_per_token": 1.378778112859674, "time": 8.78613, "time_per_token": 0.048011639344262294}}
{"outputs": [{"text": "dcts = []\n\n    files = glob.glob(os.path.join(directory, '*.txt'))\n    for file_name in files:\n        try:\n            with open(file_name) as f:\n                dcts.append(ast.literal_eval(f.read()))\n        except ValueError:\n            raise ValueError(\"Invalid dictionary representation: {}\".format(file_name))\n\n    return dcts", "tokens": ["d", "ct", "s", " =", " []", "\n", "\n", "    ", "files", " =", " glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", " '", "*", ".", "txt", "'))", "\n", "    ", "for", " file", "_", "name", " in", " files", ":", "\n", "        ", "try", ":", "\n", "            ", "with", " open", "(", "file", "_", "name", ")", " as", " f", ":", "\n", "                ", "d", "ct", "s", ".", "append", "(", "ast", ".", "literal", "_", "eval", "(", "f", ".", "read", "()))", "\n", "        ", "except", " Value", "Error", ":", "\n", "            ", "raise", " Value", "Error", "(", "\"", "Invalid", " dictionary", " representation", ":", " {", "}\"", ".", "format", "(", "file", "_", "name", "))", "\n", "\n", "    ", "return", " d", "ct", "s", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.1744580268859863, -1.558305263519287, -0.9148454070091248, -0.07146058976650238, -0.06909408420324326, -0.022689497098326683, -1.2886725664138794, -0.0004450284468475729, -3.163559913635254, -0.12832880020141602, -0.1097818911075592, -0.00025650550378486514, -0.029494190588593483, -0.015780800953507423, -0.419734925031662, -4.529942543740617e-06, -0.0005880056996829808, -0.0031055815052241087, -0.0027528032660484314, -0.004065107554197311, -0.03497527539730072, -0.002624878427013755, -0.518261730670929, -0.18879492580890656, -0.1763811707496643, -0.029891232028603554, -0.0041077290661633015, -0.011814150027930737, -0.531253457069397, -0.16686831414699554, -0.5680286288261414, -1.87317955493927, -0.5348379611968994, -0.0023529245518147945, -0.004126843065023422, -0.0007570500019937754, -0.002109446795657277, -0.037291981279850006, -1.6077603101730347, -0.0008441222598776221, -0.0024829055182635784, -0.0035596834495663643, -0.4057794511318207, -0.004637913778424263, -0.0003777029050979763, -0.004465489182621241, -9.476689592702314e-05, -6.258291978156194e-05, -1.8913843631744385, -0.00019727191829588264, -0.5647163391113281, -0.08794145286083221, -0.004935581702739, -0.004891334567219019, -1.492983341217041, -0.07138355821371078, -0.46973517537117004, -0.014971630647778511, -0.025602120906114578, -0.014790407381951809, -0.12330068647861481, -9.369411418447271e-05, -0.0001003691868390888, -1.811964830267243e-05, -0.0003323002893012017, -0.002847903873771429, -0.005856378935277462, -0.0001515035255579278, -0.0002643712505232543, -0.10078693181276321, -0.024886561557650566, -0.0381297767162323, -0.003404418472200632, -1.2018874883651733, -0.00010132275929208845, -0.3068382143974304, -0.03807102143764496, -0.004015241749584675, -0.36931681632995605, -0.03213788941502571, -0.0001250427303602919, -0.15823601186275482, -1.4244728088378906, -0.9744579792022705, -0.16988757252693176, -0.37481582164764404, -2.6006438732147217, -0.5813716650009155, -0.07235164195299149, -0.002778600202873349, -0.0027041793800890446, -0.0005725175142288208, -0.028545793145895004, -0.0011343479854986072, -0.0003692421887535602, -0.0021036178804934025, -0.009077588096261024, -0.18309040367603302, -0.003462512046098709, -0.009867343120276928, -0.0030258367769420147, -0.00011550712952157483, -1.4305104514278355e-06, -1.1836427450180054, -4.768370445162873e-07, -1.0728830375228426e-06, -8.570780482841656e-05, -0.0001774868869688362, -0.08058872073888779], "finish_reason": "stop"}], "metrics": {"energy": 149.47935051536558, "energy_per_token": 1.3713701882143632, "time": 5.245078, "time_per_token": 0.04811998165137615}}
