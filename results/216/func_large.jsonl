{"outputs": [{"text": "json_file_list = []\n\n    # Get all file names from directory\n    for root, dirs, files in os.walk(json_dir_path):\n        for filename in files:\n            if \".json\" in filename:\n                json_file_list.append(os.path.join(root, filename))\n\n    df_list = []\n    for json_file in json_file_list:\n        with open(json_file) as f:\n            data = json.load(f)\n        df_list.append(data['text'])\n    df = pd.DataFrame(df_list)\n    text_column = df[0]\n    text_column = text_column.astype(str)\n    text_column = text_column.str.replace(r'\\W+', ' ')\n    text_column = text_column.str.replace(r'\\d+', '')\n    text_column = text_column.str.split()\n    text_column = text_column.explode()\n    text_column = text_column.apply(lambda x: x.strip())\n", "tokens": ["json", "_", "file", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Get", " all", " file", " names", " from", " directory", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "for", " filename", " in", " files", ":", "\n", "            ", "if", " \"", ".", "json", "\"", " in", " filename", ":", "\n", "                ", "json", "_", "file", "_", "list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", " filename", "))", "\n", "\n", "    ", "df", "_", "list", " =", " []", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "file", "_", "list", ":", "\n", "        ", "with", " open", "(", "json", "_", "file", ")", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "df", "_", "list", ".", "append", "(", "data", "['", "text", "'])", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "df", "_", "list", ")", "\n", "    ", "text", "_", "column", " =", " df", "[", "0", "]", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "ast", "ype", "(", "str", ")", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "str", ".", "replace", "(", "r", "'\\", "W", "+'", ",", " '", " '", ")", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "str", ".", "replace", "(", "r", "'\\", "d", "+'", ",", " '", "')", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "str", ".", "split", "()", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "expl", "ode", "()", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "apply", "(", "lambda", " x", ":", " x", ".", "strip", "())", "\n"], "logprobs": [-2.829545497894287, -0.035075075924396515, -1.2443923950195312, -0.08075686544179916, -1.616876482963562, -0.006297624669969082, -1.6616488695144653, -0.028860287740826607, -2.2575795650482178, -0.0008878341759555042, -1.3948991298675537, -2.084073781967163, -0.9222524762153625, -3.3970870971679688, -0.7329277396202087, -0.6419723629951477, -2.668269395828247, -0.10711169242858887, -0.0016815820708870888, -0.08429025113582611, -1.832680344581604, -0.008872490376234055, -0.13217994570732117, -0.008855239488184452, -0.0004259632551111281, -0.04991130530834198, -0.0006276782951317728, -0.0008986725588329136, -7.152555099310121e-07, -4.291525328881107e-06, -0.00027640812913887203, -0.005499590653926134, -9.894321920000948e-06, -5.9126061387360096e-05, -9.858122211880982e-05, -5.960462772236497e-07, -0.07072646915912628, -0.004038750194013119, -0.008025778457522392, -0.02283620275557041, -2.1763501167297363, -0.0013778250431641936, -0.00041654970846138895, -0.0007624103454872966, -0.004485426936298609, -0.003718368476256728, -1.6856505870819092, -2.863819122314453, -0.2501428723335266, -0.04869849234819412, -0.00027843413408845663, -0.10253704339265823, -0.012058692052960396, -0.061182644218206406, -0.03938549384474754, -0.002544144168496132, -0.13615280389785767, -0.00067473528906703, -0.009683776646852493, -0.011715891771018505, -0.02211504802107811, -0.00781265739351511, -0.00042906138696707785, -0.00417088670656085, -0.602039635181427, -1.2874520507466514e-05, -0.0018410414922982454, -7.152555099310121e-07, -0.024777136743068695, -0.00010823617776622996, -0.030218258500099182, -0.000196556793525815, -0.025698209181427956, -0.0009650102583691478, -0.0023372257128357887, -0.06458942592144012, -0.005021934863179922, -3.0164949893951416, -1.905509352684021, -0.6231849789619446, -0.016350222751498222, -0.07568925619125366, -0.02460908144712448, -0.6505123972892761, -0.46496352553367615, -0.627982497215271, -0.01454817783087492, -0.20225894451141357, -0.3590136468410492, -0.0020719743333756924, -2.0265558760002023e-06, -2.264974000354414e-06, -8.344646857949556e-07, -2.3841855067985307e-07, -0.0023344901856034994, -0.011715774424374104, -0.048253078013658524, -0.5851876735687256, -0.002184625482186675, -0.0018087946809828281, -0.004762852564454079, -4.3748852476710454e-05, -3.194758028257638e-05, -0.9010446667671204, -0.0002857038634829223, -0.23203080892562866, -0.039521750062704086, -0.010182339698076248, -0.005967774894088507, -0.9112740755081177, -0.06999769806861877, -0.00644817715510726, -4.446407547220588e-05, -0.019404230639338493, -3.802703940891661e-05, -0.0002711643755901605, -0.0061093722470104694, -0.012862102128565311, -1.6546216011047363, -0.2942512035369873, -0.9300596714019775, -0.10299000889062881, -0.0036137294955551624, -0.00036149643710814416, -0.01198896300047636, -1.181931972503662, -2.114109992980957, -0.0036916458047926426, -0.03050968237221241, -0.01168761495500803, -2.1475985050201416, -0.35883763432502747, -0.047503307461738586, -0.0027366350404918194, -6.9141146923357155e-06, -0.25572842359542847, -0.38936105370521545, -0.1983032524585724, -0.0001161031104857102, -7.510157047363464e-06, -1.9135994911193848, -0.027039825916290283, -0.959571123123169, -1.7592723369598389, -0.8648157715797424, -3.350235939025879, -0.08965346217155457, -0.17485983669757843, -0.30739346146583557, -0.5263426303863525, -0.000341476290486753, -0.05552823841571808, -0.44989144802093506, -1.0411301851272583, -0.06605689227581024, -0.40213075280189514, -0.5609544515609741, -0.06745312362909317, -3.2186455882765586e-06, -3.576272320060525e-06, -0.006983041297644377, -2.0660107135772705, 0.0, -0.1842605471611023, -0.013158862479031086, -0.0008173224050551653, -0.11586686223745346, -0.2534199655056, -0.743026614189148, -0.06650024652481079, -0.21122010052204132, -0.12024039030075073, -0.027570517733693123, -9.536738616588991e-07, -1.9311717551317997e-05, -0.013902610167860985, -0.04199943318963051, -0.0001456631434848532, -1.5220837593078613, -0.22061780095100403, -0.20936758816242218, -1.7796118259429932, -0.2368742674589157, -0.09571900218725204, -0.0007074952009133995, -0.11254926770925522, -0.0017766657983884215, -1.2583703994750977, -0.2105468064546585, -0.11000308394432068, -0.22681540250778198, -0.018020479008555412, -0.04322301596403122, -0.023796897381544113, -0.007178348954766989, -5.960462772236497e-07, -5.960462772236497e-07, -0.0008648469229228795, -0.01563047431409359, -6.294052582234144e-05, -1.510044813156128, -0.13641826808452606, -0.020350003615021706, -0.13519148528575897, -0.14722295105457306, -0.065890833735466, -5.4596363042946905e-05, -0.00829087384045124, -0.07869164645671844, -0.017721880227327347, -0.045874327421188354, -0.11723855137825012, -0.008836215361952782, -0.024386553093791008, -0.009998711757361889, -0.004586059134453535, -1.4305104514278355e-06, -2.038458114839159e-05, -0.00067473528906703, -0.04132925719022751, -5.9126061387360096e-05, -0.8462316393852234, -0.07235641032457352, -0.04981808364391327, -0.08535539358854294, -0.6285515427589417, -0.00505455257371068, -0.02434583380818367, -0.011156558059155941, -0.0588437058031559, -1.6689286894688848e-06, -5.924526340095326e-05, -0.00028427375946193933, -0.08089222013950348, -2.50339189733495e-06, -0.027432043105363846, -0.07186084240674973, -0.12448257207870483, -0.4044085144996643, -0.0008456706418655813, -0.010465267114341259, -0.01702597178518772, -0.00346666993573308, -5.960462772236497e-07, -1.1920922133867862e-06, -0.016198337078094482, -2.897632122039795, -0.0009684640099294484, -0.10753186792135239, -0.007943586446344852, -0.008930975571274757, -0.03182419389486313, -0.014084229245781898, -0.6589934229850769, -0.1416412740945816, -0.0070878020487725735], "finish_reason": "length"}], "metrics": {"energy": 1074.3699946994775, "energy_per_token": 4.196757791794834, "time": 28.419115, "time_per_token": 0.11101216796875}}
{"outputs": [{"text": "json_dir = os.fsencode(json_dir_path)\n\n    counter_obj = Counter()\n    for json_file in os.listdir(json_dir):\n        path = os.path.join(json_dir, json_file)\n        if os.path.isfile(path):\n            with open(path, \"rb\") as json_file_obj:\n                json_data = json.load(json_file_obj)\n                text_list = json_data.get(\"text\").split()\n                for word in text_list:\n                    counter_obj.update([word])\n\n    # Use the most common method to get the top n frequent words and their counts\n    most_common = counter_obj.most_common(word_count)\n\n    return most_common", "tokens": ["json", "_", "dir", " =", " os", ".", "fs", "encode", "(", "json", "_", "dir", "_", "path", ")", "\n", "\n", "    ", "counter", "_", "obj", " =", " Counter", "()", "\n", "    ", "for", " json", "_", "file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "):", "\n", "        ", "path", " =", " os", ".", "path", ".", "join", "(", "json", "_", "dir", ",", " json", "_", "file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "path", "):", "\n", "            ", "with", " open", "(", "path", ",", " \"", "rb", "\"", ")", " as", " json", "_", "file", "_", "obj", ":", "\n", "                ", "json", "_", "data", " =", " json", ".", "load", "(", "json", "_", "file", "_", "obj", ")", "\n", "                ", "text", "_", "list", " =", " json", "_", "data", ".", "get", "(", "\"", "text", "\"", ")", ".", "split", "()", "\n", "                ", "for", " word", " in", " text", "_", "list", ":", "\n", "                ", "    ", "counter", "_", "obj", ".", "update", "([", "word", "])", "\n", "\n", "    ", "#", " Use", " the", " most", " common", " method", " to", " get", " the", " top", " n", " frequent", " words", " and", " their", " counts", "\n", "    ", "most", "_", "common", " =", " counter", "_", "obj", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "\n", "\n", "def"], "logprobs": [-2.843881845474243, -0.03998080641031265, -3.6064555644989014, -1.2687491178512573, -0.9827176332473755, -7.10462118149735e-05, -1.0517621040344238, -0.006305324379354715, -0.0001740304142003879, -0.003901965217664838, -0.000161038784426637, -5.173549288883805e-05, -0.00022182388056535274, -4.291525328881107e-06, -0.0006680640508420765, -0.04252830147743225, -1.5627105236053467, -0.0008033862104639411, -3.296328544616699, -2.5541532039642334, -1.903716802597046, -0.007159411441534758, -0.00830872543156147, -0.015324468724429607, -0.014660254120826721, -0.7886741161346436, -0.0715329498052597, -1.3048534393310547, -0.01894054003059864, -0.1144866868853569, -0.11211009323596954, -0.024819349870085716, -4.0531076592742465e-06, -0.000532008707523346, 0.0, -2.7417760065873154e-05, -0.0005133026279509068, -2.7418097943154862e-06, -9.524368942948058e-05, -0.012519342824816704, -0.004720970522612333, -0.022109800949692726, -3.013091564178467, -0.1071401834487915, -0.0013862771447747946, -5.8412379075889476e-06, -0.035072311758995056, -1.0728830375228426e-06, -4.303362584323622e-05, -6.544376083184034e-05, -0.0012360322289168835, -2.145764938177308e-06, -0.000380324519937858, -0.09557925164699554, -0.0038785722572356462, -3.3378546504536644e-06, -1.1920922133867862e-06, -0.00010918975021922961, -0.004413388203829527, -0.11504159867763519, -1.4025447368621826, -0.05227313190698624, -5.722029527532868e-06, -0.0001110968878492713, 0.0, -0.0005745429079979658, -0.012323309667408466, -0.0003449321957305074, -0.000878663151524961, -0.11131522059440613, -0.003896028036251664, -0.009968851692974567, -0.3357517719268799, -0.0014424644177779555, -0.0015947017818689346, -0.11716677248477936, -0.1385812610387802, -1.6450870037078857, -1.2665281295776367, -0.0029933906625956297, -0.006980555597692728, -0.00040725519647821784, -1.952255129814148, -0.11063071340322495, -0.8425095081329346, -0.9266753792762756, -0.9318403601646423, -0.0018919678404927254, -0.005041624419391155, -0.0027196346782147884, -1.0135421752929688, -0.002557461615651846, -0.5683799982070923, -0.02991275116801262, -0.01978028565645218, -0.01244246494024992, -0.025993624702095985, -9.643566590966657e-05, -0.0007936188485473394, -1.2040065485052764e-05, -2.0265558760002023e-06, -7.10462118149735e-05, -3.576278118089249e-07, -0.04361886903643608, -0.007625281810760498, -0.2098827213048935, -1.2290582656860352, -0.9068401455879211, -2.743422269821167, -0.013929061591625214, -0.35596340894699097, -7.414542778860778e-05, -9.667406266089529e-05, -1.8379430770874023, -0.0702657550573349, -0.21656766533851624, -0.0026694636326283216, -0.005637697875499725, -0.006186857353895903, -0.4142604470252991, -0.13638539612293243, -0.05951932072639465, -0.4980403482913971, -0.027670709416270256, -0.06669631600379944, -1.9688400030136108, -0.6817591786384583, -0.011554817669093609, -0.0057305097579956055, -2.145764938177308e-06, 0.0, -0.0014761515194550157, -0.002660308964550495, -0.0004744596080854535, -0.002148107625544071, -0.10125782340765, -4.577531944960356e-05, -5.519237674889155e-05, -1.3969759941101074, -0.00016342257731594145, -0.2557920217514038, -0.004125774838030338, -0.030895108357071877, -0.004472016356885433, -0.16412100195884705, -0.003096311818808317, -3.400590181350708, -4.810747146606445, -1.494396686553955, -0.18650710582733154, -1.9715967178344727, -0.6730812191963196, -0.6510142683982849, -0.865104615688324, -0.32921814918518066, -1.146766185760498, -1.6102006435394287, -3.47643780708313, -0.03489791974425316, -1.536221981048584, -0.07974900305271149, -0.05414991080760956, -0.13871969282627106, -0.0023683852050453424, -0.4627555310726166, -0.0019209994934499264, -0.06966285407543182, -1.152724266052246, -0.026109419763088226, -4.184158387943171e-05, -0.0001805857609724626, -2.8371408916427754e-05, -3.6954811548639555e-06, -5.960462772236497e-07, -2.3841855067985307e-07, -0.031910333782434464, -0.04205041006207466, -2.4437606043647975e-05, -2.1934269170742482e-05, -0.0019062458304688334, -0.004624742548912764, -0.520471453666687, -0.0003718638326972723, -0.3798185884952545, -0.024089498445391655, -7.271740287251305e-06, -5.722029527532868e-06, -0.2659902274608612, -0.00813858862966299, -0.5805683732032776], "finish_reason": "stop"}], "metrics": {"energy": 678.7063671474456, "energy_per_token": 3.5721387744602398, "time": 15.975068, "time_per_token": 0.08407930526315789}}
{"outputs": [{"text": "# create a list to store the text content of each JSON file\n    text_list = []\n\n    # loop through all the JSON files in the directory\n    for file_name in os.listdir(json_dir_path):\n        # check if the file is a JSON file\n        if file_name.endswith(\".json\"):\n            # read the JSON file\n            with open(os.path.join(json_dir_path, file_name), \"r\") as f:\n                json_data = json.load(f)\n            # get the text content from the JSON data\n            text = json_data[\"text\"]\n            # add the text content to the list\n            text_list.append(text)\n\n    # concatenate all the text contents into a single string\n    text_concatenated = \" \".join(text_list)\n\n    # split the concatenated text into a list of words\n    # this is done by separating the words at the whitespace characters\n    words = text_concatenated.split()\n\n    # count the occurrence of each word using Counter from collections\n", "tokens": ["#", " create", " a", " list", " to", " store", " the", " text", " content", " of", " each", " JSON", " file", "\n", "    ", "text", "_", "list", " =", " []", "\n", "\n", "    ", "#", " loop", " through", " all", " the", " JSON", " files", " in", " the", " directory", "\n", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "#", " check", " if", " the", " file", " is", " a", " JSON", " file", "\n", "        ", "if", " file", "_", "name", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "#", " read", " the", " JSON", " file", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "_", "name", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "json", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "#", " get", " the", " text", " content", " from", " the", " JSON", " data", "\n", "            ", "text", " =", " json", "_", "data", "[", "\"", "text", "\"", "]", "\n", "            ", "#", " add", " the", " text", " content", " to", " the", " list", "\n", "            ", "text", "_", "list", ".", "append", "(", "text", ")", "\n", "\n", "    ", "#", " concaten", "ate", " all", " the", " text", " contents", " into", " a", " single", " string", "\n", "    ", "text", "_", "concat", "en", "ated", " =", " \"", " \"", ".", "join", "(", "text", "_", "list", ")", "\n", "\n", "    ", "#", " split", " the", " concaten", "ated", " text", " into", " a", " list", " of", " words", "\n", "    ", "#", " this", " is", " done", " by", " separating", " the", " words", " at", " the", " whites", "pace", " characters", "\n", "    ", "words", " =", " text", "_", "concat", "en", "ated", ".", "split", "()", "\n", "\n", "    ", "#", " count", " the", " occurrence", " of", " each", " word", " using", " Counter", " from", " collections", "\n"], "logprobs": [-1.1805613040924072, -3.8351423740386963, -1.5579259395599365, -0.7527563571929932, -0.7428653240203857, -0.2833479344844818, -0.8583874106407166, -0.4970443546772003, -0.6555625200271606, -2.034637212753296, -0.8272925615310669, -0.3753534257411957, -0.0033257671166211367, -0.02082214690744877, -0.0012421043356880546, -0.49498462677001953, -0.31791043281555176, -0.3582371175289154, -0.004754784516990185, -0.005205648019909859, -0.0005005536950193346, -0.572394073009491, -0.0003864018653985113, -0.01088785845786333, -1.0812121629714966, -0.12871311604976654, -0.19888165593147278, -0.4231555759906769, -0.6314538717269897, -0.003471184289082885, -0.0056675695814192295, -0.0020649556536227465, -0.8080422282218933, -0.18620820343494415, -0.0002019201492657885, -0.011763726361095905, -0.4525248408317566, -1.3566268682479858, -0.03404209017753601, -0.0009990707039833069, -0.007042466197162867, -1.585470999998506e-05, -0.000954768096562475, 0.0, -0.0001212284987559542, -0.0015712546883150935, -1.2159273865108844e-05, -6.55629628454335e-05, -8.129743218887597e-05, -1.1920928244535389e-07, -0.0005913416389375925, -0.0012032896047458053, -0.01242292020469904, -2.4407193660736084, -0.38513070344924927, -0.022524002939462662, -0.03526347503066063, -0.03695600479841232, -0.15631338953971863, -0.005904612597078085, -0.023881753906607628, -0.0008998635457828641, -0.04361692816019058, -0.000342191313393414, -0.0025181034579873085, -0.04131278768181801, -3.2186455882765586e-06, 0.0, -0.0010550415609031916, -0.0037049478851258755, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.5141351222991943, -0.00039152585668489337, -0.009087747894227505, -0.0003781795676331967, -4.768360213347478e-06, -0.004081254359334707, -0.0003079893649555743, -0.004045636393129826, -0.06055864691734314, -0.880366325378418, -0.009634071961045265, -0.3109901547431946, -0.08524220436811447, -0.9187358617782593, -0.0002115741081070155, -0.13064105808734894, -0.00018451895448379219, -0.001077786204405129, -0.13563333451747894, -2.9802276912960224e-06, -1.3351351299206726e-05, -5.960462772236497e-07, -6.19869097135961e-05, -2.0861407392658293e-05, -0.00028772983932867646, -6.198863957251888e-06, -2.264974000354414e-06, -1.1444026313256472e-05, -9.536738616588991e-07, -8.725739462533966e-05, -0.0029639145359396935, -2.622600959512056e-06, -7.152555099310121e-07, -0.17869244515895844, -8.010543388081715e-05, -0.6094881892204285, -0.006561757531017065, -0.0007440659101121128, -0.13915760815143585, -9.297892393078655e-05, -0.3422968089580536, -0.009009069763123989, -0.0009217780898325145, -0.0008704449282959104, -2.213487148284912, -0.00043561504571698606, -0.13517357409000397, -0.0006967739318497479, -0.0027751526795327663, -2.9802276912960224e-06, -0.007458104752004147, -1.1205610462639015e-05, -0.000102037942269817, -0.0011972171487286687, -0.003256615251302719, -0.933900773525238, -0.013570908457040787, -2.6140549182891846, -0.006586272269487381, -0.08801623433828354, -0.025286249816417694, -0.08769480139017105, -0.008913962170481682, -0.054996948689222336, -1.5848169326782227, -0.16995365917682648, -0.0029685499612241983, -0.11798211932182312, -0.2274560034275055, -0.008351403288543224, -2.1457441107486375e-05, -2.0265558760002023e-06, -0.42792901396751404, -0.002410484477877617, -0.0034785496536642313, -6.532455881824717e-05, -0.00015817821258679032, -0.01262693852186203, -0.01500298548489809, -0.05594799295067787, -0.4238915741443634, -0.006747201085090637, -0.004003487061709166, -0.35855215787887573, -0.0005443998379632831, -0.0009049849468283355, -0.10042019933462143, -0.025485800579190254, -0.00021002470748499036, -0.004309771116822958, -5.090107151772827e-05, -1.5139465176616795e-05, -0.0012954423436895013, -0.004135153256356716, -0.0007587176514789462, -0.0007672941428609192, -0.005093692801892757, -0.00016330339713022113, -0.022227561101317406, -0.003954092971980572, -0.005338223185390234, -1.4074630737304688, -9.48860906646587e-05, -0.18293483555316925, -0.0059081679210066795, -0.02219654805958271, -1.6029777526855469, -0.07585690170526505, -0.09540599584579468, -0.005352570675313473, -0.02180122211575508, -0.07524078339338303, -0.00011097769311163574, -0.4655645787715912, -0.45100510120391846, -2.610389232635498, -1.4588037729263306, -0.09373030066490173, -0.0027765792328864336, -0.06773189455270767, -0.049406979233026505, -0.0006381620769388974, -3.302042750874534e-05, -0.0022697895765304565, -0.002027838258072734, -0.00040415700641460717, -9.059865078597795e-06, -0.00013016807497479022, -0.0019132657907903194, -0.25799015164375305, -0.0002696150622796267, -0.0009870424401015043, -0.4824090898036957, -0.0030914393719285727, -1.1710166931152344, -0.0001137191939051263, -0.8814109563827515, -0.1384083479642868, -1.1005423069000244, -0.0010344398906454444, -0.0009883524617180228, -0.03049580566585064, -0.11937757581472397, -0.00014161060971673578, -3.114152669906616, -3.6771163940429688, -2.5373940467834473, -1.3598146438598633, -0.27664798498153687, -3.1167032718658447, -0.6063358783721924, -0.810285210609436, -1.0516830682754517, -1.9020662307739258, -1.462817907333374, -0.15106117725372314, -0.6617889404296875, -0.3733755648136139, -0.0016872945707291365, -1.5793132781982422, -0.3932647109031677, -0.010750710032880306, -4.768360213347478e-06, -2.8729025871143676e-05, -1.1920928244535389e-07, -2.3841830625315197e-06, -4.434487345861271e-05, -0.0013078240444883704, -0.004209942650049925, -0.0011394681641831994, -0.01901867613196373, -0.00019810620869975537, -0.001809746609069407, -0.7709060907363892, -0.01086262334138155, -2.1067991256713867, -0.001255677198059857, -0.0019395602867007256, -0.018379148095846176, -1.0406073331832886, -1.3578393459320068, -1.1397151947021484, -0.4903853237628937, -1.0191799402236938], "finish_reason": "length"}], "metrics": {"energy": 866.928488415718, "energy_per_token": 3.3864394078738984, "time": 21.643356, "time_per_token": 0.084544359375}}
{"outputs": [{"text": "df = pd.DataFrame()\n    for file in os.listdir(json_dir_path):\n        if file.endswith(\".json\"):\n            with open(json_dir_path + '/' + file, \"r\", encoding=\"UTF-8\") as f:\n                json_data = json.load(f)\n                df = pd.concat([df, pd.DataFrame.from_records(json_data)])\n    word_counter = Counter()\n    for word in df.text.str.split(expand=True).unstack():\n        word_counter[word] += 1\n    return word_counter.most_common(word_count)\n\nclass TestTaskFunc(unittest.TestCase):\n    def setUp(self):\n        self.fake_data_1 = {\"text\": \"Top visit morning price certainly indicate time. Figure add cold behind customer also.\"}\n        self.fake_data_2 = {\"text\": \"Itself to current listen. Cover add will feeling head. Perform family affect reduce political general.\"}\n\n    def test_task_func(self):\n", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "json", "_", "dir", "_", "path", " +", " '/", "'", " +", " file", ",", " \"", "r", "\"", ",", " encoding", "=", "\"", "UTF", "-", "8", "\"", ")", " as", " f", ":", "\n", "                ", "json", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "df", " =", " pd", ".", "concat", "([", "df", ",", " pd", ".", "DataFrame", ".", "from", "_", "records", "(", "json", "_", "data", ")]", ")", "\n", "    ", "word", "_", "counter", " =", " Counter", "()", "\n", "    ", "for", " word", " in", " df", ".", "text", ".", "str", ".", "split", "(", "expand", "=", "True", ")", ".", "un", "stack", "():", "\n", "        ", "word", "_", "counter", "[", "word", "]", " +=", " ", "1", "\n", "    ", "return", " word", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "class", " Test", "Task", "Func", "(", "un", "ittest", ".", "TestCase", "):", "\n", "    ", "def", " set", "Up", "(", "self", "):", "\n", "        ", "self", ".", "fake", "_", "data", "_", "1", " =", " ", "{\"", "text", "\":", " \"", "Top", " visit", " morning", " price", " certainly", " indicate", " time", ".", " Figure", " add", " cold", " behind", " customer", " also", ".", "\"}", "\n", "        ", "self", ".", "fake", "_", "data", "_", "2", " =", " ", "{\"", "text", "\":", " \"", "I", "tself", " to", " current", " listen", ".", " Cover", " add", " will", " feeling", " head", ".", " Perform", " family", " affect", " reduce", " political", " general", ".", "\"}", "\n", "\n", "    ", "def", " test", "_", "task", "_", "func", "(", "self", "):", "\n"], "logprobs": [-2.9271395206451416, -0.10534307360649109, -0.030225545167922974, -0.00015472168161068112, -0.17827171087265015, -0.33573752641677856, -0.02351527102291584, -0.23084165155887604, -0.47417619824409485, -0.47575071454048157, -0.20035646855831146, -0.02978617139160633, -2.9802276912960224e-06, -0.02851984091103077, 0.0, -0.0002195594133809209, -0.0063294898718595505, -1.8715683836489916e-05, -0.0004067785630468279, -0.00014041867689229548, -1.5497195136049413e-06, -0.0016180293168872595, -0.004342530854046345, -0.011683608405292034, -0.5487824082374573, -0.060474153608083725, -0.0024491334334015846, -0.004223119001835585, -1.537788011773955e-05, 0.0, -0.4984511733055115, -0.0006369707407429814, -0.03238663077354431, -0.0016379047883674502, -1.2874520507466514e-05, -0.0065816533751785755, -0.004781004507094622, -0.0031058192253112793, -0.5106228590011597, -0.0001656871900195256, -0.004122212994843721, -2.8326756954193115, -2.276871418871451e-05, -5.209310256759636e-05, -1.07287787614041e-05, 0.0, -0.2394450157880783, -0.7513357400894165, -0.0026496085338294506, -0.00031263710116036236, -0.02893846295773983, -0.5746167898178101, -1.4333746433258057, -0.01315709762275219, -0.005372609477490187, -1.8726732730865479, -0.019221002236008644, -0.45469480752944946, -0.0019869126845151186, -2.3681800365448, -0.034192901104688644, -9.500529267825186e-05, -0.004367337562143803, -0.020875267684459686, -0.0008239926537498832, -0.7689204216003418, -0.03762635588645935, -0.01870434544980526, -0.0021786780562251806, -2.2335195541381836, -0.016555199399590492, -0.4860597550868988, -0.0048966724425554276, -0.021402472630143166, -4.2676016164477915e-05, -0.06334282457828522, -5.1020273531321436e-05, -0.000717144284863025, -0.027198657393455505, -0.01570722460746765, -0.32569143176078796, -0.4843452572822571, -0.14547611773014069, -1.7134618759155273, -1.4543427823809907e-05, -0.013142391107976437, -0.015750762075185776, -0.046232592314481735, -0.002453771186992526, -0.014663073234260082, -1.6093124941107817e-05, -0.1650756448507309, -1.365707516670227, -7.152555099310121e-07, 0.0, -1.0989891290664673, -0.11876992136240005, -0.017686275765299797, -0.0010548033751547337, -3.576272320060525e-06, -0.47534358501434326, -0.72617506980896, -0.021549485623836517, -0.43598049879074097, -2.147955894470215, -0.026482846587896347, -1.7010154724121094, -0.007869785651564598, -0.011490358039736748, -1.2263352870941162, -0.00535600958392024, -0.010560463182628155, -0.1507265865802765, -3.5124635696411133, -0.20096167922019958, -0.09906020760536194, -1.2419630289077759, -0.080711230635643, -0.04716573655605316, -0.11329133063554764, -5.411955135059543e-05, -0.12012600898742676, -0.22717289626598358, -0.6655000448226929, -0.0037947327364236116, -0.07195458561182022, -0.0005678709712810814, -0.00032145579461939633, -0.7906845211982727, -9.643566590966657e-05, -0.591212809085846, -0.009098497219383717, -0.013422953896224499, -0.06861269474029541, -0.010015353560447693, -0.000896052282769233, -0.12346896529197693, -0.021412741392850876, -0.009562521241605282, -0.002097788965329528, -0.015084833838045597, -1.3112935448589269e-05, -0.0013306819600984454, -0.09339364618062973, -0.9186146855354309, -0.3233097493648529, -5.960446742392378e-06, -2.253030106658116e-05, -0.000727627135347575, -5.245195097813848e-06, -3.766942609217949e-05, -3.266281055402942e-05, -0.02101488597691059, -0.00968956109136343, -2.4676019165781327e-05, -7.319182623177767e-05, -0.060164958238601685, -0.06916972994804382, -0.018417419865727425, -2.857058048248291, -0.8229478597640991, -0.31985414028167725, -0.38194581866264343, -0.17338299751281738, -0.015037627890706062, -6.079655122448457e-06, -0.0001858300092862919, -0.002221499104052782, -0.0005285535007715225, -0.0006666345288977027, -0.24000321328639984, -0.4732535779476166, -1.501707911491394, -0.00013481661153491586, -0.000188332938705571, -0.00012933371181134135, -0.03622840717434883, -0.0012530578533187509, -0.0011700696777552366, -0.30671894550323486, -1.1920922133867862e-06, -0.8593522310256958, -0.00043478095903992653, -0.012570199556648731, -0.024662815034389496, -0.004272143822163343, -0.0019298041006550193, -0.07276073843240738, -2.706014311115723e-05, -0.006503488402813673, -0.0023017835337668657, -0.005207071080803871, -0.0359765961766243, -0.0008697302546352148, -0.0004808938247151673, -0.00032074074260890484, -0.000617551791947335, -0.00010859376925509423, -0.0001401803019689396, -0.003470946568995714, -0.0016896746819838881, -0.000988114275969565, -0.004336833953857422, -0.21760964393615723, -0.004962389823049307, -0.0024507984053343534, -0.0025737513788044453, -0.011213849298655987, -0.001980606932193041, -0.0013293724041432142, -0.0006579380133189261, -1.1920928244535389e-07, -0.0018442542059347034, -1.5497195136049413e-06, -4.2199197196168825e-05, -1.0847986231965479e-05, -0.0008579387213103473, -0.0003810394846368581, -0.0034153484739363194, -1.4305104514278355e-06, -2.276871418871451e-05, -0.00018451895448379219, -0.0016969341086223722, -0.005356127861887217, -0.0002361257211305201, -0.001212219474837184, -0.001388658070936799, -3.0397906812140718e-05, -0.0002302858338225633, -0.009946662932634354, -0.0004864939546678215, -9.381330892210826e-05, -0.00042822727118618786, -0.00038509105797857046, -0.0015607806853950024, -0.0007721779984422028, -0.00021872512297704816, -0.00010442188795423135, -0.004342530854046345, -0.004990502260625362, -0.0007982643437571824, -0.0008180370787158608, -0.0022852513939142227, -0.00019214690837543458, -1.0252553224563599, -0.06118578463792801, -0.008798757568001747, -0.032523613423109055, -0.0018604366341605783, -0.7970506548881531, -0.0019061268540099263, -0.023634962737560272, -0.6038042902946472, -8.844937838148326e-05, -0.0026033578906208277, -0.00033480284037068486], "finish_reason": "length"}], "metrics": {"energy": 890.7752696990977, "energy_per_token": 3.4795908972621006, "time": 22.16854, "time_per_token": 0.086595859375}}
{"outputs": [{"text": "df = pd.DataFrame()\n\n    for root, dirs, files in os.walk(json_dir_path):\n        for file in files:\n            if file.endswith('.json'):\n                json_path = os.path.join(root, file)\n                with open(json_path) as f:\n                    data = json.load(f)\n                    text = data['text']\n                    df = df.append(pd.Series([text], index=['text']), ignore_index=True)\n\n    all_text = ' '.join(df['text'].tolist())\n    all_words = all_text.split(' ')\n\n    counter = Counter(all_words)\n\n    most_common_words = counter.most_common(word_count)\n\n    return most_common_words", "tokens": ["df", " =", " pd", ".", "DataFrame", "()", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "                ", "json", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "                ", "with", " open", "(", "json", "_", "path", ")", " as", " f", ":", "\n", "                ", "    ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "    ", "text", " =", " data", "['", "text", "']", "\n", "                ", "    ", "df", " =", " df", ".", "append", "(", "pd", ".", "Series", "([", "text", "]", ",", " index", "=['", "text", "'])", ",", " ignore", "_", "index", "=", "True", ")", "\n", "\n", "    ", "all", "_", "text", " =", " '", " '", ".", "join", "(", "df", "['", "text", "']", ".", "tol", "ist", "())", "\n", "    ", "all", "_", "words", " =", " all", "_", "text", ".", "split", "('", " '", ")", "\n", "\n", "    ", "counter", " =", " Counter", "(", "all", "_", "words", ")", "\n", "\n", "    ", "most", "_", "common", "_", "words", " =", " counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "print"], "logprobs": [-2.9271395206451416, -0.10534307360649109, -0.030225545167922974, -0.00015472168161068112, -0.17827171087265015, -0.33573752641677856, -0.02351527102291584, -1.5815649032592773, -0.000854841957334429, -0.35856950283050537, -1.9821341037750244, -0.00833461619913578, -0.18987776339054108, -0.005349013488739729, -0.0005922947311773896, -0.10459595173597336, -0.0005210472736507654, -0.006205220706760883, -3.099436753473128e-06, -8.821448318485636e-06, -0.0003409996279515326, -0.005713086109608412, -1.9550132492440753e-05, -0.00011121608258690685, -0.00010108436981681734, -3.576278118089249e-07, -0.10635966807603836, -0.007940630428493023, -0.021105464547872543, -0.099469855427742, -0.29870110750198364, -0.1010429859161377, -0.003237603697925806, -0.0005154472892172635, -0.0008044582791626453, -0.007877473719418049, -1.1965832710266113, -0.11632603406906128, -0.0039107524789869785, -0.006147404666990042, -5.602820692729438e-06, 0.0, -0.9289630055427551, -0.02483179233968258, -0.0018681708024814725, -1.883488948806189e-05, -0.01120265107601881, -0.005844646133482456, -0.0032421189825981855, -2.387050151824951, -0.008640403859317303, -0.7433884143829346, -0.0025101364590227604, -0.04580669105052948, -1.6689286894688848e-06, -4.2199197196168825e-05, -2.3841830625315197e-06, -0.0015520919114351273, -0.00011884459672728553, -0.06543134897947311, -3.576214658096433e-05, -0.006245618686079979, -5.5549986427649856e-05, -0.0011728082317858934, -0.03198445960879326, -0.5451447367668152, -0.0006778326351195574, -0.00044741155579686165, -0.0008790204883553088, -9.298280929215252e-06, -8.940656698541716e-06, -1.8549797534942627, -0.00025614796322770417, -0.322045236825943, -0.04915313050150871, -0.0011798333143815398, -0.0008488865569233894, -0.0010601620888337493, -0.6692090034484863, -0.021370267495512962, -0.0071945637464523315, -2.1457441107486375e-05, -0.011848196387290955, -1.2040065485052764e-05, -0.00013636612857226282, -0.0059959776699543, -0.009458137676119804, -0.06806838512420654, -0.21862295269966125, -1.5522127151489258, -0.15487779676914215, -0.04092346131801605, -0.4262917637825012, -0.0029074561316519976, -0.0005273620481602848, -0.05306094139814377, -0.06553775817155838, -0.08420609682798386, -0.3899364173412323, -0.2645587623119354, -0.16373638808727264, -9.357491217087954e-05, -0.002553418977186084, -0.7022719979286194, -0.12538988888263702, -3.933898824470816e-06, -0.4331982135772705, -0.8928350210189819, -0.011420942842960358, -0.14102908968925476, -0.0002150304353563115, -0.03017488494515419, -0.5848991274833679, -0.01254818495362997, -0.01775478757917881, -0.0019163592951372266, -0.0549561008810997, -2.3841855067985307e-07, -8.821448318485636e-06, -0.005231619346886873, -0.00025376438861712813, -0.0005471401382237673, -0.006806639954447746, -0.06917040050029755, -0.004247691016644239, -2.982060194015503, -0.01529018860310316, -0.36582255363464355, -0.195424884557724, -0.7782437801361084, -0.03293018043041229, -0.0015717307105660439, -3.218599158572033e-05, -0.015628362074494362, -0.03907681256532669, -0.06595701724290848, -3.933898824470816e-06, -0.5306392908096313, -0.0007072569569572806, -0.3900149464607239, 0.0, -0.00044979469384998083, -0.02072593756020069, -0.21226313710212708, -1.085368037223816, -0.000300600629998371, -0.646680474281311, -0.015843695029616356, -0.13524708151817322, -1.311301275563892e-06, -5.960462772236497e-07, -6.770858453819528e-05, -0.005679660011082888, -1.282933235168457, -0.0005368936690501869, -0.00031990656862035394, -0.008796276524662971, -0.9405300617218018, -0.00037245964631438255, -2.1414694786071777, -0.020632755011320114, -0.001312348060309887, -0.011488826014101505, -0.0052087316289544106, -7.152555099310121e-07, -5.113947918289341e-05, -0.0004316828562878072, -0.019299114122986794, -1.7755818367004395, -0.0003819928097072989, -0.28583449125289917, -0.0030902510043233633, -0.05172199755907059, -0.6598517894744873, -0.09212061017751694, -0.03180375322699547, -0.12241055816411972, -3.0040289857424796e-05, -1.2636104656849056e-05, -3.576278118089249e-07, -7.152555099310121e-07, -0.06773912906646729, -0.012186946347355843, -1.4781842764932662e-05, -2.3603161025675945e-05, -0.0015791100449860096, -0.003641642164438963, -0.16974201798439026, -0.0002992897352669388, -0.058488693088293076, -0.008257179521024227, -2.0265558760002023e-06, -8.106198947643861e-06, -3.2186455882765586e-06, -3.0517112463712692e-05, -0.23433293402194977, -0.006941370666027069, -3.50720477104187], "finish_reason": "stop"}], "metrics": {"energy": 706.7220893421162, "energy_per_token": 3.5693034815258393, "time": 16.824297, "time_per_token": 0.08497119696969697}}
{"outputs": [{"text": "words = []\n    for file in os.listdir(json_dir_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(json_dir_path, file)) as f:\n                data = json.load(f)\n                words.extend(data[\"text\"].split())\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(word_count)\n    return most_common", "tokens": ["words", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "))", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "words", ".", "extend", "(", "data", "[", "\"", "text", "\"", "]", ".", "split", "())", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "    ", "most", "_", "common", " =", " word", "_", "counts", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " most", "_", "common", "\n", "\n", "#"], "logprobs": [-3.561368465423584, -0.5359101295471191, -0.4113655388355255, -0.02339405193924904, -0.18432092666625977, -0.2719230055809021, -0.361332505941391, -0.26768484711647034, -0.024922141805291176, -2.0146166207268834e-05, -0.027758946642279625, 0.0, -0.00017653337272349745, -0.0026793316937983036, -1.9073304429184645e-05, -0.0003578022588044405, -0.00011097769311163574, -1.1920922133867862e-06, -0.001327467616647482, -0.007138698827475309, -0.009873009286820889, -0.3400730788707733, -0.030320381745696068, -0.0008728270186111331, -0.002572800265625119, -1.6689286894688848e-06, 0.0, -0.3656258285045624, -0.0003232433518860489, -0.015304863452911377, -0.0008313775178976357, -7.629365427419543e-06, -0.0031418269500136375, -0.00472619105130434, -0.0028386320918798447, -0.22023452818393707, -0.00014065706636756659, -0.002660665661096573, -0.2384190708398819, -1.5497195136049413e-06, -3.2543604902457446e-05, -1.4305104514278355e-06, -0.0002488780301064253, -4.7801782784517854e-05, -0.00030620177858509123, -8.22540732769994e-06, -2.50339189733495e-06, -3.576272320060525e-06, -2.3841855067985307e-07, -0.00017927470616996288, -0.010006619617342949, -1.2391266822814941, -0.0005354639724828303, -0.476622998714447, -0.02536121755838394, -0.0047444626688957214, -0.001116486731916666, -0.27290162444114685, -0.010271072387695312, -0.004802478477358818, -3.099436753473128e-06, -0.0040937201119959354, -1.2874520507466514e-05, -0.00022623363474849612, -0.010341038927435875, -0.00905537884682417, -0.2788499593734741, -0.8433808088302612, -0.529457688331604, -0.17417080700397491, -0.025306707248091698, -0.031751323491334915, -0.5532617568969727, -0.001958953682333231, -0.002277758438140154, -0.0001472126314183697, -0.0014975772937759757, -0.000501030299346894, -0.011805549263954163, -0.20209699869155884, -0.024316398426890373, -0.26280876994132996, -1.1746039390563965, -0.008798403665423393, -0.3143303096294403, -0.0008642514003440738, -0.026871105656027794, -0.0006740205571986735, -0.009601366706192493, -0.00035470392322167754, -0.09192521870136261, -0.019836852326989174, -0.4480352997779846, -0.00034517052699811757, -0.00956476479768753, -0.9492031335830688, -0.07422833889722824, -3.576278118089249e-07, -5.245195097813848e-06, -2.52720492426306e-05, -5.125986263010418e-06, -1.311301275563892e-06, -2.3841855067985307e-07, -0.04742634296417236, -0.006777749862521887, -1.0847986231965479e-05, -3.40932747349143e-05, -0.0008316157618537545, -0.003997787833213806, -0.0516512468457222, -0.06645451486110687, -0.028426455333828926, -3.933898824470816e-06, -8.106198947643861e-06, -0.2350902110338211, -0.02109227515757084, -2.450942039489746], "finish_reason": "stop"}], "metrics": {"energy": 836.5972784690857, "energy_per_token": 7.150404089479365, "time": 20.610643, "time_per_token": 0.17615934188034188}}
{"outputs": [{"text": "words_counter = Counter()\n\n    for root, dirs, files in os.walk(json_dir_path, topdown=True):\n        for file in files:\n            if not file.endswith(\".json\"):\n                continue\n\n            file_path = os.path.join(root, file)\n            with open(file_path) as json_file:\n                data = json.load(json_file)\n                text = data.get(\"text\")\n\n                if not text:\n                    continue\n\n                for word in text.split():\n                    words_counter.update([word])\n\n    return words_counter.most_common(word_count)", "tokens": ["words", "_", "counter", " =", " Counter", "()", "\n", "\n", "    ", "for", " root", ",", " d", "irs", ",", " files", " in", " os", ".", "walk", "(", "json", "_", "dir", "_", "path", ",", " top", "down", "=", "True", "):", "\n", "        ", "for", " file", " in", " files", ":", "\n", "            ", "if", " not", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "                ", "continue", "\n", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "root", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ")", " as", " json", "_", "file", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "                ", "text", " =", " data", ".", "get", "(", "\"", "text", "\"", ")", "\n", "\n", "                ", "if", " not", " text", ":", "\n", "                ", "    ", "continue", "\n", "\n", "                ", "for", " word", " in", " text", ".", "split", "():", "\n", "                ", "    ", "words", "_", "counter", ".", "update", "([", "word", "])", "\n", "\n", "    ", "return", " words", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "def"], "logprobs": [-3.486431360244751, -0.7910588979721069, -0.8294625878334045, -0.020787587389349937, -0.02659115567803383, -0.013981609605252743, -0.01454265508800745, -1.0254268646240234, -0.00047839165199548006, -0.31195127964019775, -2.697154998779297, -0.008813055232167244, -0.236221045255661, -0.005115752574056387, -0.00033301531220786273, -0.10868430137634277, -0.000824230897706002, -0.0026301098987460136, -1.6689286894688848e-06, -2.3483953555114567e-05, -0.00026854246971197426, -0.0062020220793783665, -1.4305012882687151e-05, -0.00010823617776622996, -8.749579137656838e-05, -2.3841855067985307e-07, -2.9498581886291504, -0.24782444536685944, -1.4305104514278355e-06, -0.0067280190996825695, -0.2615257501602173, -0.026262128725647926, -0.004891097079962492, -0.025003880262374878, -0.04871983826160431, -1.4266375303268433, -0.33913514018058777, -0.009352798573672771, -0.00023648326168768108, -0.0015040049329400063, -0.011827226728200912, -0.8462706208229065, -2.516695022583008, -0.05158082768321037, -0.0063375448808074, -0.09078682959079742, -1.3589766240329482e-05, 0.0, -0.5697839260101318, -0.004795597400516272, -0.06732674688100815, -0.012253127992153168, -5.8530047681415454e-05, -0.004941749852150679, -0.03612527623772621, -0.0007500219508074224, -0.01689106971025467, -0.007070283405482769, -0.7484351396560669, -0.0006566275842487812, -1.462031602859497, -0.056263115257024765, -0.0446498803794384, -0.0012627016985788941, -0.012994137592613697, -9.536738616588991e-07, -7.366862701019272e-05, -2.7418097943154862e-06, -0.0025032395496964455, -3.182837463100441e-05, -0.017727501690387726, -3.4689302992774174e-05, -0.0022312526125460863, -7.879423355916515e-05, -0.0005588161875493824, -0.29099076986312866, -0.5259565114974976, -0.000727508042473346, -0.00012957210128661245, -0.0025480680633336306, -0.0003045333724003285, 0.0, -1.7818492650985718, -0.00032586511224508286, -1.4896384477615356, -0.00830624345690012, -0.07036276161670685, -0.007415625732392073, -0.0008920027757994831, -0.002606924856081605, -0.5130279064178467, -0.022298911586403847, -0.012460124678909779, -0.0016538526397198439, -0.011772326193749905, -1.4066597032069694e-05, -0.0001699779968475923, -1.6927575416048057e-05, -2.288792165927589e-05, -0.005695661995559931, -0.0033337275963276625, -0.40281006693840027, -1.0388206243515015, -0.23170039057731628, -0.0430205799639225, -1.2964972257614136, -0.002015108708292246, -0.20281513035297394, -0.0005855038180015981, -0.0018669809214770794, -0.0001731960946926847, -0.8167752027511597, -0.06478005647659302, -1.1750876903533936, -0.3503321409225464, -0.19873517751693726, -1.0602720975875854, -0.008719347417354584, -0.019411128014326096, -0.005988275166600943, -5.364274329622276e-05, -0.0006081400788389146, -0.02265406958758831, -0.005689853802323341, -0.015219510532915592, -0.006562941707670689, -1.7493457794189453, -0.05180644243955612, -0.0020794689189642668, -0.02176494710147381, -0.002438192954286933, -0.010087579488754272, -0.2511049509048462, -0.010096902959048748, -0.0005443998379632831, -0.0008844992844387889, -0.09633444249629974, -5.447716102935374e-05, -3.325883881188929e-05, -2.750293493270874, -9.738924563862383e-05, -0.17289523780345917, -0.001762028899975121, -0.042365945875644684, -0.0019890540279448032, -0.009153898805379868, -0.010173017159104347, -1.0690618753433228, -0.11548798531293869, -4.410734163684538e-06, -5.125986263010418e-06, -0.0003766304289456457, -1.847726889536716e-05, -8.4638240878121e-06, -3.3378546504536644e-06, -0.011782694607973099, -0.009795927442610264, -1.6212332411669195e-05, -2.7179348762729205e-05, -0.10017099231481552, -0.1160094290971756, -0.006931781768798828, -0.8204249143600464], "finish_reason": "stop"}], "metrics": {"energy": 672.2230501956938, "energy_per_token": 4.124067792611618, "time": 13.756688, "time_per_token": 0.08439685889570553}}
{"outputs": [{"text": "# Load all JSON files in the directory\n    all_json = []\n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(json_dir_path, filename), 'r') as f:\n                all_json.append(json.load(f))\n\n    # Extract text content from each JSON object\n    all_text = [item[\"text\"] for item in all_json]\n\n    # Join the text content into a single string\n    combined_text = \" \".join(all_text)\n\n    # Split text into words\n    words = combined_text.split()\n\n    # Count occurrences of each word\n    word_counts = Counter(words)\n\n    # Get the most common words\n    most_common = word_counts.most_common(word_count)\n\n    return most_common", "tokens": ["#", " Load", " all", " JSON", " files", " in", " the", " directory", "\n", "    ", "all", "_", "json", " =", " []", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "all", "_", "json", ".", "append", "(", "json", ".", "load", "(", "f", "))", "\n", "\n", "    ", "#", " Ext", "ract", " text", " content", " from", " each", " JSON", " object", "\n", "    ", "all", "_", "text", " =", " [", "item", "[", "\"", "text", "\"", "]", " for", " item", " in", " all", "_", "json", "]", "\n", "\n", "    ", "#", " Join", " the", " text", " content", " into", " a", " single", " string", "\n", "    ", "combined", "_", "text", " =", " \"", " \"", ".", "join", "(", "all", "_", "text", ")", "\n", "\n", "    ", "#", " Split", " text", " into", " words", "\n", "    ", "words", " =", " combined", "_", "text", ".", "split", "()", "\n", "\n", "    ", "#", " Count", " occurrences", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", ")", "\n", "\n", "    ", "#", " Get", " the", " most", " common", " words", "\n", "    ", "most", "_", "common", " =", " word", "_", "counts", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "\n", "\n", "def"], "logprobs": [-1.1805613040924072, -3.0313150882720947, -0.36749300360679626, -0.5712571144104004, -0.030765531584620476, -0.8563268780708313, -0.1313268542289734, -0.5184534192085266, -0.47232189774513245, -0.0018521074671298265, -2.4738097190856934, -0.005166749935597181, -0.6348072290420532, -1.2668099403381348, -0.3540080487728119, -0.004274636507034302, -0.027047134935855865, -0.06204111501574516, -1.5381265878677368, -0.0003688847064040601, -0.011592290364205837, -3.576272320060525e-06, -0.0018365198047831655, 0.0, -6.842378934379667e-05, -0.0018380667315796018, -2.3245540432981215e-05, -0.0002040654799202457, -0.00023064337437972426, -1.4305104514278355e-06, -0.0004440752090886235, -0.001886494574137032, -0.005365495104342699, -0.2598421573638916, -0.05798889696598053, -0.0008468617452308536, -0.0015753014013171196, -1.1920928244535389e-07, 0.0, -0.7614738941192627, -0.004427392967045307, -0.0006607971154153347, -9.775113539944869e-06, -0.006436806637793779, -0.00422133831307292, -0.0014248467050492764, -0.25523945689201355, -0.00012730741582345217, -0.0012469858629629016, -0.14402157068252563, -1.311301275563892e-06, -2.312633478140924e-05, -2.3841855067985307e-07, -0.0002790300059132278, -5.4238757002167404e-05, -0.0005637010326609015, -5.960446742392378e-06, -2.9802276912960224e-06, -1.549708758830093e-05, -8.344646857949556e-07, -0.00011383838864276186, -0.005715338047593832, -0.42478734254837036, -0.00010406429646536708, -0.09727966040372849, -0.005288658197969198, -0.029002387076616287, -0.00018439977429807186, -0.23269811272621155, -0.01052873209118843, -0.0012436520773917437, -0.0008076743106357753, -0.7016482353210449, -5.722029527532868e-06, -0.0008987916517071426, -0.07129830867052078, -0.07677463442087173, -0.002739607123658061, -0.011367552913725376, -2.4199192921514623e-05, -0.01763520948588848, -2.777537883957848e-05, -4.351044481154531e-05, -0.007766053546220064, -0.0015995815629139543, -0.13152295351028442, -0.0023970461916178465, -0.037688467651605606, -0.38570332527160645, -0.018344152718782425, -0.7653913497924805, -0.5624402761459351, -0.0755409300327301, -0.8485661745071411, -0.13635045289993286, -1.7252013683319092, -0.2242826372385025, -0.0006095697171986103, -1.7015974521636963, -0.0011622109450399876, -0.19316262006759644, -0.19679073989391327, -0.643000066280365, -1.9566500186920166, -1.7565621137619019, -0.0022555168252438307, -0.002062219427898526, -5.8887653722194955e-05, -4.851700214203447e-05, -0.013213803991675377, -0.001329015358351171, -1.883488948806189e-05, -0.0002273062855238095, -1.1920922133867862e-06, -8.344646857949556e-07, -0.08144454658031464, -0.0019024383509531617, -0.06966819614171982, -0.0003405229654163122, -0.013627943582832813, -2.8181865215301514, -2.5088369846343994, -0.15577489137649536, -0.574166476726532, -0.2428549975156784, -0.10285299271345139, -0.018333854153752327, -0.02198304608464241, -0.2814888656139374, -8.523101132595912e-05, -2.140458583831787, -0.010461374185979366, -0.028445804491639137, -0.004547255113720894, -0.5216183066368103, -0.06250708550214767, -0.000491855782456696, -7.962863310240209e-05, -0.005584591068327427, -0.0024374795611947775, -2.50339189733495e-06, -1.156323378381785e-05, -0.0001174142598756589, -0.0019204046111553907, -0.01037855725735426, -0.00017379203927703202, -0.0023393663577735424, -0.7550786137580872, -2.200752019882202, -0.19003057479858398, -0.45995840430259705, -0.9668624997138977, -0.00012313561455812305, -0.1532411426305771, -0.01765804924070835, -0.04752831533551216, -3.576278118089249e-07, -2.861018856492592e-06, -4.577531944960356e-05, -0.002071141730993986, -0.038616880774497986, -0.0023192670196294785, -0.01077441405504942, -0.00015233787416946143, -0.004499667789787054, -0.113369882106781, -2.8422229290008545, -0.001280679483897984, -0.016492467373609543, -0.008103705942630768, -0.0921974703669548, -0.00019274283840786666, -0.062448740005493164, -0.00013743886665906757, -0.09970024228096008, -0.00018082413589581847, -0.013643231242895126, -0.002944659674540162, -0.0017482249531894922, -8.05822346592322e-05, -0.007117038127034903, -0.005819165147840977, -7.295342220459133e-05, -0.006218489725142717, -0.8662057518959045, -0.0694296732544899, -0.33698341250419617, -0.011888484470546246, -0.02443157322704792, -0.2717446982860565, -0.00023195437097456306, -0.03895242139697075, -4.053033626405522e-05, -0.0006856950931251049, -0.9241945147514343, -0.00680912658572197, -1.1920928244535389e-07, -2.264974000354414e-06, -1.1801649634435307e-05, -2.0265558760002023e-06, -1.0728830375228426e-06, -5.960462772236497e-07, -0.03552443906664848, -0.0031721293926239014, -1.2636104656849056e-05, -3.0517112463712692e-05, -0.0005430892342701554, -0.003924764227122068, -0.022723756730556488, -0.00010871296399272978, -0.27985480427742004, -0.009747054427862167, -1.7881377516459906e-06, -5.483612312673358e-06, -0.19199341535568237, -0.009569250978529453, -0.8687309622764587], "finish_reason": "stop"}], "metrics": {"energy": 741.7312681884764, "energy_per_token": 3.4181164432648683, "time": 18.26067, "time_per_token": 0.0841505529953917}}
{"outputs": [{"text": "# Get all JSON files in the specified directory\n    json_files = [f for f in os.listdir(json_dir_path) if f.endswith(\".json\")]\n    print(\"Total json files:\", len(json_files))\n\n    # Create an empty Counter object to store the word frequencies\n    word_counter = Counter()\n\n    # Loop through each JSON file and extract the text content\n    for json_file in json_files:\n        with open(os.path.join(json_dir_path, json_file)) as f:\n            data = json.load(f)\n            text = data.get(\"text\", \"\")\n            # Update the counter with the words from the text content\n            word_counter.update(text.split())\n\n    # Return the most common words and their counts\n    return word_counter.most_common(word_count)", "tokens": ["#", " Get", " all", " JSON", " files", " in", " the", " specified", " directory", "\n", "    ", "json", "_", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", " if", " f", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", ")]", "\n", "    ", "print", "(", "\"", "Total", " json", " files", ":\"", ",", " len", "(", "json", "_", "files", "))", "\n", "\n", "    ", "#", " Create", " an", " empty", " Counter", " object", " to", " store", " the", " word", " frequencies", "\n", "    ", "word", "_", "counter", " =", " Counter", "()", "\n", "\n", "    ", "#", " Loop", " through", " each", " JSON", " file", " and", " extract", " the", " text", " content", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " json", "_", "file", "))", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "text", " =", " data", ".", "get", "(", "\"", "text", "\"", ",", " \"", "\"", ")", "\n", "            ", "#", " Update", " the", " counter", " with", " the", " words", " from", " the", " text", " content", "\n", "            ", "word", "_", "counter", ".", "update", "(", "text", ".", "split", "())", "\n", "\n", "    ", "#", " Return", " the", " most", " common", " words", " and", " their", " counts", "\n", "    ", "return", " word", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "if"], "logprobs": [-1.1805613040924072, -2.55208420753479, -0.8156907558441162, -0.5255191326141357, -0.38266417384147644, -0.14793747663497925, -0.0655226856470108, -1.552842140197754, -0.009799941442906857, -0.05952010676264763, -0.001207337831147015, -0.23649680614471436, -0.002190929837524891, -0.27665144205093384, -0.006841686088591814, -0.13080047070980072, -0.7313534021377563, -0.03041289746761322, -0.00017867876158561558, -2.253030106658116e-05, -0.0029993331991136074, -1.9788545614574105e-05, -0.004458962008357048, 0.0, -7.986703712958843e-05, -0.007401544600725174, -1.3470558769768104e-05, -1.4662635294371285e-05, -0.00027938754647038877, -4.768370445162873e-07, -0.0018184330547228456, -0.0021701136138290167, -0.04979676008224487, -0.0006266061100177467, -0.0005905076395720243, -4.768370445162873e-07, 0.0, -0.9807066917419434, -0.0006057572900317609, -0.002278947737067938, -0.00027533553657121956, -1.0490362910786644e-05, -0.0032759830355644226, -0.00047803416964598, -1.6430200338363647, -3.1482200622558594, -0.03839802369475365, -1.5970346927642822, -3.4206032752990723, -2.2903449535369873, -0.4125496745109558, -1.042184829711914, -0.013814080506563187, -0.0773862823843956, -0.00046135272714309394, -0.0011087467428296804, -1.0847986231965479e-05, -2.3007127310847864e-05, -0.016027778387069702, -0.03542031720280647, -0.2935793995857239, -0.0005899119423702359, -0.12670207023620605, -1.9634462594985962, -0.5648499131202698, -0.004433089401572943, -1.6439472436904907, -0.25290659070014954, -0.22947105765342712, -0.6046971678733826, -1.088521957397461, -0.12413453310728073, -2.227897882461548, -0.005909115541726351, -0.00010048838157672435, -0.38456791639328003, -0.004764157347381115, -0.875650942325592, -0.001953361788764596, -0.0005888396990485489, -0.0029893494211137295, -0.0008683010237291455, -0.07762324810028076, -0.00016735584358684719, -0.17287689447402954, -1.0158149003982544, -0.14419764280319214, -0.23459573090076447, -0.017538342624902725, -0.0009282094542868435, -0.5600461959838867, -0.32557418942451477, -0.14591427147388458, -0.06186710298061371, -0.06661590933799744, -0.0997045561671257, -0.0004138090298511088, -0.03439897671341896, -0.18321794271469116, -0.00110041128937155, -0.014725567772984505, -0.006710493937134743, -0.008242400363087654, -1.3708974620385561e-05, -2.1815061700181104e-05, -0.010401916690170765, -0.000262106885202229, -0.007643855642527342, -0.16166278719902039, -6.806619057897478e-05, -0.0006040894077159464, -0.1123204380273819, -2.145764938177308e-06, -8.940656698541716e-06, -2.50339189733495e-06, -8.010543388081715e-05, -1.9311717551317997e-05, -0.00031704644788987935, -2.062299427052494e-05, -5.113947918289341e-05, -8.821448318485636e-06, 0.0, -8.821098163025454e-05, -0.0010600429959595203, -3.2186455882765586e-06, -3.576278118089249e-07, -1.672235369682312, -5.864924969500862e-05, -0.1294213980436325, -0.018522510305047035, -0.0015864893794059753, -0.00199083867482841, -0.3229568898677826, -0.010764861479401588, -0.005282136145979166, -5.8412379075889476e-06, -0.0037949702236801386, -9.417489309271332e-06, -0.00013541258522309363, -0.0034690459724515676, -0.005071869120001793, -0.1936696618795395, -0.4548759162425995, -0.20815880596637726, -0.020209239795804024, -1.195481300354004, -0.0006335158832371235, -0.18203485012054443, -0.00015889335190877318, -0.006689771544188261, -0.000523430178873241, -0.4411374628543854, -0.034896768629550934, -0.004030201584100723, -1.883488948806189e-05, -0.26127561926841736, -0.6550574898719788, -0.8911491632461548, -2.2451813220977783, -0.04950069263577461, -1.368391513824463, -0.0199319776147604, -0.024023862555623055, -0.24385790526866913, -2.0326478481292725, -0.055150385946035385, -0.3711218535900116, -0.7845180630683899, -0.006173233035951853, -0.0012865131720900536, -0.06562863290309906, -6.890059739816934e-05, -0.0012061471352353692, -0.007161897141486406, -7.152555099310121e-07, -0.03983556106686592, -0.05966375395655632, -0.0022387460339814425, -0.004875556565821171, -0.02993612177670002, -0.008713793940842152, -0.06416556239128113, -0.008322085253894329, -0.07381508499383926, -1.5869508981704712, -0.12874078750610352, -0.31703636050224304, -0.009119524620473385, -0.02739771082997322, -0.26984989643096924, -0.006526228040456772, -0.0943962037563324, -0.16759838163852692, -0.002072688192129135, -0.20757178962230682, -0.00886185560375452, -1.311301275563892e-06, -2.0146166207268834e-05, -0.0001714082609396428, -9.536738616588991e-07, -2.3841855067985307e-07, -1.1920922133867862e-06, -0.004941512830555439, -0.006713928189128637, -1.1920858014491387e-05, -1.847726889536716e-05, -0.04232069477438927, -0.038868486881256104, -0.012179998680949211, -1.2418185472488403], "finish_reason": "stop"}], "metrics": {"energy": 716.9554810352331, "energy_per_token": 3.414073719215396, "time": 17.857515, "time_per_token": 0.08503578571428572}}
{"outputs": [{"text": "all_texts = []\n    for file in os.listdir(json_dir_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(json_dir_path, file)) as f:\n                all_texts.append(json.load(f)['text'])\n    df = pd.DataFrame(columns = ['text'])\n    df['text'] = all_texts\n    df['tokenized_text'] = df['text'].apply(lambda x: x.split())\n    all_tokens = []\n    for tokens in df['tokenized_text']:\n        all_tokens.extend(tokens)\n    freq_counter = Counter(all_tokens)\n    top_freq_words = freq_counter.most_common(word_count)\n    return top_freq_words", "tokens": ["all", "_", "text", "s", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "))", " as", " f", ":", "\n", "                ", "all", "_", "text", "s", ".", "append", "(", "json", ".", "load", "(", "f", ")", "['", "text", "'])", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", " =", " ['", "text", "'])", "\n", "    ", "df", "['", "text", "']", " =", " all", "_", "text", "s", "\n", "    ", "df", "['", "token", "ized", "_", "text", "']", " =", " df", "['", "text", "']", ".", "apply", "(", "lambda", " x", ":", " x", ".", "split", "())", "\n", "    ", "all", "_", "tokens", " =", " []", "\n", "    ", "for", " tokens", " in", " df", "['", "token", "ized", "_", "text", "']", ":", "\n", "        ", "all", "_", "tokens", ".", "extend", "(", "tokens", ")", "\n", "    ", "freq", "_", "counter", " =", " Counter", "(", "all", "_", "tokens", ")", "\n", "    ", "top", "_", "freq", "_", "words", " =", " fre", "q", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " top", "_", "freq", "_", "words", "\n", "\n", "def"], "logprobs": [-2.5497190952301025, -0.014568972401320934, -0.7855985760688782, -1.070403814315796, -0.024728991091251373, -0.0924932211637497, -0.025878164917230606, -0.20268528163433075, -0.219517320394516, -0.47904565930366516, -0.3912692070007324, -0.016658609732985497, -3.6954811548639555e-06, -0.05138256773352623, 0.0, -0.00013636612857226282, -0.00249087275005877, -2.3364747903542593e-05, -0.00020466140995267779, -0.0001003691868390888, -1.1920922133867862e-06, -0.0011373248416930437, -0.006847960874438286, -0.008847322314977646, -0.3925795257091522, -0.05049845948815346, -0.0011923355050384998, -0.0033372920006513596, -4.410734163684538e-06, 0.0, -0.32247498631477356, -0.0005653690313920379, -0.016450604423880577, -0.0008673481643199921, -9.775113539944869e-06, -0.004604451823979616, -0.006028326693922281, -0.0019462230848148465, -0.31261932849884033, -0.000161038784426637, -0.0023624387104064226, -0.20175409317016602, -7.152555099310121e-07, -3.421248038648628e-05, -3.576278118089249e-07, -0.0002506657037883997, -4.1483970562694594e-05, -0.0005040090763941407, -5.602820692729438e-06, -3.2186455882765586e-06, -1.2993727978027891e-05, -8.344646857949556e-07, -0.000243634101934731, -0.012412559241056442, -1.300971269607544, -0.0004287039046175778, -0.6307414174079895, -0.025049107149243355, -0.004459436517208815, -0.0012240068754181266, -3.151793956756592, -0.000538680877070874, -0.0899241492152214, -0.004215640481561422, -0.13132235407829285, -0.14299048483371735, -0.016156110912561417, -0.05731562525033951, -2.539125671319198e-05, -0.03182315453886986, -2.253030106658116e-05, -0.0002329078270122409, -1.2984439134597778, -0.09061568230390549, -0.0008586533949710429, -0.053073376417160034, -0.009525444358587265, -0.6829409003257751, -2.3388819694519043, -0.02394646778702736, -0.0010101459920406342, -2.6464111215318553e-05, -0.12290806323289871, -0.6175169944763184, -2.999668598175049, -2.4297728538513184, -0.2612835168838501, -0.2254703789949417, -0.13138152658939362, -0.01569807156920433, -0.0067061129957437515, -0.04398661479353905, -0.11171892285346985, -0.0020785173401236534, -0.0009762050467543304, -0.008473396301269531, -0.053815823048353195, -3.814689989667386e-06, -1.0251946150674485e-05, -4.088794958079234e-05, -0.005635327193886042, -0.12904217839241028, -1.1672401428222656, -0.26945334672927856, -2.7993664741516113, -0.2841523587703705, -0.25429144501686096, -0.10163706541061401, -0.011282924562692642, -0.006379477679729462, -0.02196217142045498, -0.1579371839761734, -1.4305012882687151e-05, -0.0004001055203843862, -0.002438787603750825, -0.8571128845214844, -0.002745432546362281, -0.10273617506027222, -0.10896570235490799, -0.04034679755568504, -0.1908499151468277, -0.0009600082994438708, -0.0648965835571289, -0.1498522311449051, -0.03345867991447449, -0.07455866783857346, -2.0294859409332275, -0.0032242953311651945, -1.291622519493103, -0.04041457921266556, -0.7006993293762207, -0.0016782497987151146, -0.006806639954447746, -0.04012465476989746, -1.7010893821716309, -0.04620732367038727, -0.014102447777986526, -0.03841465711593628, -1.9907753085135482e-05, 0.0, -4.768370445162873e-07, -3.576278118089249e-07, -1.3112935448589269e-05, -0.2515661120414734, -0.003172367112711072, -0.008982723578810692, -0.14014321565628052, -2.7418097943154862e-06, -1.0609570381348021e-05, -0.40392056107521057, -0.0032458023633807898, -0.009640919975936413, -0.0047490899451076984, -0.0027585094794631004, -0.002558888401836157, -0.08365979045629501, -4.614581108093262, -0.3249286413192749, -1.4970974922180176, -0.011095726862549782, -0.009423183277249336, -0.014542303048074245, -0.003754116827622056, -2.3841830625315197e-06, -1.3589766240329482e-05, -0.0006705658161081374, -0.09324129670858383, -0.01733263023197651, -2.516298532485962, -0.03220207244157791, -1.5774401426315308, -0.3711095154285431, -0.27348455786705017, -0.031046047806739807, -0.31301113963127136, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.1920922133867862e-06, -9.452849917579442e-05, -3.564294092939235e-05, -3.4570634852570947e-06, -2.264974000354414e-06, -0.06793618202209473, -0.025666259229183197, -1.3112935448589269e-05, -1.7404405298293568e-05, -0.004812562372535467, -0.004857406485825777, -0.06166526675224304, -0.09573276340961456, -0.037846993654966354, -3.576278118089249e-07, -5.960446742392378e-06, -4.172316494077677e-06, -3.9457496313843876e-05, -0.1871999353170395, -0.01548775378614664, -0.9856839776039124], "finish_reason": "stop"}], "metrics": {"energy": 681.8812575426091, "energy_per_token": 3.4438447350636823, "time": 16.629082, "time_per_token": 0.08398526262626263}}
{"outputs": [{"text": "json_file_list = [json_file for json_file in os.listdir(json_dir_path) if json_file.endswith('.json')]\n    json_file_path_list = [os.path.join(json_dir_path, file_name) for file_name in json_file_list]\n    json_file_content_list = []\n    for path in json_file_path_list:\n        with open(path) as f:\n            content = json.load(f)\n        json_file_content_list.append(content)\n\n    df = pd.DataFrame(json_file_content_list)\n    text_content = df['text'].astype(str).str.cat(sep=' ')\n    text_content = text_content.split(' ')\n    c = Counter(text_content)\n    top_words = c.most_common(word_count)\n    return top_words", "tokens": ["json", "_", "file", "_", "list", " =", " [", "json", "_", "file", " for", " json", "_", "file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", " if", " json", "_", "file", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "    ", "json", "_", "file", "_", "path", "_", "list", " =", " [", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "_", "name", ")", " for", " file", "_", "name", " in", " json", "_", "file", "_", "list", "]", "\n", "    ", "json", "_", "file", "_", "content", "_", "list", " =", " []", "\n", "    ", "for", " path", " in", " json", "_", "file", "_", "path", "_", "list", ":", "\n", "        ", "with", " open", "(", "path", ")", " as", " f", ":", "\n", "            ", "content", " =", " json", ".", "load", "(", "f", ")", "\n", "        ", "json", "_", "file", "_", "content", "_", "list", ".", "append", "(", "content", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "json", "_", "file", "_", "content", "_", "list", ")", "\n", "    ", "text", "_", "content", " =", " df", "['", "text", "']", ".", "ast", "ype", "(", "str", ")", ".", "str", ".", "cat", "(", "sep", "='", " '", ")", "\n", "    ", "text", "_", "content", " =", " text", "_", "content", ".", "split", "('", " '", ")", "\n", "    ", "c", " =", " Counter", "(", "text", "_", "content", ")", "\n", "    ", "top", "_", "words", " =", " c", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " top", "_", "words", "\n", "\n", "def"], "logprobs": [-2.843881845474243, -0.03998080641031265, -1.3001677989959717, -0.08153870701789856, -1.63067626953125, -0.006547664292156696, -0.9998264312744141, -2.6165342330932617, -0.02196030505001545, -0.27256911993026733, -0.27221497893333435, -0.011240136809647083, -9.369411418447271e-05, -0.0006743779522366822, -0.00189779803622514, -0.013279917649924755, -6.079655122448457e-06, -0.024716313928365707, -1.1920928244535389e-07, -0.0002824861148837954, -0.011868693865835667, -2.992108420585282e-05, -0.00040951924165710807, -0.0002873722987715155, -1.4185804502631072e-05, -0.01792634092271328, -0.039693620055913925, -0.16145537793636322, -0.0007823029300197959, -0.000575376907363534, -0.010330302640795708, -0.008849212899804115, -0.00025876989820972085, -1.6689286894688848e-06, -0.5270196795463562, -0.0239937212318182, -0.00040141629870049655, -7.247662142617628e-05, -0.004927989561110735, -0.02124505117535591, -0.29598739743232727, -1.952958583831787, -0.0054675801657140255, -1.6090830564498901, -0.025239290669560432, -0.616269052028656, -0.0885654017329216, -0.011347516439855099, -0.002250283258035779, -0.030445044860243797, -0.5463992357254028, -1.1205610462639015e-05, -0.0010207447921857238, -8.583032467868179e-06, -0.005564438179135323, -0.0002499506517779082, -0.005281542893499136, -6.6756979322235566e-06, -8.618460560683161e-05, -6.961580220377073e-05, -1.0847986231965479e-05, -0.001142206834629178, -2.4831182956695557, -0.7331488728523254, -0.17586828768253326, -0.0019869126845151186, -0.00599763635545969, -0.00020966715237591416, -5.006777428206988e-06, -1.5258672647178173e-05, -0.0002768848498817533, -0.003199579194188118, -1.2278481335670222e-05, -2.145764938177308e-06, -1.0728830375228426e-06, -3.933898824470816e-06, -0.01011236198246479, -0.003115088678896427, -0.30625012516975403, -1.537083625793457, -0.0024028734769672155, -1.4280537366867065, -0.014365584589540958, -1.6383631229400635, -0.24564114212989807, -0.07616758346557617, -0.005647418089210987, -1.7592949867248535, -0.004222288262099028, -0.22352752089500427, -0.09381528198719025, -3.1883902549743652, -0.03704572468996048, -0.0010488491971045732, -3.4570634852570947e-06, -2.3841855067985307e-07, -2.3841855067985307e-07, -6.067568756407127e-05, -1.4305104514278355e-06, 0.0, -0.002379921032115817, -0.0017876134952530265, -0.008672431111335754, -0.08726522326469421, -0.000376034586224705, -0.0013469918631017208, -0.01575404778122902, -1.2774869203567505, -0.0006449526408687234, -0.7813486456871033, -0.03671126812696457, -0.007826615124940872, -0.004387752152979374, -2.145401954650879, -0.0765548050403595, -0.07441604137420654, -4.3748852476710454e-05, -0.021412741392850876, -2.5629668016335927e-05, -0.0005043664714321494, -0.03402065858244896, -0.36818450689315796, -2.1007158756256104, -0.11584339290857315, -2.13382354559144e-05, -0.0017216873820871115, -3.2186455882765586e-06, -0.0002051381452474743, -0.0003053675754927099, -3.957670196541585e-05, -0.023138638585805893, -0.012156208977103233, -0.008906282484531403, -0.019205916672945023, -0.1842544972896576, -0.0019453902496024966, -1.5564112663269043, -0.0009179668850265443, -1.48411226272583, -0.04047754406929016, -0.001446987851522863, -1.6093124941107817e-05, -0.055363692343235016, -0.04253355786204338, -0.012574437074363232, -0.00010525626566959545, -3.397406908334233e-05, -1.1920928244535389e-07, -1.5020257706055418e-05, -1.4305104514278355e-06, 0.0, -0.04283649101853371, -0.022467589005827904, -0.18710681796073914, -0.7373341917991638, -0.39272668957710266, -0.9779378771781921, -0.15042386949062347, -0.6186086535453796, -0.17091231048107147, -0.00014959646796341985, -0.003578807692974806, -0.6727939248085022, -3.2897040843963623, -4.768370445162873e-07, -0.30753642320632935, -0.004091345705091953, -0.0014807938132435083, -0.49944886565208435, -0.28974035382270813, -0.00026520551182329655, -0.7570956349372864, -0.04780769348144531, -0.0002575780963525176, -0.05866576358675957, -0.10495857894420624, -0.0005644158809445798, -0.14743046462535858, -0.32405930757522583, -1.3043482303619385, -0.010665911249816418, -0.32765403389930725, -0.8042994737625122, -0.175309419631958, -1.6331539882230572e-05, -2.861018856492592e-06, -0.0038168213795870543, -0.42837291955947876, -0.7710123658180237, -0.0017603629967197776, -0.001663373550400138, -0.014108794741332531, -0.25533244013786316, -3.269303798675537, -0.0173968318849802, -0.002176061272621155, -0.009702075272798538, -0.004419440869241953, -1.537788011773955e-05, -1.0728830375228426e-06, -0.0002112165529979393, -0.04441819712519646, -0.128152534365654, -3.139348030090332, -0.03207462653517723, -0.8749282360076904, -0.1134820505976677, -0.1206507533788681, -2.6702524337451905e-05, -5.709961988031864e-05, -3.576272320060525e-06, -5.245195097813848e-06, -0.0958116203546524, -0.01988125964999199, -1.3828182090946939e-05, -1.5616295058862306e-05, -0.0043007503263652325, -0.00435000890865922, -0.3240549862384796, -0.08468835800886154, -0.017046481370925903, -4.768370445162873e-07, -5.364403477869928e-06, -0.17678332328796387, -0.01115431822836399, -0.961265504360199], "finish_reason": "stop"}], "metrics": {"energy": 792.1004403877251, "energy_per_token": 3.504869205255421, "time": 19.086393, "time_per_token": 0.08445306637168142}}
{"outputs": [{"text": "all_json_data = []\n    for file in os.listdir(json_dir_path):\n        if file.endswith('.json'):\n            with open(os.path.join(json_dir_path, file), 'r') as json_file:\n                data = json.load(json_file)\n                all_json_data.append(data)\n\n    df = pd.DataFrame(all_json_data)\n    word_list = df['text'].str.split(expand=True).stack().value_counts()\n\n    word_counts = [(word, count) for word, count in Counter(word_list).items()]\n\n    most_common_words = sorted(word_counts, key=lambda x: x[1], reverse=True)\n    most_common_words = most_common_words[:word_count]\n    return most_common_words", "tokens": ["all", "_", "json", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", ",", " '", "r", "')", " as", " json", "_", "file", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "                ", "all", "_", "json", "_", "data", ".", "append", "(", "data", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "all", "_", "json", "_", "data", ")", "\n", "    ", "word", "_", "list", " =", " df", "['", "text", "']", ".", "str", ".", "split", "(", "expand", "=", "True", ")", ".", "stack", "()", ".", "value", "_", "counts", "()", "\n", "\n", "    ", "word", "_", "counts", " =", " [(", "word", ",", " count", ")", " for", " word", ",", " count", " in", " Counter", "(", "word", "_", "list", ")", ".", "items", "()", "]", "\n", "\n", "    ", "most", "_", "common", "_", "words", " =", " sorted", "(", "word", "_", "counts", ",", " key", "=", "lambda", " x", ":", " x", "[", "1", "]", ",", " reverse", "=", "True", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " most", "_", "common", "_", "words", "[:", "word", "_", "count", "]", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "def"], "logprobs": [-2.5497190952301025, -0.014568972401320934, -2.4385926723480225, -0.2780337631702423, -2.0534112453460693, -0.056770868599414825, -0.16757428646087646, -0.033239610493183136, -0.21055135130882263, -0.25460365414619446, -0.37859639525413513, -0.3497738838195801, -0.016253933310508728, -4.410734163684538e-06, -0.02555692009627819, 0.0, -0.00011681827891152352, -0.0029262362513691187, -2.4914430468925275e-05, -0.00040975757292471826, -0.0001546025014249608, -5.125986263010418e-06, -0.0016612313920632005, -0.006035554688423872, -0.008954369463026524, -0.32611337304115295, -0.030009007081389427, -0.0012959185987710953, -0.0030844276770949364, -6.437280717364047e-06, 0.0, -1.2376587390899658, -0.018742134794592857, -0.000809699238743633, -1.4543427823809907e-05, -0.005550567992031574, -0.014196240343153477, -0.0016737275291234255, -0.2861776053905487, -0.00017438798386137933, -0.0021401375997811556, -0.23535506427288055, -1.311301275563892e-06, -7.986703712958843e-05, -8.344646857949556e-07, -0.00029273517429828644, -8.129743218887597e-05, -0.0006796196103096008, -1.5616295058862306e-05, -4.6491513785440475e-06, -9.417489309271332e-06, 0.0, -0.0002708068350329995, -0.01335673127323389, -0.38363343477249146, -0.00015817821258679032, -0.1186378002166748, -0.00817559752613306, -0.040154315531253815, -0.0003599472693167627, -2.0089213848114014, -0.014772318303585052, -0.11735972762107849, -0.001260677701793611, -0.001752984942868352, -0.0016594461631029844, -1.162893295288086, -0.02081841044127941, -0.022568175569176674, -0.002834114944562316, -0.011882476508617401, -2.13382354559144e-05, -4.029192859889008e-05, -3.6954811548639555e-06, -5.960462772236497e-07, -0.0027462646830826998, -0.014830577187240124, -0.11456376314163208, -0.2593024671077728, -3.933898824470816e-06, -0.002096956130117178, -1.0371154530730564e-05, -0.00011955977242905647, -0.029310256242752075, -0.08910544216632843, -0.025165244936943054, -0.029147012159228325, -0.2383056879043579, -0.007094430737197399, -0.38562753796577454, -0.001998809864744544, -1.4905904531478882, -0.021928466856479645, -0.0008679436868987978, -1.5258672647178173e-05, -0.04942762851715088, -0.021149467676877975, -0.004031389020383358, -2.3841855067985307e-07, -2.3841855067985307e-07, -1.1920928244535389e-07, 0.0, -0.018686678260564804, -0.01850203052163124, -0.23033569753170013, -3.4986753463745117, -0.013311443850398064, -1.93827486038208, -0.014659431762993336, -0.6402621865272522, -0.35342663526535034, -0.0006618693005293608, -0.0010091932490468025, -0.0018826870946213603, -0.10568902641534805, -7.56950321374461e-05, -0.07086262851953506, -0.058988235890865326, -0.01065659336745739, -0.00610392214730382, -0.011756186373531818, -0.0008964095613919199, -0.0023789696861058474, -0.0021766559220850468, -0.004438430070877075, -0.16215097904205322, -0.21728813648223877, -2.622600959512056e-06, -2.145764938177308e-06, -0.058473289012908936, -0.15643419325351715, -1.3542821407318115, -0.0003594706067815423, -2.3633975982666016, -0.013458944857120514, -2.0765395164489746, -0.0454975925385952, -2.0833373069763184, -0.5428429245948792, -0.1076345294713974, -0.12400806695222855, -0.005081832408905029, -0.006353654898703098, -0.006997838616371155, -0.00017581824795342982, -0.0020681675523519516, -0.0004659997357521206, -2.369994878768921, -0.012164806015789509, -0.18872040510177612, -0.0007190502947196364, -0.00018189683032687753, -0.09321665018796921, -0.00014172980445437133, -1.040163278579712, -0.00026603974401950836, -0.10973275452852249, -0.0028936679009348154, -1.3188884258270264, -0.0002536452084314078, -1.227059006690979, -0.0005197366117499769, -0.05295263230800629, -0.13176614046096802, -0.06550191342830658, -0.012331904843449593, -0.14013367891311646, -0.0018641252536326647, -0.008728919550776482, -8.344646857949556e-07, -6.3774932641536e-05, -0.004591398872435093, -0.005196635145694017, -0.001738466788083315, -0.0005616756388917565, -0.03306328132748604, -0.0006775943911634386, -1.273937702178955, -0.002098026918247342, -0.01009383425116539, -0.001928376266732812, -0.0004389514506328851, -0.0008423355757258832, -0.0009130837861448526, -0.0017241863533854485, -0.015310145914554596, -1.3316034078598022, -1.242557168006897, -0.9715368151664734, -9.846202738117427e-05, -0.01184042077511549, -0.013433186337351799, -0.0560140460729599, -0.08416236937046051, -0.1448095440864563, -2.3841855067985307e-07, -2.0265558760002023e-06, -9.536738616588991e-07, -9.298280929215252e-06, -0.028611017391085625, -0.016607023775577545, -1.2516897186287679e-05, -1.5258672647178173e-05, -0.0028338772244751453, -0.007800829131156206, -1.601931095123291, -0.19426754117012024, -0.008907109498977661, -1.4305104514278355e-06, -6.9141146923357155e-06, -4.0531076592742465e-06, -2.0265373677830212e-05, -0.24655267596244812, -0.011974357068538666, -1.228429913520813], "finish_reason": "stop"}], "metrics": {"energy": 750.1432668275834, "energy_per_token": 3.489038450360853, "time": 18.061258, "time_per_token": 0.08400585116279069}}
{"outputs": [{"text": "# Initialize an empty list to store the text content from JSON files\n    text_list = []\n\n    # Iterate through all the files in the specified directory\n    for file in os.listdir(json_dir_path):\n        # If the file is a JSON file\n        if file.endswith(\".json\"):\n            # Open the file in read mode\n            with open(f\"{json_dir_path}/{file}\", \"r\") as f:\n                # Load the data from the file as Python objects\n                data = json.load(f)\n                # Extract the text content from the data\n                text = data['text']\n                # Append the extracted text to the text_list\n                text_list.append(text)\n\n    # Concatenate all the extracted text into a single string\n    full_text = \" \".join(text_list)\n\n    # Split the full text into individual words, accounting for punctuation marks and apostrophes\n    words = re.findall(r'\\w+|[^\\w\\s]', full_text)\n\n    # Count the occurrence of", "tokens": ["#", " Initialize", " an", " empty", " list", " to", " store", " the", " text", " content", " from", " JSON", " files", "\n", "    ", "text", "_", "list", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " all", " the", " files", " in", " the", " specified", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "#", " If", " the", " file", " is", " a", " JSON", " file", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "#", " Open", " the", " file", " in", " read", " mode", "\n", "            ", "with", " open", "(", "f", "\"", "{", "json", "_", "dir", "_", "path", "}/{", "file", "}\"", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "#", " Load", " the", " data", " from", " the", " file", " as", " Python", " objects", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "#", " Ext", "ract", " the", " text", " content", " from", " the", " data", "\n", "                ", "text", " =", " data", "['", "text", "']", "\n", "                ", "#", " App", "end", " the", " extracted", " text", " to", " the", " text", "_", "list", "\n", "                ", "text", "_", "list", ".", "append", "(", "text", ")", "\n", "\n", "    ", "#", " Con", "cat", "en", "ate", " all", " the", " extracted", " text", " into", " a", " single", " string", "\n", "    ", "full", "_", "text", " =", " \"", " \"", ".", "join", "(", "text", "_", "list", ")", "\n", "\n", "    ", "#", " Split", " the", " full", " text", " into", " individual", " words", ",", " accounting", " for", " punct", "uation", " marks", " and", " apost", "rop", "hes", "\n", "    ", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "w", "+|", "[", "^\\", "w", "\\", "s", "]", "'", ",", " full", "_", "text", ")", "\n", "\n", "    ", "#", " Count", " the", " occurrence", " of"], "logprobs": [-1.1805613040924072, -1.5686018466949463, -0.3352009057998657, -0.0023097521625459194, -0.3684383034706116, -0.056291062384843826, -0.12601424753665924, -0.5022952556610107, -0.49483853578567505, -0.5377063751220703, -0.38578590750694275, -0.9722471237182617, -0.0013569919392466545, -0.12287876009941101, -0.0006507901125587523, -0.7227342128753662, -0.23436744511127472, -0.5983728170394897, -0.013509400188922882, -0.009478684514760971, -0.0008578196284361184, -0.38677069544792175, -0.0003761537664104253, -0.007914019748568535, -1.0626384019851685, -0.0014218707801774144, -1.2428332567214966, -0.450283408164978, -0.5556638240814209, -0.5180227756500244, -0.007711521815508604, -0.0021113501861691475, -0.6747602224349976, -0.011637420393526554, -0.04377200827002525, -0.00012039413559250534, -0.015720956027507782, -0.3685503900051117, -0.34457898139953613, -0.007764989044517279, -5.602820692729438e-06, -0.033302683383226395, 0.0, -0.00014649749209638685, -0.0016678959364071488, -1.6927575416048057e-05, -1.549708758830093e-05, -5.94836674281396e-05, -1.1920928244535389e-07, -0.0005442806868813932, -0.0006144542712718248, -0.05442733317613602, -0.22347822785377502, -1.9964449405670166, -0.06466049700975418, -0.038094088435173035, -0.18740761280059814, -0.02509642392396927, -0.023923655971884727, -0.0015428080223500729, -1.0412383079528809, -0.00024959311122074723, -0.0021384721621870995, -0.05939676985144615, -0.00048601735034026206, -0.0020379505585879087, -4.768370445162873e-07, 0.0, -0.2924925982952118, -0.0006432848167605698, -0.011301430873572826, -0.00034314466756768525, -5.245195097813848e-06, -0.004588194657117128, -0.00023779425828251988, -0.007326638791710138, -0.06570487469434738, -0.66636061668396, -0.028841756284236908, -0.7337018251419067, -0.673023521900177, -0.04315314441919327, -0.012314831838011742, -0.31430941820144653, -8.141662692651153e-05, -0.014735435135662556, -9.393251093570143e-05, -0.0018914919346570969, -1.945810317993164, -0.11246276646852493, -0.0002650863316375762, -0.005903901532292366, -9.417489309271332e-06, -2.8729025871143676e-05, -1.490105023549404e-05, -3.3378546504536644e-06, -0.023830538615584373, -0.0002320735511602834, -0.00019071667338721454, -0.025526823475956917, -0.4827137589454651, -0.0017999890260398388, -0.0007634824141860008, -0.1320551186800003, -0.00015448330668732524, -0.390034943819046, -0.030040819197893143, -0.0010288427583873272, -0.0027362785767763853, -0.017958657816052437, -0.25553059577941895, -0.01999729871749878, -2.1497411727905273, -0.14647889137268066, -0.005393477622419596, -0.9905855059623718, -0.6183176636695862, -3.0956971645355225, -0.3210635781288147, -0.21090638637542725, -7.283422019099817e-05, -0.2575208842754364, -0.022367458790540695, -0.0028307863976806402, -1.7881377516459906e-06, -0.0163150392472744, -1.3947389561508317e-05, -0.00023636408150196075, -0.0010968389688059688, -0.0011636398267000914, -0.3634163737297058, -0.012857159599661827, -0.4944365620613098, -0.0006708040600642562, -0.03391534090042114, -0.5526784062385559, -0.06399315595626831, -0.031483251601457596, -0.037861913442611694, -0.4080429673194885, -1.2409441471099854, -0.0007312007946893573, -0.14353539049625397, -0.17840665578842163, -0.022176844999194145, -1.6010959148406982, -0.002014156896620989, -0.0005029367166571319, -0.03762314096093178, -0.0249060969799757, -0.0044521973468363285, -1.0465835332870483, -8.67805938469246e-05, -0.011303669773042202, -1.6259251832962036, -0.00377870025113225, -0.23400120437145233, -0.006060081999748945, -1.1138983964920044, -0.13597333431243896, -0.00134222989436239, -0.037176210433244705, -0.0006728292210027575, -0.0032841814681887627, -3.194758028257638e-05, -2.264974000354414e-06, -0.002318315440788865, -0.0022515917662531137, -0.0008000510279089212, -0.0010746901389211416, -0.0032477036584168673, -0.00012933371181134135, -0.02613067254424095, -0.006414775736629963, -0.005447424482554197, -1.9456337690353394, -0.003099520690739155, -0.0002873722987715155, -0.00037055302527733147, -0.09025619924068451, -0.021416474133729935, -2.0998339653015137, -0.4397174119949341, -0.4078788757324219, -0.0298001728951931, -0.010211131535470486, -0.02763105183839798, -0.218462273478508, -9.786603914108127e-05, -2.6947317123413086, -0.012390188872814178, -0.08806612342596054, -0.012647774070501328, -0.633965015411377, -0.11124781519174576, -0.0015400703996419907, -0.00019703354337252676, -0.004846136085689068, -0.005060008727014065, -0.0006656814948655665, -1.0609570381348021e-05, -0.0001486429391661659, -0.004052641335874796, -0.3878585398197174, -0.000331704446580261, -0.0007238152320496738, -0.30897659063339233, -0.0013763965107500553, -0.6991866230964661, -0.3573131263256073, -0.26921650767326355, -0.9482951760292053, -0.005513342563062906, -1.792705774307251, -4.83345890045166, -0.0005041282274760306, -0.17890459299087524, -0.02278306894004345, -0.747503936290741, -1.113059401512146, -3.4980857372283936, -0.002931704046204686, -1.7881377516459906e-06, -0.05329424515366554, -0.0002441108226776123, -0.9227290749549866, -0.171213299036026, -0.5495457053184509, -6.556489552167477e-06, -0.3538264036178589, -2.145764938177308e-06, -0.0024672087747603655, -0.00922276172786951, -0.5149908661842346, -0.327522337436676, -0.6983219981193542, -0.048224564641714096, -0.2172345221042633, -0.17726948857307434, -0.002294409554451704, -1.3828182090946939e-05, -0.08500079810619354, -0.0061124530620872974, -3.969590397900902e-05, -0.0018937526037916541, -7.152555099310121e-07, -4.768370445162873e-07, -0.05868599936366081, -0.00731279281899333, -0.023480921983718872, -0.0003400462737772614, -0.0011148196645081043, -0.5115946531295776, -0.007191959768533707, -2.4203569889068604, -0.0016663487767800689], "finish_reason": "length"}], "metrics": {"energy": 863.0245154075615, "energy_per_token": 3.371189513310787, "time": 21.752457, "time_per_token": 0.08497053515625}}
{"outputs": [{"text": "file_paths = [os.path.join(json_dir_path, file_name) for file_name in os.listdir(json_dir_path)]\n\n    if len(file_paths) > 1000:\n        print(f\"Too many files in the directory: {json_dir_path}\")\n\n    df = pd.DataFrame({'text': [json.load(open(path))['text'] for path in file_paths]})\n\n    text_str = df['text'].str.cat(sep=' ')\n\n    words_list = text_str.split()\n    word_count_dict = Counter(words_list)\n\n    return word_count_dict.most_common(word_count)", "tokens": ["file", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "_", "name", ")", " for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")]", "\n", "\n", "    ", "if", " len", "(", "file", "_", "paths", ")", " >", " ", "1", "0", "0", "0", ":", "\n", "        ", "print", "(", "f", "\"", "Too", " many", " files", " in", " the", " directory", ":", " {", "json", "_", "dir", "_", "path", "}\"", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "text", "':", " [", "json", ".", "load", "(", "open", "(", "path", "))", "['", "text", "']", " for", " path", " in", " file", "_", "paths", "]", "})", "\n", "\n", "    ", "text", "_", "str", " =", " df", "['", "text", "']", ".", "str", ".", "cat", "(", "sep", "='", " '", ")", "\n", "\n", "    ", "words", "_", "list", " =", " text", "_", "str", ".", "split", "()", "\n", "    ", "word", "_", "count", "_", "dict", " =", " Counter", "(", "words", "_", "list", ")", "\n", "\n", "    ", "return", " word", "_", "count", "_", "dict", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "def"], "logprobs": [-3.094095468521118, -0.10983262956142426, -1.3977470397949219, -0.008244764991104603, -0.3006511330604553, -0.5008880496025085, -4.339123915997334e-05, -0.00012420836719684303, -1.0967194612021558e-05, -0.00139639584813267, -0.00015043080202303827, -0.019043589010834694, -3.302042750874534e-05, -0.0003333727945573628, -0.0014698426239192486, -6.544376083184034e-05, -0.0006661579827778041, -0.9192780256271362, -0.7694216370582581, -0.028872564435005188, -0.0013711584033444524, -0.28807076811790466, -0.0014324652729555964, -2.1457441107486375e-05, -1.6212332411669195e-05, -0.005391817539930344, -0.007982968352735043, -7.033323527139146e-06, -2.2172682292875834e-05, 0.0, -0.0001454247540095821, -0.002061862498521805, -4.291525328881107e-06, -9.298280929215252e-06, -3.325883881188929e-05, -9.536738616588991e-07, -1.284551978111267, -0.012860572896897793, -1.65868079662323, -0.0005470209871418774, -4.107542991638184, -1.315488338470459, -0.0005760917556472123, -0.00812499038875103, -5.960446742392378e-06, -1.5735502529423684e-05, -0.0029021073132753372, -2.6997900009155273, -0.003195063676685095, -1.7563462257385254, -0.5396764278411865, -0.27761417627334595, -0.5864720940589905, -0.8846072554588318, -0.011487175710499287, -0.008002717979252338, -2.158045768737793, -0.07312224805355072, -1.1466529369354248, -0.13607041537761688, -2.706169605255127, -0.05232370272278786, -0.21619194746017456, -0.8661653399467468, -0.4498334228992462, -0.1697710007429123, -1.430658221244812, -0.028174063190817833, -1.1838350296020508, -6.532455881824717e-05, -4.8397800128441304e-05, -7.176141662057489e-05, -3.45700973412022e-05, -0.410385400056839, -0.006483709439635277, -0.005407350137829781, -2.0006103515625, -0.013958451338112354, -1.1754231452941895, -0.05342003330588341, -0.011818037368357182, -4.3987260141875595e-05, -0.7385280132293701, -2.1510496139526367, -0.16023780405521393, -0.2781578600406647, -0.04127652570605278, -0.20933471620082855, -0.3445831835269928, -0.0007303669699467719, -0.35579821467399597, -0.002531421137973666, -0.006268364377319813, -0.003811833681538701, -2.366394281387329, -0.2632282078266144, -0.11116781830787659, -0.0005614373367279768, -0.001013480476103723, -0.020033754408359528, -0.0001941730733960867, -8.785339014139026e-05, -0.004700919147580862, -3.2186455882765586e-06, -3.576278118089249e-07, -0.028148680925369263, -0.003510267473757267, -0.008022703230381012, -0.5585446953773499, -0.0002631794777698815, -2.244748115539551, -0.969326376914978, -3.638671636581421, -0.011581802740693092, -1.6757341623306274, -0.23817014694213867, -1.2159273865108844e-05, -0.004998923745006323, -0.0029867347329854965, -0.213816836476326, -0.00048137042904272676, -0.10606895387172699, -0.02582252025604248, -0.0007278653793036938, -0.050286948680877686, -0.07118962705135345, -0.0008470999309793115, -0.14800626039505005, -0.6409733295440674, -0.00019393471302464604, -1.7534141540527344, -1.6198818683624268, -0.9008328914642334, -0.00687092961743474, -0.37723997235298157, -1.2636104656849056e-05, -1.0967194612021558e-05, -0.00020776021119672805, -0.014318815432488918, -0.4663465619087219, -0.018736403435468674, -1.4180128574371338, -1.318850040435791, -0.008476587943732738, -1.031293272972107, -0.16353699564933777, -0.22721430659294128, -0.005320437252521515, -0.21018554270267487, -0.007668343838304281, -0.010752124711871147, -6.222531374078244e-05, -1.0728830375228426e-06, -0.0011461363174021244, -0.2764703333377838, -0.4885377287864685, -0.00024470672360621393, -1.5214697122573853, -0.16265109181404114, -1.2874520507466514e-05, -5.280832192511298e-05, -0.0002668739762157202, -7.486063259420916e-05, -0.0006490031373687088, -1.7404405298293568e-05, -2.8371408916427754e-05, -1.1801649634435307e-05, -0.020486075431108475, -0.008557199500501156, -1.1801649634435307e-05, -1.6689160474925302e-05, -0.09015936404466629, -0.0847870409488678, -0.009424836374819279, -1.1093697547912598], "finish_reason": "stop"}], "metrics": {"energy": 619.6961868019105, "energy_per_token": 3.5411210674394886, "time": 14.780663, "time_per_token": 0.08446093142857143}}
{"outputs": [{"text": "# Read all the JSON files from the specified directory\n    json_files = [f for f in os.listdir(json_dir_path) if f.endswith('.json')]\n    all_text_data = []\n    for file in json_files:\n        with open(os.path.join(json_dir_path, file), 'r') as f:\n            json_data = json.load(f)\n            all_text_data.extend(json_data['text'])\n\n    # Count the number of occurrences of each word\n    word_counts = Counter(word for text in all_text_data for word in text.split())\n\n    # Get the word_count most common words and their counts\n    most_common_words = word_counts.most_common(word_count)\n\n    return most_common_words", "tokens": ["#", " Read", " all", " the", " JSON", " files", " from", " the", " specified", " directory", "\n", "    ", "json", "_", "files", " =", " [", "f", " for", " f", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", " if", " f", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "    ", "all", "_", "text", "_", "data", " =", " []", "\n", "    ", "for", " file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "json", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "all", "_", "text", "_", "data", ".", "extend", "(", "json", "_", "data", "['", "text", "'])", "\n", "\n", "    ", "#", " Count", " the", " number", " of", " occurrences", " of", " each", " word", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "word", " for", " text", " in", " all", "_", "text", "_", "data", " for", " word", " in", " text", ".", "split", "())", "\n", "\n", "    ", "#", " Get", " the", " word", "_", "count", " most", " common", " words", " and", " their", " counts", "\n", "    ", "most", "_", "common", "_", "words", " =", " word", "_", "counts", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "print"], "logprobs": [-1.1805613040924072, -2.4826319217681885, -0.24214372038841248, -0.9541025161743164, -0.1013680249452591, -0.009049000218510628, -1.7684601545333862, -0.05451425537467003, -0.9234530329704285, -0.009595109149813652, -0.15889988839626312, -0.0027004939038306475, -0.8668296337127686, -0.010157794691622257, -0.30953195691108704, -0.014939804561436176, -0.24832786619663239, -1.4418928623199463, -0.08552120625972748, -0.000527123745996505, -3.075552376685664e-05, -0.004789309576153755, -8.618460560683161e-05, -0.005396916065365076, 0.0, -0.00011669908417388797, -0.00997923780232668, -2.062299427052494e-05, -1.823885577323381e-05, -0.00030763185350224376, -5.960462772236497e-07, -0.0051688845269382, -0.0019302800064906478, -0.19936950504779816, -0.0006554362480528653, -0.0009332115878351033, -7.152555099310121e-07, 0.0, -0.4869009554386139, -0.003937944304198027, -0.00029237763374112546, -3.540453326422721e-05, -0.003615630092099309, -0.0014911495381966233, -0.28191888332366943, -2.2515316009521484, -0.00018273114983458072, -0.38398054242134094, -2.537586212158203, -1.4192934036254883, -0.003592824097722769, -0.09080490469932556, -0.009624626487493515, -0.11423543840646744, -0.023418739438056946, -1.5619844198226929, -0.11156752705574036, -0.0011542332358658314, -3.2186455882765586e-06, -1.5497195136049413e-06, -0.00013314791431184858, -0.00022790218645241112, -0.0030758711509406567, -0.16632843017578125, -5.924526340095326e-05, -0.0013233008794486523, -0.15038366615772247, -3.4570634852570947e-06, -2.0265373677830212e-05, -8.344646857949556e-07, -0.00011586471373448148, -6.472854875028133e-05, -0.0003678122302517295, -2.9802276912960224e-06, -1.6093124941107817e-05, -3.45700973412022e-05, -1.311301275563892e-06, -0.00014244495832826942, -0.005776616279035807, -0.2329864650964737, -4.3748852476710454e-05, -0.10263559222221375, -0.002217574045062065, -0.027842655777931213, -0.00011634149996098131, -0.04647956043481827, -0.0067402152344584465, -0.0011634016409516335, -0.0013409203384071589, -2.009394645690918, -0.0011520899133756757, -0.031745895743370056, -0.0006774752982892096, -0.0025448575615882874, -2.622600959512056e-06, -0.003052815329283476, -1.1801649634435307e-05, -6.925819616299123e-05, -0.0006459057331085205, -0.003682737937197089, -0.04675706848502159, -0.6506209969520569, -2.0265558760002023e-06, -5.090107151772827e-05, -7.509902934543788e-05, -9.775113539944869e-06, -0.04634242504835129, -1.5740448236465454, -0.026382071897387505, -0.060169897973537445, -9.119095193454996e-05, -3.4570634852570947e-06, -0.3420795798301697, -0.010256323963403702, -0.30380332469940186, -0.025049107149243355, -0.09896637499332428, -0.003812665119767189, -0.021480297669768333, -1.8163317441940308, -0.08181017637252808, -2.631463050842285, -0.0014481781981885433, -0.2349727749824524, -0.035903915762901306, -0.00985813606530428, -0.02071869745850563, -0.7301303148269653, -0.00036090059438720345, -0.11328228563070297, -0.0015798242529854178, -0.3380025327205658, -0.000655793643090874, -0.013947165571153164, -0.21611377596855164, -2.3876726627349854, -0.1793239563703537, -0.5359473824501038, -0.2416759431362152, -0.002230301033705473, -2.3841830625315197e-06, -7.033323527139146e-06, -1.9073468138230965e-06, -1.1920928244535389e-07, -0.007450532168149948, -0.0009127265075221658, -7.807903602952138e-05, -0.030517198145389557, -0.005399287678301334, -0.004390363115817308, -0.03265215456485748, -0.0050819506868720055, -0.05766542628407478, -0.0003781795676331967, -0.011008952744305134, -1.3105379343032837, -0.010545836761593819, -3.0444488525390625, -0.17805364727973938, -0.00214406312443316, -0.07051041722297668, -0.019032243639230728, -0.010500303469598293, -0.4028502106666565, -0.013389313593506813, -0.13502027094364166, -0.06291194260120392, -0.00043049128726124763, -0.0904485359787941, -3.373566141817719e-05, -0.0009289240115322173, -0.10953789949417114, -0.009686137549579144, -0.016567276790738106, -0.017305798828601837, -7.152555099310121e-07, -2.586808113846928e-05, -8.22540732769994e-06, -1.1920922133867862e-06, -2.3841830625315197e-06, -2.3841855067985307e-07, -0.015916910022497177, -0.00395848648622632, -4.887569048150908e-06, -1.597391747054644e-05, -0.0009026029147207737, -0.0015728019643574953, -0.10252015292644501, -0.0002774807217065245, -0.17778125405311584, -0.007435386534780264, -1.5497195136049413e-06, -3.814689989667386e-06, -6.794906312279636e-06, -7.629103492945433e-05, -0.17834332585334778, -0.012200489640235901, -3.302126407623291], "finish_reason": "stop"}], "metrics": {"energy": 662.2907405071265, "energy_per_token": 3.3449027298339726, "time": 16.815807, "time_per_token": 0.08492831818181817}}
{"outputs": [{"text": "json_file_paths = [os.path.join(json_dir_path, file_name)\n                    for file_name in os.listdir(json_dir_path) if file_name.endswith('.json')]\n    json_files = [json.load(open(json_path)) for json_path in json_file_paths]\n    texts = [json_file['text'] for json_file in json_files]\n    words = [word for text in texts for word in text.split()]\n    most_common_words = Counter(words).most_common(word_count)\n    return most_common_words", "tokens": ["json", "_", "file", "_", "paths", " =", " [", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", "_", "name", ")", "\n", "                ", "    ", "for", " file", "_", "name", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", " if", " file", "_", "name", ".", "end", "sw", "ith", "('", ".", "json", "')", "]", "\n", "    ", "json", "_", "files", " =", " [", "json", ".", "load", "(", "open", "(", "json", "_", "path", "))", " for", " json", "_", "path", " in", " json", "_", "file", "_", "paths", "]", "\n", "    ", "text", "s", " =", " [", "json", "_", "file", "['", "text", "']", " for", " json", "_", "file", " in", " json", "_", "files", "]", "\n", "    ", "words", " =", " [", "word", " for", " text", " in", " texts", " for", " word", " in", " text", ".", "split", "()", "]", "\n", "    ", "most", "_", "common", "_", "words", " =", " Counter", "(", "words", ")", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "def"], "logprobs": [-2.843881845474243, -0.03998080641031265, -1.3001677989959717, -0.08153870701789856, -0.4641971290111542, -0.0033591531682759523, -0.1682918518781662, -0.36126458644866943, -5.924526340095326e-05, -9.345571743324399e-05, -7.152531907195225e-06, -0.0015793481143191457, -0.00010918975021922961, -0.016070948913693428, -4.4225667807040736e-05, -0.0011801904765889049, -0.0011403016978874803, -0.00010024998482549563, -0.00040189296123571694, -0.7774239778518677, -1.1860203742980957, -0.019830774515867233, -0.0012053137179464102, -1.4048206806182861, -0.01629873551428318, -2.6433534622192383, -0.000301673193462193, -0.0001793938863556832, -1.9907753085135482e-05, -8.21318244561553e-05, -0.002589208772405982, -0.005853178910911083, -6.198863957251888e-06, -2.1219027985353023e-05, 0.0, -0.00028224775451235473, -0.0021123019978404045, -5.125986263010418e-06, -2.062299427052494e-05, -5.8412379075889476e-06, -2.3841830625315197e-06, -0.02382797747850418, -1.175537109375, -0.045829348266124725, -4.529942543740617e-06, -1.5497195136049413e-06, -0.0012224590172991157, -0.001945747178979218, -5.722029527532868e-06, 0.0, -0.4237210154533386, -0.014161921106278896, -0.0005687049706466496, -6.69933797325939e-05, -0.010686669498682022, -0.004369830247014761, -0.7046262621879578, -1.6486845016479492, -0.014093750156462193, -2.0319106578826904, -0.23440365493297577, -0.24052445590496063, -0.5285828113555908, -0.001572444918565452, -0.11421980708837509, -0.0002775999018922448, -0.007058091461658478, -0.0015141224721446633, -1.1630985736846924, -0.001208290341310203, -2.2063961029052734, -0.43514880537986755, -0.02672545425593853, -0.0009460740839131176, -2.264974000354414e-06, -9.77468371274881e-05, -0.0010202685371041298, -0.00316690094769001, -5.519237674889155e-05, -2.0861407392658293e-05, -2.264974000354414e-06, -9.440929716220126e-05, -0.013002962805330753, -0.003927495330572128, -0.1622481793165207, -0.5195077657699585, -0.8705217838287354, -0.03220553323626518, -0.07011551409959793, -0.6469612717628479, -0.0044061485677957535, -0.10928764194250107, -0.28271475434303284, -0.0011634016409516335, -0.0013017522869631648, -0.03797806426882744, -0.00031871485407464206, -1.3708974620385561e-05, -1.0967194612021558e-05, -0.00014685506175737828, -0.00021288513380568475, -1.2993727978027891e-05, -1.6689286894688848e-06, -0.0893728956580162, -0.003566810628399253, -0.20815600454807281, -1.3758554458618164, -0.15588435530662537, -0.5805670619010925, -0.06682555377483368, -0.32522740960121155, -0.14533500373363495, -0.008520321920514107, -0.0018523454200476408, -0.012169516645371914, -0.0012648447882384062, -0.00016139635408762842, -0.030950123444199562, -0.0014992436626926064, -0.007766408380120993, -0.2087191641330719, -0.03198099508881569, -0.020183421671390533, -0.05181651562452316, -1.6615855693817139, -0.0008790204883553088, -0.021282397210597992, -0.11609487980604172, -0.03699104115366936, -0.02428777702152729, -0.4240582287311554, -0.0006579380133189261, -0.003653044579550624, -0.0008585343020968139, -0.003959198947995901, -3.9934315282152966e-05, -4.410734163684538e-06, -1.4305104514278355e-06, -0.053427036851644516, -0.009724506177008152, -1.847726889536716e-05, -3.2543604902457446e-05, -0.0028860606253147125, -0.003476648824289441, -0.1210089847445488, -0.05849926173686981, -0.016278328374028206, -2.0265558760002023e-06, -2.3841830625315197e-06, -1.9073468138230965e-06, -3.0397906812140718e-05, -0.24616821110248566, -0.01537342183291912, -0.958674430847168], "finish_reason": "stop"}], "metrics": {"energy": 541.3085167236324, "energy_per_token": 3.5149903683352752, "time": 13.041317, "time_per_token": 0.08468387662337662}}
{"outputs": [{"text": "file_list = os.listdir(json_dir_path)\n    total_text = []\n\n    # read and extract text\n    for i in range(len(file_list)):\n        if file_list[i].endswith('json'):\n            with open(json_dir_path + '/' + file_list[i]) as f:\n                text_data = pd.read_json(f)\n                text = text_data['text']\n                total_text.append(text.tolist())\n\n    total_text = sum(total_text, [])\n    total_text = \"\".join(total_text)\n\n    # tokenize words\n    tokens = total_text.split()\n    tokens = [t for t in tokens if len(t) > 3] # only keep tokens with a length greater than 3\n\n    # count words\n    counter = Counter(tokens)\n    most_common_words = counter.most_common(word_count)\n\n    return most_common_words", "tokens": ["file", "_", "list", " =", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", "\n", "    ", "total", "_", "text", " =", " []", "\n", "\n", "    ", "#", " read", " and", " extract", " text", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "file", "_", "list", "))", ":", "\n", "        ", "if", " file", "_", "list", "[", "i", "]", ".", "end", "sw", "ith", "('", "json", "')", ":", "\n", "            ", "with", " open", "(", "json", "_", "dir", "_", "path", " +", " '/", "'", " +", " file", "_", "list", "[", "i", "])", " as", " f", ":", "\n", "                ", "text", "_", "data", " =", " pd", ".", "read", "_", "json", "(", "f", ")", "\n", "                ", "text", " =", " text", "_", "data", "['", "text", "']", "\n", "                ", "total", "_", "text", ".", "append", "(", "text", ".", "tol", "ist", "())", "\n", "\n", "    ", "total", "_", "text", " =", " sum", "(", "total", "_", "text", ",", " [", "])", "\n", "    ", "total", "_", "text", " =", " \"", "\"", ".", "join", "(", "total", "_", "text", ")", "\n", "\n", "    ", "#", " token", "ize", " words", "\n", "    ", "tokens", " =", " total", "_", "text", ".", "split", "()", "\n", "    ", "tokens", " =", " [", "t", " for", " t", " in", " tokens", " if", " len", "(", "t", ")", " >", " ", "3", "]", " #", " only", " keep", " tokens", " with", " a", " length", " greater", " than", " ", "3", "\n", "\n", "    ", "#", " count", " words", "\n", "    ", "counter", " =", " Counter", "(", "tokens", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "if"], "logprobs": [-3.094095468521118, -0.10983262956142426, -0.8517550826072693, -0.011062480509281158, -0.5139136910438538, -5.364403477869928e-06, -0.0025889708194881678, -7.152555099310121e-07, -0.0002029928145930171, -0.003949699457734823, -2.5152843591058627e-05, -5.1973900554003194e-05, -0.00011574551899684593, -1.7881377516459906e-06, -0.0005888396990485489, -0.03755425661802292, -0.128417506814003, -4.540719985961914, -0.03301841765642166, -1.1093989610671997, -0.29357007145881653, -1.0078251361846924, -0.005091201979666948, -1.8292412757873535, -0.0005571481888182461, -2.484980583190918, -2.7875142097473145, -3.421006679534912, -0.8247060775756836, -0.4546858072280884, -3.274345874786377, -0.0009085579658858478, -0.022653136402368546, -2.552635431289673, -0.09057778865098953, -1.242987036705017, -0.0037085108924657106, -0.11748713999986649, -0.0001227780303452164, -0.0008665143977850676, -5.8412379075889476e-06, -5.960462772236497e-07, -0.007139645516872406, -0.0014743659412488341, -0.001374253653921187, -0.014192244037985802, -2.3927550315856934, -0.32041627168655396, -3.71926071238704e-05, -6.318072337307967e-06, -0.0006824786541983485, -0.000508417550008744, -0.2835004925727844, -0.012121584266424179, -0.13949713110923767, -0.0001280225842492655, -2.3841855067985307e-07, -0.5577458143234253, -1.8892414569854736, -0.00015758226800244302, -0.059223420917987823, -0.013750000856816769, -0.007756590377539396, -0.5647435188293457, -0.00046397410915233195, -0.012488498352468014, -0.999073326587677, -0.00010585224663373083, -0.00035553809721022844, -1.645074735279195e-05, -4.410734163684538e-06, -0.20609351992607117, -0.24234890937805176, -0.003936756867915392, -0.0005482124397531152, -0.02823154628276825, -2.288792165927589e-05, 0.0, -0.0001627074379939586, -3.969590397900902e-05, -1.0439472198486328, -0.0008122005965560675, -0.4192183315753937, -0.04939733445644379, -0.012102152220904827, -0.0026376002933830023, -2.4690096378326416, -1.3589097261428833, -1.895662784576416, -0.02270045131444931, -3.0274410247802734, -1.6927575416048057e-05, -0.28661760687828064, -6.735097849741578e-05, -0.0002109781780745834, -0.0007843278581276536, -0.3350841701030731, -0.21587519347667694, -0.15493181347846985, -0.3220589756965637, -0.848772406578064, -0.6276943683624268, -0.20173335075378418, -2.610649426060263e-05, -8.583032467868179e-06, -0.4232949912548065, -0.0034104774240404367, -0.09176503121852875, -0.9809688329696655, -0.12280495464801788, -0.33095741271972656, -9.965400386136025e-05, -0.0003831844369415194, -0.22781269252300262, -0.5146220922470093, -0.107023224234581, -0.144343763589859, -2.3163819313049316, -1.9230676889419556, 0.0, -0.38832199573516846, -0.02939128875732422, -0.2150857150554657, -0.007355513051152229, -1.4835048913955688, -0.004697834141552448, -0.07105417549610138, -0.2344427853822708, -0.9332576394081116, -0.00436282716691494, -0.006428396794945002, -1.1920928244535389e-07, -1.4305104514278355e-06, -0.0036024453584104776, -0.026205692440271378, -0.0004625442670658231, -0.32936128973960876, -0.7567603588104248, -0.6648331880569458, -0.0017525089206174016, -0.05078437551856041, -0.06103820726275444, -1.6052184104919434, -2.600691080093384, -0.0006752118351869285, -3.2305197237292305e-05, -0.05901644378900528, -0.06670746952295303, -1.5497195136049413e-06, -2.3841855067985307e-07, -0.001468533300794661, -0.07367976754903793, -0.7772409319877625, -0.0016783688915893435, -0.16772055625915527, -3.1593017578125, -0.30413520336151123, -1.9627313613891602, -0.2970691919326782, -0.0019501493079587817, -3.4611525535583496, -0.037176672369241714, -0.21201485395431519, -3.576278118089249e-07, 0.0, -0.0005976559477858245, -0.024713406339287758, -0.5051936507225037, -0.006265284027904272, -0.8237701654434204, -1.0908544063568115, -0.14696703851222992, -0.0524350181221962, -1.9383039474487305, -1.5025060176849365, -0.0019261157140135765, -0.00014780859055463225, -0.002944540698081255, -0.03134416043758392, -2.219585657119751, -0.0004389514506328851, -0.05809305980801582, -0.0406840443611145, -0.11773524433374405, -0.015829849988222122, -1.372423529624939, -0.04136117175221443, -2.4800260066986084, -2.0468578338623047, -1.1058415174484253, -1.0543763637542725, -0.9504680633544922, -3.268826723098755, -0.23419126868247986, -0.7907559275627136, -0.004388107918202877, -0.08560174703598022, -0.03478278964757919, -0.06853789836168289, -0.820051908493042, -0.0009074860718101263, -0.22812475264072418, -0.5341185927391052, -1.0776020288467407, -0.20299360156059265, -0.00044586253352463245, -2.2091503143310547, -0.017569266259670258, -0.00318068522028625, -0.03279394656419754, -0.0059943185187876225, -0.0006565084331668913, -0.04631306231021881, -0.7327850461006165, -0.39732617139816284, -0.011066842824220657, -0.08020162582397461, -0.9924615621566772, -0.1169884130358696, -0.04334733635187149, -0.06613198667764664, -0.0001551984460093081, -5.328513361746445e-05, -2.0265558760002023e-06, -3.576272320060525e-06, -0.09884446114301682, -0.015951169654726982, -3.1709168979432434e-05, -3.075552376685664e-05, -0.0013335392577573657, -0.08420763164758682, -0.24763955175876617, -0.00041130665340460837, -0.17851117253303528, -0.024281611666083336, -1.6689286894688848e-06, -6.198863957251888e-06, -4.291525328881107e-06, -3.2543604902457446e-05, -0.22427159547805786, -0.0067011392675340176, -0.7511886358261108], "finish_reason": "stop"}], "metrics": {"energy": 814.0767753448486, "energy_per_token": 3.3639536171274735, "time": 20.59185, "time_per_token": 0.08509028925619835}}
{"outputs": [{"text": "word_counter = Counter()\n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(json_dir_path, filename), 'r') as f:\n                data = json.load(f)\n                for sentence in data.values():\n                    words = sentence.split()\n                    word_counter.update(words)\n    most_common_words = word_counter.most_common(word_count)\n    return most_common_words", "tokens": ["word", "_", "counter", " =", " Counter", "()", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "for", " sentence", " in", " data", ".", "values", "():", "\n", "                ", "    ", "words", " =", " sentence", ".", "split", "()", "\n", "                ", "    ", "word", "_", "counter", ".", "update", "(", "words", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " word", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " most", "_", "common", "_", "words"], "logprobs": [-2.814283609390259, -0.028084933757781982, -0.7834793925285339, -0.012893171049654484, -0.020367173478007317, -0.009284179657697678, -0.017037106677889824, -0.4129471480846405, -0.30588066577911377, -1.770860195159912, -0.001482579275034368, -0.018408993259072304, -1.9073468138230965e-06, -0.003754829289391637, 0.0, -9.870042413240299e-05, -0.001897679059766233, -1.9073304429184645e-05, -0.00035124807618558407, -8.141662692651153e-05, -7.152555099310121e-07, -0.0005715643637813628, -0.007245336659252644, -0.007894386537373066, -0.40352120995521545, -0.07528821378946304, -0.0010377742582932115, -0.004232615698128939, -5.125986263010418e-06, 0.0, -0.7785236239433289, -0.007389711681753397, -0.0007204797584563494, -1.2397689715726301e-05, -0.004781479015946388, -0.00729279313236475, -0.0016824151389300823, -0.4263112246990204, -0.00011884459672728553, -0.0011610202491283417, -0.20618925988674164, -1.0728830375228426e-06, -8.821448318485636e-06, -7.152555099310121e-07, -0.00028165188268758357, -6.592056161025539e-05, -0.0004153581103309989, -5.125986263010418e-06, -1.7881377516459906e-06, -1.2159273865108844e-05, -5.960462772236497e-07, -6.425174069590867e-05, -0.005681319627910852, -0.25998252630233765, -7.259582343976945e-05, -0.08324778079986572, -0.004781004507094622, -0.0231329295784235, -0.00012373158824630082, -0.4241865277290344, -0.01571860909461975, -0.001696815132163465, -0.0008124388405121863, -0.2862650752067566, -0.015324234031140804, -0.019594203680753708, -2.3841830625315197e-06, -0.004516638349741697, -1.2993727978027891e-05, -0.00017557987303007394, -0.0016091029392555356, -0.007105793803930283, -0.20992553234100342, -2.6120331287384033, -3.419208288192749, -0.008931448683142662, -0.011944909580051899, -2.2327828407287598, -0.6360770463943481, -0.0008778294431976974, -0.009860851801931858, -0.0004378790326882154, -0.0009046276099979877, -1.054160475730896, -0.022858690470457077, -0.0793752446770668, -0.0012822272256016731, -0.006114111747592688, -0.10884233564138412, -0.02682921104133129, -0.0005927712772972882, -0.0009840651182457805, -0.12719659507274628, -3.2066785934148356e-05, -0.0005544078885577619, -0.009662289172410965, -8.344646857949556e-07, -0.012633648701012135, -0.027380777522921562, -0.0007784912013448775, -0.0026876539923250675, -0.24682681262493134, -0.30642738938331604, -0.0005746620590798557, -0.005077681038528681, -0.39715468883514404, -0.01359066553413868, -0.004634472541511059, -0.04030454903841019, -1.311301275563892e-06, -2.3245540432981215e-05, -2.3483953555114567e-05, -4.768360213347478e-06, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.03730863705277443, -0.008218635804951191, -2.062299427052494e-05, -2.062299427052494e-05, -0.0014293702552095056, -0.004375645890831947, -0.033939655870199203, -0.07553064823150635, -0.03489607572555542, -2.145764938177308e-06, -5.245195097813848e-06, -3.933898824470816e-06, -5.173549288883805e-05], "finish_reason": "stop"}], "metrics": {"energy": 440.92265464591975, "energy_per_token": 3.444708239421248, "time": 10.729039, "time_per_token": 0.0838206171875}}
{"outputs": [{"text": "all_texts = []\n    all_text_words = []\n    all_files = os.listdir(json_dir_path)\n\n    for json_file in all_files:\n        if json_file.endswith(\".json\"):\n            file_path = os.path.join(json_dir_path, json_file)\n            with open(file_path, 'r') as f:\n                data = json.load(f)\n                text = data.get('text')\n                all_texts.append(text)\n\n    for text in all_texts:\n        if text is not None:\n            text_words = text.split()\n            all_text_words.extend(text_words)\n\n    if all_text_words:\n        counts = Counter(all_text_words)\n        most_common = counts.most_common(word_count)\n        return most_common\n\n    return []", "tokens": ["all", "_", "text", "s", " =", " []", "\n", "    ", "all", "_", "text", "_", "words", " =", " []", "\n", "    ", "all", "_", "files", " =", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", "\n", "\n", "    ", "for", " json", "_", "file", " in", " all", "_", "files", ":", "\n", "        ", "if", " json", "_", "file", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " json", "_", "file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "text", " =", " data", ".", "get", "('", "text", "')", "\n", "                ", "all", "_", "text", "s", ".", "append", "(", "text", ")", "\n", "\n", "    ", "for", " text", " in", " all", "_", "text", "s", ":", "\n", "        ", "if", " text", " is", " not", " None", ":", "\n", "            ", "text", "_", "words", " =", " text", ".", "split", "()", "\n", "            ", "all", "_", "text", "_", "words", ".", "extend", "(", "text", "_", "words", ")", "\n", "\n", "    ", "if", " all", "_", "text", "_", "words", ":", "\n", "        ", "counts", " =", " Counter", "(", "all", "_", "text", "_", "words", ")", "\n", "        ", "most", "_", "common", " =", " counts", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "        ", "return", " most", "_", "common", "\n", "\n", "    ", "return", " []"], "logprobs": [-2.5497190952301025, -0.014568972401320934, -0.7855985760688782, -1.070403814315796, -0.024728991091251373, -0.0924932211637497, -0.025878164917230606, -0.20268528163433075, -3.16489839553833, -0.0031967272516340017, -2.7018673419952393, -1.6628893613815308, -0.9234241843223572, -0.07157456874847412, -0.03460466489195824, -0.0027576773427426815, -0.43187403678894043, -2.2872562408447266, -0.0020582936704158783, -3.620049476623535, -0.0672990009188652, -0.18924133479595184, -3.933898824470816e-06, -0.011210077442228794, -1.1920928244535389e-07, -0.000179036331246607, -0.004396890755742788, -1.7404405298293568e-05, -9.405170567333698e-05, -0.00013290952483657748, -2.622600959512056e-06, -0.0005779979983344674, -0.022515611723065376, -1.546522855758667, -0.0009055804111994803, -0.2282637655735016, -2.9501991271972656, -0.012129946611821651, -0.11814271658658981, -0.09821847081184387, -0.032532382756471634, -5.960462772236497e-07, -2.0265558760002023e-06, -0.0018649582052603364, -0.002727600047364831, -0.020498689264059067, -1.732662320137024, -0.31405797600746155, -0.0004152389301452786, -0.00010644822759786621, -0.03758915886282921, -0.023116039112210274, -2.7179348762729205e-05, -5.960462772236497e-07, -0.6702510714530945, -0.0018897071713581681, -0.022293198853731155, -0.0013609204906970263, -1.966933996300213e-05, -0.01146773062646389, -0.01004474051296711, -0.007797753904014826, -2.5003066062927246, -0.07652013003826141, -0.03852351754903793, -0.0009099871967919171, -0.02988382801413536, -1.6689286894688848e-06, -6.401333666872233e-05, -2.622600959512056e-06, -0.0011616155970841646, -0.0001419681793777272, -0.0026227382477372885, -1.6093124941107817e-05, -3.71926071238704e-05, -2.6225699912174605e-05, -4.172316494077677e-06, -0.00047803416964598, -0.00518062524497509, -6.794906312279636e-06, -8.344646857949556e-07, -0.00010871296399272978, -0.0014560346025973558, -0.07500988245010376, -0.2684822678565979, -0.0006210067658685148, -0.00046695294440723956, -0.0013625870924443007, -2.932505594799295e-05, 0.0, -0.1411723643541336, -0.8440572619438171, -0.010190953500568867, -0.035275790840387344, -0.0003716255014296621, -0.25096482038497925, -0.020335987210273743, -0.0022306579630821943, -0.0010332489619031549, -0.4431954026222229, -0.02933410368859768, -0.023163216188549995, -9.894321920000948e-06, -0.003027500817552209, -1.1086402082582936e-05, -0.00013755806139670312, -0.0033414503559470177, -0.006304021459072828, -0.29950767755508423, -0.9934306740760803, -0.1215376928448677, -0.031112149357795715, -0.9765477776527405, -0.000745137978810817, -0.6547257900238037, -0.0019733496010303497, -1.1588351726531982, -0.08848313242197037, -0.11278507858514786, -2.4668188095092773, -1.6569954823353328e-05, -0.00017951308109331876, -0.006089467089623213, -0.003907427657395601, -0.005001770798116922, -0.010527553036808968, -0.016223672777414322, -0.005341069307178259, -0.014307534322142601, -0.3197500705718994, -0.04739530757069588, -0.1930479258298874, -0.18869295716285706, -0.03298047184944153, -0.0016373097896575928, -5.960462772236497e-07, -1.7881377516459906e-06, -5.578839045483619e-05, -0.0002865380665753037, -0.002029622904956341, -0.006524333264678717, -2.25068736076355, -0.34588491916656494, -0.9119178652763367, -0.06949739903211594, -0.001313300454057753, -0.047860193997621536, -0.036778490990400314, -0.0015949398512020707, -1.1228808164596558, -0.18729236721992493, -0.0992770865559578, -0.008909945376217365, -0.14221782982349396, -0.00032205163734033704, -0.02377978526055813, -0.20361696183681488, -0.021096710115671158, -0.017445214092731476, -0.16482627391815186, -1.4305104514278355e-06, -2.4437606043647975e-05, -7.271502545336261e-05, -4.8993817472364753e-05, -0.34959927201271057, -0.039942894130945206, -0.04297136142849922, -0.011196402832865715, -0.0024352199397981167, -3.814624506048858e-05, -0.008125700056552887, -0.0021401375997811556, -0.06605967879295349, -0.002712501445785165, -3.5654144287109375, -0.9034210443496704, -0.0005554801900871098, -0.00016962042718660086, -0.049877963960170746, -0.000285584683297202, -0.1265706717967987, -0.010912030935287476, -0.0025250001344829798, -3.603828191757202, -0.010112715885043144, -0.015839237719774246, -0.0017231153324246407, -0.005141844507306814, -7.152555099310121e-07, -7.152555099310121e-07, -3.45700973412022e-05, -2.861018856492592e-06, -0.0011855486081913114, -0.054535817354917526, -0.01592688262462616, -0.17370909452438354, -0.0008948612376116216, -0.01863390952348709, -0.40943434834480286, -0.02569844201207161, -1.3828182090946939e-05, -3.2186455882765586e-06, -3.576278118089249e-07, -4.768370445162873e-07, -0.10018426179885864, -0.004297901410609484, -1.2993727978027891e-05, -4.529942543740617e-06, -0.0007429938414134085, -0.00535600958392024, -0.1497064083814621, -0.16016925871372223, -0.022859856486320496, -1.311301275563892e-06, -9.059865078597795e-06, -0.02976951003074646, -1.699469804763794, -0.20477285981178284, -0.3157140612602234, -0.36255529522895813], "finish_reason": "stop"}], "metrics": {"energy": 759.690555961609, "energy_per_token": 3.453138890734586, "time": 18.495087, "time_per_token": 0.08406857727272728}}
{"outputs": [{"text": "# Check if the provided path exists\n    if not os.path.exists(json_dir_path):\n        raise FileNotFoundError(f\"Directory or file not found: {json_dir_path}\")\n\n    # Initialize an empty counter\n    counter = Counter()\n\n    # Read all JSON files in the given directory\n    for file in os.listdir(json_dir_path):\n        if file.endswith('.json'):\n            file_path = os.path.join(json_dir_path, file)\n            with open(file_path, 'r') as json_file:\n                data = json.load(json_file)\n\n            # Extract text content from the JSON and count words\n            if 'text' in data:\n                text = data['text']\n                words = text.split()\n                counter.update(words)\n\n    # Determine the most common words and their counts\n    most_common = counter.most_common(word_count)\n\n    return most_common", "tokens": ["#", " Check", " if", " the", " provided", " path", " exists", "\n", "    ", "if", " not", " os", ".", "path", ".", "exists", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "raise", " File", "NotFound", "Error", "(", "f", "\"", "Directory", " or", " file", " not", " found", ":", " {", "json", "_", "dir", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " counter", "\n", "    ", "counter", " =", " Counter", "()", "\n", "\n", "    ", "#", " Read", " all", " JSON", " files", " in", " the", " given", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " file", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " json", "_", "file", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "json", "_", "file", ")", "\n", "\n", "            ", "#", " Ext", "ract", " text", " content", " from", " the", " JSON", " and", " count", " words", "\n", "            ", "if", " '", "text", "'", " in", " data", ":", "\n", "                ", "text", " =", " data", "['", "text", "']", "\n", "                ", "words", " =", " text", ".", "split", "()", "\n", "                ", "counter", ".", "update", "(", "words", ")", "\n", "\n", "    ", "#", " Determine", " the", " most", " common", " words", " and", " their", " counts", "\n", "    ", "most", "_", "common", " =", " counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common"], "logprobs": [-1.1805613040924072, -3.3816912174224854, -0.29490214586257935, -0.2783410847187042, -2.793576717376709, -0.936991810798645, -1.4062869548797607, -0.6779886484146118, -0.0014457975048571825, -0.03819781914353371, -0.09447267651557922, -0.0036178866866976023, -7.152531907195225e-06, -0.0010014524450525641, -5.602820692729438e-06, -0.03185398504137993, -0.00015639036428183317, -0.002279899315908551, -1.7046782886609435e-05, -7.283422019099817e-05, -7.259582343976945e-05, -1.6689286894688848e-06, -0.007529214955866337, -0.0010032388381659985, -0.0032151455525308847, -0.18172159790992737, -0.8671121597290039, -0.018291600048542023, -7.748573807475623e-06, -0.03180975839495659, -0.39495837688446045, -0.03210533410310745, -2.259655714035034, -1.6721163988113403, -0.07403739541769028, -0.3580326437950134, -0.004636608529835939, -0.08474630117416382, -0.014150872826576233, -0.0024969372898340225, -2.8729025871143676e-05, -7.867782187531702e-06, -9.298280929215252e-06, -2.0265558760002023e-06, -0.00436377665027976, -0.0003868784988299012, -0.000428108120104298, -0.07428357005119324, -0.0009581027552485466, -0.1287960261106491, -1.605148196220398, -0.3494807779788971, -0.003954449202865362, -2.4756274223327637, -0.7528699040412903, -0.00012706902634818107, -1.0765008926391602, -0.018643269315361977, -0.001910767168737948, -0.0015232876176014543, -0.0007111880695447326, -0.03706938773393631, -0.0003159739135298878, -0.040181227028369904, -2.880833625793457, -0.3663456439971924, -0.8405314683914185, -0.005325417034327984, -0.35659167170524597, -0.007296106778085232, -2.7546026706695557, -0.04814186319708824, -0.2089398354291916, -0.0004574206250254065, -0.07387520372867584, -0.3563256859779358, -0.4836651682853699, -0.012379356659948826, -7.152531907195225e-06, -0.022008584812283516, 0.0, -4.2676016164477915e-05, -0.0004847066884394735, -8.344646857949556e-07, -5.960462772236497e-07, -6.794906312279636e-06, 0.0, -0.0004894727608188987, -0.0003833036171272397, -0.006386584602296352, -0.13548384606838226, -0.018342632800340652, -0.0003149013500660658, -0.0018057008273899555, -1.1920928244535389e-07, 0.0, -1.6027345657348633, -0.0009213017183355987, -0.0005031750188209116, -8.106198947643861e-06, -0.004880064632743597, -0.017500506713986397, -0.0027803832199424505, -1.6625192165374756, -0.06374454498291016, -0.003423902206122875, -0.00018344627460464835, -0.0031722483690828085, -1.1920928244535389e-07, -3.2186455882765586e-06, -3.8742269680369645e-05, -0.00041321321623399854, -3.0040289857424796e-05, -0.0005414212355390191, -8.702239938429557e-06, -1.2278481335670222e-05, -6.079655122448457e-06, -1.1920928244535389e-07, -6.210611172718927e-05, -0.0007085673278197646, -5.1973900554003194e-05, -0.0010987442219629884, -0.17336364090442657, -0.26058781147003174, -7.223821739898995e-05, -0.00015269544383045286, -0.000382707774406299, -0.00011264643399044871, -2.3841855067985307e-07, -0.11940741539001465, -0.0596785768866539, -0.001444369088858366, -0.03237774223089218, -8.67805938469246e-05, -2.330284357070923, -0.004970811773091555, -0.016382237896323204, -0.00019178935326635838, -0.0004231034545227885, -0.0013173482147976756, -0.3909294605255127, -0.008404599502682686, -0.01836194470524788, -0.00026127262390218675, -0.0020008322317153215, -1.1324817933200393e-05, -1.0967194612021558e-05, -6.198863957251888e-06, -4.172316494077677e-06, -0.0022135297767817974, -0.0063704755157232285, -1.2142112255096436, -0.835930585861206, -0.03235315904021263, -0.3801308870315552, -0.018179461359977722, -1.0864882469177246, -0.43380504846572876, -0.1020105630159378, -0.502475917339325, -0.2340286523103714, -3.4453983306884766, -2.418382406234741, -1.0389842987060547, -0.1854947805404663, -0.0026500842068344355, -1.0799338817596436, -0.31332701444625854, -0.002861098386347294, -0.0009648911654949188, -0.006782130803912878, -0.00011848701251437888, -0.06649746000766754, -0.00892199669033289, -0.0003369478799868375, -0.18781335651874542, -0.08066987991333008, -0.00878445990383625, -0.007052291184663773, -1.0847986231965479e-05, -1.7762025890988298e-05, -0.033396996557712555, -0.03228564187884331, -0.47772207856178284, -0.008119788020849228, -0.028278596699237823, -4.470248313737102e-05, -0.009847276844084263, -0.05586908385157585, -0.27649837732315063, -0.01217611227184534, -0.18213620781898499, -0.00448174774646759, -5.960462772236497e-07, -0.0024022788275033236, -0.06688777357339859, -0.0008586533949710429, -0.0023767100647091866, -0.019407855346798897, -0.011646375060081482, -0.024835513904690742, -2.6628692150115967, -0.0559457391500473, -0.08659520000219345, -0.2762026786804199, -0.017421668395400047, -0.7084083557128906, -0.19753383100032806, -0.08892538398504257, -0.031366460025310516, -0.0003405229654163122, -0.18988043069839478, -0.00010942813969450071, -0.0015689932042732835, -0.5415067076683044, -0.02695430815219879, -1.537788011773955e-05, -4.0531076592742465e-06, -1.1920928244535389e-07, -4.768370445162873e-07, -0.032497648149728775, -0.007888710126280785, -6.794906312279636e-06, -2.622600959512056e-06, -0.0002954761730507016, -0.0038696660194545984, -0.35237476229667664, -0.0002053765201708302, -0.5830042958259583, -0.013718723319470882, -2.3841830625315197e-06, -4.291525328881107e-06], "finish_reason": "stop"}], "metrics": {"energy": 796.3048832712174, "energy_per_token": 3.43234863478973, "time": 19.768076, "time_per_token": 0.08520722413793104}}
{"outputs": [{"text": "# Initialize a dictionary to store the word counts\n    word_count_dict = {}\n\n    # Loop through all the files in the directory\n    for filename in os.listdir(json_dir_path):\n        # Check if the file is a JSON file\n        if filename.endswith(\".json\"):\n            # Read the JSON file\n            with open(os.path.join(json_dir_path, filename), \"r\") as f:\n                json_data = json.load(f)\n\n            # Extract the text content from the JSON file\n            text = json_data[\"text\"]\n\n            # Split the text into words\n            words = text.split()\n\n            # Count the occurrences of each word\n            for word in words:\n                if word in word_count_dict:\n                    word_count_dict[word] += 1\n                else:\n                    word_count_dict[word] = 1\n\n    # Get the most common words\n    most_common_words = Counter(word_count_dict).most_common(word_count)\n\n    ", "tokens": ["#", " Initialize", " a", " dictionary", " to", " store", " the", " word", " counts", "\n", "    ", "word", "_", "count", "_", "dict", " =", " {}", "\n", "\n", "    ", "#", " Loop", " through", " all", " the", " files", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "#", " Check", " if", " the", " file", " is", " a", " JSON", " file", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "#", " Read", " the", " JSON", " file", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " filename", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "                ", "json", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "            ", "#", " Ext", "ract", " the", " text", " content", " from", " the", " JSON", " file", "\n", "            ", "text", " =", " json", "_", "data", "[", "\"", "text", "\"", "]", "\n", "\n", "            ", "#", " Split", " the", " text", " into", " words", "\n", "            ", "words", " =", " text", ".", "split", "()", "\n", "\n", "            ", "#", " Count", " the", " occurrences", " of", " each", " word", "\n", "            ", "for", " word", " in", " words", ":", "\n", "                ", "if", " word", " in", " word", "_", "count", "_", "dict", ":", "\n", "                ", "    ", "word", "_", "count", "_", "dict", "[", "word", "]", " +=", " ", "1", "\n", "                ", "else", ":", "\n", "                ", "    ", "word", "_", "count", "_", "dict", "[", "word", "]", " =", " ", "1", "\n", "\n", "    ", "#", " Get", " the", " most", " common", " words", "\n", "    ", "most", "_", "common", "_", "words", " =", " Counter", "(", "word", "_", "count", "_", "dict", ")", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    "], "logprobs": [-1.1805613040924072, -1.5686018466949463, -1.9880863428115845, -1.6374518871307373, -0.04751149192452431, -0.17432834208011627, -0.4086109399795532, -0.594774067401886, -0.13745573163032532, -0.10929245501756668, -0.001035987981595099, -0.3166308104991913, -0.009514817968010902, -1.4787213802337646, -0.027979567646980286, -0.08318207412958145, -0.007314686197787523, -0.15407778322696686, -0.0021161085460335016, -0.19324496388435364, -0.00040070133400149643, -0.02065412513911724, -1.0679631233215332, -0.23990343511104584, -0.15653899312019348, -0.47566989064216614, -0.6997994184494019, -0.015172428451478481, -0.003451582742854953, -0.3507883846759796, -0.06241906061768532, -0.000205018965061754, -0.018593188375234604, -1.5177087783813477, -0.00028153270250186324, -0.007265100721269846, -5.483612312673358e-06, -0.002442355267703533, 0.0, -8.070142939686775e-05, -0.0008961713756434619, -1.4424220353248529e-05, -7.83174327807501e-05, -4.303362584323622e-05, -7.152555099310121e-07, -0.00022885564249008894, -0.0005160430446267128, -0.03624553605914116, -0.6021836400032043, -0.3236129581928253, -0.02186128869652748, -0.041534096002578735, -0.015058530494570732, -0.13134054839611053, -0.006555243860930204, -0.12788330018520355, -0.0023438858333975077, -0.025952273979783058, -0.00033480284037068486, -0.0025327291805297136, -0.022671783342957497, -0.0004731489170808345, -0.0013504442758858204, -1.1920928244535389e-07, 0.0, -0.6582907438278198, -0.00025769727653823793, -0.004261104390025139, -0.00029488030122593045, -4.768360213347478e-06, -0.005025018937885761, -0.0001486429391661659, -0.005787757225334644, -0.12451057136058807, -1.1738159656524658, -0.017489496618509293, -0.2643114924430847, -0.10908489674329758, -0.36999595165252686, -0.00029666791670024395, -0.07665926218032837, -4.911301948595792e-05, -0.000993116176687181, -0.08775933086872101, -9.536738616588991e-07, -6.318072337307967e-06, -4.768370445162873e-07, -0.00017486473370809108, -2.0146166207268834e-05, -0.0004002247005701065, -3.933898824470816e-06, -2.7418097943154862e-06, -8.583032467868179e-06, 0.0, -5.1973900554003194e-05, -0.002808200428262353, -0.14457859098911285, -7.724463648628443e-05, -0.6491734981536865, -0.006600246299058199, -0.0006409021443687379, -0.05565114691853523, -6.627816765103489e-05, -0.3796534538269043, -0.006464285310357809, -0.0003582789213396609, -0.0007856381707824767, -2.460844039916992, -0.0017650038935244083, -0.10618419945240021, -0.0012384133879095316, -0.005650855600833893, -1.6689286894688848e-06, -0.005035219248384237, -1.2040065485052764e-05, -0.00011038171214750037, -0.004419440869241953, -0.002489089034497738, -0.3093281388282776, -0.056260861456394196, -0.010351775214076042, -0.42269808053970337, -0.0010548033751547337, -0.0214909166097641, -0.08439423143863678, -0.44993650913238525, -0.041788630187511444, -0.012259605340659618, -0.06053901091217995, -0.5296838283538818, -0.05879346281290054, -0.0010425376240164042, -0.18237602710723877, -0.37885263562202454, -0.011640130542218685, -4.23184028477408e-05, -3.933898824470816e-06, -0.44321078062057495, -0.0022499265614897013, -0.0022814455442130566, -7.73638384998776e-05, -9.810443589231e-05, -0.00960290152579546, -0.03796130791306496, -0.0010240792762488127, -0.0010297955013811588, -0.276995986700058, -0.002344718435779214, -0.003802926978096366, -0.0317753441631794, -0.1697687804698944, -0.9767765998840332, -0.00020430385484360158, -0.06293702125549316, -0.007576776202768087, -0.009045101702213287, -2.455681169521995e-05, -0.0020599591080099344, -0.04910285398364067, -0.0011955503141507506, -0.007674968335777521, -0.00043108707177452743, -0.0013950864085927606, -0.5439491271972656, -0.012701095081865788, -1.0390915870666504, -8.284702198579907e-05, -0.0013911579735577106, -0.005774127319455147, -0.2236916720867157, -0.00021741411183029413, -0.14714105427265167, -0.0004962643142789602, -0.00022790218645241112, -0.002243860624730587, -5.1973900554003194e-05, -0.00014983485743869096, -0.0008317348547279835, -0.3331170678138733, -0.0034935176372528076, -0.4329279959201813, -0.0001722425949992612, -1.1920922133867862e-06, -3.075552376685664e-05, -4.076874756719917e-05, -1.4305104514278355e-06, -0.005044352263212204, -0.0002445875434204936, -4.9828242481453344e-05, -0.0002498314715921879, -0.002830191981047392, -1.5497195136049413e-06, -8.821448318485636e-06, -1.2516897186287679e-05, -3.2186455882765586e-06, -2.7894584491150454e-05, -1.6689160474925302e-05, -0.0005708495154976845, -0.0016481400234624743, -0.0003594706067815423, -3.4450891689630225e-05, -0.0003999863693024963, -0.00023326536756940186, -0.0006518622976727784, -3.015949550899677e-05, -3.123234637314454e-05, -2.0265373677830212e-05, -0.00019035911827813834, -0.0001984637783607468, -2.145764938177308e-06, -9.536738616588991e-07, -4.6491513785440475e-06, -3.814689989667386e-06, -1.0967194612021558e-05, -4.768360213347478e-06, -2.3603161025675945e-05, -1.3828182090946939e-05, -0.00010382589971413836, -0.0004450284468475729, -0.00037853704998269677, -0.008175952360033989, -0.004643728025257587, -0.011618096381425858, -2.9831957817077637, -0.04295343533158302, -0.4528101980686188, -0.08559978008270264, -0.011675478890538216, -1.1006830930709839, -0.0015087660867720842, -0.08635696023702621, -8.165503095369786e-05, -0.001206504413858056, -0.11877785623073578, -0.02160688303411007, -0.0056612868793308735, -0.5487083792686462, -0.00037520044133998454, -0.0010231266496703029, -7.271740287251305e-06, -3.933898824470816e-06, -4.470248313737102e-05, -2.9802276912960224e-06, -0.00026592056383378804, -0.004496582318097353, -1.2636104656849056e-05, -1.4305104514278355e-06, -3.576278118089249e-07, -0.03525334969162941, -0.010015353560447693, -1.9788545614574105e-05, -5.876845170860179e-05, -0.001887565478682518, -0.0017401328077539802, -0.04967006295919418, -0.0003328961320221424], "finish_reason": "length"}], "metrics": {"energy": 867.140698709487, "energy_per_token": 3.3872683543339335, "time": 21.638021, "time_per_token": 0.08452351953125}}
{"outputs": [{"text": "word_counter = Counter()\n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            with open(f'{json_dir_path}/{filename}') as f:\n                data = json.load(f)\n                word_counter.update(data[\"text\"].split())\n    return word_counter.most_common(word_count)", "tokens": ["word", "_", "counter", " =", " Counter", "()", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "('", ".", "json", "')", ":", "\n", "            ", "with", " open", "(", "f", "'{", "json", "_", "dir", "_", "path", "}/{", "filename", "}", "')", " as", " f", ":", "\n", "                ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "word", "_", "counter", ".", "update", "(", "data", "[", "\"", "text", "\"", "]", ".", "split", "())", "\n", "    ", "return", " word", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "def"], "logprobs": [-2.814283609390259, -0.028084933757781982, -0.7834793925285339, -0.012893171049654484, -0.020367173478007317, -0.009284179657697678, -0.017037106677889824, -0.4129471480846405, -0.30588066577911377, -1.770860195159912, -0.001482579275034368, -0.018408993259072304, -1.9073468138230965e-06, -0.003754829289391637, 0.0, -9.870042413240299e-05, -0.001897679059766233, -1.9073304429184645e-05, -0.00035124807618558407, -8.141662692651153e-05, -7.152555099310121e-07, -0.0005715643637813628, -0.007245336659252644, -0.007894386537373066, -0.40352120995521545, -0.07528821378946304, -0.0010377742582932115, -0.004232615698128939, -5.125986263010418e-06, 0.0, -0.7785236239433289, -0.007389711681753397, -0.0007204797584563494, -1.2397689715726301e-05, -0.004781479015946388, -0.00729279313236475, -0.0016824151389300823, -0.4263112246990204, -0.00011884459672728553, -0.0011610202491283417, -1.9560099840164185, -0.7320857644081116, -0.006035317666828632, -5.245071224635467e-05, -1.3112935448589269e-05, -1.1205610462639015e-05, -6.318072337307967e-06, -0.007886108011007309, -9.321732068201527e-05, -1.8510972261428833, -0.00017212340026162565, -0.00033706706017255783, -0.4919199049472809, -0.041801318526268005, -0.0037448531948029995, -0.0012509147636592388, -0.5691479444503784, -0.02403852716088295, -0.029696261510252953, -4.291525328881107e-06, -0.007267112378031015, -1.5020257706055418e-05, -0.00033444532891735435, -0.007068744860589504, -0.01891854964196682, -0.3348912000656128, -1.3469667434692383, -0.0015061474405229092, -0.028871754184365273, -0.0635715052485466, -1.0967194612021558e-05, -0.021207939833402634, -0.21144060790538788, -1.7462468147277832, -0.011843012645840645, -0.0021193204447627068, -0.00012814177898690104, -0.0038009081035852432, -0.0005857420619577169, -0.014073414728045464, -0.44521191716194153, -0.019175978377461433, -0.2989358603954315, -0.716468334197998, -0.13532060384750366, -5.245195097813848e-06, -6.9141146923357155e-06, -0.000459565402707085, -3.814689989667386e-06, -2.50339189733495e-06, -5.960462772236497e-07, -0.012942831963300705, -0.006668101530522108, -2.13382354559144e-05, -3.3378044463461265e-05, -0.05396571382880211, -0.11410292983055115, -0.015408990904688835, -0.7034806609153748], "finish_reason": "stop"}], "metrics": {"energy": 367.4756147632601, "energy_per_token": 3.7118748965985873, "time": 8.2085, "time_per_token": 0.08291414141414143}}
{"outputs": [{"text": "word_list = []\n    for file in os.listdir(json_dir_path):\n        with open(os.path.join(json_dir_path, file), \"r\") as f:\n            content = json.load(f)\n            word_list += content[\"text\"].split()\n    c = Counter(word_list)\n    most_common_words = c.most_common(word_count)\n    return most_common_words", "tokens": ["word", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "content", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "word", "_", "list", " +=", " content", "[", "\"", "text", "\"", "]", ".", "split", "()", "\n", "    ", "c", " =", " Counter", "(", "word", "_", "list", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " c", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "def"], "logprobs": [-2.814283609390259, -0.028084933757781982, -2.18808913230896, -0.03450700640678406, -0.06347853690385818, -0.016459517180919647, -0.17628014087677002, -0.4582579433917999, -0.47679564356803894, -0.32415473461151123, -0.029379827901721, -1.7762025890988298e-05, -0.029713040217757225, 0.0, -0.0002097863471135497, -0.006459192372858524, -2.1815061700181104e-05, -0.0004390706308186054, -9.42901024245657e-05, -2.7418097943154862e-06, -0.0013809201773256063, -0.013502108864486217, -0.010275202803313732, -1.3696036338806152, -0.00035446559195406735, -0.006387650966644287, -0.45211222767829895, -8.583032467868179e-06, -0.0002455409849062562, -2.861018856492592e-06, -0.001765955938026309, -8.535020606359467e-05, -0.0014577010879293084, -1.1205610462639015e-05, -4.172316494077677e-06, -1.0132738680113107e-05, -9.536738616588991e-07, -0.0008141063735820353, -0.027308745309710503, -0.4342648983001709, -0.0004301338049117476, -1.0839112997055054, -0.02286370098590851, -0.004357367753982544, -0.11773386597633362, -0.0004372832481749356, -0.367086261510849, -0.044440317898988724, -0.006031288765370846, -0.0033996663987636566, -2.5793566703796387, -0.03744747117161751, -0.07960546016693115, -1.1801649634435307e-05, -0.06319186836481094, -2.276871418871451e-05, -0.0007880204357206821, -0.19702649116516113, -0.09189260005950928, -0.1707344353199005, -1.2577141523361206, -0.007408407516777515, -0.013145096600055695, -0.9962881207466125, -0.10756687074899673, -0.1590956300497055, -0.0025238110683858395, -0.002719872398301959, -0.000205018965061754, -0.00034957972820848227, -0.001474246964789927, -0.032030873000621796, -0.5156534314155579, -0.02576478198170662, -0.39719322323799133, -2.543826103210449, -0.00726782251149416, -0.002063765889033675, -0.0023017835337668657, -0.001763337990269065, -0.00015901254664640874, -5.8412379075889476e-06, -0.0007194076315499842, -0.0524592250585556, -0.031191302463412285, -0.8425536155700684, -0.009630411863327026, -0.09197665005922318, -0.7978004813194275, -0.1038748025894165, -0.020262043923139572, -0.13101989030838013, -9.65590606938349e-06, -6.6756979322235566e-06, -3.3378546504536644e-06, -8.344646857949556e-07, -0.10268572717905045, -0.01375693827867508, -8.702239938429557e-06, -2.1457441107486375e-05, -0.0017860665684565902, -0.010072119534015656, -0.07314230501651764, -0.05523217096924782, -0.015373069792985916, -2.9802276912960224e-06, -2.7418097943154862e-06, -5.245195097813848e-06, -4.207999518257566e-05, -0.2161627560853958, -0.015072034671902657, -0.5351741313934326], "finish_reason": "stop"}], "metrics": {"energy": 377.8025222940445, "energy_per_token": 3.3732368061968256, "time": 9.255794, "time_per_token": 0.08264101785714285}}
{"outputs": [{"text": "# Initialize a dictionary to store all the words from the JSON files\n    all_words = Counter()\n\n    # Initialize a list of valid file extensions to process\n    valid_ext = [\".json\"]\n\n    # Loop over all the files in the specified directory\n    for file in os.listdir(json_dir_path):\n        # If the file is not a JSON file, skip it\n        if os.path.splitext(file)[1] not in valid_ext:\n            continue\n\n        # Open the JSON file and read the data\n        with open(os.path.join(json_dir_path, file), \"r\") as f:\n            data = json.load(f)\n\n        # Extract the text content from the JSON data\n        text = data[\"text\"]\n\n        # Split the text into words\n        words = text.split()\n\n        # Update the dictionary of all words\n        all_words.update(words)\n\n    # Sort the dictionary by the count of words and take the specified number of words\n    most_common_words = all_words.most_common", "tokens": ["#", " Initialize", " a", " dictionary", " to", " store", " all", " the", " words", " from", " the", " JSON", " files", "\n", "    ", "all", "_", "words", " =", " Counter", "()", "\n", "\n", "    ", "#", " Initialize", " a", " list", " of", " valid", " file", " extensions", " to", " process", "\n", "    ", "valid", "_", "ext", " =", " [", "\"", ".", "json", "\"", "]", "\n", "\n", "    ", "#", " Loop", " over", " all", " the", " files", " in", " the", " specified", " directory", "\n", "    ", "for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "#", " If", " the", " file", " is", " not", " a", " JSON", " file", ",", " skip", " it", "\n", "        ", "if", " os", ".", "path", ".", "spl", "ite", "xt", "(", "file", ")[", "1", "]", " not", " in", " valid", "_", "ext", ":", "\n", "            ", "continue", "\n", "\n", "        ", "#", " Open", " the", " JSON", " file", " and", " read", " the", " data", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", ",", " \"", "r", "\"", ")", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "        ", "#", " Ext", "ract", " the", " text", " content", " from", " the", " JSON", " data", "\n", "        ", "text", " =", " data", "[", "\"", "text", "\"", "]", "\n", "\n", "        ", "#", " Split", " the", " text", " into", " words", "\n", "        ", "words", " =", " text", ".", "split", "()", "\n", "\n", "        ", "#", " Update", " the", " dictionary", " of", " all", " words", "\n", "        ", "all", "_", "words", ".", "update", "(", "words", ")", "\n", "\n", "    ", "#", " Sort", " the", " dictionary", " by", " the", " count", " of", " words", " and", " take", " the", " specified", " number", " of", " words", "\n", "    ", "most", "_", "common", "_", "words", " =", " all", "_", "words", ".", "most", "_", "common"], "logprobs": [-1.1805613040924072, -1.5686018466949463, -1.9880863428115845, -1.6374518871307373, -0.04751149192452431, -0.17432834208011627, -2.2846293449401855, -0.5073827505111694, -1.8672397136688232, -1.6777544021606445, -0.7702822089195251, -0.3214281499385834, -0.035531919449567795, -0.14086177945137024, -0.0011095802765339613, -0.7355759739875793, -0.00590105727314949, -0.1958581656217575, -0.0962456613779068, -2.209428071975708, -0.06689959019422531, -0.006052972748875618, -0.2797768712043762, -0.0005906267906539142, -0.07017330080270767, -4.040785789489746, -0.5185869932174683, -0.6761167645454407, -2.108139991760254, -3.848328113555908, -1.5863696336746216, -0.243078351020813, -1.785952091217041, -2.9320154190063477, -0.0588107705116272, -0.00016318420239258558, -0.43514832854270935, -0.001647425931878388, -2.080299139022827, -0.47197720408439636, -0.36180219054222107, -0.006338018923997879, -0.04134378582239151, -0.032132118940353394, -9.679325739853084e-05, -0.12176568806171417, -0.0021626197267323732, -0.022188737988471985, -0.00040082051418721676, -0.02210175432264805, -0.9504412412643433, -1.670450210571289, -0.10352790355682373, -0.837652325630188, -0.1528654247522354, -0.013230509124696255, -0.0035485175903886557, -0.9033636450767517, -0.01468997448682785, -0.10711019486188889, -0.000196556793525815, -0.015315546654164791, -0.3864152431488037, -0.2400064915418625, -0.010686315596103668, -2.7418097943154862e-06, -0.020408522337675095, -1.4305104514278355e-06, -7.30726242181845e-05, -0.0016947920667007565, -1.1324817933200393e-05, -6.5205356804654e-05, -9.97731985989958e-05, -3.576278118089249e-07, -0.000454799213912338, -0.0006388768670149148, -0.19718065857887268, -0.17317348718643188, -3.342620611190796, -0.036646801978349686, -0.07345116883516312, -1.7439205646514893, -1.6963868141174316, -0.13353665173053741, -1.5806632041931152, -0.008992411196231842, -0.036837320774793625, -0.16359864175319672, -0.10411137342453003, -0.010628404095768929, -0.00028200942324474454, -0.029176075011491776, -0.6839320063591003, -5.960462772236497e-07, -0.00018606838420964777, 0.0, -0.0007387054502032697, -1.1920922133867862e-06, 0.0, -5.471556869451888e-05, -0.0021729685831815004, -0.22952742874622345, -0.00041762212640605867, -0.0001833270798670128, -0.26647427678108215, -4.768370445162873e-07, -0.00026854246971197426, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0036699105985462666, -0.030564486980438232, -0.002771467436105013, -0.010720635764300823, -0.0011039836099371314, -0.22592079639434814, -0.001930517959408462, -0.02901419810950756, -1.8658504486083984, -0.10196750611066818, -0.1697164624929428, -0.0005278385942801833, -0.2869306206703186, -0.5369468927383423, -1.0388121604919434, -0.6015658378601074, -0.09105797111988068, -0.00012957210128661245, -0.1440119594335556, -0.00028761065914295614, -0.0015029336791485548, -0.20525318384170532, -1.4305104514278355e-06, -6.103329360485077e-05, -1.1920922133867862e-06, -0.002629634225741029, -2.9682672902708873e-05, -0.000726316764485091, -2.3841830625315197e-06, -3.576272320060525e-06, -7.271740287251305e-06, 0.0, -0.00013481661153491586, -0.010543123818933964, -0.23434358835220337, -0.0001299296854995191, -0.5639020800590515, -0.011211727745831013, -0.001379610737785697, -0.16305525600910187, -0.00018380382971372455, -0.30838820338249207, -0.022520972415804863, -0.0006792622152715921, -0.002103974809870124, -0.09838950634002686, -0.005709648597985506, -0.011206187307834625, -3.3378546504536644e-06, -0.018896441906690598, -9.179073458653875e-06, -0.0002286172821186483, -0.010179153643548489, -0.0030688594561070204, -0.08249811828136444, -0.07768358290195465, -0.006143257953226566, -0.5409260392189026, -0.0006165986997075379, -0.032560884952545166, -0.16098399460315704, -0.28762996196746826, -0.016959989443421364, -0.010651168413460255, -0.39160189032554626, -0.22659580409526825, -0.1774372011423111, -0.0006685405969619751, -0.32314321398735046, -0.1528909057378769, -0.03880106285214424, -0.5523011088371277, -0.003492448478937149, -0.0027482856530696154, -8.451581379631534e-05, -0.00017820201173890382, -0.023535415530204773, -0.045096103101968765, -0.0008255410939455032, -0.0014485353603959084, -0.2858068346977234, -0.0030856162775307894, -0.003689864184707403, -0.15010014176368713, -0.3300420343875885, -2.5111494064331055, -0.00019167017308063805, -0.18362678587436676, -0.020261108875274658, -0.028229808434844017, -5.4596363042946905e-05, -0.003769793314859271, -0.10005861520767212, -0.0030551922973245382, -0.011397489346563816, -0.0004051103023812175, -0.0033062815200537443, -1.2728358507156372, -0.00272486568428576, -0.6598809957504272, -0.824493408203125, -0.11060509830713272, -0.16426251828670502, -1.183234691619873, -0.00018952481332235038, -0.04595573619008064, -3.9934315282152966e-05, -0.00025996167096309364, -0.08447377383708954, -6.6756979322235566e-06, -0.021131960675120354, -0.06569639593362808, -0.0005273620481602848, -0.0009869233472272754, -0.004236889071762562, -0.0038783347699791193, -0.009997885674238205, -1.067134976387024, -0.014810727909207344, -0.3058334290981293, -1.7300125360488892, -1.3333784341812134, -0.2543037235736847, -0.030349524691700935, -0.5255019068717957, -2.2161202430725098, -3.210171937942505, -0.08081195503473282, -1.9740264415740967, -0.010606229305267334, -0.00222756527364254, -2.156238555908203, -0.10544005781412125, -0.0006513857515528798, -0.23277254402637482, -0.0010489681735634804, -0.013886974193155766, -0.2593517601490021, -0.00970183964818716, -0.005818572361022234, -0.33005714416503906, -6.198863957251888e-06, -1.9073468138230965e-06, -5.209310256759636e-05, -9.179073458653875e-06, -4.6491513785440475e-06, -1.5497195136049413e-06], "finish_reason": "length"}], "metrics": {"energy": 876.7564478797916, "energy_per_token": 3.424829874530436, "time": 21.652494, "time_per_token": 0.0845800546875}}
{"outputs": [{"text": "all_files_list = os.listdir(json_dir_path)\n\n    text_list = []\n    for file in all_files_list:\n        file_path = f\"{json_dir_path}/{file}\"\n        df = pd.read_json(file_path)\n        text_list.extend(df['text'].values.tolist())\n\n    words_counter = Counter()\n    for text in text_list:\n        words_counter.update(text.split(' '))\n\n    most_common_words = words_counter.most_common(word_count)\n    most_common_words = [(word, count) for word, count in most_common_words if word != '']\n    return most_common_words", "tokens": ["all", "_", "files", "_", "list", " =", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", "\n", "\n", "    ", "text", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " all", "_", "files", "_", "list", ":", "\n", "        ", "file", "_", "path", " =", " f", "\"", "{", "json", "_", "dir", "_", "path", "}/{", "file", "}\"", "\n", "        ", "df", " =", " pd", ".", "read", "_", "json", "(", "file", "_", "path", ")", "\n", "        ", "text", "_", "list", ".", "extend", "(", "df", "['", "text", "']", ".", "values", ".", "tol", "ist", "())", "\n", "\n", "    ", "words", "_", "counter", " =", " Counter", "()", "\n", "    ", "for", " text", " in", " text", "_", "list", ":", "\n", "        ", "words", "_", "counter", ".", "update", "(", "text", ".", "split", "('", " '", "))", "\n", "\n", "    ", "most", "_", "common", "_", "words", " =", " words", "_", "counter", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " [(", "word", ",", " count", ")", " for", " word", ",", " count", " in", " most", "_", "common", "_", "words", " if", " word", " ", "!", "=", " '", "']", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "def"], "logprobs": [-2.5497190952301025, -0.014568972401320934, -1.7871224880218506, -2.247532367706299, -2.241816997528076, -0.019129902124404907, -0.46934300661087036, -9.179073458653875e-06, -0.0029825749807059765, -3.576278118089249e-07, -0.0002119316632160917, -0.009644697420299053, -2.312633478140924e-05, -0.00019727191829588264, -8.475421054754406e-05, -1.7881377516459906e-06, -0.0008101756684482098, -0.046747513115406036, -2.233853578567505, -0.0006974886637181044, -2.175471782684326, -0.18660196661949158, -0.5496037006378174, -0.030185295268893242, -0.08043891936540604, -0.011564127169549465, -0.17503057420253754, -0.07895816117525101, -0.36057016253471375, -0.4051959812641144, -0.005607825703918934, -5.960462772236497e-07, -2.264974000354414e-06, -2.455681169521995e-05, -1.1920928244535389e-07, -0.003277646377682686, -0.005305140744894743, -0.02299453876912594, -1.8743481636047363, -0.03771693632006645, -0.17657062411308289, -0.008420795202255249, -2.71889328956604, -0.3579403758049011, -0.002292625606060028, -0.0057591930963099, -7.748573807475623e-06, -6.258291978156194e-05, -4.0531076592742465e-06, -8.4638240878121e-06, -0.06114564090967178, -0.0008530553313903511, -0.005675866734236479, -0.001531738555058837, -0.12231573462486267, -2.531156063079834, -0.058261770755052567, -0.0026884861290454865, -8.582700684200972e-05, -0.012112515978515148, -1.9073468138230965e-06, -0.0010477773612365127, -0.0003860443539451808, -0.010073771700263023, -0.0017550080083310604, -5.602820692729438e-06, -0.28980764746665955, -0.02840953879058361, -0.049240175634622574, -0.3019329309463501, -0.4936356544494629, -0.16328471899032593, -0.2683454751968384, -0.9751406311988831, -0.021196501329541206, -0.17512072622776031, -0.8867512345314026, -0.0016946729738265276, -0.3577471077442169, -0.00020930961181875318, -1.7163563966751099, -0.7928325533866882, -0.016508767381310463, -4.768370445162873e-07, -0.0012903229799121618, -0.00920835230499506, -0.06847889721393585, -0.0012180536286905408, -2.431802988052368, -0.37274667620658875, -2.951354742050171, -0.038118645548820496, -0.03321747109293938, -0.2235753834247589, -0.004784564021974802, -0.10299216210842133, -0.021596267819404602, -0.2774069607257843, -0.02753201499581337, -0.0013423488708212972, -4.768370445162873e-07, 0.0, -0.0003761537664104253, -0.0008453133050352335, -0.0034329311456531286, -0.3850325644016266, -0.34392282366752625, -0.10499850660562515, -0.3742600083351135, -1.883488948806189e-05, -0.08410560339689255, -0.04066676273941994, -0.0008553183870390058, -0.009429678320884705, -1.3991575241088867, -0.0013721107970923185, -0.0007569308509118855, -0.004878404084593058, -0.05777952820062637, -0.00029094755882397294, -0.5732981562614441, -0.0008060067193582654, -0.0730539932847023, -0.16819673776626587, -0.13100890815258026, -0.09730658680200577, -0.10764619708061218, -2.3841855067985307e-07, -1.4305104514278355e-06, -3.3378044463461265e-05, -1.0847986231965479e-05, -5.960462772236497e-07, -7.152555099310121e-07, -0.057644836604595184, -0.02231651544570923, -7.986990567587782e-06, -1.8715683836489916e-05, -0.002317601814866066, -0.0035207211039960384, -0.8635293841362, -3.011406183242798, -3.099393507000059e-05, -0.004123162943869829, -0.0012499623699113727, -0.03535910323262215, -0.6954485177993774, -0.8313628435134888, -0.4304257333278656, -0.14237499237060547, -0.08122507482767105, -0.005461651831865311, -0.018275681883096695, -0.01835281401872635, -0.00015233787416946143, -0.0037991267163306475, -0.0019740634597837925, -0.013300386257469654, -1.1920928244535389e-07, -5.125986263010418e-06, -1.3351351299206726e-05, -3.480850500636734e-05, -0.0954311341047287, -0.6291206479072571, -1.716557502746582, -4.124556289752945e-05, -0.005884584505110979, -0.23220065236091614, -0.05930453911423683, -0.04769608750939369, -0.9553440809249878, -0.19131530821323395, -0.014298485592007637, -5.960462772236497e-07, -9.775113539944869e-06, -9.536738616588991e-07, -3.516612196108326e-05, -0.27876460552215576, -0.007921588607132435, -0.8721746206283569], "finish_reason": "stop"}], "metrics": {"energy": 633.677177213669, "energy_per_token": 3.5400959620875363, "time": 15.137763, "time_per_token": 0.08456850837988826}}
{"outputs": [{"text": "all_json = [json.loads(open(os.path.join(json_dir_path, file), 'r').read()) for file in os.listdir(json_dir_path)]\n    text_content = [content['text'] for content in all_json]\n\n    total_text = ''.join([text for text in text_content])\n    total_text_words = total_text.split()\n\n    words_count = Counter(total_text_words)\n    most_common_words = words_count.most_common(word_count)\n\n    return most_common_words", "tokens": ["all", "_", "json", " =", " [", "json", ".", "loads", "(", "open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", ",", " '", "r", "')", ".", "read", "())", " for", " file", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")]", "\n", "    ", "text", "_", "content", " =", " [", "content", "['", "text", "']", " for", " content", " in", " all", "_", "json", "]", "\n", "\n", "    ", "total", "_", "text", " =", " ''", ".", "join", "([", "text", " for", " text", " in", " text", "_", "content", "])", "\n", "    ", "total", "_", "text", "_", "words", " =", " total", "_", "text", ".", "split", "()", "\n", "\n", "    ", "words", "_", "count", " =", " Counter", "(", "total", "_", "text", "_", "words", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " words", "_", "count", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "def"], "logprobs": [-2.5497190952301025, -0.014568972401320934, -2.4385926723480225, -2.1078829765319824, -1.4379959106445312, -0.8623276948928833, -0.008869299665093422, -0.5947493314743042, -0.00458048190921545, -1.0367405414581299, -0.0021621440537273884, -0.7777996063232422, -0.0014217516873031855, -0.0029314663261175156, -8.821448318485636e-06, -0.0011703077470883727, -0.0006102845072746277, -0.028960350900888443, -0.00015579440514557064, -0.0009716795175336301, -0.002138829091563821, -2.4676019165781327e-05, -0.003130299737676978, -0.7250252962112427, -1.3220844268798828, -0.002847428433597088, -0.7385232448577881, -0.022278159856796265, -0.05432504415512085, -0.0021027852781116962, -0.0004226268210913986, -0.011993438936769962, -0.23918883502483368, -0.003953855484724045, -0.0035219090059399605, -0.02185627445578575, -4.529942543740617e-06, -0.0004520586517173797, 0.0, -0.00032062159152701497, -0.0036120666190981865, -8.702239938429557e-06, -9.536697689327411e-06, -6.222531374078244e-05, -2.3841855067985307e-07, -0.1996932029724121, -0.011512630619108677, -0.13493715226650238, -1.2237476110458374, -0.6809433698654175, -1.4408413171768188, -0.02656271681189537, -0.5764528512954712, -2.886460542678833, -0.4546787738800049, -0.0011618537828326225, -0.0007543102256022394, -0.04229326918721199, -0.0031771203503012657, -0.00035375059815123677, -0.0032771711703389883, -3.576278118089249e-07, -1.9073468138230965e-06, -0.10680608451366425, -0.012494031339883804, -1.8219513893127441, -0.000482442817883566, -4.699381351470947, -0.04480833187699318, -1.4067983627319336, -0.14761529862880707, -1.939096450805664, -0.41503041982650757, -7.056941103655845e-05, -2.3805630207061768, -1.2346044778823853, -0.32587915658950806, -0.01915949024260044, -0.0022501645144075155, -0.004863693844527006, -9.536697689327411e-06, -5.245195097813848e-06, -0.17125749588012695, -0.06047606095671654, -0.33188021183013916, -1.4586714506149292, -0.0008251837571151555, -0.41947290301322937, -0.9914711117744446, -2.041334390640259, -0.049363408237695694, -0.3678375780582428, -1.4305104514278355e-06, -7.390948667307384e-06, -0.00029571453342214227, -0.02665221318602562, -0.5094988942146301, -0.021589267998933792, -0.49308568239212036, -0.0002489972102921456, -2.9027299880981445, -0.10501085221767426, -0.9765158295631409, -0.06701844185590744, -0.08008796721696854, -0.03829064220190048, -0.006812204606831074, -1.1920928244535389e-07, -5.960462772236497e-07, -0.0012528197839856148, -7.510157047363464e-06, -0.00203390559181571, -0.1848650723695755, -0.3295665681362152, -0.32808902859687805, -0.002013443037867546, -0.10113748162984848, -0.28944000601768494, -0.1656399667263031, -0.07941587269306183, -0.09797985106706619, -2.264974000354414e-06, -2.264974000354414e-06, -4.649054244509898e-05, -1.2993727978027891e-05, -8.22540732769994e-06, -1.9073468138230965e-06, -0.12305290251970291, -0.011617152951657772, -1.8954096958623268e-05, -2.6940935640595853e-05, -0.0022986913099884987, -0.004628658294677734, -0.29436737298965454, -0.0002775999018922448, -0.070498526096344, -0.024789348244667053, -2.3841830625315197e-06, -1.6689286894688848e-06, -1.6689286894688848e-06, -2.372236667724792e-05, -0.16666238009929657, -0.008360860869288445, -0.8568189144134521], "finish_reason": "stop"}], "metrics": {"energy": 480.5655963897706, "energy_per_token": 3.3372610860400735, "time": 11.991014, "time_per_token": 0.08327093055555555}}
{"outputs": [{"text": "# Check if the input directory path is valid\n    if not os.path.isdir(json_dir_path):\n        raise ValueError(f\"Invalid directory path: {json_dir_path}\")\n\n    # Create an empty list to store all the words from the JSON files\n    all_words = []\n\n    # Iterate through each JSON file in the directory\n    for filename in os.listdir(json_dir_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(json_dir_path, filename), 'r') as f:\n                # Load the content of the JSON file\n                content = json.load(f)\n\n                # Extract the text content from the dictionary and split it into words\n                words = content.get('text', '').split()\n\n                # Add the extracted words to the 'all_words' list\n                all_words.extend(words)\n\n    # Count the occurrences of each word using the Counter class from collections\n    word_counts = Counter(all_words)\n\n    # Get the 'word_count", "tokens": ["#", " Check", " if", " the", " input", " directory", " path", " is", " valid", "\n", "    ", "if", " not", " os", ".", "path", ".", "is", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "raise", " Value", "Error", "(", "f", "\"", "Invalid", " directory", " path", ":", " {", "json", "_", "dir", "_", "path", "}\"", ")", "\n", "\n", "    ", "#", " Create", " an", " empty", " list", " to", " store", " all", " the", " words", " from", " the", " JSON", " files", "\n", "    ", "all", "_", "words", " =", " []", "\n", "\n", "    ", "#", " Iter", "ate", " through", " each", " JSON", " file", " in", " the", " directory", "\n", "    ", "for", " filename", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", "):", "\n", "        ", "if", " filename", ".", "end", "sw", "ith", "(", "\"", ".", "json", "\"", "):", "\n", "            ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " filename", ")", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "#", " Load", " the", " content", " of", " the", " JSON", " file", "\n", "                ", "content", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "                ", "#", " Ext", "ract", " the", " text", " content", " from", " the", " dictionary", " and", " split", " it", " into", " words", "\n", "                ", "words", " =", " content", ".", "get", "('", "text", "'", ",", " '", "')", ".", "split", "()", "\n", "\n", "                ", "#", " Add", " the", " extracted", " words", " to", " the", " '", "all", "_", "words", "'", " list", "\n", "                ", "all", "_", "words", ".", "extend", "(", "words", ")", "\n", "\n", "    ", "#", " Count", " the", " occurrences", " of", " each", " word", " using", " the", " Counter", " class", " from", " collections", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "all", "_", "words", ")", "\n", "\n", "    ", "#", " Get", " the", " '", "word", "_", "count"], "logprobs": [-1.1805613040924072, -3.3816912174224854, -0.29490214586257935, -0.2783410847187042, -1.2494940757751465, -0.7302444577217102, -1.0091989040374756, -0.7795858979225159, -0.4641542434692383, -0.14999425411224365, -0.0012952042743563652, -0.06691163033246994, -0.05272139608860016, -0.01726842299103737, -1.168244216387393e-05, -0.005841920152306557, -5.006777428206988e-06, -0.09314475208520889, -0.000559292733669281, -6.12716976320371e-05, -0.0019026764202862978, -1.549708758830093e-05, -2.8371408916427754e-05, -0.000163541772053577, -2.861018856492592e-06, -0.0043901256285607815, -0.0012855607783421874, -0.002268719021230936, -0.1636599749326706, -0.34817588329315186, -2.3841830625315197e-06, -0.05191917344927788, -1.126023769378662, -0.03104373626410961, -0.3424169421195984, -0.08458057790994644, -0.04474734887480736, -0.07280474156141281, -0.016915684565901756, -0.000985136954113841, -2.8371408916427754e-05, -4.6491513785440475e-06, -4.005352093372494e-05, -2.861018856492592e-06, -0.019107915461063385, -0.00014172980445437133, -0.00023278864682652056, -0.18186382949352264, -0.0008793777669779956, -0.07421760261058807, -2.3056230545043945, -0.33246174454689026, -0.0033420443069189787, -0.5923491716384888, -0.028017936274409294, -0.049751393496990204, -1.2910919189453125, -0.4616377353668213, -1.5974823236465454, -0.7275224328041077, -0.5677823424339294, -0.17223918437957764, -0.011891664937138557, -0.006643589120358229, -8.797258487902582e-05, -0.43387821316719055, -0.001587798586115241, -0.08041779696941376, -0.05514790117740631, -0.005399524699896574, -0.00024673278676345944, -0.06539829820394516, -0.0002146728802472353, -0.004423001315444708, -1.0115244388580322, -0.000623032043222338, -0.7774832844734192, -2.0230698585510254, -1.527369499206543, -0.0012086475035175681, -0.015562285669147968, -0.00019047829846385866, -0.26466891169548035, -0.11077125370502472, -0.00010883215873036534, -0.004869269207119942, -1.576904535293579, -0.0001429217227268964, -0.006561994552612305, -1.311301275563892e-06, -0.0005863377591595054, 0.0, -1.9550132492440753e-05, -0.00021407696476671845, -1.311301275563892e-06, 0.0, -1.7881377516459906e-06, 0.0, -0.00010477947944309562, -0.0005365362740121782, -0.006385874003171921, -0.10076526552438736, -0.021994706243276596, -0.00020990552729927003, -0.0008859285153448582, 0.0, 0.0, -0.33144789934158325, -6.4490144723095e-05, -0.0012029323261231184, -0.00024172721896320581, -6.556489552167477e-06, -0.0024651873391121626, -0.0035070599988102913, -0.009517297148704529, -1.7181196212768555, -4.362964682513848e-05, -0.0004189328756183386, -0.03491898626089096, -1.6689286894688848e-06, -2.145764938177308e-06, -1.0728830375228426e-06, -0.0002588890492916107, -1.6212332411669195e-05, -0.00015710550360381603, -3.933898824470816e-06, -2.3841855067985307e-07, -1.4305104514278355e-06, 0.0, -2.312633478140924e-05, -0.0012477001873776317, -0.18192753195762634, -3.313963316031732e-05, -0.8248790502548218, -0.0024667331017553806, -0.02045430801808834, -3.8980677345534787e-05, -0.27337807416915894, -0.005574514623731375, -0.0014644861221313477, -0.0037450906820595264, -1.2640271186828613, -0.43207210302352905, -0.05204569920897484, -3.1660709381103516, -0.19869667291641235, -0.10599550604820251, -0.08255399018526077, -0.0012009082129225135, -0.6816196441650391, -0.00015364897262770683, -1.0441346168518066, -0.0077402666211128235, -0.005093218293040991, -3.099436753473128e-06, -0.002618101192638278, -5.364403477869928e-06, -7.60526381782256e-05, -0.001149827498011291, -0.00334442057646811, -0.6244233250617981, -0.06536155939102173, -0.026770370081067085, -0.5946840047836304, -0.0016527815023437142, -0.07149688154459, -0.19920092821121216, -0.2054307460784912, -0.13444392383098602, -0.042452555149793625, -2.6917026042938232, -1.1038284301757812, -0.30298030376434326, -0.0476871095597744, -0.01568903587758541, -0.21035470068454742, -0.02119673602283001, -0.000504723924677819, -0.5294656157493591, -0.02637336403131485, -0.03439551964402199, -1.521306037902832, -0.0013566347770392895, -0.5239344239234924, -0.00176214799284935, -0.109132781624794, -9.023735765367746e-05, -0.022895392030477524, -0.0010593285551294684, -0.008288745768368244, -0.011079693213105202, -0.020761549472808838, -0.011161155998706818, -0.21098777651786804, -0.0027447191532701254, -0.003911702428013086, -0.48957663774490356, -0.02789297141134739, -0.55036461353302, -0.0017360866768285632, -0.0069545116275548935, -0.009808204136788845, -2.157736301422119, -0.001347468001767993, -0.00023827097902540118, -0.0010605193674564362, -0.0001102625101339072, -0.00041333239641971886, -0.002372190821915865, -0.00018142008048016578, -0.004847915843129158, -9.536738616588991e-07, -7.152555099310121e-07, -0.13560792803764343, -8.868777513271198e-05, -0.0021106365602463484, -0.003907308913767338, -0.0002172949316445738, -0.00035339308669790626, -0.003604939905926585, -0.005340476520359516, -0.006056645885109901, -0.18715634942054749, -0.005462007597088814, -0.8909200429916382, -0.0009238027851097286, -0.005988512188196182, -0.03036664053797722, -0.802280843257904, -0.7297773361206055, -0.15342961251735687, -0.5368821024894714, -0.6679908633232117, -1.1242942810058594, -1.5720475912094116, -6.663577369181439e-05, -0.1654956042766571, -0.00015352977789007127, -0.21198755502700806, -0.0001668790791882202, -0.0006889115320518613, -0.00015043080202303827, -0.000717144284863025, -3.576278118089249e-07, -2.7418097943154862e-06, -9.691245941212401e-05, -0.007318118121474981, -0.008452001959085464, -0.0001512651506345719, -0.001677416730672121, -1.0608092546463013, -0.022467706352472305, -1.9607802629470825, -0.013493052683770657, -0.0003238391946069896, -0.0004909025738015771], "finish_reason": "length"}], "metrics": {"energy": 883.9985159339897, "energy_per_token": 3.453119202867147, "time": 21.637327, "time_per_token": 0.08452080859375}}
{"outputs": [{"text": "files = os.listdir(json_dir_path)\n    words_list = []\n    for file in files:\n        file_path = os.path.join(json_dir_path, file)\n        if os.path.isfile(file_path):\n            with open(file_path, 'r') as f:\n                try:\n                    json_file = json.load(f)\n                    if 'text' in json_file:\n                        words = json_file['text'].split()\n                        for word in words:\n                            words_list.append(word)\n                except json.JSONDecodeError:\n                    print(f\"Error decoding JSON in file {file_path}\")\n    word_counts = Counter(words_list)\n    most_common_words = word_counts.most_common(word_count)\n    return most_common_words", "tokens": ["files", " =", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", "\n", "    ", "words", "_", "list", " =", " []", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", "\n", "        ", "if", " os", ".", "path", ".", "is", "file", "(", "file", "_", "path", "):", "\n", "            ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "                ", "try", ":", "\n", "                ", "    ", "json", "_", "file", " =", " json", ".", "load", "(", "f", ")", "\n", "                ", "    ", "if", " '", "text", "'", " in", " json", "_", "file", ":", "\n", "                ", "        ", "words", " =", " json", "_", "file", "['", "text", "']", ".", "split", "()", "\n", "                ", "        ", "for", " word", " in", " words", ":", "\n", "                ", "            ", "words", "_", "list", ".", "append", "(", "word", ")", "\n", "                ", "except", " json", ".", "JSON", "Dec", "ode", "Error", ":", "\n", "                ", "    ", "print", "(", "f", "\"", "Error", " decoding", " JSON", " in", " file", " {", "file", "_", "path", "}\"", ")", "\n", "    ", "word", "_", "counts", " =", " Counter", "(", "words", "_", "list", ")", "\n", "    ", "most", "_", "common", "_", "words", " =", " word", "_", "counts", ".", "most", "_", "common", "(", "word", "_", "count", ")", "\n", "    ", "return", " most", "_", "common", "_", "words", "\n", "\n", "if"], "logprobs": [-3.536298990249634, -0.15920238196849823, -0.44159117341041565, -4.172316494077677e-06, -0.007336934097111225, -1.1920928244535389e-07, -0.0002586507180240005, -0.004891097079962492, -2.0861407392658293e-05, -2.169585604860913e-05, -8.034383063204587e-05, -1.4305104514278355e-06, -0.0004172646440565586, -0.02442040666937828, -0.1264447271823883, -3.372915267944336, -1.1327365636825562, -1.231468677520752, -0.02000454254448414, -0.0914018303155899, -0.009554964490234852, -0.2230304330587387, -0.08939328044652939, -0.2855162024497986, -0.1257779598236084, -0.003282636869698763, -0.001672775368206203, -0.001821407931856811, -0.009413854219019413, -1.762854814529419, -0.09960571676492691, -0.12954005599021912, -0.0035381829366087914, -0.08767197281122208, -1.4543427823809907e-05, -0.00029023250681348145, -9.417489309271332e-06, -0.002624878427013755, -0.0002978596603497863, -0.0034212886821478605, -1.1205610462639015e-05, -2.0503786799963564e-05, -3.933898824470816e-06, -2.3841855067985307e-07, -0.0010400369064882398, -0.016976162791252136, -0.00043930893298238516, -0.001701099332422018, -0.027755120769143105, -2.195669174194336, -0.27474644780158997, -9.65590606938349e-06, -0.002444495679810643, -1.07287787614041e-05, -0.060584791004657745, -0.009012141264975071, -0.0025197681970894337, -0.0009055804111994803, -0.001166735659353435, -1.1920928244535389e-07, -0.5512069463729858, -0.0052917408756911755, -0.003120079869404435, -0.1108211949467659, -0.00016664070426486433, -0.0006540066679008305, -0.007783796638250351, -0.003544003702700138, -1.1920928244535389e-07, -0.15835821628570557, -0.37055647373199463, -0.007849679328501225, -0.04135110601782799, -0.00031668893643654883, -0.23647356033325195, -0.017467238008975983, -0.0024683980736881495, -0.0009209443815052509, -2.8822028636932373, -0.0002411313180346042, -0.0023625576868653297, -0.00025376438861712813, -0.0005115154199302197, -1.682841420173645, -0.003072305815294385, -2.9896366596221924, -0.07477705925703049, -0.0410456620156765, -7.510157047363464e-06, -0.035982001572847366, -2.407998726994265e-05, -0.0004158347437623888, -0.004343243315815926, -0.013439537957310677, -0.0026208360213786364, -0.20917312800884247, -2.3540682792663574, -0.947148859500885, -0.002997193718329072, -0.0010108605492860079, -0.06269598752260208, -0.0007497837068513036, -5.578839045483619e-05, -5.364403477869928e-06, -0.19522219896316528, -0.010867222212255001, -0.00025817399728111923, -0.0011922164121642709, -1.2000453472137451, -0.9387099742889404, -0.10917659848928452, -0.00016866691294126213, -4.60137271147687e-05, -0.018037104979157448, -1.2159273865108844e-05, -5.411955135059543e-05, -0.035095907747745514, -0.03567871078848839, -0.15110176801681519, -0.0297482181340456, -0.0008815216715447605, -0.005443986505270004, -2.2071871757507324, -0.05437878519296646, -0.000746448349673301, -0.0010127659188583493, -0.00043358939001336694, -0.005217269994318485, -0.0002464944263920188, -0.004136933945119381, -0.30942121148109436, -6.151010165922344e-05, -0.0001102625101339072, -0.004446737933903933, -0.005849030800163746, -0.015270699746906757, -0.002432722831144929, -0.048003483563661575, -0.0036960402503609657, -0.00693332077935338, -0.017500272020697594, -0.2293960005044937, -1.4066597032069694e-05, -0.03105841390788555, -2.5152843591058627e-05, -2.1457441107486375e-05, -1.1920928244535389e-07, -0.1589117795228958, -0.006025008857250214, -0.00023815179883968085, -0.0007003477076068521, -0.9093369245529175, -0.010264936834573746, -0.04619104787707329, -0.06678853929042816, -0.3631589710712433, -1.0764169692993164, -0.030081307515501976, -0.9909901022911072, -0.26100707054138184, -1.4172050952911377, -0.0049206349067389965, -1.1498442888259888, -0.0006789048202335835, -0.04238468408584595, -0.0016002956544980407, -0.001100768567994237, -0.6558880805969238, -0.9969342350959778, -0.006960785947740078, -0.4400382936000824, -0.0014510351466014981, -0.015299933031201363, -0.0009216589969582856, -0.0020350953564047813, -9.369411418447271e-05, -2.7418097943154862e-06, -0.0007622911944054067, -0.06722699850797653, -0.010571668855845928, -0.2242322415113449, -0.0003883084573317319, -0.013518103398382664, -0.33409440517425537, -0.019930224865674973, -0.004283182788640261, -0.031772688031196594, -5.960462772236497e-07, -1.4305104514278355e-06, -2.0146166207268834e-05, -5.006777428206988e-06, -1.311301275563892e-06, -3.6954811548639555e-06, -0.04314606636762619, -0.007800119463354349, -1.2993727978027891e-05, -3.6238969187252223e-05, -0.0006300609675236046, -0.0022966694086790085, -0.07998035103082657, -0.06418848037719727, -0.012703096494078636, -2.3841830625315197e-06, -1.5497195136049413e-06, -2.264974000354414e-06, -4.029192859889008e-05, -0.19178885221481323, -0.015744894742965698, -1.091043472290039], "finish_reason": "stop"}], "metrics": {"energy": 707.6261046085353, "energy_per_token": 3.3857708354475373, "time": 17.648178, "time_per_token": 0.08444104306220096}}
{"outputs": [{"text": "json_files = [pos_json for pos_json in os.listdir(json_dir_path)]\n    texts = []\n    for json_file in json_files:\n        with open(os.path.join(json_dir_path, json_file)) as f:\n            data = json.load(f)\n            texts.append(data['text'])\n    df = pd.DataFrame(data={'text': texts})\n    df = df['text'].str.split(expand=True).stack().value_counts().to_frame('Count')\n    df = df.sort_values('Count', ascending=False)\n    df['Count'] = df['Count'].astype(int)\n    df = df.reset_index()\n    return df[['index', 'Count']].head(word_count).to_dict('records')", "tokens": ["json", "_", "files", " =", " [", "pos", "_", "json", " for", " pos", "_", "json", " in", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")]", "\n", "    ", "text", "s", " =", " []", "\n", "    ", "for", " json", "_", "file", " in", " json", "_", "files", ":", "\n", "        ", "with", " open", "(", "os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " json", "_", "file", "))", " as", " f", ":", "\n", "            ", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "            ", "text", "s", ".", "append", "(", "data", "['", "text", "'])", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", "={", "'", "text", "':", " texts", "})", "\n", "    ", "df", " =", " df", "['", "text", "']", ".", "str", ".", "split", "(", "expand", "=", "True", ")", ".", "stack", "()", ".", "value", "_", "counts", "()", ".", "to", "_", "frame", "('", "Count", "')", "\n", "    ", "df", " =", " df", ".", "sort", "_", "values", "('", "Count", "'", ",", " ascending", "=", "False", ")", "\n", "    ", "df", "['", "Count", "']", " =", " df", "['", "Count", "']", ".", "ast", "ype", "(", "int", ")", "\n", "    ", "df", " =", " df", ".", "reset", "_", "index", "()", "\n", "    ", "return", " df", "[", "['", "index", "'", ",", " '", "Count", "']", "]", ".", "head", "(", "word", "_", "count", ")", ".", "to", "_", "dict", "('", "records", "')", "\n", "\n", "if"], "logprobs": [-2.843881845474243, -0.03998080641031265, -0.7250030040740967, -0.036886267364025116, -0.2757386267185211, -2.725048542022705, -0.00013636612857226282, -0.004868913441896439, -0.00013529339048545808, -7.509902934543788e-05, -5.8412379075889476e-06, -1.490105023549404e-05, -5.2927523938706145e-05, -0.005498997867107391, -3.933898824470816e-06, -0.0007702721050009131, 0.0, -0.0006039702566340566, -0.006842514965683222, -5.2689116273541003e-05, -0.0006618693005293608, -0.0005616756388917565, -1.1920858014491387e-05, -0.6514378190040588, -0.04789894446730614, -0.48770296573638916, -1.7080498933792114, -1.0785478353500366, -0.10352575033903122, -0.1195269525051117, -0.006256280932575464, -0.15714216232299805, -0.05885269492864609, -0.8039234280586243, -0.013182039372622967, -0.045221101492643356, -0.020095447078347206, -0.004575616680085659, -3.099436753473128e-06, -5.960462772236497e-07, -0.0013140147784724832, -0.0009426202741451561, -0.006936753634363413, -0.4841894209384918, -0.0006691362359561026, -0.011462780646979809, -0.44314903020858765, -3.099436753473128e-06, -0.0006615119054913521, -2.3841855067985307e-07, -0.0009245174005627632, -0.00012468514614738524, -0.004887301009148359, -8.702239938429557e-06, -0.00020215852418914437, -3.564294092939235e-05, -2.622600959512056e-06, -0.0010419422760605812, -0.04528969153761864, -7.271740287251305e-06, -9.536738616588991e-07, -0.6073923110961914, -0.0009031984372995794, -0.8063051104545593, -0.028390072286128998, -0.003569423919543624, -0.004860965069383383, -0.7676881551742554, -0.018717683851718903, -0.0066946265287697315, -1.4185804502631072e-05, -0.023844854906201363, -2.7417760065873154e-05, -0.0003507714136503637, -0.00691982451826334, -0.009583655744791031, -0.2164020538330078, -0.22756434977054596, -0.26284316182136536, -0.0377257764339447, -0.0237599965184927, -0.014198238030076027, -0.026074694469571114, -0.8242231011390686, -0.0013442536583170295, -0.019098909571766853, -0.0067135728895664215, -0.4934207499027252, -1.5136412382125854, -0.01841624826192856, -0.0009698931244201958, -1.7762025890988298e-05, -0.04268788918852806, -0.905644953250885, -2.8173575401306152, -1.2196179628372192, -0.054670024663209915, -0.06576861441135406, -0.18709346652030945, -0.06550213694572449, -0.022195732221007347, -0.009534064680337906, -0.1178157776594162, -1.1042895317077637, -1.62554931640625, -0.03379318490624428, -0.7862869501113892, -5.721882189391181e-05, -0.0006046851049177349, -0.03949711099267006, -0.08163869380950928, -0.0002683041093405336, -0.10795004665851593, -0.22125235199928284, -0.11390615254640579, -0.006954156327992678, -0.0068284254521131516, -0.011341623030602932, -0.1639668047428131, -0.00427617970854044, -0.0022515917662531137, -0.0059547401033341885, -0.03147250786423683, -1.7881377516459906e-06, -3.933898824470816e-06, -0.09907445311546326, -1.019111156463623, -1.1120085716247559, -3.6954811548639555e-06, -0.011251806281507015, -0.2647072374820709, -2.637505292892456, -0.1427941471338272, -0.5847868919372559, -0.011569430120289326, -0.5111324787139893, -0.7063305377960205, -0.016423281282186508, -0.18312177062034607, -0.9596213102340698, -1.4305012882687151e-05, -0.0033933697268366814, -0.822500467300415, -0.0001280225842492655, -0.005553768947720528, -0.00044764988706447184, -0.0316183939576149, -0.004949579015374184, -0.010190717875957489, -0.014278272166848183, -0.15509097278118134, -0.021102430298924446, -1.7161648273468018, -1.9033455848693848, -0.5053357481956482, -0.023891298100352287, -0.04101511463522911, -0.03616965562105179, -0.040575649589300156, -8.702239938429557e-06, -4.589452510117553e-05, -0.02677002176642418, -0.021100211888551712, -8.344646857949556e-07, -0.3805374801158905, -0.10479821264743805, -0.0014524635626003146, -0.13189256191253662, -0.013766814954578876, -1.3490256071090698, -0.2949683666229248, -0.01812092959880829, -0.0624050609767437, -0.38218453526496887, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.05155320093035698, -0.10250164568424225, -0.011835826560854912, -1.459231972694397, -0.5281990766525269, -0.8172847628593445, -0.10129498690366745, -0.0184644665569067, -0.0016229089815169573, -0.000568228424526751, -0.029804570600390434, -0.00012563870404846966, -4.3748852476710454e-05, -0.07804430276155472, -0.004573717713356018, -0.04980606213212013, -0.0004978132783435285, -0.020917411893606186, -7.510157047363464e-06, -4.124556289752945e-05, -0.07717055827379227, -0.030892912298440933, -1.1845613718032837, -2.634490556374658e-05, -0.33926987648010254, -0.28593721985816956, -0.07874718308448792, -0.00025602878304198384, -0.12776999175548553, -0.0377565398812294, -1.0181858539581299], "finish_reason": "stop"}], "metrics": {"energy": 713.5726264324192, "energy_per_token": 3.44721075571217, "time": 17.445246, "time_per_token": 0.08427655072463769}}
{"outputs": [{"text": "# Get list of all files in json_dir_path\n    files = os.listdir(json_dir_path)\n\n    # Initialize empty list to store all text content\n    all_text = []\n\n    # Loop through each file in the directory and append its text content to all_text\n    for file in files:\n        # Construct the full path to the file\n        file_path = os.path.join(json_dir_path, file)\n\n        # Open the file and load its JSON data into a dictionary\n        with open(file_path, 'r') as f:\n            json_data = json.load(f)\n\n        # Extract the text content from the dictionary and append it to all_text\n        # if 'text' key is present in the dictionary, otherwise skip the file\n        if 'text' in json_data.keys():\n            all_text.append(json_data['text'])\n\n    # Combine all the text content into a single string\n    all_text = ' '.join(all_text)\n\n    # Split the text string into words, creating a list of all the words in", "tokens": ["#", " Get", " list", " of", " all", " files", " in", " json", "_", "dir", "_", "path", "\n", "    ", "files", " =", " os", ".", "list", "dir", "(", "json", "_", "dir", "_", "path", ")", "\n", "\n", "    ", "#", " Initialize", " empty", " list", " to", " store", " all", " text", " content", "\n", "    ", "all", "_", "text", " =", " []", "\n", "\n", "    ", "#", " Loop", " through", " each", " file", " in", " the", " directory", " and", " append", " its", " text", " content", " to", " all", "_", "text", "\n", "    ", "for", " file", " in", " files", ":", "\n", "        ", "#", " Construct", " the", " full", " path", " to", " the", " file", "\n", "        ", "file", "_", "path", " =", " os", ".", "path", ".", "join", "(", "json", "_", "dir", "_", "path", ",", " file", ")", "\n", "\n", "        ", "#", " Open", " the", " file", " and", " load", " its", " JSON", " data", " into", " a", " dictionary", "\n", "        ", "with", " open", "(", "file", "_", "path", ",", " '", "r", "')", " as", " f", ":", "\n", "            ", "json", "_", "data", " =", " json", ".", "load", "(", "f", ")", "\n", "\n", "        ", "#", " Ext", "ract", " the", " text", " content", " from", " the", " dictionary", " and", " append", " it", " to", " all", "_", "text", "\n", "        ", "#", " if", " '", "text", "'", " key", " is", " present", " in", " the", " dictionary", ",", " otherwise", " skip", " the", " file", "\n", "        ", "if", " '", "text", "'", " in", " json", "_", "data", ".", "keys", "():", "\n", "            ", "all", "_", "text", ".", "append", "(", "json", "_", "data", "['", "text", "'])", "\n", "\n", "    ", "#", " Combine", " all", " the", " text", " content", " into", " a", " single", " string", "\n", "    ", "all", "_", "text", " =", " '", " '", ".", "join", "(", "all", "_", "text", ")", "\n", "\n", "    ", "#", " Split", " the", " text", " string", " into", " words", ",", " creating", " a", " list", " of", " all", " the", " words", " in"], "logprobs": [-1.1805613040924072, -2.55208420753479, -3.724904775619507, -0.013644171878695488, -0.84553062915802, -1.6778303384780884, -0.1891380399465561, -2.833325147628784, -0.08349432796239853, -0.01967298984527588, -0.027618758380413055, -0.0008519833791069686, -0.6378323435783386, -0.0016467118402943015, -1.5019474029541016, -0.19104531407356262, -0.3705533444881439, -1.5497195136049413e-06, -0.002473986940458417, 0.0, -0.00019572250312194228, -0.0018137923907488585, -2.622600959512056e-06, -4.172316494077677e-06, -2.8132995794294402e-05, 0.0, -0.00025376438861712813, -0.0019195717759430408, -0.522627055644989, -0.0005009111482650042, -0.04415840283036232, -1.4263499975204468, -1.6935137510299683, -0.5170740485191345, -0.26325955986976624, -0.11712202429771423, -1.6205456256866455, -0.7369953989982605, -1.2733553647994995, -0.26233863830566406, -0.0001370812824461609, -0.5233975648880005, -0.003293449291959405, -0.048659548163414, -0.3811800479888916, -0.009593102149665356, -0.00021205084340181202, -0.08271796256303787, -0.00033301531220786273, -0.023100897669792175, -0.5022270083427429, -0.22311770915985107, -0.8593081831932068, -0.06740442663431168, -0.9444727301597595, -0.5860714316368103, -0.38407790660858154, -2.26505970954895, -1.9320324659347534, -0.7949433922767639, -0.15695582330226898, -0.09397416561841965, -0.027063611894845963, -0.5642250180244446, -0.0007933806627988815, -0.0010237219976261258, -0.10642419010400772, -0.00019858295854646713, -0.0074604712426662445, -0.22841545939445496, -0.04387754946947098, -0.0020223658066242933, -0.00038115866482257843, -0.00018368464952800423, -0.020566074177622795, -1.5426651239395142, -3.6588058471679688, -0.6831263303756714, -0.32690560817718506, -0.42127475142478943, -0.24901030957698822, -0.022959938272833824, -0.08699031919240952, -0.08672112971544266, -0.0004247716860845685, -0.2636016011238098, -0.033519893884658813, -0.003519295481964946, -0.0002610342635307461, -0.06354107707738876, -1.1205610462639015e-05, -3.1470757676288486e-05, -7.271740287251305e-06, -0.0007483542431145906, -0.00013958434283267707, -0.0012740122620016336, -1.1205610462639015e-05, -1.6569954823353328e-05, -4.1126360883936286e-05, -8.702239938429557e-06, -0.00025018901214934886, -0.002544382121413946, -0.00014208737411536276, -0.00027056847466155887, -0.515560507774353, -0.0011453027836978436, -0.013804792426526546, -1.1090117692947388, -0.0691772922873497, -0.052876539528369904, -0.5626351833343506, -1.0955052375793457, -0.40444836020469666, -1.395821452140808, -1.547818899154663, -1.3508009910583496, -0.4864995777606964, -0.5606124401092529, -0.12520825862884521, -0.0003328961320221424, -0.024713639169931412, -0.00010144196130568162, -0.0005783553933724761, -0.0007358465809375048, -0.0005174727994017303, -1.1920928244535389e-07, -0.14393796026706696, -0.20725218951702118, -0.002237675478681922, -0.02446530945599079, -6.627816765103489e-05, -0.04724022001028061, -0.004520791582763195, -0.0009177286992780864, -0.0020904133561998606, -2.8866703510284424, -0.0020384264644235373, -0.08172624558210373, -0.0014649622607976198, -0.001424251589924097, -1.311301275563892e-06, -0.0016433794517070055, -1.168244216387393e-05, -7.843663479434326e-05, -0.0005611990345641971, -0.0016235039802268147, -0.048265233635902405, -0.4313851296901703, -0.00699499761685729, -0.7690742611885071, -0.0003430254873819649, -0.052170172333717346, -0.4924423098564148, -0.18617387115955353, -0.02477864921092987, -0.008667586371302605, -0.2269730269908905, -0.19691292941570282, -0.30094683170318604, -0.03531134873628616, -0.00039748396375216544, -0.05866599082946777, -0.0003631647559814155, -9.715084888739511e-05, -0.027938995510339737, -0.0029451351147145033, -3.2148661613464355, -3.649231433868408, -2.589205741882324, -0.026062151417136192, -0.005041742697358131, -0.2399085909128189, -0.7946679592132568, -0.39240762591362, -0.5562041401863098, -0.11549775302410126, -0.06339786946773529, -1.473881721496582, -0.5160590410232544, -0.7785147428512573, -0.3696877658367157, -0.04484366625547409, -0.03985331580042839, -0.0022395786363631487, -0.07065204530954361, -0.0607755146920681, -0.00021944021864328533, -7.724463648628443e-05, -0.0016764646861702204, -0.0003828269545920193, -1.9550132492440753e-05, -1.0728830375228426e-06, -2.155883312225342, -6.210611172718927e-05, -0.0027385372668504715, -0.0009435730753466487, -0.003381607821211219, -0.19124944508075714, -4.768360213347478e-06, -1.0013530300057027e-05, -0.007745353039354086, -0.015251210890710354, -0.002495629247277975, -0.002625948516651988, -9.953480184776708e-05, -2.9802276912960224e-06, -0.016627540811896324, -1.728519782773219e-05, -0.009449162520468235, -0.0005790702416561544, -0.03321481868624687, -0.005289369262754917, -0.008711311966180801, -2.389894485473633, -0.017800109460949898, -1.4196635484695435, -0.05328124761581421, -0.33812862634658813, -0.045126643031835556, -0.10658933222293854, -0.002848854986950755, -0.023653823882341385, -0.4147598445415497, -0.00018475732940714806, -0.616181492805481, -0.00016950124700088054, -0.010112008079886436, -0.45200255513191223, -0.2703404426574707, -0.02068215049803257, -0.0003999863693024963, -2.6940935640595853e-05, -0.005043403245508671, -0.0017692878609523177, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.0004220310365781188, -0.005151925142854452, -0.014252887107431889, -0.0003978414461016655, -0.0012473430251702666, -0.7073697447776794, -0.018573297187685966, -1.0203425884246826, -2.5418829917907715, -0.12650711834430695, -1.5702801942825317, -1.7696418762207031, -3.947441339492798, -0.01224099937826395, -0.05091704800724983, -0.03778638690710068, -1.1685192584991455, -1.1761239767074585, -0.053538911044597626, -0.9515209197998047], "finish_reason": "length"}], "metrics": {"energy": 882.5230666790013, "energy_per_token": 3.447355729214849, "time": 21.642216, "time_per_token": 0.08453990625}}
