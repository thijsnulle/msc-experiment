{"outputs": [{"text": "return df.apply(lambda x: stats.shapiro(x).pvalue)", "tokens": ["return", " df", ".", "apply", "(", "lambda", " x", ":", " stats", ".", "sh", "apiro", "(", "x", ")", ".", "p", "value", ")"], "logprobs": [-1.0774776935577393, -1.8898638486862183, -0.004913161508738995, -0.3201667070388794, -0.001328896265476942, -0.5978469252586365, -0.23047204315662384, -0.0016593271866440773, -0.03482147678732872, -2.288792165927589e-05, -0.004626641049981117, -0.0010782625759020448, -0.002342934487387538, -0.002605617046356201, -0.7950363755226135, -0.03142999857664108, -0.007759192958474159, -0.05305664241313934, -0.5978100895881653], "finish_reason": "stop"}], "metrics": {"energy": 14.40422174835205, "energy_per_token": 0.7581169341237921, "time": 0.64180017, "time_per_token": 0.03377895631578948}}
{"outputs": [{"text": "return df.apply(stats.shapiro).to_dict()", "tokens": ["return", " df", ".", "apply", "(", "stats", ".", "sh", "apiro", ")", ".", "to", "_", "dict", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.0774776935577393, -1.8898638486862183, -0.004913161508738995, -0.3201667070388794, -0.001328896265476942, -0.8925132155418396, -2.13382354559144e-05, -0.006938056088984013, -0.0012194823939353228, -0.8344221115112305, -0.17003542184829712, -0.16087011992931366, -6.6756979322235566e-06, -0.00033087024348787963, -0.20606762170791626, -1.024670124053955, -2.3841855067985307e-07, -8.344646857949556e-07, -3.766942609217949e-05, -0.0001392267586197704, -0.07988879084587097], "finish_reason": "stop"}], "metrics": {"energy": 50.94527481460571, "energy_per_token": 2.4259654673621767, "time": 1.4796414, "time_per_token": 0.07045911428571429}}
{"outputs": [{"text": "p_values = {}\n    for i, col in df.items():\n        p_values[i] = stats.shapiro(col)[1]\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " i", ",", " col", " in", " df", ".", "items", "():", "\n", "        ", "p", "_", "values", "[", "i", "]", " =", " stats", ".", "sh", "apiro", "(", "col", ")[", "1", "]", "\n", "    ", "return", " p", "_", "values", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -1.0496941804885864, -0.6145331263542175, -0.6338809132575989, -0.008749127388000488, -2.6680498123168945, -0.0011325619416311383, -0.52842777967453, -9.905801562126726e-05, -0.0070772673934698105, -0.003618124406784773, -1.0401160717010498, -0.2200750708580017, -0.47745367884635925, -0.004153673071414232, -0.018224645406007767, -0.0017219253350049257, -0.003383627627044916, -0.03196332976222038, -2.8967437174287625e-05, -0.010803896933794022, -0.0011339908232912421, -0.0012246021069586277, -0.00778568908572197, -0.21850644052028656, -0.0002783149539027363, -0.0018253346206620336, -0.019821541383862495, -0.06673378497362137, -0.005432960111647844, -0.003070166567340493, -9.059865078597795e-06, -3.3378546504536644e-06, -1.2642688751220703, -8.344646857949556e-07, -1.1920922133867862e-06, -3.397406908334233e-05, -0.0002083561266772449, -0.06643833965063095], "finish_reason": "stop"}], "metrics": {"energy": 78.97563246917726, "energy_per_token": 1.7168615754168968, "time": 2.7285016, "time_per_token": 0.05931525217391304}}
{"outputs": [{"text": "p_values = {}\n    for i in range(df.shape[1]):\n        p_values[i] = stats.shapiro(df.iloc[:, i])[1]\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " i", " in", " range", "(", "df", ".", "shape", "[", "1", "]", "):", "\n", "        ", "p", "_", "values", "[", "i", "]", " =", " stats", ".", "sh", "apiro", "(", "df", ".", "il", "oc", "[:", ",", " i", "])", "[", "1", "]", "\n", "    ", "return", " p", "_", "values", "\n", "\n", "print"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -1.0496941804885864, -0.7801749110221863, -0.28531116247177124, -0.00047958316281437874, -0.45393720269203186, -9.440929716220126e-05, -0.09259135276079178, -0.0008644896443001926, -0.004294815473258495, -0.0004196478403173387, -0.0002454218047205359, -0.007817033678293228, -0.005185724701732397, -1.2591500282287598, -0.19374136626720428, -0.5218201875686646, -0.007358353119343519, -0.026375453919172287, -0.004220626316964626, -0.0018260485958307981, -0.04399733617901802, -3.0397906812140718e-05, -0.010457953438162804, -0.0011344670783728361, -0.002507758093997836, -0.004620708059519529, -0.09587661176919937, -0.016048073768615723, -0.0005957497633062303, -0.0004334702098276466, -0.001209600013680756, -0.10995437949895859, -0.006825820542871952, -0.10313184559345245, -0.00014137222024146467, -0.003833447117358446, -0.01656833104789257, -0.100858174264431, -0.004456944297999144, -0.003267784370109439, -9.059865078597795e-06, -2.50339189733495e-06, -0.7960019707679749, -0.018682114779949188, -2.7606759071350098], "finish_reason": "stop"}], "metrics": {"energy": 42.08661103248597, "energy_per_token": 0.7940870006129428, "time": 2.101212, "time_per_token": 0.039645509433962264}}
{"outputs": [{"text": "return {i: stats.shapiro(df[i])[1] for i in df.columns}", "tokens": ["return", " {", "i", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "i", "])", "[", "1", "]", " for", " i", " in", " df", ".", "columns", "}"], "logprobs": [-1.0774776935577393, -0.5019892454147339, -1.565786361694336, -0.013499756343662739, -0.14836756885051727, -7.331102824537084e-05, -0.00534403370693326, -0.0013758012792095542, -0.0016457597957924008, -0.10811728984117508, -0.14694511890411377, -0.1265421062707901, -0.018031133338809013, -0.10344018787145615, -0.00035446559195406735, -0.0009378563845530152, -0.018356209620833397, -0.0016411182004958391, -0.008948934264481068, -0.038684092462062836, -0.12447173148393631, -0.030322348698973656, -0.3852883577346802], "finish_reason": "stop"}], "metrics": {"energy": 18.597041130065918, "energy_per_token": 0.8085670056550399, "time": 0.85780936, "time_per_token": 0.03729605913043478}}
{"outputs": [{"text": "# Convert the DataFrame to a NumPy array\n    array = df.to_numpy()\n\n    # Define the list of column indices for each column in the DataFrame\n    indices = [i for i in range(array.shape[1])]\n\n    # Define the function to apply to each column in the DataFrame\n    def shapiro(df, column):\n        \"\"\"\n        Performs the Shapiro-Wilk test for normality.\n\n        Parameters:\n        - df (DataFrame): A Pandas DataFrame with random numeric values.\n        - column (int): The column index of the column to be tested.\n\n        Returns:\n        - float: The p-value from the Shapiro-Wilk test.\n        \"\"\"\n        # Select the column from the DataFrame\n        column_df = df.iloc[:, column]\n\n        # Perform the Shapiro-Wilk test on the column\n        w, p = stats.shapiro(column_df)\n\n        # Return the p-value\n        return p\n\n    # Apply the function to each column in the DataFrame\n    p_values = map", "tokens": ["#", " Convert", " the", " Data", "Frame", " to", " a", " Num", "Py", " array", "\n", "    ", "array", " =", " df", ".", "to", "_", "numpy", "()", "\n", "\n", "    ", "#", " Define", " the", " list", " of", " column", " indices", " for", " each", " column", " in", " the", " Data", "Frame", "\n", "    ", "indices", " =", " [", "i", " for", " i", " in", " range", "(", "array", ".", "shape", "[", "1", "]", ")]", "\n", "\n", "    ", "#", " Define", " the", " function", " to", " apply", " to", " each", " column", " in", " the", " Data", "Frame", "\n", "    ", "def", " sh", "apiro", "(", "df", ",", " column", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Per", "forms", " the", " Sh", "apiro", "-", "W", "ilk", " test", " for", " norm", "ality", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "-", " df", " (", "DataFrame", "):", " A", " Pand", "as", " Data", "Frame", " with", " random", " numeric", " values", ".", "\n", "        ", "-", " column", " (", "int", "):", " The", " column", " index", " of", " the", " column", " to", " be", " tested", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "-", " float", ":", " The", " p", "-", "value", " from", " the", " Sh", "apiro", "-", "W", "ilk", " test", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "#", " Select", " the", " column", " from", " the", " Data", "Frame", "\n", "        ", "column", "_", "df", " =", " df", ".", "il", "oc", "[:", ",", " column", "]", "\n", "\n", "        ", "#", " Perform", " the", " Sh", "apiro", "-", "W", "ilk", " test", " on", " the", " column", "\n", "        ", "w", ",", " p", " =", " stats", ".", "sh", "apiro", "(", "column", "_", "df", ")", "\n", "\n", "        ", "#", " Return", " the", " p", "-", "value", "\n", "        ", "return", " p", "\n", "\n", "    ", "#", " Apply", " the", " function", " to", " each", " column", " in", " the", " Data", "Frame", "\n", "    ", "p", "_", "values", " =", " map"], "logprobs": [-2.3560631275177, -3.4992728233337402, -0.40950971841812134, -0.2977968752384186, -0.0011965028243139386, -0.12264753133058548, -0.17045792937278748, -0.6921295523643494, -0.0003575639275368303, -0.0826086476445198, -0.35973459482192993, -0.0012163867941126227, -2.0629775524139404, -0.04715072736144066, -0.06495199352502823, -0.0007178590167313814, -0.31897255778312683, -9.810443589231e-05, -0.00019393471302464604, -0.0027726562693715096, -0.032713647931814194, -0.16284985840320587, -0.0005608416395261884, -0.013118154369294643, -4.297476768493652, -0.6820575594902039, -3.6045422554016113, -0.11016357690095901, -1.3730286359786987, -0.39910608530044556, -1.933995008468628, -1.1979472637176514, -0.4583834409713745, -2.0060954093933105, -0.11567244678735733, -0.3987889289855957, -0.0006467396160587668, -0.052685435861349106, -0.001465438399463892, -1.7867133617401123, -0.049161527305841446, -1.0185348987579346, -1.1083216667175293, -0.007018673233687878, -0.0010767144849523902, -0.07256098091602325, -0.02358606457710266, -0.00010382589971413836, -1.2871479988098145, -0.0018347349250689149, -0.02063240483403206, -0.0018171241972595453, -0.008140834979712963, -0.007395746186375618, -0.0002553137019276619, -0.004161745775490999, -0.021775562316179276, -0.0009485750924795866, -0.030559053644537926, -2.194533109664917, -0.5354350805282593, -2.48960018157959, -0.43789467215538025, -1.7566810846328735, -0.13392846286296844, -0.05811375752091408, -0.023658132180571556, -1.4760732650756836, -0.022503256797790527, -0.09756969660520554, -0.0002205128694185987, -0.08552328497171402, -0.0016068416880443692, -0.2702367305755615, -1.1172398328781128, -0.0020672159735113382, -1.7455472946166992, -2.983381748199463, -0.37632161378860474, -1.3869658708572388, -1.4889439344406128, -0.0019298041006550193, -0.006274050567299128, -2.0239572525024414, -0.0013081812066957355, -2.658331868587993e-05, -0.046966370195150375, -0.0052304333075881, -0.7715567946434021, -1.2062621116638184, -0.1387927532196045, -0.0031180595979094505, -0.0001774868869688362, -0.008880997076630592, -0.00035494225448928773, -0.009829806163907051, -0.04106305539608002, -0.9400086402893066, -1.9082123041152954, -0.0001436368766007945, -2.559277057647705, -0.008920933119952679, -0.0907108411192894, -0.0007027302053757012, -0.10317453742027283, -0.008081711828708649, -4.2914423829643056e-05, -0.003962048329412937, -0.011403854005038738, -0.008561336435377598, -0.03802936524152756, -0.04013599082827568, -0.008880051784217358, -1.0059289932250977, -0.07070913910865784, -2.4318398573086597e-05, -0.0009802542626857758, -0.00038747431244701147, -0.8078803420066833, -0.4350491166114807, -0.012018763460218906, -0.01420881599187851, -0.017302166670560837, -0.0010317008709535003, -0.0006469779182225466, -0.0006248190766200423, -0.002008327515795827, -0.010964619927108288, -0.19778142869472504, -0.015866927802562714, -0.13659818470478058, -0.906420111656189, -0.03691590949892998, -1.6003237962722778, -0.012187064625322819, -0.29139265418052673, -0.6391114592552185, -0.9771084189414978, -0.09935695677995682, -0.04048670455813408, -0.0007035640883259475, -0.0658022090792656, -9.512448741588742e-05, -0.0022442173212766647, -0.0009993088897317648, -0.0013553252210840583, -0.0003234816831536591, -0.011273848824203014, -0.698836088180542, -0.009425426833331585, -0.028983741998672485, -0.07067559659481049, -0.0032547141890972853, -0.00011181206355104223, -1.1630446910858154, -0.0023541138507425785, -0.07788971066474915, -9.500529267825186e-05, -0.0011947167804464698, -8.535020606359467e-05, -0.001292346976697445, -0.0008600826840847731, -0.11356612294912338, -0.0017119289841502905, -0.33838608860969543, -0.0044146934524178505, -1.5258672647178173e-05, -8.344646857949556e-07, -3.766942609217949e-05, -0.01610778272151947, -0.21876558661460876, -3.04144287109375, -0.02203470468521118, -0.19733978807926178, -0.329416424036026, -0.005524486768990755, -0.036664728075265884, -0.0001627074379939586, -0.5430368185043335, -0.00013505500101018697, -0.8859142065048218, -0.1371605098247528, -1.3924384117126465, -0.00047136162174865603, -0.0061875684186816216, -0.14389531314373016, -0.024018043652176857, -0.0004295380203984678, -0.0008582960581406951, -0.00041154498467221856, -0.0343371219933033, -0.0052657718770205975, -0.021188681945204735, -0.1154666319489479, -0.0003980797773692757, -0.008150412701070309, -0.8322868347167969, -0.03682353347539902, -0.015304863452911377, -0.00010668662434909493, -0.009953389875590801, -0.00013100242358632386, -0.0022883438505232334, -0.006356379482895136, -1.3126094341278076, -0.01169374119490385, -0.14022818207740784, -0.21049880981445312, -0.00017069313616957515, -3.8808908462524414, -0.06466943770647049, -0.05078290030360222, -0.19496002793312073, -0.004942343104630709, -3.099436753473128e-06, -0.0028876056894659996, -0.00021169328829273582, -6.294052582234144e-05, -0.0010282472940161824, -0.00021634146105498075, -2.658331868587993e-05, -0.023563476279377937, -0.0006621075444854796, -0.09651651978492737, -0.0006187431863509119, -0.25635918974876404, -0.04334494099020958, -0.0018266435945406556, -0.03315046802163124, -0.003218710422515869, -6.41325386823155e-05, -0.15849220752716064, -7.426462980220094e-05, -0.002746026962995529, -0.008805729448795319, -0.0041712429374456406, -0.004753360990434885, -0.0010637345258146524, -0.029673000797629356, -0.8885158896446228, -0.01007802039384842, -0.9873014688491821, -0.013632883317768574, -0.015770241618156433, -0.0022101993672549725, -0.21171730756759644, -0.008380129933357239, -0.008584502153098583, -0.0013433012645691633, -0.2695925533771515, -0.0007165487040765584, -0.4890534579753876, -0.04010850563645363, -0.01762291230261326, -0.019465727731585503, -3.259932518005371], "finish_reason": "length"}], "metrics": {"energy": 300.7856544666288, "energy_per_token": 1.1749439627602687, "time": 12.383605, "time_per_token": 0.04837345703125}}
{"outputs": [{"text": "return {col: stats.shapiro(df[col])[1] for col in df.columns}", "tokens": ["return", " {", "col", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "]", " for", " col", " in", " df", ".", "columns", "}"], "logprobs": [-1.0774776935577393, -0.5019892454147339, -0.7830715775489807, -0.029176421463489532, -0.06156338378787041, -4.649054244509898e-05, -0.0041033364832401276, -0.0013910388806834817, -0.0015683980891481042, -0.06553898006677628, -0.017280373722314835, -0.0007183355046436191, -0.029956484213471413, -0.11978956311941147, -0.00026925752172246575, -0.0008879532688297331, -0.017511868849396706, -0.0015961299650371075, -0.00230202148668468, -0.007887527346611023, -0.16581469774246216, -0.010835855267941952, -0.41072648763656616], "finish_reason": "stop"}], "metrics": {"energy": 37.24661660385133, "energy_per_token": 1.6194181132109273, "time": 1.8809954, "time_per_token": 0.08178240869565218}}
{"outputs": [{"text": "result = {}\n    for column in df.columns:\n        result[column] = stats.shapiro(df[column])[1]\n    return result", "tokens": ["result", " =", " {}", "\n", "    ", "for", " column", " in", " df", ".", "columns", ":", "\n", "        ", "result", "[", "column", "]", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "column", "])", "[", "1", "]", "\n", "    ", "return", " result", "\n", "\n", "def"], "logprobs": [-3.0899479389190674, -0.05257561802864075, -0.26779958605766296, -0.002260988112539053, -0.10863607376813889, -0.13594575226306915, -1.7504664659500122, -0.24710412323474884, -0.010143633931875229, -0.2645457684993744, -0.01573374681174755, -0.0022066310048103333, -0.0013498490443453193, -0.0040070489048957825, -1.0882433652877808, -0.004737581126391888, -0.0017115719383582473, -0.0044657266698777676, -0.003021201817318797, -0.04606970027089119, -4.017272294731811e-05, -0.006938056088984013, -0.0009414292871952057, -0.0012947280192747712, -0.005384940654039383, -0.00523067032918334, -0.0002083561266772449, -0.018180515617132187, -0.05157550796866417, -0.0002374367177253589, -0.0021778454538434744, -0.016180861741304398, -0.09677474945783615, -0.004196409601718187, -0.0039318883791565895, -0.7104568481445312, -0.01809084229171276, -1.1516445875167847], "finish_reason": "stop"}], "metrics": {"energy": 31.430381172180173, "energy_per_token": 0.8271152940047414, "time": 1.4834638, "time_per_token": 0.03903852105263158}}
{"outputs": [{"text": "# Your code goes here\n    result = {}\n    for i in range(df.shape[1]):\n        pvalue = stats.shapiro(df[i])[1]\n        result[i] = pvalue\n    return result", "tokens": ["#", " Your", " code", " goes", " here", "\n", "    ", "result", " =", " {}", "\n", "    ", "for", " i", " in", " range", "(", "df", ".", "shape", "[", "1", "]", "):", "\n", "        ", "p", "value", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "i", "])", "[", "1", "]", "\n", "        ", "result", "[", "i", "]", " =", " p", "value", "\n", "    ", "return", " result"], "logprobs": [-2.3560631275177, -2.7009358406066895, -0.06861893087625504, -0.9839854836463928, -0.004355231299996376, -0.3326781690120697, -0.1408667415380478, -2.933657646179199, -0.06342562288045883, -0.3494293987751007, -0.0035579015966504812, -0.06466317921876907, -0.17239812016487122, -0.8604418635368347, -0.24720533192157745, -0.4071401059627533, -0.0020292659755796194, -0.9054201245307922, -0.00037293630884960294, -0.10740520805120468, -0.0017708349041640759, -0.006814572960138321, -0.0007110689766705036, -0.00044228785554878414, -0.005858749151229858, -0.016088545322418213, -2.425844192504883, -2.38696551322937, -0.4719252288341522, -0.022237472236156464, -4.172238186583854e-05, -0.007787344977259636, -0.0009504806366749108, -0.002865734277293086, -0.0039510056376457214, -2.693596124649048, -0.0673714429140091, -0.04764130339026451, -0.0951794981956482, -0.0005447572330012918, -0.0004923323867842555, -0.007839270867407322, -0.002826506970450282, -0.03078160062432289, -0.033668018877506256, -0.021222995594143867, -0.02146979793906212, -0.0001559135998832062, -0.019062185660004616, -0.0003270567976869643, -0.0029514345806092024, -0.16956204175949097, -0.011052222922444344, -0.004830476362258196], "finish_reason": "stop"}], "metrics": {"energy": 43.14030767440796, "energy_per_token": 0.7988945865631103, "time": 2.12076, "time_per_token": 0.039273333333333334}}
{"outputs": [{"text": "return dict(map(lambda column: stats.shapiro(column)[1], df.values))", "tokens": ["return", " dict", "(", "map", "(", "lambda", " column", ":", " stats", ".", "sh", "apiro", "(", "column", ")[", "1", "]", ",", " df", ".", "values", "))", "\n", "\n", "def"], "logprobs": [-1.0774776935577393, -2.0624961853027344, -0.16030381619930267, -1.3468317985534668, -0.0029269494116306305, -0.039751820266246796, -2.443263530731201, -0.047485459595918655, -0.4178938865661621, -8.654219709569588e-05, -0.004628658294677734, -0.0016150538576766849, -0.005197702441364527, -0.12109030783176422, -1.6584091186523438, -0.011163631454110146, -0.0012449617497622967, -0.0035563574638217688, -0.026617854833602905, -0.06342270970344543, -0.886925458908081, -0.8684104084968567, -0.8728042840957642, -0.017633335664868355, -1.4078329801559448], "finish_reason": "stop"}], "metrics": {"energy": 56.52067578124999, "energy_per_token": 2.26082703125, "time": 1.6878583, "time_per_token": 0.067514332}}
{"outputs": [{"text": "# Check requirements\n    if not (\n        np\n        and\n        stats\n    ):\n        raise Exception('Missing requirements: numpy and scipy')\n\n    p_values = {}\n    for idx, col in enumerate(df.columns):\n        p_value = stats.shapiro(df[col])[1]\n        p_values[idx] = p_value\n\n    return p_values", "tokens": ["#", " Check", " requirements", "\n", "    ", "if", " not", " (", "\n", "        ", "np", "\n", "        ", "and", "\n", "        ", "stats", "\n", "    ", "):", "\n", "        ", "raise", " Exception", "('", "Missing", " requirements", ":", " numpy", " and", " sc", "ipy", "')", "\n", "\n", "    ", "p", "_", "values", " =", " {}", "\n", "    ", "for", " idx", ",", " col", " in", " enumerate", "(", "df", ".", "columns", "):", "\n", "        ", "p", "_", "value", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "]", "\n", "        ", "p", "_", "values", "[", "idx", "]", " =", " p", "_", "value", "\n", "\n", "    ", "return", " p", "_", "values", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3560631275177, -3.2001633644104004, -1.4145877361297607, -0.19772157073020935, -0.006243960466235876, -1.4479423761367798, -0.05675172060728073, -1.6751844882965088, -1.657641887664795, -0.0446711964905262, -0.7135425209999084, -1.7140319347381592, -0.0828157365322113, -0.03355966508388519, -3.6700048446655273, -0.008577173575758934, -0.22275876998901367, -0.05582240968942642, -0.25420942902565, -0.03456631675362587, -0.02097589708864689, -0.008263918571174145, -0.051110077649354935, -1.0796087980270386, -2.259530544281006, -2.804206371307373, -1.434215784072876, -1.060670256614685, -0.05895530804991722, -1.3539187908172607, -0.027521926909685135, -0.00016425691137555987, -0.24987837672233582, -0.004607181064784527, -0.25054454803466797, -0.0019019624451175332, -1.4945863485336304, -0.06573735922574997, -0.021431993693113327, -0.012169046327471733, -0.19687631726264954, -0.009652371518313885, -0.47466108202934265, -0.19330519437789917, -3.2247390747070312, -0.07671965658664703, -0.4954005479812622, -0.032265555113554, -1.1233179569244385, -0.0007683662115596235, -0.008130311034619808, -0.17092455923557281, -0.028454959392547607, -0.011285518296062946, -0.0037549480330199003, -0.010097256861627102, -1.1105222702026367, -0.14803914725780487, -1.1220344305038452, -0.49178269505500793, -0.04149658605456352, -9.417090768693015e-05, -0.015892036259174347, -0.0006200536736287177, -0.0034429102670401335, -0.01093396358191967, -0.028758130967617035, -0.00119304982945323, -0.05569624900817871, -0.09809019416570663, -0.0004048719711136073, -0.0005731132114306092, -0.010027745738625526, -0.006470088846981525, -0.029092129319906235, -6.913899414939806e-05, -0.0012571059633046389, -0.011088535189628601, -1.1768651008605957, -0.0031925681978464127, -8.594620157964528e-05, -0.011537495069205761, -0.0003856868715956807, -0.0013362773461267352, -0.005322808399796486, -0.6053013801574707, -0.0010110987350344658, -0.008214497938752174, -0.0047868178226053715, -2.610649426060263e-05, -2.6940935640595853e-05, -0.9286119937896729, -8.344646857949556e-07, -1.1920922133867862e-06, -0.00010525626566959545, -0.0001578206429257989, -0.07939308136701584], "finish_reason": "stop"}], "metrics": {"energy": 157.4139348430634, "energy_per_token": 1.6228240705470454, "time": 5.043627, "time_per_token": 0.05199615463917526}}
{"outputs": [{"text": "# Initialize an empty dictionary to store the p-values\n    p_values = {}\n\n    # Iterate over each column of the DataFrame\n    for i, col in enumerate(df.columns):\n        # Perform Shapiro-Wilk test on the column\n        _, p = stats.shapiro(df[col])\n\n        # Add the p-value to the dictionary\n        p_values[col] = p\n\n    return p_values", "tokens": ["#", " Initialize", " an", " empty", " dictionary", " to", " store", " the", " p", "-", "values", "\n", "    ", "p", "_", "values", " =", " {}", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " column", " of", " the", " Data", "Frame", "\n", "    ", "for", " i", ",", " col", " in", " enumerate", "(", "df", ".", "columns", "):", "\n", "        ", "#", " Perform", " Sh", "apiro", "-", "W", "ilk", " test", " on", " the", " column", "\n", "        ", "_", ",", " p", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "\n", "\n", "        ", "#", " Add", " the", " p", "-", "value", " to", " the", " dictionary", "\n", "        ", "p", "_", "values", "[", "col", "]", " =", " p", "\n", "\n", "    ", "return", " p", "_", "values", "\n", "\n", "#"], "logprobs": [-2.3560631275177, -3.394649028778076, -0.6909289360046387, -0.00043418517452664673, -0.02284296043217182, -0.169206902384758, -0.029089001938700676, -0.3740110397338867, -0.11363784223794937, -0.0110483318567276, -0.00963631458580494, -0.24335120618343353, -0.0009916870621964335, -0.024390507489442825, -0.0294532161206007, -0.01663680374622345, -0.00815857108682394, -0.03335191681981087, -0.00011920218821614981, -0.11196845769882202, -0.0003578022588044405, -0.039476942270994186, -0.8157336115837097, -0.0009995469590649009, -0.19109445810317993, -0.7420844435691833, -0.006629496812820435, -1.1847927570343018, -0.15017195045948029, -0.15346334874629974, -0.00021753329201601446, -0.11857385188341141, -0.00033885458833537996, -0.0041822828352451324, -1.4233245849609375, -0.2376784086227417, -0.6453177332878113, -0.02883654460310936, -0.04848727956414223, -0.00042417587246745825, -0.0007724162423983216, -0.05740837752819061, -0.005296128336340189, -0.0018230738351121545, -0.0006815256201662123, -0.028654111549258232, -0.05059581249952316, -1.3932958841323853, -2.613818407058716, -0.0003883084573317319, -0.0050568063743412495, -0.00027807659353129566, -0.0019750152714550495, -0.011294475756585598, -0.8092593550682068, -0.20862366259098053, -0.1315140724182129, -0.5830024480819702, -0.0003420721332076937, -1.0284340381622314, -0.0006792622152715921, -0.012981193140149117, -0.8372755646705627, -0.0015964870108291507, -3.933898824470816e-06, -0.005236481316387653, -0.0005685858195647597, -0.00021073981770314276, -0.0006912940880283713, -0.008244883269071579, -0.00017927470616996288, -0.009187563322484493, -0.0022909604012966156, -0.9801418781280518, -0.00035482310340739787, -0.0025466412771493196, -0.846939206123352, -0.031846825033426285, -0.024194926023483276, -0.0017547699389979243, -0.0004884004010818899, -0.027808453887701035, -0.0012655591126531363, -0.02317812480032444, -0.051033731549978256, -2.7894584491150454e-05, -0.000993116176687181, -2.5748875486897305e-05, -0.0002967870968859643, -0.0007102350937202573, -0.3919852375984192, -0.0002795067266561091, -6.6756979322235566e-06, -0.0038358219899237156, -0.0012732979375869036, -0.004832611884921789, -0.0008948612376116216, -0.6178053021430969, -0.0008220868767239153, -2.610649426060263e-05, -3.2186455882765586e-06, -0.790683925151825, -0.01628747768700123, -1.330000877380371], "finish_reason": "stop"}], "metrics": {"energy": 129.59856442737578, "energy_per_token": 1.246140042570921, "time": 5.2570853, "time_per_token": 0.050548897115384614}}
{"outputs": [{"text": "res = {i: stats.shapiro(df[i])[1] for i in df.columns}\n    return res", "tokens": ["res", " =", " {", "i", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "i", "])", "[", "1", "]", " for", " i", " in", " df", ".", "columns", "}", "\n", "    ", "return", " res", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.3854076862335205, -0.08417388051748276, -2.819709300994873, -1.1958125829696655, -0.03043278679251671, -0.35283851623535156, -5.829164365422912e-05, -0.005661642644554377, -0.00213668798096478, -0.0017379907658323646, -0.12349825352430344, -0.10921668261289597, -0.08765166252851486, -0.024926910176873207, -0.13563458621501923, -0.00036006642039865255, -0.0016370717203244567, -0.021931616589426994, -0.0026828984264284372, -0.014347958378493786, -0.06061587110161781, -0.10685954242944717, -0.04523124173283577, -0.02638021484017372, -0.01235981099307537, -0.07965896278619766, -0.04638943076133728, -0.017366372048854828, -1.374934196472168, -9.536738616588991e-07, -1.311301275563892e-06, -0.00010990492592100054, -0.00019393471302464604, -0.07087729126214981], "finish_reason": "stop"}], "metrics": {"energy": 60.89856089401246, "energy_per_token": 1.791134143941543, "time": 2.0905144, "time_per_token": 0.061485717647058825}}
{"outputs": [{"text": "p_values = {}\n    for index, col in df.items():\n        _, pvalue = stats.shapiro(col)\n        p_values[index] = pvalue\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " index", ",", " col", " in", " df", ".", "items", "():", "\n", "        ", "_", ",", " p", "value", " =", " stats", ".", "sh", "apiro", "(", "col", ")", "\n", "        ", "p", "_", "values", "[", "index", "]", " =", " p", "value", "\n", "    ", "return", " p", "_", "values", "\n", "\n", "#"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -3.5779190063476562, -0.0607009120285511, -1.4297534227371216, -0.034627579152584076, -0.16508646309375763, -0.001553520211018622, -0.4803009331226349, -0.00017331528943032026, -0.004973184317350388, -0.006397956050932407, -2.5337610244750977, -0.0037327392492443323, -0.01816810667514801, -2.0190589427948, -0.04859402775764465, -0.006135201547294855, -1.4424220353248529e-05, -0.005584117025136948, -0.00047851080307736993, -0.00010406429646536708, -0.006871639750897884, -0.05985577777028084, -0.011045738123357296, -0.0014213945250958204, -0.013457062654197216, -0.0001858300092862919, -0.002103260951116681, -0.006909525021910667, -0.008156679570674896, -0.003766111796721816, -9.405170567333698e-05, -0.025091424584388733, -0.0007428746903315187, -0.004385021980851889, -0.11028999090194702, -0.003898996626958251, -0.002867279574275017, -0.00015496007108595222, -9.775113539944869e-06, -0.8122605681419373, -0.019755741581320763, -1.9008429050445557], "finish_reason": "stop"}], "metrics": {"energy": 46.86006801605224, "energy_per_token": 0.9372013603210447, "time": 2.1173716, "time_per_token": 0.042347432}}
{"outputs": [{"text": "res = {}\n    for col in df.columns:\n        res[col] = stats.shapiro(df[col])[1]\n    return res", "tokens": ["res", " =", " {}", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "res", "[", "col", "]", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "]", "\n", "    ", "return", " res", "\n", "\n", "def"], "logprobs": [-3.3854076862335205, -0.08417388051748276, -0.39613306522369385, -0.002892598044127226, -0.07326162606477737, -0.11075951904058456, -1.1419687271118164, -0.13218140602111816, -0.030802752822637558, -0.2862440347671509, -0.02030409686267376, -0.0038145650178194046, -0.0022961937356740236, -0.004987536929547787, -0.7371108531951904, -0.021140363067388535, -0.0024293928872793913, -0.010551616549491882, -0.009443966671824455, -0.06488463282585144, -4.970903682988137e-05, -0.008145446889102459, -0.0009145130170509219, -0.0015197168104350567, -0.005405453033745289, -0.007136923260986805, -0.00020454221521504223, -0.020469725131988525, -0.06284847110509872, -0.00021586472576018423, -0.0024082250893115997, -0.011168936267495155, -0.09404860436916351, -0.006957352627068758, -0.004084815736860037, -0.8266768455505371, -0.023209456354379654, -1.2095363140106201], "finish_reason": "stop"}], "metrics": {"energy": 69.53857859992979, "energy_per_token": 1.8299625947349945, "time": 2.3060238, "time_per_token": 0.060684836842105266}}
{"outputs": [{"text": "# Shapiro-Wilk test\n    return {col: stats.shapiro(df[col])[1] for col in df.columns}", "tokens": ["#", " Sh", "apiro", "-", "W", "ilk", " test", "\n", "    ", "return", " {", "col", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "]", " for", " col", " in", " df", ".", "columns", "}<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3560631275177, -3.1748805046081543, -0.012143725529313087, -0.1488431841135025, -0.0013174673076719046, -0.006519713904708624, -0.14761590957641602, -1.3311312198638916, -0.006316222716122866, -1.4753795862197876, -0.22491933405399323, -0.699518620967865, -0.02016729861497879, -0.03361925855278969, -4.0649541915627196e-05, -0.007111238315701485, -0.0015190026024356484, -0.0018598416354507208, -0.042009834200143814, -0.014308121055364609, -0.0005087750032544136, -0.03189128264784813, -0.1108841523528099, -0.00027211778797209263, -0.0007628867751918733, -0.017566220834851265, -0.0010459910845384002, -0.002607043832540512, -0.005305140744894743, -0.09920378774404526, -0.008794031105935574, -1.2231227159500122, 0.0, -9.536738616588991e-07, -0.0002699726028367877, -0.00011705666838679463, -0.09061862528324127], "finish_reason": "stop"}], "metrics": {"energy": 72.5817961578369, "energy_per_token": 1.9616701664280245, "time": 2.3021994, "time_per_token": 0.06222160540540541}}
{"outputs": [{"text": "return {col: stats.shapiro(df[col])[1] for col in df.columns}", "tokens": ["return", " {", "col", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "]", " for", " col", " in", " df", ".", "columns", "}", "\n", "\n", "if"], "logprobs": [-1.0774776935577393, -0.5019892454147339, -0.7830715775489807, -0.029176421463489532, -0.06156338378787041, -4.649054244509898e-05, -0.0041033364832401276, -0.0013910388806834817, -0.0015683980891481042, -0.06553898006677628, -0.017280373722314835, -0.0007183355046436191, -0.029956484213471413, -0.11978956311941147, -0.00026925752172246575, -0.0008879532688297331, -0.017511868849396706, -0.0015961299650371075, -0.00230202148668468, -0.007887527346611023, -0.16581469774246216, -0.010835855267941952, -0.41072648763656616, -0.4673450291156769, -0.023579776287078857, -0.9888463616371155], "finish_reason": "stop"}], "metrics": {"energy": 68.3864930305481, "energy_per_token": 2.6302497319441573, "time": 1.8900561, "time_per_token": 0.07269446538461538}}
{"outputs": [{"text": "# Your code here\n    p_values = []\n\n    for i in range(len(df.columns)):\n        p_value = stats.shapiro(df[df.columns[i]])\n        p_values.append(p_value[1])\n\n    return dict(zip(df.columns, p_values))", "tokens": ["#", " Your", " code", " here", "\n", "    ", "p", "_", "values", " =", " []", "\n", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "df", ".", "columns", "))", ":", "\n", "        ", "p", "_", "value", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "df", ".", "columns", "[", "i", "]]", ")", "\n", "        ", "p", "_", "values", ".", "append", "(", "p", "_", "value", "[", "1", "])", "\n", "\n", "    ", "return", " dict", "(", "zip", "(", "df", ".", "columns", ",", " p", "_", "values", "))"], "logprobs": [-2.3560631275177, -2.7009358406066895, -0.06861893087625504, -0.6613059639930725, -0.14084602892398834, -0.1029425784945488, -1.2084403038024902, -0.15903909504413605, -0.04559429734945297, -0.01700616627931595, -2.994218349456787, -0.005240394733846188, -2.775991916656494, -0.0021435872185975313, -0.15119297802448273, -1.244312047958374, -0.08678977191448212, -0.5375760197639465, -0.0015180503251031041, -0.8426730632781982, -0.0002628219372127205, -0.006458363030105829, -0.06918319314718246, -0.024690844118595123, -0.004353569354861975, -0.0009378563845530152, -0.005005566403269768, -0.036567963659763336, -1.7168018817901611, -0.5915296673774719, -0.5076882839202881, -0.22167953848838806, -0.03382671996951103, -4.7444173105759546e-05, -0.018040498718619347, -0.0011044599814340472, -0.0023487620055675507, -0.007136331405490637, -0.7133883237838745, -0.4061794877052307, -0.00026544384309090674, -0.0004724340105894953, -0.002388721564784646, -0.0005156855913810432, -0.00226788641884923, -0.8289126753807068, -0.6309293508529663, -0.01753377541899681, -0.03566686064004898, -0.004502990748733282, -0.0336722806096077, -0.0033068754710257053, -0.001438060076907277, -0.00618330342695117, -0.02541584149003029, -0.0005657264264300466, -0.0011842388194054365, -0.085605688393116, -0.0037611236330121756, -0.003148243995383382, -0.0030019478872418404, -0.18648989498615265, -0.0019013675628229976, -0.08057090640068054, -0.10629257559776306, -0.012743232771754265, -0.01695014350116253, -0.003411903278902173, -0.04226092994213104, -0.0005623904871754348, -0.0008108903421089053, -0.020240899175405502, -0.02177777700126171, -3.2186455882765586e-06, -5.209310256759636e-05, -0.0006100462633185089], "finish_reason": "stop"}], "metrics": {"energy": 91.41303607177731, "energy_per_token": 1.2028031062075961, "time": 3.1721084, "time_per_token": 0.04173826842105263}}
{"outputs": [{"text": "return {c: stats.shapiro(df[c])[1] for c in df.columns}\n\nclass TestTaskFunc(unittest.TestCase):\n    def test_task_func_numpy(self):\n        np.random.seed(42)\n        df = pd.DataFrame(np.random.normal(size=(100, 5)))\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 5)\n\n        for c, p in p_values.items():\n            self.assertEqual(p, 0.05)\n\n    def test_task_func_scipy(self):\n        np.random.seed(42)\n        df = pd.DataFrame(np.random.normal(size=(100, 5)))\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 5)\n\n        for c, p in p_values.items():\n            self.assertEqual(p, 0.05)", "tokens": ["return", " {", "c", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "c", "])", "[", "1", "]", " for", " c", " in", " df", ".", "columns", "}", "\n", "\n", "class", " Test", "Task", "Func", "(", "un", "ittest", ".", "TestCase", "):", "\n", "    ", "def", " test", "_", "task", "_", "func", "_", "numpy", "(", "self", "):", "\n", "        ", "np", ".", "random", ".", "seed", "(", "4", "2", ")", "\n", "        ", "df", " =", " pd", ".", "DataFrame", "(", "np", ".", "random", ".", "normal", "(", "size", "=(", "1", "0", "0", ",", " ", "5", ")))", "\n", "        ", "p", "_", "values", " =", " task", "_", "func", "(", "df", ")", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "p", "_", "values", ")", ",", " ", "5", ")", "\n", "\n", "        ", "for", " c", ",", " p", " in", " p", "_", "values", ".", "items", "():", "\n", "            ", "self", ".", "assertEqual", "(", "p", ",", " ", "0", ".", "0", "5", ")", "\n", "\n", "    ", "def", " test", "_", "task", "_", "func", "_", "sc", "ipy", "(", "self", "):", "\n", "        ", "np", ".", "random", ".", "seed", "(", "4", "2", ")", "\n", "        ", "df", " =", " pd", ".", "DataFrame", "(", "np", ".", "random", ".", "normal", "(", "size", "=(", "1", "0", "0", ",", " ", "5", ")))", "\n", "        ", "p", "_", "values", " =", " task", "_", "func", "(", "df", ")", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "p", "_", "values", ")", ",", " ", "5", ")", "\n", "\n", "        ", "for", " c", ",", " p", " in", " p", "_", "values", ".", "items", "():", "\n", "            ", "self", ".", "assertEqual", "(", "p", ",", " ", "0", ".", "0", "5", ")", "\n", "\n", "if"], "logprobs": [-1.0774776935577393, -0.5019892454147339, -2.7415714263916016, -0.010364871472120285, -0.0793217271566391, -5.304672595229931e-05, -0.004227392375469208, -0.0017150230705738068, -0.0017257335130125284, -0.040057312697172165, -0.010429050773382187, -0.007400124799460173, -0.014913966879248619, -0.083163321018219, -0.00021514961554203182, -0.001116010476835072, -0.01042893249541521, -0.0013496108585968614, -0.0029055543709546328, -0.010697283782064915, -0.19227474927902222, -0.012488262727856636, -0.3639051020145416, -0.45496174693107605, -0.026020338758826256, -3.9679856300354004, -0.17590388655662537, -0.3558655381202698, -0.13355959951877594, -0.04054039344191551, -0.06037113815546036, -9.536738616588991e-07, -0.00013565097469836473, -4.279521817807108e-05, -0.0003299168893136084, -0.0016102931695058942, -0.13997751474380493, -0.08223892003297806, -0.050992269068956375, -0.005636394023895264, -0.8302832841873169, -0.0332932285964489, -0.01670597493648529, -1.7295942306518555, -3.690446376800537, -0.6911365985870361, -9.65590606938349e-06, -0.006464640609920025, -0.00272486568428576, -0.002161073498427868, -0.46924087405204773, -0.005043996497988701, -0.015331629663705826, -3.814624506048858e-05, -0.0004086851258762181, -0.00039057256071828306, -0.03758881613612175, -0.0029384789522737265, -0.0005038899253122509, -0.0040261647664010525, -0.0055263834074139595, -0.036778490990400314, -0.0044088782742619514, -0.04547857120633125, -0.0001842805795604363, -0.0005719218170270324, -0.01424501370638609, -0.015575078316032887, -5.113947918289341e-05, -0.0005361788207665086, -8.4638240878121e-06, -0.009175160899758339, -0.0002602000313345343, -0.0073801265098154545, -0.00288380216807127, -0.00945530366152525, -0.0008952185744419694, -0.016189774498343468, -0.0034091707784682512, -0.0024951535742729902, -0.021282397210597992, -0.018032420426607132, -0.0013452060520648956, -0.06211471930146217, -0.33176901936531067, -0.0055803232826292515, -0.004295646212995052, -0.01629134826362133, -0.003921201918274164, -3.290122185717337e-05, -3.2782016205601394e-05, -0.0003010773507412523, -0.00036352223833091557, -0.0019022003980353475, -0.0016483780927956104, -0.07577214390039444, -0.5200512409210205, -7.533743337262422e-05, -0.9903435111045837, -0.014657669700682163, -0.604230523109436, -0.00012838016846217215, -0.016663065180182457, -4.172316494077677e-06, -3.576278118089249e-07, -0.060792792588472366, -0.00033361115492880344, -0.12773685157299042, -0.0029970749747008085, -0.03433355316519737, -0.01493193581700325, -2.3001718521118164, -1.5042979717254639, -0.4504519999027252, -1.0798850059509277, -0.4419527053833008, -0.05225265398621559, -0.0404602587223053, -0.003624063218012452, -2.8490614567999728e-05, -2.264974000354414e-06, -0.00033945043105632067, -0.00044204952428117394, -7.92710343375802e-05, -0.00044860312482342124, -0.0004228651523590088, -0.10181042551994324, -9.786603914108127e-05, -2.0992591381073, -0.0047086309641599655, -0.9124022722244263, -0.2597261369228363, -0.15111632645130157, -0.02220855839550495, -0.2704375088214874, -0.9607378244400024, -0.48593804240226746, -0.5416367053985596, -0.04710512235760689, -0.09169282019138336, -0.5882050395011902, -0.012171401642262936, -0.0008233971311710775, -0.0001311216183239594, -0.06016574427485466, -0.0004077318590134382, -0.004593653604388237, -0.003780125407502055, -0.223025381565094, -0.0001232548092957586, -0.01946350559592247, -7.510157047363464e-06, -0.00019131260341964662, -0.0008605591137893498, -0.000647692708298564, -0.28309163451194763, -2.0265558760002023e-06, -0.0004101150552742183, -3.3378546504536644e-06, -0.0002406545972917229, -0.0001110968878492713, -0.007187817245721817, -0.003988764248788357, -0.0004758894501719624, -0.0019594295881688595, -0.0016129115829244256, -0.023173581808805466, -0.0006968930247239769, -0.007278591860085726, -7.819823804311454e-05, -0.00029869386344216764, -0.0022527810651808977, -0.0014263942139223218, -0.0009950215462595224, -0.00016389934171456844, -1.4305104514278355e-06, -0.00328132975846529, -2.6464111215318553e-05, -0.0017757137538865209, -0.0001858300092862919, -0.0016794399125501513, -0.001359610934741795, -0.0025402202736586332, -0.0006043276516720653, -0.00019000156316906214, -0.004639693535864353, -0.0030040873680263758, -0.0007108307327143848, -0.016445092856884003, -0.10356896370649338, -0.002630585338920355, -0.0007490689749829471, -0.0033970526419579983, -0.0045491536147892475, -3.2186455882765586e-06, -3.683499380713329e-05, -0.0005087750032544136, -6.282132380874828e-05, -0.0010656398953869939, -0.0012413900112733245, -0.0943441390991211, -0.12031733989715576, -0.000266278104390949, -0.0575355589389801, -0.000816131301689893, -0.015760384500026703, -6.12716976320371e-05, -0.0003698380314745009, -0.00015901254664640874, -3.4570634852570947e-06, -0.0003912875254172832, -0.00012885693286079913, -0.001492696930654347, -0.0019004157511517406, -0.006738557480275631, -0.010537815280258656, -0.045301880687475204, -0.011010485701262951, -0.04727160185575485, -0.024648625403642654, -0.005506822373718023, -0.0025944404769688845, -0.0007404923089779913, -0.0005334384622983634, -2.4676019165781327e-05, -4.529942543740617e-06, -7.056941103655845e-05, -3.0517112463712692e-05, -8.654219709569588e-05, -0.000324673397699371, -0.0002862997353076935, -0.02534203976392746, -6.210611172718927e-05, -0.2836790382862091, -0.0002531684876885265, -0.017632516101002693, -0.01091285701841116, -0.014165917411446571, -0.006218133959919214, -0.0016874135471880436, -0.04036294296383858, -0.013328618369996548, -0.130533829331398, -0.06804610788822174, -0.007614634465426207, -0.15704120695590973], "finish_reason": "stop"}], "metrics": {"energy": 302.69300717735274, "energy_per_token": 1.2304593787697267, "time": 11.960957, "time_per_token": 0.04862177642276423}}
{"outputs": [{"text": "p_values = {}\n    for col in df.columns:\n        _, pvalue = stats.shapiro(df[col])\n        p_values[col] = pvalue\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "_", ",", " p", "value", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "\n", "        ", "p", "_", "values", "[", "col", "]", " =", " p", "value", "\n", "    ", "return", " p", "_", "values", "\n", "\n", "def"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -1.0731545686721802, -0.25198259949684143, -0.02135463058948517, -0.15843676030635834, -0.007662428542971611, -0.0017448929138481617, -0.00195526541210711, -0.003338361158967018, -1.8933926820755005, -0.002627018606290221, -0.016152827069163322, -2.660991668701172, -0.038350872695446014, -0.006360051687806845, -1.4424220353248529e-05, -0.0032917859498411417, -0.0004979324294254184, -0.0001311216183239594, -0.004288880620151758, -0.0066194310784339905, -0.00017212340026162565, -0.030193159356713295, -0.00593281676992774, -0.0009977606823667884, -0.007394562941044569, -0.00012408917245920748, -0.0011537569807842374, -0.002161906100809574, -0.0007497837068513036, -0.003440296743065119, -5.769562994828448e-05, -0.018027503043413162, -0.0008660380262881517, -0.006946224719285965, -0.08561772108078003, -0.002380396705120802, -0.0021765369456261396, -0.00012361239350866526, -6.318072337307967e-06, -0.6659949421882629, -0.016304248943924904, -1.2432372570037842], "finish_reason": "stop"}], "metrics": {"energy": 43.552301517486576, "energy_per_token": 0.8710460303497315, "time": 1.9094162, "time_per_token": 0.038188323999999996}}
{"outputs": [{"text": "return dict([(col, stats.shapiro(df[col])[1]) for col in df])", "tokens": ["return", " dict", "([", "(", "col", ",", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "[", "1", "])", " for", " col", " in", " df", "])", "\n", "\n", "if"], "logprobs": [-1.0774776935577393, -2.0624961853027344, -2.5770251750946045, -0.27234750986099243, -1.018560528755188, -0.06887111067771912, -0.12091349065303802, -7.676783570786938e-05, -0.0033315890468657017, -0.0014546061865985394, -0.004960017278790474, -0.05755480378866196, -0.021430592983961105, -0.0017460829112678766, -0.060009367763996124, -0.05625387653708458, -0.00027021096320822835, -0.003273844253271818, -0.08763287961483002, -0.004351432900875807, -0.003719793865457177, -0.013153803534805775, -2.087106227874756, -0.7441447973251343, -0.01942632719874382, -1.0824919939041138], "finish_reason": "stop"}], "metrics": {"energy": 39.77656648921966, "energy_per_token": 1.5298679418930639, "time": 1.8881774, "time_per_token": 0.07262220769230769}}
{"outputs": [{"text": "p_values = []\n    for column in df.columns:\n        stat, _ = stats.shapiro(df[column])\n        p_values.append(stat)\n    return dict(zip(df.columns, p_values))", "tokens": ["p", "_", "values", " =", " []", "\n", "    ", "for", " column", " in", " df", ".", "columns", ":", "\n", "        ", "stat", ",", " _", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "column", "])", "\n", "        ", "p", "_", "values", ".", "append", "(", "stat", ")", "\n", "    ", "return", " dict", "(", "zip", "(", "df", ".", "columns", ",", " p", "_", "values", "))", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -2.949169397354126, -0.0038484097458422184, -0.07996945828199387, -0.08641830086708069, -1.2487313747406006, -0.04085811972618103, -0.00903718639165163, -0.40495389699935913, -0.02327689342200756, -0.0016630165046080947, -0.0022832294926047325, -0.00405679689720273, -1.4132267236709595, -0.7622409462928772, -1.5287394523620605, -0.0660116970539093, -0.005195923615247011, -9.894321920000948e-06, -0.0076812379993498325, -0.0005469018360599875, -0.00023421882360707968, -0.004667340312153101, -0.0030581632163375616, -0.00021526881027966738, -0.021332575008273125, -0.009016039781272411, -0.0021473937667906284, -0.021456262096762657, -0.009483525529503822, -0.022515494376420975, -0.0010287236655130982, -0.0003150205302517861, -0.0013325868640094995, -0.023986272513866425, -0.0017215682892128825, -0.0025044286157935858, -0.07883785665035248, -0.014038974419236183, -0.04532557725906372, -0.007877946831285954, -0.012405495159327984, -0.0012337700463831425, -0.012388893403112888, -0.00019262365822214633, -0.0011755467858165503, -0.02972009964287281, -0.010912974365055561, -5.483612312673358e-06, -1.0371154530730564e-05, -0.0005303407087922096, -1.0865100622177124, -9.536738616588991e-07, -1.1920922133867862e-06, -9.250213042832911e-05, -0.00015889335190877318, -0.09868646413087845], "finish_reason": "stop"}], "metrics": {"energy": 104.51328990173336, "energy_per_token": 1.7418881650288893, "time": 3.3725882, "time_per_token": 0.056209803333333336}}
{"outputs": [{"text": "return {i: stats.shapiro(df[i])[1] for i in df.columns}", "tokens": ["return", " {", "i", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "i", "])", "[", "1", "]", " for", " i", " in", " df", ".", "columns", "}", "\n", "\n", "def"], "logprobs": [-1.0774776935577393, -0.5019892454147339, -1.565786361694336, -0.013499756343662739, -0.14836756885051727, -7.331102824537084e-05, -0.00534403370693326, -0.0013758012792095542, -0.0016457597957924008, -0.10811728984117508, -0.14694511890411377, -0.1265421062707901, -0.018031133338809013, -0.10344018787145615, -0.00035446559195406735, -0.0009378563845530152, -0.018356209620833397, -0.0016411182004958391, -0.008948934264481068, -0.038684092462062836, -0.12447173148393631, -0.030322348698973656, -0.3852883577346802, -0.40102216601371765, -0.01902136579155922, -1.4968456029891968], "finish_reason": "stop"}], "metrics": {"energy": 20.97157233428955, "energy_per_token": 0.8065989359342135, "time": 0.853935, "time_per_token": 0.03284365384615385}}
{"outputs": [{"text": "return df.apply(lambda x: stats.shapiro(x).pvalue)", "tokens": ["return", " df", ".", "apply", "(", "lambda", " x", ":", " stats", ".", "sh", "apiro", "(", "x", ")", ".", "p", "value", ")", "\n", "\n", "def"], "logprobs": [-1.0774776935577393, -1.8898638486862183, -0.004913161508738995, -0.3201667070388794, -0.001328896265476942, -0.5978469252586365, -0.23047204315662384, -0.0016593271866440773, -0.03482147678732872, -2.288792165927589e-05, -0.004626641049981117, -0.0010782625759020448, -0.002342934487387538, -0.002605617046356201, -0.7950363755226135, -0.03142999857664108, -0.007759192958474159, -0.05305664241313934, -0.5978100895881653, -0.7740250825881958, -0.027123479172587395, -1.380826711654663], "finish_reason": "stop"}], "metrics": {"energy": 55.05937377262116, "energy_per_token": 2.502698807846416, "time": 1.6805258, "time_per_token": 0.07638753636363636}}
{"outputs": [{"text": "p_values = {}\n    for col in df.columns:\n        p, _ = stats.shapiro(df[col])\n        p_values[col] = p\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " col", " in", " df", ".", "columns", ":", "\n", "        ", "p", ",", " _", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", "\n", "        ", "p", "_", "values", "[", "col", "]", " =", " p", "\n", "    ", "return", " p", "_", "values", "\n", "\n", "if"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -1.0731545686721802, -0.25198259949684143, -0.02135463058948517, -0.15843676030635834, -0.007662428542971611, -0.0017448929138481617, -0.00195526541210711, -0.003338361158967018, -1.6248379945755005, -2.0476179122924805, -0.17635968327522278, -0.009315360337495804, -0.004183114040642977, -1.597391747054644e-05, -0.009389054030179977, -0.000547378440387547, -0.0002908283786382526, -0.002873223042115569, -0.006616115104407072, -0.00010656742961145937, -0.06225687637925148, -0.00913251843303442, -0.0007666985620744526, -0.014460292644798756, -0.00020990552729927003, -0.0006277974462136626, -0.002079112222418189, -0.000503770774230361, -0.0011141052236780524, -2.682172998902388e-05, -0.005552939139306545, -0.0040800669230520725, -0.10705878585577011, -0.001493054092861712, -0.0017296605510637164, -3.814624506048858e-05, -4.410734163684538e-06, -0.6096924543380737, -0.015790540724992752, -1.130370020866394], "finish_reason": "stop"}], "metrics": {"energy": 43.29100845146179, "energy_per_token": 0.901896009405454, "time": 2.940331, "time_per_token": 0.06125689583333333}}
{"outputs": [{"text": "shapiro_test = {}\n    for i in range(df.shape[1]):\n        shapiro_test[i] = stats.shapiro(df.iloc[:, i])[1]\n    return shapiro_test", "tokens": ["sh", "apiro", "_", "test", " =", " {}", "\n", "    ", "for", " i", " in", " range", "(", "df", ".", "shape", "[", "1", "]", "):", "\n", "        ", "sh", "apiro", "_", "test", "[", "i", "]", " =", " stats", ".", "sh", "apiro", "(", "df", ".", "il", "oc", "[:", ",", " i", "])", "[", "1", "]", "\n", "    ", "return", " sh", "apiro", "_", "test", "\n", "\n", "print"], "logprobs": [-3.1277973651885986, -0.07606208324432373, -0.1384139508008957, -1.8618414402008057, -0.3669516444206238, -1.069474697113037, -0.006936872377991676, -0.13577862083911896, -0.1723535656929016, -0.9963216185569763, -0.35896754264831543, -0.5328699946403503, -0.002018796745687723, -0.5936266779899597, -0.00034624303225427866, -0.08196064829826355, -0.0017995130037888885, -0.00651154201477766, -0.0009845414897426963, -0.0005138983833603561, -0.00720379501581192, -0.010111300274729729, -0.8581875562667847, -0.011122488416731358, -0.015747593715786934, -0.08550828695297241, -0.02870786003768444, -0.06164262816309929, -0.01798008568584919, -0.0011277989251539111, -0.08876395225524902, -4.625213477993384e-05, -0.004474983550608158, -0.0009252319578081369, -0.0013896104646846652, -0.007753278594464064, -0.1781710684299469, -0.021783843636512756, -0.0007121411035768688, -0.001043133088387549, -0.002454246859997511, -0.1901710331439972, -0.016331341117620468, -0.09987059980630875, -0.0007357274298556149, -0.0023011888843029737, -0.014273101463913918, -0.18567320704460144, -0.014988305978477001, -0.012617992237210274, -0.0007419217727147043, -1.5258672647178173e-05, -5.364403477869928e-06, -0.7275470495223999, -0.021002396941184998, -2.7793960571289062], "finish_reason": "stop"}], "metrics": {"energy": 52.50950241851806, "energy_per_token": 0.9376696860449654, "time": 2.3295393, "time_per_token": 0.04159891607142857}}
{"outputs": [{"text": "p_values = {}\n    for i in range(df.shape[1]):\n        p_values[i] = stats.shapiro(df.iloc[:, i])[1]\n    return p_values", "tokens": ["p", "_", "values", " =", " {}", "\n", "    ", "for", " i", " in", " range", "(", "df", ".", "shape", "[", "1", "]", "):", "\n", "        ", "p", "_", "values", "[", "i", "]", " =", " stats", ".", "sh", "apiro", "(", "df", ".", "il", "oc", "[:", ",", " i", "])", "[", "1", "]", "\n", "    ", "return", " p", "_", "values"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -0.2900182604789734, -0.002906505251303315, -0.09033352881669998, -0.09568065404891968, -1.0496941804885864, -0.7801749110221863, -0.28531116247177124, -0.00047958316281437874, -0.45393720269203186, -9.440929716220126e-05, -0.09259135276079178, -0.0008644896443001926, -0.004294815473258495, -0.0004196478403173387, -0.0002454218047205359, -0.007817033678293228, -0.005185724701732397, -1.2591500282287598, -0.19374136626720428, -0.5218201875686646, -0.007358353119343519, -0.026375453919172287, -0.004220626316964626, -0.0018260485958307981, -0.04399733617901802, -3.0397906812140718e-05, -0.010457953438162804, -0.0011344670783728361, -0.002507758093997836, -0.004620708059519529, -0.09587661176919937, -0.016048073768615723, -0.0005957497633062303, -0.0004334702098276466, -0.001209600013680756, -0.10995437949895859, -0.006825820542871952, -0.10313184559345245, -0.00014137222024146467, -0.003833447117358446, -0.01656833104789257, -0.100858174264431, -0.004456944297999144, -0.003267784370109439, -9.059865078597795e-06, -2.50339189733495e-06], "finish_reason": "stop"}], "metrics": {"energy": 67.6864123506546, "energy_per_token": 1.353728247013092, "time": 2.9360209, "time_per_token": 0.058720417999999996}}
{"outputs": [{"text": "return df.apply(lambda x: stats.shapiro(x).pvalue, axis=0)", "tokens": ["return", " df", ".", "apply", "(", "lambda", " x", ":", " stats", ".", "sh", "apiro", "(", "x", ")", ".", "p", "value", ",", " axis", "=", "0", ")", "\n", "\n", "#"], "logprobs": [-1.0774776935577393, -1.8898638486862183, -0.004913161508738995, -0.3201667070388794, -0.001328896265476942, -0.5978469252586365, -0.23047204315662384, -0.0016593271866440773, -0.03482147678732872, -2.288792165927589e-05, -0.004626641049981117, -0.0010782625759020448, -0.002342934487387538, -0.002605617046356201, -0.7950363755226135, -0.03142999857664108, -0.007759192958474159, -0.05305664241313934, -0.8626225590705872, -0.021052706986665726, -0.014580250717699528, -0.3376486301422119, -0.2854035794734955, -0.4413073658943176, -0.026480989530682564, -1.628403902053833], "finish_reason": "stop"}], "metrics": {"energy": 41.277403032302864, "energy_per_token": 1.587592424319341, "time": 1.6852994, "time_per_token": 0.06481920769230769}}
{"outputs": [{"text": "p_values = {col: stats.shapiro(df[col]).pvalue for col in df.columns}\n    return p_values", "tokens": ["p", "_", "values", " =", " {", "col", ":", " stats", ".", "sh", "apiro", "(", "df", "[", "col", "])", ".", "p", "value", " for", " col", " in", " df", ".", "columns", "}", "\n", "    ", "return", " p", "_", "values"], "logprobs": [-1.3796513080596924, -0.1154407188296318, -0.03008095920085907, -0.009823313914239407, -2.753113031387329, -0.8047463893890381, -0.023944372311234474, -0.05926308408379555, -3.2066785934148356e-05, -0.003667535027489066, -0.0014482972910627723, -0.0019189768936485052, -0.03243798762559891, -0.010249008424580097, -0.00027509720530360937, -0.03243498504161835, -1.753021001815796, -0.006361946929246187, -0.043116722255945206, -0.03553157299757004, -0.0008611546363681555, -0.001759410952217877, -0.005692817270755768, -0.08586674928665161, -0.007796925958245993, -0.02129441685974598, -0.0065726530738174915, -0.03742140531539917, -0.007690819911658764, -0.0058016241528093815, -2.1576648578047752e-05, -3.933898824470816e-06], "finish_reason": "stop"}], "metrics": {"energy": 32.01957504272461, "energy_per_token": 1.000611720085144, "time": 1.2815564, "time_per_token": 0.0400486375}}
{"outputs": [{"text": "res = {}\n    for i, column in enumerate(df.columns):\n        p_value = stats.shapiro(df[column])[1]\n        res[column] = p_value\n    return res", "tokens": ["res", " =", " {}", "\n", "    ", "for", " i", ",", " column", " in", " enumerate", "(", "df", ".", "columns", "):", "\n", "        ", "p", "_", "value", " =", " stats", ".", "sh", "apiro", "(", "df", "[", "column", "])", "[", "1", "]", "\n", "        ", "res", "[", "column", "]", " =", " p", "_", "value", "\n", "    ", "return", " res", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.3854076862335205, -0.08417388051748276, -0.39613306522369385, -0.002892598044127226, -0.07326162606477737, -0.11075951904058456, -0.972783088684082, -1.0356501340866089, -1.7393581867218018, -0.02052963711321354, -0.219059020280838, -0.0008347125840373337, -0.006398548372089863, -0.20865540206432343, -0.0338871069252491, -0.011529010720551014, -0.002022008877247572, -0.0066572073847055435, -2.993157148361206, -0.795274019241333, -0.2115338146686554, -0.40787366032600403, -0.022964131087064743, -3.0397906812140718e-05, -0.0076733119785785675, -0.0008318539476022124, -0.0016977671766653657, -0.005536105018109083, -0.030424922704696655, -0.004793343134224415, -0.037696272134780884, -0.0996788740158081, -0.00046004203613847494, -0.0003630455757956952, -0.009569132700562477, -0.0038507848512381315, -0.020091591402888298, -0.03957938775420189, -0.5997436046600342, -0.0057333544827997684, -8.129743218887597e-05, -0.020803116261959076, -0.00010668662434909493, -0.0006387577159330249, -0.0025102554354816675, -0.14486533403396606, -0.006492947693914175, -0.0037904575001448393, -0.7600932717323303, -1.4305104514278355e-06, -1.0728830375228426e-06, -6.627816765103489e-05, -0.00025376438861712813, -0.06288988888263702], "finish_reason": "stop"}], "metrics": {"energy": 46.76453067016602, "energy_per_token": 0.8660098272252966, "time": 2.116963, "time_per_token": 0.03920301851851852}}
